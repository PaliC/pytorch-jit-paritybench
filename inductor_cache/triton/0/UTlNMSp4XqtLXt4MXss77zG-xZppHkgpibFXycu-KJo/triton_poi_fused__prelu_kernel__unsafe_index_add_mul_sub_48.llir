; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__prelu_kernel__unsafe_index_add_mul_sub_48(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 2, !dbg !13
  %18 = or disjoint i32 %16, 512, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %19 = sdiv i32 %.frozen, 64, !dbg !14
  %20 = sdiv i32 %18, 64, !dbg !14
  %21 = srem i32 %19, 64, !dbg !15
  %22 = srem i32 %20, 64, !dbg !15
  %23 = mul i32 %19, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %23, !dbg !16
  %24 = srem i32 %17, 64, !dbg !16
  %25 = sdiv i32 %16, 4096, !dbg !17
  %26 = sdiv i32 %18, 4096, !dbg !17
  %27 = sext i32 %21 to i64, !dbg !18
  %28 = getelementptr i64, ptr addrspace(1) %1, i64 %27, !dbg !18
  %29 = sext i32 %22 to i64, !dbg !18
  %30 = getelementptr i64, ptr addrspace(1) %1, i64 %29, !dbg !18
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !19
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !19
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !19
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !19
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !19
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !19
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !19
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !19
  %39 = sext i32 %.decomposed to i64, !dbg !20
  %40 = getelementptr i64, ptr addrspace(1) %2, i64 %39, !dbg !20
  %41 = sext i32 %24 to i64, !dbg !20
  %42 = getelementptr i64, ptr addrspace(1) %2, i64 %41, !dbg !20
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !21
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !21
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !21
  %46 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !21
  %47 = extractvalue { i64, i64 } %46, 0, !dbg !21
  %48 = extractvalue { i64, i64 } %46, 1, !dbg !21
  %49 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !21
  %50 = extractvalue { i64, i64 } %49, 0, !dbg !21
  %51 = extractvalue { i64, i64 } %49, 1, !dbg !21
  %52 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !21
  %53 = extractvalue { i64, i64 } %52, 0, !dbg !21
  %54 = extractvalue { i64, i64 } %52, 1, !dbg !21
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %4, i1 true) #1, !dbg !22
  %56 = getelementptr i64, ptr addrspace(1) %5, i64 %39, !dbg !23
  %57 = getelementptr i64, ptr addrspace(1) %5, i64 %41, !dbg !23
  %58 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !24
  %59 = extractvalue { i64, i64 } %58, 0, !dbg !24
  %60 = extractvalue { i64, i64 } %58, 1, !dbg !24
  %61 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !24
  %62 = extractvalue { i64, i64 } %61, 0, !dbg !24
  %63 = extractvalue { i64, i64 } %61, 1, !dbg !24
  %64 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !24
  %65 = extractvalue { i64, i64 } %64, 0, !dbg !24
  %66 = extractvalue { i64, i64 } %64, 1, !dbg !24
  %67 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !24
  %68 = extractvalue { i64, i64 } %67, 0, !dbg !24
  %69 = extractvalue { i64, i64 } %67, 1, !dbg !24
  %70 = getelementptr float, ptr addrspace(1) %6, i64 %39, !dbg !25
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !26
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !26
  %81 = getelementptr i64, ptr addrspace(1) %7, i64 %27, !dbg !27
  %82 = getelementptr i64, ptr addrspace(1) %7, i64 %29, !dbg !27
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !28
  %84 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !28
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !28
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !28
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !28
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !28
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !28
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !28
  %91 = getelementptr float, ptr addrspace(1) %8, i64 %27, !dbg !29
  %92 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !29
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !30
  %94 = bitcast i32 %93 to float, !dbg !30
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !30
  %96 = bitcast i32 %95 to float, !dbg !30
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !30
  %98 = bitcast i32 %97 to float, !dbg !30
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !30
  %100 = bitcast i32 %99 to float, !dbg !30
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !30
  %102 = bitcast i32 %101 to float, !dbg !30
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !30
  %104 = bitcast i32 %103 to float, !dbg !30
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !30
  %106 = bitcast i32 %105 to float, !dbg !30
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !30
  %108 = bitcast i32 %107 to float, !dbg !30
  %109 = lshr i64 %31, 58, !dbg !31
  %110 = and i64 %109, 32, !dbg !31
  %111 = add i64 %110, %31, !dbg !31
  %112 = lshr i64 %35, 58, !dbg !31
  %113 = and i64 %112, 32, !dbg !31
  %114 = add i64 %113, %35, !dbg !31
  %115 = lshr i64 %44, 58, !dbg !32
  %116 = and i64 %115, 32, !dbg !32
  %117 = lshr i64 %45, 58, !dbg !32
  %118 = and i64 %117, 32, !dbg !32
  %119 = lshr i64 %47, 58, !dbg !32
  %120 = and i64 %119, 32, !dbg !32
  %121 = lshr i64 %48, 58, !dbg !32
  %122 = and i64 %121, 32, !dbg !32
  %123 = lshr i64 %50, 58, !dbg !32
  %124 = and i64 %123, 32, !dbg !32
  %125 = lshr i64 %51, 58, !dbg !32
  %126 = and i64 %125, 32, !dbg !32
  %127 = lshr i64 %53, 58, !dbg !32
  %128 = and i64 %127, 32, !dbg !32
  %129 = lshr i64 %54, 58, !dbg !32
  %130 = and i64 %129, 32, !dbg !32
  %131 = shl i64 %111, 5, !dbg !33
  %132 = shl i64 %114, 5, !dbg !33
  %133 = shl nsw i32 %25, 10, !dbg !34
  %134 = shl nsw i32 %26, 10, !dbg !34
  %135 = sext i32 %133 to i64, !dbg !35
  %136 = sext i32 %134 to i64, !dbg !35
  %137 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !36
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %116, !dbg !36
  %139 = getelementptr float, ptr addrspace(1) %138, i64 %131, !dbg !36
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %135, !dbg !36
  %141 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !36
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %118, !dbg !36
  %143 = getelementptr float, ptr addrspace(1) %142, i64 %131, !dbg !36
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %135, !dbg !36
  %145 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !36
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %120, !dbg !36
  %147 = getelementptr float, ptr addrspace(1) %146, i64 %131, !dbg !36
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %135, !dbg !36
  %149 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !36
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %122, !dbg !36
  %151 = getelementptr float, ptr addrspace(1) %150, i64 %131, !dbg !36
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %135, !dbg !36
  %153 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !36
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %124, !dbg !36
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %132, !dbg !36
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %136, !dbg !36
  %157 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !36
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %126, !dbg !36
  %159 = getelementptr float, ptr addrspace(1) %158, i64 %132, !dbg !36
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %136, !dbg !36
  %161 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !36
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %128, !dbg !36
  %163 = getelementptr float, ptr addrspace(1) %162, i64 %132, !dbg !36
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %136, !dbg !36
  %165 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !36
  %166 = getelementptr float, ptr addrspace(1) %165, i64 %130, !dbg !36
  %167 = getelementptr float, ptr addrspace(1) %166, i64 %132, !dbg !36
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %136, !dbg !36
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #1, !dbg !37
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !37
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #1, !dbg !37
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #1, !dbg !37
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #1, !dbg !37
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #1, !dbg !37
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 true) #1, !dbg !37
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #1, !dbg !37
  %177 = lshr i64 %59, 58, !dbg !38
  %178 = and i64 %177, 32, !dbg !38
  %179 = lshr i64 %60, 58, !dbg !38
  %180 = and i64 %179, 32, !dbg !38
  %181 = lshr i64 %62, 58, !dbg !38
  %182 = and i64 %181, 32, !dbg !38
  %183 = lshr i64 %63, 58, !dbg !38
  %184 = and i64 %183, 32, !dbg !38
  %185 = lshr i64 %65, 58, !dbg !38
  %186 = and i64 %185, 32, !dbg !38
  %187 = lshr i64 %66, 58, !dbg !38
  %188 = and i64 %187, 32, !dbg !38
  %189 = lshr i64 %68, 58, !dbg !38
  %190 = and i64 %189, 32, !dbg !38
  %191 = lshr i64 %69, 58, !dbg !38
  %192 = and i64 %191, 32, !dbg !38
  %193 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !39
  %194 = getelementptr float, ptr addrspace(1) %193, i64 %178, !dbg !39
  %195 = getelementptr float, ptr addrspace(1) %194, i64 %131, !dbg !39
  %196 = getelementptr float, ptr addrspace(1) %195, i64 %135, !dbg !39
  %197 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !39
  %198 = getelementptr float, ptr addrspace(1) %197, i64 %180, !dbg !39
  %199 = getelementptr float, ptr addrspace(1) %198, i64 %131, !dbg !39
  %200 = getelementptr float, ptr addrspace(1) %199, i64 %135, !dbg !39
  %201 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !39
  %202 = getelementptr float, ptr addrspace(1) %201, i64 %182, !dbg !39
  %203 = getelementptr float, ptr addrspace(1) %202, i64 %131, !dbg !39
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %135, !dbg !39
  %205 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !39
  %206 = getelementptr float, ptr addrspace(1) %205, i64 %184, !dbg !39
  %207 = getelementptr float, ptr addrspace(1) %206, i64 %131, !dbg !39
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %135, !dbg !39
  %209 = getelementptr float, ptr addrspace(1) %3, i64 %65, !dbg !39
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %186, !dbg !39
  %211 = getelementptr float, ptr addrspace(1) %210, i64 %132, !dbg !39
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %136, !dbg !39
  %213 = getelementptr float, ptr addrspace(1) %3, i64 %66, !dbg !39
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %188, !dbg !39
  %215 = getelementptr float, ptr addrspace(1) %214, i64 %132, !dbg !39
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %136, !dbg !39
  %217 = getelementptr float, ptr addrspace(1) %3, i64 %68, !dbg !39
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %190, !dbg !39
  %219 = getelementptr float, ptr addrspace(1) %218, i64 %132, !dbg !39
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %136, !dbg !39
  %221 = getelementptr float, ptr addrspace(1) %3, i64 %69, !dbg !39
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %192, !dbg !39
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %132, !dbg !39
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %136, !dbg !39
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %196, i1 true) #1, !dbg !40
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 true) #1, !dbg !40
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 true) #1, !dbg !40
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 true) #1, !dbg !40
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %212, i1 true) #1, !dbg !40
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 true) #1, !dbg !40
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 true) #1, !dbg !40
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 true) #1, !dbg !40
  %233 = lshr i64 %83, 58, !dbg !41
  %234 = and i64 %233, 32, !dbg !41
  %235 = add i64 %234, %83, !dbg !41
  %236 = lshr i64 %87, 58, !dbg !41
  %237 = and i64 %236, 32, !dbg !41
  %238 = add i64 %237, %87, !dbg !41
  %239 = shl i64 %235, 5, !dbg !42
  %240 = shl i64 %238, 5, !dbg !42
  %241 = getelementptr float, ptr addrspace(1) %138, i64 %239, !dbg !43
  %242 = getelementptr float, ptr addrspace(1) %241, i64 %135, !dbg !43
  %243 = getelementptr float, ptr addrspace(1) %142, i64 %239, !dbg !43
  %244 = getelementptr float, ptr addrspace(1) %243, i64 %135, !dbg !43
  %245 = getelementptr float, ptr addrspace(1) %146, i64 %239, !dbg !43
  %246 = getelementptr float, ptr addrspace(1) %245, i64 %135, !dbg !43
  %247 = getelementptr float, ptr addrspace(1) %150, i64 %239, !dbg !43
  %248 = getelementptr float, ptr addrspace(1) %247, i64 %135, !dbg !43
  %249 = getelementptr float, ptr addrspace(1) %154, i64 %240, !dbg !43
  %250 = getelementptr float, ptr addrspace(1) %249, i64 %136, !dbg !43
  %251 = getelementptr float, ptr addrspace(1) %158, i64 %240, !dbg !43
  %252 = getelementptr float, ptr addrspace(1) %251, i64 %136, !dbg !43
  %253 = getelementptr float, ptr addrspace(1) %162, i64 %240, !dbg !43
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %136, !dbg !43
  %255 = getelementptr float, ptr addrspace(1) %166, i64 %240, !dbg !43
  %256 = getelementptr float, ptr addrspace(1) %255, i64 %136, !dbg !43
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 true) #1, !dbg !44
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #1, !dbg !44
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 true) #1, !dbg !44
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %248, i1 true) #1, !dbg !44
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %250, i1 true) #1, !dbg !44
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 true) #1, !dbg !44
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 true) #1, !dbg !44
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 true) #1, !dbg !44
  %265 = getelementptr float, ptr addrspace(1) %194, i64 %239, !dbg !45
  %266 = getelementptr float, ptr addrspace(1) %265, i64 %135, !dbg !45
  %267 = getelementptr float, ptr addrspace(1) %198, i64 %239, !dbg !45
  %268 = getelementptr float, ptr addrspace(1) %267, i64 %135, !dbg !45
  %269 = getelementptr float, ptr addrspace(1) %202, i64 %239, !dbg !45
  %270 = getelementptr float, ptr addrspace(1) %269, i64 %135, !dbg !45
  %271 = getelementptr float, ptr addrspace(1) %206, i64 %239, !dbg !45
  %272 = getelementptr float, ptr addrspace(1) %271, i64 %135, !dbg !45
  %273 = getelementptr float, ptr addrspace(1) %210, i64 %240, !dbg !45
  %274 = getelementptr float, ptr addrspace(1) %273, i64 %136, !dbg !45
  %275 = getelementptr float, ptr addrspace(1) %214, i64 %240, !dbg !45
  %276 = getelementptr float, ptr addrspace(1) %275, i64 %136, !dbg !45
  %277 = getelementptr float, ptr addrspace(1) %218, i64 %240, !dbg !45
  %278 = getelementptr float, ptr addrspace(1) %277, i64 %136, !dbg !45
  %279 = getelementptr float, ptr addrspace(1) %222, i64 %240, !dbg !45
  %280 = getelementptr float, ptr addrspace(1) %279, i64 %136, !dbg !45
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %266, i1 true) #1, !dbg !46
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %268, i1 true) #1, !dbg !46
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #1, !dbg !46
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %272, i1 true) #1, !dbg !46
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %274, i1 true) #1, !dbg !46
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 true) #1, !dbg !46
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 true) #1, !dbg !46
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %280, i1 true) #1, !dbg !46
  %289 = insertelement <2 x i32> poison, i32 %257, i64 0, !dbg !44
  %290 = insertelement <2 x i32> %289, i32 %169, i64 1, !dbg !44
  %291 = bitcast <2 x i32> %290 to <2 x float>, !dbg !44
  %292 = fcmp ogt <2 x float> %291, zeroinitializer, !dbg !47
  %293 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !48
  %294 = bitcast <2 x i32> %293 to <2 x float>, !dbg !48
  %295 = shufflevector <2 x float> %294, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !48
  %296 = fmul <2 x float> %295, %291, !dbg !48
  %297 = select <2 x i1> %292, <2 x float> %291, <2 x float> %296, !dbg !49
  %298 = insertelement <2 x i32> poison, i32 %281, i64 0, !dbg !46
  %299 = insertelement <2 x i32> %298, i32 %225, i64 1, !dbg !46
  %300 = bitcast <2 x i32> %299 to <2 x float>, !dbg !46
  %301 = fcmp ogt <2 x float> %300, zeroinitializer, !dbg !50
  %302 = fmul <2 x float> %295, %300, !dbg !51
  %303 = select <2 x i1> %301, <2 x float> %300, <2 x float> %302, !dbg !52
  %304 = fsub <2 x float> %303, %297, !dbg !53
  %305 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !54
  %306 = bitcast <2 x i32> %305 to <2 x float>, !dbg !54
  %307 = shufflevector <2 x float> %306, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %308 = fmul <2 x float> %304, %307, !dbg !54
  %309 = fadd <2 x float> %297, %308, !dbg !55
  %310 = insertelement <2 x i32> poison, i32 %258, i64 0, !dbg !44
  %311 = insertelement <2 x i32> %310, i32 %170, i64 1, !dbg !44
  %312 = bitcast <2 x i32> %311 to <2 x float>, !dbg !44
  %313 = fcmp ogt <2 x float> %312, zeroinitializer, !dbg !47
  %314 = fmul <2 x float> %295, %312, !dbg !48
  %315 = select <2 x i1> %313, <2 x float> %312, <2 x float> %314, !dbg !49
  %316 = insertelement <2 x i32> poison, i32 %282, i64 0, !dbg !46
  %317 = insertelement <2 x i32> %316, i32 %226, i64 1, !dbg !46
  %318 = bitcast <2 x i32> %317 to <2 x float>, !dbg !46
  %319 = fcmp ogt <2 x float> %318, zeroinitializer, !dbg !50
  %320 = fmul <2 x float> %295, %318, !dbg !51
  %321 = select <2 x i1> %319, <2 x float> %318, <2 x float> %320, !dbg !52
  %322 = fsub <2 x float> %321, %315, !dbg !53
  %323 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !54
  %324 = bitcast <2 x i32> %323 to <2 x float>, !dbg !54
  %325 = shufflevector <2 x float> %324, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %326 = fmul <2 x float> %322, %325, !dbg !54
  %327 = fadd <2 x float> %315, %326, !dbg !55
  %328 = insertelement <2 x i32> poison, i32 %259, i64 0, !dbg !44
  %329 = insertelement <2 x i32> %328, i32 %171, i64 1, !dbg !44
  %330 = bitcast <2 x i32> %329 to <2 x float>, !dbg !44
  %331 = fcmp ogt <2 x float> %330, zeroinitializer, !dbg !47
  %332 = fmul <2 x float> %295, %330, !dbg !48
  %333 = select <2 x i1> %331, <2 x float> %330, <2 x float> %332, !dbg !49
  %334 = insertelement <2 x i32> poison, i32 %283, i64 0, !dbg !46
  %335 = insertelement <2 x i32> %334, i32 %227, i64 1, !dbg !46
  %336 = bitcast <2 x i32> %335 to <2 x float>, !dbg !46
  %337 = fcmp ogt <2 x float> %336, zeroinitializer, !dbg !50
  %338 = fmul <2 x float> %295, %336, !dbg !51
  %339 = select <2 x i1> %337, <2 x float> %336, <2 x float> %338, !dbg !52
  %340 = fsub <2 x float> %339, %333, !dbg !53
  %341 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !54
  %342 = bitcast <2 x i32> %341 to <2 x float>, !dbg !54
  %343 = shufflevector <2 x float> %342, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %344 = fmul <2 x float> %340, %343, !dbg !54
  %345 = fadd <2 x float> %333, %344, !dbg !55
  %346 = insertelement <2 x i32> poison, i32 %260, i64 0, !dbg !44
  %347 = insertelement <2 x i32> %346, i32 %172, i64 1, !dbg !44
  %348 = bitcast <2 x i32> %347 to <2 x float>, !dbg !44
  %349 = fcmp ogt <2 x float> %348, zeroinitializer, !dbg !47
  %350 = fmul <2 x float> %295, %348, !dbg !48
  %351 = select <2 x i1> %349, <2 x float> %348, <2 x float> %350, !dbg !49
  %352 = insertelement <2 x i32> poison, i32 %284, i64 0, !dbg !46
  %353 = insertelement <2 x i32> %352, i32 %228, i64 1, !dbg !46
  %354 = bitcast <2 x i32> %353 to <2 x float>, !dbg !46
  %355 = fcmp ogt <2 x float> %354, zeroinitializer, !dbg !50
  %356 = fmul <2 x float> %295, %354, !dbg !51
  %357 = select <2 x i1> %355, <2 x float> %354, <2 x float> %356, !dbg !52
  %358 = fsub <2 x float> %357, %351, !dbg !53
  %359 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !54
  %360 = bitcast <2 x i32> %359 to <2 x float>, !dbg !54
  %361 = shufflevector <2 x float> %360, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %362 = fmul <2 x float> %358, %361, !dbg !54
  %363 = fadd <2 x float> %351, %362, !dbg !55
  %364 = insertelement <2 x i32> poison, i32 %261, i64 0, !dbg !44
  %365 = insertelement <2 x i32> %364, i32 %173, i64 1, !dbg !44
  %366 = bitcast <2 x i32> %365 to <2 x float>, !dbg !44
  %367 = fcmp ogt <2 x float> %366, zeroinitializer, !dbg !47
  %368 = fmul <2 x float> %295, %366, !dbg !48
  %369 = select <2 x i1> %367, <2 x float> %366, <2 x float> %368, !dbg !49
  %370 = insertelement <2 x i32> poison, i32 %285, i64 0, !dbg !46
  %371 = insertelement <2 x i32> %370, i32 %229, i64 1, !dbg !46
  %372 = bitcast <2 x i32> %371 to <2 x float>, !dbg !46
  %373 = fcmp ogt <2 x float> %372, zeroinitializer, !dbg !50
  %374 = fmul <2 x float> %295, %372, !dbg !51
  %375 = select <2 x i1> %373, <2 x float> %372, <2 x float> %374, !dbg !52
  %376 = fsub <2 x float> %375, %369, !dbg !53
  %377 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !54
  %378 = bitcast <2 x i32> %377 to <2 x float>, !dbg !54
  %379 = shufflevector <2 x float> %378, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %380 = fmul <2 x float> %376, %379, !dbg !54
  %381 = fadd <2 x float> %369, %380, !dbg !55
  %382 = insertelement <2 x i32> poison, i32 %262, i64 0, !dbg !44
  %383 = insertelement <2 x i32> %382, i32 %174, i64 1, !dbg !44
  %384 = bitcast <2 x i32> %383 to <2 x float>, !dbg !44
  %385 = fcmp ogt <2 x float> %384, zeroinitializer, !dbg !47
  %386 = fmul <2 x float> %295, %384, !dbg !48
  %387 = select <2 x i1> %385, <2 x float> %384, <2 x float> %386, !dbg !49
  %388 = insertelement <2 x i32> poison, i32 %286, i64 0, !dbg !46
  %389 = insertelement <2 x i32> %388, i32 %230, i64 1, !dbg !46
  %390 = bitcast <2 x i32> %389 to <2 x float>, !dbg !46
  %391 = fcmp ogt <2 x float> %390, zeroinitializer, !dbg !50
  %392 = fmul <2 x float> %295, %390, !dbg !51
  %393 = select <2 x i1> %391, <2 x float> %390, <2 x float> %392, !dbg !52
  %394 = fsub <2 x float> %393, %387, !dbg !53
  %395 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !54
  %396 = bitcast <2 x i32> %395 to <2 x float>, !dbg !54
  %397 = shufflevector <2 x float> %396, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %398 = fmul <2 x float> %394, %397, !dbg !54
  %399 = fadd <2 x float> %387, %398, !dbg !55
  %400 = insertelement <2 x i32> poison, i32 %263, i64 0, !dbg !44
  %401 = insertelement <2 x i32> %400, i32 %175, i64 1, !dbg !44
  %402 = bitcast <2 x i32> %401 to <2 x float>, !dbg !44
  %403 = fcmp ogt <2 x float> %402, zeroinitializer, !dbg !47
  %404 = fmul <2 x float> %295, %402, !dbg !48
  %405 = select <2 x i1> %403, <2 x float> %402, <2 x float> %404, !dbg !49
  %406 = insertelement <2 x i32> poison, i32 %287, i64 0, !dbg !46
  %407 = insertelement <2 x i32> %406, i32 %231, i64 1, !dbg !46
  %408 = bitcast <2 x i32> %407 to <2 x float>, !dbg !46
  %409 = fcmp ogt <2 x float> %408, zeroinitializer, !dbg !50
  %410 = fmul <2 x float> %295, %408, !dbg !51
  %411 = select <2 x i1> %409, <2 x float> %408, <2 x float> %410, !dbg !52
  %412 = fsub <2 x float> %411, %405, !dbg !53
  %413 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !54
  %414 = bitcast <2 x i32> %413 to <2 x float>, !dbg !54
  %415 = shufflevector <2 x float> %414, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %416 = fmul <2 x float> %412, %415, !dbg !54
  %417 = fadd <2 x float> %405, %416, !dbg !55
  %418 = insertelement <2 x i32> poison, i32 %264, i64 0, !dbg !44
  %419 = insertelement <2 x i32> %418, i32 %176, i64 1, !dbg !44
  %420 = bitcast <2 x i32> %419 to <2 x float>, !dbg !44
  %421 = fcmp ogt <2 x float> %420, zeroinitializer, !dbg !47
  %422 = fmul <2 x float> %295, %420, !dbg !48
  %423 = select <2 x i1> %421, <2 x float> %420, <2 x float> %422, !dbg !49
  %424 = insertelement <2 x i32> poison, i32 %288, i64 0, !dbg !46
  %425 = insertelement <2 x i32> %424, i32 %232, i64 1, !dbg !46
  %426 = bitcast <2 x i32> %425 to <2 x float>, !dbg !46
  %427 = fcmp ogt <2 x float> %426, zeroinitializer, !dbg !50
  %428 = fmul <2 x float> %295, %426, !dbg !51
  %429 = select <2 x i1> %427, <2 x float> %426, <2 x float> %428, !dbg !52
  %430 = fsub <2 x float> %429, %423, !dbg !53
  %431 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !54
  %432 = bitcast <2 x i32> %431 to <2 x float>, !dbg !54
  %433 = shufflevector <2 x float> %432, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %434 = fmul <2 x float> %430, %433, !dbg !54
  %435 = fadd <2 x float> %423, %434, !dbg !55
  %436 = extractelement <2 x float> %309, i64 0, !dbg !56
  %437 = extractelement <2 x float> %309, i64 1, !dbg !57
  %438 = fsub float %436, %437, !dbg !56
  %439 = extractelement <2 x float> %327, i64 0, !dbg !56
  %440 = extractelement <2 x float> %327, i64 1, !dbg !57
  %441 = fsub float %439, %440, !dbg !56
  %442 = extractelement <2 x float> %345, i64 0, !dbg !56
  %443 = extractelement <2 x float> %345, i64 1, !dbg !57
  %444 = fsub float %442, %443, !dbg !56
  %445 = extractelement <2 x float> %363, i64 0, !dbg !56
  %446 = extractelement <2 x float> %363, i64 1, !dbg !57
  %447 = fsub float %445, %446, !dbg !56
  %448 = extractelement <2 x float> %381, i64 0, !dbg !56
  %449 = extractelement <2 x float> %381, i64 1, !dbg !57
  %450 = fsub float %448, %449, !dbg !56
  %451 = extractelement <2 x float> %399, i64 0, !dbg !56
  %452 = extractelement <2 x float> %399, i64 1, !dbg !57
  %453 = fsub float %451, %452, !dbg !56
  %454 = extractelement <2 x float> %417, i64 0, !dbg !56
  %455 = extractelement <2 x float> %417, i64 1, !dbg !57
  %456 = fsub float %454, %455, !dbg !56
  %457 = extractelement <2 x float> %435, i64 0, !dbg !56
  %458 = extractelement <2 x float> %435, i64 1, !dbg !57
  %459 = fsub float %457, %458, !dbg !56
  %460 = fmul float %438, %94, !dbg !58
  %461 = fmul float %441, %96, !dbg !58
  %462 = fmul float %444, %98, !dbg !58
  %463 = fmul float %447, %100, !dbg !58
  %464 = fmul float %450, %102, !dbg !58
  %465 = fmul float %453, %104, !dbg !58
  %466 = fmul float %456, %106, !dbg !58
  %467 = fmul float %459, %108, !dbg !58
  %468 = fadd float %437, %460, !dbg !57
  %469 = fadd float %440, %461, !dbg !57
  %470 = fadd float %443, %462, !dbg !57
  %471 = fadd float %446, %463, !dbg !57
  %472 = fadd float %449, %464, !dbg !57
  %473 = fadd float %452, %465, !dbg !57
  %474 = fadd float %455, %466, !dbg !57
  %475 = fadd float %458, %467, !dbg !57
  %476 = sext i32 %16 to i64, !dbg !59
  %477 = getelementptr float, ptr addrspace(1) %0, i64 %476, !dbg !59
  %478 = sext i32 %18 to i64, !dbg !59
  %479 = getelementptr float, ptr addrspace(1) %0, i64 %478, !dbg !59
  %480 = bitcast float %468 to i32, !dbg !60
  %481 = bitcast float %469 to i32, !dbg !60
  %482 = bitcast float %470 to i32, !dbg !60
  %483 = bitcast float %471 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %480, i32 %481, i32 %482, i32 %483, ptr addrspace(1) %477, i1 true) #1, !dbg !60
  %484 = bitcast float %472 to i32, !dbg !60
  %485 = bitcast float %473 to i32, !dbg !60
  %486 = bitcast float %474 to i32, !dbg !60
  %487 = bitcast float %475 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %484, i32 %485, i32 %486, i32 %487, ptr addrspace(1) %479, i1 true) #1, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2xy52gi7a4sbqxxlfqapclrqvmx6dxxb7tjfy74txjcskr4d2zi.py", directory: "inductor_cache/2x")
!4 = !{ptr @triton_poi_fused__prelu_kernel__unsafe_index_add_mul_sub_48, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__prelu_kernel__unsafe_index_add_mul_sub_48, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__prelu_kernel__unsafe_index_add_mul_sub_48", linkageName: "triton_poi_fused__prelu_kernel__unsafe_index_add_mul_sub_48", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 20, scope: !7)
!23 = !DILocation(line: 32, column: 31, scope: !7)
!24 = !DILocation(line: 32, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 31, scope: !7)
!28 = !DILocation(line: 34, column: 36, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 32, scope: !7)
!32 = !DILocation(line: 42, column: 32, scope: !7)
!33 = !DILocation(line: 43, column: 40, scope: !7)
!34 = !DILocation(line: 43, column: 52, scope: !7)
!35 = !DILocation(line: 43, column: 47, scope: !7)
!36 = !DILocation(line: 43, column: 30, scope: !7)
!37 = !DILocation(line: 43, column: 57, scope: !7)
!38 = !DILocation(line: 50, column: 35, scope: !7)
!39 = !DILocation(line: 51, column: 31, scope: !7)
!40 = !DILocation(line: 51, column: 59, scope: !7)
!41 = !DILocation(line: 60, column: 35, scope: !7)
!42 = !DILocation(line: 61, column: 41, scope: !7)
!43 = !DILocation(line: 61, column: 31, scope: !7)
!44 = !DILocation(line: 61, column: 59, scope: !7)
!45 = !DILocation(line: 65, column: 31, scope: !7)
!46 = !DILocation(line: 65, column: 60, scope: !7)
!47 = !DILocation(line: 62, column: 20, scope: !7)
!48 = !DILocation(line: 63, column: 20, scope: !7)
!49 = !DILocation(line: 64, column: 35, scope: !7)
!50 = !DILocation(line: 66, column: 20, scope: !7)
!51 = !DILocation(line: 67, column: 20, scope: !7)
!52 = !DILocation(line: 68, column: 35, scope: !7)
!53 = !DILocation(line: 69, column: 20, scope: !7)
!54 = !DILocation(line: 70, column: 20, scope: !7)
!55 = !DILocation(line: 71, column: 20, scope: !7)
!56 = !DILocation(line: 72, column: 20, scope: !7)
!57 = !DILocation(line: 74, column: 20, scope: !7)
!58 = !DILocation(line: 73, column: 20, scope: !7)
!59 = !DILocation(line: 75, column: 28, scope: !7)
!60 = !DILocation(line: 75, column: 40, scope: !7)
!61 = !DILocation(line: 75, column: 4, scope: !7)
