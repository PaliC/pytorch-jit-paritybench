; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %14 = and i32 %12, 252, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %15, 64, !dbg !13
  %17 = or disjoint i32 %15, 128, !dbg !13
  %18 = or disjoint i32 %15, 192, !dbg !13
  %19 = or disjoint i32 %8, %14, !dbg !13
  %20 = icmp slt i32 %15, 512, !dbg !14
  %21 = icmp slt i32 %16, 512, !dbg !14
  %22 = icmp slt i32 %17, 512, !dbg !14
  %23 = icmp slt i32 %18, 512, !dbg !14
  %24 = icmp slt i32 %19, 512, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %26 = shl i32 %25, 4, !dbg !16
  %.lobit12 = lshr i32 %9, 6, !dbg !17
  %27 = and i32 %.lobit12, 3, !dbg !17
  %28 = or disjoint i32 %26, %27, !dbg !18
  %29 = or disjoint i32 %28, 4, !dbg !18
  %30 = or disjoint i32 %28, 8, !dbg !18
  %31 = or disjoint i32 %28, 12, !dbg !18
  %32 = or disjoint i32 %26, %13, !dbg !18
  %33 = icmp slt i32 %28, 16, !dbg !19
  %34 = icmp slt i32 %29, 16, !dbg !19
  %35 = icmp slt i32 %30, 16, !dbg !19
  %36 = icmp slt i32 %31, 16, !dbg !19
  %37 = icmp slt i32 %32, 16, !dbg !19
  %.frozen = freeze i32 %28, !dbg !20
  %38 = sdiv i32 %.frozen, 4, !dbg !20
  %39 = sdiv i32 %29, 4, !dbg !20
  %40 = sdiv i32 %30, 4, !dbg !20
  %41 = sdiv i32 %31, 4, !dbg !20
  %42 = mul i32 %38, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %42, !dbg !21
  %.frozen25 = freeze i32 %19, !dbg !22
  %43 = sdiv i32 %.frozen25, 128, !dbg !22
  %44 = mul i32 %43, 128, !dbg !23
  %.decomposed26 = sub i32 %.frozen25, %44, !dbg !23
  %45 = sext i32 %38 to i64, !dbg !24
  %46 = getelementptr i64, ptr addrspace(1) %0, i64 %45, !dbg !24
  %47 = sext i32 %39 to i64, !dbg !24
  %48 = getelementptr i64, ptr addrspace(1) %0, i64 %47, !dbg !24
  %49 = sext i32 %40 to i64, !dbg !24
  %50 = getelementptr i64, ptr addrspace(1) %0, i64 %49, !dbg !24
  %51 = sext i32 %41 to i64, !dbg !24
  %52 = getelementptr i64, ptr addrspace(1) %0, i64 %51, !dbg !24
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 %33) #2, !dbg !25
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 %33) #2, !dbg !25
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 %33) #2, !dbg !25
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 %33) #2, !dbg !25
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 %34) #2, !dbg !25
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 %34) #2, !dbg !25
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 %34) #2, !dbg !25
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 %34) #2, !dbg !25
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 %35) #2, !dbg !25
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 %35) #2, !dbg !25
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 %35) #2, !dbg !25
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 %35) #2, !dbg !25
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 %36) #2, !dbg !25
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 %36) #2, !dbg !25
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 %36) #2, !dbg !25
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 %36) #2, !dbg !25
  %69 = sext i32 %.decomposed to i64, !dbg !26
  %70 = getelementptr i64, ptr addrspace(1) %0, i64 %69, !dbg !26
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %33) #2, !dbg !27
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %33) #2, !dbg !27
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %33) #2, !dbg !27
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %33) #2, !dbg !27
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %34) #2, !dbg !27
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %34) #2, !dbg !27
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %34) #2, !dbg !27
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %34) #2, !dbg !27
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %35) #2, !dbg !27
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %35) #2, !dbg !27
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %35) #2, !dbg !27
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %35) #2, !dbg !27
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %36) #2, !dbg !27
  %84 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %36) #2, !dbg !27
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %36) #2, !dbg !27
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %36) #2, !dbg !27
  %87 = shl i32 %15, 4, !dbg !28
  %88 = shl i32 %16, 4, !dbg !28
  %89 = shl i32 %17, 4, !dbg !28
  %90 = shl i32 %18, 4, !dbg !28
  %91 = add i32 %32, %87, !dbg !29
  %92 = add i32 %32, %88, !dbg !29
  %93 = add i32 %32, %89, !dbg !29
  %94 = add i32 %32, %90, !dbg !29
  %95 = sext i32 %91 to i64, !dbg !30
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !30
  %97 = sext i32 %92 to i64, !dbg !30
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !30
  %99 = sext i32 %93 to i64, !dbg !30
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !30
  %101 = sext i32 %94 to i64, !dbg !30
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !30
  %103 = and i1 %20, %37, !dbg !31
  %104 = and i1 %21, %37, !dbg !31
  %105 = and i1 %22, %37, !dbg !31
  %106 = and i1 %23, %37, !dbg !31
  %107 = and i1 %24, %33, !dbg !31
  %108 = and i1 %34, %24, !dbg !31
  %109 = and i1 %35, %24, !dbg !31
  %110 = and i1 %36, %24, !dbg !31
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %103) #2, !dbg !32
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !32
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !32
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !32
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !32
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 %104) #2, !dbg !32
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !32
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !32
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !32
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !32
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %105) #2, !dbg !32
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !32
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !32
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !32
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !32
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %106) #2, !dbg !32
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !32
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !32
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !32
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !32
  %131 = shl i32 %9, 10, !dbg !32
  %132 = and i32 %131, 3072, !dbg !32
  %133 = or disjoint i32 %132, %11, !dbg !32
  %134 = and i32 %12, 1020, !dbg !32
  %135 = lshr exact i32 %132, 4, !dbg !32
  %136 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %135, !dbg !32
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %133, !dbg !32
  %138 = insertelement <1 x i32> poison, i32 %112, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #2, !dbg !32
  %139 = or disjoint i32 %133, 256, !dbg !32
  %140 = lshr i32 %139, 6, !dbg !32
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %140, !dbg !32
  %142 = getelementptr float, ptr addrspace(3) %141, i32 %139, !dbg !32
  %143 = insertelement <1 x i32> poison, i32 %113, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #2, !dbg !32
  %144 = or disjoint i32 %133, 512, !dbg !32
  %145 = lshr i32 %144, 6, !dbg !32
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !32
  %147 = getelementptr float, ptr addrspace(3) %146, i32 %144, !dbg !32
  %148 = insertelement <1 x i32> poison, i32 %114, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !32
  %149 = or disjoint i32 %133, 768, !dbg !32
  %150 = lshr i32 %149, 6, !dbg !32
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %150, !dbg !32
  %152 = getelementptr float, ptr addrspace(3) %151, i32 %149, !dbg !32
  %153 = insertelement <1 x i32> poison, i32 %115, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !32
  %154 = or disjoint i32 %133, 64, !dbg !32
  %155 = getelementptr float, ptr addrspace(3) %136, i32 %154, !dbg !32
  %156 = insertelement <1 x i32> poison, i32 %117, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #2, !dbg !32
  %157 = or disjoint i32 %133, 320, !dbg !32
  %158 = lshr i32 %157, 6, !dbg !32
  %159 = and i32 %158, 52, !dbg !32
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %159, !dbg !32
  %161 = getelementptr float, ptr addrspace(3) %160, i32 %157, !dbg !32
  %162 = insertelement <1 x i32> poison, i32 %118, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 true) #2, !dbg !32
  %163 = or disjoint i32 %133, 576, !dbg !32
  %164 = lshr i32 %163, 6, !dbg !32
  %165 = and i32 %164, 56, !dbg !32
  %166 = getelementptr float, ptr addrspace(3) @global_smem, i32 %165, !dbg !32
  %167 = getelementptr float, ptr addrspace(3) %166, i32 %163, !dbg !32
  %168 = insertelement <1 x i32> poison, i32 %119, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %168, i1 true) #2, !dbg !32
  %169 = or disjoint i32 %133, 832, !dbg !32
  %170 = lshr i32 %169, 6, !dbg !32
  %171 = and i32 %170, 60, !dbg !32
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %171, !dbg !32
  %173 = getelementptr float, ptr addrspace(3) %172, i32 %169, !dbg !32
  %174 = insertelement <1 x i32> poison, i32 %120, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #2, !dbg !32
  %175 = or disjoint i32 %133, 128, !dbg !32
  %176 = getelementptr float, ptr addrspace(3) %136, i32 %175, !dbg !32
  %177 = insertelement <1 x i32> poison, i32 %122, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #2, !dbg !32
  %178 = or disjoint i32 %133, 384, !dbg !32
  %179 = lshr i32 %178, 6, !dbg !32
  %180 = and i32 %179, 52, !dbg !32
  %181 = getelementptr float, ptr addrspace(3) @global_smem, i32 %180, !dbg !32
  %182 = getelementptr float, ptr addrspace(3) %181, i32 %178, !dbg !32
  %183 = insertelement <1 x i32> poison, i32 %123, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #2, !dbg !32
  %184 = or disjoint i32 %133, 640, !dbg !32
  %185 = lshr i32 %184, 6, !dbg !32
  %186 = and i32 %185, 56, !dbg !32
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i32 %186, !dbg !32
  %188 = getelementptr float, ptr addrspace(3) %187, i32 %184, !dbg !32
  %189 = insertelement <1 x i32> poison, i32 %124, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %189, i1 true) #2, !dbg !32
  %190 = or disjoint i32 %133, 896, !dbg !32
  %191 = lshr i32 %190, 6, !dbg !32
  %192 = and i32 %191, 60, !dbg !32
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i32 %192, !dbg !32
  %194 = getelementptr float, ptr addrspace(3) %193, i32 %190, !dbg !32
  %195 = insertelement <1 x i32> poison, i32 %125, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #2, !dbg !32
  %196 = or disjoint i32 %133, 192, !dbg !32
  %197 = getelementptr float, ptr addrspace(3) %136, i32 %196, !dbg !32
  %198 = insertelement <1 x i32> poison, i32 %127, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #2, !dbg !32
  %199 = or disjoint i32 %133, 448, !dbg !32
  %200 = lshr i32 %199, 6, !dbg !32
  %201 = and i32 %200, 52, !dbg !32
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i32 %201, !dbg !32
  %203 = getelementptr float, ptr addrspace(3) %202, i32 %199, !dbg !32
  %204 = insertelement <1 x i32> poison, i32 %128, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 true) #2, !dbg !32
  %205 = or disjoint i32 %133, 704, !dbg !32
  %206 = lshr i32 %205, 6, !dbg !32
  %207 = and i32 %206, 56, !dbg !32
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i32 %207, !dbg !32
  %209 = getelementptr float, ptr addrspace(3) %208, i32 %205, !dbg !32
  %210 = insertelement <1 x i32> poison, i32 %129, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #2, !dbg !32
  %211 = or disjoint i32 %133, 960, !dbg !32
  %212 = lshr i32 %211, 6, !dbg !32
  %213 = and i32 %212, 60, !dbg !32
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i32 %213, !dbg !32
  %215 = getelementptr float, ptr addrspace(3) %214, i32 %211, !dbg !32
  %216 = insertelement <1 x i32> poison, i32 %130, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %217 = lshr i32 %12, 6, !dbg !32
  %218 = and i32 %217, 12, !dbg !32
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %218, !dbg !32
  %220 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %134, !dbg !32
  %221 = load float, ptr addrspace(3) %220, align 16, !dbg !32
  %222 = getelementptr inbounds i8, ptr addrspace(3) %220, i32 4, !dbg !32
  %223 = load float, ptr addrspace(3) %222, align 4, !dbg !32
  %224 = getelementptr inbounds i8, ptr addrspace(3) %220, i32 8, !dbg !32
  %225 = load float, ptr addrspace(3) %224, align 8, !dbg !32
  %226 = getelementptr inbounds i8, ptr addrspace(3) %220, i32 12, !dbg !32
  %227 = load float, ptr addrspace(3) %226, align 4, !dbg !32
  %228 = or disjoint i32 %134, 1024, !dbg !32
  %229 = lshr i32 %228, 6, !dbg !32
  %230 = and i32 %229, 28, !dbg !32
  %231 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %230, !dbg !32
  %232 = getelementptr inbounds float, ptr addrspace(3) %231, i32 %228, !dbg !32
  %233 = load float, ptr addrspace(3) %232, align 16, !dbg !32
  %234 = getelementptr inbounds i8, ptr addrspace(3) %232, i32 4, !dbg !32
  %235 = load float, ptr addrspace(3) %234, align 4, !dbg !32
  %236 = getelementptr inbounds i8, ptr addrspace(3) %232, i32 8, !dbg !32
  %237 = load float, ptr addrspace(3) %236, align 8, !dbg !32
  %238 = getelementptr inbounds i8, ptr addrspace(3) %232, i32 12, !dbg !32
  %239 = load float, ptr addrspace(3) %238, align 4, !dbg !32
  %240 = or disjoint i32 %134, 2048, !dbg !32
  %241 = lshr i32 %240, 6, !dbg !32
  %242 = and i32 %241, 44, !dbg !32
  %243 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %242, !dbg !32
  %244 = getelementptr inbounds float, ptr addrspace(3) %243, i32 %240, !dbg !32
  %245 = load float, ptr addrspace(3) %244, align 16, !dbg !32
  %246 = getelementptr inbounds i8, ptr addrspace(3) %244, i32 4, !dbg !32
  %247 = load float, ptr addrspace(3) %246, align 4, !dbg !32
  %248 = getelementptr inbounds i8, ptr addrspace(3) %244, i32 8, !dbg !32
  %249 = load float, ptr addrspace(3) %248, align 8, !dbg !32
  %250 = getelementptr inbounds i8, ptr addrspace(3) %244, i32 12, !dbg !32
  %251 = load float, ptr addrspace(3) %250, align 4, !dbg !32
  %252 = or disjoint i32 %134, 3072, !dbg !32
  %253 = lshr i32 %252, 6, !dbg !32
  %254 = and i32 %253, 60, !dbg !32
  %255 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %254, !dbg !32
  %256 = getelementptr inbounds float, ptr addrspace(3) %255, i32 %252, !dbg !32
  %257 = load float, ptr addrspace(3) %256, align 16, !dbg !32
  %258 = getelementptr inbounds i8, ptr addrspace(3) %256, i32 4, !dbg !32
  %259 = load float, ptr addrspace(3) %258, align 4, !dbg !32
  %260 = getelementptr inbounds i8, ptr addrspace(3) %256, i32 8, !dbg !32
  %261 = load float, ptr addrspace(3) %260, align 8, !dbg !32
  %262 = getelementptr inbounds i8, ptr addrspace(3) %256, i32 12, !dbg !32
  %263 = load float, ptr addrspace(3) %262, align 4, !dbg !32
  %264 = lshr i64 %56, 57, !dbg !33
  %265 = and i64 %264, 64, !dbg !33
  %266 = add i64 %265, %56, !dbg !33
  %267 = lshr i64 %60, 57, !dbg !33
  %268 = and i64 %267, 64, !dbg !33
  %269 = add i64 %268, %60, !dbg !33
  %270 = lshr i64 %64, 57, !dbg !33
  %271 = and i64 %270, 64, !dbg !33
  %272 = add i64 %271, %64, !dbg !33
  %273 = lshr i64 %68, 57, !dbg !33
  %274 = and i64 %273, 64, !dbg !33
  %275 = add i64 %274, %68, !dbg !33
  %276 = lshr i64 %74, 57, !dbg !34
  %277 = and i64 %276, 64, !dbg !34
  %278 = add i64 %277, %74, !dbg !34
  %279 = lshr i64 %78, 57, !dbg !34
  %280 = and i64 %279, 64, !dbg !34
  %281 = add i64 %280, %78, !dbg !34
  %282 = lshr i64 %82, 57, !dbg !34
  %283 = and i64 %282, 64, !dbg !34
  %284 = add i64 %283, %82, !dbg !34
  %285 = lshr i64 %86, 57, !dbg !34
  %286 = and i64 %285, 64, !dbg !34
  %287 = add i64 %286, %86, !dbg !34
  %288 = sext i32 %.decomposed26 to i64, !dbg !35
  %289 = shl i32 %43, 19, !dbg !36
  %290 = sext i32 %289 to i64, !dbg !37
  %.idx = shl i64 %278, 9, !dbg !38
  %291 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !38
  %292 = getelementptr float, ptr addrspace(1) %291, i64 %288, !dbg !38
  %.idx18 = shl i64 %266, 15, !dbg !38
  %293 = getelementptr i8, ptr addrspace(1) %292, i64 %.idx18, !dbg !38
  %294 = getelementptr float, ptr addrspace(1) %293, i64 %290, !dbg !38
  %.idx19 = shl i64 %281, 9, !dbg !38
  %295 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx19, !dbg !38
  %296 = getelementptr float, ptr addrspace(1) %295, i64 %288, !dbg !38
  %.idx20 = shl i64 %269, 15, !dbg !38
  %297 = getelementptr i8, ptr addrspace(1) %296, i64 %.idx20, !dbg !38
  %298 = getelementptr float, ptr addrspace(1) %297, i64 %290, !dbg !38
  %.idx21 = shl i64 %284, 9, !dbg !38
  %299 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx21, !dbg !38
  %300 = getelementptr float, ptr addrspace(1) %299, i64 %288, !dbg !38
  %.idx22 = shl i64 %272, 15, !dbg !38
  %301 = getelementptr i8, ptr addrspace(1) %300, i64 %.idx22, !dbg !38
  %302 = getelementptr float, ptr addrspace(1) %301, i64 %290, !dbg !38
  %.idx23 = shl i64 %287, 9, !dbg !38
  %303 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx23, !dbg !38
  %304 = getelementptr float, ptr addrspace(1) %303, i64 %288, !dbg !38
  %.idx24 = shl i64 %275, 15, !dbg !38
  %305 = getelementptr i8, ptr addrspace(1) %304, i64 %.idx24, !dbg !38
  %306 = getelementptr float, ptr addrspace(1) %305, i64 %290, !dbg !38
  %307 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %294, i1 %107) #2, !dbg !39
  %308 = extractvalue { i32, i32, i32, i32 } %307, 0, !dbg !39
  %309 = extractvalue { i32, i32, i32, i32 } %307, 1, !dbg !39
  %310 = extractvalue { i32, i32, i32, i32 } %307, 2, !dbg !39
  %311 = extractvalue { i32, i32, i32, i32 } %307, 3, !dbg !39
  %312 = bitcast i32 %308 to float, !dbg !39
  %313 = bitcast i32 %309 to float, !dbg !39
  %314 = bitcast i32 %310 to float, !dbg !39
  %315 = bitcast i32 %311 to float, !dbg !39
  %316 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %298, i1 %108) #2, !dbg !39
  %317 = extractvalue { i32, i32, i32, i32 } %316, 0, !dbg !39
  %318 = extractvalue { i32, i32, i32, i32 } %316, 1, !dbg !39
  %319 = extractvalue { i32, i32, i32, i32 } %316, 2, !dbg !39
  %320 = extractvalue { i32, i32, i32, i32 } %316, 3, !dbg !39
  %321 = bitcast i32 %317 to float, !dbg !39
  %322 = bitcast i32 %318 to float, !dbg !39
  %323 = bitcast i32 %319 to float, !dbg !39
  %324 = bitcast i32 %320 to float, !dbg !39
  %325 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %302, i1 %109) #2, !dbg !39
  %326 = extractvalue { i32, i32, i32, i32 } %325, 0, !dbg !39
  %327 = extractvalue { i32, i32, i32, i32 } %325, 1, !dbg !39
  %328 = extractvalue { i32, i32, i32, i32 } %325, 2, !dbg !39
  %329 = extractvalue { i32, i32, i32, i32 } %325, 3, !dbg !39
  %330 = bitcast i32 %326 to float, !dbg !39
  %331 = bitcast i32 %327 to float, !dbg !39
  %332 = bitcast i32 %328 to float, !dbg !39
  %333 = bitcast i32 %329 to float, !dbg !39
  %334 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %306, i1 %110) #2, !dbg !39
  %335 = extractvalue { i32, i32, i32, i32 } %334, 0, !dbg !39
  %336 = extractvalue { i32, i32, i32, i32 } %334, 1, !dbg !39
  %337 = extractvalue { i32, i32, i32, i32 } %334, 2, !dbg !39
  %338 = extractvalue { i32, i32, i32, i32 } %334, 3, !dbg !39
  %339 = bitcast i32 %335 to float, !dbg !39
  %340 = bitcast i32 %336 to float, !dbg !39
  %341 = bitcast i32 %337 to float, !dbg !39
  %342 = bitcast i32 %338 to float, !dbg !39
  %343 = fadd float %221, %312, !dbg !40
  %344 = fadd float %223, %313, !dbg !40
  %345 = fadd float %225, %314, !dbg !40
  %346 = fadd float %227, %315, !dbg !40
  %347 = fadd float %233, %321, !dbg !40
  %348 = fadd float %235, %322, !dbg !40
  %349 = fadd float %237, %323, !dbg !40
  %350 = fadd float %239, %324, !dbg !40
  %351 = fadd float %245, %330, !dbg !40
  %352 = fadd float %247, %331, !dbg !40
  %353 = fadd float %249, %332, !dbg !40
  %354 = fadd float %251, %333, !dbg !40
  %355 = fadd float %257, %339, !dbg !40
  %356 = fadd float %259, %340, !dbg !40
  %357 = fadd float %261, %341, !dbg !40
  %358 = fadd float %263, %342, !dbg !40
  %359 = shl i32 %28, 7, !dbg !41
  %360 = shl i32 %29, 7, !dbg !41
  %361 = shl i32 %30, 7, !dbg !41
  %362 = shl i32 %31, 7, !dbg !41
  %363 = shl i32 %43, 11, !dbg !42
  %364 = add i32 %363, %.decomposed26, !dbg !43
  %365 = add i32 %364, %359, !dbg !44
  %366 = add i32 %364, %360, !dbg !44
  %367 = add i32 %364, %361, !dbg !44
  %368 = add i32 %364, %362, !dbg !44
  %369 = sext i32 %365 to i64, !dbg !45
  %370 = getelementptr float, ptr addrspace(1) %3, i64 %369, !dbg !45
  %371 = sext i32 %366 to i64, !dbg !45
  %372 = getelementptr float, ptr addrspace(1) %3, i64 %371, !dbg !45
  %373 = sext i32 %367 to i64, !dbg !45
  %374 = getelementptr float, ptr addrspace(1) %3, i64 %373, !dbg !45
  %375 = sext i32 %368 to i64, !dbg !45
  %376 = getelementptr float, ptr addrspace(1) %3, i64 %375, !dbg !45
  %377 = bitcast float %343 to i32, !dbg !46
  %378 = bitcast float %344 to i32, !dbg !46
  %379 = bitcast float %345 to i32, !dbg !46
  %380 = bitcast float %346 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %377, i32 %378, i32 %379, i32 %380, ptr addrspace(1) %370, i1 %107) #2, !dbg !46
  %381 = bitcast float %347 to i32, !dbg !46
  %382 = bitcast float %348 to i32, !dbg !46
  %383 = bitcast float %349 to i32, !dbg !46
  %384 = bitcast float %350 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %381, i32 %382, i32 %383, i32 %384, ptr addrspace(1) %372, i1 %108) #2, !dbg !46
  %385 = bitcast float %351 to i32, !dbg !46
  %386 = bitcast float %352 to i32, !dbg !46
  %387 = bitcast float %353 to i32, !dbg !46
  %388 = bitcast float %354 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %385, i32 %386, i32 %387, i32 %388, ptr addrspace(1) %374, i1 %109) #2, !dbg !46
  %389 = bitcast float %355 to i32, !dbg !46
  %390 = bitcast float %356 to i32, !dbg !46
  %391 = bitcast float %357 to i32, !dbg !46
  %392 = bitcast float %358 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %389, i32 %390, i32 %391, i32 %392, ptr addrspace(1) %376, i1 %110) #2, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv5lqiyv2o7e3u2pkp4yb7derdn4hbss36shhmvaympeuv4wlue5.py", directory: "inductor_cache/v5")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_4", linkageName: "triton_poi_fused__unsafe_index_add_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 30, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 39, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 52, scope: !7)
!32 = !DILocation(line: 36, column: 44, scope: !7)
!33 = !DILocation(line: 40, column: 32, scope: !7)
!34 = !DILocation(line: 43, column: 32, scope: !7)
!35 = !DILocation(line: 44, column: 35, scope: !7)
!36 = !DILocation(line: 44, column: 65, scope: !7)
!37 = !DILocation(line: 44, column: 58, scope: !7)
!38 = !DILocation(line: 44, column: 30, scope: !7)
!39 = !DILocation(line: 44, column: 70, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 34, scope: !7)
!42 = !DILocation(line: 46, column: 44, scope: !7)
!43 = !DILocation(line: 46, column: 30, scope: !7)
!44 = !DILocation(line: 46, column: 39, scope: !7)
!45 = !DILocation(line: 46, column: 25, scope: !7)
!46 = !DILocation(line: 46, column: 56, scope: !7)
!47 = !DILocation(line: 46, column: 4, scope: !7)
