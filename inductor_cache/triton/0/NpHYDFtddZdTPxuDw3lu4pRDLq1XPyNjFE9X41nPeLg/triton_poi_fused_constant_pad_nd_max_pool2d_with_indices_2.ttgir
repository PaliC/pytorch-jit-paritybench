#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_constant_pad_nd_max_pool2d_with_indices_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x64xf32, #blocked> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<256> : tensor<1x64xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<-1> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<0> : tensor<16x1xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<2> : tensor<16x1xi64, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<2> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<-10> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<16> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<4096> : tensor<1x64xi32, #blocked1> loc(#loc1)
    %cst_11 = arith.constant dense<256> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_12 = arith.constant dense<-5> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<-6> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_14 = arith.constant dense<-9> : tensor<16x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<1x64xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<1x64xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<1x64xi32, #blocked1> loc(#loc5)
    %10 = tt.get_program_id x : i32 loc(#loc6)
    %11 = arith.muli %10, %c16_i32 : i32 loc(#loc7)
    %12 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %13 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc8)
    %14 = tt.expand_dims %12 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc8)
    %15 = tt.expand_dims %13 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc8)
    %16 = tt.splat %11 : i32 -> tensor<16x1xi32, #blocked> loc(#loc9)
    %17 = tt.splat %11 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc9)
    %18 = arith.addi %16, %14 : tensor<16x1xi32, #blocked> loc(#loc9)
    %19 = arith.addi %17, %15 : tensor<16x1xi32, #blocked1> loc(#loc9)
    %20 = arith.cmpi slt, %18, %cst_0 : tensor<16x1xi32, #blocked> loc(#loc10)
    %21 = arith.cmpi slt, %19, %cst_1 : tensor<16x1xi32, #blocked1> loc(#loc10)
    %22 = arith.divsi %18, %cst_2 : tensor<16x1xi32, #blocked> loc(#loc11)
    %23 = arith.remsi %18, %cst_2 : tensor<16x1xi32, #blocked> loc(#loc12)
    %24 = arith.remsi %9, %cst_3 : tensor<1x64xi32, #blocked1> loc(#loc13)
    %25 = arith.divsi %9, %cst_3 : tensor<1x64xi32, #blocked1> loc(#loc14)
    %26 = arith.addi %22, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc15)
    %27 = arith.extsi %26 : tensor<16x1xi32, #blocked> to tensor<16x1xi64, #blocked> loc(#loc16)
    %28 = arith.cmpi sge, %27, %cst_5 : tensor<16x1xi64, #blocked> loc(#loc16)
    %29 = arith.cmpi slt, %27, %cst_6 : tensor<16x1xi64, #blocked> loc(#loc17)
    %30 = arith.addi %23, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc18)
    %31 = arith.extsi %30 : tensor<16x1xi32, #blocked> to tensor<16x1xi64, #blocked> loc(#loc19)
    %32 = arith.cmpi sge, %31, %cst_5 : tensor<16x1xi64, #blocked> loc(#loc19)
    %33 = arith.cmpi slt, %31, %cst_6 : tensor<16x1xi64, #blocked> loc(#loc20)
    %34 = arith.andi %28, %29 : tensor<16x1xi1, #blocked> loc(#loc21)
    %35 = arith.andi %34, %32 : tensor<16x1xi1, #blocked> loc(#loc22)
    %36 = arith.andi %35, %33 : tensor<16x1xi1, #blocked> loc(#loc23)
    %37 = arith.muli %18, %cst_7 : tensor<16x1xi32, #blocked> loc(#loc24)
    %38 = arith.addi %37, %cst_8 : tensor<16x1xi32, #blocked> loc(#loc25)
    %39 = arith.muli %8, %cst_9 : tensor<1x64xi32, #blocked> loc(#loc26)
    %40 = tt.broadcast %38 : tensor<16x1xi32, #blocked> -> tensor<16x64xi32, #blocked> loc(#loc27)
    %41 = tt.broadcast %39 : tensor<1x64xi32, #blocked> -> tensor<16x64xi32, #blocked> loc(#loc27)
    %42 = arith.addi %40, %41 : tensor<16x64xi32, #blocked> loc(#loc27)
    %43 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<16x64x!tt.ptr<f32>, #blocked> loc(#loc28)
    %44 = tt.addptr %43, %42 : tensor<16x64x!tt.ptr<f32>, #blocked>, tensor<16x64xi32, #blocked> loc(#loc28)
    %45 = arith.andi %36, %20 : tensor<16x1xi1, #blocked> loc(#loc29)
    %46 = tt.broadcast %45 : tensor<16x1xi1, #blocked> -> tensor<16x64xi1, #blocked> loc(#loc30)
    %47 = tt.load %44, %46, %cst evictionPolicy = evict_last : tensor<16x64x!tt.ptr<f32>, #blocked> loc(#loc30)
    %48 = arith.addi %37, %cst_14 : tensor<16x1xi32, #blocked> loc(#loc31)
    %49 = tt.broadcast %48 : tensor<16x1xi32, #blocked> -> tensor<16x64xi32, #blocked> loc(#loc32)
    %50 = arith.addi %49, %41 : tensor<16x64xi32, #blocked> loc(#loc32)
    %51 = tt.addptr %43, %50 : tensor<16x64x!tt.ptr<f32>, #blocked>, tensor<16x64xi32, #blocked> loc(#loc33)
    %52 = tt.load %51, %46, %cst evictionPolicy = evict_last : tensor<16x64x!tt.ptr<f32>, #blocked> loc(#loc34)
    %53 = arith.cmpf ogt, %52, %47 : tensor<16x64xf32, #blocked> loc(#loc58)
    %54 = arith.cmpf une, %52, %52 : tensor<16x64xf32, #blocked> loc(#loc59)
    %55 = arith.ori %53, %54 : tensor<16x64xi1, #blocked> loc(#loc60)
    %56 = arith.select %55, %52, %47 : tensor<16x64xi1, #blocked>, tensor<16x64xf32, #blocked> loc(#loc61)
    %57 = arith.addi %37, %cst_13 : tensor<16x1xi32, #blocked> loc(#loc40)
    %58 = tt.broadcast %57 : tensor<16x1xi32, #blocked> -> tensor<16x64xi32, #blocked> loc(#loc41)
    %59 = arith.addi %58, %41 : tensor<16x64xi32, #blocked> loc(#loc41)
    %60 = tt.addptr %43, %59 : tensor<16x64x!tt.ptr<f32>, #blocked>, tensor<16x64xi32, #blocked> loc(#loc42)
    %61 = tt.load %60, %46, %cst evictionPolicy = evict_last : tensor<16x64x!tt.ptr<f32>, #blocked> loc(#loc43)
    %62 = arith.cmpf ogt, %61, %56 : tensor<16x64xf32, #blocked> loc(#loc62)
    %63 = arith.cmpf une, %61, %61 : tensor<16x64xf32, #blocked> loc(#loc63)
    %64 = arith.ori %62, %63 : tensor<16x64xi1, #blocked> loc(#loc64)
    %65 = arith.select %64, %61, %56 : tensor<16x64xi1, #blocked>, tensor<16x64xf32, #blocked> loc(#loc65)
    %66 = arith.addi %37, %cst_12 : tensor<16x1xi32, #blocked> loc(#loc45)
    %67 = tt.broadcast %66 : tensor<16x1xi32, #blocked> -> tensor<16x64xi32, #blocked> loc(#loc46)
    %68 = arith.addi %67, %41 : tensor<16x64xi32, #blocked> loc(#loc46)
    %69 = tt.addptr %43, %68 : tensor<16x64x!tt.ptr<f32>, #blocked>, tensor<16x64xi32, #blocked> loc(#loc47)
    %70 = tt.load %69, %46, %cst evictionPolicy = evict_last : tensor<16x64x!tt.ptr<f32>, #blocked> loc(#loc48)
    %71 = arith.cmpf ogt, %70, %65 : tensor<16x64xf32, #blocked> loc(#loc66)
    %72 = arith.cmpf une, %70, %70 : tensor<16x64xf32, #blocked> loc(#loc67)
    %73 = arith.ori %71, %72 : tensor<16x64xi1, #blocked> loc(#loc68)
    %74 = arith.select %73, %70, %65 : tensor<16x64xi1, #blocked>, tensor<16x64xf32, #blocked> loc(#loc69)
    %75 = tt.broadcast %36 : tensor<16x1xi1, #blocked> -> tensor<16x64xi1, #blocked> loc(#loc50)
    %76 = arith.select %75, %74, %cst : tensor<16x64xi1, #blocked>, tensor<16x64xf32, #blocked> loc(#loc50)
    %77 = arith.muli %19, %cst_11 : tensor<16x1xi32, #blocked1> loc(#loc51)
    %78 = tt.broadcast %24 : tensor<1x64xi32, #blocked1> -> tensor<16x64xi32, #blocked1> loc(#loc52)
    %79 = tt.broadcast %77 : tensor<16x1xi32, #blocked1> -> tensor<16x64xi32, #blocked1> loc(#loc52)
    %80 = arith.addi %78, %79 : tensor<16x64xi32, #blocked1> loc(#loc52)
    %81 = arith.muli %25, %cst_10 : tensor<1x64xi32, #blocked1> loc(#loc53)
    %82 = tt.broadcast %81 : tensor<1x64xi32, #blocked1> -> tensor<16x64xi32, #blocked1> loc(#loc54)
    %83 = arith.addi %80, %82 : tensor<16x64xi32, #blocked1> loc(#loc54)
    %84 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<16x64x!tt.ptr<f32>, #blocked1> loc(#loc55)
    %85 = tt.addptr %84, %83 : tensor<16x64x!tt.ptr<f32>, #blocked1>, tensor<16x64xi32, #blocked1> loc(#loc55)
    %86 = tt.broadcast %21 : tensor<16x1xi1, #blocked1> -> tensor<16x64xi1, #blocked1> loc(#loc56)
    %87 = triton_gpu.convert_layout %76 : tensor<16x64xf32, #blocked> -> tensor<16x64xf32, #blocked1> loc(#loc56)
    tt.store %85, %87, %86 : tensor<16x64x!tt.ptr<f32>, #blocked1> loc(#loc56)
    tt.return loc(#loc57)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":22:28)
#loc3 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":22:33)
#loc4 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":23:44)
#loc5 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":23:23)
#loc6 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":25:28)
#loc7 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":25:33)
#loc8 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":26:44)
#loc9 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":26:23)
#loc10 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":27:21)
#loc11 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":28:19)
#loc12 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":29:19)
#loc13 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":32:19)
#loc14 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":33:19)
#loc15 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":34:18)
#loc16 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":36:19)
#loc17 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":38:18)
#loc18 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":39:18)
#loc19 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":40:19)
#loc20 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":41:18)
#loc21 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":42:18)
#loc22 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":43:18)
#loc23 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":44:19)
#loc24 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":45:41)
#loc25 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":45:39)
#loc26 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":45:49)
#loc27 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":45:46)
#loc28 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":45:31)
#loc29 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":45:62)
#loc30 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":45:54)
#loc31 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":46:38)
#loc32 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":46:45)
#loc33 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":46:31)
#loc34 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":46:53)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc36 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":47:42)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc40 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":48:38)
#loc41 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":48:45)
#loc42 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":48:31)
#loc43 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":48:53)
#loc44 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":49:42)
#loc45 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":50:38)
#loc46 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":50:45)
#loc47 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":50:31)
#loc48 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":50:53)
#loc49 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":51:42)
#loc50 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":53:35)
#loc51 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":54:34)
#loc52 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":54:30)
#loc53 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":54:44)
#loc54 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":54:39)
#loc55 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":54:25)
#loc56 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":54:56)
#loc57 = loc("inductor_cache/52/c52bo26r7zf37o4waaq7riypas7lfwy5owb6weewk6jj4j74lsuv.py":54:4)
#loc58 = loc(callsite(#loc35 at #loc36))
#loc59 = loc(callsite(#loc37 at #loc36))
#loc60 = loc(callsite(#loc38 at #loc36))
#loc61 = loc(callsite(#loc39 at #loc36))
#loc62 = loc(callsite(#loc35 at #loc44))
#loc63 = loc(callsite(#loc37 at #loc44))
#loc64 = loc(callsite(#loc38 at #loc44))
#loc65 = loc(callsite(#loc39 at #loc44))
#loc66 = loc(callsite(#loc35 at #loc49))
#loc67 = loc(callsite(#loc37 at #loc49))
#loc68 = loc(callsite(#loc38 at #loc49))
#loc69 = loc(callsite(#loc39 at #loc49))
