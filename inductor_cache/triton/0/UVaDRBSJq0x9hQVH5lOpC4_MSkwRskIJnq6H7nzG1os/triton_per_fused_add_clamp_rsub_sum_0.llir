; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_clamp_rsub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = and i32 %7, 31, !dbg !10
  %9 = lshr i32 %7, 5, !dbg !10
  %10 = shl i32 %7, 2, !dbg !10
  %11 = and i32 %10, 252, !dbg !10
  %12 = zext nneg i32 %11 to i64, !dbg !11
  %13 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !11
  %14 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %13, i1 true) #3, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %14, 0, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %14, 1, !dbg !12
  %17 = extractvalue { i32, i32, i32, i32 } %14, 2, !dbg !12
  %18 = extractvalue { i32, i32, i32, i32 } %14, 3, !dbg !12
  %19 = getelementptr float, ptr addrspace(1) %2, i64 %12, !dbg !13
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #3, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !14
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !14
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %12, !dbg !15
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !16
  %31 = getelementptr float, ptr addrspace(1) %4, i64 %12, !dbg !17
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !18
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !18
  %37 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !12
  %38 = insertelement <2 x i32> %37, i32 %16, i64 1, !dbg !12
  %39 = bitcast <2 x i32> %38 to <2 x float>, !dbg !12
  %40 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !14
  %41 = insertelement <2 x i32> %40, i32 %22, i64 1, !dbg !14
  %42 = bitcast <2 x i32> %41 to <2 x float>, !dbg !14
  %43 = fsub <2 x float> splat (float 4.000000e+00), %39, !dbg !19
  %44 = fadd <2 x float> %43, %42, !dbg !20
  %45 = fcmp ole <2 x float> %44, zeroinitializer, !dbg !21
  %46 = select <2 x i1> %45, <2 x float> zeroinitializer, <2 x float> %44, !dbg !21
  %shift = shufflevector <2 x float> %46, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !25
  %47 = fadd <2 x float> %46, %shift, !dbg !25
  %48 = extractelement <2 x float> %47, i64 0, !dbg !25
  %49 = icmp eq i32 %8, 0, !dbg !30
  %50 = and i32 %9, 1, !dbg !30
  %51 = zext nneg i32 %50 to i64, !dbg !30
  %52 = getelementptr float, ptr addrspace(3) @global_smem, i64 %51, !dbg !30
  %53 = icmp slt i32 %7, 2, !dbg !30
  %54 = sext i32 %7 to i64, !dbg !30
  %55 = getelementptr float, ptr addrspace(3) @global_smem, i64 %54, !dbg !30
  %56 = and i32 %7, 1, !dbg !30
  %57 = icmp eq i32 %56, 0, !dbg !30
  %58 = and i1 %53, %57, !dbg !30
  %59 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !16
  %60 = insertelement <2 x i32> %59, i32 %28, i64 1, !dbg !16
  %61 = bitcast <2 x i32> %60 to <2 x float>, !dbg !16
  %62 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !18
  %63 = insertelement <2 x i32> %62, i32 %34, i64 1, !dbg !18
  %64 = bitcast <2 x i32> %63 to <2 x float>, !dbg !18
  %65 = fsub <2 x float> splat (float 4.000000e+00), %61, !dbg !31
  %66 = fadd <2 x float> %65, %64, !dbg !32
  %67 = fcmp ole <2 x float> %66, zeroinitializer, !dbg !33
  %68 = select <2 x i1> %67, <2 x float> zeroinitializer, <2 x float> %66, !dbg !33
  %69 = insertelement <4 x i32> poison, i32 %30, i64 0, !dbg !16
  %70 = insertelement <4 x i32> %69, i32 %29, i64 1, !dbg !16
  %71 = insertelement <4 x i32> %70, i32 %18, i64 2, !dbg !16
  %72 = insertelement <4 x i32> %71, i32 %17, i64 3, !dbg !16
  %73 = bitcast <4 x i32> %72 to <4 x float>, !dbg !16
  %74 = insertelement <4 x i32> poison, i32 %36, i64 0, !dbg !18
  %75 = insertelement <4 x i32> %74, i32 %35, i64 1, !dbg !18
  %76 = insertelement <4 x i32> %75, i32 %24, i64 2, !dbg !18
  %77 = insertelement <4 x i32> %76, i32 %23, i64 3, !dbg !18
  %78 = bitcast <4 x i32> %77 to <4 x float>, !dbg !18
  %79 = fsub <4 x float> splat (float 4.000000e+00), %73, !dbg !31
  %80 = fadd <4 x float> %79, %78, !dbg !32
  %81 = fcmp ole <4 x float> %80, zeroinitializer, !dbg !33
  %82 = extractelement <4 x i1> %81, i64 3, !dbg !21
  %83 = extractelement <4 x float> %80, i64 3, !dbg !21
  %84 = select i1 %82, float 0.000000e+00, float %83, !dbg !21
  %85 = extractelement <4 x i1> %81, i64 2, !dbg !21
  %86 = extractelement <4 x float> %80, i64 2, !dbg !21
  %87 = select i1 %85, float 0.000000e+00, float %86, !dbg !21
  %88 = fadd float %84, %48, !dbg !25
  %89 = fadd float %87, %88, !dbg !25
  %90 = bitcast float %89 to i32, !dbg !30
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 16, i32 31), !dbg !30
  %92 = bitcast i32 %91 to float, !dbg !30
  %93 = fadd float %89, %92, !dbg !25
  %94 = bitcast float %93 to i32, !dbg !30
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 8, i32 31), !dbg !30
  %96 = bitcast i32 %95 to float, !dbg !30
  %97 = fadd float %93, %96, !dbg !25
  %98 = bitcast float %97 to i32, !dbg !30
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 4, i32 31), !dbg !30
  %100 = bitcast i32 %99 to float, !dbg !30
  %101 = fadd float %97, %100, !dbg !25
  %102 = bitcast float %101 to i32, !dbg !30
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 2, i32 31), !dbg !30
  %104 = bitcast i32 %103 to float, !dbg !30
  %105 = fadd float %101, %104, !dbg !25
  %106 = bitcast float %105 to i32, !dbg !30
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 1, i32 31), !dbg !30
  %108 = bitcast i32 %107 to float, !dbg !30
  %109 = fadd float %105, %108, !dbg !25
  %110 = bitcast float %109 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %110, i1 %49) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %111 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %55, i1 %53) #3, !dbg !30
  %112 = bitcast i32 %111 to float, !dbg !30
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 1, i32 31), !dbg !30
  %114 = bitcast i32 %113 to float, !dbg !30
  %115 = fadd float %112, %114, !dbg !25
  %116 = bitcast float %115 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %116, i1 %58) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %117 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !30
  %118 = fadd float %117, 0.000000e+00, !dbg !35
  %119 = extractelement <4 x i1> %81, i64 1, !dbg !33
  %120 = extractelement <4 x float> %80, i64 1, !dbg !33
  %121 = select i1 %119, float 0.000000e+00, float %120, !dbg !33
  %122 = extractelement <4 x i1> %81, i64 0, !dbg !33
  %123 = extractelement <4 x float> %80, i64 0, !dbg !33
  %124 = select i1 %122, float 0.000000e+00, float %123, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %shift8 = shufflevector <2 x float> %68, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !39
  %125 = fadd <2 x float> %68, %shift8, !dbg !39
  %126 = extractelement <2 x float> %125, i64 0, !dbg !39
  %127 = fadd float %121, %126, !dbg !39
  %128 = fadd float %124, %127, !dbg !39
  %129 = bitcast float %128 to i32, !dbg !37
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 16, i32 31), !dbg !37
  %131 = bitcast i32 %130 to float, !dbg !37
  %132 = fadd float %128, %131, !dbg !39
  %133 = bitcast float %132 to i32, !dbg !37
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 8, i32 31), !dbg !37
  %135 = bitcast i32 %134 to float, !dbg !37
  %136 = fadd float %132, %135, !dbg !39
  %137 = bitcast float %136 to i32, !dbg !37
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 4, i32 31), !dbg !37
  %139 = bitcast i32 %138 to float, !dbg !37
  %140 = fadd float %136, %139, !dbg !39
  %141 = bitcast float %140 to i32, !dbg !37
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 2, i32 31), !dbg !37
  %143 = bitcast i32 %142 to float, !dbg !37
  %144 = fadd float %140, %143, !dbg !39
  %145 = bitcast float %144 to i32, !dbg !37
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 1, i32 31), !dbg !37
  %147 = bitcast i32 %146 to float, !dbg !37
  %148 = fadd float %144, %147, !dbg !39
  %149 = bitcast float %148 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %149, i1 %49) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %150 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %55, i1 %53) #3, !dbg !37
  %151 = bitcast i32 %150 to float, !dbg !37
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 1, i32 31), !dbg !37
  %153 = bitcast i32 %152 to float, !dbg !37
  %154 = fadd float %151, %153, !dbg !39
  %155 = bitcast float %154 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %155, i1 %58) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %156 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !37
  %157 = fadd float %156, 0.000000e+00, !dbg !40
  %158 = fadd float %118, %157, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %urem = and i32 %7, 63, !dbg !44
  %159 = icmp eq i32 %urem, 0, !dbg !44
  %160 = bitcast float %158 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %0, i1 %159) #3, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c53pny5s6ic63v7zwkysynacxg3g2bfogsyz4eecklnpkvqnvemi.py", directory: "inductor_cache/53")
!4 = !{ptr @triton_per_fused_add_clamp_rsub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_clamp_rsub_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_clamp_rsub_sum_0", linkageName: "triton_per_fused_add_clamp_rsub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 31, scope: !7)
!16 = !DILocation(line: 33, column: 36, scope: !7)
!17 = !DILocation(line: 34, column: 31, scope: !7)
!18 = !DILocation(line: 34, column: 36, scope: !7)
!19 = !DILocation(line: 36, column: 18, scope: !7)
!20 = !DILocation(line: 37, column: 18, scope: !7)
!21 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 39, column: 40, scope: !7)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!29 = !DILocation(line: 41, column: 57, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 42, column: 19, scope: !7)
!32 = !DILocation(line: 43, column: 20, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !34)
!34 = !DILocation(line: 44, column: 42, scope: !7)
!35 = !DILocation(line: 73, column: 15, scope: !22, inlinedAt: !36)
!36 = !DILocation(line: 41, column: 44, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !38)
!38 = !DILocation(line: 46, column: 59, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !38)
!40 = !DILocation(line: 73, column: 15, scope: !22, inlinedAt: !41)
!41 = !DILocation(line: 46, column: 45, scope: !7)
!42 = !DILocation(line: 47, column: 19, scope: !7)
!43 = !DILocation(line: 48, column: 4, scope: !7)
!44 = !DILocation(line: 49, column: 63, scope: !7)
!45 = !DILocation(line: 49, column: 4, scope: !7)
