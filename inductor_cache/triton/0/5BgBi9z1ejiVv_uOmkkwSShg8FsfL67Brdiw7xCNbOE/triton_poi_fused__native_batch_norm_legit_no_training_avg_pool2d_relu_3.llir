; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 62, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %10, 1, !dbg !13
  %16 = icmp slt i32 %14, 64, !dbg !14
  %17 = srem i32 %15, 2, !dbg !15
  %18 = sdiv i32 %14, 4, !dbg !16
  %19 = srem i32 %18, 4, !dbg !17
  %20 = shl nsw i32 %17, 1, !dbg !18
  %21 = shl i32 %14, 2, !dbg !19
  %22 = add i32 %20, %21, !dbg !20
  %23 = sext i32 %21 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !21
  %25 = sext i32 %22 to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %16) #3, !dbg !22
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %16) #3, !dbg !22
  %29 = or disjoint i32 %21, 1, !dbg !23
  %30 = or disjoint i32 %22, 1, !dbg !23
  %31 = sext i32 %29 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = sext i32 %30 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %16) #3, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %16) #3, !dbg !25
  %37 = or disjoint i32 %21, 4, !dbg !26
  %38 = add i32 %22, 4, !dbg !26
  %39 = sext i32 %37 to i64, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !27
  %41 = sext i32 %38 to i64, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %16) #3, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %16) #3, !dbg !28
  %45 = or disjoint i32 %21, 5, !dbg !29
  %46 = add i32 %22, 5, !dbg !29
  %47 = sext i32 %45 to i64, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !30
  %49 = sext i32 %46 to i64, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !30
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %16) #3, !dbg !31
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %16) #3, !dbg !31
  %53 = sext i32 %19 to i64, !dbg !32
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !32
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %16) #3, !dbg !33
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %16) #3, !dbg !33
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !34
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %16) #3, !dbg !35
  %59 = bitcast i32 %58 to float, !dbg !35
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %16) #3, !dbg !35
  %61 = bitcast i32 %60 to float, !dbg !35
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !36
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %16) #3, !dbg !37
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %16) #3, !dbg !37
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !38
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %16) #3, !dbg !39
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %16) #3, !dbg !39
  %68 = fadd float %59, 0x3EE4F8B580000000, !dbg !40
  %69 = fadd float %61, 0x3EE4F8B580000000, !dbg !40
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %70, 0, !dbg !41
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i = icmp eq i32 %71, 0, !dbg !41
  br i1 %.not.i, label %77, label %72, !dbg !41

72:                                               ; preds = %8
  br i1 %.not1.i, label %75, label %73, !dbg !41

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

77:                                               ; preds = %8
  br i1 %.not1.i, label %80, label %78, !dbg !41

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %73, %75, %78, %80
  %.0.i = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !41
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %82, 0, !dbg !41
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i4 = icmp eq i32 %83, 0, !dbg !41
  br i1 %.not.i1, label %89, label %84, !dbg !41

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %87, label %85, !dbg !41

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %92, label %90, !dbg !41

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %85, %87, %90, %92
  %.0.i3 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !41
  %94 = bitcast i32 %36 to float, !dbg !25
  %95 = bitcast i32 %28 to float, !dbg !22
  %96 = fadd float %95, %94, !dbg !42
  %97 = bitcast i32 %44 to float, !dbg !28
  %98 = fadd float %96, %97, !dbg !43
  %99 = bitcast i32 %52 to float, !dbg !31
  %100 = fadd float %98, %99, !dbg !44
  %101 = fmul float %100, 2.500000e-01, !dbg !45
  %102 = bitcast i32 %56 to float, !dbg !33
  %103 = fsub float %101, %102, !dbg !46
  %104 = bitcast i32 %35 to float, !dbg !25
  %105 = bitcast i32 %27 to float, !dbg !22
  %106 = fadd float %105, %104, !dbg !42
  %107 = bitcast i32 %43 to float, !dbg !28
  %108 = fadd float %106, %107, !dbg !43
  %109 = bitcast i32 %51 to float, !dbg !31
  %110 = fadd float %108, %109, !dbg !44
  %111 = fmul float %110, 2.500000e-01, !dbg !45
  %112 = bitcast i32 %55 to float, !dbg !33
  %113 = fsub float %111, %112, !dbg !46
  %114 = bitcast i32 %67 to float, !dbg !39
  %115 = bitcast i32 %66 to float, !dbg !39
  %116 = bitcast i32 %64 to float, !dbg !37
  %117 = bitcast i32 %63 to float, !dbg !37
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !47
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !47
  %120 = fmul float %113, %118, !dbg !48
  %121 = fmul float %103, %119, !dbg !48
  %122 = fmul float %120, %117, !dbg !49
  %123 = fmul float %121, %116, !dbg !49
  %124 = fadd float %122, %115, !dbg !50
  %125 = fadd float %123, %114, !dbg !50
  %126 = fcmp olt float %124, 0.000000e+00, !dbg !51
  %127 = fcmp olt float %125, 0.000000e+00, !dbg !51
  %128 = select i1 %126, float 0.000000e+00, float %124, !dbg !55
  %129 = select i1 %127, float 0.000000e+00, float %125, !dbg !55
  %130 = sext i32 %14 to i64, !dbg !56
  %131 = getelementptr float, ptr addrspace(1) %5, i64 %130, !dbg !56
  %132 = bitcast float %111 to i32, !dbg !57
  %133 = bitcast float %101 to i32, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %132, i32 %133, ptr addrspace(1) %131, i1 %16) #3, !dbg !57
  %134 = getelementptr float, ptr addrspace(1) %6, i64 %130, !dbg !58
  %135 = bitcast float %128 to i32, !dbg !59
  %136 = bitcast float %129 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %135, i32 %136, ptr addrspace(1) %134, i1 %16) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chzl4k2f7hfub365w3w73lsfkui6zrswxmzbwqw32ahp7hcufa5x.py", directory: "inductor_cache/hz")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_3, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 27, column: 26, scope: !7)
!18 = !DILocation(line: 28, column: 32, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 28, column: 37, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 44, scope: !7)
!23 = !DILocation(line: 29, column: 41, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 48, scope: !7)
!26 = !DILocation(line: 30, column: 41, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 48, scope: !7)
!29 = !DILocation(line: 31, column: 41, scope: !7)
!30 = !DILocation(line: 31, column: 30, scope: !7)
!31 = !DILocation(line: 31, column: 48, scope: !7)
!32 = !DILocation(line: 32, column: 30, scope: !7)
!33 = !DILocation(line: 32, column: 35, scope: !7)
!34 = !DILocation(line: 33, column: 31, scope: !7)
!35 = !DILocation(line: 33, column: 36, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 36, scope: !7)
!38 = !DILocation(line: 35, column: 31, scope: !7)
!39 = !DILocation(line: 35, column: 36, scope: !7)
!40 = !DILocation(line: 43, column: 20, scope: !7)
!41 = !DILocation(line: 44, column: 27, scope: !7)
!42 = !DILocation(line: 36, column: 18, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 40, column: 18, scope: !7)
!46 = !DILocation(line: 41, column: 19, scope: !7)
!47 = !DILocation(line: 46, column: 20, scope: !7)
!48 = !DILocation(line: 49, column: 20, scope: !7)
!49 = !DILocation(line: 50, column: 20, scope: !7)
!50 = !DILocation(line: 51, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 53, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 54, column: 25, scope: !7)
!57 = !DILocation(line: 54, column: 36, scope: !7)
!58 = !DILocation(line: 55, column: 25, scope: !7)
!59 = !DILocation(line: 55, column: 37, scope: !7)
!60 = !DILocation(line: 55, column: 4, scope: !7)
