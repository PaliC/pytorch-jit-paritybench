; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_52(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 38912, !dbg !14
  %17 = ashr exact i32 %15, 2, !dbg !15
  %18 = srem i32 %17, 2432, !dbg !16
  %.frozen = freeze i32 %15, !dbg !17
  %19 = sdiv i32 %.frozen, 9728, !dbg !17
  %20 = sext i32 %18 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !18
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %16) #3, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %16) #3, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %16) #3, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %16) #3, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %16) #3, !dbg !21
  %28 = bitcast i32 %27 to float, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %16) #3, !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %16) #3, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %16) #3, !dbg !21
  %34 = bitcast i32 %33 to float, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %16) #3, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %16) #3, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %16) #3, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %16) #3, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %16) #3, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %16) #3, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %16) #3, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %16) #3, !dbg !25
  %45 = icmp slt i32 %18, 2048, !dbg !26
  %46 = mul i32 %19, 9728, !dbg !27
  %srem.decomposed = sub i32 %.frozen, %46, !dbg !27
  %47 = mul nsw i32 %19, 9216, !dbg !28
  %48 = add nsw i32 %47, %srem.decomposed, !dbg !29
  %49 = sext i32 %48 to i64, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !30
  %51 = and i1 %16, %45, !dbg !31
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51) #3, !dbg !32
  %53 = mul nsw i32 %19, 8704, !dbg !33
  %54 = add nsw i32 %53, %srem.decomposed, !dbg !34
  %55 = sext i32 %54 to i64, !dbg !35
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !35
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51) #3, !dbg !36
  %58 = and i32 %18, -256, !dbg !37
  %59 = icmp eq i32 %58, 2048, !dbg !37
  %60 = and i1 %16, %59, !dbg !38
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60) #3, !dbg !39
  %62 = icmp sgt i32 %18, 2303, !dbg !40
  %63 = sext i32 %54 to i64, !dbg !41
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !41
  %65 = getelementptr i8, ptr addrspace(1) %64, i64 -4096, !dbg !41
  %66 = and i1 %16, %62, !dbg !42
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #3, !dbg !43
  %68 = fadd float %28, 0x3F50624DE0000000, !dbg !44
  %69 = fadd float %30, 0x3F50624DE0000000, !dbg !44
  %70 = fadd float %32, 0x3F50624DE0000000, !dbg !44
  %71 = fadd float %34, 0x3F50624DE0000000, !dbg !44
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i = icmp eq i32 %72, 0, !dbg !45
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i = icmp eq i32 %73, 0, !dbg !45
  br i1 %.not.i, label %79, label %74, !dbg !45

74:                                               ; preds = %9
  br i1 %.not1.i, label %77, label %75, !dbg !45

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

79:                                               ; preds = %9
  br i1 %.not1.i, label %82, label %80, !dbg !45

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %75, %77, %80, %82
  %.0.i = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !45
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i6 = icmp eq i32 %84, 0, !dbg !45
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i9 = icmp eq i32 %85, 0, !dbg !45
  br i1 %.not.i6, label %91, label %86, !dbg !45

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %89, label %87, !dbg !45

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %94, label %92, !dbg !45

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

__nv_sqrtf.exit10:                                ; preds = %87, %89, %92, %94
  %.0.i8 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !45
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i11 = icmp eq i32 %96, 0, !dbg !45
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i14 = icmp eq i32 %97, 0, !dbg !45
  br i1 %.not.i11, label %103, label %98, !dbg !45

98:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %101, label %99, !dbg !45

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !45
  br label %__nv_sqrtf.exit15, !dbg !45

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !45
  br label %__nv_sqrtf.exit15, !dbg !45

103:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %106, label %104, !dbg !45

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !45
  br label %__nv_sqrtf.exit15, !dbg !45

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !45
  br label %__nv_sqrtf.exit15, !dbg !45

__nv_sqrtf.exit15:                                ; preds = %99, %101, %104, %106
  %.0.i13 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !45
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i16 = icmp eq i32 %108, 0, !dbg !45
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i19 = icmp eq i32 %109, 0, !dbg !45
  br i1 %.not.i16, label %115, label %110, !dbg !45

110:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %113, label %111, !dbg !45

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

115:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %118, label %116, !dbg !45

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

__nv_sqrtf.exit20:                                ; preds = %111, %113, %116, %118
  %.0.i18 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !45
  %120 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !32
  %121 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !36
  %122 = icmp slt i32 %18, 2304, !dbg !46
  %123 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !39
  %124 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !43
  %125 = insertelement <4 x i32> poison, i32 %25, i64 0, !dbg !19
  %126 = insertelement <4 x i32> %125, i32 %24, i64 1, !dbg !19
  %127 = insertelement <4 x i32> %126, i32 %23, i64 2, !dbg !19
  %128 = insertelement <4 x i32> %127, i32 %22, i64 3, !dbg !19
  %129 = bitcast <4 x i32> %128 to <4 x float>, !dbg !19
  %130 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !32
  %131 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !36
  %132 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !39
  %133 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !43
  %134 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !32
  %135 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !36
  %136 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !39
  %137 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !43
  %138 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !32
  %139 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !36
  %140 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !39
  %141 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !43
  %142 = insertelement <4 x i32> poison, i32 %44, i64 0, !dbg !25
  %143 = insertelement <4 x i32> %142, i32 %43, i64 1, !dbg !25
  %144 = insertelement <4 x i32> %143, i32 %42, i64 2, !dbg !25
  %145 = insertelement <4 x i32> %144, i32 %41, i64 3, !dbg !25
  %146 = bitcast <4 x i32> %145 to <4 x float>, !dbg !25
  %147 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !23
  %148 = insertelement <4 x i32> %147, i32 %38, i64 1, !dbg !23
  %149 = insertelement <4 x i32> %148, i32 %37, i64 2, !dbg !23
  %150 = insertelement <4 x i32> %149, i32 %36, i64 3, !dbg !23
  %151 = bitcast <4 x i32> %150 to <4 x float>, !dbg !23
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !47
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !47
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !47
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !47
  %156 = insertelement <4 x i32> poison, i32 %120, i64 0, !dbg !32
  %157 = insertelement <4 x i32> %156, i32 %130, i64 1, !dbg !32
  %158 = insertelement <4 x i32> %157, i32 %134, i64 2, !dbg !32
  %159 = insertelement <4 x i32> %158, i32 %138, i64 3, !dbg !32
  %160 = bitcast <4 x i32> %159 to <4 x float>, !dbg !32
  %161 = insertelement <4 x i32> poison, i32 %121, i64 0, !dbg !36
  %162 = insertelement <4 x i32> %161, i32 %131, i64 1, !dbg !36
  %163 = insertelement <4 x i32> %162, i32 %135, i64 2, !dbg !36
  %164 = insertelement <4 x i32> %163, i32 %139, i64 3, !dbg !36
  %165 = bitcast <4 x i32> %164 to <4 x float>, !dbg !36
  %166 = fadd <4 x float> %160, %165, !dbg !48
  %167 = insertelement <4 x i1> poison, i1 %122, i64 0, !dbg !49
  %168 = shufflevector <4 x i1> %167, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !49
  %169 = insertelement <4 x i32> poison, i32 %123, i64 0, !dbg !49
  %170 = insertelement <4 x i32> %169, i32 %132, i64 1, !dbg !49
  %171 = insertelement <4 x i32> %170, i32 %136, i64 2, !dbg !49
  %172 = insertelement <4 x i32> %171, i32 %140, i64 3, !dbg !49
  %173 = insertelement <4 x i32> poison, i32 %124, i64 0, !dbg !49
  %174 = insertelement <4 x i32> %173, i32 %133, i64 1, !dbg !49
  %175 = insertelement <4 x i32> %174, i32 %137, i64 2, !dbg !49
  %176 = insertelement <4 x i32> %175, i32 %141, i64 3, !dbg !49
  %177 = select <4 x i1> %168, <4 x i32> %172, <4 x i32> %176, !dbg !49
  %178 = bitcast <4 x i32> %177 to <4 x float>, !dbg !49
  %179 = insertelement <4 x i1> poison, i1 %45, i64 0, !dbg !50
  %180 = shufflevector <4 x i1> %179, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !50
  %181 = select <4 x i1> %180, <4 x float> %166, <4 x float> %178, !dbg !50
  %182 = fsub <4 x float> %181, %129, !dbg !51
  %183 = insertelement <4 x float> poison, float %155, i64 0, !dbg !52
  %184 = insertelement <4 x float> %183, float %154, i64 1, !dbg !52
  %185 = insertelement <4 x float> %184, float %153, i64 2, !dbg !52
  %186 = insertelement <4 x float> %185, float %152, i64 3, !dbg !52
  %187 = fmul <4 x float> %182, %186, !dbg !52
  %188 = fmul <4 x float> %187, %151, !dbg !53
  %189 = fadd <4 x float> %188, %146, !dbg !54
  %190 = fcmp olt <4 x float> %189, zeroinitializer, !dbg !55
  %191 = extractelement <4 x i1> %190, i64 3, !dbg !59
  %192 = extractelement <4 x i1> %190, i64 2, !dbg !59
  %193 = extractelement <4 x i1> %190, i64 1, !dbg !59
  %194 = extractelement <4 x i1> %190, i64 0, !dbg !59
  %195 = sext i32 %15 to i64, !dbg !60
  %196 = getelementptr float, ptr addrspace(1) %6, i64 %195, !dbg !60
  %bc = bitcast <4 x float> %181 to <4 x i32>, !dbg !61
  %197 = extractelement <4 x i32> %bc, i64 3, !dbg !61
  %bc21 = bitcast <4 x float> %181 to <4 x i32>, !dbg !61
  %198 = extractelement <4 x i32> %bc21, i64 2, !dbg !61
  %bc22 = bitcast <4 x float> %181 to <4 x i32>, !dbg !61
  %199 = extractelement <4 x i32> %bc22, i64 1, !dbg !61
  %bc23 = bitcast <4 x float> %181 to <4 x i32>, !dbg !61
  %200 = extractelement <4 x i32> %bc23, i64 0, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %197, i32 %198, i32 %199, i32 %200, ptr addrspace(1) %196, i1 %16) #3, !dbg !61
  %201 = getelementptr float, ptr addrspace(1) %7, i64 %195, !dbg !62
  %bc24 = bitcast <4 x float> %189 to <4 x i32>, !dbg !63
  %202 = extractelement <4 x i32> %bc24, i64 3, !dbg !63
  %203 = select i1 %191, i32 0, i32 %202, !dbg !59
  %bc25 = bitcast <4 x float> %189 to <4 x i32>, !dbg !63
  %204 = extractelement <4 x i32> %bc25, i64 2, !dbg !63
  %205 = select i1 %192, i32 0, i32 %204, !dbg !59
  %bc26 = bitcast <4 x float> %189 to <4 x i32>, !dbg !63
  %206 = extractelement <4 x i32> %bc26, i64 1, !dbg !63
  %207 = select i1 %193, i32 0, i32 %206, !dbg !59
  %bc27 = bitcast <4 x float> %189 to <4 x i32>, !dbg !63
  %208 = extractelement <4 x i32> %bc27, i64 0, !dbg !63
  %209 = select i1 %194, i32 0, i32 %208, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %203, i32 %205, i32 %207, i32 %209, ptr addrspace(1) %201, i1 %16) #3, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck7ooo3w7cobtadxrvm7poasbxhc65aihp4cg25em47pvntpoox5.py", directory: "inductor_cache/k7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_52, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_52, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_52", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_52", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 49, scope: !7)
!29 = !DILocation(line: 37, column: 44, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 61, scope: !7)
!32 = !DILocation(line: 37, column: 54, scope: !7)
!33 = !DILocation(line: 38, column: 49, scope: !7)
!34 = !DILocation(line: 38, column: 44, scope: !7)
!35 = !DILocation(line: 38, column: 30, scope: !7)
!36 = !DILocation(line: 38, column: 54, scope: !7)
!37 = !DILocation(line: 50, column: 20, scope: !7)
!38 = !DILocation(line: 51, column: 80, scope: !7)
!39 = !DILocation(line: 51, column: 72, scope: !7)
!40 = !DILocation(line: 52, column: 21, scope: !7)
!41 = !DILocation(line: 56, column: 31, scope: !7)
!42 = !DILocation(line: 56, column: 91, scope: !7)
!43 = !DILocation(line: 56, column: 83, scope: !7)
!44 = !DILocation(line: 63, column: 20, scope: !7)
!45 = !DILocation(line: 64, column: 27, scope: !7)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 66, column: 20, scope: !7)
!48 = !DILocation(line: 39, column: 18, scope: !7)
!49 = !DILocation(line: 57, column: 35, scope: !7)
!50 = !DILocation(line: 0, scope: !7)
!51 = !DILocation(line: 61, column: 20, scope: !7)
!52 = !DILocation(line: 69, column: 20, scope: !7)
!53 = !DILocation(line: 70, column: 20, scope: !7)
!54 = !DILocation(line: 71, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 73, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!60 = !DILocation(line: 74, column: 25, scope: !7)
!61 = !DILocation(line: 74, column: 37, scope: !7)
!62 = !DILocation(line: 75, column: 25, scope: !7)
!63 = !DILocation(line: 75, column: 37, scope: !7)
!64 = !DILocation(line: 75, column: 4, scope: !7)
