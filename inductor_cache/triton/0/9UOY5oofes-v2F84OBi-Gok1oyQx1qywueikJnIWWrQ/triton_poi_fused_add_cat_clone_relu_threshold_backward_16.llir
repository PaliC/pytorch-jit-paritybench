; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_cat_clone_relu_threshold_backward_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %17 = icmp slt i32 %16, 128, !dbg !11
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %19 = shl i32 %18, 10, !dbg !13
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %21 = shl i32 %20, 2, !dbg !14
  %22 = and i32 %21, 508, !dbg !14
  %23 = or disjoint i32 %22, 1, !dbg !14
  %24 = or disjoint i32 %22, 2, !dbg !14
  %25 = or disjoint i32 %22, 3, !dbg !14
  %26 = or disjoint i32 %22, 513, !dbg !14
  %27 = or disjoint i32 %22, 514, !dbg !14
  %28 = or disjoint i32 %22, 515, !dbg !14
  %29 = or disjoint i32 %19, %22, !dbg !15
  %30 = or disjoint i32 %19, %23, !dbg !15
  %31 = or disjoint i32 %19, %24, !dbg !15
  %32 = or disjoint i32 %19, %25, !dbg !15
  %33 = or disjoint i32 %29, 512, !dbg !15
  %34 = or disjoint i32 %19, %26, !dbg !15
  %35 = or disjoint i32 %19, %27, !dbg !15
  %36 = or disjoint i32 %19, %28, !dbg !15
  %37 = icmp slt i32 %29, 1024, !dbg !16
  %38 = icmp slt i32 %33, 1024, !dbg !16
  %.frozen = freeze i32 %16, !dbg !17
  %39 = sdiv i32 %.frozen, 32, !dbg !17
  %40 = mul i32 %39, 32, !dbg !18
  %.decomposed = sub i32 %.frozen, %40, !dbg !18
  %41 = shl i32 %16, 10, !dbg !19
  %42 = add i32 %29, %41, !dbg !20
  %43 = add i32 %41, %33, !dbg !20
  %44 = sext i32 %42 to i64, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %10, i64 %44, !dbg !21
  %46 = sext i32 %43 to i64, !dbg !21
  %47 = getelementptr float, ptr addrspace(1) %10, i64 %46, !dbg !21
  %48 = and i1 %17, %37, !dbg !22
  %49 = and i1 %38, %17, !dbg !22
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %48) #4, !dbg !23
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %49) #4, !dbg !23
  %52 = icmp slt i32 %.decomposed, 16, !dbg !24
  %53 = shl i32 %29, 4, !dbg !25
  %54 = shl i32 %30, 4, !dbg !25
  %55 = shl i32 %31, 4, !dbg !25
  %56 = shl i32 %32, 4, !dbg !25
  %57 = shl i32 %33, 4, !dbg !25
  %58 = shl i32 %34, 4, !dbg !25
  %59 = shl i32 %35, 4, !dbg !25
  %60 = shl i32 %36, 4, !dbg !25
  %61 = shl i32 %39, 14, !dbg !26
  %62 = add i32 %53, %61, !dbg !27
  %63 = add i32 %54, %61, !dbg !27
  %64 = add i32 %55, %61, !dbg !27
  %65 = add i32 %56, %61, !dbg !27
  %66 = add i32 %61, %57, !dbg !27
  %67 = add i32 %58, %61, !dbg !27
  %68 = add i32 %59, %61, !dbg !27
  %69 = add i32 %60, %61, !dbg !27
  %70 = add i32 %62, %.decomposed, !dbg !28
  %71 = add i32 %63, %.decomposed, !dbg !28
  %72 = add nsw i32 %64, %.decomposed, !dbg !28
  %73 = add nsw i32 %65, %.decomposed, !dbg !28
  %74 = add nsw i32 %66, %.decomposed, !dbg !28
  %75 = add nsw i32 %67, %.decomposed, !dbg !28
  %76 = add nsw i32 %68, %.decomposed, !dbg !28
  %77 = add i32 %69, %.decomposed, !dbg !28
  %78 = sext i32 %70 to i64, !dbg !29
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !29
  %80 = sext i32 %71 to i64, !dbg !29
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !29
  %82 = sext i32 %72 to i64, !dbg !29
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !29
  %84 = sext i32 %73 to i64, !dbg !29
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !29
  %86 = sext i32 %74 to i64, !dbg !29
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !29
  %88 = sext i32 %75 to i64, !dbg !29
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !29
  %90 = sext i32 %76 to i64, !dbg !29
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !29
  %92 = sext i32 %77 to i64, !dbg !29
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !29
  %94 = and i1 %52, %37, !dbg !30
  %95 = and i1 %38, %52, !dbg !30
  %96 = and i1 %17, %94, !dbg !31
  %97 = and i1 %17, %95, !dbg !31
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %96, i32 0, i1 %96) #4, !dbg !32
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %96, i32 0, i1 %96) #4, !dbg !32
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %96, i32 0, i1 %96) #4, !dbg !32
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %96, i32 0, i1 %96) #4, !dbg !32
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %97, i32 0, i1 %97) #4, !dbg !32
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %97, i32 0, i1 %97) #4, !dbg !32
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %97, i32 0, i1 %97) #4, !dbg !32
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %97, i32 0, i1 %97) #4, !dbg !32
  %106 = sext i32 %.decomposed to i64, !dbg !33
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !33
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %96, i32 0, i1 %96) #4, !dbg !34
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %96, i32 0, i1 %96) #4, !dbg !34
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %96, i32 0, i1 %96) #4, !dbg !34
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %96, i32 0, i1 %96) #4, !dbg !34
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %97, i32 0, i1 %97) #4, !dbg !34
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %97, i32 0, i1 %97) #4, !dbg !34
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %97, i32 0, i1 %97) #4, !dbg !34
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %97, i32 0, i1 %97) #4, !dbg !34
  %116 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !35
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %96, i32 0, i1 %96) #4, !dbg !36
  %118 = bitcast i32 %117 to float, !dbg !36
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %96, i32 0, i1 %96) #4, !dbg !36
  %120 = bitcast i32 %119 to float, !dbg !36
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %96, i32 0, i1 %96) #4, !dbg !36
  %122 = bitcast i32 %121 to float, !dbg !36
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %96, i32 0, i1 %96) #4, !dbg !36
  %124 = bitcast i32 %123 to float, !dbg !36
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %97, i32 0, i1 %97) #4, !dbg !36
  %126 = bitcast i32 %125 to float, !dbg !36
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %97, i32 0, i1 %97) #4, !dbg !36
  %128 = bitcast i32 %127 to float, !dbg !36
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %97, i32 0, i1 %97) #4, !dbg !36
  %130 = bitcast i32 %129 to float, !dbg !36
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %97, i32 0, i1 %97) #4, !dbg !36
  %132 = bitcast i32 %131 to float, !dbg !36
  %133 = fadd float %118, 0x3EE4F8B580000000, !dbg !37
  %134 = fadd float %120, 0x3EE4F8B580000000, !dbg !37
  %135 = fadd float %122, 0x3EE4F8B580000000, !dbg !37
  %136 = fadd float %124, 0x3EE4F8B580000000, !dbg !37
  %137 = fadd float %126, 0x3EE4F8B580000000, !dbg !37
  %138 = fadd float %128, 0x3EE4F8B580000000, !dbg !37
  %139 = fadd float %130, 0x3EE4F8B580000000, !dbg !37
  %140 = fadd float %132, 0x3EE4F8B580000000, !dbg !37
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %141, 0, !dbg !38
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %142, 0, !dbg !38
  br i1 %.not.i, label %148, label %143, !dbg !38

143:                                              ; preds = %15
  br i1 %.not1.i, label %146, label %144, !dbg !38

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %133) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %133) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

148:                                              ; preds = %15
  br i1 %.not1.i, label %151, label %149, !dbg !38

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %133) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %133) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %144, %146, %149, %151
  %.0.i = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !38
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i1 = icmp eq i32 %153, 0, !dbg !38
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i4 = icmp eq i32 %154, 0, !dbg !38
  br i1 %.not.i1, label %160, label %155, !dbg !38

155:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %158, label %156, !dbg !38

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %134) #4, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %134) #4, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

160:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %163, label %161, !dbg !38

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %134) #4, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %134) #4, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

__nv_sqrtf.exit5:                                 ; preds = %156, %158, %161, %163
  %.0.i3 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !38
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i6 = icmp eq i32 %165, 0, !dbg !38
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i9 = icmp eq i32 %166, 0, !dbg !38
  br i1 %.not.i6, label %172, label %167, !dbg !38

167:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %170, label %168, !dbg !38

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #4, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #4, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

172:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %175, label %173, !dbg !38

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #4, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #4, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

__nv_sqrtf.exit10:                                ; preds = %168, %170, %173, %175
  %.0.i8 = phi float [ %169, %168 ], [ %171, %170 ], [ %174, %173 ], [ %176, %175 ], !dbg !38
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i11 = icmp eq i32 %177, 0, !dbg !38
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i14 = icmp eq i32 %178, 0, !dbg !38
  br i1 %.not.i11, label %184, label %179, !dbg !38

179:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %182, label %180, !dbg !38

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %136) #4, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %136) #4, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

184:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %187, label %185, !dbg !38

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.f(float %136) #4, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.f(float %136) #4, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

__nv_sqrtf.exit15:                                ; preds = %180, %182, %185, %187
  %.0.i13 = phi float [ %181, %180 ], [ %183, %182 ], [ %186, %185 ], [ %188, %187 ], !dbg !38
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i16 = icmp eq i32 %189, 0, !dbg !38
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i19 = icmp eq i32 %190, 0, !dbg !38
  br i1 %.not.i16, label %196, label %191, !dbg !38

191:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %194, label %192, !dbg !38

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #4, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #4, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

196:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %199, label %197, !dbg !38

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #4, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #4, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

__nv_sqrtf.exit20:                                ; preds = %192, %194, %197, %199
  %.0.i18 = phi float [ %193, %192 ], [ %195, %194 ], [ %198, %197 ], [ %200, %199 ], !dbg !38
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i21 = icmp eq i32 %201, 0, !dbg !38
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i24 = icmp eq i32 %202, 0, !dbg !38
  br i1 %.not.i21, label %208, label %203, !dbg !38

203:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %206, label %204, !dbg !38

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #4, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #4, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

208:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %211, label %209, !dbg !38

209:                                              ; preds = %208
  %210 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #4, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

211:                                              ; preds = %208
  %212 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #4, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

__nv_sqrtf.exit25:                                ; preds = %204, %206, %209, %211
  %.0.i23 = phi float [ %205, %204 ], [ %207, %206 ], [ %210, %209 ], [ %212, %211 ], !dbg !38
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i26 = icmp eq i32 %213, 0, !dbg !38
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i29 = icmp eq i32 %214, 0, !dbg !38
  br i1 %.not.i26, label %220, label %215, !dbg !38

215:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %218, label %216, !dbg !38

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #4, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #4, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

220:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %223, label %221, !dbg !38

221:                                              ; preds = %220
  %222 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #4, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

223:                                              ; preds = %220
  %224 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #4, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

__nv_sqrtf.exit30:                                ; preds = %216, %218, %221, %223
  %.0.i28 = phi float [ %217, %216 ], [ %219, %218 ], [ %222, %221 ], [ %224, %223 ], !dbg !38
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i31 = icmp eq i32 %225, 0, !dbg !38
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i34 = icmp eq i32 %226, 0, !dbg !38
  br i1 %.not.i31, label %232, label %227, !dbg !38

227:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %230, label %228, !dbg !38

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #4, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #4, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

232:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %235, label %233, !dbg !38

233:                                              ; preds = %232
  %234 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #4, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

235:                                              ; preds = %232
  %236 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #4, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

__nv_sqrtf.exit35:                                ; preds = %228, %230, %233, %235
  %.0.i33 = phi float [ %229, %228 ], [ %231, %230 ], [ %234, %233 ], [ %236, %235 ], !dbg !38
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !39
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !39
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !39
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #4, !dbg !39
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #4, !dbg !39
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #4, !dbg !39
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #4, !dbg !39
  %245 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !40
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %96, i32 0, i1 %96) #4, !dbg !41
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %96, i32 0, i1 %96) #4, !dbg !41
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %96, i32 0, i1 %96) #4, !dbg !41
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %96, i32 0, i1 %96) #4, !dbg !41
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %97, i32 0, i1 %97) #4, !dbg !41
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %97, i32 0, i1 %97) #4, !dbg !41
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %97, i32 0, i1 %97) #4, !dbg !41
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %97, i32 0, i1 %97) #4, !dbg !41
  %254 = getelementptr float, ptr addrspace(1) %4, i64 %106, !dbg !42
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %96, i32 0, i1 %96) #4, !dbg !43
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %96, i32 0, i1 %96) #4, !dbg !43
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %96, i32 0, i1 %96) #4, !dbg !43
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %96, i32 0, i1 %96) #4, !dbg !43
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %97, i32 0, i1 %97) #4, !dbg !43
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %97, i32 0, i1 %97) #4, !dbg !43
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %97, i32 0, i1 %97) #4, !dbg !43
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %97, i32 0, i1 %97) #4, !dbg !43
  %263 = icmp sgt i32 %.decomposed, 15, !dbg !44
  %264 = add nsw i32 %.decomposed, -16, !dbg !45
  %265 = add i32 %62, %264, !dbg !46
  %266 = add i32 %63, %264, !dbg !46
  %267 = add i32 %64, %264, !dbg !46
  %268 = add i32 %65, %264, !dbg !46
  %269 = add i32 %66, %264, !dbg !46
  %270 = add i32 %67, %264, !dbg !46
  %271 = add i32 %68, %264, !dbg !46
  %272 = add i32 %69, %264, !dbg !46
  %273 = sext i32 %265 to i64, !dbg !47
  %274 = getelementptr float, ptr addrspace(1) %5, i64 %273, !dbg !47
  %275 = sext i32 %266 to i64, !dbg !47
  %276 = getelementptr float, ptr addrspace(1) %5, i64 %275, !dbg !47
  %277 = sext i32 %267 to i64, !dbg !47
  %278 = getelementptr float, ptr addrspace(1) %5, i64 %277, !dbg !47
  %279 = sext i32 %268 to i64, !dbg !47
  %280 = getelementptr float, ptr addrspace(1) %5, i64 %279, !dbg !47
  %281 = sext i32 %269 to i64, !dbg !47
  %282 = getelementptr float, ptr addrspace(1) %5, i64 %281, !dbg !47
  %283 = sext i32 %270 to i64, !dbg !47
  %284 = getelementptr float, ptr addrspace(1) %5, i64 %283, !dbg !47
  %285 = sext i32 %271 to i64, !dbg !47
  %286 = getelementptr float, ptr addrspace(1) %5, i64 %285, !dbg !47
  %287 = sext i32 %272 to i64, !dbg !47
  %288 = getelementptr float, ptr addrspace(1) %5, i64 %287, !dbg !47
  %289 = and i1 %263, %37, !dbg !48
  %290 = and i1 %38, %263, !dbg !48
  %291 = and i1 %17, %289, !dbg !49
  %292 = and i1 %17, %290, !dbg !49
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %274, i1 %291, i32 0, i1 %291) #4, !dbg !50
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %276, i1 %291, i32 0, i1 %291) #4, !dbg !50
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %278, i1 %291, i32 0, i1 %291) #4, !dbg !50
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %291, i32 0, i1 %291) #4, !dbg !50
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %282, i1 %292, i32 0, i1 %292) #4, !dbg !50
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %284, i1 %292, i32 0, i1 %292) #4, !dbg !50
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %286, i1 %292, i32 0, i1 %292) #4, !dbg !50
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %288, i1 %292, i32 0, i1 %292) #4, !dbg !50
  %301 = sext i32 %264 to i64, !dbg !51
  %302 = getelementptr float, ptr addrspace(1) %6, i64 %301, !dbg !51
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %291, i32 0, i1 %291) #4, !dbg !52
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %291, i32 0, i1 %291) #4, !dbg !52
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %291, i32 0, i1 %291) #4, !dbg !52
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %291, i32 0, i1 %291) #4, !dbg !52
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %292, i32 0, i1 %292) #4, !dbg !52
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %292, i32 0, i1 %292) #4, !dbg !52
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %292, i32 0, i1 %292) #4, !dbg !52
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %292, i32 0, i1 %292) #4, !dbg !52
  %311 = getelementptr float, ptr addrspace(1) %7, i64 %301, !dbg !53
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %311, i1 %291, i32 0, i1 %291) #4, !dbg !54
  %313 = bitcast i32 %312 to float, !dbg !54
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %311, i1 %291, i32 0, i1 %291) #4, !dbg !54
  %315 = bitcast i32 %314 to float, !dbg !54
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %311, i1 %291, i32 0, i1 %291) #4, !dbg !54
  %317 = bitcast i32 %316 to float, !dbg !54
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %311, i1 %291, i32 0, i1 %291) #4, !dbg !54
  %319 = bitcast i32 %318 to float, !dbg !54
  %320 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %311, i1 %292, i32 0, i1 %292) #4, !dbg !54
  %321 = bitcast i32 %320 to float, !dbg !54
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %311, i1 %292, i32 0, i1 %292) #4, !dbg !54
  %323 = bitcast i32 %322 to float, !dbg !54
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %311, i1 %292, i32 0, i1 %292) #4, !dbg !54
  %325 = bitcast i32 %324 to float, !dbg !54
  %326 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %311, i1 %292, i32 0, i1 %292) #4, !dbg !54
  %327 = bitcast i32 %326 to float, !dbg !54
  %328 = fadd float %313, 0x3EE4F8B580000000, !dbg !55
  %329 = fadd float %315, 0x3EE4F8B580000000, !dbg !55
  %330 = fadd float %317, 0x3EE4F8B580000000, !dbg !55
  %331 = fadd float %319, 0x3EE4F8B580000000, !dbg !55
  %332 = fadd float %321, 0x3EE4F8B580000000, !dbg !55
  %333 = fadd float %323, 0x3EE4F8B580000000, !dbg !55
  %334 = fadd float %325, 0x3EE4F8B580000000, !dbg !55
  %335 = fadd float %327, 0x3EE4F8B580000000, !dbg !55
  %336 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !56
  %.not.i36 = icmp eq i32 %336, 0, !dbg !56
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !56
  %.not1.i39 = icmp eq i32 %337, 0, !dbg !56
  br i1 %.not.i36, label %343, label %338, !dbg !56

338:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %341, label %339, !dbg !56

339:                                              ; preds = %338
  %340 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %328) #4, !dbg !56
  br label %__nv_sqrtf.exit40, !dbg !56

341:                                              ; preds = %338
  %342 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %328) #4, !dbg !56
  br label %__nv_sqrtf.exit40, !dbg !56

343:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %346, label %344, !dbg !56

344:                                              ; preds = %343
  %345 = tail call float @llvm.nvvm.sqrt.rn.f(float %328) #4, !dbg !56
  br label %__nv_sqrtf.exit40, !dbg !56

346:                                              ; preds = %343
  %347 = tail call float @llvm.nvvm.sqrt.approx.f(float %328) #4, !dbg !56
  br label %__nv_sqrtf.exit40, !dbg !56

__nv_sqrtf.exit40:                                ; preds = %339, %341, %344, %346
  %.0.i38 = phi float [ %340, %339 ], [ %342, %341 ], [ %345, %344 ], [ %347, %346 ], !dbg !56
  %348 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !56
  %.not.i41 = icmp eq i32 %348, 0, !dbg !56
  %349 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !56
  %.not1.i44 = icmp eq i32 %349, 0, !dbg !56
  br i1 %.not.i41, label %355, label %350, !dbg !56

350:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %353, label %351, !dbg !56

351:                                              ; preds = %350
  %352 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %329) #4, !dbg !56
  br label %__nv_sqrtf.exit45, !dbg !56

353:                                              ; preds = %350
  %354 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %329) #4, !dbg !56
  br label %__nv_sqrtf.exit45, !dbg !56

355:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %358, label %356, !dbg !56

356:                                              ; preds = %355
  %357 = tail call float @llvm.nvvm.sqrt.rn.f(float %329) #4, !dbg !56
  br label %__nv_sqrtf.exit45, !dbg !56

358:                                              ; preds = %355
  %359 = tail call float @llvm.nvvm.sqrt.approx.f(float %329) #4, !dbg !56
  br label %__nv_sqrtf.exit45, !dbg !56

__nv_sqrtf.exit45:                                ; preds = %351, %353, %356, %358
  %.0.i43 = phi float [ %352, %351 ], [ %354, %353 ], [ %357, %356 ], [ %359, %358 ], !dbg !56
  %360 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !56
  %.not.i46 = icmp eq i32 %360, 0, !dbg !56
  %361 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !56
  %.not1.i49 = icmp eq i32 %361, 0, !dbg !56
  br i1 %.not.i46, label %367, label %362, !dbg !56

362:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %365, label %363, !dbg !56

363:                                              ; preds = %362
  %364 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %330) #4, !dbg !56
  br label %__nv_sqrtf.exit50, !dbg !56

365:                                              ; preds = %362
  %366 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %330) #4, !dbg !56
  br label %__nv_sqrtf.exit50, !dbg !56

367:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %370, label %368, !dbg !56

368:                                              ; preds = %367
  %369 = tail call float @llvm.nvvm.sqrt.rn.f(float %330) #4, !dbg !56
  br label %__nv_sqrtf.exit50, !dbg !56

370:                                              ; preds = %367
  %371 = tail call float @llvm.nvvm.sqrt.approx.f(float %330) #4, !dbg !56
  br label %__nv_sqrtf.exit50, !dbg !56

__nv_sqrtf.exit50:                                ; preds = %363, %365, %368, %370
  %.0.i48 = phi float [ %364, %363 ], [ %366, %365 ], [ %369, %368 ], [ %371, %370 ], !dbg !56
  %372 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !56
  %.not.i51 = icmp eq i32 %372, 0, !dbg !56
  %373 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !56
  %.not1.i54 = icmp eq i32 %373, 0, !dbg !56
  br i1 %.not.i51, label %379, label %374, !dbg !56

374:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %377, label %375, !dbg !56

375:                                              ; preds = %374
  %376 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %331) #4, !dbg !56
  br label %__nv_sqrtf.exit55, !dbg !56

377:                                              ; preds = %374
  %378 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %331) #4, !dbg !56
  br label %__nv_sqrtf.exit55, !dbg !56

379:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %382, label %380, !dbg !56

380:                                              ; preds = %379
  %381 = tail call float @llvm.nvvm.sqrt.rn.f(float %331) #4, !dbg !56
  br label %__nv_sqrtf.exit55, !dbg !56

382:                                              ; preds = %379
  %383 = tail call float @llvm.nvvm.sqrt.approx.f(float %331) #4, !dbg !56
  br label %__nv_sqrtf.exit55, !dbg !56

__nv_sqrtf.exit55:                                ; preds = %375, %377, %380, %382
  %.0.i53 = phi float [ %376, %375 ], [ %378, %377 ], [ %381, %380 ], [ %383, %382 ], !dbg !56
  %384 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !56
  %.not.i56 = icmp eq i32 %384, 0, !dbg !56
  %385 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !56
  %.not1.i59 = icmp eq i32 %385, 0, !dbg !56
  br i1 %.not.i56, label %391, label %386, !dbg !56

386:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %389, label %387, !dbg !56

387:                                              ; preds = %386
  %388 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %332) #4, !dbg !56
  br label %__nv_sqrtf.exit60, !dbg !56

389:                                              ; preds = %386
  %390 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %332) #4, !dbg !56
  br label %__nv_sqrtf.exit60, !dbg !56

391:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %394, label %392, !dbg !56

392:                                              ; preds = %391
  %393 = tail call float @llvm.nvvm.sqrt.rn.f(float %332) #4, !dbg !56
  br label %__nv_sqrtf.exit60, !dbg !56

394:                                              ; preds = %391
  %395 = tail call float @llvm.nvvm.sqrt.approx.f(float %332) #4, !dbg !56
  br label %__nv_sqrtf.exit60, !dbg !56

__nv_sqrtf.exit60:                                ; preds = %387, %389, %392, %394
  %.0.i58 = phi float [ %388, %387 ], [ %390, %389 ], [ %393, %392 ], [ %395, %394 ], !dbg !56
  %396 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !56
  %.not.i61 = icmp eq i32 %396, 0, !dbg !56
  %397 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !56
  %.not1.i64 = icmp eq i32 %397, 0, !dbg !56
  br i1 %.not.i61, label %403, label %398, !dbg !56

398:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %401, label %399, !dbg !56

399:                                              ; preds = %398
  %400 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %333) #4, !dbg !56
  br label %__nv_sqrtf.exit65, !dbg !56

401:                                              ; preds = %398
  %402 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %333) #4, !dbg !56
  br label %__nv_sqrtf.exit65, !dbg !56

403:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %406, label %404, !dbg !56

404:                                              ; preds = %403
  %405 = tail call float @llvm.nvvm.sqrt.rn.f(float %333) #4, !dbg !56
  br label %__nv_sqrtf.exit65, !dbg !56

406:                                              ; preds = %403
  %407 = tail call float @llvm.nvvm.sqrt.approx.f(float %333) #4, !dbg !56
  br label %__nv_sqrtf.exit65, !dbg !56

__nv_sqrtf.exit65:                                ; preds = %399, %401, %404, %406
  %.0.i63 = phi float [ %400, %399 ], [ %402, %401 ], [ %405, %404 ], [ %407, %406 ], !dbg !56
  %408 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !56
  %.not.i66 = icmp eq i32 %408, 0, !dbg !56
  %409 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !56
  %.not1.i69 = icmp eq i32 %409, 0, !dbg !56
  br i1 %.not.i66, label %415, label %410, !dbg !56

410:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %413, label %411, !dbg !56

411:                                              ; preds = %410
  %412 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %334) #4, !dbg !56
  br label %__nv_sqrtf.exit70, !dbg !56

413:                                              ; preds = %410
  %414 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %334) #4, !dbg !56
  br label %__nv_sqrtf.exit70, !dbg !56

415:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %418, label %416, !dbg !56

416:                                              ; preds = %415
  %417 = tail call float @llvm.nvvm.sqrt.rn.f(float %334) #4, !dbg !56
  br label %__nv_sqrtf.exit70, !dbg !56

418:                                              ; preds = %415
  %419 = tail call float @llvm.nvvm.sqrt.approx.f(float %334) #4, !dbg !56
  br label %__nv_sqrtf.exit70, !dbg !56

__nv_sqrtf.exit70:                                ; preds = %411, %413, %416, %418
  %.0.i68 = phi float [ %412, %411 ], [ %414, %413 ], [ %417, %416 ], [ %419, %418 ], !dbg !56
  %420 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !56
  %.not.i71 = icmp eq i32 %420, 0, !dbg !56
  %421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !56
  %.not1.i74 = icmp eq i32 %421, 0, !dbg !56
  br i1 %.not.i71, label %427, label %422, !dbg !56

422:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %425, label %423, !dbg !56

423:                                              ; preds = %422
  %424 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %335) #4, !dbg !56
  br label %__nv_sqrtf.exit75, !dbg !56

425:                                              ; preds = %422
  %426 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %335) #4, !dbg !56
  br label %__nv_sqrtf.exit75, !dbg !56

427:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %430, label %428, !dbg !56

428:                                              ; preds = %427
  %429 = tail call float @llvm.nvvm.sqrt.rn.f(float %335) #4, !dbg !56
  br label %__nv_sqrtf.exit75, !dbg !56

430:                                              ; preds = %427
  %431 = tail call float @llvm.nvvm.sqrt.approx.f(float %335) #4, !dbg !56
  br label %__nv_sqrtf.exit75, !dbg !56

__nv_sqrtf.exit75:                                ; preds = %423, %425, %428, %430
  %.0.i73 = phi float [ %424, %423 ], [ %426, %425 ], [ %429, %428 ], [ %431, %430 ], !dbg !56
  %432 = insertelement <16 x i32> poison, i32 %300, i64 0, !dbg !50
  %433 = insertelement <16 x i32> %432, i32 %299, i64 1, !dbg !50
  %434 = insertelement <16 x i32> %433, i32 %298, i64 2, !dbg !50
  %435 = insertelement <16 x i32> %434, i32 %297, i64 3, !dbg !50
  %436 = insertelement <16 x i32> %435, i32 %296, i64 4, !dbg !50
  %437 = insertelement <16 x i32> %436, i32 %295, i64 5, !dbg !50
  %438 = insertelement <16 x i32> %437, i32 %294, i64 6, !dbg !50
  %439 = insertelement <16 x i32> %438, i32 %293, i64 7, !dbg !50
  %440 = insertelement <16 x i32> %439, i32 %98, i64 8, !dbg !50
  %441 = insertelement <16 x i32> %440, i32 %99, i64 9, !dbg !50
  %442 = insertelement <16 x i32> %441, i32 %100, i64 10, !dbg !50
  %443 = insertelement <16 x i32> %442, i32 %101, i64 11, !dbg !50
  %444 = insertelement <16 x i32> %443, i32 %102, i64 12, !dbg !50
  %445 = insertelement <16 x i32> %444, i32 %103, i64 13, !dbg !50
  %446 = insertelement <16 x i32> %445, i32 %104, i64 14, !dbg !50
  %447 = insertelement <16 x i32> %446, i32 %105, i64 15, !dbg !50
  %448 = bitcast <16 x i32> %447 to <16 x float>, !dbg !50
  %449 = insertelement <16 x i32> poison, i32 %310, i64 0, !dbg !52
  %450 = insertelement <16 x i32> %449, i32 %309, i64 1, !dbg !52
  %451 = insertelement <16 x i32> %450, i32 %308, i64 2, !dbg !52
  %452 = insertelement <16 x i32> %451, i32 %307, i64 3, !dbg !52
  %453 = insertelement <16 x i32> %452, i32 %306, i64 4, !dbg !52
  %454 = insertelement <16 x i32> %453, i32 %305, i64 5, !dbg !52
  %455 = insertelement <16 x i32> %454, i32 %304, i64 6, !dbg !52
  %456 = insertelement <16 x i32> %455, i32 %303, i64 7, !dbg !52
  %457 = insertelement <16 x i32> %456, i32 %108, i64 8, !dbg !52
  %458 = insertelement <16 x i32> %457, i32 %109, i64 9, !dbg !52
  %459 = insertelement <16 x i32> %458, i32 %110, i64 10, !dbg !52
  %460 = insertelement <16 x i32> %459, i32 %111, i64 11, !dbg !52
  %461 = insertelement <16 x i32> %460, i32 %112, i64 12, !dbg !52
  %462 = insertelement <16 x i32> %461, i32 %113, i64 13, !dbg !52
  %463 = insertelement <16 x i32> %462, i32 %114, i64 14, !dbg !52
  %464 = insertelement <16 x i32> %463, i32 %115, i64 15, !dbg !52
  %465 = bitcast <16 x i32> %464 to <16 x float>, !dbg !52
  %466 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !23
  %467 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !23
  %468 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !23
  %469 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !23
  %470 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !23
  %471 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !23
  %472 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !23
  %473 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !23
  %474 = and i32 %20, 127, !dbg !14
  %475 = or disjoint i32 %474, %19, !dbg !15
  %476 = or disjoint i32 %475, 896, !dbg !15
  %477 = icmp slt i32 %476, 1024, !dbg !16
  %478 = and i1 %17, %477, !dbg !22
  %479 = or disjoint i32 %475, 768, !dbg !15
  %480 = icmp slt i32 %479, 1024, !dbg !16
  %481 = and i1 %17, %480, !dbg !22
  %482 = or disjoint i32 %475, 640, !dbg !15
  %483 = icmp slt i32 %482, 1024, !dbg !16
  %484 = and i1 %17, %483, !dbg !22
  %485 = or disjoint i32 %475, 512, !dbg !15
  %486 = icmp slt i32 %485, 1024, !dbg !16
  %487 = and i1 %17, %486, !dbg !22
  %488 = or disjoint i32 %474, 384, !dbg !14
  %489 = or disjoint i32 %19, %488, !dbg !15
  %490 = icmp slt i32 %489, 1024, !dbg !16
  %491 = and i1 %17, %490, !dbg !22
  %492 = or disjoint i32 %474, 256, !dbg !14
  %493 = or disjoint i32 %19, %492, !dbg !15
  %494 = icmp slt i32 %493, 1024, !dbg !16
  %495 = and i1 %17, %494, !dbg !22
  %496 = or disjoint i32 %474, 128, !dbg !14
  %497 = or disjoint i32 %19, %496, !dbg !15
  %498 = icmp slt i32 %497, 1024, !dbg !16
  %499 = and i1 %17, %498, !dbg !22
  %500 = icmp slt i32 %475, 1024, !dbg !16
  %501 = and i1 %17, %500, !dbg !22
  %.frozen83 = freeze i32 %16, !dbg !57
  %502 = sdiv i32 %.frozen83, 16, !dbg !57
  %503 = srem i32 %502, 2, !dbg !58
  %504 = mul i32 %502, 16, !dbg !59
  %.decomposed84 = sub i32 %.frozen83, %504, !dbg !59
  %505 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #4, !dbg !60
  %506 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #4, !dbg !60
  %507 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #4, !dbg !60
  %508 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #4, !dbg !60
  %509 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #4, !dbg !60
  %510 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #4, !dbg !60
  %511 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #4, !dbg !60
  %512 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #4, !dbg !60
  %513 = getelementptr float, ptr addrspace(1) %8, i64 %301, !dbg !61
  %514 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %513, i1 %291, i32 0, i1 %291) #4, !dbg !62
  %515 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %513, i1 %291, i32 0, i1 %291) #4, !dbg !62
  %516 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %513, i1 %291, i32 0, i1 %291) #4, !dbg !62
  %517 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %513, i1 %291, i32 0, i1 %291) #4, !dbg !62
  %518 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %513, i1 %292, i32 0, i1 %292) #4, !dbg !62
  %519 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %513, i1 %292, i32 0, i1 %292) #4, !dbg !62
  %520 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %513, i1 %292, i32 0, i1 %292) #4, !dbg !62
  %521 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %513, i1 %292, i32 0, i1 %292) #4, !dbg !62
  %522 = getelementptr float, ptr addrspace(1) %9, i64 %301, !dbg !63
  %523 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %522, i1 %291, i32 0, i1 %291) #4, !dbg !64
  %524 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %522, i1 %291, i32 0, i1 %291) #4, !dbg !64
  %525 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %522, i1 %291, i32 0, i1 %291) #4, !dbg !64
  %526 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %522, i1 %291, i32 0, i1 %291) #4, !dbg !64
  %527 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %522, i1 %292, i32 0, i1 %292) #4, !dbg !64
  %528 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %522, i1 %292, i32 0, i1 %292) #4, !dbg !64
  %529 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %522, i1 %292, i32 0, i1 %292) #4, !dbg !64
  %530 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %522, i1 %292, i32 0, i1 %292) #4, !dbg !64
  %531 = fsub <16 x float> %448, %465, !dbg !65
  %532 = insertelement <16 x float> poison, float %512, i64 0, !dbg !66
  %533 = insertelement <16 x float> %532, float %511, i64 1, !dbg !66
  %534 = insertelement <16 x float> %533, float %510, i64 2, !dbg !66
  %535 = insertelement <16 x float> %534, float %509, i64 3, !dbg !66
  %536 = insertelement <16 x float> %535, float %508, i64 4, !dbg !66
  %537 = insertelement <16 x float> %536, float %507, i64 5, !dbg !66
  %538 = insertelement <16 x float> %537, float %506, i64 6, !dbg !66
  %539 = insertelement <16 x float> %538, float %505, i64 7, !dbg !66
  %540 = insertelement <16 x float> %539, float %237, i64 8, !dbg !66
  %541 = insertelement <16 x float> %540, float %238, i64 9, !dbg !66
  %542 = insertelement <16 x float> %541, float %239, i64 10, !dbg !66
  %543 = insertelement <16 x float> %542, float %240, i64 11, !dbg !66
  %544 = insertelement <16 x float> %543, float %241, i64 12, !dbg !66
  %545 = insertelement <16 x float> %544, float %242, i64 13, !dbg !66
  %546 = insertelement <16 x float> %545, float %243, i64 14, !dbg !66
  %547 = insertelement <16 x float> %546, float %244, i64 15, !dbg !66
  %548 = fmul <16 x float> %531, %547, !dbg !66
  %549 = insertelement <16 x i32> poison, i32 %521, i64 0, !dbg !62
  %550 = insertelement <16 x i32> %549, i32 %520, i64 1, !dbg !62
  %551 = insertelement <16 x i32> %550, i32 %519, i64 2, !dbg !62
  %552 = insertelement <16 x i32> %551, i32 %518, i64 3, !dbg !62
  %553 = insertelement <16 x i32> %552, i32 %517, i64 4, !dbg !62
  %554 = insertelement <16 x i32> %553, i32 %516, i64 5, !dbg !62
  %555 = insertelement <16 x i32> %554, i32 %515, i64 6, !dbg !62
  %556 = insertelement <16 x i32> %555, i32 %514, i64 7, !dbg !62
  %557 = insertelement <16 x i32> %556, i32 %246, i64 8, !dbg !62
  %558 = insertelement <16 x i32> %557, i32 %247, i64 9, !dbg !62
  %559 = insertelement <16 x i32> %558, i32 %248, i64 10, !dbg !62
  %560 = insertelement <16 x i32> %559, i32 %249, i64 11, !dbg !62
  %561 = insertelement <16 x i32> %560, i32 %250, i64 12, !dbg !62
  %562 = insertelement <16 x i32> %561, i32 %251, i64 13, !dbg !62
  %563 = insertelement <16 x i32> %562, i32 %252, i64 14, !dbg !62
  %564 = insertelement <16 x i32> %563, i32 %253, i64 15, !dbg !62
  %565 = bitcast <16 x i32> %564 to <16 x float>, !dbg !62
  %566 = fmul <16 x float> %548, %565, !dbg !67
  %567 = insertelement <16 x i32> poison, i32 %530, i64 0, !dbg !64
  %568 = insertelement <16 x i32> %567, i32 %529, i64 1, !dbg !64
  %569 = insertelement <16 x i32> %568, i32 %528, i64 2, !dbg !64
  %570 = insertelement <16 x i32> %569, i32 %527, i64 3, !dbg !64
  %571 = insertelement <16 x i32> %570, i32 %526, i64 4, !dbg !64
  %572 = insertelement <16 x i32> %571, i32 %525, i64 5, !dbg !64
  %573 = insertelement <16 x i32> %572, i32 %524, i64 6, !dbg !64
  %574 = insertelement <16 x i32> %573, i32 %523, i64 7, !dbg !64
  %575 = insertelement <16 x i32> %574, i32 %255, i64 8, !dbg !64
  %576 = insertelement <16 x i32> %575, i32 %256, i64 9, !dbg !64
  %577 = insertelement <16 x i32> %576, i32 %257, i64 10, !dbg !64
  %578 = insertelement <16 x i32> %577, i32 %258, i64 11, !dbg !64
  %579 = insertelement <16 x i32> %578, i32 %259, i64 12, !dbg !64
  %580 = insertelement <16 x i32> %579, i32 %260, i64 13, !dbg !64
  %581 = insertelement <16 x i32> %580, i32 %261, i64 14, !dbg !64
  %582 = insertelement <16 x i32> %581, i32 %262, i64 15, !dbg !64
  %583 = bitcast <16 x i32> %582 to <16 x float>, !dbg !64
  %584 = fadd <16 x float> %566, %583, !dbg !68
  %585 = fcmp olt <16 x float> %584, zeroinitializer, !dbg !69
  %586 = insertelement <8 x i32> poison, i32 %466, i64 0, !dbg !23
  %587 = insertelement <8 x i32> %586, i32 %467, i64 1, !dbg !23
  %588 = insertelement <8 x i32> %587, i32 %468, i64 2, !dbg !23
  %589 = insertelement <8 x i32> %588, i32 %469, i64 3, !dbg !23
  %590 = insertelement <8 x i32> %589, i32 %470, i64 4, !dbg !23
  %591 = insertelement <8 x i32> %590, i32 %471, i64 5, !dbg !23
  %592 = insertelement <8 x i32> %591, i32 %472, i64 6, !dbg !23
  %593 = insertelement <8 x i32> %592, i32 %473, i64 7, !dbg !23
  %594 = bitcast <8 x i32> %593 to <8 x float>, !dbg !23
  %595 = shufflevector <16 x i1> %585, <16 x i1> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !73
  %596 = shufflevector <16 x float> %584, <16 x float> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !73
  %597 = select <8 x i1> %595, <8 x float> zeroinitializer, <8 x float> %596, !dbg !73
  %598 = shufflevector <8 x float> %597, <8 x float> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>, !dbg !73
  %599 = shufflevector <16 x i1> %585, <16 x i1> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !75
  %600 = shufflevector <16 x float> %584, <16 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !75
  %601 = select <8 x i1> %599, <8 x float> zeroinitializer, <8 x float> %600, !dbg !75
  %602 = insertelement <8 x i1> poison, i1 %52, i64 0, !dbg !76
  %603 = shufflevector <8 x i1> %602, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !76
  %604 = select <8 x i1> %603, <8 x float> %598, <8 x float> %601, !dbg !76
  %605 = fadd <8 x float> %604, %594, !dbg !77
  %606 = fcmp olt <8 x float> %605, zeroinitializer, !dbg !78
  %607 = select <8 x i1> %606, <8 x float> zeroinitializer, <8 x float> %605, !dbg !80
  %608 = fcmp ole <8 x float> %607, zeroinitializer, !dbg !81
  %609 = shl nsw i32 %503, 10, !dbg !82
  %610 = shl nsw i32 %.decomposed84, 11, !dbg !83
  %611 = shl i32 %39, 15, !dbg !84
  %612 = add i32 %611, %610, !dbg !85
  %613 = add i32 %612, %609, !dbg !86
  %614 = add i32 %613, %29, !dbg !87
  %615 = add i32 %612, %33, !dbg !86
  %616 = add i32 %615, %609, !dbg !87
  %617 = sext i32 %614 to i64, !dbg !88
  %618 = getelementptr float, ptr addrspace(1) %11, i64 %617, !dbg !88
  %619 = sext i32 %616 to i64, !dbg !88
  %620 = getelementptr float, ptr addrspace(1) %11, i64 %619, !dbg !88
  %bc = bitcast <8 x float> %607 to <8 x i32>, !dbg !89
  %621 = extractelement <8 x i32> %bc, i64 7, !dbg !89
  %bc76 = bitcast <8 x float> %607 to <8 x i32>, !dbg !89
  %622 = extractelement <8 x i32> %bc76, i64 6, !dbg !89
  %bc77 = bitcast <8 x float> %607 to <8 x i32>, !dbg !89
  %623 = extractelement <8 x i32> %bc77, i64 5, !dbg !89
  %bc78 = bitcast <8 x float> %607 to <8 x i32>, !dbg !89
  %624 = extractelement <8 x i32> %bc78, i64 4, !dbg !89
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %621, i32 %622, i32 %623, i32 %624, ptr addrspace(1) %618, i1 %48) #4, !dbg !89
  %bc79 = bitcast <8 x float> %607 to <8 x i32>, !dbg !89
  %625 = extractelement <8 x i32> %bc79, i64 3, !dbg !89
  %bc80 = bitcast <8 x float> %607 to <8 x i32>, !dbg !89
  %626 = extractelement <8 x i32> %bc80, i64 2, !dbg !89
  %bc81 = bitcast <8 x float> %607 to <8 x i32>, !dbg !89
  %627 = extractelement <8 x i32> %bc81, i64 1, !dbg !89
  %bc82 = bitcast <8 x float> %607 to <8 x i32>, !dbg !89
  %628 = extractelement <8 x i32> %bc82, i64 0, !dbg !89
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %625, i32 %626, i32 %627, i32 %628, ptr addrspace(1) %620, i1 %49) #4, !dbg !89
  %629 = shl i32 %475, 5, !dbg !90
  %630 = shl i32 %497, 5, !dbg !90
  %631 = shl i32 %493, 5, !dbg !90
  %632 = shl i32 %489, 5, !dbg !90
  %633 = shl i32 %485, 5, !dbg !90
  %634 = shl i32 %482, 5, !dbg !90
  %635 = shl i32 %479, 5, !dbg !90
  %636 = shl i32 %476, 5, !dbg !90
  %637 = add i32 %611, %.decomposed, !dbg !91
  %638 = add i32 %637, %629, !dbg !92
  %639 = add i32 %637, %630, !dbg !92
  %640 = add i32 %637, %631, !dbg !92
  %641 = add i32 %637, %632, !dbg !92
  %642 = add i32 %637, %633, !dbg !92
  %643 = add i32 %637, %634, !dbg !92
  %644 = add i32 %637, %635, !dbg !92
  %645 = add i32 %637, %636, !dbg !92
  %646 = sext i32 %638 to i64, !dbg !93
  %647 = getelementptr i1, ptr addrspace(1) %12, i64 %646, !dbg !93
  %648 = sext i32 %639 to i64, !dbg !93
  %649 = getelementptr i1, ptr addrspace(1) %12, i64 %648, !dbg !93
  %650 = sext i32 %640 to i64, !dbg !93
  %651 = getelementptr i1, ptr addrspace(1) %12, i64 %650, !dbg !93
  %652 = sext i32 %641 to i64, !dbg !93
  %653 = getelementptr i1, ptr addrspace(1) %12, i64 %652, !dbg !93
  %654 = sext i32 %642 to i64, !dbg !93
  %655 = getelementptr i1, ptr addrspace(1) %12, i64 %654, !dbg !93
  %656 = sext i32 %643 to i64, !dbg !93
  %657 = getelementptr i1, ptr addrspace(1) %12, i64 %656, !dbg !93
  %658 = sext i32 %644 to i64, !dbg !93
  %659 = getelementptr i1, ptr addrspace(1) %12, i64 %658, !dbg !93
  %660 = sext i32 %645 to i64, !dbg !93
  %661 = getelementptr i1, ptr addrspace(1) %12, i64 %660, !dbg !93
  %662 = extractelement <8 x i1> %608, i64 7, !dbg !94
  %663 = zext i1 %662 to i8, !dbg !94
  %664 = extractelement <8 x i1> %608, i64 6, !dbg !94
  %665 = zext i1 %664 to i8, !dbg !94
  %666 = extractelement <8 x i1> %608, i64 5, !dbg !94
  %667 = zext i1 %666 to i8, !dbg !94
  %668 = extractelement <8 x i1> %608, i64 4, !dbg !94
  %669 = zext i1 %668 to i8, !dbg !94
  %670 = extractelement <8 x i1> %608, i64 3, !dbg !94
  %671 = zext i1 %670 to i8, !dbg !94
  %672 = extractelement <8 x i1> %608, i64 2, !dbg !94
  %673 = zext i1 %672 to i8, !dbg !94
  %674 = extractelement <8 x i1> %608, i64 1, !dbg !94
  %675 = zext i1 %674 to i8, !dbg !94
  %676 = extractelement <8 x i1> %608, i64 0, !dbg !94
  %677 = zext i1 %676 to i8, !dbg !94
  %678 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %22, !dbg !94
  %679 = insertelement <1 x i8> poison, i8 %663, i64 0, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %678, <1 x i8> %679, i1 true) #4, !dbg !94
  %680 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %23, !dbg !94
  %681 = insertelement <1 x i8> poison, i8 %665, i64 0, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %680, <1 x i8> %681, i1 true) #4, !dbg !94
  %682 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %24, !dbg !94
  %683 = insertelement <1 x i8> poison, i8 %667, i64 0, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %682, <1 x i8> %683, i1 true) #4, !dbg !94
  %684 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %25, !dbg !94
  %685 = insertelement <1 x i8> poison, i8 %669, i64 0, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %684, <1 x i8> %685, i1 true) #4, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %686 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %474, !dbg !94
  %687 = load i8, ptr addrspace(3) %686, align 1, !dbg !94
  %688 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %496, !dbg !94
  %689 = load i8, ptr addrspace(3) %688, align 1, !dbg !94
  %690 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %492, !dbg !94
  %691 = load i8, ptr addrspace(3) %690, align 1, !dbg !94
  %692 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %488, !dbg !94
  %693 = load i8, ptr addrspace(3) %692, align 1, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %694 = insertelement <1 x i8> poison, i8 %671, i64 0, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %678, <1 x i8> %694, i1 true) #4, !dbg !94
  %695 = insertelement <1 x i8> poison, i8 %673, i64 0, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %680, <1 x i8> %695, i1 true) #4, !dbg !94
  %696 = insertelement <1 x i8> poison, i8 %675, i64 0, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %682, <1 x i8> %696, i1 true) #4, !dbg !94
  %697 = insertelement <1 x i8> poison, i8 %677, i64 0, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %684, <1 x i8> %697, i1 true) #4, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %698 = load i8, ptr addrspace(3) %686, align 1, !dbg !94
  %699 = load i8, ptr addrspace(3) %688, align 1, !dbg !94
  %700 = load i8, ptr addrspace(3) %690, align 1, !dbg !94
  %701 = load i8, ptr addrspace(3) %692, align 1, !dbg !94
  %702 = and i8 %687, 1, !dbg !94
  %703 = and i8 %689, 1, !dbg !94
  %704 = and i8 %691, 1, !dbg !94
  %705 = and i8 %693, 1, !dbg !94
  %706 = and i8 %698, 1, !dbg !94
  %707 = and i8 %699, 1, !dbg !94
  %708 = and i8 %700, 1, !dbg !94
  %709 = and i8 %701, 1, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %702, ptr addrspace(1) %647, i1 %501) #4, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %703, ptr addrspace(1) %649, i1 %499) #4, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %704, ptr addrspace(1) %651, i1 %495) #4, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %705, ptr addrspace(1) %653, i1 %491) #4, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %706, ptr addrspace(1) %655, i1 %487) #4, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %707, ptr addrspace(1) %657, i1 %484) #4, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %708, ptr addrspace(1) %659, i1 %481) #4, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %709, ptr addrspace(1) %661, i1 %478) #4, !dbg !94
  ret void, !dbg !95
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py", directory: "inductor_cache/zx")
!4 = !{ptr @triton_poi_fused_add_cat_clone_relu_threshold_backward_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_cat_clone_relu_threshold_backward_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_cat_clone_relu_threshold_backward_16", linkageName: "triton_poi_fused_add_cat_clone_relu_threshold_backward_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 34, column: 42, scope: !7)
!20 = !DILocation(line: 34, column: 37, scope: !7)
!21 = !DILocation(line: 34, column: 32, scope: !7)
!22 = !DILocation(line: 34, column: 55, scope: !7)
!23 = !DILocation(line: 34, column: 47, scope: !7)
!24 = !DILocation(line: 39, column: 18, scope: !7)
!25 = !DILocation(line: 40, column: 33, scope: !7)
!26 = !DILocation(line: 40, column: 44, scope: !7)
!27 = !DILocation(line: 40, column: 38, scope: !7)
!28 = !DILocation(line: 40, column: 50, scope: !7)
!29 = !DILocation(line: 40, column: 30, scope: !7)
!30 = !DILocation(line: 40, column: 63, scope: !7)
!31 = !DILocation(line: 40, column: 71, scope: !7)
!32 = !DILocation(line: 40, column: 56, scope: !7)
!33 = !DILocation(line: 41, column: 30, scope: !7)
!34 = !DILocation(line: 41, column: 70, scope: !7)
!35 = !DILocation(line: 43, column: 30, scope: !7)
!36 = !DILocation(line: 43, column: 70, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 27, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 52, column: 31, scope: !7)
!41 = !DILocation(line: 52, column: 71, scope: !7)
!42 = !DILocation(line: 54, column: 31, scope: !7)
!43 = !DILocation(line: 54, column: 71, scope: !7)
!44 = !DILocation(line: 60, column: 20, scope: !7)
!45 = !DILocation(line: 63, column: 59, scope: !7)
!46 = !DILocation(line: 63, column: 51, scope: !7)
!47 = !DILocation(line: 63, column: 31, scope: !7)
!48 = !DILocation(line: 63, column: 73, scope: !7)
!49 = !DILocation(line: 63, column: 81, scope: !7)
!50 = !DILocation(line: 63, column: 65, scope: !7)
!51 = !DILocation(line: 64, column: 31, scope: !7)
!52 = !DILocation(line: 64, column: 79, scope: !7)
!53 = !DILocation(line: 66, column: 31, scope: !7)
!54 = !DILocation(line: 66, column: 79, scope: !7)
!55 = !DILocation(line: 68, column: 20, scope: !7)
!56 = !DILocation(line: 69, column: 27, scope: !7)
!57 = !DILocation(line: 33, column: 21, scope: !7)
!58 = !DILocation(line: 33, column: 27, scope: !7)
!59 = !DILocation(line: 32, column: 19, scope: !7)
!60 = !DILocation(line: 71, column: 20, scope: !7)
!61 = !DILocation(line: 75, column: 31, scope: !7)
!62 = !DILocation(line: 75, column: 79, scope: !7)
!63 = !DILocation(line: 77, column: 31, scope: !7)
!64 = !DILocation(line: 77, column: 79, scope: !7)
!65 = !DILocation(line: 65, column: 20, scope: !7)
!66 = !DILocation(line: 74, column: 20, scope: !7)
!67 = !DILocation(line: 76, column: 20, scope: !7)
!68 = !DILocation(line: 78, column: 20, scope: !7)
!69 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !72)
!70 = distinct !DILexicalBlockFile(scope: !7, file: !71, discriminator: 0)
!71 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!72 = !DILocation(line: 80, column: 42, scope: !7)
!73 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !74)
!74 = !DILocation(line: 57, column: 42, scope: !7)
!75 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !72)
!76 = !DILocation(line: 0, scope: !7)
!77 = !DILocation(line: 84, column: 20, scope: !7)
!78 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !79)
!79 = !DILocation(line: 86, column: 42, scope: !7)
!80 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !79)
!81 = !DILocation(line: 88, column: 21, scope: !7)
!82 = !DILocation(line: 89, column: 35, scope: !7)
!83 = !DILocation(line: 89, column: 45, scope: !7)
!84 = !DILocation(line: 89, column: 56, scope: !7)
!85 = !DILocation(line: 89, column: 30, scope: !7)
!86 = !DILocation(line: 89, column: 40, scope: !7)
!87 = !DILocation(line: 89, column: 50, scope: !7)
!88 = !DILocation(line: 89, column: 25, scope: !7)
!89 = !DILocation(line: 89, column: 68, scope: !7)
!90 = !DILocation(line: 90, column: 33, scope: !7)
!91 = !DILocation(line: 90, column: 30, scope: !7)
!92 = !DILocation(line: 90, column: 38, scope: !7)
!93 = !DILocation(line: 90, column: 25, scope: !7)
!94 = !DILocation(line: 90, column: 56, scope: !7)
!95 = !DILocation(line: 90, column: 4, scope: !7)
