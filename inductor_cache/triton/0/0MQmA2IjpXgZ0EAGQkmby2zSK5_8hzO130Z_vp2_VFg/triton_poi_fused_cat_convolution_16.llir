; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_cat_convolution_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = lshr i32 %11, 4, !dbg !12
  %15 = and i32 %14, 15, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %10, %15, !dbg !13
  %18 = or disjoint i32 %17, 16, !dbg !13
  %19 = or disjoint i32 %17, 32, !dbg !13
  %20 = or disjoint i32 %17, 48, !dbg !13
  %21 = or disjoint i32 %17, 64, !dbg !13
  %22 = or disjoint i32 %17, 80, !dbg !13
  %23 = or disjoint i32 %17, 96, !dbg !13
  %24 = or disjoint i32 %17, 112, !dbg !13
  %25 = or disjoint i32 %17, 128, !dbg !13
  %26 = or disjoint i32 %17, 144, !dbg !13
  %27 = or disjoint i32 %17, 160, !dbg !13
  %28 = or disjoint i32 %17, 176, !dbg !13
  %29 = or disjoint i32 %17, 192, !dbg !13
  %30 = or disjoint i32 %17, 208, !dbg !13
  %31 = or disjoint i32 %17, 224, !dbg !13
  %32 = or disjoint i32 %17, 240, !dbg !13
  %33 = icmp slt i32 %16, 1536, !dbg !14
  %34 = icmp slt i32 %17, 1536, !dbg !14
  %35 = icmp slt i32 %18, 1536, !dbg !14
  %36 = icmp slt i32 %19, 1536, !dbg !14
  %37 = icmp slt i32 %20, 1536, !dbg !14
  %38 = icmp slt i32 %21, 1536, !dbg !14
  %39 = icmp slt i32 %22, 1536, !dbg !14
  %40 = icmp slt i32 %23, 1536, !dbg !14
  %41 = icmp slt i32 %24, 1536, !dbg !14
  %42 = icmp slt i32 %25, 1536, !dbg !14
  %43 = icmp slt i32 %26, 1536, !dbg !14
  %44 = icmp slt i32 %27, 1536, !dbg !14
  %45 = icmp slt i32 %28, 1536, !dbg !14
  %46 = icmp slt i32 %29, 1536, !dbg !14
  %47 = icmp slt i32 %30, 1536, !dbg !14
  %48 = icmp slt i32 %31, 1536, !dbg !14
  %49 = icmp slt i32 %32, 1536, !dbg !14
  %50 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %51 = shl i32 %50, 4, !dbg !16
  %52 = lshr i32 %11, 6, !dbg !17
  %53 = and i32 %52, 3, !dbg !17
  %54 = and i32 %11, 15, !dbg !17
  %55 = or disjoint i32 %51, %53, !dbg !18
  %56 = or disjoint i32 %55, 4, !dbg !18
  %57 = or disjoint i32 %55, 8, !dbg !18
  %58 = or disjoint i32 %55, 12, !dbg !18
  %59 = or disjoint i32 %51, %54, !dbg !18
  %60 = icmp slt i32 %55, 9, !dbg !19
  %61 = icmp slt i32 %56, 9, !dbg !19
  %62 = icmp slt i32 %57, 9, !dbg !19
  %63 = icmp slt i32 %51, 0, !dbg !19
  %64 = icmp slt i32 %59, 9, !dbg !19
  %.frozen = freeze i32 %16, !dbg !20
  %65 = sdiv i32 %.frozen, 384, !dbg !20
  %66 = mul i32 %65, 384, !dbg !21
  %.decomposed = sub i32 %.frozen, %66, !dbg !21
  %67 = icmp slt i32 %.decomposed, 192, !dbg !22
  %68 = mul i32 %55, 192, !dbg !23
  %69 = mul i32 %56, 192, !dbg !23
  %70 = mul i32 %57, 192, !dbg !23
  %71 = mul i32 %58, 192, !dbg !23
  %72 = mul i32 %65, 1728, !dbg !24
  %73 = add i32 %68, %72, !dbg !25
  %74 = add i32 %72, %69, !dbg !25
  %75 = add i32 %72, %70, !dbg !25
  %76 = add i32 %72, %71, !dbg !25
  %77 = add i32 %73, %.decomposed, !dbg !26
  %78 = add i32 %74, %.decomposed, !dbg !26
  %79 = add i32 %75, %.decomposed, !dbg !26
  %80 = add i32 %76, %.decomposed, !dbg !26
  %81 = sext i32 %77 to i64, !dbg !27
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !27
  %83 = sext i32 %78 to i64, !dbg !27
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !27
  %85 = sext i32 %79 to i64, !dbg !27
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !27
  %87 = sext i32 %80 to i64, !dbg !27
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !27
  %89 = and i1 %67, %60, !dbg !28
  %90 = and i1 %61, %67, !dbg !28
  %91 = and i1 %62, %67, !dbg !28
  %92 = and i1 %63, %67, !dbg !28
  %93 = and i1 %33, %89, !dbg !29
  %94 = and i1 %33, %90, !dbg !29
  %95 = and i1 %33, %91, !dbg !29
  %96 = and i1 %33, %92, !dbg !29
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93) #2, !dbg !30
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !30
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !30
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !30
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !30
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %84, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #2, !dbg !30
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !30
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !30
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !30
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !30
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %86, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95) #2, !dbg !30
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !30
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !30
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !30
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !30
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 %96, i32 0, i1 %96, i32 0, i1 %96, i32 0, i1 %96, i32 0, i1 %96) #2, !dbg !30
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !30
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !30
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !30
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !30
  %117 = sext i32 %.decomposed to i64, !dbg !31
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !31
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %118, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93) #2, !dbg !32
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !32
  %121 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !32
  %122 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !32
  %123 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !32
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %118, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #2, !dbg !32
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !32
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !32
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !32
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !32
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %118, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95) #2, !dbg !32
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !32
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !32
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !32
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !32
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %118, i1 %96, i32 0, i1 %96, i32 0, i1 %96, i32 0, i1 %96, i32 0, i1 %96) #2, !dbg !32
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !32
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !32
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !32
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !32
  %139 = icmp sgt i32 %.decomposed, 191, !dbg !33
  %140 = add nsw i32 %.decomposed, -192, !dbg !34
  %141 = add i32 %73, %140, !dbg !35
  %142 = add i32 %74, %140, !dbg !35
  %143 = add i32 %75, %140, !dbg !35
  %144 = add i32 %76, %140, !dbg !35
  %145 = sext i32 %141 to i64, !dbg !36
  %146 = getelementptr float, ptr addrspace(1) %2, i64 %145, !dbg !36
  %147 = sext i32 %142 to i64, !dbg !36
  %148 = getelementptr float, ptr addrspace(1) %2, i64 %147, !dbg !36
  %149 = sext i32 %143 to i64, !dbg !36
  %150 = getelementptr float, ptr addrspace(1) %2, i64 %149, !dbg !36
  %151 = sext i32 %144 to i64, !dbg !36
  %152 = getelementptr float, ptr addrspace(1) %2, i64 %151, !dbg !36
  %153 = and i1 %139, %60, !dbg !37
  %154 = and i1 %61, %139, !dbg !37
  %155 = and i1 %62, %139, !dbg !37
  %156 = and i1 %63, %139, !dbg !37
  %157 = and i1 %33, %153, !dbg !38
  %158 = and i1 %33, %154, !dbg !38
  %159 = and i1 %33, %155, !dbg !38
  %160 = and i1 %33, %156, !dbg !38
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %146, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157) #2, !dbg !39
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !39
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !39
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !39
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !39
  %166 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %148, i1 %158, i32 0, i1 %158, i32 0, i1 %158, i32 0, i1 %158, i32 0, i1 %158) #2, !dbg !39
  %167 = extractvalue { i32, i32, i32, i32 } %166, 0, !dbg !39
  %168 = extractvalue { i32, i32, i32, i32 } %166, 1, !dbg !39
  %169 = extractvalue { i32, i32, i32, i32 } %166, 2, !dbg !39
  %170 = extractvalue { i32, i32, i32, i32 } %166, 3, !dbg !39
  %171 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %150, i1 %159, i32 0, i1 %159, i32 0, i1 %159, i32 0, i1 %159, i32 0, i1 %159) #2, !dbg !39
  %172 = extractvalue { i32, i32, i32, i32 } %171, 0, !dbg !39
  %173 = extractvalue { i32, i32, i32, i32 } %171, 1, !dbg !39
  %174 = extractvalue { i32, i32, i32, i32 } %171, 2, !dbg !39
  %175 = extractvalue { i32, i32, i32, i32 } %171, 3, !dbg !39
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %152, i1 %160, i32 0, i1 %160, i32 0, i1 %160, i32 0, i1 %160, i32 0, i1 %160) #2, !dbg !39
  %177 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !39
  %178 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !39
  %179 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !39
  %180 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !39
  %181 = sext i32 %140 to i64, !dbg !40
  %182 = getelementptr float, ptr addrspace(1) %3, i64 %181, !dbg !40
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %182, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157) #2, !dbg !41
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !41
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !41
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !41
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !41
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %182, i1 %158, i32 0, i1 %158, i32 0, i1 %158, i32 0, i1 %158, i32 0, i1 %158) #2, !dbg !41
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !41
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !41
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !41
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !41
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %182, i1 %159, i32 0, i1 %159, i32 0, i1 %159, i32 0, i1 %159, i32 0, i1 %159) #2, !dbg !41
  %194 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !41
  %195 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !41
  %196 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !41
  %197 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !41
  %198 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %182, i1 %160, i32 0, i1 %160, i32 0, i1 %160, i32 0, i1 %160, i32 0, i1 %160) #2, !dbg !41
  %199 = extractvalue { i32, i32, i32, i32 } %198, 0, !dbg !41
  %200 = extractvalue { i32, i32, i32, i32 } %198, 1, !dbg !41
  %201 = extractvalue { i32, i32, i32, i32 } %198, 2, !dbg !41
  %202 = extractvalue { i32, i32, i32, i32 } %198, 3, !dbg !41
  %203 = insertelement <32 x i32> poison, i32 %180, i64 0, !dbg !39
  %204 = insertelement <32 x i32> %203, i32 %179, i64 1, !dbg !39
  %205 = insertelement <32 x i32> %204, i32 %178, i64 2, !dbg !39
  %206 = insertelement <32 x i32> %205, i32 %177, i64 3, !dbg !39
  %207 = insertelement <32 x i32> %206, i32 %175, i64 4, !dbg !39
  %208 = insertelement <32 x i32> %207, i32 %174, i64 5, !dbg !39
  %209 = insertelement <32 x i32> %208, i32 %173, i64 6, !dbg !39
  %210 = insertelement <32 x i32> %209, i32 %172, i64 7, !dbg !39
  %211 = insertelement <32 x i32> %210, i32 %170, i64 8, !dbg !39
  %212 = insertelement <32 x i32> %211, i32 %169, i64 9, !dbg !39
  %213 = insertelement <32 x i32> %212, i32 %168, i64 10, !dbg !39
  %214 = insertelement <32 x i32> %213, i32 %167, i64 11, !dbg !39
  %215 = insertelement <32 x i32> %214, i32 %165, i64 12, !dbg !39
  %216 = insertelement <32 x i32> %215, i32 %164, i64 13, !dbg !39
  %217 = insertelement <32 x i32> %216, i32 %163, i64 14, !dbg !39
  %218 = insertelement <32 x i32> %217, i32 %162, i64 15, !dbg !39
  %219 = insertelement <32 x i32> %218, i32 %116, i64 16, !dbg !39
  %220 = insertelement <32 x i32> %219, i32 %115, i64 17, !dbg !39
  %221 = insertelement <32 x i32> %220, i32 %114, i64 18, !dbg !39
  %222 = insertelement <32 x i32> %221, i32 %113, i64 19, !dbg !39
  %223 = insertelement <32 x i32> %222, i32 %111, i64 20, !dbg !39
  %224 = insertelement <32 x i32> %223, i32 %110, i64 21, !dbg !39
  %225 = insertelement <32 x i32> %224, i32 %109, i64 22, !dbg !39
  %226 = insertelement <32 x i32> %225, i32 %108, i64 23, !dbg !39
  %227 = insertelement <32 x i32> %226, i32 %106, i64 24, !dbg !39
  %228 = insertelement <32 x i32> %227, i32 %105, i64 25, !dbg !39
  %229 = insertelement <32 x i32> %228, i32 %104, i64 26, !dbg !39
  %230 = insertelement <32 x i32> %229, i32 %103, i64 27, !dbg !39
  %231 = insertelement <32 x i32> %230, i32 %101, i64 28, !dbg !39
  %232 = insertelement <32 x i32> %231, i32 %100, i64 29, !dbg !39
  %233 = insertelement <32 x i32> %232, i32 %99, i64 30, !dbg !39
  %234 = insertelement <32 x i32> %233, i32 %98, i64 31, !dbg !39
  %235 = bitcast <32 x i32> %234 to <32 x float>, !dbg !39
  %236 = insertelement <32 x i32> poison, i32 %202, i64 0, !dbg !41
  %237 = insertelement <32 x i32> %236, i32 %201, i64 1, !dbg !41
  %238 = insertelement <32 x i32> %237, i32 %200, i64 2, !dbg !41
  %239 = insertelement <32 x i32> %238, i32 %199, i64 3, !dbg !41
  %240 = insertelement <32 x i32> %239, i32 %197, i64 4, !dbg !41
  %241 = insertelement <32 x i32> %240, i32 %196, i64 5, !dbg !41
  %242 = insertelement <32 x i32> %241, i32 %195, i64 6, !dbg !41
  %243 = insertelement <32 x i32> %242, i32 %194, i64 7, !dbg !41
  %244 = insertelement <32 x i32> %243, i32 %192, i64 8, !dbg !41
  %245 = insertelement <32 x i32> %244, i32 %191, i64 9, !dbg !41
  %246 = insertelement <32 x i32> %245, i32 %190, i64 10, !dbg !41
  %247 = insertelement <32 x i32> %246, i32 %189, i64 11, !dbg !41
  %248 = insertelement <32 x i32> %247, i32 %187, i64 12, !dbg !41
  %249 = insertelement <32 x i32> %248, i32 %186, i64 13, !dbg !41
  %250 = insertelement <32 x i32> %249, i32 %185, i64 14, !dbg !41
  %251 = insertelement <32 x i32> %250, i32 %184, i64 15, !dbg !41
  %252 = insertelement <32 x i32> %251, i32 %138, i64 16, !dbg !41
  %253 = insertelement <32 x i32> %252, i32 %137, i64 17, !dbg !41
  %254 = insertelement <32 x i32> %253, i32 %136, i64 18, !dbg !41
  %255 = insertelement <32 x i32> %254, i32 %135, i64 19, !dbg !41
  %256 = insertelement <32 x i32> %255, i32 %133, i64 20, !dbg !41
  %257 = insertelement <32 x i32> %256, i32 %132, i64 21, !dbg !41
  %258 = insertelement <32 x i32> %257, i32 %131, i64 22, !dbg !41
  %259 = insertelement <32 x i32> %258, i32 %130, i64 23, !dbg !41
  %260 = insertelement <32 x i32> %259, i32 %128, i64 24, !dbg !41
  %261 = insertelement <32 x i32> %260, i32 %127, i64 25, !dbg !41
  %262 = insertelement <32 x i32> %261, i32 %126, i64 26, !dbg !41
  %263 = insertelement <32 x i32> %262, i32 %125, i64 27, !dbg !41
  %264 = insertelement <32 x i32> %263, i32 %123, i64 28, !dbg !41
  %265 = insertelement <32 x i32> %264, i32 %122, i64 29, !dbg !41
  %266 = insertelement <32 x i32> %265, i32 %121, i64 30, !dbg !41
  %267 = insertelement <32 x i32> %266, i32 %120, i64 31, !dbg !41
  %268 = bitcast <32 x i32> %267 to <32 x float>, !dbg !41
  %269 = fadd <32 x float> %235, %268, !dbg !42
  %270 = fcmp olt <32 x float> %269, zeroinitializer, !dbg !43
  %271 = extractelement <32 x i1> %270, i64 31, !dbg !47
  %272 = extractelement <32 x float> %269, i64 31, !dbg !47
  %273 = select i1 %271, float 0.000000e+00, float %272, !dbg !47
  %274 = extractelement <32 x i1> %270, i64 30, !dbg !47
  %275 = extractelement <32 x float> %269, i64 30, !dbg !47
  %276 = select i1 %274, float 0.000000e+00, float %275, !dbg !47
  %277 = extractelement <32 x i1> %270, i64 29, !dbg !47
  %278 = extractelement <32 x float> %269, i64 29, !dbg !47
  %279 = select i1 %277, float 0.000000e+00, float %278, !dbg !47
  %280 = extractelement <32 x i1> %270, i64 28, !dbg !47
  %281 = extractelement <32 x float> %269, i64 28, !dbg !47
  %282 = select i1 %280, float 0.000000e+00, float %281, !dbg !47
  %283 = extractelement <32 x i1> %270, i64 27, !dbg !47
  %284 = extractelement <32 x float> %269, i64 27, !dbg !47
  %285 = select i1 %283, float 0.000000e+00, float %284, !dbg !47
  %286 = extractelement <32 x i1> %270, i64 26, !dbg !47
  %287 = extractelement <32 x float> %269, i64 26, !dbg !47
  %288 = select i1 %286, float 0.000000e+00, float %287, !dbg !47
  %289 = extractelement <32 x i1> %270, i64 25, !dbg !47
  %290 = extractelement <32 x float> %269, i64 25, !dbg !47
  %291 = select i1 %289, float 0.000000e+00, float %290, !dbg !47
  %292 = extractelement <32 x i1> %270, i64 24, !dbg !47
  %293 = extractelement <32 x float> %269, i64 24, !dbg !47
  %294 = select i1 %292, float 0.000000e+00, float %293, !dbg !47
  %295 = extractelement <32 x i1> %270, i64 23, !dbg !47
  %296 = extractelement <32 x float> %269, i64 23, !dbg !47
  %297 = select i1 %295, float 0.000000e+00, float %296, !dbg !47
  %298 = extractelement <32 x i1> %270, i64 22, !dbg !47
  %299 = extractelement <32 x float> %269, i64 22, !dbg !47
  %300 = select i1 %298, float 0.000000e+00, float %299, !dbg !47
  %301 = extractelement <32 x i1> %270, i64 21, !dbg !47
  %302 = extractelement <32 x float> %269, i64 21, !dbg !47
  %303 = select i1 %301, float 0.000000e+00, float %302, !dbg !47
  %304 = extractelement <32 x i1> %270, i64 20, !dbg !47
  %305 = extractelement <32 x float> %269, i64 20, !dbg !47
  %306 = select i1 %304, float 0.000000e+00, float %305, !dbg !47
  %307 = extractelement <32 x i1> %270, i64 19, !dbg !47
  %308 = extractelement <32 x float> %269, i64 19, !dbg !47
  %309 = select i1 %307, float 0.000000e+00, float %308, !dbg !47
  %310 = extractelement <32 x i1> %270, i64 18, !dbg !47
  %311 = extractelement <32 x float> %269, i64 18, !dbg !47
  %312 = select i1 %310, float 0.000000e+00, float %311, !dbg !47
  %313 = extractelement <32 x i1> %270, i64 17, !dbg !47
  %314 = extractelement <32 x float> %269, i64 17, !dbg !47
  %315 = select i1 %313, float 0.000000e+00, float %314, !dbg !47
  %316 = extractelement <32 x i1> %270, i64 16, !dbg !47
  %317 = extractelement <32 x float> %269, i64 16, !dbg !47
  %318 = select i1 %316, float 0.000000e+00, float %317, !dbg !47
  %319 = extractelement <32 x i1> %270, i64 15, !dbg !49
  %320 = extractelement <32 x float> %269, i64 15, !dbg !49
  %321 = select i1 %319, float 0.000000e+00, float %320, !dbg !49
  %322 = extractelement <32 x i1> %270, i64 14, !dbg !49
  %323 = extractelement <32 x float> %269, i64 14, !dbg !49
  %324 = select i1 %322, float 0.000000e+00, float %323, !dbg !49
  %325 = extractelement <32 x i1> %270, i64 13, !dbg !49
  %326 = extractelement <32 x float> %269, i64 13, !dbg !49
  %327 = select i1 %325, float 0.000000e+00, float %326, !dbg !49
  %328 = extractelement <32 x i1> %270, i64 12, !dbg !49
  %329 = extractelement <32 x float> %269, i64 12, !dbg !49
  %330 = select i1 %328, float 0.000000e+00, float %329, !dbg !49
  %331 = extractelement <32 x i1> %270, i64 11, !dbg !49
  %332 = extractelement <32 x float> %269, i64 11, !dbg !49
  %333 = select i1 %331, float 0.000000e+00, float %332, !dbg !49
  %334 = extractelement <32 x i1> %270, i64 10, !dbg !49
  %335 = extractelement <32 x float> %269, i64 10, !dbg !49
  %336 = select i1 %334, float 0.000000e+00, float %335, !dbg !49
  %337 = extractelement <32 x i1> %270, i64 9, !dbg !49
  %338 = extractelement <32 x float> %269, i64 9, !dbg !49
  %339 = select i1 %337, float 0.000000e+00, float %338, !dbg !49
  %340 = extractelement <32 x i1> %270, i64 8, !dbg !49
  %341 = extractelement <32 x float> %269, i64 8, !dbg !49
  %342 = select i1 %340, float 0.000000e+00, float %341, !dbg !49
  %343 = extractelement <32 x i1> %270, i64 7, !dbg !49
  %344 = extractelement <32 x float> %269, i64 7, !dbg !49
  %345 = select i1 %343, float 0.000000e+00, float %344, !dbg !49
  %346 = extractelement <32 x i1> %270, i64 6, !dbg !49
  %347 = extractelement <32 x float> %269, i64 6, !dbg !49
  %348 = select i1 %346, float 0.000000e+00, float %347, !dbg !49
  %349 = extractelement <32 x i1> %270, i64 5, !dbg !49
  %350 = extractelement <32 x float> %269, i64 5, !dbg !49
  %351 = select i1 %349, float 0.000000e+00, float %350, !dbg !49
  %352 = extractelement <32 x i1> %270, i64 4, !dbg !49
  %353 = extractelement <32 x float> %269, i64 4, !dbg !49
  %354 = select i1 %352, float 0.000000e+00, float %353, !dbg !49
  %355 = extractelement <32 x i1> %270, i64 3, !dbg !49
  %356 = extractelement <32 x float> %269, i64 3, !dbg !49
  %357 = select i1 %355, float 0.000000e+00, float %356, !dbg !49
  %358 = extractelement <32 x i1> %270, i64 2, !dbg !49
  %359 = extractelement <32 x float> %269, i64 2, !dbg !49
  %360 = select i1 %358, float 0.000000e+00, float %359, !dbg !49
  %361 = extractelement <32 x i1> %270, i64 1, !dbg !49
  %362 = extractelement <32 x float> %269, i64 1, !dbg !49
  %363 = select i1 %361, float 0.000000e+00, float %362, !dbg !49
  %364 = extractelement <32 x i1> %270, i64 0, !dbg !49
  %365 = extractelement <32 x float> %269, i64 0, !dbg !49
  %366 = select i1 %364, float 0.000000e+00, float %365, !dbg !49
  %367 = select i1 %67, float %273, float %321, !dbg !50
  %368 = select i1 %67, float %276, float %324, !dbg !50
  %369 = select i1 %67, float %279, float %327, !dbg !50
  %370 = select i1 %67, float %282, float %330, !dbg !50
  %371 = select i1 %67, float %285, float %333, !dbg !50
  %372 = select i1 %67, float %288, float %336, !dbg !50
  %373 = select i1 %67, float %291, float %339, !dbg !50
  %374 = select i1 %67, float %294, float %342, !dbg !50
  %375 = select i1 %67, float %297, float %345, !dbg !50
  %376 = select i1 %67, float %300, float %348, !dbg !50
  %377 = select i1 %67, float %303, float %351, !dbg !50
  %378 = select i1 %67, float %306, float %354, !dbg !50
  %379 = select i1 %67, float %309, float %357, !dbg !50
  %380 = select i1 %67, float %312, float %360, !dbg !50
  %381 = select i1 %67, float %315, float %363, !dbg !50
  %382 = select i1 %67, float %318, float %366, !dbg !50
  %383 = mul i32 %17, 9, !dbg !51
  %384 = mul i32 %18, 9, !dbg !51
  %385 = mul i32 %19, 9, !dbg !51
  %386 = mul i32 %20, 9, !dbg !51
  %387 = mul i32 %21, 9, !dbg !51
  %388 = mul i32 %22, 9, !dbg !51
  %389 = mul i32 %23, 9, !dbg !51
  %390 = mul i32 %24, 9, !dbg !51
  %391 = mul i32 %25, 9, !dbg !51
  %392 = mul i32 %26, 9, !dbg !51
  %393 = mul i32 %27, 9, !dbg !51
  %394 = mul i32 %28, 9, !dbg !51
  %395 = mul i32 %29, 9, !dbg !51
  %396 = mul i32 %30, 9, !dbg !51
  %397 = mul i32 %31, 9, !dbg !51
  %398 = mul i32 %32, 9, !dbg !51
  %399 = add i32 %59, %383, !dbg !52
  %400 = add i32 %59, %384, !dbg !52
  %401 = add i32 %59, %385, !dbg !52
  %402 = add i32 %59, %386, !dbg !52
  %403 = add i32 %59, %387, !dbg !52
  %404 = add i32 %59, %388, !dbg !52
  %405 = add i32 %59, %389, !dbg !52
  %406 = add i32 %59, %390, !dbg !52
  %407 = add i32 %59, %391, !dbg !52
  %408 = add i32 %59, %392, !dbg !52
  %409 = add i32 %59, %393, !dbg !52
  %410 = add i32 %59, %394, !dbg !52
  %411 = add i32 %59, %395, !dbg !52
  %412 = add i32 %59, %396, !dbg !52
  %413 = add i32 %59, %397, !dbg !52
  %414 = add i32 %59, %398, !dbg !52
  %415 = sext i32 %399 to i64, !dbg !53
  %416 = getelementptr float, ptr addrspace(1) %4, i64 %415, !dbg !53
  %417 = sext i32 %400 to i64, !dbg !53
  %418 = getelementptr float, ptr addrspace(1) %4, i64 %417, !dbg !53
  %419 = sext i32 %401 to i64, !dbg !53
  %420 = getelementptr float, ptr addrspace(1) %4, i64 %419, !dbg !53
  %421 = sext i32 %402 to i64, !dbg !53
  %422 = getelementptr float, ptr addrspace(1) %4, i64 %421, !dbg !53
  %423 = sext i32 %403 to i64, !dbg !53
  %424 = getelementptr float, ptr addrspace(1) %4, i64 %423, !dbg !53
  %425 = sext i32 %404 to i64, !dbg !53
  %426 = getelementptr float, ptr addrspace(1) %4, i64 %425, !dbg !53
  %427 = sext i32 %405 to i64, !dbg !53
  %428 = getelementptr float, ptr addrspace(1) %4, i64 %427, !dbg !53
  %429 = sext i32 %406 to i64, !dbg !53
  %430 = getelementptr float, ptr addrspace(1) %4, i64 %429, !dbg !53
  %431 = sext i32 %407 to i64, !dbg !53
  %432 = getelementptr float, ptr addrspace(1) %4, i64 %431, !dbg !53
  %433 = sext i32 %408 to i64, !dbg !53
  %434 = getelementptr float, ptr addrspace(1) %4, i64 %433, !dbg !53
  %435 = sext i32 %409 to i64, !dbg !53
  %436 = getelementptr float, ptr addrspace(1) %4, i64 %435, !dbg !53
  %437 = sext i32 %410 to i64, !dbg !53
  %438 = getelementptr float, ptr addrspace(1) %4, i64 %437, !dbg !53
  %439 = sext i32 %411 to i64, !dbg !53
  %440 = getelementptr float, ptr addrspace(1) %4, i64 %439, !dbg !53
  %441 = sext i32 %412 to i64, !dbg !53
  %442 = getelementptr float, ptr addrspace(1) %4, i64 %441, !dbg !53
  %443 = sext i32 %413 to i64, !dbg !53
  %444 = getelementptr float, ptr addrspace(1) %4, i64 %443, !dbg !53
  %445 = sext i32 %414 to i64, !dbg !53
  %446 = getelementptr float, ptr addrspace(1) %4, i64 %445, !dbg !53
  %447 = and i1 %34, %64, !dbg !54
  %448 = and i1 %35, %64, !dbg !54
  %449 = and i1 %36, %64, !dbg !54
  %450 = and i1 %37, %64, !dbg !54
  %451 = and i1 %38, %64, !dbg !54
  %452 = and i1 %39, %64, !dbg !54
  %453 = and i1 %40, %64, !dbg !54
  %454 = and i1 %41, %64, !dbg !54
  %455 = and i1 %42, %64, !dbg !54
  %456 = and i1 %43, %64, !dbg !54
  %457 = and i1 %44, %64, !dbg !54
  %458 = and i1 %45, %64, !dbg !54
  %459 = and i1 %46, %64, !dbg !54
  %460 = and i1 %47, %64, !dbg !54
  %461 = and i1 %48, %64, !dbg !54
  %462 = and i1 %49, %64, !dbg !54
  %463 = and i1 %33, %60, !dbg !54
  %464 = and i1 %61, %33, !dbg !54
  %465 = and i1 %62, %33, !dbg !54
  %466 = and i1 %63, %33, !dbg !54
  %467 = shl i32 %11, 6, !dbg !55
  %468 = and i32 %467, 4032, !dbg !55
  %469 = or disjoint i32 %468, %53, !dbg !55
  %470 = and i32 %11, 255, !dbg !55
  %471 = lshr exact i32 %468, 2, !dbg !55
  %472 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %471, !dbg !55
  %473 = getelementptr float, ptr addrspace(3) %472, i32 %469, !dbg !55
  %474 = bitcast float %367 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %473, <1 x i32> %474, i1 true) #2, !dbg !55
  %475 = or disjoint i32 %469, 16, !dbg !55
  %476 = lshr i32 %475, 4, !dbg !55
  %477 = getelementptr float, ptr addrspace(3) @global_smem, i32 %476, !dbg !55
  %478 = getelementptr float, ptr addrspace(3) %477, i32 %475, !dbg !55
  %479 = bitcast float %368 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %479, i1 true) #2, !dbg !55
  %480 = or disjoint i32 %469, 32, !dbg !55
  %481 = lshr i32 %480, 4, !dbg !55
  %482 = getelementptr float, ptr addrspace(3) @global_smem, i32 %481, !dbg !55
  %483 = getelementptr float, ptr addrspace(3) %482, i32 %480, !dbg !55
  %484 = bitcast float %369 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %483, <1 x i32> %484, i1 true) #2, !dbg !55
  %485 = or disjoint i32 %469, 48, !dbg !55
  %486 = lshr i32 %485, 4, !dbg !55
  %487 = getelementptr float, ptr addrspace(3) @global_smem, i32 %486, !dbg !55
  %488 = getelementptr float, ptr addrspace(3) %487, i32 %485, !dbg !55
  %489 = bitcast float %370 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %488, <1 x i32> %489, i1 true) #2, !dbg !55
  %490 = or disjoint i32 %469, 4, !dbg !55
  %491 = getelementptr float, ptr addrspace(3) %472, i32 %490, !dbg !55
  %492 = bitcast float %371 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %491, <1 x i32> %492, i1 true) #2, !dbg !55
  %493 = or disjoint i32 %469, 20, !dbg !55
  %494 = lshr i32 %493, 4, !dbg !55
  %495 = getelementptr float, ptr addrspace(3) @global_smem, i32 %494, !dbg !55
  %496 = getelementptr float, ptr addrspace(3) %495, i32 %493, !dbg !55
  %497 = bitcast float %372 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %496, <1 x i32> %497, i1 true) #2, !dbg !55
  %498 = or disjoint i32 %469, 36, !dbg !55
  %499 = lshr i32 %498, 4, !dbg !55
  %500 = getelementptr float, ptr addrspace(3) @global_smem, i32 %499, !dbg !55
  %501 = getelementptr float, ptr addrspace(3) %500, i32 %498, !dbg !55
  %502 = bitcast float %373 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %501, <1 x i32> %502, i1 true) #2, !dbg !55
  %503 = or disjoint i32 %469, 52, !dbg !55
  %504 = lshr i32 %503, 4, !dbg !55
  %505 = getelementptr float, ptr addrspace(3) @global_smem, i32 %504, !dbg !55
  %506 = getelementptr float, ptr addrspace(3) %505, i32 %503, !dbg !55
  %507 = bitcast float %374 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %506, <1 x i32> %507, i1 true) #2, !dbg !55
  %508 = or disjoint i32 %469, 8, !dbg !55
  %509 = getelementptr float, ptr addrspace(3) %472, i32 %508, !dbg !55
  %510 = bitcast float %375 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %509, <1 x i32> %510, i1 true) #2, !dbg !55
  %511 = or disjoint i32 %469, 24, !dbg !55
  %512 = lshr i32 %511, 4, !dbg !55
  %513 = getelementptr float, ptr addrspace(3) @global_smem, i32 %512, !dbg !55
  %514 = getelementptr float, ptr addrspace(3) %513, i32 %511, !dbg !55
  %515 = bitcast float %376 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %514, <1 x i32> %515, i1 true) #2, !dbg !55
  %516 = or disjoint i32 %469, 40, !dbg !55
  %517 = lshr i32 %516, 4, !dbg !55
  %518 = getelementptr float, ptr addrspace(3) @global_smem, i32 %517, !dbg !55
  %519 = getelementptr float, ptr addrspace(3) %518, i32 %516, !dbg !55
  %520 = bitcast float %377 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %519, <1 x i32> %520, i1 true) #2, !dbg !55
  %521 = or disjoint i32 %469, 56, !dbg !55
  %522 = lshr i32 %521, 4, !dbg !55
  %523 = getelementptr float, ptr addrspace(3) @global_smem, i32 %522, !dbg !55
  %524 = getelementptr float, ptr addrspace(3) %523, i32 %521, !dbg !55
  %525 = bitcast float %378 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %524, <1 x i32> %525, i1 true) #2, !dbg !55
  %526 = or disjoint i32 %469, 12, !dbg !55
  %527 = getelementptr float, ptr addrspace(3) %472, i32 %526, !dbg !55
  %528 = bitcast float %379 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %527, <1 x i32> %528, i1 true) #2, !dbg !55
  %529 = or disjoint i32 %469, 28, !dbg !55
  %530 = lshr i32 %529, 4, !dbg !55
  %531 = getelementptr float, ptr addrspace(3) @global_smem, i32 %530, !dbg !55
  %532 = getelementptr float, ptr addrspace(3) %531, i32 %529, !dbg !55
  %533 = bitcast float %380 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %532, <1 x i32> %533, i1 true) #2, !dbg !55
  %534 = or disjoint i32 %469, 44, !dbg !55
  %535 = lshr i32 %534, 4, !dbg !55
  %536 = getelementptr float, ptr addrspace(3) @global_smem, i32 %535, !dbg !55
  %537 = getelementptr float, ptr addrspace(3) %536, i32 %534, !dbg !55
  %538 = bitcast float %381 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %537, <1 x i32> %538, i1 true) #2, !dbg !55
  %539 = or disjoint i32 %469, 60, !dbg !55
  %540 = lshr i32 %539, 4, !dbg !55
  %541 = getelementptr float, ptr addrspace(3) @global_smem, i32 %540, !dbg !55
  %542 = getelementptr float, ptr addrspace(3) %541, i32 %539, !dbg !55
  %543 = bitcast float %382 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %542, <1 x i32> %543, i1 true) #2, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %544 = lshr i32 %470, 4, !dbg !55
  %545 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %544, !dbg !55
  %546 = getelementptr inbounds float, ptr addrspace(3) %545, i32 %470, !dbg !55
  %547 = load i32, ptr addrspace(3) %546, align 4, !dbg !55
  %548 = or disjoint i32 %470, 256, !dbg !55
  %549 = lshr i32 %548, 4, !dbg !55
  %550 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %549, !dbg !55
  %551 = getelementptr inbounds float, ptr addrspace(3) %550, i32 %548, !dbg !55
  %552 = load i32, ptr addrspace(3) %551, align 4, !dbg !55
  %553 = or disjoint i32 %470, 512, !dbg !55
  %554 = lshr i32 %553, 4, !dbg !55
  %555 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %554, !dbg !55
  %556 = getelementptr inbounds float, ptr addrspace(3) %555, i32 %553, !dbg !55
  %557 = load i32, ptr addrspace(3) %556, align 4, !dbg !55
  %558 = or disjoint i32 %470, 768, !dbg !55
  %559 = lshr i32 %558, 4, !dbg !55
  %560 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %559, !dbg !55
  %561 = getelementptr inbounds float, ptr addrspace(3) %560, i32 %558, !dbg !55
  %562 = load i32, ptr addrspace(3) %561, align 4, !dbg !55
  %563 = or disjoint i32 %470, 1024, !dbg !55
  %564 = lshr i32 %563, 4, !dbg !55
  %565 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %564, !dbg !55
  %566 = getelementptr inbounds float, ptr addrspace(3) %565, i32 %563, !dbg !55
  %567 = load i32, ptr addrspace(3) %566, align 4, !dbg !55
  %568 = or disjoint i32 %470, 1280, !dbg !55
  %569 = lshr i32 %568, 4, !dbg !55
  %570 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %569, !dbg !55
  %571 = getelementptr inbounds float, ptr addrspace(3) %570, i32 %568, !dbg !55
  %572 = load i32, ptr addrspace(3) %571, align 4, !dbg !55
  %573 = or disjoint i32 %470, 1536, !dbg !55
  %574 = lshr i32 %573, 4, !dbg !55
  %575 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %574, !dbg !55
  %576 = getelementptr inbounds float, ptr addrspace(3) %575, i32 %573, !dbg !55
  %577 = load i32, ptr addrspace(3) %576, align 4, !dbg !55
  %578 = or disjoint i32 %470, 1792, !dbg !55
  %579 = lshr i32 %578, 4, !dbg !55
  %580 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %579, !dbg !55
  %581 = getelementptr inbounds float, ptr addrspace(3) %580, i32 %578, !dbg !55
  %582 = load i32, ptr addrspace(3) %581, align 4, !dbg !55
  %583 = or disjoint i32 %470, 2048, !dbg !55
  %584 = lshr i32 %583, 4, !dbg !55
  %585 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %584, !dbg !55
  %586 = getelementptr inbounds float, ptr addrspace(3) %585, i32 %583, !dbg !55
  %587 = load i32, ptr addrspace(3) %586, align 4, !dbg !55
  %588 = or disjoint i32 %470, 2304, !dbg !55
  %589 = lshr i32 %588, 4, !dbg !55
  %590 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %589, !dbg !55
  %591 = getelementptr inbounds float, ptr addrspace(3) %590, i32 %588, !dbg !55
  %592 = load i32, ptr addrspace(3) %591, align 4, !dbg !55
  %593 = or disjoint i32 %470, 2560, !dbg !55
  %594 = lshr i32 %593, 4, !dbg !55
  %595 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %594, !dbg !55
  %596 = getelementptr inbounds float, ptr addrspace(3) %595, i32 %593, !dbg !55
  %597 = load i32, ptr addrspace(3) %596, align 4, !dbg !55
  %598 = or disjoint i32 %470, 2816, !dbg !55
  %599 = lshr i32 %598, 4, !dbg !55
  %600 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %599, !dbg !55
  %601 = getelementptr inbounds float, ptr addrspace(3) %600, i32 %598, !dbg !55
  %602 = load i32, ptr addrspace(3) %601, align 4, !dbg !55
  %603 = or disjoint i32 %470, 3072, !dbg !55
  %604 = lshr i32 %603, 4, !dbg !55
  %605 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %604, !dbg !55
  %606 = getelementptr inbounds float, ptr addrspace(3) %605, i32 %603, !dbg !55
  %607 = load i32, ptr addrspace(3) %606, align 4, !dbg !55
  %608 = or disjoint i32 %470, 3328, !dbg !55
  %609 = lshr i32 %608, 4, !dbg !55
  %610 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %609, !dbg !55
  %611 = getelementptr inbounds float, ptr addrspace(3) %610, i32 %608, !dbg !55
  %612 = load i32, ptr addrspace(3) %611, align 4, !dbg !55
  %613 = or disjoint i32 %470, 3584, !dbg !55
  %614 = lshr i32 %613, 4, !dbg !55
  %615 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %614, !dbg !55
  %616 = getelementptr inbounds float, ptr addrspace(3) %615, i32 %613, !dbg !55
  %617 = load i32, ptr addrspace(3) %616, align 4, !dbg !55
  %618 = or disjoint i32 %470, 3840, !dbg !55
  %619 = lshr i32 %618, 4, !dbg !55
  %620 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %619, !dbg !55
  %621 = getelementptr inbounds float, ptr addrspace(3) %620, i32 %618, !dbg !55
  %622 = load i32, ptr addrspace(3) %621, align 4, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %547, ptr addrspace(1) %416, i1 %447) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %552, ptr addrspace(1) %418, i1 %448) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %557, ptr addrspace(1) %420, i1 %449) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %562, ptr addrspace(1) %422, i1 %450) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %567, ptr addrspace(1) %424, i1 %451) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %572, ptr addrspace(1) %426, i1 %452) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %577, ptr addrspace(1) %428, i1 %453) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %582, ptr addrspace(1) %430, i1 %454) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %587, ptr addrspace(1) %432, i1 %455) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %592, ptr addrspace(1) %434, i1 %456) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %597, ptr addrspace(1) %436, i1 %457) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %602, ptr addrspace(1) %438, i1 %458) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %607, ptr addrspace(1) %440, i1 %459) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %612, ptr addrspace(1) %442, i1 %460) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %617, ptr addrspace(1) %444, i1 %461) #2, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %622, ptr addrspace(1) %446, i1 %462) #2, !dbg !55
  %623 = mul i32 %55, 384, !dbg !56
  %624 = mul i32 %56, 384, !dbg !56
  %625 = mul i32 %57, 384, !dbg !56
  %626 = mul i32 %58, 384, !dbg !56
  %627 = mul i32 %65, 3456, !dbg !57
  %628 = add i32 %627, %.decomposed, !dbg !58
  %629 = add i32 %628, %623, !dbg !59
  %630 = add i32 %628, %624, !dbg !59
  %631 = add i32 %628, %625, !dbg !59
  %632 = add i32 %628, %626, !dbg !59
  %633 = sext i32 %629 to i64, !dbg !60
  %634 = getelementptr float, ptr addrspace(1) %5, i64 %633, !dbg !60
  %635 = sext i32 %630 to i64, !dbg !60
  %636 = getelementptr float, ptr addrspace(1) %5, i64 %635, !dbg !60
  %637 = sext i32 %631 to i64, !dbg !60
  %638 = getelementptr float, ptr addrspace(1) %5, i64 %637, !dbg !60
  %639 = sext i32 %632 to i64, !dbg !60
  %640 = getelementptr float, ptr addrspace(1) %5, i64 %639, !dbg !60
  %641 = bitcast float %367 to i32, !dbg !61
  %642 = bitcast float %368 to i32, !dbg !61
  %643 = bitcast float %369 to i32, !dbg !61
  %644 = bitcast float %370 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %641, i32 %642, i32 %643, i32 %644, ptr addrspace(1) %634, i1 %463) #2, !dbg !61
  %645 = bitcast float %371 to i32, !dbg !61
  %646 = bitcast float %372 to i32, !dbg !61
  %647 = bitcast float %373 to i32, !dbg !61
  %648 = bitcast float %374 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %645, i32 %646, i32 %647, i32 %648, ptr addrspace(1) %636, i1 %464) #2, !dbg !61
  %649 = bitcast float %375 to i32, !dbg !61
  %650 = bitcast float %376 to i32, !dbg !61
  %651 = bitcast float %377 to i32, !dbg !61
  %652 = bitcast float %378 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %649, i32 %650, i32 %651, i32 %652, ptr addrspace(1) %638, i1 %465) #2, !dbg !61
  %653 = bitcast float %379 to i32, !dbg !61
  %654 = bitcast float %380 to i32, !dbg !61
  %655 = bitcast float %381 to i32, !dbg !61
  %656 = bitcast float %382 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %653, i32 %654, i32 %655, i32 %656, ptr addrspace(1) %640, i1 %466) #2, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py", directory: "inductor_cache/2v")
!4 = !{ptr @triton_poi_fused_cat_convolution_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_convolution_16, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_convolution_16", linkageName: "triton_poi_fused_cat_convolution_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 36, column: 18, scope: !7)
!23 = !DILocation(line: 37, column: 34, scope: !7)
!24 = !DILocation(line: 37, column: 44, scope: !7)
!25 = !DILocation(line: 37, column: 39, scope: !7)
!26 = !DILocation(line: 37, column: 50, scope: !7)
!27 = !DILocation(line: 37, column: 30, scope: !7)
!28 = !DILocation(line: 37, column: 63, scope: !7)
!29 = !DILocation(line: 37, column: 71, scope: !7)
!30 = !DILocation(line: 37, column: 56, scope: !7)
!31 = !DILocation(line: 38, column: 30, scope: !7)
!32 = !DILocation(line: 38, column: 70, scope: !7)
!33 = !DILocation(line: 44, column: 20, scope: !7)
!34 = !DILocation(line: 47, column: 60, scope: !7)
!35 = !DILocation(line: 47, column: 51, scope: !7)
!36 = !DILocation(line: 47, column: 31, scope: !7)
!37 = !DILocation(line: 47, column: 74, scope: !7)
!38 = !DILocation(line: 47, column: 82, scope: !7)
!39 = !DILocation(line: 47, column: 66, scope: !7)
!40 = !DILocation(line: 48, column: 31, scope: !7)
!41 = !DILocation(line: 48, column: 80, scope: !7)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 51, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !48)
!48 = !DILocation(line: 41, column: 40, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 0, scope: !7)
!51 = !DILocation(line: 55, column: 32, scope: !7)
!52 = !DILocation(line: 55, column: 30, scope: !7)
!53 = !DILocation(line: 55, column: 25, scope: !7)
!54 = !DILocation(line: 55, column: 52, scope: !7)
!55 = !DILocation(line: 55, column: 44, scope: !7)
!56 = !DILocation(line: 56, column: 34, scope: !7)
!57 = !DILocation(line: 56, column: 44, scope: !7)
!58 = !DILocation(line: 56, column: 30, scope: !7)
!59 = !DILocation(line: 56, column: 39, scope: !7)
!60 = !DILocation(line: 56, column: 25, scope: !7)
!61 = !DILocation(line: 56, column: 56, scope: !7)
!62 = !DILocation(line: 56, column: 4, scope: !7)
