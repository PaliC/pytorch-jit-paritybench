#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [4, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [1, 8], order = [0, 1]}>
#loc = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_cat_convolution_16(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":19:0), %arg7: i32 loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x256xf32, #blocked> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<1536> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1536> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<9> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<9> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<384> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<192> : tensor<1x256xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<192> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<1728> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<3456> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<384> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<9> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_11 = arith.constant dense<-192> : tensor<1x256xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<1x256xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<1x256xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<1x256xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<1x256xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_0 : tensor<1x256xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_1 : tensor<1x256xi32, #blocked1> loc(#loc6)
    %12 = tt.get_program_id x : i32 loc(#loc7)
    %13 = arith.muli %12, %c16_i32 : i32 loc(#loc8)
    %14 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc9)
    %15 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc9)
    %16 = tt.expand_dims %14 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc9)
    %17 = tt.expand_dims %15 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc9)
    %18 = tt.splat %13 : i32 -> tensor<16x1xi32, #blocked> loc(#loc10)
    %19 = tt.splat %13 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc10)
    %20 = arith.addi %18, %16 : tensor<16x1xi32, #blocked> loc(#loc10)
    %21 = arith.addi %19, %17 : tensor<16x1xi32, #blocked1> loc(#loc10)
    %22 = arith.cmpi slt, %20, %cst_2 : tensor<16x1xi32, #blocked> loc(#loc11)
    %23 = arith.cmpi slt, %21, %cst_3 : tensor<16x1xi32, #blocked1> loc(#loc11)
    %24 = arith.remsi %8, %cst_4 : tensor<1x256xi32, #blocked> loc(#loc12)
    %25 = arith.divsi %8, %cst_4 : tensor<1x256xi32, #blocked> loc(#loc13)
    %26 = arith.extsi %24 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc14)
    %27 = arith.cmpi slt, %26, %cst_5 : tensor<1x256xi64, #blocked> loc(#loc14)
    %28 = arith.muli %20, %cst_6 : tensor<16x1xi32, #blocked> loc(#loc15)
    %29 = arith.muli %25, %cst_7 : tensor<1x256xi32, #blocked> loc(#loc16)
    %30 = tt.broadcast %28 : tensor<16x1xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc17)
    %31 = tt.broadcast %29 : tensor<1x256xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc17)
    %32 = arith.addi %30, %31 : tensor<16x256xi32, #blocked> loc(#loc17)
    %33 = tt.broadcast %24 : tensor<1x256xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc18)
    %34 = arith.addi %32, %33 : tensor<16x256xi32, #blocked> loc(#loc18)
    %35 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc19)
    %36 = tt.addptr %35, %34 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi32, #blocked> loc(#loc19)
    %37 = tt.broadcast %27 : tensor<1x256xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc20)
    %38 = tt.broadcast %22 : tensor<16x1xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc20)
    %39 = tt.broadcast %23 : tensor<16x1xi1, #blocked1> -> tensor<16x256xi1, #blocked1> loc(#loc20)
    %40 = arith.andi %37, %38 : tensor<16x256xi1, #blocked> loc(#loc20)
    %41 = tt.broadcast %10 : tensor<1x256xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc21)
    %42 = tt.broadcast %11 : tensor<1x256xi1, #blocked1> -> tensor<16x256xi1, #blocked1> loc(#loc21)
    %43 = arith.andi %40, %41 : tensor<16x256xi1, #blocked> loc(#loc21)
    %44 = tt.load %36, %43, %cst evictionPolicy = evict_last : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc22)
    %45 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc23)
    %46 = tt.addptr %45, %24 : tensor<1x256x!tt.ptr<f32>, #blocked>, tensor<1x256xi32, #blocked> loc(#loc23)
    %47 = tt.broadcast %46 : tensor<1x256x!tt.ptr<f32>, #blocked> -> tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc23)
    %48 = tt.load %47, %43, %cst evictionPolicy = evict_last : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc24)
    %49 = arith.addf %44, %48 : tensor<16x256xf32, #blocked> loc(#loc25)
    %50 = arith.cmpf ogt, %cst, %49 : tensor<16x256xf32, #blocked> loc(#loc55)
    %51 = arith.select %50, %cst, %49 : tensor<16x256xi1, #blocked>, tensor<16x256xf32, #blocked> loc(#loc56)
    %52 = arith.cmpi sge, %26, %cst_5 : tensor<1x256xi64, #blocked> loc(#loc29)
    %53 = arith.addi %24, %cst_11 : tensor<1x256xi32, #blocked> loc(#loc30)
    %54 = tt.broadcast %53 : tensor<1x256xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc31)
    %55 = arith.addi %32, %54 : tensor<16x256xi32, #blocked> loc(#loc31)
    %56 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc32)
    %57 = tt.addptr %56, %55 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi32, #blocked> loc(#loc32)
    %58 = tt.broadcast %52 : tensor<1x256xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc33)
    %59 = arith.andi %58, %38 : tensor<16x256xi1, #blocked> loc(#loc33)
    %60 = arith.andi %59, %41 : tensor<16x256xi1, #blocked> loc(#loc34)
    %61 = tt.load %57, %60, %cst evictionPolicy = evict_last : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc35)
    %62 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc36)
    %63 = tt.addptr %62, %53 : tensor<1x256x!tt.ptr<f32>, #blocked>, tensor<1x256xi32, #blocked> loc(#loc36)
    %64 = tt.broadcast %63 : tensor<1x256x!tt.ptr<f32>, #blocked> -> tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc36)
    %65 = tt.load %64, %60, %cst evictionPolicy = evict_last : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc37)
    %66 = arith.addf %61, %65 : tensor<16x256xf32, #blocked> loc(#loc38)
    %67 = arith.cmpf ogt, %cst, %66 : tensor<16x256xf32, #blocked> loc(#loc57)
    %68 = arith.select %67, %cst, %66 : tensor<16x256xi1, #blocked>, tensor<16x256xf32, #blocked> loc(#loc58)
    %69 = arith.select %58, %68, %cst : tensor<16x256xi1, #blocked>, tensor<16x256xf32, #blocked> loc(#loc40)
    %70 = arith.select %37, %51, %69 : tensor<16x256xi1, #blocked>, tensor<16x256xf32, #blocked> loc(#loc59)
    %71 = arith.muli %9, %cst_10 : tensor<1x256xi32, #blocked1> loc(#loc43)
    %72 = tt.broadcast %21 : tensor<16x1xi32, #blocked1> -> tensor<16x256xi32, #blocked1> loc(#loc44)
    %73 = tt.broadcast %71 : tensor<1x256xi32, #blocked1> -> tensor<16x256xi32, #blocked1> loc(#loc44)
    %74 = arith.addi %72, %73 : tensor<16x256xi32, #blocked1> loc(#loc44)
    %75 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<16x256x!tt.ptr<f32>, #blocked1> loc(#loc45)
    %76 = tt.addptr %75, %74 : tensor<16x256x!tt.ptr<f32>, #blocked1>, tensor<16x256xi32, #blocked1> loc(#loc45)
    %77 = arith.andi %39, %42 : tensor<16x256xi1, #blocked1> loc(#loc46)
    %78 = arith.andi %38, %41 : tensor<16x256xi1, #blocked> loc(#loc46)
    %79 = triton_gpu.convert_layout %70 : tensor<16x256xf32, #blocked> -> tensor<16x256xf32, #blocked1> loc(#loc47)
    tt.store %76, %79, %77 : tensor<16x256x!tt.ptr<f32>, #blocked1> loc(#loc47)
    %80 = arith.muli %20, %cst_9 : tensor<16x1xi32, #blocked> loc(#loc48)
    %81 = tt.broadcast %80 : tensor<16x1xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc49)
    %82 = arith.addi %33, %81 : tensor<16x256xi32, #blocked> loc(#loc49)
    %83 = arith.muli %25, %cst_8 : tensor<1x256xi32, #blocked> loc(#loc50)
    %84 = tt.broadcast %83 : tensor<1x256xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc51)
    %85 = arith.addi %82, %84 : tensor<16x256xi32, #blocked> loc(#loc51)
    %86 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc52)
    %87 = tt.addptr %86, %85 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi32, #blocked> loc(#loc52)
    tt.store %87, %70, %78 : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc53)
    tt.return loc(#loc54)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":22:28)
#loc3 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":22:33)
#loc4 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":23:44)
#loc5 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":23:23)
#loc6 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":24:21)
#loc7 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":25:28)
#loc8 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":25:33)
#loc9 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":26:44)
#loc10 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":26:23)
#loc11 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":27:21)
#loc12 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":28:19)
#loc13 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":30:19)
#loc14 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":36:18)
#loc15 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":37:34)
#loc16 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":37:44)
#loc17 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":37:39)
#loc18 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":37:50)
#loc19 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":37:30)
#loc20 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":37:63)
#loc21 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":37:71)
#loc22 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":37:56)
#loc23 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":38:30)
#loc24 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":38:70)
#loc25 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":39:18)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc27 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":41:40)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc29 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":44:20)
#loc30 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":47:60)
#loc31 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":47:51)
#loc32 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":47:31)
#loc33 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":47:74)
#loc34 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":47:82)
#loc35 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":47:66)
#loc36 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":48:31)
#loc37 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":48:80)
#loc38 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":49:20)
#loc39 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":51:42)
#loc40 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":53:35)
#loc41 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":54:34)
#loc42 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":43:33)
#loc43 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":55:32)
#loc44 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":55:30)
#loc45 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":55:25)
#loc46 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":55:52)
#loc47 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":55:44)
#loc48 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":56:34)
#loc49 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":56:30)
#loc50 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":56:44)
#loc51 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":56:39)
#loc52 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":56:25)
#loc53 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":56:56)
#loc54 = loc("inductor_cache/2v/c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py":56:4)
#loc55 = loc(callsite(#loc26 at #loc27))
#loc56 = loc(callsite(#loc28 at #loc27))
#loc57 = loc(callsite(#loc26 at #loc39))
#loc58 = loc(callsite(#loc28 at #loc39))
#loc59 = loc(fused[#loc41, #loc42])
