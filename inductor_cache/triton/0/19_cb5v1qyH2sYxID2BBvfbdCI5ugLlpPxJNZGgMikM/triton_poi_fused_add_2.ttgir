#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [1], order = [0]}>
#loc = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 1 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":19:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %cst = arith.constant dense<48> : tensor<64xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<64xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<16> : tensor<64xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<64xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<64> : tensor<64xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<64xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<64xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_3 : tensor<64xi32, #blocked> loc(#loc6)
    %6 = arith.remsi %4, %cst_2 : tensor<64xi32, #blocked> loc(#loc7)
    %7 = arith.divsi %4, %cst_2 : tensor<64xi32, #blocked> loc(#loc8)
    %8 = arith.remsi %7, %cst_2 : tensor<64xi32, #blocked> loc(#loc9)
    %9 = arith.divsi %4, %cst_1 : tensor<64xi32, #blocked> loc(#loc10)
    %10 = arith.muli %8, %cst_2 : tensor<64xi32, #blocked> loc(#loc11)
    %11 = arith.addi %6, %10 : tensor<64xi32, #blocked> loc(#loc12)
    %12 = arith.muli %9, %cst_3 : tensor<64xi32, #blocked> loc(#loc13)
    %13 = arith.addi %11, %12 : tensor<64xi32, #blocked> loc(#loc14)
    %14 = arith.addi %9, %10 : tensor<64xi32, #blocked> loc(#loc15)
    %15 = arith.divsi %14, %cst_1 : tensor<64xi32, #blocked> loc(#loc16)
    %16 = arith.addi %13, %15 : tensor<64xi32, #blocked> loc(#loc17)
    %17 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #blocked> loc(#loc18)
    %18 = tt.addptr %17, %16 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc18)
    %19 = tt.load %18, %5 : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc19)
    %20 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc20)
    %21 = tt.load %20 : !tt.ptr<f32> loc(#loc21)
    %22 = tt.splat %21 : f32 -> tensor<64xf32, #blocked> loc(#loc22)
    %23 = arith.addi %6, %cst_1 : tensor<64xi32, #blocked> loc(#loc23)
    %24 = arith.addi %23, %10 : tensor<64xi32, #blocked> loc(#loc24)
    %25 = arith.addi %24, %12 : tensor<64xi32, #blocked> loc(#loc25)
    %26 = arith.addi %25, %15 : tensor<64xi32, #blocked> loc(#loc26)
    %27 = tt.addptr %17, %26 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc27)
    %28 = tt.load %27, %5 : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc28)
    %29 = tt.addptr %arg1, %c1_i32 : !tt.ptr<f32>, i32 loc(#loc29)
    %30 = tt.load %29 : !tt.ptr<f32> loc(#loc30)
    %31 = tt.splat %30 : f32 -> tensor<64xf32, #blocked> loc(#loc31)
    %32 = arith.addi %6, %cst_0 : tensor<64xi32, #blocked> loc(#loc32)
    %33 = arith.addi %32, %10 : tensor<64xi32, #blocked> loc(#loc33)
    %34 = arith.addi %33, %12 : tensor<64xi32, #blocked> loc(#loc34)
    %35 = arith.addi %34, %15 : tensor<64xi32, #blocked> loc(#loc35)
    %36 = tt.addptr %17, %35 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc36)
    %37 = tt.load %36, %5 : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc37)
    %38 = tt.addptr %arg1, %c2_i32 : !tt.ptr<f32>, i32 loc(#loc38)
    %39 = tt.load %38 : !tt.ptr<f32> loc(#loc39)
    %40 = tt.splat %39 : f32 -> tensor<64xf32, #blocked> loc(#loc40)
    %41 = arith.addi %6, %cst : tensor<64xi32, #blocked> loc(#loc41)
    %42 = arith.addi %41, %10 : tensor<64xi32, #blocked> loc(#loc42)
    %43 = arith.addi %42, %12 : tensor<64xi32, #blocked> loc(#loc43)
    %44 = arith.addi %43, %15 : tensor<64xi32, #blocked> loc(#loc44)
    %45 = tt.addptr %17, %44 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc45)
    %46 = tt.load %45, %5 : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc46)
    %47 = tt.addptr %arg1, %c3_i32 : !tt.ptr<f32>, i32 loc(#loc47)
    %48 = tt.load %47 : !tt.ptr<f32> loc(#loc48)
    %49 = tt.splat %48 : f32 -> tensor<64xf32, #blocked> loc(#loc49)
    %50 = tt.addptr %arg2, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc50)
    %51 = tt.load %50 : !tt.ptr<f32> loc(#loc51)
    %52 = tt.splat %51 : f32 -> tensor<64xf32, #blocked> loc(#loc52)
    %53 = arith.mulf %19, %22 : tensor<64xf32, #blocked> loc(#loc53)
    %54 = arith.mulf %28, %31 : tensor<64xf32, #blocked> loc(#loc54)
    %55 = arith.addf %53, %54 : tensor<64xf32, #blocked> loc(#loc55)
    %56 = arith.mulf %37, %40 : tensor<64xf32, #blocked> loc(#loc56)
    %57 = arith.addf %55, %56 : tensor<64xf32, #blocked> loc(#loc57)
    %58 = arith.mulf %46, %49 : tensor<64xf32, #blocked> loc(#loc58)
    %59 = arith.addf %57, %58 : tensor<64xf32, #blocked> loc(#loc59)
    %60 = arith.addf %59, %52 : tensor<64xf32, #blocked> loc(#loc60)
    %61 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #blocked> loc(#loc61)
    %62 = tt.addptr %61, %4 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc61)
    tt.store %62, %60, %5 : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc62)
    tt.return loc(#loc63)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":21:28)
#loc3 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":21:33)
#loc4 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":22:36)
#loc5 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":22:23)
#loc6 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":23:21)
#loc7 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":24:19)
#loc8 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":25:21)
#loc9 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":25:26)
#loc10 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":26:19)
#loc11 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":28:37)
#loc12 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":28:35)
#loc13 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":28:45)
#loc14 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":28:42)
#loc15 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":28:57)
#loc16 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":28:66)
#loc17 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":28:51)
#loc18 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":28:30)
#loc19 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":28:72)
#loc20 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":29:30)
#loc21 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":29:19)
#loc22 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":30:33)
#loc23 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":31:35)
#loc24 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":31:40)
#loc25 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":31:47)
#loc26 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":31:56)
#loc27 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":31:30)
#loc28 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":31:77)
#loc29 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":32:30)
#loc30 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":32:19)
#loc31 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":33:33)
#loc32 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":34:35)
#loc33 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":34:40)
#loc34 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":34:47)
#loc35 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":34:56)
#loc36 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":34:30)
#loc37 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":34:77)
#loc38 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":35:31)
#loc39 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":35:20)
#loc40 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":36:35)
#loc41 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":37:36)
#loc42 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":37:41)
#loc43 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":37:48)
#loc44 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":37:57)
#loc45 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":37:31)
#loc46 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":37:78)
#loc47 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":38:31)
#loc48 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":38:20)
#loc49 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":39:35)
#loc50 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":40:31)
#loc51 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":40:20)
#loc52 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":41:35)
#loc53 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":42:18)
#loc54 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":43:18)
#loc55 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":44:18)
#loc56 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":45:19)
#loc57 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":46:19)
#loc58 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":47:20)
#loc59 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":48:20)
#loc60 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":49:20)
#loc61 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":50:25)
#loc62 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":50:37)
#loc63 = loc("inductor_cache/2w/c2wuivhwvoojo3flzkcugstynvpsefzkbckiq3a33zokearhi2iu.py":50:4)
