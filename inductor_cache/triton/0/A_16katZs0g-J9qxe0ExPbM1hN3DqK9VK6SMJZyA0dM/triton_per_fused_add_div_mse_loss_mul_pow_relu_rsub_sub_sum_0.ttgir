#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":19:0)
#loc1 = loc(unknown)
#loc25 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":51:26)
#loc30 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":55:26)
#loc44 = loc(callsite(#loc1 at #loc25))
#loc47 = loc(callsite(#loc1 at #loc30))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_div_mse_loss_mul_pow_relu_rsub_sub_sum_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2.500000e-01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5.000000e-04> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1.000000e-01> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<5.000000e-01> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<1.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<0.899999976> : tensor<1x16xf32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc2)
    %2 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc3)
    %3 = tt.addptr %2, %1 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc3)
    %4 = tt.load %3 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc4)
    %5 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc5)
    %6 = tt.addptr %5, %1 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc5)
    %7 = tt.load %6 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc6)
    %8 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %1 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc7)
    %10 = tt.load %9 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc8)
    %11 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc9)
    %12 = tt.addptr %11, %1 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc9)
    %13 = tt.load %12 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc10)
    %14 = arith.subf %cst_5, %7 : tensor<1x16xf32, #blocked> loc(#loc11)
    %15 = arith.cmpf ogt, %cst, %14 : tensor<1x16xf32, #blocked> loc(#loc39)
    %16 = arith.select %15, %cst, %14 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc40)
    %17 = arith.mulf %16, %16 : tensor<1x16xf32, #blocked> loc(#loc15)
    %18 = arith.mulf %4, %17 : tensor<1x16xf32, #blocked> loc(#loc16)
    %19 = arith.subf %cst_4, %4 : tensor<1x16xf32, #blocked> loc(#loc17)
    %20 = arith.mulf %19, %cst_3 : tensor<1x16xf32, #blocked> loc(#loc18)
    %21 = arith.subf %7, %cst_2 : tensor<1x16xf32, #blocked> loc(#loc19)
    %22 = arith.cmpf ogt, %cst, %21 : tensor<1x16xf32, #blocked> loc(#loc41)
    %23 = arith.select %22, %cst, %21 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc42)
    %24 = arith.mulf %23, %23 : tensor<1x16xf32, #blocked> loc(#loc21)
    %25 = arith.mulf %20, %24 : tensor<1x16xf32, #blocked> loc(#loc22)
    %26 = arith.addf %18, %25 : tensor<1x16xf32, #blocked> loc(#loc23)
    %27 = "tt.reduce"(%26) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc25)), %arg7: f32 loc(callsite(#loc1 at #loc25))):
      %38 = arith.addf %arg6, %arg7 : f32 loc(#loc48)
      tt.reduce.return %38 : f32 loc(#loc43)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc43)
    %28 = tt.expand_dims %27 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc27)
    %29 = arith.subf %10, %13 : tensor<1x16xf32, #blocked> loc(#loc28)
    %30 = arith.mulf %29, %29 : tensor<1x16xf32, #blocked> loc(#loc29)
    %31 = "tt.reduce"(%30) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc30)), %arg7: f32 loc(callsite(#loc1 at #loc30))):
      %38 = arith.addf %arg6, %arg7 : f32 loc(#loc49)
      tt.reduce.return %38 : f32 loc(#loc46)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc46)
    %32 = tt.expand_dims %31 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc31)
    %33 = arith.mulf %32, %cst_1 : tensor<1x1xf32, #blocked> loc(#loc32)
    %34 = arith.addf %28, %33 : tensor<1x1xf32, #blocked> loc(#loc33)
    %35 = arith.mulf %34, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc34)
    gpu.barrier loc(#loc35)
    %36 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc36)
    %37 = tt.splat %36 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc37)
    tt.store %37, %35 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc37)
    tt.return loc(#loc38)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":26:34)
#loc3 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":30:30)
#loc4 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":30:35)
#loc5 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":31:30)
#loc6 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":31:35)
#loc7 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":32:31)
#loc8 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":32:36)
#loc9 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":33:31)
#loc10 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":33:36)
#loc11 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":35:18)
#loc12 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc13 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":37:40)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc15 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":38:18)
#loc16 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":39:18)
#loc17 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":41:18)
#loc18 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":43:19)
#loc19 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":45:19)
#loc20 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":46:41)
#loc21 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":47:20)
#loc22 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":48:20)
#loc23 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":49:19)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc27 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":51:29)
#loc28 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":52:20)
#loc29 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":53:20)
#loc31 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":55:29)
#loc32 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":57:20)
#loc33 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":58:20)
#loc34 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":60:20)
#loc35 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":61:4)
#loc36 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":62:28)
#loc37 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":62:71)
#loc38 = loc("inductor_cache/hv/chvwjdyeltl2wtunjpail35d3twqamavjwsy7iomhs2crgay2hqw.py":62:4)
#loc39 = loc(callsite(#loc12 at #loc13))
#loc40 = loc(callsite(#loc14 at #loc13))
#loc41 = loc(callsite(#loc12 at #loc20))
#loc42 = loc(callsite(#loc14 at #loc20))
#loc43 = loc(callsite(#loc24 at #loc25))
#loc45 = loc(callsite(#loc26 at #loc24))
#loc46 = loc(callsite(#loc24 at #loc30))
#loc48 = loc(callsite(#loc45 at #loc25))
#loc49 = loc(callsite(#loc45 at #loc30))
