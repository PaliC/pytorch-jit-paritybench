; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_avg_pool2d_native_group_norm_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.next:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = and i32 %9, 63, !dbg !12
  %12 = lshr i32 %9, 2, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = icmp slt i32 %14, 128, !dbg !14
  %17 = icmp slt i32 %15, 128, !dbg !14
  %18 = lshr i32 %9, 6, !dbg !15
  %19 = shl i32 %14, 12, !dbg !16
  %20 = shl i32 %15, 10, !dbg !17
  %invariant.op = and i32 %18, 3, !dbg !18
  %21 = or disjoint i32 %20, %10
  %22 = shl i32 %9, 2
  %23 = and i32 %22, 252
  %.reass = or disjoint i32 %23, %invariant.op
  %24 = and i32 %9, 255
  %25 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %23
  %26 = getelementptr float, ptr addrspace(3) %25, i32 %.reass
  %27 = lshr i32 %24, 2
  %28 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %27
  %29 = getelementptr inbounds float, ptr addrspace(3) %28, i32 %24
  %30 = sext i32 %21 to i64, !dbg !18
  %31 = shl nuw nsw i32 %invariant.op, 1, !dbg !19
  %32 = or disjoint i32 %31, %19, !dbg !20
  %33 = sext i32 %32 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %16, i32 0, i1 %16) #5, !dbg !22
  %36 = or disjoint i32 %32, 1, !dbg !23
  %37 = sext i32 %36 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %16, i32 0, i1 %16) #5, !dbg !25
  %40 = or disjoint i32 %32, 32, !dbg !26
  %41 = sext i32 %40 to i64, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %16, i32 0, i1 %16) #5, !dbg !28
  %44 = or disjoint i32 %32, 33, !dbg !29
  %45 = sext i32 %44 to i64, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %16, i32 0, i1 %16) #5, !dbg !31
  %48 = bitcast i32 %35 to float, !dbg !22
  %49 = bitcast i32 %39 to float, !dbg !25
  %50 = fadd float %48, %49, !dbg !32
  %51 = bitcast i32 %43 to float, !dbg !28
  %52 = fadd float %50, %51, !dbg !33
  %53 = bitcast i32 %47 to float, !dbg !31
  %54 = fadd float %52, %53, !dbg !34
  %55 = fmul float %54, 2.500000e-01, !dbg !35
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %57 = bitcast float %55 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %26, <1 x i32> %57, i1 true) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %58 = load i32, ptr addrspace(3) %29, align 4, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %58, ptr addrspace(1) %56, i1 %17) #5, !dbg !37
  %59 = select i1 %16, float 1.000000e+00, float 0.000000e+00, !dbg !38
  %60 = select i1 %16, float %55, float 0.000000e+00, !dbg !39
  %invariant.gep = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !18
  br label %61, !dbg !18

61:                                               ; preds = %.peel.next, %61
  %indvars.iv = phi i64 [ 4, %.peel.next ], [ %indvars.iv.next, %61 ]
  %62 = phi float [ %59, %.peel.next ], [ %104, %61 ]
  %63 = phi float [ 0.000000e+00, %.peel.next ], [ %103, %61 ]
  %64 = phi float [ %60, %.peel.next ], [ %102, %61 ]
  %65 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !40
  %.masked = and i32 %65, 12, !dbg !40
  %66 = or disjoint i32 %invariant.op, %.masked, !dbg !40
  %67 = shl nuw nsw i32 %66, 1, !dbg !19
  %indvars.iv.tr = trunc i64 %indvars.iv to i32, !dbg !41
  %68 = shl nuw nsw i32 %indvars.iv.tr, 2, !dbg !41
  %69 = and i32 %68, 4032, !dbg !41
  %70 = or disjoint i32 %67, %69, !dbg !42
  %71 = or disjoint i32 %70, %19, !dbg !20
  %72 = sext i32 %71 to i64, !dbg !21
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !21
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %16, i32 0, i1 %16) #5, !dbg !22
  %75 = bitcast i32 %74 to float, !dbg !22
  %76 = or disjoint i32 %71, 1, !dbg !23
  %77 = sext i32 %76 to i64, !dbg !24
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !24
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %16, i32 0, i1 %16) #5, !dbg !25
  %80 = bitcast i32 %79 to float, !dbg !25
  %81 = or disjoint i32 %71, 32, !dbg !26
  %82 = sext i32 %81 to i64, !dbg !27
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !27
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %16, i32 0, i1 %16) #5, !dbg !28
  %85 = bitcast i32 %84 to float, !dbg !28
  %86 = or disjoint i32 %71, 33, !dbg !29
  %87 = sext i32 %86 to i64, !dbg !30
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !30
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %16, i32 0, i1 %16) #5, !dbg !31
  %90 = bitcast i32 %89 to float, !dbg !31
  %91 = fadd float %75, %80, !dbg !32
  %92 = fadd float %91, %85, !dbg !33
  %93 = fadd float %92, %90, !dbg !34
  %94 = fmul float %93, 2.500000e-01, !dbg !35
  %95 = fsub float %94, %64, !dbg !43
  %96 = fadd float %62, 1.000000e+00, !dbg !47
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %96) #5, !dbg !48
  %98 = fadd float %64, %97, !dbg !49
  %99 = fsub float %94, %98, !dbg !50
  %100 = fmul float %95, %99, !dbg !51
  %101 = fadd float %63, %100, !dbg !52
  %102 = select i1 %16, float %98, float %64, !dbg !39
  %103 = select i1 %16, float %101, float %63, !dbg !53
  %104 = select i1 %16, float %96, float %62, !dbg !38
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %105 = bitcast float %94 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %26, <1 x i32> %105, i1 true) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %106 = load i32, ptr addrspace(3) %29, align 4, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %106, ptr addrspace(1) %gep, i1 %17) #5, !dbg !37
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !18
  %107 = icmp samesign ult i64 %indvars.iv, 1020, !dbg !18
  br i1 %107, label %61, label %.loopexit, !dbg !18, !llvm.loop !54

.loopexit:                                        ; preds = %61
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %108 = shl nuw nsw i32 %11, 2, !dbg !56
  %109 = or disjoint i32 %108, %invariant.op, !dbg !56
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !56
  %111 = bitcast float %102 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #5, !dbg !56
  %112 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %109, !dbg !56
  %113 = bitcast float %103 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #5, !dbg !56
  %114 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %109, !dbg !56
  %115 = bitcast float %104 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %116 = icmp slt i32 %9, 256, !dbg !56
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !56
  %118 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %117, i1 %116) #5, !dbg !56
  %119 = bitcast i32 %118 to float, !dbg !56
  %120 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %9, !dbg !56
  %121 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %120, i1 %116) #5, !dbg !56
  %122 = bitcast i32 %121 to float, !dbg !56
  %123 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %9, !dbg !56
  %124 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %123, i1 %116) #5, !dbg !56
  %125 = bitcast i32 %124 to float, !dbg !56
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 2, i32 31), !dbg !56
  %127 = bitcast i32 %126 to float, !dbg !56
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 2, i32 31), !dbg !56
  %129 = bitcast i32 %128 to float, !dbg !56
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 2, i32 31), !dbg !56
  %131 = bitcast i32 %130 to float, !dbg !56
  %132 = fsub float %127, %119, !dbg !58
  %133 = fadd float %125, %131, !dbg !60
  %134 = fcmp oeq float %133, 0.000000e+00, !dbg !61
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %133) #5, !dbg !62
  %136 = select i1 %134, float 0.000000e+00, float %135, !dbg !63
  %137 = fmul float %132, %136, !dbg !64
  %138 = fadd float %137, %119, !dbg !65
  %139 = fadd float %122, %129, !dbg !66
  %140 = fmul float %132, %132, !dbg !67
  %141 = fmul float %140, %125, !dbg !68
  %142 = fmul float %141, %136, !dbg !69
  %143 = fadd float %139, %142, !dbg !70
  %144 = bitcast float %138 to i32, !dbg !56
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 1, i32 31), !dbg !56
  %146 = bitcast i32 %145 to float, !dbg !56
  %147 = bitcast float %143 to i32, !dbg !56
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 1, i32 31), !dbg !56
  %149 = bitcast i32 %148 to float, !dbg !56
  %150 = bitcast float %133 to i32, !dbg !56
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 1, i32 31), !dbg !56
  %152 = bitcast i32 %151 to float, !dbg !56
  %153 = fsub float %146, %138, !dbg !58
  %154 = fadd float %133, %152, !dbg !60
  %155 = fcmp oeq float %154, 0.000000e+00, !dbg !61
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float %154) #5, !dbg !62
  %157 = select i1 %155, float 0.000000e+00, float %156, !dbg !63
  %158 = fmul float %153, %157, !dbg !64
  %159 = fadd float %138, %158, !dbg !65
  %160 = fadd float %143, %149, !dbg !66
  %161 = fmul float %153, %153, !dbg !67
  %162 = fmul float %133, %161, !dbg !68
  %163 = fmul float %157, %162, !dbg !69
  %164 = fadd float %160, %163, !dbg !70
  %165 = icmp eq i32 %10, 0, !dbg !56
  %166 = and i1 %116, %165, !dbg !56
  %167 = bitcast float %159 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %167, i1 %166) #5, !dbg !56
  %168 = bitcast float %164 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %168, i1 %166) #5, !dbg !56
  %169 = bitcast float %154 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %169, i1 %166) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %170 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !56
  %171 = load i32, ptr addrspace(3) %170, align 16, !dbg !56
  %172 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %108, !dbg !56
  %173 = load float, ptr addrspace(3) %172, align 16, !dbg !56
  %174 = sext i32 %14 to i64, !dbg !71
  %175 = getelementptr float, ptr addrspace(1) %2, i64 %174, !dbg !71
  %176 = icmp eq i32 %invariant.op, 0, !dbg !72
  %177 = and i1 %176, %16, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %171, ptr addrspace(1) %175, i1 %177) #5, !dbg !72
  %178 = getelementptr float, ptr addrspace(1) %3, i64 %174, !dbg !73
  %179 = bitcast float %173 to i32, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %179, ptr addrspace(1) %178, i1 %177) #5, !dbg !74
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float 1.024000e+03) #5, !dbg !75
  %181 = fadd float %180, 0x3EE4F8B580000000, !dbg !76
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !77
  %.not.i = icmp eq i32 %182, 0, !dbg !77
  br i1 %.not.i, label %185, label %183, !dbg !77

183:                                              ; preds = %.loopexit
  %184 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %181), !dbg !77
  br label %__nv_rsqrtf.exit, !dbg !77

185:                                              ; preds = %.loopexit
  %186 = tail call float @llvm.nvvm.rsqrt.approx.f(float %181), !dbg !77
  br label %__nv_rsqrtf.exit, !dbg !77

__nv_rsqrtf.exit:                                 ; preds = %183, %185
  %.0.i = phi float [ %184, %183 ], [ %186, %185 ], !dbg !77
  %187 = getelementptr float, ptr addrspace(1) %4, i64 %174, !dbg !78
  %188 = bitcast float %.0.i to i32, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %188, ptr addrspace(1) %187, i1 %177) #5, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr3pylpwulyboeq5xoewxptx33nxuxxmsninhp4hwmv5qvauxh6a.py", directory: "inductor_cache/r3")
!4 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_7, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_avg_pool2d_native_group_norm_7", linkageName: "triton_red_fused_avg_pool2d_native_group_norm_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 54, scope: !7)
!17 = !DILocation(line: 52, column: 39, scope: !7)
!18 = !DILocation(line: 30, column: 36, scope: !7)
!19 = !DILocation(line: 36, column: 36, scope: !7)
!20 = !DILocation(line: 36, column: 49, scope: !7)
!21 = !DILocation(line: 36, column: 34, scope: !7)
!22 = !DILocation(line: 36, column: 59, scope: !7)
!23 = !DILocation(line: 37, column: 53, scope: !7)
!24 = !DILocation(line: 37, column: 34, scope: !7)
!25 = !DILocation(line: 37, column: 63, scope: !7)
!26 = !DILocation(line: 38, column: 54, scope: !7)
!27 = !DILocation(line: 38, column: 34, scope: !7)
!28 = !DILocation(line: 38, column: 64, scope: !7)
!29 = !DILocation(line: 39, column: 54, scope: !7)
!30 = !DILocation(line: 39, column: 34, scope: !7)
!31 = !DILocation(line: 39, column: 64, scope: !7)
!32 = !DILocation(line: 40, column: 22, scope: !7)
!33 = !DILocation(line: 41, column: 22, scope: !7)
!34 = !DILocation(line: 42, column: 22, scope: !7)
!35 = !DILocation(line: 44, column: 22, scope: !7)
!36 = !DILocation(line: 52, column: 29, scope: !7)
!37 = !DILocation(line: 52, column: 50, scope: !7)
!38 = !DILocation(line: 51, column: 66, scope: !7)
!39 = !DILocation(line: 49, column: 62, scope: !7)
!40 = !DILocation(line: 33, column: 23, scope: !7)
!41 = !DILocation(line: 36, column: 44, scope: !7)
!42 = !DILocation(line: 36, column: 41, scope: !7)
!43 = !DILocation(line: 183, column: 24, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 47, column: 54, scope: !7)
!47 = !DILocation(line: 184, column: 30, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 185, column: 34, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 185, column: 26, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 186, column: 39, scope: !44, inlinedAt: !46)
!51 = !DILocation(line: 186, column: 31, scope: !44, inlinedAt: !46)
!52 = !DILocation(line: 186, column: 22, scope: !44, inlinedAt: !46)
!53 = !DILocation(line: 50, column: 58, scope: !7)
!54 = distinct !{!54, !55}
!55 = !{!"llvm.loop.peeled.count", i32 1}
!56 = !DILocation(line: 204, column: 46, scope: !44, inlinedAt: !57)
!57 = !DILocation(line: 54, column: 44, scope: !7)
!58 = !DILocation(line: 192, column: 21, scope: !59, inlinedAt: !57)
!59 = distinct !DILexicalBlockFile(scope: !44, file: !45, discriminator: 0)
!60 = !DILocation(line: 193, column: 28, scope: !59, inlinedAt: !57)
!61 = !DILocation(line: 194, column: 39, scope: !59, inlinedAt: !57)
!62 = !DILocation(line: 194, column: 60, scope: !59, inlinedAt: !57)
!63 = !DILocation(line: 194, column: 49, scope: !59, inlinedAt: !57)
!64 = !DILocation(line: 196, column: 25, scope: !59, inlinedAt: !57)
!65 = !DILocation(line: 196, column: 17, scope: !59, inlinedAt: !57)
!66 = !DILocation(line: 197, column: 15, scope: !59, inlinedAt: !57)
!67 = !DILocation(line: 197, column: 30, scope: !59, inlinedAt: !57)
!68 = !DILocation(line: 197, column: 38, scope: !59, inlinedAt: !57)
!69 = !DILocation(line: 197, column: 49, scope: !59, inlinedAt: !57)
!70 = !DILocation(line: 197, column: 22, scope: !59, inlinedAt: !57)
!71 = !DILocation(line: 59, column: 25, scope: !7)
!72 = !DILocation(line: 59, column: 37, scope: !7)
!73 = !DILocation(line: 60, column: 25, scope: !7)
!74 = !DILocation(line: 60, column: 37, scope: !7)
!75 = !DILocation(line: 62, column: 20, scope: !7)
!76 = !DILocation(line: 64, column: 20, scope: !7)
!77 = !DILocation(line: 65, column: 28, scope: !7)
!78 = !DILocation(line: 66, column: 25, scope: !7)
!79 = !DILocation(line: 66, column: 37, scope: !7)
!80 = !DILocation(line: 66, column: 4, scope: !7)
