; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_sum_26(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 24, !dbg !12
  %9 = shl i32 %7, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = and i32 %7, 31, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 2048, !dbg !14
  %15 = icmp slt i32 %13, 2048, !dbg !14
  %16 = lshr i32 %7, 5, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %17 = sdiv i32 %.frozen, 512, !dbg !16
  %18 = mul i32 %17, 512, !dbg !17
  %.decomposed = sub i32 %.frozen, %18, !dbg !17
  %19 = shl i32 %7, 6, !dbg !18
  %20 = and i32 %19, 15872, !dbg !18
  %21 = or disjoint i32 %20, 16384, !dbg !18
  %22 = shl i32 %17, 15, !dbg !19
  %23 = or disjoint i32 %22, %20, !dbg !20
  %24 = add i32 %23, %.decomposed, !dbg !21
  %25 = or disjoint i32 %22, %21, !dbg !20
  %26 = add nsw i32 %25, %.decomposed, !dbg !21
  %27 = sext i32 %24 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !22
  %29 = sext i32 %26 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !22
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %41 = add nsw i32 %.decomposed, 131072, !dbg !24
  %42 = add i32 %23, %41, !dbg !25
  %43 = add i32 %25, %41, !dbg !25
  %44 = sext i32 %42 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !26
  %46 = sext i32 %43 to i64, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !26
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !27
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !27
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !27
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !27
  %58 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !23
  %59 = insertelement <2 x i32> %58, i32 %37, i64 1, !dbg !23
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !23
  %61 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !27
  %62 = insertelement <2 x i32> %61, i32 %54, i64 1, !dbg !27
  %63 = bitcast <2 x i32> %62 to <2 x float>, !dbg !27
  %64 = fadd <2 x float> %60, %63, !dbg !28
  %65 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !23
  %66 = insertelement <2 x i32> %65, i32 %38, i64 1, !dbg !23
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !23
  %68 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !27
  %69 = insertelement <2 x i32> %68, i32 %55, i64 1, !dbg !27
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !27
  %71 = fadd <2 x float> %67, %70, !dbg !28
  %72 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !23
  %73 = insertelement <2 x i32> %72, i32 %39, i64 1, !dbg !23
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !23
  %75 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !27
  %76 = insertelement <2 x i32> %75, i32 %56, i64 1, !dbg !27
  %77 = bitcast <2 x i32> %76 to <2 x float>, !dbg !27
  %78 = fadd <2 x float> %74, %77, !dbg !28
  %79 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !23
  %80 = insertelement <2 x i32> %79, i32 %40, i64 1, !dbg !23
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !23
  %82 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !27
  %83 = insertelement <2 x i32> %82, i32 %57, i64 1, !dbg !27
  %84 = bitcast <2 x i32> %83 to <2 x float>, !dbg !27
  %85 = fadd <2 x float> %81, %84, !dbg !28
  %shift = shufflevector <2 x float> %64, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %86 = fadd <2 x float> %64, %shift, !dbg !29
  %87 = extractelement <2 x float> %86, i64 0, !dbg !29
  %88 = select i1 %14, float %87, float 0.000000e+00, !dbg !29
  %shift1 = shufflevector <2 x float> %71, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %89 = fadd <2 x float> %71, %shift1, !dbg !29
  %90 = extractelement <2 x float> %89, i64 0, !dbg !29
  %91 = select i1 %14, float %90, float 0.000000e+00, !dbg !29
  %shift2 = shufflevector <2 x float> %78, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %92 = fadd <2 x float> %78, %shift2, !dbg !29
  %93 = extractelement <2 x float> %92, i64 0, !dbg !29
  %94 = select i1 %14, float %93, float 0.000000e+00, !dbg !29
  %shift3 = shufflevector <2 x float> %85, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %95 = fadd <2 x float> %85, %shift3, !dbg !29
  %96 = extractelement <2 x float> %95, i64 0, !dbg !29
  %97 = select i1 %14, float %96, float 0.000000e+00, !dbg !29
  %98 = bitcast float %88 to i32, !dbg !34
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 16, i32 31), !dbg !34
  %100 = bitcast i32 %99 to float, !dbg !34
  %101 = fadd float %88, %100, !dbg !29
  %102 = bitcast float %101 to i32, !dbg !34
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 8, i32 31), !dbg !34
  %104 = bitcast i32 %103 to float, !dbg !34
  %105 = fadd float %101, %104, !dbg !29
  %106 = bitcast float %91 to i32, !dbg !34
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 16, i32 31), !dbg !34
  %108 = bitcast i32 %107 to float, !dbg !34
  %109 = fadd float %91, %108, !dbg !29
  %110 = bitcast float %109 to i32, !dbg !34
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 8, i32 31), !dbg !34
  %112 = bitcast i32 %111 to float, !dbg !34
  %113 = fadd float %109, %112, !dbg !29
  %114 = bitcast float %94 to i32, !dbg !34
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 16, i32 31), !dbg !34
  %116 = bitcast i32 %115 to float, !dbg !34
  %117 = fadd float %94, %116, !dbg !29
  %118 = bitcast float %117 to i32, !dbg !34
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 8, i32 31), !dbg !34
  %120 = bitcast i32 %119 to float, !dbg !34
  %121 = fadd float %117, %120, !dbg !29
  %122 = bitcast float %97 to i32, !dbg !34
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 16, i32 31), !dbg !34
  %124 = bitcast i32 %123 to float, !dbg !34
  %125 = fadd float %97, %124, !dbg !29
  %126 = bitcast float %125 to i32, !dbg !34
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 8, i32 31), !dbg !34
  %128 = bitcast i32 %127 to float, !dbg !34
  %129 = fadd float %125, %128, !dbg !29
  %130 = icmp eq i32 %8, 0, !dbg !34
  %131 = and i32 %16, 7, !dbg !34
  %132 = shl nuw nsw i32 %10, 3, !dbg !34
  %133 = or disjoint i32 %132, %131, !dbg !34
  %134 = zext nneg i32 %133 to i64, !dbg !34
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i64 %134, !dbg !34
  %136 = bitcast float %105 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 %130) #3, !dbg !34
  %137 = or disjoint i32 %132, 8, !dbg !34
  %138 = or disjoint i32 %137, %131, !dbg !34
  %139 = zext nneg i32 %138 to i64, !dbg !34
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i64 %139, !dbg !34
  %141 = bitcast float %113 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 %130) #3, !dbg !34
  %142 = or disjoint i32 %132, 16, !dbg !34
  %143 = or disjoint i32 %142, %131, !dbg !34
  %144 = zext nneg i32 %143 to i64, !dbg !34
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i64 %144, !dbg !34
  %146 = bitcast float %121 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 %130) #3, !dbg !34
  %147 = or disjoint i32 %132, 24, !dbg !34
  %148 = or disjoint i32 %147, %131, !dbg !34
  %149 = zext nneg i32 %148 to i64, !dbg !34
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i64 %149, !dbg !34
  %151 = bitcast float %129 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 %130) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %152 = icmp slt i32 %7, 256, !dbg !34
  %153 = sext i32 %7 to i64, !dbg !34
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i64 %153, !dbg !34
  %155 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %154, i1 %152) #3, !dbg !34
  %156 = bitcast i32 %155 to float, !dbg !34
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 4, i32 31), !dbg !34
  %158 = bitcast i32 %157 to float, !dbg !34
  %159 = fadd float %156, %158, !dbg !29
  %160 = bitcast float %159 to i32, !dbg !34
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 2, i32 31), !dbg !34
  %162 = bitcast i32 %161 to float, !dbg !34
  %163 = fadd float %159, %162, !dbg !29
  %164 = bitcast float %163 to i32, !dbg !34
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 1, i32 31), !dbg !34
  %166 = bitcast i32 %165 to float, !dbg !34
  %167 = fadd float %163, %166, !dbg !29
  %168 = and i32 %7, 7, !dbg !34
  %169 = icmp eq i32 %168, 0, !dbg !34
  %170 = and i1 %152, %169, !dbg !34
  %171 = bitcast float %167 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %171, i1 %170) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %172 = zext nneg i32 %132 to i64, !dbg !34
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i64 %172, !dbg !34
  %174 = load i32, ptr addrspace(3) %173, align 16, !dbg !34
  %175 = zext nneg i32 %137 to i64, !dbg !34
  %176 = getelementptr float, ptr addrspace(3) @global_smem, i64 %175, !dbg !34
  %177 = load i32, ptr addrspace(3) %176, align 16, !dbg !34
  %178 = zext nneg i32 %142 to i64, !dbg !34
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i64 %178, !dbg !34
  %180 = load i32, ptr addrspace(3) %179, align 16, !dbg !34
  %181 = zext nneg i32 %147 to i64, !dbg !34
  %182 = getelementptr float, ptr addrspace(3) @global_smem, i64 %181, !dbg !34
  %183 = load i32, ptr addrspace(3) %182, align 16, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %184 = zext nneg i32 %10 to i64, !dbg !35
  %185 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %184, !dbg !35
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %185, i32 %174, i32 %177, i32 %180, i32 %183, i1 true) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %186 = zext nneg i32 %11 to i64, !dbg !35
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %186, !dbg !35
  %188 = load float, ptr addrspace(3) %187, align 4, !dbg !35
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %188, float 6.400000e+01) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %190 = sext i32 %13 to i64, !dbg !37
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !37
  %192 = icmp eq i32 %131, 0, !dbg !38
  %193 = bitcast float %189 to i32, !dbg !38
  %194 = and i1 %192, %15, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %193, ptr addrspace(1) %191, i1 %194) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ca6jxm2clikcrfljihpfkuvnsaolzvmw2vnuqndcgr4uglsj4rxy.py", directory: "inductor_cache/a6")
!4 = !{ptr @triton_per_fused_mean_sum_26, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_sum_26, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_sum_26", linkageName: "triton_per_fused_mean_sum_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 50, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 44, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 55, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 53, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 64, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!33 = !DILocation(line: 38, column: 24, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 4, scope: !7)
!37 = !DILocation(line: 42, column: 28, scope: !7)
!38 = !DILocation(line: 42, column: 39, scope: !7)
!39 = !DILocation(line: 42, column: 4, scope: !7)
