; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 1, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = and i32 %8, 1, !dbg !12
  %12 = shl nuw nsw i32 %11, 1, !dbg !12
  %13 = shl i32 %8, 1, !dbg !12
  %14 = and i32 %13, 14, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %14, !dbg !13
  %17 = icmp slt i32 %15, 16, !dbg !14
  %18 = icmp slt i32 %16, 16, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 2, !dbg !16
  %.lobit12 = lshr i32 %8, 3, !dbg !17
  %21 = and i32 %.lobit12, 3, !dbg !17
  %22 = or disjoint i32 %20, %12, !dbg !18
  %23 = or disjoint i32 %20, %21, !dbg !18
  %24 = icmp slt i32 %22, 4, !dbg !19
  %25 = icmp slt i32 %23, 4, !dbg !19
  %26 = srem i32 %15, 4, !dbg !20
  %.frozen = freeze i32 %16, !dbg !21
  %27 = sdiv i32 %.frozen, 4, !dbg !21
  %28 = mul i32 %27, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %29 = shl i32 %15, 2, !dbg !22
  %30 = add i32 %22, %29, !dbg !23
  %31 = sext i32 %30 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = and i1 %17, %24, !dbg !25
  %34 = and i1 %18, %25, !dbg !25
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %33) #2, !dbg !26
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !26
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !26
  %38 = bitcast i32 %36 to float, !dbg !26
  %39 = bitcast i32 %37 to float, !dbg !26
  %40 = shl nsw i32 %26, 2, !dbg !27
  %41 = add i32 %40, %22, !dbg !28
  %42 = sext i32 %41 to i64, !dbg !29
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !29
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %33) #2, !dbg !30
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !30
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !30
  %47 = bitcast i32 %45 to float, !dbg !30
  %48 = bitcast i32 %46 to float, !dbg !30
  %49 = fadd float %38, %47, !dbg !31
  %50 = fadd float %39, %48, !dbg !31
  %51 = fsub float 0.000000e+00, %49, !dbg !32
  %52 = fsub float 0.000000e+00, %50, !dbg !32
  %53 = fmul float %51, 0x3FF7154760000000, !dbg !36
  %54 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %53) #2, !dbg !36
  %55 = fmul float %52, 0x3FF7154760000000, !dbg !36
  %56 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %55) #2, !dbg !36
  %57 = fadd float %54, 1.000000e+00, !dbg !37
  %58 = fadd float %56, 1.000000e+00, !dbg !37
  %59 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %57) #2, !dbg !38
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %58) #2, !dbg !38
  %61 = shl i32 %23, 2, !dbg !39
  %62 = add i32 %61, %.decomposed, !dbg !40
  %63 = shl i32 %27, 4, !dbg !41
  %64 = add i32 %62, %63, !dbg !42
  %65 = sext i32 %64 to i64, !dbg !43
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !43
  %67 = shl nuw nsw i32 %11, 5, !dbg !44
  %68 = or disjoint i32 %67, %10, !dbg !44
  %69 = and i32 %13, 62, !dbg !44
  %70 = shl nuw nsw i32 %11, 2, !dbg !44
  %71 = add nuw nsw i32 %68, %70, !dbg !44
  %72 = zext nneg i32 %71 to i64, !dbg !44
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %72, !dbg !44
  %74 = bitcast float %59 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #2, !dbg !44
  %75 = or disjoint i32 %68, 16, !dbg !44
  %76 = lshr i32 %75, 3, !dbg !44
  %77 = and i32 %76, 6, !dbg !44
  %78 = add nuw nsw i32 %77, %75, !dbg !44
  %79 = zext nneg i32 %78 to i64, !dbg !44
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %79, !dbg !44
  %81 = bitcast float %60 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %82 = lshr i32 %13, 3, !dbg !44
  %83 = and i32 %82, 6, !dbg !44
  %84 = add nuw nsw i32 %83, %69, !dbg !44
  %85 = zext nneg i32 %84 to i64, !dbg !44
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %85, !dbg !44
  %.extract = load i32, ptr addrspace(3) %86, align 8, !dbg !44
  %87 = getelementptr inbounds i8, ptr addrspace(3) %86, i64 4, !dbg !44
  %.extract4 = load i32, ptr addrspace(3) %87, align 4, !dbg !44
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract4, ptr addrspace(1) %66, i1 %34) #2, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3llx46elf4s5zeg77a6vi4pji77iydpez3gmphfme266cvlddh7.py", directory: "inductor_cache/3l")
!4 = !{ptr @triton_poi_fused_clone_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_2", linkageName: "triton_poi_fused_clone_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 50, scope: !7)
!26 = !DILocation(line: 32, column: 42, scope: !7)
!27 = !DILocation(line: 33, column: 37, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 42, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 47, column: 30, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = !DILocation(line: 35, column: 22, scope: !7)
!36 = !DILocation(line: 47, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 47, column: 20, scope: !33, inlinedAt: !35)
!38 = !DILocation(line: 47, column: 16, scope: !33, inlinedAt: !35)
!39 = !DILocation(line: 36, column: 32, scope: !7)
!40 = !DILocation(line: 36, column: 30, scope: !7)
!41 = !DILocation(line: 36, column: 40, scope: !7)
!42 = !DILocation(line: 36, column: 37, scope: !7)
!43 = !DILocation(line: 36, column: 25, scope: !7)
!44 = !DILocation(line: 36, column: 51, scope: !7)
!45 = !DILocation(line: 36, column: 4, scope: !7)
