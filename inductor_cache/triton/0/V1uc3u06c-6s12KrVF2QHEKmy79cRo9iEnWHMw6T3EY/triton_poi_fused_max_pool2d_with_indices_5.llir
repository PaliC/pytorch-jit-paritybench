; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 28, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %16 = shl i32 %15, 5, !dbg !15
  %17 = shl i32 %8, 3, !dbg !16
  %18 = and i32 %17, 24, !dbg !16
  %19 = lshr i32 %8, 3, !dbg !16
  %20 = and i32 %19, 15, !dbg !16
  %21 = or disjoint i32 %16, %18, !dbg !17
  %22 = or disjoint i32 %21, 4, !dbg !17
  %23 = or disjoint i32 %16, %20, !dbg !17
  %24 = or disjoint i32 %23, 16, !dbg !17
  %25 = icmp slt i32 %21, 96, !dbg !18
  %26 = icmp slt i32 %23, 96, !dbg !18
  %27 = icmp slt i32 %24, 96, !dbg !18
  %28 = sdiv i32 %13, 32, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %29 = sdiv i32 %.frozen, 1024, !dbg !20
  %30 = mul i32 %29, 1024, !dbg !21
  %.decomposed = sub i32 %.frozen, %30, !dbg !21
  %31 = mul i32 %28, 12288, !dbg !22
  %32 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !23
  %33 = insertelement <2 x i32> %32, i32 %28, i64 1, !dbg !23
  %34 = srem <2 x i32> %33, splat (i32 32), !dbg !23
  %35 = extractelement <2 x i32> %34, i64 1, !dbg !24
  %36 = icmp sgt i32 %35, 0, !dbg !25
  %37 = icmp sgt <2 x i32> %34, <i32 0, i32 -1>, !dbg !26
  %38 = extractelement <2 x i1> %37, i64 0, !dbg !27
  %39 = and i1 %38, %36, !dbg !27
  %40 = extractelement <2 x i32> %34, i64 0, !dbg !24
  %41 = mul nsw i32 %40, 192, !dbg !28
  %42 = add i32 %31, %41, !dbg !29
  %43 = add i32 %42, -6240, !dbg !30
  %44 = add i32 %43, %21, !dbg !31
  %45 = add i32 %43, %22, !dbg !31
  %46 = sext i32 %44 to i64, !dbg !32
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !32
  %48 = sext i32 %45 to i64, !dbg !32
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !32
  %50 = and i1 %25, %39, !dbg !33
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %50, i32 -8388608, i1 %50, i32 -8388608, i1 %50, i32 -8388608, i1 %50, i32 -8388608, i1 %50) #2, !dbg !34
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !34
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !34
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !34
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !34
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %50, i32 -8388608, i1 %50, i32 -8388608, i1 %50, i32 -8388608, i1 %50, i32 -8388608, i1 %50) #2, !dbg !34
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !34
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !34
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !34
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !34
  %61 = icmp sgt i32 %40, -1, !dbg !35
  %62 = and i1 %61, %36, !dbg !36
  %63 = add i32 %42, -6144, !dbg !37
  %64 = add i32 %63, %21, !dbg !38
  %65 = add i32 %63, %22, !dbg !38
  %66 = sext i32 %64 to i64, !dbg !39
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !39
  %68 = sext i32 %65 to i64, !dbg !39
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !39
  %70 = and i1 %25, %62, !dbg !40
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 %70, i32 -8388608, i1 %70, i32 -8388608, i1 %70, i32 -8388608, i1 %70, i32 -8388608, i1 %70) #2, !dbg !41
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !41
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !41
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !41
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !41
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 %70, i32 -8388608, i1 %70, i32 -8388608, i1 %70, i32 -8388608, i1 %70, i32 -8388608, i1 %70) #2, !dbg !41
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !41
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !41
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !41
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !41
  %81 = add i32 %42, -6048, !dbg !42
  %82 = add i32 %81, %21, !dbg !43
  %83 = add i32 %81, %22, !dbg !43
  %84 = sext i32 %82 to i64, !dbg !44
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !44
  %86 = sext i32 %83 to i64, !dbg !44
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !44
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 %70, i32 -8388608, i1 %70, i32 -8388608, i1 %70, i32 -8388608, i1 %70, i32 -8388608, i1 %70) #2, !dbg !45
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !45
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !45
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !45
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !45
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %70, i32 -8388608, i1 %70, i32 -8388608, i1 %70, i32 -8388608, i1 %70, i32 -8388608, i1 %70) #2, !dbg !45
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !45
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !45
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !45
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !45
  %98 = extractelement <2 x i1> %37, i64 1, !dbg !46
  %99 = and i1 %38, %98, !dbg !46
  %100 = add i32 %42, -96, !dbg !47
  %101 = add i32 %100, %21, !dbg !48
  %102 = add i32 %100, %22, !dbg !48
  %103 = sext i32 %101 to i64, !dbg !49
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !49
  %105 = sext i32 %102 to i64, !dbg !49
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !49
  %107 = and i1 %25, %99, !dbg !50
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %104, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107) #2, !dbg !51
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !51
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !51
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !51
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !51
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %106, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107) #2, !dbg !51
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !51
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !51
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !51
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !51
  %118 = or i32 %35, %40, !dbg !24
  %119 = icmp sgt i32 %118, -1, !dbg !24
  %120 = add i32 %42, %21, !dbg !52
  %121 = add i32 %42, %22, !dbg !52
  %122 = sext i32 %120 to i64, !dbg !53
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !53
  %124 = sext i32 %121 to i64, !dbg !53
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !53
  %126 = and i1 %25, %119, !dbg !54
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %123, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126) #2, !dbg !55
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !55
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !55
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !55
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !55
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %125, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126) #2, !dbg !55
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !55
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !55
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !55
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !55
  %137 = add i32 %42, 96, !dbg !56
  %138 = add i32 %137, %21, !dbg !57
  %139 = add i32 %137, %22, !dbg !57
  %140 = sext i32 %138 to i64, !dbg !58
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !58
  %142 = sext i32 %139 to i64, !dbg !58
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !58
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %141, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126) #2, !dbg !59
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !59
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !59
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !59
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !59
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %143, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126) #2, !dbg !59
  %150 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !59
  %151 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !59
  %152 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !59
  %153 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !59
  %154 = add i32 %42, 6048, !dbg !60
  %155 = add i32 %154, %21, !dbg !61
  %156 = add i32 %154, %22, !dbg !61
  %157 = sext i32 %155 to i64, !dbg !62
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !62
  %159 = sext i32 %156 to i64, !dbg !62
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !62
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %158, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107) #2, !dbg !63
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !63
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !63
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !63
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !63
  %166 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %160, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107) #2, !dbg !63
  %167 = extractvalue { i32, i32, i32, i32 } %166, 0, !dbg !63
  %168 = extractvalue { i32, i32, i32, i32 } %166, 1, !dbg !63
  %169 = extractvalue { i32, i32, i32, i32 } %166, 2, !dbg !63
  %170 = extractvalue { i32, i32, i32, i32 } %166, 3, !dbg !63
  %171 = add i32 %42, 6144, !dbg !64
  %172 = add i32 %171, %21, !dbg !65
  %173 = add i32 %171, %22, !dbg !65
  %174 = sext i32 %172 to i64, !dbg !66
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !66
  %176 = sext i32 %173 to i64, !dbg !66
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !66
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %175, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126) #2, !dbg !67
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !67
  %180 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !67
  %181 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !67
  %182 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !67
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %177, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126) #2, !dbg !67
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !67
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !67
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !67
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !67
  %188 = add i32 %42, 6240, !dbg !68
  %189 = add i32 %188, %21, !dbg !69
  %190 = add i32 %188, %22, !dbg !69
  %191 = sext i32 %189 to i64, !dbg !70
  %192 = getelementptr float, ptr addrspace(1) %0, i64 %191, !dbg !70
  %193 = sext i32 %190 to i64, !dbg !70
  %194 = getelementptr float, ptr addrspace(1) %0, i64 %193, !dbg !70
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %192, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126) #2, !dbg !71
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !71
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !71
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !71
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !71
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %194, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126, i32 -8388608, i1 %126) #2, !dbg !71
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !71
  %202 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !71
  %203 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !71
  %204 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !71
  %205 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !34
  %206 = insertelement <4 x i32> %205, i32 %53, i64 1, !dbg !34
  %207 = insertelement <4 x i32> %206, i32 %54, i64 2, !dbg !34
  %208 = insertelement <4 x i32> %207, i32 %55, i64 3, !dbg !34
  %209 = bitcast <4 x i32> %208 to <4 x float>, !dbg !34
  %210 = insertelement <4 x i32> poison, i32 %72, i64 0, !dbg !41
  %211 = insertelement <4 x i32> %210, i32 %73, i64 1, !dbg !41
  %212 = insertelement <4 x i32> %211, i32 %74, i64 2, !dbg !41
  %213 = insertelement <4 x i32> %212, i32 %75, i64 3, !dbg !41
  %214 = bitcast <4 x i32> %213 to <4 x float>, !dbg !41
  %215 = fcmp ogt <4 x float> %214, %209, !dbg !72
  %216 = fcmp uno <4 x float> %214, zeroinitializer, !dbg !76
  %217 = or <4 x i1> %215, %216, !dbg !77
  %.v = select <4 x i1> %217, <4 x i32> %213, <4 x i32> %208, !dbg !78
  %218 = bitcast <4 x i32> %.v to <4 x float>, !dbg !78
  %219 = insertelement <4 x i32> poison, i32 %89, i64 0, !dbg !45
  %220 = insertelement <4 x i32> %219, i32 %90, i64 1, !dbg !45
  %221 = insertelement <4 x i32> %220, i32 %91, i64 2, !dbg !45
  %222 = insertelement <4 x i32> %221, i32 %92, i64 3, !dbg !45
  %223 = bitcast <4 x i32> %222 to <4 x float>, !dbg !45
  %224 = fcmp olt <4 x float> %218, %223, !dbg !79
  %225 = fcmp uno <4 x float> %223, zeroinitializer, !dbg !81
  %226 = or <4 x i1> %225, %224, !dbg !82
  %.v17 = select <4 x i1> %226, <4 x i32> %222, <4 x i32> %.v, !dbg !83
  %227 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !83
  %228 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !51
  %229 = insertelement <4 x i32> %228, i32 %110, i64 1, !dbg !51
  %230 = insertelement <4 x i32> %229, i32 %111, i64 2, !dbg !51
  %231 = insertelement <4 x i32> %230, i32 %112, i64 3, !dbg !51
  %232 = bitcast <4 x i32> %231 to <4 x float>, !dbg !51
  %233 = fcmp olt <4 x float> %227, %232, !dbg !84
  %234 = fcmp uno <4 x float> %232, zeroinitializer, !dbg !86
  %235 = or <4 x i1> %234, %233, !dbg !87
  %.v18 = select <4 x i1> %235, <4 x i32> %231, <4 x i32> %.v17, !dbg !88
  %236 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !88
  %237 = insertelement <4 x i32> poison, i32 %128, i64 0, !dbg !55
  %238 = insertelement <4 x i32> %237, i32 %129, i64 1, !dbg !55
  %239 = insertelement <4 x i32> %238, i32 %130, i64 2, !dbg !55
  %240 = insertelement <4 x i32> %239, i32 %131, i64 3, !dbg !55
  %241 = bitcast <4 x i32> %240 to <4 x float>, !dbg !55
  %242 = fcmp olt <4 x float> %236, %241, !dbg !89
  %243 = fcmp uno <4 x float> %241, zeroinitializer, !dbg !91
  %244 = or <4 x i1> %243, %242, !dbg !92
  %.v19 = select <4 x i1> %244, <4 x i32> %240, <4 x i32> %.v18, !dbg !93
  %245 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !93
  %246 = insertelement <4 x i32> poison, i32 %145, i64 0, !dbg !59
  %247 = insertelement <4 x i32> %246, i32 %146, i64 1, !dbg !59
  %248 = insertelement <4 x i32> %247, i32 %147, i64 2, !dbg !59
  %249 = insertelement <4 x i32> %248, i32 %148, i64 3, !dbg !59
  %250 = bitcast <4 x i32> %249 to <4 x float>, !dbg !59
  %251 = fcmp olt <4 x float> %245, %250, !dbg !94
  %252 = fcmp uno <4 x float> %250, zeroinitializer, !dbg !96
  %253 = or <4 x i1> %252, %251, !dbg !97
  %.v20 = select <4 x i1> %253, <4 x i32> %249, <4 x i32> %.v19, !dbg !98
  %254 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !98
  %255 = insertelement <4 x i32> poison, i32 %162, i64 0, !dbg !63
  %256 = insertelement <4 x i32> %255, i32 %163, i64 1, !dbg !63
  %257 = insertelement <4 x i32> %256, i32 %164, i64 2, !dbg !63
  %258 = insertelement <4 x i32> %257, i32 %165, i64 3, !dbg !63
  %259 = bitcast <4 x i32> %258 to <4 x float>, !dbg !63
  %260 = fcmp olt <4 x float> %254, %259, !dbg !99
  %261 = fcmp uno <4 x float> %259, zeroinitializer, !dbg !101
  %262 = or <4 x i1> %261, %260, !dbg !102
  %.v21 = select <4 x i1> %262, <4 x i32> %258, <4 x i32> %.v20, !dbg !103
  %263 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !103
  %264 = insertelement <4 x i32> poison, i32 %179, i64 0, !dbg !67
  %265 = insertelement <4 x i32> %264, i32 %180, i64 1, !dbg !67
  %266 = insertelement <4 x i32> %265, i32 %181, i64 2, !dbg !67
  %267 = insertelement <4 x i32> %266, i32 %182, i64 3, !dbg !67
  %268 = bitcast <4 x i32> %267 to <4 x float>, !dbg !67
  %269 = fcmp olt <4 x float> %263, %268, !dbg !104
  %270 = fcmp uno <4 x float> %268, zeroinitializer, !dbg !106
  %271 = or <4 x i1> %270, %269, !dbg !107
  %.v22 = select <4 x i1> %271, <4 x i32> %267, <4 x i32> %.v21, !dbg !108
  %272 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !108
  %273 = insertelement <4 x i32> poison, i32 %196, i64 0, !dbg !71
  %274 = insertelement <4 x i32> %273, i32 %197, i64 1, !dbg !71
  %275 = insertelement <4 x i32> %274, i32 %198, i64 2, !dbg !71
  %276 = insertelement <4 x i32> %275, i32 %199, i64 3, !dbg !71
  %277 = bitcast <4 x i32> %276 to <4 x float>, !dbg !71
  %278 = fcmp olt <4 x float> %272, %277, !dbg !109
  %279 = extractelement <4 x i1> %278, i64 0, !dbg !111
  %280 = extractelement <4 x i1> %278, i64 1, !dbg !111
  %281 = extractelement <4 x i1> %278, i64 2, !dbg !111
  %282 = extractelement <4 x i1> %278, i64 3, !dbg !111
  %283 = zext <4 x i1> %215 to <4 x i8>, !dbg !112
  %284 = select <4 x i1> %224, <4 x i8> splat (i8 2), <4 x i8> %283, !dbg !113
  %285 = select <4 x i1> %233, <4 x i8> splat (i8 3), <4 x i8> %284, !dbg !114
  %286 = select <4 x i1> %242, <4 x i8> splat (i8 4), <4 x i8> %285, !dbg !115
  %287 = select <4 x i1> %251, <4 x i8> splat (i8 5), <4 x i8> %286, !dbg !116
  %288 = select <4 x i1> %260, <4 x i8> splat (i8 6), <4 x i8> %287, !dbg !117
  %289 = select <4 x i1> %269, <4 x i8> splat (i8 7), <4 x i8> %288, !dbg !118
  %290 = select <4 x i1> %278, <4 x i8> splat (i8 8), <4 x i8> %289, !dbg !119
  %291 = insertelement <4 x i32> poison, i32 %57, i64 0, !dbg !34
  %292 = insertelement <4 x i32> %291, i32 %58, i64 1, !dbg !34
  %293 = insertelement <4 x i32> %292, i32 %59, i64 2, !dbg !34
  %294 = insertelement <4 x i32> %293, i32 %60, i64 3, !dbg !34
  %295 = bitcast <4 x i32> %294 to <4 x float>, !dbg !34
  %296 = insertelement <4 x i32> poison, i32 %77, i64 0, !dbg !41
  %297 = insertelement <4 x i32> %296, i32 %78, i64 1, !dbg !41
  %298 = insertelement <4 x i32> %297, i32 %79, i64 2, !dbg !41
  %299 = insertelement <4 x i32> %298, i32 %80, i64 3, !dbg !41
  %300 = bitcast <4 x i32> %299 to <4 x float>, !dbg !41
  %301 = fcmp ogt <4 x float> %300, %295, !dbg !72
  %302 = fcmp uno <4 x float> %300, zeroinitializer, !dbg !76
  %303 = or <4 x i1> %301, %302, !dbg !77
  %.v23 = select <4 x i1> %303, <4 x i32> %299, <4 x i32> %294, !dbg !78
  %304 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !78
  %305 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !45
  %306 = insertelement <4 x i32> %305, i32 %95, i64 1, !dbg !45
  %307 = insertelement <4 x i32> %306, i32 %96, i64 2, !dbg !45
  %308 = insertelement <4 x i32> %307, i32 %97, i64 3, !dbg !45
  %309 = bitcast <4 x i32> %308 to <4 x float>, !dbg !45
  %310 = fcmp olt <4 x float> %304, %309, !dbg !79
  %311 = fcmp uno <4 x float> %309, zeroinitializer, !dbg !81
  %312 = or <4 x i1> %311, %310, !dbg !82
  %.v24 = select <4 x i1> %312, <4 x i32> %308, <4 x i32> %.v23, !dbg !83
  %313 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !83
  %314 = insertelement <4 x i32> poison, i32 %114, i64 0, !dbg !51
  %315 = insertelement <4 x i32> %314, i32 %115, i64 1, !dbg !51
  %316 = insertelement <4 x i32> %315, i32 %116, i64 2, !dbg !51
  %317 = insertelement <4 x i32> %316, i32 %117, i64 3, !dbg !51
  %318 = bitcast <4 x i32> %317 to <4 x float>, !dbg !51
  %319 = fcmp olt <4 x float> %313, %318, !dbg !84
  %320 = fcmp uno <4 x float> %318, zeroinitializer, !dbg !86
  %321 = or <4 x i1> %320, %319, !dbg !87
  %.v25 = select <4 x i1> %321, <4 x i32> %317, <4 x i32> %.v24, !dbg !88
  %322 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !88
  %323 = insertelement <4 x i32> poison, i32 %133, i64 0, !dbg !55
  %324 = insertelement <4 x i32> %323, i32 %134, i64 1, !dbg !55
  %325 = insertelement <4 x i32> %324, i32 %135, i64 2, !dbg !55
  %326 = insertelement <4 x i32> %325, i32 %136, i64 3, !dbg !55
  %327 = bitcast <4 x i32> %326 to <4 x float>, !dbg !55
  %328 = fcmp olt <4 x float> %322, %327, !dbg !89
  %329 = fcmp uno <4 x float> %327, zeroinitializer, !dbg !91
  %330 = or <4 x i1> %329, %328, !dbg !92
  %.v26 = select <4 x i1> %330, <4 x i32> %326, <4 x i32> %.v25, !dbg !93
  %331 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !93
  %332 = insertelement <4 x i32> poison, i32 %150, i64 0, !dbg !59
  %333 = insertelement <4 x i32> %332, i32 %151, i64 1, !dbg !59
  %334 = insertelement <4 x i32> %333, i32 %152, i64 2, !dbg !59
  %335 = insertelement <4 x i32> %334, i32 %153, i64 3, !dbg !59
  %336 = bitcast <4 x i32> %335 to <4 x float>, !dbg !59
  %337 = fcmp olt <4 x float> %331, %336, !dbg !94
  %338 = fcmp uno <4 x float> %336, zeroinitializer, !dbg !96
  %339 = or <4 x i1> %338, %337, !dbg !97
  %.v27 = select <4 x i1> %339, <4 x i32> %335, <4 x i32> %.v26, !dbg !98
  %340 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !98
  %341 = insertelement <4 x i32> poison, i32 %167, i64 0, !dbg !63
  %342 = insertelement <4 x i32> %341, i32 %168, i64 1, !dbg !63
  %343 = insertelement <4 x i32> %342, i32 %169, i64 2, !dbg !63
  %344 = insertelement <4 x i32> %343, i32 %170, i64 3, !dbg !63
  %345 = bitcast <4 x i32> %344 to <4 x float>, !dbg !63
  %346 = fcmp olt <4 x float> %340, %345, !dbg !99
  %347 = fcmp uno <4 x float> %345, zeroinitializer, !dbg !101
  %348 = or <4 x i1> %347, %346, !dbg !102
  %.v28 = select <4 x i1> %348, <4 x i32> %344, <4 x i32> %.v27, !dbg !103
  %349 = bitcast <4 x i32> %.v28 to <4 x float>, !dbg !103
  %350 = insertelement <4 x i32> poison, i32 %184, i64 0, !dbg !67
  %351 = insertelement <4 x i32> %350, i32 %185, i64 1, !dbg !67
  %352 = insertelement <4 x i32> %351, i32 %186, i64 2, !dbg !67
  %353 = insertelement <4 x i32> %352, i32 %187, i64 3, !dbg !67
  %354 = bitcast <4 x i32> %353 to <4 x float>, !dbg !67
  %355 = fcmp olt <4 x float> %349, %354, !dbg !104
  %356 = fcmp uno <4 x float> %354, zeroinitializer, !dbg !106
  %357 = or <4 x i1> %356, %355, !dbg !107
  %.v29 = select <4 x i1> %357, <4 x i32> %353, <4 x i32> %.v28, !dbg !108
  %358 = bitcast <4 x i32> %.v29 to <4 x float>, !dbg !108
  %359 = insertelement <4 x i32> poison, i32 %201, i64 0, !dbg !71
  %360 = insertelement <4 x i32> %359, i32 %202, i64 1, !dbg !71
  %361 = insertelement <4 x i32> %360, i32 %203, i64 2, !dbg !71
  %362 = insertelement <4 x i32> %361, i32 %204, i64 3, !dbg !71
  %363 = bitcast <4 x i32> %362 to <4 x float>, !dbg !71
  %364 = fcmp olt <4 x float> %358, %363, !dbg !109
  %365 = shufflevector <4 x float> %363, <4 x float> %277, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !120
  %366 = fcmp uno <8 x float> %365, zeroinitializer, !dbg !120
  %367 = extractelement <8 x i1> %366, i64 7, !dbg !111
  %368 = or i1 %367, %279, !dbg !111
  %369 = extractelement <8 x i1> %366, i64 6, !dbg !111
  %370 = or i1 %369, %280, !dbg !111
  %371 = extractelement <8 x i1> %366, i64 5, !dbg !111
  %372 = or i1 %371, %281, !dbg !111
  %373 = extractelement <8 x i1> %366, i64 4, !dbg !111
  %374 = or i1 %373, %282, !dbg !111
  %375 = extractelement <4 x i1> %364, i64 0, !dbg !111
  %376 = extractelement <8 x i1> %366, i64 3, !dbg !111
  %377 = or i1 %376, %375, !dbg !111
  %378 = extractelement <4 x i1> %364, i64 1, !dbg !111
  %379 = extractelement <8 x i1> %366, i64 2, !dbg !111
  %380 = or i1 %379, %378, !dbg !111
  %381 = extractelement <4 x i1> %364, i64 2, !dbg !111
  %382 = extractelement <8 x i1> %366, i64 1, !dbg !111
  %383 = or i1 %382, %381, !dbg !111
  %384 = extractelement <4 x i1> %364, i64 3, !dbg !111
  %385 = extractelement <8 x i1> %366, i64 0, !dbg !111
  %386 = or i1 %385, %384, !dbg !111
  %387 = zext <4 x i1> %301 to <4 x i8>, !dbg !112
  %388 = select <4 x i1> %310, <4 x i8> splat (i8 2), <4 x i8> %387, !dbg !113
  %389 = select <4 x i1> %319, <4 x i8> splat (i8 3), <4 x i8> %388, !dbg !114
  %390 = select <4 x i1> %328, <4 x i8> splat (i8 4), <4 x i8> %389, !dbg !115
  %391 = select <4 x i1> %337, <4 x i8> splat (i8 5), <4 x i8> %390, !dbg !116
  %392 = select <4 x i1> %346, <4 x i8> splat (i8 6), <4 x i8> %391, !dbg !117
  %393 = select <4 x i1> %355, <4 x i8> splat (i8 7), <4 x i8> %392, !dbg !118
  %394 = select <4 x i1> %364, <4 x i8> splat (i8 8), <4 x i8> %393, !dbg !119
  %395 = shl i32 %23, 10, !dbg !121
  %396 = shl i32 %24, 10, !dbg !121
  %397 = mul i32 %29, 98304, !dbg !122
  %398 = add i32 %397, %.decomposed, !dbg !123
  %399 = add i32 %398, %395, !dbg !124
  %400 = add i32 %398, %396, !dbg !124
  %401 = sext i32 %399 to i64, !dbg !125
  %402 = getelementptr float, ptr addrspace(1) %1, i64 %401, !dbg !125
  %403 = sext i32 %400 to i64, !dbg !125
  %404 = getelementptr float, ptr addrspace(1) %1, i64 %403, !dbg !125
  %405 = shl i32 %8, 8, !dbg !126
  %406 = and i32 %405, 768, !dbg !126
  %407 = or disjoint i32 %406, %10, !dbg !126
  %408 = and i32 %11, 508, !dbg !126
  %409 = lshr exact i32 %406, 3, !dbg !126
  %410 = or disjoint i32 %409, %407, !dbg !126
  %411 = zext nneg i32 %410 to i64, !dbg !126
  %412 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %411, !dbg !126
  %413 = extractelement <4 x i32> %.v22, i64 0, !dbg !126
  %414 = select i1 %368, i32 %196, i32 %413, !dbg !127
  %415 = insertelement <1 x i32> poison, i32 %414, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %412, <1 x i32> %415, i1 true) #2, !dbg !126
  %416 = or disjoint i32 %407, 32, !dbg !126
  %417 = lshr i32 %416, 3, !dbg !126
  %418 = and i32 %417, 100, !dbg !126
  %419 = add nuw nsw i32 %418, %416, !dbg !126
  %420 = zext nneg i32 %419 to i64, !dbg !126
  %421 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %420, !dbg !126
  %422 = extractelement <4 x i32> %.v22, i64 1, !dbg !126
  %423 = select i1 %370, i32 %197, i32 %422, !dbg !127
  %424 = insertelement <1 x i32> poison, i32 %423, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %421, <1 x i32> %424, i1 true) #2, !dbg !126
  %425 = or disjoint i32 %407, 64, !dbg !126
  %426 = lshr i32 %425, 3, !dbg !126
  %427 = and i32 %426, 104, !dbg !126
  %428 = add nuw nsw i32 %427, %425, !dbg !126
  %429 = zext nneg i32 %428 to i64, !dbg !126
  %430 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %429, !dbg !126
  %431 = extractelement <4 x i32> %.v22, i64 2, !dbg !126
  %432 = select i1 %372, i32 %198, i32 %431, !dbg !127
  %433 = insertelement <1 x i32> poison, i32 %432, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %430, <1 x i32> %433, i1 true) #2, !dbg !126
  %434 = or disjoint i32 %407, 96, !dbg !126
  %435 = lshr i32 %434, 3, !dbg !126
  %436 = and i32 %435, 108, !dbg !126
  %437 = add nuw nsw i32 %436, %434, !dbg !126
  %438 = zext nneg i32 %437 to i64, !dbg !126
  %439 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %438, !dbg !126
  %440 = extractelement <4 x i32> %.v22, i64 3, !dbg !126
  %441 = select i1 %374, i32 %199, i32 %440, !dbg !127
  %442 = insertelement <1 x i32> poison, i32 %441, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %439, <1 x i32> %442, i1 true) #2, !dbg !126
  %443 = or disjoint i32 %407, 128, !dbg !126
  %444 = lshr i32 %443, 3, !dbg !126
  %445 = and i32 %444, 112, !dbg !126
  %446 = add nuw nsw i32 %445, %443, !dbg !126
  %447 = zext nneg i32 %446 to i64, !dbg !126
  %448 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %447, !dbg !126
  %449 = extractelement <4 x i32> %.v29, i64 0, !dbg !126
  %450 = select i1 %377, i32 %201, i32 %449, !dbg !127
  %451 = insertelement <1 x i32> poison, i32 %450, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %448, <1 x i32> %451, i1 true) #2, !dbg !126
  %452 = or disjoint i32 %407, 160, !dbg !126
  %453 = lshr i32 %452, 3, !dbg !126
  %454 = and i32 %453, 116, !dbg !126
  %455 = add nuw nsw i32 %454, %452, !dbg !126
  %456 = zext nneg i32 %455 to i64, !dbg !126
  %457 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %456, !dbg !126
  %458 = extractelement <4 x i32> %.v29, i64 1, !dbg !126
  %459 = select i1 %380, i32 %202, i32 %458, !dbg !127
  %460 = insertelement <1 x i32> poison, i32 %459, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %457, <1 x i32> %460, i1 true) #2, !dbg !126
  %461 = or disjoint i32 %407, 192, !dbg !126
  %462 = lshr i32 %461, 3, !dbg !126
  %463 = and i32 %462, 120, !dbg !126
  %464 = add nuw nsw i32 %463, %461, !dbg !126
  %465 = zext nneg i32 %464 to i64, !dbg !126
  %466 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %465, !dbg !126
  %467 = extractelement <4 x i32> %.v29, i64 2, !dbg !126
  %468 = select i1 %383, i32 %203, i32 %467, !dbg !127
  %469 = insertelement <1 x i32> poison, i32 %468, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %466, <1 x i32> %469, i1 true) #2, !dbg !126
  %470 = or disjoint i32 %407, 224, !dbg !126
  %471 = lshr i32 %470, 3, !dbg !126
  %472 = and i32 %471, 124, !dbg !126
  %473 = add nuw nsw i32 %472, %470, !dbg !126
  %474 = zext nneg i32 %473 to i64, !dbg !126
  %475 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %474, !dbg !126
  %476 = extractelement <4 x i32> %.v29, i64 3, !dbg !126
  %477 = select i1 %386, i32 %204, i32 %476, !dbg !127
  %478 = insertelement <1 x i32> poison, i32 %477, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %475, <1 x i32> %478, i1 true) #2, !dbg !126
  tail call void @llvm.nvvm.barrier0(), !dbg !126
  %479 = lshr i32 %11, 3, !dbg !126
  %480 = and i32 %479, 60, !dbg !126
  %481 = add nuw nsw i32 %480, %408, !dbg !126
  %482 = zext nneg i32 %481 to i64, !dbg !126
  %483 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %482, !dbg !126
  %484 = or disjoint i32 %408, 512, !dbg !126
  %485 = lshr i32 %484, 3, !dbg !126
  %486 = and i32 %485, 124, !dbg !126
  %487 = add nuw nsw i32 %486, %484, !dbg !126
  %488 = zext nneg i32 %487 to i64, !dbg !126
  %489 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %488, !dbg !126
  %490 = load <4 x i32>, ptr addrspace(3) %489, align 16, !dbg !126
  %.extract = load i32, ptr addrspace(3) %483, align 16, !dbg !126
  %491 = getelementptr inbounds i8, ptr addrspace(3) %483, i64 4, !dbg !126
  %.extract10 = load i32, ptr addrspace(3) %491, align 4, !dbg !126
  %492 = getelementptr inbounds i8, ptr addrspace(3) %483, i64 8, !dbg !126
  %.extract11 = load i32, ptr addrspace(3) %492, align 8, !dbg !126
  %493 = getelementptr inbounds i8, ptr addrspace(3) %483, i64 12, !dbg !126
  %.extract12 = load i32, ptr addrspace(3) %493, align 4, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %402, i1 %26) #2, !dbg !126
  %.extract13 = extractelement <4 x i32> %490, i64 0, !dbg !126
  %.extract14 = extractelement <4 x i32> %490, i64 1, !dbg !126
  %.extract15 = extractelement <4 x i32> %490, i64 2, !dbg !126
  %.extract16 = extractelement <4 x i32> %490, i64 3, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %404, i1 %27) #2, !dbg !126
  %494 = mul i32 %13, 96, !dbg !128
  %495 = add i32 %21, %494, !dbg !129
  %496 = sext i32 %495 to i64, !dbg !130
  %497 = getelementptr i8, ptr addrspace(1) %2, i64 %496, !dbg !130
  %498 = bitcast <4 x i8> %290 to i32, !dbg !131
  %499 = bitcast <4 x i8> %394 to i32, !dbg !131
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %498, i32 %499, ptr addrspace(1) %497, i1 %25) #2, !dbg !131
  ret void, !dbg !132
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctofodevne6aa27t2z3azvbbbpioq25rzemwswu7x6ed6uyq5dg5.py", directory: "inductor_cache/to")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_5", linkageName: "triton_poi_fused_max_pool2d_with_indices_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 46, column: 61, scope: !7)
!23 = !DILocation(line: 29, column: 19, scope: !7)
!24 = !DILocation(line: 68, column: 20, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 42, column: 19, scope: !7)
!27 = !DILocation(line: 45, column: 19, scope: !7)
!28 = !DILocation(line: 46, column: 50, scope: !7)
!29 = !DILocation(line: 46, column: 41, scope: !7)
!30 = !DILocation(line: 46, column: 46, scope: !7)
!31 = !DILocation(line: 46, column: 55, scope: !7)
!32 = !DILocation(line: 46, column: 31, scope: !7)
!33 = !DILocation(line: 46, column: 74, scope: !7)
!34 = !DILocation(line: 46, column: 66, scope: !7)
!35 = !DILocation(line: 48, column: 21, scope: !7)
!36 = !DILocation(line: 51, column: 19, scope: !7)
!37 = !DILocation(line: 52, column: 46, scope: !7)
!38 = !DILocation(line: 52, column: 55, scope: !7)
!39 = !DILocation(line: 52, column: 31, scope: !7)
!40 = !DILocation(line: 52, column: 74, scope: !7)
!41 = !DILocation(line: 52, column: 66, scope: !7)
!42 = !DILocation(line: 59, column: 46, scope: !7)
!43 = !DILocation(line: 59, column: 55, scope: !7)
!44 = !DILocation(line: 59, column: 31, scope: !7)
!45 = !DILocation(line: 59, column: 66, scope: !7)
!46 = !DILocation(line: 65, column: 20, scope: !7)
!47 = !DILocation(line: 66, column: 44, scope: !7)
!48 = !DILocation(line: 66, column: 53, scope: !7)
!49 = !DILocation(line: 66, column: 31, scope: !7)
!50 = !DILocation(line: 66, column: 72, scope: !7)
!51 = !DILocation(line: 66, column: 64, scope: !7)
!52 = !DILocation(line: 69, column: 45, scope: !7)
!53 = !DILocation(line: 69, column: 31, scope: !7)
!54 = !DILocation(line: 69, column: 64, scope: !7)
!55 = !DILocation(line: 69, column: 56, scope: !7)
!56 = !DILocation(line: 72, column: 41, scope: !7)
!57 = !DILocation(line: 72, column: 50, scope: !7)
!58 = !DILocation(line: 72, column: 31, scope: !7)
!59 = !DILocation(line: 72, column: 61, scope: !7)
!60 = !DILocation(line: 79, column: 43, scope: !7)
!61 = !DILocation(line: 79, column: 52, scope: !7)
!62 = !DILocation(line: 79, column: 31, scope: !7)
!63 = !DILocation(line: 79, column: 63, scope: !7)
!64 = !DILocation(line: 82, column: 43, scope: !7)
!65 = !DILocation(line: 82, column: 52, scope: !7)
!66 = !DILocation(line: 82, column: 31, scope: !7)
!67 = !DILocation(line: 82, column: 63, scope: !7)
!68 = !DILocation(line: 85, column: 43, scope: !7)
!69 = !DILocation(line: 85, column: 52, scope: !7)
!70 = !DILocation(line: 85, column: 31, scope: !7)
!71 = !DILocation(line: 85, column: 63, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !75)
!73 = distinct !DILexicalBlockFile(scope: !7, file: !74, discriminator: 0)
!74 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!75 = !DILocation(line: 53, column: 42, scope: !7)
!76 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !75)
!77 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !75)
!78 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !75)
!79 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !80)
!80 = !DILocation(line: 60, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !80)
!84 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !85)
!85 = !DILocation(line: 67, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !85)
!89 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !90)
!90 = !DILocation(line: 70, column: 42, scope: !7)
!91 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !90)
!92 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !90)
!93 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !90)
!94 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !95)
!95 = !DILocation(line: 73, column: 42, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !95)
!97 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !95)
!98 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !95)
!99 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !100)
!100 = !DILocation(line: 80, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !105)
!105 = !DILocation(line: 83, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !105)
!109 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !110)
!110 = !DILocation(line: 86, column: 42, scope: !7)
!111 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !110)
!112 = !DILocation(line: 90, column: 35, scope: !7)
!113 = !DILocation(line: 93, column: 35, scope: !7)
!114 = !DILocation(line: 96, column: 35, scope: !7)
!115 = !DILocation(line: 99, column: 35, scope: !7)
!116 = !DILocation(line: 102, column: 35, scope: !7)
!117 = !DILocation(line: 105, column: 35, scope: !7)
!118 = !DILocation(line: 108, column: 35, scope: !7)
!119 = !DILocation(line: 111, column: 35, scope: !7)
!120 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !110)
!121 = !DILocation(line: 112, column: 35, scope: !7)
!122 = !DILocation(line: 112, column: 46, scope: !7)
!123 = !DILocation(line: 112, column: 30, scope: !7)
!124 = !DILocation(line: 112, column: 40, scope: !7)
!125 = !DILocation(line: 112, column: 25, scope: !7)
!126 = !DILocation(line: 112, column: 58, scope: !7)
!127 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !110)
!128 = !DILocation(line: 113, column: 33, scope: !7)
!129 = !DILocation(line: 113, column: 30, scope: !7)
!130 = !DILocation(line: 113, column: 25, scope: !7)
!131 = !DILocation(line: 113, column: 45, scope: !7)
!132 = !DILocation(line: 113, column: 4, scope: !7)
