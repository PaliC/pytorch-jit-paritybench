; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_mean_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 62, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %12 = sdiv i32 %.frozen, 16, !dbg !15
  %13 = mul i32 %12, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = shl i32 %12, 6, !dbg !17
  %15 = add i32 %14, %.decomposed, !dbg !18
  %16 = sext i32 %15 to i64, !dbg !19
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !19
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %17, i1 %11) #1, !dbg !20
  %19 = extractvalue { i32, i32 } %18, 0, !dbg !20
  %20 = extractvalue { i32, i32 } %18, 1, !dbg !20
  %21 = bitcast i32 %19 to float, !dbg !20
  %22 = bitcast i32 %20 to float, !dbg !20
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #1, !dbg !21
  %24 = bitcast i32 %23 to float, !dbg !21
  %25 = add i32 %15, 16, !dbg !22
  %26 = sext i32 %25 to i64, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !23
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %11) #1, !dbg !24
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !24
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !24
  %31 = bitcast i32 %29 to float, !dbg !24
  %32 = bitcast i32 %30 to float, !dbg !24
  %33 = getelementptr i8, ptr addrspace(1) %1, i64 4, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !26
  %35 = bitcast i32 %34 to float, !dbg !26
  %36 = add i32 %15, 32, !dbg !27
  %37 = sext i32 %36 to i64, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !28
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %11) #1, !dbg !29
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !29
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !29
  %42 = bitcast i32 %40 to float, !dbg !29
  %43 = bitcast i32 %41 to float, !dbg !29
  %44 = getelementptr i8, ptr addrspace(1) %1, i64 8, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !31
  %46 = bitcast i32 %45 to float, !dbg !31
  %47 = add i32 %15, 48, !dbg !32
  %48 = sext i32 %47 to i64, !dbg !33
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !33
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %11) #1, !dbg !34
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !34
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !34
  %53 = bitcast i32 %51 to float, !dbg !34
  %54 = bitcast i32 %52 to float, !dbg !34
  %55 = getelementptr i8, ptr addrspace(1) %1, i64 12, !dbg !35
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !36
  %57 = bitcast i32 %56 to float, !dbg !36
  %58 = fadd float %21, %24, !dbg !37
  %59 = fadd float %22, %24, !dbg !37
  %60 = fadd float %31, %35, !dbg !38
  %61 = fadd float %32, %35, !dbg !38
  %62 = fadd float %58, %60, !dbg !39
  %63 = fadd float %59, %61, !dbg !39
  %64 = fadd float %42, %46, !dbg !40
  %65 = fadd float %43, %46, !dbg !40
  %66 = fadd float %62, %64, !dbg !41
  %67 = fadd float %63, %65, !dbg !41
  %68 = fadd float %53, %57, !dbg !42
  %69 = fadd float %54, %57, !dbg !42
  %70 = fadd float %66, %68, !dbg !43
  %71 = fadd float %67, %69, !dbg !43
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %70, float 4.000000e+00) #1, !dbg !44
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float 4.000000e+00) #1, !dbg !44
  %74 = sext i32 %10 to i64, !dbg !45
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !45
  %76 = bitcast float %72 to i32, !dbg !46
  %77 = bitcast float %73 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %76, i32 %77, ptr addrspace(1) %75, i1 %11) #1, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfimwserwqcxfgmrjecyixkczyqhpn2grntcz3xx6akqx5fjvisq.py", directory: "inductor_cache/fi")
!4 = !{ptr @triton_poi_fused_convolution_mean_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_mean_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_mean_0", linkageName: "triton_poi_fused_convolution_mean_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 38, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 43, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 40, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 48, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 19, scope: !7)
!27 = !DILocation(line: 33, column: 40, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 48, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 20, scope: !7)
!32 = !DILocation(line: 36, column: 41, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 49, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 20, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 19, scope: !7)
!41 = !DILocation(line: 43, column: 19, scope: !7)
!42 = !DILocation(line: 44, column: 20, scope: !7)
!43 = !DILocation(line: 45, column: 20, scope: !7)
!44 = !DILocation(line: 47, column: 20, scope: !7)
!45 = !DILocation(line: 48, column: 25, scope: !7)
!46 = !DILocation(line: 48, column: 37, scope: !7)
!47 = !DILocation(line: 48, column: 4, scope: !7)
