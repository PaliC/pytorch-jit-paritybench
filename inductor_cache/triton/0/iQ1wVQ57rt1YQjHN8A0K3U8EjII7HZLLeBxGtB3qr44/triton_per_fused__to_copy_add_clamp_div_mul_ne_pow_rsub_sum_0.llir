; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__to_copy_add_clamp_div_mul_ne_pow_rsub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !11
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #3, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !12
  %17 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !13
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !14
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !14
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !14
  %23 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !12
  %24 = insertelement <2 x i32> %23, i32 %14, i64 1, !dbg !12
  %25 = bitcast <2 x i32> %24 to <2 x float>, !dbg !12
  %26 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !14
  %27 = insertelement <2 x i32> %26, i32 %20, i64 1, !dbg !14
  %28 = bitcast <2 x i32> %27 to <2 x float>, !dbg !14
  %29 = fcmp une <2 x float> %25, splat (float 2.550000e+02), !dbg !15
  %30 = uitofp <2 x i1> %29 to <2 x float>, !dbg !16
  %31 = fmul <2 x float> %25, %30, !dbg !17
  %32 = fsub <2 x float> splat (float 1.000000e+00), %31, !dbg !18
  %33 = fmul <2 x float> %28, %28, !dbg !19
  %34 = fmul <2 x float> %33, %32, !dbg !20
  %35 = fmul <2 x float> %34, %30, !dbg !21
  %36 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !12
  %37 = insertelement <2 x i32> %36, i32 %15, i64 1, !dbg !12
  %38 = bitcast <2 x i32> %37 to <2 x float>, !dbg !12
  %39 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !14
  %40 = insertelement <2 x i32> %39, i32 %21, i64 1, !dbg !14
  %41 = bitcast <2 x i32> %40 to <2 x float>, !dbg !14
  %42 = fcmp une <2 x float> %38, splat (float 2.550000e+02), !dbg !15
  %43 = uitofp <2 x i1> %42 to <2 x float>, !dbg !16
  %44 = fmul <2 x float> %38, %43, !dbg !17
  %45 = fsub <2 x float> splat (float 1.000000e+00), %44, !dbg !18
  %46 = fmul <2 x float> %41, %41, !dbg !19
  %47 = fmul <2 x float> %46, %45, !dbg !20
  %48 = fmul <2 x float> %47, %43, !dbg !21
  %shift = shufflevector <2 x float> %35, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %49 = fadd <2 x float> %35, %shift, !dbg !22
  %shift4 = shufflevector <2 x float> %48, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %50 = fadd <2 x float> %shift4, %49, !dbg !22
  %51 = fadd <2 x float> %48, %50, !dbg !22
  %52 = extractelement <2 x float> %51, i64 0, !dbg !22
  %53 = bitcast float %52 to i32, !dbg !27
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 16, i32 31), !dbg !27
  %55 = bitcast i32 %54 to float, !dbg !27
  %56 = fadd float %52, %55, !dbg !22
  %57 = bitcast float %56 to i32, !dbg !27
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 8, i32 31), !dbg !27
  %59 = bitcast i32 %58 to float, !dbg !27
  %60 = fadd float %56, %59, !dbg !22
  %61 = bitcast float %60 to i32, !dbg !27
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 4, i32 31), !dbg !27
  %63 = bitcast i32 %62 to float, !dbg !27
  %64 = fadd float %60, %63, !dbg !22
  %65 = bitcast float %64 to i32, !dbg !27
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 2, i32 31), !dbg !27
  %67 = bitcast i32 %66 to float, !dbg !27
  %68 = fadd float %64, %67, !dbg !22
  %69 = bitcast float %68 to i32, !dbg !27
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 1, i32 31), !dbg !27
  %71 = bitcast i32 %70 to float, !dbg !27
  %72 = fadd float %68, %71, !dbg !22
  %73 = icmp eq i32 %6, 0, !dbg !27
  %74 = and i32 %7, 1, !dbg !27
  %75 = zext nneg i32 %74 to i64, !dbg !27
  %76 = getelementptr float, ptr addrspace(3) @global_smem, i64 %75, !dbg !27
  %77 = bitcast float %72 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 %73) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %78 = icmp slt i32 %5, 2, !dbg !27
  %79 = sext i32 %5 to i64, !dbg !27
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i64 %79, !dbg !27
  %81 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %80, i1 %78) #3, !dbg !27
  %82 = bitcast i32 %81 to float, !dbg !27
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 1, i32 31), !dbg !27
  %84 = bitcast i32 %83 to float, !dbg !27
  %85 = fadd float %82, %84, !dbg !22
  %86 = and i32 %5, 1, !dbg !27
  %87 = icmp eq i32 %86, 0, !dbg !27
  %88 = and i1 %78, %87, !dbg !27
  %89 = bitcast float %85 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %89, i1 %88) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %90 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %91 = fadd float %90, 0.000000e+00, !dbg !28
  %92 = fsub <2 x float> splat (float 2.000000e+00), %28, !dbg !32
  %93 = fcmp ole <2 x float> %92, zeroinitializer, !dbg !33
  %94 = select <2 x i1> %93, <2 x float> zeroinitializer, <2 x float> %92, !dbg !33
  %95 = fmul <2 x float> %94, %94, !dbg !35
  %96 = fmul <2 x float> %31, %95, !dbg !36
  %97 = fsub <2 x float> splat (float 2.000000e+00), %41, !dbg !32
  %98 = fcmp ole <2 x float> %97, zeroinitializer, !dbg !33
  %99 = select <2 x i1> %98, <2 x float> zeroinitializer, <2 x float> %97, !dbg !33
  %100 = fmul <2 x float> %99, %99, !dbg !35
  %101 = fmul <2 x float> %44, %100, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %shift5 = shufflevector <2 x float> %96, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !39
  %102 = fadd <2 x float> %96, %shift5, !dbg !39
  %shift6 = shufflevector <2 x float> %101, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !39
  %103 = fadd <2 x float> %shift6, %102, !dbg !39
  %104 = fadd <2 x float> %101, %103, !dbg !39
  %105 = extractelement <2 x float> %104, i64 0, !dbg !39
  %106 = bitcast float %105 to i32, !dbg !37
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 16, i32 31), !dbg !37
  %108 = bitcast i32 %107 to float, !dbg !37
  %109 = fadd float %105, %108, !dbg !39
  %110 = bitcast float %109 to i32, !dbg !37
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 8, i32 31), !dbg !37
  %112 = bitcast i32 %111 to float, !dbg !37
  %113 = fadd float %109, %112, !dbg !39
  %114 = bitcast float %113 to i32, !dbg !37
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 4, i32 31), !dbg !37
  %116 = bitcast i32 %115 to float, !dbg !37
  %117 = fadd float %113, %116, !dbg !39
  %118 = bitcast float %117 to i32, !dbg !37
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 2, i32 31), !dbg !37
  %120 = bitcast i32 %119 to float, !dbg !37
  %121 = fadd float %117, %120, !dbg !39
  %122 = bitcast float %121 to i32, !dbg !37
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 1, i32 31), !dbg !37
  %124 = bitcast i32 %123 to float, !dbg !37
  %125 = fadd float %121, %124, !dbg !39
  %126 = bitcast float %125 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %126, i1 %73) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %127 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %80, i1 %78) #3, !dbg !37
  %128 = bitcast i32 %127 to float, !dbg !37
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 1, i32 31), !dbg !37
  %130 = bitcast i32 %129 to float, !dbg !37
  %131 = fadd float %128, %130, !dbg !39
  %132 = bitcast float %131 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %132, i1 %88) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %133 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !37
  %134 = fadd float %133, 0.000000e+00, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %shift7 = shufflevector <2 x float> %32, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %135 = fadd <2 x float> %32, %shift7, !dbg !44
  %shift8 = shufflevector <2 x float> %45, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %136 = fadd <2 x float> %shift8, %135, !dbg !44
  %137 = fadd <2 x float> %45, %136, !dbg !44
  %138 = extractelement <2 x float> %137, i64 0, !dbg !44
  %139 = bitcast float %138 to i32, !dbg !42
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 16, i32 31), !dbg !42
  %141 = bitcast i32 %140 to float, !dbg !42
  %142 = fadd float %138, %141, !dbg !44
  %143 = bitcast float %142 to i32, !dbg !42
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 8, i32 31), !dbg !42
  %145 = bitcast i32 %144 to float, !dbg !42
  %146 = fadd float %142, %145, !dbg !44
  %147 = bitcast float %146 to i32, !dbg !42
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 4, i32 31), !dbg !42
  %149 = bitcast i32 %148 to float, !dbg !42
  %150 = fadd float %146, %149, !dbg !44
  %151 = bitcast float %150 to i32, !dbg !42
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 2, i32 31), !dbg !42
  %153 = bitcast i32 %152 to float, !dbg !42
  %154 = fadd float %150, %153, !dbg !44
  %155 = bitcast float %154 to i32, !dbg !42
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 1, i32 31), !dbg !42
  %157 = bitcast i32 %156 to float, !dbg !42
  %158 = fadd float %154, %157, !dbg !44
  %159 = bitcast float %158 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %159, i1 %73) #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %160 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %80, i1 %78) #3, !dbg !42
  %161 = bitcast i32 %160 to float, !dbg !42
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 1, i32 31), !dbg !42
  %163 = bitcast i32 %162 to float, !dbg !42
  %164 = fadd float %161, %163, !dbg !44
  %165 = bitcast float %164 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %165, i1 %88) #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %166 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !42
  %167 = fadd float %166, 0.000000e+00, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %shift9 = shufflevector <2 x float> %31, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %168 = fadd <2 x float> %31, %shift9, !dbg !49
  %shift10 = shufflevector <2 x float> %44, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %169 = fadd <2 x float> %shift10, %168, !dbg !49
  %170 = fadd <2 x float> %44, %169, !dbg !49
  %171 = extractelement <2 x float> %170, i64 0, !dbg !49
  %172 = bitcast float %171 to i32, !dbg !47
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 16, i32 31), !dbg !47
  %174 = bitcast i32 %173 to float, !dbg !47
  %175 = fadd float %171, %174, !dbg !49
  %176 = bitcast float %175 to i32, !dbg !47
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 8, i32 31), !dbg !47
  %178 = bitcast i32 %177 to float, !dbg !47
  %179 = fadd float %175, %178, !dbg !49
  %180 = bitcast float %179 to i32, !dbg !47
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 4, i32 31), !dbg !47
  %182 = bitcast i32 %181 to float, !dbg !47
  %183 = fadd float %179, %182, !dbg !49
  %184 = bitcast float %183 to i32, !dbg !47
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 2, i32 31), !dbg !47
  %186 = bitcast i32 %185 to float, !dbg !47
  %187 = fadd float %183, %186, !dbg !49
  %188 = bitcast float %187 to i32, !dbg !47
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 1, i32 31), !dbg !47
  %190 = bitcast i32 %189 to float, !dbg !47
  %191 = fadd float %187, %190, !dbg !49
  %192 = bitcast float %191 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %192, i1 %73) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %193 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %80, i1 %78) #3, !dbg !47
  %194 = bitcast i32 %193 to float, !dbg !47
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 1, i32 31), !dbg !47
  %196 = bitcast i32 %195 to float, !dbg !47
  %197 = fadd float %194, %196, !dbg !49
  %198 = bitcast float %197 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %198, i1 %88) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %199 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !47
  %200 = fadd float %199, 0.000000e+00, !dbg !50
  %201 = fadd float %167, 2.550000e+02, !dbg !52
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float %201) #3, !dbg !53
  %203 = fadd float %200, 2.550000e+02, !dbg !54
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float %203) #3, !dbg !55
  %205 = fadd float %202, %204, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %urem = and i32 %5, 63, !dbg !58
  %206 = icmp eq i32 %urem, 0, !dbg !58
  %207 = bitcast float %205 to i32, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %207, ptr addrspace(1) %0, i1 %206) #3, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3vplviwzsx4txj2co5kafvjrsmcfntcr2shhziky6snzt2gy4av.py", directory: "inductor_cache/3v")
!4 = !{ptr @triton_per_fused__to_copy_add_clamp_div_mul_ne_pow_rsub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__to_copy_add_clamp_div_mul_ne_pow_rsub_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__to_copy_add_clamp_div_mul_ne_pow_rsub_sum_0", linkageName: "triton_per_fused__to_copy_add_clamp_div_mul_ne_pow_rsub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 34, column: 19, scope: !7)
!16 = !DILocation(line: 35, column: 19, scope: !7)
!17 = !DILocation(line: 36, column: 18, scope: !7)
!18 = !DILocation(line: 38, column: 18, scope: !7)
!19 = !DILocation(line: 39, column: 18, scope: !7)
!20 = !DILocation(line: 40, column: 18, scope: !7)
!21 = !DILocation(line: 41, column: 19, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 43, column: 59, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !26)
!28 = !DILocation(line: 73, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 43, column: 45, scope: !7)
!32 = !DILocation(line: 45, column: 20, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !34)
!34 = !DILocation(line: 47, column: 42, scope: !7)
!35 = !DILocation(line: 48, column: 20, scope: !7)
!36 = !DILocation(line: 49, column: 19, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !38)
!38 = !DILocation(line: 51, column: 59, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !38)
!40 = !DILocation(line: 73, column: 15, scope: !29, inlinedAt: !41)
!41 = !DILocation(line: 51, column: 45, scope: !7)
!42 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !43)
!43 = !DILocation(line: 53, column: 59, scope: !7)
!44 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !43)
!45 = !DILocation(line: 73, column: 15, scope: !29, inlinedAt: !46)
!46 = !DILocation(line: 53, column: 45, scope: !7)
!47 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !48)
!48 = !DILocation(line: 55, column: 59, scope: !7)
!49 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !48)
!50 = !DILocation(line: 73, column: 15, scope: !29, inlinedAt: !51)
!51 = !DILocation(line: 55, column: 45, scope: !7)
!52 = !DILocation(line: 56, column: 20, scope: !7)
!53 = !DILocation(line: 57, column: 20, scope: !7)
!54 = !DILocation(line: 58, column: 20, scope: !7)
!55 = !DILocation(line: 59, column: 20, scope: !7)
!56 = !DILocation(line: 60, column: 20, scope: !7)
!57 = !DILocation(line: 62, column: 4, scope: !7)
!58 = !DILocation(line: 63, column: 63, scope: !7)
!59 = !DILocation(line: 63, column: 4, scope: !7)
