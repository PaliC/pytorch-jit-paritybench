; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_57(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %14, 16, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %17 = shl i32 %16, 8, !dbg !16
  %18 = shl i32 %8, 4, !dbg !17
  %19 = and i32 %18, 240, !dbg !17
  %20 = lshr i32 %8, 2, !dbg !17
  %21 = and i32 %20, 63, !dbg !17
  %22 = or disjoint i32 %17, %19, !dbg !18
  %23 = or disjoint i32 %22, 4, !dbg !18
  %24 = or disjoint i32 %22, 8, !dbg !18
  %25 = or disjoint i32 %22, 12, !dbg !18
  %26 = or disjoint i32 %17, %21, !dbg !18
  %27 = or disjoint i32 %26, 64, !dbg !18
  %28 = or disjoint i32 %26, 128, !dbg !18
  %29 = or disjoint i32 %26, 192, !dbg !18
  %30 = icmp slt i32 %26, 608, !dbg !19
  %31 = icmp slt i32 %27, 608, !dbg !19
  %32 = icmp slt i32 %28, 608, !dbg !19
  %33 = icmp slt i32 %29, 608, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %34 = sdiv i32 %.frozen, 2, !dbg !20
  %35 = srem i32 %34, 2, !dbg !21
  %36 = mul i32 %34, 2, !dbg !22
  %.decomposed = sub i32 %.frozen, %36, !dbg !22
  %37 = ashr exact i32 %14, 2, !dbg !23
  %38 = shl nsw i32 %35, 1, !dbg !24
  %39 = icmp sgt i32 %35, -1, !dbg !25
  %40 = shl nsw i32 %.decomposed, 1, !dbg !26
  %41 = or i32 %35, %.decomposed, !dbg !27
  %42 = icmp sgt i32 %41, -1, !dbg !27
  %43 = mul nsw i32 %.decomposed, 1216, !dbg !28
  %44 = mul i32 %34, 4864, !dbg !29
  %45 = add i32 %44, %43, !dbg !30
  %46 = add i32 %45, %22, !dbg !31
  %47 = add i32 %45, %23, !dbg !31
  %48 = add i32 %45, %24, !dbg !31
  %49 = add i32 %45, %25, !dbg !31
  %50 = sext i32 %46 to i64, !dbg !32
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !32
  %52 = sext i32 %47 to i64, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !32
  %54 = sext i32 %48 to i64, !dbg !32
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !32
  %56 = sext i32 %49 to i64, !dbg !32
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !32
  %58 = add i32 %45, 608, !dbg !33
  %59 = add i32 %58, %22, !dbg !34
  %60 = add i32 %58, %23, !dbg !34
  %61 = add i32 %58, %24, !dbg !34
  %62 = add i32 %58, %25, !dbg !34
  %63 = sext i32 %59 to i64, !dbg !35
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !35
  %65 = sext i32 %60 to i64, !dbg !35
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !35
  %67 = sext i32 %61 to i64, !dbg !35
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !35
  %69 = sext i32 %62 to i64, !dbg !35
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !35
  %71 = add nsw i32 %40, 2, !dbg !36
  %72 = icmp samesign ult i32 %71, 4, !dbg !37
  %73 = and i1 %39, %72, !dbg !38
  %74 = add i32 %45, 1216, !dbg !39
  %75 = add i32 %74, %22, !dbg !40
  %76 = add i32 %74, %23, !dbg !40
  %77 = add i32 %74, %24, !dbg !40
  %78 = add i32 %74, %25, !dbg !40
  %79 = sext i32 %75 to i64, !dbg !41
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !41
  %81 = sext i32 %76 to i64, !dbg !41
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !41
  %83 = sext i32 %77 to i64, !dbg !41
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !41
  %85 = sext i32 %78 to i64, !dbg !41
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !41
  %87 = add i32 %45, 2432, !dbg !42
  %88 = add i32 %87, %22, !dbg !43
  %89 = add i32 %87, %23, !dbg !43
  %90 = add i32 %87, %24, !dbg !43
  %91 = add i32 %87, %25, !dbg !43
  %92 = sext i32 %88 to i64, !dbg !44
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !44
  %94 = sext i32 %89 to i64, !dbg !44
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !44
  %96 = sext i32 %90 to i64, !dbg !44
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !44
  %98 = sext i32 %91 to i64, !dbg !44
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !44
  %100 = add i32 %45, 3040, !dbg !45
  %101 = add i32 %100, %22, !dbg !46
  %102 = add i32 %100, %23, !dbg !46
  %103 = add i32 %100, %24, !dbg !46
  %104 = add i32 %100, %25, !dbg !46
  %105 = sext i32 %101 to i64, !dbg !47
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !47
  %107 = sext i32 %102 to i64, !dbg !47
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !47
  %109 = sext i32 %103 to i64, !dbg !47
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !47
  %111 = sext i32 %104 to i64, !dbg !47
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !47
  %113 = add i32 %45, 3648, !dbg !48
  %114 = add i32 %113, %22, !dbg !49
  %115 = add i32 %113, %23, !dbg !49
  %116 = add i32 %113, %24, !dbg !49
  %117 = add i32 %113, %25, !dbg !49
  %118 = sext i32 %114 to i64, !dbg !50
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !50
  %120 = sext i32 %115 to i64, !dbg !50
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !50
  %122 = sext i32 %116 to i64, !dbg !50
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !50
  %124 = sext i32 %117 to i64, !dbg !50
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !50
  %126 = add nsw i32 %38, 2, !dbg !51
  %127 = insertelement <4 x i32> <i32 poison, i32 poison, i32 poison, i32 -1>, i32 %22, i64 0, !dbg !19
  %128 = insertelement <4 x i32> %127, i32 %13, i64 1, !dbg !19
  %129 = insertelement <4 x i32> %128, i32 %126, i64 2, !dbg !19
  %130 = insertelement <4 x i32> <i32 608, i32 16, i32 4, i32 poison>, i32 %.decomposed, i64 3, !dbg !19
  %131 = icmp slt <4 x i32> %129, %130, !dbg !19
  %132 = icmp samesign ult <4 x i32> %129, %130, !dbg !19
  %133 = shufflevector <4 x i1> %131, <4 x i1> %132, <4 x i32> <i32 0, i32 1, i32 6, i32 3>, !dbg !19
  %134 = extractelement <4 x i1> %131, i64 0, !dbg !52
  %135 = and i1 %134, %42, !dbg !53
  %136 = extractelement <4 x i1> %131, i64 1, !dbg !52
  %137 = and i1 %136, %135, !dbg !54
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137) #2, !dbg !55
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !55
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !55
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !55
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !55
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137) #2, !dbg !55
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !55
  %145 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !55
  %146 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !55
  %147 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !55
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137) #2, !dbg !55
  %149 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !55
  %150 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !55
  %151 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !55
  %152 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !55
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137) #2, !dbg !55
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !55
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !55
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !55
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !55
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %64, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137) #2, !dbg !56
  %159 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !56
  %160 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !56
  %161 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !56
  %162 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !56
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137) #2, !dbg !56
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !56
  %165 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !56
  %166 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !56
  %167 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !56
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137) #2, !dbg !56
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !56
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !56
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !56
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !56
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137) #2, !dbg !56
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !56
  %175 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !56
  %176 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !56
  %177 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !56
  %178 = and i1 %134, %73, !dbg !57
  %179 = and i1 %136, %178, !dbg !58
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179) #2, !dbg !59
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !59
  %182 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !59
  %183 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !59
  %184 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !59
  %185 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179) #2, !dbg !59
  %186 = extractvalue { i32, i32, i32, i32 } %185, 0, !dbg !59
  %187 = extractvalue { i32, i32, i32, i32 } %185, 1, !dbg !59
  %188 = extractvalue { i32, i32, i32, i32 } %185, 2, !dbg !59
  %189 = extractvalue { i32, i32, i32, i32 } %185, 3, !dbg !59
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %84, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179) #2, !dbg !59
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !59
  %192 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !59
  %193 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !59
  %194 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !59
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %86, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179) #2, !dbg !59
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !59
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !59
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !59
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !59
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %93, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137) #2, !dbg !60
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !60
  %202 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !60
  %203 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !60
  %204 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !60
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %95, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137) #2, !dbg !60
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !60
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !60
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !60
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !60
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %97, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137) #2, !dbg !60
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !60
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !60
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !60
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !60
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %99, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137) #2, !dbg !60
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !60
  %217 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !60
  %218 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !60
  %219 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !60
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %106, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137) #2, !dbg !61
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !61
  %222 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !61
  %223 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !61
  %224 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !61
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %108, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137) #2, !dbg !61
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !61
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !61
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !61
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !61
  %230 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %110, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137) #2, !dbg !61
  %231 = extractvalue { i32, i32, i32, i32 } %230, 0, !dbg !61
  %232 = extractvalue { i32, i32, i32, i32 } %230, 1, !dbg !61
  %233 = extractvalue { i32, i32, i32, i32 } %230, 2, !dbg !61
  %234 = extractvalue { i32, i32, i32, i32 } %230, 3, !dbg !61
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %112, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137) #2, !dbg !61
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !61
  %237 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !61
  %238 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !61
  %239 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !61
  %240 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %119, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179) #2, !dbg !62
  %241 = extractvalue { i32, i32, i32, i32 } %240, 0, !dbg !62
  %242 = extractvalue { i32, i32, i32, i32 } %240, 1, !dbg !62
  %243 = extractvalue { i32, i32, i32, i32 } %240, 2, !dbg !62
  %244 = extractvalue { i32, i32, i32, i32 } %240, 3, !dbg !62
  %245 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %121, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179) #2, !dbg !62
  %246 = extractvalue { i32, i32, i32, i32 } %245, 0, !dbg !62
  %247 = extractvalue { i32, i32, i32, i32 } %245, 1, !dbg !62
  %248 = extractvalue { i32, i32, i32, i32 } %245, 2, !dbg !62
  %249 = extractvalue { i32, i32, i32, i32 } %245, 3, !dbg !62
  %250 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %123, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179) #2, !dbg !62
  %251 = extractvalue { i32, i32, i32, i32 } %250, 0, !dbg !62
  %252 = extractvalue { i32, i32, i32, i32 } %250, 1, !dbg !62
  %253 = extractvalue { i32, i32, i32, i32 } %250, 2, !dbg !62
  %254 = extractvalue { i32, i32, i32, i32 } %250, 3, !dbg !62
  %255 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %125, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179) #2, !dbg !62
  %256 = extractvalue { i32, i32, i32, i32 } %255, 0, !dbg !62
  %257 = extractvalue { i32, i32, i32, i32 } %255, 1, !dbg !62
  %258 = extractvalue { i32, i32, i32, i32 } %255, 2, !dbg !62
  %259 = extractvalue { i32, i32, i32, i32 } %255, 3, !dbg !62
  %260 = add i32 %45, 4864, !dbg !63
  %261 = add i32 %260, %22, !dbg !64
  %262 = add i32 %260, %23, !dbg !64
  %263 = add i32 %260, %24, !dbg !64
  %264 = add i32 %260, %25, !dbg !64
  %265 = sext i32 %261 to i64, !dbg !65
  %266 = getelementptr float, ptr addrspace(1) %0, i64 %265, !dbg !65
  %267 = sext i32 %262 to i64, !dbg !65
  %268 = getelementptr float, ptr addrspace(1) %0, i64 %267, !dbg !65
  %269 = sext i32 %263 to i64, !dbg !65
  %270 = getelementptr float, ptr addrspace(1) %0, i64 %269, !dbg !65
  %271 = sext i32 %264 to i64, !dbg !65
  %272 = getelementptr float, ptr addrspace(1) %0, i64 %271, !dbg !65
  %273 = bitcast <4 x i1> %133 to i4, !dbg !66
  %274 = icmp eq i4 %273, -1, !dbg !66
  %275 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %266, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274) #2, !dbg !67
  %276 = extractvalue { i32, i32, i32, i32 } %275, 0, !dbg !67
  %277 = extractvalue { i32, i32, i32, i32 } %275, 1, !dbg !67
  %278 = extractvalue { i32, i32, i32, i32 } %275, 2, !dbg !67
  %279 = extractvalue { i32, i32, i32, i32 } %275, 3, !dbg !67
  %280 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %268, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274) #2, !dbg !67
  %281 = extractvalue { i32, i32, i32, i32 } %280, 0, !dbg !67
  %282 = extractvalue { i32, i32, i32, i32 } %280, 1, !dbg !67
  %283 = extractvalue { i32, i32, i32, i32 } %280, 2, !dbg !67
  %284 = extractvalue { i32, i32, i32, i32 } %280, 3, !dbg !67
  %285 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %270, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274) #2, !dbg !67
  %286 = extractvalue { i32, i32, i32, i32 } %285, 0, !dbg !67
  %287 = extractvalue { i32, i32, i32, i32 } %285, 1, !dbg !67
  %288 = extractvalue { i32, i32, i32, i32 } %285, 2, !dbg !67
  %289 = extractvalue { i32, i32, i32, i32 } %285, 3, !dbg !67
  %290 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %272, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274) #2, !dbg !67
  %291 = extractvalue { i32, i32, i32, i32 } %290, 0, !dbg !67
  %292 = extractvalue { i32, i32, i32, i32 } %290, 1, !dbg !67
  %293 = extractvalue { i32, i32, i32, i32 } %290, 2, !dbg !67
  %294 = extractvalue { i32, i32, i32, i32 } %290, 3, !dbg !67
  %295 = add i32 %45, 5472, !dbg !68
  %296 = add i32 %295, %22, !dbg !69
  %297 = add i32 %295, %23, !dbg !69
  %298 = add i32 %295, %24, !dbg !69
  %299 = add i32 %295, %25, !dbg !69
  %300 = sext i32 %296 to i64, !dbg !70
  %301 = getelementptr float, ptr addrspace(1) %0, i64 %300, !dbg !70
  %302 = sext i32 %297 to i64, !dbg !70
  %303 = getelementptr float, ptr addrspace(1) %0, i64 %302, !dbg !70
  %304 = sext i32 %298 to i64, !dbg !70
  %305 = getelementptr float, ptr addrspace(1) %0, i64 %304, !dbg !70
  %306 = sext i32 %299 to i64, !dbg !70
  %307 = getelementptr float, ptr addrspace(1) %0, i64 %306, !dbg !70
  %308 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %301, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274) #2, !dbg !71
  %309 = extractvalue { i32, i32, i32, i32 } %308, 0, !dbg !71
  %310 = extractvalue { i32, i32, i32, i32 } %308, 1, !dbg !71
  %311 = extractvalue { i32, i32, i32, i32 } %308, 2, !dbg !71
  %312 = extractvalue { i32, i32, i32, i32 } %308, 3, !dbg !71
  %313 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %303, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274) #2, !dbg !71
  %314 = extractvalue { i32, i32, i32, i32 } %313, 0, !dbg !71
  %315 = extractvalue { i32, i32, i32, i32 } %313, 1, !dbg !71
  %316 = extractvalue { i32, i32, i32, i32 } %313, 2, !dbg !71
  %317 = extractvalue { i32, i32, i32, i32 } %313, 3, !dbg !71
  %318 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %305, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274) #2, !dbg !71
  %319 = extractvalue { i32, i32, i32, i32 } %318, 0, !dbg !71
  %320 = extractvalue { i32, i32, i32, i32 } %318, 1, !dbg !71
  %321 = extractvalue { i32, i32, i32, i32 } %318, 2, !dbg !71
  %322 = extractvalue { i32, i32, i32, i32 } %318, 3, !dbg !71
  %323 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %307, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274, i32 -8388608, i1 %274) #2, !dbg !71
  %324 = extractvalue { i32, i32, i32, i32 } %323, 0, !dbg !71
  %325 = extractvalue { i32, i32, i32, i32 } %323, 1, !dbg !71
  %326 = extractvalue { i32, i32, i32, i32 } %323, 2, !dbg !71
  %327 = extractvalue { i32, i32, i32, i32 } %323, 3, !dbg !71
  %328 = or i32 %126, %71, !dbg !72
  %329 = icmp samesign ult i32 %328, 4, !dbg !72
  %330 = add i32 %45, 6080, !dbg !73
  %331 = add i32 %330, %22, !dbg !74
  %332 = add i32 %330, %23, !dbg !74
  %333 = add i32 %330, %24, !dbg !74
  %334 = add i32 %330, %25, !dbg !74
  %335 = sext i32 %331 to i64, !dbg !75
  %336 = getelementptr float, ptr addrspace(1) %0, i64 %335, !dbg !75
  %337 = sext i32 %332 to i64, !dbg !75
  %338 = getelementptr float, ptr addrspace(1) %0, i64 %337, !dbg !75
  %339 = sext i32 %333 to i64, !dbg !75
  %340 = getelementptr float, ptr addrspace(1) %0, i64 %339, !dbg !75
  %341 = sext i32 %334 to i64, !dbg !75
  %342 = getelementptr float, ptr addrspace(1) %0, i64 %341, !dbg !75
  %343 = and i1 %134, %329, !dbg !76
  %344 = and i1 %136, %343, !dbg !77
  %345 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %336, i1 %344, i32 -8388608, i1 %344, i32 -8388608, i1 %344, i32 -8388608, i1 %344, i32 -8388608, i1 %344) #2, !dbg !78
  %346 = extractvalue { i32, i32, i32, i32 } %345, 0, !dbg !78
  %347 = extractvalue { i32, i32, i32, i32 } %345, 1, !dbg !78
  %348 = extractvalue { i32, i32, i32, i32 } %345, 2, !dbg !78
  %349 = extractvalue { i32, i32, i32, i32 } %345, 3, !dbg !78
  %350 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %338, i1 %344, i32 -8388608, i1 %344, i32 -8388608, i1 %344, i32 -8388608, i1 %344, i32 -8388608, i1 %344) #2, !dbg !78
  %351 = extractvalue { i32, i32, i32, i32 } %350, 0, !dbg !78
  %352 = extractvalue { i32, i32, i32, i32 } %350, 1, !dbg !78
  %353 = extractvalue { i32, i32, i32, i32 } %350, 2, !dbg !78
  %354 = extractvalue { i32, i32, i32, i32 } %350, 3, !dbg !78
  %355 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %340, i1 %344, i32 -8388608, i1 %344, i32 -8388608, i1 %344, i32 -8388608, i1 %344, i32 -8388608, i1 %344) #2, !dbg !78
  %356 = extractvalue { i32, i32, i32, i32 } %355, 0, !dbg !78
  %357 = extractvalue { i32, i32, i32, i32 } %355, 1, !dbg !78
  %358 = extractvalue { i32, i32, i32, i32 } %355, 2, !dbg !78
  %359 = extractvalue { i32, i32, i32, i32 } %355, 3, !dbg !78
  %360 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %342, i1 %344, i32 -8388608, i1 %344, i32 -8388608, i1 %344, i32 -8388608, i1 %344, i32 -8388608, i1 %344) #2, !dbg !78
  %361 = extractvalue { i32, i32, i32, i32 } %360, 0, !dbg !78
  %362 = extractvalue { i32, i32, i32, i32 } %360, 1, !dbg !78
  %363 = extractvalue { i32, i32, i32, i32 } %360, 2, !dbg !78
  %364 = extractvalue { i32, i32, i32, i32 } %360, 3, !dbg !78
  %365 = insertelement <4 x i32> poison, i32 %139, i64 0, !dbg !55
  %366 = insertelement <4 x i32> %365, i32 %140, i64 1, !dbg !55
  %367 = insertelement <4 x i32> %366, i32 %141, i64 2, !dbg !55
  %368 = insertelement <4 x i32> %367, i32 %142, i64 3, !dbg !55
  %369 = bitcast <4 x i32> %368 to <4 x float>, !dbg !55
  %370 = insertelement <4 x i32> poison, i32 %159, i64 0, !dbg !56
  %371 = insertelement <4 x i32> %370, i32 %160, i64 1, !dbg !56
  %372 = insertelement <4 x i32> %371, i32 %161, i64 2, !dbg !56
  %373 = insertelement <4 x i32> %372, i32 %162, i64 3, !dbg !56
  %374 = bitcast <4 x i32> %373 to <4 x float>, !dbg !56
  %375 = fcmp ogt <4 x float> %374, %369, !dbg !79
  %376 = fcmp uno <4 x float> %374, zeroinitializer, !dbg !83
  %377 = or <4 x i1> %375, %376, !dbg !84
  %.v = select <4 x i1> %377, <4 x i32> %373, <4 x i32> %368, !dbg !85
  %378 = bitcast <4 x i32> %.v to <4 x float>, !dbg !85
  %379 = insertelement <4 x i32> poison, i32 %181, i64 0, !dbg !59
  %380 = insertelement <4 x i32> %379, i32 %182, i64 1, !dbg !59
  %381 = insertelement <4 x i32> %380, i32 %183, i64 2, !dbg !59
  %382 = insertelement <4 x i32> %381, i32 %184, i64 3, !dbg !59
  %383 = bitcast <4 x i32> %382 to <4 x float>, !dbg !59
  %384 = fcmp olt <4 x float> %378, %383, !dbg !86
  %385 = fcmp uno <4 x float> %383, zeroinitializer, !dbg !88
  %386 = or <4 x i1> %384, %385, !dbg !89
  %.v34 = select <4 x i1> %386, <4 x i32> %382, <4 x i32> %.v, !dbg !90
  %387 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !90
  %388 = insertelement <4 x i32> poison, i32 %201, i64 0, !dbg !60
  %389 = insertelement <4 x i32> %388, i32 %202, i64 1, !dbg !60
  %390 = insertelement <4 x i32> %389, i32 %203, i64 2, !dbg !60
  %391 = insertelement <4 x i32> %390, i32 %204, i64 3, !dbg !60
  %392 = bitcast <4 x i32> %391 to <4 x float>, !dbg !60
  %393 = fcmp olt <4 x float> %387, %392, !dbg !91
  %394 = fcmp uno <4 x float> %392, zeroinitializer, !dbg !93
  %395 = or <4 x i1> %393, %394, !dbg !94
  %.v35 = select <4 x i1> %395, <4 x i32> %391, <4 x i32> %.v34, !dbg !95
  %396 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !95
  %397 = insertelement <4 x i32> poison, i32 %221, i64 0, !dbg !61
  %398 = insertelement <4 x i32> %397, i32 %222, i64 1, !dbg !61
  %399 = insertelement <4 x i32> %398, i32 %223, i64 2, !dbg !61
  %400 = insertelement <4 x i32> %399, i32 %224, i64 3, !dbg !61
  %401 = bitcast <4 x i32> %400 to <4 x float>, !dbg !61
  %402 = fcmp olt <4 x float> %396, %401, !dbg !96
  %403 = fcmp uno <4 x float> %401, zeroinitializer, !dbg !98
  %404 = or <4 x i1> %402, %403, !dbg !99
  %.v36 = select <4 x i1> %404, <4 x i32> %400, <4 x i32> %.v35, !dbg !100
  %405 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !100
  %406 = insertelement <4 x i32> poison, i32 %241, i64 0, !dbg !62
  %407 = insertelement <4 x i32> %406, i32 %242, i64 1, !dbg !62
  %408 = insertelement <4 x i32> %407, i32 %243, i64 2, !dbg !62
  %409 = insertelement <4 x i32> %408, i32 %244, i64 3, !dbg !62
  %410 = bitcast <4 x i32> %409 to <4 x float>, !dbg !62
  %411 = fcmp olt <4 x float> %405, %410, !dbg !101
  %412 = fcmp uno <4 x float> %410, zeroinitializer, !dbg !103
  %413 = or <4 x i1> %411, %412, !dbg !104
  %.v37 = select <4 x i1> %413, <4 x i32> %409, <4 x i32> %.v36, !dbg !105
  %414 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !105
  %415 = insertelement <4 x i32> poison, i32 %276, i64 0, !dbg !67
  %416 = insertelement <4 x i32> %415, i32 %277, i64 1, !dbg !67
  %417 = insertelement <4 x i32> %416, i32 %278, i64 2, !dbg !67
  %418 = insertelement <4 x i32> %417, i32 %279, i64 3, !dbg !67
  %419 = bitcast <4 x i32> %418 to <4 x float>, !dbg !67
  %420 = fcmp olt <4 x float> %414, %419, !dbg !106
  %421 = fcmp uno <4 x float> %419, zeroinitializer, !dbg !108
  %422 = or <4 x i1> %420, %421, !dbg !109
  %.v38 = select <4 x i1> %422, <4 x i32> %418, <4 x i32> %.v37, !dbg !110
  %423 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !110
  %424 = insertelement <4 x i32> poison, i32 %309, i64 0, !dbg !71
  %425 = insertelement <4 x i32> %424, i32 %310, i64 1, !dbg !71
  %426 = insertelement <4 x i32> %425, i32 %311, i64 2, !dbg !71
  %427 = insertelement <4 x i32> %426, i32 %312, i64 3, !dbg !71
  %428 = bitcast <4 x i32> %427 to <4 x float>, !dbg !71
  %429 = fcmp olt <4 x float> %423, %428, !dbg !111
  %430 = fcmp uno <4 x float> %428, zeroinitializer, !dbg !113
  %431 = or <4 x i1> %429, %430, !dbg !114
  %.v39 = select <4 x i1> %431, <4 x i32> %427, <4 x i32> %.v38, !dbg !115
  %432 = bitcast <4 x i32> %.v39 to <4 x float>, !dbg !115
  %433 = insertelement <4 x i32> poison, i32 %346, i64 0, !dbg !78
  %434 = insertelement <4 x i32> %433, i32 %347, i64 1, !dbg !78
  %435 = insertelement <4 x i32> %434, i32 %348, i64 2, !dbg !78
  %436 = insertelement <4 x i32> %435, i32 %349, i64 3, !dbg !78
  %437 = bitcast <4 x i32> %436 to <4 x float>, !dbg !78
  %438 = fcmp olt <4 x float> %432, %437, !dbg !116
  %439 = bitcast i32 %346 to float, !dbg !118
  %440 = fcmp uno float %439, 0.000000e+00, !dbg !118
  %441 = bitcast i32 %347 to float, !dbg !118
  %442 = fcmp uno float %441, 0.000000e+00, !dbg !118
  %443 = bitcast i32 %348 to float, !dbg !118
  %444 = fcmp uno float %443, 0.000000e+00, !dbg !118
  %445 = bitcast i32 %349 to float, !dbg !118
  %446 = fcmp uno float %445, 0.000000e+00, !dbg !118
  %447 = extractelement <4 x i1> %438, i64 0, !dbg !119
  %448 = or i1 %447, %440, !dbg !119
  %449 = extractelement <4 x i1> %438, i64 1, !dbg !119
  %450 = or i1 %449, %442, !dbg !119
  %451 = extractelement <4 x i1> %438, i64 2, !dbg !119
  %452 = or i1 %451, %444, !dbg !119
  %453 = extractelement <4 x i1> %438, i64 3, !dbg !119
  %454 = or i1 %453, %446, !dbg !119
  %455 = zext <4 x i1> %375 to <4 x i8>, !dbg !120
  %456 = select <4 x i1> %384, <4 x i8> splat (i8 2), <4 x i8> %455, !dbg !121
  %457 = select <4 x i1> %393, <4 x i8> splat (i8 3), <4 x i8> %456, !dbg !122
  %458 = select <4 x i1> %402, <4 x i8> splat (i8 4), <4 x i8> %457, !dbg !123
  %459 = select <4 x i1> %411, <4 x i8> splat (i8 5), <4 x i8> %458, !dbg !124
  %460 = select <4 x i1> %420, <4 x i8> splat (i8 6), <4 x i8> %459, !dbg !125
  %461 = select <4 x i1> %429, <4 x i8> splat (i8 7), <4 x i8> %460, !dbg !126
  %462 = select <4 x i1> %438, <4 x i8> splat (i8 8), <4 x i8> %461, !dbg !127
  %463 = insertelement <4 x i32> poison, i32 %144, i64 0, !dbg !55
  %464 = insertelement <4 x i32> %463, i32 %145, i64 1, !dbg !55
  %465 = insertelement <4 x i32> %464, i32 %146, i64 2, !dbg !55
  %466 = insertelement <4 x i32> %465, i32 %147, i64 3, !dbg !55
  %467 = bitcast <4 x i32> %466 to <4 x float>, !dbg !55
  %468 = insertelement <4 x i32> poison, i32 %164, i64 0, !dbg !56
  %469 = insertelement <4 x i32> %468, i32 %165, i64 1, !dbg !56
  %470 = insertelement <4 x i32> %469, i32 %166, i64 2, !dbg !56
  %471 = insertelement <4 x i32> %470, i32 %167, i64 3, !dbg !56
  %472 = bitcast <4 x i32> %471 to <4 x float>, !dbg !56
  %473 = fcmp ogt <4 x float> %472, %467, !dbg !79
  %474 = fcmp uno <4 x float> %472, zeroinitializer, !dbg !83
  %475 = or <4 x i1> %473, %474, !dbg !84
  %.v40 = select <4 x i1> %475, <4 x i32> %471, <4 x i32> %466, !dbg !85
  %476 = bitcast <4 x i32> %.v40 to <4 x float>, !dbg !85
  %477 = insertelement <4 x i32> poison, i32 %186, i64 0, !dbg !59
  %478 = insertelement <4 x i32> %477, i32 %187, i64 1, !dbg !59
  %479 = insertelement <4 x i32> %478, i32 %188, i64 2, !dbg !59
  %480 = insertelement <4 x i32> %479, i32 %189, i64 3, !dbg !59
  %481 = bitcast <4 x i32> %480 to <4 x float>, !dbg !59
  %482 = fcmp olt <4 x float> %476, %481, !dbg !86
  %483 = fcmp uno <4 x float> %481, zeroinitializer, !dbg !88
  %484 = or <4 x i1> %482, %483, !dbg !89
  %.v41 = select <4 x i1> %484, <4 x i32> %480, <4 x i32> %.v40, !dbg !90
  %485 = bitcast <4 x i32> %.v41 to <4 x float>, !dbg !90
  %486 = insertelement <4 x i32> poison, i32 %206, i64 0, !dbg !60
  %487 = insertelement <4 x i32> %486, i32 %207, i64 1, !dbg !60
  %488 = insertelement <4 x i32> %487, i32 %208, i64 2, !dbg !60
  %489 = insertelement <4 x i32> %488, i32 %209, i64 3, !dbg !60
  %490 = bitcast <4 x i32> %489 to <4 x float>, !dbg !60
  %491 = fcmp olt <4 x float> %485, %490, !dbg !91
  %492 = fcmp uno <4 x float> %490, zeroinitializer, !dbg !93
  %493 = or <4 x i1> %491, %492, !dbg !94
  %.v42 = select <4 x i1> %493, <4 x i32> %489, <4 x i32> %.v41, !dbg !95
  %494 = bitcast <4 x i32> %.v42 to <4 x float>, !dbg !95
  %495 = insertelement <4 x i32> poison, i32 %226, i64 0, !dbg !61
  %496 = insertelement <4 x i32> %495, i32 %227, i64 1, !dbg !61
  %497 = insertelement <4 x i32> %496, i32 %228, i64 2, !dbg !61
  %498 = insertelement <4 x i32> %497, i32 %229, i64 3, !dbg !61
  %499 = bitcast <4 x i32> %498 to <4 x float>, !dbg !61
  %500 = fcmp olt <4 x float> %494, %499, !dbg !96
  %501 = fcmp uno <4 x float> %499, zeroinitializer, !dbg !98
  %502 = or <4 x i1> %500, %501, !dbg !99
  %.v43 = select <4 x i1> %502, <4 x i32> %498, <4 x i32> %.v42, !dbg !100
  %503 = bitcast <4 x i32> %.v43 to <4 x float>, !dbg !100
  %504 = insertelement <4 x i32> poison, i32 %246, i64 0, !dbg !62
  %505 = insertelement <4 x i32> %504, i32 %247, i64 1, !dbg !62
  %506 = insertelement <4 x i32> %505, i32 %248, i64 2, !dbg !62
  %507 = insertelement <4 x i32> %506, i32 %249, i64 3, !dbg !62
  %508 = bitcast <4 x i32> %507 to <4 x float>, !dbg !62
  %509 = fcmp olt <4 x float> %503, %508, !dbg !101
  %510 = fcmp uno <4 x float> %508, zeroinitializer, !dbg !103
  %511 = or <4 x i1> %509, %510, !dbg !104
  %.v44 = select <4 x i1> %511, <4 x i32> %507, <4 x i32> %.v43, !dbg !105
  %512 = bitcast <4 x i32> %.v44 to <4 x float>, !dbg !105
  %513 = insertelement <4 x i32> poison, i32 %281, i64 0, !dbg !67
  %514 = insertelement <4 x i32> %513, i32 %282, i64 1, !dbg !67
  %515 = insertelement <4 x i32> %514, i32 %283, i64 2, !dbg !67
  %516 = insertelement <4 x i32> %515, i32 %284, i64 3, !dbg !67
  %517 = bitcast <4 x i32> %516 to <4 x float>, !dbg !67
  %518 = fcmp olt <4 x float> %512, %517, !dbg !106
  %519 = fcmp uno <4 x float> %517, zeroinitializer, !dbg !108
  %520 = or <4 x i1> %518, %519, !dbg !109
  %.v45 = select <4 x i1> %520, <4 x i32> %516, <4 x i32> %.v44, !dbg !110
  %521 = bitcast <4 x i32> %.v45 to <4 x float>, !dbg !110
  %522 = insertelement <4 x i32> poison, i32 %314, i64 0, !dbg !71
  %523 = insertelement <4 x i32> %522, i32 %315, i64 1, !dbg !71
  %524 = insertelement <4 x i32> %523, i32 %316, i64 2, !dbg !71
  %525 = insertelement <4 x i32> %524, i32 %317, i64 3, !dbg !71
  %526 = bitcast <4 x i32> %525 to <4 x float>, !dbg !71
  %527 = fcmp olt <4 x float> %521, %526, !dbg !111
  %528 = fcmp uno <4 x float> %526, zeroinitializer, !dbg !113
  %529 = or <4 x i1> %527, %528, !dbg !114
  %.v46 = select <4 x i1> %529, <4 x i32> %525, <4 x i32> %.v45, !dbg !115
  %530 = bitcast <4 x i32> %.v46 to <4 x float>, !dbg !115
  %531 = insertelement <4 x i32> poison, i32 %351, i64 0, !dbg !78
  %532 = insertelement <4 x i32> %531, i32 %352, i64 1, !dbg !78
  %533 = insertelement <4 x i32> %532, i32 %353, i64 2, !dbg !78
  %534 = insertelement <4 x i32> %533, i32 %354, i64 3, !dbg !78
  %535 = bitcast <4 x i32> %534 to <4 x float>, !dbg !78
  %536 = fcmp olt <4 x float> %530, %535, !dbg !116
  %537 = bitcast i32 %351 to float, !dbg !118
  %538 = fcmp uno float %537, 0.000000e+00, !dbg !118
  %539 = bitcast i32 %352 to float, !dbg !118
  %540 = fcmp uno float %539, 0.000000e+00, !dbg !118
  %541 = bitcast i32 %353 to float, !dbg !118
  %542 = fcmp uno float %541, 0.000000e+00, !dbg !118
  %543 = bitcast i32 %354 to float, !dbg !118
  %544 = fcmp uno float %543, 0.000000e+00, !dbg !118
  %545 = extractelement <4 x i1> %536, i64 0, !dbg !119
  %546 = or i1 %545, %538, !dbg !119
  %547 = extractelement <4 x i1> %536, i64 1, !dbg !119
  %548 = or i1 %547, %540, !dbg !119
  %549 = extractelement <4 x i1> %536, i64 2, !dbg !119
  %550 = or i1 %549, %542, !dbg !119
  %551 = extractelement <4 x i1> %536, i64 3, !dbg !119
  %552 = or i1 %551, %544, !dbg !119
  %553 = zext <4 x i1> %473 to <4 x i8>, !dbg !120
  %554 = select <4 x i1> %482, <4 x i8> splat (i8 2), <4 x i8> %553, !dbg !121
  %555 = select <4 x i1> %491, <4 x i8> splat (i8 3), <4 x i8> %554, !dbg !122
  %556 = select <4 x i1> %500, <4 x i8> splat (i8 4), <4 x i8> %555, !dbg !123
  %557 = select <4 x i1> %509, <4 x i8> splat (i8 5), <4 x i8> %556, !dbg !124
  %558 = select <4 x i1> %518, <4 x i8> splat (i8 6), <4 x i8> %557, !dbg !125
  %559 = select <4 x i1> %527, <4 x i8> splat (i8 7), <4 x i8> %558, !dbg !126
  %560 = select <4 x i1> %536, <4 x i8> splat (i8 8), <4 x i8> %559, !dbg !127
  %561 = insertelement <4 x i32> poison, i32 %149, i64 0, !dbg !55
  %562 = insertelement <4 x i32> %561, i32 %150, i64 1, !dbg !55
  %563 = insertelement <4 x i32> %562, i32 %151, i64 2, !dbg !55
  %564 = insertelement <4 x i32> %563, i32 %152, i64 3, !dbg !55
  %565 = bitcast <4 x i32> %564 to <4 x float>, !dbg !55
  %566 = insertelement <4 x i32> poison, i32 %169, i64 0, !dbg !56
  %567 = insertelement <4 x i32> %566, i32 %170, i64 1, !dbg !56
  %568 = insertelement <4 x i32> %567, i32 %171, i64 2, !dbg !56
  %569 = insertelement <4 x i32> %568, i32 %172, i64 3, !dbg !56
  %570 = bitcast <4 x i32> %569 to <4 x float>, !dbg !56
  %571 = fcmp ogt <4 x float> %570, %565, !dbg !79
  %572 = fcmp uno <4 x float> %570, zeroinitializer, !dbg !83
  %573 = or <4 x i1> %571, %572, !dbg !84
  %.v47 = select <4 x i1> %573, <4 x i32> %569, <4 x i32> %564, !dbg !85
  %574 = bitcast <4 x i32> %.v47 to <4 x float>, !dbg !85
  %575 = insertelement <4 x i32> poison, i32 %191, i64 0, !dbg !59
  %576 = insertelement <4 x i32> %575, i32 %192, i64 1, !dbg !59
  %577 = insertelement <4 x i32> %576, i32 %193, i64 2, !dbg !59
  %578 = insertelement <4 x i32> %577, i32 %194, i64 3, !dbg !59
  %579 = bitcast <4 x i32> %578 to <4 x float>, !dbg !59
  %580 = fcmp olt <4 x float> %574, %579, !dbg !86
  %581 = fcmp uno <4 x float> %579, zeroinitializer, !dbg !88
  %582 = or <4 x i1> %580, %581, !dbg !89
  %.v48 = select <4 x i1> %582, <4 x i32> %578, <4 x i32> %.v47, !dbg !90
  %583 = bitcast <4 x i32> %.v48 to <4 x float>, !dbg !90
  %584 = insertelement <4 x i32> poison, i32 %211, i64 0, !dbg !60
  %585 = insertelement <4 x i32> %584, i32 %212, i64 1, !dbg !60
  %586 = insertelement <4 x i32> %585, i32 %213, i64 2, !dbg !60
  %587 = insertelement <4 x i32> %586, i32 %214, i64 3, !dbg !60
  %588 = bitcast <4 x i32> %587 to <4 x float>, !dbg !60
  %589 = fcmp olt <4 x float> %583, %588, !dbg !91
  %590 = fcmp uno <4 x float> %588, zeroinitializer, !dbg !93
  %591 = or <4 x i1> %589, %590, !dbg !94
  %.v49 = select <4 x i1> %591, <4 x i32> %587, <4 x i32> %.v48, !dbg !95
  %592 = bitcast <4 x i32> %.v49 to <4 x float>, !dbg !95
  %593 = insertelement <4 x i32> poison, i32 %231, i64 0, !dbg !61
  %594 = insertelement <4 x i32> %593, i32 %232, i64 1, !dbg !61
  %595 = insertelement <4 x i32> %594, i32 %233, i64 2, !dbg !61
  %596 = insertelement <4 x i32> %595, i32 %234, i64 3, !dbg !61
  %597 = bitcast <4 x i32> %596 to <4 x float>, !dbg !61
  %598 = fcmp olt <4 x float> %592, %597, !dbg !96
  %599 = fcmp uno <4 x float> %597, zeroinitializer, !dbg !98
  %600 = or <4 x i1> %598, %599, !dbg !99
  %.v50 = select <4 x i1> %600, <4 x i32> %596, <4 x i32> %.v49, !dbg !100
  %601 = bitcast <4 x i32> %.v50 to <4 x float>, !dbg !100
  %602 = insertelement <4 x i32> poison, i32 %251, i64 0, !dbg !62
  %603 = insertelement <4 x i32> %602, i32 %252, i64 1, !dbg !62
  %604 = insertelement <4 x i32> %603, i32 %253, i64 2, !dbg !62
  %605 = insertelement <4 x i32> %604, i32 %254, i64 3, !dbg !62
  %606 = bitcast <4 x i32> %605 to <4 x float>, !dbg !62
  %607 = fcmp olt <4 x float> %601, %606, !dbg !101
  %608 = fcmp uno <4 x float> %606, zeroinitializer, !dbg !103
  %609 = or <4 x i1> %607, %608, !dbg !104
  %.v51 = select <4 x i1> %609, <4 x i32> %605, <4 x i32> %.v50, !dbg !105
  %610 = bitcast <4 x i32> %.v51 to <4 x float>, !dbg !105
  %611 = insertelement <4 x i32> poison, i32 %286, i64 0, !dbg !67
  %612 = insertelement <4 x i32> %611, i32 %287, i64 1, !dbg !67
  %613 = insertelement <4 x i32> %612, i32 %288, i64 2, !dbg !67
  %614 = insertelement <4 x i32> %613, i32 %289, i64 3, !dbg !67
  %615 = bitcast <4 x i32> %614 to <4 x float>, !dbg !67
  %616 = fcmp olt <4 x float> %610, %615, !dbg !106
  %617 = fcmp uno <4 x float> %615, zeroinitializer, !dbg !108
  %618 = or <4 x i1> %616, %617, !dbg !109
  %.v52 = select <4 x i1> %618, <4 x i32> %614, <4 x i32> %.v51, !dbg !110
  %619 = bitcast <4 x i32> %.v52 to <4 x float>, !dbg !110
  %620 = insertelement <4 x i32> poison, i32 %319, i64 0, !dbg !71
  %621 = insertelement <4 x i32> %620, i32 %320, i64 1, !dbg !71
  %622 = insertelement <4 x i32> %621, i32 %321, i64 2, !dbg !71
  %623 = insertelement <4 x i32> %622, i32 %322, i64 3, !dbg !71
  %624 = bitcast <4 x i32> %623 to <4 x float>, !dbg !71
  %625 = fcmp olt <4 x float> %619, %624, !dbg !111
  %626 = fcmp uno <4 x float> %624, zeroinitializer, !dbg !113
  %627 = or <4 x i1> %625, %626, !dbg !114
  %.v53 = select <4 x i1> %627, <4 x i32> %623, <4 x i32> %.v52, !dbg !115
  %628 = bitcast <4 x i32> %.v53 to <4 x float>, !dbg !115
  %629 = insertelement <4 x i32> poison, i32 %356, i64 0, !dbg !78
  %630 = insertelement <4 x i32> %629, i32 %357, i64 1, !dbg !78
  %631 = insertelement <4 x i32> %630, i32 %358, i64 2, !dbg !78
  %632 = insertelement <4 x i32> %631, i32 %359, i64 3, !dbg !78
  %633 = bitcast <4 x i32> %632 to <4 x float>, !dbg !78
  %634 = fcmp olt <4 x float> %628, %633, !dbg !116
  %635 = bitcast i32 %356 to float, !dbg !118
  %636 = fcmp uno float %635, 0.000000e+00, !dbg !118
  %637 = bitcast i32 %357 to float, !dbg !118
  %638 = fcmp uno float %637, 0.000000e+00, !dbg !118
  %639 = bitcast i32 %358 to float, !dbg !118
  %640 = fcmp uno float %639, 0.000000e+00, !dbg !118
  %641 = bitcast i32 %359 to float, !dbg !118
  %642 = fcmp uno float %641, 0.000000e+00, !dbg !118
  %643 = extractelement <4 x i1> %634, i64 0, !dbg !119
  %644 = or i1 %643, %636, !dbg !119
  %645 = extractelement <4 x i1> %634, i64 1, !dbg !119
  %646 = or i1 %645, %638, !dbg !119
  %647 = extractelement <4 x i1> %634, i64 2, !dbg !119
  %648 = or i1 %647, %640, !dbg !119
  %649 = extractelement <4 x i1> %634, i64 3, !dbg !119
  %650 = or i1 %649, %642, !dbg !119
  %651 = zext <4 x i1> %571 to <4 x i8>, !dbg !120
  %652 = select <4 x i1> %580, <4 x i8> splat (i8 2), <4 x i8> %651, !dbg !121
  %653 = select <4 x i1> %589, <4 x i8> splat (i8 3), <4 x i8> %652, !dbg !122
  %654 = select <4 x i1> %598, <4 x i8> splat (i8 4), <4 x i8> %653, !dbg !123
  %655 = select <4 x i1> %607, <4 x i8> splat (i8 5), <4 x i8> %654, !dbg !124
  %656 = select <4 x i1> %616, <4 x i8> splat (i8 6), <4 x i8> %655, !dbg !125
  %657 = select <4 x i1> %625, <4 x i8> splat (i8 7), <4 x i8> %656, !dbg !126
  %658 = select <4 x i1> %634, <4 x i8> splat (i8 8), <4 x i8> %657, !dbg !127
  %659 = insertelement <4 x i32> poison, i32 %154, i64 0, !dbg !55
  %660 = insertelement <4 x i32> %659, i32 %155, i64 1, !dbg !55
  %661 = insertelement <4 x i32> %660, i32 %156, i64 2, !dbg !55
  %662 = insertelement <4 x i32> %661, i32 %157, i64 3, !dbg !55
  %663 = bitcast <4 x i32> %662 to <4 x float>, !dbg !55
  %664 = insertelement <4 x i32> poison, i32 %174, i64 0, !dbg !56
  %665 = insertelement <4 x i32> %664, i32 %175, i64 1, !dbg !56
  %666 = insertelement <4 x i32> %665, i32 %176, i64 2, !dbg !56
  %667 = insertelement <4 x i32> %666, i32 %177, i64 3, !dbg !56
  %668 = bitcast <4 x i32> %667 to <4 x float>, !dbg !56
  %669 = fcmp ogt <4 x float> %668, %663, !dbg !79
  %670 = fcmp uno <4 x float> %668, zeroinitializer, !dbg !83
  %671 = or <4 x i1> %669, %670, !dbg !84
  %.v54 = select <4 x i1> %671, <4 x i32> %667, <4 x i32> %662, !dbg !85
  %672 = bitcast <4 x i32> %.v54 to <4 x float>, !dbg !85
  %673 = insertelement <4 x i32> poison, i32 %196, i64 0, !dbg !59
  %674 = insertelement <4 x i32> %673, i32 %197, i64 1, !dbg !59
  %675 = insertelement <4 x i32> %674, i32 %198, i64 2, !dbg !59
  %676 = insertelement <4 x i32> %675, i32 %199, i64 3, !dbg !59
  %677 = bitcast <4 x i32> %676 to <4 x float>, !dbg !59
  %678 = fcmp olt <4 x float> %672, %677, !dbg !86
  %679 = fcmp uno <4 x float> %677, zeroinitializer, !dbg !88
  %680 = or <4 x i1> %678, %679, !dbg !89
  %.v55 = select <4 x i1> %680, <4 x i32> %676, <4 x i32> %.v54, !dbg !90
  %681 = bitcast <4 x i32> %.v55 to <4 x float>, !dbg !90
  %682 = insertelement <4 x i32> poison, i32 %216, i64 0, !dbg !60
  %683 = insertelement <4 x i32> %682, i32 %217, i64 1, !dbg !60
  %684 = insertelement <4 x i32> %683, i32 %218, i64 2, !dbg !60
  %685 = insertelement <4 x i32> %684, i32 %219, i64 3, !dbg !60
  %686 = bitcast <4 x i32> %685 to <4 x float>, !dbg !60
  %687 = fcmp olt <4 x float> %681, %686, !dbg !91
  %688 = fcmp uno <4 x float> %686, zeroinitializer, !dbg !93
  %689 = or <4 x i1> %687, %688, !dbg !94
  %.v56 = select <4 x i1> %689, <4 x i32> %685, <4 x i32> %.v55, !dbg !95
  %690 = bitcast <4 x i32> %.v56 to <4 x float>, !dbg !95
  %691 = insertelement <4 x i32> poison, i32 %236, i64 0, !dbg !61
  %692 = insertelement <4 x i32> %691, i32 %237, i64 1, !dbg !61
  %693 = insertelement <4 x i32> %692, i32 %238, i64 2, !dbg !61
  %694 = insertelement <4 x i32> %693, i32 %239, i64 3, !dbg !61
  %695 = bitcast <4 x i32> %694 to <4 x float>, !dbg !61
  %696 = fcmp olt <4 x float> %690, %695, !dbg !96
  %697 = fcmp uno <4 x float> %695, zeroinitializer, !dbg !98
  %698 = or <4 x i1> %696, %697, !dbg !99
  %.v57 = select <4 x i1> %698, <4 x i32> %694, <4 x i32> %.v56, !dbg !100
  %699 = bitcast <4 x i32> %.v57 to <4 x float>, !dbg !100
  %700 = insertelement <4 x i32> poison, i32 %256, i64 0, !dbg !62
  %701 = insertelement <4 x i32> %700, i32 %257, i64 1, !dbg !62
  %702 = insertelement <4 x i32> %701, i32 %258, i64 2, !dbg !62
  %703 = insertelement <4 x i32> %702, i32 %259, i64 3, !dbg !62
  %704 = bitcast <4 x i32> %703 to <4 x float>, !dbg !62
  %705 = fcmp olt <4 x float> %699, %704, !dbg !101
  %706 = fcmp uno <4 x float> %704, zeroinitializer, !dbg !103
  %707 = or <4 x i1> %705, %706, !dbg !104
  %.v58 = select <4 x i1> %707, <4 x i32> %703, <4 x i32> %.v57, !dbg !105
  %708 = bitcast <4 x i32> %.v58 to <4 x float>, !dbg !105
  %709 = insertelement <4 x i32> poison, i32 %291, i64 0, !dbg !67
  %710 = insertelement <4 x i32> %709, i32 %292, i64 1, !dbg !67
  %711 = insertelement <4 x i32> %710, i32 %293, i64 2, !dbg !67
  %712 = insertelement <4 x i32> %711, i32 %294, i64 3, !dbg !67
  %713 = bitcast <4 x i32> %712 to <4 x float>, !dbg !67
  %714 = fcmp olt <4 x float> %708, %713, !dbg !106
  %715 = fcmp uno <4 x float> %713, zeroinitializer, !dbg !108
  %716 = or <4 x i1> %714, %715, !dbg !109
  %.v59 = select <4 x i1> %716, <4 x i32> %712, <4 x i32> %.v58, !dbg !110
  %717 = bitcast <4 x i32> %.v59 to <4 x float>, !dbg !110
  %718 = insertelement <4 x i32> poison, i32 %324, i64 0, !dbg !71
  %719 = insertelement <4 x i32> %718, i32 %325, i64 1, !dbg !71
  %720 = insertelement <4 x i32> %719, i32 %326, i64 2, !dbg !71
  %721 = insertelement <4 x i32> %720, i32 %327, i64 3, !dbg !71
  %722 = bitcast <4 x i32> %721 to <4 x float>, !dbg !71
  %723 = fcmp olt <4 x float> %717, %722, !dbg !111
  %724 = fcmp uno <4 x float> %722, zeroinitializer, !dbg !113
  %725 = or <4 x i1> %723, %724, !dbg !114
  %.v60 = select <4 x i1> %725, <4 x i32> %721, <4 x i32> %.v59, !dbg !115
  %726 = bitcast <4 x i32> %.v60 to <4 x float>, !dbg !115
  %727 = insertelement <4 x i32> poison, i32 %361, i64 0, !dbg !78
  %728 = insertelement <4 x i32> %727, i32 %362, i64 1, !dbg !78
  %729 = insertelement <4 x i32> %728, i32 %363, i64 2, !dbg !78
  %730 = insertelement <4 x i32> %729, i32 %364, i64 3, !dbg !78
  %731 = bitcast <4 x i32> %730 to <4 x float>, !dbg !78
  %732 = fcmp olt <4 x float> %726, %731, !dbg !116
  %733 = bitcast i32 %361 to float, !dbg !118
  %734 = fcmp uno float %733, 0.000000e+00, !dbg !118
  %735 = bitcast i32 %362 to float, !dbg !118
  %736 = fcmp uno float %735, 0.000000e+00, !dbg !118
  %737 = bitcast i32 %363 to float, !dbg !118
  %738 = fcmp uno float %737, 0.000000e+00, !dbg !118
  %739 = bitcast i32 %364 to float, !dbg !118
  %740 = fcmp uno float %739, 0.000000e+00, !dbg !118
  %741 = extractelement <4 x i1> %732, i64 0, !dbg !119
  %742 = or i1 %741, %734, !dbg !119
  %743 = extractelement <4 x i1> %732, i64 1, !dbg !119
  %744 = or i1 %743, %736, !dbg !119
  %745 = extractelement <4 x i1> %732, i64 2, !dbg !119
  %746 = or i1 %745, %738, !dbg !119
  %747 = extractelement <4 x i1> %732, i64 3, !dbg !119
  %748 = or i1 %747, %740, !dbg !119
  %749 = zext <4 x i1> %669 to <4 x i8>, !dbg !120
  %750 = select <4 x i1> %678, <4 x i8> splat (i8 2), <4 x i8> %749, !dbg !121
  %751 = select <4 x i1> %687, <4 x i8> splat (i8 3), <4 x i8> %750, !dbg !122
  %752 = select <4 x i1> %696, <4 x i8> splat (i8 4), <4 x i8> %751, !dbg !123
  %753 = select <4 x i1> %705, <4 x i8> splat (i8 5), <4 x i8> %752, !dbg !124
  %754 = select <4 x i1> %714, <4 x i8> splat (i8 6), <4 x i8> %753, !dbg !125
  %755 = select <4 x i1> %723, <4 x i8> splat (i8 7), <4 x i8> %754, !dbg !126
  %756 = select <4 x i1> %732, <4 x i8> splat (i8 8), <4 x i8> %755, !dbg !127
  %757 = shl i32 %26, 2, !dbg !128
  %758 = shl i32 %27, 2, !dbg !128
  %759 = shl i32 %28, 2, !dbg !128
  %760 = shl i32 %29, 2, !dbg !128
  %761 = mul i32 %37, 4224, !dbg !129
  %762 = add i32 %757, %761, !dbg !130
  %763 = add i32 %761, %758, !dbg !130
  %764 = add i32 %761, %759, !dbg !130
  %765 = add i32 %761, %760, !dbg !130
  %766 = sext i32 %762 to i64, !dbg !131
  %767 = getelementptr float, ptr addrspace(1) %1, i64 %766, !dbg !131
  %768 = sext i32 %763 to i64, !dbg !131
  %769 = getelementptr float, ptr addrspace(1) %1, i64 %768, !dbg !131
  %770 = sext i32 %764 to i64, !dbg !131
  %771 = getelementptr float, ptr addrspace(1) %1, i64 %770, !dbg !131
  %772 = sext i32 %765 to i64, !dbg !131
  %773 = getelementptr float, ptr addrspace(1) %1, i64 %772, !dbg !131
  %774 = and i1 %15, %30, !dbg !52
  %775 = and i1 %31, %15, !dbg !52
  %776 = and i1 %32, %15, !dbg !52
  %777 = and i1 %33, %15, !dbg !52
  %778 = and i1 %136, %134, !dbg !52
  %779 = shl i32 %8, 8, !dbg !132
  %780 = and i32 %779, 3840, !dbg !132
  %781 = or disjoint i32 %780, %10, !dbg !132
  %782 = and i32 %11, 1020, !dbg !132
  %783 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %780, !dbg !132
  %784 = getelementptr float, ptr addrspace(3) %783, i32 %781, !dbg !132
  %785 = extractelement <4 x i32> %.v39, i64 0, !dbg !132
  %786 = select i1 %448, i32 %346, i32 %785, !dbg !133
  %787 = insertelement <1 x i32> poison, i32 %786, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %784, <1 x i32> %787, i1 true) #2, !dbg !132
  %788 = or disjoint i32 %781, 16, !dbg !132
  %789 = lshr i32 %788, 2, !dbg !132
  %790 = and i32 %789, 964, !dbg !132
  %791 = getelementptr float, ptr addrspace(3) @global_smem, i32 %790, !dbg !132
  %792 = getelementptr float, ptr addrspace(3) %791, i32 %788, !dbg !132
  %793 = extractelement <4 x i32> %.v39, i64 1, !dbg !132
  %794 = select i1 %450, i32 %347, i32 %793, !dbg !133
  %795 = insertelement <1 x i32> poison, i32 %794, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %792, <1 x i32> %795, i1 true) #2, !dbg !132
  %796 = or disjoint i32 %781, 32, !dbg !132
  %797 = lshr i32 %796, 2, !dbg !132
  %798 = and i32 %797, 968, !dbg !132
  %799 = getelementptr float, ptr addrspace(3) @global_smem, i32 %798, !dbg !132
  %800 = getelementptr float, ptr addrspace(3) %799, i32 %796, !dbg !132
  %801 = extractelement <4 x i32> %.v39, i64 2, !dbg !132
  %802 = select i1 %452, i32 %348, i32 %801, !dbg !133
  %803 = insertelement <1 x i32> poison, i32 %802, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %800, <1 x i32> %803, i1 true) #2, !dbg !132
  %804 = or disjoint i32 %781, 48, !dbg !132
  %805 = lshr i32 %804, 2, !dbg !132
  %806 = and i32 %805, 972, !dbg !132
  %807 = getelementptr float, ptr addrspace(3) @global_smem, i32 %806, !dbg !132
  %808 = getelementptr float, ptr addrspace(3) %807, i32 %804, !dbg !132
  %809 = extractelement <4 x i32> %.v39, i64 3, !dbg !132
  %810 = select i1 %454, i32 %349, i32 %809, !dbg !133
  %811 = insertelement <1 x i32> poison, i32 %810, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %808, <1 x i32> %811, i1 true) #2, !dbg !132
  %812 = or disjoint i32 %781, 64, !dbg !132
  %813 = lshr i32 %812, 2, !dbg !132
  %814 = and i32 %813, 976, !dbg !132
  %815 = getelementptr float, ptr addrspace(3) @global_smem, i32 %814, !dbg !132
  %816 = getelementptr float, ptr addrspace(3) %815, i32 %812, !dbg !132
  %817 = extractelement <4 x i32> %.v46, i64 0, !dbg !132
  %818 = select i1 %546, i32 %351, i32 %817, !dbg !133
  %819 = insertelement <1 x i32> poison, i32 %818, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %816, <1 x i32> %819, i1 true) #2, !dbg !132
  %820 = or disjoint i32 %781, 80, !dbg !132
  %821 = lshr i32 %820, 2, !dbg !132
  %822 = and i32 %821, 980, !dbg !132
  %823 = getelementptr float, ptr addrspace(3) @global_smem, i32 %822, !dbg !132
  %824 = getelementptr float, ptr addrspace(3) %823, i32 %820, !dbg !132
  %825 = extractelement <4 x i32> %.v46, i64 1, !dbg !132
  %826 = select i1 %548, i32 %352, i32 %825, !dbg !133
  %827 = insertelement <1 x i32> poison, i32 %826, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %824, <1 x i32> %827, i1 true) #2, !dbg !132
  %828 = or disjoint i32 %781, 96, !dbg !132
  %829 = lshr i32 %828, 2, !dbg !132
  %830 = and i32 %829, 984, !dbg !132
  %831 = getelementptr float, ptr addrspace(3) @global_smem, i32 %830, !dbg !132
  %832 = getelementptr float, ptr addrspace(3) %831, i32 %828, !dbg !132
  %833 = extractelement <4 x i32> %.v46, i64 2, !dbg !132
  %834 = select i1 %550, i32 %353, i32 %833, !dbg !133
  %835 = insertelement <1 x i32> poison, i32 %834, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %832, <1 x i32> %835, i1 true) #2, !dbg !132
  %836 = or disjoint i32 %781, 112, !dbg !132
  %837 = lshr i32 %836, 2, !dbg !132
  %838 = and i32 %837, 988, !dbg !132
  %839 = getelementptr float, ptr addrspace(3) @global_smem, i32 %838, !dbg !132
  %840 = getelementptr float, ptr addrspace(3) %839, i32 %836, !dbg !132
  %841 = extractelement <4 x i32> %.v46, i64 3, !dbg !132
  %842 = select i1 %552, i32 %354, i32 %841, !dbg !133
  %843 = insertelement <1 x i32> poison, i32 %842, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %840, <1 x i32> %843, i1 true) #2, !dbg !132
  %844 = or disjoint i32 %781, 128, !dbg !132
  %845 = lshr i32 %844, 2, !dbg !132
  %846 = and i32 %845, 992, !dbg !132
  %847 = getelementptr float, ptr addrspace(3) @global_smem, i32 %846, !dbg !132
  %848 = getelementptr float, ptr addrspace(3) %847, i32 %844, !dbg !132
  %849 = extractelement <4 x i32> %.v53, i64 0, !dbg !132
  %850 = select i1 %644, i32 %356, i32 %849, !dbg !133
  %851 = insertelement <1 x i32> poison, i32 %850, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %848, <1 x i32> %851, i1 true) #2, !dbg !132
  %852 = or disjoint i32 %781, 144, !dbg !132
  %853 = lshr i32 %852, 2, !dbg !132
  %854 = and i32 %853, 996, !dbg !132
  %855 = getelementptr float, ptr addrspace(3) @global_smem, i32 %854, !dbg !132
  %856 = getelementptr float, ptr addrspace(3) %855, i32 %852, !dbg !132
  %857 = extractelement <4 x i32> %.v53, i64 1, !dbg !132
  %858 = select i1 %646, i32 %357, i32 %857, !dbg !133
  %859 = insertelement <1 x i32> poison, i32 %858, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %856, <1 x i32> %859, i1 true) #2, !dbg !132
  %860 = or disjoint i32 %781, 160, !dbg !132
  %861 = lshr i32 %860, 2, !dbg !132
  %862 = and i32 %861, 1000, !dbg !132
  %863 = getelementptr float, ptr addrspace(3) @global_smem, i32 %862, !dbg !132
  %864 = getelementptr float, ptr addrspace(3) %863, i32 %860, !dbg !132
  %865 = extractelement <4 x i32> %.v53, i64 2, !dbg !132
  %866 = select i1 %648, i32 %358, i32 %865, !dbg !133
  %867 = insertelement <1 x i32> poison, i32 %866, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %864, <1 x i32> %867, i1 true) #2, !dbg !132
  %868 = or disjoint i32 %781, 176, !dbg !132
  %869 = lshr i32 %868, 2, !dbg !132
  %870 = and i32 %869, 1004, !dbg !132
  %871 = getelementptr float, ptr addrspace(3) @global_smem, i32 %870, !dbg !132
  %872 = getelementptr float, ptr addrspace(3) %871, i32 %868, !dbg !132
  %873 = extractelement <4 x i32> %.v53, i64 3, !dbg !132
  %874 = select i1 %650, i32 %359, i32 %873, !dbg !133
  %875 = insertelement <1 x i32> poison, i32 %874, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %872, <1 x i32> %875, i1 true) #2, !dbg !132
  %876 = or disjoint i32 %781, 192, !dbg !132
  %877 = lshr i32 %876, 2, !dbg !132
  %878 = and i32 %877, 1008, !dbg !132
  %879 = getelementptr float, ptr addrspace(3) @global_smem, i32 %878, !dbg !132
  %880 = getelementptr float, ptr addrspace(3) %879, i32 %876, !dbg !132
  %881 = extractelement <4 x i32> %.v60, i64 0, !dbg !132
  %882 = select i1 %742, i32 %361, i32 %881, !dbg !133
  %883 = insertelement <1 x i32> poison, i32 %882, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %880, <1 x i32> %883, i1 true) #2, !dbg !132
  %884 = or disjoint i32 %781, 208, !dbg !132
  %885 = lshr i32 %884, 2, !dbg !132
  %886 = and i32 %885, 1012, !dbg !132
  %887 = getelementptr float, ptr addrspace(3) @global_smem, i32 %886, !dbg !132
  %888 = getelementptr float, ptr addrspace(3) %887, i32 %884, !dbg !132
  %889 = extractelement <4 x i32> %.v60, i64 1, !dbg !132
  %890 = select i1 %744, i32 %362, i32 %889, !dbg !133
  %891 = insertelement <1 x i32> poison, i32 %890, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %888, <1 x i32> %891, i1 true) #2, !dbg !132
  %892 = or disjoint i32 %781, 224, !dbg !132
  %893 = lshr i32 %892, 2, !dbg !132
  %894 = and i32 %893, 1016, !dbg !132
  %895 = getelementptr float, ptr addrspace(3) @global_smem, i32 %894, !dbg !132
  %896 = getelementptr float, ptr addrspace(3) %895, i32 %892, !dbg !132
  %897 = extractelement <4 x i32> %.v60, i64 2, !dbg !132
  %898 = select i1 %746, i32 %363, i32 %897, !dbg !133
  %899 = insertelement <1 x i32> poison, i32 %898, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %896, <1 x i32> %899, i1 true) #2, !dbg !132
  %900 = or disjoint i32 %781, 240, !dbg !132
  %901 = lshr i32 %900, 2, !dbg !132
  %902 = and i32 %901, 1020, !dbg !132
  %903 = getelementptr float, ptr addrspace(3) @global_smem, i32 %902, !dbg !132
  %904 = getelementptr float, ptr addrspace(3) %903, i32 %900, !dbg !132
  %905 = extractelement <4 x i32> %.v60, i64 3, !dbg !132
  %906 = select i1 %748, i32 %364, i32 %905, !dbg !133
  %907 = insertelement <1 x i32> poison, i32 %906, i64 0, !dbg !132
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %904, <1 x i32> %907, i1 true) #2, !dbg !132
  tail call void @llvm.nvvm.barrier0(), !dbg !132
  %908 = and i32 %8, 252, !dbg !132
  %909 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %908, !dbg !132
  %910 = getelementptr inbounds float, ptr addrspace(3) %909, i32 %782, !dbg !132
  %911 = or disjoint i32 %782, 1024, !dbg !132
  %912 = lshr exact i32 %911, 2, !dbg !132
  %913 = and i32 %912, 508, !dbg !132
  %914 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %913, !dbg !132
  %915 = getelementptr inbounds float, ptr addrspace(3) %914, i32 %911, !dbg !132
  %916 = load <4 x i32>, ptr addrspace(3) %915, align 16, !dbg !132
  %917 = or disjoint i32 %782, 2048, !dbg !132
  %918 = lshr exact i32 %917, 2, !dbg !132
  %919 = and i32 %918, 764, !dbg !132
  %920 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %919, !dbg !132
  %921 = getelementptr inbounds float, ptr addrspace(3) %920, i32 %917, !dbg !132
  %922 = load <4 x i32>, ptr addrspace(3) %921, align 16, !dbg !132
  %923 = or disjoint i32 %782, 3072, !dbg !132
  %924 = lshr exact i32 %923, 2, !dbg !132
  %925 = and i32 %924, 1020, !dbg !132
  %926 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %925, !dbg !132
  %927 = getelementptr inbounds float, ptr addrspace(3) %926, i32 %923, !dbg !132
  %928 = load <4 x i32>, ptr addrspace(3) %927, align 16, !dbg !132
  %.extract = load i32, ptr addrspace(3) %910, align 16, !dbg !132
  %929 = getelementptr inbounds i8, ptr addrspace(3) %910, i32 4, !dbg !132
  %.extract19 = load i32, ptr addrspace(3) %929, align 4, !dbg !132
  %930 = getelementptr inbounds i8, ptr addrspace(3) %910, i32 8, !dbg !132
  %.extract20 = load i32, ptr addrspace(3) %930, align 8, !dbg !132
  %931 = getelementptr inbounds i8, ptr addrspace(3) %910, i32 12, !dbg !132
  %.extract21 = load i32, ptr addrspace(3) %931, align 4, !dbg !132
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %767, i1 %774) #2, !dbg !132
  %.extract22 = extractelement <4 x i32> %916, i64 0, !dbg !132
  %.extract23 = extractelement <4 x i32> %916, i64 1, !dbg !132
  %.extract24 = extractelement <4 x i32> %916, i64 2, !dbg !132
  %.extract25 = extractelement <4 x i32> %916, i64 3, !dbg !132
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %769, i1 %775) #2, !dbg !132
  %.extract26 = extractelement <4 x i32> %922, i64 0, !dbg !132
  %.extract27 = extractelement <4 x i32> %922, i64 1, !dbg !132
  %.extract28 = extractelement <4 x i32> %922, i64 2, !dbg !132
  %.extract29 = extractelement <4 x i32> %922, i64 3, !dbg !132
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %771, i1 %776) #2, !dbg !132
  %.extract30 = extractelement <4 x i32> %928, i64 0, !dbg !132
  %.extract31 = extractelement <4 x i32> %928, i64 1, !dbg !132
  %.extract32 = extractelement <4 x i32> %928, i64 2, !dbg !132
  %.extract33 = extractelement <4 x i32> %928, i64 3, !dbg !132
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %773, i1 %777) #2, !dbg !132
  %932 = mul i32 %13, 608, !dbg !134
  %933 = add i32 %22, %932, !dbg !135
  %934 = sext i32 %933 to i64, !dbg !136
  %935 = getelementptr i8, ptr addrspace(1) %2, i64 %934, !dbg !136
  %936 = bitcast <4 x i8> %462 to i32, !dbg !137
  %937 = bitcast <4 x i8> %560 to i32, !dbg !137
  %938 = bitcast <4 x i8> %658 to i32, !dbg !137
  %939 = bitcast <4 x i8> %756 to i32, !dbg !137
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %936, i32 %937, i32 %938, i32 %939, ptr addrspace(1) %935, i1 %778) #2, !dbg !137
  ret void, !dbg !138
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwonuek22t2v6rax4nudyg44s62kxho6bwvkghuzrfylck5hil5e.py", directory: "inductor_cache/wo")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_57, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_57, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_57", linkageName: "triton_poi_fused_max_pool2d_with_indices_57", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 21, scope: !7)
!21 = !DILocation(line: 28, column: 26, scope: !7)
!22 = !DILocation(line: 29, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 35, column: 13, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 41, column: 13, scope: !7)
!27 = !DILocation(line: 45, column: 19, scope: !7)
!28 = !DILocation(line: 46, column: 41, scope: !7)
!29 = !DILocation(line: 46, column: 51, scope: !7)
!30 = !DILocation(line: 46, column: 36, scope: !7)
!31 = !DILocation(line: 46, column: 46, scope: !7)
!32 = !DILocation(line: 46, column: 31, scope: !7)
!33 = !DILocation(line: 52, column: 42, scope: !7)
!34 = !DILocation(line: 52, column: 52, scope: !7)
!35 = !DILocation(line: 52, column: 31, scope: !7)
!36 = !DILocation(line: 54, column: 16, scope: !7)
!37 = !DILocation(line: 56, column: 20, scope: !7)
!38 = !DILocation(line: 58, column: 19, scope: !7)
!39 = !DILocation(line: 59, column: 43, scope: !7)
!40 = !DILocation(line: 59, column: 53, scope: !7)
!41 = !DILocation(line: 59, column: 31, scope: !7)
!42 = !DILocation(line: 66, column: 43, scope: !7)
!43 = !DILocation(line: 66, column: 53, scope: !7)
!44 = !DILocation(line: 66, column: 31, scope: !7)
!45 = !DILocation(line: 69, column: 43, scope: !7)
!46 = !DILocation(line: 69, column: 53, scope: !7)
!47 = !DILocation(line: 69, column: 31, scope: !7)
!48 = !DILocation(line: 72, column: 43, scope: !7)
!49 = !DILocation(line: 72, column: 53, scope: !7)
!50 = !DILocation(line: 72, column: 31, scope: !7)
!51 = !DILocation(line: 74, column: 16, scope: !7)
!52 = !DILocation(line: 112, column: 62, scope: !7)
!53 = !DILocation(line: 46, column: 64, scope: !7)
!54 = !DILocation(line: 46, column: 72, scope: !7)
!55 = !DILocation(line: 46, column: 56, scope: !7)
!56 = !DILocation(line: 52, column: 62, scope: !7)
!57 = !DILocation(line: 59, column: 71, scope: !7)
!58 = !DILocation(line: 59, column: 79, scope: !7)
!59 = !DILocation(line: 59, column: 63, scope: !7)
!60 = !DILocation(line: 66, column: 63, scope: !7)
!61 = !DILocation(line: 69, column: 63, scope: !7)
!62 = !DILocation(line: 72, column: 63, scope: !7)
!63 = !DILocation(line: 79, column: 43, scope: !7)
!64 = !DILocation(line: 79, column: 53, scope: !7)
!65 = !DILocation(line: 79, column: 31, scope: !7)
!66 = !DILocation(line: 79, column: 79, scope: !7)
!67 = !DILocation(line: 79, column: 63, scope: !7)
!68 = !DILocation(line: 82, column: 43, scope: !7)
!69 = !DILocation(line: 82, column: 53, scope: !7)
!70 = !DILocation(line: 82, column: 31, scope: !7)
!71 = !DILocation(line: 82, column: 63, scope: !7)
!72 = !DILocation(line: 84, column: 20, scope: !7)
!73 = !DILocation(line: 85, column: 43, scope: !7)
!74 = !DILocation(line: 85, column: 53, scope: !7)
!75 = !DILocation(line: 85, column: 31, scope: !7)
!76 = !DILocation(line: 85, column: 71, scope: !7)
!77 = !DILocation(line: 85, column: 79, scope: !7)
!78 = !DILocation(line: 85, column: 63, scope: !7)
!79 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !82)
!80 = distinct !DILexicalBlockFile(scope: !7, file: !81, discriminator: 0)
!81 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!82 = !DILocation(line: 53, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !87)
!87 = !DILocation(line: 60, column: 42, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !92)
!92 = !DILocation(line: 67, column: 42, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !97)
!97 = !DILocation(line: 70, column: 42, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !102)
!102 = !DILocation(line: 73, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !107)
!107 = !DILocation(line: 80, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !107)
!111 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !112)
!112 = !DILocation(line: 83, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !112)
!114 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !112)
!115 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !112)
!116 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !117)
!117 = !DILocation(line: 86, column: 42, scope: !7)
!118 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !117)
!119 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !117)
!120 = !DILocation(line: 90, column: 35, scope: !7)
!121 = !DILocation(line: 93, column: 35, scope: !7)
!122 = !DILocation(line: 96, column: 35, scope: !7)
!123 = !DILocation(line: 99, column: 35, scope: !7)
!124 = !DILocation(line: 102, column: 35, scope: !7)
!125 = !DILocation(line: 105, column: 35, scope: !7)
!126 = !DILocation(line: 108, column: 35, scope: !7)
!127 = !DILocation(line: 111, column: 35, scope: !7)
!128 = !DILocation(line: 112, column: 32, scope: !7)
!129 = !DILocation(line: 112, column: 42, scope: !7)
!130 = !DILocation(line: 112, column: 37, scope: !7)
!131 = !DILocation(line: 112, column: 25, scope: !7)
!132 = !DILocation(line: 112, column: 54, scope: !7)
!133 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !117)
!134 = !DILocation(line: 113, column: 34, scope: !7)
!135 = !DILocation(line: 113, column: 30, scope: !7)
!136 = !DILocation(line: 113, column: 25, scope: !7)
!137 = !DILocation(line: 113, column: 46, scope: !7)
!138 = !DILocation(line: 113, column: 4, scope: !7)
