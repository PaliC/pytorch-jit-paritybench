#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#loc = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":19:0)
#loc1 = loc(unknown)
#loc19 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":36:38)
#loc33 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":48:25)
#loc52 = loc(callsite(#loc1 at #loc19))
#loc58 = loc(callsite(#loc1 at #loc33))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__softmax_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":19:0), %arg1: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0xFF800000> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<4096> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc3)
    %2 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc3)
    %3 = arith.muli %0, %c4096_i32 : i32 loc(#loc4)
    %4 = tt.splat %3 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc6)
    %6 = scf.for %arg3 = %c0_i32 to %c4096_i32 step %c2048_i32 iter_args(%arg4 = %cst) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %14 = tt.splat %arg3 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc8)
      %15 = arith.addi %14, %2 : tensor<1x2048xi32, #blocked> loc(#loc8)
      %16 = arith.cmpi slt, %15, %cst_1 : tensor<1x2048xi32, #blocked> loc(#loc9)
      %17 = arith.addi %15, %4 : tensor<1x2048xi32, #blocked> loc(#loc5)
      %18 = tt.addptr %5, %17 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc6)
      %19 = tt.load %18, %16, %cst_0 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc10)
      %20 = arith.cmpf ogt, %arg4, %19 : tensor<1x2048xf32, #blocked> loc(#loc47)
      %21 = arith.cmpf une, %arg4, %arg4 : tensor<1x2048xf32, #blocked> loc(#loc48)
      %22 = arith.ori %20, %21 : tensor<1x2048xi1, #blocked> loc(#loc49)
      %23 = arith.select %22, %arg4, %19 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc50)
      %24 = arith.select %16, %23, %arg4 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc16)
      scf.yield %24 : tensor<1x2048xf32, #blocked> loc(#loc17)
    } loc(#loc7)
    %7 = "tt.reduce"(%6) <{axis = 1 : i32}> ({
    ^bb0(%arg3: f32 loc(callsite(#loc1 at #loc19)), %arg4: f32 loc(callsite(#loc1 at #loc19))):
      %14 = arith.cmpf ogt, %arg3, %arg4 : f32 loc(#loc60)
      %15 = arith.cmpf une, %arg3, %arg3 : f32 loc(#loc61)
      %16 = arith.ori %14, %15 : i1 loc(#loc62)
      %17 = arith.select %16, %arg3, %arg4 : f32 loc(#loc63)
      tt.reduce.return %17 : f32 loc(#loc51)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc51)
    %8 = tt.expand_dims %7 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc20)
    %9 = tt.broadcast %8 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc21)
    %10 = scf.for %arg3 = %c0_i32 to %c4096_i32 step %c2048_i32 iter_args(%arg4 = %cst_0) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %14 = tt.splat %arg3 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc23)
      %15 = arith.addi %14, %2 : tensor<1x2048xi32, #blocked> loc(#loc23)
      %16 = arith.cmpi slt, %15, %cst_1 : tensor<1x2048xi32, #blocked> loc(#loc24)
      %17 = arith.addi %15, %4 : tensor<1x2048xi32, #blocked> loc(#loc25)
      %18 = tt.addptr %5, %17 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc26)
      %19 = tt.load %18, %16, %cst_0 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc27)
      %20 = arith.subf %19, %9 : tensor<1x2048xf32, #blocked> loc(#loc21)
      %21 = math.exp %20 : tensor<1x2048xf32, #blocked> loc(#loc28)
      %22 = arith.addf %arg4, %21 : tensor<1x2048xf32, #blocked> loc(#loc29)
      %23 = arith.select %16, %22, %arg4 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc30)
      scf.yield %23 : tensor<1x2048xf32, #blocked> loc(#loc31)
    } loc(#loc22)
    %11 = "tt.reduce"(%10) <{axis = 1 : i32}> ({
    ^bb0(%arg3: f32 loc(callsite(#loc1 at #loc33)), %arg4: f32 loc(callsite(#loc1 at #loc33))):
      %14 = arith.addf %arg3, %arg4 : f32 loc(#loc64)
      tt.reduce.return %14 : f32 loc(#loc57)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc57)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc35)
    %13 = tt.broadcast %12 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc36)
    scf.for %arg3 = %c0_i32 to %c4096_i32 step %c2048_i32  : i32 {
      %14 = tt.splat %arg3 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc38)
      %15 = arith.addi %14, %2 : tensor<1x2048xi32, #blocked> loc(#loc38)
      %16 = arith.cmpi slt, %15, %cst_1 : tensor<1x2048xi32, #blocked> loc(#loc39)
      %17 = arith.addi %15, %4 : tensor<1x2048xi32, #blocked> loc(#loc40)
      %18 = tt.addptr %5, %17 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc41)
      %19 = tt.load %18, %16, %cst_0 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc42)
      %20 = arith.subf %19, %9 : tensor<1x2048xf32, #blocked> loc(#loc43)
      %21 = math.exp %20 : tensor<1x2048xf32, #blocked> loc(#loc44)
      %22 = arith.divf %21, %13 : tensor<1x2048xf32, #blocked> loc(#loc36)
      tt.store %18, %22, %16 : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc45)
    } loc(#loc37)
    tt.return loc(#loc46)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":22:28)
#loc3 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":25:33)
#loc4 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":32:48)
#loc5 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":32:43)
#loc6 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":32:38)
#loc7 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":28:36)
#loc8 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":29:27)
#loc9 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":30:25)
#loc10 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":32:53)
#loc11 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc12 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":34:45)
#loc13 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc16 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":35:38)
#loc17 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":35:8)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":131:29)
#loc20 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":36:41)
#loc21 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":43:22)
#loc22 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":38:36)
#loc23 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":39:27)
#loc24 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":40:25)
#loc25 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":42:43)
#loc26 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":42:38)
#loc27 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":42:53)
#loc28 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":44:27)
#loc29 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":46:23)
#loc30 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":47:38)
#loc31 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":47:8)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc35 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":48:28)
#loc36 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":56:24)
#loc37 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":49:36)
#loc38 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":50:27)
#loc39 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":51:25)
#loc40 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":53:44)
#loc41 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":53:39)
#loc42 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":53:54)
#loc43 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":54:24)
#loc44 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":55:28)
#loc45 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":57:54)
#loc46 = loc("inductor_cache/c3/cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py":49:4)
#loc47 = loc(callsite(#loc11 at #loc12))
#loc48 = loc(callsite(#loc13 at #loc12))
#loc49 = loc(callsite(#loc14 at #loc12))
#loc50 = loc(callsite(#loc15 at #loc12))
#loc51 = loc(callsite(#loc18 at #loc19))
#loc53 = loc(callsite(#loc11 at #loc18))
#loc54 = loc(callsite(#loc13 at #loc18))
#loc55 = loc(callsite(#loc14 at #loc18))
#loc56 = loc(callsite(#loc15 at #loc18))
#loc57 = loc(callsite(#loc32 at #loc33))
#loc59 = loc(callsite(#loc34 at #loc32))
#loc60 = loc(callsite(#loc53 at #loc19))
#loc61 = loc(callsite(#loc54 at #loc19))
#loc62 = loc(callsite(#loc55 at #loc19))
#loc63 = loc(callsite(#loc56 at #loc19))
#loc64 = loc(callsite(#loc59 at #loc33))
