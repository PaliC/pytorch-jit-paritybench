; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__softmax_1(ptr addrspace(1) %0, i32 %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %6 = and i32 %5, 31, !dbg !11
  %7 = shl i32 %5, 2, !dbg !11
  %8 = and i32 %7, 2044, !dbg !11
  %9 = shl i32 %4, 12, !dbg !12
  %10 = or disjoint i32 %9, %8
  %11 = sext i32 %10 to i64, !dbg !13
  %12 = getelementptr float, ptr addrspace(1) %0, i64 %11, !dbg !13
  %13 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %12, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !14
  %14 = extractvalue { i32, i32, i32, i32 } %13, 0, !dbg !14
  %15 = extractvalue { i32, i32, i32, i32 } %13, 1, !dbg !14
  %16 = extractvalue { i32, i32, i32, i32 } %13, 2, !dbg !14
  %17 = extractvalue { i32, i32, i32, i32 } %13, 3, !dbg !14
  %18 = bitcast i32 %16 to float, !dbg !14
  %19 = bitcast i32 %17 to float, !dbg !14
  %20 = or disjoint i32 %10, 2048, !dbg !15
  %21 = sext i32 %20 to i64, !dbg !13
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !13
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !14
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !14
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !14
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !14
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !14
  %28 = bitcast i32 %26 to float, !dbg !14
  %29 = bitcast i32 %27 to float, !dbg !14
  %30 = fcmp ogt float %18, %28, !dbg !16
  %31 = fcmp uno float %18, 0.000000e+00, !dbg !20
  %32 = or i1 %31, %30, !dbg !21
  %33 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !14
  %34 = insertelement <2 x i32> %33, i32 %15, i64 1, !dbg !14
  %35 = bitcast <2 x i32> %34 to <2 x float>, !dbg !14
  %36 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !14
  %37 = insertelement <2 x i32> %36, i32 %25, i64 1, !dbg !14
  %38 = bitcast <2 x i32> %37 to <2 x float>, !dbg !14
  %39 = fcmp ogt <2 x float> %35, %38, !dbg !16
  %40 = fcmp uno <2 x float> %35, zeroinitializer, !dbg !20
  %41 = or <2 x i1> %40, %39, !dbg !21
  %.v = select <2 x i1> %41, <2 x i32> %34, <2 x i32> %37, !dbg !22
  %42 = bitcast <2 x i32> %.v to <2 x float>, !dbg !22
  %43 = select i1 %32, float %18, float %28, !dbg !22
  %44 = lshr i32 %5, 5, !dbg !11
  %45 = extractelement <2 x float> %42, i64 0, !dbg !23
  %46 = extractelement <2 x float> %42, i64 1, !dbg !23
  %47 = fcmp ogt float %45, %46, !dbg !23
  %48 = fcmp uno float %45, 0.000000e+00, !dbg !26
  %49 = or i1 %47, %48, !dbg !27
  %50 = select i1 %49, float %45, float %46, !dbg !28
  %51 = insertelement <2 x float> poison, float %50, i64 0, !dbg !23
  %52 = insertelement <2 x float> %51, float %19, i64 1, !dbg !23
  %53 = insertelement <2 x float> poison, float %43, i64 0, !dbg !23
  %54 = insertelement <2 x float> %53, float %29, i64 1, !dbg !23
  %55 = fcmp ogt <2 x float> %52, %54, !dbg !23
  %56 = fcmp uno <2 x float> %52, zeroinitializer, !dbg !26
  %57 = or <2 x i1> %56, %55, !dbg !27
  %58 = select <2 x i1> %57, <2 x float> %52, <2 x float> %54, !dbg !28
  %59 = extractelement <2 x float> %58, i64 0, !dbg !28
  %60 = extractelement <2 x float> %58, i64 1, !dbg !23
  %61 = fcmp ogt float %59, %60, !dbg !23
  %62 = fcmp uno float %59, 0.000000e+00, !dbg !26
  %63 = or i1 %61, %62, !dbg !27
  %64 = select i1 %63, float %59, float %60, !dbg !28
  %65 = bitcast float %64 to i32, !dbg !29
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 16, i32 31), !dbg !29
  %67 = bitcast i32 %66 to float, !dbg !29
  %68 = fcmp ogt float %64, %67, !dbg !23
  %69 = fcmp uno float %64, 0.000000e+00, !dbg !26
  %70 = or i1 %69, %68, !dbg !27
  %71 = select i1 %70, float %64, float %67, !dbg !28
  %72 = bitcast float %71 to i32, !dbg !29
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 8, i32 31), !dbg !29
  %74 = bitcast i32 %73 to float, !dbg !29
  %75 = fcmp ogt float %71, %74, !dbg !23
  %76 = fcmp uno float %71, 0.000000e+00, !dbg !26
  %77 = or i1 %75, %76, !dbg !27
  %78 = select i1 %77, float %71, float %74, !dbg !28
  %79 = bitcast float %78 to i32, !dbg !29
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 4, i32 31), !dbg !29
  %81 = bitcast i32 %80 to float, !dbg !29
  %82 = fcmp ogt float %78, %81, !dbg !23
  %83 = fcmp uno float %78, 0.000000e+00, !dbg !26
  %84 = or i1 %82, %83, !dbg !27
  %85 = select i1 %84, float %78, float %81, !dbg !28
  %86 = bitcast float %85 to i32, !dbg !29
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 2, i32 31), !dbg !29
  %88 = bitcast i32 %87 to float, !dbg !29
  %89 = fcmp ogt float %85, %88, !dbg !23
  %90 = fcmp uno float %85, 0.000000e+00, !dbg !26
  %91 = or i1 %89, %90, !dbg !27
  %92 = select i1 %91, float %85, float %88, !dbg !28
  %93 = bitcast float %92 to i32, !dbg !29
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 1, i32 31), !dbg !29
  %95 = bitcast i32 %94 to float, !dbg !29
  %96 = fcmp ogt float %92, %95, !dbg !23
  %97 = fcmp uno float %92, 0.000000e+00, !dbg !26
  %98 = or i1 %96, %97, !dbg !27
  %99 = icmp eq i32 %6, 0, !dbg !29
  %100 = and i32 %44, 15, !dbg !29
  %101 = zext nneg i32 %100 to i64, !dbg !29
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i64 %101, !dbg !29
  %103 = select i1 %98, i32 %93, i32 %94, !dbg !28
  %104 = insertelement <1 x i32> poison, i32 %103, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %104, i1 %99) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %105 = icmp slt i32 %5, 16, !dbg !29
  %106 = sext i32 %5 to i64, !dbg !29
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i64 %106, !dbg !29
  %108 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %107, i1 %105) #3, !dbg !29
  %109 = bitcast i32 %108 to float, !dbg !29
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 8, i32 31), !dbg !29
  %111 = bitcast i32 %110 to float, !dbg !29
  %112 = fcmp ogt float %109, %111, !dbg !23
  %113 = fcmp uno float %109, 0.000000e+00, !dbg !26
  %114 = or i1 %113, %112, !dbg !27
  %115 = select i1 %114, float %109, float %111, !dbg !28
  %116 = bitcast float %115 to i32, !dbg !29
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 4, i32 31), !dbg !29
  %118 = bitcast i32 %117 to float, !dbg !29
  %119 = fcmp ogt float %115, %118, !dbg !23
  %120 = fcmp uno float %115, 0.000000e+00, !dbg !26
  %121 = or i1 %119, %120, !dbg !27
  %122 = select i1 %121, float %115, float %118, !dbg !28
  %123 = bitcast float %122 to i32, !dbg !29
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 2, i32 31), !dbg !29
  %125 = bitcast i32 %124 to float, !dbg !29
  %126 = fcmp ogt float %122, %125, !dbg !23
  %127 = fcmp uno float %122, 0.000000e+00, !dbg !26
  %128 = or i1 %126, %127, !dbg !27
  %129 = select i1 %128, float %122, float %125, !dbg !28
  %130 = bitcast float %129 to i32, !dbg !29
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 1, i32 31), !dbg !29
  %132 = bitcast i32 %131 to float, !dbg !29
  %133 = fcmp ogt float %129, %132, !dbg !23
  %134 = fcmp uno float %129, 0.000000e+00, !dbg !26
  %135 = or i1 %133, %134, !dbg !27
  %136 = and i32 %5, 15, !dbg !29
  %137 = icmp eq i32 %136, 0, !dbg !29
  %138 = and i1 %105, %137, !dbg !29
  %139 = select i1 %135, i32 %130, i32 %131, !dbg !28
  %140 = insertelement <1 x i32> poison, i32 %139, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %140, i1 %138) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %141 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %12, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !30
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !30
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !30
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !30
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !30
  %147 = bitcast i32 %143 to float, !dbg !30
  %148 = bitcast i32 %144 to float, !dbg !30
  %149 = bitcast i32 %145 to float, !dbg !30
  %150 = bitcast i32 %146 to float, !dbg !30
  %151 = fsub float %147, %141, !dbg !31
  %152 = fsub float %148, %141, !dbg !31
  %153 = fsub float %149, %141, !dbg !31
  %154 = fsub float %150, %141, !dbg !31
  %155 = fmul float %151, 0x3FF7154760000000, !dbg !32
  %156 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %155) #3, !dbg !32
  %157 = fmul float %152, 0x3FF7154760000000, !dbg !32
  %158 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %157) #3, !dbg !32
  %159 = fmul float %153, 0x3FF7154760000000, !dbg !32
  %160 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %159) #3, !dbg !32
  %161 = fmul float %154, 0x3FF7154760000000, !dbg !32
  %162 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %161) #3, !dbg !32
  %163 = fadd float %156, 0.000000e+00, !dbg !33
  %164 = fadd float %158, 0.000000e+00, !dbg !33
  %165 = fadd float %160, 0.000000e+00, !dbg !33
  %166 = fadd float %162, 0.000000e+00, !dbg !33
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !30
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !30
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !30
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !30
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !30
  %172 = bitcast i32 %168 to float, !dbg !30
  %173 = bitcast i32 %169 to float, !dbg !30
  %174 = bitcast i32 %170 to float, !dbg !30
  %175 = bitcast i32 %171 to float, !dbg !30
  %176 = fsub float %172, %141, !dbg !31
  %177 = fsub float %173, %141, !dbg !31
  %178 = fsub float %174, %141, !dbg !31
  %179 = fsub float %175, %141, !dbg !31
  %180 = fmul float %176, 0x3FF7154760000000, !dbg !32
  %181 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %180) #3, !dbg !32
  %182 = fmul float %177, 0x3FF7154760000000, !dbg !32
  %183 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %182) #3, !dbg !32
  %184 = fmul float %178, 0x3FF7154760000000, !dbg !32
  %185 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %184) #3, !dbg !32
  %186 = fmul float %179, 0x3FF7154760000000, !dbg !32
  %187 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %186) #3, !dbg !32
  %188 = fadd float %163, %181, !dbg !33
  %189 = fadd float %164, %183, !dbg !33
  %190 = fadd float %165, %185, !dbg !33
  %191 = fadd float %166, %187, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %192 = fadd float %188, %189, !dbg !38
  %193 = fadd float %190, %192, !dbg !38
  %194 = fadd float %191, %193, !dbg !38
  %195 = bitcast float %194 to i32, !dbg !34
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 16, i32 31), !dbg !34
  %197 = bitcast i32 %196 to float, !dbg !34
  %198 = fadd float %194, %197, !dbg !38
  %199 = bitcast float %198 to i32, !dbg !34
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 8, i32 31), !dbg !34
  %201 = bitcast i32 %200 to float, !dbg !34
  %202 = fadd float %198, %201, !dbg !38
  %203 = bitcast float %202 to i32, !dbg !34
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 4, i32 31), !dbg !34
  %205 = bitcast i32 %204 to float, !dbg !34
  %206 = fadd float %202, %205, !dbg !38
  %207 = bitcast float %206 to i32, !dbg !34
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 2, i32 31), !dbg !34
  %209 = bitcast i32 %208 to float, !dbg !34
  %210 = fadd float %206, %209, !dbg !38
  %211 = bitcast float %210 to i32, !dbg !34
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 1, i32 31), !dbg !34
  %213 = bitcast i32 %212 to float, !dbg !34
  %214 = fadd float %210, %213, !dbg !38
  %215 = bitcast float %214 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %215, i1 %99) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %216 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %107, i1 %105) #3, !dbg !34
  %217 = bitcast i32 %216 to float, !dbg !34
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 8, i32 31), !dbg !34
  %219 = bitcast i32 %218 to float, !dbg !34
  %220 = fadd float %217, %219, !dbg !38
  %221 = bitcast float %220 to i32, !dbg !34
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 4, i32 31), !dbg !34
  %223 = bitcast i32 %222 to float, !dbg !34
  %224 = fadd float %220, %223, !dbg !38
  %225 = bitcast float %224 to i32, !dbg !34
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 2, i32 31), !dbg !34
  %227 = bitcast i32 %226 to float, !dbg !34
  %228 = fadd float %224, %227, !dbg !38
  %229 = bitcast float %228 to i32, !dbg !34
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 1, i32 31), !dbg !34
  %231 = bitcast i32 %230 to float, !dbg !34
  %232 = fadd float %228, %231, !dbg !38
  %233 = bitcast float %232 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %233, i1 %138) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %234 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %12, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !40
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !40
  %237 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !40
  %238 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !40
  %239 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !40
  %240 = bitcast i32 %236 to float, !dbg !40
  %241 = bitcast i32 %237 to float, !dbg !40
  %242 = bitcast i32 %238 to float, !dbg !40
  %243 = bitcast i32 %239 to float, !dbg !40
  %244 = fsub float %240, %141, !dbg !41
  %245 = fsub float %241, %141, !dbg !41
  %246 = fsub float %242, %141, !dbg !41
  %247 = fsub float %243, %141, !dbg !41
  %248 = fmul float %244, 0x3FF7154760000000, !dbg !42
  %249 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %248) #3, !dbg !42
  %250 = fmul float %245, 0x3FF7154760000000, !dbg !42
  %251 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %250) #3, !dbg !42
  %252 = fmul float %246, 0x3FF7154760000000, !dbg !42
  %253 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %252) #3, !dbg !42
  %254 = fmul float %247, 0x3FF7154760000000, !dbg !42
  %255 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %254) #3, !dbg !42
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %249, float %234) #3, !dbg !43
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %251, float %234) #3, !dbg !43
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %253, float %234) #3, !dbg !43
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %255, float %234) #3, !dbg !43
  %260 = bitcast float %256 to i32, !dbg !44
  %261 = bitcast float %257 to i32, !dbg !44
  %262 = bitcast float %258 to i32, !dbg !44
  %263 = bitcast float %259 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %260, i32 %261, i32 %262, i32 %263, ptr addrspace(1) %12, i1 true) #3, !dbg !44
  %264 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !40
  %265 = extractvalue { i32, i32, i32, i32 } %264, 0, !dbg !40
  %266 = extractvalue { i32, i32, i32, i32 } %264, 1, !dbg !40
  %267 = extractvalue { i32, i32, i32, i32 } %264, 2, !dbg !40
  %268 = extractvalue { i32, i32, i32, i32 } %264, 3, !dbg !40
  %269 = bitcast i32 %265 to float, !dbg !40
  %270 = bitcast i32 %266 to float, !dbg !40
  %271 = bitcast i32 %267 to float, !dbg !40
  %272 = bitcast i32 %268 to float, !dbg !40
  %273 = fsub float %269, %141, !dbg !41
  %274 = fsub float %270, %141, !dbg !41
  %275 = fsub float %271, %141, !dbg !41
  %276 = fsub float %272, %141, !dbg !41
  %277 = fmul float %273, 0x3FF7154760000000, !dbg !42
  %278 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %277) #3, !dbg !42
  %279 = fmul float %274, 0x3FF7154760000000, !dbg !42
  %280 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %279) #3, !dbg !42
  %281 = fmul float %275, 0x3FF7154760000000, !dbg !42
  %282 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %281) #3, !dbg !42
  %283 = fmul float %276, 0x3FF7154760000000, !dbg !42
  %284 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %283) #3, !dbg !42
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %278, float %234) #3, !dbg !43
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %280, float %234) #3, !dbg !43
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %282, float %234) #3, !dbg !43
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %284, float %234) #3, !dbg !43
  %289 = bitcast float %285 to i32, !dbg !44
  %290 = bitcast float %286 to i32, !dbg !44
  %291 = bitcast float %287 to i32, !dbg !44
  %292 = bitcast float %288 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %289, i32 %290, i32 %291, i32 %292, ptr addrspace(1) %22, i1 true) #3, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cc3gl3iqjyxnc7gk3j35p2vncofz4h2c7mssbff2cbanp4emzkmg.py", directory: "inductor_cache/c3")
!4 = !{ptr @triton_red_fused__softmax_1, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__softmax_1, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__softmax_1", linkageName: "triton_red_fused__softmax_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 33, scope: !7)
!12 = !DILocation(line: 32, column: 48, scope: !7)
!13 = !DILocation(line: 32, column: 38, scope: !7)
!14 = !DILocation(line: 32, column: 53, scope: !7)
!15 = !DILocation(line: 32, column: 43, scope: !7)
!16 = !DILocation(line: 118, column: 15, scope: !17, inlinedAt: !19)
!17 = distinct !DILexicalBlockFile(scope: !7, file: !18, discriminator: 0)
!18 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!19 = !DILocation(line: 34, column: 45, scope: !7)
!20 = !DILocation(line: 120, column: 21, scope: !17, inlinedAt: !19)
!21 = !DILocation(line: 120, column: 16, scope: !17, inlinedAt: !19)
!22 = !DILocation(line: 121, column: 29, scope: !17, inlinedAt: !19)
!23 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !25)
!24 = distinct !DILexicalBlockFile(scope: !17, file: !18, discriminator: 0)
!25 = !DILocation(line: 36, column: 38, scope: !7)
!26 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !25)
!27 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !25)
!28 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !25)
!29 = !DILocation(line: 131, column: 29, scope: !17, inlinedAt: !25)
!30 = !DILocation(line: 42, column: 53, scope: !7)
!31 = !DILocation(line: 43, column: 22, scope: !7)
!32 = !DILocation(line: 44, column: 27, scope: !7)
!33 = !DILocation(line: 46, column: 23, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = !DILocation(line: 48, column: 25, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !37)
!39 = distinct !DILexicalBlockFile(scope: !35, file: !36, discriminator: 0)
!40 = !DILocation(line: 53, column: 54, scope: !7)
!41 = !DILocation(line: 54, column: 24, scope: !7)
!42 = !DILocation(line: 55, column: 28, scope: !7)
!43 = !DILocation(line: 56, column: 24, scope: !7)
!44 = !DILocation(line: 57, column: 54, scope: !7)
!45 = !DILocation(line: 49, column: 4, scope: !7)
