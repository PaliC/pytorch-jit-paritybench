; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_log_mse_loss_mul_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = and i32 %5, 63, !dbg !10
  %9 = or disjoint i32 %8, 64, !dbg !10
  %10 = or disjoint i32 %8, 128, !dbg !10
  %11 = or disjoint i32 %8, 192, !dbg !10
  %.lhs.trunc = trunc nuw nsw i32 %8 to i8, !dbg !11
  %12 = udiv i8 %.lhs.trunc, 3, !dbg !11
  %.zext = zext nneg i8 %12 to i32, !dbg !11
  %.lhs.trunc31 = trunc nuw nsw i32 %9 to i8, !dbg !11
  %13 = udiv i8 %.lhs.trunc31, 3, !dbg !11
  %.zext32 = zext nneg i8 %13 to i32, !dbg !11
  %.lhs.trunc33 = trunc nuw i32 %10 to i8, !dbg !11
  %14 = udiv i8 %.lhs.trunc33, 3, !dbg !11
  %.zext34 = zext nneg i8 %14 to i32, !dbg !11
  %.lhs.trunc35 = trunc nuw i32 %11 to i8, !dbg !11
  %15 = udiv i8 %.lhs.trunc35, 3, !dbg !11
  %.zext36 = zext nneg i8 %15 to i32, !dbg !11
  %16 = add nuw nsw i32 %8, %.zext, !dbg !12
  %17 = add nuw nsw i32 %9, %.zext32, !dbg !12
  %18 = add nuw nsw i32 %10, %.zext34, !dbg !12
  %19 = add nuw nsw i32 %11, %.zext36, !dbg !12
  %20 = zext nneg i32 %16 to i64, !dbg !13
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !13
  %22 = zext nneg i32 %17 to i64, !dbg !13
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !13
  %24 = zext nneg i32 %18 to i64, !dbg !13
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !13
  %26 = zext nneg i32 %19 to i64, !dbg !13
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !13
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 true, i32 0, i1 true) #4, !dbg !14
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 true, i32 0, i1 true) #4, !dbg !14
  %30 = bitcast i32 %29 to float, !dbg !14
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 true, i32 0, i1 true) #4, !dbg !14
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 false, i32 0, i1 false) #4, !dbg !14
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !15
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !15
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !15
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !15
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 true, i32 0, i1 true) #4, !dbg !16
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 true, i32 0, i1 true) #4, !dbg !16
  %39 = bitcast i32 %38 to float, !dbg !16
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 true, i32 0, i1 true) #4, !dbg !16
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 false, i32 0, i1 false) #4, !dbg !16
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %0, i1 true) #4, !dbg !17
  %43 = bitcast i32 %42 to float, !dbg !17
  %44 = fsub float %30, %39, !dbg !18
  %45 = fmul float %44, %44, !dbg !19
  %46 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !14
  %47 = insertelement <2 x i32> %46, i32 %31, i64 1, !dbg !14
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !14
  %49 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !16
  %50 = insertelement <2 x i32> %49, i32 %40, i64 1, !dbg !16
  %51 = bitcast <2 x i32> %50 to <2 x float>, !dbg !16
  %52 = fsub <2 x float> %48, %51, !dbg !18
  %53 = fmul <2 x float> %52, %52, !dbg !19
  %54 = extractelement <2 x float> %53, i64 0, !dbg !20
  %55 = fadd float %54, %45, !dbg !20
  %56 = extractelement <2 x float> %53, i64 1, !dbg !20
  %57 = fadd float %55, %56, !dbg !20
  %58 = bitcast float %57 to i32, !dbg !25
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 16, i32 31), !dbg !25
  %60 = bitcast i32 %59 to float, !dbg !25
  %61 = fadd float %57, %60, !dbg !20
  %62 = bitcast float %61 to i32, !dbg !25
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 8, i32 31), !dbg !25
  %64 = bitcast i32 %63 to float, !dbg !25
  %65 = fadd float %61, %64, !dbg !20
  %66 = bitcast float %65 to i32, !dbg !25
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 4, i32 31), !dbg !25
  %68 = bitcast i32 %67 to float, !dbg !25
  %69 = fadd float %65, %68, !dbg !20
  %70 = bitcast float %69 to i32, !dbg !25
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !25
  %72 = bitcast i32 %71 to float, !dbg !25
  %73 = fadd float %69, %72, !dbg !20
  %74 = bitcast float %73 to i32, !dbg !25
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !25
  %76 = bitcast i32 %75 to float, !dbg !25
  %77 = fadd float %73, %76, !dbg !20
  %78 = icmp eq i32 %6, 0, !dbg !25
  %79 = and i32 %7, 1, !dbg !25
  %80 = zext nneg i32 %79 to i64, !dbg !25
  %81 = getelementptr float, ptr addrspace(3) @global_smem, i64 %80, !dbg !25
  %82 = bitcast float %77 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 %78) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %83 = icmp slt i32 %5, 2, !dbg !25
  %84 = sext i32 %5 to i64, !dbg !25
  %85 = getelementptr float, ptr addrspace(3) @global_smem, i64 %84, !dbg !25
  %86 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %85, i1 %83) #4, !dbg !25
  %87 = bitcast i32 %86 to float, !dbg !25
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !25
  %89 = bitcast i32 %88 to float, !dbg !25
  %90 = fadd float %87, %89, !dbg !20
  %91 = and i32 %5, 1, !dbg !25
  %92 = icmp eq i32 %91, 0, !dbg !25
  %93 = and i1 %83, %92, !dbg !25
  %94 = bitcast float %90 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %94, i1 %93) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %95 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !25
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float 6.400000e+01) #4, !dbg !26
  %97 = fadd float %96, 1.000000e+00, !dbg !27
  %98 = fcmp olt float %97, 0x3810000000000000, !dbg !28
  %99 = fmul float %97, 0x4160000000000000, !dbg !28
  %.02.i = select i1 %98, float %99, float %97, !dbg !28
  %i.i.0.i = select i1 %98, float -2.300000e+01, float 0.000000e+00, !dbg !28
  %100 = bitcast float %.02.i to i32, !dbg !28
  %101 = add i32 %100, -1059760811, !dbg !28
  %102 = and i32 %101, -8388608, !dbg !28
  %103 = sub i32 %100, %102, !dbg !28
  %104 = bitcast i32 %103 to float, !dbg !28
  %105 = sitofp i32 %102 to float, !dbg !28
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i = icmp eq i32 %106, 0, !dbg !28
  %107 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %105, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !28
  %108 = tail call float @llvm.nvvm.fma.rn.f(float %105, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !28
  %.08.i = select i1 %.not.i, float %108, float %107, !dbg !28
  %109 = fadd float %104, -1.000000e+00, !dbg !28
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not1.i = icmp eq i32 %110, 0, !dbg !28
  %111 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %109, float 0x3FC2073EC0000000) #4, !dbg !28
  %112 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %109, float 0x3FC2073EC0000000) #4, !dbg !28
  %.010.i = select i1 %.not1.i, float %112, float %111, !dbg !28
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not2.i = icmp eq i32 %113, 0, !dbg !28
  %114 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %109, float 0xBFBF19B980000000) #4, !dbg !28
  %115 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %109, float 0xBFBF19B980000000) #4, !dbg !28
  %.011.i = select i1 %.not2.i, float %115, float %114, !dbg !28
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not3.i = icmp eq i32 %116, 0, !dbg !28
  %117 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %109, float 0x3FC1E52AA0000000) #4, !dbg !28
  %118 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %109, float 0x3FC1E52AA0000000) #4, !dbg !28
  %.012.i = select i1 %.not3.i, float %118, float %117, !dbg !28
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not4.i = icmp eq i32 %119, 0, !dbg !28
  %120 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %109, float 0xBFC55B1720000000) #4, !dbg !28
  %121 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %109, float 0xBFC55B1720000000) #4, !dbg !28
  %.09.i = select i1 %.not4.i, float %121, float %120, !dbg !28
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not5.i = icmp eq i32 %122, 0, !dbg !28
  %123 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %109, float 0x3FC99DA160000000) #4, !dbg !28
  %124 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %109, float 0x3FC99DA160000000) #4, !dbg !28
  %.05.i = select i1 %.not5.i, float %124, float %123, !dbg !28
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not6.i = icmp eq i32 %125, 0, !dbg !28
  %126 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %109, float 0xBFCFFFE440000000) #4, !dbg !28
  %127 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %109, float 0xBFCFFFE440000000) #4, !dbg !28
  %.01.i = select i1 %.not6.i, float %127, float %126, !dbg !28
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not7.i = icmp eq i32 %128, 0, !dbg !28
  %129 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %109, float 0x3FD5554F00000000) #4, !dbg !28
  %130 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %109, float 0x3FD5554F00000000) #4, !dbg !28
  %.0.i = select i1 %.not7.i, float %130, float %129, !dbg !28
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not8.i = icmp eq i32 %131, 0, !dbg !28
  %132 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %109, float -5.000000e-01) #4, !dbg !28
  %133 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %109, float -5.000000e-01) #4, !dbg !28
  %.07.i = select i1 %.not8.i, float %133, float %132, !dbg !28
  %134 = fmul float %109, %.07.i, !dbg !28
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not9.i = icmp eq i32 %135, 0, !dbg !28
  %136 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %134, float %109, float %109) #4, !dbg !28
  %137 = tail call float @llvm.nvvm.fma.rn.f(float %134, float %109, float %109) #4, !dbg !28
  %.06.i = select i1 %.not9.i, float %137, float %136, !dbg !28
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not10.i = icmp eq i32 %138, 0, !dbg !28
  %139 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !28
  %140 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !28
  %.04.i = select i1 %.not10.i, float %140, float %139, !dbg !28
  %141 = icmp ugt i32 %100, 2139095039, !dbg !28
  br i1 %141, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !28

__nv_fmaf_rn.exit.i.i:                            ; preds = %4
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not11.i = icmp eq i32 %142, 0, !dbg !28
  %143 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !28
  %144 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !28
  %.03.i = select i1 %.not11.i, float %144, float %143, !dbg !28
  br label %__nv_logf.exit, !dbg !28

__nv_logf.exit:                                   ; preds = %4, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %4 ], !dbg !28
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float 1.920000e+02) #4, !dbg !29
  %146 = fadd float %145, 1.000000e+00, !dbg !30
  %147 = fcmp olt float %146, 0x3810000000000000, !dbg !31
  %148 = fmul float %146, 0x4160000000000000, !dbg !31
  %.02.i1 = select i1 %147, float %148, float %146, !dbg !31
  %i.i.0.i2 = select i1 %147, float -2.300000e+01, float 0.000000e+00, !dbg !31
  %149 = bitcast float %.02.i1 to i32, !dbg !31
  %150 = add i32 %149, -1059760811, !dbg !31
  %151 = and i32 %150, -8388608, !dbg !31
  %152 = sub i32 %149, %151, !dbg !31
  %153 = bitcast i32 %152 to float, !dbg !31
  %154 = sitofp i32 %151 to float, !dbg !31
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i3 = icmp eq i32 %155, 0, !dbg !31
  %156 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %154, float 0x3E80000000000000, float %i.i.0.i2) #4, !dbg !31
  %157 = tail call float @llvm.nvvm.fma.rn.f(float %154, float 0x3E80000000000000, float %i.i.0.i2) #4, !dbg !31
  %.08.i4 = select i1 %.not.i3, float %157, float %156, !dbg !31
  %158 = fadd float %153, -1.000000e+00, !dbg !31
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not1.i5 = icmp eq i32 %159, 0, !dbg !31
  %160 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %158, float 0x3FC2073EC0000000) #4, !dbg !31
  %161 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %158, float 0x3FC2073EC0000000) #4, !dbg !31
  %.010.i6 = select i1 %.not1.i5, float %161, float %160, !dbg !31
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not2.i7 = icmp eq i32 %162, 0, !dbg !31
  %163 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i6, float %158, float 0xBFBF19B980000000) #4, !dbg !31
  %164 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i6, float %158, float 0xBFBF19B980000000) #4, !dbg !31
  %.011.i8 = select i1 %.not2.i7, float %164, float %163, !dbg !31
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not3.i9 = icmp eq i32 %165, 0, !dbg !31
  %166 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i8, float %158, float 0x3FC1E52AA0000000) #4, !dbg !31
  %167 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i8, float %158, float 0x3FC1E52AA0000000) #4, !dbg !31
  %.012.i10 = select i1 %.not3.i9, float %167, float %166, !dbg !31
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not4.i11 = icmp eq i32 %168, 0, !dbg !31
  %169 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i10, float %158, float 0xBFC55B1720000000) #4, !dbg !31
  %170 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i10, float %158, float 0xBFC55B1720000000) #4, !dbg !31
  %.09.i12 = select i1 %.not4.i11, float %170, float %169, !dbg !31
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not5.i13 = icmp eq i32 %171, 0, !dbg !31
  %172 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i12, float %158, float 0x3FC99DA160000000) #4, !dbg !31
  %173 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i12, float %158, float 0x3FC99DA160000000) #4, !dbg !31
  %.05.i14 = select i1 %.not5.i13, float %173, float %172, !dbg !31
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not6.i15 = icmp eq i32 %174, 0, !dbg !31
  %175 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i14, float %158, float 0xBFCFFFE440000000) #4, !dbg !31
  %176 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i14, float %158, float 0xBFCFFFE440000000) #4, !dbg !31
  %.01.i16 = select i1 %.not6.i15, float %176, float %175, !dbg !31
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not7.i17 = icmp eq i32 %177, 0, !dbg !31
  %178 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i16, float %158, float 0x3FD5554F00000000) #4, !dbg !31
  %179 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i16, float %158, float 0x3FD5554F00000000) #4, !dbg !31
  %.0.i18 = select i1 %.not7.i17, float %179, float %178, !dbg !31
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not8.i19 = icmp eq i32 %180, 0, !dbg !31
  %181 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i18, float %158, float -5.000000e-01) #4, !dbg !31
  %182 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i18, float %158, float -5.000000e-01) #4, !dbg !31
  %.07.i20 = select i1 %.not8.i19, float %182, float %181, !dbg !31
  %183 = fmul float %158, %.07.i20, !dbg !31
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not9.i21 = icmp eq i32 %184, 0, !dbg !31
  %185 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %183, float %158, float %158) #4, !dbg !31
  %186 = tail call float @llvm.nvvm.fma.rn.f(float %183, float %158, float %158) #4, !dbg !31
  %.06.i22 = select i1 %.not9.i21, float %186, float %185, !dbg !31
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not10.i23 = icmp eq i32 %187, 0, !dbg !31
  %188 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i4, float 0x3FE62E4300000000, float %.06.i22) #4, !dbg !31
  %189 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i4, float 0x3FE62E4300000000, float %.06.i22) #4, !dbg !31
  %.04.i24 = select i1 %.not10.i23, float %189, float %188, !dbg !31
  %190 = icmp ugt i32 %149, 2139095039, !dbg !31
  br i1 %190, label %__nv_fmaf_rn.exit.i.i27, label %__nv_logf.exit30, !dbg !31

__nv_fmaf_rn.exit.i.i27:                          ; preds = %__nv_logf.exit
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not11.i28 = icmp eq i32 %191, 0, !dbg !31
  %192 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i1, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !31
  %193 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i1, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !31
  %.03.i29 = select i1 %.not11.i28, float %193, float %192, !dbg !31
  br label %__nv_logf.exit30, !dbg !31

__nv_logf.exit30:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i27
  %r.i.0.i25 = phi float [ %.03.i29, %__nv_fmaf_rn.exit.i.i27 ], [ %.04.i24, %__nv_logf.exit ], !dbg !31
  %194 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !28
  %r.i.1.i = select i1 %194, float 0xFFF0000000000000, float %r.i.0.i, !dbg !28
  %195 = fcmp oeq float %.02.i1, 0.000000e+00, !dbg !31
  %196 = fmul float %r.i.0.i25, 0x3FD3333340000000, !dbg !32
  %197 = select i1 %195, float 0xFFF0000000000000, float %196, !dbg !31
  %198 = fadd float %r.i.1.i, %197, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %199 = icmp eq i32 %8, 0, !dbg !35
  %200 = bitcast float %198 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %200, ptr addrspace(1) %0, i1 %199) #4, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3bvm3xcgpigixlwfzwjxiiwk3aenrjznx66c5ehbiod3xvc2mpn.py", directory: "inductor_cache/3b")
!4 = !{ptr @triton_per_fused_add_log_mse_loss_mul_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_log_mse_loss_mul_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_log_mse_loss_mul_1", linkageName: "triton_per_fused_add_log_mse_loss_mul_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 19, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 31, column: 30, scope: !7)
!14 = !DILocation(line: 31, column: 42, scope: !7)
!15 = !DILocation(line: 32, column: 30, scope: !7)
!16 = !DILocation(line: 32, column: 42, scope: !7)
!17 = !DILocation(line: 33, column: 19, scope: !7)
!18 = !DILocation(line: 35, column: 18, scope: !7)
!19 = !DILocation(line: 36, column: 18, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 39, column: 24, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 41, column: 19, scope: !7)
!27 = !DILocation(line: 43, column: 20, scope: !7)
!28 = !DILocation(line: 44, column: 24, scope: !7)
!29 = !DILocation(line: 46, column: 19, scope: !7)
!30 = !DILocation(line: 47, column: 20, scope: !7)
!31 = !DILocation(line: 48, column: 24, scope: !7)
!32 = !DILocation(line: 50, column: 20, scope: !7)
!33 = !DILocation(line: 51, column: 20, scope: !7)
!34 = !DILocation(line: 52, column: 4, scope: !7)
!35 = !DILocation(line: 53, column: 71, scope: !7)
!36 = !DILocation(line: 53, column: 4, scope: !7)
