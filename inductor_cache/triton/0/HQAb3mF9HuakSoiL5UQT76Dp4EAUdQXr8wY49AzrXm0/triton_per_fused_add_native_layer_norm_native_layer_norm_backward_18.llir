; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = and i32 %13, 31, !dbg !11
  %15 = lshr i32 %13, 5, !dbg !11
  %16 = shl i32 %13, 2, !dbg !11
  %17 = and i32 %16, 1020, !dbg !11
  %18 = icmp samesign ult i32 %17, 768, !dbg !12
  %19 = mul i32 %12, 768, !dbg !13
  %20 = add i32 %19, %17, !dbg !14
  %21 = sext i32 %20 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !15
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !16
  %28 = bitcast i32 %24 to float, !dbg !16
  %29 = bitcast i32 %25 to float, !dbg !16
  %30 = bitcast i32 %26 to float, !dbg !16
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !17
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !18
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !18
  %37 = bitcast i32 %35 to float, !dbg !18
  %38 = zext nneg i32 %17 to i64, !dbg !19
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !19
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !20
  %45 = bitcast i32 %43 to float, !dbg !20
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !21
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !22
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !22
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !23
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !25
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !26
  %60 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !27
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !28
  %62 = fadd float %37, %45, !dbg !29
  %63 = fadd float %62, %30, !dbg !30
  %64 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !18
  %65 = insertelement <2 x i32> %64, i32 %48, i64 1, !dbg !18
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !18
  %67 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !20
  %68 = insertelement <2 x i32> %67, i32 %54, i64 1, !dbg !20
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !20
  %70 = fadd <2 x float> %66, %69, !dbg !29
  %71 = extractelement <2 x float> %70, i64 0, !dbg !30
  %72 = fadd float %71, %28, !dbg !30
  %73 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !18
  %74 = insertelement <2 x i32> %73, i32 %49, i64 1, !dbg !18
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !18
  %76 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !20
  %77 = insertelement <2 x i32> %76, i32 %55, i64 1, !dbg !20
  %78 = bitcast <2 x i32> %77 to <2 x float>, !dbg !20
  %79 = fadd <2 x float> %75, %78, !dbg !29
  %80 = extractelement <2 x float> %79, i64 0, !dbg !30
  %81 = fadd float %80, %29, !dbg !30
  %82 = extractelement <2 x float> %70, i64 1, !dbg !31
  %83 = fadd float %72, %82, !dbg !31
  %84 = extractelement <2 x float> %79, i64 1, !dbg !31
  %85 = fadd float %81, %84, !dbg !31
  %86 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !18
  %87 = insertelement <2 x i32> %86, i32 %50, i64 1, !dbg !18
  %88 = bitcast <2 x i32> %87 to <2 x float>, !dbg !18
  %89 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !20
  %90 = insertelement <2 x i32> %89, i32 %56, i64 1, !dbg !20
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !20
  %92 = fadd <2 x float> %88, %91, !dbg !29
  %93 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !30
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !30
  %95 = insertelement <2 x float> %94, float %63, i64 1, !dbg !30
  %96 = fadd <2 x float> %92, %95, !dbg !30
  %97 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !32
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !32
  %99 = insertelement <2 x float> %98, float %83, i64 1, !dbg !32
  %100 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !32
  %101 = bitcast <2 x i32> %100 to <2 x float>, !dbg !32
  %102 = insertelement <2 x float> %101, float %85, i64 1, !dbg !32
  %103 = fadd <2 x float> %99, %102, !dbg !32
  %104 = fadd <2 x float> %96, %103, !dbg !31
  %105 = extractelement <2 x float> %104, i64 0, !dbg !33
  %106 = extractelement <2 x float> %104, i64 1, !dbg !33
  %107 = fadd float %105, %106, !dbg !33
  %108 = select i1 %18, float %107, float 0.000000e+00, !dbg !33
  %109 = bitcast float %108 to i32, !dbg !38
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 16, i32 31), !dbg !38
  %111 = bitcast i32 %110 to float, !dbg !38
  %112 = fadd float %108, %111, !dbg !33
  %113 = bitcast float %112 to i32, !dbg !38
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 8, i32 31), !dbg !38
  %115 = bitcast i32 %114 to float, !dbg !38
  %116 = fadd float %112, %115, !dbg !33
  %117 = bitcast float %116 to i32, !dbg !38
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 4, i32 31), !dbg !38
  %119 = bitcast i32 %118 to float, !dbg !38
  %120 = fadd float %116, %119, !dbg !33
  %121 = bitcast float %120 to i32, !dbg !38
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 2, i32 31), !dbg !38
  %123 = bitcast i32 %122 to float, !dbg !38
  %124 = fadd float %120, %123, !dbg !33
  %125 = bitcast float %124 to i32, !dbg !38
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 1, i32 31), !dbg !38
  %127 = bitcast i32 %126 to float, !dbg !38
  %128 = fadd float %124, %127, !dbg !33
  %129 = icmp eq i32 %14, 0, !dbg !38
  %130 = and i32 %15, 7, !dbg !38
  %131 = zext nneg i32 %130 to i64, !dbg !38
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i64 %131, !dbg !38
  %133 = bitcast float %128 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 %129) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %134 = icmp slt i32 %13, 8, !dbg !38
  %135 = sext i32 %13 to i64, !dbg !38
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i64 %135, !dbg !38
  %137 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %136, i1 %134) #5, !dbg !38
  %138 = bitcast i32 %137 to float, !dbg !38
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 4, i32 31), !dbg !38
  %140 = bitcast i32 %139 to float, !dbg !38
  %141 = fadd float %138, %140, !dbg !33
  %142 = bitcast float %141 to i32, !dbg !38
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 2, i32 31), !dbg !38
  %144 = bitcast i32 %143 to float, !dbg !38
  %145 = fadd float %141, %144, !dbg !33
  %146 = bitcast float %145 to i32, !dbg !38
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 1, i32 31), !dbg !38
  %148 = bitcast i32 %147 to float, !dbg !38
  %149 = fadd float %145, %148, !dbg !33
  %150 = and i32 %13, 7, !dbg !38
  %151 = icmp eq i32 %150, 0, !dbg !38
  %152 = and i1 %134, %151, !dbg !38
  %153 = bitcast float %149 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %153, i1 %152) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %154 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !38
  %155 = fadd float %154, 0.000000e+00, !dbg !39
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %155, float 7.680000e+02) #5, !dbg !43
  %157 = fsub float %83, %156, !dbg !44
  %158 = fsub float %85, %156, !dbg !44
  %159 = extractelement <2 x float> %96, i64 1, !dbg !44
  %160 = fsub float %159, %156, !dbg !44
  %161 = fsub float %105, %156, !dbg !44
  %162 = fmul float %157, %157, !dbg !45
  %163 = fmul float %158, %158, !dbg !45
  %164 = fmul float %160, %160, !dbg !45
  %165 = fmul float %161, %161, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %166 = fadd float %162, %163, !dbg !48
  %167 = fadd float %164, %166, !dbg !48
  %168 = fadd float %165, %167, !dbg !48
  %169 = select i1 %18, float %168, float 0.000000e+00, !dbg !48
  %170 = bitcast float %169 to i32, !dbg !46
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 16, i32 31), !dbg !46
  %172 = bitcast i32 %171 to float, !dbg !46
  %173 = fadd float %169, %172, !dbg !48
  %174 = bitcast float %173 to i32, !dbg !46
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 8, i32 31), !dbg !46
  %176 = bitcast i32 %175 to float, !dbg !46
  %177 = fadd float %173, %176, !dbg !48
  %178 = bitcast float %177 to i32, !dbg !46
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 4, i32 31), !dbg !46
  %180 = bitcast i32 %179 to float, !dbg !46
  %181 = fadd float %177, %180, !dbg !48
  %182 = bitcast float %181 to i32, !dbg !46
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 2, i32 31), !dbg !46
  %184 = bitcast i32 %183 to float, !dbg !46
  %185 = fadd float %181, %184, !dbg !48
  %186 = bitcast float %185 to i32, !dbg !46
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 1, i32 31), !dbg !46
  %188 = bitcast i32 %187 to float, !dbg !46
  %189 = fadd float %185, %188, !dbg !48
  %190 = bitcast float %189 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %190, i1 %129) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %191 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %136, i1 %134) #5, !dbg !46
  %192 = bitcast i32 %191 to float, !dbg !46
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 4, i32 31), !dbg !46
  %194 = bitcast i32 %193 to float, !dbg !46
  %195 = fadd float %192, %194, !dbg !48
  %196 = bitcast float %195 to i32, !dbg !46
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 2, i32 31), !dbg !46
  %198 = bitcast i32 %197 to float, !dbg !46
  %199 = fadd float %195, %198, !dbg !48
  %200 = bitcast float %199 to i32, !dbg !46
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 1, i32 31), !dbg !46
  %202 = bitcast i32 %201 to float, !dbg !46
  %203 = fadd float %199, %202, !dbg !48
  %204 = bitcast float %203 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %204, i1 %152) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %205 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !46
  %206 = fadd float %205, 0.000000e+00, !dbg !49
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float 7.680000e+02) #5, !dbg !51
  %208 = fadd float %207, 0x3EE4F8B580000000, !dbg !52
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i = icmp eq i32 %209, 0, !dbg !53
  br i1 %.not.i, label %212, label %210, !dbg !53

210:                                              ; preds = %11
  %211 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %208), !dbg !53
  br label %__nv_rsqrtf.exit, !dbg !53

212:                                              ; preds = %11
  %213 = tail call float @llvm.nvvm.rsqrt.approx.f(float %208), !dbg !53
  br label %__nv_rsqrtf.exit, !dbg !53

__nv_rsqrtf.exit:                                 ; preds = %210, %212
  %.0.i = phi float [ %211, %210 ], [ %213, %212 ], !dbg !53
  %214 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !28
  %215 = bitcast i32 %214 to float, !dbg !28
  %216 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !28
  %217 = bitcast i32 %216 to float, !dbg !28
  %218 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !28
  %219 = bitcast i32 %218 to float, !dbg !28
  %220 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !28
  %221 = bitcast i32 %220 to float, !dbg !28
  %222 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !26
  %223 = bitcast i32 %222 to float, !dbg !26
  %224 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !26
  %225 = bitcast i32 %224 to float, !dbg !26
  %226 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !26
  %227 = bitcast i32 %226 to float, !dbg !26
  %228 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !26
  %229 = bitcast i32 %228 to float, !dbg !26
  %230 = fmul float %157, %.0.i, !dbg !54
  %231 = fmul float %158, %.0.i, !dbg !54
  %232 = fmul float %160, %.0.i, !dbg !54
  %233 = fmul float %161, %.0.i, !dbg !54
  %234 = fmul float %230, %229, !dbg !55
  %235 = fmul float %231, %227, !dbg !55
  %236 = fmul float %232, %225, !dbg !55
  %237 = fmul float %233, %223, !dbg !55
  %238 = fadd float %234, %221, !dbg !56
  %239 = fadd float %235, %219, !dbg !56
  %240 = fadd float %236, %217, !dbg !56
  %241 = fadd float %237, %215, !dbg !56
  %242 = fmul float %.0.i, 0x3F55555560000000, !dbg !57
  %243 = bitcast float %230 to i32, !dbg !58
  %244 = bitcast float %231 to i32, !dbg !58
  %245 = bitcast float %232 to i32, !dbg !58
  %246 = bitcast float %233 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %243, i32 %244, i32 %245, i32 %246, ptr addrspace(1) %22, i1 %18) #5, !dbg !58
  %247 = getelementptr float, ptr addrspace(1) %7, i64 %21, !dbg !59
  %248 = bitcast float %238 to i32, !dbg !60
  %249 = bitcast float %239 to i32, !dbg !60
  %250 = bitcast float %240 to i32, !dbg !60
  %251 = bitcast float %241 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %248, i32 %249, i32 %250, i32 %251, ptr addrspace(1) %247, i1 %18) #5, !dbg !60
  %252 = sext i32 %12 to i64, !dbg !61
  %253 = getelementptr float, ptr addrspace(1) %8, i64 %252, !dbg !61
  %urem = and i32 %13, 255, !dbg !62
  %254 = icmp eq i32 %urem, 0, !dbg !62
  %255 = bitcast float %242 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %255, ptr addrspace(1) %253, i1 %254) #5, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuiwn7bbbhbt74uqvcz2kwpfxnkt7xhh22i3ss75hhhvy5woqs7h.py", directory: "inductor_cache/ui")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_18, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_18, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_18", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 29, column: 21, scope: !7)
!13 = !DILocation(line: 32, column: 43, scope: !7)
!14 = !DILocation(line: 32, column: 39, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 48, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 44, scope: !7)
!19 = !DILocation(line: 34, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 35, column: 30, scope: !7)
!22 = !DILocation(line: 35, column: 44, scope: !7)
!23 = !DILocation(line: 36, column: 30, scope: !7)
!24 = !DILocation(line: 36, column: 35, scope: !7)
!25 = !DILocation(line: 37, column: 31, scope: !7)
!26 = !DILocation(line: 37, column: 36, scope: !7)
!27 = !DILocation(line: 38, column: 31, scope: !7)
!28 = !DILocation(line: 38, column: 36, scope: !7)
!29 = !DILocation(line: 39, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 18, scope: !7)
!31 = !DILocation(line: 42, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !37)
!34 = distinct !DILexicalBlockFile(scope: !36, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!36 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!37 = !DILocation(line: 47, column: 59, scope: !7)
!38 = !DILocation(line: 267, column: 36, scope: !36, inlinedAt: !37)
!39 = !DILocation(line: 73, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 47, column: 45, scope: !7)
!43 = !DILocation(line: 50, column: 20, scope: !7)
!44 = !DILocation(line: 51, column: 19, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 267, column: 36, scope: !36, inlinedAt: !47)
!47 = !DILocation(line: 55, column: 59, scope: !7)
!48 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !47)
!49 = !DILocation(line: 73, column: 15, scope: !40, inlinedAt: !50)
!50 = !DILocation(line: 55, column: 45, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 60, column: 20, scope: !7)
!53 = !DILocation(line: 61, column: 28, scope: !7)
!54 = !DILocation(line: 62, column: 20, scope: !7)
!55 = !DILocation(line: 63, column: 20, scope: !7)
!56 = !DILocation(line: 64, column: 20, scope: !7)
!57 = !DILocation(line: 66, column: 20, scope: !7)
!58 = !DILocation(line: 67, column: 49, scope: !7)
!59 = !DILocation(line: 68, column: 25, scope: !7)
!60 = !DILocation(line: 68, column: 46, scope: !7)
!61 = !DILocation(line: 69, column: 25, scope: !7)
!62 = !DILocation(line: 69, column: 37, scope: !7)
!63 = !DILocation(line: 69, column: 4, scope: !7)
