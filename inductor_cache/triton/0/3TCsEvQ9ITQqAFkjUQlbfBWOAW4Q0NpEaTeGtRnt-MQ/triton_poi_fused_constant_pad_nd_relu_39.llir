; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_constant_pad_nd_relu_39(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %14 = or disjoint i32 %9, 513, !dbg !13
  %15 = or disjoint i32 %9, 514, !dbg !13
  %16 = or disjoint i32 %9, 515, !dbg !13
  %17 = icmp slt i32 %9, 165888, !dbg !14
  %18 = icmp slt i32 %13, 165888, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %19 = sdiv i32 %.frozen, 18, !dbg !15
  %.frozen1 = freeze i32 %11, !dbg !15
  %20 = sdiv i32 %.frozen1, 18, !dbg !15
  %.frozen3 = freeze i32 %13, !dbg !15
  %21 = sdiv i32 %.frozen3, 18, !dbg !15
  %.frozen5 = freeze i32 %15, !dbg !15
  %22 = sdiv i32 %.frozen5, 18, !dbg !15
  %23 = mul i32 %19, 18, !dbg !16
  %.decomposed = sub i32 %.frozen, %23, !dbg !16
  %24 = mul i32 %20, 18, !dbg !16
  %.decomposed2 = sub i32 %.frozen1, %24, !dbg !16
  %25 = mul i32 %21, 18, !dbg !16
  %.decomposed4 = sub i32 %.frozen3, %25, !dbg !16
  %26 = mul i32 %22, 18, !dbg !16
  %.decomposed6 = sub i32 %.frozen5, %26, !dbg !16
  %27 = sdiv i32 %9, 324, !dbg !17
  %28 = sdiv i32 %13, 324, !dbg !17
  %29 = add nsw i32 %.decomposed, -1, !dbg !18
  %30 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !19
  %31 = insertelement <2 x i32> %30, i32 %10, i64 1, !dbg !19
  %32 = srem <2 x i32> %31, splat (i32 18), !dbg !19
  %33 = add nsw <2 x i32> %32, splat (i32 -1), !dbg !20
  %34 = extractelement <2 x i32> %33, i64 0, !dbg !18
  %35 = or i32 %34, %29, !dbg !18
  %36 = icmp ult i32 %35, 16, !dbg !18
  %37 = extractelement <2 x i32> %33, i64 1, !dbg !18
  %38 = or i32 %34, %37, !dbg !18
  %39 = icmp ult i32 %38, 16, !dbg !18
  %40 = add nsw i32 %.decomposed2, -1, !dbg !18
  %41 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !19
  %42 = insertelement <2 x i32> %41, i32 %12, i64 1, !dbg !19
  %43 = srem <2 x i32> %42, splat (i32 18), !dbg !19
  %44 = add nsw <2 x i32> %43, splat (i32 -1), !dbg !20
  %45 = extractelement <2 x i32> %44, i64 0, !dbg !18
  %46 = or i32 %45, %40, !dbg !18
  %47 = icmp ult i32 %46, 16, !dbg !18
  %48 = extractelement <2 x i32> %44, i64 1, !dbg !18
  %49 = or i32 %45, %48, !dbg !18
  %50 = icmp ult i32 %49, 16, !dbg !18
  %51 = add nsw i32 %.decomposed4, -1, !dbg !18
  %52 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !19
  %53 = insertelement <2 x i32> %52, i32 %14, i64 1, !dbg !19
  %54 = srem <2 x i32> %53, splat (i32 18), !dbg !19
  %55 = add nsw <2 x i32> %54, splat (i32 -1), !dbg !20
  %56 = extractelement <2 x i32> %55, i64 0, !dbg !18
  %57 = or i32 %56, %51, !dbg !18
  %58 = icmp ult i32 %57, 16, !dbg !18
  %59 = extractelement <2 x i32> %55, i64 1, !dbg !18
  %60 = or i32 %56, %59, !dbg !18
  %61 = icmp ult i32 %60, 16, !dbg !18
  %62 = add nsw i32 %.decomposed6, -1, !dbg !18
  %63 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !19
  %64 = insertelement <2 x i32> %63, i32 %16, i64 1, !dbg !19
  %65 = srem <2 x i32> %64, splat (i32 18), !dbg !19
  %66 = add nsw <2 x i32> %65, splat (i32 -1), !dbg !20
  %67 = extractelement <2 x i32> %66, i64 0, !dbg !18
  %68 = or i32 %67, %62, !dbg !18
  %69 = icmp ult i32 %68, 16, !dbg !18
  %70 = extractelement <2 x i32> %66, i64 1, !dbg !18
  %71 = or i32 %67, %70, !dbg !18
  %72 = icmp ult i32 %71, 16, !dbg !18
  %73 = extractelement <2 x i32> %32, i64 0, !dbg !21
  %74 = shl nsw i32 %73, 4, !dbg !21
  %75 = extractelement <2 x i32> %43, i64 0, !dbg !21
  %76 = shl nsw i32 %75, 4, !dbg !21
  %77 = extractelement <2 x i32> %54, i64 0, !dbg !21
  %78 = shl nsw i32 %77, 4, !dbg !21
  %79 = extractelement <2 x i32> %65, i64 0, !dbg !21
  %80 = shl nsw i32 %79, 4, !dbg !21
  %81 = shl nsw i32 %27, 8, !dbg !22
  %82 = shl nsw i32 %28, 8, !dbg !22
  %83 = add nsw i32 %81, -17, !dbg !23
  %84 = add nsw i32 %83, %.decomposed, !dbg !24
  %85 = add nsw i32 %84, %74, !dbg !25
  %86 = extractelement <2 x i32> %32, i64 1, !dbg !24
  %87 = add nsw i32 %83, %86, !dbg !24
  %88 = add nsw i32 %87, %74, !dbg !25
  %89 = add nsw i32 %83, %.decomposed2, !dbg !24
  %90 = add nsw i32 %89, %76, !dbg !25
  %91 = extractelement <2 x i32> %43, i64 1, !dbg !24
  %92 = add nsw i32 %83, %91, !dbg !24
  %93 = add nsw i32 %92, %76, !dbg !25
  %94 = add nsw i32 %82, -17, !dbg !23
  %95 = add nsw i32 %94, %.decomposed4, !dbg !24
  %96 = add nsw i32 %95, %78, !dbg !25
  %97 = extractelement <2 x i32> %54, i64 1, !dbg !24
  %98 = add nsw i32 %94, %97, !dbg !24
  %99 = add nsw i32 %98, %78, !dbg !25
  %100 = add nsw i32 %94, %.decomposed6, !dbg !24
  %101 = add nsw i32 %100, %80, !dbg !25
  %102 = extractelement <2 x i32> %65, i64 1, !dbg !24
  %103 = add nsw i32 %94, %102, !dbg !24
  %104 = add nsw i32 %103, %80, !dbg !25
  %105 = sext i32 %85 to i64, !dbg !26
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !26
  %107 = sext i32 %88 to i64, !dbg !26
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !26
  %109 = sext i32 %90 to i64, !dbg !26
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !26
  %111 = sext i32 %93 to i64, !dbg !26
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !26
  %113 = sext i32 %96 to i64, !dbg !26
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !26
  %115 = sext i32 %99 to i64, !dbg !26
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !26
  %117 = sext i32 %101 to i64, !dbg !26
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !26
  %119 = sext i32 %104 to i64, !dbg !26
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !26
  %121 = and i1 %17, %36, !dbg !27
  %122 = and i1 %17, %39, !dbg !27
  %123 = and i1 %47, %17, !dbg !27
  %124 = and i1 %50, %17, !dbg !27
  %125 = and i1 %18, %58, !dbg !27
  %126 = and i1 %18, %61, !dbg !27
  %127 = and i1 %18, %69, !dbg !27
  %128 = and i1 %18, %72, !dbg !27
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %121, i32 0, i1 %121) #1, !dbg !28
  %130 = bitcast i32 %129 to float, !dbg !28
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %122, i32 0, i1 %122) #1, !dbg !28
  %132 = bitcast i32 %131 to float, !dbg !28
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %123, i32 0, i1 %123) #1, !dbg !28
  %134 = bitcast i32 %133 to float, !dbg !28
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %124, i32 0, i1 %124) #1, !dbg !28
  %136 = bitcast i32 %135 to float, !dbg !28
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %125, i32 0, i1 %125) #1, !dbg !28
  %138 = bitcast i32 %137 to float, !dbg !28
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %126, i32 0, i1 %126) #1, !dbg !28
  %140 = bitcast i32 %139 to float, !dbg !28
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %127, i32 0, i1 %127) #1, !dbg !28
  %142 = bitcast i32 %141 to float, !dbg !28
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %128, i32 0, i1 %128) #1, !dbg !28
  %144 = bitcast i32 %143 to float, !dbg !28
  %145 = fcmp olt float %130, 0.000000e+00, !dbg !29
  %146 = fcmp olt float %132, 0.000000e+00, !dbg !29
  %147 = fcmp olt float %134, 0.000000e+00, !dbg !29
  %148 = fcmp olt float %136, 0.000000e+00, !dbg !29
  %149 = fcmp olt float %138, 0.000000e+00, !dbg !29
  %150 = fcmp olt float %140, 0.000000e+00, !dbg !29
  %151 = fcmp olt float %142, 0.000000e+00, !dbg !29
  %152 = fcmp olt float %144, 0.000000e+00, !dbg !29
  %153 = select i1 %145, float 0.000000e+00, float %130, !dbg !33
  %154 = select i1 %146, float 0.000000e+00, float %132, !dbg !33
  %155 = select i1 %147, float 0.000000e+00, float %134, !dbg !33
  %156 = select i1 %148, float 0.000000e+00, float %136, !dbg !33
  %157 = select i1 %149, float 0.000000e+00, float %138, !dbg !33
  %158 = select i1 %150, float 0.000000e+00, float %140, !dbg !33
  %159 = select i1 %151, float 0.000000e+00, float %142, !dbg !33
  %160 = select i1 %152, float 0.000000e+00, float %144, !dbg !33
  %161 = sext i32 %9 to i64, !dbg !34
  %162 = getelementptr float, ptr addrspace(1) %1, i64 %161, !dbg !34
  %163 = sext i32 %13 to i64, !dbg !34
  %164 = getelementptr float, ptr addrspace(1) %1, i64 %163, !dbg !34
  %165 = bitcast float %153 to i32, !dbg !35
  %166 = select i1 %36, i32 %165, i32 0, !dbg !36
  %167 = bitcast float %154 to i32, !dbg !35
  %168 = select i1 %39, i32 %167, i32 0, !dbg !36
  %169 = bitcast float %155 to i32, !dbg !35
  %170 = select i1 %47, i32 %169, i32 0, !dbg !36
  %171 = bitcast float %156 to i32, !dbg !35
  %172 = select i1 %50, i32 %171, i32 0, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %166, i32 %168, i32 %170, i32 %172, ptr addrspace(1) %162, i1 %17) #1, !dbg !35
  %173 = bitcast float %157 to i32, !dbg !35
  %174 = select i1 %58, i32 %173, i32 0, !dbg !36
  %175 = bitcast float %158 to i32, !dbg !35
  %176 = select i1 %61, i32 %175, i32 0, !dbg !36
  %177 = bitcast float %159 to i32, !dbg !35
  %178 = select i1 %69, i32 %177, i32 0, !dbg !36
  %179 = bitcast float %160 to i32, !dbg !35
  %180 = select i1 %72, i32 %179, i32 0, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %174, i32 %176, i32 %178, i32 %180, ptr addrspace(1) %164, i1 %18) #1, !dbg !35
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfhxifbu73sqtxyg4kggl2nqxpn3duebxys6jcbsgc4z4q74bid3.py", directory: "inductor_cache/fh")
!4 = !{ptr @triton_poi_fused_constant_pad_nd_relu_39, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_constant_pad_nd_relu_39, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_constant_pad_nd_relu_39", linkageName: "triton_poi_fused_constant_pad_nd_relu_39", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 38, column: 19, scope: !7)
!19 = !DILocation(line: 24, column: 27, scope: !7)
!20 = !DILocation(line: 36, column: 18, scope: !7)
!21 = !DILocation(line: 39, column: 47, scope: !7)
!22 = !DILocation(line: 39, column: 56, scope: !7)
!23 = !DILocation(line: 39, column: 39, scope: !7)
!24 = !DILocation(line: 39, column: 44, scope: !7)
!25 = !DILocation(line: 39, column: 52, scope: !7)
!26 = !DILocation(line: 39, column: 31, scope: !7)
!27 = !DILocation(line: 39, column: 69, scope: !7)
!28 = !DILocation(line: 39, column: 61, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 41, column: 42, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 44, column: 25, scope: !7)
!35 = !DILocation(line: 44, column: 37, scope: !7)
!36 = !DILocation(line: 43, column: 35, scope: !7)
!37 = !DILocation(line: 44, column: 4, scope: !7)
