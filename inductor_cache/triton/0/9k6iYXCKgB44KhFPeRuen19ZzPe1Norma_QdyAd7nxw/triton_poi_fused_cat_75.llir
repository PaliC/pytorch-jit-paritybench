; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_75(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 1, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %18 = sdiv i32 %.frozen, 4, !dbg !14
  %19 = srem i32 %18, 1024, !dbg !15
  %20 = mul i32 %18, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = srem i32 %17, 4, !dbg !16
  %22 = sdiv i32 %16, 4096, !dbg !17
  %23 = icmp slt i32 %19, 384, !dbg !18
  %24 = mul nsw i32 %.decomposed, 384, !dbg !19
  %25 = mul nsw i32 %21, 384, !dbg !19
  %26 = mul nsw i32 %22, 1536, !dbg !20
  %27 = add nsw i32 %24, %26, !dbg !21
  %28 = add nsw i32 %26, %25, !dbg !21
  %29 = add nsw i32 %27, %19, !dbg !22
  %30 = add nsw i32 %28, %19, !dbg !22
  %31 = sext i32 %29 to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !23
  %33 = sext i32 %30 to i64, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %23, i32 0, i1 %23) #1, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %23, i32 0, i1 %23) #1, !dbg !24
  %37 = sext i32 %19 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %23, i32 0, i1 %23) #1, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %23, i32 0, i1 %23) #1, !dbg !26
  %41 = add nsw i32 %19, -384, !dbg !27
  %42 = icmp ult i32 %41, 384, !dbg !27
  %43 = add nsw i32 %27, %41, !dbg !28
  %44 = add nsw i32 %28, %41, !dbg !28
  %45 = sext i32 %43 to i64, !dbg !29
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !29
  %47 = sext i32 %44 to i64, !dbg !29
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !29
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %42, i32 0, i1 %42) #1, !dbg !30
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %42, i32 0, i1 %42) #1, !dbg !30
  %51 = sext i32 %41 to i64, !dbg !31
  %52 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !31
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %42, i32 0, i1 %42) #1, !dbg !32
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %42, i32 0, i1 %42) #1, !dbg !32
  %55 = and i32 %19, -128, !dbg !33
  %56 = icmp eq i32 %55, 768, !dbg !33
  %57 = shl nsw i32 %.decomposed, 7, !dbg !34
  %58 = shl nsw i32 %21, 7, !dbg !34
  %59 = shl nsw i32 %22, 9, !dbg !35
  %60 = add nsw i32 %57, %59, !dbg !36
  %61 = add nsw i32 %59, %58, !dbg !36
  %62 = add nsw i32 %19, -768, !dbg !37
  %63 = add nsw i32 %60, %62, !dbg !38
  %64 = add nsw i32 %61, %62, !dbg !38
  %65 = sext i32 %63 to i64, !dbg !39
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !39
  %67 = sext i32 %64 to i64, !dbg !39
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %67, !dbg !39
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %56, i32 0, i1 %56) #1, !dbg !40
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %56, i32 0, i1 %56) #1, !dbg !40
  %71 = sext i32 %62 to i64, !dbg !41
  %72 = getelementptr float, ptr addrspace(1) %5, i64 %71, !dbg !41
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %56, i32 0, i1 %56) #1, !dbg !42
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %56, i32 0, i1 %56) #1, !dbg !42
  %75 = icmp sgt i32 %19, 895, !dbg !43
  %76 = add nsw i32 %19, -896, !dbg !44
  %77 = add nsw i32 %60, %76, !dbg !45
  %78 = add nsw i32 %61, %76, !dbg !45
  %79 = sext i32 %77 to i64, !dbg !46
  %80 = getelementptr float, ptr addrspace(1) %6, i64 %79, !dbg !46
  %81 = sext i32 %78 to i64, !dbg !46
  %82 = getelementptr float, ptr addrspace(1) %6, i64 %81, !dbg !46
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %75, i32 0, i1 %75) #1, !dbg !47
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %75, i32 0, i1 %75) #1, !dbg !47
  %85 = sext i32 %76 to i64, !dbg !48
  %86 = getelementptr float, ptr addrspace(1) %7, i64 %85, !dbg !48
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %75, i32 0, i1 %75) #1, !dbg !49
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %75, i32 0, i1 %75) #1, !dbg !49
  %89 = insertelement <8 x i32> poison, i32 %84, i64 0, !dbg !47
  %90 = insertelement <8 x i32> %89, i32 %83, i64 1, !dbg !47
  %91 = insertelement <8 x i32> %90, i32 %70, i64 2, !dbg !47
  %92 = insertelement <8 x i32> %91, i32 %69, i64 3, !dbg !47
  %93 = insertelement <8 x i32> %92, i32 %50, i64 4, !dbg !47
  %94 = insertelement <8 x i32> %93, i32 %49, i64 5, !dbg !47
  %95 = insertelement <8 x i32> %94, i32 %36, i64 6, !dbg !47
  %96 = insertelement <8 x i32> %95, i32 %35, i64 7, !dbg !47
  %97 = bitcast <8 x i32> %96 to <8 x float>, !dbg !47
  %98 = insertelement <8 x i32> poison, i32 %88, i64 0, !dbg !49
  %99 = insertelement <8 x i32> %98, i32 %87, i64 1, !dbg !49
  %100 = insertelement <8 x i32> %99, i32 %74, i64 2, !dbg !49
  %101 = insertelement <8 x i32> %100, i32 %73, i64 3, !dbg !49
  %102 = insertelement <8 x i32> %101, i32 %54, i64 4, !dbg !49
  %103 = insertelement <8 x i32> %102, i32 %53, i64 5, !dbg !49
  %104 = insertelement <8 x i32> %103, i32 %40, i64 6, !dbg !49
  %105 = insertelement <8 x i32> %104, i32 %39, i64 7, !dbg !49
  %106 = bitcast <8 x i32> %105 to <8 x float>, !dbg !49
  %107 = fadd <8 x float> %97, %106, !dbg !50
  %108 = fcmp olt <8 x float> %107, zeroinitializer, !dbg !51
  %109 = extractelement <8 x i1> %108, i64 7, !dbg !55
  %110 = extractelement <8 x float> %107, i64 7, !dbg !55
  %111 = select i1 %109, float 0.000000e+00, float %110, !dbg !55
  %112 = extractelement <8 x i1> %108, i64 6, !dbg !55
  %113 = extractelement <8 x float> %107, i64 6, !dbg !55
  %114 = select i1 %112, float 0.000000e+00, float %113, !dbg !55
  %115 = extractelement <8 x i1> %108, i64 5, !dbg !57
  %116 = extractelement <8 x float> %107, i64 5, !dbg !57
  %117 = select i1 %115, float 0.000000e+00, float %116, !dbg !57
  %118 = extractelement <8 x i1> %108, i64 4, !dbg !57
  %119 = extractelement <8 x float> %107, i64 4, !dbg !57
  %120 = select i1 %118, float 0.000000e+00, float %119, !dbg !57
  %121 = extractelement <8 x i1> %108, i64 3, !dbg !59
  %122 = extractelement <8 x float> %107, i64 3, !dbg !59
  %123 = select i1 %121, float 0.000000e+00, float %122, !dbg !59
  %124 = extractelement <8 x i1> %108, i64 2, !dbg !59
  %125 = extractelement <8 x float> %107, i64 2, !dbg !59
  %126 = select i1 %124, float 0.000000e+00, float %125, !dbg !59
  %127 = extractelement <8 x i1> %108, i64 1, !dbg !61
  %128 = extractelement <8 x float> %107, i64 1, !dbg !61
  %129 = select i1 %127, float 0.000000e+00, float %128, !dbg !61
  %130 = extractelement <8 x i1> %108, i64 0, !dbg !61
  %131 = extractelement <8 x float> %107, i64 0, !dbg !61
  %132 = select i1 %130, float 0.000000e+00, float %131, !dbg !61
  %133 = select i1 %75, float %129, float 0.000000e+00, !dbg !62
  %134 = select i1 %75, float %132, float 0.000000e+00, !dbg !62
  %135 = select i1 %56, float %123, float %133, !dbg !63
  %136 = select i1 %56, float %126, float %134, !dbg !63
  %137 = select i1 %42, float %117, float %135, !dbg !63
  %138 = select i1 %42, float %120, float %136, !dbg !63
  %139 = select i1 %23, float %111, float %137, !dbg !63
  %140 = select i1 %23, float %114, float %138, !dbg !63
  %141 = sext i32 %16 to i64, !dbg !64
  %142 = getelementptr float, ptr addrspace(1) %8, i64 %141, !dbg !64
  %143 = bitcast float %139 to i32, !dbg !65
  %144 = bitcast float %140 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %143, i32 %144, ptr addrspace(1) %142, i1 true) #1, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6lzozfmehhwjochpvoz5nvh3vytro7vnbgaeylnuih6uqrrhhb3.py", directory: "inductor_cache/6l")
!4 = !{ptr @triton_poi_fused_cat_75, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_75, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_75", linkageName: "triton_poi_fused_cat_75", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 44, scope: !7)
!21 = !DILocation(line: 33, column: 39, scope: !7)
!22 = !DILocation(line: 33, column: 50, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 56, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 43, column: 20, scope: !7)
!28 = !DILocation(line: 44, column: 51, scope: !7)
!29 = !DILocation(line: 44, column: 31, scope: !7)
!30 = !DILocation(line: 44, column: 66, scope: !7)
!31 = !DILocation(line: 45, column: 31, scope: !7)
!32 = !DILocation(line: 45, column: 45, scope: !7)
!33 = !DILocation(line: 54, column: 20, scope: !7)
!34 = !DILocation(line: 55, column: 35, scope: !7)
!35 = !DILocation(line: 55, column: 44, scope: !7)
!36 = !DILocation(line: 55, column: 40, scope: !7)
!37 = !DILocation(line: 55, column: 59, scope: !7)
!38 = !DILocation(line: 55, column: 50, scope: !7)
!39 = !DILocation(line: 55, column: 31, scope: !7)
!40 = !DILocation(line: 55, column: 65, scope: !7)
!41 = !DILocation(line: 56, column: 31, scope: !7)
!42 = !DILocation(line: 56, column: 45, scope: !7)
!43 = !DILocation(line: 62, column: 20, scope: !7)
!44 = !DILocation(line: 65, column: 59, scope: !7)
!45 = !DILocation(line: 65, column: 50, scope: !7)
!46 = !DILocation(line: 65, column: 31, scope: !7)
!47 = !DILocation(line: 65, column: 65, scope: !7)
!48 = !DILocation(line: 66, column: 31, scope: !7)
!49 = !DILocation(line: 66, column: 45, scope: !7)
!50 = !DILocation(line: 67, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 69, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !56)
!56 = !DILocation(line: 37, column: 40, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !58)
!58 = !DILocation(line: 48, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !60)
!60 = !DILocation(line: 59, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!62 = !DILocation(line: 71, column: 35, scope: !7)
!63 = !DILocation(line: 0, scope: !7)
!64 = !DILocation(line: 75, column: 25, scope: !7)
!65 = !DILocation(line: 75, column: 37, scope: !7)
!66 = !DILocation(line: 75, column: 4, scope: !7)
