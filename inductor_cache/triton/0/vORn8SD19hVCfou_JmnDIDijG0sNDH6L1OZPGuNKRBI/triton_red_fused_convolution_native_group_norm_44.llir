; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_group_norm_44(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, 128, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = lshr i32 %10, 5, !dbg !12
  %13 = and i32 %10, 511, !dbg !12
  %14 = or disjoint i32 %13, 512, !dbg !12
  %15 = or disjoint i32 %13, 1024, !dbg !12
  %16 = or disjoint i32 %13, 1536, !dbg !12
  %17 = shl i32 %10, 2, !dbg !12
  %18 = and i32 %17, 2044, !dbg !12
  %19 = srem i32 %8, 32, !dbg !13
  %20 = lshr i32 %13, 8, !dbg !14
  %21 = lshr i32 %14, 8, !dbg !14
  %22 = lshr i32 %15, 8, !dbg !14
  %23 = lshr i32 %16, 8, !dbg !14
  %24 = shl i32 %8, 11, !dbg !15
  %25 = or disjoint i32 %24, %18, !dbg !16
  %26 = sext i32 %25 to i64, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !18
  %.idx = shl nuw nsw i32 %18, 3, !dbg !18
  %33 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !18
  %34 = insertelement <1 x i32> poison, i32 %29, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %33, <1 x i32> %34, i1 true) #5, !dbg !18
  %35 = shl nuw nsw i32 %18, 1, !dbg !18
  %36 = or disjoint i32 %35, 2, !dbg !18
  %37 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %36, !dbg !18
  %38 = insertelement <1 x i32> poison, i32 %30, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %37, <1 x i32> %38, i1 true) #5, !dbg !18
  %39 = or disjoint i32 %35, 4, !dbg !18
  %40 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %39, !dbg !18
  %41 = insertelement <1 x i32> poison, i32 %31, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %41, i1 true) #5, !dbg !18
  %42 = or disjoint i32 %35, 6, !dbg !18
  %43 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %42, !dbg !18
  %44 = insertelement <1 x i32> poison, i32 %32, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %44, i1 true) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %.idx1 = shl nuw nsw i32 %13, 3, !dbg !18
  %45 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !18
  %46 = load float, ptr addrspace(3) %45, align 8, !dbg !18
  %.idx2 = shl nuw nsw i32 %14, 3, !dbg !18
  %47 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !18
  %48 = load float, ptr addrspace(3) %47, align 8, !dbg !18
  %.idx3 = shl nuw nsw i32 %15, 3, !dbg !18
  %49 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !18
  %50 = load float, ptr addrspace(3) %49, align 8, !dbg !18
  %.idx4 = shl nuw nsw i32 %16, 3, !dbg !18
  %51 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !18
  %52 = load float, ptr addrspace(3) %51, align 8, !dbg !18
  %53 = shl nsw i32 %19, 3, !dbg !19
  %54 = or disjoint i32 %53, %20, !dbg !20
  %55 = or disjoint i32 %53, %21, !dbg !20
  %56 = or disjoint i32 %53, %22, !dbg !20
  %57 = or disjoint i32 %53, %23, !dbg !20
  %58 = sext i32 %54 to i64, !dbg !21
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !21
  %60 = sext i32 %55 to i64, !dbg !21
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !21
  %62 = sext i32 %56 to i64, !dbg !21
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !21
  %64 = sext i32 %57 to i64, !dbg !21
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !21
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %9, i32 0, i1 %9) #5, !dbg !22
  %67 = bitcast i32 %66 to float, !dbg !22
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %9, i32 0, i1 %9) #5, !dbg !22
  %69 = bitcast i32 %68 to float, !dbg !22
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %9, i32 0, i1 %9) #5, !dbg !22
  %71 = bitcast i32 %70 to float, !dbg !22
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %9, i32 0, i1 %9) #5, !dbg !22
  %73 = bitcast i32 %72 to float, !dbg !22
  %74 = fadd float %46, %67, !dbg !23
  %75 = fadd float %48, %69, !dbg !23
  %76 = fadd float %50, %71, !dbg !23
  %77 = fadd float %52, %73, !dbg !23
  %78 = select i1 %9, float %74, float 0.000000e+00, !dbg !24
  %79 = select i1 %9, float %75, float 0.000000e+00, !dbg !24
  %80 = select i1 %9, float %76, float 0.000000e+00, !dbg !24
  %81 = select i1 %9, float %77, float 0.000000e+00, !dbg !24
  %82 = select i1 %9, float 1.000000e+00, float 0.000000e+00, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !26
  %84 = bitcast float %74 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #5, !dbg !26
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !26
  %86 = bitcast float %75 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #5, !dbg !26
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !26
  %88 = bitcast float %76 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #5, !dbg !26
  %89 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !26
  %90 = bitcast float %77 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !26
  %.extract = load i32, ptr addrspace(3) %91, align 16, !dbg !26
  %92 = getelementptr inbounds i8, ptr addrspace(3) %91, i32 4, !dbg !26
  %.extract8 = load i32, ptr addrspace(3) %92, align 4, !dbg !26
  %93 = getelementptr inbounds i8, ptr addrspace(3) %91, i32 8, !dbg !26
  %.extract9 = load i32, ptr addrspace(3) %93, align 8, !dbg !26
  %94 = getelementptr inbounds i8, ptr addrspace(3) %91, i32 12, !dbg !26
  %.extract10 = load i32, ptr addrspace(3) %94, align 4, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %27, i1 %9) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %95 = fsub float %79, %78, !dbg !31
  %96 = select i1 %9, float 2.000000e+00, float 0.000000e+00, !dbg !33
  %97 = fcmp oeq float %96, 0.000000e+00, !dbg !34
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float %96) #5, !dbg !35
  %99 = select i1 %97, float 0.000000e+00, float %98, !dbg !36
  %100 = fmul float %95, %99, !dbg !37
  %101 = fadd float %78, %100, !dbg !38
  %102 = fmul float %95, %95, !dbg !39
  %103 = fmul float %82, %102, !dbg !40
  %104 = fmul float %103, %99, !dbg !41
  %105 = fadd float %104, 0.000000e+00, !dbg !42
  %106 = fsub float %80, %101, !dbg !31
  %107 = select i1 %9, float 3.000000e+00, float 0.000000e+00, !dbg !33
  %108 = fcmp oeq float %107, 0.000000e+00, !dbg !34
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float %107) #5, !dbg !35
  %110 = select i1 %108, float 0.000000e+00, float %109, !dbg !36
  %111 = fmul float %110, %106, !dbg !37
  %112 = fadd float %101, %111, !dbg !38
  %113 = fmul float %106, %106, !dbg !39
  %114 = fmul float %96, %113, !dbg !40
  %115 = fmul float %110, %114, !dbg !41
  %116 = fadd float %105, %115, !dbg !42
  %117 = fsub float %81, %112, !dbg !31
  %118 = select i1 %9, float 4.000000e+00, float 0.000000e+00, !dbg !33
  %119 = fcmp oeq float %118, 0.000000e+00, !dbg !34
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float %118) #5, !dbg !35
  %121 = select i1 %119, float 0.000000e+00, float %120, !dbg !36
  %122 = fmul float %121, %117, !dbg !37
  %123 = fadd float %112, %122, !dbg !38
  %124 = fmul float %117, %117, !dbg !39
  %125 = fmul float %107, %124, !dbg !40
  %126 = fmul float %121, %125, !dbg !41
  %127 = fadd float %116, %126, !dbg !42
  %128 = bitcast float %123 to i32, !dbg !27
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 16, i32 31), !dbg !27
  %130 = bitcast i32 %129 to float, !dbg !27
  %131 = bitcast float %127 to i32, !dbg !27
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 16, i32 31), !dbg !27
  %133 = bitcast i32 %132 to float, !dbg !27
  %134 = bitcast float %118 to i32, !dbg !27
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 16, i32 31), !dbg !27
  %136 = bitcast i32 %135 to float, !dbg !27
  %137 = fsub float %130, %123, !dbg !31
  %138 = fadd float %118, %136, !dbg !33
  %139 = fcmp oeq float %138, 0.000000e+00, !dbg !34
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float %138) #5, !dbg !35
  %141 = select i1 %139, float 0.000000e+00, float %140, !dbg !36
  %142 = fmul float %141, %137, !dbg !37
  %143 = fadd float %123, %142, !dbg !38
  %144 = fadd float %127, %133, !dbg !43
  %145 = fmul float %137, %137, !dbg !39
  %146 = fmul float %118, %145, !dbg !40
  %147 = fmul float %141, %146, !dbg !41
  %148 = fadd float %144, %147, !dbg !42
  %149 = bitcast float %143 to i32, !dbg !27
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 8, i32 31), !dbg !27
  %151 = bitcast i32 %150 to float, !dbg !27
  %152 = bitcast float %148 to i32, !dbg !27
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 8, i32 31), !dbg !27
  %154 = bitcast i32 %153 to float, !dbg !27
  %155 = bitcast float %138 to i32, !dbg !27
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 8, i32 31), !dbg !27
  %157 = bitcast i32 %156 to float, !dbg !27
  %158 = fsub float %151, %143, !dbg !31
  %159 = fadd float %138, %157, !dbg !33
  %160 = fcmp oeq float %159, 0.000000e+00, !dbg !34
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float %159) #5, !dbg !35
  %162 = select i1 %160, float 0.000000e+00, float %161, !dbg !36
  %163 = fmul float %158, %162, !dbg !37
  %164 = fadd float %143, %163, !dbg !38
  %165 = fadd float %148, %154, !dbg !43
  %166 = fmul float %158, %158, !dbg !39
  %167 = fmul float %138, %166, !dbg !40
  %168 = fmul float %162, %167, !dbg !41
  %169 = fadd float %165, %168, !dbg !42
  %170 = bitcast float %164 to i32, !dbg !27
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 4, i32 31), !dbg !27
  %172 = bitcast i32 %171 to float, !dbg !27
  %173 = bitcast float %169 to i32, !dbg !27
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 4, i32 31), !dbg !27
  %175 = bitcast i32 %174 to float, !dbg !27
  %176 = bitcast float %159 to i32, !dbg !27
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 4, i32 31), !dbg !27
  %178 = bitcast i32 %177 to float, !dbg !27
  %179 = fsub float %172, %164, !dbg !31
  %180 = fadd float %159, %178, !dbg !33
  %181 = fcmp oeq float %180, 0.000000e+00, !dbg !34
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %178, float %180) #5, !dbg !35
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !36
  %184 = fmul float %179, %183, !dbg !37
  %185 = fadd float %164, %184, !dbg !38
  %186 = fadd float %169, %175, !dbg !43
  %187 = fmul float %179, %179, !dbg !39
  %188 = fmul float %159, %187, !dbg !40
  %189 = fmul float %183, %188, !dbg !41
  %190 = fadd float %186, %189, !dbg !42
  %191 = bitcast float %185 to i32, !dbg !27
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 2, i32 31), !dbg !27
  %193 = bitcast i32 %192 to float, !dbg !27
  %194 = bitcast float %190 to i32, !dbg !27
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 2, i32 31), !dbg !27
  %196 = bitcast i32 %195 to float, !dbg !27
  %197 = bitcast float %180 to i32, !dbg !27
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 2, i32 31), !dbg !27
  %199 = bitcast i32 %198 to float, !dbg !27
  %200 = fsub float %193, %185, !dbg !31
  %201 = fadd float %180, %199, !dbg !33
  %202 = fcmp oeq float %201, 0.000000e+00, !dbg !34
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %199, float %201) #5, !dbg !35
  %204 = select i1 %202, float 0.000000e+00, float %203, !dbg !36
  %205 = fmul float %200, %204, !dbg !37
  %206 = fadd float %185, %205, !dbg !38
  %207 = fadd float %190, %196, !dbg !43
  %208 = fmul float %200, %200, !dbg !39
  %209 = fmul float %180, %208, !dbg !40
  %210 = fmul float %204, %209, !dbg !41
  %211 = fadd float %207, %210, !dbg !42
  %212 = bitcast float %206 to i32, !dbg !27
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 1, i32 31), !dbg !27
  %214 = bitcast i32 %213 to float, !dbg !27
  %215 = bitcast float %211 to i32, !dbg !27
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 1, i32 31), !dbg !27
  %217 = bitcast i32 %216 to float, !dbg !27
  %218 = bitcast float %201 to i32, !dbg !27
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 1, i32 31), !dbg !27
  %220 = bitcast i32 %219 to float, !dbg !27
  %221 = fsub float %214, %206, !dbg !31
  %222 = fadd float %201, %220, !dbg !33
  %223 = fcmp oeq float %222, 0.000000e+00, !dbg !34
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %220, float %222) #5, !dbg !35
  %225 = select i1 %223, float 0.000000e+00, float %224, !dbg !36
  %226 = fmul float %221, %225, !dbg !37
  %227 = fadd float %206, %226, !dbg !38
  %228 = fadd float %211, %217, !dbg !43
  %229 = fmul float %221, %221, !dbg !39
  %230 = fmul float %201, %229, !dbg !40
  %231 = fmul float %225, %230, !dbg !41
  %232 = fadd float %228, %231, !dbg !42
  %233 = icmp eq i32 %11, 0, !dbg !27
  %234 = and i32 %12, 15, !dbg !27
  %235 = getelementptr float, ptr addrspace(3) @global_smem, i32 %234, !dbg !27
  %236 = bitcast float %227 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 %233) #5, !dbg !27
  %237 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %234, !dbg !27
  %238 = bitcast float %232 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %238, i1 %233) #5, !dbg !27
  %239 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %234, !dbg !27
  %240 = bitcast float %222 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 %233) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %241 = icmp slt i32 %10, 16, !dbg !27
  %242 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !27
  %243 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %242, i1 %241) #5, !dbg !27
  %244 = bitcast i32 %243 to float, !dbg !27
  %245 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %10, !dbg !27
  %246 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %245, i1 %241) #5, !dbg !27
  %247 = bitcast i32 %246 to float, !dbg !27
  %248 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %10, !dbg !27
  %249 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %248, i1 %241) #5, !dbg !27
  %250 = bitcast i32 %249 to float, !dbg !27
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 8, i32 31), !dbg !27
  %252 = bitcast i32 %251 to float, !dbg !27
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 8, i32 31), !dbg !27
  %254 = bitcast i32 %253 to float, !dbg !27
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 8, i32 31), !dbg !27
  %256 = bitcast i32 %255 to float, !dbg !27
  %257 = fsub float %252, %244, !dbg !31
  %258 = fadd float %250, %256, !dbg !33
  %259 = fcmp oeq float %258, 0.000000e+00, !dbg !34
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %256, float %258) #5, !dbg !35
  %261 = select i1 %259, float 0.000000e+00, float %260, !dbg !36
  %262 = fmul float %257, %261, !dbg !37
  %263 = fadd float %262, %244, !dbg !38
  %264 = fadd float %247, %254, !dbg !43
  %265 = fmul float %257, %257, !dbg !39
  %266 = fmul float %265, %250, !dbg !40
  %267 = fmul float %266, %261, !dbg !41
  %268 = fadd float %264, %267, !dbg !42
  %269 = bitcast float %263 to i32, !dbg !27
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 4, i32 31), !dbg !27
  %271 = bitcast i32 %270 to float, !dbg !27
  %272 = bitcast float %268 to i32, !dbg !27
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 4, i32 31), !dbg !27
  %274 = bitcast i32 %273 to float, !dbg !27
  %275 = bitcast float %258 to i32, !dbg !27
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 4, i32 31), !dbg !27
  %277 = bitcast i32 %276 to float, !dbg !27
  %278 = fsub float %271, %263, !dbg !31
  %279 = fadd float %258, %277, !dbg !33
  %280 = fcmp oeq float %279, 0.000000e+00, !dbg !34
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %277, float %279) #5, !dbg !35
  %282 = select i1 %280, float 0.000000e+00, float %281, !dbg !36
  %283 = fmul float %278, %282, !dbg !37
  %284 = fadd float %263, %283, !dbg !38
  %285 = fadd float %268, %274, !dbg !43
  %286 = fmul float %278, %278, !dbg !39
  %287 = fmul float %258, %286, !dbg !40
  %288 = fmul float %282, %287, !dbg !41
  %289 = fadd float %285, %288, !dbg !42
  %290 = bitcast float %284 to i32, !dbg !27
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 2, i32 31), !dbg !27
  %292 = bitcast i32 %291 to float, !dbg !27
  %293 = bitcast float %289 to i32, !dbg !27
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 2, i32 31), !dbg !27
  %295 = bitcast i32 %294 to float, !dbg !27
  %296 = bitcast float %279 to i32, !dbg !27
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 2, i32 31), !dbg !27
  %298 = bitcast i32 %297 to float, !dbg !27
  %299 = fsub float %292, %284, !dbg !31
  %300 = fadd float %279, %298, !dbg !33
  %301 = fcmp oeq float %300, 0.000000e+00, !dbg !34
  %302 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %298, float %300) #5, !dbg !35
  %303 = select i1 %301, float 0.000000e+00, float %302, !dbg !36
  %304 = fmul float %299, %303, !dbg !37
  %305 = fadd float %284, %304, !dbg !38
  %306 = fadd float %289, %295, !dbg !43
  %307 = fmul float %299, %299, !dbg !39
  %308 = fmul float %279, %307, !dbg !40
  %309 = fmul float %303, %308, !dbg !41
  %310 = fadd float %306, %309, !dbg !42
  %311 = bitcast float %305 to i32, !dbg !27
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 1, i32 31), !dbg !27
  %313 = bitcast i32 %312 to float, !dbg !27
  %314 = bitcast float %310 to i32, !dbg !27
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 1, i32 31), !dbg !27
  %316 = bitcast i32 %315 to float, !dbg !27
  %317 = bitcast float %300 to i32, !dbg !27
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 1, i32 31), !dbg !27
  %319 = bitcast i32 %318 to float, !dbg !27
  %320 = fsub float %313, %305, !dbg !31
  %321 = fadd float %300, %319, !dbg !33
  %322 = fcmp oeq float %321, 0.000000e+00, !dbg !34
  %323 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %319, float %321) #5, !dbg !35
  %324 = select i1 %322, float 0.000000e+00, float %323, !dbg !36
  %325 = fmul float %320, %324, !dbg !37
  %326 = fadd float %305, %325, !dbg !38
  %327 = fadd float %310, %316, !dbg !43
  %328 = fmul float %320, %320, !dbg !39
  %329 = fmul float %300, %328, !dbg !40
  %330 = fmul float %324, %329, !dbg !41
  %331 = fadd float %327, %330, !dbg !42
  %332 = and i32 %10, 15, !dbg !27
  %333 = icmp eq i32 %332, 0, !dbg !27
  %334 = and i1 %241, %333, !dbg !27
  %335 = bitcast float %326 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %335, i1 %334) #5, !dbg !27
  %336 = bitcast float %331 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %336, i1 %334) #5, !dbg !27
  %337 = bitcast float %321 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %337, i1 %334) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %338 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %339 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !27
  %340 = sext i32 %8 to i64, !dbg !44
  %341 = getelementptr float, ptr addrspace(1) %2, i64 %340, !dbg !44
  %342 = icmp eq i32 %13, 0, !dbg !45
  %343 = and i1 %342, %9, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %338, ptr addrspace(1) %341, i1 %343) #5, !dbg !45
  %344 = getelementptr float, ptr addrspace(1) %3, i64 %340, !dbg !46
  %345 = bitcast float %339 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %345, ptr addrspace(1) %344, i1 %343) #5, !dbg !47
  %346 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %339, float 2.048000e+03) #5, !dbg !48
  %347 = fadd float %346, 0x3EE4F8B580000000, !dbg !49
  %348 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i = icmp eq i32 %348, 0, !dbg !50
  br i1 %.not.i, label %351, label %349, !dbg !50

349:                                              ; preds = %7
  %350 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %347), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

351:                                              ; preds = %7
  %352 = tail call float @llvm.nvvm.rsqrt.approx.f(float %347), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

__nv_rsqrtf.exit:                                 ; preds = %349, %351
  %.0.i = phi float [ %350, %349 ], [ %352, %351 ], !dbg !50
  %353 = getelementptr float, ptr addrspace(1) %4, i64 %340, !dbg !51
  %354 = bitcast float %.0.i to i32, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %354, ptr addrspace(1) %353, i1 %343) #5, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccwihgs56ywsbiovvqbxtxfcfitg4plywktdtr232bvien23j5if.py", directory: "inductor_cache/cw")
!4 = !{ptr @triton_red_fused_convolution_native_group_norm_44, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_group_norm_44, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_group_norm_44", linkageName: "triton_red_fused_convolution_native_group_norm_44", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 35, column: 23, scope: !7)
!15 = !DILocation(line: 36, column: 48, scope: !7)
!16 = !DILocation(line: 36, column: 43, scope: !7)
!17 = !DILocation(line: 36, column: 38, scope: !7)
!18 = !DILocation(line: 36, column: 53, scope: !7)
!19 = !DILocation(line: 37, column: 41, scope: !7)
!20 = !DILocation(line: 37, column: 39, scope: !7)
!21 = !DILocation(line: 37, column: 34, scope: !7)
!22 = !DILocation(line: 37, column: 46, scope: !7)
!23 = !DILocation(line: 38, column: 22, scope: !7)
!24 = !DILocation(line: 43, column: 60, scope: !7)
!25 = !DILocation(line: 45, column: 64, scope: !7)
!26 = !DILocation(line: 46, column: 53, scope: !7)
!27 = !DILocation(line: 204, column: 46, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 48, column: 41, scope: !7)
!31 = !DILocation(line: 192, column: 21, scope: !32, inlinedAt: !30)
!32 = distinct !DILexicalBlockFile(scope: !28, file: !29, discriminator: 0)
!33 = !DILocation(line: 193, column: 28, scope: !32, inlinedAt: !30)
!34 = !DILocation(line: 194, column: 39, scope: !32, inlinedAt: !30)
!35 = !DILocation(line: 194, column: 60, scope: !32, inlinedAt: !30)
!36 = !DILocation(line: 194, column: 49, scope: !32, inlinedAt: !30)
!37 = !DILocation(line: 196, column: 25, scope: !32, inlinedAt: !30)
!38 = !DILocation(line: 196, column: 17, scope: !32, inlinedAt: !30)
!39 = !DILocation(line: 197, column: 30, scope: !32, inlinedAt: !30)
!40 = !DILocation(line: 197, column: 38, scope: !32, inlinedAt: !30)
!41 = !DILocation(line: 197, column: 49, scope: !32, inlinedAt: !30)
!42 = !DILocation(line: 197, column: 22, scope: !32, inlinedAt: !30)
!43 = !DILocation(line: 197, column: 15, scope: !32, inlinedAt: !30)
!44 = !DILocation(line: 53, column: 25, scope: !7)
!45 = !DILocation(line: 53, column: 36, scope: !7)
!46 = !DILocation(line: 54, column: 25, scope: !7)
!47 = !DILocation(line: 54, column: 36, scope: !7)
!48 = !DILocation(line: 56, column: 18, scope: !7)
!49 = !DILocation(line: 58, column: 19, scope: !7)
!50 = !DILocation(line: 59, column: 28, scope: !7)
!51 = !DILocation(line: 60, column: 25, scope: !7)
!52 = !DILocation(line: 60, column: 37, scope: !7)
!53 = !DILocation(line: 60, column: 4, scope: !7)
