; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_convolution_gelu_native_group_norm_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = icmp slt i32 %11, 4, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = lshr i32 %14, 2, !dbg !13
  %16 = shl i32 %11, 4, !dbg !14
  %17 = or disjoint i32 %16, %14, !dbg !15
  %18 = sext i32 %17 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !16
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %12, i32 0, i1 %12) #5, !dbg !17
  %21 = bitcast i32 %20 to float, !dbg !17
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %12, i32 0, i1 %12) #5, !dbg !17
  %23 = bitcast i32 %22 to float, !dbg !17
  %24 = zext nneg i32 %15 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !19
  %27 = bitcast i32 %26 to float, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !19
  %29 = bitcast i32 %28 to float, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #5, !dbg !23
  %35 = bitcast i32 %34 to float, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %6, i64 %18, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %12, i32 0, i1 %12) #5, !dbg !25
  %38 = fadd float %21, %27, !dbg !26
  %39 = fadd float %23, %29, !dbg !26
  %40 = select i1 %12, float %38, float 0.000000e+00, !dbg !27
  %41 = select i1 %12, float %39, float 0.000000e+00, !dbg !27
  %42 = bitcast float %40 to i32, !dbg !28
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 8, i32 31), !dbg !28
  %44 = bitcast i32 %43 to float, !dbg !28
  %45 = fadd float %40, %44, !dbg !32
  %46 = bitcast float %45 to i32, !dbg !28
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 4, i32 31), !dbg !28
  %48 = bitcast i32 %47 to float, !dbg !28
  %49 = fadd float %45, %48, !dbg !32
  %50 = bitcast float %49 to i32, !dbg !28
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 2, i32 31), !dbg !28
  %52 = bitcast i32 %51 to float, !dbg !28
  %53 = fadd float %49, %52, !dbg !32
  %54 = bitcast float %53 to i32, !dbg !28
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 1, i32 31), !dbg !28
  %56 = bitcast i32 %55 to float, !dbg !28
  %57 = fadd float %53, %56, !dbg !32
  %58 = bitcast float %41 to i32, !dbg !28
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 8, i32 31), !dbg !28
  %60 = bitcast i32 %59 to float, !dbg !28
  %61 = fadd float %41, %60, !dbg !32
  %62 = bitcast float %61 to i32, !dbg !28
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 4, i32 31), !dbg !28
  %64 = bitcast i32 %63 to float, !dbg !28
  %65 = fadd float %61, %64, !dbg !32
  %66 = bitcast float %65 to i32, !dbg !28
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 2, i32 31), !dbg !28
  %68 = bitcast i32 %67 to float, !dbg !28
  %69 = fadd float %65, %68, !dbg !32
  %70 = bitcast float %69 to i32, !dbg !28
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !28
  %72 = bitcast i32 %71 to float, !dbg !28
  %73 = fadd float %69, %72, !dbg !32
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float 1.600000e+01) #5, !dbg !34
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float 1.600000e+01) #5, !dbg !34
  %76 = fsub float %38, %74, !dbg !35
  %77 = fsub float %39, %75, !dbg !35
  %78 = fmul float %76, %76, !dbg !36
  %79 = fmul float %77, %77, !dbg !36
  %80 = select i1 %12, float %78, float 0.000000e+00, !dbg !37
  %81 = select i1 %12, float %79, float 0.000000e+00, !dbg !37
  %82 = bitcast float %80 to i32, !dbg !38
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 8, i32 31), !dbg !38
  %84 = bitcast i32 %83 to float, !dbg !38
  %85 = fadd float %80, %84, !dbg !40
  %86 = bitcast float %85 to i32, !dbg !38
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 4, i32 31), !dbg !38
  %88 = bitcast i32 %87 to float, !dbg !38
  %89 = fadd float %85, %88, !dbg !40
  %90 = bitcast float %89 to i32, !dbg !38
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 2, i32 31), !dbg !38
  %92 = bitcast i32 %91 to float, !dbg !38
  %93 = fadd float %89, %92, !dbg !40
  %94 = bitcast float %93 to i32, !dbg !38
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !38
  %96 = bitcast i32 %95 to float, !dbg !38
  %97 = fadd float %93, %96, !dbg !40
  %98 = bitcast float %81 to i32, !dbg !38
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 8, i32 31), !dbg !38
  %100 = bitcast i32 %99 to float, !dbg !38
  %101 = fadd float %81, %100, !dbg !40
  %102 = bitcast float %101 to i32, !dbg !38
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 4, i32 31), !dbg !38
  %104 = bitcast i32 %103 to float, !dbg !38
  %105 = fadd float %101, %104, !dbg !40
  %106 = bitcast float %105 to i32, !dbg !38
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 2, i32 31), !dbg !38
  %108 = bitcast i32 %107 to float, !dbg !38
  %109 = fadd float %105, %108, !dbg !40
  %110 = bitcast float %109 to i32, !dbg !38
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !38
  %112 = bitcast i32 %111 to float, !dbg !38
  %113 = fadd float %109, %112, !dbg !40
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float 1.600000e+01) #5, !dbg !41
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float 1.600000e+01) #5, !dbg !41
  %116 = fadd float %114, 0x3EE4F8B580000000, !dbg !42
  %117 = fadd float %115, 0x3EE4F8B580000000, !dbg !42
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i = icmp eq i32 %118, 0, !dbg !43
  br i1 %.not.i, label %121, label %119, !dbg !43

119:                                              ; preds = %10
  %120 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %116), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

121:                                              ; preds = %10
  %122 = tail call float @llvm.nvvm.rsqrt.approx.f(float %116), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %119, %121
  %.0.i = phi float [ %120, %119 ], [ %122, %121 ], !dbg !43
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i1 = icmp eq i32 %123, 0, !dbg !43
  br i1 %.not.i1, label %126, label %124, !dbg !43

124:                                              ; preds = %__nv_rsqrtf.exit
  %125 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %117), !dbg !43
  br label %__nv_rsqrtf.exit3, !dbg !43

126:                                              ; preds = %__nv_rsqrtf.exit
  %127 = tail call float @llvm.nvvm.rsqrt.approx.f(float %117), !dbg !43
  br label %__nv_rsqrtf.exit3, !dbg !43

__nv_rsqrtf.exit3:                                ; preds = %124, %126
  %.0.i2 = phi float [ %125, %124 ], [ %127, %126 ], !dbg !43
  %128 = fmul float %76, %.0.i, !dbg !44
  %129 = fmul float %128, %32, !dbg !45
  %130 = fadd float %129, %35, !dbg !46
  %131 = fmul float %130, 0x3FE6A09E60000000, !dbg !47
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not.i4 = icmp eq i32 %132, 0, !dbg !48
  %133 = tail call float @llvm.nvvm.fabs.ftz.f(float %131) #5, !dbg !48
  %134 = tail call float @llvm.nvvm.fabs.f(float %131) #5, !dbg !48
  %.0.i5 = select i1 %.not.i4, float %134, float %133, !dbg !48
  %135 = fcmp oge float %.0.i5, 0x3FF00C1FC0000000, !dbg !48
  br i1 %135, label %__nv_fabsf.exit1.i, label %137, !dbg !48

__nv_fabsf.exit1.i:                               ; preds = %__nv_rsqrtf.exit3
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not1.i = icmp eq i32 %136, 0, !dbg !48
  %.01.i = select i1 %.not1.i, float %134, float %133, !dbg !48
  br label %__internal_fmad.exit.i, !dbg !48

137:                                              ; preds = %__nv_rsqrtf.exit3
  %138 = fmul float %131, %131, !dbg !48
  br label %__internal_fmad.exit.i, !dbg !48

__internal_fmad.exit.i:                           ; preds = %137, %__nv_fabsf.exit1.i
  %139 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i ], [ 0x3FC06EBA60000000, %137 ], !dbg !48
  %140 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i ], [ 0xBFD8127580000000, %137 ], !dbg !48
  %141 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i ], [ 0x3FBCE315E0000000, %137 ], !dbg !48
  %142 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i ], [ 0xBF9B837CE0000000, %137 ], !dbg !48
  %143 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i ], [ 0x3F755ABD40000000, %137 ], !dbg !48
  %144 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i ], [ 0xBF4AE9A400000000, %137 ], !dbg !48
  %145 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i ], [ 0x3F163D2D40000000, %137 ], !dbg !48
  %146 = phi float [ %.01.i, %__nv_fabsf.exit1.i ], [ %138, %137 ], !dbg !48
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not2.i = icmp eq i32 %147, 0, !dbg !48
  %148 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %145, float %146, float %144) #5, !dbg !48
  %149 = tail call float @llvm.nvvm.fma.rn.f(float %145, float %146, float %144) #5, !dbg !48
  %.02.i = select i1 %.not2.i, float %149, float %148, !dbg !48
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not3.i = icmp eq i32 %150, 0, !dbg !48
  %151 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %146, float %143) #5, !dbg !48
  %152 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %146, float %143) #5, !dbg !48
  %.03.i = select i1 %.not3.i, float %152, float %151, !dbg !48
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not4.i = icmp eq i32 %153, 0, !dbg !48
  %154 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i, float %146, float %142) #5, !dbg !48
  %155 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i, float %146, float %142) #5, !dbg !48
  %.04.i = select i1 %.not4.i, float %155, float %154, !dbg !48
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not5.i = icmp eq i32 %156, 0, !dbg !48
  %157 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %146, float %141) #5, !dbg !48
  %158 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %146, float %141) #5, !dbg !48
  %.05.i = select i1 %.not5.i, float %158, float %157, !dbg !48
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not6.i = icmp eq i32 %159, 0, !dbg !48
  %160 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %146, float %140) #5, !dbg !48
  %161 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %146, float %140) #5, !dbg !48
  %.06.i = select i1 %.not6.i, float %161, float %160, !dbg !48
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not7.i = icmp eq i32 %162, 0, !dbg !48
  %163 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %146, float %139) #5, !dbg !48
  %164 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %146, float %139) #5, !dbg !48
  %.07.i = select i1 %.not7.i, float %164, float %163, !dbg !48
  %165 = fneg float %146, !dbg !48
  %166 = select i1 %135, float %165, float %131, !dbg !48
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not8.i = icmp eq i32 %167, 0, !dbg !48
  %168 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %166, float %166) #5, !dbg !48
  %169 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %166, float %166) #5, !dbg !48
  %.08.i = select i1 %.not8.i, float %169, float %168, !dbg !48
  br i1 %135, label %170, label %__nv_erff.exit, !dbg !48

170:                                              ; preds = %__internal_fmad.exit.i
  %171 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i) #5, !dbg !48
  %172 = fsub float 1.000000e+00, %171, !dbg !48
  %173 = bitcast float %172 to i32, !dbg !48
  %174 = bitcast float %131 to i32, !dbg !48
  %175 = and i32 %174, -2147483648, !dbg !48
  %176 = or i32 %175, %173, !dbg !48
  %177 = bitcast i32 %176 to float, !dbg !48
  br label %__nv_erff.exit, !dbg !48

__nv_erff.exit:                                   ; preds = %__internal_fmad.exit.i, %170
  %r.0.i = phi float [ %177, %170 ], [ %.08.i, %__internal_fmad.exit.i ], !dbg !48
  %178 = fmul float %130, 5.000000e-01, !dbg !49
  %179 = bitcast i32 %37 to float, !dbg !25
  %180 = fadd float %r.0.i, 1.000000e+00, !dbg !50
  %181 = fmul float %178, %180, !dbg !51
  %182 = fadd float %181, %179, !dbg !52
  %183 = and i32 %13, 48, !dbg !53
  %184 = icmp eq i32 %183, 0, !dbg !53
  %185 = bitcast float %38 to i32, !dbg !53
  %186 = and i1 %184, %12, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %185, ptr addrspace(1) %19, i1 %186) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %187 = sext i32 %11 to i64, !dbg !55
  %188 = getelementptr float, ptr addrspace(1) %1, i64 %187, !dbg !55
  %urem = and i32 %13, 63, !dbg !56
  %189 = icmp eq i32 %urem, 0, !dbg !56
  %190 = bitcast float %.0.i2 to i32, !dbg !56
  %191 = and i1 %189, %12, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %190, ptr addrspace(1) %188, i1 %191) #5, !dbg !56
  %192 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !57
  %193 = bitcast float %182 to i32, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %193, ptr addrspace(1) %192, i1 %186) #5, !dbg !58
  %194 = getelementptr float, ptr addrspace(1) %7, i64 %187, !dbg !59
  %195 = bitcast float %75 to i32, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %194, i1 %191) #5, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwjyghqqmzllk4lbqthaestoku75cohl4x4grzghzmf5y5ivvhfm.py", directory: "inductor_cache/wj")
!4 = !{ptr @triton_per_fused_add_convolution_gelu_native_group_norm_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_convolution_gelu_native_group_norm_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_convolution_gelu_native_group_norm_2", linkageName: "triton_per_fused_add_convolution_gelu_native_group_norm_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 42, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 47, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 31, scope: !7)
!21 = !DILocation(line: 34, column: 36, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 44, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 41, column: 33, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = !DILocation(line: 42, column: 24, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !31)
!33 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!34 = !DILocation(line: 45, column: 19, scope: !7)
!35 = !DILocation(line: 46, column: 19, scope: !7)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 49, column: 35, scope: !7)
!38 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !39)
!39 = !DILocation(line: 50, column: 26, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !39)
!41 = !DILocation(line: 52, column: 20, scope: !7)
!42 = !DILocation(line: 54, column: 20, scope: !7)
!43 = !DILocation(line: 55, column: 28, scope: !7)
!44 = !DILocation(line: 57, column: 20, scope: !7)
!45 = !DILocation(line: 58, column: 20, scope: !7)
!46 = !DILocation(line: 59, column: 20, scope: !7)
!47 = !DILocation(line: 63, column: 20, scope: !7)
!48 = !DILocation(line: 64, column: 26, scope: !7)
!49 = !DILocation(line: 61, column: 20, scope: !7)
!50 = !DILocation(line: 66, column: 20, scope: !7)
!51 = !DILocation(line: 67, column: 20, scope: !7)
!52 = !DILocation(line: 68, column: 20, scope: !7)
!53 = !DILocation(line: 69, column: 47, scope: !7)
!54 = !DILocation(line: 70, column: 4, scope: !7)
!55 = !DILocation(line: 71, column: 28, scope: !7)
!56 = !DILocation(line: 71, column: 40, scope: !7)
!57 = !DILocation(line: 72, column: 28, scope: !7)
!58 = !DILocation(line: 72, column: 48, scope: !7)
!59 = !DILocation(line: 73, column: 25, scope: !7)
!60 = !DILocation(line: 73, column: 37, scope: !7)
!61 = !DILocation(line: 73, column: 4, scope: !7)
