; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_cat_clone_relu_threshold_backward_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %17 = shl i32 %16, 1, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = lshr i32 %18, 6, !dbg !12
  %.lobit = and i32 %19, 1, !dbg !12
  %20 = or disjoint i32 %17, %.lobit, !dbg !13
  %21 = icmp slt i32 %20, 256, !dbg !14
  %22 = icmp slt i32 %17, 256, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %24 = shl i32 %23, 8, !dbg !16
  %25 = shl i32 %18, 2, !dbg !17
  %26 = and i32 %25, 252, !dbg !17
  %27 = and i32 %18, 127, !dbg !17
  %28 = or disjoint i32 %27, 128, !dbg !17
  %29 = or disjoint i32 %24, %26, !dbg !18
  %30 = or disjoint i32 %24, %27, !dbg !18
  %31 = or disjoint i32 %24, %28, !dbg !18
  %32 = icmp slt i32 %29, 256, !dbg !19
  %33 = icmp slt i32 %30, 256, !dbg !19
  %34 = icmp slt i32 %31, 256, !dbg !19
  %.frozen = freeze i32 %17, !dbg !20
  %35 = sdiv i32 %.frozen, 64, !dbg !20
  %36 = mul i32 %35, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %36, !dbg !21
  %37 = shl i32 %20, 8, !dbg !22
  %38 = add i32 %29, %37, !dbg !23
  %39 = sext i32 %38 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %10, i64 %39, !dbg !24
  %41 = and i1 %21, %32, !dbg !25
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %41) #4, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !26
  %47 = shl i32 %18, 3, !dbg !26
  %48 = and i32 %47, 504, !dbg !26
  %49 = or disjoint i32 %48, %.lobit, !dbg !26
  %50 = shl i32 %18, 1, !dbg !26
  %51 = and i32 %50, 254, !dbg !26
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %48, !dbg !26
  %53 = getelementptr inbounds float, ptr addrspace(3) %52, i32 %49, !dbg !26
  %54 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %54, i1 true) #4, !dbg !26
  %55 = or disjoint i32 %49, 2, !dbg !26
  %56 = or disjoint i32 %48, 2, !dbg !26
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %56, !dbg !26
  %58 = getelementptr inbounds float, ptr addrspace(3) %57, i32 %55, !dbg !26
  %59 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %59, i1 true) #4, !dbg !26
  %60 = or disjoint i32 %49, 4, !dbg !26
  %61 = or disjoint i32 %48, 4, !dbg !26
  %62 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %61, !dbg !26
  %63 = getelementptr inbounds float, ptr addrspace(3) %62, i32 %60, !dbg !26
  %64 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #4, !dbg !26
  %65 = or disjoint i32 %49, 6, !dbg !26
  %66 = or disjoint i32 %48, 6, !dbg !26
  %67 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %66, !dbg !26
  %68 = getelementptr inbounds float, ptr addrspace(3) %67, i32 %65, !dbg !26
  %69 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %70 = getelementptr float, ptr addrspace(3) @global_smem, i32 %51, !dbg !26
  %71 = getelementptr float, ptr addrspace(3) %70, i32 %51, !dbg !26
  %72 = load <2 x float>, ptr addrspace(3) %71, align 8, !dbg !26
  %73 = or disjoint i32 %51, 256, !dbg !26
  %74 = getelementptr float, ptr addrspace(3) @global_smem, i32 %73, !dbg !26
  %75 = getelementptr float, ptr addrspace(3) %74, i32 %73, !dbg !26
  %76 = load <2 x float>, ptr addrspace(3) %75, align 8, !dbg !26
  %77 = icmp slt i32 %.decomposed, 32, !dbg !27
  %78 = shl i32 %30, 5, !dbg !28
  %79 = shl i32 %31, 5, !dbg !28
  %80 = shl i32 %35, 13, !dbg !29
  %81 = add i32 %78, %80, !dbg !30
  %82 = add i32 %79, %80, !dbg !30
  %83 = add i32 %81, %.decomposed, !dbg !31
  %84 = add i32 %82, %.decomposed, !dbg !31
  %85 = sext i32 %83 to i64, !dbg !32
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !32
  %87 = sext i32 %84 to i64, !dbg !32
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !32
  %89 = and i1 %77, %33, !dbg !33
  %90 = and i1 %77, %34, !dbg !33
  %91 = and i1 %22, %89, !dbg !34
  %92 = and i1 %22, %90, !dbg !34
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %86, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #4, !dbg !35
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %88, i1 %92, i32 0, i1 %92, i32 0, i1 %92) #4, !dbg !35
  %95 = sext i32 %.decomposed to i64, !dbg !36
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !36
  %97 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %96, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #4, !dbg !37
  %98 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %96, i1 %92, i32 0, i1 %92, i32 0, i1 %92) #4, !dbg !37
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !38
  %100 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %99, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #4, !dbg !39
  %101 = extractvalue { i32, i32 } %100, 0, !dbg !39
  %102 = extractvalue { i32, i32 } %100, 1, !dbg !39
  %103 = bitcast i32 %101 to float, !dbg !39
  %104 = bitcast i32 %102 to float, !dbg !39
  %105 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %99, i1 %92, i32 0, i1 %92, i32 0, i1 %92) #4, !dbg !39
  %106 = extractvalue { i32, i32 } %105, 0, !dbg !39
  %107 = extractvalue { i32, i32 } %105, 1, !dbg !39
  %108 = bitcast i32 %106 to float, !dbg !39
  %109 = bitcast i32 %107 to float, !dbg !39
  %110 = fadd float %103, 0x3EE4F8B580000000, !dbg !40
  %111 = fadd float %104, 0x3EE4F8B580000000, !dbg !40
  %112 = fadd float %108, 0x3EE4F8B580000000, !dbg !40
  %113 = fadd float %109, 0x3EE4F8B580000000, !dbg !40
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i = icmp eq i32 %114, 0, !dbg !41
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i = icmp eq i32 %115, 0, !dbg !41
  br i1 %.not.i, label %121, label %116, !dbg !41

116:                                              ; preds = %15
  br i1 %.not1.i, label %119, label %117, !dbg !41

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

121:                                              ; preds = %15
  br i1 %.not1.i, label %124, label %122, !dbg !41

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %117, %119, %122, %124
  %.0.i = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !41
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i5 = icmp eq i32 %126, 0, !dbg !41
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i8 = icmp eq i32 %127, 0, !dbg !41
  br i1 %.not.i5, label %133, label %128, !dbg !41

128:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %131, label %129, !dbg !41

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %111) #4, !dbg !41
  br label %__nv_sqrtf.exit9, !dbg !41

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %111) #4, !dbg !41
  br label %__nv_sqrtf.exit9, !dbg !41

133:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %136, label %134, !dbg !41

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %111) #4, !dbg !41
  br label %__nv_sqrtf.exit9, !dbg !41

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %111) #4, !dbg !41
  br label %__nv_sqrtf.exit9, !dbg !41

__nv_sqrtf.exit9:                                 ; preds = %129, %131, %134, %136
  %.0.i7 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !41
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i10 = icmp eq i32 %138, 0, !dbg !41
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i13 = icmp eq i32 %139, 0, !dbg !41
  br i1 %.not.i10, label %145, label %140, !dbg !41

140:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %143, label %141, !dbg !41

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #4, !dbg !41
  br label %__nv_sqrtf.exit14, !dbg !41

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #4, !dbg !41
  br label %__nv_sqrtf.exit14, !dbg !41

145:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %148, label %146, !dbg !41

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #4, !dbg !41
  br label %__nv_sqrtf.exit14, !dbg !41

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #4, !dbg !41
  br label %__nv_sqrtf.exit14, !dbg !41

__nv_sqrtf.exit14:                                ; preds = %141, %143, %146, %148
  %.0.i12 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !41
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i15 = icmp eq i32 %150, 0, !dbg !41
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i18 = icmp eq i32 %151, 0, !dbg !41
  br i1 %.not.i15, label %157, label %152, !dbg !41

152:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %155, label %153, !dbg !41

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #4, !dbg !41
  br label %__nv_sqrtf.exit19, !dbg !41

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #4, !dbg !41
  br label %__nv_sqrtf.exit19, !dbg !41

157:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %160, label %158, !dbg !41

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #4, !dbg !41
  br label %__nv_sqrtf.exit19, !dbg !41

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #4, !dbg !41
  br label %__nv_sqrtf.exit19, !dbg !41

__nv_sqrtf.exit19:                                ; preds = %153, %155, %158, %160
  %.0.i17 = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !41
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !42
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #4, !dbg !42
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !42
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !42
  %166 = getelementptr float, ptr addrspace(1) %3, i64 %95, !dbg !43
  %167 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %166, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #4, !dbg !44
  %168 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %166, i1 %92, i32 0, i1 %92, i32 0, i1 %92) #4, !dbg !44
  %169 = getelementptr float, ptr addrspace(1) %4, i64 %95, !dbg !45
  %170 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %169, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #4, !dbg !46
  %171 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %169, i1 %92, i32 0, i1 %92, i32 0, i1 %92) #4, !dbg !46
  %172 = icmp sgt i32 %.decomposed, 31, !dbg !47
  %173 = add nsw i32 %.decomposed, -32, !dbg !48
  %174 = add i32 %81, %173, !dbg !49
  %175 = add i32 %82, %173, !dbg !49
  %176 = sext i32 %174 to i64, !dbg !50
  %177 = getelementptr float, ptr addrspace(1) %5, i64 %176, !dbg !50
  %178 = sext i32 %175 to i64, !dbg !50
  %179 = getelementptr float, ptr addrspace(1) %5, i64 %178, !dbg !50
  %180 = and i1 %172, %33, !dbg !51
  %181 = and i1 %172, %34, !dbg !51
  %182 = and i1 %22, %180, !dbg !52
  %183 = and i1 %22, %181, !dbg !52
  %184 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %177, i1 %182, i32 0, i1 %182, i32 0, i1 %182) #4, !dbg !53
  %185 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %179, i1 %183, i32 0, i1 %183, i32 0, i1 %183) #4, !dbg !53
  %186 = sext i32 %173 to i64, !dbg !54
  %187 = getelementptr float, ptr addrspace(1) %6, i64 %186, !dbg !54
  %188 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %187, i1 %182, i32 0, i1 %182, i32 0, i1 %182) #4, !dbg !55
  %189 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %187, i1 %183, i32 0, i1 %183, i32 0, i1 %183) #4, !dbg !55
  %190 = getelementptr float, ptr addrspace(1) %7, i64 %186, !dbg !56
  %191 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %190, i1 %182, i32 0, i1 %182, i32 0, i1 %182) #4, !dbg !57
  %192 = extractvalue { i32, i32 } %191, 0, !dbg !57
  %193 = extractvalue { i32, i32 } %191, 1, !dbg !57
  %194 = bitcast i32 %192 to float, !dbg !57
  %195 = bitcast i32 %193 to float, !dbg !57
  %196 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %190, i1 %183, i32 0, i1 %183, i32 0, i1 %183) #4, !dbg !57
  %197 = extractvalue { i32, i32 } %196, 0, !dbg !57
  %198 = extractvalue { i32, i32 } %196, 1, !dbg !57
  %199 = bitcast i32 %197 to float, !dbg !57
  %200 = bitcast i32 %198 to float, !dbg !57
  %201 = fadd float %194, 0x3EE4F8B580000000, !dbg !58
  %202 = fadd float %195, 0x3EE4F8B580000000, !dbg !58
  %203 = fadd float %199, 0x3EE4F8B580000000, !dbg !58
  %204 = fadd float %200, 0x3EE4F8B580000000, !dbg !58
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i20 = icmp eq i32 %205, 0, !dbg !59
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i23 = icmp eq i32 %206, 0, !dbg !59
  br i1 %.not.i20, label %212, label %207, !dbg !59

207:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %210, label %208, !dbg !59

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %201) #4, !dbg !59
  br label %__nv_sqrtf.exit24, !dbg !59

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %201) #4, !dbg !59
  br label %__nv_sqrtf.exit24, !dbg !59

212:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %215, label %213, !dbg !59

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.f(float %201) #4, !dbg !59
  br label %__nv_sqrtf.exit24, !dbg !59

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.f(float %201) #4, !dbg !59
  br label %__nv_sqrtf.exit24, !dbg !59

__nv_sqrtf.exit24:                                ; preds = %208, %210, %213, %215
  %.0.i22 = phi float [ %209, %208 ], [ %211, %210 ], [ %214, %213 ], [ %216, %215 ], !dbg !59
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i25 = icmp eq i32 %217, 0, !dbg !59
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i28 = icmp eq i32 %218, 0, !dbg !59
  br i1 %.not.i25, label %224, label %219, !dbg !59

219:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %222, label %220, !dbg !59

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %202) #4, !dbg !59
  br label %__nv_sqrtf.exit29, !dbg !59

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %202) #4, !dbg !59
  br label %__nv_sqrtf.exit29, !dbg !59

224:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %227, label %225, !dbg !59

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.f(float %202) #4, !dbg !59
  br label %__nv_sqrtf.exit29, !dbg !59

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.f(float %202) #4, !dbg !59
  br label %__nv_sqrtf.exit29, !dbg !59

__nv_sqrtf.exit29:                                ; preds = %220, %222, %225, %227
  %.0.i27 = phi float [ %221, %220 ], [ %223, %222 ], [ %226, %225 ], [ %228, %227 ], !dbg !59
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i30 = icmp eq i32 %229, 0, !dbg !59
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i33 = icmp eq i32 %230, 0, !dbg !59
  br i1 %.not.i30, label %236, label %231, !dbg !59

231:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %234, label %232, !dbg !59

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %203) #4, !dbg !59
  br label %__nv_sqrtf.exit34, !dbg !59

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %203) #4, !dbg !59
  br label %__nv_sqrtf.exit34, !dbg !59

236:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %239, label %237, !dbg !59

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.f(float %203) #4, !dbg !59
  br label %__nv_sqrtf.exit34, !dbg !59

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.f(float %203) #4, !dbg !59
  br label %__nv_sqrtf.exit34, !dbg !59

__nv_sqrtf.exit34:                                ; preds = %232, %234, %237, %239
  %.0.i32 = phi float [ %233, %232 ], [ %235, %234 ], [ %238, %237 ], [ %240, %239 ], !dbg !59
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i35 = icmp eq i32 %241, 0, !dbg !59
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i38 = icmp eq i32 %242, 0, !dbg !59
  br i1 %.not.i35, label %248, label %243, !dbg !59

243:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %246, label %244, !dbg !59

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %204) #4, !dbg !59
  br label %__nv_sqrtf.exit39, !dbg !59

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %204) #4, !dbg !59
  br label %__nv_sqrtf.exit39, !dbg !59

248:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %251, label %249, !dbg !59

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.f(float %204) #4, !dbg !59
  br label %__nv_sqrtf.exit39, !dbg !59

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.f(float %204) #4, !dbg !59
  br label %__nv_sqrtf.exit39, !dbg !59

__nv_sqrtf.exit39:                                ; preds = %244, %246, %249, %251
  %.0.i37 = phi float [ %245, %244 ], [ %247, %246 ], [ %250, %249 ], [ %252, %251 ], !dbg !59
  %253 = extractvalue { i32, i32 } %185, 1, !dbg !53
  %254 = extractvalue { i32, i32 } %189, 1, !dbg !55
  %255 = extractvalue { i32, i32 } %185, 0, !dbg !53
  %256 = extractvalue { i32, i32 } %189, 0, !dbg !55
  %257 = insertelement <2 x i32> poison, i32 %255, i64 0, !dbg !53
  %258 = insertelement <2 x i32> %257, i32 %253, i64 1, !dbg !53
  %259 = bitcast <2 x i32> %258 to <2 x float>, !dbg !53
  %260 = insertelement <2 x i32> poison, i32 %256, i64 0, !dbg !55
  %261 = insertelement <2 x i32> %260, i32 %254, i64 1, !dbg !55
  %262 = bitcast <2 x i32> %261 to <2 x float>, !dbg !55
  %263 = fsub <2 x float> %259, %262, !dbg !60
  %264 = extractvalue { i32, i32 } %184, 1, !dbg !53
  %265 = extractvalue { i32, i32 } %188, 1, !dbg !55
  %266 = extractvalue { i32, i32 } %184, 0, !dbg !53
  %267 = extractvalue { i32, i32 } %188, 0, !dbg !55
  %268 = insertelement <2 x i32> poison, i32 %266, i64 0, !dbg !53
  %269 = insertelement <2 x i32> %268, i32 %264, i64 1, !dbg !53
  %270 = bitcast <2 x i32> %269 to <2 x float>, !dbg !53
  %271 = insertelement <2 x i32> poison, i32 %267, i64 0, !dbg !55
  %272 = insertelement <2 x i32> %271, i32 %265, i64 1, !dbg !55
  %273 = bitcast <2 x i32> %272 to <2 x float>, !dbg !55
  %274 = fsub <2 x float> %270, %273, !dbg !60
  %275 = extractvalue { i32, i32 } %94, 1, !dbg !35
  %276 = extractvalue { i32, i32 } %98, 1, !dbg !37
  %277 = extractvalue { i32, i32 } %168, 1, !dbg !44
  %278 = extractvalue { i32, i32 } %171, 1, !dbg !46
  %279 = extractvalue { i32, i32 } %94, 0, !dbg !35
  %280 = extractvalue { i32, i32 } %98, 0, !dbg !37
  %281 = insertelement <2 x i32> poison, i32 %279, i64 0, !dbg !35
  %282 = insertelement <2 x i32> %281, i32 %275, i64 1, !dbg !35
  %283 = bitcast <2 x i32> %282 to <2 x float>, !dbg !35
  %284 = insertelement <2 x i32> poison, i32 %280, i64 0, !dbg !37
  %285 = insertelement <2 x i32> %284, i32 %276, i64 1, !dbg !37
  %286 = bitcast <2 x i32> %285 to <2 x float>, !dbg !37
  %287 = fsub <2 x float> %283, %286, !dbg !61
  %288 = extractvalue { i32, i32 } %168, 0, !dbg !44
  %289 = extractvalue { i32, i32 } %171, 0, !dbg !46
  %290 = extractvalue { i32, i32 } %93, 1, !dbg !35
  %291 = extractvalue { i32, i32 } %97, 1, !dbg !37
  %292 = extractvalue { i32, i32 } %167, 1, !dbg !44
  %293 = extractvalue { i32, i32 } %170, 1, !dbg !46
  %294 = extractvalue { i32, i32 } %93, 0, !dbg !35
  %295 = extractvalue { i32, i32 } %97, 0, !dbg !37
  %296 = insertelement <2 x i32> poison, i32 %294, i64 0, !dbg !35
  %297 = insertelement <2 x i32> %296, i32 %290, i64 1, !dbg !35
  %298 = bitcast <2 x i32> %297 to <2 x float>, !dbg !35
  %299 = insertelement <2 x i32> poison, i32 %295, i64 0, !dbg !37
  %300 = insertelement <2 x i32> %299, i32 %291, i64 1, !dbg !37
  %301 = bitcast <2 x i32> %300 to <2 x float>, !dbg !37
  %302 = fsub <2 x float> %298, %301, !dbg !61
  %303 = extractvalue { i32, i32 } %167, 0, !dbg !44
  %304 = extractvalue { i32, i32 } %170, 0, !dbg !46
  %305 = and i1 %22, %34, !dbg !25
  %306 = and i1 %22, %33, !dbg !25
  %.frozen40 = freeze i32 %20, !dbg !62
  %307 = sdiv i32 %.frozen40, 32, !dbg !62
  %308 = srem i32 %307, 2, !dbg !63
  %309 = mul i32 %307, 32, !dbg !64
  %.decomposed41 = sub i32 %.frozen40, %309, !dbg !64
  %310 = sdiv i32 %20, 64, !dbg !20
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !65
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !65
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !65
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !65
  %315 = getelementptr float, ptr addrspace(1) %8, i64 %186, !dbg !66
  %316 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %315, i1 %182, i32 0, i1 %182, i32 0, i1 %182) #4, !dbg !67
  %317 = extractvalue { i32, i32 } %316, 0, !dbg !67
  %318 = extractvalue { i32, i32 } %316, 1, !dbg !67
  %319 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %315, i1 %183, i32 0, i1 %183, i32 0, i1 %183) #4, !dbg !67
  %320 = extractvalue { i32, i32 } %319, 0, !dbg !67
  %321 = extractvalue { i32, i32 } %319, 1, !dbg !67
  %322 = getelementptr float, ptr addrspace(1) %9, i64 %186, !dbg !68
  %323 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %322, i1 %182, i32 0, i1 %182, i32 0, i1 %182) #4, !dbg !69
  %324 = extractvalue { i32, i32 } %323, 0, !dbg !69
  %325 = extractvalue { i32, i32 } %323, 1, !dbg !69
  %326 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %322, i1 %183, i32 0, i1 %183, i32 0, i1 %183) #4, !dbg !69
  %327 = extractvalue { i32, i32 } %326, 0, !dbg !69
  %328 = extractvalue { i32, i32 } %326, 1, !dbg !69
  %329 = shl nsw i32 %308, 8, !dbg !70
  %330 = shl nsw i32 %.decomposed41, 9, !dbg !71
  %331 = shl i32 %310, 14, !dbg !72
  %332 = shl i32 %35, 14, !dbg !72
  %333 = add i32 %330, %29, !dbg !73
  %334 = add i32 %333, %331, !dbg !74
  %335 = add i32 %334, %329, !dbg !75
  %336 = sext i32 %335 to i64, !dbg !76
  %337 = getelementptr float, ptr addrspace(1) %11, i64 %336, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %338 = and i32 %25, 508, !dbg !77
  %339 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %27, !dbg !77
  %340 = getelementptr inbounds i8, ptr addrspace(3) %339, i32 1028, !dbg !77
  %341 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %28, !dbg !77
  %342 = getelementptr inbounds i8, ptr addrspace(3) %339, i32 1540, !dbg !77
  %343 = lshr i32 %338, 8, !dbg !77
  %344 = or disjoint i32 %343, %338, !dbg !77
  %345 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %344, !dbg !77
  %346 = or disjoint i32 %338, 1, !dbg !77
  %347 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %343, !dbg !77
  %348 = getelementptr inbounds float, ptr addrspace(3) %347, i32 %346, !dbg !77
  %349 = or disjoint i32 %344, 2, !dbg !77
  %350 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %349, !dbg !77
  %351 = or disjoint i32 %338, 3, !dbg !77
  %352 = getelementptr inbounds float, ptr addrspace(3) %347, i32 %351, !dbg !77
  %353 = shl i32 %30, 6, !dbg !78
  %354 = shl i32 %31, 6, !dbg !78
  %355 = add i32 %332, %.decomposed, !dbg !79
  %356 = add i32 %355, %353, !dbg !80
  %357 = add i32 %355, %354, !dbg !80
  %358 = sext i32 %356 to i64, !dbg !81
  %359 = getelementptr i1, ptr addrspace(1) %12, i64 %358, !dbg !81
  %360 = sext i32 %357 to i64, !dbg !81
  %361 = getelementptr i1, ptr addrspace(1) %12, i64 %360, !dbg !81
  %362 = insertelement <2 x float> poison, float %162, i64 0, !dbg !82
  %363 = insertelement <2 x float> %362, float %163, i64 1, !dbg !82
  %364 = fmul <2 x float> %302, %363, !dbg !82
  %365 = insertelement <2 x i32> poison, i32 %303, i64 0, !dbg !44
  %366 = insertelement <2 x i32> %365, i32 %292, i64 1, !dbg !44
  %367 = bitcast <2 x i32> %366 to <2 x float>, !dbg !44
  %368 = fmul <2 x float> %364, %367, !dbg !83
  %369 = insertelement <2 x i32> poison, i32 %304, i64 0, !dbg !46
  %370 = insertelement <2 x i32> %369, i32 %293, i64 1, !dbg !46
  %371 = bitcast <2 x i32> %370 to <2 x float>, !dbg !46
  %372 = fadd <2 x float> %368, %371, !dbg !84
  %373 = fcmp olt <2 x float> %372, zeroinitializer, !dbg !85
  %374 = select <2 x i1> %373, <2 x float> zeroinitializer, <2 x float> %372, !dbg !89
  %375 = insertelement <2 x float> poison, float %311, i64 0, !dbg !90
  %376 = insertelement <2 x float> %375, float %312, i64 1, !dbg !90
  %377 = fmul <2 x float> %274, %376, !dbg !90
  %378 = insertelement <2 x i32> poison, i32 %317, i64 0, !dbg !67
  %379 = insertelement <2 x i32> %378, i32 %318, i64 1, !dbg !67
  %380 = bitcast <2 x i32> %379 to <2 x float>, !dbg !67
  %381 = fmul <2 x float> %377, %380, !dbg !91
  %382 = insertelement <2 x i32> poison, i32 %324, i64 0, !dbg !69
  %383 = insertelement <2 x i32> %382, i32 %325, i64 1, !dbg !69
  %384 = bitcast <2 x i32> %383 to <2 x float>, !dbg !69
  %385 = fadd <2 x float> %381, %384, !dbg !92
  %386 = fcmp olt <2 x float> %385, zeroinitializer, !dbg !93
  %387 = select <2 x i1> %386, <2 x float> zeroinitializer, <2 x float> %385, !dbg !95
  %388 = insertelement <2 x i1> poison, i1 %77, i64 0, !dbg !96
  %389 = shufflevector <2 x i1> %388, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !96
  %390 = select <2 x i1> %389, <2 x float> %374, <2 x float> %387, !dbg !96
  %391 = fadd <2 x float> %72, %390, !dbg !97
  %392 = fcmp olt <2 x float> %391, zeroinitializer, !dbg !98
  %393 = select <2 x i1> %392, <2 x float> zeroinitializer, <2 x float> %391, !dbg !100
  %394 = fcmp ole <2 x float> %393, zeroinitializer, !dbg !101
  %395 = extractelement <2 x float> %393, i64 0, !dbg !77
  %396 = bitcast float %395 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %396, i1 true) #4, !dbg !77
  %397 = extractelement <2 x float> %393, i64 1, !dbg !77
  %398 = bitcast float %397 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %340, <1 x i32> %398, i1 true) #4, !dbg !77
  %399 = insertelement <2 x float> poison, float %164, i64 0, !dbg !82
  %400 = insertelement <2 x float> %399, float %165, i64 1, !dbg !82
  %401 = fmul <2 x float> %287, %400, !dbg !82
  %402 = insertelement <2 x i32> poison, i32 %288, i64 0, !dbg !44
  %403 = insertelement <2 x i32> %402, i32 %277, i64 1, !dbg !44
  %404 = bitcast <2 x i32> %403 to <2 x float>, !dbg !44
  %405 = fmul <2 x float> %401, %404, !dbg !83
  %406 = insertelement <2 x i32> poison, i32 %289, i64 0, !dbg !46
  %407 = insertelement <2 x i32> %406, i32 %278, i64 1, !dbg !46
  %408 = bitcast <2 x i32> %407 to <2 x float>, !dbg !46
  %409 = fadd <2 x float> %405, %408, !dbg !84
  %410 = fcmp olt <2 x float> %409, zeroinitializer, !dbg !85
  %411 = select <2 x i1> %410, <2 x float> zeroinitializer, <2 x float> %409, !dbg !89
  %412 = insertelement <2 x float> poison, float %313, i64 0, !dbg !90
  %413 = insertelement <2 x float> %412, float %314, i64 1, !dbg !90
  %414 = fmul <2 x float> %263, %413, !dbg !90
  %415 = insertelement <2 x i32> poison, i32 %320, i64 0, !dbg !67
  %416 = insertelement <2 x i32> %415, i32 %321, i64 1, !dbg !67
  %417 = bitcast <2 x i32> %416 to <2 x float>, !dbg !67
  %418 = fmul <2 x float> %414, %417, !dbg !91
  %419 = insertelement <2 x i32> poison, i32 %327, i64 0, !dbg !69
  %420 = insertelement <2 x i32> %419, i32 %328, i64 1, !dbg !69
  %421 = bitcast <2 x i32> %420 to <2 x float>, !dbg !69
  %422 = fadd <2 x float> %418, %421, !dbg !92
  %423 = fcmp olt <2 x float> %422, zeroinitializer, !dbg !93
  %424 = select <2 x i1> %423, <2 x float> zeroinitializer, <2 x float> %422, !dbg !95
  %425 = select <2 x i1> %389, <2 x float> %411, <2 x float> %424, !dbg !96
  %426 = fadd <2 x float> %76, %425, !dbg !97
  %427 = fcmp olt <2 x float> %426, zeroinitializer, !dbg !98
  %428 = select <2 x i1> %427, <2 x float> zeroinitializer, <2 x float> %426, !dbg !100
  %429 = fcmp ole <2 x float> %428, zeroinitializer, !dbg !101
  %430 = extractelement <2 x float> %428, i64 0, !dbg !77
  %431 = bitcast float %430 to <1 x i32>, !dbg !77
  %432 = extractelement <2 x float> %428, i64 1, !dbg !77
  %433 = bitcast float %432 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %341, <1 x i32> %431, i1 true) #4, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %342, <1 x i32> %433, i1 true) #4, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %434 = load i32, ptr addrspace(3) %345, align 4, !dbg !77
  %435 = load i32, ptr addrspace(3) %348, align 4, !dbg !77
  %436 = load i32, ptr addrspace(3) %350, align 4, !dbg !77
  %437 = load i32, ptr addrspace(3) %352, align 4, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %434, i32 %435, i32 %436, i32 %437, ptr addrspace(1) %337, i1 %41) #4, !dbg !77
  %438 = zext <2 x i1> %394 to <2 x i8>, !dbg !102
  %439 = bitcast <2 x i8> %438 to i16, !dbg !102
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %439, ptr addrspace(1) %359, i1 %306) #4, !dbg !102
  %440 = zext <2 x i1> %429 to <2 x i8>, !dbg !102
  %441 = bitcast <2 x i8> %440 to i16, !dbg !102
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %441, ptr addrspace(1) %361, i1 %305) #4, !dbg !102
  ret void, !dbg !103
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3n5bdhyjvvhgnljbm753cgh52zhplljenxmbbyykjixhdc2cc2a.py", directory: "inductor_cache/3n")
!4 = !{ptr @triton_poi_fused_add_cat_clone_relu_threshold_backward_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_cat_clone_relu_threshold_backward_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_cat_clone_relu_threshold_backward_24", linkageName: "triton_poi_fused_add_cat_clone_relu_threshold_backward_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 41, scope: !7)
!23 = !DILocation(line: 34, column: 37, scope: !7)
!24 = !DILocation(line: 34, column: 32, scope: !7)
!25 = !DILocation(line: 34, column: 54, scope: !7)
!26 = !DILocation(line: 34, column: 46, scope: !7)
!27 = !DILocation(line: 39, column: 18, scope: !7)
!28 = !DILocation(line: 40, column: 33, scope: !7)
!29 = !DILocation(line: 40, column: 43, scope: !7)
!30 = !DILocation(line: 40, column: 38, scope: !7)
!31 = !DILocation(line: 40, column: 49, scope: !7)
!32 = !DILocation(line: 40, column: 30, scope: !7)
!33 = !DILocation(line: 40, column: 62, scope: !7)
!34 = !DILocation(line: 40, column: 70, scope: !7)
!35 = !DILocation(line: 40, column: 55, scope: !7)
!36 = !DILocation(line: 41, column: 30, scope: !7)
!37 = !DILocation(line: 41, column: 70, scope: !7)
!38 = !DILocation(line: 43, column: 30, scope: !7)
!39 = !DILocation(line: 43, column: 70, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 27, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 31, scope: !7)
!44 = !DILocation(line: 52, column: 71, scope: !7)
!45 = !DILocation(line: 54, column: 31, scope: !7)
!46 = !DILocation(line: 54, column: 71, scope: !7)
!47 = !DILocation(line: 60, column: 20, scope: !7)
!48 = !DILocation(line: 63, column: 58, scope: !7)
!49 = !DILocation(line: 63, column: 50, scope: !7)
!50 = !DILocation(line: 63, column: 31, scope: !7)
!51 = !DILocation(line: 63, column: 72, scope: !7)
!52 = !DILocation(line: 63, column: 80, scope: !7)
!53 = !DILocation(line: 63, column: 64, scope: !7)
!54 = !DILocation(line: 64, column: 31, scope: !7)
!55 = !DILocation(line: 64, column: 79, scope: !7)
!56 = !DILocation(line: 66, column: 31, scope: !7)
!57 = !DILocation(line: 66, column: 79, scope: !7)
!58 = !DILocation(line: 68, column: 20, scope: !7)
!59 = !DILocation(line: 69, column: 27, scope: !7)
!60 = !DILocation(line: 65, column: 20, scope: !7)
!61 = !DILocation(line: 42, column: 18, scope: !7)
!62 = !DILocation(line: 33, column: 21, scope: !7)
!63 = !DILocation(line: 33, column: 27, scope: !7)
!64 = !DILocation(line: 32, column: 19, scope: !7)
!65 = !DILocation(line: 71, column: 20, scope: !7)
!66 = !DILocation(line: 75, column: 31, scope: !7)
!67 = !DILocation(line: 75, column: 79, scope: !7)
!68 = !DILocation(line: 77, column: 31, scope: !7)
!69 = !DILocation(line: 77, column: 79, scope: !7)
!70 = !DILocation(line: 89, column: 34, scope: !7)
!71 = !DILocation(line: 89, column: 43, scope: !7)
!72 = !DILocation(line: 89, column: 54, scope: !7)
!73 = !DILocation(line: 89, column: 30, scope: !7)
!74 = !DILocation(line: 89, column: 39, scope: !7)
!75 = !DILocation(line: 89, column: 48, scope: !7)
!76 = !DILocation(line: 89, column: 25, scope: !7)
!77 = !DILocation(line: 89, column: 66, scope: !7)
!78 = !DILocation(line: 90, column: 33, scope: !7)
!79 = !DILocation(line: 90, column: 30, scope: !7)
!80 = !DILocation(line: 90, column: 38, scope: !7)
!81 = !DILocation(line: 90, column: 25, scope: !7)
!82 = !DILocation(line: 51, column: 19, scope: !7)
!83 = !DILocation(line: 53, column: 20, scope: !7)
!84 = !DILocation(line: 55, column: 20, scope: !7)
!85 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlockFile(scope: !7, file: !87, discriminator: 0)
!87 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!88 = !DILocation(line: 57, column: 42, scope: !7)
!89 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !88)
!90 = !DILocation(line: 74, column: 20, scope: !7)
!91 = !DILocation(line: 76, column: 20, scope: !7)
!92 = !DILocation(line: 78, column: 20, scope: !7)
!93 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !94)
!94 = !DILocation(line: 80, column: 42, scope: !7)
!95 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !94)
!96 = !DILocation(line: 0, scope: !7)
!97 = !DILocation(line: 84, column: 20, scope: !7)
!98 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !99)
!99 = !DILocation(line: 86, column: 42, scope: !7)
!100 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !99)
!101 = !DILocation(line: 88, column: 21, scope: !7)
!102 = !DILocation(line: 90, column: 56, scope: !7)
!103 = !DILocation(line: 90, column: 4, scope: !7)
