; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused__native_batch_norm_legit_no_training_add_convolution_mean_40(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %13 = icmp slt i32 %12, 128, !dbg !11
  %14 = srem i32 %12, 32, !dbg !12
  %15 = sext i32 %14 to i64, !dbg !13
  %16 = getelementptr float, ptr addrspace(1) %3, i64 %15, !dbg !13
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %13) #5, !dbg !14
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %13) #5, !dbg !14
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %13) #5, !dbg !14
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %13) #5, !dbg !14
  %21 = getelementptr float, ptr addrspace(1) %4, i64 %15, !dbg !15
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %13) #5, !dbg !16
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %13) #5, !dbg !16
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %13) #5, !dbg !16
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %13) #5, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %5, i64 %15, !dbg !17
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %13) #5, !dbg !18
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %13) #5, !dbg !18
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %13) #5, !dbg !18
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %13) #5, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %6, i64 %15, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %13) #5, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %13) #5, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %13) #5, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %13) #5, !dbg !20
  %36 = bitcast i32 %35 to float, !dbg !20
  %37 = getelementptr float, ptr addrspace(1) %7, i64 %15, !dbg !21
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %13) #5, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %13) #5, !dbg !22
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %13) #5, !dbg !22
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %13) #5, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %8, i64 %15, !dbg !23
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %13) #5, !dbg !24
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %13) #5, !dbg !24
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %13) #5, !dbg !24
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %13) #5, !dbg !24
  %47 = fadd float %36, 0x3EE4F8B580000000, !dbg !25
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !26
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !26
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !26
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not.i11 = icmp eq i32 %54, 0, !dbg !26
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !26
  %.not1.i14 = icmp eq i32 %55, 0, !dbg !26
  br i1 %.not.i11, label %61, label %56, !dbg !26

56:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %59, label %57, !dbg !26

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #5, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #5, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

61:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %64, label %62, !dbg !26

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #5, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #5, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

__nv_sqrtf.exit15:                                ; preds = %57, %59, %62, %64
  %.0.i13 = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !26
  %66 = shl i32 %12, 12, !dbg !27
  %67 = bitcast i32 %46 to float, !dbg !24
  %68 = bitcast i32 %41 to float, !dbg !22
  %69 = bitcast i32 %30 to float, !dbg !18
  %70 = bitcast i32 %25 to float, !dbg !16
  %71 = bitcast i32 %20 to float, !dbg !14
  %72 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !28
  %73 = shl i32 %72, 2, !dbg !28
  %74 = and i32 %73, 2044, !dbg !28
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !29
  %76 = or disjoint i32 %66, %74
  %77 = sext i32 %76 to i64, !dbg !30
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !31
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %78, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !32
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !32
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !32
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !32
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !32
  %84 = bitcast i32 %80 to float, !dbg !32
  %85 = bitcast i32 %81 to float, !dbg !32
  %86 = bitcast i32 %82 to float, !dbg !32
  %87 = bitcast i32 %83 to float, !dbg !32
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !33
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !34
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !34
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !34
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !34
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !34
  %94 = bitcast i32 %90 to float, !dbg !34
  %95 = bitcast i32 %91 to float, !dbg !34
  %96 = bitcast i32 %92 to float, !dbg !34
  %97 = bitcast i32 %93 to float, !dbg !34
  %98 = fadd float %71, %84, !dbg !35
  %99 = fadd float %71, %85, !dbg !35
  %100 = fadd float %71, %86, !dbg !35
  %101 = fadd float %71, %87, !dbg !35
  %102 = fadd float %70, %94, !dbg !36
  %103 = fadd float %70, %95, !dbg !36
  %104 = fadd float %70, %96, !dbg !36
  %105 = fadd float %70, %97, !dbg !36
  %106 = fsub float %102, %69, !dbg !37
  %107 = fsub float %103, %69, !dbg !37
  %108 = fsub float %104, %69, !dbg !37
  %109 = fsub float %105, %69, !dbg !37
  %110 = fmul float %75, %106, !dbg !38
  %111 = fmul float %75, %107, !dbg !38
  %112 = fmul float %75, %108, !dbg !38
  %113 = fmul float %75, %109, !dbg !38
  %114 = fmul float %110, %68, !dbg !39
  %115 = fmul float %111, %68, !dbg !39
  %116 = fmul float %112, %68, !dbg !39
  %117 = fmul float %113, %68, !dbg !39
  %118 = fadd float %114, %67, !dbg !40
  %119 = fadd float %115, %67, !dbg !40
  %120 = fadd float %116, %67, !dbg !40
  %121 = fadd float %117, %67, !dbg !40
  %122 = fadd float %98, %118, !dbg !41
  %123 = fadd float %99, %119, !dbg !41
  %124 = fadd float %100, %120, !dbg !41
  %125 = fadd float %101, %121, !dbg !41
  %126 = fadd float %122, 0.000000e+00, !dbg !42
  %127 = fadd float %123, 0.000000e+00, !dbg !42
  %128 = fadd float %124, 0.000000e+00, !dbg !42
  %129 = fadd float %125, 0.000000e+00, !dbg !42
  %130 = bitcast float %98 to i32, !dbg !43
  %131 = bitcast float %99 to i32, !dbg !43
  %132 = bitcast float %100 to i32, !dbg !43
  %133 = bitcast float %101 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %130, i32 %131, i32 %132, i32 %133, ptr addrspace(1) %78, i1 %13) #5, !dbg !43
  %134 = bitcast float %102 to i32, !dbg !44
  %135 = bitcast float %103 to i32, !dbg !44
  %136 = bitcast float %104 to i32, !dbg !44
  %137 = bitcast float %105 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %134, i32 %135, i32 %136, i32 %137, ptr addrspace(1) %88, i1 %13) #5, !dbg !44
  %138 = getelementptr float, ptr addrspace(1) %9, i64 %77, !dbg !45
  %139 = bitcast float %122 to i32, !dbg !46
  %140 = bitcast float %123 to i32, !dbg !46
  %141 = bitcast float %124 to i32, !dbg !46
  %142 = bitcast float %125 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %139, i32 %140, i32 %141, i32 %142, ptr addrspace(1) %138, i1 %13) #5, !dbg !46
  %143 = or disjoint i64 %77, 2048, !dbg !47
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !31
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %144, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !32
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !32
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !32
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !32
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !32
  %150 = bitcast i32 %146 to float, !dbg !32
  %151 = bitcast i32 %147 to float, !dbg !32
  %152 = bitcast i32 %148 to float, !dbg !32
  %153 = bitcast i32 %149 to float, !dbg !32
  %154 = getelementptr float, ptr addrspace(1) %1, i64 %143, !dbg !33
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %154, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !34
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !34
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !34
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !34
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !34
  %160 = bitcast i32 %156 to float, !dbg !34
  %161 = bitcast i32 %157 to float, !dbg !34
  %162 = bitcast i32 %158 to float, !dbg !34
  %163 = bitcast i32 %159 to float, !dbg !34
  %164 = fadd float %71, %150, !dbg !35
  %165 = fadd float %71, %151, !dbg !35
  %166 = fadd float %71, %152, !dbg !35
  %167 = fadd float %71, %153, !dbg !35
  %168 = fadd float %70, %160, !dbg !36
  %169 = fadd float %70, %161, !dbg !36
  %170 = fadd float %70, %162, !dbg !36
  %171 = fadd float %70, %163, !dbg !36
  %172 = fsub float %168, %69, !dbg !37
  %173 = fsub float %169, %69, !dbg !37
  %174 = fsub float %170, %69, !dbg !37
  %175 = fsub float %171, %69, !dbg !37
  %176 = fmul float %75, %172, !dbg !38
  %177 = fmul float %75, %173, !dbg !38
  %178 = fmul float %75, %174, !dbg !38
  %179 = fmul float %75, %175, !dbg !38
  %180 = fmul float %176, %68, !dbg !39
  %181 = fmul float %177, %68, !dbg !39
  %182 = fmul float %178, %68, !dbg !39
  %183 = fmul float %179, %68, !dbg !39
  %184 = fadd float %180, %67, !dbg !40
  %185 = fadd float %181, %67, !dbg !40
  %186 = fadd float %182, %67, !dbg !40
  %187 = fadd float %183, %67, !dbg !40
  %188 = fadd float %164, %184, !dbg !41
  %189 = fadd float %165, %185, !dbg !41
  %190 = fadd float %166, %186, !dbg !41
  %191 = fadd float %167, %187, !dbg !41
  %192 = fadd float %126, %188, !dbg !42
  %193 = fadd float %127, %189, !dbg !42
  %194 = fadd float %128, %190, !dbg !42
  %195 = fadd float %129, %191, !dbg !42
  %196 = bitcast float %164 to i32, !dbg !43
  %197 = bitcast float %165 to i32, !dbg !43
  %198 = bitcast float %166 to i32, !dbg !43
  %199 = bitcast float %167 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %196, i32 %197, i32 %198, i32 %199, ptr addrspace(1) %144, i1 %13) #5, !dbg !43
  %200 = bitcast float %168 to i32, !dbg !44
  %201 = bitcast float %169 to i32, !dbg !44
  %202 = bitcast float %170 to i32, !dbg !44
  %203 = bitcast float %171 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %200, i32 %201, i32 %202, i32 %203, ptr addrspace(1) %154, i1 %13) #5, !dbg !44
  %204 = getelementptr float, ptr addrspace(1) %9, i64 %143, !dbg !45
  %205 = bitcast float %188 to i32, !dbg !46
  %206 = bitcast float %189 to i32, !dbg !46
  %207 = bitcast float %190 to i32, !dbg !46
  %208 = bitcast float %191 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %205, i32 %206, i32 %207, i32 %208, ptr addrspace(1) %204, i1 %13) #5, !dbg !46
  %209 = lshr i32 %72, 5, !dbg !28
  %210 = and i32 %72, 31, !dbg !28
  %211 = fadd float %192, %193, !dbg !48
  %212 = fadd float %194, %211, !dbg !48
  %213 = fadd float %195, %212, !dbg !48
  %214 = select i1 %13, float %213, float 0.000000e+00, !dbg !48
  %215 = bitcast float %214 to i32, !dbg !53
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 16, i32 31), !dbg !53
  %217 = bitcast i32 %216 to float, !dbg !53
  %218 = fadd float %214, %217, !dbg !48
  %219 = bitcast float %218 to i32, !dbg !53
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 8, i32 31), !dbg !53
  %221 = bitcast i32 %220 to float, !dbg !53
  %222 = fadd float %218, %221, !dbg !48
  %223 = bitcast float %222 to i32, !dbg !53
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 4, i32 31), !dbg !53
  %225 = bitcast i32 %224 to float, !dbg !53
  %226 = fadd float %222, %225, !dbg !48
  %227 = bitcast float %226 to i32, !dbg !53
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 2, i32 31), !dbg !53
  %229 = bitcast i32 %228 to float, !dbg !53
  %230 = fadd float %226, %229, !dbg !48
  %231 = bitcast float %230 to i32, !dbg !53
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 1, i32 31), !dbg !53
  %233 = bitcast i32 %232 to float, !dbg !53
  %234 = fadd float %230, %233, !dbg !48
  %235 = icmp eq i32 %210, 0, !dbg !53
  %236 = and i32 %209, 15, !dbg !53
  %237 = getelementptr float, ptr addrspace(3) @global_smem, i32 %236, !dbg !53
  %238 = bitcast float %234 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %238, i1 %235) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %239 = icmp slt i32 %72, 16, !dbg !53
  %240 = getelementptr float, ptr addrspace(3) @global_smem, i32 %72, !dbg !53
  %241 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %240, i1 %239) #5, !dbg !53
  %242 = bitcast i32 %241 to float, !dbg !53
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 8, i32 31), !dbg !53
  %244 = bitcast i32 %243 to float, !dbg !53
  %245 = fadd float %242, %244, !dbg !48
  %246 = bitcast float %245 to i32, !dbg !53
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 4, i32 31), !dbg !53
  %248 = bitcast i32 %247 to float, !dbg !53
  %249 = fadd float %245, %248, !dbg !48
  %250 = bitcast float %249 to i32, !dbg !53
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 2, i32 31), !dbg !53
  %252 = bitcast i32 %251 to float, !dbg !53
  %253 = fadd float %249, %252, !dbg !48
  %254 = bitcast float %253 to i32, !dbg !53
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 1, i32 31), !dbg !53
  %256 = bitcast i32 %255 to float, !dbg !53
  %257 = fadd float %253, %256, !dbg !48
  %258 = and i32 %72, 15, !dbg !53
  %259 = icmp eq i32 %258, 0, !dbg !53
  %260 = and i1 %239, %259, !dbg !53
  %261 = bitcast float %257 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %261, i1 %260) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %262 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !53
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %262, float 4.096000e+03) #5, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %264 = sext i32 %12 to i64, !dbg !56
  %265 = getelementptr float, ptr addrspace(1) %2, i64 %264, !dbg !56
  %urem = and i32 %72, 511, !dbg !57
  %266 = icmp eq i32 %urem, 0, !dbg !57
  %267 = bitcast float %263 to i32, !dbg !57
  %268 = and i1 %266, %13, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %267, ptr addrspace(1) %265, i1 %268) #5, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvqdkx6agwdupgg7nua2zu3eideoi3rullzv4km3ndxevyn6atok.py", directory: "inductor_cache/vq")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_add_convolution_mean_40, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_add_convolution_mean_40, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_no_training_add_convolution_mean_40", linkageName: "triton_red_fused__native_batch_norm_legit_no_training_add_convolution_mean_40", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 27, column: 19, scope: !7)
!13 = !DILocation(line: 28, column: 30, scope: !7)
!14 = !DILocation(line: 28, column: 35, scope: !7)
!15 = !DILocation(line: 29, column: 30, scope: !7)
!16 = !DILocation(line: 29, column: 35, scope: !7)
!17 = !DILocation(line: 30, column: 30, scope: !7)
!18 = !DILocation(line: 30, column: 35, scope: !7)
!19 = !DILocation(line: 31, column: 30, scope: !7)
!20 = !DILocation(line: 31, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 31, scope: !7)
!22 = !DILocation(line: 32, column: 36, scope: !7)
!23 = !DILocation(line: 33, column: 31, scope: !7)
!24 = !DILocation(line: 33, column: 36, scope: !7)
!25 = !DILocation(line: 45, column: 23, scope: !7)
!26 = !DILocation(line: 46, column: 31, scope: !7)
!27 = !DILocation(line: 39, column: 48, scope: !7)
!28 = !DILocation(line: 25, column: 33, scope: !7)
!29 = !DILocation(line: 48, column: 24, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 38, scope: !7)
!32 = !DILocation(line: 39, column: 53, scope: !7)
!33 = !DILocation(line: 40, column: 38, scope: !7)
!34 = !DILocation(line: 40, column: 53, scope: !7)
!35 = !DILocation(line: 41, column: 22, scope: !7)
!36 = !DILocation(line: 42, column: 22, scope: !7)
!37 = !DILocation(line: 43, column: 22, scope: !7)
!38 = !DILocation(line: 51, column: 23, scope: !7)
!39 = !DILocation(line: 52, column: 24, scope: !7)
!40 = !DILocation(line: 53, column: 24, scope: !7)
!41 = !DILocation(line: 54, column: 23, scope: !7)
!42 = !DILocation(line: 56, column: 25, scope: !7)
!43 = !DILocation(line: 58, column: 53, scope: !7)
!44 = !DILocation(line: 59, column: 53, scope: !7)
!45 = !DILocation(line: 60, column: 29, scope: !7)
!46 = !DILocation(line: 60, column: 51, scope: !7)
!47 = !DILocation(line: 39, column: 43, scope: !7)
!48 = !DILocation(line: 256, column: 15, scope: !49, inlinedAt: !52)
!49 = distinct !DILexicalBlockFile(scope: !51, file: !50, discriminator: 0)
!50 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!51 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!52 = !DILocation(line: 61, column: 27, scope: !7)
!53 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !52)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 4, scope: !7)
!56 = !DILocation(line: 65, column: 28, scope: !7)
!57 = !DILocation(line: 65, column: 40, scope: !7)
!58 = !DILocation(line: 65, column: 4, scope: !7)
