; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 6, !dbg !12
  %14 = and i32 %13, 3, !dbg !12
  %15 = shl i32 %12, 2, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = or disjoint i32 %16, 8, !dbg !13
  %19 = or disjoint i32 %16, 12, !dbg !13
  %20 = icmp slt i32 %16, 256, !dbg !14
  %21 = icmp slt i32 %17, 256, !dbg !14
  %22 = icmp slt i32 %18, 256, !dbg !14
  %23 = icmp slt i32 %19, 256, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %25 = shl i32 %24, 8, !dbg !16
  %26 = and i32 %15, 252, !dbg !17
  %27 = and i32 %12, 255, !dbg !17
  %28 = or disjoint i32 %25, %26, !dbg !18
  %29 = or disjoint i32 %25, %27, !dbg !18
  %30 = icmp slt i32 %28, 2048, !dbg !19
  %31 = icmp slt i32 %29, 2048, !dbg !19
  %32 = shl i32 %16, 11, !dbg !20
  %33 = shl i32 %17, 11, !dbg !20
  %34 = shl i32 %18, 11, !dbg !20
  %35 = shl i32 %19, 11, !dbg !20
  %36 = add i32 %28, %32, !dbg !21
  %37 = add i32 %28, %33, !dbg !21
  %38 = add i32 %28, %34, !dbg !21
  %39 = add i32 %28, %35, !dbg !21
  %40 = sext i32 %36 to i64, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !22
  %42 = sext i32 %37 to i64, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !22
  %44 = sext i32 %38 to i64, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !22
  %46 = sext i32 %39 to i64, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !22
  %48 = and i1 %20, %30, !dbg !23
  %49 = and i1 %21, %30, !dbg !23
  %50 = and i1 %22, %30, !dbg !23
  %51 = and i1 %23, %30, !dbg !23
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %48) #4, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !24
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %49) #4, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !24
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !24
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %50) #4, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !24
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %51) #4, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !24
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !24
  %72 = and i32 %15, 1020, !dbg !24
  %73 = lshr i32 %72, 8, !dbg !24
  %74 = or disjoint i32 %73, %72, !dbg !24
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %74, !dbg !24
  %76 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #4, !dbg !24
  %77 = or disjoint i32 %72, 1, !dbg !24
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %73, !dbg !24
  %79 = getelementptr inbounds float, ptr addrspace(3) %78, i32 %77, !dbg !24
  %80 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #4, !dbg !24
  %81 = or disjoint i32 %72, 2, !dbg !24
  %82 = getelementptr inbounds float, ptr addrspace(3) %78, i32 %81, !dbg !24
  %83 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #4, !dbg !24
  %84 = or disjoint i32 %72, 3, !dbg !24
  %85 = getelementptr inbounds float, ptr addrspace(3) %78, i32 %84, !dbg !24
  %86 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %27, !dbg !24
  %88 = load float, ptr addrspace(3) %87, align 4, !dbg !24
  %89 = getelementptr inbounds i8, ptr addrspace(3) %87, i32 1028, !dbg !24
  %90 = load float, ptr addrspace(3) %89, align 4, !dbg !24
  %91 = getelementptr inbounds i8, ptr addrspace(3) %87, i32 2056, !dbg !24
  %92 = load float, ptr addrspace(3) %91, align 4, !dbg !24
  %93 = getelementptr inbounds i8, ptr addrspace(3) %87, i32 3084, !dbg !24
  %94 = load float, ptr addrspace(3) %93, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %95 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %95, i1 true) #4, !dbg !24
  %96 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %96, i1 true) #4, !dbg !24
  %97 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %97, i1 true) #4, !dbg !24
  %98 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %98, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %99 = load float, ptr addrspace(3) %87, align 4, !dbg !24
  %100 = load float, ptr addrspace(3) %89, align 4, !dbg !24
  %101 = load float, ptr addrspace(3) %91, align 4, !dbg !24
  %102 = load float, ptr addrspace(3) %93, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %103 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %103, i1 true) #4, !dbg !24
  %104 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %104, i1 true) #4, !dbg !24
  %105 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %105, i1 true) #4, !dbg !24
  %106 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %106, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %107 = load float, ptr addrspace(3) %87, align 4, !dbg !24
  %108 = load float, ptr addrspace(3) %89, align 4, !dbg !24
  %109 = load float, ptr addrspace(3) %91, align 4, !dbg !24
  %110 = load float, ptr addrspace(3) %93, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %111 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %111, i1 true) #4, !dbg !24
  %112 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %112, i1 true) #4, !dbg !24
  %113 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %113, i1 true) #4, !dbg !24
  %114 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %114, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %115 = load float, ptr addrspace(3) %87, align 4, !dbg !24
  %116 = load float, ptr addrspace(3) %89, align 4, !dbg !24
  %117 = load float, ptr addrspace(3) %91, align 4, !dbg !24
  %118 = load float, ptr addrspace(3) %93, align 4, !dbg !24
  %119 = sext i32 %29 to i64, !dbg !25
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !25
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %31) #4, !dbg !26
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !27
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %31) #4, !dbg !28
  %124 = bitcast i32 %123 to float, !dbg !28
  %125 = getelementptr float, ptr addrspace(1) %3, i64 %119, !dbg !29
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %31) #4, !dbg !30
  %127 = getelementptr float, ptr addrspace(1) %4, i64 %119, !dbg !31
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %31) #4, !dbg !32
  %129 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !33
  %130 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !33
  %131 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !33
  %132 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !33
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %129, i1 %48) #4, !dbg !34
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %130, i1 %49) #4, !dbg !34
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %131, i1 %50) #4, !dbg !34
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %132, i1 %51) #4, !dbg !34
  %137 = fadd float %124, 0x3EE4F8B580000000, !dbg !35
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %138, 0, !dbg !36
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %139, 0, !dbg !36
  br i1 %.not.i, label %145, label %140, !dbg !36

140:                                              ; preds = %9
  br i1 %.not1.i, label %143, label %141, !dbg !36

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

145:                                              ; preds = %9
  br i1 %.not1.i, label %148, label %146, !dbg !36

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %141, %143, %146, %148
  %.0.i = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !36
  %150 = bitcast i32 %121 to float, !dbg !26
  %151 = fsub float %118, %150, !dbg !37
  %152 = fsub float %117, %150, !dbg !37
  %153 = fsub float %116, %150, !dbg !37
  %154 = fsub float %115, %150, !dbg !37
  %155 = fsub float %110, %150, !dbg !37
  %156 = fsub float %109, %150, !dbg !37
  %157 = fsub float %108, %150, !dbg !37
  %158 = fsub float %107, %150, !dbg !37
  %159 = fsub float %102, %150, !dbg !37
  %160 = fsub float %101, %150, !dbg !37
  %161 = fsub float %100, %150, !dbg !37
  %162 = fsub float %99, %150, !dbg !37
  %163 = fsub float %94, %150, !dbg !37
  %164 = fsub float %92, %150, !dbg !37
  %165 = fsub float %90, %150, !dbg !37
  %166 = fsub float %88, %150, !dbg !37
  %167 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !34
  %168 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !34
  %169 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !34
  %170 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !34
  %171 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !34
  %172 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !34
  %173 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !34
  %174 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !34
  %175 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !34
  %176 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !34
  %177 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !34
  %178 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !34
  %179 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !34
  %180 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !34
  %181 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !34
  %182 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !34
  %183 = bitcast i32 %128 to float, !dbg !32
  %184 = bitcast i32 %126 to float, !dbg !30
  %185 = lshr i32 %12, 2, !dbg !17
  %186 = and i32 %185, 63, !dbg !17
  %187 = or disjoint i32 %186, %25, !dbg !18
  %188 = or disjoint i32 %187, 192, !dbg !18
  %189 = icmp slt i32 %188, 2048, !dbg !19
  %190 = and i32 %15, 12, !dbg !12
  %191 = or disjoint i32 %11, %190, !dbg !13
  %192 = icmp slt i32 %191, 256, !dbg !14
  %193 = and i1 %192, %189, !dbg !23
  %194 = or disjoint i32 %187, 128, !dbg !18
  %195 = icmp slt i32 %194, 2048, !dbg !19
  %196 = and i1 %192, %195, !dbg !23
  %197 = or disjoint i32 %187, 64, !dbg !18
  %198 = icmp slt i32 %197, 2048, !dbg !19
  %199 = and i1 %192, %198, !dbg !23
  %200 = icmp slt i32 %187, 2048, !dbg !19
  %201 = and i1 %192, %200, !dbg !23
  %.frozen = freeze i32 %191, !dbg !38
  %202 = sdiv i32 %.frozen, 64, !dbg !38
  %203 = mul i32 %202, 64, !dbg !39
  %.decomposed = sub i32 %.frozen, %203, !dbg !39
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %205 = fmul float %166, %204, !dbg !41
  %206 = fmul float %165, %204, !dbg !41
  %207 = fmul float %164, %204, !dbg !41
  %208 = fmul float %163, %204, !dbg !41
  %209 = fmul float %162, %204, !dbg !41
  %210 = fmul float %161, %204, !dbg !41
  %211 = fmul float %160, %204, !dbg !41
  %212 = fmul float %159, %204, !dbg !41
  %213 = fmul float %158, %204, !dbg !41
  %214 = fmul float %157, %204, !dbg !41
  %215 = fmul float %156, %204, !dbg !41
  %216 = fmul float %155, %204, !dbg !41
  %217 = fmul float %154, %204, !dbg !41
  %218 = fmul float %153, %204, !dbg !41
  %219 = fmul float %152, %204, !dbg !41
  %220 = fmul float %151, %204, !dbg !41
  %221 = fmul float %205, %184, !dbg !42
  %222 = fmul float %206, %184, !dbg !42
  %223 = fmul float %207, %184, !dbg !42
  %224 = fmul float %208, %184, !dbg !42
  %225 = fmul float %209, %184, !dbg !42
  %226 = fmul float %210, %184, !dbg !42
  %227 = fmul float %211, %184, !dbg !42
  %228 = fmul float %212, %184, !dbg !42
  %229 = fmul float %213, %184, !dbg !42
  %230 = fmul float %214, %184, !dbg !42
  %231 = fmul float %215, %184, !dbg !42
  %232 = fmul float %216, %184, !dbg !42
  %233 = fmul float %217, %184, !dbg !42
  %234 = fmul float %218, %184, !dbg !42
  %235 = fmul float %219, %184, !dbg !42
  %236 = fmul float %220, %184, !dbg !42
  %237 = fadd float %221, %183, !dbg !43
  %238 = fadd float %222, %183, !dbg !43
  %239 = fadd float %223, %183, !dbg !43
  %240 = fadd float %224, %183, !dbg !43
  %241 = fadd float %225, %183, !dbg !43
  %242 = fadd float %226, %183, !dbg !43
  %243 = fadd float %227, %183, !dbg !43
  %244 = fadd float %228, %183, !dbg !43
  %245 = fadd float %229, %183, !dbg !43
  %246 = fadd float %230, %183, !dbg !43
  %247 = fadd float %231, %183, !dbg !43
  %248 = fadd float %232, %183, !dbg !43
  %249 = fadd float %233, %183, !dbg !43
  %250 = fadd float %234, %183, !dbg !43
  %251 = fadd float %235, %183, !dbg !43
  %252 = fadd float %236, %183, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %253 = bitcast float %237 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %253, i1 true) #4, !dbg !43
  %254 = bitcast float %238 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %254, i1 true) #4, !dbg !43
  %255 = bitcast float %239 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %255, i1 true) #4, !dbg !43
  %256 = bitcast float %240 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %256, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %257 = bitcast float %241 to <1 x i32>, !dbg !43
  %258 = bitcast float %242 to <1 x i32>, !dbg !43
  %259 = bitcast float %243 to <1 x i32>, !dbg !43
  %260 = bitcast float %244 to <1 x i32>, !dbg !43
  %261 = bitcast float %245 to <1 x i32>, !dbg !43
  %262 = bitcast float %246 to <1 x i32>, !dbg !43
  %263 = bitcast float %247 to <1 x i32>, !dbg !43
  %264 = bitcast float %248 to <1 x i32>, !dbg !43
  %265 = bitcast float %249 to <1 x i32>, !dbg !43
  %266 = bitcast float %250 to <1 x i32>, !dbg !43
  %267 = bitcast float %251 to <1 x i32>, !dbg !43
  %268 = bitcast float %252 to <1 x i32>, !dbg !43
  %269 = insertelement <16 x i32> poison, i32 %167, i64 0, !dbg !34
  %270 = insertelement <16 x i32> %269, i32 %168, i64 1, !dbg !34
  %271 = insertelement <16 x i32> %270, i32 %169, i64 2, !dbg !34
  %272 = insertelement <16 x i32> %271, i32 %170, i64 3, !dbg !34
  %273 = insertelement <16 x i32> %272, i32 %171, i64 4, !dbg !34
  %274 = insertelement <16 x i32> %273, i32 %172, i64 5, !dbg !34
  %275 = insertelement <16 x i32> %274, i32 %173, i64 6, !dbg !34
  %276 = insertelement <16 x i32> %275, i32 %174, i64 7, !dbg !34
  %277 = insertelement <16 x i32> %276, i32 %175, i64 8, !dbg !34
  %278 = insertelement <16 x i32> %277, i32 %176, i64 9, !dbg !34
  %279 = insertelement <16 x i32> %278, i32 %177, i64 10, !dbg !34
  %280 = insertelement <16 x i32> %279, i32 %178, i64 11, !dbg !34
  %281 = insertelement <16 x i32> %280, i32 %179, i64 12, !dbg !34
  %282 = insertelement <16 x i32> %281, i32 %180, i64 13, !dbg !34
  %283 = insertelement <16 x i32> %282, i32 %181, i64 14, !dbg !34
  %284 = insertelement <16 x i32> %283, i32 %182, i64 15, !dbg !34
  %285 = bitcast <16 x i32> %284 to <16 x float>, !dbg !34
  %286 = load <4 x float>, ptr addrspace(3) %75, align 4, !dbg !43
  %287 = shufflevector <4 x float> %286, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %257, i1 true) #4, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %258, i1 true) #4, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %259, i1 true) #4, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %260, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %288 = load <4 x float>, ptr addrspace(3) %75, align 4, !dbg !43
  %289 = shufflevector <4 x float> %288, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %261, i1 true) #4, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %262, i1 true) #4, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %263, i1 true) #4, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %264, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %290 = load <4 x float>, ptr addrspace(3) %75, align 4, !dbg !43
  %291 = shufflevector <4 x float> %290, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %265, i1 true) #4, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %266, i1 true) #4, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %267, i1 true) #4, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %268, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %292 = load <4 x float>, ptr addrspace(3) %75, align 4, !dbg !43
  %293 = shufflevector <4 x float> %292, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !43
  %294 = shufflevector <4 x float> %293, <4 x float> %291, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %295 = shufflevector <4 x float> %289, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %296 = shufflevector <16 x float> %294, <16 x float> %295, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %297 = shufflevector <4 x float> %287, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %298 = shufflevector <16 x float> %296, <16 x float> %297, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>, !dbg !44
  %299 = fadd <16 x float> %298, %285, !dbg !44
  %300 = fcmp olt <16 x float> %299, zeroinitializer, !dbg !45
  %301 = extractelement <16 x i1> %300, i64 15, !dbg !49
  %302 = extractelement <16 x float> %299, i64 15, !dbg !49
  %303 = select i1 %301, float 0.000000e+00, float %302, !dbg !49
  %304 = extractelement <16 x i1> %300, i64 14, !dbg !49
  %305 = extractelement <16 x float> %299, i64 14, !dbg !49
  %306 = select i1 %304, float 0.000000e+00, float %305, !dbg !49
  %307 = extractelement <16 x i1> %300, i64 13, !dbg !49
  %308 = extractelement <16 x float> %299, i64 13, !dbg !49
  %309 = select i1 %307, float 0.000000e+00, float %308, !dbg !49
  %310 = extractelement <16 x i1> %300, i64 12, !dbg !49
  %311 = extractelement <16 x float> %299, i64 12, !dbg !49
  %312 = select i1 %310, float 0.000000e+00, float %311, !dbg !49
  %313 = extractelement <16 x i1> %300, i64 11, !dbg !49
  %314 = extractelement <16 x float> %299, i64 11, !dbg !49
  %315 = select i1 %313, float 0.000000e+00, float %314, !dbg !49
  %316 = extractelement <16 x i1> %300, i64 10, !dbg !49
  %317 = extractelement <16 x float> %299, i64 10, !dbg !49
  %318 = select i1 %316, float 0.000000e+00, float %317, !dbg !49
  %319 = extractelement <16 x i1> %300, i64 9, !dbg !49
  %320 = extractelement <16 x float> %299, i64 9, !dbg !49
  %321 = select i1 %319, float 0.000000e+00, float %320, !dbg !49
  %322 = extractelement <16 x i1> %300, i64 8, !dbg !49
  %323 = extractelement <16 x float> %299, i64 8, !dbg !49
  %324 = select i1 %322, float 0.000000e+00, float %323, !dbg !49
  %325 = extractelement <16 x i1> %300, i64 7, !dbg !49
  %326 = extractelement <16 x float> %299, i64 7, !dbg !49
  %327 = select i1 %325, float 0.000000e+00, float %326, !dbg !49
  %328 = extractelement <16 x i1> %300, i64 6, !dbg !49
  %329 = extractelement <16 x float> %299, i64 6, !dbg !49
  %330 = select i1 %328, float 0.000000e+00, float %329, !dbg !49
  %331 = extractelement <16 x i1> %300, i64 5, !dbg !49
  %332 = extractelement <16 x float> %299, i64 5, !dbg !49
  %333 = select i1 %331, float 0.000000e+00, float %332, !dbg !49
  %334 = extractelement <16 x i1> %300, i64 4, !dbg !49
  %335 = extractelement <16 x float> %299, i64 4, !dbg !49
  %336 = select i1 %334, float 0.000000e+00, float %335, !dbg !49
  %337 = extractelement <16 x i1> %300, i64 3, !dbg !49
  %338 = extractelement <16 x float> %299, i64 3, !dbg !49
  %339 = select i1 %337, float 0.000000e+00, float %338, !dbg !49
  %340 = extractelement <16 x i1> %300, i64 2, !dbg !49
  %341 = extractelement <16 x float> %299, i64 2, !dbg !49
  %342 = select i1 %340, float 0.000000e+00, float %341, !dbg !49
  %343 = extractelement <16 x i1> %300, i64 1, !dbg !49
  %344 = extractelement <16 x float> %299, i64 1, !dbg !49
  %345 = select i1 %343, float 0.000000e+00, float %344, !dbg !49
  %346 = extractelement <16 x i1> %300, i64 0, !dbg !49
  %347 = extractelement <16 x float> %299, i64 0, !dbg !49
  %348 = select i1 %346, float 0.000000e+00, float %347, !dbg !49
  %349 = shl i32 %187, 6, !dbg !50
  %350 = shl i32 %197, 6, !dbg !50
  %351 = shl i32 %194, 6, !dbg !50
  %352 = shl i32 %188, 6, !dbg !50
  %353 = shl i32 %202, 17, !dbg !51
  %354 = add i32 %353, %.decomposed, !dbg !52
  %355 = add i32 %354, %349, !dbg !53
  %356 = add i32 %354, %350, !dbg !53
  %357 = add i32 %354, %351, !dbg !53
  %358 = add i32 %354, %352, !dbg !53
  %359 = sext i32 %355 to i64, !dbg !54
  %360 = getelementptr float, ptr addrspace(1) %6, i64 %359, !dbg !54
  %361 = sext i32 %356 to i64, !dbg !54
  %362 = getelementptr float, ptr addrspace(1) %6, i64 %361, !dbg !54
  %363 = sext i32 %357 to i64, !dbg !54
  %364 = getelementptr float, ptr addrspace(1) %6, i64 %363, !dbg !54
  %365 = sext i32 %358 to i64, !dbg !54
  %366 = getelementptr float, ptr addrspace(1) %6, i64 %365, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %367 = shl i32 %12, 6, !dbg !55
  %368 = and i32 %367, 4032, !dbg !55
  %369 = or disjoint i32 %368, %14, !dbg !55
  %370 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %368, !dbg !55
  %371 = getelementptr float, ptr addrspace(3) %370, i32 %369, !dbg !55
  %372 = bitcast float %303 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %371, <1 x i32> %372, i1 true) #4, !dbg !55
  %373 = or disjoint i32 %369, 16, !dbg !55
  %374 = lshr i32 %373, 2, !dbg !55
  %375 = getelementptr float, ptr addrspace(3) @global_smem, i32 %374, !dbg !55
  %376 = getelementptr float, ptr addrspace(3) %375, i32 %373, !dbg !55
  %377 = bitcast float %306 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %376, <1 x i32> %377, i1 true) #4, !dbg !55
  %378 = or disjoint i32 %369, 32, !dbg !55
  %379 = lshr i32 %378, 2, !dbg !55
  %380 = getelementptr float, ptr addrspace(3) @global_smem, i32 %379, !dbg !55
  %381 = getelementptr float, ptr addrspace(3) %380, i32 %378, !dbg !55
  %382 = bitcast float %309 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %382, i1 true) #4, !dbg !55
  %383 = or disjoint i32 %369, 48, !dbg !55
  %384 = lshr i32 %383, 2, !dbg !55
  %385 = getelementptr float, ptr addrspace(3) @global_smem, i32 %384, !dbg !55
  %386 = getelementptr float, ptr addrspace(3) %385, i32 %383, !dbg !55
  %387 = bitcast float %312 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %387, i1 true) #4, !dbg !55
  %388 = or disjoint i32 %369, 4, !dbg !55
  %389 = getelementptr float, ptr addrspace(3) %370, i32 %388, !dbg !55
  %390 = bitcast float %315 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %390, i1 true) #4, !dbg !55
  %391 = or disjoint i32 %369, 20, !dbg !55
  %392 = lshr i32 %391, 2, !dbg !55
  %393 = and i32 %392, 1012, !dbg !55
  %394 = getelementptr float, ptr addrspace(3) @global_smem, i32 %393, !dbg !55
  %395 = getelementptr float, ptr addrspace(3) %394, i32 %391, !dbg !55
  %396 = bitcast float %318 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %396, i1 true) #4, !dbg !55
  %397 = or disjoint i32 %369, 36, !dbg !55
  %398 = lshr i32 %397, 2, !dbg !55
  %399 = and i32 %398, 1016, !dbg !55
  %400 = getelementptr float, ptr addrspace(3) @global_smem, i32 %399, !dbg !55
  %401 = getelementptr float, ptr addrspace(3) %400, i32 %397, !dbg !55
  %402 = bitcast float %321 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %401, <1 x i32> %402, i1 true) #4, !dbg !55
  %403 = or disjoint i32 %369, 52, !dbg !55
  %404 = lshr i32 %403, 2, !dbg !55
  %405 = and i32 %404, 1020, !dbg !55
  %406 = getelementptr float, ptr addrspace(3) @global_smem, i32 %405, !dbg !55
  %407 = getelementptr float, ptr addrspace(3) %406, i32 %403, !dbg !55
  %408 = bitcast float %324 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %408, i1 true) #4, !dbg !55
  %409 = or disjoint i32 %369, 8, !dbg !55
  %410 = getelementptr float, ptr addrspace(3) %370, i32 %409, !dbg !55
  %411 = bitcast float %327 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %410, <1 x i32> %411, i1 true) #4, !dbg !55
  %412 = or disjoint i32 %369, 24, !dbg !55
  %413 = lshr i32 %412, 2, !dbg !55
  %414 = and i32 %413, 1012, !dbg !55
  %415 = getelementptr float, ptr addrspace(3) @global_smem, i32 %414, !dbg !55
  %416 = getelementptr float, ptr addrspace(3) %415, i32 %412, !dbg !55
  %417 = bitcast float %330 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %416, <1 x i32> %417, i1 true) #4, !dbg !55
  %418 = or disjoint i32 %369, 40, !dbg !55
  %419 = lshr i32 %418, 2, !dbg !55
  %420 = and i32 %419, 1016, !dbg !55
  %421 = getelementptr float, ptr addrspace(3) @global_smem, i32 %420, !dbg !55
  %422 = getelementptr float, ptr addrspace(3) %421, i32 %418, !dbg !55
  %423 = bitcast float %333 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %422, <1 x i32> %423, i1 true) #4, !dbg !55
  %424 = or disjoint i32 %369, 56, !dbg !55
  %425 = lshr i32 %424, 2, !dbg !55
  %426 = and i32 %425, 1020, !dbg !55
  %427 = getelementptr float, ptr addrspace(3) @global_smem, i32 %426, !dbg !55
  %428 = getelementptr float, ptr addrspace(3) %427, i32 %424, !dbg !55
  %429 = bitcast float %336 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %429, i1 true) #4, !dbg !55
  %430 = or disjoint i32 %369, 12, !dbg !55
  %431 = getelementptr float, ptr addrspace(3) %370, i32 %430, !dbg !55
  %432 = bitcast float %339 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %431, <1 x i32> %432, i1 true) #4, !dbg !55
  %433 = or disjoint i32 %369, 28, !dbg !55
  %434 = lshr i32 %433, 2, !dbg !55
  %435 = and i32 %434, 1012, !dbg !55
  %436 = getelementptr float, ptr addrspace(3) @global_smem, i32 %435, !dbg !55
  %437 = getelementptr float, ptr addrspace(3) %436, i32 %433, !dbg !55
  %438 = bitcast float %342 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %438, i1 true) #4, !dbg !55
  %439 = or disjoint i32 %369, 44, !dbg !55
  %440 = lshr i32 %439, 2, !dbg !55
  %441 = and i32 %440, 1016, !dbg !55
  %442 = getelementptr float, ptr addrspace(3) @global_smem, i32 %441, !dbg !55
  %443 = getelementptr float, ptr addrspace(3) %442, i32 %439, !dbg !55
  %444 = bitcast float %345 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %443, <1 x i32> %444, i1 true) #4, !dbg !55
  %445 = or disjoint i32 %369, 60, !dbg !55
  %446 = lshr i32 %445, 2, !dbg !55
  %447 = and i32 %446, 1020, !dbg !55
  %448 = getelementptr float, ptr addrspace(3) @global_smem, i32 %447, !dbg !55
  %449 = getelementptr float, ptr addrspace(3) %448, i32 %445, !dbg !55
  %450 = bitcast float %348 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %449, <1 x i32> %450, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %451 = and i32 %12, 252, !dbg !55
  %452 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %451, !dbg !55
  %453 = getelementptr inbounds float, ptr addrspace(3) %452, i32 %72, !dbg !55
  %454 = or disjoint i32 %72, 1024, !dbg !55
  %455 = lshr exact i32 %454, 2, !dbg !55
  %456 = and i32 %455, 508, !dbg !55
  %457 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %456, !dbg !55
  %458 = getelementptr inbounds float, ptr addrspace(3) %457, i32 %454, !dbg !55
  %459 = load <4 x i32>, ptr addrspace(3) %458, align 16, !dbg !55
  %460 = or disjoint i32 %72, 2048, !dbg !55
  %461 = lshr exact i32 %460, 2, !dbg !55
  %462 = and i32 %461, 764, !dbg !55
  %463 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %462, !dbg !55
  %464 = getelementptr inbounds float, ptr addrspace(3) %463, i32 %460, !dbg !55
  %465 = load <4 x i32>, ptr addrspace(3) %464, align 16, !dbg !55
  %466 = or disjoint i32 %72, 3072, !dbg !55
  %467 = lshr exact i32 %466, 2, !dbg !55
  %468 = and i32 %467, 1020, !dbg !55
  %469 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %468, !dbg !55
  %470 = getelementptr inbounds float, ptr addrspace(3) %469, i32 %466, !dbg !55
  %471 = load <4 x i32>, ptr addrspace(3) %470, align 16, !dbg !55
  %.extract = load i32, ptr addrspace(3) %453, align 16, !dbg !55
  %472 = getelementptr inbounds i8, ptr addrspace(3) %453, i32 4, !dbg !55
  %.extract20 = load i32, ptr addrspace(3) %472, align 4, !dbg !55
  %473 = getelementptr inbounds i8, ptr addrspace(3) %453, i32 8, !dbg !55
  %.extract21 = load i32, ptr addrspace(3) %473, align 8, !dbg !55
  %474 = getelementptr inbounds i8, ptr addrspace(3) %453, i32 12, !dbg !55
  %.extract22 = load i32, ptr addrspace(3) %474, align 4, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %360, i1 %201) #4, !dbg !55
  %.extract23 = extractelement <4 x i32> %459, i64 0, !dbg !55
  %.extract24 = extractelement <4 x i32> %459, i64 1, !dbg !55
  %.extract25 = extractelement <4 x i32> %459, i64 2, !dbg !55
  %.extract26 = extractelement <4 x i32> %459, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %362, i1 %199) #4, !dbg !55
  %.extract27 = extractelement <4 x i32> %465, i64 0, !dbg !55
  %.extract28 = extractelement <4 x i32> %465, i64 1, !dbg !55
  %.extract29 = extractelement <4 x i32> %465, i64 2, !dbg !55
  %.extract30 = extractelement <4 x i32> %465, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %364, i1 %196) #4, !dbg !55
  %.extract31 = extractelement <4 x i32> %471, i64 0, !dbg !55
  %.extract32 = extractelement <4 x i32> %471, i64 1, !dbg !55
  %.extract33 = extractelement <4 x i32> %471, i64 2, !dbg !55
  %.extract34 = extractelement <4 x i32> %471, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %366, i1 %193) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cofelecw4xd2ysy5sbit3ycse4blkashzt5sxzxj4gvhlabzg7yt.py", directory: "inductor_cache/of")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_29, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_29", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 53, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 37, column: 31, scope: !7)
!34 = !DILocation(line: 37, column: 46, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 26, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 31, column: 19, scope: !7)
!39 = !DILocation(line: 30, column: 19, scope: !7)
!40 = !DILocation(line: 43, column: 18, scope: !7)
!41 = !DILocation(line: 46, column: 19, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 20, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 51, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 52, column: 33, scope: !7)
!51 = !DILocation(line: 52, column: 45, scope: !7)
!52 = !DILocation(line: 52, column: 30, scope: !7)
!53 = !DILocation(line: 52, column: 38, scope: !7)
!54 = !DILocation(line: 52, column: 25, scope: !7)
!55 = !DILocation(line: 52, column: 57, scope: !7)
!56 = !DILocation(line: 52, column: 4, scope: !7)
