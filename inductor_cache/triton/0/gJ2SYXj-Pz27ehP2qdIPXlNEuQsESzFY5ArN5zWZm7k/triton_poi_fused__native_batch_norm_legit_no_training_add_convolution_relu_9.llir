; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 127, !dbg !12
  %15 = or disjoint i32 %14, 128, !dbg !12
  %16 = or disjoint i32 %14, 256, !dbg !12
  %17 = or disjoint i32 %14, 384, !dbg !12
  %18 = or disjoint i32 %14, 512, !dbg !12
  %19 = or disjoint i32 %14, 640, !dbg !12
  %20 = or disjoint i32 %14, 768, !dbg !12
  %21 = or disjoint i32 %14, 896, !dbg !12
  %22 = or disjoint i32 %12, %14, !dbg !13
  %23 = or disjoint i32 %12, %15, !dbg !13
  %24 = or disjoint i32 %12, %16, !dbg !13
  %25 = or disjoint i32 %12, %17, !dbg !13
  %26 = or disjoint i32 %12, %18, !dbg !13
  %27 = or disjoint i32 %12, %19, !dbg !13
  %28 = or disjoint i32 %12, %20, !dbg !13
  %29 = or disjoint i32 %12, %21, !dbg !13
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %31 = icmp slt i32 %30, 96, !dbg !15
  %32 = mul i32 %22, 96, !dbg !16
  %33 = mul i32 %23, 96, !dbg !16
  %34 = mul i32 %24, 96, !dbg !16
  %35 = mul i32 %25, 96, !dbg !16
  %36 = mul i32 %26, 96, !dbg !16
  %37 = mul i32 %27, 96, !dbg !16
  %38 = mul i32 %28, 96, !dbg !16
  %39 = mul i32 %29, 96, !dbg !16
  %40 = add i32 %32, %30, !dbg !17
  %41 = add i32 %33, %30, !dbg !17
  %42 = add i32 %34, %30, !dbg !17
  %43 = add i32 %35, %30, !dbg !17
  %44 = add i32 %36, %30, !dbg !17
  %45 = add i32 %37, %30, !dbg !17
  %46 = add i32 %38, %30, !dbg !17
  %47 = add i32 %39, %30, !dbg !17
  %48 = sext i32 %40 to i64, !dbg !18
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !18
  %50 = sext i32 %41 to i64, !dbg !18
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !18
  %52 = sext i32 %42 to i64, !dbg !18
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !18
  %54 = sext i32 %43 to i64, !dbg !18
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !18
  %56 = sext i32 %44 to i64, !dbg !18
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !18
  %58 = sext i32 %45 to i64, !dbg !18
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !18
  %60 = sext i32 %46 to i64, !dbg !18
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !18
  %62 = sext i32 %47 to i64, !dbg !18
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !18
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %31) #4, !dbg !19
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %31) #4, !dbg !19
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %31) #4, !dbg !19
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %31) #4, !dbg !19
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %31) #4, !dbg !19
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %31) #4, !dbg !19
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %31) #4, !dbg !19
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %31) #4, !dbg !19
  %72 = sext i32 %30 to i64, !dbg !20
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !20
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %31) #4, !dbg !21
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !22
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !22
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !22
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !22
  %79 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !22
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !22
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !22
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !22
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %31) #4, !dbg !23
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %31) #4, !dbg !23
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %31) #4, !dbg !23
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %31) #4, !dbg !23
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %31) #4, !dbg !23
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %31) #4, !dbg !23
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %31) #4, !dbg !23
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %31) #4, !dbg !23
  %91 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !24
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %31) #4, !dbg !25
  %93 = getelementptr float, ptr addrspace(1) %4, i64 %72, !dbg !26
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %31) #4, !dbg !27
  %95 = bitcast i32 %94 to float, !dbg !27
  %96 = getelementptr float, ptr addrspace(1) %5, i64 %72, !dbg !28
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %31) #4, !dbg !29
  %98 = getelementptr float, ptr addrspace(1) %6, i64 %72, !dbg !30
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %31) #4, !dbg !31
  %100 = fadd float %95, 0x3EE4F8B580000000, !dbg !32
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %101, 0, !dbg !33
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %102, 0, !dbg !33
  br i1 %.not.i, label %108, label %103, !dbg !33

103:                                              ; preds = %10
  br i1 %.not1.i, label %106, label %104, !dbg !33

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

108:                                              ; preds = %10
  br i1 %.not1.i, label %111, label %109, !dbg !33

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %104, %106, %109, %111
  %.0.i = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !33
  %113 = insertelement <8 x i32> poison, i32 %71, i64 0, !dbg !19
  %114 = insertelement <8 x i32> %113, i32 %70, i64 1, !dbg !19
  %115 = insertelement <8 x i32> %114, i32 %69, i64 2, !dbg !19
  %116 = insertelement <8 x i32> %115, i32 %68, i64 3, !dbg !19
  %117 = insertelement <8 x i32> %116, i32 %67, i64 4, !dbg !19
  %118 = insertelement <8 x i32> %117, i32 %66, i64 5, !dbg !19
  %119 = insertelement <8 x i32> %118, i32 %65, i64 6, !dbg !19
  %120 = insertelement <8 x i32> %119, i32 %64, i64 7, !dbg !19
  %121 = bitcast <8 x i32> %120 to <8 x float>, !dbg !19
  %122 = bitcast i32 %90 to float, !dbg !23
  %123 = bitcast i32 %89 to float, !dbg !23
  %124 = bitcast i32 %88 to float, !dbg !23
  %125 = bitcast i32 %87 to float, !dbg !23
  %126 = bitcast i32 %86 to float, !dbg !23
  %127 = bitcast i32 %85 to float, !dbg !23
  %128 = bitcast i32 %84 to float, !dbg !23
  %129 = bitcast i32 %83 to float, !dbg !23
  %130 = shl i32 %13, 2, !dbg !12
  %131 = and i32 %130, 508, !dbg !12
  %132 = or disjoint i32 %131, %12, !dbg !13
  %133 = or disjoint i32 %132, 512, !dbg !13
  %.frozen = freeze i32 %133, !dbg !34
  %134 = sdiv i32 %.frozen, 4096, !dbg !34
  %.frozen22 = freeze i32 %132, !dbg !34
  %135 = sdiv i32 %.frozen22, 4096, !dbg !34
  %136 = mul i32 %134, 4096, !dbg !35
  %.decomposed = sub i32 %.frozen, %136, !dbg !35
  %137 = mul i32 %135, 4096, !dbg !35
  %.decomposed23 = sub i32 %.frozen22, %137, !dbg !35
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %139 = insertelement <8 x i32> poison, i32 %74, i64 0, !dbg !37
  %140 = bitcast <8 x i32> %139 to <8 x float>, !dbg !37
  %141 = shufflevector <8 x float> %140, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !37
  %142 = fadd <8 x float> %141, %121, !dbg !37
  %143 = insertelement <8 x i32> poison, i32 %92, i64 0, !dbg !38
  %144 = bitcast <8 x i32> %143 to <8 x float>, !dbg !38
  %145 = shufflevector <8 x float> %144, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !38
  %146 = fsub <8 x float> %142, %145, !dbg !38
  %147 = insertelement <8 x float> poison, float %138, i64 0, !dbg !39
  %148 = shufflevector <8 x float> %147, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !39
  %149 = fmul <8 x float> %146, %148, !dbg !39
  %150 = insertelement <8 x i32> poison, i32 %97, i64 0, !dbg !40
  %151 = bitcast <8 x i32> %150 to <8 x float>, !dbg !40
  %152 = shufflevector <8 x float> %151, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !40
  %153 = fmul <8 x float> %149, %152, !dbg !40
  %154 = insertelement <8 x i32> poison, i32 %99, i64 0, !dbg !41
  %155 = bitcast <8 x i32> %154 to <8 x float>, !dbg !41
  %156 = shufflevector <8 x float> %155, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !41
  %157 = fadd <8 x float> %153, %156, !dbg !41
  %158 = fcmp olt <8 x float> %157, zeroinitializer, !dbg !42
  %159 = extractelement <8 x i1> %158, i64 7, !dbg !46
  %160 = extractelement <8 x float> %157, i64 7, !dbg !46
  %161 = select i1 %159, float 0.000000e+00, float %160, !dbg !46
  %162 = extractelement <8 x i1> %158, i64 6, !dbg !46
  %163 = extractelement <8 x float> %157, i64 6, !dbg !46
  %164 = select i1 %162, float 0.000000e+00, float %163, !dbg !46
  %165 = extractelement <8 x i1> %158, i64 5, !dbg !46
  %166 = extractelement <8 x float> %157, i64 5, !dbg !46
  %167 = select i1 %165, float 0.000000e+00, float %166, !dbg !46
  %168 = extractelement <8 x i1> %158, i64 4, !dbg !46
  %169 = extractelement <8 x float> %157, i64 4, !dbg !46
  %170 = select i1 %168, float 0.000000e+00, float %169, !dbg !46
  %171 = extractelement <8 x i1> %158, i64 3, !dbg !46
  %172 = extractelement <8 x float> %157, i64 3, !dbg !46
  %173 = select i1 %171, float 0.000000e+00, float %172, !dbg !46
  %174 = extractelement <8 x i1> %158, i64 2, !dbg !46
  %175 = extractelement <8 x float> %157, i64 2, !dbg !46
  %176 = select i1 %174, float 0.000000e+00, float %175, !dbg !46
  %177 = extractelement <8 x i1> %158, i64 1, !dbg !46
  %178 = extractelement <8 x float> %157, i64 1, !dbg !46
  %179 = select i1 %177, float 0.000000e+00, float %178, !dbg !46
  %180 = extractelement <8 x i1> %158, i64 0, !dbg !46
  %181 = extractelement <8 x float> %157, i64 0, !dbg !46
  %182 = select i1 %180, float 0.000000e+00, float %181, !dbg !46
  %183 = fadd float %161, %129, !dbg !47
  %184 = fadd float %164, %128, !dbg !47
  %185 = fadd float %167, %127, !dbg !47
  %186 = fadd float %170, %126, !dbg !47
  %187 = fadd float %173, %125, !dbg !47
  %188 = fadd float %176, %124, !dbg !47
  %189 = fadd float %179, %123, !dbg !47
  %190 = fadd float %182, %122, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %bc = bitcast <8 x float> %142 to <8 x i32>, !dbg !49
  %191 = extractelement <8 x i32> %bc, i64 7, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %191, ptr addrspace(1) %49, i1 %31) #4, !dbg !49
  %bc15 = bitcast <8 x float> %142 to <8 x i32>, !dbg !49
  %192 = extractelement <8 x i32> %bc15, i64 6, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %192, ptr addrspace(1) %51, i1 %31) #4, !dbg !49
  %bc16 = bitcast <8 x float> %142 to <8 x i32>, !dbg !49
  %193 = extractelement <8 x i32> %bc16, i64 5, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %193, ptr addrspace(1) %53, i1 %31) #4, !dbg !49
  %bc17 = bitcast <8 x float> %142 to <8 x i32>, !dbg !49
  %194 = extractelement <8 x i32> %bc17, i64 4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %194, ptr addrspace(1) %55, i1 %31) #4, !dbg !49
  %bc18 = bitcast <8 x float> %142 to <8 x i32>, !dbg !49
  %195 = extractelement <8 x i32> %bc18, i64 3, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %57, i1 %31) #4, !dbg !49
  %bc19 = bitcast <8 x float> %142 to <8 x i32>, !dbg !49
  %196 = extractelement <8 x i32> %bc19, i64 2, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %196, ptr addrspace(1) %59, i1 %31) #4, !dbg !49
  %bc20 = bitcast <8 x float> %142 to <8 x i32>, !dbg !49
  %197 = extractelement <8 x i32> %bc20, i64 1, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %197, ptr addrspace(1) %61, i1 %31) #4, !dbg !49
  %bc21 = bitcast <8 x float> %142 to <8 x i32>, !dbg !49
  %198 = extractelement <8 x i32> %bc21, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %198, ptr addrspace(1) %63, i1 %31) #4, !dbg !49
  %199 = shl i32 %30, 12, !dbg !50
  %200 = add i32 %.decomposed23, %199, !dbg !51
  %201 = add i32 %.decomposed, %199, !dbg !51
  %202 = mul i32 %135, 393216, !dbg !52
  %203 = mul i32 %134, 393216, !dbg !52
  %204 = add i32 %200, %202, !dbg !53
  %205 = add i32 %201, %203, !dbg !53
  %206 = sext i32 %204 to i64, !dbg !54
  %207 = getelementptr float, ptr addrspace(1) %7, i64 %206, !dbg !54
  %208 = sext i32 %205 to i64, !dbg !54
  %209 = getelementptr float, ptr addrspace(1) %7, i64 %208, !dbg !54
  %210 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !55
  %211 = bitcast float %183 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #4, !dbg !55
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !55
  %213 = bitcast float %184 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %213, i1 true) #4, !dbg !55
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !55
  %215 = bitcast float %185 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 true) #4, !dbg !55
  %216 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !55
  %217 = bitcast float %186 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %217, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %218 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %131, !dbg !55
  %219 = load <4 x i32>, ptr addrspace(3) %218, align 16, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %220 = bitcast float %187 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %220, i1 true) #4, !dbg !55
  %221 = bitcast float %188 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %221, i1 true) #4, !dbg !55
  %222 = bitcast float %189 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %222, i1 true) #4, !dbg !55
  %223 = bitcast float %190 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %223, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %224 = load <4 x i32>, ptr addrspace(3) %218, align 16, !dbg !55
  %.extract = extractelement <4 x i32> %219, i64 0, !dbg !55
  %.extract8 = extractelement <4 x i32> %219, i64 1, !dbg !55
  %.extract9 = extractelement <4 x i32> %219, i64 2, !dbg !55
  %.extract10 = extractelement <4 x i32> %219, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %207, i1 %31) #4, !dbg !55
  %.extract11 = extractelement <4 x i32> %224, i64 0, !dbg !55
  %.extract12 = extractelement <4 x i32> %224, i64 1, !dbg !55
  %.extract13 = extractelement <4 x i32> %224, i64 2, !dbg !55
  %.extract14 = extractelement <4 x i32> %224, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %209, i1 %31) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfuvzy4il7hpghn4qael7tohc63ixqmew7qxf7qfhyqfmsiryngi.py", directory: "inductor_cache/fu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 32, column: 42, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 47, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 43, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 36, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 36, scope: !7)
!32 = !DILocation(line: 42, column: 18, scope: !7)
!33 = !DILocation(line: 43, column: 26, scope: !7)
!34 = !DILocation(line: 31, column: 19, scope: !7)
!35 = !DILocation(line: 30, column: 19, scope: !7)
!36 = !DILocation(line: 45, column: 20, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 48, column: 19, scope: !7)
!40 = !DILocation(line: 49, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 52, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 53, column: 19, scope: !7)
!48 = !DILocation(line: 54, column: 4, scope: !7)
!49 = !DILocation(line: 55, column: 47, scope: !7)
!50 = !DILocation(line: 56, column: 35, scope: !7)
!51 = !DILocation(line: 56, column: 30, scope: !7)
!52 = !DILocation(line: 56, column: 47, scope: !7)
!53 = !DILocation(line: 56, column: 40, scope: !7)
!54 = !DILocation(line: 56, column: 25, scope: !7)
!55 = !DILocation(line: 56, column: 59, scope: !7)
!56 = !DILocation(line: 56, column: 4, scope: !7)
