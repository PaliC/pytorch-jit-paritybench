; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_native_layer_norm_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = icmp slt i32 %10, 1028, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %13 = sdiv i32 %.frozen, 257, !dbg !15
  %14 = mul i32 %13, 257, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %.frozen4 = freeze i32 %11, !dbg !15
  %15 = sdiv i32 %.frozen4, 257, !dbg !15
  %16 = mul i32 %15, 257, !dbg !16
  %.decomposed5 = sub i32 %.frozen4, %16, !dbg !16
  %17 = shl nsw i32 %.decomposed, 2, !dbg !17
  %18 = shl nsw i32 %.decomposed5, 2, !dbg !17
  %19 = mul i32 %13, 1056, !dbg !18
  %20 = mul i32 %15, 1056, !dbg !18
  %21 = add i32 %17, %19, !dbg !19
  %22 = add i32 %18, %20, !dbg !19
  %23 = sext i32 %21 to i64, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !20
  %25 = sext i32 %22 to i64, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %12) #3, !dbg !21
  %28 = bitcast i32 %27 to float, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %12) #3, !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = or disjoint i32 %17, 1, !dbg !22
  %32 = or disjoint i32 %18, 1, !dbg !22
  %33 = add i32 %31, %19, !dbg !23
  %34 = add i32 %32, %20, !dbg !23
  %35 = sext i32 %33 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !24
  %37 = sext i32 %34 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %12) #3, !dbg !25
  %40 = bitcast i32 %39 to float, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %12) #3, !dbg !25
  %42 = bitcast i32 %41 to float, !dbg !25
  %43 = or disjoint i32 %17, 2, !dbg !26
  %44 = or disjoint i32 %18, 2, !dbg !26
  %45 = add i32 %43, %19, !dbg !27
  %46 = add i32 %44, %20, !dbg !27
  %47 = sext i32 %45 to i64, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !28
  %49 = sext i32 %46 to i64, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !28
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %12) #3, !dbg !29
  %52 = bitcast i32 %51 to float, !dbg !29
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %12) #3, !dbg !29
  %54 = bitcast i32 %53 to float, !dbg !29
  %55 = or disjoint i32 %17, 3, !dbg !30
  %56 = or disjoint i32 %18, 3, !dbg !30
  %57 = add i32 %55, %19, !dbg !31
  %58 = add i32 %56, %20, !dbg !31
  %59 = sext i32 %57 to i64, !dbg !32
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !32
  %61 = sext i32 %58 to i64, !dbg !32
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !32
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %12) #3, !dbg !33
  %64 = bitcast i32 %63 to float, !dbg !33
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %12) #3, !dbg !33
  %66 = bitcast i32 %65 to float, !dbg !33
  %67 = fadd float %28, %40, !dbg !34
  %68 = fadd float %30, %42, !dbg !34
  %69 = fadd float %67, %52, !dbg !35
  %70 = fadd float %68, %54, !dbg !35
  %71 = fadd float %69, %64, !dbg !36
  %72 = fadd float %70, %66, !dbg !36
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float 4.000000e+00) #3, !dbg !37
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float 4.000000e+00) #3, !dbg !37
  %75 = fsub float %28, %73, !dbg !38
  %76 = fsub float %30, %74, !dbg !38
  %77 = fmul float %75, %75, !dbg !39
  %78 = fmul float %76, %76, !dbg !39
  %79 = fsub float %40, %73, !dbg !40
  %80 = fsub float %42, %74, !dbg !40
  %81 = fmul float %79, %79, !dbg !41
  %82 = fmul float %80, %80, !dbg !41
  %83 = fadd float %77, %81, !dbg !42
  %84 = fadd float %78, %82, !dbg !42
  %85 = fsub float %52, %73, !dbg !43
  %86 = fsub float %54, %74, !dbg !43
  %87 = fmul float %85, %85, !dbg !44
  %88 = fmul float %86, %86, !dbg !44
  %89 = fadd float %87, %83, !dbg !45
  %90 = fadd float %88, %84, !dbg !45
  %91 = fsub float %64, %73, !dbg !46
  %92 = fsub float %66, %74, !dbg !46
  %93 = fmul float %91, %91, !dbg !47
  %94 = fmul float %92, %92, !dbg !47
  %95 = fadd float %93, %89, !dbg !48
  %96 = fadd float %94, %90, !dbg !48
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float 4.000000e+00) #3, !dbg !49
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 4.000000e+00) #3, !dbg !49
  %99 = fadd float %97, 0x3EE4F8B580000000, !dbg !50
  %100 = fadd float %98, 0x3EE4F8B580000000, !dbg !50
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not.i = icmp eq i32 %101, 0, !dbg !51
  br i1 %.not.i, label %104, label %102, !dbg !51

102:                                              ; preds = %4
  %103 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %99), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

104:                                              ; preds = %4
  %105 = tail call float @llvm.nvvm.rsqrt.approx.f(float %99), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

__nv_rsqrtf.exit:                                 ; preds = %102, %104
  %.0.i = phi float [ %103, %102 ], [ %105, %104 ], !dbg !51
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not.i1 = icmp eq i32 %106, 0, !dbg !51
  br i1 %.not.i1, label %109, label %107, !dbg !51

107:                                              ; preds = %__nv_rsqrtf.exit
  %108 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %100), !dbg !51
  br label %__nv_rsqrtf.exit3, !dbg !51

109:                                              ; preds = %__nv_rsqrtf.exit
  %110 = tail call float @llvm.nvvm.rsqrt.approx.f(float %100), !dbg !51
  br label %__nv_rsqrtf.exit3, !dbg !51

__nv_rsqrtf.exit3:                                ; preds = %107, %109
  %.0.i2 = phi float [ %108, %107 ], [ %110, %109 ], !dbg !51
  %111 = sext i32 %10 to i64, !dbg !52
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !52
  %113 = bitcast float %73 to i32, !dbg !53
  %114 = bitcast float %74 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %113, i32 %114, ptr addrspace(1) %112, i1 %12) #3, !dbg !53
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %111, !dbg !54
  %116 = bitcast float %.0.i to i32, !dbg !55
  %117 = bitcast float %.0.i2 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %116, i32 %117, ptr addrspace(1) %115, i1 %12) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdinsfyjfbmxhwuglmysmocwa4s24ekrw6odm7q2ix4yzp2rw7qi.py", directory: "inductor_cache/di")
!4 = !{ptr @triton_poi_fused_native_layer_norm_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_layer_norm_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_layer_norm_9", linkageName: "triton_poi_fused_native_layer_norm_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 32, scope: !7)
!18 = !DILocation(line: 27, column: 42, scope: !7)
!19 = !DILocation(line: 27, column: 37, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 47, scope: !7)
!22 = !DILocation(line: 28, column: 34, scope: !7)
!23 = !DILocation(line: 28, column: 41, scope: !7)
!24 = !DILocation(line: 28, column: 30, scope: !7)
!25 = !DILocation(line: 28, column: 51, scope: !7)
!26 = !DILocation(line: 29, column: 34, scope: !7)
!27 = !DILocation(line: 29, column: 41, scope: !7)
!28 = !DILocation(line: 29, column: 30, scope: !7)
!29 = !DILocation(line: 29, column: 51, scope: !7)
!30 = !DILocation(line: 30, column: 34, scope: !7)
!31 = !DILocation(line: 30, column: 41, scope: !7)
!32 = !DILocation(line: 30, column: 30, scope: !7)
!33 = !DILocation(line: 30, column: 51, scope: !7)
!34 = !DILocation(line: 31, column: 18, scope: !7)
!35 = !DILocation(line: 32, column: 18, scope: !7)
!36 = !DILocation(line: 33, column: 18, scope: !7)
!37 = !DILocation(line: 35, column: 18, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 37, column: 19, scope: !7)
!40 = !DILocation(line: 38, column: 19, scope: !7)
!41 = !DILocation(line: 39, column: 20, scope: !7)
!42 = !DILocation(line: 40, column: 20, scope: !7)
!43 = !DILocation(line: 41, column: 19, scope: !7)
!44 = !DILocation(line: 42, column: 20, scope: !7)
!45 = !DILocation(line: 43, column: 20, scope: !7)
!46 = !DILocation(line: 44, column: 19, scope: !7)
!47 = !DILocation(line: 45, column: 20, scope: !7)
!48 = !DILocation(line: 46, column: 20, scope: !7)
!49 = !DILocation(line: 47, column: 20, scope: !7)
!50 = !DILocation(line: 49, column: 20, scope: !7)
!51 = !DILocation(line: 50, column: 28, scope: !7)
!52 = !DILocation(line: 51, column: 25, scope: !7)
!53 = !DILocation(line: 51, column: 36, scope: !7)
!54 = !DILocation(line: 52, column: 25, scope: !7)
!55 = !DILocation(line: 52, column: 37, scope: !7)
!56 = !DILocation(line: 52, column: 4, scope: !7)
