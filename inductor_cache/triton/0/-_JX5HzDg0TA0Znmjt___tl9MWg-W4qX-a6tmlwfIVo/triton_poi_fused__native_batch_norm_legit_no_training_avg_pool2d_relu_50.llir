; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_50(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %10, 1, !dbg !13
  %16 = srem i32 %15, 2, !dbg !14
  %17 = sdiv i32 %14, 4, !dbg !15
  %18 = srem i32 %17, 512, !dbg !16
  %19 = shl nsw i32 %16, 1, !dbg !17
  %20 = shl i32 %14, 2, !dbg !18
  %21 = add i32 %19, %20, !dbg !19
  %22 = sext i32 %20 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !20
  %24 = sext i32 %21 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !21
  %28 = or disjoint i32 %20, 1, !dbg !22
  %29 = or disjoint i32 %21, 1, !dbg !22
  %30 = sext i32 %28 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !23
  %32 = sext i32 %29 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !24
  %36 = or disjoint i32 %20, 4, !dbg !25
  %37 = add i32 %21, 4, !dbg !25
  %38 = sext i32 %36 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !26
  %40 = sext i32 %37 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !27
  %44 = or disjoint i32 %20, 5, !dbg !28
  %45 = add i32 %21, 5, !dbg !28
  %46 = sext i32 %44 to i64, !dbg !29
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !29
  %48 = sext i32 %45 to i64, !dbg !29
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !29
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !30
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !30
  %52 = sext i32 %18 to i64, !dbg !31
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !31
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !32
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !32
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !33
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !34
  %58 = bitcast i32 %57 to float, !dbg !34
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !34
  %60 = bitcast i32 %59 to float, !dbg !34
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !35
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !36
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !36
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !37
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !38
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !38
  %67 = fadd float %58, 0x3EE4F8B580000000, !dbg !39
  %68 = fadd float %60, 0x3EE4F8B580000000, !dbg !39
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i = icmp eq i32 %69, 0, !dbg !40
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i = icmp eq i32 %70, 0, !dbg !40
  br i1 %.not.i, label %76, label %71, !dbg !40

71:                                               ; preds = %8
  br i1 %.not1.i, label %74, label %72, !dbg !40

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

76:                                               ; preds = %8
  br i1 %.not1.i, label %79, label %77, !dbg !40

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %72, %74, %77, %79
  %.0.i = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !40
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i1 = icmp eq i32 %81, 0, !dbg !40
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i4 = icmp eq i32 %82, 0, !dbg !40
  br i1 %.not.i1, label %88, label %83, !dbg !40

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !40

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !40

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

__nv_sqrtf.exit5:                                 ; preds = %84, %86, %89, %91
  %.0.i3 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !40
  %93 = bitcast i32 %35 to float, !dbg !24
  %94 = bitcast i32 %27 to float, !dbg !21
  %95 = fadd float %94, %93, !dbg !41
  %96 = bitcast i32 %43 to float, !dbg !27
  %97 = fadd float %95, %96, !dbg !42
  %98 = bitcast i32 %51 to float, !dbg !30
  %99 = fadd float %97, %98, !dbg !43
  %100 = fmul float %99, 2.500000e-01, !dbg !44
  %101 = bitcast i32 %55 to float, !dbg !32
  %102 = fsub float %100, %101, !dbg !45
  %103 = bitcast i32 %34 to float, !dbg !24
  %104 = bitcast i32 %26 to float, !dbg !21
  %105 = fadd float %104, %103, !dbg !41
  %106 = bitcast i32 %42 to float, !dbg !27
  %107 = fadd float %105, %106, !dbg !42
  %108 = bitcast i32 %50 to float, !dbg !30
  %109 = fadd float %107, %108, !dbg !43
  %110 = fmul float %109, 2.500000e-01, !dbg !44
  %111 = bitcast i32 %54 to float, !dbg !32
  %112 = fsub float %110, %111, !dbg !45
  %113 = bitcast i32 %66 to float, !dbg !38
  %114 = bitcast i32 %65 to float, !dbg !38
  %115 = bitcast i32 %63 to float, !dbg !36
  %116 = bitcast i32 %62 to float, !dbg !36
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !46
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !46
  %119 = fmul float %112, %117, !dbg !47
  %120 = fmul float %102, %118, !dbg !47
  %121 = fmul float %119, %116, !dbg !48
  %122 = fmul float %120, %115, !dbg !48
  %123 = fadd float %121, %114, !dbg !49
  %124 = fadd float %122, %113, !dbg !49
  %125 = fcmp olt float %123, 0.000000e+00, !dbg !50
  %126 = fcmp olt float %124, 0.000000e+00, !dbg !50
  %127 = select i1 %125, float 0.000000e+00, float %123, !dbg !54
  %128 = select i1 %126, float 0.000000e+00, float %124, !dbg !54
  %129 = sext i32 %14 to i64, !dbg !55
  %130 = getelementptr float, ptr addrspace(1) %5, i64 %129, !dbg !55
  %131 = bitcast float %110 to i32, !dbg !56
  %132 = bitcast float %100 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %131, i32 %132, ptr addrspace(1) %130, i1 true) #3, !dbg !56
  %133 = getelementptr float, ptr addrspace(1) %6, i64 %129, !dbg !57
  %134 = bitcast float %127 to i32, !dbg !58
  %135 = bitcast float %128 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %134, i32 %135, ptr addrspace(1) %133, i1 true) #3, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciq7hd2lnsaydpnbeobiqdoav4npayhalwxnsz75s7iuhh6s6tbm.py", directory: "inductor_cache/iq")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_50, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_50, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_50", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_50", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 27, column: 26, scope: !7)
!17 = !DILocation(line: 28, column: 32, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 37, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 29, column: 41, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 48, scope: !7)
!25 = !DILocation(line: 30, column: 41, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 48, scope: !7)
!28 = !DILocation(line: 31, column: 41, scope: !7)
!29 = !DILocation(line: 31, column: 30, scope: !7)
!30 = !DILocation(line: 31, column: 48, scope: !7)
!31 = !DILocation(line: 32, column: 30, scope: !7)
!32 = !DILocation(line: 32, column: 35, scope: !7)
!33 = !DILocation(line: 33, column: 31, scope: !7)
!34 = !DILocation(line: 33, column: 36, scope: !7)
!35 = !DILocation(line: 34, column: 31, scope: !7)
!36 = !DILocation(line: 34, column: 36, scope: !7)
!37 = !DILocation(line: 35, column: 31, scope: !7)
!38 = !DILocation(line: 35, column: 36, scope: !7)
!39 = !DILocation(line: 43, column: 20, scope: !7)
!40 = !DILocation(line: 44, column: 27, scope: !7)
!41 = !DILocation(line: 36, column: 18, scope: !7)
!42 = !DILocation(line: 37, column: 18, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 40, column: 18, scope: !7)
!45 = !DILocation(line: 41, column: 19, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 20, scope: !7)
!48 = !DILocation(line: 50, column: 20, scope: !7)
!49 = !DILocation(line: 51, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 53, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 54, column: 25, scope: !7)
!56 = !DILocation(line: 54, column: 36, scope: !7)
!57 = !DILocation(line: 55, column: 25, scope: !7)
!58 = !DILocation(line: 55, column: 37, scope: !7)
!59 = !DILocation(line: 55, column: 4, scope: !7)
