; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused_add_div_mean_mul_pow_sub_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = and i32 %6, 63, !dbg !10
  %8 = zext nneg i32 %7 to i64, !dbg !11
  br label %9, !dbg !11

9:                                                ; preds = %5, %__nv_sqrtf.exit5
  %indvars.iv = phi i64 [ 0, %5 ], [ %indvars.iv.next, %__nv_sqrtf.exit5 ]
  %10 = phi float [ 0.000000e+00, %5 ], [ %99, %__nv_sqrtf.exit5 ]
  %11 = or disjoint i64 %indvars.iv, %8, !dbg !12
  %12 = and i64 %11, 252, !dbg !13
  %13 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !14
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %13, i1 true, i32 0, i1 true) #5, !dbg !15
  %15 = bitcast i32 %14 to float, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !16
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 true, i32 0, i1 true) #5, !dbg !17
  %18 = bitcast i32 %17 to float, !dbg !17
  %19 = or disjoint i64 %12, 1, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !19
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 true, i32 0, i1 true) #5, !dbg !20
  %22 = bitcast i32 %21 to float, !dbg !20
  %23 = or disjoint i64 %12, 2, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !22
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 true, i32 0, i1 true) #5, !dbg !23
  %26 = bitcast i32 %25 to float, !dbg !23
  %27 = and i64 %11, 4294967292, !dbg !24
  %28 = or disjoint i64 %27, 3, !dbg !24
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !24
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 true, i32 0, i1 true) #5, !dbg !25
  %31 = bitcast i32 %30 to float, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %11, !dbg !26
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 true, i32 0, i1 true) #5, !dbg !27
  %34 = bitcast i32 %33 to float, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %12, !dbg !28
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 true, i32 0, i1 true) #5, !dbg !29
  %37 = bitcast i32 %36 to float, !dbg !29
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !30
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 true, i32 0, i1 true) #5, !dbg !31
  %40 = bitcast i32 %39 to float, !dbg !31
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !32
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 true, i32 0, i1 true) #5, !dbg !33
  %43 = bitcast i32 %42 to float, !dbg !33
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !34
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 true, i32 0, i1 true) #5, !dbg !35
  %46 = bitcast i32 %45 to float, !dbg !35
  %47 = fmul float %18, %18, !dbg !36
  %48 = fmul float %22, %22, !dbg !37
  %49 = fadd float %47, %48, !dbg !38
  %50 = fmul float %26, %26, !dbg !39
  %51 = fadd float %49, %50, !dbg !40
  %52 = fmul float %31, %31, !dbg !41
  %53 = fadd float %51, %52, !dbg !42
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i = icmp eq i32 %54, 0, !dbg !43
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %.not1.i = icmp eq i32 %55, 0, !dbg !43
  br i1 %.not.i, label %61, label %56, !dbg !43

56:                                               ; preds = %9
  br i1 %.not1.i, label %59, label %57, !dbg !43

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #5, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #5, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

61:                                               ; preds = %9
  br i1 %.not1.i, label %64, label %62, !dbg !43

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #5, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #5, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %57, %59, %62, %64
  %.0.i = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !43
  %66 = fcmp ogt float %.0.i, 0x3D71979980000000, !dbg !44
  %67 = fcmp uno float %.0.i, 0.000000e+00, !dbg !48
  %68 = or i1 %66, %67, !dbg !49
  %69 = select i1 %68, float %.0.i, float 0x3D71979980000000, !dbg !50
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %15, float %69) #5, !dbg !51
  %71 = fsub float %70, %34, !dbg !52
  %72 = fadd float %71, %34, !dbg !53
  %73 = fmul float %37, %37, !dbg !54
  %74 = fmul float %40, %40, !dbg !55
  %75 = fadd float %73, %74, !dbg !56
  %76 = fmul float %43, %43, !dbg !57
  %77 = fadd float %75, %76, !dbg !58
  %78 = fmul float %46, %46, !dbg !59
  %79 = fadd float %77, %78, !dbg !60
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i1 = icmp eq i32 %80, 0, !dbg !61
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !61
  %.not1.i4 = icmp eq i32 %81, 0, !dbg !61
  br i1 %.not.i1, label %87, label %82, !dbg !61

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %85, label %83, !dbg !61

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #5, !dbg !61
  br label %__nv_sqrtf.exit5, !dbg !61

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #5, !dbg !61
  br label %__nv_sqrtf.exit5, !dbg !61

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %90, label %88, !dbg !61

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #5, !dbg !61
  br label %__nv_sqrtf.exit5, !dbg !61

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #5, !dbg !61
  br label %__nv_sqrtf.exit5, !dbg !61

__nv_sqrtf.exit5:                                 ; preds = %83, %85, %88, %90
  %.0.i3 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !61
  %92 = fcmp ogt float %.0.i3, 0x3D71979980000000, !dbg !62
  %93 = fcmp uno float %.0.i3, 0.000000e+00, !dbg !64
  %94 = or i1 %92, %93, !dbg !65
  %95 = select i1 %94, float %.0.i3, float 0x3D71979980000000, !dbg !66
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %34, float %95) #5, !dbg !67
  %97 = fsub float %70, %96, !dbg !68
  %98 = fmul float %97, %97, !dbg !69
  %99 = fadd float %10, %98, !dbg !70
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %11, !dbg !71
  %101 = bitcast float %72 to i32, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %101, ptr addrspace(1) %100, i1 true) #5, !dbg !72
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !11
  %102 = icmp samesign ult i64 %indvars.iv, 192, !dbg !11
  br i1 %102, label %9, label %103, !dbg !11

103:                                              ; preds = %__nv_sqrtf.exit5
  %104 = lshr i32 %6, 5, !dbg !10
  %105 = and i32 %6, 31, !dbg !10
  %106 = bitcast float %99 to i32, !dbg !73
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 16, i32 31), !dbg !73
  %108 = bitcast i32 %107 to float, !dbg !73
  %109 = fadd float %99, %108, !dbg !77
  %110 = bitcast float %109 to i32, !dbg !73
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 8, i32 31), !dbg !73
  %112 = bitcast i32 %111 to float, !dbg !73
  %113 = fadd float %109, %112, !dbg !77
  %114 = bitcast float %113 to i32, !dbg !73
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 4, i32 31), !dbg !73
  %116 = bitcast i32 %115 to float, !dbg !73
  %117 = fadd float %113, %116, !dbg !77
  %118 = bitcast float %117 to i32, !dbg !73
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 2, i32 31), !dbg !73
  %120 = bitcast i32 %119 to float, !dbg !73
  %121 = fadd float %117, %120, !dbg !77
  %122 = bitcast float %121 to i32, !dbg !73
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 1, i32 31), !dbg !73
  %124 = bitcast i32 %123 to float, !dbg !73
  %125 = fadd float %121, %124, !dbg !77
  %126 = icmp eq i32 %105, 0, !dbg !73
  %127 = and i32 %104, 1, !dbg !73
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %127, !dbg !73
  %129 = bitcast float %125 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 %126) #5, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %130 = icmp slt i32 %6, 2, !dbg !73
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %6, !dbg !73
  %132 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %131, i1 %130) #5, !dbg !73
  %133 = bitcast i32 %132 to float, !dbg !73
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 1, i32 31), !dbg !73
  %135 = bitcast i32 %134 to float, !dbg !73
  %136 = fadd float %133, %135, !dbg !77
  %137 = and i32 %6, 1, !dbg !73
  %138 = icmp eq i32 %137, 0, !dbg !73
  %139 = and i1 %130, %138, !dbg !73
  %140 = bitcast float %136 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %140, i1 %139) #5, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %141 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !73
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float 2.560000e+02) #5, !dbg !79
  %143 = fmul float %142, 2.500000e-01, !dbg !80
  %144 = fadd float %142, %143, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %145 = icmp eq i32 %7, 0, !dbg !83
  %146 = bitcast float %144 to i32, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %146, ptr addrspace(1) %0, i1 %145) #5, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py", directory: "inductor_cache/pz")
!4 = !{ptr @triton_red_fused_add_div_mean_mul_pow_sub_5, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_div_mean_mul_pow_sub_5, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_div_mean_mul_pow_sub_5", linkageName: "triton_red_fused_add_div_mean_mul_pow_sub_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 25, column: 33, scope: !7)
!11 = !DILocation(line: 27, column: 36, scope: !7)
!12 = !DILocation(line: 28, column: 27, scope: !7)
!13 = !DILocation(line: 33, column: 36, scope: !7)
!14 = !DILocation(line: 32, column: 34, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 33, column: 34, scope: !7)
!17 = !DILocation(line: 33, column: 41, scope: !7)
!18 = !DILocation(line: 34, column: 38, scope: !7)
!19 = !DILocation(line: 34, column: 34, scope: !7)
!20 = !DILocation(line: 34, column: 45, scope: !7)
!21 = !DILocation(line: 35, column: 38, scope: !7)
!22 = !DILocation(line: 35, column: 34, scope: !7)
!23 = !DILocation(line: 35, column: 45, scope: !7)
!24 = !DILocation(line: 36, column: 34, scope: !7)
!25 = !DILocation(line: 36, column: 45, scope: !7)
!26 = !DILocation(line: 37, column: 35, scope: !7)
!27 = !DILocation(line: 37, column: 40, scope: !7)
!28 = !DILocation(line: 38, column: 35, scope: !7)
!29 = !DILocation(line: 38, column: 42, scope: !7)
!30 = !DILocation(line: 39, column: 35, scope: !7)
!31 = !DILocation(line: 39, column: 46, scope: !7)
!32 = !DILocation(line: 40, column: 35, scope: !7)
!33 = !DILocation(line: 40, column: 46, scope: !7)
!34 = !DILocation(line: 41, column: 35, scope: !7)
!35 = !DILocation(line: 41, column: 46, scope: !7)
!36 = !DILocation(line: 42, column: 22, scope: !7)
!37 = !DILocation(line: 43, column: 22, scope: !7)
!38 = !DILocation(line: 44, column: 22, scope: !7)
!39 = !DILocation(line: 45, column: 22, scope: !7)
!40 = !DILocation(line: 46, column: 22, scope: !7)
!41 = !DILocation(line: 47, column: 23, scope: !7)
!42 = !DILocation(line: 48, column: 23, scope: !7)
!43 = !DILocation(line: 49, column: 31, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 51, column: 46, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 52, column: 23, scope: !7)
!52 = !DILocation(line: 53, column: 24, scope: !7)
!53 = !DILocation(line: 54, column: 24, scope: !7)
!54 = !DILocation(line: 55, column: 24, scope: !7)
!55 = !DILocation(line: 56, column: 24, scope: !7)
!56 = !DILocation(line: 57, column: 24, scope: !7)
!57 = !DILocation(line: 58, column: 24, scope: !7)
!58 = !DILocation(line: 59, column: 24, scope: !7)
!59 = !DILocation(line: 60, column: 24, scope: !7)
!60 = !DILocation(line: 61, column: 24, scope: !7)
!61 = !DILocation(line: 62, column: 31, scope: !7)
!62 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !63)
!63 = !DILocation(line: 63, column: 46, scope: !7)
!64 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !63)
!65 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !63)
!66 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !63)
!67 = !DILocation(line: 64, column: 24, scope: !7)
!68 = !DILocation(line: 65, column: 24, scope: !7)
!69 = !DILocation(line: 66, column: 24, scope: !7)
!70 = !DILocation(line: 68, column: 25, scope: !7)
!71 = !DILocation(line: 70, column: 29, scope: !7)
!72 = !DILocation(line: 70, column: 76, scope: !7)
!73 = !DILocation(line: 267, column: 36, scope: !74, inlinedAt: !76)
!74 = distinct !DILexicalBlockFile(scope: !7, file: !75, discriminator: 0)
!75 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!76 = !DILocation(line: 71, column: 27, scope: !7)
!77 = !DILocation(line: 256, column: 15, scope: !78, inlinedAt: !76)
!78 = distinct !DILexicalBlockFile(scope: !74, file: !75, discriminator: 0)
!79 = !DILocation(line: 73, column: 20, scope: !7)
!80 = !DILocation(line: 75, column: 20, scope: !7)
!81 = !DILocation(line: 76, column: 20, scope: !7)
!82 = !DILocation(line: 77, column: 4, scope: !7)
!83 = !DILocation(line: 78, column: 71, scope: !7)
!84 = !DILocation(line: 78, column: 4, scope: !7)
