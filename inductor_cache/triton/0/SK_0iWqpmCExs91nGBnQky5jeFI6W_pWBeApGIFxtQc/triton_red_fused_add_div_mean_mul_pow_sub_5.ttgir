#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#loc = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":19:0)
#loc1 = loc(unknown)
#loc65 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":71:27)
#loc84 = loc(callsite(#loc1 at #loc65))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_add_div_mean_mul_pow_sub_5(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2.560000e+02> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<2.500000e-01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<9.99999996E-13> : tensor<1x64xf32, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<256> : tensor<1x64xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<256> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<4> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<1> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<2> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<3> : tensor<1x64xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc2)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc2)
    %4 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc3)
    %5 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc3)
    %6 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc4)
    %7 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc4)
    %8 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc5)
    %9 = scf.for %arg5 = %c0_i32 to %c256_i32 step %c64_i32 iter_args(%arg6 = %cst) -> (tensor<1x64xf32, #blocked>)  : i32 {
      %17 = tt.splat %arg5 : i32 -> tensor<1x64xi32, #blocked> loc(#loc7)
      %18 = tt.splat %arg5 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc7)
      %19 = arith.addi %17, %2 : tensor<1x64xi32, #blocked> loc(#loc7)
      %20 = arith.addi %18, %3 : tensor<1x64xi32, #blocked1> loc(#loc7)
      %21 = arith.cmpi slt, %19, %cst_5 : tensor<1x64xi32, #blocked> loc(#loc8)
      %22 = arith.cmpi slt, %20, %cst_4 : tensor<1x64xi32, #blocked1> loc(#loc8)
      %23 = arith.divsi %19, %cst_6 : tensor<1x64xi32, #blocked> loc(#loc9)
      %24 = tt.addptr %5, %20 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc3)
      %25 = tt.load %24, %22, %cst_3 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc10)
      %26 = triton_gpu.convert_layout %25 {boundaryCheck = array<i32>, cache = 1 : i32, evict = 3 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 1>} : tensor<1x64xf32, #blocked1> -> tensor<1x64xf32, #blocked> loc(#loc10)
      %27 = arith.muli %23, %cst_6 : tensor<1x64xi32, #blocked> loc(#loc11)
      %28 = tt.addptr %4, %27 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc12)
      %29 = tt.load %28, %21, %cst evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc13)
      %30 = arith.addi %27, %cst_7 : tensor<1x64xi32, #blocked> loc(#loc14)
      %31 = tt.addptr %4, %30 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc15)
      %32 = tt.load %31, %21, %cst evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc16)
      %33 = arith.addi %27, %cst_8 : tensor<1x64xi32, #blocked> loc(#loc17)
      %34 = tt.addptr %4, %33 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc18)
      %35 = tt.load %34, %21, %cst evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc19)
      %36 = arith.addi %27, %cst_9 : tensor<1x64xi32, #blocked> loc(#loc20)
      %37 = tt.addptr %4, %36 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc21)
      %38 = tt.load %37, %21, %cst evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc22)
      %39 = tt.addptr %7, %20 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc4)
      %40 = tt.load %39, %22, %cst_3 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc23)
      %41 = triton_gpu.convert_layout %40 {boundaryCheck = array<i32>, cache = 1 : i32, evict = 3 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 1>} : tensor<1x64xf32, #blocked1> -> tensor<1x64xf32, #blocked> loc(#loc23)
      %42 = tt.addptr %6, %27 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc24)
      %43 = tt.load %42, %21, %cst evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc25)
      %44 = tt.addptr %6, %30 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc26)
      %45 = tt.load %44, %21, %cst evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc27)
      %46 = tt.addptr %6, %33 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc28)
      %47 = tt.load %46, %21, %cst evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc29)
      %48 = tt.addptr %6, %36 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc30)
      %49 = tt.load %48, %21, %cst evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc31)
      %50 = arith.mulf %29, %29 : tensor<1x64xf32, #blocked> loc(#loc32)
      %51 = arith.mulf %32, %32 : tensor<1x64xf32, #blocked> loc(#loc33)
      %52 = arith.addf %50, %51 : tensor<1x64xf32, #blocked> loc(#loc34)
      %53 = arith.mulf %35, %35 : tensor<1x64xf32, #blocked> loc(#loc35)
      %54 = arith.addf %52, %53 : tensor<1x64xf32, #blocked> loc(#loc36)
      %55 = arith.mulf %38, %38 : tensor<1x64xf32, #blocked> loc(#loc37)
      %56 = arith.addf %54, %55 : tensor<1x64xf32, #blocked> loc(#loc38)
      %57 = tt.extern_elementwise %56 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x64xf32, #blocked>) -> tensor<1x64xf32, #blocked> loc(#loc39)
      %58 = arith.cmpf ogt, %57, %cst_2 : tensor<1x64xf32, #blocked> loc(#loc75)
      %59 = arith.cmpf une, %57, %57 : tensor<1x64xf32, #blocked> loc(#loc76)
      %60 = arith.ori %58, %59 : tensor<1x64xi1, #blocked> loc(#loc77)
      %61 = arith.select %60, %57, %cst_2 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc78)
      %62 = arith.divf %26, %61 : tensor<1x64xf32, #blocked> loc(#loc45)
      %63 = triton_gpu.convert_layout %62 {fastmath = #arith.fastmath<none>} : tensor<1x64xf32, #blocked> -> tensor<1x64xf32, #blocked1> loc(#loc45)
      %64 = arith.subf %63, %40 : tensor<1x64xf32, #blocked1> loc(#loc46)
      %65 = arith.addf %40, %64 : tensor<1x64xf32, #blocked1> loc(#loc47)
      %66 = arith.mulf %43, %43 : tensor<1x64xf32, #blocked> loc(#loc48)
      %67 = arith.mulf %45, %45 : tensor<1x64xf32, #blocked> loc(#loc49)
      %68 = arith.addf %66, %67 : tensor<1x64xf32, #blocked> loc(#loc50)
      %69 = arith.mulf %47, %47 : tensor<1x64xf32, #blocked> loc(#loc51)
      %70 = arith.addf %68, %69 : tensor<1x64xf32, #blocked> loc(#loc52)
      %71 = arith.mulf %49, %49 : tensor<1x64xf32, #blocked> loc(#loc53)
      %72 = arith.addf %70, %71 : tensor<1x64xf32, #blocked> loc(#loc54)
      %73 = tt.extern_elementwise %72 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x64xf32, #blocked>) -> tensor<1x64xf32, #blocked> loc(#loc55)
      %74 = arith.cmpf ogt, %73, %cst_2 : tensor<1x64xf32, #blocked> loc(#loc79)
      %75 = arith.cmpf une, %73, %73 : tensor<1x64xf32, #blocked> loc(#loc80)
      %76 = arith.ori %74, %75 : tensor<1x64xi1, #blocked> loc(#loc81)
      %77 = arith.select %76, %73, %cst_2 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc82)
      %78 = arith.divf %41, %77 : tensor<1x64xf32, #blocked> loc(#loc57)
      %79 = arith.subf %62, %78 : tensor<1x64xf32, #blocked> loc(#loc58)
      %80 = arith.mulf %79, %79 : tensor<1x64xf32, #blocked> loc(#loc59)
      %81 = arith.addf %arg6, %80 : tensor<1x64xf32, #blocked> loc(#loc60)
      %82 = arith.select %21, %81, %arg6 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc61)
      %83 = tt.addptr %8, %20 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc5)
      tt.store %83, %65, %22 : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc62)
      scf.yield %82 : tensor<1x64xf32, #blocked> loc(#loc63)
    } loc(#loc6)
    %10 = "tt.reduce"(%9) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc65)), %arg6: f32 loc(callsite(#loc1 at #loc65))):
      %17 = arith.addf %arg5, %arg6 : f32 loc(#loc86)
      tt.reduce.return %17 : f32 loc(#loc83)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc83)
    %11 = tt.expand_dims %10 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc67)
    %12 = arith.divf %11, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc68)
    %13 = arith.mulf %12, %cst_1 : tensor<1x1xf32, #blocked> loc(#loc69)
    %14 = arith.addf %13, %12 : tensor<1x1xf32, #blocked> loc(#loc70)
    gpu.barrier loc(#loc71)
    %15 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc72)
    %16 = tt.splat %15 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc73)
    tt.store %16, %14 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc73)
    tt.return loc(#loc74)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":25:33)
#loc3 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":32:34)
#loc4 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":37:35)
#loc5 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":70:29)
#loc6 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":27:36)
#loc7 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":28:27)
#loc8 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":29:25)
#loc9 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":31:23)
#loc10 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":32:39)
#loc11 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":33:36)
#loc12 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":33:34)
#loc13 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":33:41)
#loc14 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":34:38)
#loc15 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":34:34)
#loc16 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":34:45)
#loc17 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":35:38)
#loc18 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":35:34)
#loc19 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":35:45)
#loc20 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":36:38)
#loc21 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":36:34)
#loc22 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":36:45)
#loc23 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":37:40)
#loc24 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":38:35)
#loc25 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":38:42)
#loc26 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":39:35)
#loc27 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":39:46)
#loc28 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":40:35)
#loc29 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":40:46)
#loc30 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":41:35)
#loc31 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":41:46)
#loc32 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":42:22)
#loc33 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":43:22)
#loc34 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":44:22)
#loc35 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":45:22)
#loc36 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":46:22)
#loc37 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":47:23)
#loc38 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":48:23)
#loc39 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":49:31)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc41 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":51:46)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc43 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc44 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc45 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":52:23)
#loc46 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":53:24)
#loc47 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":54:24)
#loc48 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":55:24)
#loc49 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":56:24)
#loc50 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":57:24)
#loc51 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":58:24)
#loc52 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":59:24)
#loc53 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":60:24)
#loc54 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":61:24)
#loc55 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":62:31)
#loc56 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":63:46)
#loc57 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":64:24)
#loc58 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":65:24)
#loc59 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":66:24)
#loc60 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":68:25)
#loc61 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":69:40)
#loc62 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":70:76)
#loc63 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":70:8)
#loc64 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc66 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc67 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":71:30)
#loc68 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":73:20)
#loc69 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":75:20)
#loc70 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":76:20)
#loc71 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":77:4)
#loc72 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":78:28)
#loc73 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":78:71)
#loc74 = loc("inductor_cache/pz/cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py":78:4)
#loc75 = loc(callsite(#loc40 at #loc41))
#loc76 = loc(callsite(#loc42 at #loc41))
#loc77 = loc(callsite(#loc43 at #loc41))
#loc78 = loc(callsite(#loc44 at #loc41))
#loc79 = loc(callsite(#loc40 at #loc56))
#loc80 = loc(callsite(#loc42 at #loc56))
#loc81 = loc(callsite(#loc43 at #loc56))
#loc82 = loc(callsite(#loc44 at #loc56))
#loc83 = loc(callsite(#loc64 at #loc65))
#loc85 = loc(callsite(#loc66 at #loc64))
#loc86 = loc(callsite(#loc85 at #loc65))
