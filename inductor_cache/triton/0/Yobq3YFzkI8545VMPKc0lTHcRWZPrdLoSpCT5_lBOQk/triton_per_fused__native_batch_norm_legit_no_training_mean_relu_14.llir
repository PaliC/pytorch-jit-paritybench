; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 7, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 124, !dbg !12
  %14 = lshr i32 %11, 5, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = icmp slt i32 %15, 512, !dbg !14
  %.frozen = freeze i32 %15, !dbg !15
  %17 = sdiv i32 %.frozen, 128, !dbg !15
  %18 = mul i32 %17, 128, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %19 = shl i32 %14, 7, !dbg !17
  %20 = and i32 %19, 896, !dbg !17
  %21 = shl i32 %17, 11, !dbg !18
  %22 = add i32 %21, %.decomposed, !dbg !19
  %23 = add i32 %22, %20, !dbg !20
  %24 = add i32 %22, 1024, !dbg !19
  %25 = add nuw i32 %24, %20, !dbg !20
  %26 = sext i32 %23 to i64, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !21
  %28 = sext i32 %25 to i64, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !21
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !22
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !22
  %32 = sext i32 %.decomposed to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !23
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %16) #5, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !25
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %16) #5, !dbg !26
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !26
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !26
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !26
  %41 = bitcast i32 %37 to float, !dbg !26
  %42 = bitcast i32 %38 to float, !dbg !26
  %43 = bitcast i32 %39 to float, !dbg !26
  %44 = bitcast i32 %40 to float, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !27
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %16) #5, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !29
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %16) #5, !dbg !30
  %49 = fadd float %41, 0x3EE4F8B580000000, !dbg !31
  %50 = fadd float %42, 0x3EE4F8B580000000, !dbg !31
  %51 = fadd float %43, 0x3EE4F8B580000000, !dbg !31
  %52 = fadd float %44, 0x3EE4F8B580000000, !dbg !31
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i = icmp eq i32 %53, 0, !dbg !32
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i = icmp eq i32 %54, 0, !dbg !32
  br i1 %.not.i, label %60, label %55, !dbg !32

55:                                               ; preds = %8
  br i1 %.not1.i, label %58, label %56, !dbg !32

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

60:                                               ; preds = %8
  br i1 %.not1.i, label %63, label %61, !dbg !32

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %56, %58, %61, %63
  %.0.i = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !32
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i1 = icmp eq i32 %65, 0, !dbg !32
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i4 = icmp eq i32 %66, 0, !dbg !32
  br i1 %.not.i1, label %72, label %67, !dbg !32

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %70, label %68, !dbg !32

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %75, label %73, !dbg !32

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

__nv_sqrtf.exit5:                                 ; preds = %68, %70, %73, %75
  %.0.i3 = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !32
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i6 = icmp eq i32 %77, 0, !dbg !32
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i9 = icmp eq i32 %78, 0, !dbg !32
  br i1 %.not.i6, label %84, label %79, !dbg !32

79:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %82, label %80, !dbg !32

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #5, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #5, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

84:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %87, label %85, !dbg !32

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #5, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #5, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

__nv_sqrtf.exit10:                                ; preds = %80, %82, %85, %87
  %.0.i8 = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !32
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i11 = icmp eq i32 %89, 0, !dbg !32
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i14 = icmp eq i32 %90, 0, !dbg !32
  br i1 %.not.i11, label %96, label %91, !dbg !32

91:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %94, label %92, !dbg !32

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #5, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #5, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

96:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %99, label %97, !dbg !32

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #5, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #5, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

__nv_sqrtf.exit15:                                ; preds = %92, %94, %97, %99
  %.0.i13 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !32
  %101 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !22
  %102 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !24
  %103 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !22
  %104 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !24
  %105 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !22
  %106 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !24
  %107 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !22
  %108 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !24
  %109 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !22
  %110 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !22
  %111 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !22
  %112 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !22
  %113 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !30
  %114 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !30
  %115 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !30
  %116 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !30
  %117 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !28
  %118 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !28
  %119 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !28
  %120 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !28
  %121 = and i32 %11, 127, !dbg !12
  %122 = or disjoint i32 %10, %121, !dbg !13
  %123 = icmp slt i32 %122, 512, !dbg !14
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !33
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !33
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #5, !dbg !33
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !33
  %128 = insertelement <4 x i32> poison, i32 %102, i64 0, !dbg !24
  %129 = insertelement <4 x i32> %128, i32 %104, i64 1, !dbg !24
  %130 = insertelement <4 x i32> %129, i32 %106, i64 2, !dbg !24
  %131 = insertelement <4 x i32> %130, i32 %108, i64 3, !dbg !24
  %132 = bitcast <4 x i32> %131 to <4 x float>, !dbg !24
  %133 = shufflevector <4 x float> %132, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !24
  %134 = insertelement <8 x i32> poison, i32 %101, i64 0, !dbg !22
  %135 = insertelement <8 x i32> %134, i32 %103, i64 1, !dbg !22
  %136 = insertelement <8 x i32> %135, i32 %105, i64 2, !dbg !22
  %137 = insertelement <8 x i32> %136, i32 %107, i64 3, !dbg !22
  %138 = insertelement <8 x i32> %137, i32 %109, i64 4, !dbg !22
  %139 = insertelement <8 x i32> %138, i32 %110, i64 5, !dbg !22
  %140 = insertelement <8 x i32> %139, i32 %111, i64 6, !dbg !22
  %141 = insertelement <8 x i32> %140, i32 %112, i64 7, !dbg !22
  %142 = bitcast <8 x i32> %141 to <8 x float>, !dbg !22
  %143 = fsub <8 x float> %142, %133, !dbg !34
  %144 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !30
  %145 = insertelement <4 x i32> %144, i32 %114, i64 1, !dbg !30
  %146 = insertelement <4 x i32> %145, i32 %115, i64 2, !dbg !30
  %147 = insertelement <4 x i32> %146, i32 %116, i64 3, !dbg !30
  %148 = bitcast <4 x i32> %147 to <4 x float>, !dbg !30
  %149 = shufflevector <4 x float> %148, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %150 = insertelement <4 x i32> poison, i32 %117, i64 0, !dbg !28
  %151 = insertelement <4 x i32> %150, i32 %118, i64 1, !dbg !28
  %152 = insertelement <4 x i32> %151, i32 %119, i64 2, !dbg !28
  %153 = insertelement <4 x i32> %152, i32 %120, i64 3, !dbg !28
  %154 = bitcast <4 x i32> %153 to <4 x float>, !dbg !28
  %155 = shufflevector <4 x float> %154, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %156 = insertelement <8 x float> poison, float %127, i64 0, !dbg !35
  %157 = insertelement <8 x float> %156, float %126, i64 1, !dbg !35
  %158 = insertelement <8 x float> %157, float %125, i64 2, !dbg !35
  %159 = insertelement <8 x float> %158, float %124, i64 3, !dbg !35
  %160 = shufflevector <8 x float> %159, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !35
  %161 = fmul <8 x float> %143, %160, !dbg !35
  %162 = fmul <8 x float> %161, %155, !dbg !36
  %163 = fadd <8 x float> %162, %149, !dbg !37
  %164 = fcmp olt <8 x float> %163, zeroinitializer, !dbg !38
  %165 = extractelement <8 x i1> %164, i64 7, !dbg !42
  %166 = extractelement <8 x float> %163, i64 7, !dbg !42
  %167 = select i1 %165, float 0.000000e+00, float %166, !dbg !42
  %168 = extractelement <8 x i1> %164, i64 6, !dbg !42
  %169 = extractelement <8 x float> %163, i64 6, !dbg !42
  %170 = select i1 %168, float 0.000000e+00, float %169, !dbg !42
  %171 = extractelement <8 x i1> %164, i64 5, !dbg !42
  %172 = extractelement <8 x float> %163, i64 5, !dbg !42
  %173 = select i1 %171, float 0.000000e+00, float %172, !dbg !42
  %174 = extractelement <8 x i1> %164, i64 4, !dbg !42
  %175 = extractelement <8 x float> %163, i64 4, !dbg !42
  %176 = select i1 %174, float 0.000000e+00, float %175, !dbg !42
  %177 = extractelement <8 x i1> %164, i64 3, !dbg !42
  %178 = extractelement <8 x float> %163, i64 3, !dbg !42
  %179 = select i1 %177, float 0.000000e+00, float %178, !dbg !42
  %180 = extractelement <8 x i1> %164, i64 2, !dbg !42
  %181 = extractelement <8 x float> %163, i64 2, !dbg !42
  %182 = select i1 %180, float 0.000000e+00, float %181, !dbg !42
  %183 = extractelement <8 x i1> %164, i64 1, !dbg !42
  %184 = extractelement <8 x float> %163, i64 1, !dbg !42
  %185 = select i1 %183, float 0.000000e+00, float %184, !dbg !42
  %186 = extractelement <8 x i1> %164, i64 0, !dbg !42
  %187 = extractelement <8 x float> %163, i64 0, !dbg !42
  %188 = select i1 %186, float 0.000000e+00, float %187, !dbg !42
  %189 = fadd float %167, %179, !dbg !43
  %190 = fadd float %170, %182, !dbg !43
  %191 = fadd float %173, %185, !dbg !43
  %192 = fadd float %176, %188, !dbg !43
  %193 = and i32 %14, 7, !dbg !48
  %194 = shl nuw nsw i32 %13, 3, !dbg !48
  %195 = or disjoint i32 %194, %193, !dbg !48
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !48
  %197 = bitcast float %189 to i32, !dbg !48
  %198 = select i1 %16, i32 %197, i32 0, !dbg !43
  %199 = insertelement <1 x i32> poison, i32 %198, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %199, i1 true) #5, !dbg !48
  %200 = or disjoint i32 %194, 8, !dbg !48
  %201 = or disjoint i32 %200, %193, !dbg !48
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i32 %201, !dbg !48
  %203 = bitcast float %190 to i32, !dbg !48
  %204 = select i1 %16, i32 %203, i32 0, !dbg !43
  %205 = insertelement <1 x i32> poison, i32 %204, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %205, i1 true) #5, !dbg !48
  %206 = or disjoint i32 %194, 16, !dbg !48
  %207 = or disjoint i32 %206, %193, !dbg !48
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i32 %207, !dbg !48
  %209 = bitcast float %191 to i32, !dbg !48
  %210 = select i1 %16, i32 %209, i32 0, !dbg !43
  %211 = insertelement <1 x i32> poison, i32 %210, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %211, i1 true) #5, !dbg !48
  %212 = or disjoint i32 %194, 24, !dbg !48
  %213 = or disjoint i32 %212, %193, !dbg !48
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i32 %213, !dbg !48
  %215 = bitcast float %192 to i32, !dbg !48
  %216 = select i1 %16, i32 %215, i32 0, !dbg !43
  %217 = insertelement <1 x i32> poison, i32 %216, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %217, i1 true) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %218 = icmp slt i32 %11, 1024, !dbg !48
  %219 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !48
  %220 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %219, i1 %218) #5, !dbg !48
  %221 = bitcast i32 %220 to float, !dbg !48
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 4, i32 31), !dbg !48
  %223 = bitcast i32 %222 to float, !dbg !48
  %224 = fadd float %221, %223, !dbg !43
  %225 = bitcast float %224 to i32, !dbg !48
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 2, i32 31), !dbg !48
  %227 = bitcast i32 %226 to float, !dbg !48
  %228 = fadd float %224, %227, !dbg !43
  %229 = bitcast float %228 to i32, !dbg !48
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 1, i32 31), !dbg !48
  %231 = bitcast i32 %230 to float, !dbg !48
  %232 = fadd float %228, %231, !dbg !43
  %233 = and i32 %11, 7, !dbg !48
  %234 = icmp eq i32 %233, 0, !dbg !48
  %235 = and i1 %218, %234, !dbg !48
  %236 = bitcast float %232 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %236, i1 %235) #5, !dbg !48
  %237 = getelementptr i8, ptr addrspace(3) %219, i32 1024, !dbg !48
  %238 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %237, i1 %218) #5, !dbg !48
  %239 = bitcast i32 %238 to float, !dbg !48
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 4, i32 31), !dbg !48
  %241 = bitcast i32 %240 to float, !dbg !48
  %242 = fadd float %239, %241, !dbg !43
  %243 = bitcast float %242 to i32, !dbg !48
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 2, i32 31), !dbg !48
  %245 = bitcast i32 %244 to float, !dbg !48
  %246 = fadd float %242, %245, !dbg !43
  %247 = bitcast float %246 to i32, !dbg !48
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 1, i32 31), !dbg !48
  %249 = bitcast i32 %248 to float, !dbg !48
  %250 = fadd float %246, %249, !dbg !43
  %251 = bitcast float %250 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %251, i1 %235) #5, !dbg !48
  %252 = getelementptr i8, ptr addrspace(3) %219, i32 2048, !dbg !48
  %253 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %252, i1 %218) #5, !dbg !48
  %254 = bitcast i32 %253 to float, !dbg !48
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 4, i32 31), !dbg !48
  %256 = bitcast i32 %255 to float, !dbg !48
  %257 = fadd float %254, %256, !dbg !43
  %258 = bitcast float %257 to i32, !dbg !48
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 2, i32 31), !dbg !48
  %260 = bitcast i32 %259 to float, !dbg !48
  %261 = fadd float %257, %260, !dbg !43
  %262 = bitcast float %261 to i32, !dbg !48
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 1, i32 31), !dbg !48
  %264 = bitcast i32 %263 to float, !dbg !48
  %265 = fadd float %261, %264, !dbg !43
  %266 = bitcast float %265 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %266, i1 %235) #5, !dbg !48
  %267 = getelementptr i8, ptr addrspace(3) %219, i32 3072, !dbg !48
  %268 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %267, i1 %218) #5, !dbg !48
  %269 = bitcast i32 %268 to float, !dbg !48
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 4, i32 31), !dbg !48
  %271 = bitcast i32 %270 to float, !dbg !48
  %272 = fadd float %269, %271, !dbg !43
  %273 = bitcast float %272 to i32, !dbg !48
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 2, i32 31), !dbg !48
  %275 = bitcast i32 %274 to float, !dbg !48
  %276 = fadd float %272, %275, !dbg !43
  %277 = bitcast float %276 to i32, !dbg !48
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 1, i32 31), !dbg !48
  %279 = bitcast i32 %278 to float, !dbg !48
  %280 = fadd float %276, %279, !dbg !43
  %281 = bitcast float %280 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %281, i1 %235) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %282 = getelementptr float, ptr addrspace(3) @global_smem, i32 %194, !dbg !48
  %283 = load i32, ptr addrspace(3) %282, align 16, !dbg !48
  %284 = getelementptr float, ptr addrspace(3) @global_smem, i32 %200, !dbg !48
  %285 = load i32, ptr addrspace(3) %284, align 16, !dbg !48
  %286 = getelementptr float, ptr addrspace(3) @global_smem, i32 %206, !dbg !48
  %287 = load i32, ptr addrspace(3) %286, align 16, !dbg !48
  %288 = getelementptr float, ptr addrspace(3) @global_smem, i32 %212, !dbg !48
  %289 = load i32, ptr addrspace(3) %288, align 16, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %290 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !49
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %290, i32 %283, i32 %285, i32 %287, i32 %289, i1 true) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %291 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %121, !dbg !49
  %292 = load float, ptr addrspace(3) %291, align 4, !dbg !49
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %292, float 1.600000e+01) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %294 = sext i32 %122 to i64, !dbg !51
  %295 = getelementptr float, ptr addrspace(1) %0, i64 %294, !dbg !51
  %296 = and i32 %11, 128, !dbg !52
  %297 = icmp eq i32 %296, 0, !dbg !52
  %298 = bitcast float %293 to i32, !dbg !52
  %299 = and i1 %297, %123, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %298, ptr addrspace(1) %295, i1 %299) #5, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfsg5tkk2jkbyyzrialu5izt4iwcikw7o7lhn56tdzqdki6p72s3.py", directory: "inductor_cache/fs")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_14, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_mean_relu_14", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_mean_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 39, scope: !7)
!18 = !DILocation(line: 33, column: 49, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 44, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 54, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 40, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 26, scope: !7)
!33 = !DILocation(line: 43, column: 18, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 46, column: 19, scope: !7)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 50, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 256, column: 15, scope: !44, inlinedAt: !47)
!44 = distinct !DILexicalBlockFile(scope: !46, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!46 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!47 = !DILocation(line: 53, column: 26, scope: !7)
!48 = !DILocation(line: 267, column: 36, scope: !46, inlinedAt: !47)
!49 = !DILocation(line: 55, column: 20, scope: !7)
!50 = !DILocation(line: 56, column: 4, scope: !7)
!51 = !DILocation(line: 57, column: 28, scope: !7)
!52 = !DILocation(line: 57, column: 40, scope: !7)
!53 = !DILocation(line: 57, column: 4, scope: !7)
