; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, i32 %21) local_unnamed_addr !dbg !7 {
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %24 = shl i32 %23, 8, !dbg !11
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %26 = shl i32 %25, 1, !dbg !12
  %27 = and i32 %26, 254, !dbg !12
  %28 = or disjoint i32 %24, %27, !dbg !13
  %29 = sdiv i32 %28, 64, !dbg !14
  %30 = srem i32 %29, 32, !dbg !15
  %31 = sext i32 %28 to i64, !dbg !16
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !16
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !17
  %34 = sext i32 %30 to i64, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !18
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !19
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !20
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %40 = bitcast i32 %39 to float, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %42 = bitcast i32 %41 to float, !dbg !21
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !23
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !23
  %46 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !24
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !25
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %6, i64 %34, !dbg !26
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !27
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !27
  %52 = getelementptr float, ptr addrspace(1) %7, i64 %31, !dbg !28
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !29
  %54 = getelementptr float, ptr addrspace(1) %8, i64 %34, !dbg !30
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !31
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !31
  %57 = getelementptr float, ptr addrspace(1) %9, i64 %31, !dbg !32
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !33
  %59 = getelementptr float, ptr addrspace(1) %10, i64 %31, !dbg !34
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !35
  %61 = getelementptr float, ptr addrspace(1) %11, i64 %34, !dbg !36
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !37
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !37
  %64 = getelementptr float, ptr addrspace(1) %12, i64 %34, !dbg !38
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !39
  %66 = bitcast i32 %65 to float, !dbg !39
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !39
  %68 = bitcast i32 %67 to float, !dbg !39
  %69 = getelementptr float, ptr addrspace(1) %13, i64 %34, !dbg !40
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !41
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !41
  %72 = getelementptr float, ptr addrspace(1) %14, i64 %34, !dbg !42
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !43
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !43
  %75 = getelementptr float, ptr addrspace(1) %15, i64 %34, !dbg !44
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !45
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !45
  %78 = getelementptr float, ptr addrspace(1) %16, i64 %31, !dbg !46
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !47
  %80 = getelementptr float, ptr addrspace(1) %17, i64 %34, !dbg !48
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !49
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !49
  %83 = getelementptr float, ptr addrspace(1) %18, i64 %31, !dbg !50
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !51
  %85 = fadd float %40, 0x3EE4F8B580000000, !dbg !52
  %86 = fadd float %42, 0x3EE4F8B580000000, !dbg !52
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i = icmp eq i32 %87, 0, !dbg !53
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i = icmp eq i32 %88, 0, !dbg !53
  br i1 %.not.i, label %94, label %89, !dbg !53

89:                                               ; preds = %22
  br i1 %.not1.i, label %92, label %90, !dbg !53

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

94:                                               ; preds = %22
  br i1 %.not1.i, label %97, label %95, !dbg !53

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

__nv_sqrtf.exit:                                  ; preds = %90, %92, %95, %97
  %.0.i = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !53
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i1 = icmp eq i32 %99, 0, !dbg !53
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i4 = icmp eq i32 %100, 0, !dbg !53
  br i1 %.not.i1, label %106, label %101, !dbg !53

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %104, label %102, !dbg !53

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

106:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %109, label %107, !dbg !53

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

__nv_sqrtf.exit5:                                 ; preds = %102, %104, %107, %109
  %.0.i3 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !53
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !54
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !54
  %113 = fadd float %66, 0x3EE4F8B580000000, !dbg !55
  %114 = fadd float %68, 0x3EE4F8B580000000, !dbg !55
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i6 = icmp eq i32 %115, 0, !dbg !56
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i9 = icmp eq i32 %116, 0, !dbg !56
  br i1 %.not.i6, label %122, label %117, !dbg !56

117:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %120, label %118, !dbg !56

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #3, !dbg !56
  br label %__nv_sqrtf.exit10, !dbg !56

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #3, !dbg !56
  br label %__nv_sqrtf.exit10, !dbg !56

122:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %125, label %123, !dbg !56

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #3, !dbg !56
  br label %__nv_sqrtf.exit10, !dbg !56

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #3, !dbg !56
  br label %__nv_sqrtf.exit10, !dbg !56

__nv_sqrtf.exit10:                                ; preds = %118, %120, %123, %125
  %.0.i8 = phi float [ %119, %118 ], [ %121, %120 ], [ %124, %123 ], [ %126, %125 ], !dbg !56
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i11 = icmp eq i32 %127, 0, !dbg !56
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i14 = icmp eq i32 %128, 0, !dbg !56
  br i1 %.not.i11, label %134, label %129, !dbg !56

129:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %132, label %130, !dbg !56

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #3, !dbg !56
  br label %__nv_sqrtf.exit15, !dbg !56

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #3, !dbg !56
  br label %__nv_sqrtf.exit15, !dbg !56

134:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %137, label %135, !dbg !56

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #3, !dbg !56
  br label %__nv_sqrtf.exit15, !dbg !56

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #3, !dbg !56
  br label %__nv_sqrtf.exit15, !dbg !56

__nv_sqrtf.exit15:                                ; preds = %130, %132, %135, %137
  %.0.i13 = phi float [ %131, %130 ], [ %133, %132 ], [ %136, %135 ], [ %138, %137 ], !dbg !56
  %139 = extractvalue { i32, i32 } %60, 1, !dbg !35
  %140 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !19
  %141 = insertelement <2 x i32> %140, i32 %63, i64 1, !dbg !19
  %142 = bitcast <2 x i32> %141 to <2 x float>, !dbg !19
  %143 = extractvalue { i32, i32 } %60, 0, !dbg !35
  %144 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !19
  %145 = insertelement <2 x i32> %144, i32 %62, i64 1, !dbg !19
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !19
  %147 = extractvalue { i32, i32 } %33, 1, !dbg !17
  %148 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !23
  %149 = insertelement <2 x i32> %148, i32 %71, i64 1, !dbg !23
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !23
  %151 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !25
  %152 = insertelement <2 x i32> %151, i32 %74, i64 1, !dbg !25
  %153 = bitcast <2 x i32> %152 to <2 x float>, !dbg !25
  %154 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !27
  %155 = insertelement <2 x i32> %154, i32 %77, i64 1, !dbg !27
  %156 = bitcast <2 x i32> %155 to <2 x float>, !dbg !27
  %157 = extractvalue { i32, i32 } %53, 1, !dbg !29
  %158 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !31
  %159 = insertelement <2 x i32> %158, i32 %82, i64 1, !dbg !31
  %160 = bitcast <2 x i32> %159 to <2 x float>, !dbg !31
  %161 = extractvalue { i32, i32 } %58, 1, !dbg !33
  %162 = extractvalue { i32, i32 } %33, 0, !dbg !17
  %163 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !23
  %164 = insertelement <2 x i32> %163, i32 %70, i64 1, !dbg !23
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !23
  %166 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !25
  %167 = insertelement <2 x i32> %166, i32 %73, i64 1, !dbg !25
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !25
  %169 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !27
  %170 = insertelement <2 x i32> %169, i32 %76, i64 1, !dbg !27
  %171 = bitcast <2 x i32> %170 to <2 x float>, !dbg !27
  %172 = extractvalue { i32, i32 } %53, 0, !dbg !29
  %173 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !31
  %174 = insertelement <2 x i32> %173, i32 %81, i64 1, !dbg !31
  %175 = bitcast <2 x i32> %174 to <2 x float>, !dbg !31
  %176 = extractvalue { i32, i32 } %58, 0, !dbg !33
  %177 = extractvalue { i32, i32 } %84, 1, !dbg !51
  %178 = extractvalue { i32, i32 } %84, 0, !dbg !51
  %179 = extractvalue { i32, i32 } %79, 1, !dbg !47
  %180 = extractvalue { i32, i32 } %79, 0, !dbg !47
  %.frozen = freeze i32 %28, !dbg !57
  %181 = sdiv i32 %.frozen, 2048, !dbg !57
  %182 = mul i32 %181, 2048, !dbg !58
  %.decomposed = sub i32 %.frozen, %182, !dbg !58
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !59
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !59
  %185 = insertelement <2 x i32> poison, i32 %162, i64 0, !dbg !17
  %186 = insertelement <2 x i32> %185, i32 %143, i64 1, !dbg !17
  %187 = bitcast <2 x i32> %186 to <2 x float>, !dbg !17
  %188 = fsub <2 x float> %187, %146, !dbg !60
  %189 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !33
  %190 = insertelement <2 x i32> %189, i32 %178, i64 1, !dbg !33
  %191 = bitcast <2 x i32> %190 to <2 x float>, !dbg !33
  %192 = insertelement <2 x i32> poison, i32 %172, i64 0, !dbg !29
  %193 = insertelement <2 x i32> %192, i32 %180, i64 1, !dbg !29
  %194 = bitcast <2 x i32> %193 to <2 x float>, !dbg !29
  %195 = insertelement <2 x float> poison, float %111, i64 0, !dbg !61
  %196 = insertelement <2 x float> %195, float %183, i64 1, !dbg !61
  %197 = fmul <2 x float> %188, %196, !dbg !61
  %198 = fmul <2 x float> %197, %165, !dbg !62
  %199 = fadd <2 x float> %198, %168, !dbg !63
  %200 = fcmp ogt <2 x float> %199, zeroinitializer, !dbg !64
  %201 = fmul <2 x float> %199, %171, !dbg !65
  %202 = select <2 x i1> %200, <2 x float> %199, <2 x float> %201, !dbg !66
  %203 = fcmp ogt <2 x float> %194, zeroinitializer, !dbg !67
  %204 = fmul <2 x float> %175, %194, !dbg !68
  %205 = select <2 x i1> %203, <2 x float> %194, <2 x float> %204, !dbg !69
  %206 = fadd <2 x float> %205, %191, !dbg !70
  %207 = fadd <2 x float> %206, %202, !dbg !71
  %208 = insertelement <2 x i32> poison, i32 %147, i64 0, !dbg !17
  %209 = insertelement <2 x i32> %208, i32 %139, i64 1, !dbg !17
  %210 = bitcast <2 x i32> %209 to <2 x float>, !dbg !17
  %211 = fsub <2 x float> %210, %142, !dbg !60
  %212 = insertelement <2 x i32> poison, i32 %161, i64 0, !dbg !33
  %213 = insertelement <2 x i32> %212, i32 %177, i64 1, !dbg !33
  %214 = bitcast <2 x i32> %213 to <2 x float>, !dbg !33
  %215 = insertelement <2 x i32> poison, i32 %157, i64 0, !dbg !29
  %216 = insertelement <2 x i32> %215, i32 %179, i64 1, !dbg !29
  %217 = bitcast <2 x i32> %216 to <2 x float>, !dbg !29
  %218 = insertelement <2 x float> poison, float %112, i64 0, !dbg !61
  %219 = insertelement <2 x float> %218, float %184, i64 1, !dbg !61
  %220 = fmul <2 x float> %211, %219, !dbg !61
  %221 = fmul <2 x float> %220, %150, !dbg !62
  %222 = fadd <2 x float> %221, %153, !dbg !63
  %223 = fcmp ogt <2 x float> %222, zeroinitializer, !dbg !64
  %224 = fmul <2 x float> %222, %156, !dbg !65
  %225 = select <2 x i1> %223, <2 x float> %222, <2 x float> %224, !dbg !66
  %226 = fcmp ogt <2 x float> %217, zeroinitializer, !dbg !67
  %227 = fmul <2 x float> %217, %160, !dbg !68
  %228 = select <2 x i1> %226, <2 x float> %217, <2 x float> %227, !dbg !69
  %229 = fadd <2 x float> %228, %214, !dbg !70
  %230 = fadd <2 x float> %229, %225, !dbg !71
  %231 = extractelement <2 x float> %207, i64 0, !dbg !72
  %232 = extractelement <2 x float> %207, i64 1, !dbg !73
  %233 = fadd float %231, %232, !dbg !74
  %234 = extractelement <2 x float> %230, i64 0, !dbg !72
  %235 = extractelement <2 x float> %230, i64 1, !dbg !73
  %236 = fadd float %234, %235, !dbg !74
  %237 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !75
  %238 = bitcast float %231 to i32, !dbg !72
  %239 = bitcast float %234 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %238, i32 %239, ptr addrspace(1) %237, i1 true) #3, !dbg !72
  %240 = shl i32 %181, 12, !dbg !76
  %241 = add i32 %240, %.decomposed, !dbg !77
  %242 = sext i32 %241 to i64, !dbg !78
  %243 = getelementptr float, ptr addrspace(1) %19, i64 %242, !dbg !78
  %244 = bitcast float %232 to i32, !dbg !73
  %245 = bitcast float %235 to i32, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %244, i32 %245, ptr addrspace(1) %243, i1 true) #3, !dbg !73
  %246 = getelementptr float, ptr addrspace(1) %20, i64 %31, !dbg !79
  %247 = bitcast float %233 to i32, !dbg !80
  %248 = bitcast float %236 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %247, i32 %248, ptr addrspace(1) %246, i1 true) #3, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwa3eyyg5yor2gajvn5wr535qr6ez3aknslpngbmerfubro37ueb.py", directory: "inductor_cache/wa")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_27", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 28, column: 30, scope: !7)
!17 = !DILocation(line: 28, column: 35, scope: !7)
!18 = !DILocation(line: 29, column: 30, scope: !7)
!19 = !DILocation(line: 29, column: 35, scope: !7)
!20 = !DILocation(line: 30, column: 30, scope: !7)
!21 = !DILocation(line: 30, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 31, scope: !7)
!23 = !DILocation(line: 31, column: 36, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 31, scope: !7)
!27 = !DILocation(line: 33, column: 36, scope: !7)
!28 = !DILocation(line: 34, column: 31, scope: !7)
!29 = !DILocation(line: 34, column: 36, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 37, column: 31, scope: !7)
!35 = !DILocation(line: 37, column: 36, scope: !7)
!36 = !DILocation(line: 38, column: 32, scope: !7)
!37 = !DILocation(line: 38, column: 37, scope: !7)
!38 = !DILocation(line: 39, column: 32, scope: !7)
!39 = !DILocation(line: 39, column: 37, scope: !7)
!40 = !DILocation(line: 40, column: 32, scope: !7)
!41 = !DILocation(line: 40, column: 37, scope: !7)
!42 = !DILocation(line: 41, column: 32, scope: !7)
!43 = !DILocation(line: 41, column: 37, scope: !7)
!44 = !DILocation(line: 42, column: 32, scope: !7)
!45 = !DILocation(line: 42, column: 37, scope: !7)
!46 = !DILocation(line: 43, column: 32, scope: !7)
!47 = !DILocation(line: 43, column: 37, scope: !7)
!48 = !DILocation(line: 44, column: 32, scope: !7)
!49 = !DILocation(line: 44, column: 37, scope: !7)
!50 = !DILocation(line: 45, column: 32, scope: !7)
!51 = !DILocation(line: 45, column: 37, scope: !7)
!52 = !DILocation(line: 48, column: 18, scope: !7)
!53 = !DILocation(line: 49, column: 26, scope: !7)
!54 = !DILocation(line: 51, column: 18, scope: !7)
!55 = !DILocation(line: 67, column: 20, scope: !7)
!56 = !DILocation(line: 68, column: 27, scope: !7)
!57 = !DILocation(line: 26, column: 19, scope: !7)
!58 = !DILocation(line: 27, column: 19, scope: !7)
!59 = !DILocation(line: 69, column: 19, scope: !7)
!60 = !DILocation(line: 46, column: 18, scope: !7)
!61 = !DILocation(line: 54, column: 19, scope: !7)
!62 = !DILocation(line: 55, column: 20, scope: !7)
!63 = !DILocation(line: 56, column: 20, scope: !7)
!64 = !DILocation(line: 58, column: 20, scope: !7)
!65 = !DILocation(line: 59, column: 20, scope: !7)
!66 = !DILocation(line: 60, column: 35, scope: !7)
!67 = !DILocation(line: 61, column: 20, scope: !7)
!68 = !DILocation(line: 62, column: 20, scope: !7)
!69 = !DILocation(line: 63, column: 35, scope: !7)
!70 = !DILocation(line: 64, column: 20, scope: !7)
!71 = !DILocation(line: 65, column: 20, scope: !7)
!72 = !DILocation(line: 83, column: 40, scope: !7)
!73 = !DILocation(line: 84, column: 47, scope: !7)
!74 = !DILocation(line: 82, column: 20, scope: !7)
!75 = !DILocation(line: 83, column: 28, scope: !7)
!76 = !DILocation(line: 84, column: 35, scope: !7)
!77 = !DILocation(line: 84, column: 30, scope: !7)
!78 = !DILocation(line: 84, column: 25, scope: !7)
!79 = !DILocation(line: 85, column: 25, scope: !7)
!80 = !DILocation(line: 85, column: 37, scope: !7)
!81 = !DILocation(line: 85, column: 4, scope: !7)
