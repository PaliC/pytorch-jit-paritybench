; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_47(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, i32 %17) local_unnamed_addr !dbg !7 {
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %20 = shl i32 %19, 7, !dbg !11
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %22 = and i32 %21, 127, !dbg !12
  %23 = or disjoint i32 %20, %22, !dbg !13
  %24 = icmp slt i32 %23, 2304, !dbg !14
  %25 = sdiv i32 %23, 4, !dbg !15
  %26 = srem i32 %25, 144, !dbg !16
  %27 = sext i32 %23 to i64, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !17
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %24) #3, !dbg !18
  %30 = sext i32 %26 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %24) #3, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %24) #3, !dbg !22
  %35 = bitcast i32 %34 to float, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %24) #3, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %24) #3, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %24) #3, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !29
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %24) #3, !dbg !30
  %44 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !31
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %24) #3, !dbg !32
  %46 = bitcast i32 %45 to float, !dbg !32
  %47 = getelementptr float, ptr addrspace(1) %9, i64 %30, !dbg !33
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %24) #3, !dbg !34
  %49 = getelementptr float, ptr addrspace(1) %10, i64 %30, !dbg !35
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %24) #3, !dbg !36
  %51 = getelementptr float, ptr addrspace(1) %11, i64 %27, !dbg !37
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %24) #3, !dbg !38
  %53 = getelementptr float, ptr addrspace(1) %12, i64 %30, !dbg !39
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %24) #3, !dbg !40
  %55 = getelementptr float, ptr addrspace(1) %13, i64 %30, !dbg !41
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %24) #3, !dbg !42
  %57 = bitcast i32 %56 to float, !dbg !42
  %58 = getelementptr float, ptr addrspace(1) %14, i64 %30, !dbg !43
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %24) #3, !dbg !44
  %60 = getelementptr float, ptr addrspace(1) %15, i64 %30, !dbg !45
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %24) #3, !dbg !46
  %62 = getelementptr float, ptr addrspace(1) %16, i64 %27, !dbg !47
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %24) #3, !dbg !48
  %64 = fadd float %35, 0x3EE4F8B580000000, !dbg !49
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i = icmp eq i32 %65, 0, !dbg !50
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i = icmp eq i32 %66, 0, !dbg !50
  br i1 %.not.i, label %72, label %67, !dbg !50

67:                                               ; preds = %18
  br i1 %.not1.i, label %70, label %68, !dbg !50

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

72:                                               ; preds = %18
  br i1 %.not1.i, label %75, label %73, !dbg !50

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

__nv_sqrtf.exit:                                  ; preds = %68, %70, %73, %75
  %.0.i = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !50
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !51
  %78 = fadd float %46, 0x3EE4F8B580000000, !dbg !52
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i1 = icmp eq i32 %79, 0, !dbg !53
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i4 = icmp eq i32 %80, 0, !dbg !53
  br i1 %.not.i1, label %86, label %81, !dbg !53

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %84, label %82, !dbg !53

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %89, label %87, !dbg !53

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

__nv_sqrtf.exit5:                                 ; preds = %82, %84, %87, %89
  %.0.i3 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !53
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !54
  %92 = fadd float %57, 0x3EE4F8B580000000, !dbg !55
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i6 = icmp eq i32 %93, 0, !dbg !56
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i9 = icmp eq i32 %94, 0, !dbg !56
  br i1 %.not.i6, label %100, label %95, !dbg !56

95:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %98, label %96, !dbg !56

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !56
  br label %__nv_sqrtf.exit10, !dbg !56

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !56
  br label %__nv_sqrtf.exit10, !dbg !56

100:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %103, label %101, !dbg !56

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !56
  br label %__nv_sqrtf.exit10, !dbg !56

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !56
  br label %__nv_sqrtf.exit10, !dbg !56

__nv_sqrtf.exit10:                                ; preds = %96, %98, %101, %103
  %.0.i8 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !56
  %105 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !28
  %106 = insertelement <2 x i32> %105, i32 %52, i64 1, !dbg !28
  %107 = bitcast <2 x i32> %106 to <2 x float>, !dbg !28
  %108 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !30
  %109 = insertelement <2 x i32> %108, i32 %54, i64 1, !dbg !30
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !30
  %111 = bitcast i32 %29 to float, !dbg !18
  %112 = bitcast i32 %32 to float, !dbg !20
  %113 = fsub float %111, %112, !dbg !57
  %114 = fmul float %113, %77, !dbg !58
  %115 = bitcast i32 %37 to float, !dbg !24
  %116 = fmul float %114, %115, !dbg !59
  %117 = bitcast i32 %39 to float, !dbg !26
  %118 = fadd float %116, %117, !dbg !60
  %119 = fadd float %118, 0.000000e+00, !dbg !61
  %120 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !34
  %121 = insertelement <2 x i32> %120, i32 %59, i64 1, !dbg !34
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !34
  %123 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !36
  %124 = insertelement <2 x i32> %123, i32 %61, i64 1, !dbg !36
  %125 = bitcast <2 x i32> %124 to <2 x float>, !dbg !36
  %126 = bitcast i32 %63 to float, !dbg !48
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !62
  %128 = fsub <2 x float> %107, %110, !dbg !63
  %129 = insertelement <2 x float> poison, float %91, i64 0, !dbg !64
  %130 = insertelement <2 x float> %129, float %127, i64 1, !dbg !64
  %131 = fmul <2 x float> %128, %130, !dbg !64
  %132 = fmul <2 x float> %131, %122, !dbg !65
  %133 = fadd <2 x float> %132, %125, !dbg !66
  %134 = extractelement <2 x float> %133, i64 0, !dbg !67
  %135 = fadd float %119, %134, !dbg !67
  %136 = extractelement <2 x float> %133, i64 1, !dbg !68
  %137 = fadd float %135, %136, !dbg !68
  %138 = fadd float %137, %126, !dbg !69
  %139 = fcmp olt float %138, 0.000000e+00, !dbg !70
  %140 = select i1 %139, float 0.000000e+00, float %138, !dbg !74
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !75
  %142 = bitcast float %140 to i32, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %141, i1 %24) #3, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvklcqjlqmtc32yx4kmzgir5ttooqrheregeevykviajqzdcfz34.py", directory: "inductor_cache/vk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_47, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_47, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_47", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_47", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 26, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 36, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 32, scope: !7)
!38 = !DILocation(line: 36, column: 37, scope: !7)
!39 = !DILocation(line: 37, column: 32, scope: !7)
!40 = !DILocation(line: 37, column: 37, scope: !7)
!41 = !DILocation(line: 38, column: 32, scope: !7)
!42 = !DILocation(line: 38, column: 37, scope: !7)
!43 = !DILocation(line: 39, column: 32, scope: !7)
!44 = !DILocation(line: 39, column: 37, scope: !7)
!45 = !DILocation(line: 40, column: 32, scope: !7)
!46 = !DILocation(line: 40, column: 37, scope: !7)
!47 = !DILocation(line: 41, column: 32, scope: !7)
!48 = !DILocation(line: 41, column: 37, scope: !7)
!49 = !DILocation(line: 44, column: 18, scope: !7)
!50 = !DILocation(line: 45, column: 26, scope: !7)
!51 = !DILocation(line: 47, column: 18, scope: !7)
!52 = !DILocation(line: 56, column: 20, scope: !7)
!53 = !DILocation(line: 57, column: 27, scope: !7)
!54 = !DILocation(line: 58, column: 19, scope: !7)
!55 = !DILocation(line: 65, column: 20, scope: !7)
!56 = !DILocation(line: 66, column: 27, scope: !7)
!57 = !DILocation(line: 42, column: 18, scope: !7)
!58 = !DILocation(line: 50, column: 19, scope: !7)
!59 = !DILocation(line: 51, column: 20, scope: !7)
!60 = !DILocation(line: 52, column: 20, scope: !7)
!61 = !DILocation(line: 54, column: 20, scope: !7)
!62 = !DILocation(line: 67, column: 19, scope: !7)
!63 = !DILocation(line: 55, column: 20, scope: !7)
!64 = !DILocation(line: 60, column: 20, scope: !7)
!65 = !DILocation(line: 61, column: 20, scope: !7)
!66 = !DILocation(line: 62, column: 20, scope: !7)
!67 = !DILocation(line: 63, column: 20, scope: !7)
!68 = !DILocation(line: 72, column: 20, scope: !7)
!69 = !DILocation(line: 73, column: 20, scope: !7)
!70 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !73)
!71 = distinct !DILexicalBlockFile(scope: !7, file: !72, discriminator: 0)
!72 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!73 = !DILocation(line: 75, column: 42, scope: !7)
!74 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !73)
!75 = !DILocation(line: 76, column: 28, scope: !7)
!76 = !DILocation(line: 76, column: 40, scope: !7)
!77 = !DILocation(line: 76, column: 4, scope: !7)
