; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 2, !dbg !13
  %15 = or disjoint i32 %13, 512, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %16 = sdiv i32 %.frozen, 64, !dbg !14
  %17 = sdiv i32 %15, 64, !dbg !14
  %18 = srem i32 %16, 64, !dbg !15
  %19 = srem i32 %17, 64, !dbg !15
  %20 = mul i32 %16, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = srem i32 %14, 64, !dbg !16
  %22 = sdiv i32 %13, 4096, !dbg !17
  %23 = sdiv i32 %15, 4096, !dbg !17
  %24 = sext i32 %18 to i64, !dbg !18
  %25 = getelementptr i64, ptr addrspace(1) %0, i64 %24, !dbg !18
  %26 = sext i32 %19 to i64, !dbg !18
  %27 = getelementptr i64, ptr addrspace(1) %0, i64 %26, !dbg !18
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !19
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !19
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !19
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !19
  %36 = sext i32 %.decomposed to i64, !dbg !20
  %37 = getelementptr i64, ptr addrspace(1) %1, i64 %36, !dbg !20
  %38 = sext i32 %21 to i64, !dbg !20
  %39 = getelementptr i64, ptr addrspace(1) %1, i64 %38, !dbg !20
  %40 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !21
  %41 = extractvalue { i64, i64 } %40, 0, !dbg !21
  %42 = extractvalue { i64, i64 } %40, 1, !dbg !21
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !21
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !21
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !21
  %46 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !21
  %47 = extractvalue { i64, i64 } %46, 0, !dbg !21
  %48 = extractvalue { i64, i64 } %46, 1, !dbg !21
  %49 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !21
  %50 = extractvalue { i64, i64 } %49, 0, !dbg !21
  %51 = extractvalue { i64, i64 } %49, 1, !dbg !21
  %52 = getelementptr i64, ptr addrspace(1) %3, i64 %36, !dbg !22
  %53 = getelementptr i64, ptr addrspace(1) %3, i64 %38, !dbg !22
  %54 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !23
  %55 = extractvalue { i64, i64 } %54, 0, !dbg !23
  %56 = extractvalue { i64, i64 } %54, 1, !dbg !23
  %57 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !23
  %58 = extractvalue { i64, i64 } %57, 0, !dbg !23
  %59 = extractvalue { i64, i64 } %57, 1, !dbg !23
  %60 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !23
  %61 = extractvalue { i64, i64 } %60, 0, !dbg !23
  %62 = extractvalue { i64, i64 } %60, 1, !dbg !23
  %63 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !23
  %64 = extractvalue { i64, i64 } %63, 0, !dbg !23
  %65 = extractvalue { i64, i64 } %63, 1, !dbg !23
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !24
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !25
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !25
  %72 = bitcast i32 %68 to float, !dbg !25
  %73 = bitcast i32 %69 to float, !dbg !25
  %74 = bitcast i32 %70 to float, !dbg !25
  %75 = bitcast i32 %71 to float, !dbg !25
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !25
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !25
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !25
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !25
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !25
  %81 = bitcast i32 %77 to float, !dbg !25
  %82 = bitcast i32 %78 to float, !dbg !25
  %83 = bitcast i32 %79 to float, !dbg !25
  %84 = bitcast i32 %80 to float, !dbg !25
  %85 = lshr i64 %28, 58, !dbg !26
  %86 = and i64 %85, 32, !dbg !26
  %87 = add i64 %86, %28, !dbg !26
  %88 = lshr i64 %32, 58, !dbg !26
  %89 = and i64 %88, 32, !dbg !26
  %90 = add i64 %89, %32, !dbg !26
  %91 = lshr i64 %41, 58, !dbg !27
  %92 = and i64 %91, 32, !dbg !27
  %93 = lshr i64 %42, 58, !dbg !27
  %94 = and i64 %93, 32, !dbg !27
  %95 = lshr i64 %44, 58, !dbg !27
  %96 = and i64 %95, 32, !dbg !27
  %97 = lshr i64 %45, 58, !dbg !27
  %98 = and i64 %97, 32, !dbg !27
  %99 = lshr i64 %47, 58, !dbg !27
  %100 = and i64 %99, 32, !dbg !27
  %101 = lshr i64 %48, 58, !dbg !27
  %102 = and i64 %101, 32, !dbg !27
  %103 = lshr i64 %50, 58, !dbg !27
  %104 = and i64 %103, 32, !dbg !27
  %105 = lshr i64 %51, 58, !dbg !27
  %106 = and i64 %105, 32, !dbg !27
  %107 = shl i64 %87, 5, !dbg !28
  %108 = shl i64 %90, 5, !dbg !28
  %109 = shl nsw i32 %22, 10, !dbg !29
  %110 = shl nsw i32 %23, 10, !dbg !29
  %111 = sext i32 %109 to i64, !dbg !30
  %112 = sext i32 %110 to i64, !dbg !30
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !31
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %92, !dbg !31
  %115 = getelementptr float, ptr addrspace(1) %114, i64 %107, !dbg !31
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %111, !dbg !31
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !31
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %94, !dbg !31
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %107, !dbg !31
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %111, !dbg !31
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !31
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %96, !dbg !31
  %123 = getelementptr float, ptr addrspace(1) %122, i64 %107, !dbg !31
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %111, !dbg !31
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !31
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %98, !dbg !31
  %127 = getelementptr float, ptr addrspace(1) %126, i64 %107, !dbg !31
  %128 = getelementptr float, ptr addrspace(1) %127, i64 %111, !dbg !31
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !31
  %130 = getelementptr float, ptr addrspace(1) %129, i64 %100, !dbg !31
  %131 = getelementptr float, ptr addrspace(1) %130, i64 %108, !dbg !31
  %132 = getelementptr float, ptr addrspace(1) %131, i64 %112, !dbg !31
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !31
  %134 = getelementptr float, ptr addrspace(1) %133, i64 %102, !dbg !31
  %135 = getelementptr float, ptr addrspace(1) %134, i64 %108, !dbg !31
  %136 = getelementptr float, ptr addrspace(1) %135, i64 %112, !dbg !31
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !31
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %104, !dbg !31
  %139 = getelementptr float, ptr addrspace(1) %138, i64 %108, !dbg !31
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %112, !dbg !31
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !31
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %106, !dbg !31
  %143 = getelementptr float, ptr addrspace(1) %142, i64 %108, !dbg !31
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %112, !dbg !31
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #1, !dbg !32
  %146 = bitcast i32 %145 to float, !dbg !32
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #1, !dbg !32
  %148 = bitcast i32 %147 to float, !dbg !32
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #1, !dbg !32
  %150 = bitcast i32 %149 to float, !dbg !32
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #1, !dbg !32
  %152 = bitcast i32 %151 to float, !dbg !32
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #1, !dbg !32
  %154 = bitcast i32 %153 to float, !dbg !32
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #1, !dbg !32
  %156 = bitcast i32 %155 to float, !dbg !32
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #1, !dbg !32
  %158 = bitcast i32 %157 to float, !dbg !32
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !32
  %160 = bitcast i32 %159 to float, !dbg !32
  %161 = lshr i64 %55, 58, !dbg !33
  %162 = and i64 %161, 32, !dbg !33
  %163 = lshr i64 %56, 58, !dbg !33
  %164 = and i64 %163, 32, !dbg !33
  %165 = lshr i64 %58, 58, !dbg !33
  %166 = and i64 %165, 32, !dbg !33
  %167 = lshr i64 %59, 58, !dbg !33
  %168 = and i64 %167, 32, !dbg !33
  %169 = lshr i64 %61, 58, !dbg !33
  %170 = and i64 %169, 32, !dbg !33
  %171 = lshr i64 %62, 58, !dbg !33
  %172 = and i64 %171, 32, !dbg !33
  %173 = lshr i64 %64, 58, !dbg !33
  %174 = and i64 %173, 32, !dbg !33
  %175 = lshr i64 %65, 58, !dbg !33
  %176 = and i64 %175, 32, !dbg !33
  %177 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !34
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %162, !dbg !34
  %179 = getelementptr float, ptr addrspace(1) %178, i64 %107, !dbg !34
  %180 = getelementptr float, ptr addrspace(1) %179, i64 %111, !dbg !34
  %181 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !34
  %182 = getelementptr float, ptr addrspace(1) %181, i64 %164, !dbg !34
  %183 = getelementptr float, ptr addrspace(1) %182, i64 %107, !dbg !34
  %184 = getelementptr float, ptr addrspace(1) %183, i64 %111, !dbg !34
  %185 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !34
  %186 = getelementptr float, ptr addrspace(1) %185, i64 %166, !dbg !34
  %187 = getelementptr float, ptr addrspace(1) %186, i64 %107, !dbg !34
  %188 = getelementptr float, ptr addrspace(1) %187, i64 %111, !dbg !34
  %189 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !34
  %190 = getelementptr float, ptr addrspace(1) %189, i64 %168, !dbg !34
  %191 = getelementptr float, ptr addrspace(1) %190, i64 %107, !dbg !34
  %192 = getelementptr float, ptr addrspace(1) %191, i64 %111, !dbg !34
  %193 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !34
  %194 = getelementptr float, ptr addrspace(1) %193, i64 %170, !dbg !34
  %195 = getelementptr float, ptr addrspace(1) %194, i64 %108, !dbg !34
  %196 = getelementptr float, ptr addrspace(1) %195, i64 %112, !dbg !34
  %197 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !34
  %198 = getelementptr float, ptr addrspace(1) %197, i64 %172, !dbg !34
  %199 = getelementptr float, ptr addrspace(1) %198, i64 %108, !dbg !34
  %200 = getelementptr float, ptr addrspace(1) %199, i64 %112, !dbg !34
  %201 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !34
  %202 = getelementptr float, ptr addrspace(1) %201, i64 %174, !dbg !34
  %203 = getelementptr float, ptr addrspace(1) %202, i64 %108, !dbg !34
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %112, !dbg !34
  %205 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !34
  %206 = getelementptr float, ptr addrspace(1) %205, i64 %176, !dbg !34
  %207 = getelementptr float, ptr addrspace(1) %206, i64 %108, !dbg !34
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %112, !dbg !34
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 true) #1, !dbg !35
  %210 = bitcast i32 %209 to float, !dbg !35
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 true) #1, !dbg !35
  %212 = bitcast i32 %211 to float, !dbg !35
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 true) #1, !dbg !35
  %214 = bitcast i32 %213 to float, !dbg !35
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 true) #1, !dbg !35
  %216 = bitcast i32 %215 to float, !dbg !35
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %196, i1 true) #1, !dbg !35
  %218 = bitcast i32 %217 to float, !dbg !35
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 true) #1, !dbg !35
  %220 = bitcast i32 %219 to float, !dbg !35
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 true) #1, !dbg !35
  %222 = bitcast i32 %221 to float, !dbg !35
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 true) #1, !dbg !35
  %224 = bitcast i32 %223 to float, !dbg !35
  %225 = fsub float %210, %146, !dbg !36
  %226 = fsub float %212, %148, !dbg !36
  %227 = fsub float %214, %150, !dbg !36
  %228 = fsub float %216, %152, !dbg !36
  %229 = fsub float %218, %154, !dbg !36
  %230 = fsub float %220, %156, !dbg !36
  %231 = fsub float %222, %158, !dbg !36
  %232 = fsub float %224, %160, !dbg !36
  %233 = fmul float %225, %72, !dbg !37
  %234 = fmul float %226, %73, !dbg !37
  %235 = fmul float %227, %74, !dbg !37
  %236 = fmul float %228, %75, !dbg !37
  %237 = fmul float %229, %81, !dbg !37
  %238 = fmul float %230, %82, !dbg !37
  %239 = fmul float %231, %83, !dbg !37
  %240 = fmul float %232, %84, !dbg !37
  %241 = fadd float %233, %146, !dbg !38
  %242 = fadd float %234, %148, !dbg !38
  %243 = fadd float %235, %150, !dbg !38
  %244 = fadd float %236, %152, !dbg !38
  %245 = fadd float %237, %154, !dbg !38
  %246 = fadd float %238, %156, !dbg !38
  %247 = fadd float %239, %158, !dbg !38
  %248 = fadd float %240, %160, !dbg !38
  %249 = sext i32 %13 to i64, !dbg !39
  %250 = getelementptr float, ptr addrspace(1) %5, i64 %249, !dbg !39
  %251 = sext i32 %15 to i64, !dbg !39
  %252 = getelementptr float, ptr addrspace(1) %5, i64 %251, !dbg !39
  %253 = bitcast float %241 to i32, !dbg !40
  %254 = bitcast float %242 to i32, !dbg !40
  %255 = bitcast float %243 to i32, !dbg !40
  %256 = bitcast float %244 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %253, i32 %254, i32 %255, i32 %256, ptr addrspace(1) %250, i1 true) #1, !dbg !40
  %257 = bitcast float %245 to i32, !dbg !40
  %258 = bitcast float %246 to i32, !dbg !40
  %259 = bitcast float %247 to i32, !dbg !40
  %260 = bitcast float %248 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %257, i32 %258, i32 %259, i32 %260, ptr addrspace(1) %252, i1 true) #1, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjbjhfcohedjhf4dfkvcmztfvkzx4k5lbfc3fi3oxqwju64xfcx4.py", directory: "inductor_cache/jb")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_27", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 35, column: 32, scope: !7)
!27 = !DILocation(line: 38, column: 32, scope: !7)
!28 = !DILocation(line: 39, column: 40, scope: !7)
!29 = !DILocation(line: 39, column: 52, scope: !7)
!30 = !DILocation(line: 39, column: 47, scope: !7)
!31 = !DILocation(line: 39, column: 30, scope: !7)
!32 = !DILocation(line: 39, column: 57, scope: !7)
!33 = !DILocation(line: 42, column: 35, scope: !7)
!34 = !DILocation(line: 43, column: 31, scope: !7)
!35 = !DILocation(line: 43, column: 59, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 46, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 25, scope: !7)
!40 = !DILocation(line: 47, column: 37, scope: !7)
!41 = !DILocation(line: 47, column: 4, scope: !7)
