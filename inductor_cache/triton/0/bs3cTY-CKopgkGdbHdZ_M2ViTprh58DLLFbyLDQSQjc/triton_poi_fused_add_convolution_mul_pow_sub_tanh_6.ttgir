#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_convolution_mul_pow_sub_tanh_6(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":19:0)) attributes {noinline = false} {
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %cst = arith.constant dense<3> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<4096> : tensor<512xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c512_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<512xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<512xi32, #blocked> loc(#loc5)
    %5 = arith.divsi %4, %cst_0 : tensor<512xi32, #blocked> loc(#loc6)
    %6 = arith.remsi %5, %cst : tensor<512xi32, #blocked> loc(#loc7)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc8)
    %8 = tt.addptr %7, %4 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc8)
    %9 = tt.load %8 : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc9)
    %10 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc10)
    %11 = tt.addptr %10, %6 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc10)
    %12 = tt.load %11 evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc11)
    %13 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc12)
    %14 = tt.addptr %13, %4 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc12)
    %15 = tt.load %14 : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc13)
    %16 = arith.addf %9, %12 : tensor<512xf32, #blocked> loc(#loc14)
    %17 = tt.extern_elementwise %16 {libname = "", libpath = "", pure = true, symbol = "__nv_tanhf"} : (tensor<512xf32, #blocked>) -> tensor<512xf32, #blocked> loc(#loc15)
    %18 = arith.mulf %15, %15 : tensor<512xf32, #blocked> loc(#loc16)
    %19 = arith.subf %18, %15 : tensor<512xf32, #blocked> loc(#loc17)
    %20 = arith.mulf %17, %19 : tensor<512xf32, #blocked> loc(#loc18)
    %21 = arith.addf %15, %20 : tensor<512xf32, #blocked> loc(#loc19)
    %22 = arith.mulf %21, %21 : tensor<512xf32, #blocked> loc(#loc20)
    %23 = arith.subf %22, %21 : tensor<512xf32, #blocked> loc(#loc21)
    %24 = arith.mulf %17, %23 : tensor<512xf32, #blocked> loc(#loc22)
    %25 = arith.addf %21, %24 : tensor<512xf32, #blocked> loc(#loc23)
    %26 = arith.mulf %25, %25 : tensor<512xf32, #blocked> loc(#loc24)
    %27 = arith.subf %26, %25 : tensor<512xf32, #blocked> loc(#loc25)
    %28 = arith.mulf %17, %27 : tensor<512xf32, #blocked> loc(#loc26)
    %29 = arith.addf %25, %28 : tensor<512xf32, #blocked> loc(#loc27)
    %30 = arith.mulf %29, %29 : tensor<512xf32, #blocked> loc(#loc28)
    %31 = arith.subf %30, %29 : tensor<512xf32, #blocked> loc(#loc29)
    %32 = arith.mulf %17, %31 : tensor<512xf32, #blocked> loc(#loc30)
    %33 = arith.addf %29, %32 : tensor<512xf32, #blocked> loc(#loc31)
    %34 = arith.mulf %33, %33 : tensor<512xf32, #blocked> loc(#loc32)
    %35 = arith.subf %34, %33 : tensor<512xf32, #blocked> loc(#loc33)
    %36 = arith.mulf %17, %35 : tensor<512xf32, #blocked> loc(#loc34)
    %37 = arith.addf %33, %36 : tensor<512xf32, #blocked> loc(#loc35)
    %38 = arith.mulf %37, %37 : tensor<512xf32, #blocked> loc(#loc36)
    %39 = arith.subf %38, %37 : tensor<512xf32, #blocked> loc(#loc37)
    %40 = arith.mulf %17, %39 : tensor<512xf32, #blocked> loc(#loc38)
    %41 = arith.addf %37, %40 : tensor<512xf32, #blocked> loc(#loc39)
    %42 = arith.mulf %41, %41 : tensor<512xf32, #blocked> loc(#loc40)
    %43 = arith.subf %42, %41 : tensor<512xf32, #blocked> loc(#loc41)
    %44 = arith.mulf %17, %43 : tensor<512xf32, #blocked> loc(#loc42)
    %45 = arith.addf %41, %44 : tensor<512xf32, #blocked> loc(#loc43)
    %46 = arith.mulf %45, %45 : tensor<512xf32, #blocked> loc(#loc44)
    %47 = arith.subf %46, %45 : tensor<512xf32, #blocked> loc(#loc45)
    %48 = arith.mulf %17, %47 : tensor<512xf32, #blocked> loc(#loc46)
    %49 = arith.addf %45, %48 : tensor<512xf32, #blocked> loc(#loc47)
    tt.store %8, %17 : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc48)
    %50 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc49)
    %51 = tt.addptr %50, %4 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc49)
    tt.store %51, %49 : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc50)
    tt.return loc(#loc51)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":21:28)
#loc3 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":21:33)
#loc4 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":22:36)
#loc5 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":22:23)
#loc6 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":25:21)
#loc7 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":25:29)
#loc8 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":26:34)
#loc9 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":26:39)
#loc10 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":27:30)
#loc11 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":27:35)
#loc12 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":28:30)
#loc13 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":28:35)
#loc14 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":29:18)
#loc15 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":30:26)
#loc16 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":31:18)
#loc17 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":32:18)
#loc18 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":33:18)
#loc19 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":34:18)
#loc20 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":35:18)
#loc21 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":36:19)
#loc22 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":37:19)
#loc23 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":38:19)
#loc24 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":39:20)
#loc25 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":40:20)
#loc26 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":41:19)
#loc27 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":42:20)
#loc28 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":43:20)
#loc29 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":44:20)
#loc30 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":45:19)
#loc31 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":46:20)
#loc32 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":47:20)
#loc33 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":48:20)
#loc34 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":49:19)
#loc35 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":50:20)
#loc36 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":51:20)
#loc37 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":52:20)
#loc38 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":53:19)
#loc39 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":54:20)
#loc40 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":55:20)
#loc41 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":56:20)
#loc42 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":57:19)
#loc43 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":58:20)
#loc44 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":59:20)
#loc45 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":60:20)
#loc46 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":61:19)
#loc47 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":62:20)
#loc48 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":63:39)
#loc49 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":64:28)
#loc50 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":64:40)
#loc51 = loc("inductor_cache/uq/cuqmst4repmt6wuko3bzlbyyeqyzub6xz5nzhnucbwymg3e3wds5.py":64:4)
