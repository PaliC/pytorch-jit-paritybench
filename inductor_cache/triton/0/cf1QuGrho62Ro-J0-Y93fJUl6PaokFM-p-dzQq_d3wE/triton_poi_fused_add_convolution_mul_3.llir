; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_convolution_mul_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = srem i32 %14, 512, !dbg !14
  %16 = sdiv i32 %14, 8192, !dbg !15
  %17 = sext i32 %14 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !17
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !17
  %21 = extractvalue { i32, i32 } %19, 1, !dbg !17
  %22 = bitcast i32 %20 to float, !dbg !17
  %23 = bitcast i32 %21 to float, !dbg !17
  %24 = sext i32 %15 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !18
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !19
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !19
  %29 = bitcast i32 %27 to float, !dbg !19
  %30 = bitcast i32 %28 to float, !dbg !19
  %31 = shl nsw i32 %16, 2, !dbg !20
  %32 = sext i32 %31 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !22
  %35 = bitcast i32 %34 to float, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !22
  %37 = bitcast i32 %36 to float, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %17, !dbg !23
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !24
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !24
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !25
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !26
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !26
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !26
  %46 = or disjoint i32 %31, 1, !dbg !27
  %47 = sext i32 %46 to i64, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !29
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !29
  %51 = getelementptr float, ptr addrspace(1) %5, i64 %17, !dbg !30
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !31
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !31
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !32
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !33
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !33
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !33
  %59 = or disjoint i32 %31, 2, !dbg !34
  %60 = sext i32 %59 to i64, !dbg !35
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !35
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !36
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !36
  %64 = fadd float %22, %29, !dbg !37
  %65 = fadd float %23, %30, !dbg !37
  %66 = fmul float %64, %35, !dbg !38
  %67 = fmul float %65, %37, !dbg !38
  %68 = fadd float %66, 0.000000e+00, !dbg !39
  %69 = fadd float %67, 0.000000e+00, !dbg !39
  %70 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !24
  %71 = insertelement <2 x i32> %70, i32 %53, i64 1, !dbg !24
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !24
  %73 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !26
  %74 = insertelement <2 x i32> %73, i32 %57, i64 1, !dbg !26
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !26
  %76 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !29
  %77 = insertelement <2 x i32> %76, i32 %62, i64 1, !dbg !29
  %78 = bitcast <2 x i32> %77 to <2 x float>, !dbg !29
  %79 = fadd <2 x float> %72, %75, !dbg !40
  %80 = fmul <2 x float> %79, %78, !dbg !41
  %81 = extractelement <2 x float> %80, i64 0, !dbg !42
  %82 = fadd float %68, %81, !dbg !42
  %83 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !24
  %84 = insertelement <2 x i32> %83, i32 %54, i64 1, !dbg !24
  %85 = bitcast <2 x i32> %84 to <2 x float>, !dbg !24
  %86 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !26
  %87 = insertelement <2 x i32> %86, i32 %58, i64 1, !dbg !26
  %88 = bitcast <2 x i32> %87 to <2 x float>, !dbg !26
  %89 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !29
  %90 = insertelement <2 x i32> %89, i32 %63, i64 1, !dbg !29
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !29
  %92 = fadd <2 x float> %85, %88, !dbg !40
  %93 = fmul <2 x float> %92, %91, !dbg !41
  %94 = extractelement <2 x float> %93, i64 0, !dbg !42
  %95 = fadd float %69, %94, !dbg !42
  %96 = extractelement <2 x float> %80, i64 1, !dbg !43
  %97 = fadd float %82, %96, !dbg !43
  %98 = extractelement <2 x float> %93, i64 1, !dbg !43
  %99 = fadd float %95, %98, !dbg !43
  %100 = bitcast float %97 to i32, !dbg !44
  %101 = bitcast float %99 to i32, !dbg !44
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %100, i32 %101, ptr addrspace(1) %18, i1 true) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwzqsxweyc24dqwo7h62xwxtew3ra4xjbcptqfskshth76ipb6lf.py", directory: "inductor_cache/wz")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_3", linkageName: "triton_poi_fused_add_convolution_mul_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 34, scope: !7)
!17 = !DILocation(line: 27, column: 39, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 32, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 37, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 42, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 35, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 42, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 19, scope: !7)
!42 = !DILocation(line: 42, column: 19, scope: !7)
!43 = !DILocation(line: 45, column: 20, scope: !7)
!44 = !DILocation(line: 46, column: 40, scope: !7)
!45 = !DILocation(line: 46, column: 4, scope: !7)
