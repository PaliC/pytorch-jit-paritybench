; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_pixel_shuffle_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.fr = freeze i32 %8, !dbg !11
  %9 = shl i32 %.fr, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = sdiv i32 %13, 8, !dbg !14
  %16 = mul i32 %15, 8, !dbg !15
  %.decomposed = sub i32 %13, %16, !dbg !15
  %17 = sdiv i32 %14, 8, !dbg !14
  %18 = srem i32 %15, 8, !dbg !16
  %19 = srem i32 %17, 8, !dbg !16
  %20 = sdiv i32 %13, 64, !dbg !17
  %21 = sdiv i32 %14, 64, !dbg !17
  %22 = srem i32 %20, 8, !dbg !18
  %23 = srem i32 %21, 8, !dbg !18
  %24 = sdiv i32 %13, 512, !dbg !19
  %25 = sdiv i32 %14, 512, !dbg !19
  %26 = srem i32 %24, 8, !dbg !20
  %27 = srem i32 %25, 8, !dbg !20
  %28 = sdiv i32 %13, 4096, !dbg !21
  %29 = sdiv i32 %14, 4096, !dbg !21
  %30 = srem i32 %28, 21, !dbg !22
  %31 = srem i32 %29, 21, !dbg !22
  %32 = shl nsw i32 %22, 3, !dbg !23
  %33 = shl nsw i32 %23, 3, !dbg !23
  %34 = add nsw i32 %32, %.decomposed, !dbg !24
  %35 = add nsw i32 %33, %.decomposed, !dbg !24
  %36 = shl nsw i32 %30, 6, !dbg !25
  %37 = shl nsw i32 %31, 6, !dbg !25
  %38 = add nsw i32 %34, %36, !dbg !26
  %39 = add nsw i32 %35, %37, !dbg !26
  %40 = mul nsw i32 %18, 1344, !dbg !27
  %41 = mul nsw i32 %19, 1344, !dbg !27
  %42 = mul nsw i32 %26, 10752, !dbg !28
  %43 = mul nsw i32 %27, 10752, !dbg !28
  %44 = srem i32 %13, 86016, !dbg !29
  %45 = srem i32 %14, 86016, !dbg !29
  %46 = sub nsw i32 %13, %44, !dbg !30
  %47 = add i32 %46, %40, !dbg !31
  %48 = add i32 %47, %42, !dbg !29
  %49 = add i32 %48, %38, !dbg !32
  %50 = sub nsw i32 %14, %45, !dbg !30
  %51 = add i32 %50, %41, !dbg !31
  %52 = add i32 %51, %43, !dbg !29
  %53 = add i32 %52, %39, !dbg !32
  %54 = sext i32 %49 to i64, !dbg !33
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !33
  %56 = sext i32 %53 to i64, !dbg !33
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !33
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !34
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !34
  %60 = sext i32 %38 to i64, !dbg !35
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !35
  %62 = sext i32 %39 to i64, !dbg !35
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !35
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !36
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !36
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !37
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !37
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !38
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !38
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !38
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !38
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !38
  %73 = bitcast i32 %69 to float, !dbg !38
  %74 = bitcast i32 %70 to float, !dbg !38
  %75 = bitcast i32 %71 to float, !dbg !38
  %76 = bitcast i32 %72 to float, !dbg !38
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !38
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !38
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !38
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !38
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !38
  %82 = bitcast i32 %78 to float, !dbg !38
  %83 = bitcast i32 %79 to float, !dbg !38
  %84 = bitcast i32 %80 to float, !dbg !38
  %85 = bitcast i32 %81 to float, !dbg !38
  %86 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !39
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !39
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !40
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !40
  %90 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !41
  %91 = getelementptr float, ptr addrspace(1) %4, i64 %62, !dbg !41
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !42
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !42
  %94 = fadd float %73, 0x3EE4F8B580000000, !dbg !43
  %95 = fadd float %74, 0x3EE4F8B580000000, !dbg !43
  %96 = fadd float %75, 0x3EE4F8B580000000, !dbg !43
  %97 = fadd float %76, 0x3EE4F8B580000000, !dbg !43
  %98 = fadd float %82, 0x3EE4F8B580000000, !dbg !43
  %99 = fadd float %83, 0x3EE4F8B580000000, !dbg !43
  %100 = fadd float %84, 0x3EE4F8B580000000, !dbg !43
  %101 = fadd float %85, 0x3EE4F8B580000000, !dbg !43
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i = icmp eq i32 %102, 0, !dbg !44
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i = icmp eq i32 %103, 0, !dbg !44
  br i1 %.not.i, label %109, label %104, !dbg !44

104:                                              ; preds = %7
  br i1 %.not1.i, label %107, label %105, !dbg !44

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

109:                                              ; preds = %7
  br i1 %.not1.i, label %112, label %110, !dbg !44

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %105, %107, %110, %112
  %.0.i = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !44
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i2 = icmp eq i32 %114, 0, !dbg !44
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i5 = icmp eq i32 %115, 0, !dbg !44
  br i1 %.not.i2, label %121, label %116, !dbg !44

116:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %119, label %117, !dbg !44

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !44
  br label %__nv_sqrtf.exit6, !dbg !44

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !44
  br label %__nv_sqrtf.exit6, !dbg !44

121:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %124, label %122, !dbg !44

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !44
  br label %__nv_sqrtf.exit6, !dbg !44

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !44
  br label %__nv_sqrtf.exit6, !dbg !44

__nv_sqrtf.exit6:                                 ; preds = %117, %119, %122, %124
  %.0.i4 = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !44
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i7 = icmp eq i32 %126, 0, !dbg !44
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i10 = icmp eq i32 %127, 0, !dbg !44
  br i1 %.not.i7, label %133, label %128, !dbg !44

128:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %131, label %129, !dbg !44

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #3, !dbg !44
  br label %__nv_sqrtf.exit11, !dbg !44

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #3, !dbg !44
  br label %__nv_sqrtf.exit11, !dbg !44

133:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %136, label %134, !dbg !44

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #3, !dbg !44
  br label %__nv_sqrtf.exit11, !dbg !44

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #3, !dbg !44
  br label %__nv_sqrtf.exit11, !dbg !44

__nv_sqrtf.exit11:                                ; preds = %129, %131, %134, %136
  %.0.i9 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !44
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i12 = icmp eq i32 %138, 0, !dbg !44
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i15 = icmp eq i32 %139, 0, !dbg !44
  br i1 %.not.i12, label %145, label %140, !dbg !44

140:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %143, label %141, !dbg !44

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #3, !dbg !44
  br label %__nv_sqrtf.exit16, !dbg !44

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #3, !dbg !44
  br label %__nv_sqrtf.exit16, !dbg !44

145:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %148, label %146, !dbg !44

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #3, !dbg !44
  br label %__nv_sqrtf.exit16, !dbg !44

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #3, !dbg !44
  br label %__nv_sqrtf.exit16, !dbg !44

__nv_sqrtf.exit16:                                ; preds = %141, %143, %146, %148
  %.0.i14 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !44
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i17 = icmp eq i32 %150, 0, !dbg !44
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i20 = icmp eq i32 %151, 0, !dbg !44
  br i1 %.not.i17, label %157, label %152, !dbg !44

152:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %155, label %153, !dbg !44

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #3, !dbg !44
  br label %__nv_sqrtf.exit21, !dbg !44

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #3, !dbg !44
  br label %__nv_sqrtf.exit21, !dbg !44

157:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %160, label %158, !dbg !44

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #3, !dbg !44
  br label %__nv_sqrtf.exit21, !dbg !44

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #3, !dbg !44
  br label %__nv_sqrtf.exit21, !dbg !44

__nv_sqrtf.exit21:                                ; preds = %153, %155, %158, %160
  %.0.i19 = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !44
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i22 = icmp eq i32 %162, 0, !dbg !44
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i25 = icmp eq i32 %163, 0, !dbg !44
  br i1 %.not.i22, label %169, label %164, !dbg !44

164:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %167, label %165, !dbg !44

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !44
  br label %__nv_sqrtf.exit26, !dbg !44

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !44
  br label %__nv_sqrtf.exit26, !dbg !44

169:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %172, label %170, !dbg !44

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !44
  br label %__nv_sqrtf.exit26, !dbg !44

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !44
  br label %__nv_sqrtf.exit26, !dbg !44

__nv_sqrtf.exit26:                                ; preds = %165, %167, %170, %172
  %.0.i24 = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !44
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i27 = icmp eq i32 %174, 0, !dbg !44
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i30 = icmp eq i32 %175, 0, !dbg !44
  br i1 %.not.i27, label %181, label %176, !dbg !44

176:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %179, label %177, !dbg !44

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !44
  br label %__nv_sqrtf.exit31, !dbg !44

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !44
  br label %__nv_sqrtf.exit31, !dbg !44

181:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %184, label %182, !dbg !44

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !44
  br label %__nv_sqrtf.exit31, !dbg !44

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !44
  br label %__nv_sqrtf.exit31, !dbg !44

__nv_sqrtf.exit31:                                ; preds = %177, %179, %182, %184
  %.0.i29 = phi float [ %178, %177 ], [ %180, %179 ], [ %183, %182 ], [ %185, %184 ], !dbg !44
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i32 = icmp eq i32 %186, 0, !dbg !44
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i35 = icmp eq i32 %187, 0, !dbg !44
  br i1 %.not.i32, label %193, label %188, !dbg !44

188:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %191, label %189, !dbg !44

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #3, !dbg !44
  br label %__nv_sqrtf.exit36, !dbg !44

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #3, !dbg !44
  br label %__nv_sqrtf.exit36, !dbg !44

193:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %196, label %194, !dbg !44

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #3, !dbg !44
  br label %__nv_sqrtf.exit36, !dbg !44

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #3, !dbg !44
  br label %__nv_sqrtf.exit36, !dbg !44

__nv_sqrtf.exit36:                                ; preds = %189, %191, %194, %196
  %.0.i34 = phi float [ %190, %189 ], [ %192, %191 ], [ %195, %194 ], [ %197, %196 ], !dbg !44
  %198 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !34
  %199 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !36
  %200 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !34
  %201 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !36
  %202 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !34
  %203 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !36
  %204 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !34
  %205 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !36
  %206 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !34
  %207 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !36
  %208 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !34
  %209 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !36
  %210 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !34
  %211 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !36
  %212 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !34
  %213 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !36
  %214 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !42
  %215 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !42
  %216 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !42
  %217 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !42
  %218 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !42
  %219 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !42
  %220 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !42
  %221 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !42
  %222 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !40
  %223 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !40
  %224 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !40
  %225 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !40
  %226 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !40
  %227 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !40
  %228 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !40
  %229 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !40
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !45
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !45
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #3, !dbg !45
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #3, !dbg !45
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #3, !dbg !45
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #3, !dbg !45
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #3, !dbg !45
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #3, !dbg !45
  %238 = insertelement <8 x i32> poison, i32 %198, i64 0, !dbg !34
  %239 = insertelement <8 x i32> %238, i32 %200, i64 1, !dbg !34
  %240 = insertelement <8 x i32> %239, i32 %202, i64 2, !dbg !34
  %241 = insertelement <8 x i32> %240, i32 %204, i64 3, !dbg !34
  %242 = insertelement <8 x i32> %241, i32 %206, i64 4, !dbg !34
  %243 = insertelement <8 x i32> %242, i32 %208, i64 5, !dbg !34
  %244 = insertelement <8 x i32> %243, i32 %210, i64 6, !dbg !34
  %245 = insertelement <8 x i32> %244, i32 %212, i64 7, !dbg !34
  %246 = bitcast <8 x i32> %245 to <8 x float>, !dbg !34
  %247 = insertelement <8 x i32> poison, i32 %199, i64 0, !dbg !36
  %248 = insertelement <8 x i32> %247, i32 %201, i64 1, !dbg !36
  %249 = insertelement <8 x i32> %248, i32 %203, i64 2, !dbg !36
  %250 = insertelement <8 x i32> %249, i32 %205, i64 3, !dbg !36
  %251 = insertelement <8 x i32> %250, i32 %207, i64 4, !dbg !36
  %252 = insertelement <8 x i32> %251, i32 %209, i64 5, !dbg !36
  %253 = insertelement <8 x i32> %252, i32 %211, i64 6, !dbg !36
  %254 = insertelement <8 x i32> %253, i32 %213, i64 7, !dbg !36
  %255 = bitcast <8 x i32> %254 to <8 x float>, !dbg !36
  %256 = fsub <8 x float> %246, %255, !dbg !46
  %257 = insertelement <8 x i32> poison, i32 %214, i64 0, !dbg !42
  %258 = insertelement <8 x i32> %257, i32 %215, i64 1, !dbg !42
  %259 = insertelement <8 x i32> %258, i32 %216, i64 2, !dbg !42
  %260 = insertelement <8 x i32> %259, i32 %217, i64 3, !dbg !42
  %261 = insertelement <8 x i32> %260, i32 %218, i64 4, !dbg !42
  %262 = insertelement <8 x i32> %261, i32 %219, i64 5, !dbg !42
  %263 = insertelement <8 x i32> %262, i32 %220, i64 6, !dbg !42
  %264 = insertelement <8 x i32> %263, i32 %221, i64 7, !dbg !42
  %265 = bitcast <8 x i32> %264 to <8 x float>, !dbg !42
  %266 = insertelement <8 x i32> poison, i32 %222, i64 0, !dbg !40
  %267 = insertelement <8 x i32> %266, i32 %223, i64 1, !dbg !40
  %268 = insertelement <8 x i32> %267, i32 %224, i64 2, !dbg !40
  %269 = insertelement <8 x i32> %268, i32 %225, i64 3, !dbg !40
  %270 = insertelement <8 x i32> %269, i32 %226, i64 4, !dbg !40
  %271 = insertelement <8 x i32> %270, i32 %227, i64 5, !dbg !40
  %272 = insertelement <8 x i32> %271, i32 %228, i64 6, !dbg !40
  %273 = insertelement <8 x i32> %272, i32 %229, i64 7, !dbg !40
  %274 = bitcast <8 x i32> %273 to <8 x float>, !dbg !40
  %275 = insertelement <8 x float> poison, float %237, i64 0, !dbg !47
  %276 = insertelement <8 x float> %275, float %236, i64 1, !dbg !47
  %277 = insertelement <8 x float> %276, float %235, i64 2, !dbg !47
  %278 = insertelement <8 x float> %277, float %234, i64 3, !dbg !47
  %279 = insertelement <8 x float> %278, float %233, i64 4, !dbg !47
  %280 = insertelement <8 x float> %279, float %232, i64 5, !dbg !47
  %281 = insertelement <8 x float> %280, float %231, i64 6, !dbg !47
  %282 = insertelement <8 x float> %281, float %230, i64 7, !dbg !47
  %283 = fmul <8 x float> %256, %282, !dbg !47
  %284 = fmul <8 x float> %283, %274, !dbg !48
  %285 = fadd <8 x float> %284, %265, !dbg !49
  %286 = fcmp olt <8 x float> %285, zeroinitializer, !dbg !50
  %287 = extractelement <8 x i1> %286, i64 7, !dbg !54
  %288 = extractelement <8 x i1> %286, i64 6, !dbg !54
  %289 = extractelement <8 x i1> %286, i64 5, !dbg !54
  %290 = extractelement <8 x i1> %286, i64 4, !dbg !54
  %291 = extractelement <8 x i1> %286, i64 3, !dbg !54
  %292 = extractelement <8 x i1> %286, i64 2, !dbg !54
  %293 = extractelement <8 x i1> %286, i64 1, !dbg !54
  %294 = extractelement <8 x i1> %286, i64 0, !dbg !54
  %295 = sext i32 %13 to i64, !dbg !55
  %296 = getelementptr float, ptr addrspace(1) %5, i64 %295, !dbg !55
  %297 = sext i32 %14 to i64, !dbg !55
  %298 = getelementptr float, ptr addrspace(1) %5, i64 %297, !dbg !55
  %bc = bitcast <8 x float> %285 to <8 x i32>, !dbg !56
  %299 = extractelement <8 x i32> %bc, i64 7, !dbg !56
  %300 = select i1 %287, i32 0, i32 %299, !dbg !54
  %bc40 = bitcast <8 x float> %285 to <8 x i32>, !dbg !56
  %301 = extractelement <8 x i32> %bc40, i64 6, !dbg !56
  %302 = select i1 %288, i32 0, i32 %301, !dbg !54
  %bc41 = bitcast <8 x float> %285 to <8 x i32>, !dbg !56
  %303 = extractelement <8 x i32> %bc41, i64 5, !dbg !56
  %304 = select i1 %289, i32 0, i32 %303, !dbg !54
  %bc42 = bitcast <8 x float> %285 to <8 x i32>, !dbg !56
  %305 = extractelement <8 x i32> %bc42, i64 4, !dbg !56
  %306 = select i1 %290, i32 0, i32 %305, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %300, i32 %302, i32 %304, i32 %306, ptr addrspace(1) %296, i1 true) #3, !dbg !56
  %bc43 = bitcast <8 x float> %285 to <8 x i32>, !dbg !56
  %307 = extractelement <8 x i32> %bc43, i64 3, !dbg !56
  %308 = select i1 %291, i32 0, i32 %307, !dbg !54
  %bc44 = bitcast <8 x float> %285 to <8 x i32>, !dbg !56
  %309 = extractelement <8 x i32> %bc44, i64 2, !dbg !56
  %310 = select i1 %292, i32 0, i32 %309, !dbg !54
  %bc45 = bitcast <8 x float> %285 to <8 x i32>, !dbg !56
  %311 = extractelement <8 x i32> %bc45, i64 1, !dbg !56
  %312 = select i1 %293, i32 0, i32 %311, !dbg !54
  %bc46 = bitcast <8 x float> %285 to <8 x i32>, !dbg !56
  %313 = extractelement <8 x i32> %bc46, i64 0, !dbg !56
  %314 = select i1 %294, i32 0, i32 %313, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %308, i32 %310, i32 %312, i32 %314, ptr addrspace(1) %298, i1 true) #3, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm4sehv7qjxmty5euvvmpnrjyynzrdznldd4upsw7v4wrcgjpejv.py", directory: "inductor_cache/m4")
!4 = !{ptr @triton_poi_fused_pixel_shuffle_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_pixel_shuffle_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_pixel_shuffle_23", linkageName: "triton_poi_fused_pixel_shuffle_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 26, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 27, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 27, column: 28, scope: !7)
!21 = !DILocation(line: 28, column: 21, scope: !7)
!22 = !DILocation(line: 28, column: 29, scope: !7)
!23 = !DILocation(line: 31, column: 37, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 45, scope: !7)
!26 = !DILocation(line: 31, column: 42, scope: !7)
!27 = !DILocation(line: 31, column: 55, scope: !7)
!28 = !DILocation(line: 31, column: 66, scope: !7)
!29 = !DILocation(line: 31, column: 77, scope: !7)
!30 = !DILocation(line: 31, column: 50, scope: !7)
!31 = !DILocation(line: 31, column: 60, scope: !7)
!32 = !DILocation(line: 31, column: 71, scope: !7)
!33 = !DILocation(line: 31, column: 30, scope: !7)
!34 = !DILocation(line: 31, column: 82, scope: !7)
!35 = !DILocation(line: 32, column: 30, scope: !7)
!36 = !DILocation(line: 32, column: 50, scope: !7)
!37 = !DILocation(line: 33, column: 30, scope: !7)
!38 = !DILocation(line: 33, column: 50, scope: !7)
!39 = !DILocation(line: 34, column: 31, scope: !7)
!40 = !DILocation(line: 34, column: 51, scope: !7)
!41 = !DILocation(line: 35, column: 31, scope: !7)
!42 = !DILocation(line: 35, column: 51, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 39, column: 26, scope: !7)
!45 = !DILocation(line: 41, column: 18, scope: !7)
!46 = !DILocation(line: 36, column: 18, scope: !7)
!47 = !DILocation(line: 44, column: 19, scope: !7)
!48 = !DILocation(line: 45, column: 20, scope: !7)
!49 = !DILocation(line: 46, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 48, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 49, column: 25, scope: !7)
!56 = !DILocation(line: 49, column: 37, scope: !7)
!57 = !DILocation(line: 49, column: 4, scope: !7)
