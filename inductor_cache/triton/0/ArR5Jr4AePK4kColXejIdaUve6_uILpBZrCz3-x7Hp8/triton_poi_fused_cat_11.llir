; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_11(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %.fr = freeze i32 %4, !dbg !11
  %5 = shl i32 %.fr, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = insertelement <4 x i32> poison, i32 %12, i64 0, !dbg !14
  %14 = insertelement <4 x i32> %13, i32 %10, i64 1, !dbg !14
  %15 = insertelement <4 x i32> %14, i32 %11, i64 2, !dbg !14
  %16 = insertelement <4 x i32> %15, i32 %9, i64 3, !dbg !14
  %17 = srem <4 x i32> %16, splat (i32 12), !dbg !14
  %18 = shufflevector <4 x i32> %17, <4 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !14
  %19 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !15
  %20 = shufflevector <2 x i32> %19, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !15
  %21 = sdiv <2 x i32> %20, <i32 12, i32 384>, !dbg !15
  %22 = srem <2 x i32> %21, splat (i32 32), !dbg !16
  %23 = shl nsw <2 x i32> %22, <i32 1, i32 7>, !dbg !17
  %24 = extractelement <2 x i32> %23, i64 0, !dbg !18
  %25 = extractelement <2 x i32> %23, i64 1, !dbg !19
  %26 = add nsw i32 %24, %25, !dbg !19
  %27 = extractelement <4 x i32> %17, i64 3, !dbg !20
  %28 = shl nsw i32 %27, 12, !dbg !21
  %29 = extractelement <4 x i32> %17, i64 1, !dbg !22
  %30 = shl nsw i32 %29, 12, !dbg !21
  %31 = extractelement <4 x i32> %17, i64 2, !dbg !20
  %32 = shl nsw i32 %31, 12, !dbg !21
  %33 = extractelement <4 x i32> %17, i64 0, !dbg !22
  %34 = shl nsw i32 %33, 12, !dbg !21
  %35 = srem i32 %9, 12288, !dbg !23
  %36 = sub nsw i32 %9, %35, !dbg !23
  %37 = add i32 %36, %28, !dbg !24
  %38 = add i32 %37, %26, !dbg !25
  %39 = add i32 %36, %30, !dbg !24
  %40 = add i32 %39, %26, !dbg !25
  %41 = add i32 %36, %32, !dbg !24
  %42 = add i32 %41, %26, !dbg !25
  %43 = add i32 %36, %34, !dbg !24
  %44 = add i32 %43, %26, !dbg !25
  %45 = sext i32 %38 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !26
  %47 = sext i32 %40 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !26
  %49 = sext i32 %42 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = sext i32 %44 to i64, !dbg !26
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !26
  %53 = icmp slt <8 x i32> %18, <i32 9, i32 9, i32 6, i32 6, i32 3, i32 3, i32 3, i32 3>, !dbg !27
  %54 = extractelement <8 x i1> %53, i64 7, !dbg !28
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %54, i32 0, i1 %54) #1, !dbg !29
  %56 = extractelement <8 x i1> %53, i64 5, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %56, i32 0, i1 %56) #1, !dbg !29
  %58 = extractelement <8 x i1> %53, i64 6, !dbg !28
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %58, i32 0, i1 %58) #1, !dbg !29
  %60 = extractelement <8 x i1> %53, i64 4, !dbg !28
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %60, i32 0, i1 %60) #1, !dbg !29
  %62 = icmp sgt i32 %29, 2, !dbg !30
  %63 = icmp sgt i32 %33, 2, !dbg !30
  %64 = add nsw i32 %27, -3, !dbg !31
  %65 = icmp ult i32 %64, 3, !dbg !31
  %66 = extractelement <8 x i1> %53, i64 3, !dbg !31
  %67 = and i1 %62, %66, !dbg !31
  %68 = extractelement <8 x i1> %53, i64 2, !dbg !31
  %69 = and i1 %63, %68, !dbg !31
  %70 = add nsw i32 %26, 64, !dbg !32
  %71 = add i32 %36, -12288, !dbg !33
  %72 = add i32 %71, %28, !dbg !34
  %73 = add i32 %72, %70, !dbg !35
  %74 = add i32 %71, %30, !dbg !34
  %75 = add i32 %74, %70, !dbg !35
  %76 = add i32 %71, %32, !dbg !34
  %77 = add i32 %76, %70, !dbg !35
  %78 = add i32 %71, %34, !dbg !34
  %79 = add i32 %78, %70, !dbg !35
  %80 = sext i32 %73 to i64, !dbg !36
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !36
  %82 = sext i32 %75 to i64, !dbg !36
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !36
  %84 = sext i32 %77 to i64, !dbg !36
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !36
  %86 = sext i32 %79 to i64, !dbg !36
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !36
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %65, i32 0, i1 %65) #1, !dbg !37
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %67, i32 0, i1 %67) #1, !dbg !37
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 false, i32 0, i1 false) #1, !dbg !37
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %69, i32 0, i1 %69) #1, !dbg !37
  %92 = icmp sgt i32 %27, 5, !dbg !38
  %93 = icmp sgt i32 %31, 5, !dbg !38
  %94 = icmp eq i32 %27, 8, !dbg !20
  %95 = extractelement <8 x i1> %53, i64 1, !dbg !20
  %96 = and i1 %95, %92, !dbg !20
  %97 = icmp eq i32 %31, 6, !dbg !20
  %98 = extractelement <8 x i1> %53, i64 0, !dbg !20
  %99 = and i1 %93, %98, !dbg !20
  %100 = or disjoint i32 %24, 1, !dbg !18
  %101 = add nsw i32 %100, %25, !dbg !39
  %102 = add i32 %36, -24576, !dbg !40
  %103 = add i32 %102, %28, !dbg !41
  %104 = add i32 %103, %101, !dbg !42
  %105 = add i32 %102, %30, !dbg !41
  %106 = add i32 %105, %101, !dbg !42
  %107 = add i32 %102, %32, !dbg !41
  %108 = add i32 %107, %101, !dbg !42
  %109 = add i32 %102, %34, !dbg !41
  %110 = add i32 %109, %101, !dbg !42
  %111 = sext i32 %104 to i64, !dbg !43
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !43
  %113 = sext i32 %106 to i64, !dbg !43
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !43
  %115 = sext i32 %108 to i64, !dbg !43
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !43
  %117 = sext i32 %110 to i64, !dbg !43
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !43
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %94, i32 0, i1 %94) #1, !dbg !44
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %96, i32 0, i1 %96) #1, !dbg !44
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %97, i32 0, i1 %97) #1, !dbg !44
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %99, i32 0, i1 %99) #1, !dbg !44
  %123 = icmp sgt i32 %27, 8, !dbg !22
  %124 = icmp sgt i32 %29, 8, !dbg !22
  %125 = icmp sgt i32 %31, 8, !dbg !22
  %126 = icmp sgt i32 %33, 8, !dbg !22
  %127 = add nsw i32 %26, 65, !dbg !45
  %128 = add i32 %36, -36864, !dbg !46
  %129 = add i32 %128, %28, !dbg !47
  %130 = add i32 %129, %127, !dbg !48
  %131 = add i32 %128, %30, !dbg !47
  %132 = add i32 %131, %127, !dbg !48
  %133 = add i32 %128, %32, !dbg !47
  %134 = add i32 %133, %127, !dbg !48
  %135 = add i32 %128, %34, !dbg !47
  %136 = add i32 %135, %127, !dbg !48
  %137 = sext i32 %130 to i64, !dbg !49
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !49
  %139 = sext i32 %132 to i64, !dbg !49
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !49
  %141 = sext i32 %134 to i64, !dbg !49
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !49
  %143 = sext i32 %136 to i64, !dbg !49
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !49
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %123, i32 0, i1 %123) #1, !dbg !50
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %124, i32 0, i1 %124) #1, !dbg !50
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %125, i32 0, i1 %125) #1, !dbg !50
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %126, i32 0, i1 %126) #1, !dbg !50
  %.v = select i1 %94, i32 %119, i32 %145, !dbg !51
  %.v1 = select i1 %96, i32 %120, i32 %146, !dbg !51
  %.v2 = select i1 %97, i32 %121, i32 %147, !dbg !51
  %.v3 = select i1 %99, i32 %122, i32 %148, !dbg !51
  %.v4 = select i1 %65, i32 %88, i32 %.v, !dbg !52
  %.v5 = select i1 %67, i32 %89, i32 %.v1, !dbg !52
  %.v7 = select i1 %69, i32 %91, i32 %.v3, !dbg !52
  %.v8 = select i1 %54, i32 %55, i32 %.v4, !dbg !28
  %.v9 = select i1 %56, i32 %57, i32 %.v5, !dbg !28
  %.v10 = select i1 %58, i32 %59, i32 %.v2, !dbg !28
  %.v11 = select i1 %60, i32 %61, i32 %.v7, !dbg !28
  %149 = sext i32 %9 to i64, !dbg !53
  %150 = getelementptr float, ptr addrspace(1) %1, i64 %149, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.v8, i32 %.v9, i32 %.v10, i32 %.v11, ptr addrspace(1) %150, i1 true) #1, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cc6pp23ivyssvoaszg4lx4m43rmhnl35z5by5xvw37pvjw2azruk.py", directory: "inductor_cache/c6")
!4 = !{ptr @triton_poi_fused_cat_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_11", linkageName: "triton_poi_fused_cat_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 34, column: 32, scope: !7)
!18 = !DILocation(line: 44, column: 35, scope: !7)
!19 = !DILocation(line: 34, column: 37, scope: !7)
!20 = !DILocation(line: 43, column: 20, scope: !7)
!21 = !DILocation(line: 34, column: 52, scope: !7)
!22 = !DILocation(line: 45, column: 20, scope: !7)
!23 = !DILocation(line: 34, column: 64, scope: !7)
!24 = !DILocation(line: 34, column: 46, scope: !7)
!25 = !DILocation(line: 34, column: 58, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 42, column: 19, scope: !7)
!28 = !DILocation(line: 51, column: 33, scope: !7)
!29 = !DILocation(line: 34, column: 69, scope: !7)
!30 = !DILocation(line: 35, column: 19, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 43, scope: !7)
!33 = !DILocation(line: 39, column: 58, scope: !7)
!34 = !DILocation(line: 39, column: 52, scope: !7)
!35 = !DILocation(line: 39, column: 71, scope: !7)
!36 = !DILocation(line: 39, column: 31, scope: !7)
!37 = !DILocation(line: 39, column: 82, scope: !7)
!38 = !DILocation(line: 40, column: 20, scope: !7)
!39 = !DILocation(line: 44, column: 42, scope: !7)
!40 = !DILocation(line: 44, column: 57, scope: !7)
!41 = !DILocation(line: 44, column: 51, scope: !7)
!42 = !DILocation(line: 44, column: 70, scope: !7)
!43 = !DILocation(line: 44, column: 31, scope: !7)
!44 = !DILocation(line: 44, column: 81, scope: !7)
!45 = !DILocation(line: 48, column: 43, scope: !7)
!46 = !DILocation(line: 48, column: 58, scope: !7)
!47 = !DILocation(line: 48, column: 52, scope: !7)
!48 = !DILocation(line: 48, column: 71, scope: !7)
!49 = !DILocation(line: 48, column: 31, scope: !7)
!50 = !DILocation(line: 48, column: 82, scope: !7)
!51 = !DILocation(line: 49, column: 35, scope: !7)
!52 = !DILocation(line: 50, column: 34, scope: !7)
!53 = !DILocation(line: 52, column: 25, scope: !7)
!54 = !DILocation(line: 52, column: 37, scope: !7)
!55 = !DILocation(line: 52, column: 4, scope: !7)
