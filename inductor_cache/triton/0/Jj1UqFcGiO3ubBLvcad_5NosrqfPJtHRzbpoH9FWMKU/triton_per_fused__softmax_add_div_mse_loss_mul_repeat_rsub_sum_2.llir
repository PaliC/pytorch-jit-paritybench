; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__softmax_add_div_mse_loss_mul_repeat_rsub_sum_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %11 = and i32 %10, 31, !dbg !10
  %12 = lshr i32 %10, 5, !dbg !10
  %13 = shl i32 %10, 2, !dbg !10
  %14 = and i32 %13, 252, !dbg !10
  %15 = lshr exact i32 %14, 2, !dbg !11
  %16 = and i32 %15, 3, !dbg !12
  %17 = zext nneg i32 %14 to i64, !dbg !13
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !13
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !14
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !14
  %24 = lshr i32 %13, 4, !dbg !15
  %25 = and i32 %24, 12, !dbg !15
  %26 = or disjoint i32 %16, %25, !dbg !16
  %27 = zext nneg i32 %26 to i64, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !17
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !18
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !18
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !18
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !18
  %33 = zext nneg i32 %25 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !19
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !20
  %40 = zext nneg i32 %15 to i64, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !22
  %43 = bitcast i32 %42 to float, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !22
  %45 = bitcast i32 %44 to float, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !22
  %47 = bitcast i32 %46 to float, !dbg !22
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !22
  %49 = bitcast i32 %48 to float, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !23
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !24
  %52 = bitcast i32 %51 to float, !dbg !24
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !24
  %54 = bitcast i32 %53 to float, !dbg !24
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !24
  %56 = bitcast i32 %55 to float, !dbg !24
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !24
  %58 = bitcast i32 %57 to float, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %4, i64 %17, !dbg !25
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !27
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !27
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !27
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !27
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !27
  %70 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !14
  %71 = insertelement <2 x i32> %70, i32 %21, i64 1, !dbg !14
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !14
  %73 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !26
  %74 = insertelement <2 x i32> %73, i32 %62, i64 1, !dbg !26
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !26
  %76 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !27
  %77 = insertelement <2 x i32> %76, i32 %30, i64 1, !dbg !27
  %78 = bitcast <2 x i32> %77 to <2 x float>, !dbg !27
  %79 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !18
  %80 = insertelement <2 x i32> %79, i32 %67, i64 1, !dbg !18
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !18
  %82 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !20
  %83 = insertelement <2 x i32> %82, i32 %37, i64 1, !dbg !20
  %84 = bitcast <2 x i32> %83 to <2 x float>, !dbg !20
  %85 = insertelement <2 x i32> %79, i32 %30, i64 1, !dbg !18
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !18
  %87 = fmul <2 x float> %86, %84, !dbg !28
  %88 = extractelement <2 x float> %87, i64 0, !dbg !29
  %89 = fmul <2 x float> %87, %72, !dbg !34
  %90 = extractelement <2 x float> %89, i64 0, !dbg !34
  %91 = extractelement <2 x float> %87, i64 1, !dbg !29
  %92 = fmul <2 x float> %87, %72, !dbg !34
  %93 = extractelement <2 x float> %92, i64 1, !dbg !34
  %94 = fsub float 1.000000e+00, %88, !dbg !35
  %95 = fsub float 1.000000e+00, %91, !dbg !35
  %96 = fmul float %94, 1.000000e+04, !dbg !36
  %97 = fmul float %95, 1.000000e+04, !dbg !36
  %98 = fsub float %90, %96, !dbg !37
  %99 = fsub float %93, %97, !dbg !37
  %100 = fsub float %98, %43, !dbg !38
  %101 = fsub float %99, %45, !dbg !38
  %102 = fmul float %100, 0x3FF7154760000000, !dbg !39
  %103 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %102) #3, !dbg !39
  %104 = fmul float %101, 0x3FF7154760000000, !dbg !39
  %105 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %104) #3, !dbg !39
  %106 = fmul <2 x float> %78, %81, !dbg !40
  %107 = fmul <2 x float> %106, %75, !dbg !41
  %108 = fmul <2 x float> %106, %72, !dbg !42
  %109 = fsub <2 x float> %107, %108, !dbg !43
  %110 = fmul <2 x float> %109, %109, !dbg !44
  %111 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !14
  %112 = insertelement <2 x i32> %111, i32 %22, i64 1, !dbg !14
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !14
  %114 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !26
  %115 = insertelement <2 x i32> %114, i32 %63, i64 1, !dbg !26
  %116 = bitcast <2 x i32> %115 to <2 x float>, !dbg !26
  %117 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !18
  %118 = insertelement <2 x i32> %117, i32 %68, i64 1, !dbg !18
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !18
  %120 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !27
  %121 = insertelement <2 x i32> %120, i32 %31, i64 1, !dbg !27
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !27
  %123 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !20
  %124 = insertelement <2 x i32> %123, i32 %38, i64 1, !dbg !20
  %125 = bitcast <2 x i32> %124 to <2 x float>, !dbg !20
  %126 = insertelement <2 x i32> %117, i32 %31, i64 1, !dbg !18
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !18
  %128 = fmul <2 x float> %127, %125, !dbg !28
  %129 = extractelement <2 x float> %128, i64 1, !dbg !29
  %130 = fmul <2 x float> %128, %113, !dbg !34
  %131 = extractelement <2 x float> %130, i64 1, !dbg !34
  %132 = extractelement <2 x float> %128, i64 0, !dbg !29
  %133 = fmul <2 x float> %128, %113, !dbg !34
  %134 = extractelement <2 x float> %133, i64 0, !dbg !34
  %135 = fsub float 1.000000e+00, %129, !dbg !35
  %136 = fsub float 1.000000e+00, %132, !dbg !35
  %137 = fmul float %135, 1.000000e+04, !dbg !36
  %138 = fmul float %136, 1.000000e+04, !dbg !36
  %139 = fsub float %131, %137, !dbg !37
  %140 = fsub float %134, %138, !dbg !37
  %141 = fsub float %139, %47, !dbg !38
  %142 = fsub float %140, %49, !dbg !38
  %143 = fmul float %141, 0x3FF7154760000000, !dbg !39
  %144 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %143) #3, !dbg !39
  %145 = fmul float %142, 0x3FF7154760000000, !dbg !39
  %146 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %145) #3, !dbg !39
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %52) #3, !dbg !45
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %54) #3, !dbg !45
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %56) #3, !dbg !45
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %58) #3, !dbg !45
  %151 = fmul float %88, %147, !dbg !46
  %152 = fmul float %91, %148, !dbg !46
  %153 = fmul float %129, %149, !dbg !46
  %154 = fmul float %132, %150, !dbg !46
  %155 = fmul <2 x float> %122, %119, !dbg !40
  %156 = fmul <2 x float> %155, %116, !dbg !41
  %157 = fmul <2 x float> %155, %113, !dbg !42
  %158 = fsub <2 x float> %156, %157, !dbg !43
  %159 = fmul <2 x float> %158, %158, !dbg !44
  %shift = shufflevector <2 x float> %110, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !47
  %160 = fadd <2 x float> %110, %shift, !dbg !47
  %shift1 = shufflevector <2 x float> %159, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !47
  %161 = fadd <2 x float> %shift1, %160, !dbg !47
  %162 = fadd <2 x float> %159, %161, !dbg !47
  %163 = extractelement <2 x float> %162, i64 0, !dbg !47
  %164 = bitcast float %163 to i32, !dbg !49
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 16, i32 31), !dbg !49
  %166 = bitcast i32 %165 to float, !dbg !49
  %167 = fadd float %163, %166, !dbg !47
  %168 = bitcast float %167 to i32, !dbg !49
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 8, i32 31), !dbg !49
  %170 = bitcast i32 %169 to float, !dbg !49
  %171 = fadd float %167, %170, !dbg !47
  %172 = bitcast float %171 to i32, !dbg !49
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 4, i32 31), !dbg !49
  %174 = bitcast i32 %173 to float, !dbg !49
  %175 = fadd float %171, %174, !dbg !47
  %176 = bitcast float %175 to i32, !dbg !49
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 2, i32 31), !dbg !49
  %178 = bitcast i32 %177 to float, !dbg !49
  %179 = fadd float %175, %178, !dbg !47
  %180 = bitcast float %179 to i32, !dbg !49
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 1, i32 31), !dbg !49
  %182 = bitcast i32 %181 to float, !dbg !49
  %183 = fadd float %179, %182, !dbg !47
  %184 = icmp eq i32 %11, 0, !dbg !49
  %185 = and i32 %12, 1, !dbg !49
  %186 = zext nneg i32 %185 to i64, !dbg !49
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i64 %186, !dbg !49
  %188 = bitcast float %183 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 %184) #3, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %189 = icmp slt i32 %10, 2, !dbg !49
  %190 = sext i32 %10 to i64, !dbg !49
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i64 %190, !dbg !49
  %192 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %191, i1 %189) #3, !dbg !49
  %193 = bitcast i32 %192 to float, !dbg !49
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 1, i32 31), !dbg !49
  %195 = bitcast i32 %194 to float, !dbg !49
  %196 = fadd float %193, %195, !dbg !47
  %197 = and i32 %10, 1, !dbg !49
  %198 = icmp eq i32 %197, 0, !dbg !49
  %199 = and i1 %189, %198, !dbg !49
  %200 = bitcast float %196 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %200, i1 %199) #3, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %201 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !49
  %202 = fadd float %201, 0.000000e+00, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %203 = fadd float %88, %91, !dbg !29
  %204 = fadd float %129, %203, !dbg !29
  %205 = fadd float %132, %204, !dbg !29
  %206 = bitcast float %205 to i32, !dbg !54
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 16, i32 31), !dbg !54
  %208 = bitcast i32 %207 to float, !dbg !54
  %209 = fadd float %205, %208, !dbg !29
  %210 = bitcast float %209 to i32, !dbg !54
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 8, i32 31), !dbg !54
  %212 = bitcast i32 %211 to float, !dbg !54
  %213 = fadd float %209, %212, !dbg !29
  %214 = bitcast float %213 to i32, !dbg !54
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 4, i32 31), !dbg !54
  %216 = bitcast i32 %215 to float, !dbg !54
  %217 = fadd float %213, %216, !dbg !29
  %218 = bitcast float %217 to i32, !dbg !54
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 2, i32 31), !dbg !54
  %220 = bitcast i32 %219 to float, !dbg !54
  %221 = fadd float %217, %220, !dbg !29
  %222 = bitcast float %221 to i32, !dbg !54
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 1, i32 31), !dbg !54
  %224 = bitcast i32 %223 to float, !dbg !54
  %225 = fadd float %221, %224, !dbg !29
  %226 = bitcast float %225 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %226, i1 %184) #3, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %227 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %191, i1 %189) #3, !dbg !54
  %228 = bitcast i32 %227 to float, !dbg !54
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 1, i32 31), !dbg !54
  %230 = bitcast i32 %229 to float, !dbg !54
  %231 = fadd float %228, %230, !dbg !29
  %232 = bitcast float %231 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %232, i1 %199) #3, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %233 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !54
  %234 = fadd float %233, 0.000000e+00, !dbg !55
  %235 = getelementptr float, ptr addrspace(1) %5, i64 %17, !dbg !57
  %236 = bitcast float %151 to i32, !dbg !58
  %237 = bitcast float %152 to i32, !dbg !58
  %238 = bitcast float %153 to i32, !dbg !58
  %239 = bitcast float %154 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %236, i32 %237, i32 %238, i32 %239, ptr addrspace(1) %235, i1 true) #3, !dbg !58
  %urem = and i32 %10, 63, !dbg !59
  %240 = icmp eq i32 %urem, 0, !dbg !59
  %241 = bitcast float %202 to i32, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %241, ptr addrspace(1) %6, i1 %240) #3, !dbg !59
  %242 = bitcast float %234 to i32, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %242, ptr addrspace(1) %7, i1 %240) #3, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdkp2r6jj3ic7ubaxndpgidvxa5jznaszeov3l53e7wsm3cujfh5.py", directory: "inductor_cache/dk")
!4 = !{ptr @triton_per_fused__softmax_add_div_mse_loss_mul_repeat_rsub_sum_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_add_div_mse_loss_mul_repeat_rsub_sum_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_add_div_mse_loss_mul_repeat_rsub_sum_2", linkageName: "triton_per_fused__softmax_add_div_mse_loss_mul_repeat_rsub_sum_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 21, scope: !7)
!12 = !DILocation(line: 31, column: 26, scope: !7)
!13 = !DILocation(line: 35, column: 30, scope: !7)
!14 = !DILocation(line: 35, column: 35, scope: !7)
!15 = !DILocation(line: 36, column: 37, scope: !7)
!16 = !DILocation(line: 36, column: 35, scope: !7)
!17 = !DILocation(line: 36, column: 30, scope: !7)
!18 = !DILocation(line: 36, column: 42, scope: !7)
!19 = !DILocation(line: 37, column: 30, scope: !7)
!20 = !DILocation(line: 37, column: 42, scope: !7)
!21 = !DILocation(line: 38, column: 31, scope: !7)
!22 = !DILocation(line: 38, column: 36, scope: !7)
!23 = !DILocation(line: 39, column: 31, scope: !7)
!24 = !DILocation(line: 39, column: 36, scope: !7)
!25 = !DILocation(line: 40, column: 31, scope: !7)
!26 = !DILocation(line: 40, column: 36, scope: !7)
!27 = !DILocation(line: 42, column: 59, scope: !7)
!28 = !DILocation(line: 45, column: 18, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!33 = !DILocation(line: 64, column: 59, scope: !7)
!34 = !DILocation(line: 46, column: 18, scope: !7)
!35 = !DILocation(line: 47, column: 18, scope: !7)
!36 = !DILocation(line: 49, column: 18, scope: !7)
!37 = !DILocation(line: 50, column: 19, scope: !7)
!38 = !DILocation(line: 51, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 24, scope: !7)
!40 = !DILocation(line: 56, column: 20, scope: !7)
!41 = !DILocation(line: 57, column: 20, scope: !7)
!42 = !DILocation(line: 58, column: 19, scope: !7)
!43 = !DILocation(line: 59, column: 20, scope: !7)
!44 = !DILocation(line: 60, column: 20, scope: !7)
!45 = !DILocation(line: 53, column: 20, scope: !7)
!46 = !DILocation(line: 54, column: 20, scope: !7)
!47 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !48)
!48 = !DILocation(line: 62, column: 59, scope: !7)
!49 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !48)
!50 = !DILocation(line: 73, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 62, column: 45, scope: !7)
!54 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !33)
!55 = !DILocation(line: 73, column: 15, scope: !51, inlinedAt: !56)
!56 = !DILocation(line: 64, column: 45, scope: !7)
!57 = !DILocation(line: 65, column: 25, scope: !7)
!58 = !DILocation(line: 65, column: 64, scope: !7)
!59 = !DILocation(line: 66, column: 60, scope: !7)
!60 = !DILocation(line: 67, column: 60, scope: !7)
!61 = !DILocation(line: 67, column: 4, scope: !7)
