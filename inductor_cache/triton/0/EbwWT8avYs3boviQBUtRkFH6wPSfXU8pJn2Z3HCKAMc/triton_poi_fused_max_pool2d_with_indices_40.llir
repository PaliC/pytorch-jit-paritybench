; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_40(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 2, !dbg !13
  %13 = or disjoint i32 %10, 3, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %14 = sdiv i32 %.frozen, 8, !dbg !14
  %15 = mul i32 %14, 8, !dbg !15
  %.decomposed = sub i32 %.frozen, %15, !dbg !15
  %16 = srem i32 %11, 8, !dbg !15
  %17 = srem i32 %12, 8, !dbg !15
  %18 = icmp sgt i32 %.decomposed, 1, !dbg !16
  %19 = icmp sgt i32 %17, 1, !dbg !16
  %20 = add i32 %10, -18, !dbg !17
  %21 = add i32 %10, -16, !dbg !17
  %22 = sext i32 %20 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !18
  %24 = sext i32 %21 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !18
  %26 = icmp sgt i32 %.decomposed, 0, !dbg !19
  %27 = icmp sgt i32 %16, 0, !dbg !19
  %28 = icmp sgt i32 %17, 0, !dbg !19
  %29 = add i32 %10, -17, !dbg !20
  %30 = add i32 %10, -15, !dbg !20
  %31 = add i32 %10, -14, !dbg !20
  %32 = sext i32 %29 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !21
  %34 = sext i32 %30 to i64, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !21
  %36 = sext i32 %31 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !21
  %38 = icmp sgt i32 %.decomposed, -1, !dbg !22
  %39 = icmp ult i32 %.decomposed, 8, !dbg !23
  %40 = add nuw nsw i32 %16, 1, !dbg !23
  %41 = icmp ult i32 %16, 7, !dbg !23
  %42 = icmp ult i32 %17, 8, !dbg !23
  %43 = add i32 %10, -13, !dbg !24
  %44 = add i32 %10, -12, !dbg !24
  %45 = sext i32 %43 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !25
  %47 = sext i32 %44 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !25
  %49 = add nsw i32 %17, 2, !dbg !26
  %50 = icmp ult i32 %49, 8, !dbg !26
  %51 = add i32 %10, -10, !dbg !27
  %52 = add i32 %10, -8, !dbg !27
  %53 = sext i32 %51 to i64, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !28
  %55 = sext i32 %52 to i64, !dbg !28
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !28
  %57 = add i32 %10, -9, !dbg !29
  %58 = add i32 %10, -7, !dbg !29
  %59 = add i32 %10, -6, !dbg !29
  %60 = sext i32 %57 to i64, !dbg !30
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !30
  %62 = sext i32 %58 to i64, !dbg !30
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !30
  %64 = sext i32 %59 to i64, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !30
  %66 = add i32 %10, -5, !dbg !31
  %67 = add i32 %10, -4, !dbg !31
  %68 = sext i32 %66 to i64, !dbg !32
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !32
  %70 = sext i32 %67 to i64, !dbg !32
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !32
  %72 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !15
  %73 = insertelement <2 x i32> %72, i32 %14, i64 1, !dbg !15
  %74 = srem <2 x i32> %73, splat (i32 8), !dbg !15
  %75 = extractelement <2 x i32> %74, i64 1, !dbg !33
  %76 = icmp sgt i32 %75, 1, !dbg !34
  %77 = and i1 %18, %76, !dbg !35
  %78 = and i1 %19, %76, !dbg !35
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %77, i32 -8388608, i1 %77, i32 -8388608, i1 %77) #1, !dbg !36
  %80 = extractvalue { i32, i32 } %79, 0, !dbg !36
  %81 = extractvalue { i32, i32 } %79, 1, !dbg !36
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %25, i1 %78, i32 -8388608, i1 %78, i32 -8388608, i1 %78) #1, !dbg !36
  %83 = extractvalue { i32, i32 } %82, 0, !dbg !36
  %84 = extractvalue { i32, i32 } %82, 1, !dbg !36
  %85 = and i1 %26, %76, !dbg !37
  %86 = and i1 %27, %76, !dbg !37
  %87 = and i1 %28, %76, !dbg !37
  %88 = icmp sgt <2 x i32> %74, <i32 0, i32 -1>, !dbg !19
  %89 = extractelement <2 x i1> %88, i64 0, !dbg !37
  %90 = and i1 %89, %76, !dbg !37
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %85, i32 -8388608, i1 %85) #1, !dbg !38
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 %86, i32 -8388608, i1 %86) #1, !dbg !38
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %87, i32 -8388608, i1 %87) #1, !dbg !38
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %90, i32 -8388608, i1 %90) #1, !dbg !38
  %95 = and i1 %38, %76, !dbg !39
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95) #1, !dbg !40
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !40
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !40
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !40
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !40
  %101 = extractelement <2 x i32> %74, i64 0, !dbg !23
  %102 = add nsw i32 %101, 1, !dbg !23
  %103 = icmp ult i32 %102, 8, !dbg !23
  %104 = and i1 %39, %76, !dbg !41
  %105 = and i1 %41, %76, !dbg !41
  %106 = and i1 %42, %76, !dbg !41
  %107 = and i1 %103, %76, !dbg !41
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %104, i32 -8388608, i1 %104) #1, !dbg !42
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %105, i32 -8388608, i1 %105) #1, !dbg !42
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %106, i32 -8388608, i1 %106) #1, !dbg !42
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %107, i32 -8388608, i1 %107) #1, !dbg !42
  %112 = and i1 %50, %76, !dbg !43
  %113 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %104, i32 -8388608, i1 %104, i32 -8388608, i1 %104) #1, !dbg !44
  %114 = extractvalue { i32, i32 } %113, 0, !dbg !44
  %115 = extractvalue { i32, i32 } %113, 1, !dbg !44
  %116 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %48, i1 %112, i32 -8388608, i1 %112, i32 -8388608, i1 %112) #1, !dbg !44
  %117 = extractvalue { i32, i32 } %116, 0, !dbg !44
  %118 = extractvalue { i32, i32 } %116, 1, !dbg !44
  %119 = icmp sgt i32 %75, 0, !dbg !45
  %120 = and i1 %18, %119, !dbg !46
  %121 = and i1 %19, %119, !dbg !46
  %122 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %54, i1 %120, i32 -8388608, i1 %120, i32 -8388608, i1 %120) #1, !dbg !47
  %123 = extractvalue { i32, i32 } %122, 0, !dbg !47
  %124 = extractvalue { i32, i32 } %122, 1, !dbg !47
  %125 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %56, i1 %121, i32 -8388608, i1 %121, i32 -8388608, i1 %121) #1, !dbg !47
  %126 = extractvalue { i32, i32 } %125, 0, !dbg !47
  %127 = extractvalue { i32, i32 } %125, 1, !dbg !47
  %128 = and i1 %26, %119, !dbg !48
  %129 = and i1 %27, %119, !dbg !48
  %130 = and i1 %28, %119, !dbg !48
  %131 = and i1 %89, %119, !dbg !48
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %128, i32 -8388608, i1 %128) #1, !dbg !49
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %129, i32 -8388608, i1 %129) #1, !dbg !49
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %130, i32 -8388608, i1 %130) #1, !dbg !49
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %131, i32 -8388608, i1 %131) #1, !dbg !49
  %136 = and i1 %38, %119, !dbg !50
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #1, !dbg !51
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !51
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !51
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !51
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !51
  %142 = and i1 %39, %119, !dbg !52
  %143 = and i1 %41, %119, !dbg !52
  %144 = and i1 %42, %119, !dbg !52
  %145 = and i1 %103, %119, !dbg !52
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %142, i32 -8388608, i1 %142) #1, !dbg !53
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %143, i32 -8388608, i1 %143) #1, !dbg !53
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %144, i32 -8388608, i1 %144) #1, !dbg !53
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %145, i32 -8388608, i1 %145) #1, !dbg !53
  %150 = and i1 %50, %119, !dbg !54
  %151 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %65, i1 %142, i32 -8388608, i1 %142, i32 -8388608, i1 %142) #1, !dbg !55
  %152 = extractvalue { i32, i32 } %151, 0, !dbg !55
  %153 = extractvalue { i32, i32 } %151, 1, !dbg !55
  %154 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %71, i1 %150, i32 -8388608, i1 %150, i32 -8388608, i1 %150) #1, !dbg !55
  %155 = extractvalue { i32, i32 } %154, 0, !dbg !55
  %156 = extractvalue { i32, i32 } %154, 1, !dbg !55
  %157 = extractelement <2 x i1> %88, i64 1, !dbg !56
  %158 = and i1 %18, %157, !dbg !56
  %159 = and i1 %19, %157, !dbg !56
  %160 = add i32 %10, -2, !dbg !57
  %161 = sext i32 %160 to i64, !dbg !58
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !58
  %163 = sext i32 %12 to i64, !dbg !58
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !58
  %165 = getelementptr i8, ptr addrspace(1) %164, i64 -8, !dbg !58
  %166 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %162, i1 %158, i32 -8388608, i1 %158, i32 -8388608, i1 %158) #1, !dbg !59
  %167 = extractvalue { i32, i32 } %166, 0, !dbg !59
  %168 = extractvalue { i32, i32 } %166, 1, !dbg !59
  %169 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %165, i1 %159, i32 -8388608, i1 %159, i32 -8388608, i1 %159) #1, !dbg !59
  %170 = extractvalue { i32, i32 } %169, 0, !dbg !59
  %171 = extractvalue { i32, i32 } %169, 1, !dbg !59
  %172 = and i1 %26, %157, !dbg !60
  %173 = and i1 %27, %157, !dbg !60
  %174 = and i1 %28, %157, !dbg !60
  %175 = and i1 %89, %157, !dbg !60
  %176 = add i32 %10, -1, !dbg !61
  %177 = sext i32 %176 to i64, !dbg !62
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !62
  %179 = sext i32 %11 to i64, !dbg !62
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !62
  %181 = getelementptr i8, ptr addrspace(1) %180, i64 -4, !dbg !62
  %182 = getelementptr i8, ptr addrspace(1) %164, i64 -4, !dbg !62
  %183 = sext i32 %13 to i64, !dbg !62
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !62
  %185 = getelementptr i8, ptr addrspace(1) %184, i64 -4, !dbg !62
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %172, i32 -8388608, i1 %172) #1, !dbg !63
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %173, i32 -8388608, i1 %173) #1, !dbg !63
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %182, i1 %174, i32 -8388608, i1 %174) #1, !dbg !63
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %175, i32 -8388608, i1 %175) #1, !dbg !63
  %190 = or i32 %75, %.decomposed, !dbg !64
  %191 = icmp sgt i32 %190, -1, !dbg !64
  %192 = sext i32 %10 to i64, !dbg !65
  %193 = getelementptr float, ptr addrspace(1) %0, i64 %192, !dbg !65
  %194 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %193, i1 %191, i32 -8388608, i1 %191, i32 -8388608, i1 %191, i32 -8388608, i1 %191, i32 -8388608, i1 %191) #1, !dbg !66
  %195 = extractvalue { i32, i32, i32, i32 } %194, 0, !dbg !66
  %196 = extractvalue { i32, i32, i32, i32 } %194, 1, !dbg !66
  %197 = extractvalue { i32, i32, i32, i32 } %194, 2, !dbg !66
  %198 = extractvalue { i32, i32, i32, i32 } %194, 3, !dbg !66
  %199 = and i1 %39, %157, !dbg !67
  %200 = and i1 %41, %157, !dbg !67
  %201 = and i1 %42, %157, !dbg !67
  %202 = and i1 %103, %157, !dbg !67
  %203 = add i32 %10, 4, !dbg !68
  %204 = getelementptr i8, ptr addrspace(1) %180, i64 4, !dbg !69
  %205 = sext i32 %203 to i64, !dbg !69
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !69
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %199, i32 -8388608, i1 %199) #1, !dbg !70
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 %200, i32 -8388608, i1 %200) #1, !dbg !70
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %201, i32 -8388608, i1 %201) #1, !dbg !70
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 %202, i32 -8388608, i1 %202) #1, !dbg !70
  %211 = and i1 %50, %157, !dbg !71
  %212 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %164, i1 %199, i32 -8388608, i1 %199, i32 -8388608, i1 %199) #1, !dbg !72
  %213 = extractvalue { i32, i32 } %212, 0, !dbg !72
  %214 = extractvalue { i32, i32 } %212, 1, !dbg !72
  %215 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %206, i1 %211, i32 -8388608, i1 %211, i32 -8388608, i1 %211) #1, !dbg !72
  %216 = extractvalue { i32, i32 } %215, 0, !dbg !72
  %217 = extractvalue { i32, i32 } %215, 1, !dbg !72
  %218 = add nsw i32 %75, 1, !dbg !73
  %219 = icmp ult i32 %218, 8, !dbg !73
  %220 = and i1 %18, %219, !dbg !74
  %221 = and i1 %19, %219, !dbg !74
  %222 = add i32 %10, 6, !dbg !75
  %223 = add i32 %10, 8, !dbg !75
  %224 = sext i32 %222 to i64, !dbg !76
  %225 = getelementptr float, ptr addrspace(1) %0, i64 %224, !dbg !76
  %226 = sext i32 %223 to i64, !dbg !76
  %227 = getelementptr float, ptr addrspace(1) %0, i64 %226, !dbg !76
  %228 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %225, i1 %220, i32 -8388608, i1 %220, i32 -8388608, i1 %220) #1, !dbg !77
  %229 = extractvalue { i32, i32 } %228, 0, !dbg !77
  %230 = extractvalue { i32, i32 } %228, 1, !dbg !77
  %231 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %227, i1 %221, i32 -8388608, i1 %221, i32 -8388608, i1 %221) #1, !dbg !77
  %232 = extractvalue { i32, i32 } %231, 0, !dbg !77
  %233 = extractvalue { i32, i32 } %231, 1, !dbg !77
  %234 = and i1 %26, %219, !dbg !78
  %235 = and i1 %27, %219, !dbg !78
  %236 = and i1 %28, %219, !dbg !78
  %237 = and i1 %89, %219, !dbg !78
  %238 = add i32 %10, 7, !dbg !79
  %239 = add i32 %10, 9, !dbg !79
  %240 = add i32 %10, 10, !dbg !79
  %241 = sext i32 %238 to i64, !dbg !80
  %242 = getelementptr float, ptr addrspace(1) %0, i64 %241, !dbg !80
  %243 = sext i32 %239 to i64, !dbg !80
  %244 = getelementptr float, ptr addrspace(1) %0, i64 %243, !dbg !80
  %245 = sext i32 %240 to i64, !dbg !80
  %246 = getelementptr float, ptr addrspace(1) %0, i64 %245, !dbg !80
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %242, i1 %234, i32 -8388608, i1 %234) #1, !dbg !81
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %235, i32 -8388608, i1 %235) #1, !dbg !81
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %244, i1 %236, i32 -8388608, i1 %236) #1, !dbg !81
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %246, i1 %237, i32 -8388608, i1 %237) #1, !dbg !81
  %251 = and i1 %38, %219, !dbg !82
  %252 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %227, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251) #1, !dbg !83
  %253 = extractvalue { i32, i32, i32, i32 } %252, 0, !dbg !83
  %254 = extractvalue { i32, i32, i32, i32 } %252, 1, !dbg !83
  %255 = extractvalue { i32, i32, i32, i32 } %252, 2, !dbg !83
  %256 = extractvalue { i32, i32, i32, i32 } %252, 3, !dbg !83
  %257 = or i32 %218, %.decomposed, !dbg !84
  %258 = icmp ult i32 %257, 8, !dbg !84
  %259 = or i32 %218, %40, !dbg !84
  %260 = icmp ult i32 %259, 8, !dbg !84
  %261 = or i32 %218, %17, !dbg !84
  %262 = icmp ult i32 %261, 8, !dbg !84
  %263 = or i32 %218, %102, !dbg !84
  %264 = icmp ult i32 %263, 8, !dbg !84
  %265 = add i32 %10, 11, !dbg !85
  %266 = add i32 %10, 12, !dbg !85
  %267 = sext i32 %265 to i64, !dbg !86
  %268 = getelementptr float, ptr addrspace(1) %0, i64 %267, !dbg !86
  %269 = sext i32 %266 to i64, !dbg !86
  %270 = getelementptr float, ptr addrspace(1) %0, i64 %269, !dbg !86
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %244, i1 %258, i32 -8388608, i1 %258) #1, !dbg !87
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %246, i1 %260, i32 -8388608, i1 %260) #1, !dbg !87
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %268, i1 %262, i32 -8388608, i1 %262) #1, !dbg !87
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %270, i1 %264, i32 -8388608, i1 %264) #1, !dbg !87
  %275 = or i32 %218, %49, !dbg !88
  %276 = icmp ult i32 %275, 8, !dbg !88
  %277 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %246, i1 %258, i32 -8388608, i1 %258, i32 -8388608, i1 %258) #1, !dbg !89
  %278 = extractvalue { i32, i32 } %277, 0, !dbg !89
  %279 = extractvalue { i32, i32 } %277, 1, !dbg !89
  %280 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %270, i1 %276, i32 -8388608, i1 %276, i32 -8388608, i1 %276) #1, !dbg !89
  %281 = extractvalue { i32, i32 } %280, 0, !dbg !89
  %282 = extractvalue { i32, i32 } %280, 1, !dbg !89
  %283 = add nsw i32 %75, 2, !dbg !33
  %284 = icmp ult i32 %283, 8, !dbg !33
  %285 = and i1 %18, %284, !dbg !90
  %286 = and i1 %19, %284, !dbg !90
  %287 = add i32 %10, 14, !dbg !91
  %288 = add i32 %10, 16, !dbg !91
  %289 = sext i32 %287 to i64, !dbg !92
  %290 = getelementptr float, ptr addrspace(1) %0, i64 %289, !dbg !92
  %291 = sext i32 %288 to i64, !dbg !92
  %292 = getelementptr float, ptr addrspace(1) %0, i64 %291, !dbg !92
  %293 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %290, i1 %285, i32 -8388608, i1 %285, i32 -8388608, i1 %285) #1, !dbg !93
  %294 = extractvalue { i32, i32 } %293, 0, !dbg !93
  %295 = extractvalue { i32, i32 } %293, 1, !dbg !93
  %296 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %292, i1 %286, i32 -8388608, i1 %286, i32 -8388608, i1 %286) #1, !dbg !93
  %297 = extractvalue { i32, i32 } %296, 0, !dbg !93
  %298 = extractvalue { i32, i32 } %296, 1, !dbg !93
  %299 = and i1 %26, %284, !dbg !94
  %300 = and i1 %27, %284, !dbg !94
  %301 = and i1 %28, %284, !dbg !94
  %302 = and i1 %89, %284, !dbg !94
  %303 = add i32 %10, 15, !dbg !95
  %304 = add i32 %10, 17, !dbg !95
  %305 = add i32 %10, 18, !dbg !95
  %306 = sext i32 %303 to i64, !dbg !96
  %307 = getelementptr float, ptr addrspace(1) %0, i64 %306, !dbg !96
  %308 = sext i32 %304 to i64, !dbg !96
  %309 = getelementptr float, ptr addrspace(1) %0, i64 %308, !dbg !96
  %310 = sext i32 %305 to i64, !dbg !96
  %311 = getelementptr float, ptr addrspace(1) %0, i64 %310, !dbg !96
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %307, i1 %299, i32 -8388608, i1 %299) #1, !dbg !97
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %292, i1 %300, i32 -8388608, i1 %300) #1, !dbg !97
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %309, i1 %301, i32 -8388608, i1 %301) #1, !dbg !97
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %311, i1 %302, i32 -8388608, i1 %302) #1, !dbg !97
  %316 = and i1 %38, %284, !dbg !98
  %317 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %292, i1 %316, i32 -8388608, i1 %316, i32 -8388608, i1 %316, i32 -8388608, i1 %316, i32 -8388608, i1 %316) #1, !dbg !99
  %318 = extractvalue { i32, i32, i32, i32 } %317, 0, !dbg !99
  %319 = extractvalue { i32, i32, i32, i32 } %317, 1, !dbg !99
  %320 = extractvalue { i32, i32, i32, i32 } %317, 2, !dbg !99
  %321 = extractvalue { i32, i32, i32, i32 } %317, 3, !dbg !99
  %322 = or i32 %283, %.decomposed, !dbg !100
  %323 = icmp ult i32 %322, 8, !dbg !100
  %324 = or i32 %283, %40, !dbg !100
  %325 = icmp ult i32 %324, 8, !dbg !100
  %326 = or i32 %283, %17, !dbg !100
  %327 = icmp ult i32 %326, 8, !dbg !100
  %328 = or i32 %283, %102, !dbg !100
  %329 = icmp ult i32 %328, 8, !dbg !100
  %330 = add i32 %10, 19, !dbg !101
  %331 = add i32 %10, 20, !dbg !101
  %332 = sext i32 %330 to i64, !dbg !102
  %333 = getelementptr float, ptr addrspace(1) %0, i64 %332, !dbg !102
  %334 = sext i32 %331 to i64, !dbg !102
  %335 = getelementptr float, ptr addrspace(1) %0, i64 %334, !dbg !102
  %336 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %309, i1 %323, i32 -8388608, i1 %323) #1, !dbg !103
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %311, i1 %325, i32 -8388608, i1 %325) #1, !dbg !103
  %338 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %333, i1 %327, i32 -8388608, i1 %327) #1, !dbg !103
  %339 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %335, i1 %329, i32 -8388608, i1 %329) #1, !dbg !103
  %340 = or i32 %283, %49, !dbg !104
  %341 = icmp ult i32 %340, 8, !dbg !104
  %342 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %311, i1 %323, i32 -8388608, i1 %323, i32 -8388608, i1 %323) #1, !dbg !105
  %343 = extractvalue { i32, i32 } %342, 0, !dbg !105
  %344 = extractvalue { i32, i32 } %342, 1, !dbg !105
  %345 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %335, i1 %341, i32 -8388608, i1 %341, i32 -8388608, i1 %341) #1, !dbg !105
  %346 = extractvalue { i32, i32 } %345, 0, !dbg !105
  %347 = extractvalue { i32, i32 } %345, 1, !dbg !105
  %348 = insertelement <4 x i32> poison, i32 %80, i64 0, !dbg !36
  %349 = insertelement <4 x i32> %348, i32 %81, i64 1, !dbg !36
  %350 = insertelement <4 x i32> %349, i32 %83, i64 2, !dbg !36
  %351 = insertelement <4 x i32> %350, i32 %84, i64 3, !dbg !36
  %352 = bitcast <4 x i32> %351 to <4 x float>, !dbg !36
  %353 = insertelement <4 x i32> poison, i32 %91, i64 0, !dbg !38
  %354 = insertelement <4 x i32> %353, i32 %92, i64 1, !dbg !38
  %355 = insertelement <4 x i32> %354, i32 %93, i64 2, !dbg !38
  %356 = insertelement <4 x i32> %355, i32 %94, i64 3, !dbg !38
  %357 = bitcast <4 x i32> %356 to <4 x float>, !dbg !38
  %358 = fcmp ogt <4 x float> %357, %352, !dbg !106
  %359 = fcmp uno <4 x float> %357, zeroinitializer, !dbg !110
  %360 = or <4 x i1> %358, %359, !dbg !111
  %.v = select <4 x i1> %360, <4 x i32> %356, <4 x i32> %351, !dbg !112
  %361 = bitcast <4 x i32> %.v to <4 x float>, !dbg !112
  %362 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !40
  %363 = insertelement <4 x i32> %362, i32 %98, i64 1, !dbg !40
  %364 = insertelement <4 x i32> %363, i32 %99, i64 2, !dbg !40
  %365 = insertelement <4 x i32> %364, i32 %100, i64 3, !dbg !40
  %366 = bitcast <4 x i32> %365 to <4 x float>, !dbg !40
  %367 = fcmp olt <4 x float> %361, %366, !dbg !113
  %368 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !42
  %369 = insertelement <4 x i32> %368, i32 %109, i64 1, !dbg !42
  %370 = insertelement <4 x i32> %369, i32 %110, i64 2, !dbg !42
  %371 = insertelement <4 x i32> %370, i32 %111, i64 3, !dbg !42
  %372 = bitcast <4 x i32> %371 to <4 x float>, !dbg !42
  %373 = fcmp uno <4 x float> %366, zeroinitializer, !dbg !115
  %374 = or <4 x i1> %373, %367, !dbg !116
  %.v1 = select <4 x i1> %374, <4 x i32> %365, <4 x i32> %.v, !dbg !117
  %375 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !117
  %376 = fcmp olt <4 x float> %375, %372, !dbg !118
  %377 = fcmp uno <4 x float> %372, zeroinitializer, !dbg !120
  %378 = or <4 x i1> %377, %376, !dbg !121
  %.v2 = select <4 x i1> %378, <4 x i32> %371, <4 x i32> %.v1, !dbg !122
  %379 = bitcast <4 x i32> %.v2 to <4 x float>, !dbg !122
  %380 = zext <4 x i1> %358 to <4 x i8>, !dbg !123
  %381 = select <4 x i1> %367, <4 x i8> splat (i8 2), <4 x i8> %380, !dbg !124
  %382 = insertelement <4 x i32> poison, i32 %114, i64 0, !dbg !44
  %383 = insertelement <4 x i32> %382, i32 %115, i64 1, !dbg !44
  %384 = insertelement <4 x i32> %383, i32 %117, i64 2, !dbg !44
  %385 = insertelement <4 x i32> %384, i32 %118, i64 3, !dbg !44
  %386 = bitcast <4 x i32> %385 to <4 x float>, !dbg !44
  %387 = fcmp uno <4 x float> %386, zeroinitializer, !dbg !125
  %388 = fcmp olt <4 x float> %379, %386, !dbg !127
  %389 = or <4 x i1> %388, %387, !dbg !128
  %.v3 = select <4 x i1> %389, <4 x i32> %385, <4 x i32> %.v2, !dbg !129
  %390 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !129
  %391 = insertelement <4 x i32> poison, i32 %123, i64 0, !dbg !47
  %392 = insertelement <4 x i32> %391, i32 %124, i64 1, !dbg !47
  %393 = insertelement <4 x i32> %392, i32 %126, i64 2, !dbg !47
  %394 = insertelement <4 x i32> %393, i32 %127, i64 3, !dbg !47
  %395 = bitcast <4 x i32> %394 to <4 x float>, !dbg !47
  %396 = fcmp olt <4 x float> %390, %395, !dbg !130
  %397 = fcmp uno <4 x float> %395, zeroinitializer, !dbg !132
  %398 = or <4 x i1> %397, %396, !dbg !133
  %.v4 = select <4 x i1> %398, <4 x i32> %394, <4 x i32> %.v3, !dbg !134
  %399 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !134
  %400 = insertelement <4 x i32> poison, i32 %132, i64 0, !dbg !49
  %401 = insertelement <4 x i32> %400, i32 %133, i64 1, !dbg !49
  %402 = insertelement <4 x i32> %401, i32 %134, i64 2, !dbg !49
  %403 = insertelement <4 x i32> %402, i32 %135, i64 3, !dbg !49
  %404 = bitcast <4 x i32> %403 to <4 x float>, !dbg !49
  %405 = fcmp olt <4 x float> %399, %404, !dbg !135
  %406 = fcmp uno <4 x float> %404, zeroinitializer, !dbg !137
  %407 = or <4 x i1> %406, %405, !dbg !138
  %.v5 = select <4 x i1> %407, <4 x i32> %403, <4 x i32> %.v4, !dbg !139
  %408 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !139
  %409 = insertelement <4 x i32> poison, i32 %138, i64 0, !dbg !51
  %410 = insertelement <4 x i32> %409, i32 %139, i64 1, !dbg !51
  %411 = insertelement <4 x i32> %410, i32 %140, i64 2, !dbg !51
  %412 = insertelement <4 x i32> %411, i32 %141, i64 3, !dbg !51
  %413 = bitcast <4 x i32> %412 to <4 x float>, !dbg !51
  %414 = fcmp olt <4 x float> %408, %413, !dbg !140
  %415 = fcmp uno <4 x float> %413, zeroinitializer, !dbg !142
  %416 = or <4 x i1> %415, %414, !dbg !143
  %.v6 = select <4 x i1> %416, <4 x i32> %412, <4 x i32> %.v5, !dbg !144
  %417 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !144
  %418 = insertelement <4 x i32> poison, i32 %146, i64 0, !dbg !53
  %419 = insertelement <4 x i32> %418, i32 %147, i64 1, !dbg !53
  %420 = insertelement <4 x i32> %419, i32 %148, i64 2, !dbg !53
  %421 = insertelement <4 x i32> %420, i32 %149, i64 3, !dbg !53
  %422 = bitcast <4 x i32> %421 to <4 x float>, !dbg !53
  %423 = fcmp olt <4 x float> %417, %422, !dbg !145
  %424 = fcmp uno <4 x float> %422, zeroinitializer, !dbg !147
  %425 = or <4 x i1> %424, %423, !dbg !148
  %.v7 = select <4 x i1> %425, <4 x i32> %421, <4 x i32> %.v6, !dbg !149
  %426 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !149
  %427 = insertelement <4 x i32> poison, i32 %152, i64 0, !dbg !55
  %428 = insertelement <4 x i32> %427, i32 %153, i64 1, !dbg !55
  %429 = insertelement <4 x i32> %428, i32 %155, i64 2, !dbg !55
  %430 = insertelement <4 x i32> %429, i32 %156, i64 3, !dbg !55
  %431 = bitcast <4 x i32> %430 to <4 x float>, !dbg !55
  %432 = fcmp olt <4 x float> %426, %431, !dbg !150
  %433 = fcmp uno <4 x float> %431, zeroinitializer, !dbg !152
  %434 = or <4 x i1> %433, %432, !dbg !153
  %.v8 = select <4 x i1> %434, <4 x i32> %430, <4 x i32> %.v7, !dbg !154
  %435 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !154
  %436 = insertelement <4 x i32> poison, i32 %167, i64 0, !dbg !59
  %437 = insertelement <4 x i32> %436, i32 %168, i64 1, !dbg !59
  %438 = insertelement <4 x i32> %437, i32 %170, i64 2, !dbg !59
  %439 = insertelement <4 x i32> %438, i32 %171, i64 3, !dbg !59
  %440 = bitcast <4 x i32> %439 to <4 x float>, !dbg !59
  %441 = fcmp olt <4 x float> %435, %440, !dbg !155
  %442 = fcmp uno <4 x float> %440, zeroinitializer, !dbg !157
  %443 = or <4 x i1> %442, %441, !dbg !158
  %.v9 = select <4 x i1> %443, <4 x i32> %439, <4 x i32> %.v8, !dbg !159
  %444 = bitcast <4 x i32> %.v9 to <4 x float>, !dbg !159
  %445 = insertelement <4 x i32> poison, i32 %186, i64 0, !dbg !63
  %446 = insertelement <4 x i32> %445, i32 %187, i64 1, !dbg !63
  %447 = insertelement <4 x i32> %446, i32 %188, i64 2, !dbg !63
  %448 = insertelement <4 x i32> %447, i32 %189, i64 3, !dbg !63
  %449 = bitcast <4 x i32> %448 to <4 x float>, !dbg !63
  %450 = fcmp olt <4 x float> %444, %449, !dbg !160
  %451 = fcmp uno <4 x float> %449, zeroinitializer, !dbg !162
  %452 = or <4 x i1> %451, %450, !dbg !163
  %.v10 = select <4 x i1> %452, <4 x i32> %448, <4 x i32> %.v9, !dbg !164
  %453 = bitcast <4 x i32> %.v10 to <4 x float>, !dbg !164
  %454 = insertelement <4 x i32> poison, i32 %195, i64 0, !dbg !66
  %455 = insertelement <4 x i32> %454, i32 %196, i64 1, !dbg !66
  %456 = insertelement <4 x i32> %455, i32 %197, i64 2, !dbg !66
  %457 = insertelement <4 x i32> %456, i32 %198, i64 3, !dbg !66
  %458 = bitcast <4 x i32> %457 to <4 x float>, !dbg !66
  %459 = fcmp olt <4 x float> %453, %458, !dbg !165
  %460 = fcmp uno <4 x float> %458, zeroinitializer, !dbg !167
  %461 = or <4 x i1> %460, %459, !dbg !168
  %.v11 = select <4 x i1> %461, <4 x i32> %457, <4 x i32> %.v10, !dbg !169
  %462 = bitcast <4 x i32> %.v11 to <4 x float>, !dbg !169
  %463 = insertelement <4 x i32> poison, i32 %207, i64 0, !dbg !70
  %464 = insertelement <4 x i32> %463, i32 %208, i64 1, !dbg !70
  %465 = insertelement <4 x i32> %464, i32 %209, i64 2, !dbg !70
  %466 = insertelement <4 x i32> %465, i32 %210, i64 3, !dbg !70
  %467 = bitcast <4 x i32> %466 to <4 x float>, !dbg !70
  %468 = fcmp olt <4 x float> %462, %467, !dbg !170
  %469 = insertelement <4 x i32> poison, i32 %213, i64 0, !dbg !72
  %470 = insertelement <4 x i32> %469, i32 %214, i64 1, !dbg !72
  %471 = insertelement <4 x i32> %470, i32 %216, i64 2, !dbg !72
  %472 = insertelement <4 x i32> %471, i32 %217, i64 3, !dbg !72
  %473 = bitcast <4 x i32> %472 to <4 x float>, !dbg !72
  %474 = fcmp uno <4 x float> %467, zeroinitializer, !dbg !172
  %475 = or <4 x i1> %474, %468, !dbg !173
  %.v12 = select <4 x i1> %475, <4 x i32> %466, <4 x i32> %.v11, !dbg !174
  %476 = bitcast <4 x i32> %.v12 to <4 x float>, !dbg !174
  %477 = fcmp olt <4 x float> %476, %473, !dbg !175
  %478 = fcmp uno <4 x float> %473, zeroinitializer, !dbg !177
  %479 = or <4 x i1> %478, %477, !dbg !178
  %.v13 = select <4 x i1> %479, <4 x i32> %472, <4 x i32> %.v12, !dbg !179
  %480 = bitcast <4 x i32> %.v13 to <4 x float>, !dbg !179
  %481 = select <4 x i1> %376, <4 x i8> splat (i8 3), <4 x i8> %381, !dbg !180
  %482 = select <4 x i1> %388, <4 x i8> splat (i8 4), <4 x i8> %481, !dbg !181
  %483 = select <4 x i1> %396, <4 x i8> splat (i8 5), <4 x i8> %482, !dbg !182
  %484 = select <4 x i1> %405, <4 x i8> splat (i8 6), <4 x i8> %483, !dbg !183
  %485 = select <4 x i1> %414, <4 x i8> splat (i8 7), <4 x i8> %484, !dbg !184
  %486 = select <4 x i1> %423, <4 x i8> splat (i8 8), <4 x i8> %485, !dbg !185
  %487 = select <4 x i1> %432, <4 x i8> splat (i8 9), <4 x i8> %486, !dbg !186
  %488 = select <4 x i1> %441, <4 x i8> splat (i8 10), <4 x i8> %487, !dbg !187
  %489 = select <4 x i1> %450, <4 x i8> splat (i8 11), <4 x i8> %488, !dbg !188
  %490 = select <4 x i1> %459, <4 x i8> splat (i8 12), <4 x i8> %489, !dbg !189
  %491 = select <4 x i1> %468, <4 x i8> splat (i8 13), <4 x i8> %490, !dbg !190
  %492 = insertelement <4 x i32> poison, i32 %229, i64 0, !dbg !77
  %493 = insertelement <4 x i32> %492, i32 %230, i64 1, !dbg !77
  %494 = insertelement <4 x i32> %493, i32 %232, i64 2, !dbg !77
  %495 = insertelement <4 x i32> %494, i32 %233, i64 3, !dbg !77
  %496 = bitcast <4 x i32> %495 to <4 x float>, !dbg !77
  %497 = fcmp uno <4 x float> %496, zeroinitializer, !dbg !191
  %498 = fcmp olt <4 x float> %480, %496, !dbg !193
  %499 = or <4 x i1> %497, %498, !dbg !194
  %.v14 = select <4 x i1> %499, <4 x i32> %495, <4 x i32> %.v13, !dbg !195
  %500 = bitcast <4 x i32> %.v14 to <4 x float>, !dbg !195
  %501 = insertelement <4 x i32> poison, i32 %247, i64 0, !dbg !81
  %502 = insertelement <4 x i32> %501, i32 %248, i64 1, !dbg !81
  %503 = insertelement <4 x i32> %502, i32 %249, i64 2, !dbg !81
  %504 = insertelement <4 x i32> %503, i32 %250, i64 3, !dbg !81
  %505 = bitcast <4 x i32> %504 to <4 x float>, !dbg !81
  %506 = fcmp olt <4 x float> %500, %505, !dbg !196
  %507 = fcmp uno <4 x float> %505, zeroinitializer, !dbg !198
  %508 = or <4 x i1> %507, %506, !dbg !199
  %.v15 = select <4 x i1> %508, <4 x i32> %504, <4 x i32> %.v14, !dbg !200
  %509 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !200
  %510 = insertelement <4 x i32> poison, i32 %253, i64 0, !dbg !83
  %511 = insertelement <4 x i32> %510, i32 %254, i64 1, !dbg !83
  %512 = insertelement <4 x i32> %511, i32 %255, i64 2, !dbg !83
  %513 = insertelement <4 x i32> %512, i32 %256, i64 3, !dbg !83
  %514 = bitcast <4 x i32> %513 to <4 x float>, !dbg !83
  %515 = fcmp olt <4 x float> %509, %514, !dbg !201
  %516 = fcmp uno <4 x float> %514, zeroinitializer, !dbg !203
  %517 = or <4 x i1> %516, %515, !dbg !204
  %.v16 = select <4 x i1> %517, <4 x i32> %513, <4 x i32> %.v15, !dbg !205
  %518 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !205
  %519 = insertelement <4 x i32> poison, i32 %271, i64 0, !dbg !87
  %520 = insertelement <4 x i32> %519, i32 %272, i64 1, !dbg !87
  %521 = insertelement <4 x i32> %520, i32 %273, i64 2, !dbg !87
  %522 = insertelement <4 x i32> %521, i32 %274, i64 3, !dbg !87
  %523 = bitcast <4 x i32> %522 to <4 x float>, !dbg !87
  %524 = fcmp olt <4 x float> %518, %523, !dbg !206
  %525 = fcmp uno <4 x float> %523, zeroinitializer, !dbg !208
  %526 = or <4 x i1> %525, %524, !dbg !209
  %.v17 = select <4 x i1> %526, <4 x i32> %522, <4 x i32> %.v16, !dbg !210
  %527 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !210
  %528 = insertelement <4 x i32> poison, i32 %278, i64 0, !dbg !89
  %529 = insertelement <4 x i32> %528, i32 %279, i64 1, !dbg !89
  %530 = insertelement <4 x i32> %529, i32 %281, i64 2, !dbg !89
  %531 = insertelement <4 x i32> %530, i32 %282, i64 3, !dbg !89
  %532 = bitcast <4 x i32> %531 to <4 x float>, !dbg !89
  %533 = fcmp olt <4 x float> %527, %532, !dbg !211
  %534 = fcmp uno <4 x float> %532, zeroinitializer, !dbg !213
  %535 = or <4 x i1> %534, %533, !dbg !214
  %.v18 = select <4 x i1> %535, <4 x i32> %531, <4 x i32> %.v17, !dbg !215
  %536 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !215
  %537 = insertelement <4 x i32> poison, i32 %294, i64 0, !dbg !93
  %538 = insertelement <4 x i32> %537, i32 %295, i64 1, !dbg !93
  %539 = insertelement <4 x i32> %538, i32 %297, i64 2, !dbg !93
  %540 = insertelement <4 x i32> %539, i32 %298, i64 3, !dbg !93
  %541 = bitcast <4 x i32> %540 to <4 x float>, !dbg !93
  %542 = fcmp olt <4 x float> %536, %541, !dbg !216
  %543 = fcmp uno <4 x float> %541, zeroinitializer, !dbg !218
  %544 = or <4 x i1> %543, %542, !dbg !219
  %.v19 = select <4 x i1> %544, <4 x i32> %540, <4 x i32> %.v18, !dbg !220
  %545 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !220
  %546 = insertelement <4 x i32> poison, i32 %312, i64 0, !dbg !97
  %547 = insertelement <4 x i32> %546, i32 %313, i64 1, !dbg !97
  %548 = insertelement <4 x i32> %547, i32 %314, i64 2, !dbg !97
  %549 = insertelement <4 x i32> %548, i32 %315, i64 3, !dbg !97
  %550 = bitcast <4 x i32> %549 to <4 x float>, !dbg !97
  %551 = fcmp olt <4 x float> %545, %550, !dbg !221
  %552 = fcmp uno <4 x float> %550, zeroinitializer, !dbg !223
  %553 = or <4 x i1> %552, %551, !dbg !224
  %.v20 = select <4 x i1> %553, <4 x i32> %549, <4 x i32> %.v19, !dbg !225
  %554 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !225
  %555 = insertelement <4 x i32> poison, i32 %318, i64 0, !dbg !99
  %556 = insertelement <4 x i32> %555, i32 %319, i64 1, !dbg !99
  %557 = insertelement <4 x i32> %556, i32 %320, i64 2, !dbg !99
  %558 = insertelement <4 x i32> %557, i32 %321, i64 3, !dbg !99
  %559 = bitcast <4 x i32> %558 to <4 x float>, !dbg !99
  %560 = fcmp olt <4 x float> %554, %559, !dbg !226
  %561 = fcmp uno <4 x float> %559, zeroinitializer, !dbg !228
  %562 = or <4 x i1> %561, %560, !dbg !229
  %.v21 = select <4 x i1> %562, <4 x i32> %558, <4 x i32> %.v20, !dbg !230
  %563 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !230
  %564 = insertelement <4 x i32> poison, i32 %336, i64 0, !dbg !103
  %565 = insertelement <4 x i32> %564, i32 %337, i64 1, !dbg !103
  %566 = insertelement <4 x i32> %565, i32 %338, i64 2, !dbg !103
  %567 = insertelement <4 x i32> %566, i32 %339, i64 3, !dbg !103
  %568 = bitcast <4 x i32> %567 to <4 x float>, !dbg !103
  %569 = fcmp olt <4 x float> %563, %568, !dbg !231
  %570 = fcmp uno <4 x float> %568, zeroinitializer, !dbg !233
  %571 = or <4 x i1> %570, %569, !dbg !234
  %.v22 = select <4 x i1> %571, <4 x i32> %567, <4 x i32> %.v21, !dbg !235
  %572 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !235
  %573 = insertelement <4 x i32> poison, i32 %343, i64 0, !dbg !105
  %574 = insertelement <4 x i32> %573, i32 %344, i64 1, !dbg !105
  %575 = insertelement <4 x i32> %574, i32 %346, i64 2, !dbg !105
  %576 = insertelement <4 x i32> %575, i32 %347, i64 3, !dbg !105
  %577 = bitcast <4 x i32> %576 to <4 x float>, !dbg !105
  %578 = fcmp olt <4 x float> %572, %577, !dbg !236
  %579 = fcmp uno <4 x float> %577, zeroinitializer, !dbg !238
  %580 = or <4 x i1> %579, %578, !dbg !239
  %581 = extractelement <4 x i1> %580, i64 0, !dbg !239
  %582 = or <4 x i1> %579, %578, !dbg !239
  %583 = extractelement <4 x i1> %582, i64 1, !dbg !239
  %584 = or <4 x i1> %579, %578, !dbg !239
  %585 = extractelement <4 x i1> %584, i64 2, !dbg !239
  %586 = or <4 x i1> %579, %578, !dbg !239
  %587 = extractelement <4 x i1> %586, i64 3, !dbg !239
  %588 = select <4 x i1> %477, <4 x i8> splat (i8 14), <4 x i8> %491, !dbg !240
  %589 = select <4 x i1> %498, <4 x i8> splat (i8 15), <4 x i8> %588, !dbg !241
  %590 = select <4 x i1> %506, <4 x i8> splat (i8 16), <4 x i8> %589, !dbg !242
  %591 = select <4 x i1> %515, <4 x i8> splat (i8 17), <4 x i8> %590, !dbg !243
  %592 = select <4 x i1> %524, <4 x i8> splat (i8 18), <4 x i8> %591, !dbg !244
  %593 = select <4 x i1> %533, <4 x i8> splat (i8 19), <4 x i8> %592, !dbg !245
  %594 = select <4 x i1> %542, <4 x i8> splat (i8 20), <4 x i8> %593, !dbg !246
  %595 = select <4 x i1> %551, <4 x i8> splat (i8 21), <4 x i8> %594, !dbg !247
  %596 = select <4 x i1> %560, <4 x i8> splat (i8 22), <4 x i8> %595, !dbg !248
  %597 = select <4 x i1> %569, <4 x i8> splat (i8 23), <4 x i8> %596, !dbg !249
  %598 = select <4 x i1> %578, <4 x i8> splat (i8 24), <4 x i8> %597, !dbg !250
  %599 = getelementptr float, ptr addrspace(1) %1, i64 %192, !dbg !251
  %600 = extractelement <4 x i32> %.v22, i64 0, !dbg !252
  %601 = select i1 %581, i32 %343, i32 %600, !dbg !253
  %602 = extractelement <4 x i32> %.v22, i64 1, !dbg !252
  %603 = select i1 %583, i32 %344, i32 %602, !dbg !253
  %604 = extractelement <4 x i32> %.v22, i64 2, !dbg !252
  %605 = select i1 %585, i32 %346, i32 %604, !dbg !253
  %606 = extractelement <4 x i32> %.v22, i64 3, !dbg !252
  %607 = select i1 %587, i32 %347, i32 %606, !dbg !253
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %601, i32 %603, i32 %605, i32 %607, ptr addrspace(1) %599, i1 true) #1, !dbg !252
  %608 = getelementptr i8, ptr addrspace(1) %2, i64 %192, !dbg !254
  %609 = bitcast <4 x i8> %598 to i32, !dbg !255
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %609, ptr addrspace(1) %608, i1 true) #1, !dbg !255
  ret void, !dbg !256
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6e4zijkoy2vsesj6niqsq5vxegjk23nbcjo45vkqkywlw4dfomr.py", directory: "inductor_cache/6e")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_40, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_40, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_40", linkageName: "triton_poi_fused_max_pool2d_with_indices_40", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 34, column: 19, scope: !7)
!17 = !DILocation(line: 38, column: 39, scope: !7)
!18 = !DILocation(line: 38, column: 31, scope: !7)
!19 = !DILocation(line: 40, column: 21, scope: !7)
!20 = !DILocation(line: 44, column: 39, scope: !7)
!21 = !DILocation(line: 44, column: 31, scope: !7)
!22 = !DILocation(line: 47, column: 21, scope: !7)
!23 = !DILocation(line: 56, column: 20, scope: !7)
!24 = !DILocation(line: 58, column: 39, scope: !7)
!25 = !DILocation(line: 58, column: 31, scope: !7)
!26 = !DILocation(line: 63, column: 20, scope: !7)
!27 = !DILocation(line: 72, column: 39, scope: !7)
!28 = !DILocation(line: 72, column: 31, scope: !7)
!29 = !DILocation(line: 75, column: 38, scope: !7)
!30 = !DILocation(line: 75, column: 31, scope: !7)
!31 = !DILocation(line: 81, column: 38, scope: !7)
!32 = !DILocation(line: 81, column: 31, scope: !7)
!33 = !DILocation(line: 127, column: 21, scope: !7)
!34 = !DILocation(line: 29, column: 19, scope: !7)
!35 = !DILocation(line: 37, column: 19, scope: !7)
!36 = !DILocation(line: 38, column: 44, scope: !7)
!37 = !DILocation(line: 43, column: 19, scope: !7)
!38 = !DILocation(line: 44, column: 44, scope: !7)
!39 = !DILocation(line: 50, column: 19, scope: !7)
!40 = !DILocation(line: 51, column: 44, scope: !7)
!41 = !DILocation(line: 57, column: 19, scope: !7)
!42 = !DILocation(line: 58, column: 44, scope: !7)
!43 = !DILocation(line: 64, column: 19, scope: !7)
!44 = !DILocation(line: 65, column: 44, scope: !7)
!45 = !DILocation(line: 68, column: 21, scope: !7)
!46 = !DILocation(line: 71, column: 20, scope: !7)
!47 = !DILocation(line: 72, column: 44, scope: !7)
!48 = !DILocation(line: 74, column: 20, scope: !7)
!49 = !DILocation(line: 75, column: 43, scope: !7)
!50 = !DILocation(line: 77, column: 20, scope: !7)
!51 = !DILocation(line: 78, column: 43, scope: !7)
!52 = !DILocation(line: 80, column: 20, scope: !7)
!53 = !DILocation(line: 81, column: 43, scope: !7)
!54 = !DILocation(line: 83, column: 20, scope: !7)
!55 = !DILocation(line: 84, column: 43, scope: !7)
!56 = !DILocation(line: 90, column: 20, scope: !7)
!57 = !DILocation(line: 91, column: 38, scope: !7)
!58 = !DILocation(line: 91, column: 31, scope: !7)
!59 = !DILocation(line: 91, column: 43, scope: !7)
!60 = !DILocation(line: 93, column: 20, scope: !7)
!61 = !DILocation(line: 94, column: 38, scope: !7)
!62 = !DILocation(line: 94, column: 31, scope: !7)
!63 = !DILocation(line: 94, column: 43, scope: !7)
!64 = !DILocation(line: 96, column: 20, scope: !7)
!65 = !DILocation(line: 97, column: 31, scope: !7)
!66 = !DILocation(line: 97, column: 36, scope: !7)
!67 = !DILocation(line: 99, column: 20, scope: !7)
!68 = !DILocation(line: 100, column: 35, scope: !7)
!69 = !DILocation(line: 100, column: 31, scope: !7)
!70 = !DILocation(line: 100, column: 40, scope: !7)
!71 = !DILocation(line: 102, column: 20, scope: !7)
!72 = !DILocation(line: 103, column: 40, scope: !7)
!73 = !DILocation(line: 108, column: 20, scope: !7)
!74 = !DILocation(line: 109, column: 20, scope: !7)
!75 = !DILocation(line: 110, column: 35, scope: !7)
!76 = !DILocation(line: 110, column: 31, scope: !7)
!77 = !DILocation(line: 110, column: 40, scope: !7)
!78 = !DILocation(line: 112, column: 20, scope: !7)
!79 = !DILocation(line: 113, column: 35, scope: !7)
!80 = !DILocation(line: 113, column: 31, scope: !7)
!81 = !DILocation(line: 113, column: 40, scope: !7)
!82 = !DILocation(line: 115, column: 20, scope: !7)
!83 = !DILocation(line: 116, column: 40, scope: !7)
!84 = !DILocation(line: 118, column: 20, scope: !7)
!85 = !DILocation(line: 119, column: 35, scope: !7)
!86 = !DILocation(line: 119, column: 31, scope: !7)
!87 = !DILocation(line: 119, column: 40, scope: !7)
!88 = !DILocation(line: 121, column: 20, scope: !7)
!89 = !DILocation(line: 122, column: 41, scope: !7)
!90 = !DILocation(line: 128, column: 22, scope: !7)
!91 = !DILocation(line: 129, column: 37, scope: !7)
!92 = !DILocation(line: 129, column: 32, scope: !7)
!93 = !DILocation(line: 129, column: 42, scope: !7)
!94 = !DILocation(line: 131, column: 22, scope: !7)
!95 = !DILocation(line: 132, column: 37, scope: !7)
!96 = !DILocation(line: 132, column: 32, scope: !7)
!97 = !DILocation(line: 132, column: 42, scope: !7)
!98 = !DILocation(line: 134, column: 22, scope: !7)
!99 = !DILocation(line: 135, column: 42, scope: !7)
!100 = !DILocation(line: 137, column: 22, scope: !7)
!101 = !DILocation(line: 138, column: 37, scope: !7)
!102 = !DILocation(line: 138, column: 32, scope: !7)
!103 = !DILocation(line: 138, column: 42, scope: !7)
!104 = !DILocation(line: 140, column: 22, scope: !7)
!105 = !DILocation(line: 141, column: 42, scope: !7)
!106 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !109)
!107 = distinct !DILexicalBlockFile(scope: !7, file: !108, discriminator: 0)
!108 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!109 = !DILocation(line: 45, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !109)
!111 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !109)
!112 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !109)
!113 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !114)
!114 = !DILocation(line: 52, column: 42, scope: !7)
!115 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !114)
!116 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !114)
!117 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !114)
!118 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !119)
!119 = !DILocation(line: 59, column: 42, scope: !7)
!120 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !119)
!121 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !119)
!122 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !119)
!123 = !DILocation(line: 146, column: 38, scope: !7)
!124 = !DILocation(line: 149, column: 38, scope: !7)
!125 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !126)
!126 = !DILocation(line: 66, column: 42, scope: !7)
!127 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !126)
!128 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !126)
!129 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !126)
!130 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !131)
!131 = !DILocation(line: 73, column: 42, scope: !7)
!132 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !131)
!133 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !131)
!134 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !131)
!135 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !136)
!136 = !DILocation(line: 76, column: 42, scope: !7)
!137 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !136)
!138 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !136)
!139 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !136)
!140 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !141)
!141 = !DILocation(line: 79, column: 42, scope: !7)
!142 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !141)
!143 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !141)
!144 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !141)
!145 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !146)
!146 = !DILocation(line: 82, column: 42, scope: !7)
!147 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !146)
!148 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !146)
!149 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !146)
!150 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !151)
!151 = !DILocation(line: 85, column: 42, scope: !7)
!152 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !151)
!153 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !151)
!154 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !151)
!155 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !156)
!156 = !DILocation(line: 92, column: 42, scope: !7)
!157 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !156)
!158 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !156)
!159 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !156)
!160 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !161)
!161 = !DILocation(line: 95, column: 42, scope: !7)
!162 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !161)
!163 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !161)
!164 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !161)
!165 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !166)
!166 = !DILocation(line: 98, column: 42, scope: !7)
!167 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !166)
!168 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !166)
!169 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !166)
!170 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !171)
!171 = !DILocation(line: 101, column: 42, scope: !7)
!172 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !171)
!173 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !171)
!174 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !171)
!175 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !176)
!176 = !DILocation(line: 104, column: 42, scope: !7)
!177 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !176)
!178 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !176)
!179 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !176)
!180 = !DILocation(line: 152, column: 38, scope: !7)
!181 = !DILocation(line: 155, column: 38, scope: !7)
!182 = !DILocation(line: 158, column: 38, scope: !7)
!183 = !DILocation(line: 161, column: 38, scope: !7)
!184 = !DILocation(line: 164, column: 38, scope: !7)
!185 = !DILocation(line: 167, column: 38, scope: !7)
!186 = !DILocation(line: 170, column: 38, scope: !7)
!187 = !DILocation(line: 173, column: 38, scope: !7)
!188 = !DILocation(line: 176, column: 38, scope: !7)
!189 = !DILocation(line: 179, column: 38, scope: !7)
!190 = !DILocation(line: 182, column: 38, scope: !7)
!191 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !192)
!192 = !DILocation(line: 111, column: 42, scope: !7)
!193 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !192)
!194 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !192)
!195 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !192)
!196 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !197)
!197 = !DILocation(line: 114, column: 42, scope: !7)
!198 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !197)
!199 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !197)
!200 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !197)
!201 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !202)
!202 = !DILocation(line: 117, column: 42, scope: !7)
!203 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !202)
!204 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !202)
!205 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !202)
!206 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !207)
!207 = !DILocation(line: 120, column: 42, scope: !7)
!208 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !207)
!209 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !207)
!210 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !207)
!211 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !212)
!212 = !DILocation(line: 123, column: 42, scope: !7)
!213 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !212)
!214 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !212)
!215 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !212)
!216 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !217)
!217 = !DILocation(line: 130, column: 44, scope: !7)
!218 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !217)
!219 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !217)
!220 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !217)
!221 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !222)
!222 = !DILocation(line: 133, column: 44, scope: !7)
!223 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !222)
!224 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !222)
!225 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !222)
!226 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !227)
!227 = !DILocation(line: 136, column: 44, scope: !7)
!228 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !227)
!229 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !227)
!230 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !227)
!231 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !232)
!232 = !DILocation(line: 139, column: 44, scope: !7)
!233 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !232)
!234 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !232)
!235 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !232)
!236 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !237)
!237 = !DILocation(line: 142, column: 44, scope: !7)
!238 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !237)
!239 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !237)
!240 = !DILocation(line: 185, column: 38, scope: !7)
!241 = !DILocation(line: 188, column: 38, scope: !7)
!242 = !DILocation(line: 191, column: 38, scope: !7)
!243 = !DILocation(line: 194, column: 38, scope: !7)
!244 = !DILocation(line: 197, column: 38, scope: !7)
!245 = !DILocation(line: 200, column: 38, scope: !7)
!246 = !DILocation(line: 203, column: 38, scope: !7)
!247 = !DILocation(line: 206, column: 38, scope: !7)
!248 = !DILocation(line: 209, column: 38, scope: !7)
!249 = !DILocation(line: 212, column: 38, scope: !7)
!250 = !DILocation(line: 215, column: 38, scope: !7)
!251 = !DILocation(line: 216, column: 25, scope: !7)
!252 = !DILocation(line: 216, column: 38, scope: !7)
!253 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !237)
!254 = !DILocation(line: 217, column: 25, scope: !7)
!255 = !DILocation(line: 217, column: 38, scope: !7)
!256 = !DILocation(line: 217, column: 4, scope: !7)
