#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [1, 8], order = [0, 1]}>
#loc = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":19:0)
#loc1 = loc(unknown)
#loc30 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":39:24)
#loc37 = loc(callsite(#loc1 at #loc30))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_abs_mean_sub_30(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<32x128xf32, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<1024> : tensor<32x1xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<64> : tensor<32x1xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<64> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<512> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<128> : tensor<32x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<8192> : tensor<32x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<32768> : tensor<32x128xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<64> : tensor<32x128xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<512> : tensor<32x128xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc4)
    %4 = tt.splat %1 : i32 -> tensor<32x1xi32, #blocked> loc(#loc5)
    %5 = arith.addi %4, %3 : tensor<32x1xi32, #blocked> loc(#loc5)
    %6 = arith.cmpi slt, %5, %cst_0 : tensor<32x1xi32, #blocked> loc(#loc6)
    %7 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc7)
    %9 = arith.remsi %5, %cst_1 : tensor<32x1xi32, #blocked> loc(#loc8)
    %10 = arith.divsi %5, %cst_1 : tensor<32x1xi32, #blocked> loc(#loc9)
    %11 = arith.remsi %8, %cst_2 : tensor<1x128xi32, #blocked> loc(#loc10)
    %12 = arith.muli %11, %cst_3 : tensor<1x128xi32, #blocked> loc(#loc11)
    %13 = arith.muli %9, %cst_4 : tensor<32x1xi32, #blocked> loc(#loc12)
    %14 = tt.broadcast %8 : tensor<1x128xi32, #blocked> -> tensor<32x128xi32, #blocked> loc(#loc13)
    %15 = tt.broadcast %13 : tensor<32x1xi32, #blocked> -> tensor<32x128xi32, #blocked> loc(#loc13)
    %16 = arith.addi %14, %15 : tensor<32x128xi32, #blocked> loc(#loc13)
    %17 = arith.muli %10, %cst_5 : tensor<32x1xi32, #blocked> loc(#loc14)
    %18 = tt.broadcast %17 : tensor<32x1xi32, #blocked> -> tensor<32x128xi32, #blocked> loc(#loc15)
    %19 = arith.addi %16, %18 : tensor<32x128xi32, #blocked> loc(#loc15)
    %20 = arith.divsi %19, %cst_6 : tensor<32x128xi32, #blocked> loc(#loc16)
    %21 = arith.muli %20, %cst_6 : tensor<32x128xi32, #blocked> loc(#loc17)
    %22 = tt.broadcast %12 : tensor<1x128xi32, #blocked> -> tensor<32x128xi32, #blocked> loc(#loc18)
    %23 = arith.addi %22, %21 : tensor<32x128xi32, #blocked> loc(#loc18)
    %24 = arith.divsi %19, %cst_7 : tensor<32x128xi32, #blocked> loc(#loc19)
    %25 = arith.remsi %24, %cst_8 : tensor<32x128xi32, #blocked> loc(#loc20)
    %26 = arith.addi %23, %25 : tensor<32x128xi32, #blocked> loc(#loc21)
    %27 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x128x!tt.ptr<f32>, #blocked> loc(#loc22)
    %28 = tt.addptr %27, %26 : tensor<32x128x!tt.ptr<f32>, #blocked>, tensor<32x128xi32, #blocked> loc(#loc22)
    %29 = tt.broadcast %6 : tensor<32x1xi1, #blocked> -> tensor<32x128xi1, #blocked> loc(#loc23)
    %30 = tt.load %28, %29, %cst evictionPolicy = evict_last : tensor<32x128x!tt.ptr<f32>, #blocked> loc(#loc23)
    %31 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x128x!tt.ptr<f32>, #blocked> loc(#loc24)
    %32 = tt.addptr %31, %26 : tensor<32x128x!tt.ptr<f32>, #blocked>, tensor<32x128xi32, #blocked> loc(#loc24)
    %33 = tt.load %32, %29, %cst evictionPolicy = evict_last : tensor<32x128x!tt.ptr<f32>, #blocked> loc(#loc25)
    %34 = arith.subf %30, %33 : tensor<32x128xf32, #blocked> loc(#loc26)
    %35 = math.absf %34 : tensor<32x128xf32, #blocked> loc(#loc27)
    %36 = arith.select %29, %35, %cst : tensor<32x128xi1, #blocked>, tensor<32x128xf32, #blocked> loc(#loc28)
    %37 = "tt.reduce"(%36) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc30)), %arg6: f32 loc(callsite(#loc1 at #loc30))):
      %41 = arith.addf %arg5, %arg6 : f32 loc(#loc39)
      tt.reduce.return %41 : f32 loc(#loc36)
    }) : (tensor<32x128xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc36)
    %38 = tt.expand_dims %37 {axis = 1 : i32} : tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xf32, #blocked> loc(#loc32)
    %39 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>, #blocked> loc(#loc33)
    %40 = tt.addptr %39, %5 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc33)
    tt.store %40, %38, %6 : tensor<32x1x!tt.ptr<f32>, #blocked> loc(#loc34)
    tt.return loc(#loc35)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":23:28)
#loc3 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":23:33)
#loc4 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":24:44)
#loc5 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":24:23)
#loc6 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":25:21)
#loc7 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":26:34)
#loc8 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":30:19)
#loc9 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":31:19)
#loc10 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":33:41)
#loc11 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":33:36)
#loc12 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":33:65)
#loc13 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":33:61)
#loc14 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":33:75)
#loc15 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":33:70)
#loc16 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":33:82)
#loc17 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":33:55)
#loc18 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":33:48)
#loc19 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":33:121)
#loc20 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":33:127)
#loc21 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":33:93)
#loc22 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":33:30)
#loc23 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":33:135)
#loc24 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":34:30)
#loc25 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":34:135)
#loc26 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":35:18)
#loc27 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":36:23)
#loc28 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":38:33)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc32 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":39:27)
#loc33 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":40:25)
#loc34 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":40:36)
#loc35 = loc("inductor_cache/lz/clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py":40:4)
#loc36 = loc(callsite(#loc29 at #loc30))
#loc38 = loc(callsite(#loc31 at #loc29))
#loc39 = loc(callsite(#loc38 at #loc30))
