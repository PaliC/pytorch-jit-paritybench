; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_mean_sub_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = icmp slt i32 %10, 1024, !dbg !14
  %12 = lshr i32 %8, 5, !dbg !15
  %13 = and i32 %12, 7, !dbg !15
  %14 = or disjoint i32 %13, 8, !dbg !15
  %15 = or disjoint i32 %13, 16, !dbg !15
  %16 = or disjoint i32 %13, 24, !dbg !15
  %17 = or disjoint i32 %13, 32, !dbg !15
  %18 = or disjoint i32 %13, 40, !dbg !15
  %19 = or disjoint i32 %13, 48, !dbg !15
  %20 = or disjoint i32 %13, 56, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %21 = sdiv i32 %.frozen, 64, !dbg !16
  %22 = mul i32 %21, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %22, !dbg !17
  %23 = shl nuw nsw i32 %13, 9, !dbg !18
  %24 = shl nuw nsw i32 %14, 9, !dbg !18
  %25 = shl nuw nsw i32 %15, 9, !dbg !18
  %26 = shl nuw nsw i32 %16, 9, !dbg !18
  %27 = shl nuw nsw i32 %17, 9, !dbg !18
  %28 = shl nuw nsw i32 %18, 9, !dbg !18
  %29 = shl nuw nsw i32 %19, 9, !dbg !18
  %30 = shl nuw nsw i32 %20, 9, !dbg !18
  %31 = shl nsw i32 %.decomposed, 7, !dbg !19
  %32 = or disjoint i32 %31, %13, !dbg !20
  %33 = or disjoint i32 %31, %14, !dbg !20
  %34 = or disjoint i32 %31, %15, !dbg !20
  %35 = or disjoint i32 %31, %16, !dbg !20
  %36 = or disjoint i32 %31, %17, !dbg !20
  %37 = or disjoint i32 %31, %18, !dbg !20
  %38 = or disjoint i32 %31, %19, !dbg !20
  %39 = or disjoint i32 %31, %20, !dbg !20
  %40 = or disjoint i32 %32, 64, !dbg !20
  %41 = or disjoint i32 %32, 72, !dbg !20
  %42 = or disjoint i32 %32, 80, !dbg !20
  %43 = or disjoint i32 %32, 88, !dbg !20
  %44 = or disjoint i32 %32, 96, !dbg !20
  %45 = or disjoint i32 %32, 104, !dbg !20
  %46 = or disjoint i32 %32, 112, !dbg !20
  %47 = or disjoint i32 %32, 120, !dbg !20
  %48 = shl i32 %21, 13, !dbg !21
  %49 = add i32 %32, %48, !dbg !22
  %50 = add i32 %33, %48, !dbg !22
  %51 = add i32 %34, %48, !dbg !22
  %52 = add i32 %35, %48, !dbg !22
  %53 = add i32 %36, %48, !dbg !22
  %54 = add i32 %37, %48, !dbg !22
  %55 = add i32 %38, %48, !dbg !22
  %56 = add i32 %39, %48, !dbg !22
  %57 = add i32 %40, %48, !dbg !22
  %58 = add i32 %41, %48, !dbg !22
  %59 = add i32 %42, %48, !dbg !22
  %60 = add i32 %43, %48, !dbg !22
  %61 = add i32 %44, %48, !dbg !22
  %62 = add i32 %45, %48, !dbg !22
  %63 = add i32 %46, %48, !dbg !22
  %64 = add i32 %47, %48, !dbg !22
  %65 = sdiv i32 %49, 32768, !dbg !23
  %66 = sdiv i32 %50, 32768, !dbg !23
  %67 = sdiv i32 %51, 32768, !dbg !23
  %68 = sdiv i32 %52, 32768, !dbg !23
  %69 = sdiv i32 %53, 32768, !dbg !23
  %70 = sdiv i32 %54, 32768, !dbg !23
  %71 = sdiv i32 %55, 32768, !dbg !23
  %72 = sdiv i32 %56, 32768, !dbg !23
  %73 = sdiv i32 %57, 32768, !dbg !23
  %74 = sdiv i32 %58, 32768, !dbg !23
  %75 = sdiv i32 %59, 32768, !dbg !23
  %76 = sdiv i32 %60, 32768, !dbg !23
  %77 = sdiv i32 %61, 32768, !dbg !23
  %78 = sdiv i32 %62, 32768, !dbg !23
  %79 = sdiv i32 %63, 32768, !dbg !23
  %80 = sdiv i32 %64, 32768, !dbg !23
  %81 = shl nsw i32 %65, 15, !dbg !24
  %82 = shl nsw i32 %66, 15, !dbg !24
  %83 = shl nsw i32 %67, 15, !dbg !24
  %84 = shl nsw i32 %68, 15, !dbg !24
  %85 = shl nsw i32 %69, 15, !dbg !24
  %86 = shl nsw i32 %70, 15, !dbg !24
  %87 = shl nsw i32 %71, 15, !dbg !24
  %88 = shl nsw i32 %72, 15, !dbg !24
  %89 = shl nsw i32 %73, 15, !dbg !24
  %90 = shl nsw i32 %74, 15, !dbg !24
  %91 = shl nsw i32 %75, 15, !dbg !24
  %92 = shl nsw i32 %76, 15, !dbg !24
  %93 = shl nsw i32 %77, 15, !dbg !24
  %94 = shl nsw i32 %78, 15, !dbg !24
  %95 = shl nsw i32 %79, 15, !dbg !24
  %96 = shl nsw i32 %80, 15, !dbg !24
  %97 = or disjoint i32 %81, %23, !dbg !25
  %98 = or disjoint i32 %82, %24, !dbg !25
  %99 = or disjoint i32 %83, %25, !dbg !25
  %100 = or disjoint i32 %84, %26, !dbg !25
  %101 = or disjoint i32 %85, %27, !dbg !25
  %102 = or disjoint i32 %86, %28, !dbg !25
  %103 = or disjoint i32 %87, %29, !dbg !25
  %104 = or disjoint i32 %88, %30, !dbg !25
  %105 = or disjoint i32 %89, %23, !dbg !25
  %106 = sdiv i32 %49, 64, !dbg !26
  %107 = sdiv i32 %50, 64, !dbg !26
  %108 = sdiv i32 %51, 64, !dbg !26
  %109 = sdiv i32 %52, 64, !dbg !26
  %110 = sdiv i32 %53, 64, !dbg !26
  %111 = sdiv i32 %54, 64, !dbg !26
  %112 = sdiv i32 %55, 64, !dbg !26
  %113 = sdiv i32 %56, 64, !dbg !26
  %114 = sdiv i32 %57, 64, !dbg !26
  %115 = sdiv i32 %58, 64, !dbg !26
  %116 = sdiv i32 %59, 64, !dbg !26
  %117 = sdiv i32 %60, 64, !dbg !26
  %118 = sdiv i32 %61, 64, !dbg !26
  %119 = sdiv i32 %62, 64, !dbg !26
  %120 = sdiv i32 %63, 64, !dbg !26
  %121 = sdiv i32 %64, 64, !dbg !26
  %122 = srem i32 %106, 512, !dbg !27
  %123 = srem i32 %107, 512, !dbg !27
  %124 = srem i32 %108, 512, !dbg !27
  %125 = srem i32 %109, 512, !dbg !27
  %126 = srem i32 %110, 512, !dbg !27
  %127 = srem i32 %111, 512, !dbg !27
  %128 = srem i32 %112, 512, !dbg !27
  %129 = srem i32 %113, 512, !dbg !27
  %130 = srem i32 %114, 512, !dbg !27
  %131 = srem i32 %115, 512, !dbg !27
  %132 = srem i32 %116, 512, !dbg !27
  %133 = srem i32 %117, 512, !dbg !27
  %134 = srem i32 %118, 512, !dbg !27
  %135 = srem i32 %119, 512, !dbg !27
  %136 = srem i32 %120, 512, !dbg !27
  %137 = srem i32 %121, 512, !dbg !27
  %138 = add i32 %97, %122, !dbg !28
  %139 = add nsw i32 %98, %123, !dbg !28
  %140 = add nsw i32 %99, %124, !dbg !28
  %141 = add nsw i32 %100, %125, !dbg !28
  %142 = add nsw i32 %101, %126, !dbg !28
  %143 = add nsw i32 %102, %127, !dbg !28
  %144 = add nsw i32 %103, %128, !dbg !28
  %145 = add nsw i32 %104, %129, !dbg !28
  %146 = add i32 %105, %130, !dbg !28
  %147 = or disjoint i32 %23, %90, !dbg !25
  %148 = or disjoint i32 %147, 4096, !dbg !25
  %149 = add nsw i32 %148, %131, !dbg !28
  %150 = or disjoint i32 %23, %91, !dbg !25
  %151 = or disjoint i32 %150, 8192, !dbg !25
  %152 = add nsw i32 %151, %132, !dbg !28
  %153 = or disjoint i32 %23, %92, !dbg !25
  %154 = or disjoint i32 %153, 12288, !dbg !25
  %155 = add nsw i32 %154, %133, !dbg !28
  %156 = or disjoint i32 %23, %93, !dbg !25
  %157 = or disjoint i32 %156, 16384, !dbg !25
  %158 = add nsw i32 %157, %134, !dbg !28
  %159 = or disjoint i32 %23, %94, !dbg !25
  %160 = or disjoint i32 %159, 20480, !dbg !25
  %161 = add nsw i32 %160, %135, !dbg !28
  %162 = or disjoint i32 %23, %95, !dbg !25
  %163 = or disjoint i32 %162, 24576, !dbg !25
  %164 = add nsw i32 %163, %136, !dbg !28
  %165 = or disjoint i32 %23, %96, !dbg !25
  %166 = or disjoint i32 %165, 28672, !dbg !25
  %167 = add nsw i32 %166, %137, !dbg !28
  %168 = sext i32 %138 to i64, !dbg !29
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %168, !dbg !29
  %170 = sext i32 %139 to i64, !dbg !29
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !29
  %172 = sext i32 %140 to i64, !dbg !29
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !29
  %174 = sext i32 %141 to i64, !dbg !29
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !29
  %176 = sext i32 %142 to i64, !dbg !29
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !29
  %178 = sext i32 %143 to i64, !dbg !29
  %179 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !29
  %180 = sext i32 %144 to i64, !dbg !29
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !29
  %182 = sext i32 %145 to i64, !dbg !29
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !29
  %184 = sext i32 %146 to i64, !dbg !29
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !29
  %186 = sext i32 %149 to i64, !dbg !29
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !29
  %188 = sext i32 %152 to i64, !dbg !29
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !29
  %190 = sext i32 %155 to i64, !dbg !29
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !29
  %192 = sext i32 %158 to i64, !dbg !29
  %193 = getelementptr float, ptr addrspace(1) %0, i64 %192, !dbg !29
  %194 = sext i32 %161 to i64, !dbg !29
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !29
  %196 = sext i32 %164 to i64, !dbg !29
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !29
  %198 = sext i32 %167 to i64, !dbg !29
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !29
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %169, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %201 = bitcast i32 %200 to float, !dbg !30
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %203 = bitcast i32 %202 to float, !dbg !30
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %205 = bitcast i32 %204 to float, !dbg !30
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %207 = bitcast i32 %206 to float, !dbg !30
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %209 = bitcast i32 %208 to float, !dbg !30
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %179, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %211 = bitcast i32 %210 to float, !dbg !30
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %213 = bitcast i32 %212 to float, !dbg !30
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %215 = bitcast i32 %214 to float, !dbg !30
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %217 = bitcast i32 %216 to float, !dbg !30
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %219 = bitcast i32 %218 to float, !dbg !30
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %189, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %221 = bitcast i32 %220 to float, !dbg !30
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %191, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %223 = bitcast i32 %222 to float, !dbg !30
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %193, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %225 = bitcast i32 %224 to float, !dbg !30
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %227 = bitcast i32 %226 to float, !dbg !30
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %197, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %229 = bitcast i32 %228 to float, !dbg !30
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %199, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %231 = bitcast i32 %230 to float, !dbg !30
  %232 = getelementptr float, ptr addrspace(1) %1, i64 %168, !dbg !31
  %233 = getelementptr float, ptr addrspace(1) %1, i64 %170, !dbg !31
  %234 = getelementptr float, ptr addrspace(1) %1, i64 %172, !dbg !31
  %235 = getelementptr float, ptr addrspace(1) %1, i64 %174, !dbg !31
  %236 = getelementptr float, ptr addrspace(1) %1, i64 %176, !dbg !31
  %237 = getelementptr float, ptr addrspace(1) %1, i64 %178, !dbg !31
  %238 = getelementptr float, ptr addrspace(1) %1, i64 %180, !dbg !31
  %239 = getelementptr float, ptr addrspace(1) %1, i64 %182, !dbg !31
  %240 = getelementptr float, ptr addrspace(1) %1, i64 %184, !dbg !31
  %241 = getelementptr float, ptr addrspace(1) %1, i64 %186, !dbg !31
  %242 = getelementptr float, ptr addrspace(1) %1, i64 %188, !dbg !31
  %243 = getelementptr float, ptr addrspace(1) %1, i64 %190, !dbg !31
  %244 = getelementptr float, ptr addrspace(1) %1, i64 %192, !dbg !31
  %245 = getelementptr float, ptr addrspace(1) %1, i64 %194, !dbg !31
  %246 = getelementptr float, ptr addrspace(1) %1, i64 %196, !dbg !31
  %247 = getelementptr float, ptr addrspace(1) %1, i64 %198, !dbg !31
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %249 = bitcast i32 %248 to float, !dbg !32
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %251 = bitcast i32 %250 to float, !dbg !32
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %253 = bitcast i32 %252 to float, !dbg !32
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %255 = bitcast i32 %254 to float, !dbg !32
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %236, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %257 = bitcast i32 %256 to float, !dbg !32
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %259 = bitcast i32 %258 to float, !dbg !32
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %261 = bitcast i32 %260 to float, !dbg !32
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %263 = bitcast i32 %262 to float, !dbg !32
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %240, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %265 = bitcast i32 %264 to float, !dbg !32
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %241, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %267 = bitcast i32 %266 to float, !dbg !32
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %242, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %269 = bitcast i32 %268 to float, !dbg !32
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %243, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %271 = bitcast i32 %270 to float, !dbg !32
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %244, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %273 = bitcast i32 %272 to float, !dbg !32
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %275 = bitcast i32 %274 to float, !dbg !32
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %246, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %277 = bitcast i32 %276 to float, !dbg !32
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %247, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %279 = bitcast i32 %278 to float, !dbg !32
  %280 = fsub float %201, %249, !dbg !33
  %281 = fsub float %203, %251, !dbg !33
  %282 = fsub float %205, %253, !dbg !33
  %283 = fsub float %207, %255, !dbg !33
  %284 = fsub float %209, %257, !dbg !33
  %285 = fsub float %211, %259, !dbg !33
  %286 = fsub float %213, %261, !dbg !33
  %287 = fsub float %215, %263, !dbg !33
  %288 = fsub float %217, %265, !dbg !33
  %289 = fsub float %219, %267, !dbg !33
  %290 = fsub float %221, %269, !dbg !33
  %291 = fsub float %223, %271, !dbg !33
  %292 = fsub float %225, %273, !dbg !33
  %293 = fsub float %227, %275, !dbg !33
  %294 = fsub float %229, %277, !dbg !33
  %295 = fsub float %231, %279, !dbg !33
  %296 = tail call float @llvm.fabs.f32(float %280), !dbg !34
  %297 = tail call float @llvm.fabs.f32(float %281), !dbg !34
  %298 = tail call float @llvm.fabs.f32(float %282), !dbg !34
  %299 = tail call float @llvm.fabs.f32(float %283), !dbg !34
  %300 = tail call float @llvm.fabs.f32(float %284), !dbg !34
  %301 = tail call float @llvm.fabs.f32(float %285), !dbg !34
  %302 = tail call float @llvm.fabs.f32(float %286), !dbg !34
  %303 = tail call float @llvm.fabs.f32(float %287), !dbg !34
  %304 = tail call float @llvm.fabs.f32(float %288), !dbg !34
  %305 = tail call float @llvm.fabs.f32(float %289), !dbg !34
  %306 = tail call float @llvm.fabs.f32(float %290), !dbg !34
  %307 = tail call float @llvm.fabs.f32(float %291), !dbg !34
  %308 = tail call float @llvm.fabs.f32(float %292), !dbg !34
  %309 = tail call float @llvm.fabs.f32(float %293), !dbg !34
  %310 = tail call float @llvm.fabs.f32(float %294), !dbg !34
  %311 = tail call float @llvm.fabs.f32(float %295), !dbg !34
  %312 = fadd float %296, %297, !dbg !35
  %313 = fadd float %312, %298, !dbg !35
  %314 = fadd float %313, %299, !dbg !35
  %315 = fadd float %314, %300, !dbg !35
  %316 = fadd float %315, %301, !dbg !35
  %317 = fadd float %316, %302, !dbg !35
  %318 = fadd float %317, %303, !dbg !35
  %319 = fadd float %318, %304, !dbg !35
  %320 = fadd float %319, %305, !dbg !35
  %321 = fadd float %320, %306, !dbg !35
  %322 = fadd float %321, %307, !dbg !35
  %323 = fadd float %322, %308, !dbg !35
  %324 = fadd float %323, %309, !dbg !35
  %325 = fadd float %324, %310, !dbg !35
  %326 = fadd float %325, %311, !dbg !35
  %327 = shl nuw nsw i32 %9, 3, !dbg !40
  %328 = or disjoint i32 %327, %13, !dbg !40
  %329 = getelementptr float, ptr addrspace(3) @global_smem, i32 %328, !dbg !40
  %330 = bitcast float %326 to i32, !dbg !40
  %331 = select i1 %11, i32 %330, i32 0, !dbg !35
  %332 = insertelement <1 x i32> poison, i32 %331, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, <1 x i32> %332, i1 true) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %333 = icmp slt i32 %8, 256, !dbg !40
  %334 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !40
  %335 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %334, i1 %333) #3, !dbg !40
  %336 = bitcast i32 %335 to float, !dbg !40
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 4, i32 31), !dbg !40
  %338 = bitcast i32 %337 to float, !dbg !40
  %339 = fadd float %336, %338, !dbg !35
  %340 = bitcast float %339 to i32, !dbg !40
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 2, i32 31), !dbg !40
  %342 = bitcast i32 %341 to float, !dbg !40
  %343 = fadd float %339, %342, !dbg !35
  %344 = bitcast float %343 to i32, !dbg !40
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 1, i32 31), !dbg !40
  %346 = bitcast i32 %345 to float, !dbg !40
  %347 = fadd float %343, %346, !dbg !35
  %348 = and i32 %8, 7, !dbg !40
  %349 = icmp eq i32 %348, 0, !dbg !40
  %350 = and i1 %333, %349, !dbg !40
  %351 = bitcast float %347 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %351, i1 %350) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %352 = getelementptr float, ptr addrspace(3) @global_smem, i32 %327, !dbg !40
  %353 = load i32, ptr addrspace(3) %352, align 16, !dbg !40
  %354 = sext i32 %10 to i64, !dbg !41
  %355 = getelementptr float, ptr addrspace(1) %2, i64 %354, !dbg !41
  %356 = icmp eq i32 %13, 0, !dbg !42
  %357 = and i1 %356, %11, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %353, ptr addrspace(1) %355, i1 %357) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clzdsdjn7or24h6k7ufgmxhbprnmzpv7zelvtuxir7uqaxq2eumv.py", directory: "inductor_cache/lz")
!4 = !{ptr @triton_per_fused_abs_mean_sub_30, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_mean_sub_30, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_mean_sub_30", linkageName: "triton_per_fused_abs_mean_sub_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 36, scope: !7)
!19 = !DILocation(line: 33, column: 65, scope: !7)
!20 = !DILocation(line: 33, column: 61, scope: !7)
!21 = !DILocation(line: 33, column: 75, scope: !7)
!22 = !DILocation(line: 33, column: 70, scope: !7)
!23 = !DILocation(line: 33, column: 82, scope: !7)
!24 = !DILocation(line: 33, column: 55, scope: !7)
!25 = !DILocation(line: 33, column: 48, scope: !7)
!26 = !DILocation(line: 33, column: 121, scope: !7)
!27 = !DILocation(line: 33, column: 127, scope: !7)
!28 = !DILocation(line: 33, column: 93, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 135, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 135, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 36, column: 23, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !39)
!36 = distinct !DILexicalBlockFile(scope: !38, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!38 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!39 = !DILocation(line: 39, column: 24, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !38, inlinedAt: !39)
!41 = !DILocation(line: 40, column: 25, scope: !7)
!42 = !DILocation(line: 40, column: 36, scope: !7)
!43 = !DILocation(line: 40, column: 4, scope: !7)
