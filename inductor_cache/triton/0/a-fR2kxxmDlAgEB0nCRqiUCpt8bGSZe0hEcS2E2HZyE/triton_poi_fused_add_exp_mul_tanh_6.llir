; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_exp_mul_tanh_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %9 = shl i32 %8, 3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 2, !dbg !12
  %12 = and i32 %11, 3, !dbg !12
  %13 = and i32 %10, 16, !dbg !12
  %14 = lshr exact i32 %13, 2, !dbg !12
  %15 = or disjoint i32 %12, %14, !dbg !12
  %16 = and i32 %10, 3, !dbg !12
  %17 = and i32 %10, 7, !dbg !12
  %18 = or disjoint i32 %15, %9, !dbg !13
  %19 = or disjoint i32 %9, %17, !dbg !13
  %20 = icmp slt i32 %18, 8, !dbg !14
  %21 = icmp slt i32 %19, 8, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = shl i32 %22, 2, !dbg !16
  %24 = lshr i32 %10, 3, !dbg !17
  %.lobit2 = and i32 %24, 1, !dbg !17
  %25 = lshr exact i32 %13, 3, !dbg !17
  %26 = or disjoint i32 %.lobit2, %25, !dbg !17
  %27 = or disjoint i32 %23, %16, !dbg !18
  %28 = or disjoint i32 %26, %23, !dbg !18
  %29 = icmp slt i32 %27, 4, !dbg !19
  %30 = icmp slt i32 %28, 4, !dbg !19
  %.frozen = freeze i32 %19, !dbg !20
  %31 = sdiv i32 %.frozen, 2, !dbg !20
  %32 = mul i32 %31, 2, !dbg !21
  %.decomposed = sub i32 %.frozen, %32, !dbg !21
  %33 = shl i32 %18, 3, !dbg !22
  %34 = add i32 %27, %33, !dbg !23
  %35 = sext i32 %34 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !24
  %37 = and i1 %20, %29, !dbg !25
  %38 = and i1 %21, %30, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %37) #4, !dbg !26
  %40 = shl i32 %10, 3, !dbg !26
  %41 = and i32 %40, 24, !dbg !26
  %42 = or disjoint i32 %12, %41, !dbg !26
  %43 = or disjoint i32 %42, %14, !dbg !26
  %44 = and i32 %10, 31, !dbg !26
  %45 = lshr exact i32 %41, 1, !dbg !26
  %46 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %45, !dbg !26
  %47 = getelementptr inbounds float, ptr addrspace(3) %46, i32 %43, !dbg !26
  %48 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %48, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %49 = lshr i32 %44, 3, !dbg !26
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %49, !dbg !26
  %51 = getelementptr inbounds float, ptr addrspace(3) %50, i32 %44, !dbg !26
  %52 = load float, ptr addrspace(3) %51, align 4, !dbg !26
  %53 = shl i32 %28, 1, !dbg !27
  %54 = add i32 %53, %.decomposed, !dbg !28
  %55 = shl i32 %31, 3, !dbg !29
  %56 = add i32 %54, %55, !dbg !30
  %57 = sext i32 %56 to i64, !dbg !31
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !31
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %38) #4, !dbg !32
  %60 = bitcast i32 %59 to float, !dbg !32
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !33
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %38) #4, !dbg !34
  %63 = bitcast i32 %62 to float, !dbg !34
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %64, 0, !dbg !35
  %65 = tail call float @llvm.nvvm.fabs.ftz.f(float %60) #4, !dbg !35
  %66 = tail call float @llvm.nvvm.fabs.f(float %60) #4, !dbg !35
  %.01.i = select i1 %.not.i, float %66, float %65, !dbg !35
  %67 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !35
  br i1 %67, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !35

__internal_fmad.exit1.i:                          ; preds = %7
  %68 = fmul float %.01.i, 0x4007154760000000, !dbg !35
  %69 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %68) #4, !dbg !35
  %70 = fadd float %69, 1.000000e+00, !dbg !35
  %71 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %70) #5, !dbg !35, !srcloc !36
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not6.i = icmp eq i32 %72, 0, !dbg !35
  %73 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %71, float -2.000000e+00, float 1.000000e+00) #4, !dbg !35
  %74 = tail call float @llvm.nvvm.fma.rn.f(float %71, float -2.000000e+00, float 1.000000e+00) #4, !dbg !35
  %.03.i = select i1 %.not6.i, float %74, float %73, !dbg !35
  %75 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !35
  %s.0.i = select i1 %75, float 1.000000e+00, float %.03.i, !dbg !35
  %76 = bitcast float %s.0.i to i32, !dbg !35
  %77 = and i32 %59, -2147483648, !dbg !35
  %78 = or i32 %77, %76, !dbg !35
  %79 = bitcast i32 %78 to float, !dbg !35
  br label %__nv_tanhf.exit, !dbg !35

__internal_fmad.exit3.i:                          ; preds = %7
  %80 = fmul float %60, %60, !dbg !35
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not1.i = icmp eq i32 %81, 0, !dbg !35
  %82 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %80, float 0xBFAAC795C0000000) #4, !dbg !35
  %83 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %80, float 0xBFAAC795C0000000) #4, !dbg !35
  %.06.i = select i1 %.not1.i, float %83, float %82, !dbg !35
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not2.i = icmp eq i32 %84, 0, !dbg !35
  %85 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %80, float 0x3FC10B2820000000) #4, !dbg !35
  %86 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %80, float 0x3FC10B2820000000) #4, !dbg !35
  %.05.i = select i1 %.not2.i, float %86, float %85, !dbg !35
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not3.i = icmp eq i32 %87, 0, !dbg !35
  %88 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %80, float 0xBFD5553DA0000000) #4, !dbg !35
  %89 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %80, float 0xBFD5553DA0000000) #4, !dbg !35
  %.0.i = select i1 %.not3.i, float %89, float %88, !dbg !35
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not4.i = icmp eq i32 %90, 0, !dbg !35
  %91 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %80, float 0.000000e+00) #4, !dbg !35
  %92 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %80, float 0.000000e+00) #4, !dbg !35
  %.04.i = select i1 %.not4.i, float %92, float %91, !dbg !35
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not5.i = icmp eq i32 %93, 0, !dbg !35
  %94 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %60, float %60) #4, !dbg !35
  %95 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %60, float %60) #4, !dbg !35
  %.02.i = select i1 %.not5.i, float %95, float %94, !dbg !35
  br label %__nv_tanhf.exit, !dbg !35

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %79, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !35
  %96 = fmul float %s.1.i, 0x3FF7154760000000, !dbg !37
  %97 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %96) #4, !dbg !37
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i4 = icmp eq i32 %98, 0, !dbg !38
  %99 = tail call float @llvm.nvvm.fabs.ftz.f(float %63) #4, !dbg !38
  %100 = tail call float @llvm.nvvm.fabs.f(float %63) #4, !dbg !38
  %.01.i5 = select i1 %.not.i4, float %100, float %99, !dbg !38
  %101 = fcmp ult float %.01.i5, 0x3FE3333340000000, !dbg !38
  br i1 %101, label %__internal_fmad.exit3.i11, label %__internal_fmad.exit1.i6, !dbg !38

__internal_fmad.exit1.i6:                         ; preds = %__nv_tanhf.exit
  %102 = fmul float %.01.i5, 0x4007154760000000, !dbg !38
  %103 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %102) #4, !dbg !38
  %104 = fadd float %103, 1.000000e+00, !dbg !38
  %105 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %104) #5, !dbg !38, !srcloc !36
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not6.i7 = icmp eq i32 %106, 0, !dbg !38
  %107 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %105, float -2.000000e+00, float 1.000000e+00) #4, !dbg !38
  %108 = tail call float @llvm.nvvm.fma.rn.f(float %105, float -2.000000e+00, float 1.000000e+00) #4, !dbg !38
  %.03.i8 = select i1 %.not6.i7, float %108, float %107, !dbg !38
  %109 = fcmp oge float %.01.i5, 0x4022059680000000, !dbg !38
  %s.0.i9 = select i1 %109, float 1.000000e+00, float %.03.i8, !dbg !38
  %110 = bitcast float %s.0.i9 to i32, !dbg !38
  %111 = and i32 %62, -2147483648, !dbg !38
  %112 = or i32 %111, %110, !dbg !38
  %113 = bitcast i32 %112 to float, !dbg !38
  br label %__nv_tanhf.exit22, !dbg !38

__internal_fmad.exit3.i11:                        ; preds = %__nv_tanhf.exit
  %114 = fmul float %63, %63, !dbg !38
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not1.i12 = icmp eq i32 %115, 0, !dbg !38
  %116 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %114, float 0xBFAAC795C0000000) #4, !dbg !38
  %117 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %114, float 0xBFAAC795C0000000) #4, !dbg !38
  %.06.i13 = select i1 %.not1.i12, float %117, float %116, !dbg !38
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not2.i14 = icmp eq i32 %118, 0, !dbg !38
  %119 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i13, float %114, float 0x3FC10B2820000000) #4, !dbg !38
  %120 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i13, float %114, float 0x3FC10B2820000000) #4, !dbg !38
  %.05.i15 = select i1 %.not2.i14, float %120, float %119, !dbg !38
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not3.i16 = icmp eq i32 %121, 0, !dbg !38
  %122 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i15, float %114, float 0xBFD5553DA0000000) #4, !dbg !38
  %123 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i15, float %114, float 0xBFD5553DA0000000) #4, !dbg !38
  %.0.i17 = select i1 %.not3.i16, float %123, float %122, !dbg !38
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not4.i18 = icmp eq i32 %124, 0, !dbg !38
  %125 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i17, float %114, float 0.000000e+00) #4, !dbg !38
  %126 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i17, float %114, float 0.000000e+00) #4, !dbg !38
  %.04.i19 = select i1 %.not4.i18, float %126, float %125, !dbg !38
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not5.i20 = icmp eq i32 %127, 0, !dbg !38
  %128 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i19, float %63, float %63) #4, !dbg !38
  %129 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i19, float %63, float %63) #4, !dbg !38
  %.02.i21 = select i1 %.not5.i20, float %129, float %128, !dbg !38
  br label %__nv_tanhf.exit22, !dbg !38

__nv_tanhf.exit22:                                ; preds = %__internal_fmad.exit1.i6, %__internal_fmad.exit3.i11
  %s.1.i10 = phi float [ %113, %__internal_fmad.exit1.i6 ], [ %.02.i21, %__internal_fmad.exit3.i11 ], !dbg !38
  %130 = fmul float %52, %97, !dbg !39
  %131 = fadd float %130, %s.1.i10, !dbg !40
  %132 = shl i32 %18, 2, !dbg !41
  %133 = add i32 %27, %132, !dbg !42
  %134 = sext i32 %133 to i64, !dbg !43
  %135 = getelementptr float, ptr addrspace(1) %3, i64 %134, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %136 = shl i32 %10, 2, !dbg !44
  %137 = and i32 %136, 28, !dbg !44
  %138 = or disjoint i32 %137, %.lobit2, !dbg !44
  %139 = or disjoint i32 %138, %25, !dbg !44
  %140 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %137, !dbg !44
  %141 = getelementptr inbounds float, ptr addrspace(3) %140, i32 %139, !dbg !44
  %142 = bitcast float %130 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %143 = lshr i32 %44, 2, !dbg !44
  %144 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %143, !dbg !44
  %145 = getelementptr inbounds float, ptr addrspace(3) %144, i32 %44, !dbg !44
  %146 = load i32, ptr addrspace(3) %145, align 4, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %146, ptr addrspace(1) %135, i1 %37) #4, !dbg !44
  %147 = getelementptr float, ptr addrspace(1) %4, i64 %134, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %148 = bitcast float %131 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %148, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %149 = load i32, ptr addrspace(3) %145, align 4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %149, ptr addrspace(1) %147, i1 %37) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cctobgbjx5e6ruqla25wq7ayzvesjbuhw5uzxy5yk4bfjim75dgg.py", directory: "inductor_cache/ct")
!4 = !{ptr @triton_poi_fused_add_exp_mul_tanh_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_exp_mul_tanh_6, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_exp_mul_tanh_6", linkageName: "triton_poi_fused_add_exp_mul_tanh_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 50, scope: !7)
!26 = !DILocation(line: 32, column: 42, scope: !7)
!27 = !DILocation(line: 33, column: 37, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 44, scope: !7)
!30 = !DILocation(line: 33, column: 42, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 49, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 49, scope: !7)
!35 = !DILocation(line: 35, column: 26, scope: !7)
!36 = !{i32 21046}
!37 = !DILocation(line: 36, column: 23, scope: !7)
!38 = !DILocation(line: 38, column: 26, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 39, column: 18, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 30, scope: !7)
!43 = !DILocation(line: 40, column: 25, scope: !7)
!44 = !DILocation(line: 40, column: 43, scope: !7)
!45 = !DILocation(line: 41, column: 25, scope: !7)
!46 = !DILocation(line: 41, column: 43, scope: !7)
!47 = !DILocation(line: 41, column: 4, scope: !7)
