; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = icmp slt i32 %18, 256, !dbg !14
  %20 = sdiv i32 %18, 16, !dbg !15
  %21 = srem i32 %20, 4, !dbg !16
  %22 = sext i32 %18 to i64, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !17
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %19) #3, !dbg !18
  %25 = sext i32 %21 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %19) #3, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %19) #3, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %19) #3, !dbg !22
  %31 = bitcast i32 %30 to float, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %19) #3, !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %19) #3, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %19) #3, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %19) #3, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %19) #3, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !27
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %19) #3, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !29
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %19) #3, !dbg !30
  %44 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !31
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %19) #3, !dbg !32
  %46 = fadd float %31, 0x3EE4F8B580000000, !dbg !33
  %47 = fadd float %33, 0x3EE4F8B580000000, !dbg !33
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i = icmp eq i32 %48, 0, !dbg !34
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i = icmp eq i32 %49, 0, !dbg !34
  br i1 %.not.i, label %55, label %50, !dbg !34

50:                                               ; preds = %12
  br i1 %.not1.i, label %53, label %51, !dbg !34

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

55:                                               ; preds = %12
  br i1 %.not1.i, label %58, label %56, !dbg !34

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %51, %53, %56, %58
  %.0.i = phi float [ %52, %51 ], [ %54, %53 ], [ %57, %56 ], [ %59, %58 ], !dbg !34
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i1 = icmp eq i32 %60, 0, !dbg !34
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i4 = icmp eq i32 %61, 0, !dbg !34
  br i1 %.not.i1, label %67, label %62, !dbg !34

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %65, label %63, !dbg !34

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %70, label %68, !dbg !34

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

__nv_sqrtf.exit5:                                 ; preds = %63, %65, %68, %70
  %.0.i3 = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !34
  %72 = extractvalue { i32, i32 } %24, 1, !dbg !18
  %73 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !20
  %74 = insertelement <2 x i32> %73, i32 %28, i64 1, !dbg !20
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !20
  %76 = extractvalue { i32, i32 } %24, 0, !dbg !18
  %77 = extractvalue { i32, i32 } %45, 1, !dbg !32
  %78 = bitcast i32 %77 to float, !dbg !32
  %79 = extractvalue { i32, i32 } %45, 0, !dbg !32
  %80 = bitcast i32 %79 to float, !dbg !32
  %81 = extractvalue { i32, i32 } %43, 1, !dbg !30
  %82 = bitcast i32 %81 to float, !dbg !30
  %83 = extractvalue { i32, i32 } %43, 0, !dbg !30
  %84 = bitcast i32 %83 to float, !dbg !30
  %85 = extractvalue { i32, i32 } %41, 1, !dbg !28
  %86 = extractvalue { i32, i32 } %41, 0, !dbg !28
  %87 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !26
  %88 = insertelement <2 x i32> %87, i32 %39, i64 1, !dbg !26
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !26
  %90 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !24
  %91 = insertelement <2 x i32> %90, i32 %36, i64 1, !dbg !24
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !24
  %.frozen = freeze i32 %18, !dbg !35
  %93 = sdiv i32 %.frozen, 64, !dbg !35
  %94 = mul i32 %93, 64, !dbg !36
  %.decomposed = sub i32 %.frozen, %94, !dbg !36
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %97 = bitcast i32 %27 to float, !dbg !38
  %98 = fsub float %84, %97, !dbg !38
  %99 = bitcast i32 %28 to float, !dbg !38
  %100 = fsub float %82, %99, !dbg !38
  %101 = fmul float %98, %95, !dbg !39
  %102 = fmul float %100, %96, !dbg !39
  %103 = bitcast i32 %35 to float, !dbg !40
  %104 = fmul float %101, %103, !dbg !40
  %105 = bitcast i32 %36 to float, !dbg !40
  %106 = fmul float %102, %105, !dbg !40
  %107 = bitcast i32 %38 to float, !dbg !41
  %108 = fadd float %104, %107, !dbg !41
  %109 = bitcast i32 %39 to float, !dbg !41
  %110 = fadd float %106, %109, !dbg !41
  %111 = fadd float %108, %80, !dbg !42
  %112 = fadd float %110, %78, !dbg !42
  %113 = fcmp olt float %111, 0.000000e+00, !dbg !43
  %114 = fcmp olt float %112, 0.000000e+00, !dbg !43
  %115 = select i1 %113, float 0.000000e+00, float %111, !dbg !47
  %116 = select i1 %114, float 0.000000e+00, float %112, !dbg !47
  %117 = shl i32 %93, 7, !dbg !48
  %118 = add i32 %117, %.decomposed, !dbg !49
  %119 = sext i32 %118 to i64, !dbg !50
  %120 = getelementptr float, ptr addrspace(1) %8, i64 %119, !dbg !50
  %121 = getelementptr i1, ptr addrspace(1) %9, i64 %22, !dbg !51
  %122 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !18
  %123 = insertelement <2 x i32> %122, i32 %72, i64 1, !dbg !18
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !18
  %125 = fsub <2 x float> %124, %75, !dbg !52
  %126 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !28
  %127 = insertelement <2 x i32> %126, i32 %85, i64 1, !dbg !28
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !28
  %129 = insertelement <2 x float> poison, float %95, i64 0, !dbg !53
  %130 = insertelement <2 x float> %129, float %96, i64 1, !dbg !53
  %131 = fmul <2 x float> %125, %130, !dbg !53
  %132 = fmul <2 x float> %131, %92, !dbg !54
  %133 = fadd <2 x float> %132, %89, !dbg !55
  %134 = fadd <2 x float> %133, %128, !dbg !56
  %135 = fcmp olt <2 x float> %134, zeroinitializer, !dbg !57
  %136 = select <2 x i1> %135, <2 x float> zeroinitializer, <2 x float> %134, !dbg !59
  %137 = fcmp ole <2 x float> %136, zeroinitializer, !dbg !60
  %bc = bitcast <2 x float> %136 to <2 x i32>, !dbg !61
  %138 = extractelement <2 x i32> %bc, i64 0, !dbg !61
  %bc6 = bitcast <2 x float> %136 to <2 x i32>, !dbg !61
  %139 = extractelement <2 x i32> %bc6, i64 1, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %138, i32 %139, ptr addrspace(1) %120, i1 %19) #3, !dbg !61
  %140 = zext <2 x i1> %137 to <2 x i8>, !dbg !62
  %141 = bitcast <2 x i8> %140 to i16, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %141, ptr addrspace(1) %121, i1 %19) #3, !dbg !62
  %142 = getelementptr float, ptr addrspace(1) %10, i64 %119, !dbg !63
  %143 = bitcast float %115 to i32, !dbg !64
  %144 = bitcast float %116 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %143, i32 %144, ptr addrspace(1) %142, i1 %19) #3, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccuzze7fne6glppotqcyzxloyagkg6ap65poexwsuakjwig45qq5.py", directory: "inductor_cache/cu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_19", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 28, column: 30, scope: !7)
!18 = !DILocation(line: 28, column: 35, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 26, scope: !7)
!35 = !DILocation(line: 26, column: 19, scope: !7)
!36 = !DILocation(line: 27, column: 19, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 52, column: 20, scope: !7)
!39 = !DILocation(line: 53, column: 20, scope: !7)
!40 = !DILocation(line: 54, column: 20, scope: !7)
!41 = !DILocation(line: 55, column: 20, scope: !7)
!42 = !DILocation(line: 56, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 57, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 58, column: 34, scope: !7)
!49 = !DILocation(line: 58, column: 30, scope: !7)
!50 = !DILocation(line: 58, column: 25, scope: !7)
!51 = !DILocation(line: 59, column: 25, scope: !7)
!52 = !DILocation(line: 36, column: 18, scope: !7)
!53 = !DILocation(line: 44, column: 19, scope: !7)
!54 = !DILocation(line: 45, column: 20, scope: !7)
!55 = !DILocation(line: 46, column: 20, scope: !7)
!56 = !DILocation(line: 47, column: 20, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !58)
!58 = !DILocation(line: 49, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !58)
!60 = !DILocation(line: 51, column: 21, scope: !7)
!61 = !DILocation(line: 58, column: 46, scope: !7)
!62 = !DILocation(line: 59, column: 37, scope: !7)
!63 = !DILocation(line: 60, column: 25, scope: !7)
!64 = !DILocation(line: 60, column: 46, scope: !7)
!65 = !DILocation(line: 60, column: 4, scope: !7)
