; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 510, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %16 = icmp slt i32 %14, 1336704, !dbg !14
  %17 = sdiv i32 %14, 3481, !dbg !15
  %18 = sdiv i32 %15, 3481, !dbg !15
  %19 = srem i32 %17, 96, !dbg !16
  %20 = srem i32 %18, 96, !dbg !16
  %21 = sext i32 %14 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !17
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 %16) #4, !dbg !18
  %24 = sext i32 %19 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !19
  %26 = sext i32 %20 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %16) #4, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %16) #4, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %16) #4, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %16) #4, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %16) #4, !dbg !24
  %37 = bitcast i32 %36 to float, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %16) #4, !dbg !24
  %39 = bitcast i32 %38 to float, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %16) #4, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %16) #4, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !27
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %16) #4, !dbg !28
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %16) #4, !dbg !28
  %48 = fadd float %37, 0x3EB0C6F7A0000000, !dbg !29
  %49 = fadd float %39, 0x3EB0C6F7A0000000, !dbg !29
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i = icmp eq i32 %50, 0, !dbg !30
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i = icmp eq i32 %51, 0, !dbg !30
  br i1 %.not.i, label %57, label %52, !dbg !30

52:                                               ; preds = %8
  br i1 %.not1.i, label %55, label %53, !dbg !30

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

57:                                               ; preds = %8
  br i1 %.not1.i, label %60, label %58, !dbg !30

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %53, %55, %58, %60
  %.0.i = phi float [ %54, %53 ], [ %56, %55 ], [ %59, %58 ], [ %61, %60 ], !dbg !30
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i1 = icmp eq i32 %62, 0, !dbg !30
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i4 = icmp eq i32 %63, 0, !dbg !30
  br i1 %.not.i1, label %69, label %64, !dbg !30

64:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %67, label %65, !dbg !30

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #4, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #4, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

69:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %72, label %70, !dbg !30

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #4, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #4, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %65, %67, %70, %72
  %.0.i3 = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !30
  %74 = extractvalue { i32, i32 } %23, 1, !dbg !18
  %75 = bitcast i32 %74 to float, !dbg !18
  %76 = bitcast i32 %29 to float, !dbg !20
  %77 = fadd float %75, %76, !dbg !31
  %78 = bitcast i32 %33 to float, !dbg !22
  %79 = fsub float %77, %78, !dbg !32
  %80 = extractvalue { i32, i32 } %23, 0, !dbg !18
  %81 = bitcast i32 %80 to float, !dbg !18
  %82 = bitcast i32 %28 to float, !dbg !20
  %83 = fadd float %81, %82, !dbg !31
  %84 = bitcast i32 %32 to float, !dbg !22
  %85 = fsub float %83, %84, !dbg !32
  %86 = bitcast i32 %47 to float, !dbg !28
  %87 = bitcast i32 %46 to float, !dbg !28
  %88 = bitcast i32 %43 to float, !dbg !26
  %89 = bitcast i32 %42 to float, !dbg !26
  %90 = and i32 %11, 255, !dbg !12
  %91 = or disjoint i32 %90, 256, !dbg !12
  %92 = or disjoint i32 %10, %91, !dbg !13
  %.frozen = freeze i32 %92, !dbg !15
  %93 = sdiv i32 %.frozen, 3481, !dbg !15
  %94 = mul i32 %93, 3481, !dbg !33
  %.decomposed = sub i32 %.frozen, %94, !dbg !33
  %95 = or disjoint i32 %10, %90, !dbg !13
  %.frozen6 = freeze i32 %95, !dbg !15
  %96 = sdiv i32 %.frozen6, 3481, !dbg !15
  %97 = mul i32 %96, 3481, !dbg !33
  %.decomposed7 = sub i32 %.frozen6, %97, !dbg !33
  %98 = icmp slt i32 %92, 1336704, !dbg !14
  %99 = icmp slt i32 %95, 1336704, !dbg !14
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !34
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !34
  %102 = fmul float %85, %100, !dbg !35
  %103 = fmul float %79, %101, !dbg !35
  %104 = fmul float %102, %89, !dbg !36
  %105 = fmul float %103, %88, !dbg !36
  %106 = fadd float %104, %87, !dbg !37
  %107 = fadd float %105, %86, !dbg !37
  %108 = fcmp olt float %106, 0.000000e+00, !dbg !38
  %109 = fcmp olt float %107, 0.000000e+00, !dbg !38
  %110 = select i1 %108, float 0.000000e+00, float %106, !dbg !42
  %111 = select i1 %109, float 0.000000e+00, float %107, !dbg !42
  %112 = bitcast float %83 to i32, !dbg !43
  %113 = bitcast float %77 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %112, i32 %113, ptr addrspace(1) %22, i1 %16) #4, !dbg !43
  %114 = mul i32 %96, 3488, !dbg !44
  %115 = mul i32 %93, 3488, !dbg !44
  %116 = add i32 %114, %.decomposed7, !dbg !45
  %117 = add i32 %115, %.decomposed, !dbg !45
  %118 = sext i32 %116 to i64, !dbg !46
  %119 = getelementptr float, ptr addrspace(1) %6, i64 %118, !dbg !46
  %120 = sext i32 %117 to i64, !dbg !46
  %121 = getelementptr float, ptr addrspace(1) %6, i64 %120, !dbg !46
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !47
  %123 = bitcast float %110 to i32, !dbg !47
  %124 = bitcast float %111 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %122, i32 %123, i32 %124, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %90, !dbg !47
  %126 = load i32, ptr addrspace(3) %125, align 4, !dbg !47
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %91, !dbg !47
  %128 = load i32, ptr addrspace(3) %127, align 4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %126, ptr addrspace(1) %119, i1 %99) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %128, ptr addrspace(1) %121, i1 %98) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cryfb6lnphadz7frx6xunilnthatlvgkmgxfpe5263ohbdo3p4gk.py", directory: "inductor_cache/ry")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_0", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 29, scope: !7)
!17 = !DILocation(line: 28, column: 34, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 26, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 35, column: 18, scope: !7)
!33 = !DILocation(line: 26, column: 19, scope: !7)
!34 = !DILocation(line: 40, column: 19, scope: !7)
!35 = !DILocation(line: 43, column: 19, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 47, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 48, column: 39, scope: !7)
!44 = !DILocation(line: 49, column: 35, scope: !7)
!45 = !DILocation(line: 49, column: 30, scope: !7)
!46 = !DILocation(line: 49, column: 25, scope: !7)
!47 = !DILocation(line: 49, column: 47, scope: !7)
!48 = !DILocation(line: 49, column: 4, scope: !7)
