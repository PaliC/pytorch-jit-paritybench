; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_mul_sigmoid_39(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = srem i32 %9, 1536, !dbg !14
  %12 = srem i32 %10, 1536, !dbg !14
  %13 = sdiv i32 %9, 24576, !dbg !15
  %14 = sdiv i32 %10, 24576, !dbg !15
  %15 = sext i32 %9 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = sext i32 %10 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #1, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !17
  %24 = bitcast i32 %20 to float, !dbg !17
  %25 = bitcast i32 %21 to float, !dbg !17
  %26 = bitcast i32 %22 to float, !dbg !17
  %27 = bitcast i32 %23 to float, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !17
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !17
  %33 = bitcast i32 %29 to float, !dbg !17
  %34 = bitcast i32 %30 to float, !dbg !17
  %35 = bitcast i32 %31 to float, !dbg !17
  %36 = bitcast i32 %32 to float, !dbg !17
  %37 = mul nsw i32 %13, 1536, !dbg !18
  %38 = mul nsw i32 %14, 1536, !dbg !18
  %39 = add nsw i32 %37, %11, !dbg !19
  %40 = add nsw i32 %38, %12, !dbg !19
  %41 = sext i32 %39 to i64, !dbg !20
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !20
  %43 = sext i32 %40 to i64, !dbg !20
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !20
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !21
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !21
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !21
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !21
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !21
  %50 = bitcast i32 %46 to float, !dbg !21
  %51 = bitcast i32 %47 to float, !dbg !21
  %52 = bitcast i32 %48 to float, !dbg !21
  %53 = bitcast i32 %49 to float, !dbg !21
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !21
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !21
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !21
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !21
  %59 = bitcast i32 %55 to float, !dbg !21
  %60 = bitcast i32 %56 to float, !dbg !21
  %61 = bitcast i32 %57 to float, !dbg !21
  %62 = bitcast i32 %58 to float, !dbg !21
  %63 = fsub float 0.000000e+00, %24, !dbg !22
  %64 = fsub float 0.000000e+00, %25, !dbg !22
  %65 = fsub float 0.000000e+00, %26, !dbg !22
  %66 = fsub float 0.000000e+00, %27, !dbg !22
  %67 = fsub float 0.000000e+00, %33, !dbg !22
  %68 = fsub float 0.000000e+00, %34, !dbg !22
  %69 = fsub float 0.000000e+00, %35, !dbg !22
  %70 = fsub float 0.000000e+00, %36, !dbg !22
  %71 = fmul float %63, 0x3FF7154760000000, !dbg !26
  %72 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %71) #1, !dbg !26
  %73 = fmul float %64, 0x3FF7154760000000, !dbg !26
  %74 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %73) #1, !dbg !26
  %75 = fmul float %65, 0x3FF7154760000000, !dbg !26
  %76 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %75) #1, !dbg !26
  %77 = fmul float %66, 0x3FF7154760000000, !dbg !26
  %78 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %77) #1, !dbg !26
  %79 = fmul float %67, 0x3FF7154760000000, !dbg !26
  %80 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %79) #1, !dbg !26
  %81 = fmul float %68, 0x3FF7154760000000, !dbg !26
  %82 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %81) #1, !dbg !26
  %83 = fmul float %69, 0x3FF7154760000000, !dbg !26
  %84 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %83) #1, !dbg !26
  %85 = fmul float %70, 0x3FF7154760000000, !dbg !26
  %86 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %85) #1, !dbg !26
  %87 = fadd float %72, 1.000000e+00, !dbg !27
  %88 = fadd float %74, 1.000000e+00, !dbg !27
  %89 = fadd float %76, 1.000000e+00, !dbg !27
  %90 = fadd float %78, 1.000000e+00, !dbg !27
  %91 = fadd float %80, 1.000000e+00, !dbg !27
  %92 = fadd float %82, 1.000000e+00, !dbg !27
  %93 = fadd float %84, 1.000000e+00, !dbg !27
  %94 = fadd float %86, 1.000000e+00, !dbg !27
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %87) #1, !dbg !28
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %88) #1, !dbg !28
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %89) #1, !dbg !28
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %90) #1, !dbg !28
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %91) #1, !dbg !28
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %92) #1, !dbg !28
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %93) #1, !dbg !28
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %94) #1, !dbg !28
  %103 = fmul float %95, %24, !dbg !29
  %104 = fmul float %96, %25, !dbg !29
  %105 = fmul float %97, %26, !dbg !29
  %106 = fmul float %98, %27, !dbg !29
  %107 = fmul float %99, %33, !dbg !29
  %108 = fmul float %100, %34, !dbg !29
  %109 = fmul float %101, %35, !dbg !29
  %110 = fmul float %102, %36, !dbg !29
  %111 = fsub float 0.000000e+00, %50, !dbg !30
  %112 = fsub float 0.000000e+00, %51, !dbg !30
  %113 = fsub float 0.000000e+00, %52, !dbg !30
  %114 = fsub float 0.000000e+00, %53, !dbg !30
  %115 = fsub float 0.000000e+00, %59, !dbg !30
  %116 = fsub float 0.000000e+00, %60, !dbg !30
  %117 = fsub float 0.000000e+00, %61, !dbg !30
  %118 = fsub float 0.000000e+00, %62, !dbg !30
  %119 = fmul float %111, 0x3FF7154760000000, !dbg !32
  %120 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %119) #1, !dbg !32
  %121 = fmul float %112, 0x3FF7154760000000, !dbg !32
  %122 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %121) #1, !dbg !32
  %123 = fmul float %113, 0x3FF7154760000000, !dbg !32
  %124 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %123) #1, !dbg !32
  %125 = fmul float %114, 0x3FF7154760000000, !dbg !32
  %126 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %125) #1, !dbg !32
  %127 = fmul float %115, 0x3FF7154760000000, !dbg !32
  %128 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %127) #1, !dbg !32
  %129 = fmul float %116, 0x3FF7154760000000, !dbg !32
  %130 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %129) #1, !dbg !32
  %131 = fmul float %117, 0x3FF7154760000000, !dbg !32
  %132 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %131) #1, !dbg !32
  %133 = fmul float %118, 0x3FF7154760000000, !dbg !32
  %134 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %133) #1, !dbg !32
  %135 = fadd float %120, 1.000000e+00, !dbg !33
  %136 = fadd float %122, 1.000000e+00, !dbg !33
  %137 = fadd float %124, 1.000000e+00, !dbg !33
  %138 = fadd float %126, 1.000000e+00, !dbg !33
  %139 = fadd float %128, 1.000000e+00, !dbg !33
  %140 = fadd float %130, 1.000000e+00, !dbg !33
  %141 = fadd float %132, 1.000000e+00, !dbg !33
  %142 = fadd float %134, 1.000000e+00, !dbg !33
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %135) #1, !dbg !34
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %136) #1, !dbg !34
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %137) #1, !dbg !34
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %138) #1, !dbg !34
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %139) #1, !dbg !34
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %140) #1, !dbg !34
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %141) #1, !dbg !34
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %142) #1, !dbg !34
  %151 = fmul float %103, %143, !dbg !35
  %152 = fmul float %104, %144, !dbg !35
  %153 = fmul float %105, %145, !dbg !35
  %154 = fmul float %106, %146, !dbg !35
  %155 = fmul float %107, %147, !dbg !35
  %156 = fmul float %108, %148, !dbg !35
  %157 = fmul float %109, %149, !dbg !35
  %158 = fmul float %110, %150, !dbg !35
  %159 = bitcast float %151 to i32, !dbg !36
  %160 = bitcast float %152 to i32, !dbg !36
  %161 = bitcast float %153 to i32, !dbg !36
  %162 = bitcast float %154 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %159, i32 %160, i32 %161, i32 %162, ptr addrspace(1) %16, i1 true) #1, !dbg !36
  %163 = bitcast float %155 to i32, !dbg !36
  %164 = bitcast float %156 to i32, !dbg !36
  %165 = bitcast float %157 to i32, !dbg !36
  %166 = bitcast float %158 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %163, i32 %164, i32 %165, i32 %166, ptr addrspace(1) %18, i1 true) #1, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmdqqfwscofztlzn2znuikylpl37ve7o5djrenhaovdkhagm35gi.py", directory: "inductor_cache/md")
!4 = !{ptr @triton_poi_fused_mul_sigmoid_39, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_sigmoid_39, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_sigmoid_39", linkageName: "triton_poi_fused_mul_sigmoid_39", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 34, scope: !7)
!17 = !DILocation(line: 27, column: 39, scope: !7)
!18 = !DILocation(line: 28, column: 40, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 45, scope: !7)
!22 = !DILocation(line: 47, column: 30, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = !DILocation(line: 29, column: 22, scope: !7)
!26 = !DILocation(line: 47, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 47, column: 20, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 47, column: 16, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 30, column: 18, scope: !7)
!30 = !DILocation(line: 47, column: 30, scope: !23, inlinedAt: !31)
!31 = !DILocation(line: 31, column: 22, scope: !7)
!32 = !DILocation(line: 47, column: 29, scope: !23, inlinedAt: !31)
!33 = !DILocation(line: 47, column: 20, scope: !23, inlinedAt: !31)
!34 = !DILocation(line: 47, column: 16, scope: !23, inlinedAt: !31)
!35 = !DILocation(line: 32, column: 18, scope: !7)
!36 = !DILocation(line: 33, column: 39, scope: !7)
!37 = !DILocation(line: 33, column: 4, scope: !7)
