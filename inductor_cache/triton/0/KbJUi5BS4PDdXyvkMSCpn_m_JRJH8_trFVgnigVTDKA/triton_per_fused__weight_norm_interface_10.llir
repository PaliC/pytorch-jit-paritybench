; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = and i32 %8, 31, !dbg !11
  %10 = lshr i32 %8, 5, !dbg !11
  %11 = shl i32 %8, 2, !dbg !11
  %12 = and i32 %11, 252, !dbg !11
  %13 = shl i32 %7, 8, !dbg !12
  %14 = or disjoint i32 %13, %12, !dbg !13
  %15 = sext i32 %14 to i64, !dbg !14
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !14
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #5, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !15
  %22 = bitcast i32 %18 to float, !dbg !15
  %23 = bitcast i32 %19 to float, !dbg !15
  %24 = bitcast i32 %20 to float, !dbg !15
  %25 = bitcast i32 %21 to float, !dbg !15
  %26 = sext i32 %7 to i64, !dbg !16
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !16
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !17
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !17
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !17
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !17
  %32 = fmul float %22, %22, !dbg !18
  %33 = fmul float %23, %23, !dbg !18
  %34 = fmul float %24, %24, !dbg !18
  %35 = fmul float %25, %25, !dbg !18
  %36 = fadd float %32, %33, !dbg !19
  %37 = fadd float %34, %36, !dbg !19
  %38 = fadd float %35, %37, !dbg !19
  %39 = bitcast float %38 to i32, !dbg !24
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 16, i32 31), !dbg !24
  %41 = bitcast i32 %40 to float, !dbg !24
  %42 = fadd float %38, %41, !dbg !19
  %43 = bitcast float %42 to i32, !dbg !24
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 8, i32 31), !dbg !24
  %45 = bitcast i32 %44 to float, !dbg !24
  %46 = fadd float %42, %45, !dbg !19
  %47 = bitcast float %46 to i32, !dbg !24
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 4, i32 31), !dbg !24
  %49 = bitcast i32 %48 to float, !dbg !24
  %50 = fadd float %46, %49, !dbg !19
  %51 = bitcast float %50 to i32, !dbg !24
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 2, i32 31), !dbg !24
  %53 = bitcast i32 %52 to float, !dbg !24
  %54 = fadd float %50, %53, !dbg !19
  %55 = bitcast float %54 to i32, !dbg !24
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 1, i32 31), !dbg !24
  %57 = bitcast i32 %56 to float, !dbg !24
  %58 = fadd float %54, %57, !dbg !19
  %59 = icmp eq i32 %9, 0, !dbg !24
  %60 = and i32 %10, 1, !dbg !24
  %61 = zext nneg i32 %60 to i64, !dbg !24
  %62 = getelementptr float, ptr addrspace(3) @global_smem, i64 %61, !dbg !24
  %63 = bitcast float %58 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 %59) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %64 = icmp slt i32 %8, 2, !dbg !24
  %65 = sext i32 %8 to i64, !dbg !24
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i64 %65, !dbg !24
  %67 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %66, i1 %64) #5, !dbg !24
  %68 = bitcast i32 %67 to float, !dbg !24
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 1, i32 31), !dbg !24
  %70 = bitcast i32 %69 to float, !dbg !24
  %71 = fadd float %68, %70, !dbg !19
  %72 = and i32 %8, 1, !dbg !24
  %73 = icmp eq i32 %72, 0, !dbg !24
  %74 = and i1 %64, %73, !dbg !24
  %75 = bitcast float %71 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %75, i1 %74) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %76 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %77 = fadd float %76, 0.000000e+00, !dbg !25
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i = icmp eq i32 %78, 0, !dbg !29
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %.not1.i = icmp eq i32 %79, 0, !dbg !29
  br i1 %.not.i, label %85, label %80, !dbg !29

80:                                               ; preds = %6
  br i1 %.not1.i, label %83, label %81, !dbg !29

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

85:                                               ; preds = %6
  br i1 %.not1.i, label %88, label %86, !dbg !29

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %81, %83, %86, %88
  %.0.i = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !29
  %90 = bitcast i32 %31 to float, !dbg !17
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float %.0.i) #5, !dbg !30
  %92 = fmul float %91, %22, !dbg !31
  %93 = fmul float %91, %23, !dbg !31
  %94 = fmul float %91, %24, !dbg !31
  %95 = fmul float %91, %25, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !33
  %urem = and i32 %8, 63, !dbg !34
  %97 = icmp eq i32 %urem, 0, !dbg !34
  %98 = bitcast float %.0.i to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %98, ptr addrspace(1) %96, i1 %97) #5, !dbg !34
  %99 = getelementptr float, ptr addrspace(1) %3, i64 %15, !dbg !35
  %100 = bitcast float %92 to i32, !dbg !36
  %101 = bitcast float %93 to i32, !dbg !36
  %102 = bitcast float %94 to i32, !dbg !36
  %103 = bitcast float %95 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %100, i32 %101, i32 %102, i32 %103, ptr addrspace(1) %99, i1 true) #5, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py", directory: "inductor_cache/jy")
!4 = !{ptr @triton_per_fused__weight_norm_interface_10, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_10, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_10", linkageName: "triton_per_fused__weight_norm_interface_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 39, scope: !7)
!13 = !DILocation(line: 32, column: 35, scope: !7)
!14 = !DILocation(line: 32, column: 30, scope: !7)
!15 = !DILocation(line: 32, column: 44, scope: !7)
!16 = !DILocation(line: 33, column: 30, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 34, column: 18, scope: !7)
!19 = !DILocation(line: 256, column: 15, scope: !20, inlinedAt: !23)
!20 = distinct !DILexicalBlockFile(scope: !22, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!22 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!23 = !DILocation(line: 36, column: 57, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !22, inlinedAt: !23)
!25 = !DILocation(line: 73, column: 15, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 36, column: 44, scope: !7)
!29 = !DILocation(line: 37, column: 26, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 4, scope: !7)
!33 = !DILocation(line: 41, column: 28, scope: !7)
!34 = !DILocation(line: 41, column: 39, scope: !7)
!35 = !DILocation(line: 42, column: 25, scope: !7)
!36 = !DILocation(line: 42, column: 45, scope: !7)
!37 = !DILocation(line: 42, column: 4, scope: !7)
