#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#loc = loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":19:0)
#loc1 = loc(unknown)
#loc12 = loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":36:57)
#loc26 = loc(callsite(#loc1 at #loc12))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__weight_norm_interface_10(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc3)
    %2 = arith.muli %0, %c256_i32 : i32 loc(#loc4)
    %3 = tt.splat %2 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.addi %1, %3 : tensor<256xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc6)
    %6 = tt.addptr %5, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc6)
    %7 = tt.load %6 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %arg2, %0 : !tt.ptr<f32>, i32 loc(#loc8)
    %9 = tt.splat %8 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.load %9 evictionPolicy = evict_last : tensor<1x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = arith.mulf %7, %7 : tensor<256xf32, #blocked> loc(#loc10)
    %12 = "tt.reduce"(%11) <{axis = 0 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc12)), %arg7: f32 loc(callsite(#loc1 at #loc12))):
      %24 = arith.addf %arg6, %arg7 : f32 loc(#loc29)
      tt.reduce.return %24 : f32 loc(#loc25)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc25)
    %13 = arith.addf %12, %cst : f32 loc(#loc28)
    %14 = tt.extern_elementwise %13 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (f32) -> f32 loc(#loc16)
    %15 = tt.splat %14 : f32 -> tensor<1xf32, #blocked> loc(#loc16)
    %16 = tt.splat %14 : f32 -> tensor<1xf32, #blocked1> loc(#loc16)
    %17 = arith.divf %10, %15 : tensor<1xf32, #blocked> loc(#loc17)
    %18 = tt.broadcast %17 : tensor<1xf32, #blocked> -> tensor<256xf32, #blocked> loc(#loc18)
    %19 = arith.mulf %7, %18 : tensor<256xf32, #blocked> loc(#loc18)
    gpu.barrier loc(#loc19)
    %20 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc20)
    %21 = tt.splat %20 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc20)
    tt.store %21, %16 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc21)
    %22 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc22)
    %23 = tt.addptr %22, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc22)
    tt.store %23, %19 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc23)
    tt.return loc(#loc24)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":24:28)
#loc3 = loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":27:26)
#loc4 = loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":32:39)
#loc5 = loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":32:35)
#loc6 = loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":32:30)
#loc7 = loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":32:44)
#loc8 = loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":33:30)
#loc9 = loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":33:35)
#loc10 = loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":34:18)
#loc11 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc13 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc15 = loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":36:44)
#loc16 = loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":37:26)
#loc17 = loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":38:18)
#loc18 = loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":39:18)
#loc19 = loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":40:4)
#loc20 = loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":41:28)
#loc21 = loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":41:39)
#loc22 = loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":42:25)
#loc23 = loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":42:45)
#loc24 = loc("inductor_cache/jy/cjyz5lrnbwmxz64pdiahhwrgccvnsdooh2xzc27jicb7pcqawe4c.py":42:4)
#loc25 = loc(callsite(#loc11 at #loc12))
#loc27 = loc(callsite(#loc13 at #loc11))
#loc28 = loc(callsite(#loc14 at #loc15))
#loc29 = loc(callsite(#loc27 at #loc12))
