; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %16 = shl i32 %15, 6, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = lshr i32 %17, 4, !dbg !12
  %19 = and i32 %18, 15, !dbg !12
  %20 = or disjoint i32 %19, 16, !dbg !12
  %21 = or disjoint i32 %19, 32, !dbg !12
  %22 = or disjoint i32 %19, 48, !dbg !12
  %23 = shl i32 %17, 2, !dbg !12
  %24 = and i32 %23, 60, !dbg !12
  %25 = or disjoint i32 %16, %19, !dbg !13
  %26 = or disjoint i32 %16, %20, !dbg !13
  %27 = or disjoint i32 %16, %21, !dbg !13
  %28 = or disjoint i32 %16, %22, !dbg !13
  %29 = icmp slt i32 %25, 256, !dbg !14
  %30 = icmp slt i32 %26, 256, !dbg !14
  %31 = icmp slt i32 %27, 256, !dbg !14
  %32 = icmp slt i32 %28, 256, !dbg !14
  %33 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %34 = shl i32 %33, 6, !dbg !16
  %35 = or disjoint i32 %34, %24, !dbg !17
  %36 = icmp slt i32 %35, 256, !dbg !18
  %37 = sdiv i32 %25, 64, !dbg !19
  %38 = sdiv i32 %26, 64, !dbg !19
  %39 = sdiv i32 %27, 64, !dbg !19
  %40 = sdiv i32 %28, 64, !dbg !19
  %41 = sext i32 %35 to i64, !dbg !20
  %42 = getelementptr float, ptr addrspace(1) %5, i64 %41, !dbg !20
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %36) #4, !dbg !21
  %44 = getelementptr float, ptr addrspace(1) %6, i64 %41, !dbg !22
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %36) #4, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !23
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !23
  %50 = bitcast i32 %46 to float, !dbg !23
  %51 = bitcast i32 %47 to float, !dbg !23
  %52 = bitcast i32 %48 to float, !dbg !23
  %53 = bitcast i32 %49 to float, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %7, i64 %41, !dbg !24
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %36) #4, !dbg !25
  %56 = getelementptr float, ptr addrspace(1) %8, i64 %41, !dbg !26
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %36) #4, !dbg !27
  %58 = getelementptr float, ptr addrspace(1) %9, i64 %41, !dbg !28
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %36) #4, !dbg !29
  %60 = icmp slt i32 %35, 128, !dbg !30
  %61 = shl i32 %25, 7, !dbg !31
  %62 = shl i32 %26, 7, !dbg !31
  %63 = shl i32 %27, 7, !dbg !31
  %64 = shl i32 %28, 7, !dbg !31
  %65 = add i32 %61, %35, !dbg !32
  %66 = add i32 %62, %35, !dbg !32
  %67 = add i32 %63, %35, !dbg !32
  %68 = add i32 %64, %35, !dbg !32
  %69 = sext i32 %65 to i64, !dbg !33
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !33
  %71 = sext i32 %66 to i64, !dbg !33
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !33
  %73 = sext i32 %67 to i64, !dbg !33
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !33
  %75 = sext i32 %68 to i64, !dbg !33
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !33
  %77 = and i1 %29, %60, !dbg !34
  %78 = and i1 %30, %60, !dbg !34
  %79 = and i1 %31, %60, !dbg !34
  %80 = and i1 %32, %60, !dbg !34
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 %77, i32 0, i1 %77, i32 0, i1 %77, i32 0, i1 %77, i32 0, i1 %77) #4, !dbg !35
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %72, i1 %78, i32 0, i1 %78, i32 0, i1 %78, i32 0, i1 %78, i32 0, i1 %78) #4, !dbg !35
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %74, i1 %79, i32 0, i1 %79, i32 0, i1 %79, i32 0, i1 %79, i32 0, i1 %79) #4, !dbg !35
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 %80, i32 0, i1 %80, i32 0, i1 %80, i32 0, i1 %80, i32 0, i1 %80) #4, !dbg !35
  %85 = add i32 %35, -128, !dbg !36
  %86 = add i32 %85, %61, !dbg !37
  %87 = add i32 %85, %62, !dbg !37
  %88 = add i32 %85, %63, !dbg !37
  %89 = add i32 %85, %64, !dbg !37
  %90 = sext i32 %86 to i64, !dbg !38
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !38
  %92 = sext i32 %87 to i64, !dbg !38
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !38
  %94 = sext i32 %88 to i64, !dbg !38
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !38
  %96 = sext i32 %89 to i64, !dbg !38
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !38
  %98 = and i32 %33, 67108862, !dbg !39
  %99 = icmp eq i32 %98, 2, !dbg !39
  %100 = and i1 %99, %29, !dbg !40
  %101 = and i1 %99, %30, !dbg !40
  %102 = and i1 %99, %31, !dbg !40
  %103 = and i1 %99, %32, !dbg !40
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %91, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100) #4, !dbg !41
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %93, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #4, !dbg !41
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %95, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #4, !dbg !41
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %97, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103) #4, !dbg !41
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %90, !dbg !42
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %92, !dbg !42
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !42
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !42
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %108, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100) #4, !dbg !43
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %109, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #4, !dbg !43
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %110, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #4, !dbg !43
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %111, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103) #4, !dbg !43
  %116 = sext i32 %85 to i64, !dbg !44
  %117 = getelementptr float, ptr addrspace(1) %3, i64 %116, !dbg !44
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %117, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100) #4, !dbg !45
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %117, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #4, !dbg !45
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %117, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #4, !dbg !45
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %117, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103) #4, !dbg !45
  %122 = shl i32 %37, 7, !dbg !46
  %123 = shl i32 %38, 7, !dbg !46
  %124 = shl i32 %39, 7, !dbg !46
  %125 = shl i32 %40, 7, !dbg !46
  %126 = add i32 %122, %85, !dbg !47
  %127 = add i32 %123, %85, !dbg !47
  %128 = add i32 %124, %85, !dbg !47
  %129 = add i32 %125, %85, !dbg !47
  %130 = sext i32 %126 to i64, !dbg !48
  %131 = getelementptr float, ptr addrspace(1) %4, i64 %130, !dbg !48
  %132 = sext i32 %127 to i64, !dbg !48
  %133 = getelementptr float, ptr addrspace(1) %4, i64 %132, !dbg !48
  %134 = sext i32 %128 to i64, !dbg !48
  %135 = getelementptr float, ptr addrspace(1) %4, i64 %134, !dbg !48
  %136 = sext i32 %129 to i64, !dbg !48
  %137 = getelementptr float, ptr addrspace(1) %4, i64 %136, !dbg !48
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %131, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100) #4, !dbg !49
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !49
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !49
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !49
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !49
  %143 = bitcast i32 %139 to float, !dbg !49
  %144 = bitcast i32 %140 to float, !dbg !49
  %145 = bitcast i32 %141 to float, !dbg !49
  %146 = bitcast i32 %142 to float, !dbg !49
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %133, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #4, !dbg !49
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !49
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !49
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !49
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !49
  %152 = bitcast i32 %148 to float, !dbg !49
  %153 = bitcast i32 %149 to float, !dbg !49
  %154 = bitcast i32 %150 to float, !dbg !49
  %155 = bitcast i32 %151 to float, !dbg !49
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %135, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #4, !dbg !49
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !49
  %158 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !49
  %159 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !49
  %160 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !49
  %161 = bitcast i32 %157 to float, !dbg !49
  %162 = bitcast i32 %158 to float, !dbg !49
  %163 = bitcast i32 %159 to float, !dbg !49
  %164 = bitcast i32 %160 to float, !dbg !49
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %137, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103) #4, !dbg !49
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !49
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !49
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !49
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !49
  %170 = bitcast i32 %166 to float, !dbg !49
  %171 = bitcast i32 %167 to float, !dbg !49
  %172 = bitcast i32 %168 to float, !dbg !49
  %173 = bitcast i32 %169 to float, !dbg !49
  %174 = fsub float 0.000000e+00, %143, !dbg !50
  %175 = fsub float 0.000000e+00, %144, !dbg !50
  %176 = fsub float 0.000000e+00, %145, !dbg !50
  %177 = fsub float 0.000000e+00, %146, !dbg !50
  %178 = fsub float 0.000000e+00, %152, !dbg !50
  %179 = fsub float 0.000000e+00, %153, !dbg !50
  %180 = fsub float 0.000000e+00, %154, !dbg !50
  %181 = fsub float 0.000000e+00, %155, !dbg !50
  %182 = fsub float 0.000000e+00, %161, !dbg !50
  %183 = fsub float 0.000000e+00, %162, !dbg !50
  %184 = fsub float 0.000000e+00, %163, !dbg !50
  %185 = fsub float 0.000000e+00, %164, !dbg !50
  %186 = fsub float 0.000000e+00, %170, !dbg !50
  %187 = fsub float 0.000000e+00, %171, !dbg !50
  %188 = fsub float 0.000000e+00, %172, !dbg !50
  %189 = fsub float 0.000000e+00, %173, !dbg !50
  %190 = fmul float %174, 0x3FF7154760000000, !dbg !54
  %191 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %190) #4, !dbg !54
  %192 = fmul float %175, 0x3FF7154760000000, !dbg !54
  %193 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %192) #4, !dbg !54
  %194 = fmul float %176, 0x3FF7154760000000, !dbg !54
  %195 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %194) #4, !dbg !54
  %196 = fmul float %177, 0x3FF7154760000000, !dbg !54
  %197 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %196) #4, !dbg !54
  %198 = fmul float %178, 0x3FF7154760000000, !dbg !54
  %199 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %198) #4, !dbg !54
  %200 = fmul float %179, 0x3FF7154760000000, !dbg !54
  %201 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %200) #4, !dbg !54
  %202 = fmul float %180, 0x3FF7154760000000, !dbg !54
  %203 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %202) #4, !dbg !54
  %204 = fmul float %181, 0x3FF7154760000000, !dbg !54
  %205 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %204) #4, !dbg !54
  %206 = fmul float %182, 0x3FF7154760000000, !dbg !54
  %207 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %206) #4, !dbg !54
  %208 = fmul float %183, 0x3FF7154760000000, !dbg !54
  %209 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %208) #4, !dbg !54
  %210 = fmul float %184, 0x3FF7154760000000, !dbg !54
  %211 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %210) #4, !dbg !54
  %212 = fmul float %185, 0x3FF7154760000000, !dbg !54
  %213 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %212) #4, !dbg !54
  %214 = fmul float %186, 0x3FF7154760000000, !dbg !54
  %215 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %214) #4, !dbg !54
  %216 = fmul float %187, 0x3FF7154760000000, !dbg !54
  %217 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %216) #4, !dbg !54
  %218 = fmul float %188, 0x3FF7154760000000, !dbg !54
  %219 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %218) #4, !dbg !54
  %220 = fmul float %189, 0x3FF7154760000000, !dbg !54
  %221 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %220) #4, !dbg !54
  %222 = fadd float %191, 1.000000e+00, !dbg !55
  %223 = fadd float %193, 1.000000e+00, !dbg !55
  %224 = fadd float %195, 1.000000e+00, !dbg !55
  %225 = fadd float %197, 1.000000e+00, !dbg !55
  %226 = fadd float %199, 1.000000e+00, !dbg !55
  %227 = fadd float %201, 1.000000e+00, !dbg !55
  %228 = fadd float %203, 1.000000e+00, !dbg !55
  %229 = fadd float %205, 1.000000e+00, !dbg !55
  %230 = fadd float %207, 1.000000e+00, !dbg !55
  %231 = fadd float %209, 1.000000e+00, !dbg !55
  %232 = fadd float %211, 1.000000e+00, !dbg !55
  %233 = fadd float %213, 1.000000e+00, !dbg !55
  %234 = fadd float %215, 1.000000e+00, !dbg !55
  %235 = fadd float %217, 1.000000e+00, !dbg !55
  %236 = fadd float %219, 1.000000e+00, !dbg !55
  %237 = fadd float %221, 1.000000e+00, !dbg !55
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %222) #4, !dbg !56
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %223) #4, !dbg !56
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %224) #4, !dbg !56
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %225) #4, !dbg !56
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %226) #4, !dbg !56
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %227) #4, !dbg !56
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %228) #4, !dbg !56
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %229) #4, !dbg !56
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %230) #4, !dbg !56
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %231) #4, !dbg !56
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %232) #4, !dbg !56
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %233) #4, !dbg !56
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %234) #4, !dbg !56
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %235) #4, !dbg !56
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %236) #4, !dbg !56
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %237) #4, !dbg !56
  %254 = fadd float %50, 0x3EE4F8B580000000, !dbg !57
  %255 = fadd float %51, 0x3EE4F8B580000000, !dbg !57
  %256 = fadd float %52, 0x3EE4F8B580000000, !dbg !57
  %257 = fadd float %53, 0x3EE4F8B580000000, !dbg !57
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not.i = icmp eq i32 %258, 0, !dbg !58
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !58
  %.not1.i = icmp eq i32 %259, 0, !dbg !58
  br i1 %.not.i, label %265, label %260, !dbg !58

260:                                              ; preds = %14
  br i1 %.not1.i, label %263, label %261, !dbg !58

261:                                              ; preds = %260
  %262 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %254) #4, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

263:                                              ; preds = %260
  %264 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %254) #4, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

265:                                              ; preds = %14
  br i1 %.not1.i, label %268, label %266, !dbg !58

266:                                              ; preds = %265
  %267 = tail call float @llvm.nvvm.sqrt.rn.f(float %254) #4, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

268:                                              ; preds = %265
  %269 = tail call float @llvm.nvvm.sqrt.approx.f(float %254) #4, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

__nv_sqrtf.exit:                                  ; preds = %261, %263, %266, %268
  %.0.i = phi float [ %262, %261 ], [ %264, %263 ], [ %267, %266 ], [ %269, %268 ], !dbg !58
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not.i31 = icmp eq i32 %270, 0, !dbg !58
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !58
  %.not1.i34 = icmp eq i32 %271, 0, !dbg !58
  br i1 %.not.i31, label %277, label %272, !dbg !58

272:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i34, label %275, label %273, !dbg !58

273:                                              ; preds = %272
  %274 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %255) #4, !dbg !58
  br label %__nv_sqrtf.exit35, !dbg !58

275:                                              ; preds = %272
  %276 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %255) #4, !dbg !58
  br label %__nv_sqrtf.exit35, !dbg !58

277:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i34, label %280, label %278, !dbg !58

278:                                              ; preds = %277
  %279 = tail call float @llvm.nvvm.sqrt.rn.f(float %255) #4, !dbg !58
  br label %__nv_sqrtf.exit35, !dbg !58

280:                                              ; preds = %277
  %281 = tail call float @llvm.nvvm.sqrt.approx.f(float %255) #4, !dbg !58
  br label %__nv_sqrtf.exit35, !dbg !58

__nv_sqrtf.exit35:                                ; preds = %273, %275, %278, %280
  %.0.i33 = phi float [ %274, %273 ], [ %276, %275 ], [ %279, %278 ], [ %281, %280 ], !dbg !58
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not.i36 = icmp eq i32 %282, 0, !dbg !58
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !58
  %.not1.i39 = icmp eq i32 %283, 0, !dbg !58
  br i1 %.not.i36, label %289, label %284, !dbg !58

284:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %287, label %285, !dbg !58

285:                                              ; preds = %284
  %286 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %256) #4, !dbg !58
  br label %__nv_sqrtf.exit40, !dbg !58

287:                                              ; preds = %284
  %288 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %256) #4, !dbg !58
  br label %__nv_sqrtf.exit40, !dbg !58

289:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %292, label %290, !dbg !58

290:                                              ; preds = %289
  %291 = tail call float @llvm.nvvm.sqrt.rn.f(float %256) #4, !dbg !58
  br label %__nv_sqrtf.exit40, !dbg !58

292:                                              ; preds = %289
  %293 = tail call float @llvm.nvvm.sqrt.approx.f(float %256) #4, !dbg !58
  br label %__nv_sqrtf.exit40, !dbg !58

__nv_sqrtf.exit40:                                ; preds = %285, %287, %290, %292
  %.0.i38 = phi float [ %286, %285 ], [ %288, %287 ], [ %291, %290 ], [ %293, %292 ], !dbg !58
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not.i41 = icmp eq i32 %294, 0, !dbg !58
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !58
  %.not1.i44 = icmp eq i32 %295, 0, !dbg !58
  br i1 %.not.i41, label %301, label %296, !dbg !58

296:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %299, label %297, !dbg !58

297:                                              ; preds = %296
  %298 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %257) #4, !dbg !58
  br label %__nv_sqrtf.exit45, !dbg !58

299:                                              ; preds = %296
  %300 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %257) #4, !dbg !58
  br label %__nv_sqrtf.exit45, !dbg !58

301:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %304, label %302, !dbg !58

302:                                              ; preds = %301
  %303 = tail call float @llvm.nvvm.sqrt.rn.f(float %257) #4, !dbg !58
  br label %__nv_sqrtf.exit45, !dbg !58

304:                                              ; preds = %301
  %305 = tail call float @llvm.nvvm.sqrt.approx.f(float %257) #4, !dbg !58
  br label %__nv_sqrtf.exit45, !dbg !58

__nv_sqrtf.exit45:                                ; preds = %297, %299, %302, %304
  %.0.i43 = phi float [ %298, %297 ], [ %300, %299 ], [ %303, %302 ], [ %305, %304 ], !dbg !58
  %306 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !35
  %307 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !43
  %308 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !45
  %309 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !41
  %310 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !21
  %311 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !35
  %312 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !43
  %313 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !45
  %314 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !41
  %315 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !21
  %316 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !35
  %317 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !43
  %318 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !45
  %319 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !41
  %320 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !21
  %321 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !35
  %322 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !43
  %323 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !45
  %324 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !41
  %325 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !21
  %326 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !35
  %327 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !43
  %328 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !45
  %329 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !41
  %330 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !35
  %331 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !43
  %332 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !45
  %333 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !41
  %334 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !35
  %335 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !43
  %336 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !45
  %337 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !41
  %338 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !35
  %339 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !43
  %340 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !45
  %341 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !41
  %342 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !35
  %343 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !43
  %344 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !45
  %345 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !41
  %346 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !35
  %347 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !43
  %348 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !45
  %349 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !41
  %350 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !35
  %351 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !43
  %352 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !45
  %353 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !41
  %354 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !35
  %355 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !43
  %356 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !45
  %357 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !41
  %358 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !35
  %359 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !43
  %360 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !45
  %361 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !41
  %362 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !35
  %363 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !43
  %364 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !45
  %365 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !41
  %366 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !35
  %367 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !43
  %368 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !45
  %369 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !41
  %370 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !35
  %371 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !43
  %372 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !45
  %373 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !41
  %374 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !29
  %375 = bitcast i32 %374 to float, !dbg !29
  %376 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !29
  %377 = bitcast i32 %376 to float, !dbg !29
  %378 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !29
  %379 = bitcast i32 %378 to float, !dbg !29
  %380 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !29
  %381 = bitcast i32 %380 to float, !dbg !29
  %382 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !27
  %383 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !27
  %384 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !27
  %385 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !27
  %386 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !25
  %387 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !25
  %388 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !25
  %389 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !25
  %390 = or disjoint i32 %16, %24, !dbg !13
  %.frozen = freeze i32 %390, !dbg !19
  %391 = sdiv i32 %.frozen, 64, !dbg !19
  %392 = mul i32 %391, 64, !dbg !59
  %.decomposed = sub i32 %.frozen, %392, !dbg !59
  %393 = or disjoint i32 %34, %22, !dbg !17
  %394 = icmp slt i32 %393, 256, !dbg !18
  %395 = or disjoint i32 %34, %21, !dbg !17
  %396 = icmp slt i32 %395, 256, !dbg !18
  %397 = or disjoint i32 %34, %20, !dbg !17
  %398 = icmp slt i32 %397, 256, !dbg !18
  %399 = or disjoint i32 %34, %19, !dbg !17
  %400 = icmp slt i32 %399, 256, !dbg !18
  %401 = icmp slt i32 %390, 256, !dbg !14
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !60
  %403 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #4, !dbg !60
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #4, !dbg !60
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #4, !dbg !60
  %406 = insertelement <4 x i32> poison, i32 %310, i64 0, !dbg !21
  %407 = insertelement <4 x i32> %406, i32 %315, i64 1, !dbg !21
  %408 = insertelement <4 x i32> %407, i32 %320, i64 2, !dbg !21
  %409 = insertelement <4 x i32> %408, i32 %325, i64 3, !dbg !21
  %410 = bitcast <4 x i32> %409 to <4 x float>, !dbg !21
  %411 = shufflevector <4 x float> %410, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !21
  %412 = insertelement <16 x i32> poison, i32 %306, i64 0, !dbg !35
  %413 = insertelement <16 x i32> %412, i32 %311, i64 1, !dbg !35
  %414 = insertelement <16 x i32> %413, i32 %316, i64 2, !dbg !35
  %415 = insertelement <16 x i32> %414, i32 %321, i64 3, !dbg !35
  %416 = insertelement <16 x i32> %415, i32 %326, i64 4, !dbg !35
  %417 = insertelement <16 x i32> %416, i32 %330, i64 5, !dbg !35
  %418 = insertelement <16 x i32> %417, i32 %334, i64 6, !dbg !35
  %419 = insertelement <16 x i32> %418, i32 %338, i64 7, !dbg !35
  %420 = insertelement <16 x i32> %419, i32 %342, i64 8, !dbg !35
  %421 = insertelement <16 x i32> %420, i32 %346, i64 9, !dbg !35
  %422 = insertelement <16 x i32> %421, i32 %350, i64 10, !dbg !35
  %423 = insertelement <16 x i32> %422, i32 %354, i64 11, !dbg !35
  %424 = insertelement <16 x i32> %423, i32 %358, i64 12, !dbg !35
  %425 = insertelement <16 x i32> %424, i32 %362, i64 13, !dbg !35
  %426 = insertelement <16 x i32> %425, i32 %366, i64 14, !dbg !35
  %427 = insertelement <16 x i32> %426, i32 %370, i64 15, !dbg !35
  %428 = bitcast <16 x i32> %427 to <16 x float>, !dbg !35
  %429 = insertelement <16 x i32> poison, i32 %307, i64 0, !dbg !43
  %430 = insertelement <16 x i32> %429, i32 %312, i64 1, !dbg !43
  %431 = insertelement <16 x i32> %430, i32 %317, i64 2, !dbg !43
  %432 = insertelement <16 x i32> %431, i32 %322, i64 3, !dbg !43
  %433 = insertelement <16 x i32> %432, i32 %327, i64 4, !dbg !43
  %434 = insertelement <16 x i32> %433, i32 %331, i64 5, !dbg !43
  %435 = insertelement <16 x i32> %434, i32 %335, i64 6, !dbg !43
  %436 = insertelement <16 x i32> %435, i32 %339, i64 7, !dbg !43
  %437 = insertelement <16 x i32> %436, i32 %343, i64 8, !dbg !43
  %438 = insertelement <16 x i32> %437, i32 %347, i64 9, !dbg !43
  %439 = insertelement <16 x i32> %438, i32 %351, i64 10, !dbg !43
  %440 = insertelement <16 x i32> %439, i32 %355, i64 11, !dbg !43
  %441 = insertelement <16 x i32> %440, i32 %359, i64 12, !dbg !43
  %442 = insertelement <16 x i32> %441, i32 %363, i64 13, !dbg !43
  %443 = insertelement <16 x i32> %442, i32 %367, i64 14, !dbg !43
  %444 = insertelement <16 x i32> %443, i32 %371, i64 15, !dbg !43
  %445 = bitcast <16 x i32> %444 to <16 x float>, !dbg !43
  %446 = fcmp ogt <16 x float> %445, zeroinitializer, !dbg !61
  %447 = insertelement <16 x i32> poison, i32 %308, i64 0, !dbg !45
  %448 = insertelement <16 x i32> %447, i32 %313, i64 1, !dbg !45
  %449 = insertelement <16 x i32> %448, i32 %318, i64 2, !dbg !45
  %450 = insertelement <16 x i32> %449, i32 %323, i64 3, !dbg !45
  %451 = insertelement <16 x i32> %450, i32 %328, i64 4, !dbg !45
  %452 = insertelement <16 x i32> %451, i32 %332, i64 5, !dbg !45
  %453 = insertelement <16 x i32> %452, i32 %336, i64 6, !dbg !45
  %454 = insertelement <16 x i32> %453, i32 %340, i64 7, !dbg !45
  %455 = insertelement <16 x i32> %454, i32 %344, i64 8, !dbg !45
  %456 = insertelement <16 x i32> %455, i32 %348, i64 9, !dbg !45
  %457 = insertelement <16 x i32> %456, i32 %352, i64 10, !dbg !45
  %458 = insertelement <16 x i32> %457, i32 %356, i64 11, !dbg !45
  %459 = insertelement <16 x i32> %458, i32 %360, i64 12, !dbg !45
  %460 = insertelement <16 x i32> %459, i32 %364, i64 13, !dbg !45
  %461 = insertelement <16 x i32> %460, i32 %368, i64 14, !dbg !45
  %462 = insertelement <16 x i32> %461, i32 %372, i64 15, !dbg !45
  %463 = bitcast <16 x i32> %462 to <16 x float>, !dbg !45
  %464 = fmul <16 x float> %445, %463, !dbg !62
  %465 = select <16 x i1> %446, <16 x float> %445, <16 x float> %464, !dbg !63
  %466 = insertelement <16 x float> poison, float %253, i64 0, !dbg !64
  %467 = insertelement <16 x float> %466, float %252, i64 1, !dbg !64
  %468 = insertelement <16 x float> %467, float %251, i64 2, !dbg !64
  %469 = insertelement <16 x float> %468, float %250, i64 3, !dbg !64
  %470 = insertelement <16 x float> %469, float %249, i64 4, !dbg !64
  %471 = insertelement <16 x float> %470, float %248, i64 5, !dbg !64
  %472 = insertelement <16 x float> %471, float %247, i64 6, !dbg !64
  %473 = insertelement <16 x float> %472, float %246, i64 7, !dbg !64
  %474 = insertelement <16 x float> %473, float %245, i64 8, !dbg !64
  %475 = insertelement <16 x float> %474, float %244, i64 9, !dbg !64
  %476 = insertelement <16 x float> %475, float %243, i64 10, !dbg !64
  %477 = insertelement <16 x float> %476, float %242, i64 11, !dbg !64
  %478 = insertelement <16 x float> %477, float %241, i64 12, !dbg !64
  %479 = insertelement <16 x float> %478, float %240, i64 13, !dbg !64
  %480 = insertelement <16 x float> %479, float %239, i64 14, !dbg !64
  %481 = insertelement <16 x float> %480, float %238, i64 15, !dbg !64
  %482 = fmul <16 x float> %465, %481, !dbg !64
  %483 = insertelement <16 x i32> poison, i32 %309, i64 0, !dbg !41
  %484 = insertelement <16 x i32> %483, i32 %314, i64 1, !dbg !41
  %485 = insertelement <16 x i32> %484, i32 %319, i64 2, !dbg !41
  %486 = insertelement <16 x i32> %485, i32 %324, i64 3, !dbg !41
  %487 = insertelement <16 x i32> %486, i32 %329, i64 4, !dbg !41
  %488 = insertelement <16 x i32> %487, i32 %333, i64 5, !dbg !41
  %489 = insertelement <16 x i32> %488, i32 %337, i64 6, !dbg !41
  %490 = insertelement <16 x i32> %489, i32 %341, i64 7, !dbg !41
  %491 = insertelement <16 x i32> %490, i32 %345, i64 8, !dbg !41
  %492 = insertelement <16 x i32> %491, i32 %349, i64 9, !dbg !41
  %493 = insertelement <16 x i32> %492, i32 %353, i64 10, !dbg !41
  %494 = insertelement <16 x i32> %493, i32 %357, i64 11, !dbg !41
  %495 = insertelement <16 x i32> %494, i32 %361, i64 12, !dbg !41
  %496 = insertelement <16 x i32> %495, i32 %365, i64 13, !dbg !41
  %497 = insertelement <16 x i32> %496, i32 %369, i64 14, !dbg !41
  %498 = insertelement <16 x i32> %497, i32 %373, i64 15, !dbg !41
  %499 = bitcast <16 x i32> %498 to <16 x float>, !dbg !41
  %500 = fadd <16 x float> %482, %499, !dbg !65
  %501 = insertelement <16 x i1> poison, i1 %60, i64 0, !dbg !66
  %502 = shufflevector <16 x i1> %501, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !66
  %503 = select <16 x i1> %502, <16 x float> %428, <16 x float> %500, !dbg !66
  %504 = fsub <16 x float> %503, %411, !dbg !67
  %505 = insertelement <4 x i32> poison, i32 %382, i64 0, !dbg !27
  %506 = insertelement <4 x i32> %505, i32 %383, i64 1, !dbg !27
  %507 = insertelement <4 x i32> %506, i32 %384, i64 2, !dbg !27
  %508 = insertelement <4 x i32> %507, i32 %385, i64 3, !dbg !27
  %509 = bitcast <4 x i32> %508 to <4 x float>, !dbg !27
  %510 = shufflevector <4 x float> %509, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %511 = insertelement <4 x i32> poison, i32 %386, i64 0, !dbg !25
  %512 = insertelement <4 x i32> %511, i32 %387, i64 1, !dbg !25
  %513 = insertelement <4 x i32> %512, i32 %388, i64 2, !dbg !25
  %514 = insertelement <4 x i32> %513, i32 %389, i64 3, !dbg !25
  %515 = bitcast <4 x i32> %514 to <4 x float>, !dbg !25
  %516 = shufflevector <4 x float> %515, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !25
  %517 = insertelement <16 x float> poison, float %405, i64 0, !dbg !68
  %518 = insertelement <16 x float> %517, float %404, i64 1, !dbg !68
  %519 = insertelement <16 x float> %518, float %403, i64 2, !dbg !68
  %520 = insertelement <16 x float> %519, float %402, i64 3, !dbg !68
  %521 = shufflevector <16 x float> %520, <16 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !68
  %522 = fmul <16 x float> %504, %521, !dbg !68
  %523 = fmul <16 x float> %522, %516, !dbg !69
  %524 = fadd <16 x float> %523, %510, !dbg !70
  %525 = fcmp ogt <16 x float> %524, zeroinitializer, !dbg !71
  %526 = extractelement <16 x float> %524, i64 15, !dbg !72
  %527 = fmul float %526, %381, !dbg !73
  %528 = extractelement <16 x float> %524, i64 14, !dbg !72
  %529 = fmul float %528, %379, !dbg !73
  %530 = extractelement <16 x float> %524, i64 13, !dbg !72
  %531 = fmul float %530, %377, !dbg !73
  %532 = extractelement <16 x float> %524, i64 12, !dbg !72
  %533 = fmul float %532, %375, !dbg !73
  %534 = extractelement <16 x float> %524, i64 11, !dbg !72
  %535 = fmul float %534, %381, !dbg !73
  %536 = extractelement <16 x float> %524, i64 10, !dbg !72
  %537 = fmul float %536, %379, !dbg !73
  %538 = extractelement <16 x float> %524, i64 9, !dbg !72
  %539 = fmul float %538, %377, !dbg !73
  %540 = extractelement <16 x float> %524, i64 8, !dbg !72
  %541 = fmul float %540, %375, !dbg !73
  %542 = extractelement <16 x float> %524, i64 7, !dbg !72
  %543 = fmul float %542, %381, !dbg !73
  %544 = extractelement <16 x float> %524, i64 6, !dbg !72
  %545 = fmul float %544, %379, !dbg !73
  %546 = extractelement <16 x float> %524, i64 5, !dbg !72
  %547 = fmul float %546, %377, !dbg !73
  %548 = extractelement <16 x float> %524, i64 4, !dbg !72
  %549 = fmul float %548, %375, !dbg !73
  %550 = extractelement <16 x float> %524, i64 3, !dbg !72
  %551 = fmul float %550, %381, !dbg !73
  %552 = extractelement <16 x float> %524, i64 2, !dbg !72
  %553 = fmul float %552, %379, !dbg !73
  %554 = extractelement <16 x float> %524, i64 1, !dbg !72
  %555 = fmul float %554, %377, !dbg !73
  %556 = extractelement <16 x float> %524, i64 0, !dbg !72
  %557 = fmul float %556, %375, !dbg !73
  %558 = extractelement <16 x i1> %525, i64 15, !dbg !72
  %559 = select i1 %558, float %526, float %527, !dbg !72
  %560 = extractelement <16 x i1> %525, i64 14, !dbg !72
  %561 = select i1 %560, float %528, float %529, !dbg !72
  %562 = extractelement <16 x i1> %525, i64 13, !dbg !72
  %563 = select i1 %562, float %530, float %531, !dbg !72
  %564 = extractelement <16 x i1> %525, i64 12, !dbg !72
  %565 = select i1 %564, float %532, float %533, !dbg !72
  %566 = extractelement <16 x i1> %525, i64 11, !dbg !72
  %567 = select i1 %566, float %534, float %535, !dbg !72
  %568 = extractelement <16 x i1> %525, i64 10, !dbg !72
  %569 = select i1 %568, float %536, float %537, !dbg !72
  %570 = extractelement <16 x i1> %525, i64 9, !dbg !72
  %571 = select i1 %570, float %538, float %539, !dbg !72
  %572 = extractelement <16 x i1> %525, i64 8, !dbg !72
  %573 = select i1 %572, float %540, float %541, !dbg !72
  %574 = extractelement <16 x i1> %525, i64 7, !dbg !72
  %575 = select i1 %574, float %542, float %543, !dbg !72
  %576 = extractelement <16 x i1> %525, i64 6, !dbg !72
  %577 = select i1 %576, float %544, float %545, !dbg !72
  %578 = extractelement <16 x i1> %525, i64 5, !dbg !72
  %579 = select i1 %578, float %546, float %547, !dbg !72
  %580 = extractelement <16 x i1> %525, i64 4, !dbg !72
  %581 = select i1 %580, float %548, float %549, !dbg !72
  %582 = extractelement <16 x i1> %525, i64 3, !dbg !72
  %583 = select i1 %582, float %550, float %551, !dbg !72
  %584 = extractelement <16 x i1> %525, i64 2, !dbg !72
  %585 = select i1 %584, float %552, float %553, !dbg !72
  %586 = extractelement <16 x i1> %525, i64 1, !dbg !72
  %587 = select i1 %586, float %554, float %555, !dbg !72
  %588 = extractelement <16 x i1> %525, i64 0, !dbg !72
  %589 = select i1 %588, float %556, float %557, !dbg !72
  %590 = shl i32 %25, 8, !dbg !74
  %591 = shl i32 %26, 8, !dbg !74
  %592 = shl i32 %27, 8, !dbg !74
  %593 = shl i32 %28, 8, !dbg !74
  %594 = add i32 %35, %590, !dbg !75
  %595 = add i32 %35, %591, !dbg !75
  %596 = add i32 %35, %592, !dbg !75
  %597 = add i32 %35, %593, !dbg !75
  %598 = sext i32 %594 to i64, !dbg !76
  %599 = getelementptr float, ptr addrspace(1) %10, i64 %598, !dbg !76
  %600 = sext i32 %595 to i64, !dbg !76
  %601 = getelementptr float, ptr addrspace(1) %10, i64 %600, !dbg !76
  %602 = sext i32 %596 to i64, !dbg !76
  %603 = getelementptr float, ptr addrspace(1) %10, i64 %602, !dbg !76
  %604 = sext i32 %597 to i64, !dbg !76
  %605 = getelementptr float, ptr addrspace(1) %10, i64 %604, !dbg !76
  %606 = and i1 %29, %36, !dbg !77
  %607 = and i1 %30, %36, !dbg !77
  %608 = and i1 %31, %36, !dbg !77
  %609 = and i1 %32, %36, !dbg !77
  %610 = and i1 %401, %400, !dbg !77
  %611 = and i1 %401, %398, !dbg !77
  %612 = and i1 %401, %396, !dbg !77
  %613 = and i1 %401, %394, !dbg !77
  %bc = bitcast <16 x float> %503 to <16 x i32>, !dbg !78
  %614 = extractelement <16 x i32> %bc, i64 15, !dbg !78
  %bc46 = bitcast <16 x float> %503 to <16 x i32>, !dbg !78
  %615 = extractelement <16 x i32> %bc46, i64 14, !dbg !78
  %bc47 = bitcast <16 x float> %503 to <16 x i32>, !dbg !78
  %616 = extractelement <16 x i32> %bc47, i64 13, !dbg !78
  %bc48 = bitcast <16 x float> %503 to <16 x i32>, !dbg !78
  %617 = extractelement <16 x i32> %bc48, i64 12, !dbg !78
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %614, i32 %615, i32 %616, i32 %617, ptr addrspace(1) %599, i1 %606) #4, !dbg !78
  %bc49 = bitcast <16 x float> %503 to <16 x i32>, !dbg !78
  %618 = extractelement <16 x i32> %bc49, i64 11, !dbg !78
  %bc50 = bitcast <16 x float> %503 to <16 x i32>, !dbg !78
  %619 = extractelement <16 x i32> %bc50, i64 10, !dbg !78
  %bc51 = bitcast <16 x float> %503 to <16 x i32>, !dbg !78
  %620 = extractelement <16 x i32> %bc51, i64 9, !dbg !78
  %bc52 = bitcast <16 x float> %503 to <16 x i32>, !dbg !78
  %621 = extractelement <16 x i32> %bc52, i64 8, !dbg !78
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %618, i32 %619, i32 %620, i32 %621, ptr addrspace(1) %601, i1 %607) #4, !dbg !78
  %bc53 = bitcast <16 x float> %503 to <16 x i32>, !dbg !78
  %622 = extractelement <16 x i32> %bc53, i64 7, !dbg !78
  %bc54 = bitcast <16 x float> %503 to <16 x i32>, !dbg !78
  %623 = extractelement <16 x i32> %bc54, i64 6, !dbg !78
  %bc55 = bitcast <16 x float> %503 to <16 x i32>, !dbg !78
  %624 = extractelement <16 x i32> %bc55, i64 5, !dbg !78
  %bc56 = bitcast <16 x float> %503 to <16 x i32>, !dbg !78
  %625 = extractelement <16 x i32> %bc56, i64 4, !dbg !78
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %622, i32 %623, i32 %624, i32 %625, ptr addrspace(1) %603, i1 %608) #4, !dbg !78
  %bc57 = bitcast <16 x float> %503 to <16 x i32>, !dbg !78
  %626 = extractelement <16 x i32> %bc57, i64 3, !dbg !78
  %bc58 = bitcast <16 x float> %503 to <16 x i32>, !dbg !78
  %627 = extractelement <16 x i32> %bc58, i64 2, !dbg !78
  %bc59 = bitcast <16 x float> %503 to <16 x i32>, !dbg !78
  %628 = extractelement <16 x i32> %bc59, i64 1, !dbg !78
  %bc60 = bitcast <16 x float> %503 to <16 x i32>, !dbg !78
  %629 = extractelement <16 x i32> %bc60, i64 0, !dbg !78
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %626, i32 %627, i32 %628, i32 %629, ptr addrspace(1) %605, i1 %609) #4, !dbg !78
  %630 = shl i32 %399, 6, !dbg !79
  %631 = shl i32 %397, 6, !dbg !79
  %632 = shl i32 %395, 6, !dbg !79
  %633 = shl i32 %393, 6, !dbg !79
  %634 = shl i32 %391, 14, !dbg !80
  %635 = add i32 %634, %.decomposed, !dbg !81
  %636 = add i32 %635, %630, !dbg !82
  %637 = add i32 %635, %631, !dbg !82
  %638 = add i32 %635, %632, !dbg !82
  %639 = add i32 %635, %633, !dbg !82
  %640 = sext i32 %636 to i64, !dbg !83
  %641 = getelementptr float, ptr addrspace(1) %11, i64 %640, !dbg !83
  %642 = sext i32 %637 to i64, !dbg !83
  %643 = getelementptr float, ptr addrspace(1) %11, i64 %642, !dbg !83
  %644 = sext i32 %638 to i64, !dbg !83
  %645 = getelementptr float, ptr addrspace(1) %11, i64 %644, !dbg !83
  %646 = sext i32 %639 to i64, !dbg !83
  %647 = getelementptr float, ptr addrspace(1) %11, i64 %646, !dbg !83
  %648 = shl i32 %17, 8, !dbg !84
  %649 = and i32 %648, 3840, !dbg !84
  %650 = or disjoint i32 %649, %19, !dbg !84
  %651 = and i32 %23, 1020, !dbg !84
  %652 = lshr exact i32 %649, 2, !dbg !84
  %653 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %652, !dbg !84
  %654 = getelementptr float, ptr addrspace(3) %653, i32 %650, !dbg !84
  %655 = bitcast float %559 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %654, <1 x i32> %655, i1 true) #4, !dbg !84
  %656 = or disjoint i32 %650, 64, !dbg !84
  %657 = lshr i32 %656, 4, !dbg !84
  %658 = getelementptr float, ptr addrspace(3) @global_smem, i32 %657, !dbg !84
  %659 = getelementptr float, ptr addrspace(3) %658, i32 %656, !dbg !84
  %660 = bitcast float %561 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %659, <1 x i32> %660, i1 true) #4, !dbg !84
  %661 = or disjoint i32 %650, 128, !dbg !84
  %662 = lshr i32 %661, 4, !dbg !84
  %663 = getelementptr float, ptr addrspace(3) @global_smem, i32 %662, !dbg !84
  %664 = getelementptr float, ptr addrspace(3) %663, i32 %661, !dbg !84
  %665 = bitcast float %563 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %664, <1 x i32> %665, i1 true) #4, !dbg !84
  %666 = or disjoint i32 %650, 192, !dbg !84
  %667 = lshr i32 %666, 4, !dbg !84
  %668 = getelementptr float, ptr addrspace(3) @global_smem, i32 %667, !dbg !84
  %669 = getelementptr float, ptr addrspace(3) %668, i32 %666, !dbg !84
  %670 = bitcast float %565 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %669, <1 x i32> %670, i1 true) #4, !dbg !84
  %671 = or disjoint i32 %650, 16, !dbg !84
  %672 = getelementptr float, ptr addrspace(3) %653, i32 %671, !dbg !84
  %673 = bitcast float %567 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %672, <1 x i32> %673, i1 true) #4, !dbg !84
  %674 = or disjoint i32 %650, 80, !dbg !84
  %675 = lshr i32 %674, 4, !dbg !84
  %676 = and i32 %675, 244, !dbg !84
  %677 = getelementptr float, ptr addrspace(3) @global_smem, i32 %676, !dbg !84
  %678 = getelementptr float, ptr addrspace(3) %677, i32 %674, !dbg !84
  %679 = bitcast float %569 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %678, <1 x i32> %679, i1 true) #4, !dbg !84
  %680 = or disjoint i32 %650, 144, !dbg !84
  %681 = lshr i32 %680, 4, !dbg !84
  %682 = and i32 %681, 248, !dbg !84
  %683 = getelementptr float, ptr addrspace(3) @global_smem, i32 %682, !dbg !84
  %684 = getelementptr float, ptr addrspace(3) %683, i32 %680, !dbg !84
  %685 = bitcast float %571 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %684, <1 x i32> %685, i1 true) #4, !dbg !84
  %686 = or disjoint i32 %650, 208, !dbg !84
  %687 = lshr i32 %686, 4, !dbg !84
  %688 = and i32 %687, 252, !dbg !84
  %689 = getelementptr float, ptr addrspace(3) @global_smem, i32 %688, !dbg !84
  %690 = getelementptr float, ptr addrspace(3) %689, i32 %686, !dbg !84
  %691 = bitcast float %573 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %690, <1 x i32> %691, i1 true) #4, !dbg !84
  %692 = or disjoint i32 %650, 32, !dbg !84
  %693 = getelementptr float, ptr addrspace(3) %653, i32 %692, !dbg !84
  %694 = bitcast float %575 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %693, <1 x i32> %694, i1 true) #4, !dbg !84
  %695 = or disjoint i32 %650, 96, !dbg !84
  %696 = lshr i32 %695, 4, !dbg !84
  %697 = and i32 %696, 244, !dbg !84
  %698 = getelementptr float, ptr addrspace(3) @global_smem, i32 %697, !dbg !84
  %699 = getelementptr float, ptr addrspace(3) %698, i32 %695, !dbg !84
  %700 = bitcast float %577 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %699, <1 x i32> %700, i1 true) #4, !dbg !84
  %701 = or disjoint i32 %650, 160, !dbg !84
  %702 = lshr i32 %701, 4, !dbg !84
  %703 = and i32 %702, 248, !dbg !84
  %704 = getelementptr float, ptr addrspace(3) @global_smem, i32 %703, !dbg !84
  %705 = getelementptr float, ptr addrspace(3) %704, i32 %701, !dbg !84
  %706 = bitcast float %579 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %705, <1 x i32> %706, i1 true) #4, !dbg !84
  %707 = or disjoint i32 %650, 224, !dbg !84
  %708 = lshr i32 %707, 4, !dbg !84
  %709 = and i32 %708, 252, !dbg !84
  %710 = getelementptr float, ptr addrspace(3) @global_smem, i32 %709, !dbg !84
  %711 = getelementptr float, ptr addrspace(3) %710, i32 %707, !dbg !84
  %712 = bitcast float %581 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %711, <1 x i32> %712, i1 true) #4, !dbg !84
  %713 = or disjoint i32 %650, 48, !dbg !84
  %714 = getelementptr float, ptr addrspace(3) %653, i32 %713, !dbg !84
  %715 = bitcast float %583 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %714, <1 x i32> %715, i1 true) #4, !dbg !84
  %716 = or disjoint i32 %650, 112, !dbg !84
  %717 = lshr i32 %716, 4, !dbg !84
  %718 = and i32 %717, 244, !dbg !84
  %719 = getelementptr float, ptr addrspace(3) @global_smem, i32 %718, !dbg !84
  %720 = getelementptr float, ptr addrspace(3) %719, i32 %716, !dbg !84
  %721 = bitcast float %585 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %720, <1 x i32> %721, i1 true) #4, !dbg !84
  %722 = or disjoint i32 %650, 176, !dbg !84
  %723 = lshr i32 %722, 4, !dbg !84
  %724 = and i32 %723, 248, !dbg !84
  %725 = getelementptr float, ptr addrspace(3) @global_smem, i32 %724, !dbg !84
  %726 = getelementptr float, ptr addrspace(3) %725, i32 %722, !dbg !84
  %727 = bitcast float %587 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %726, <1 x i32> %727, i1 true) #4, !dbg !84
  %728 = or disjoint i32 %650, 240, !dbg !84
  %729 = lshr i32 %728, 4, !dbg !84
  %730 = and i32 %729, 252, !dbg !84
  %731 = getelementptr float, ptr addrspace(3) @global_smem, i32 %730, !dbg !84
  %732 = getelementptr float, ptr addrspace(3) %731, i32 %728, !dbg !84
  %733 = bitcast float %589 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %732, <1 x i32> %733, i1 true) #4, !dbg !84
  tail call void @llvm.nvvm.barrier0(), !dbg !84
  %734 = lshr i32 %23, 4, !dbg !84
  %735 = and i32 %734, 60, !dbg !84
  %736 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %735, !dbg !84
  %737 = getelementptr inbounds float, ptr addrspace(3) %736, i32 %651, !dbg !84
  %738 = or disjoint i32 %651, 1024, !dbg !84
  %739 = lshr i32 %738, 4, !dbg !84
  %740 = and i32 %739, 124, !dbg !84
  %741 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %740, !dbg !84
  %742 = getelementptr inbounds float, ptr addrspace(3) %741, i32 %738, !dbg !84
  %743 = load <4 x i32>, ptr addrspace(3) %742, align 16, !dbg !84
  %744 = or disjoint i32 %651, 2048, !dbg !84
  %745 = lshr i32 %744, 4, !dbg !84
  %746 = and i32 %745, 188, !dbg !84
  %747 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %746, !dbg !84
  %748 = getelementptr inbounds float, ptr addrspace(3) %747, i32 %744, !dbg !84
  %749 = load <4 x i32>, ptr addrspace(3) %748, align 16, !dbg !84
  %750 = or disjoint i32 %651, 3072, !dbg !84
  %751 = lshr i32 %750, 4, !dbg !84
  %752 = and i32 %751, 252, !dbg !84
  %753 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %752, !dbg !84
  %754 = getelementptr inbounds float, ptr addrspace(3) %753, i32 %750, !dbg !84
  %755 = load <4 x i32>, ptr addrspace(3) %754, align 16, !dbg !84
  %.extract = load i32, ptr addrspace(3) %737, align 16, !dbg !84
  %756 = getelementptr inbounds i8, ptr addrspace(3) %737, i32 4, !dbg !84
  %.extract16 = load i32, ptr addrspace(3) %756, align 4, !dbg !84
  %757 = getelementptr inbounds i8, ptr addrspace(3) %737, i32 8, !dbg !84
  %.extract17 = load i32, ptr addrspace(3) %757, align 8, !dbg !84
  %758 = getelementptr inbounds i8, ptr addrspace(3) %737, i32 12, !dbg !84
  %.extract18 = load i32, ptr addrspace(3) %758, align 4, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %641, i1 %610) #4, !dbg !84
  %.extract19 = extractelement <4 x i32> %743, i64 0, !dbg !84
  %.extract20 = extractelement <4 x i32> %743, i64 1, !dbg !84
  %.extract21 = extractelement <4 x i32> %743, i64 2, !dbg !84
  %.extract22 = extractelement <4 x i32> %743, i64 3, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %643, i1 %611) #4, !dbg !84
  %.extract23 = extractelement <4 x i32> %749, i64 0, !dbg !84
  %.extract24 = extractelement <4 x i32> %749, i64 1, !dbg !84
  %.extract25 = extractelement <4 x i32> %749, i64 2, !dbg !84
  %.extract26 = extractelement <4 x i32> %749, i64 3, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %645, i1 %612) #4, !dbg !84
  %.extract27 = extractelement <4 x i32> %755, i64 0, !dbg !84
  %.extract28 = extractelement <4 x i32> %755, i64 1, !dbg !84
  %.extract29 = extractelement <4 x i32> %755, i64 2, !dbg !84
  %.extract30 = extractelement <4 x i32> %755, i64 3, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %647, i1 %613) #4, !dbg !84
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py", directory: "inductor_cache/6s")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 31, scope: !7)
!21 = !DILocation(line: 32, column: 36, scope: !7)
!22 = !DILocation(line: 33, column: 31, scope: !7)
!23 = !DILocation(line: 33, column: 36, scope: !7)
!24 = !DILocation(line: 34, column: 31, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 36, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 41, column: 18, scope: !7)
!31 = !DILocation(line: 42, column: 34, scope: !7)
!32 = !DILocation(line: 42, column: 40, scope: !7)
!33 = !DILocation(line: 42, column: 30, scope: !7)
!34 = !DILocation(line: 42, column: 61, scope: !7)
!35 = !DILocation(line: 42, column: 46, scope: !7)
!36 = !DILocation(line: 46, column: 49, scope: !7)
!37 = !DILocation(line: 46, column: 40, scope: !7)
!38 = !DILocation(line: 46, column: 30, scope: !7)
!39 = !DILocation(line: 46, column: 62, scope: !7)
!40 = !DILocation(line: 46, column: 70, scope: !7)
!41 = !DILocation(line: 46, column: 55, scope: !7)
!42 = !DILocation(line: 47, column: 31, scope: !7)
!43 = !DILocation(line: 47, column: 56, scope: !7)
!44 = !DILocation(line: 50, column: 31, scope: !7)
!45 = !DILocation(line: 50, column: 80, scope: !7)
!46 = !DILocation(line: 53, column: 35, scope: !7)
!47 = !DILocation(line: 53, column: 41, scope: !7)
!48 = !DILocation(line: 53, column: 31, scope: !7)
!49 = !DILocation(line: 53, column: 56, scope: !7)
!50 = !DILocation(line: 47, column: 30, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!53 = !DILocation(line: 54, column: 23, scope: !7)
!54 = !DILocation(line: 47, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 47, column: 20, scope: !51, inlinedAt: !53)
!56 = !DILocation(line: 47, column: 16, scope: !51, inlinedAt: !53)
!57 = !DILocation(line: 62, column: 20, scope: !7)
!58 = !DILocation(line: 63, column: 27, scope: !7)
!59 = !DILocation(line: 31, column: 19, scope: !7)
!60 = !DILocation(line: 65, column: 20, scope: !7)
!61 = !DILocation(line: 49, column: 20, scope: !7)
!62 = !DILocation(line: 51, column: 20, scope: !7)
!63 = !DILocation(line: 52, column: 35, scope: !7)
!64 = !DILocation(line: 55, column: 20, scope: !7)
!65 = !DILocation(line: 56, column: 19, scope: !7)
!66 = !DILocation(line: 59, column: 33, scope: !7)
!67 = !DILocation(line: 60, column: 20, scope: !7)
!68 = !DILocation(line: 68, column: 20, scope: !7)
!69 = !DILocation(line: 69, column: 20, scope: !7)
!70 = !DILocation(line: 70, column: 20, scope: !7)
!71 = !DILocation(line: 72, column: 20, scope: !7)
!72 = !DILocation(line: 74, column: 35, scope: !7)
!73 = !DILocation(line: 73, column: 20, scope: !7)
!74 = !DILocation(line: 75, column: 34, scope: !7)
!75 = !DILocation(line: 75, column: 30, scope: !7)
!76 = !DILocation(line: 75, column: 25, scope: !7)
!77 = !DILocation(line: 75, column: 54, scope: !7)
!78 = !DILocation(line: 75, column: 46, scope: !7)
!79 = !DILocation(line: 76, column: 33, scope: !7)
!80 = !DILocation(line: 76, column: 44, scope: !7)
!81 = !DILocation(line: 76, column: 30, scope: !7)
!82 = !DILocation(line: 76, column: 38, scope: !7)
!83 = !DILocation(line: 76, column: 25, scope: !7)
!84 = !DILocation(line: 76, column: 56, scope: !7)
!85 = !DILocation(line: 76, column: 4, scope: !7)
