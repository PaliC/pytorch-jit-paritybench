; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 127, !dbg !12
  %15 = or disjoint i32 %14, 128, !dbg !12
  %16 = or disjoint i32 %14, 256, !dbg !12
  %17 = or disjoint i32 %14, 384, !dbg !12
  %18 = shl i32 %13, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = or disjoint i32 %12, %14, !dbg !13
  %21 = or disjoint i32 %12, %15, !dbg !13
  %22 = or disjoint i32 %12, %16, !dbg !13
  %23 = or disjoint i32 %12, %17, !dbg !13
  %24 = or disjoint i32 %12, %19, !dbg !13
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %26 = shl i32 %25, 1, !dbg !15
  %27 = or disjoint i32 %26, 1, !dbg !16
  %28 = icmp slt i32 %26, 2, !dbg !17
  %29 = icmp slt i32 %27, 2, !dbg !17
  %.frozen = freeze i32 %24, !dbg !18
  %30 = sdiv i32 %.frozen, 256, !dbg !18
  %31 = mul i32 %30, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %31, !dbg !19
  %32 = add i32 %20, %25, !dbg !20
  %33 = shl i32 %32, 1, !dbg !20
  %34 = add i32 %21, %25, !dbg !20
  %35 = shl i32 %34, 1, !dbg !20
  %36 = add i32 %22, %25, !dbg !20
  %37 = shl i32 %36, 1, !dbg !20
  %38 = add i32 %23, %25, !dbg !20
  %39 = shl i32 %38, 1, !dbg !20
  %40 = sext i32 %33 to i64, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !21
  %42 = sext i32 %35 to i64, !dbg !21
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !21
  %44 = sext i32 %37 to i64, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !21
  %46 = sext i32 %39 to i64, !dbg !21
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !21
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %28) #4, !dbg !22
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %28) #4, !dbg !22
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %28) #4, !dbg !22
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %28) #4, !dbg !22
  %52 = sext i32 %26 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !23
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 %28) #4, !dbg !24
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !25
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 %28) #4, !dbg !26
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !26
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !26
  %59 = bitcast i32 %57 to float, !dbg !26
  %60 = bitcast i32 %58 to float, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !27
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %28) #4, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !29
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %63, i1 %28) #4, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %5, i64 %52, !dbg !31
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 %28) #4, !dbg !32
  %67 = shl i32 %27, 8, !dbg !33
  %68 = shl i32 %30, 9, !dbg !34
  %69 = add i32 %68, %.decomposed, !dbg !35
  %70 = add i32 %30, %25, !dbg !36
  %71 = shl i32 %70, 9, !dbg !36
  %72 = add i32 %71, %.decomposed, !dbg !36
  %73 = add i32 %69, %67, !dbg !36
  %74 = sext i32 %72 to i64, !dbg !37
  %75 = getelementptr float, ptr addrspace(1) %6, i64 %74, !dbg !37
  %76 = sext i32 %73 to i64, !dbg !37
  %77 = getelementptr float, ptr addrspace(1) %6, i64 %76, !dbg !37
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %28) #4, !dbg !38
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %29) #4, !dbg !38
  %80 = fadd float %59, 0x3EE4F8B580000000, !dbg !39
  %81 = fadd float %60, 0x3EE4F8B580000000, !dbg !39
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i = icmp eq i32 %82, 0, !dbg !40
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %.not1.i = icmp eq i32 %83, 0, !dbg !40
  br i1 %.not.i, label %89, label %84, !dbg !40

84:                                               ; preds = %10
  br i1 %.not1.i, label %87, label %85, !dbg !40

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #4, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #4, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

89:                                               ; preds = %10
  br i1 %.not1.i, label %92, label %90, !dbg !40

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #4, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #4, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %85, %87, %90, %92
  %.0.i = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !40
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i8 = icmp eq i32 %94, 0, !dbg !40
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %.not1.i11 = icmp eq i32 %95, 0, !dbg !40
  br i1 %.not.i8, label %101, label %96, !dbg !40

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %99, label %97, !dbg !40

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #4, !dbg !40
  br label %__nv_sqrtf.exit12, !dbg !40

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #4, !dbg !40
  br label %__nv_sqrtf.exit12, !dbg !40

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %104, label %102, !dbg !40

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #4, !dbg !40
  br label %__nv_sqrtf.exit12, !dbg !40

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #4, !dbg !40
  br label %__nv_sqrtf.exit12, !dbg !40

__nv_sqrtf.exit12:                                ; preds = %97, %99, %102, %104
  %.0.i10 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !40
  %106 = extractvalue { i32, i32 } %51, 1, !dbg !22
  %107 = extractvalue { i32, i32 } %54, 1, !dbg !24
  %108 = extractvalue { i32, i32 } %51, 0, !dbg !22
  %109 = extractvalue { i32, i32 } %54, 0, !dbg !24
  %110 = extractvalue { i32, i32 } %50, 1, !dbg !22
  %111 = extractvalue { i32, i32 } %50, 0, !dbg !22
  %112 = extractvalue { i32, i32 } %49, 1, !dbg !22
  %113 = extractvalue { i32, i32 } %49, 0, !dbg !22
  %114 = extractvalue { i32, i32 } %48, 1, !dbg !22
  %115 = extractvalue { i32, i32 } %48, 0, !dbg !22
  %116 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !38
  %117 = bitcast i32 %116 to float, !dbg !38
  %118 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !38
  %119 = bitcast i32 %118 to float, !dbg !38
  %120 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !38
  %121 = bitcast i32 %120 to float, !dbg !38
  %122 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !38
  %123 = bitcast i32 %122 to float, !dbg !38
  %124 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !38
  %125 = bitcast i32 %124 to float, !dbg !38
  %126 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !38
  %127 = bitcast i32 %126 to float, !dbg !38
  %128 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !38
  %129 = bitcast i32 %128 to float, !dbg !38
  %130 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !38
  %131 = bitcast i32 %130 to float, !dbg !38
  %132 = extractvalue { i32, i32 } %66, 1, !dbg !32
  %133 = bitcast i32 %132 to float, !dbg !32
  %134 = extractvalue { i32, i32 } %66, 0, !dbg !32
  %135 = bitcast i32 %134 to float, !dbg !32
  %136 = extractvalue { i32, i32 } %64, 1, !dbg !30
  %137 = extractvalue { i32, i32 } %64, 0, !dbg !30
  %138 = extractvalue { i32, i32 } %62, 1, !dbg !28
  %139 = extractvalue { i32, i32 } %62, 0, !dbg !28
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !41
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !41
  %142 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !24
  %143 = insertelement <2 x i32> %142, i32 %109, i64 1, !dbg !24
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !24
  %145 = shufflevector <2 x float> %144, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !24
  %146 = insertelement <8 x i32> poison, i32 %106, i64 0, !dbg !22
  %147 = insertelement <8 x i32> %146, i32 %108, i64 1, !dbg !22
  %148 = insertelement <8 x i32> %147, i32 %110, i64 2, !dbg !22
  %149 = insertelement <8 x i32> %148, i32 %111, i64 3, !dbg !22
  %150 = insertelement <8 x i32> %149, i32 %112, i64 4, !dbg !22
  %151 = insertelement <8 x i32> %150, i32 %113, i64 5, !dbg !22
  %152 = insertelement <8 x i32> %151, i32 %114, i64 6, !dbg !22
  %153 = insertelement <8 x i32> %152, i32 %115, i64 7, !dbg !22
  %154 = bitcast <8 x i32> %153 to <8 x float>, !dbg !22
  %155 = fsub <8 x float> %154, %145, !dbg !42
  %156 = insertelement <2 x i32> poison, i32 %136, i64 0, !dbg !30
  %157 = insertelement <2 x i32> %156, i32 %137, i64 1, !dbg !30
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !30
  %159 = shufflevector <2 x float> %158, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !30
  %160 = insertelement <2 x i32> poison, i32 %138, i64 0, !dbg !28
  %161 = insertelement <2 x i32> %160, i32 %139, i64 1, !dbg !28
  %162 = bitcast <2 x i32> %161 to <2 x float>, !dbg !28
  %163 = shufflevector <2 x float> %162, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !28
  %164 = insertelement <8 x float> poison, float %141, i64 0, !dbg !43
  %165 = insertelement <8 x float> %164, float %140, i64 1, !dbg !43
  %166 = shufflevector <8 x float> %165, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !43
  %167 = fmul <8 x float> %155, %166, !dbg !43
  %168 = fmul <8 x float> %167, %163, !dbg !44
  %169 = fadd <8 x float> %168, %159, !dbg !45
  %170 = fcmp ogt <8 x float> %169, zeroinitializer, !dbg !46
  %171 = extractelement <8 x float> %169, i64 7, !dbg !47
  %172 = fmul float %171, %135, !dbg !48
  %173 = extractelement <8 x float> %169, i64 6, !dbg !47
  %174 = fmul float %173, %133, !dbg !48
  %175 = extractelement <8 x float> %169, i64 5, !dbg !47
  %176 = fmul float %175, %135, !dbg !48
  %177 = extractelement <8 x float> %169, i64 4, !dbg !47
  %178 = fmul float %177, %133, !dbg !48
  %179 = extractelement <8 x float> %169, i64 3, !dbg !47
  %180 = fmul float %179, %135, !dbg !48
  %181 = extractelement <8 x float> %169, i64 2, !dbg !47
  %182 = fmul float %181, %133, !dbg !48
  %183 = extractelement <8 x float> %169, i64 1, !dbg !47
  %184 = fmul float %183, %135, !dbg !48
  %185 = extractelement <8 x float> %169, i64 0, !dbg !47
  %186 = fmul float %185, %133, !dbg !48
  %187 = extractelement <8 x i1> %170, i64 7, !dbg !47
  %188 = select i1 %187, float %171, float %172, !dbg !47
  %189 = extractelement <8 x i1> %170, i64 6, !dbg !47
  %190 = select i1 %189, float %173, float %174, !dbg !47
  %191 = extractelement <8 x i1> %170, i64 5, !dbg !47
  %192 = select i1 %191, float %175, float %176, !dbg !47
  %193 = extractelement <8 x i1> %170, i64 4, !dbg !47
  %194 = select i1 %193, float %177, float %178, !dbg !47
  %195 = extractelement <8 x i1> %170, i64 3, !dbg !47
  %196 = select i1 %195, float %179, float %180, !dbg !47
  %197 = extractelement <8 x i1> %170, i64 2, !dbg !47
  %198 = select i1 %197, float %181, float %182, !dbg !47
  %199 = extractelement <8 x i1> %170, i64 1, !dbg !47
  %200 = select i1 %199, float %183, float %184, !dbg !47
  %201 = extractelement <8 x i1> %170, i64 0, !dbg !47
  %202 = select i1 %201, float %185, float %186, !dbg !47
  %203 = zext nneg i32 %14 to i64, !dbg !47
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %203, !dbg !47
  %205 = bitcast float %188 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %205, i1 true) #4, !dbg !47
  %206 = getelementptr inbounds i8, ptr addrspace(3) %204, i64 2064, !dbg !47
  %207 = bitcast float %190 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %207, i1 true) #4, !dbg !47
  %208 = zext nneg i32 %15 to i64, !dbg !47
  %209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %208, !dbg !47
  %210 = bitcast float %192 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #4, !dbg !47
  %211 = getelementptr inbounds i8, ptr addrspace(3) %204, i64 2576, !dbg !47
  %212 = bitcast float %194 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %212, i1 true) #4, !dbg !47
  %213 = zext nneg i32 %16 to i64, !dbg !47
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %213, !dbg !47
  %215 = bitcast float %196 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 true) #4, !dbg !47
  %216 = getelementptr inbounds i8, ptr addrspace(3) %204, i64 3088, !dbg !47
  %217 = bitcast float %198 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %217, i1 true) #4, !dbg !47
  %218 = zext nneg i32 %17 to i64, !dbg !47
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %218, !dbg !47
  %220 = bitcast float %200 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 true) #4, !dbg !47
  %221 = getelementptr inbounds i8, ptr addrspace(3) %204, i64 3600, !dbg !47
  %222 = bitcast float %202 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %222, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %223 = zext nneg i32 %19 to i64, !dbg !47
  %224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %223, !dbg !47
  %225 = load float, ptr addrspace(3) %224, align 16, !dbg !47
  %226 = getelementptr inbounds i8, ptr addrspace(3) %224, i64 4, !dbg !47
  %227 = load float, ptr addrspace(3) %226, align 4, !dbg !47
  %228 = getelementptr inbounds i8, ptr addrspace(3) %224, i64 8, !dbg !47
  %229 = load float, ptr addrspace(3) %228, align 8, !dbg !47
  %230 = getelementptr inbounds i8, ptr addrspace(3) %224, i64 12, !dbg !47
  %231 = load float, ptr addrspace(3) %230, align 4, !dbg !47
  %232 = or disjoint i32 %19, 512, !dbg !47
  %233 = zext nneg i32 %232 to i64, !dbg !47
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i64 %233, !dbg !47
  %235 = getelementptr i8, ptr addrspace(3) %234, i64 16, !dbg !47
  %236 = load float, ptr addrspace(3) %235, align 16, !dbg !47
  %237 = getelementptr i8, ptr addrspace(3) %234, i64 20, !dbg !47
  %238 = load float, ptr addrspace(3) %237, align 4, !dbg !47
  %239 = getelementptr i8, ptr addrspace(3) %234, i64 24, !dbg !47
  %240 = load float, ptr addrspace(3) %239, align 8, !dbg !47
  %241 = getelementptr i8, ptr addrspace(3) %234, i64 28, !dbg !47
  %242 = load float, ptr addrspace(3) %241, align 4, !dbg !47
  %243 = fadd float %225, %131, !dbg !49
  %244 = fadd float %227, %129, !dbg !49
  %245 = fadd float %229, %127, !dbg !49
  %246 = fadd float %231, %125, !dbg !49
  %247 = fadd float %236, %123, !dbg !49
  %248 = fadd float %238, %121, !dbg !49
  %249 = fadd float %240, %119, !dbg !49
  %250 = fadd float %242, %117, !dbg !49
  %251 = getelementptr float, ptr addrspace(1) %7, i64 %74, !dbg !50
  %252 = getelementptr float, ptr addrspace(1) %7, i64 %76, !dbg !50
  %253 = bitcast float %243 to i32, !dbg !51
  %254 = bitcast float %244 to i32, !dbg !51
  %255 = bitcast float %245 to i32, !dbg !51
  %256 = bitcast float %246 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %253, i32 %254, i32 %255, i32 %256, ptr addrspace(1) %251, i1 %28) #4, !dbg !51
  %257 = bitcast float %247 to i32, !dbg !51
  %258 = bitcast float %248 to i32, !dbg !51
  %259 = bitcast float %249 to i32, !dbg !51
  %260 = bitcast float %250 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %257, i32 %258, i32 %259, i32 %260, ptr addrspace(1) %252, i1 %29) #4, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cf7ngmalthsp2ker5pntizg64spnndx267usywyursud5osmuwf2.py", directory: "inductor_cache/f7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 42, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 37, column: 31, scope: !7)
!32 = !DILocation(line: 37, column: 36, scope: !7)
!33 = !DILocation(line: 38, column: 40, scope: !7)
!34 = !DILocation(line: 38, column: 49, scope: !7)
!35 = !DILocation(line: 38, column: 36, scope: !7)
!36 = !DILocation(line: 38, column: 45, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 54, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 26, scope: !7)
!41 = !DILocation(line: 44, column: 18, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 47, column: 19, scope: !7)
!44 = !DILocation(line: 48, column: 20, scope: !7)
!45 = !DILocation(line: 49, column: 20, scope: !7)
!46 = !DILocation(line: 51, column: 20, scope: !7)
!47 = !DILocation(line: 53, column: 35, scope: !7)
!48 = !DILocation(line: 52, column: 20, scope: !7)
!49 = !DILocation(line: 54, column: 20, scope: !7)
!50 = !DILocation(line: 55, column: 25, scope: !7)
!51 = !DILocation(line: 55, column: 55, scope: !7)
!52 = !DILocation(line: 55, column: 4, scope: !7)
