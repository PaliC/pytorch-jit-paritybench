; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mean_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.fr3 = freeze i32 %5, !dbg !11
  %6 = icmp slt i32 %.fr3, 16, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 2044, !dbg !12
  %10 = shl i32 %.fr3, 12, !dbg !13
  %11 = or disjoint i32 %10, %9
  %12 = sext i32 %11 to i64, !dbg !14
  %13 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !15
  br i1 %6, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %4
  %14 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %13, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !16
  %15 = or disjoint i64 %12, 2048, !dbg !17
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !15
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !16
  br label %.split2.us, !dbg !12

.split.us.preheader:                              ; preds = %4
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %13, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !16
  %23 = or disjoint i64 %12, 2048, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !15
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !16
  %30 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !16
  %31 = insertelement <2 x i32> %30, i32 %20, i64 1, !dbg !16
  %32 = bitcast <2 x i32> %31 to <2 x float>, !dbg !16
  %33 = fadd <2 x float> %32, zeroinitializer, !dbg !18
  %34 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !16
  %35 = insertelement <2 x i32> %34, i32 %27, i64 1, !dbg !16
  %36 = bitcast <2 x i32> %35 to <2 x float>, !dbg !16
  %37 = fadd <2 x float> %33, %36, !dbg !18
  %38 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !16
  %39 = insertelement <2 x i32> %38, i32 %21, i64 1, !dbg !16
  %40 = bitcast <2 x i32> %39 to <2 x float>, !dbg !16
  %41 = fadd <2 x float> %40, zeroinitializer, !dbg !18
  %42 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !16
  %43 = insertelement <2 x i32> %42, i32 %28, i64 1, !dbg !16
  %44 = bitcast <2 x i32> %43 to <2 x float>, !dbg !16
  %45 = fadd <2 x float> %41, %44, !dbg !18
  %shift = shufflevector <2 x float> %37, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !12
  %46 = fadd <2 x float> %37, %shift, !dbg !12
  %shift6 = shufflevector <2 x float> %45, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !12
  %47 = fadd <2 x float> %shift6, %46, !dbg !12
  %48 = fadd <2 x float> %45, %47, !dbg !12
  %49 = extractelement <2 x float> %48, i64 0, !dbg !12
  br label %.split2.us, !dbg !12

.split2.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %50 = phi float [ %49, %.split.us.preheader ], [ 0.000000e+00, %.split.preheader ], !dbg !19
  %51 = lshr i32 %7, 5, !dbg !12
  %52 = and i32 %7, 31, !dbg !12
  %53 = bitcast float %50 to i32, !dbg !24
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 16, i32 31), !dbg !24
  %55 = bitcast i32 %54 to float, !dbg !24
  %56 = fadd float %50, %55, !dbg !19
  %57 = bitcast float %56 to i32, !dbg !24
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 8, i32 31), !dbg !24
  %59 = bitcast i32 %58 to float, !dbg !24
  %60 = fadd float %56, %59, !dbg !19
  %61 = bitcast float %60 to i32, !dbg !24
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 4, i32 31), !dbg !24
  %63 = bitcast i32 %62 to float, !dbg !24
  %64 = fadd float %60, %63, !dbg !19
  %65 = bitcast float %64 to i32, !dbg !24
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 2, i32 31), !dbg !24
  %67 = bitcast i32 %66 to float, !dbg !24
  %68 = fadd float %64, %67, !dbg !19
  %69 = bitcast float %68 to i32, !dbg !24
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 1, i32 31), !dbg !24
  %71 = bitcast i32 %70 to float, !dbg !24
  %72 = fadd float %68, %71, !dbg !19
  %73 = icmp eq i32 %52, 0, !dbg !24
  %74 = and i32 %51, 15, !dbg !24
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !24
  %76 = bitcast float %72 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 %73) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %77 = icmp slt i32 %7, 16, !dbg !24
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !24
  %79 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %78, i1 %77) #3, !dbg !24
  %80 = bitcast i32 %79 to float, !dbg !24
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 8, i32 31), !dbg !24
  %82 = bitcast i32 %81 to float, !dbg !24
  %83 = fadd float %80, %82, !dbg !19
  %84 = bitcast float %83 to i32, !dbg !24
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 4, i32 31), !dbg !24
  %86 = bitcast i32 %85 to float, !dbg !24
  %87 = fadd float %83, %86, !dbg !19
  %88 = bitcast float %87 to i32, !dbg !24
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 2, i32 31), !dbg !24
  %90 = bitcast i32 %89 to float, !dbg !24
  %91 = fadd float %87, %90, !dbg !19
  %92 = bitcast float %91 to i32, !dbg !24
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 1, i32 31), !dbg !24
  %94 = bitcast i32 %93 to float, !dbg !24
  %95 = fadd float %91, %94, !dbg !19
  %96 = and i32 %7, 15, !dbg !24
  %97 = icmp eq i32 %96, 0, !dbg !24
  %98 = and i1 %77, %97, !dbg !24
  %99 = bitcast float %95 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %99, i1 %98) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %100 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float 4.096000e+03) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %102 = sext i32 %.fr3 to i64, !dbg !27
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !27
  %urem = and i32 %7, 511, !dbg !28
  %104 = icmp eq i32 %urem, 0, !dbg !28
  %105 = bitcast float %101 to i32, !dbg !28
  %106 = and i1 %104, %6, !dbg !28
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %105, ptr addrspace(1) %103, i1 %106) #3, !dbg !28
  ret void, !dbg !29
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwqd35lp22ypefzbeqjf6br7j6ueonpex75467e7sqv4nm43nsau.py", directory: "inductor_cache/wq")
!4 = !{ptr @triton_red_fused_mean_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mean_0, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mean_0", linkageName: "triton_red_fused_mean_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 44, scope: !7)
!14 = !DILocation(line: 28, column: 36, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 49, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 34, column: 23, scope: !7)
!19 = !DILocation(line: 256, column: 15, scope: !20, inlinedAt: !23)
!20 = distinct !DILexicalBlockFile(scope: !22, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!22 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!23 = !DILocation(line: 36, column: 25, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !22, inlinedAt: !23)
!25 = !DILocation(line: 38, column: 18, scope: !7)
!26 = !DILocation(line: 39, column: 4, scope: !7)
!27 = !DILocation(line: 40, column: 28, scope: !7)
!28 = !DILocation(line: 40, column: 39, scope: !7)
!29 = !DILocation(line: 40, column: 4, scope: !7)
