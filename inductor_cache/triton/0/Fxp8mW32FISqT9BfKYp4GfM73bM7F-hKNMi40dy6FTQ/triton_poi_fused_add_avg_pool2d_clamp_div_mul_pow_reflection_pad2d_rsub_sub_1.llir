; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_reflection_pad2d_rsub_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = icmp slt i32 %11, 400, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %14 = sdiv i32 %.frozen, 5, !dbg !15
  %15 = mul i32 %14, 5, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %.frozen3 = freeze i32 %12, !dbg !15
  %16 = sdiv i32 %.frozen3, 5, !dbg !15
  %17 = mul i32 %16, 5, !dbg !16
  %.decomposed4 = sub i32 %.frozen3, %17, !dbg !16
  %18 = srem i32 %14, 5, !dbg !17
  %19 = srem i32 %16, 5, !dbg !17
  %20 = sdiv i32 %11, 25, !dbg !18
  %21 = sdiv i32 %12, 25, !dbg !18
  %22 = shl nsw i32 %18, 3, !dbg !19
  %23 = shl nsw i32 %19, 3, !dbg !19
  %24 = shl i32 %20, 6, !dbg !20
  %25 = shl i32 %21, 6, !dbg !20
  %26 = add i32 %24, %.decomposed, !dbg !21
  %27 = add i32 %26, %22, !dbg !22
  %28 = add i32 %25, %.decomposed4, !dbg !21
  %29 = add i32 %28, %23, !dbg !22
  %30 = sext i32 %27 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !23
  %32 = sext i32 %29 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %13) #1, !dbg !24
  %35 = bitcast i32 %34 to float, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %13) #1, !dbg !24
  %37 = bitcast i32 %36 to float, !dbg !24
  %38 = add i32 %26, 1, !dbg !25
  %39 = add i32 %38, %22, !dbg !26
  %40 = add i32 %28, 1, !dbg !25
  %41 = add i32 %40, %23, !dbg !26
  %42 = sext i32 %39 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !27
  %44 = sext i32 %41 to i64, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !27
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %13) #1, !dbg !28
  %47 = bitcast i32 %46 to float, !dbg !28
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %13) #1, !dbg !28
  %49 = bitcast i32 %48 to float, !dbg !28
  %50 = add i32 %26, 2, !dbg !29
  %51 = add i32 %50, %22, !dbg !30
  %52 = add i32 %28, 2, !dbg !29
  %53 = add i32 %52, %23, !dbg !30
  %54 = sext i32 %51 to i64, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !31
  %56 = sext i32 %53 to i64, !dbg !31
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !31
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %13) #1, !dbg !32
  %59 = bitcast i32 %58 to float, !dbg !32
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %13) #1, !dbg !32
  %61 = bitcast i32 %60 to float, !dbg !32
  %62 = add i32 %26, 3, !dbg !33
  %63 = add i32 %62, %22, !dbg !34
  %64 = add i32 %28, 3, !dbg !33
  %65 = add i32 %64, %23, !dbg !34
  %66 = sext i32 %63 to i64, !dbg !35
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !35
  %68 = sext i32 %65 to i64, !dbg !35
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !35
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %13) #1, !dbg !36
  %71 = bitcast i32 %70 to float, !dbg !36
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %13) #1, !dbg !36
  %73 = bitcast i32 %72 to float, !dbg !36
  %74 = add i32 %26, 8, !dbg !37
  %75 = add i32 %74, %22, !dbg !38
  %76 = add i32 %28, 8, !dbg !37
  %77 = add i32 %76, %23, !dbg !38
  %78 = sext i32 %75 to i64, !dbg !39
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !39
  %80 = sext i32 %77 to i64, !dbg !39
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !39
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %13) #1, !dbg !40
  %83 = bitcast i32 %82 to float, !dbg !40
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %13) #1, !dbg !40
  %85 = bitcast i32 %84 to float, !dbg !40
  %86 = add i32 %26, 9, !dbg !41
  %87 = add i32 %86, %22, !dbg !42
  %88 = add i32 %28, 9, !dbg !41
  %89 = add i32 %88, %23, !dbg !42
  %90 = sext i32 %87 to i64, !dbg !43
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !43
  %92 = sext i32 %89 to i64, !dbg !43
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !43
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %13) #1, !dbg !44
  %95 = bitcast i32 %94 to float, !dbg !44
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %13) #1, !dbg !44
  %97 = bitcast i32 %96 to float, !dbg !44
  %98 = add i32 %26, 10, !dbg !45
  %99 = add i32 %98, %22, !dbg !46
  %100 = add i32 %28, 10, !dbg !45
  %101 = add i32 %100, %23, !dbg !46
  %102 = sext i32 %99 to i64, !dbg !47
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !47
  %104 = sext i32 %101 to i64, !dbg !47
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !47
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %13) #1, !dbg !48
  %107 = bitcast i32 %106 to float, !dbg !48
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %13) #1, !dbg !48
  %109 = bitcast i32 %108 to float, !dbg !48
  %110 = add i32 %26, 11, !dbg !49
  %111 = add i32 %110, %22, !dbg !50
  %112 = add i32 %28, 11, !dbg !49
  %113 = add i32 %112, %23, !dbg !50
  %114 = sext i32 %111 to i64, !dbg !51
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !51
  %116 = sext i32 %113 to i64, !dbg !51
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !51
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %13) #1, !dbg !52
  %119 = bitcast i32 %118 to float, !dbg !52
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %13) #1, !dbg !52
  %121 = bitcast i32 %120 to float, !dbg !52
  %122 = add i32 %26, 16, !dbg !53
  %123 = add i32 %122, %22, !dbg !54
  %124 = add i32 %28, 16, !dbg !53
  %125 = add i32 %124, %23, !dbg !54
  %126 = sext i32 %123 to i64, !dbg !55
  %127 = getelementptr float, ptr addrspace(1) %1, i64 %126, !dbg !55
  %128 = sext i32 %125 to i64, !dbg !55
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %128, !dbg !55
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %13) #1, !dbg !56
  %131 = bitcast i32 %130 to float, !dbg !56
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %13) #1, !dbg !56
  %133 = bitcast i32 %132 to float, !dbg !56
  %134 = add i32 %26, 17, !dbg !57
  %135 = add i32 %134, %22, !dbg !58
  %136 = add i32 %28, 17, !dbg !57
  %137 = add i32 %136, %23, !dbg !58
  %138 = sext i32 %135 to i64, !dbg !59
  %139 = getelementptr float, ptr addrspace(1) %1, i64 %138, !dbg !59
  %140 = sext i32 %137 to i64, !dbg !59
  %141 = getelementptr float, ptr addrspace(1) %1, i64 %140, !dbg !59
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %13) #1, !dbg !60
  %143 = bitcast i32 %142 to float, !dbg !60
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %13) #1, !dbg !60
  %145 = bitcast i32 %144 to float, !dbg !60
  %146 = add i32 %26, 18, !dbg !61
  %147 = add i32 %146, %22, !dbg !62
  %148 = add i32 %28, 18, !dbg !61
  %149 = add i32 %148, %23, !dbg !62
  %150 = sext i32 %147 to i64, !dbg !63
  %151 = getelementptr float, ptr addrspace(1) %1, i64 %150, !dbg !63
  %152 = sext i32 %149 to i64, !dbg !63
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %152, !dbg !63
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %13) #1, !dbg !64
  %155 = bitcast i32 %154 to float, !dbg !64
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %13) #1, !dbg !64
  %157 = bitcast i32 %156 to float, !dbg !64
  %158 = add i32 %26, 19, !dbg !65
  %159 = add i32 %158, %22, !dbg !66
  %160 = add i32 %28, 19, !dbg !65
  %161 = add i32 %160, %23, !dbg !66
  %162 = sext i32 %159 to i64, !dbg !67
  %163 = getelementptr float, ptr addrspace(1) %1, i64 %162, !dbg !67
  %164 = sext i32 %161 to i64, !dbg !67
  %165 = getelementptr float, ptr addrspace(1) %1, i64 %164, !dbg !67
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %13) #1, !dbg !68
  %167 = bitcast i32 %166 to float, !dbg !68
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %13) #1, !dbg !68
  %169 = bitcast i32 %168 to float, !dbg !68
  %170 = add i32 %26, 24, !dbg !69
  %171 = add i32 %170, %22, !dbg !70
  %172 = add i32 %28, 24, !dbg !69
  %173 = add i32 %172, %23, !dbg !70
  %174 = sext i32 %171 to i64, !dbg !71
  %175 = getelementptr float, ptr addrspace(1) %1, i64 %174, !dbg !71
  %176 = sext i32 %173 to i64, !dbg !71
  %177 = getelementptr float, ptr addrspace(1) %1, i64 %176, !dbg !71
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %13) #1, !dbg !72
  %179 = bitcast i32 %178 to float, !dbg !72
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %13) #1, !dbg !72
  %181 = bitcast i32 %180 to float, !dbg !72
  %182 = add i32 %26, 25, !dbg !73
  %183 = add i32 %182, %22, !dbg !74
  %184 = add i32 %28, 25, !dbg !73
  %185 = add i32 %184, %23, !dbg !74
  %186 = sext i32 %183 to i64, !dbg !75
  %187 = getelementptr float, ptr addrspace(1) %1, i64 %186, !dbg !75
  %188 = sext i32 %185 to i64, !dbg !75
  %189 = getelementptr float, ptr addrspace(1) %1, i64 %188, !dbg !75
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %13) #1, !dbg !76
  %191 = bitcast i32 %190 to float, !dbg !76
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 %13) #1, !dbg !76
  %193 = bitcast i32 %192 to float, !dbg !76
  %194 = add i32 %26, 26, !dbg !77
  %195 = add i32 %194, %22, !dbg !78
  %196 = add i32 %28, 26, !dbg !77
  %197 = add i32 %196, %23, !dbg !78
  %198 = sext i32 %195 to i64, !dbg !79
  %199 = getelementptr float, ptr addrspace(1) %1, i64 %198, !dbg !79
  %200 = sext i32 %197 to i64, !dbg !79
  %201 = getelementptr float, ptr addrspace(1) %1, i64 %200, !dbg !79
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 %13) #1, !dbg !80
  %203 = bitcast i32 %202 to float, !dbg !80
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %13) #1, !dbg !80
  %205 = bitcast i32 %204 to float, !dbg !80
  %206 = add i32 %26, 27, !dbg !81
  %207 = add i32 %206, %22, !dbg !82
  %208 = add i32 %28, 27, !dbg !81
  %209 = add i32 %208, %23, !dbg !82
  %210 = sext i32 %207 to i64, !dbg !83
  %211 = getelementptr float, ptr addrspace(1) %1, i64 %210, !dbg !83
  %212 = sext i32 %209 to i64, !dbg !83
  %213 = getelementptr float, ptr addrspace(1) %1, i64 %212, !dbg !83
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %211, i1 %13) #1, !dbg !84
  %215 = bitcast i32 %214 to float, !dbg !84
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %213, i1 %13) #1, !dbg !84
  %217 = bitcast i32 %216 to float, !dbg !84
  %218 = add nsw i32 %.decomposed, -2, !dbg !85
  %219 = add nsw i32 %.decomposed4, -2, !dbg !85
  %220 = tail call i32 @llvm.abs.i32(i32 %218, i1 true), !dbg !86
  %221 = tail call i32 @llvm.abs.i32(i32 %219, i1 true), !dbg !86
  %222 = add nsw i32 %220, -3, !dbg !87
  %223 = add nsw i32 %221, -3, !dbg !87
  %224 = tail call i32 @llvm.abs.i32(i32 %222, i1 true), !dbg !88
  %225 = tail call i32 @llvm.abs.i32(i32 %223, i1 true), !dbg !88
  %226 = sub nuw nsw i32 15, %224, !dbg !89
  %227 = sub nuw nsw i32 15, %225, !dbg !89
  %228 = add nsw i32 %18, -2, !dbg !90
  %229 = add nsw i32 %19, -2, !dbg !90
  %230 = tail call i32 @llvm.abs.i32(i32 %228, i1 true), !dbg !91
  %231 = tail call i32 @llvm.abs.i32(i32 %229, i1 true), !dbg !91
  %232 = add nsw i32 %230, -3, !dbg !92
  %233 = add nsw i32 %231, -3, !dbg !92
  %234 = tail call i32 @llvm.abs.i32(i32 %232, i1 true), !dbg !93
  %235 = tail call i32 @llvm.abs.i32(i32 %233, i1 true), !dbg !93
  %236 = mul nsw i32 %234, -4, !dbg !94
  %237 = mul nsw i32 %235, -4, !dbg !94
  %238 = shl nsw i32 %20, 4, !dbg !95
  %239 = shl nsw i32 %21, 4, !dbg !95
  %240 = or disjoint i32 %226, %238, !dbg !96
  %241 = add i32 %240, %236, !dbg !97
  %242 = or disjoint i32 %227, %239, !dbg !96
  %243 = add i32 %242, %237, !dbg !97
  %244 = sext i32 %241 to i64, !dbg !98
  %245 = getelementptr float, ptr addrspace(1) %2, i64 %244, !dbg !98
  %246 = sext i32 %243 to i64, !dbg !98
  %247 = getelementptr float, ptr addrspace(1) %2, i64 %246, !dbg !98
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %13) #1, !dbg !99
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %247, i1 %13) #1, !dbg !99
  %250 = add nsw i32 %.decomposed, -1, !dbg !100
  %251 = add nsw i32 %.decomposed4, -1, !dbg !100
  %252 = tail call i32 @llvm.abs.i32(i32 %250, i1 true), !dbg !101
  %253 = tail call i32 @llvm.abs.i32(i32 %251, i1 true), !dbg !101
  %254 = add nsw i32 %252, -3, !dbg !102
  %255 = add nsw i32 %253, -3, !dbg !102
  %256 = tail call i32 @llvm.abs.i32(i32 %254, i1 true), !dbg !103
  %257 = tail call i32 @llvm.abs.i32(i32 %255, i1 true), !dbg !103
  %258 = sub nuw nsw i32 15, %256, !dbg !104
  %259 = sub nuw nsw i32 15, %257, !dbg !104
  %260 = or disjoint i32 %258, %238, !dbg !105
  %261 = add i32 %260, %236, !dbg !106
  %262 = or disjoint i32 %259, %239, !dbg !105
  %263 = add i32 %262, %237, !dbg !106
  %264 = sext i32 %261 to i64, !dbg !107
  %265 = getelementptr float, ptr addrspace(1) %2, i64 %264, !dbg !107
  %266 = sext i32 %263 to i64, !dbg !107
  %267 = getelementptr float, ptr addrspace(1) %2, i64 %266, !dbg !107
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %265, i1 %13) #1, !dbg !108
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %267, i1 %13) #1, !dbg !108
  %270 = add nsw i32 %.decomposed, -3, !dbg !109
  %271 = add nsw i32 %.decomposed4, -3, !dbg !109
  %272 = tail call i32 @llvm.abs.i32(i32 %270, i1 true), !dbg !110
  %273 = tail call i32 @llvm.abs.i32(i32 %271, i1 true), !dbg !110
  %274 = sub nuw nsw i32 15, %272, !dbg !111
  %275 = sub nuw nsw i32 15, %273, !dbg !111
  %276 = or disjoint i32 %274, %238, !dbg !112
  %277 = add i32 %276, %236, !dbg !113
  %278 = or disjoint i32 %275, %239, !dbg !112
  %279 = add i32 %278, %237, !dbg !113
  %280 = sext i32 %277 to i64, !dbg !114
  %281 = getelementptr float, ptr addrspace(1) %2, i64 %280, !dbg !114
  %282 = sext i32 %279 to i64, !dbg !114
  %283 = getelementptr float, ptr addrspace(1) %2, i64 %282, !dbg !114
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %281, i1 %13) #1, !dbg !115
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %283, i1 %13) #1, !dbg !115
  %286 = sub nuw nsw i32 15, %220, !dbg !116
  %287 = sub nuw nsw i32 15, %221, !dbg !116
  %288 = or disjoint i32 %286, %238, !dbg !117
  %289 = add i32 %288, %236, !dbg !118
  %290 = or disjoint i32 %287, %239, !dbg !117
  %291 = add i32 %290, %237, !dbg !118
  %292 = sext i32 %289 to i64, !dbg !119
  %293 = getelementptr float, ptr addrspace(1) %2, i64 %292, !dbg !119
  %294 = sext i32 %291 to i64, !dbg !119
  %295 = getelementptr float, ptr addrspace(1) %2, i64 %294, !dbg !119
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %293, i1 %13) #1, !dbg !120
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %295, i1 %13) #1, !dbg !120
  %298 = add nsw i32 %18, -1, !dbg !121
  %299 = add nsw i32 %19, -1, !dbg !121
  %300 = tail call i32 @llvm.abs.i32(i32 %298, i1 true), !dbg !122
  %301 = tail call i32 @llvm.abs.i32(i32 %299, i1 true), !dbg !122
  %302 = add nsw i32 %300, -3, !dbg !123
  %303 = add nsw i32 %301, -3, !dbg !123
  %304 = tail call i32 @llvm.abs.i32(i32 %302, i1 true), !dbg !124
  %305 = tail call i32 @llvm.abs.i32(i32 %303, i1 true), !dbg !124
  %306 = mul nsw i32 %304, -4, !dbg !125
  %307 = mul nsw i32 %305, -4, !dbg !125
  %308 = add i32 %240, %306, !dbg !126
  %309 = add i32 %242, %307, !dbg !126
  %310 = sext i32 %308 to i64, !dbg !127
  %311 = getelementptr float, ptr addrspace(1) %2, i64 %310, !dbg !127
  %312 = sext i32 %309 to i64, !dbg !127
  %313 = getelementptr float, ptr addrspace(1) %2, i64 %312, !dbg !127
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %311, i1 %13) #1, !dbg !128
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %313, i1 %13) #1, !dbg !128
  %316 = add i32 %260, %306, !dbg !129
  %317 = add i32 %262, %307, !dbg !129
  %318 = sext i32 %316 to i64, !dbg !130
  %319 = getelementptr float, ptr addrspace(1) %2, i64 %318, !dbg !130
  %320 = sext i32 %317 to i64, !dbg !130
  %321 = getelementptr float, ptr addrspace(1) %2, i64 %320, !dbg !130
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %319, i1 %13) #1, !dbg !131
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %321, i1 %13) #1, !dbg !131
  %324 = add i32 %276, %306, !dbg !132
  %325 = add i32 %278, %307, !dbg !132
  %326 = sext i32 %324 to i64, !dbg !133
  %327 = getelementptr float, ptr addrspace(1) %2, i64 %326, !dbg !133
  %328 = sext i32 %325 to i64, !dbg !133
  %329 = getelementptr float, ptr addrspace(1) %2, i64 %328, !dbg !133
  %330 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %327, i1 %13) #1, !dbg !134
  %331 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %329, i1 %13) #1, !dbg !134
  %332 = add i32 %288, %306, !dbg !135
  %333 = add i32 %290, %307, !dbg !135
  %334 = sext i32 %332 to i64, !dbg !136
  %335 = getelementptr float, ptr addrspace(1) %2, i64 %334, !dbg !136
  %336 = sext i32 %333 to i64, !dbg !136
  %337 = getelementptr float, ptr addrspace(1) %2, i64 %336, !dbg !136
  %338 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %335, i1 %13) #1, !dbg !137
  %339 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %337, i1 %13) #1, !dbg !137
  %340 = add nsw i32 %18, -3, !dbg !138
  %341 = add nsw i32 %19, -3, !dbg !138
  %342 = tail call i32 @llvm.abs.i32(i32 %340, i1 true), !dbg !139
  %343 = tail call i32 @llvm.abs.i32(i32 %341, i1 true), !dbg !139
  %344 = mul nsw i32 %342, -4, !dbg !140
  %345 = mul nsw i32 %343, -4, !dbg !140
  %346 = add nsw i32 %344, %238, !dbg !141
  %347 = add nsw i32 %346, %226, !dbg !142
  %348 = add nsw i32 %345, %239, !dbg !141
  %349 = add nsw i32 %348, %227, !dbg !142
  %350 = sext i32 %347 to i64, !dbg !143
  %351 = getelementptr float, ptr addrspace(1) %2, i64 %350, !dbg !143
  %352 = sext i32 %349 to i64, !dbg !143
  %353 = getelementptr float, ptr addrspace(1) %2, i64 %352, !dbg !143
  %354 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %351, i1 %13) #1, !dbg !144
  %355 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %353, i1 %13) #1, !dbg !144
  %356 = add nsw i32 %346, %258, !dbg !145
  %357 = add nsw i32 %348, %259, !dbg !145
  %358 = sext i32 %356 to i64, !dbg !146
  %359 = getelementptr float, ptr addrspace(1) %2, i64 %358, !dbg !146
  %360 = sext i32 %357 to i64, !dbg !146
  %361 = getelementptr float, ptr addrspace(1) %2, i64 %360, !dbg !146
  %362 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %359, i1 %13) #1, !dbg !147
  %363 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %361, i1 %13) #1, !dbg !147
  %364 = add i32 %276, %344, !dbg !148
  %365 = add i32 %278, %345, !dbg !148
  %366 = sext i32 %364 to i64, !dbg !149
  %367 = getelementptr float, ptr addrspace(1) %2, i64 %366, !dbg !149
  %368 = sext i32 %365 to i64, !dbg !149
  %369 = getelementptr float, ptr addrspace(1) %2, i64 %368, !dbg !149
  %370 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %367, i1 %13) #1, !dbg !150
  %371 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %369, i1 %13) #1, !dbg !150
  %372 = add i32 %288, %344, !dbg !151
  %373 = add i32 %290, %345, !dbg !151
  %374 = sext i32 %372 to i64, !dbg !152
  %375 = getelementptr float, ptr addrspace(1) %2, i64 %374, !dbg !152
  %376 = sext i32 %373 to i64, !dbg !152
  %377 = getelementptr float, ptr addrspace(1) %2, i64 %376, !dbg !152
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %375, i1 %13) #1, !dbg !153
  %379 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %377, i1 %13) #1, !dbg !153
  %380 = mul nsw i32 %230, -4, !dbg !154
  %381 = mul nsw i32 %231, -4, !dbg !154
  %382 = add nsw i32 %380, %238, !dbg !155
  %383 = add nsw i32 %382, %226, !dbg !156
  %384 = add nsw i32 %381, %239, !dbg !155
  %385 = add nsw i32 %384, %227, !dbg !156
  %386 = sext i32 %383 to i64, !dbg !157
  %387 = getelementptr float, ptr addrspace(1) %2, i64 %386, !dbg !157
  %388 = sext i32 %385 to i64, !dbg !157
  %389 = getelementptr float, ptr addrspace(1) %2, i64 %388, !dbg !157
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %387, i1 %13) #1, !dbg !158
  %391 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %389, i1 %13) #1, !dbg !158
  %392 = add nsw i32 %382, %258, !dbg !159
  %393 = add nsw i32 %384, %259, !dbg !159
  %394 = sext i32 %392 to i64, !dbg !160
  %395 = getelementptr float, ptr addrspace(1) %2, i64 %394, !dbg !160
  %396 = sext i32 %393 to i64, !dbg !160
  %397 = getelementptr float, ptr addrspace(1) %2, i64 %396, !dbg !160
  %398 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %395, i1 %13) #1, !dbg !161
  %399 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %397, i1 %13) #1, !dbg !161
  %400 = add i32 %276, %380, !dbg !162
  %401 = add i32 %278, %381, !dbg !162
  %402 = sext i32 %400 to i64, !dbg !163
  %403 = getelementptr float, ptr addrspace(1) %2, i64 %402, !dbg !163
  %404 = sext i32 %401 to i64, !dbg !163
  %405 = getelementptr float, ptr addrspace(1) %2, i64 %404, !dbg !163
  %406 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %403, i1 %13) #1, !dbg !164
  %407 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %405, i1 %13) #1, !dbg !164
  %408 = add i32 %288, %380, !dbg !165
  %409 = add i32 %290, %381, !dbg !165
  %410 = sext i32 %408 to i64, !dbg !166
  %411 = getelementptr float, ptr addrspace(1) %2, i64 %410, !dbg !166
  %412 = sext i32 %409 to i64, !dbg !166
  %413 = getelementptr float, ptr addrspace(1) %2, i64 %412, !dbg !166
  %414 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %411, i1 %13) #1, !dbg !167
  %415 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %413, i1 %13) #1, !dbg !167
  %416 = getelementptr float, ptr addrspace(1) %3, i64 %244, !dbg !168
  %417 = getelementptr float, ptr addrspace(1) %3, i64 %246, !dbg !168
  %418 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %416, i1 %13) #1, !dbg !169
  %419 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %417, i1 %13) #1, !dbg !169
  %420 = getelementptr float, ptr addrspace(1) %3, i64 %264, !dbg !170
  %421 = getelementptr float, ptr addrspace(1) %3, i64 %266, !dbg !170
  %422 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %420, i1 %13) #1, !dbg !171
  %423 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %421, i1 %13) #1, !dbg !171
  %424 = getelementptr float, ptr addrspace(1) %3, i64 %280, !dbg !172
  %425 = getelementptr float, ptr addrspace(1) %3, i64 %282, !dbg !172
  %426 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %424, i1 %13) #1, !dbg !173
  %427 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %425, i1 %13) #1, !dbg !173
  %428 = getelementptr float, ptr addrspace(1) %3, i64 %292, !dbg !174
  %429 = getelementptr float, ptr addrspace(1) %3, i64 %294, !dbg !174
  %430 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %428, i1 %13) #1, !dbg !175
  %431 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %429, i1 %13) #1, !dbg !175
  %432 = getelementptr float, ptr addrspace(1) %3, i64 %310, !dbg !176
  %433 = getelementptr float, ptr addrspace(1) %3, i64 %312, !dbg !176
  %434 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %432, i1 %13) #1, !dbg !177
  %435 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %433, i1 %13) #1, !dbg !177
  %436 = getelementptr float, ptr addrspace(1) %3, i64 %318, !dbg !178
  %437 = getelementptr float, ptr addrspace(1) %3, i64 %320, !dbg !178
  %438 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %436, i1 %13) #1, !dbg !179
  %439 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %437, i1 %13) #1, !dbg !179
  %440 = getelementptr float, ptr addrspace(1) %3, i64 %326, !dbg !180
  %441 = getelementptr float, ptr addrspace(1) %3, i64 %328, !dbg !180
  %442 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %440, i1 %13) #1, !dbg !181
  %443 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %441, i1 %13) #1, !dbg !181
  %444 = getelementptr float, ptr addrspace(1) %3, i64 %334, !dbg !182
  %445 = getelementptr float, ptr addrspace(1) %3, i64 %336, !dbg !182
  %446 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %444, i1 %13) #1, !dbg !183
  %447 = insertelement <2 x i32> poison, i32 %338, i64 0, !dbg !137
  %448 = insertelement <2 x i32> %447, i32 %446, i64 1, !dbg !137
  %449 = bitcast <2 x i32> %448 to <2 x float>, !dbg !137
  %450 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %445, i1 %13) #1, !dbg !183
  %451 = insertelement <2 x i32> poison, i32 %339, i64 0, !dbg !137
  %452 = insertelement <2 x i32> %451, i32 %450, i64 1, !dbg !137
  %453 = bitcast <2 x i32> %452 to <2 x float>, !dbg !137
  %454 = getelementptr float, ptr addrspace(1) %3, i64 %350, !dbg !184
  %455 = getelementptr float, ptr addrspace(1) %3, i64 %352, !dbg !184
  %456 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %454, i1 %13) #1, !dbg !185
  %457 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %455, i1 %13) #1, !dbg !185
  %458 = getelementptr float, ptr addrspace(1) %3, i64 %358, !dbg !186
  %459 = getelementptr float, ptr addrspace(1) %3, i64 %360, !dbg !186
  %460 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %458, i1 %13) #1, !dbg !187
  %461 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %459, i1 %13) #1, !dbg !187
  %462 = getelementptr float, ptr addrspace(1) %3, i64 %366, !dbg !188
  %463 = getelementptr float, ptr addrspace(1) %3, i64 %368, !dbg !188
  %464 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %462, i1 %13) #1, !dbg !189
  %465 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %463, i1 %13) #1, !dbg !189
  %466 = getelementptr float, ptr addrspace(1) %3, i64 %374, !dbg !190
  %467 = getelementptr float, ptr addrspace(1) %3, i64 %376, !dbg !190
  %468 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %466, i1 %13) #1, !dbg !191
  %469 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %467, i1 %13) #1, !dbg !191
  %470 = getelementptr float, ptr addrspace(1) %3, i64 %386, !dbg !192
  %471 = getelementptr float, ptr addrspace(1) %3, i64 %388, !dbg !192
  %472 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %470, i1 %13) #1, !dbg !193
  %473 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %471, i1 %13) #1, !dbg !193
  %474 = getelementptr float, ptr addrspace(1) %3, i64 %394, !dbg !194
  %475 = getelementptr float, ptr addrspace(1) %3, i64 %396, !dbg !194
  %476 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %474, i1 %13) #1, !dbg !195
  %477 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %475, i1 %13) #1, !dbg !195
  %478 = getelementptr float, ptr addrspace(1) %3, i64 %402, !dbg !196
  %479 = getelementptr float, ptr addrspace(1) %3, i64 %404, !dbg !196
  %480 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %478, i1 %13) #1, !dbg !197
  %481 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %479, i1 %13) #1, !dbg !197
  %482 = getelementptr float, ptr addrspace(1) %3, i64 %410, !dbg !198
  %483 = getelementptr float, ptr addrspace(1) %3, i64 %412, !dbg !198
  %484 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %482, i1 %13) #1, !dbg !199
  %485 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %483, i1 %13) #1, !dbg !199
  %486 = fadd float %35, %47, !dbg !200
  %487 = fadd float %37, %49, !dbg !200
  %488 = fadd float %486, %59, !dbg !201
  %489 = fadd float %487, %61, !dbg !201
  %490 = fadd float %488, %71, !dbg !202
  %491 = fadd float %489, %73, !dbg !202
  %492 = fadd float %490, %83, !dbg !203
  %493 = fadd float %491, %85, !dbg !203
  %494 = fadd float %492, %95, !dbg !204
  %495 = fadd float %493, %97, !dbg !204
  %496 = fadd float %494, %107, !dbg !205
  %497 = fadd float %495, %109, !dbg !205
  %498 = fadd float %496, %119, !dbg !206
  %499 = fadd float %497, %121, !dbg !206
  %500 = fadd float %498, %131, !dbg !207
  %501 = fadd float %499, %133, !dbg !207
  %502 = fadd float %500, %143, !dbg !208
  %503 = fadd float %501, %145, !dbg !208
  %504 = fadd float %502, %155, !dbg !209
  %505 = fadd float %503, %157, !dbg !209
  %506 = fadd float %504, %167, !dbg !210
  %507 = fadd float %505, %169, !dbg !210
  %508 = fadd float %506, %179, !dbg !211
  %509 = fadd float %507, %181, !dbg !211
  %510 = fadd float %508, %191, !dbg !212
  %511 = fadd float %509, %193, !dbg !212
  %512 = fadd float %510, %203, !dbg !213
  %513 = fadd float %511, %205, !dbg !213
  %514 = fadd float %512, %215, !dbg !214
  %515 = fadd float %513, %217, !dbg !214
  %516 = fmul float %514, 6.250000e-02, !dbg !215
  %517 = fmul float %515, 6.250000e-02, !dbg !215
  %518 = insertelement <2 x i32> poison, i32 %248, i64 0, !dbg !99
  %519 = insertelement <2 x i32> %518, i32 %418, i64 1, !dbg !99
  %520 = bitcast <2 x i32> %519 to <2 x float>, !dbg !99
  %521 = insertelement <2 x i32> poison, i32 %268, i64 0, !dbg !108
  %522 = insertelement <2 x i32> %521, i32 %422, i64 1, !dbg !108
  %523 = bitcast <2 x i32> %522 to <2 x float>, !dbg !108
  %524 = insertelement <2 x i32> poison, i32 %284, i64 0, !dbg !115
  %525 = insertelement <2 x i32> %524, i32 %426, i64 1, !dbg !115
  %526 = bitcast <2 x i32> %525 to <2 x float>, !dbg !115
  %527 = insertelement <2 x i32> poison, i32 %296, i64 0, !dbg !120
  %528 = insertelement <2 x i32> %527, i32 %430, i64 1, !dbg !120
  %529 = bitcast <2 x i32> %528 to <2 x float>, !dbg !120
  %530 = insertelement <2 x i32> poison, i32 %314, i64 0, !dbg !128
  %531 = insertelement <2 x i32> %530, i32 %434, i64 1, !dbg !128
  %532 = bitcast <2 x i32> %531 to <2 x float>, !dbg !128
  %533 = insertelement <2 x i32> poison, i32 %322, i64 0, !dbg !131
  %534 = insertelement <2 x i32> %533, i32 %438, i64 1, !dbg !131
  %535 = bitcast <2 x i32> %534 to <2 x float>, !dbg !131
  %536 = insertelement <2 x i32> poison, i32 %330, i64 0, !dbg !134
  %537 = insertelement <2 x i32> %536, i32 %442, i64 1, !dbg !134
  %538 = bitcast <2 x i32> %537 to <2 x float>, !dbg !134
  %539 = fmul <2 x float> %538, %538, !dbg !216
  %540 = fadd <2 x float> %520, %523, !dbg !217
  %541 = fadd <2 x float> %540, %526, !dbg !218
  %542 = fadd <2 x float> %541, %529, !dbg !219
  %543 = fadd <2 x float> %542, %532, !dbg !220
  %544 = fadd <2 x float> %543, %535, !dbg !221
  %545 = fadd <2 x float> %544, %538, !dbg !222
  %546 = fmul <2 x float> %520, %520, !dbg !223
  %547 = fmul <2 x float> %523, %523, !dbg !224
  %548 = fadd <2 x float> %546, %547, !dbg !225
  %549 = fmul <2 x float> %526, %526, !dbg !226
  %550 = fadd <2 x float> %548, %549, !dbg !227
  %551 = fmul <2 x float> %529, %529, !dbg !228
  %552 = fadd <2 x float> %550, %551, !dbg !229
  %553 = fmul <2 x float> %532, %532, !dbg !230
  %554 = fadd <2 x float> %552, %553, !dbg !231
  %555 = fmul <2 x float> %535, %535, !dbg !232
  %556 = fadd <2 x float> %554, %555, !dbg !233
  %557 = insertelement <2 x i32> poison, i32 %249, i64 0, !dbg !99
  %558 = insertelement <2 x i32> %557, i32 %419, i64 1, !dbg !99
  %559 = bitcast <2 x i32> %558 to <2 x float>, !dbg !99
  %560 = insertelement <2 x i32> poison, i32 %269, i64 0, !dbg !108
  %561 = insertelement <2 x i32> %560, i32 %423, i64 1, !dbg !108
  %562 = bitcast <2 x i32> %561 to <2 x float>, !dbg !108
  %563 = insertelement <2 x i32> poison, i32 %285, i64 0, !dbg !115
  %564 = insertelement <2 x i32> %563, i32 %427, i64 1, !dbg !115
  %565 = bitcast <2 x i32> %564 to <2 x float>, !dbg !115
  %566 = insertelement <2 x i32> poison, i32 %297, i64 0, !dbg !120
  %567 = insertelement <2 x i32> %566, i32 %431, i64 1, !dbg !120
  %568 = bitcast <2 x i32> %567 to <2 x float>, !dbg !120
  %569 = insertelement <2 x i32> poison, i32 %315, i64 0, !dbg !128
  %570 = insertelement <2 x i32> %569, i32 %435, i64 1, !dbg !128
  %571 = bitcast <2 x i32> %570 to <2 x float>, !dbg !128
  %572 = insertelement <2 x i32> poison, i32 %323, i64 0, !dbg !131
  %573 = insertelement <2 x i32> %572, i32 %439, i64 1, !dbg !131
  %574 = bitcast <2 x i32> %573 to <2 x float>, !dbg !131
  %575 = insertelement <2 x i32> poison, i32 %331, i64 0, !dbg !134
  %576 = insertelement <2 x i32> %575, i32 %443, i64 1, !dbg !134
  %577 = bitcast <2 x i32> %576 to <2 x float>, !dbg !134
  %578 = fmul <2 x float> %577, %577, !dbg !216
  %579 = fadd <2 x float> %559, %562, !dbg !217
  %580 = fadd <2 x float> %579, %565, !dbg !218
  %581 = fadd <2 x float> %580, %568, !dbg !219
  %582 = fadd <2 x float> %581, %571, !dbg !220
  %583 = fadd <2 x float> %582, %574, !dbg !221
  %584 = fadd <2 x float> %583, %577, !dbg !222
  %585 = fmul <2 x float> %559, %559, !dbg !223
  %586 = fmul <2 x float> %562, %562, !dbg !224
  %587 = fadd <2 x float> %585, %586, !dbg !225
  %588 = fmul <2 x float> %565, %565, !dbg !226
  %589 = fadd <2 x float> %587, %588, !dbg !227
  %590 = fmul <2 x float> %568, %568, !dbg !228
  %591 = fadd <2 x float> %589, %590, !dbg !229
  %592 = fmul <2 x float> %571, %571, !dbg !230
  %593 = fadd <2 x float> %591, %592, !dbg !231
  %594 = fmul <2 x float> %574, %574, !dbg !232
  %595 = fadd <2 x float> %593, %594, !dbg !233
  %596 = fmul <2 x float> %538, %538, !dbg !234
  %597 = fmul <2 x float> %577, %577, !dbg !234
  %598 = insertelement <2 x i32> poison, i32 %354, i64 0, !dbg !144
  %599 = insertelement <2 x i32> %598, i32 %456, i64 1, !dbg !144
  %600 = bitcast <2 x i32> %599 to <2 x float>, !dbg !144
  %601 = insertelement <2 x i32> poison, i32 %362, i64 0, !dbg !147
  %602 = insertelement <2 x i32> %601, i32 %460, i64 1, !dbg !147
  %603 = bitcast <2 x i32> %602 to <2 x float>, !dbg !147
  %604 = insertelement <2 x i32> poison, i32 %370, i64 0, !dbg !150
  %605 = insertelement <2 x i32> %604, i32 %464, i64 1, !dbg !150
  %606 = bitcast <2 x i32> %605 to <2 x float>, !dbg !150
  %607 = insertelement <2 x i32> poison, i32 %378, i64 0, !dbg !153
  %608 = insertelement <2 x i32> %607, i32 %468, i64 1, !dbg !153
  %609 = bitcast <2 x i32> %608 to <2 x float>, !dbg !153
  %610 = insertelement <2 x i32> poison, i32 %390, i64 0, !dbg !158
  %611 = insertelement <2 x i32> %610, i32 %472, i64 1, !dbg !158
  %612 = bitcast <2 x i32> %611 to <2 x float>, !dbg !158
  %613 = insertelement <2 x i32> poison, i32 %398, i64 0, !dbg !161
  %614 = insertelement <2 x i32> %613, i32 %476, i64 1, !dbg !161
  %615 = bitcast <2 x i32> %614 to <2 x float>, !dbg !161
  %616 = insertelement <2 x i32> poison, i32 %406, i64 0, !dbg !164
  %617 = insertelement <2 x i32> %616, i32 %480, i64 1, !dbg !164
  %618 = bitcast <2 x i32> %617 to <2 x float>, !dbg !164
  %619 = insertelement <2 x i32> poison, i32 %414, i64 0, !dbg !167
  %620 = insertelement <2 x i32> %619, i32 %484, i64 1, !dbg !167
  %621 = bitcast <2 x i32> %620 to <2 x float>, !dbg !167
  %622 = fadd <2 x float> %545, %449, !dbg !235
  %623 = fadd <2 x float> %622, %600, !dbg !236
  %624 = fadd <2 x float> %623, %603, !dbg !237
  %625 = fadd <2 x float> %624, %606, !dbg !238
  %626 = fadd <2 x float> %625, %609, !dbg !239
  %627 = fadd <2 x float> %626, %612, !dbg !240
  %628 = fadd <2 x float> %627, %615, !dbg !241
  %629 = fadd <2 x float> %628, %618, !dbg !242
  %630 = fadd <2 x float> %629, %621, !dbg !243
  %631 = fmul <2 x float> %630, splat (float 6.250000e-02), !dbg !244
  %632 = shufflevector <2 x float> %539, <2 x float> %596, <2 x i32> <i32 0, i32 3>, !dbg !245
  %633 = fadd <2 x float> %556, %632, !dbg !245
  %634 = fmul <2 x float> %449, %449, !dbg !246
  %635 = fadd <2 x float> %633, %634, !dbg !247
  %636 = fmul <2 x float> %600, %600, !dbg !248
  %637 = fadd <2 x float> %635, %636, !dbg !249
  %638 = fmul <2 x float> %603, %603, !dbg !250
  %639 = fadd <2 x float> %637, %638, !dbg !251
  %640 = fmul <2 x float> %606, %606, !dbg !252
  %641 = fadd <2 x float> %639, %640, !dbg !253
  %642 = fmul <2 x float> %609, %609, !dbg !254
  %643 = fadd <2 x float> %641, %642, !dbg !255
  %644 = fmul <2 x float> %612, %612, !dbg !256
  %645 = fadd <2 x float> %643, %644, !dbg !257
  %646 = fmul <2 x float> %615, %615, !dbg !258
  %647 = fadd <2 x float> %645, %646, !dbg !259
  %648 = fmul <2 x float> %618, %618, !dbg !260
  %649 = fadd <2 x float> %647, %648, !dbg !261
  %650 = fmul <2 x float> %621, %621, !dbg !262
  %651 = fadd <2 x float> %649, %650, !dbg !263
  %652 = fmul <2 x float> %651, splat (float 6.250000e-02), !dbg !264
  %653 = extractelement <2 x float> %631, i64 0, !dbg !265
  %654 = fmul float %653, 2.000000e+00, !dbg !266
  %655 = extractelement <2 x float> %631, i64 1, !dbg !265
  %656 = fmul float %654, %655, !dbg !267
  %657 = fadd float %656, 0x3F1A36E2E0000000, !dbg !268
  %658 = fmul float %653, %655, !dbg !265
  %659 = fsub float %516, %658, !dbg !269
  %660 = fmul float %659, 2.000000e+00, !dbg !270
  %661 = fadd float %660, 0x3F4D7DBF40000000, !dbg !271
  %662 = fmul float %657, %661, !dbg !272
  %663 = fmul <2 x float> %631, %631, !dbg !273
  %664 = fsub <2 x float> %652, %663, !dbg !274
  %665 = insertelement <2 x i32> poison, i32 %355, i64 0, !dbg !144
  %666 = insertelement <2 x i32> %665, i32 %457, i64 1, !dbg !144
  %667 = bitcast <2 x i32> %666 to <2 x float>, !dbg !144
  %668 = insertelement <2 x i32> poison, i32 %363, i64 0, !dbg !147
  %669 = insertelement <2 x i32> %668, i32 %461, i64 1, !dbg !147
  %670 = bitcast <2 x i32> %669 to <2 x float>, !dbg !147
  %671 = insertelement <2 x i32> poison, i32 %371, i64 0, !dbg !150
  %672 = insertelement <2 x i32> %671, i32 %465, i64 1, !dbg !150
  %673 = bitcast <2 x i32> %672 to <2 x float>, !dbg !150
  %674 = insertelement <2 x i32> poison, i32 %379, i64 0, !dbg !153
  %675 = insertelement <2 x i32> %674, i32 %469, i64 1, !dbg !153
  %676 = bitcast <2 x i32> %675 to <2 x float>, !dbg !153
  %677 = insertelement <2 x i32> poison, i32 %391, i64 0, !dbg !158
  %678 = insertelement <2 x i32> %677, i32 %473, i64 1, !dbg !158
  %679 = bitcast <2 x i32> %678 to <2 x float>, !dbg !158
  %680 = insertelement <2 x i32> poison, i32 %399, i64 0, !dbg !161
  %681 = insertelement <2 x i32> %680, i32 %477, i64 1, !dbg !161
  %682 = bitcast <2 x i32> %681 to <2 x float>, !dbg !161
  %683 = insertelement <2 x i32> poison, i32 %407, i64 0, !dbg !164
  %684 = insertelement <2 x i32> %683, i32 %481, i64 1, !dbg !164
  %685 = bitcast <2 x i32> %684 to <2 x float>, !dbg !164
  %686 = insertelement <2 x i32> poison, i32 %415, i64 0, !dbg !167
  %687 = insertelement <2 x i32> %686, i32 %485, i64 1, !dbg !167
  %688 = bitcast <2 x i32> %687 to <2 x float>, !dbg !167
  %689 = fadd <2 x float> %584, %453, !dbg !235
  %690 = fadd <2 x float> %689, %667, !dbg !236
  %691 = fadd <2 x float> %690, %670, !dbg !237
  %692 = fadd <2 x float> %691, %673, !dbg !238
  %693 = fadd <2 x float> %692, %676, !dbg !239
  %694 = fadd <2 x float> %693, %679, !dbg !240
  %695 = fadd <2 x float> %694, %682, !dbg !241
  %696 = fadd <2 x float> %695, %685, !dbg !242
  %697 = fadd <2 x float> %696, %688, !dbg !243
  %698 = fmul <2 x float> %697, splat (float 6.250000e-02), !dbg !244
  %699 = shufflevector <2 x float> %578, <2 x float> %597, <2 x i32> <i32 0, i32 3>, !dbg !245
  %700 = fadd <2 x float> %595, %699, !dbg !245
  %701 = fmul <2 x float> %453, %453, !dbg !246
  %702 = fadd <2 x float> %700, %701, !dbg !247
  %703 = fmul <2 x float> %667, %667, !dbg !248
  %704 = fadd <2 x float> %702, %703, !dbg !249
  %705 = fmul <2 x float> %670, %670, !dbg !250
  %706 = fadd <2 x float> %704, %705, !dbg !251
  %707 = fmul <2 x float> %673, %673, !dbg !252
  %708 = fadd <2 x float> %706, %707, !dbg !253
  %709 = fmul <2 x float> %676, %676, !dbg !254
  %710 = fadd <2 x float> %708, %709, !dbg !255
  %711 = fmul <2 x float> %679, %679, !dbg !256
  %712 = fadd <2 x float> %710, %711, !dbg !257
  %713 = fmul <2 x float> %682, %682, !dbg !258
  %714 = fadd <2 x float> %712, %713, !dbg !259
  %715 = fmul <2 x float> %685, %685, !dbg !260
  %716 = fadd <2 x float> %714, %715, !dbg !261
  %717 = fmul <2 x float> %688, %688, !dbg !262
  %718 = fadd <2 x float> %716, %717, !dbg !263
  %719 = fmul <2 x float> %718, splat (float 6.250000e-02), !dbg !264
  %720 = extractelement <2 x float> %698, i64 0, !dbg !265
  %721 = fmul float %720, 2.000000e+00, !dbg !266
  %722 = extractelement <2 x float> %698, i64 1, !dbg !265
  %723 = fmul float %721, %722, !dbg !267
  %724 = fadd float %723, 0x3F1A36E2E0000000, !dbg !268
  %725 = fmul float %720, %722, !dbg !265
  %726 = fsub float %517, %725, !dbg !269
  %727 = fmul float %726, 2.000000e+00, !dbg !270
  %728 = fadd float %727, 0x3F4D7DBF40000000, !dbg !271
  %729 = fmul float %724, %728, !dbg !272
  %730 = fmul <2 x float> %698, %698, !dbg !273
  %731 = fsub <2 x float> %719, %730, !dbg !274
  %732 = shufflevector <2 x float> %663, <2 x float> %664, <2 x i32> <i32 0, i32 2>, !dbg !275
  %733 = shufflevector <2 x float> %663, <2 x float> %664, <2 x i32> <i32 1, i32 3>, !dbg !275
  %734 = fadd <2 x float> %732, %733, !dbg !275
  %735 = fadd <2 x float> %734, <float 0x3F1A36E2E0000000, float 0x3F4D7DBF40000000>, !dbg !276
  %736 = shufflevector <2 x float> %730, <2 x float> %731, <2 x i32> <i32 0, i32 2>, !dbg !275
  %737 = shufflevector <2 x float> %730, <2 x float> %731, <2 x i32> <i32 1, i32 3>, !dbg !275
  %738 = fadd <2 x float> %736, %737, !dbg !275
  %739 = fadd <2 x float> %738, <float 0x3F1A36E2E0000000, float 0x3F4D7DBF40000000>, !dbg !276
  %shift = shufflevector <2 x float> %735, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !277
  %740 = fmul <2 x float> %735, %shift, !dbg !277
  %741 = extractelement <2 x float> %740, i64 0, !dbg !277
  %shift2 = shufflevector <2 x float> %739, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !277
  %742 = fmul <2 x float> %739, %shift2, !dbg !277
  %743 = extractelement <2 x float> %742, i64 0, !dbg !277
  %744 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %662, float %741) #1, !dbg !278
  %745 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %729, float %743) #1, !dbg !278
  %746 = fsub float 1.000000e+00, %744, !dbg !279
  %747 = fsub float 1.000000e+00, %745, !dbg !279
  %748 = fmul float %746, 5.000000e-01, !dbg !280
  %749 = fmul float %747, 5.000000e-01, !dbg !280
  %.inv = fcmp ole float %748, 0.000000e+00, !dbg !281
  %750 = select i1 %.inv, float 0.000000e+00, float %748, !dbg !281
  %.inv1 = fcmp ole float %749, 0.000000e+00, !dbg !281
  %751 = select i1 %.inv1, float 0.000000e+00, float %749, !dbg !281
  %752 = fcmp olt float %750, 1.000000e+00, !dbg !285
  %753 = fcmp olt float %751, 1.000000e+00, !dbg !285
  %754 = fcmp uno float %750, 0.000000e+00, !dbg !287
  %755 = fcmp uno float %751, 0.000000e+00, !dbg !287
  %756 = or i1 %752, %754, !dbg !288
  %757 = or i1 %753, %755, !dbg !288
  %758 = sext i32 %11 to i64, !dbg !289
  %759 = getelementptr float, ptr addrspace(1) %0, i64 %758, !dbg !289
  %760 = bitcast float %750 to i32, !dbg !290
  %761 = select i1 %756, i32 %760, i32 1065353216, !dbg !291
  %762 = bitcast float %751 to i32, !dbg !290
  %763 = select i1 %757, i32 %762, i32 1065353216, !dbg !291
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %761, i32 %763, ptr addrspace(1) %759, i1 %13) #1, !dbg !290
  ret void, !dbg !292
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cutnjjgp65xpmgyksjyevs5al5yqlmzstv7ufg2aaqsu7hqceidv.py", directory: "inductor_cache/ut")
!4 = !{ptr @triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_reflection_pad2d_rsub_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_reflection_pad2d_rsub_sub_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_reflection_pad2d_rsub_sub_1", linkageName: "triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_reflection_pad2d_rsub_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 26, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 37, scope: !7)
!20 = !DILocation(line: 28, column: 45, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 28, column: 42, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 50, scope: !7)
!25 = !DILocation(line: 29, column: 39, scope: !7)
!26 = !DILocation(line: 29, column: 46, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 54, scope: !7)
!29 = !DILocation(line: 30, column: 39, scope: !7)
!30 = !DILocation(line: 30, column: 46, scope: !7)
!31 = !DILocation(line: 30, column: 30, scope: !7)
!32 = !DILocation(line: 30, column: 54, scope: !7)
!33 = !DILocation(line: 31, column: 39, scope: !7)
!34 = !DILocation(line: 31, column: 46, scope: !7)
!35 = !DILocation(line: 31, column: 30, scope: !7)
!36 = !DILocation(line: 31, column: 54, scope: !7)
!37 = !DILocation(line: 32, column: 39, scope: !7)
!38 = !DILocation(line: 32, column: 46, scope: !7)
!39 = !DILocation(line: 32, column: 30, scope: !7)
!40 = !DILocation(line: 32, column: 54, scope: !7)
!41 = !DILocation(line: 33, column: 39, scope: !7)
!42 = !DILocation(line: 33, column: 46, scope: !7)
!43 = !DILocation(line: 33, column: 30, scope: !7)
!44 = !DILocation(line: 33, column: 54, scope: !7)
!45 = !DILocation(line: 34, column: 41, scope: !7)
!46 = !DILocation(line: 34, column: 48, scope: !7)
!47 = !DILocation(line: 34, column: 31, scope: !7)
!48 = !DILocation(line: 34, column: 56, scope: !7)
!49 = !DILocation(line: 35, column: 41, scope: !7)
!50 = !DILocation(line: 35, column: 48, scope: !7)
!51 = !DILocation(line: 35, column: 31, scope: !7)
!52 = !DILocation(line: 35, column: 56, scope: !7)
!53 = !DILocation(line: 36, column: 41, scope: !7)
!54 = !DILocation(line: 36, column: 48, scope: !7)
!55 = !DILocation(line: 36, column: 31, scope: !7)
!56 = !DILocation(line: 36, column: 56, scope: !7)
!57 = !DILocation(line: 37, column: 41, scope: !7)
!58 = !DILocation(line: 37, column: 48, scope: !7)
!59 = !DILocation(line: 37, column: 31, scope: !7)
!60 = !DILocation(line: 37, column: 56, scope: !7)
!61 = !DILocation(line: 38, column: 41, scope: !7)
!62 = !DILocation(line: 38, column: 48, scope: !7)
!63 = !DILocation(line: 38, column: 31, scope: !7)
!64 = !DILocation(line: 38, column: 56, scope: !7)
!65 = !DILocation(line: 39, column: 41, scope: !7)
!66 = !DILocation(line: 39, column: 48, scope: !7)
!67 = !DILocation(line: 39, column: 31, scope: !7)
!68 = !DILocation(line: 39, column: 56, scope: !7)
!69 = !DILocation(line: 40, column: 41, scope: !7)
!70 = !DILocation(line: 40, column: 48, scope: !7)
!71 = !DILocation(line: 40, column: 31, scope: !7)
!72 = !DILocation(line: 40, column: 56, scope: !7)
!73 = !DILocation(line: 41, column: 41, scope: !7)
!74 = !DILocation(line: 41, column: 48, scope: !7)
!75 = !DILocation(line: 41, column: 31, scope: !7)
!76 = !DILocation(line: 41, column: 56, scope: !7)
!77 = !DILocation(line: 42, column: 41, scope: !7)
!78 = !DILocation(line: 42, column: 48, scope: !7)
!79 = !DILocation(line: 42, column: 31, scope: !7)
!80 = !DILocation(line: 42, column: 56, scope: !7)
!81 = !DILocation(line: 43, column: 41, scope: !7)
!82 = !DILocation(line: 43, column: 48, scope: !7)
!83 = !DILocation(line: 43, column: 31, scope: !7)
!84 = !DILocation(line: 43, column: 56, scope: !7)
!85 = !DILocation(line: 44, column: 80, scope: !7)
!86 = !DILocation(line: 44, column: 73, scope: !7)
!87 = !DILocation(line: 44, column: 61, scope: !7)
!88 = !DILocation(line: 44, column: 54, scope: !7)
!89 = !DILocation(line: 44, column: 37, scope: !7)
!90 = !DILocation(line: 44, column: 132, scope: !7)
!91 = !DILocation(line: 44, column: 125, scope: !7)
!92 = !DILocation(line: 44, column: 113, scope: !7)
!93 = !DILocation(line: 44, column: 106, scope: !7)
!94 = !DILocation(line: 44, column: 94, scope: !7)
!95 = !DILocation(line: 44, column: 143, scope: !7)
!96 = !DILocation(line: 44, column: 89, scope: !7)
!97 = !DILocation(line: 44, column: 140, scope: !7)
!98 = !DILocation(line: 44, column: 31, scope: !7)
!99 = !DILocation(line: 44, column: 148, scope: !7)
!100 = !DILocation(line: 45, column: 80, scope: !7)
!101 = !DILocation(line: 45, column: 73, scope: !7)
!102 = !DILocation(line: 45, column: 61, scope: !7)
!103 = !DILocation(line: 45, column: 54, scope: !7)
!104 = !DILocation(line: 45, column: 37, scope: !7)
!105 = !DILocation(line: 45, column: 89, scope: !7)
!106 = !DILocation(line: 45, column: 140, scope: !7)
!107 = !DILocation(line: 45, column: 31, scope: !7)
!108 = !DILocation(line: 45, column: 148, scope: !7)
!109 = !DILocation(line: 46, column: 61, scope: !7)
!110 = !DILocation(line: 46, column: 54, scope: !7)
!111 = !DILocation(line: 46, column: 37, scope: !7)
!112 = !DILocation(line: 46, column: 69, scope: !7)
!113 = !DILocation(line: 46, column: 120, scope: !7)
!114 = !DILocation(line: 46, column: 31, scope: !7)
!115 = !DILocation(line: 46, column: 128, scope: !7)
!116 = !DILocation(line: 47, column: 37, scope: !7)
!117 = !DILocation(line: 47, column: 69, scope: !7)
!118 = !DILocation(line: 47, column: 120, scope: !7)
!119 = !DILocation(line: 47, column: 31, scope: !7)
!120 = !DILocation(line: 47, column: 128, scope: !7)
!121 = !DILocation(line: 48, column: 132, scope: !7)
!122 = !DILocation(line: 48, column: 125, scope: !7)
!123 = !DILocation(line: 48, column: 113, scope: !7)
!124 = !DILocation(line: 48, column: 106, scope: !7)
!125 = !DILocation(line: 48, column: 94, scope: !7)
!126 = !DILocation(line: 48, column: 140, scope: !7)
!127 = !DILocation(line: 48, column: 31, scope: !7)
!128 = !DILocation(line: 48, column: 148, scope: !7)
!129 = !DILocation(line: 49, column: 140, scope: !7)
!130 = !DILocation(line: 49, column: 31, scope: !7)
!131 = !DILocation(line: 49, column: 148, scope: !7)
!132 = !DILocation(line: 50, column: 120, scope: !7)
!133 = !DILocation(line: 50, column: 31, scope: !7)
!134 = !DILocation(line: 50, column: 128, scope: !7)
!135 = !DILocation(line: 51, column: 120, scope: !7)
!136 = !DILocation(line: 51, column: 31, scope: !7)
!137 = !DILocation(line: 51, column: 128, scope: !7)
!138 = !DILocation(line: 52, column: 113, scope: !7)
!139 = !DILocation(line: 52, column: 106, scope: !7)
!140 = !DILocation(line: 52, column: 94, scope: !7)
!141 = !DILocation(line: 52, column: 89, scope: !7)
!142 = !DILocation(line: 52, column: 120, scope: !7)
!143 = !DILocation(line: 52, column: 31, scope: !7)
!144 = !DILocation(line: 52, column: 128, scope: !7)
!145 = !DILocation(line: 53, column: 120, scope: !7)
!146 = !DILocation(line: 53, column: 31, scope: !7)
!147 = !DILocation(line: 53, column: 128, scope: !7)
!148 = !DILocation(line: 54, column: 100, scope: !7)
!149 = !DILocation(line: 54, column: 31, scope: !7)
!150 = !DILocation(line: 54, column: 108, scope: !7)
!151 = !DILocation(line: 55, column: 100, scope: !7)
!152 = !DILocation(line: 55, column: 31, scope: !7)
!153 = !DILocation(line: 55, column: 108, scope: !7)
!154 = !DILocation(line: 56, column: 94, scope: !7)
!155 = !DILocation(line: 56, column: 89, scope: !7)
!156 = !DILocation(line: 56, column: 120, scope: !7)
!157 = !DILocation(line: 56, column: 31, scope: !7)
!158 = !DILocation(line: 56, column: 128, scope: !7)
!159 = !DILocation(line: 57, column: 120, scope: !7)
!160 = !DILocation(line: 57, column: 31, scope: !7)
!161 = !DILocation(line: 57, column: 128, scope: !7)
!162 = !DILocation(line: 58, column: 100, scope: !7)
!163 = !DILocation(line: 58, column: 31, scope: !7)
!164 = !DILocation(line: 58, column: 108, scope: !7)
!165 = !DILocation(line: 59, column: 100, scope: !7)
!166 = !DILocation(line: 59, column: 31, scope: !7)
!167 = !DILocation(line: 59, column: 108, scope: !7)
!168 = !DILocation(line: 60, column: 31, scope: !7)
!169 = !DILocation(line: 60, column: 148, scope: !7)
!170 = !DILocation(line: 61, column: 31, scope: !7)
!171 = !DILocation(line: 61, column: 148, scope: !7)
!172 = !DILocation(line: 62, column: 32, scope: !7)
!173 = !DILocation(line: 62, column: 129, scope: !7)
!174 = !DILocation(line: 63, column: 32, scope: !7)
!175 = !DILocation(line: 63, column: 129, scope: !7)
!176 = !DILocation(line: 64, column: 32, scope: !7)
!177 = !DILocation(line: 64, column: 149, scope: !7)
!178 = !DILocation(line: 65, column: 32, scope: !7)
!179 = !DILocation(line: 65, column: 149, scope: !7)
!180 = !DILocation(line: 66, column: 32, scope: !7)
!181 = !DILocation(line: 66, column: 129, scope: !7)
!182 = !DILocation(line: 67, column: 32, scope: !7)
!183 = !DILocation(line: 67, column: 129, scope: !7)
!184 = !DILocation(line: 68, column: 32, scope: !7)
!185 = !DILocation(line: 68, column: 129, scope: !7)
!186 = !DILocation(line: 69, column: 32, scope: !7)
!187 = !DILocation(line: 69, column: 129, scope: !7)
!188 = !DILocation(line: 70, column: 32, scope: !7)
!189 = !DILocation(line: 70, column: 109, scope: !7)
!190 = !DILocation(line: 71, column: 32, scope: !7)
!191 = !DILocation(line: 71, column: 109, scope: !7)
!192 = !DILocation(line: 72, column: 32, scope: !7)
!193 = !DILocation(line: 72, column: 129, scope: !7)
!194 = !DILocation(line: 73, column: 32, scope: !7)
!195 = !DILocation(line: 73, column: 129, scope: !7)
!196 = !DILocation(line: 74, column: 32, scope: !7)
!197 = !DILocation(line: 74, column: 109, scope: !7)
!198 = !DILocation(line: 75, column: 32, scope: !7)
!199 = !DILocation(line: 75, column: 109, scope: !7)
!200 = !DILocation(line: 76, column: 18, scope: !7)
!201 = !DILocation(line: 77, column: 18, scope: !7)
!202 = !DILocation(line: 78, column: 18, scope: !7)
!203 = !DILocation(line: 79, column: 18, scope: !7)
!204 = !DILocation(line: 80, column: 19, scope: !7)
!205 = !DILocation(line: 81, column: 20, scope: !7)
!206 = !DILocation(line: 82, column: 20, scope: !7)
!207 = !DILocation(line: 83, column: 20, scope: !7)
!208 = !DILocation(line: 84, column: 20, scope: !7)
!209 = !DILocation(line: 85, column: 20, scope: !7)
!210 = !DILocation(line: 86, column: 20, scope: !7)
!211 = !DILocation(line: 87, column: 20, scope: !7)
!212 = !DILocation(line: 88, column: 20, scope: !7)
!213 = !DILocation(line: 89, column: 20, scope: !7)
!214 = !DILocation(line: 90, column: 20, scope: !7)
!215 = !DILocation(line: 92, column: 20, scope: !7)
!216 = !DILocation(line: 120, column: 20, scope: !7)
!217 = !DILocation(line: 93, column: 20, scope: !7)
!218 = !DILocation(line: 94, column: 20, scope: !7)
!219 = !DILocation(line: 95, column: 20, scope: !7)
!220 = !DILocation(line: 96, column: 20, scope: !7)
!221 = !DILocation(line: 97, column: 20, scope: !7)
!222 = !DILocation(line: 98, column: 20, scope: !7)
!223 = !DILocation(line: 109, column: 20, scope: !7)
!224 = !DILocation(line: 110, column: 20, scope: !7)
!225 = !DILocation(line: 111, column: 20, scope: !7)
!226 = !DILocation(line: 112, column: 20, scope: !7)
!227 = !DILocation(line: 113, column: 20, scope: !7)
!228 = !DILocation(line: 114, column: 20, scope: !7)
!229 = !DILocation(line: 115, column: 20, scope: !7)
!230 = !DILocation(line: 116, column: 20, scope: !7)
!231 = !DILocation(line: 117, column: 20, scope: !7)
!232 = !DILocation(line: 118, column: 20, scope: !7)
!233 = !DILocation(line: 119, column: 20, scope: !7)
!234 = !DILocation(line: 168, column: 22, scope: !7)
!235 = !DILocation(line: 99, column: 20, scope: !7)
!236 = !DILocation(line: 100, column: 20, scope: !7)
!237 = !DILocation(line: 101, column: 20, scope: !7)
!238 = !DILocation(line: 102, column: 20, scope: !7)
!239 = !DILocation(line: 103, column: 20, scope: !7)
!240 = !DILocation(line: 104, column: 20, scope: !7)
!241 = !DILocation(line: 105, column: 20, scope: !7)
!242 = !DILocation(line: 106, column: 20, scope: !7)
!243 = !DILocation(line: 107, column: 20, scope: !7)
!244 = !DILocation(line: 108, column: 20, scope: !7)
!245 = !DILocation(line: 121, column: 20, scope: !7)
!246 = !DILocation(line: 122, column: 20, scope: !7)
!247 = !DILocation(line: 123, column: 20, scope: !7)
!248 = !DILocation(line: 124, column: 20, scope: !7)
!249 = !DILocation(line: 125, column: 20, scope: !7)
!250 = !DILocation(line: 126, column: 20, scope: !7)
!251 = !DILocation(line: 127, column: 20, scope: !7)
!252 = !DILocation(line: 128, column: 20, scope: !7)
!253 = !DILocation(line: 129, column: 20, scope: !7)
!254 = !DILocation(line: 130, column: 20, scope: !7)
!255 = !DILocation(line: 131, column: 20, scope: !7)
!256 = !DILocation(line: 132, column: 20, scope: !7)
!257 = !DILocation(line: 133, column: 20, scope: !7)
!258 = !DILocation(line: 134, column: 20, scope: !7)
!259 = !DILocation(line: 135, column: 20, scope: !7)
!260 = !DILocation(line: 136, column: 20, scope: !7)
!261 = !DILocation(line: 137, column: 20, scope: !7)
!262 = !DILocation(line: 138, column: 20, scope: !7)
!263 = !DILocation(line: 139, column: 20, scope: !7)
!264 = !DILocation(line: 140, column: 20, scope: !7)
!265 = !DILocation(line: 194, column: 21, scope: !7)
!266 = !DILocation(line: 190, column: 21, scope: !7)
!267 = !DILocation(line: 191, column: 22, scope: !7)
!268 = !DILocation(line: 193, column: 22, scope: !7)
!269 = !DILocation(line: 195, column: 21, scope: !7)
!270 = !DILocation(line: 196, column: 22, scope: !7)
!271 = !DILocation(line: 198, column: 22, scope: !7)
!272 = !DILocation(line: 199, column: 22, scope: !7)
!273 = !DILocation(line: 200, column: 21, scope: !7)
!274 = !DILocation(line: 204, column: 21, scope: !7)
!275 = !DILocation(line: 202, column: 22, scope: !7)
!276 = !DILocation(line: 203, column: 22, scope: !7)
!277 = !DILocation(line: 208, column: 22, scope: !7)
!278 = !DILocation(line: 209, column: 22, scope: !7)
!279 = !DILocation(line: 211, column: 22, scope: !7)
!280 = !DILocation(line: 213, column: 22, scope: !7)
!281 = !DILocation(line: 121, column: 29, scope: !282, inlinedAt: !284)
!282 = distinct !DILexicalBlockFile(scope: !7, file: !283, discriminator: 0)
!283 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!284 = !DILocation(line: 215, column: 44, scope: !7)
!285 = !DILocation(line: 110, column: 15, scope: !282, inlinedAt: !286)
!286 = !DILocation(line: 216, column: 44, scope: !7)
!287 = !DILocation(line: 112, column: 21, scope: !282, inlinedAt: !286)
!288 = !DILocation(line: 112, column: 16, scope: !282, inlinedAt: !286)
!289 = !DILocation(line: 217, column: 28, scope: !7)
!290 = !DILocation(line: 217, column: 41, scope: !7)
!291 = !DILocation(line: 113, column: 29, scope: !282, inlinedAt: !286)
!292 = !DILocation(line: 217, column: 4, scope: !7)
