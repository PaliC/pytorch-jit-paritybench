; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_49(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, i32 %20) local_unnamed_addr !dbg !7 {
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %23 = shl i32 %22, 8, !dbg !11
  %24 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %25 = shl i32 %24, 1, !dbg !12
  %26 = and i32 %25, 254, !dbg !12
  %27 = or disjoint i32 %23, %26, !dbg !13
  %28 = sdiv i32 %27, 16, !dbg !14
  %29 = srem i32 %28, 192, !dbg !15
  %.frozen = freeze i32 %27, !dbg !16
  %30 = sdiv i32 %.frozen, 4, !dbg !16
  %31 = srem i32 %30, 4, !dbg !17
  %32 = mul i32 %30, 4, !dbg !18
  %.decomposed = sub i32 %.frozen, %32, !dbg !18
  %33 = sext i32 %27 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !19
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !20
  %36 = sext i32 %29 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !21
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !24
  %42 = bitcast i32 %41 to float, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !24
  %44 = bitcast i32 %43 to float, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !25
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !26
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !27
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %6, i64 %33, !dbg !29
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !30
  %53 = getelementptr float, ptr addrspace(1) %7, i64 %36, !dbg !31
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !32
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !32
  %56 = getelementptr float, ptr addrspace(1) %8, i64 %36, !dbg !33
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !34
  %58 = bitcast i32 %57 to float, !dbg !34
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !34
  %60 = bitcast i32 %59 to float, !dbg !34
  %61 = getelementptr float, ptr addrspace(1) %9, i64 %36, !dbg !35
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !36
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !36
  %64 = getelementptr float, ptr addrspace(1) %10, i64 %36, !dbg !37
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !38
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !38
  %67 = sext i32 %31 to i64, !dbg !39
  %68 = getelementptr i64, ptr addrspace(1) %11, i64 %67, !dbg !39
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !40
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !40
  %71 = sext i32 %.decomposed to i64, !dbg !41
  %72 = getelementptr i64, ptr addrspace(1) %12, i64 %71, !dbg !41
  %73 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !42
  %74 = getelementptr i64, ptr addrspace(1) %14, i64 %71, !dbg !43
  %75 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !44
  %76 = getelementptr float, ptr addrspace(1) %15, i64 %71, !dbg !45
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !46
  %78 = getelementptr float, ptr addrspace(1) %16, i64 %33, !dbg !47
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !48
  %80 = getelementptr i64, ptr addrspace(1) %17, i64 %67, !dbg !49
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !50
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !50
  %83 = getelementptr float, ptr addrspace(1) %18, i64 %67, !dbg !51
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !52
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !52
  %86 = fadd float %42, 0x3EE4F8B580000000, !dbg !53
  %87 = fadd float %44, 0x3EE4F8B580000000, !dbg !53
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i = icmp eq i32 %88, 0, !dbg !54
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i = icmp eq i32 %89, 0, !dbg !54
  br i1 %.not.i, label %95, label %90, !dbg !54

90:                                               ; preds = %21
  br i1 %.not1.i, label %93, label %91, !dbg !54

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

95:                                               ; preds = %21
  br i1 %.not1.i, label %98, label %96, !dbg !54

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

__nv_sqrtf.exit:                                  ; preds = %91, %93, %96, %98
  %.0.i = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !54
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i1 = icmp eq i32 %100, 0, !dbg !54
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i4 = icmp eq i32 %101, 0, !dbg !54
  br i1 %.not.i1, label %107, label %102, !dbg !54

102:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %105, label %103, !dbg !54

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

107:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %110, label %108, !dbg !54

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

__nv_sqrtf.exit5:                                 ; preds = %103, %105, %108, %110
  %.0.i3 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !54
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !55
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !55
  %114 = fadd float %58, 0x3EE4F8B580000000, !dbg !56
  %115 = fadd float %60, 0x3EE4F8B580000000, !dbg !56
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i6 = icmp eq i32 %116, 0, !dbg !57
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i9 = icmp eq i32 %117, 0, !dbg !57
  br i1 %.not.i6, label %123, label %118, !dbg !57

118:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %121, label %119, !dbg !57

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #3, !dbg !57
  br label %__nv_sqrtf.exit10, !dbg !57

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #3, !dbg !57
  br label %__nv_sqrtf.exit10, !dbg !57

123:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %126, label %124, !dbg !57

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #3, !dbg !57
  br label %__nv_sqrtf.exit10, !dbg !57

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #3, !dbg !57
  br label %__nv_sqrtf.exit10, !dbg !57

__nv_sqrtf.exit10:                                ; preds = %119, %121, %124, %126
  %.0.i8 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !57
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i11 = icmp eq i32 %128, 0, !dbg !57
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i14 = icmp eq i32 %129, 0, !dbg !57
  br i1 %.not.i11, label %135, label %130, !dbg !57

130:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %133, label %131, !dbg !57

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #3, !dbg !57
  br label %__nv_sqrtf.exit15, !dbg !57

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #3, !dbg !57
  br label %__nv_sqrtf.exit15, !dbg !57

135:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %138, label %136, !dbg !57

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #3, !dbg !57
  br label %__nv_sqrtf.exit15, !dbg !57

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #3, !dbg !57
  br label %__nv_sqrtf.exit15, !dbg !57

__nv_sqrtf.exit15:                                ; preds = %131, %133, %136, %138
  %.0.i13 = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !57
  %140 = extractvalue { i32, i32 } %52, 1, !dbg !30
  %141 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !22
  %142 = insertelement <2 x i32> %141, i32 %55, i64 1, !dbg !22
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !22
  %144 = extractvalue { i32, i32 } %52, 0, !dbg !30
  %145 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !22
  %146 = insertelement <2 x i32> %145, i32 %54, i64 1, !dbg !22
  %147 = bitcast <2 x i32> %146 to <2 x float>, !dbg !22
  %148 = extractvalue { i32, i32 } %35, 1, !dbg !20
  %149 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !26
  %150 = insertelement <2 x i32> %149, i32 %63, i64 1, !dbg !26
  %151 = bitcast <2 x i32> %150 to <2 x float>, !dbg !26
  %152 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !28
  %153 = insertelement <2 x i32> %152, i32 %66, i64 1, !dbg !28
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !28
  %155 = extractvalue { i32, i32 } %35, 0, !dbg !20
  %156 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !26
  %157 = insertelement <2 x i32> %156, i32 %62, i64 1, !dbg !26
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !26
  %159 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !28
  %160 = insertelement <2 x i32> %159, i32 %65, i64 1, !dbg !28
  %161 = bitcast <2 x i32> %160 to <2 x float>, !dbg !28
  %162 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !52
  %163 = insertelement <2 x i32> %162, i32 %85, i64 1, !dbg !52
  %164 = bitcast <2 x i32> %163 to <2 x float>, !dbg !52
  %165 = extractvalue { i32, i32 } %79, 1, !dbg !48
  %166 = extractvalue { i32, i32 } %79, 0, !dbg !48
  %167 = extractvalue { i32, i32 } %77, 1, !dbg !46
  %168 = extractvalue { i32, i32 } %77, 0, !dbg !46
  %169 = extractvalue { i64, i64 } %75, 1, !dbg !44
  %170 = extractvalue { i64, i64 } %75, 0, !dbg !44
  %171 = extractvalue { i64, i64 } %73, 1, !dbg !42
  %172 = extractvalue { i64, i64 } %73, 0, !dbg !42
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !58
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !58
  %175 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !20
  %176 = insertelement <2 x i32> %175, i32 %144, i64 1, !dbg !20
  %177 = bitcast <2 x i32> %176 to <2 x float>, !dbg !20
  %178 = fsub <2 x float> %177, %147, !dbg !59
  %179 = insertelement <2 x float> poison, float %112, i64 0, !dbg !60
  %180 = insertelement <2 x float> %179, float %173, i64 1, !dbg !60
  %181 = fmul <2 x float> %178, %180, !dbg !60
  %182 = fmul <2 x float> %181, %158, !dbg !61
  %183 = fadd <2 x float> %182, %161, !dbg !62
  %184 = insertelement <2 x i32> poison, i32 %148, i64 0, !dbg !20
  %185 = insertelement <2 x i32> %184, i32 %140, i64 1, !dbg !20
  %186 = bitcast <2 x i32> %185 to <2 x float>, !dbg !20
  %187 = fsub <2 x float> %186, %143, !dbg !59
  %188 = insertelement <2 x float> poison, float %113, i64 0, !dbg !60
  %189 = insertelement <2 x float> %188, float %174, i64 1, !dbg !60
  %190 = fmul <2 x float> %187, %189, !dbg !60
  %191 = fmul <2 x float> %190, %151, !dbg !61
  %192 = fadd <2 x float> %191, %154, !dbg !62
  %193 = lshr i64 %69, 62, !dbg !63
  %194 = and i64 %193, 2, !dbg !63
  %195 = add i64 %194, %69, !dbg !63
  %196 = lshr i64 %172, 62, !dbg !64
  %197 = and i64 %196, 2, !dbg !64
  %198 = lshr i64 %171, 62, !dbg !64
  %199 = and i64 %198, 2, !dbg !64
  %200 = shl i64 %195, 1, !dbg !65
  %201 = shl nsw i32 %28, 2, !dbg !66
  %202 = sext i32 %201 to i64, !dbg !67
  %203 = getelementptr float, ptr addrspace(1) %13, i64 %172, !dbg !68
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %197, !dbg !68
  %205 = getelementptr float, ptr addrspace(1) %204, i64 %200, !dbg !68
  %206 = getelementptr float, ptr addrspace(1) %205, i64 %202, !dbg !68
  %207 = getelementptr float, ptr addrspace(1) %13, i64 %171, !dbg !68
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %199, !dbg !68
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %200, !dbg !68
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %202, !dbg !68
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 true) #3, !dbg !69
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %210, i1 true) #3, !dbg !69
  %213 = lshr i64 %170, 62, !dbg !70
  %214 = and i64 %213, 2, !dbg !70
  %215 = lshr i64 %169, 62, !dbg !70
  %216 = and i64 %215, 2, !dbg !70
  %217 = getelementptr float, ptr addrspace(1) %13, i64 %170, !dbg !71
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %214, !dbg !71
  %219 = getelementptr float, ptr addrspace(1) %218, i64 %200, !dbg !71
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %202, !dbg !71
  %221 = getelementptr float, ptr addrspace(1) %13, i64 %169, !dbg !71
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %216, !dbg !71
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %200, !dbg !71
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %202, !dbg !71
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 true) #3, !dbg !72
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 true) #3, !dbg !72
  %227 = lshr i64 %81, 62, !dbg !73
  %228 = and i64 %227, 2, !dbg !73
  %229 = add i64 %228, %81, !dbg !73
  %230 = shl i64 %229, 1, !dbg !74
  %231 = getelementptr float, ptr addrspace(1) %204, i64 %230, !dbg !75
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %202, !dbg !75
  %233 = getelementptr float, ptr addrspace(1) %208, i64 %230, !dbg !75
  %234 = getelementptr float, ptr addrspace(1) %233, i64 %202, !dbg !75
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 true) #3, !dbg !76
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 true) #3, !dbg !76
  %237 = getelementptr float, ptr addrspace(1) %218, i64 %230, !dbg !77
  %238 = getelementptr float, ptr addrspace(1) %237, i64 %202, !dbg !77
  %239 = getelementptr float, ptr addrspace(1) %222, i64 %230, !dbg !77
  %240 = getelementptr float, ptr addrspace(1) %239, i64 %202, !dbg !77
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 true) #3, !dbg !78
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #3, !dbg !78
  %243 = insertelement <2 x i32> poison, i32 %235, i64 0, !dbg !76
  %244 = insertelement <2 x i32> %243, i32 %211, i64 1, !dbg !76
  %245 = bitcast <2 x i32> %244 to <2 x float>, !dbg !76
  %246 = insertelement <2 x i32> poison, i32 %241, i64 0, !dbg !78
  %247 = insertelement <2 x i32> %246, i32 %225, i64 1, !dbg !78
  %248 = bitcast <2 x i32> %247 to <2 x float>, !dbg !78
  %249 = fsub <2 x float> %248, %245, !dbg !79
  %250 = insertelement <2 x i32> poison, i32 %168, i64 0, !dbg !80
  %251 = bitcast <2 x i32> %250 to <2 x float>, !dbg !80
  %252 = shufflevector <2 x float> %251, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !80
  %253 = fmul <2 x float> %249, %252, !dbg !80
  %254 = fadd <2 x float> %253, %245, !dbg !81
  %255 = insertelement <2 x i32> poison, i32 %236, i64 0, !dbg !76
  %256 = insertelement <2 x i32> %255, i32 %212, i64 1, !dbg !76
  %257 = bitcast <2 x i32> %256 to <2 x float>, !dbg !76
  %258 = insertelement <2 x i32> poison, i32 %242, i64 0, !dbg !78
  %259 = insertelement <2 x i32> %258, i32 %226, i64 1, !dbg !78
  %260 = bitcast <2 x i32> %259 to <2 x float>, !dbg !78
  %261 = fsub <2 x float> %260, %257, !dbg !79
  %262 = insertelement <2 x i32> poison, i32 %167, i64 0, !dbg !80
  %263 = bitcast <2 x i32> %262 to <2 x float>, !dbg !80
  %264 = shufflevector <2 x float> %263, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !80
  %265 = fmul <2 x float> %261, %264, !dbg !80
  %266 = fadd <2 x float> %265, %257, !dbg !81
  %267 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !82
  %268 = getelementptr i1, ptr addrspace(1) %19, i64 %33, !dbg !83
  %269 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !48
  %270 = insertelement <2 x i32> %269, i32 %165, i64 1, !dbg !48
  %271 = bitcast <2 x i32> %270 to <2 x float>, !dbg !48
  %272 = shufflevector <2 x float> %183, <2 x float> %192, <2 x i32> <i32 0, i32 2>, !dbg !84
  %273 = shufflevector <2 x float> %183, <2 x float> %192, <2 x i32> <i32 1, i32 3>, !dbg !84
  %274 = fadd <2 x float> %272, %273, !dbg !84
  %275 = fadd <2 x float> %274, %271, !dbg !85
  %276 = shufflevector <2 x float> %254, <2 x float> %266, <2 x i32> <i32 0, i32 2>, !dbg !86
  %277 = shufflevector <2 x float> %254, <2 x float> %266, <2 x i32> <i32 1, i32 3>, !dbg !86
  %278 = fsub <2 x float> %276, %277, !dbg !86
  %279 = fmul <2 x float> %278, %164, !dbg !87
  %280 = fadd <2 x float> %277, %279, !dbg !88
  %281 = fadd <2 x float> %275, %280, !dbg !89
  %282 = fcmp olt <2 x float> %281, zeroinitializer, !dbg !90
  %283 = select <2 x i1> %282, <2 x float> zeroinitializer, <2 x float> %281, !dbg !94
  %284 = fcmp ole <2 x float> %283, zeroinitializer, !dbg !95
  %bc = bitcast <2 x float> %281 to <2 x i32>, !dbg !96
  %285 = extractelement <2 x i32> %bc, i64 0, !dbg !96
  %bc16 = bitcast <2 x float> %281 to <2 x i32>, !dbg !96
  %286 = extractelement <2 x i32> %bc16, i64 1, !dbg !96
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %285, i32 %286, ptr addrspace(1) %267, i1 true) #3, !dbg !96
  %287 = zext <2 x i1> %284 to <2 x i8>, !dbg !97
  %288 = bitcast <2 x i8> %287 to i16, !dbg !97
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %288, ptr addrspace(1) %268, i1 true) #3, !dbg !97
  ret void, !dbg !98
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqrenpvxgr6lqgenn6t2u4y5ldeyaziyxlp37b7q2srchigwgkpa.py", directory: "inductor_cache/qr")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_49, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_49, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_49", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_49", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 26, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 42, column: 32, scope: !7)
!46 = !DILocation(line: 42, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 32, scope: !7)
!48 = !DILocation(line: 43, column: 37, scope: !7)
!49 = !DILocation(line: 44, column: 32, scope: !7)
!50 = !DILocation(line: 44, column: 37, scope: !7)
!51 = !DILocation(line: 45, column: 32, scope: !7)
!52 = !DILocation(line: 45, column: 37, scope: !7)
!53 = !DILocation(line: 48, column: 18, scope: !7)
!54 = !DILocation(line: 49, column: 26, scope: !7)
!55 = !DILocation(line: 51, column: 18, scope: !7)
!56 = !DILocation(line: 58, column: 20, scope: !7)
!57 = !DILocation(line: 59, column: 27, scope: !7)
!58 = !DILocation(line: 60, column: 19, scope: !7)
!59 = !DILocation(line: 46, column: 18, scope: !7)
!60 = !DILocation(line: 54, column: 19, scope: !7)
!61 = !DILocation(line: 55, column: 20, scope: !7)
!62 = !DILocation(line: 56, column: 20, scope: !7)
!63 = !DILocation(line: 69, column: 35, scope: !7)
!64 = !DILocation(line: 72, column: 35, scope: !7)
!65 = !DILocation(line: 73, column: 42, scope: !7)
!66 = !DILocation(line: 73, column: 52, scope: !7)
!67 = !DILocation(line: 73, column: 50, scope: !7)
!68 = !DILocation(line: 73, column: 32, scope: !7)
!69 = !DILocation(line: 73, column: 57, scope: !7)
!70 = !DILocation(line: 76, column: 35, scope: !7)
!71 = !DILocation(line: 77, column: 32, scope: !7)
!72 = !DILocation(line: 77, column: 57, scope: !7)
!73 = !DILocation(line: 84, column: 35, scope: !7)
!74 = !DILocation(line: 85, column: 42, scope: !7)
!75 = !DILocation(line: 85, column: 32, scope: !7)
!76 = !DILocation(line: 85, column: 57, scope: !7)
!77 = !DILocation(line: 86, column: 32, scope: !7)
!78 = !DILocation(line: 86, column: 57, scope: !7)
!79 = !DILocation(line: 87, column: 20, scope: !7)
!80 = !DILocation(line: 88, column: 20, scope: !7)
!81 = !DILocation(line: 89, column: 20, scope: !7)
!82 = !DILocation(line: 98, column: 28, scope: !7)
!83 = !DILocation(line: 99, column: 25, scope: !7)
!84 = !DILocation(line: 65, column: 20, scope: !7)
!85 = !DILocation(line: 81, column: 20, scope: !7)
!86 = !DILocation(line: 90, column: 20, scope: !7)
!87 = !DILocation(line: 91, column: 20, scope: !7)
!88 = !DILocation(line: 92, column: 20, scope: !7)
!89 = !DILocation(line: 93, column: 20, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !93)
!91 = distinct !DILexicalBlockFile(scope: !7, file: !92, discriminator: 0)
!92 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!93 = !DILocation(line: 95, column: 42, scope: !7)
!94 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !93)
!95 = !DILocation(line: 97, column: 21, scope: !7)
!96 = !DILocation(line: 98, column: 40, scope: !7)
!97 = !DILocation(line: 99, column: 37, scope: !7)
!98 = !DILocation(line: 99, column: 4, scope: !7)
