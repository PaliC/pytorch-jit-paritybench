; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/72/c72chmggusoc4qy6ckmcnhptbblv3cv2mmq4rfyynhqjen62f2wl.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp5 < 225\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused__softmax_add_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %7 = shl i32 %6, 5, !dbg !13
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %9 = lshr i32 %8, 4, !dbg !14
  %.lobit = and i32 %9, 1, !dbg !14
  %10 = and i32 %8, 32, !dbg !14
  %11 = lshr exact i32 %10, 4, !dbg !14
  %12 = or disjoint i32 %.lobit, %11, !dbg !14
  %13 = and i32 %9, 4, !dbg !14
  %14 = or disjoint i32 %12, %13, !dbg !14
  %15 = and i32 %9, 8, !dbg !14
  %16 = or disjoint i32 %14, %15, !dbg !14
  %17 = or disjoint i32 %7, %16, !dbg !15
  %18 = or i32 %17, 16, !dbg !15
  %19 = icmp slt i32 %17, 1024, !dbg !16
  %20 = icmp slt i32 %18, 1024, !dbg !16
  %21 = shl i32 %8, 2, !dbg !17
  %22 = and i32 %21, 60, !dbg !17
  %23 = or disjoint i32 %22, 2, !dbg !17
  %.frozen = freeze i32 %17, !dbg !18
  %24 = sdiv i32 %.frozen, 64, !dbg !18
  %25 = mul i32 %24, 64, !dbg !19
  %.decomposed = sub i32 %.frozen, %25, !dbg !19
  %.frozen43 = freeze i32 %18, !dbg !18
  %26 = sdiv i32 %.frozen43, 64, !dbg !18
  %27 = mul i32 %26, 64, !dbg !19
  %.decomposed44 = sub i32 %.frozen43, %27, !dbg !19
  %28 = shl i32 %17, 6, !dbg !20
  %29 = shl i32 %18, 6, !dbg !20
  %30 = or disjoint i32 %28, %22, !dbg !21
  %31 = or disjoint i32 %29, %22, !dbg !21
  %32 = sext i32 %30 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = sext i32 %31 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #4, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #4, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !23
  %46 = shl i32 %8, 7, !dbg !23
  %47 = and i32 %46, 1920, !dbg !23
  %48 = or disjoint i32 %12, %47, !dbg !23
  %49 = or disjoint i32 %48, %13, !dbg !23
  %50 = or disjoint i32 %49, %15, !dbg !23
  %51 = and i32 %8, 255, !dbg !23
  %52 = lshr exact i32 %47, 5, !dbg !23
  %53 = add nuw nsw i32 %50, %52, !dbg !23
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %53, !dbg !23
  %55 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %55, i1 true) #4, !dbg !23
  %56 = xor i32 %50, 32, !dbg !23
  %57 = lshr i32 %56, 5, !dbg !23
  %58 = add nuw nsw i32 %57, %56, !dbg !23
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %58, !dbg !23
  %60 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #4, !dbg !23
  %61 = xor i32 %50, 64, !dbg !23
  %62 = lshr i32 %61, 5, !dbg !23
  %63 = add nuw nsw i32 %62, %61, !dbg !23
  %64 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %63, !dbg !23
  %65 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 true) #4, !dbg !23
  %66 = xor i32 %50, 96, !dbg !23
  %67 = lshr i32 %66, 5, !dbg !23
  %68 = add nuw nsw i32 %67, %66, !dbg !23
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %68, !dbg !23
  %70 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #4, !dbg !23
  %71 = xor i32 %50, 16, !dbg !23
  %72 = add nuw nsw i32 %71, %52, !dbg !23
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %72, !dbg !23
  %74 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #4, !dbg !23
  %75 = xor i32 %50, 48, !dbg !23
  %76 = lshr i32 %75, 5, !dbg !23
  %77 = add nuw nsw i32 %76, %75, !dbg !23
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %77, !dbg !23
  %79 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #4, !dbg !23
  %80 = xor i32 %50, 80, !dbg !23
  %81 = lshr i32 %80, 5, !dbg !23
  %82 = add nuw nsw i32 %81, %80, !dbg !23
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %82, !dbg !23
  %84 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #4, !dbg !23
  %85 = xor i32 %50, 112, !dbg !23
  %86 = lshr i32 %85, 5, !dbg !23
  %87 = add nuw nsw i32 %86, %85, !dbg !23
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %87, !dbg !23
  %89 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #4, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %90 = lshr i32 %51, 5, !dbg !23
  %91 = add nuw nsw i32 %90, %51, !dbg !23
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %91, !dbg !23
  %93 = load float, ptr addrspace(3) %92, align 4, !dbg !23
  %94 = or disjoint i32 %51, 256, !dbg !23
  %95 = lshr i32 %94, 5, !dbg !23
  %96 = add nuw nsw i32 %95, %94, !dbg !23
  %97 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %96, !dbg !23
  %98 = load float, ptr addrspace(3) %97, align 4, !dbg !23
  %99 = or disjoint i32 %51, 512, !dbg !23
  %100 = lshr i32 %99, 5, !dbg !23
  %101 = add nuw nsw i32 %100, %99, !dbg !23
  %102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %101, !dbg !23
  %103 = load float, ptr addrspace(3) %102, align 4, !dbg !23
  %104 = or disjoint i32 %51, 768, !dbg !23
  %105 = lshr i32 %104, 5, !dbg !23
  %106 = add nuw nsw i32 %105, %104, !dbg !23
  %107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %106, !dbg !23
  %108 = load float, ptr addrspace(3) %107, align 4, !dbg !23
  %109 = or disjoint i32 %51, 1024, !dbg !23
  %110 = lshr i32 %109, 5, !dbg !23
  %111 = add nuw nsw i32 %110, %109, !dbg !23
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %111, !dbg !23
  %113 = load float, ptr addrspace(3) %112, align 4, !dbg !23
  %114 = or disjoint i32 %51, 1280, !dbg !23
  %115 = lshr i32 %114, 5, !dbg !23
  %116 = add nuw nsw i32 %115, %114, !dbg !23
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %116, !dbg !23
  %118 = load float, ptr addrspace(3) %117, align 4, !dbg !23
  %119 = or disjoint i32 %51, 1536, !dbg !23
  %120 = lshr i32 %119, 5, !dbg !23
  %121 = add nuw nsw i32 %120, %119, !dbg !23
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %121, !dbg !23
  %123 = load float, ptr addrspace(3) %122, align 4, !dbg !23
  %124 = or disjoint i32 %51, 1792, !dbg !23
  %125 = lshr i32 %124, 5, !dbg !23
  %126 = add nuw nsw i32 %125, %124, !dbg !23
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %126, !dbg !23
  %128 = load float, ptr addrspace(3) %127, align 4, !dbg !23
  %129 = shl nsw i32 %.decomposed, 6, !dbg !24
  %130 = shl nsw i32 %.decomposed44, 6, !dbg !24
  %131 = or disjoint i32 %129, %22, !dbg !25
  %132 = or disjoint i32 %129, %23, !dbg !25
  %133 = or disjoint i32 %130, %22, !dbg !25
  %134 = or disjoint i32 %130, %23, !dbg !25
  %135 = sext i32 %131 to i64, !dbg !26
  %136 = getelementptr i64, ptr addrspace(1) %1, i64 %135, !dbg !26
  %137 = sext i32 %132 to i64, !dbg !26
  %138 = getelementptr i64, ptr addrspace(1) %1, i64 %137, !dbg !26
  %139 = sext i32 %133 to i64, !dbg !26
  %140 = getelementptr i64, ptr addrspace(1) %1, i64 %139, !dbg !26
  %141 = sext i32 %134 to i64, !dbg !26
  %142 = getelementptr i64, ptr addrspace(1) %1, i64 %141, !dbg !26
  %143 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %136, i1 %19, i1 %19, i1 %19) #4, !dbg !27
  %144 = extractvalue { i64, i64 } %143, 0, !dbg !27
  %145 = extractvalue { i64, i64 } %143, 1, !dbg !27
  %146 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %138, i1 %19, i1 %19, i1 %19) #4, !dbg !27
  %147 = extractvalue { i64, i64 } %146, 0, !dbg !27
  %148 = extractvalue { i64, i64 } %146, 1, !dbg !27
  %149 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %140, i1 %20, i1 %20, i1 %20) #4, !dbg !27
  %150 = extractvalue { i64, i64 } %149, 0, !dbg !27
  %151 = extractvalue { i64, i64 } %149, 1, !dbg !27
  %152 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %142, i1 %20, i1 %20, i1 %20) #4, !dbg !27
  %153 = extractvalue { i64, i64 } %152, 0, !dbg !27
  %154 = extractvalue { i64, i64 } %152, 1, !dbg !27
  %155 = insertelement <4 x i64> poison, i64 %144, i64 0, !dbg !28
  %156 = insertelement <4 x i64> %155, i64 %145, i64 1, !dbg !28
  %157 = insertelement <4 x i64> %156, i64 %147, i64 2, !dbg !28
  %158 = insertelement <4 x i64> %157, i64 %148, i64 3, !dbg !28
  %159 = add <4 x i64> %158, splat (i64 225), !dbg !28
  %160 = icmp slt <4 x i64> %158, zeroinitializer, !dbg !29
  %161 = select <4 x i1> %160, <4 x i64> %159, <4 x i64> %158, !dbg !30
  %162 = icmp ugt <4 x i64> %161, splat (i64 224), !dbg !31
  %163 = insertelement <4 x i64> poison, i64 %150, i64 0, !dbg !28
  %164 = insertelement <4 x i64> %163, i64 %151, i64 1, !dbg !28
  %165 = insertelement <4 x i64> %164, i64 %153, i64 2, !dbg !28
  %166 = insertelement <4 x i64> %165, i64 %154, i64 3, !dbg !28
  %167 = add <4 x i64> %166, splat (i64 225), !dbg !28
  %168 = icmp slt <4 x i64> %166, zeroinitializer, !dbg !29
  %169 = select <4 x i1> %168, <4 x i64> %167, <4 x i64> %166, !dbg !30
  %170 = icmp ugt <4 x i64> %169, splat (i64 224), !dbg !31
  %171 = bitcast <4 x i1> %162 to i4, !dbg !32
  %172 = icmp ne i4 %171, 0, !dbg !32
  %173 = and i1 %19, %172, !dbg !32
  %174 = bitcast <4 x i1> %170 to i4, !dbg !32
  %175 = icmp ne i4 %174, 0, !dbg !32
  %176 = and i1 %20, %175, !dbg !32
  %177 = or i1 %173, %176, !dbg !32
  br i1 %177, label %178, label %179, !dbg !32

178:                                              ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 39, ptr nonnull @assertFunc_0, i64 1), !dbg !32
  unreachable, !dbg !32

179:                                              ; preds = %5
  %180 = and i32 %8, 31, !dbg !14
  %181 = srem i32 %26, 4, !dbg !33
  %182 = srem i32 %24, 4, !dbg !33
  %183 = or disjoint i32 %7, %180, !dbg !15
  %184 = icmp slt i32 %183, 1024, !dbg !16
  %185 = lshr i32 %8, 5, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %186 = sext i32 %182 to i64, !dbg !34
  %187 = sext i32 %181 to i64, !dbg !34
  %188 = extractelement <4 x i64> %161, i64 0, !dbg !35
  %.idx = shl i64 %188, 4, !dbg !35
  %189 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !35
  %190 = getelementptr float, ptr addrspace(1) %189, i64 %186, !dbg !35
  %191 = extractelement <4 x i64> %161, i64 1, !dbg !35
  %.idx20 = shl i64 %191, 4, !dbg !35
  %192 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx20, !dbg !35
  %193 = getelementptr float, ptr addrspace(1) %192, i64 %186, !dbg !35
  %194 = extractelement <4 x i64> %161, i64 2, !dbg !35
  %.idx21 = shl i64 %194, 4, !dbg !35
  %195 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx21, !dbg !35
  %196 = getelementptr float, ptr addrspace(1) %195, i64 %186, !dbg !35
  %197 = extractelement <4 x i64> %161, i64 3, !dbg !35
  %.idx22 = shl i64 %197, 4, !dbg !35
  %198 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx22, !dbg !35
  %199 = getelementptr float, ptr addrspace(1) %198, i64 %186, !dbg !35
  %200 = extractelement <4 x i64> %169, i64 0, !dbg !35
  %.idx23 = shl i64 %200, 4, !dbg !35
  %201 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx23, !dbg !35
  %202 = getelementptr float, ptr addrspace(1) %201, i64 %187, !dbg !35
  %203 = extractelement <4 x i64> %169, i64 1, !dbg !35
  %.idx24 = shl i64 %203, 4, !dbg !35
  %204 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx24, !dbg !35
  %205 = getelementptr float, ptr addrspace(1) %204, i64 %187, !dbg !35
  %206 = extractelement <4 x i64> %169, i64 2, !dbg !35
  %.idx25 = shl i64 %206, 4, !dbg !35
  %207 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx25, !dbg !35
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %187, !dbg !35
  %209 = extractelement <4 x i64> %169, i64 3, !dbg !35
  %.idx26 = shl i64 %209, 4, !dbg !35
  %210 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx26, !dbg !35
  %211 = getelementptr float, ptr addrspace(1) %210, i64 %187, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %212 = ptrtoint ptr addrspace(1) %190 to i64, !dbg !36
  %213 = ptrtoint ptr addrspace(1) %193 to i64, !dbg !36
  %214 = ptrtoint ptr addrspace(1) %196 to i64, !dbg !36
  %215 = ptrtoint ptr addrspace(1) %199 to i64, !dbg !36
  %216 = ptrtoint ptr addrspace(1) %202 to i64, !dbg !36
  %217 = ptrtoint ptr addrspace(1) %205 to i64, !dbg !36
  %218 = ptrtoint ptr addrspace(1) %208 to i64, !dbg !36
  %219 = ptrtoint ptr addrspace(1) %211 to i64, !dbg !36
  %220 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %53, !dbg !36
  %221 = insertelement <1 x i64> poison, i64 %212, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %220, <1 x i64> %221, i1 true) #4, !dbg !36
  %222 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %58, !dbg !36
  %223 = insertelement <1 x i64> poison, i64 %213, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %222, <1 x i64> %223, i1 true) #4, !dbg !36
  %224 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %63, !dbg !36
  %225 = insertelement <1 x i64> poison, i64 %214, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %224, <1 x i64> %225, i1 true) #4, !dbg !36
  %226 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %68, !dbg !36
  %227 = insertelement <1 x i64> poison, i64 %215, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %226, <1 x i64> %227, i1 true) #4, !dbg !36
  %228 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %72, !dbg !36
  %229 = insertelement <1 x i64> poison, i64 %216, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %228, <1 x i64> %229, i1 true) #4, !dbg !36
  %230 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %77, !dbg !36
  %231 = insertelement <1 x i64> poison, i64 %217, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %230, <1 x i64> %231, i1 true) #4, !dbg !36
  %232 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %82, !dbg !36
  %233 = insertelement <1 x i64> poison, i64 %218, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %232, <1 x i64> %233, i1 true) #4, !dbg !36
  %234 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %87, !dbg !36
  %235 = insertelement <1 x i64> poison, i64 %219, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %234, <1 x i64> %235, i1 true) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %236 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %91, !dbg !36
  %237 = load i64, ptr addrspace(3) %236, align 8, !dbg !36
  %238 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %96, !dbg !36
  %239 = load i64, ptr addrspace(3) %238, align 8, !dbg !36
  %240 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %101, !dbg !36
  %241 = load i64, ptr addrspace(3) %240, align 8, !dbg !36
  %242 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %106, !dbg !36
  %243 = load i64, ptr addrspace(3) %242, align 8, !dbg !36
  %244 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %111, !dbg !36
  %245 = load i64, ptr addrspace(3) %244, align 8, !dbg !36
  %246 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %116, !dbg !36
  %247 = load i64, ptr addrspace(3) %246, align 8, !dbg !36
  %248 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %121, !dbg !36
  %249 = load i64, ptr addrspace(3) %248, align 8, !dbg !36
  %250 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %126, !dbg !36
  %251 = load i64, ptr addrspace(3) %250, align 8, !dbg !36
  %252 = inttoptr i64 %237 to ptr addrspace(1), !dbg !36
  %253 = inttoptr i64 %239 to ptr addrspace(1), !dbg !36
  %254 = inttoptr i64 %241 to ptr addrspace(1), !dbg !36
  %255 = inttoptr i64 %243 to ptr addrspace(1), !dbg !36
  %256 = inttoptr i64 %245 to ptr addrspace(1), !dbg !36
  %257 = inttoptr i64 %247 to ptr addrspace(1), !dbg !36
  %258 = inttoptr i64 %249 to ptr addrspace(1), !dbg !36
  %259 = inttoptr i64 %251 to ptr addrspace(1), !dbg !36
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 %184) #4, !dbg !36
  %261 = bitcast i32 %260 to float, !dbg !36
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %253, i1 %184) #4, !dbg !36
  %263 = bitcast i32 %262 to float, !dbg !36
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 %184) #4, !dbg !36
  %265 = bitcast i32 %264 to float, !dbg !36
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %255, i1 %184) #4, !dbg !36
  %267 = bitcast i32 %266 to float, !dbg !36
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 %184) #4, !dbg !36
  %269 = bitcast i32 %268 to float, !dbg !36
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 %184) #4, !dbg !36
  %271 = bitcast i32 %270 to float, !dbg !36
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %258, i1 %184) #4, !dbg !36
  %273 = bitcast i32 %272 to float, !dbg !36
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %259, i1 %184) #4, !dbg !36
  %275 = bitcast i32 %274 to float, !dbg !36
  %276 = fadd float %93, %261, !dbg !37
  %277 = fadd float %98, %263, !dbg !37
  %278 = fadd float %103, %265, !dbg !37
  %279 = fadd float %108, %267, !dbg !37
  %280 = fadd float %113, %269, !dbg !37
  %281 = fadd float %118, %271, !dbg !37
  %282 = fadd float %123, %273, !dbg !37
  %283 = fadd float %128, %275, !dbg !37
  %284 = select i1 %184, float %276, float 0xFFF0000000000000, !dbg !38
  %285 = select i1 %184, float %277, float 0xFFF0000000000000, !dbg !38
  %286 = select i1 %184, float %278, float 0xFFF0000000000000, !dbg !38
  %287 = select i1 %184, float %279, float 0xFFF0000000000000, !dbg !38
  %288 = select i1 %184, float %280, float 0xFFF0000000000000, !dbg !38
  %289 = select i1 %184, float %281, float 0xFFF0000000000000, !dbg !38
  %290 = select i1 %184, float %282, float 0xFFF0000000000000, !dbg !38
  %291 = select i1 %184, float %283, float 0xFFF0000000000000, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %292 = fcmp ogt float %284, %285, !dbg !43
  %293 = fcmp uno float %284, 0.000000e+00, !dbg !45
  %294 = or i1 %293, %292, !dbg !46
  %295 = select i1 %294, float %284, float %285, !dbg !47
  %296 = fcmp ogt float %295, %286, !dbg !43
  %297 = fcmp uno float %295, 0.000000e+00, !dbg !45
  %298 = or i1 %296, %297, !dbg !46
  %299 = select i1 %298, float %295, float %286, !dbg !47
  %300 = fcmp ogt float %299, %287, !dbg !43
  %301 = fcmp uno float %299, 0.000000e+00, !dbg !45
  %302 = or i1 %300, %301, !dbg !46
  %303 = select i1 %302, float %299, float %287, !dbg !47
  %304 = fcmp ogt float %303, %288, !dbg !43
  %305 = fcmp uno float %303, 0.000000e+00, !dbg !45
  %306 = or i1 %304, %305, !dbg !46
  %307 = select i1 %306, float %303, float %288, !dbg !47
  %308 = fcmp ogt float %307, %289, !dbg !43
  %309 = fcmp uno float %307, 0.000000e+00, !dbg !45
  %310 = or i1 %308, %309, !dbg !46
  %311 = select i1 %310, float %307, float %289, !dbg !47
  %312 = fcmp ogt float %311, %290, !dbg !43
  %313 = fcmp uno float %311, 0.000000e+00, !dbg !45
  %314 = or i1 %312, %313, !dbg !46
  %315 = select i1 %314, float %311, float %290, !dbg !47
  %316 = fcmp ogt float %315, %291, !dbg !43
  %317 = fcmp uno float %315, 0.000000e+00, !dbg !45
  %318 = or i1 %316, %317, !dbg !46
  %319 = select i1 %318, float %315, float %291, !dbg !47
  %320 = and i32 %185, 7, !dbg !39
  %321 = shl nuw nsw i32 %180, 3, !dbg !39
  %322 = or disjoint i32 %321, %320, !dbg !39
  %323 = getelementptr float, ptr addrspace(3) @global_smem, i32 %322, !dbg !39
  %324 = bitcast float %319 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, <1 x i32> %324, i1 true) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %325 = icmp slt i32 %8, 256, !dbg !39
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !39
  %327 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %326, i1 %325) #4, !dbg !39
  %328 = bitcast i32 %327 to float, !dbg !39
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 4, i32 31), !dbg !39
  %330 = bitcast i32 %329 to float, !dbg !39
  %331 = fcmp ogt float %328, %330, !dbg !43
  %332 = fcmp uno float %328, 0.000000e+00, !dbg !45
  %333 = or i1 %332, %331, !dbg !46
  %334 = select i1 %333, float %328, float %330, !dbg !47
  %335 = bitcast float %334 to i32, !dbg !39
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 2, i32 31), !dbg !39
  %337 = bitcast i32 %336 to float, !dbg !39
  %338 = fcmp ogt float %334, %337, !dbg !43
  %339 = fcmp uno float %334, 0.000000e+00, !dbg !45
  %340 = or i1 %338, %339, !dbg !46
  %341 = select i1 %340, float %334, float %337, !dbg !47
  %342 = bitcast float %341 to i32, !dbg !39
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 1, i32 31), !dbg !39
  %344 = bitcast i32 %343 to float, !dbg !39
  %345 = fcmp ogt float %341, %344, !dbg !43
  %346 = fcmp uno float %341, 0.000000e+00, !dbg !45
  %347 = or i1 %345, %346, !dbg !46
  %348 = and i32 %8, 7, !dbg !39
  %349 = icmp eq i32 %348, 0, !dbg !39
  %350 = and i1 %325, %349, !dbg !39
  %351 = select i1 %347, i32 %342, i32 %343, !dbg !47
  %352 = insertelement <1 x i32> poison, i32 %351, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %352, i1 %350) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %353 = getelementptr float, ptr addrspace(3) @global_smem, i32 %321, !dbg !39
  %354 = load float, ptr addrspace(3) %353, align 16, !dbg !39
  %355 = fsub float %276, %354, !dbg !48
  %356 = fsub float %277, %354, !dbg !48
  %357 = fsub float %278, %354, !dbg !48
  %358 = fsub float %279, %354, !dbg !48
  %359 = fsub float %280, %354, !dbg !48
  %360 = fsub float %281, %354, !dbg !48
  %361 = fsub float %282, %354, !dbg !48
  %362 = fsub float %283, %354, !dbg !48
  %363 = fmul float %355, 0x3FF7154760000000, !dbg !49
  %364 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %363) #4, !dbg !49
  %365 = fmul float %356, 0x3FF7154760000000, !dbg !49
  %366 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %365) #4, !dbg !49
  %367 = fmul float %357, 0x3FF7154760000000, !dbg !49
  %368 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %367) #4, !dbg !49
  %369 = fmul float %358, 0x3FF7154760000000, !dbg !49
  %370 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %369) #4, !dbg !49
  %371 = fmul float %359, 0x3FF7154760000000, !dbg !49
  %372 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %371) #4, !dbg !49
  %373 = fmul float %360, 0x3FF7154760000000, !dbg !49
  %374 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %373) #4, !dbg !49
  %375 = fmul float %361, 0x3FF7154760000000, !dbg !49
  %376 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %375) #4, !dbg !49
  %377 = fmul float %362, 0x3FF7154760000000, !dbg !49
  %378 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %377) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %379 = fadd float %364, %366, !dbg !54
  %380 = fadd float %379, %368, !dbg !54
  %381 = fadd float %380, %370, !dbg !54
  %382 = fadd float %381, %372, !dbg !54
  %383 = fadd float %382, %374, !dbg !54
  %384 = fadd float %383, %376, !dbg !54
  %385 = fadd float %384, %378, !dbg !54
  %386 = bitcast float %385 to i32, !dbg !50
  %387 = select i1 %184, i32 %386, i32 0, !dbg !54
  %388 = insertelement <1 x i32> poison, i32 %387, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, <1 x i32> %388, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %389 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %326, i1 %325) #4, !dbg !50
  %390 = bitcast i32 %389 to float, !dbg !50
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %389, i32 4, i32 31), !dbg !50
  %392 = bitcast i32 %391 to float, !dbg !50
  %393 = fadd float %390, %392, !dbg !54
  %394 = bitcast float %393 to i32, !dbg !50
  %395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %394, i32 2, i32 31), !dbg !50
  %396 = bitcast i32 %395 to float, !dbg !50
  %397 = fadd float %393, %396, !dbg !54
  %398 = bitcast float %397 to i32, !dbg !50
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 1, i32 31), !dbg !50
  %400 = bitcast i32 %399 to float, !dbg !50
  %401 = fadd float %397, %400, !dbg !54
  %402 = bitcast float %401 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %402, i1 %350) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %403 = load float, ptr addrspace(3) %353, align 16, !dbg !50
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %364, float %403) #4, !dbg !56
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %366, float %403) #4, !dbg !56
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %368, float %403) #4, !dbg !56
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %370, float %403) #4, !dbg !56
  %408 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %372, float %403) #4, !dbg !56
  %409 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %374, float %403) #4, !dbg !56
  %410 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %376, float %403) #4, !dbg !56
  %411 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %378, float %403) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %412 = shl i32 %8, 6, !dbg !57
  %413 = and i32 %412, 1984, !dbg !57
  %.lobit27 = lshr exact i32 %10, 5, !dbg !57
  %414 = and i32 %185, 6, !dbg !57
  %415 = or disjoint i32 %.lobit27, %414, !dbg !57
  %416 = or disjoint i32 %415, %413, !dbg !57
  %417 = and i32 %21, 1020, !dbg !57
  %418 = lshr exact i32 %413, 2, !dbg !57
  %419 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %418, !dbg !57
  %420 = getelementptr float, ptr addrspace(3) %419, i32 %416, !dbg !57
  %421 = bitcast float %404 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %420, <1 x i32> %421, i1 true) #4, !dbg !57
  %422 = or disjoint i32 %416, 8, !dbg !57
  %423 = getelementptr float, ptr addrspace(3) %419, i32 %422, !dbg !57
  %424 = bitcast float %405 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %423, <1 x i32> %424, i1 true) #4, !dbg !57
  %425 = or disjoint i32 %416, 16, !dbg !57
  %426 = getelementptr float, ptr addrspace(3) %419, i32 %425, !dbg !57
  %427 = bitcast float %406 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %426, <1 x i32> %427, i1 true) #4, !dbg !57
  %428 = or disjoint i32 %416, 24, !dbg !57
  %429 = getelementptr float, ptr addrspace(3) %419, i32 %428, !dbg !57
  %430 = bitcast float %407 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %429, <1 x i32> %430, i1 true) #4, !dbg !57
  %431 = or disjoint i32 %416, 32, !dbg !57
  %432 = getelementptr float, ptr addrspace(3) %419, i32 %431, !dbg !57
  %433 = bitcast float %408 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %432, <1 x i32> %433, i1 true) #4, !dbg !57
  %434 = or disjoint i32 %416, 40, !dbg !57
  %435 = getelementptr float, ptr addrspace(3) %419, i32 %434, !dbg !57
  %436 = bitcast float %409 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %436, i1 true) #4, !dbg !57
  %437 = or disjoint i32 %416, 48, !dbg !57
  %438 = getelementptr float, ptr addrspace(3) %419, i32 %437, !dbg !57
  %439 = bitcast float %410 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %438, <1 x i32> %439, i1 true) #4, !dbg !57
  %440 = or disjoint i32 %416, 56, !dbg !57
  %441 = getelementptr float, ptr addrspace(3) %419, i32 %440, !dbg !57
  %442 = bitcast float %411 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %441, <1 x i32> %442, i1 true) #4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %443 = lshr i32 %21, 4, !dbg !57
  %444 = and i32 %443, 60, !dbg !57
  %445 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %444, !dbg !57
  %446 = getelementptr inbounds float, ptr addrspace(3) %445, i32 %417, !dbg !57
  %447 = or disjoint i32 %417, 1024, !dbg !57
  %448 = lshr i32 %447, 4, !dbg !57
  %449 = and i32 %448, 124, !dbg !57
  %450 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %449, !dbg !57
  %451 = getelementptr inbounds float, ptr addrspace(3) %450, i32 %447, !dbg !57
  %452 = load <4 x i32>, ptr addrspace(3) %451, align 16, !dbg !57
  %.extract = load i32, ptr addrspace(3) %446, align 16, !dbg !57
  %453 = getelementptr inbounds i8, ptr addrspace(3) %446, i32 4, !dbg !57
  %.extract36 = load i32, ptr addrspace(3) %453, align 4, !dbg !57
  %454 = getelementptr inbounds i8, ptr addrspace(3) %446, i32 8, !dbg !57
  %.extract37 = load i32, ptr addrspace(3) %454, align 8, !dbg !57
  %455 = getelementptr inbounds i8, ptr addrspace(3) %446, i32 12, !dbg !57
  %.extract38 = load i32, ptr addrspace(3) %455, align 4, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract36, i32 %.extract37, i32 %.extract38, ptr addrspace(1) %33, i1 %19) #4, !dbg !57
  %.extract39 = extractelement <4 x i32> %452, i64 0, !dbg !57
  %.extract40 = extractelement <4 x i32> %452, i64 1, !dbg !57
  %.extract41 = extractelement <4 x i32> %452, i64 2, !dbg !57
  %.extract42 = extractelement <4 x i32> %452, i64 3, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract39, i32 %.extract40, i32 %.extract41, i32 %.extract42, ptr addrspace(1) %35, i1 %20) #4, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c72chmggusoc4qy6ckmcnhptbblv3cv2mmq4rfyynhqjen62f2wl.py", directory: "inductor_cache/72")
!4 = !{ptr @triton_per_fused__softmax_add_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_add_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused__softmax_add_6", linkageName: "triton_per_fused__softmax_add_6", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 23, column: 28, scope: !11)
!13 = !DILocation(line: 23, column: 33, scope: !11)
!14 = !DILocation(line: 24, column: 44, scope: !11)
!15 = !DILocation(line: 24, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 21, scope: !11)
!17 = !DILocation(line: 26, column: 34, scope: !11)
!18 = !DILocation(line: 32, column: 21, scope: !11)
!19 = !DILocation(line: 31, column: 19, scope: !11)
!20 = !DILocation(line: 33, column: 42, scope: !11)
!21 = !DILocation(line: 33, column: 39, scope: !11)
!22 = !DILocation(line: 33, column: 34, scope: !11)
!23 = !DILocation(line: 33, column: 47, scope: !11)
!24 = !DILocation(line: 34, column: 38, scope: !11)
!25 = !DILocation(line: 34, column: 35, scope: !11)
!26 = !DILocation(line: 34, column: 30, scope: !11)
!27 = !DILocation(line: 34, column: 43, scope: !11)
!28 = !DILocation(line: 36, column: 18, scope: !11)
!29 = !DILocation(line: 37, column: 18, scope: !11)
!30 = !DILocation(line: 38, column: 32, scope: !11)
!31 = !DILocation(line: 39, column: 37, scope: !11)
!32 = !DILocation(line: 39, column: 62, scope: !11)
!33 = !DILocation(line: 32, column: 27, scope: !11)
!34 = !DILocation(line: 40, column: 35, scope: !11)
!35 = !DILocation(line: 40, column: 30, scope: !11)
!36 = !DILocation(line: 40, column: 44, scope: !11)
!37 = !DILocation(line: 41, column: 18, scope: !11)
!38 = !DILocation(line: 43, column: 34, scope: !11)
!39 = !DILocation(line: 131, column: 29, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !11, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 44, column: 39, scope: !11)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !42)
!44 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!45 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !42)
!46 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !42)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !42)
!48 = !DILocation(line: 45, column: 19, scope: !11)
!49 = !DILocation(line: 46, column: 24, scope: !11)
!50 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !11, file: !52, discriminator: 0)
!52 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!53 = !DILocation(line: 49, column: 26, scope: !11)
!54 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !53)
!55 = distinct !DILexicalBlockFile(scope: !51, file: !52, discriminator: 0)
!56 = !DILocation(line: 50, column: 20, scope: !11)
!57 = !DILocation(line: 51, column: 48, scope: !11)
!58 = !DILocation(line: 51, column: 4, scope: !11)
