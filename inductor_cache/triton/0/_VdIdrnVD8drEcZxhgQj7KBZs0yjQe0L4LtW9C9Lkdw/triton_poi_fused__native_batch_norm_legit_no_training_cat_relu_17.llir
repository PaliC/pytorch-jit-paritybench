; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 11264, !dbg !14
  %.frozen = freeze i32 %16, !dbg !15
  %18 = sdiv i32 %.frozen, 44, !dbg !15
  %19 = mul i32 %18, 44, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = sext i32 %.decomposed to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !17
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 %17) #3, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !19
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %17) #3, !dbg !20
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !20
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !20
  %27 = bitcast i32 %25 to float, !dbg !20
  %28 = bitcast i32 %26 to float, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !21
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %17) #3, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !23
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %17) #3, !dbg !24
  %33 = icmp slt i32 %.decomposed, 22, !dbg !25
  %34 = mul nsw i32 %18, 22, !dbg !26
  %35 = add nsw i32 %34, %.decomposed, !dbg !27
  %36 = sext i32 %35 to i64, !dbg !28
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !28
  %38 = and i1 %17, %33, !dbg !29
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #3, !dbg !30
  %40 = icmp sgt i32 %.decomposed, 21, !dbg !31
  %41 = sext i32 %35 to i64, !dbg !32
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !32
  %43 = getelementptr i8, ptr addrspace(1) %42, i64 -88, !dbg !32
  %44 = and i1 %17, %40, !dbg !33
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #3, !dbg !34
  %46 = fadd float %27, 0x3F50624DE0000000, !dbg !35
  %47 = fadd float %28, 0x3F50624DE0000000, !dbg !35
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %48, 0, !dbg !36
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %49, 0, !dbg !36
  br i1 %.not.i, label %55, label %50, !dbg !36

50:                                               ; preds = %10
  br i1 %.not1.i, label %53, label %51, !dbg !36

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

55:                                               ; preds = %10
  br i1 %.not1.i, label %58, label %56, !dbg !36

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %51, %53, %56, %58
  %.0.i = phi float [ %52, %51 ], [ %54, %53 ], [ %57, %56 ], [ %59, %58 ], !dbg !36
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i2 = icmp eq i32 %60, 0, !dbg !36
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i5 = icmp eq i32 %61, 0, !dbg !36
  br i1 %.not.i2, label %67, label %62, !dbg !36

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %65, label %63, !dbg !36

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #3, !dbg !36
  br label %__nv_sqrtf.exit6, !dbg !36

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #3, !dbg !36
  br label %__nv_sqrtf.exit6, !dbg !36

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %70, label %68, !dbg !36

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #3, !dbg !36
  br label %__nv_sqrtf.exit6, !dbg !36

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #3, !dbg !36
  br label %__nv_sqrtf.exit6, !dbg !36

__nv_sqrtf.exit6:                                 ; preds = %63, %65, %68, %70
  %.0.i4 = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !36
  %72 = extractvalue { i32, i32 } %39, 1, !dbg !30
  %73 = extractvalue { i32, i32 } %45, 1, !dbg !34
  %.v1 = select i1 %33, i32 %72, i32 %73, !dbg !37
  %74 = bitcast i32 %.v1 to float, !dbg !37
  %75 = extractvalue { i32, i32 } %22, 1, !dbg !18
  %76 = bitcast i32 %75 to float, !dbg !18
  %77 = fsub float %74, %76, !dbg !38
  %78 = extractvalue { i32, i32 } %39, 0, !dbg !30
  %79 = extractvalue { i32, i32 } %45, 0, !dbg !34
  %.v = select i1 %33, i32 %78, i32 %79, !dbg !37
  %80 = bitcast i32 %.v to float, !dbg !37
  %81 = extractvalue { i32, i32 } %22, 0, !dbg !18
  %82 = bitcast i32 %81 to float, !dbg !18
  %83 = fsub float %80, %82, !dbg !38
  %84 = extractvalue { i32, i32 } %32, 1, !dbg !24
  %85 = bitcast i32 %84 to float, !dbg !24
  %86 = extractvalue { i32, i32 } %32, 0, !dbg !24
  %87 = bitcast i32 %86 to float, !dbg !24
  %88 = extractvalue { i32, i32 } %30, 1, !dbg !22
  %89 = bitcast i32 %88 to float, !dbg !22
  %90 = extractvalue { i32, i32 } %30, 0, !dbg !22
  %91 = bitcast i32 %90 to float, !dbg !22
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !39
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !39
  %94 = fmul float %83, %92, !dbg !40
  %95 = fmul float %77, %93, !dbg !40
  %96 = fmul float %94, %91, !dbg !41
  %97 = fmul float %95, %89, !dbg !41
  %98 = fadd float %96, %87, !dbg !42
  %99 = fadd float %97, %85, !dbg !42
  %100 = fcmp olt float %98, 0.000000e+00, !dbg !43
  %101 = fcmp olt float %99, 0.000000e+00, !dbg !43
  %102 = select i1 %100, float 0.000000e+00, float %98, !dbg !47
  %103 = select i1 %101, float 0.000000e+00, float %99, !dbg !47
  %104 = sext i32 %16 to i64, !dbg !48
  %105 = getelementptr float, ptr addrspace(1) %6, i64 %104, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v, i32 %.v1, ptr addrspace(1) %105, i1 %17) #3, !dbg !49
  %106 = getelementptr float, ptr addrspace(1) %7, i64 %104, !dbg !50
  %107 = bitcast float %98 to i32, !dbg !51
  %108 = bitcast float %99 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %107, i32 %108, ptr addrspace(1) %106, i1 %17) #3, !dbg !51
  %109 = getelementptr float, ptr addrspace(1) %8, i64 %104, !dbg !52
  %110 = bitcast float %102 to i32, !dbg !53
  %111 = bitcast float %103 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %110, i32 %111, ptr addrspace(1) %109, i1 %17) #3, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clxpjm6bfigxkz5yby74y6ymthqep3qkhkn7as27pgrseinhmo7i.py", directory: "inductor_cache/lx")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_17", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 31, scope: !7)
!18 = !DILocation(line: 27, column: 36, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 35, column: 18, scope: !7)
!26 = !DILocation(line: 36, column: 33, scope: !7)
!27 = !DILocation(line: 36, column: 39, scope: !7)
!28 = !DILocation(line: 36, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 52, scope: !7)
!30 = !DILocation(line: 36, column: 45, scope: !7)
!31 = !DILocation(line: 37, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 30, scope: !7)
!33 = !DILocation(line: 40, column: 60, scope: !7)
!34 = !DILocation(line: 40, column: 53, scope: !7)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 45, column: 27, scope: !7)
!37 = !DILocation(line: 41, column: 33, scope: !7)
!38 = !DILocation(line: 42, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 50, column: 20, scope: !7)
!41 = !DILocation(line: 51, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 54, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 55, column: 25, scope: !7)
!49 = !DILocation(line: 55, column: 37, scope: !7)
!50 = !DILocation(line: 56, column: 25, scope: !7)
!51 = !DILocation(line: 56, column: 37, scope: !7)
!52 = !DILocation(line: 57, column: 25, scope: !7)
!53 = !DILocation(line: 57, column: 37, scope: !7)
!54 = !DILocation(line: 57, column: 4, scope: !7)
