; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__softmax_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 24, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 28, !dbg !12
  %12 = and i32 %8, 31, !dbg !12
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 64, !dbg !14
  %16 = icmp slt i32 %14, 64, !dbg !14
  %17 = lshr i32 %8, 5, !dbg !15
  %.frozen = freeze i32 %13, !dbg !16
  %18 = sdiv i32 %.frozen, 16, !dbg !16
  %19 = mul i32 %18, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %20 = shl i32 %8, 1, !dbg !18
  %21 = and i32 %20, 496, !dbg !18
  %22 = shl i32 %18, 10, !dbg !19
  %23 = add i32 %22, %.decomposed, !dbg !20
  %24 = add i32 %23, %21, !dbg !21
  %25 = add i32 %23, 512, !dbg !20
  %26 = add nuw i32 %25, %21, !dbg !21
  %27 = sext i32 %24 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = sext i32 %26 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !23
  %36 = bitcast i32 %32 to float, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = bitcast i32 %35 to float, !dbg !23
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = bitcast i32 %42 to float, !dbg !23
  %47 = bitcast i32 %43 to float, !dbg !23
  %48 = bitcast i32 %44 to float, !dbg !23
  %49 = select i1 %15, float %36, float 0xFFF0000000000000, !dbg !24
  %50 = select i1 %15, float %37, float 0xFFF0000000000000, !dbg !24
  %51 = select i1 %15, float %38, float 0xFFF0000000000000, !dbg !24
  %52 = select i1 %15, float %39, float 0xFFF0000000000000, !dbg !24
  %53 = select i1 %15, float %45, float 0xFFF0000000000000, !dbg !24
  %54 = select i1 %15, float %46, float 0xFFF0000000000000, !dbg !24
  %55 = select i1 %15, float %47, float 0xFFF0000000000000, !dbg !24
  %56 = select i1 %15, float %48, float 0xFFF0000000000000, !dbg !24
  %57 = fcmp ogt float %49, %53, !dbg !25
  %58 = fcmp uno float %49, 0.000000e+00, !dbg !30
  %59 = or i1 %58, %57, !dbg !31
  %60 = select i1 %59, float %49, float %53, !dbg !32
  %61 = fcmp ogt float %50, %54, !dbg !25
  %62 = fcmp uno float %50, 0.000000e+00, !dbg !30
  %63 = or i1 %62, %61, !dbg !31
  %64 = select i1 %63, float %50, float %54, !dbg !32
  %65 = fcmp ogt float %51, %55, !dbg !25
  %66 = fcmp uno float %51, 0.000000e+00, !dbg !30
  %67 = or i1 %66, %65, !dbg !31
  %68 = select i1 %67, float %51, float %55, !dbg !32
  %69 = fcmp ogt float %52, %56, !dbg !25
  %70 = fcmp uno float %52, 0.000000e+00, !dbg !30
  %71 = or i1 %70, %69, !dbg !31
  %72 = select i1 %71, float %52, float %56, !dbg !32
  %73 = bitcast float %60 to i32, !dbg !33
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 16, i32 31), !dbg !33
  %75 = bitcast i32 %74 to float, !dbg !33
  %76 = fcmp ogt float %60, %75, !dbg !25
  %77 = fcmp uno float %60, 0.000000e+00, !dbg !30
  %78 = or i1 %76, %77, !dbg !31
  %79 = select i1 %78, float %60, float %75, !dbg !32
  %80 = bitcast float %79 to i32, !dbg !33
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 8, i32 31), !dbg !33
  %82 = bitcast i32 %81 to float, !dbg !33
  %83 = fcmp ogt float %79, %82, !dbg !25
  %84 = fcmp uno float %79, 0.000000e+00, !dbg !30
  %85 = or i1 %83, %84, !dbg !31
  %86 = bitcast float %64 to i32, !dbg !33
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 16, i32 31), !dbg !33
  %88 = bitcast i32 %87 to float, !dbg !33
  %89 = fcmp ogt float %64, %88, !dbg !25
  %90 = fcmp uno float %64, 0.000000e+00, !dbg !30
  %91 = or i1 %89, %90, !dbg !31
  %92 = select i1 %91, float %64, float %88, !dbg !32
  %93 = bitcast float %92 to i32, !dbg !33
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 8, i32 31), !dbg !33
  %95 = bitcast i32 %94 to float, !dbg !33
  %96 = fcmp ogt float %92, %95, !dbg !25
  %97 = fcmp uno float %92, 0.000000e+00, !dbg !30
  %98 = or i1 %96, %97, !dbg !31
  %99 = bitcast float %68 to i32, !dbg !33
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 16, i32 31), !dbg !33
  %101 = bitcast i32 %100 to float, !dbg !33
  %102 = fcmp ogt float %68, %101, !dbg !25
  %103 = fcmp uno float %68, 0.000000e+00, !dbg !30
  %104 = or i1 %102, %103, !dbg !31
  %105 = select i1 %104, float %68, float %101, !dbg !32
  %106 = bitcast float %105 to i32, !dbg !33
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 8, i32 31), !dbg !33
  %108 = bitcast i32 %107 to float, !dbg !33
  %109 = fcmp ogt float %105, %108, !dbg !25
  %110 = fcmp uno float %105, 0.000000e+00, !dbg !30
  %111 = or i1 %109, %110, !dbg !31
  %112 = bitcast float %72 to i32, !dbg !33
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 16, i32 31), !dbg !33
  %114 = bitcast i32 %113 to float, !dbg !33
  %115 = fcmp ogt float %72, %114, !dbg !25
  %116 = fcmp uno float %72, 0.000000e+00, !dbg !30
  %117 = or i1 %116, %115, !dbg !31
  %118 = select i1 %117, float %72, float %114, !dbg !32
  %119 = bitcast float %118 to i32, !dbg !33
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 8, i32 31), !dbg !33
  %121 = bitcast i32 %120 to float, !dbg !33
  %122 = fcmp ogt float %118, %121, !dbg !25
  %123 = fcmp uno float %118, 0.000000e+00, !dbg !30
  %124 = or i1 %122, %123, !dbg !31
  %125 = icmp eq i32 %9, 0, !dbg !33
  %126 = and i32 %17, 7, !dbg !33
  %127 = shl nuw nsw i32 %11, 3, !dbg !33
  %128 = or disjoint i32 %127, %126, !dbg !33
  %129 = zext nneg i32 %128 to i64, !dbg !33
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i64 %129, !dbg !33
  %131 = select i1 %85, i32 %80, i32 %81, !dbg !32
  %132 = insertelement <1 x i32> poison, i32 %131, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %132, i1 %125) #3, !dbg !33
  %133 = or disjoint i32 %127, 8, !dbg !33
  %134 = or disjoint i32 %133, %126, !dbg !33
  %135 = zext nneg i32 %134 to i64, !dbg !33
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i64 %135, !dbg !33
  %137 = select i1 %98, i32 %93, i32 %94, !dbg !32
  %138 = insertelement <1 x i32> poison, i32 %137, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %138, i1 %125) #3, !dbg !33
  %139 = or disjoint i32 %127, 16, !dbg !33
  %140 = or disjoint i32 %139, %126, !dbg !33
  %141 = zext nneg i32 %140 to i64, !dbg !33
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i64 %141, !dbg !33
  %143 = select i1 %111, i32 %106, i32 %107, !dbg !32
  %144 = insertelement <1 x i32> poison, i32 %143, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %144, i1 %125) #3, !dbg !33
  %145 = or disjoint i32 %127, 24, !dbg !33
  %146 = or disjoint i32 %145, %126, !dbg !33
  %147 = zext nneg i32 %146 to i64, !dbg !33
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i64 %147, !dbg !33
  %149 = select i1 %124, i32 %119, i32 %120, !dbg !32
  %150 = insertelement <1 x i32> poison, i32 %149, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %150, i1 %125) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %151 = icmp slt i32 %8, 256, !dbg !33
  %152 = sext i32 %8 to i64, !dbg !33
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i64 %152, !dbg !33
  %154 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %153, i1 %151) #3, !dbg !33
  %155 = bitcast i32 %154 to float, !dbg !33
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 4, i32 31), !dbg !33
  %157 = bitcast i32 %156 to float, !dbg !33
  %158 = fcmp ogt float %155, %157, !dbg !25
  %159 = fcmp uno float %155, 0.000000e+00, !dbg !30
  %160 = or i1 %159, %158, !dbg !31
  %161 = select i1 %160, float %155, float %157, !dbg !32
  %162 = bitcast float %161 to i32, !dbg !33
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 2, i32 31), !dbg !33
  %164 = bitcast i32 %163 to float, !dbg !33
  %165 = fcmp ogt float %161, %164, !dbg !25
  %166 = fcmp uno float %161, 0.000000e+00, !dbg !30
  %167 = or i1 %165, %166, !dbg !31
  %168 = select i1 %167, float %161, float %164, !dbg !32
  %169 = bitcast float %168 to i32, !dbg !33
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 1, i32 31), !dbg !33
  %171 = bitcast i32 %170 to float, !dbg !33
  %172 = fcmp ogt float %168, %171, !dbg !25
  %173 = fcmp uno float %168, 0.000000e+00, !dbg !30
  %174 = or i1 %172, %173, !dbg !31
  %175 = and i32 %8, 7, !dbg !33
  %176 = icmp eq i32 %175, 0, !dbg !33
  %177 = and i1 %151, %176, !dbg !33
  %178 = select i1 %174, i32 %169, i32 %170, !dbg !32
  %179 = insertelement <1 x i32> poison, i32 %178, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %179, i1 %177) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %180 = zext nneg i32 %127 to i64, !dbg !33
  %181 = getelementptr float, ptr addrspace(3) @global_smem, i64 %180, !dbg !33
  %182 = load float, ptr addrspace(3) %181, align 16, !dbg !33
  %183 = zext nneg i32 %133 to i64, !dbg !33
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i64 %183, !dbg !33
  %185 = load float, ptr addrspace(3) %184, align 16, !dbg !33
  %186 = zext nneg i32 %139 to i64, !dbg !33
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i64 %186, !dbg !33
  %188 = load float, ptr addrspace(3) %187, align 16, !dbg !33
  %189 = zext nneg i32 %145 to i64, !dbg !33
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i64 %189, !dbg !33
  %191 = load float, ptr addrspace(3) %190, align 16, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %192 = zext nneg i32 %11 to i64, !dbg !34
  %193 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %192, !dbg !34
  %194 = bitcast float %182 to i32, !dbg !34
  %195 = bitcast float %185 to i32, !dbg !34
  %196 = bitcast float %188 to i32, !dbg !34
  %197 = bitcast float %191 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %193, i32 %194, i32 %195, i32 %196, i32 %197, i1 true) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %198 = zext nneg i32 %12 to i64, !dbg !34
  %199 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %198, !dbg !34
  %200 = load i32, ptr addrspace(3) %199, align 4, !dbg !34
  %201 = fsub float %36, %182, !dbg !35
  %202 = fsub float %37, %185, !dbg !35
  %203 = fsub float %38, %188, !dbg !35
  %204 = fsub float %39, %191, !dbg !35
  %205 = fsub float %45, %182, !dbg !35
  %206 = fsub float %46, %185, !dbg !35
  %207 = fsub float %47, %188, !dbg !35
  %208 = fsub float %48, %191, !dbg !35
  %209 = fmul float %201, 0x3FF7154760000000, !dbg !36
  %210 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %209) #3, !dbg !36
  %211 = fmul float %202, 0x3FF7154760000000, !dbg !36
  %212 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %211) #3, !dbg !36
  %213 = fmul float %203, 0x3FF7154760000000, !dbg !36
  %214 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %213) #3, !dbg !36
  %215 = fmul float %204, 0x3FF7154760000000, !dbg !36
  %216 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %215) #3, !dbg !36
  %217 = fmul float %205, 0x3FF7154760000000, !dbg !36
  %218 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %217) #3, !dbg !36
  %219 = fmul float %206, 0x3FF7154760000000, !dbg !36
  %220 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %219) #3, !dbg !36
  %221 = fmul float %207, 0x3FF7154760000000, !dbg !36
  %222 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %221) #3, !dbg !36
  %223 = fmul float %208, 0x3FF7154760000000, !dbg !36
  %224 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %223) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %225 = fadd float %210, %218, !dbg !41
  %226 = select i1 %15, float %225, float 0.000000e+00, !dbg !41
  %227 = fadd float %212, %220, !dbg !41
  %228 = select i1 %15, float %227, float 0.000000e+00, !dbg !41
  %229 = fadd float %214, %222, !dbg !41
  %230 = select i1 %15, float %229, float 0.000000e+00, !dbg !41
  %231 = fadd float %216, %224, !dbg !41
  %232 = select i1 %15, float %231, float 0.000000e+00, !dbg !41
  %233 = bitcast float %226 to i32, !dbg !37
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 16, i32 31), !dbg !37
  %235 = bitcast i32 %234 to float, !dbg !37
  %236 = fadd float %226, %235, !dbg !41
  %237 = bitcast float %236 to i32, !dbg !37
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 8, i32 31), !dbg !37
  %239 = bitcast i32 %238 to float, !dbg !37
  %240 = fadd float %236, %239, !dbg !41
  %241 = bitcast float %228 to i32, !dbg !37
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 16, i32 31), !dbg !37
  %243 = bitcast i32 %242 to float, !dbg !37
  %244 = fadd float %228, %243, !dbg !41
  %245 = bitcast float %244 to i32, !dbg !37
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 8, i32 31), !dbg !37
  %247 = bitcast i32 %246 to float, !dbg !37
  %248 = fadd float %244, %247, !dbg !41
  %249 = bitcast float %230 to i32, !dbg !37
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 16, i32 31), !dbg !37
  %251 = bitcast i32 %250 to float, !dbg !37
  %252 = fadd float %230, %251, !dbg !41
  %253 = bitcast float %252 to i32, !dbg !37
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 8, i32 31), !dbg !37
  %255 = bitcast i32 %254 to float, !dbg !37
  %256 = fadd float %252, %255, !dbg !41
  %257 = bitcast float %232 to i32, !dbg !37
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 16, i32 31), !dbg !37
  %259 = bitcast i32 %258 to float, !dbg !37
  %260 = fadd float %232, %259, !dbg !41
  %261 = bitcast float %260 to i32, !dbg !37
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 8, i32 31), !dbg !37
  %263 = bitcast i32 %262 to float, !dbg !37
  %264 = fadd float %260, %263, !dbg !41
  %265 = bitcast float %240 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %265, i1 %125) #3, !dbg !37
  %266 = bitcast float %248 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %266, i1 %125) #3, !dbg !37
  %267 = bitcast float %256 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %267, i1 %125) #3, !dbg !37
  %268 = bitcast float %264 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %268, i1 %125) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %269 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %153, i1 %151) #3, !dbg !37
  %270 = bitcast i32 %269 to float, !dbg !37
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 4, i32 31), !dbg !37
  %272 = bitcast i32 %271 to float, !dbg !37
  %273 = fadd float %270, %272, !dbg !41
  %274 = bitcast float %273 to i32, !dbg !37
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 2, i32 31), !dbg !37
  %276 = bitcast i32 %275 to float, !dbg !37
  %277 = fadd float %273, %276, !dbg !41
  %278 = bitcast float %277 to i32, !dbg !37
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 1, i32 31), !dbg !37
  %280 = bitcast i32 %279 to float, !dbg !37
  %281 = fadd float %277, %280, !dbg !41
  %282 = bitcast float %281 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %282, i1 %177) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %283 = load i32, ptr addrspace(3) %181, align 16, !dbg !37
  %284 = load i32, ptr addrspace(3) %184, align 16, !dbg !37
  %285 = load i32, ptr addrspace(3) %187, align 16, !dbg !37
  %286 = load i32, ptr addrspace(3) %190, align 16, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %193, i32 %283, i32 %284, i32 %285, i32 %286, i1 true) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %287 = load i32, ptr addrspace(3) %199, align 4, !dbg !43
  %288 = sext i32 %14 to i64, !dbg !44
  %289 = getelementptr float, ptr addrspace(1) %1, i64 %288, !dbg !44
  %290 = icmp eq i32 %126, 0, !dbg !45
  %291 = and i1 %290, %16, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %200, ptr addrspace(1) %289, i1 %291) #3, !dbg !45
  %292 = getelementptr float, ptr addrspace(1) %2, i64 %288, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %287, ptr addrspace(1) %292, i1 %291) #3, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clslm2fjxzo3rpx3cciunpkjxex2uqu4d56jbk6xneyasmgwkqfr.py", directory: "inductor_cache/ls")
!4 = !{ptr @triton_per_fused__softmax_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_1", linkageName: "triton_per_fused__softmax_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 48, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 53, scope: !7)
!24 = !DILocation(line: 35, column: 33, scope: !7)
!25 = !DILocation(line: 118, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!29 = !DILocation(line: 36, column: 37, scope: !7)
!30 = !DILocation(line: 120, column: 21, scope: !26, inlinedAt: !29)
!31 = !DILocation(line: 120, column: 16, scope: !26, inlinedAt: !29)
!32 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !29)
!33 = !DILocation(line: 131, column: 29, scope: !28, inlinedAt: !29)
!34 = !DILocation(line: 36, column: 40, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 38, column: 23, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!40 = !DILocation(line: 41, column: 25, scope: !7)
!41 = !DILocation(line: 256, column: 15, scope: !42, inlinedAt: !40)
!42 = distinct !DILexicalBlockFile(scope: !38, file: !39, discriminator: 0)
!43 = !DILocation(line: 41, column: 28, scope: !7)
!44 = !DILocation(line: 42, column: 25, scope: !7)
!45 = !DILocation(line: 42, column: 36, scope: !7)
!46 = !DILocation(line: 43, column: 25, scope: !7)
!47 = !DILocation(line: 43, column: 37, scope: !7)
!48 = !DILocation(line: 43, column: 4, scope: !7)
