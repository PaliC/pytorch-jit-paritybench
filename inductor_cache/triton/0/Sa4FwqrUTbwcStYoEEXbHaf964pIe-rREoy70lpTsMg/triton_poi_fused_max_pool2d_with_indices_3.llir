; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 2, !dbg !13
  %13 = or disjoint i32 %10, 3, !dbg !13
  %14 = or disjoint i32 %10, 512, !dbg !13
  %15 = or disjoint i32 %10, 513, !dbg !13
  %16 = or disjoint i32 %10, 514, !dbg !13
  %17 = or disjoint i32 %10, 515, !dbg !13
  %18 = icmp slt i32 %10, 4064256, !dbg !14
  %19 = icmp slt i32 %14, 4064256, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %20 = sdiv i32 %.frozen, 126, !dbg !15
  %21 = mul i32 %20, 126, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %22 = srem i32 %11, 126, !dbg !16
  %.frozen14 = freeze i32 %12, !dbg !15
  %23 = sdiv i32 %.frozen14, 126, !dbg !15
  %24 = mul i32 %23, 126, !dbg !16
  %.decomposed15 = sub i32 %.frozen14, %24, !dbg !16
  %25 = srem i32 %13, 126, !dbg !16
  %.frozen16 = freeze i32 %14, !dbg !15
  %26 = sdiv i32 %.frozen16, 126, !dbg !15
  %27 = mul i32 %26, 126, !dbg !16
  %.decomposed17 = sub i32 %.frozen16, %27, !dbg !16
  %28 = srem i32 %15, 126, !dbg !16
  %.frozen18 = freeze i32 %16, !dbg !15
  %29 = sdiv i32 %.frozen18, 126, !dbg !15
  %30 = mul i32 %29, 126, !dbg !16
  %.decomposed19 = sub i32 %.frozen18, %30, !dbg !16
  %31 = srem i32 %17, 126, !dbg !16
  %32 = srem i32 %20, 126, !dbg !17
  %33 = srem i32 %23, 126, !dbg !17
  %34 = srem i32 %26, 126, !dbg !17
  %35 = srem i32 %29, 126, !dbg !17
  %.frozen24 = freeze i32 %10, !dbg !18
  %36 = sdiv i32 %.frozen24, 15876, !dbg !18
  %.frozen26 = freeze i32 %14, !dbg !18
  %37 = sdiv i32 %.frozen26, 15876, !dbg !18
  %.frozen20 = freeze i32 %10, !dbg !19
  %38 = sdiv i32 %.frozen20, 1016064, !dbg !19
  %.frozen22 = freeze i32 %14, !dbg !19
  %39 = sdiv i32 %.frozen22, 1016064, !dbg !19
  %40 = mul i32 %38, 1016064, !dbg !20
  %.decomposed21 = sub i32 %.frozen20, %40, !dbg !20
  %41 = mul i32 %39, 1016064, !dbg !20
  %.decomposed23 = sub i32 %.frozen22, %41, !dbg !20
  %42 = mul i32 %36, 15876, !dbg !21
  %.decomposed25 = sub i32 %.frozen24, %42, !dbg !21
  %43 = mul i32 %37, 15876, !dbg !21
  %.decomposed27 = sub i32 %.frozen26, %43, !dbg !21
  %44 = shl nsw i32 %.decomposed, 1, !dbg !22
  %45 = shl nsw i32 %22, 1, !dbg !22
  %46 = shl nsw i32 %.decomposed15, 1, !dbg !22
  %47 = shl nsw i32 %25, 1, !dbg !22
  %48 = shl nsw i32 %.decomposed17, 1, !dbg !22
  %49 = shl nsw i32 %28, 1, !dbg !22
  %50 = shl nsw i32 %.decomposed19, 1, !dbg !22
  %51 = shl nsw i32 %31, 1, !dbg !22
  %52 = mul nsw i32 %32, 506, !dbg !23
  %53 = mul nsw i32 %33, 506, !dbg !23
  %54 = mul nsw i32 %34, 506, !dbg !23
  %55 = mul nsw i32 %35, 506, !dbg !23
  %56 = mul i32 %36, 64009, !dbg !24
  %57 = mul i32 %37, 64009, !dbg !24
  %58 = add i32 %52, %56, !dbg !25
  %59 = add i32 %58, %44, !dbg !26
  %60 = add i32 %58, %45, !dbg !26
  %61 = add i32 %56, %53, !dbg !25
  %62 = add i32 %61, %46, !dbg !26
  %63 = add i32 %61, %47, !dbg !26
  %64 = add i32 %54, %57, !dbg !25
  %65 = add i32 %64, %48, !dbg !26
  %66 = add i32 %64, %49, !dbg !26
  %67 = add i32 %55, %57, !dbg !25
  %68 = add i32 %67, %50, !dbg !26
  %69 = add i32 %67, %51, !dbg !26
  %70 = sext i32 %59 to i64, !dbg !27
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !27
  %72 = sext i32 %60 to i64, !dbg !27
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !27
  %74 = sext i32 %62 to i64, !dbg !27
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !27
  %76 = sext i32 %63 to i64, !dbg !27
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !27
  %78 = sext i32 %65 to i64, !dbg !27
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !27
  %80 = sext i32 %66 to i64, !dbg !27
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !27
  %82 = sext i32 %68 to i64, !dbg !27
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !27
  %84 = sext i32 %69 to i64, !dbg !27
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !27
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %18) #1, !dbg !28
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %18) #1, !dbg !28
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %18) #1, !dbg !28
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %18) #1, !dbg !28
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %19) #1, !dbg !28
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %19) #1, !dbg !28
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %19) #1, !dbg !28
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %19) #1, !dbg !28
  %94 = add i32 %58, 1, !dbg !29
  %95 = add i32 %94, %44, !dbg !30
  %96 = add i32 %94, %45, !dbg !30
  %97 = add i32 %61, 1, !dbg !29
  %98 = add i32 %97, %46, !dbg !30
  %99 = add i32 %97, %47, !dbg !30
  %100 = add i32 %64, 1, !dbg !29
  %101 = add i32 %100, %48, !dbg !30
  %102 = add i32 %100, %49, !dbg !30
  %103 = add i32 %67, 1, !dbg !29
  %104 = add i32 %103, %50, !dbg !30
  %105 = add i32 %103, %51, !dbg !30
  %106 = sext i32 %95 to i64, !dbg !31
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !31
  %108 = sext i32 %96 to i64, !dbg !31
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !31
  %110 = sext i32 %98 to i64, !dbg !31
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !31
  %112 = sext i32 %99 to i64, !dbg !31
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !31
  %114 = sext i32 %101 to i64, !dbg !31
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !31
  %116 = sext i32 %102 to i64, !dbg !31
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !31
  %118 = sext i32 %104 to i64, !dbg !31
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !31
  %120 = sext i32 %105 to i64, !dbg !31
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !31
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %18) #1, !dbg !32
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %18) #1, !dbg !32
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %18) #1, !dbg !32
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %18) #1, !dbg !32
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %19) #1, !dbg !32
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %19) #1, !dbg !32
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %19) #1, !dbg !32
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %19) #1, !dbg !32
  %130 = add i32 %58, 2, !dbg !33
  %131 = add i32 %130, %44, !dbg !34
  %132 = add i32 %130, %45, !dbg !34
  %133 = add i32 %61, 2, !dbg !33
  %134 = add i32 %133, %46, !dbg !34
  %135 = add i32 %133, %47, !dbg !34
  %136 = add i32 %64, 2, !dbg !33
  %137 = add i32 %136, %48, !dbg !34
  %138 = add i32 %136, %49, !dbg !34
  %139 = add i32 %67, 2, !dbg !33
  %140 = add i32 %139, %50, !dbg !34
  %141 = add i32 %139, %51, !dbg !34
  %142 = sext i32 %131 to i64, !dbg !35
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !35
  %144 = sext i32 %132 to i64, !dbg !35
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !35
  %146 = sext i32 %134 to i64, !dbg !35
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !35
  %148 = sext i32 %135 to i64, !dbg !35
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !35
  %150 = sext i32 %137 to i64, !dbg !35
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !35
  %152 = sext i32 %138 to i64, !dbg !35
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !35
  %154 = sext i32 %140 to i64, !dbg !35
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !35
  %156 = sext i32 %141 to i64, !dbg !35
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !35
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %18) #1, !dbg !36
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %18) #1, !dbg !36
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %18) #1, !dbg !36
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %18) #1, !dbg !36
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %19) #1, !dbg !36
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %19) #1, !dbg !36
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %19) #1, !dbg !36
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %19) #1, !dbg !36
  %166 = add i32 %58, 253, !dbg !37
  %167 = add i32 %166, %44, !dbg !38
  %168 = add i32 %166, %45, !dbg !38
  %169 = add i32 %61, 253, !dbg !37
  %170 = add i32 %169, %46, !dbg !38
  %171 = add i32 %169, %47, !dbg !38
  %172 = add i32 %64, 253, !dbg !37
  %173 = add i32 %172, %48, !dbg !38
  %174 = add i32 %172, %49, !dbg !38
  %175 = add i32 %67, 253, !dbg !37
  %176 = add i32 %175, %50, !dbg !38
  %177 = add i32 %175, %51, !dbg !38
  %178 = sext i32 %167 to i64, !dbg !39
  %179 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !39
  %180 = sext i32 %168 to i64, !dbg !39
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !39
  %182 = sext i32 %170 to i64, !dbg !39
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !39
  %184 = sext i32 %171 to i64, !dbg !39
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !39
  %186 = sext i32 %173 to i64, !dbg !39
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !39
  %188 = sext i32 %174 to i64, !dbg !39
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !39
  %190 = sext i32 %176 to i64, !dbg !39
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !39
  %192 = sext i32 %177 to i64, !dbg !39
  %193 = getelementptr float, ptr addrspace(1) %0, i64 %192, !dbg !39
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %18) #1, !dbg !40
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 %18) #1, !dbg !40
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %18) #1, !dbg !40
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %18) #1, !dbg !40
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %19) #1, !dbg !40
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 %19) #1, !dbg !40
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %19) #1, !dbg !40
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 %19) #1, !dbg !40
  %202 = add i32 %58, 254, !dbg !41
  %203 = add i32 %202, %44, !dbg !42
  %204 = add i32 %202, %45, !dbg !42
  %205 = add i32 %61, 254, !dbg !41
  %206 = add i32 %205, %46, !dbg !42
  %207 = add i32 %205, %47, !dbg !42
  %208 = add i32 %64, 254, !dbg !41
  %209 = add i32 %208, %48, !dbg !42
  %210 = add i32 %208, %49, !dbg !42
  %211 = add i32 %67, 254, !dbg !41
  %212 = add i32 %211, %50, !dbg !42
  %213 = add i32 %211, %51, !dbg !42
  %214 = sext i32 %203 to i64, !dbg !43
  %215 = getelementptr float, ptr addrspace(1) %0, i64 %214, !dbg !43
  %216 = sext i32 %204 to i64, !dbg !43
  %217 = getelementptr float, ptr addrspace(1) %0, i64 %216, !dbg !43
  %218 = sext i32 %206 to i64, !dbg !43
  %219 = getelementptr float, ptr addrspace(1) %0, i64 %218, !dbg !43
  %220 = sext i32 %207 to i64, !dbg !43
  %221 = getelementptr float, ptr addrspace(1) %0, i64 %220, !dbg !43
  %222 = sext i32 %209 to i64, !dbg !43
  %223 = getelementptr float, ptr addrspace(1) %0, i64 %222, !dbg !43
  %224 = sext i32 %210 to i64, !dbg !43
  %225 = getelementptr float, ptr addrspace(1) %0, i64 %224, !dbg !43
  %226 = sext i32 %212 to i64, !dbg !43
  %227 = getelementptr float, ptr addrspace(1) %0, i64 %226, !dbg !43
  %228 = sext i32 %213 to i64, !dbg !43
  %229 = getelementptr float, ptr addrspace(1) %0, i64 %228, !dbg !43
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %215, i1 %18) #1, !dbg !44
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 %18) #1, !dbg !44
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %219, i1 %18) #1, !dbg !44
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %221, i1 %18) #1, !dbg !44
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %223, i1 %19) #1, !dbg !44
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %225, i1 %19) #1, !dbg !44
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 %19) #1, !dbg !44
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %229, i1 %19) #1, !dbg !44
  %238 = add i32 %58, 255, !dbg !45
  %239 = add i32 %238, %44, !dbg !46
  %240 = add i32 %238, %45, !dbg !46
  %241 = add i32 %61, 255, !dbg !45
  %242 = add i32 %241, %46, !dbg !46
  %243 = add i32 %241, %47, !dbg !46
  %244 = add i32 %64, 255, !dbg !45
  %245 = add i32 %244, %48, !dbg !46
  %246 = add i32 %244, %49, !dbg !46
  %247 = add i32 %67, 255, !dbg !45
  %248 = add i32 %247, %50, !dbg !46
  %249 = add i32 %247, %51, !dbg !46
  %250 = sext i32 %239 to i64, !dbg !47
  %251 = getelementptr float, ptr addrspace(1) %0, i64 %250, !dbg !47
  %252 = sext i32 %240 to i64, !dbg !47
  %253 = getelementptr float, ptr addrspace(1) %0, i64 %252, !dbg !47
  %254 = sext i32 %242 to i64, !dbg !47
  %255 = getelementptr float, ptr addrspace(1) %0, i64 %254, !dbg !47
  %256 = sext i32 %243 to i64, !dbg !47
  %257 = getelementptr float, ptr addrspace(1) %0, i64 %256, !dbg !47
  %258 = sext i32 %245 to i64, !dbg !47
  %259 = getelementptr float, ptr addrspace(1) %0, i64 %258, !dbg !47
  %260 = sext i32 %246 to i64, !dbg !47
  %261 = getelementptr float, ptr addrspace(1) %0, i64 %260, !dbg !47
  %262 = sext i32 %248 to i64, !dbg !47
  %263 = getelementptr float, ptr addrspace(1) %0, i64 %262, !dbg !47
  %264 = sext i32 %249 to i64, !dbg !47
  %265 = getelementptr float, ptr addrspace(1) %0, i64 %264, !dbg !47
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %251, i1 %18) #1, !dbg !48
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %253, i1 %18) #1, !dbg !48
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %255, i1 %18) #1, !dbg !48
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 %18) #1, !dbg !48
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %259, i1 %19) #1, !dbg !48
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %261, i1 %19) #1, !dbg !48
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %263, i1 %19) #1, !dbg !48
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %265, i1 %19) #1, !dbg !48
  %274 = add i32 %58, 506, !dbg !49
  %275 = add i32 %274, %44, !dbg !50
  %276 = add i32 %274, %45, !dbg !50
  %277 = add i32 %61, 506, !dbg !49
  %278 = add i32 %277, %46, !dbg !50
  %279 = add i32 %277, %47, !dbg !50
  %280 = add i32 %64, 506, !dbg !49
  %281 = add i32 %280, %48, !dbg !50
  %282 = add i32 %280, %49, !dbg !50
  %283 = add i32 %67, 506, !dbg !49
  %284 = add i32 %283, %50, !dbg !50
  %285 = add i32 %283, %51, !dbg !50
  %286 = sext i32 %275 to i64, !dbg !51
  %287 = getelementptr float, ptr addrspace(1) %0, i64 %286, !dbg !51
  %288 = sext i32 %276 to i64, !dbg !51
  %289 = getelementptr float, ptr addrspace(1) %0, i64 %288, !dbg !51
  %290 = sext i32 %278 to i64, !dbg !51
  %291 = getelementptr float, ptr addrspace(1) %0, i64 %290, !dbg !51
  %292 = sext i32 %279 to i64, !dbg !51
  %293 = getelementptr float, ptr addrspace(1) %0, i64 %292, !dbg !51
  %294 = sext i32 %281 to i64, !dbg !51
  %295 = getelementptr float, ptr addrspace(1) %0, i64 %294, !dbg !51
  %296 = sext i32 %282 to i64, !dbg !51
  %297 = getelementptr float, ptr addrspace(1) %0, i64 %296, !dbg !51
  %298 = sext i32 %284 to i64, !dbg !51
  %299 = getelementptr float, ptr addrspace(1) %0, i64 %298, !dbg !51
  %300 = sext i32 %285 to i64, !dbg !51
  %301 = getelementptr float, ptr addrspace(1) %0, i64 %300, !dbg !51
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %287, i1 %18) #1, !dbg !52
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %289, i1 %18) #1, !dbg !52
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %291, i1 %18) #1, !dbg !52
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %293, i1 %18) #1, !dbg !52
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %295, i1 %19) #1, !dbg !52
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 %19) #1, !dbg !52
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %299, i1 %19) #1, !dbg !52
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %301, i1 %19) #1, !dbg !52
  %310 = add i32 %58, 507, !dbg !53
  %311 = add i32 %310, %44, !dbg !54
  %312 = add i32 %310, %45, !dbg !54
  %313 = add i32 %61, 507, !dbg !53
  %314 = add i32 %313, %46, !dbg !54
  %315 = add i32 %313, %47, !dbg !54
  %316 = add i32 %64, 507, !dbg !53
  %317 = add i32 %316, %48, !dbg !54
  %318 = add i32 %316, %49, !dbg !54
  %319 = add i32 %67, 507, !dbg !53
  %320 = add i32 %319, %50, !dbg !54
  %321 = add i32 %319, %51, !dbg !54
  %322 = sext i32 %311 to i64, !dbg !55
  %323 = getelementptr float, ptr addrspace(1) %0, i64 %322, !dbg !55
  %324 = sext i32 %312 to i64, !dbg !55
  %325 = getelementptr float, ptr addrspace(1) %0, i64 %324, !dbg !55
  %326 = sext i32 %314 to i64, !dbg !55
  %327 = getelementptr float, ptr addrspace(1) %0, i64 %326, !dbg !55
  %328 = sext i32 %315 to i64, !dbg !55
  %329 = getelementptr float, ptr addrspace(1) %0, i64 %328, !dbg !55
  %330 = sext i32 %317 to i64, !dbg !55
  %331 = getelementptr float, ptr addrspace(1) %0, i64 %330, !dbg !55
  %332 = sext i32 %318 to i64, !dbg !55
  %333 = getelementptr float, ptr addrspace(1) %0, i64 %332, !dbg !55
  %334 = sext i32 %320 to i64, !dbg !55
  %335 = getelementptr float, ptr addrspace(1) %0, i64 %334, !dbg !55
  %336 = sext i32 %321 to i64, !dbg !55
  %337 = getelementptr float, ptr addrspace(1) %0, i64 %336, !dbg !55
  %338 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %323, i1 %18) #1, !dbg !56
  %339 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %325, i1 %18) #1, !dbg !56
  %340 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %327, i1 %18) #1, !dbg !56
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %329, i1 %18) #1, !dbg !56
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %331, i1 %19) #1, !dbg !56
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %333, i1 %19) #1, !dbg !56
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %335, i1 %19) #1, !dbg !56
  %345 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %337, i1 %19) #1, !dbg !56
  %346 = add i32 %58, 508, !dbg !57
  %347 = add i32 %346, %44, !dbg !58
  %348 = add i32 %346, %45, !dbg !58
  %349 = add i32 %61, 508, !dbg !57
  %350 = add i32 %349, %46, !dbg !58
  %351 = add i32 %349, %47, !dbg !58
  %352 = add i32 %64, 508, !dbg !57
  %353 = add i32 %352, %48, !dbg !58
  %354 = add i32 %352, %49, !dbg !58
  %355 = add i32 %67, 508, !dbg !57
  %356 = add i32 %355, %50, !dbg !58
  %357 = add i32 %355, %51, !dbg !58
  %358 = sext i32 %347 to i64, !dbg !59
  %359 = getelementptr float, ptr addrspace(1) %0, i64 %358, !dbg !59
  %360 = sext i32 %348 to i64, !dbg !59
  %361 = getelementptr float, ptr addrspace(1) %0, i64 %360, !dbg !59
  %362 = sext i32 %350 to i64, !dbg !59
  %363 = getelementptr float, ptr addrspace(1) %0, i64 %362, !dbg !59
  %364 = sext i32 %351 to i64, !dbg !59
  %365 = getelementptr float, ptr addrspace(1) %0, i64 %364, !dbg !59
  %366 = sext i32 %353 to i64, !dbg !59
  %367 = getelementptr float, ptr addrspace(1) %0, i64 %366, !dbg !59
  %368 = sext i32 %354 to i64, !dbg !59
  %369 = getelementptr float, ptr addrspace(1) %0, i64 %368, !dbg !59
  %370 = sext i32 %356 to i64, !dbg !59
  %371 = getelementptr float, ptr addrspace(1) %0, i64 %370, !dbg !59
  %372 = sext i32 %357 to i64, !dbg !59
  %373 = getelementptr float, ptr addrspace(1) %0, i64 %372, !dbg !59
  %374 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %359, i1 %18) #1, !dbg !60
  %375 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %361, i1 %18) #1, !dbg !60
  %376 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %363, i1 %18) #1, !dbg !60
  %377 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %365, i1 %18) #1, !dbg !60
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %367, i1 %19) #1, !dbg !60
  %379 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %369, i1 %19) #1, !dbg !60
  %380 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %371, i1 %19) #1, !dbg !60
  %381 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %373, i1 %19) #1, !dbg !60
  %382 = insertelement <4 x i32> poison, i32 %86, i64 0, !dbg !28
  %383 = insertelement <4 x i32> %382, i32 %87, i64 1, !dbg !28
  %384 = insertelement <4 x i32> %383, i32 %88, i64 2, !dbg !28
  %385 = insertelement <4 x i32> %384, i32 %89, i64 3, !dbg !28
  %386 = bitcast <4 x i32> %385 to <4 x float>, !dbg !28
  %387 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !32
  %388 = insertelement <4 x i32> %387, i32 %123, i64 1, !dbg !32
  %389 = insertelement <4 x i32> %388, i32 %124, i64 2, !dbg !32
  %390 = insertelement <4 x i32> %389, i32 %125, i64 3, !dbg !32
  %391 = bitcast <4 x i32> %390 to <4 x float>, !dbg !32
  %392 = insertelement <4 x i32> poison, i32 %158, i64 0, !dbg !36
  %393 = insertelement <4 x i32> %392, i32 %159, i64 1, !dbg !36
  %394 = insertelement <4 x i32> %393, i32 %160, i64 2, !dbg !36
  %395 = insertelement <4 x i32> %394, i32 %161, i64 3, !dbg !36
  %396 = bitcast <4 x i32> %395 to <4 x float>, !dbg !36
  %397 = insertelement <4 x i32> poison, i32 %194, i64 0, !dbg !40
  %398 = insertelement <4 x i32> %397, i32 %195, i64 1, !dbg !40
  %399 = insertelement <4 x i32> %398, i32 %196, i64 2, !dbg !40
  %400 = insertelement <4 x i32> %399, i32 %197, i64 3, !dbg !40
  %401 = bitcast <4 x i32> %400 to <4 x float>, !dbg !40
  %402 = insertelement <4 x i32> poison, i32 %230, i64 0, !dbg !44
  %403 = insertelement <4 x i32> %402, i32 %231, i64 1, !dbg !44
  %404 = insertelement <4 x i32> %403, i32 %232, i64 2, !dbg !44
  %405 = insertelement <4 x i32> %404, i32 %233, i64 3, !dbg !44
  %406 = bitcast <4 x i32> %405 to <4 x float>, !dbg !44
  %407 = insertelement <4 x i32> poison, i32 %266, i64 0, !dbg !48
  %408 = insertelement <4 x i32> %407, i32 %267, i64 1, !dbg !48
  %409 = insertelement <4 x i32> %408, i32 %268, i64 2, !dbg !48
  %410 = insertelement <4 x i32> %409, i32 %269, i64 3, !dbg !48
  %411 = bitcast <4 x i32> %410 to <4 x float>, !dbg !48
  %412 = insertelement <4 x i32> poison, i32 %302, i64 0, !dbg !52
  %413 = insertelement <4 x i32> %412, i32 %303, i64 1, !dbg !52
  %414 = insertelement <4 x i32> %413, i32 %304, i64 2, !dbg !52
  %415 = insertelement <4 x i32> %414, i32 %305, i64 3, !dbg !52
  %416 = bitcast <4 x i32> %415 to <4 x float>, !dbg !52
  %417 = insertelement <4 x i32> poison, i32 %338, i64 0, !dbg !56
  %418 = insertelement <4 x i32> %417, i32 %339, i64 1, !dbg !56
  %419 = insertelement <4 x i32> %418, i32 %340, i64 2, !dbg !56
  %420 = insertelement <4 x i32> %419, i32 %341, i64 3, !dbg !56
  %421 = bitcast <4 x i32> %420 to <4 x float>, !dbg !56
  %422 = insertelement <4 x i32> poison, i32 %374, i64 0, !dbg !60
  %423 = insertelement <4 x i32> %422, i32 %375, i64 1, !dbg !60
  %424 = insertelement <4 x i32> %423, i32 %376, i64 2, !dbg !60
  %425 = insertelement <4 x i32> %424, i32 %377, i64 3, !dbg !60
  %426 = bitcast <4 x i32> %425 to <4 x float>, !dbg !60
  %427 = fcmp ogt <4 x float> %391, %386, !dbg !61
  %428 = fcmp uno <4 x float> %391, zeroinitializer, !dbg !65
  %429 = or <4 x i1> %427, %428, !dbg !66
  %.v = select <4 x i1> %429, <4 x i32> %390, <4 x i32> %385, !dbg !67
  %430 = bitcast <4 x i32> %.v to <4 x float>, !dbg !67
  %431 = fcmp olt <4 x float> %430, %396, !dbg !68
  %432 = fcmp uno <4 x float> %396, zeroinitializer, !dbg !70
  %433 = or <4 x i1> %431, %432, !dbg !71
  %.v1 = select <4 x i1> %433, <4 x i32> %395, <4 x i32> %.v, !dbg !72
  %434 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !72
  %435 = fcmp olt <4 x float> %434, %401, !dbg !73
  %436 = fcmp uno <4 x float> %401, zeroinitializer, !dbg !75
  %437 = or <4 x i1> %435, %436, !dbg !76
  %.v2 = select <4 x i1> %437, <4 x i32> %400, <4 x i32> %.v1, !dbg !77
  %438 = bitcast <4 x i32> %.v2 to <4 x float>, !dbg !77
  %439 = fcmp olt <4 x float> %438, %406, !dbg !78
  %440 = fcmp uno <4 x float> %406, zeroinitializer, !dbg !80
  %441 = or <4 x i1> %439, %440, !dbg !81
  %.v3 = select <4 x i1> %441, <4 x i32> %405, <4 x i32> %.v2, !dbg !82
  %442 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !82
  %443 = fcmp olt <4 x float> %442, %411, !dbg !83
  %444 = fcmp uno <4 x float> %411, zeroinitializer, !dbg !85
  %445 = or <4 x i1> %443, %444, !dbg !86
  %.v4 = select <4 x i1> %445, <4 x i32> %410, <4 x i32> %.v3, !dbg !87
  %446 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !87
  %447 = fcmp olt <4 x float> %446, %416, !dbg !88
  %448 = fcmp uno <4 x float> %416, zeroinitializer, !dbg !90
  %449 = or <4 x i1> %447, %448, !dbg !91
  %.v5 = select <4 x i1> %449, <4 x i32> %415, <4 x i32> %.v4, !dbg !92
  %450 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !92
  %451 = fcmp olt <4 x float> %450, %421, !dbg !93
  %452 = fcmp uno <4 x float> %421, zeroinitializer, !dbg !95
  %453 = or <4 x i1> %451, %452, !dbg !96
  %.v6 = select <4 x i1> %453, <4 x i32> %420, <4 x i32> %.v5, !dbg !97
  %454 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !97
  %455 = fcmp olt <4 x float> %454, %426, !dbg !98
  %456 = extractelement <4 x i1> %455, i64 0, !dbg !100
  %457 = extractelement <4 x i1> %455, i64 1, !dbg !100
  %458 = extractelement <4 x i1> %455, i64 2, !dbg !100
  %459 = extractelement <4 x i1> %455, i64 3, !dbg !100
  %460 = zext <4 x i1> %427 to <4 x i8>, !dbg !101
  %461 = select <4 x i1> %431, <4 x i8> splat (i8 2), <4 x i8> %460, !dbg !102
  %462 = select <4 x i1> %435, <4 x i8> splat (i8 3), <4 x i8> %461, !dbg !103
  %463 = select <4 x i1> %439, <4 x i8> splat (i8 4), <4 x i8> %462, !dbg !104
  %464 = select <4 x i1> %443, <4 x i8> splat (i8 5), <4 x i8> %463, !dbg !105
  %465 = select <4 x i1> %447, <4 x i8> splat (i8 6), <4 x i8> %464, !dbg !106
  %466 = select <4 x i1> %451, <4 x i8> splat (i8 7), <4 x i8> %465, !dbg !107
  %467 = select <4 x i1> %455, <4 x i8> splat (i8 8), <4 x i8> %466, !dbg !108
  %468 = insertelement <4 x i32> poison, i32 %90, i64 0, !dbg !28
  %469 = insertelement <4 x i32> %468, i32 %91, i64 1, !dbg !28
  %470 = insertelement <4 x i32> %469, i32 %92, i64 2, !dbg !28
  %471 = insertelement <4 x i32> %470, i32 %93, i64 3, !dbg !28
  %472 = bitcast <4 x i32> %471 to <4 x float>, !dbg !28
  %473 = insertelement <4 x i32> poison, i32 %126, i64 0, !dbg !32
  %474 = insertelement <4 x i32> %473, i32 %127, i64 1, !dbg !32
  %475 = insertelement <4 x i32> %474, i32 %128, i64 2, !dbg !32
  %476 = insertelement <4 x i32> %475, i32 %129, i64 3, !dbg !32
  %477 = bitcast <4 x i32> %476 to <4 x float>, !dbg !32
  %478 = insertelement <4 x i32> poison, i32 %162, i64 0, !dbg !36
  %479 = insertelement <4 x i32> %478, i32 %163, i64 1, !dbg !36
  %480 = insertelement <4 x i32> %479, i32 %164, i64 2, !dbg !36
  %481 = insertelement <4 x i32> %480, i32 %165, i64 3, !dbg !36
  %482 = bitcast <4 x i32> %481 to <4 x float>, !dbg !36
  %483 = insertelement <4 x i32> poison, i32 %198, i64 0, !dbg !40
  %484 = insertelement <4 x i32> %483, i32 %199, i64 1, !dbg !40
  %485 = insertelement <4 x i32> %484, i32 %200, i64 2, !dbg !40
  %486 = insertelement <4 x i32> %485, i32 %201, i64 3, !dbg !40
  %487 = bitcast <4 x i32> %486 to <4 x float>, !dbg !40
  %488 = insertelement <4 x i32> poison, i32 %234, i64 0, !dbg !44
  %489 = insertelement <4 x i32> %488, i32 %235, i64 1, !dbg !44
  %490 = insertelement <4 x i32> %489, i32 %236, i64 2, !dbg !44
  %491 = insertelement <4 x i32> %490, i32 %237, i64 3, !dbg !44
  %492 = bitcast <4 x i32> %491 to <4 x float>, !dbg !44
  %493 = insertelement <4 x i32> poison, i32 %270, i64 0, !dbg !48
  %494 = insertelement <4 x i32> %493, i32 %271, i64 1, !dbg !48
  %495 = insertelement <4 x i32> %494, i32 %272, i64 2, !dbg !48
  %496 = insertelement <4 x i32> %495, i32 %273, i64 3, !dbg !48
  %497 = bitcast <4 x i32> %496 to <4 x float>, !dbg !48
  %498 = insertelement <4 x i32> poison, i32 %306, i64 0, !dbg !52
  %499 = insertelement <4 x i32> %498, i32 %307, i64 1, !dbg !52
  %500 = insertelement <4 x i32> %499, i32 %308, i64 2, !dbg !52
  %501 = insertelement <4 x i32> %500, i32 %309, i64 3, !dbg !52
  %502 = bitcast <4 x i32> %501 to <4 x float>, !dbg !52
  %503 = insertelement <4 x i32> poison, i32 %342, i64 0, !dbg !56
  %504 = insertelement <4 x i32> %503, i32 %343, i64 1, !dbg !56
  %505 = insertelement <4 x i32> %504, i32 %344, i64 2, !dbg !56
  %506 = insertelement <4 x i32> %505, i32 %345, i64 3, !dbg !56
  %507 = bitcast <4 x i32> %506 to <4 x float>, !dbg !56
  %508 = insertelement <4 x i32> poison, i32 %378, i64 0, !dbg !60
  %509 = insertelement <4 x i32> %508, i32 %379, i64 1, !dbg !60
  %510 = insertelement <4 x i32> %509, i32 %380, i64 2, !dbg !60
  %511 = insertelement <4 x i32> %510, i32 %381, i64 3, !dbg !60
  %512 = bitcast <4 x i32> %511 to <4 x float>, !dbg !60
  %513 = fcmp ogt <4 x float> %477, %472, !dbg !61
  %514 = fcmp uno <4 x float> %477, zeroinitializer, !dbg !65
  %515 = or <4 x i1> %513, %514, !dbg !66
  %.v7 = select <4 x i1> %515, <4 x i32> %476, <4 x i32> %471, !dbg !67
  %516 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !67
  %517 = fcmp olt <4 x float> %516, %482, !dbg !68
  %518 = fcmp uno <4 x float> %482, zeroinitializer, !dbg !70
  %519 = or <4 x i1> %517, %518, !dbg !71
  %.v8 = select <4 x i1> %519, <4 x i32> %481, <4 x i32> %.v7, !dbg !72
  %520 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !72
  %521 = fcmp olt <4 x float> %520, %487, !dbg !73
  %522 = fcmp uno <4 x float> %487, zeroinitializer, !dbg !75
  %523 = or <4 x i1> %521, %522, !dbg !76
  %.v9 = select <4 x i1> %523, <4 x i32> %486, <4 x i32> %.v8, !dbg !77
  %524 = bitcast <4 x i32> %.v9 to <4 x float>, !dbg !77
  %525 = fcmp olt <4 x float> %524, %492, !dbg !78
  %526 = fcmp uno <4 x float> %492, zeroinitializer, !dbg !80
  %527 = or <4 x i1> %525, %526, !dbg !81
  %.v10 = select <4 x i1> %527, <4 x i32> %491, <4 x i32> %.v9, !dbg !82
  %528 = bitcast <4 x i32> %.v10 to <4 x float>, !dbg !82
  %529 = fcmp olt <4 x float> %528, %497, !dbg !83
  %530 = fcmp uno <4 x float> %497, zeroinitializer, !dbg !85
  %531 = or <4 x i1> %529, %530, !dbg !86
  %.v11 = select <4 x i1> %531, <4 x i32> %496, <4 x i32> %.v10, !dbg !87
  %532 = bitcast <4 x i32> %.v11 to <4 x float>, !dbg !87
  %533 = fcmp olt <4 x float> %532, %502, !dbg !88
  %534 = fcmp uno <4 x float> %502, zeroinitializer, !dbg !90
  %535 = or <4 x i1> %533, %534, !dbg !91
  %.v12 = select <4 x i1> %535, <4 x i32> %501, <4 x i32> %.v11, !dbg !92
  %536 = bitcast <4 x i32> %.v12 to <4 x float>, !dbg !92
  %537 = fcmp olt <4 x float> %536, %507, !dbg !93
  %538 = fcmp uno <4 x float> %507, zeroinitializer, !dbg !95
  %539 = or <4 x i1> %537, %538, !dbg !96
  %.v13 = select <4 x i1> %539, <4 x i32> %506, <4 x i32> %.v12, !dbg !97
  %540 = bitcast <4 x i32> %.v13 to <4 x float>, !dbg !97
  %541 = fcmp olt <4 x float> %540, %512, !dbg !98
  %542 = shufflevector <4 x float> %512, <4 x float> %426, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !109
  %543 = fcmp uno <8 x float> %542, zeroinitializer, !dbg !109
  %544 = extractelement <8 x i1> %543, i64 7, !dbg !100
  %545 = or i1 %456, %544, !dbg !100
  %546 = extractelement <8 x i1> %543, i64 6, !dbg !100
  %547 = or i1 %457, %546, !dbg !100
  %548 = extractelement <8 x i1> %543, i64 5, !dbg !100
  %549 = or i1 %458, %548, !dbg !100
  %550 = extractelement <8 x i1> %543, i64 4, !dbg !100
  %551 = or i1 %459, %550, !dbg !100
  %552 = extractelement <4 x i1> %541, i64 0, !dbg !100
  %553 = extractelement <8 x i1> %543, i64 3, !dbg !100
  %554 = or i1 %552, %553, !dbg !100
  %555 = extractelement <4 x i1> %541, i64 1, !dbg !100
  %556 = extractelement <8 x i1> %543, i64 2, !dbg !100
  %557 = or i1 %555, %556, !dbg !100
  %558 = extractelement <4 x i1> %541, i64 2, !dbg !100
  %559 = extractelement <8 x i1> %543, i64 1, !dbg !100
  %560 = or i1 %558, %559, !dbg !100
  %561 = extractelement <4 x i1> %541, i64 3, !dbg !100
  %562 = extractelement <8 x i1> %543, i64 0, !dbg !100
  %563 = or i1 %561, %562, !dbg !100
  %564 = zext <4 x i1> %513 to <4 x i8>, !dbg !101
  %565 = select <4 x i1> %517, <4 x i8> splat (i8 2), <4 x i8> %564, !dbg !102
  %566 = select <4 x i1> %521, <4 x i8> splat (i8 3), <4 x i8> %565, !dbg !103
  %567 = select <4 x i1> %525, <4 x i8> splat (i8 4), <4 x i8> %566, !dbg !104
  %568 = select <4 x i1> %529, <4 x i8> splat (i8 5), <4 x i8> %567, !dbg !105
  %569 = select <4 x i1> %533, <4 x i8> splat (i8 6), <4 x i8> %568, !dbg !106
  %570 = select <4 x i1> %537, <4 x i8> splat (i8 7), <4 x i8> %569, !dbg !107
  %571 = select <4 x i1> %541, <4 x i8> splat (i8 8), <4 x i8> %570, !dbg !108
  %572 = mul i32 %38, 2540160, !dbg !110
  %573 = mul i32 %39, 2540160, !dbg !110
  %574 = add i32 %572, %.decomposed21, !dbg !111
  %575 = add i32 %573, %.decomposed23, !dbg !111
  %576 = sext i32 %574 to i64, !dbg !112
  %577 = getelementptr float, ptr addrspace(1) %1, i64 %576, !dbg !112
  %578 = sext i32 %575 to i64, !dbg !112
  %579 = getelementptr float, ptr addrspace(1) %1, i64 %578, !dbg !112
  %580 = extractelement <4 x i32> %.v6, i64 0, !dbg !113
  %581 = select i1 %545, i32 %374, i32 %580, !dbg !114
  %582 = extractelement <4 x i32> %.v6, i64 1, !dbg !113
  %583 = select i1 %547, i32 %375, i32 %582, !dbg !114
  %584 = extractelement <4 x i32> %.v6, i64 2, !dbg !113
  %585 = select i1 %549, i32 %376, i32 %584, !dbg !114
  %586 = extractelement <4 x i32> %.v6, i64 3, !dbg !113
  %587 = select i1 %551, i32 %377, i32 %586, !dbg !114
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %581, i32 %583, i32 %585, i32 %587, ptr addrspace(1) %577, i1 %18) #1, !dbg !113
  %588 = extractelement <4 x i32> %.v13, i64 0, !dbg !113
  %589 = select i1 %554, i32 %378, i32 %588, !dbg !114
  %590 = extractelement <4 x i32> %.v13, i64 1, !dbg !113
  %591 = select i1 %557, i32 %379, i32 %590, !dbg !114
  %592 = extractelement <4 x i32> %.v13, i64 2, !dbg !113
  %593 = select i1 %560, i32 %380, i32 %592, !dbg !114
  %594 = extractelement <4 x i32> %.v13, i64 3, !dbg !113
  %595 = select i1 %563, i32 %381, i32 %594, !dbg !114
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %589, i32 %591, i32 %593, i32 %595, ptr addrspace(1) %579, i1 %19) #1, !dbg !113
  %596 = mul i32 %36, 16000, !dbg !115
  %597 = mul i32 %37, 16000, !dbg !115
  %598 = add i32 %596, %.decomposed25, !dbg !116
  %599 = add i32 %597, %.decomposed27, !dbg !116
  %600 = sext i32 %598 to i64, !dbg !117
  %601 = getelementptr i8, ptr addrspace(1) %2, i64 %600, !dbg !117
  %602 = sext i32 %599 to i64, !dbg !117
  %603 = getelementptr i8, ptr addrspace(1) %2, i64 %602, !dbg !117
  %604 = bitcast <4 x i8> %467 to i32, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %604, ptr addrspace(1) %601, i1 %18) #1, !dbg !118
  %605 = bitcast <4 x i8> %571 to i32, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %605, ptr addrspace(1) %603, i1 %19) #1, !dbg !118
  ret void, !dbg !119
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cukqzlmxjzyed6a245ybdnjjyiykvuj5hf7sinilms45ju24idcr.py", directory: "inductor_cache/uk")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_3", linkageName: "triton_poi_fused_max_pool2d_with_indices_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 28, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 32, scope: !7)
!23 = !DILocation(line: 30, column: 41, scope: !7)
!24 = !DILocation(line: 30, column: 52, scope: !7)
!25 = !DILocation(line: 30, column: 37, scope: !7)
!26 = !DILocation(line: 30, column: 46, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 57, scope: !7)
!29 = !DILocation(line: 31, column: 41, scope: !7)
!30 = !DILocation(line: 31, column: 50, scope: !7)
!31 = !DILocation(line: 31, column: 30, scope: !7)
!32 = !DILocation(line: 31, column: 61, scope: !7)
!33 = !DILocation(line: 32, column: 41, scope: !7)
!34 = !DILocation(line: 32, column: 50, scope: !7)
!35 = !DILocation(line: 32, column: 30, scope: !7)
!36 = !DILocation(line: 32, column: 61, scope: !7)
!37 = !DILocation(line: 33, column: 43, scope: !7)
!38 = !DILocation(line: 33, column: 52, scope: !7)
!39 = !DILocation(line: 33, column: 30, scope: !7)
!40 = !DILocation(line: 33, column: 63, scope: !7)
!41 = !DILocation(line: 34, column: 43, scope: !7)
!42 = !DILocation(line: 34, column: 52, scope: !7)
!43 = !DILocation(line: 34, column: 30, scope: !7)
!44 = !DILocation(line: 34, column: 63, scope: !7)
!45 = !DILocation(line: 35, column: 43, scope: !7)
!46 = !DILocation(line: 35, column: 52, scope: !7)
!47 = !DILocation(line: 35, column: 30, scope: !7)
!48 = !DILocation(line: 35, column: 63, scope: !7)
!49 = !DILocation(line: 36, column: 44, scope: !7)
!50 = !DILocation(line: 36, column: 53, scope: !7)
!51 = !DILocation(line: 36, column: 31, scope: !7)
!52 = !DILocation(line: 36, column: 64, scope: !7)
!53 = !DILocation(line: 37, column: 44, scope: !7)
!54 = !DILocation(line: 37, column: 53, scope: !7)
!55 = !DILocation(line: 37, column: 31, scope: !7)
!56 = !DILocation(line: 37, column: 64, scope: !7)
!57 = !DILocation(line: 38, column: 44, scope: !7)
!58 = !DILocation(line: 38, column: 53, scope: !7)
!59 = !DILocation(line: 38, column: 31, scope: !7)
!60 = !DILocation(line: 38, column: 64, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !64)
!62 = distinct !DILexicalBlockFile(scope: !7, file: !63, discriminator: 0)
!63 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!64 = !DILocation(line: 39, column: 40, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !64)
!68 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !69)
!69 = !DILocation(line: 40, column: 40, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !69)
!73 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !74)
!74 = !DILocation(line: 41, column: 40, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !74)
!78 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !79)
!79 = !DILocation(line: 42, column: 40, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !79)
!83 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !84)
!84 = !DILocation(line: 43, column: 41, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !84)
!88 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !89)
!89 = !DILocation(line: 44, column: 42, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !94)
!94 = !DILocation(line: 45, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !99)
!99 = !DILocation(line: 46, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !99)
!101 = !DILocation(line: 50, column: 35, scope: !7)
!102 = !DILocation(line: 53, column: 35, scope: !7)
!103 = !DILocation(line: 56, column: 35, scope: !7)
!104 = !DILocation(line: 59, column: 35, scope: !7)
!105 = !DILocation(line: 62, column: 35, scope: !7)
!106 = !DILocation(line: 65, column: 35, scope: !7)
!107 = !DILocation(line: 68, column: 35, scope: !7)
!108 = !DILocation(line: 71, column: 35, scope: !7)
!109 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !99)
!110 = !DILocation(line: 72, column: 38, scope: !7)
!111 = !DILocation(line: 72, column: 30, scope: !7)
!112 = !DILocation(line: 72, column: 25, scope: !7)
!113 = !DILocation(line: 72, column: 50, scope: !7)
!114 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !99)
!115 = !DILocation(line: 73, column: 36, scope: !7)
!116 = !DILocation(line: 73, column: 30, scope: !7)
!117 = !DILocation(line: 73, column: 25, scope: !7)
!118 = !DILocation(line: 73, column: 48, scope: !7)
!119 = !DILocation(line: 73, column: 4, scope: !7)
