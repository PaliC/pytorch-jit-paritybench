; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_threshold_backward_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 2, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 6, !dbg !12
  %.lobit = and i32 %10, 1, !dbg !12
  %11 = or disjoint i32 %.lobit, 2, !dbg !12
  %12 = or disjoint i32 %8, %.lobit, !dbg !13
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %15 = shl i32 %14, 8, !dbg !15
  %16 = and i32 %9, 127, !dbg !16
  %17 = or disjoint i32 %16, 128, !dbg !16
  %18 = shl i32 %9, 2, !dbg !16
  %19 = and i32 %18, 252, !dbg !16
  %20 = or disjoint i32 %15, %16, !dbg !17
  %21 = or disjoint i32 %15, %17, !dbg !17
  %22 = or disjoint i32 %15, %19, !dbg !17
  %23 = icmp slt i32 %20, 256, !dbg !18
  %24 = icmp slt i32 %21, 256, !dbg !18
  %25 = icmp slt i32 %22, 256, !dbg !18
  %.frozen = freeze i32 %8, !dbg !19
  %26 = sdiv i32 %.frozen, 256, !dbg !19
  %27 = mul i32 %26, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %27, !dbg !20
  %28 = shl i32 %20, 8, !dbg !21
  %29 = shl i32 %21, 8, !dbg !21
  %30 = shl i32 %26, 16, !dbg !22
  %31 = add i32 %30, %.decomposed, !dbg !23
  %32 = add i32 %31, %28, !dbg !24
  %33 = add i32 %31, %29, !dbg !24
  %34 = sext i32 %32 to i64, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !25
  %36 = sext i32 %33 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %23) #2, !dbg !26
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !26
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %24) #2, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !26
  %48 = sext i32 %.decomposed to i64, !dbg !27
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !27
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #2, !dbg !28
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !28
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !28
  %55 = shl i32 %12, 8, !dbg !29
  %56 = shl i32 %13, 8, !dbg !29
  %57 = add i32 %22, %55, !dbg !30
  %58 = add i32 %22, %56, !dbg !30
  %59 = sext i32 %57 to i64, !dbg !31
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !31
  %61 = sext i32 %58 to i64, !dbg !31
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !31
  %63 = and i32 %18, 508, !dbg !32
  %64 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !32
  %65 = getelementptr inbounds i8, ptr addrspace(3) %64, i32 1028, !dbg !32
  %66 = getelementptr inbounds i8, ptr addrspace(3) %64, i32 2056, !dbg !32
  %67 = getelementptr inbounds i8, ptr addrspace(3) %64, i32 3084, !dbg !32
  %68 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !32
  %69 = getelementptr inbounds i8, ptr addrspace(3) %64, i32 1540, !dbg !32
  %70 = getelementptr inbounds i8, ptr addrspace(3) %64, i32 2568, !dbg !32
  %71 = getelementptr inbounds i8, ptr addrspace(3) %64, i32 3596, !dbg !32
  %72 = lshr i32 %63, 8, !dbg !32
  %73 = getelementptr float, ptr addrspace(3) @global_smem, i32 %72, !dbg !32
  %74 = getelementptr float, ptr addrspace(3) %73, i32 %63, !dbg !32
  %75 = or disjoint i32 %63, 1, !dbg !32
  %76 = getelementptr float, ptr addrspace(3) %73, i32 %75, !dbg !32
  %77 = or disjoint i32 %63, 2, !dbg !32
  %78 = getelementptr float, ptr addrspace(3) %73, i32 %77, !dbg !32
  %79 = or disjoint i32 %63, 3, !dbg !32
  %80 = getelementptr float, ptr addrspace(3) %73, i32 %79, !dbg !32
  %81 = or disjoint i32 %63, 512, !dbg !32
  %82 = lshr i32 %81, 8, !dbg !32
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i32 %82, !dbg !32
  %84 = getelementptr float, ptr addrspace(3) %83, i32 %81, !dbg !32
  %85 = or disjoint i32 %63, 513, !dbg !32
  %86 = lshr i32 %85, 8, !dbg !32
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i32 %86, !dbg !32
  %88 = getelementptr float, ptr addrspace(3) %87, i32 %85, !dbg !32
  %89 = or disjoint i32 %63, 514, !dbg !32
  %90 = lshr i32 %89, 8, !dbg !32
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !32
  %92 = getelementptr float, ptr addrspace(3) %91, i32 %89, !dbg !32
  %93 = or disjoint i32 %63, 515, !dbg !32
  %94 = lshr i32 %93, 8, !dbg !32
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !32
  %96 = getelementptr float, ptr addrspace(3) %95, i32 %93, !dbg !32
  %97 = getelementptr i1, ptr addrspace(1) %3, i64 %34, !dbg !33
  %98 = getelementptr i1, ptr addrspace(1) %3, i64 %36, !dbg !33
  %99 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !26
  %100 = insertelement <4 x i32> %99, i32 %40, i64 1, !dbg !26
  %101 = insertelement <4 x i32> %100, i32 %41, i64 2, !dbg !26
  %102 = insertelement <4 x i32> %101, i32 %42, i64 3, !dbg !26
  %103 = bitcast <4 x i32> %102 to <4 x float>, !dbg !26
  %104 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !28
  %105 = insertelement <4 x i32> %104, i32 %52, i64 1, !dbg !28
  %106 = insertelement <4 x i32> %105, i32 %53, i64 2, !dbg !28
  %107 = insertelement <4 x i32> %106, i32 %54, i64 3, !dbg !28
  %108 = bitcast <4 x i32> %107 to <4 x float>, !dbg !28
  %109 = fadd <4 x float> %103, %108, !dbg !34
  %110 = fcmp olt <4 x float> %109, zeroinitializer, !dbg !35
  %111 = select <4 x i1> %110, <4 x float> zeroinitializer, <4 x float> %109, !dbg !39
  %112 = fcmp ole <4 x float> %111, zeroinitializer, !dbg !40
  %113 = extractelement <4 x float> %111, i64 0, !dbg !32
  %114 = bitcast float %113 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %114, i1 true) #2, !dbg !32
  %115 = extractelement <4 x float> %111, i64 1, !dbg !32
  %116 = bitcast float %115 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %116, i1 true) #2, !dbg !32
  %117 = extractelement <4 x float> %111, i64 2, !dbg !32
  %118 = bitcast float %117 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %118, i1 true) #2, !dbg !32
  %119 = extractelement <4 x float> %111, i64 3, !dbg !32
  %120 = bitcast float %119 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %120, i1 true) #2, !dbg !32
  %121 = insertelement <4 x i32> poison, i32 %44, i64 0, !dbg !26
  %122 = insertelement <4 x i32> %121, i32 %45, i64 1, !dbg !26
  %123 = insertelement <4 x i32> %122, i32 %46, i64 2, !dbg !26
  %124 = insertelement <4 x i32> %123, i32 %47, i64 3, !dbg !26
  %125 = bitcast <4 x i32> %124 to <4 x float>, !dbg !26
  %126 = fadd <4 x float> %125, %108, !dbg !34
  %127 = fcmp olt <4 x float> %126, zeroinitializer, !dbg !35
  %128 = select <4 x i1> %127, <4 x float> zeroinitializer, <4 x float> %126, !dbg !39
  %129 = fcmp ole <4 x float> %128, zeroinitializer, !dbg !40
  %130 = extractelement <4 x float> %128, i64 0, !dbg !32
  %131 = bitcast float %130 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %131, i1 true) #2, !dbg !32
  %132 = extractelement <4 x float> %128, i64 1, !dbg !32
  %133 = bitcast float %132 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %133, i1 true) #2, !dbg !32
  %134 = extractelement <4 x float> %128, i64 2, !dbg !32
  %135 = bitcast float %134 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %135, i1 true) #2, !dbg !32
  %136 = extractelement <4 x float> %128, i64 3, !dbg !32
  %137 = bitcast float %136 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %137, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %138 = load i32, ptr addrspace(3) %74, align 4, !dbg !32
  %139 = load i32, ptr addrspace(3) %76, align 4, !dbg !32
  %140 = load i32, ptr addrspace(3) %78, align 4, !dbg !32
  %141 = load i32, ptr addrspace(3) %80, align 4, !dbg !32
  %142 = load i32, ptr addrspace(3) %84, align 4, !dbg !32
  %143 = load i32, ptr addrspace(3) %88, align 4, !dbg !32
  %144 = load i32, ptr addrspace(3) %92, align 4, !dbg !32
  %145 = load i32, ptr addrspace(3) %96, align 4, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %138, i32 %139, i32 %140, i32 %141, ptr addrspace(1) %60, i1 %25) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %142, i32 %143, i32 %144, i32 %145, ptr addrspace(1) %62, i1 %25) #2, !dbg !32
  %146 = zext <4 x i1> %112 to <4 x i8>, !dbg !41
  %147 = bitcast <4 x i8> %146 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %97, i1 %23) #2, !dbg !41
  %148 = zext <4 x i1> %129 to <4 x i8>, !dbg !41
  %149 = bitcast <4 x i8> %148 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %149, ptr addrspace(1) %98, i1 %24) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coe5l3k7y6o4xusfk3vwn4yvyx444tvovt7e7bdekr63y6glyhme.py", directory: "inductor_cache/oe")
!4 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_threshold_backward_12", linkageName: "triton_poi_fused_convolution_relu_threshold_backward_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 39, column: 34, scope: !7)
!30 = !DILocation(line: 39, column: 30, scope: !7)
!31 = !DILocation(line: 39, column: 25, scope: !7)
!32 = !DILocation(line: 39, column: 45, scope: !7)
!33 = !DILocation(line: 40, column: 25, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 36, column: 40, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 38, column: 19, scope: !7)
!41 = !DILocation(line: 40, column: 56, scope: !7)
!42 = !DILocation(line: 40, column: 4, scope: !7)
