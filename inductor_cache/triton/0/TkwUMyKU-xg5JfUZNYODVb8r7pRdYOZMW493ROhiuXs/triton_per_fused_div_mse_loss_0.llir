; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_div_mse_loss_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 15, !dbg !10
  %7 = and i32 %5, 12, !dbg !11
  %8 = zext nneg i32 %6 to i64, !dbg !12
  %9 = getelementptr float, ptr addrspace(1) %1, i64 %8, !dbg !12
  %10 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #5, !dbg !13
  %11 = bitcast i32 %10 to float, !dbg !13
  %12 = zext nneg i32 %7 to i64, !dbg !14
  %13 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !14
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 true) #5, !dbg !15
  %15 = bitcast i32 %14 to float, !dbg !15
  %16 = or disjoint i32 %7, 1, !dbg !16
  %17 = zext nneg i32 %16 to i64, !dbg !17
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !17
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #5, !dbg !18
  %20 = bitcast i32 %19 to float, !dbg !18
  %21 = or disjoint i32 %7, 2, !dbg !19
  %22 = zext nneg i32 %21 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !20
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !21
  %25 = bitcast i32 %24 to float, !dbg !21
  %26 = or disjoint i32 %7, 3, !dbg !22
  %27 = zext nneg i32 %26 to i64, !dbg !23
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !23
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !24
  %30 = bitcast i32 %29 to float, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %8, !dbg !25
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #5, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %12, !dbg !27
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #5, !dbg !28
  %35 = bitcast i32 %34 to float, !dbg !28
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !29
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #5, !dbg !30
  %38 = bitcast i32 %37 to float, !dbg !30
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !31
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !32
  %41 = bitcast i32 %40 to float, !dbg !32
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !33
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #5, !dbg !34
  %44 = bitcast i32 %43 to float, !dbg !34
  %45 = fmul float %15, %15, !dbg !35
  %46 = fmul float %20, %20, !dbg !36
  %47 = fadd float %45, %46, !dbg !37
  %48 = fmul float %25, %25, !dbg !38
  %49 = fadd float %47, %48, !dbg !39
  %50 = fmul float %30, %30, !dbg !40
  %51 = fadd float %49, %50, !dbg !41
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i = icmp eq i32 %52, 0, !dbg !42
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i = icmp eq i32 %53, 0, !dbg !42
  br i1 %.not.i, label %59, label %54, !dbg !42

54:                                               ; preds = %4
  br i1 %.not1.i, label %57, label %55, !dbg !42

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

59:                                               ; preds = %4
  br i1 %.not1.i, label %62, label %60, !dbg !42

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %55, %57, %60, %62
  %.0.i = phi float [ %56, %55 ], [ %58, %57 ], [ %61, %60 ], [ %63, %62 ], !dbg !42
  %64 = fcmp ogt float %.0.i, 0x3D71979980000000, !dbg !43
  %65 = fcmp uno float %.0.i, 0.000000e+00, !dbg !47
  %66 = or i1 %64, %65, !dbg !48
  %67 = select i1 %66, float %.0.i, float 0x3D71979980000000, !dbg !49
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %11, float %67) #5, !dbg !50
  %69 = fmul float %35, %35, !dbg !51
  %70 = fmul float %38, %38, !dbg !52
  %71 = fadd float %69, %70, !dbg !53
  %72 = fmul float %41, %41, !dbg !54
  %73 = fadd float %71, %72, !dbg !55
  %74 = fmul float %44, %44, !dbg !56
  %75 = fadd float %73, %74, !dbg !57
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i1 = icmp eq i32 %76, 0, !dbg !58
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !58
  %.not1.i4 = icmp eq i32 %77, 0, !dbg !58
  br i1 %.not.i1, label %83, label %78, !dbg !58

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !58

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #5, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #5, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !58

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #5, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #5, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

__nv_sqrtf.exit5:                                 ; preds = %79, %81, %84, %86
  %.0.i3 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !58
  %88 = bitcast i32 %32 to float, !dbg !26
  %89 = fcmp ogt float %.0.i3, 0x3D71979980000000, !dbg !59
  %90 = fcmp uno float %.0.i3, 0.000000e+00, !dbg !61
  %91 = or i1 %89, %90, !dbg !62
  %92 = select i1 %91, float %.0.i3, float 0x3D71979980000000, !dbg !63
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float %92) #5, !dbg !64
  %94 = fsub float %68, %93, !dbg !65
  %95 = fmul float %94, %94, !dbg !66
  %96 = bitcast float %95 to i32, !dbg !67
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 8, i32 31), !dbg !67
  %98 = bitcast i32 %97 to float, !dbg !67
  %99 = fadd float %95, %98, !dbg !71
  %100 = bitcast float %99 to i32, !dbg !67
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 4, i32 31), !dbg !67
  %102 = bitcast i32 %101 to float, !dbg !67
  %103 = fadd float %99, %102, !dbg !71
  %104 = bitcast float %103 to i32, !dbg !67
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 2, i32 31), !dbg !67
  %106 = bitcast i32 %105 to float, !dbg !67
  %107 = fadd float %103, %106, !dbg !71
  %108 = bitcast float %107 to i32, !dbg !67
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 1, i32 31), !dbg !67
  %110 = bitcast i32 %109 to float, !dbg !67
  %111 = fadd float %107, %110, !dbg !71
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float 1.600000e+01) #5, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %113 = and i32 %5, 63, !dbg !75
  %114 = icmp eq i32 %113, 0, !dbg !75
  %115 = bitcast float %112 to i32, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %115, ptr addrspace(1) %0, i1 %114) #5, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c62azzuonz7kqt534yucwq2ndcbh7i6pniktvzz5yll5cxvoalqw.py", directory: "inductor_cache/62")
!4 = !{ptr @triton_per_fused_div_mse_loss_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_div_mse_loss_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_div_mse_loss_0", linkageName: "triton_per_fused_div_mse_loss_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 32, column: 32, scope: !7)
!12 = !DILocation(line: 31, column: 30, scope: !7)
!13 = !DILocation(line: 31, column: 35, scope: !7)
!14 = !DILocation(line: 32, column: 30, scope: !7)
!15 = !DILocation(line: 32, column: 37, scope: !7)
!16 = !DILocation(line: 33, column: 34, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 41, scope: !7)
!19 = !DILocation(line: 34, column: 34, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 41, scope: !7)
!22 = !DILocation(line: 35, column: 34, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 41, scope: !7)
!25 = !DILocation(line: 36, column: 31, scope: !7)
!26 = !DILocation(line: 36, column: 36, scope: !7)
!27 = !DILocation(line: 37, column: 31, scope: !7)
!28 = !DILocation(line: 37, column: 38, scope: !7)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 38, column: 42, scope: !7)
!31 = !DILocation(line: 39, column: 31, scope: !7)
!32 = !DILocation(line: 39, column: 42, scope: !7)
!33 = !DILocation(line: 40, column: 31, scope: !7)
!34 = !DILocation(line: 40, column: 42, scope: !7)
!35 = !DILocation(line: 41, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 43, column: 18, scope: !7)
!38 = !DILocation(line: 44, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 18, scope: !7)
!40 = !DILocation(line: 46, column: 19, scope: !7)
!41 = !DILocation(line: 47, column: 19, scope: !7)
!42 = !DILocation(line: 48, column: 27, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 50, column: 42, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 51, column: 19, scope: !7)
!51 = !DILocation(line: 52, column: 20, scope: !7)
!52 = !DILocation(line: 53, column: 20, scope: !7)
!53 = !DILocation(line: 54, column: 20, scope: !7)
!54 = !DILocation(line: 55, column: 20, scope: !7)
!55 = !DILocation(line: 56, column: 20, scope: !7)
!56 = !DILocation(line: 57, column: 20, scope: !7)
!57 = !DILocation(line: 58, column: 20, scope: !7)
!58 = !DILocation(line: 59, column: 27, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !60)
!60 = !DILocation(line: 60, column: 42, scope: !7)
!61 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !60)
!62 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !60)
!63 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !60)
!64 = !DILocation(line: 61, column: 20, scope: !7)
!65 = !DILocation(line: 62, column: 20, scope: !7)
!66 = !DILocation(line: 63, column: 20, scope: !7)
!67 = !DILocation(line: 267, column: 36, scope: !68, inlinedAt: !70)
!68 = distinct !DILexicalBlockFile(scope: !7, file: !69, discriminator: 0)
!69 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!70 = !DILocation(line: 65, column: 26, scope: !7)
!71 = !DILocation(line: 256, column: 15, scope: !72, inlinedAt: !70)
!72 = distinct !DILexicalBlockFile(scope: !68, file: !69, discriminator: 0)
!73 = !DILocation(line: 67, column: 20, scope: !7)
!74 = !DILocation(line: 68, column: 4, scope: !7)
!75 = !DILocation(line: 69, column: 71, scope: !7)
!76 = !DILocation(line: 69, column: 4, scope: !7)
