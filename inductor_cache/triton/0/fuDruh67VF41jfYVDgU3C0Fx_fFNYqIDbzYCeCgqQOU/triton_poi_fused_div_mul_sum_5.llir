; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_div_mul_sum_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = shl i32 %8, 1, !dbg !12
  %12 = and i32 %11, 6, !dbg !12
  %13 = and i32 %11, 30, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %13, !dbg !13
  %16 = icmp slt i32 %14, 32, !dbg !14
  %17 = icmp slt i32 %15, 32, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 3, !dbg !16
  %20 = lshr i32 %8, 4, !dbg !17
  %21 = and i32 %20, 7, !dbg !17
  %22 = or disjoint i32 %19, %12, !dbg !18
  %23 = or disjoint i32 %19, %21, !dbg !18
  %24 = icmp slt i32 %22, 16, !dbg !19
  %25 = icmp slt i32 %23, 16, !dbg !19
  %26 = sdiv i32 %14, 2, !dbg !20
  %.frozen = freeze i32 %15, !dbg !21
  %27 = sdiv i32 %.frozen, 8, !dbg !21
  %28 = sdiv i32 %14, 8, !dbg !21
  %29 = mul i32 %27, 8, !dbg !22
  %.decomposed = sub i32 %.frozen, %29, !dbg !22
  %30 = srem i32 %26, 4, !dbg !23
  %31 = shl i32 %26, 4, !dbg !24
  %32 = add i32 %31, %22, !dbg !25
  %33 = sext i32 %32 to i64, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !26
  %35 = and i1 %16, %24, !dbg !27
  %36 = and i1 %17, %25, !dbg !27
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %35) #2, !dbg !28
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !28
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !28
  %40 = bitcast i32 %38 to float, !dbg !28
  %41 = bitcast i32 %39 to float, !dbg !28
  %42 = shl i32 %23, 3, !dbg !29
  %43 = shl i32 %22, 3, !dbg !29
  %44 = or disjoint i32 %43, 8, !dbg !29
  %45 = add i32 %42, %.decomposed, !dbg !30
  %46 = shl i32 %27, 7, !dbg !31
  %47 = shl i32 %28, 7, !dbg !31
  %48 = add i32 %45, %46, !dbg !32
  %49 = sext i32 %48 to i64, !dbg !33
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !33
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %36) #2, !dbg !34
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !34
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !34
  %54 = bitcast i32 %52 to float, !dbg !34
  %55 = bitcast i32 %53 to float, !dbg !34
  %56 = shl nsw i32 %30, 1, !dbg !35
  %57 = add i32 %47, %43, !dbg !36
  %58 = add i32 %57, %56, !dbg !37
  %59 = add i32 %47, %44, !dbg !36
  %60 = add i32 %59, %56, !dbg !37
  %61 = sext i32 %58 to i64, !dbg !38
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !38
  %63 = sext i32 %60 to i64, !dbg !38
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !38
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %35) #2, !dbg !39
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %35) #2, !dbg !39
  %67 = or disjoint i32 %56, 1, !dbg !40
  %68 = add i32 %57, %67, !dbg !41
  %69 = add i32 %59, %67, !dbg !41
  %70 = sext i32 %68 to i64, !dbg !42
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !42
  %72 = sext i32 %69 to i64, !dbg !42
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !42
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %35) #2, !dbg !43
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %35) #2, !dbg !43
  %76 = fcmp olt float %54, 0.000000e+00, !dbg !44
  %77 = fcmp olt float %55, 0.000000e+00, !dbg !44
  %78 = select i1 %76, float 0.000000e+00, float %54, !dbg !48
  %79 = select i1 %77, float 0.000000e+00, float %55, !dbg !48
  %80 = fadd float %78, 0x3F50624DE0000000, !dbg !49
  %81 = fadd float %79, 0x3F50624DE0000000, !dbg !49
  %82 = shl i32 %8, 4, !dbg !49
  %83 = and i32 %82, 240, !dbg !49
  %84 = or disjoint i32 %83, %21, !dbg !49
  %85 = and i32 %11, 254, !dbg !49
  %86 = lshr exact i32 %83, 1, !dbg !49
  %87 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %86, !dbg !49
  %88 = getelementptr float, ptr addrspace(3) %87, i32 %84, !dbg !49
  %89 = bitcast float %80 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #2, !dbg !49
  %90 = or disjoint i32 %84, 8, !dbg !49
  %91 = lshr i32 %90, 3, !dbg !49
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i32 %91, !dbg !49
  %93 = getelementptr float, ptr addrspace(3) %92, i32 %90, !dbg !49
  %94 = bitcast float %81 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #2, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %95 = lshr i32 %85, 3, !dbg !49
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %95, !dbg !49
  %97 = getelementptr inbounds float, ptr addrspace(3) %96, i32 %85, !dbg !49
  %98 = load float, ptr addrspace(3) %97, align 4, !dbg !49
  %99 = or disjoint i32 %85, 1, !dbg !49
  %100 = getelementptr inbounds float, ptr addrspace(3) %96, i32 %99, !dbg !49
  %101 = load float, ptr addrspace(3) %100, align 4, !dbg !49
  %102 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !39
  %103 = insertelement <2 x i32> %102, i32 %74, i64 1, !dbg !39
  %104 = bitcast <2 x i32> %103 to <2 x float>, !dbg !39
  %105 = fcmp olt <2 x float> %104, zeroinitializer, !dbg !50
  %106 = select <2 x i1> %105, <2 x float> zeroinitializer, <2 x float> %104, !dbg !52
  %107 = fadd <2 x float> %106, splat (float 0x3F50624DE0000000), !dbg !53
  %108 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !39
  %109 = insertelement <2 x i32> %108, i32 %75, i64 1, !dbg !39
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !39
  %111 = fcmp olt <2 x float> %110, zeroinitializer, !dbg !50
  %112 = select <2 x i1> %111, <2 x float> zeroinitializer, <2 x float> %110, !dbg !52
  %113 = fadd <2 x float> %112, splat (float 0x3F50624DE0000000), !dbg !53
  %shift = shufflevector <2 x float> %107, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %114 = fadd <2 x float> %107, %shift, !dbg !54
  %115 = extractelement <2 x float> %114, i64 0, !dbg !54
  %shift3 = shufflevector <2 x float> %113, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %116 = fadd <2 x float> %113, %shift3, !dbg !54
  %117 = extractelement <2 x float> %116, i64 0, !dbg !54
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %115) #2, !dbg !55
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float %117) #2, !dbg !55
  %120 = fmul float %118, %40, !dbg !56
  %121 = fmul float %119, %41, !dbg !56
  %122 = shl i32 %14, 4, !dbg !57
  %123 = add i32 %22, %122, !dbg !58
  %124 = sext i32 %123 to i64, !dbg !59
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %124, !dbg !59
  %126 = bitcast float %120 to i32, !dbg !60
  %127 = bitcast float %121 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %126, i32 %127, ptr addrspace(1) %125, i1 %35) #2, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5nacvdeet766izfdcdaumifvuwqxrvwxndmxk2ghniseo7pvcla.py", directory: "inductor_cache/5n")
!4 = !{ptr @triton_poi_fused_div_mul_sum_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_mul_sum_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_mul_sum_5", linkageName: "triton_poi_fused_div_mul_sum_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 26, scope: !7)
!24 = !DILocation(line: 34, column: 38, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 51, scope: !7)
!28 = !DILocation(line: 34, column: 43, scope: !7)
!29 = !DILocation(line: 35, column: 37, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 46, scope: !7)
!32 = !DILocation(line: 35, column: 42, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 51, scope: !7)
!35 = !DILocation(line: 36, column: 32, scope: !7)
!36 = !DILocation(line: 36, column: 37, scope: !7)
!37 = !DILocation(line: 36, column: 44, scope: !7)
!38 = !DILocation(line: 36, column: 30, scope: !7)
!39 = !DILocation(line: 36, column: 53, scope: !7)
!40 = !DILocation(line: 37, column: 34, scope: !7)
!41 = !DILocation(line: 37, column: 48, scope: !7)
!42 = !DILocation(line: 37, column: 30, scope: !7)
!43 = !DILocation(line: 37, column: 57, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 39, column: 40, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 41, column: 18, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !51)
!51 = !DILocation(line: 42, column: 40, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !51)
!53 = !DILocation(line: 43, column: 18, scope: !7)
!54 = !DILocation(line: 46, column: 19, scope: !7)
!55 = !DILocation(line: 47, column: 19, scope: !7)
!56 = !DILocation(line: 48, column: 19, scope: !7)
!57 = !DILocation(line: 49, column: 33, scope: !7)
!58 = !DILocation(line: 49, column: 30, scope: !7)
!59 = !DILocation(line: 49, column: 25, scope: !7)
!60 = !DILocation(line: 49, column: 45, scope: !7)
!61 = !DILocation(line: 49, column: 4, scope: !7)
