; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_div_mean_sqrt_sub_var_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = lshr i32 %9, 5, !dbg !12
  %12 = and i32 %9, 63, !dbg !12
  %13 = shl i32 %7, 6, !dbg !13
  %14 = or disjoint i32 %13, %12, !dbg !14
  %15 = sext i32 %14 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !15
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 %8, i32 0, i1 %8) #5, !dbg !16
  %18 = bitcast i32 %17 to float, !dbg !16
  %19 = shl i32 %7, 2, !dbg !17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !18
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %8) #5, !dbg !19
  %23 = bitcast i32 %22 to float, !dbg !19
  %24 = or disjoint i32 %19, 1, !dbg !20
  %25 = sext i32 %24 to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %8) #5, !dbg !22
  %28 = bitcast i32 %27 to float, !dbg !22
  %29 = or disjoint i32 %19, 2, !dbg !23
  %30 = sext i32 %29 to i64, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %8) #5, !dbg !25
  %33 = bitcast i32 %32 to float, !dbg !25
  %34 = or disjoint i32 %19, 3, !dbg !26
  %35 = sext i32 %34 to i64, !dbg !27
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !27
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %8) #5, !dbg !28
  %38 = bitcast i32 %37 to float, !dbg !28
  %39 = fadd float %23, %28, !dbg !29
  %40 = fadd float %39, %33, !dbg !30
  %41 = fadd float %40, %38, !dbg !31
  %42 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %41, float 4.000000e+00) #5, !dbg !32
  %43 = fsub float %18, %42, !dbg !33
  %44 = select i1 %8, float %43, float 0.000000e+00, !dbg !34
  %45 = bitcast float %44 to i32, !dbg !35
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 16, i32 31), !dbg !35
  %47 = bitcast i32 %46 to float, !dbg !35
  %48 = fadd float %44, %47, !dbg !39
  %49 = bitcast float %48 to i32, !dbg !35
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 8, i32 31), !dbg !35
  %51 = bitcast i32 %50 to float, !dbg !35
  %52 = fadd float %48, %51, !dbg !39
  %53 = bitcast float %52 to i32, !dbg !35
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 4, i32 31), !dbg !35
  %55 = bitcast i32 %54 to float, !dbg !35
  %56 = fadd float %52, %55, !dbg !39
  %57 = bitcast float %56 to i32, !dbg !35
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 2, i32 31), !dbg !35
  %59 = bitcast i32 %58 to float, !dbg !35
  %60 = fadd float %56, %59, !dbg !39
  %61 = bitcast float %60 to i32, !dbg !35
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 1, i32 31), !dbg !35
  %63 = bitcast i32 %62 to float, !dbg !35
  %64 = fadd float %60, %63, !dbg !39
  %65 = icmp eq i32 %10, 0, !dbg !35
  %66 = and i32 %11, 1, !dbg !35
  %67 = zext nneg i32 %66 to i64, !dbg !35
  %68 = getelementptr float, ptr addrspace(3) @global_smem, i64 %67, !dbg !35
  %69 = bitcast float %64 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 %65) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %70 = icmp slt i32 %9, 2, !dbg !35
  %71 = sext i32 %9 to i64, !dbg !35
  %72 = getelementptr float, ptr addrspace(3) @global_smem, i64 %71, !dbg !35
  %73 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %72, i1 %70) #5, !dbg !35
  %74 = bitcast i32 %73 to float, !dbg !35
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 1, i32 31), !dbg !35
  %76 = bitcast i32 %75 to float, !dbg !35
  %77 = fadd float %74, %76, !dbg !39
  %78 = and i32 %9, 1, !dbg !35
  %79 = icmp eq i32 %78, 0, !dbg !35
  %80 = and i1 %70, %79, !dbg !35
  %81 = bitcast float %77 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %81, i1 %80) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %82 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !35
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float 6.400000e+01) #5, !dbg !41
  %84 = fsub float %43, %83, !dbg !42
  %85 = fmul float %84, %84, !dbg !43
  %86 = select i1 %8, float %85, float 0.000000e+00, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %87 = bitcast float %86 to i32, !dbg !45
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 16, i32 31), !dbg !45
  %89 = bitcast i32 %88 to float, !dbg !45
  %90 = fadd float %86, %89, !dbg !47
  %91 = bitcast float %90 to i32, !dbg !45
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 8, i32 31), !dbg !45
  %93 = bitcast i32 %92 to float, !dbg !45
  %94 = fadd float %90, %93, !dbg !47
  %95 = bitcast float %94 to i32, !dbg !45
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 4, i32 31), !dbg !45
  %97 = bitcast i32 %96 to float, !dbg !45
  %98 = fadd float %94, %97, !dbg !47
  %99 = bitcast float %98 to i32, !dbg !45
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 2, i32 31), !dbg !45
  %101 = bitcast i32 %100 to float, !dbg !45
  %102 = fadd float %98, %101, !dbg !47
  %103 = bitcast float %102 to i32, !dbg !45
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 1, i32 31), !dbg !45
  %105 = bitcast i32 %104 to float, !dbg !45
  %106 = fadd float %102, %105, !dbg !47
  %107 = bitcast float %106 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %107, i1 %65) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %108 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %72, i1 %70) #5, !dbg !45
  %109 = bitcast i32 %108 to float, !dbg !45
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 1, i32 31), !dbg !45
  %111 = bitcast i32 %110 to float, !dbg !45
  %112 = fadd float %109, %111, !dbg !47
  %113 = bitcast float %112 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %113, i1 %80) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %114 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !45
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float 6.300000e+01) #5, !dbg !48
  %116 = fadd float %115, 0x3EF4F8B580000000, !dbg !49
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i = icmp eq i32 %117, 0, !dbg !50
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !50
  %.not1.i = icmp eq i32 %118, 0, !dbg !50
  br i1 %.not.i, label %124, label %119, !dbg !50

119:                                              ; preds = %6
  br i1 %.not1.i, label %122, label %120, !dbg !50

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #5, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #5, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

124:                                              ; preds = %6
  br i1 %.not1.i, label %127, label %125, !dbg !50

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #5, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #5, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

__nv_sqrtf.exit:                                  ; preds = %120, %122, %125, %127
  %.0.i = phi float [ %121, %120 ], [ %123, %122 ], [ %126, %125 ], [ %128, %127 ], !dbg !50
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i1 = icmp eq i32 %129, 0, !dbg !50
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !50
  %.not1.i4 = icmp eq i32 %130, 0, !dbg !50
  br i1 %.not.i1, label %136, label %131, !dbg !50

131:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %134, label %132, !dbg !50

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #5, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #5, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

136:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %139, label %137, !dbg !50

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #5, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #5, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

__nv_sqrtf.exit5:                                 ; preds = %132, %134, %137, %139
  %.0.i3 = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !50
  %141 = fadd float %.0.i3, 0x3EE4F8B580000000, !dbg !51
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float %141) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %143 = sext i32 %7 to i64, !dbg !54
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !54
  %145 = icmp eq i32 %12, 0, !dbg !55
  %146 = bitcast float %.0.i to i32, !dbg !55
  %147 = and i1 %145, %8, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %146, ptr addrspace(1) %144, i1 %147) #5, !dbg !55
  %148 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !56
  %149 = bitcast float %142 to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %149, ptr addrspace(1) %148, i1 %8) #5, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwhx33k4mr53njazzx5pfkbvmhjkzpvi23koerlzg7flgxgkiplf.py", directory: "inductor_cache/wh")
!4 = !{ptr @triton_per_fused_add_div_mean_sqrt_sub_var_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_mean_sqrt_sub_var_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_mean_sqrt_sub_var_1", linkageName: "triton_per_fused_add_div_mean_sqrt_sub_var_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 32, column: 32, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 37, scope: !7)
!20 = !DILocation(line: 33, column: 34, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 41, scope: !7)
!23 = !DILocation(line: 34, column: 34, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 41, scope: !7)
!26 = !DILocation(line: 35, column: 34, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 41, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 19, scope: !7)
!34 = !DILocation(line: 45, column: 35, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!38 = !DILocation(line: 46, column: 26, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !38)
!40 = distinct !DILexicalBlockFile(scope: !36, file: !37, discriminator: 0)
!41 = !DILocation(line: 49, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 51, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 35, scope: !7)
!45 = !DILocation(line: 267, column: 36, scope: !36, inlinedAt: !46)
!46 = !DILocation(line: 54, column: 26, scope: !7)
!47 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !46)
!48 = !DILocation(line: 56, column: 20, scope: !7)
!49 = !DILocation(line: 58, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 27, scope: !7)
!51 = !DILocation(line: 61, column: 20, scope: !7)
!52 = !DILocation(line: 62, column: 20, scope: !7)
!53 = !DILocation(line: 63, column: 4, scope: !7)
!54 = !DILocation(line: 64, column: 28, scope: !7)
!55 = !DILocation(line: 64, column: 40, scope: !7)
!56 = !DILocation(line: 65, column: 28, scope: !7)
!57 = !DILocation(line: 65, column: 48, scope: !7)
!58 = !DILocation(line: 65, column: 4, scope: !7)
