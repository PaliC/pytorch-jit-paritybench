; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 5, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 3, !dbg !12
  %15 = and i32 %14, 15, !dbg !12
  %16 = or disjoint i32 %15, 16, !dbg !12
  %17 = shl i32 %13, 2, !dbg !12
  %18 = and i32 %17, 28, !dbg !12
  %19 = or disjoint i32 %12, %15, !dbg !13
  %20 = or disjoint i32 %12, %16, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %22 = shl i32 %21, 5, !dbg !15
  %23 = or disjoint i32 %22, %18, !dbg !16
  %24 = icmp slt i32 %23, 96, !dbg !17
  %25 = mul i32 %19, 96, !dbg !18
  %26 = mul i32 %20, 96, !dbg !18
  %27 = add i32 %23, %25, !dbg !19
  %28 = add i32 %23, %26, !dbg !19
  %29 = sext i32 %27 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !20
  %31 = sext i32 %28 to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !20
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %24) #4, !dbg !21
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %24) #4, !dbg !21
  %35 = sext i32 %23 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %24) #4, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !24
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %24) #4, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %24) #4, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !26
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %24) #4, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !28
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %24) #4, !dbg !29
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !29
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !29
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !29
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !29
  %50 = bitcast i32 %46 to float, !dbg !29
  %51 = bitcast i32 %47 to float, !dbg !29
  %52 = bitcast i32 %48 to float, !dbg !29
  %53 = bitcast i32 %49 to float, !dbg !29
  %54 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !30
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %24) #4, !dbg !31
  %56 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !32
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %24) #4, !dbg !33
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !34
  %59 = fadd float %51, 0x3EE4F8B580000000, !dbg !34
  %60 = fadd float %52, 0x3EE4F8B580000000, !dbg !34
  %61 = fadd float %53, 0x3EE4F8B580000000, !dbg !34
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %62, 0, !dbg !35
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %63, 0, !dbg !35
  br i1 %.not.i, label %69, label %64, !dbg !35

64:                                               ; preds = %10
  br i1 %.not1.i, label %67, label %65, !dbg !35

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

69:                                               ; preds = %10
  br i1 %.not1.i, label %72, label %70, !dbg !35

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !35
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i15 = icmp eq i32 %74, 0, !dbg !35
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i18 = icmp eq i32 %75, 0, !dbg !35
  br i1 %.not.i15, label %81, label %76, !dbg !35

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %79, label %77, !dbg !35

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %84, label %82, !dbg !35

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !35
  br label %__nv_sqrtf.exit19, !dbg !35

__nv_sqrtf.exit19:                                ; preds = %77, %79, %82, %84
  %.0.i17 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !35
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i20 = icmp eq i32 %86, 0, !dbg !35
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i23 = icmp eq i32 %87, 0, !dbg !35
  br i1 %.not.i20, label %93, label %88, !dbg !35

88:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %91, label %89, !dbg !35

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

93:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %96, label %94, !dbg !35

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !35
  br label %__nv_sqrtf.exit24, !dbg !35

__nv_sqrtf.exit24:                                ; preds = %89, %91, %94, %96
  %.0.i22 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !35
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i25 = icmp eq i32 %98, 0, !dbg !35
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i28 = icmp eq i32 %99, 0, !dbg !35
  br i1 %.not.i25, label %105, label %100, !dbg !35

100:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %103, label %101, !dbg !35

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

105:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %108, label %106, !dbg !35

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #4, !dbg !35
  br label %__nv_sqrtf.exit29, !dbg !35

__nv_sqrtf.exit29:                                ; preds = %101, %103, %106, %108
  %.0.i27 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !35
  %110 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !21
  %111 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %112 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !27
  %113 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !21
  %114 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %115 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !27
  %116 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !21
  %117 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %118 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !27
  %119 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !21
  %120 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %121 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !27
  %122 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !21
  %123 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !21
  %124 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !21
  %125 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !21
  %126 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !33
  %127 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !33
  %128 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !33
  %129 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !33
  %130 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !31
  %131 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !31
  %132 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !31
  %133 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !31
  %134 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !25
  %135 = bitcast i32 %134 to float, !dbg !25
  %136 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !25
  %137 = bitcast i32 %136 to float, !dbg !25
  %138 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !25
  %139 = bitcast i32 %138 to float, !dbg !25
  %140 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !25
  %141 = bitcast i32 %140 to float, !dbg !25
  %142 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !25
  %143 = bitcast i32 %142 to float, !dbg !25
  %144 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !25
  %145 = bitcast i32 %144 to float, !dbg !25
  %146 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !25
  %147 = bitcast i32 %146 to float, !dbg !25
  %148 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !25
  %149 = bitcast i32 %148 to float, !dbg !25
  %150 = or disjoint i32 %12, %18, !dbg !13
  %.frozen = freeze i32 %150, !dbg !36
  %151 = sdiv i32 %.frozen, 4096, !dbg !36
  %152 = mul i32 %151, 4096, !dbg !37
  %.decomposed = sub i32 %.frozen, %152, !dbg !37
  %153 = or disjoint i32 %22, %16, !dbg !16
  %154 = icmp slt i32 %153, 96, !dbg !17
  %155 = or disjoint i32 %22, %15, !dbg !16
  %156 = icmp slt i32 %155, 96, !dbg !17
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !38
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !38
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !38
  %161 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !23
  %162 = insertelement <4 x i32> %161, i32 %114, i64 1, !dbg !23
  %163 = insertelement <4 x i32> %162, i32 %117, i64 2, !dbg !23
  %164 = insertelement <4 x i32> %163, i32 %120, i64 3, !dbg !23
  %165 = bitcast <4 x i32> %164 to <4 x float>, !dbg !23
  %166 = shufflevector <4 x float> %165, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !23
  %167 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !27
  %168 = insertelement <4 x i32> %167, i32 %115, i64 1, !dbg !27
  %169 = insertelement <4 x i32> %168, i32 %118, i64 2, !dbg !27
  %170 = insertelement <4 x i32> %169, i32 %121, i64 3, !dbg !27
  %171 = bitcast <4 x i32> %170 to <4 x float>, !dbg !27
  %172 = shufflevector <4 x float> %171, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %173 = insertelement <8 x i32> poison, i32 %110, i64 0, !dbg !21
  %174 = insertelement <8 x i32> %173, i32 %113, i64 1, !dbg !21
  %175 = insertelement <8 x i32> %174, i32 %116, i64 2, !dbg !21
  %176 = insertelement <8 x i32> %175, i32 %119, i64 3, !dbg !21
  %177 = insertelement <8 x i32> %176, i32 %122, i64 4, !dbg !21
  %178 = insertelement <8 x i32> %177, i32 %123, i64 5, !dbg !21
  %179 = insertelement <8 x i32> %178, i32 %124, i64 6, !dbg !21
  %180 = insertelement <8 x i32> %179, i32 %125, i64 7, !dbg !21
  %181 = bitcast <8 x i32> %180 to <8 x float>, !dbg !21
  %182 = fadd <8 x float> %166, %181, !dbg !39
  %183 = fsub <8 x float> %182, %172, !dbg !40
  %184 = insertelement <4 x i32> poison, i32 %126, i64 0, !dbg !33
  %185 = insertelement <4 x i32> %184, i32 %127, i64 1, !dbg !33
  %186 = insertelement <4 x i32> %185, i32 %128, i64 2, !dbg !33
  %187 = insertelement <4 x i32> %186, i32 %129, i64 3, !dbg !33
  %188 = bitcast <4 x i32> %187 to <4 x float>, !dbg !33
  %189 = shufflevector <4 x float> %188, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %190 = insertelement <4 x i32> poison, i32 %130, i64 0, !dbg !31
  %191 = insertelement <4 x i32> %190, i32 %131, i64 1, !dbg !31
  %192 = insertelement <4 x i32> %191, i32 %132, i64 2, !dbg !31
  %193 = insertelement <4 x i32> %192, i32 %133, i64 3, !dbg !31
  %194 = bitcast <4 x i32> %193 to <4 x float>, !dbg !31
  %195 = shufflevector <4 x float> %194, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %196 = insertelement <8 x float> poison, float %160, i64 0, !dbg !41
  %197 = insertelement <8 x float> %196, float %159, i64 1, !dbg !41
  %198 = insertelement <8 x float> %197, float %158, i64 2, !dbg !41
  %199 = insertelement <8 x float> %198, float %157, i64 3, !dbg !41
  %200 = shufflevector <8 x float> %199, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !41
  %201 = fmul <8 x float> %183, %200, !dbg !41
  %202 = fmul <8 x float> %201, %195, !dbg !42
  %203 = fadd <8 x float> %202, %189, !dbg !43
  %204 = fcmp olt <8 x float> %203, zeroinitializer, !dbg !44
  %205 = extractelement <8 x i1> %204, i64 7, !dbg !48
  %206 = extractelement <8 x float> %203, i64 7, !dbg !48
  %207 = select i1 %205, float 0.000000e+00, float %206, !dbg !48
  %208 = extractelement <8 x i1> %204, i64 6, !dbg !48
  %209 = extractelement <8 x float> %203, i64 6, !dbg !48
  %210 = select i1 %208, float 0.000000e+00, float %209, !dbg !48
  %211 = extractelement <8 x i1> %204, i64 5, !dbg !48
  %212 = extractelement <8 x float> %203, i64 5, !dbg !48
  %213 = select i1 %211, float 0.000000e+00, float %212, !dbg !48
  %214 = extractelement <8 x i1> %204, i64 4, !dbg !48
  %215 = extractelement <8 x float> %203, i64 4, !dbg !48
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !48
  %217 = extractelement <8 x i1> %204, i64 3, !dbg !48
  %218 = extractelement <8 x float> %203, i64 3, !dbg !48
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !48
  %220 = extractelement <8 x i1> %204, i64 2, !dbg !48
  %221 = extractelement <8 x float> %203, i64 2, !dbg !48
  %222 = select i1 %220, float 0.000000e+00, float %221, !dbg !48
  %223 = extractelement <8 x i1> %204, i64 1, !dbg !48
  %224 = extractelement <8 x float> %203, i64 1, !dbg !48
  %225 = select i1 %223, float 0.000000e+00, float %224, !dbg !48
  %226 = extractelement <8 x i1> %204, i64 0, !dbg !48
  %227 = extractelement <8 x float> %203, i64 0, !dbg !48
  %228 = select i1 %226, float 0.000000e+00, float %227, !dbg !48
  %229 = fadd float %207, %149, !dbg !49
  %230 = fadd float %210, %147, !dbg !49
  %231 = fadd float %213, %145, !dbg !49
  %232 = fadd float %216, %143, !dbg !49
  %233 = fadd float %219, %141, !dbg !49
  %234 = fadd float %222, %139, !dbg !49
  %235 = fadd float %225, %137, !dbg !49
  %236 = fadd float %228, %135, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %bc = bitcast <8 x float> %182 to <8 x i32>, !dbg !51
  %237 = extractelement <8 x i32> %bc, i64 7, !dbg !51
  %bc30 = bitcast <8 x float> %182 to <8 x i32>, !dbg !51
  %238 = extractelement <8 x i32> %bc30, i64 6, !dbg !51
  %bc31 = bitcast <8 x float> %182 to <8 x i32>, !dbg !51
  %239 = extractelement <8 x i32> %bc31, i64 5, !dbg !51
  %bc32 = bitcast <8 x float> %182 to <8 x i32>, !dbg !51
  %240 = extractelement <8 x i32> %bc32, i64 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %237, i32 %238, i32 %239, i32 %240, ptr addrspace(1) %30, i1 %24) #4, !dbg !51
  %bc33 = bitcast <8 x float> %182 to <8 x i32>, !dbg !51
  %241 = extractelement <8 x i32> %bc33, i64 3, !dbg !51
  %bc34 = bitcast <8 x float> %182 to <8 x i32>, !dbg !51
  %242 = extractelement <8 x i32> %bc34, i64 2, !dbg !51
  %bc35 = bitcast <8 x float> %182 to <8 x i32>, !dbg !51
  %243 = extractelement <8 x i32> %bc35, i64 1, !dbg !51
  %bc36 = bitcast <8 x float> %182 to <8 x i32>, !dbg !51
  %244 = extractelement <8 x i32> %bc36, i64 0, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %241, i32 %242, i32 %243, i32 %244, ptr addrspace(1) %32, i1 %24) #4, !dbg !51
  %245 = shl i32 %155, 12, !dbg !52
  %246 = shl i32 %153, 12, !dbg !52
  %247 = mul i32 %151, 393216, !dbg !53
  %248 = add i32 %247, %.decomposed, !dbg !54
  %249 = add i32 %248, %245, !dbg !55
  %250 = add i32 %248, %246, !dbg !55
  %251 = sext i32 %249 to i64, !dbg !56
  %252 = getelementptr float, ptr addrspace(1) %7, i64 %251, !dbg !56
  %253 = sext i32 %250 to i64, !dbg !56
  %254 = getelementptr float, ptr addrspace(1) %7, i64 %253, !dbg !56
  %255 = shl i32 %13, 7, !dbg !57
  %256 = and i32 %255, 896, !dbg !57
  %257 = or disjoint i32 %256, %15, !dbg !57
  %258 = and i32 %17, 508, !dbg !57
  %259 = lshr exact i32 %256, 1, !dbg !57
  %260 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %259, !dbg !57
  %261 = getelementptr float, ptr addrspace(3) %260, i32 %257, !dbg !57
  %262 = bitcast float %229 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #4, !dbg !57
  %263 = or disjoint i32 %257, 32, !dbg !57
  %264 = lshr i32 %263, 3, !dbg !57
  %265 = and i32 %264, 116, !dbg !57
  %266 = getelementptr float, ptr addrspace(3) @global_smem, i32 %265, !dbg !57
  %267 = getelementptr float, ptr addrspace(3) %266, i32 %263, !dbg !57
  %268 = bitcast float %230 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #4, !dbg !57
  %269 = or disjoint i32 %257, 64, !dbg !57
  %270 = lshr i32 %269, 3, !dbg !57
  %271 = and i32 %270, 120, !dbg !57
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i32 %271, !dbg !57
  %273 = getelementptr float, ptr addrspace(3) %272, i32 %269, !dbg !57
  %274 = bitcast float %231 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #4, !dbg !57
  %275 = or disjoint i32 %257, 96, !dbg !57
  %276 = lshr i32 %275, 3, !dbg !57
  %277 = and i32 %276, 124, !dbg !57
  %278 = getelementptr float, ptr addrspace(3) @global_smem, i32 %277, !dbg !57
  %279 = getelementptr float, ptr addrspace(3) %278, i32 %275, !dbg !57
  %280 = bitcast float %232 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #4, !dbg !57
  %281 = or disjoint i32 %257, 16, !dbg !57
  %282 = getelementptr float, ptr addrspace(3) %260, i32 %281, !dbg !57
  %283 = bitcast float %233 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #4, !dbg !57
  %284 = or disjoint i32 %257, 48, !dbg !57
  %285 = lshr i32 %284, 3, !dbg !57
  %286 = and i32 %285, 116, !dbg !57
  %287 = getelementptr float, ptr addrspace(3) @global_smem, i32 %286, !dbg !57
  %288 = getelementptr float, ptr addrspace(3) %287, i32 %284, !dbg !57
  %289 = bitcast float %234 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %289, i1 true) #4, !dbg !57
  %290 = or disjoint i32 %257, 80, !dbg !57
  %291 = lshr i32 %290, 3, !dbg !57
  %292 = and i32 %291, 120, !dbg !57
  %293 = getelementptr float, ptr addrspace(3) @global_smem, i32 %292, !dbg !57
  %294 = getelementptr float, ptr addrspace(3) %293, i32 %290, !dbg !57
  %295 = bitcast float %235 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #4, !dbg !57
  %296 = or disjoint i32 %257, 112, !dbg !57
  %297 = lshr i32 %296, 3, !dbg !57
  %298 = and i32 %297, 124, !dbg !57
  %299 = getelementptr float, ptr addrspace(3) @global_smem, i32 %298, !dbg !57
  %300 = getelementptr float, ptr addrspace(3) %299, i32 %296, !dbg !57
  %301 = bitcast float %236 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 true) #4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %302 = lshr i32 %17, 3, !dbg !57
  %303 = and i32 %302, 60, !dbg !57
  %304 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %303, !dbg !57
  %305 = getelementptr inbounds float, ptr addrspace(3) %304, i32 %258, !dbg !57
  %306 = or disjoint i32 %258, 512, !dbg !57
  %307 = lshr i32 %306, 3, !dbg !57
  %308 = and i32 %307, 124, !dbg !57
  %309 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %308, !dbg !57
  %310 = getelementptr inbounds float, ptr addrspace(3) %309, i32 %306, !dbg !57
  %311 = load <4 x i32>, ptr addrspace(3) %310, align 16, !dbg !57
  %.extract = load i32, ptr addrspace(3) %305, align 16, !dbg !57
  %312 = getelementptr inbounds i8, ptr addrspace(3) %305, i32 4, !dbg !57
  %.extract8 = load i32, ptr addrspace(3) %312, align 4, !dbg !57
  %313 = getelementptr inbounds i8, ptr addrspace(3) %305, i32 8, !dbg !57
  %.extract9 = load i32, ptr addrspace(3) %313, align 8, !dbg !57
  %314 = getelementptr inbounds i8, ptr addrspace(3) %305, i32 12, !dbg !57
  %.extract10 = load i32, ptr addrspace(3) %314, align 4, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %252, i1 %156) #4, !dbg !57
  %.extract11 = extractelement <4 x i32> %311, i64 0, !dbg !57
  %.extract12 = extractelement <4 x i32> %311, i64 1, !dbg !57
  %.extract13 = extractelement <4 x i32> %311, i64 2, !dbg !57
  %.extract14 = extractelement <4 x i32> %311, i64 3, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %254, i1 %154) #4, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfuvzy4il7hpghn4qael7tohc63ixqmew7qxf7qfhyqfmsiryngi.py", directory: "inductor_cache/fu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 32, column: 42, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 34, scope: !7)
!21 = !DILocation(line: 32, column: 47, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 43, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 35, scope: !7)
!30 = !DILocation(line: 37, column: 31, scope: !7)
!31 = !DILocation(line: 37, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 31, scope: !7)
!33 = !DILocation(line: 38, column: 36, scope: !7)
!34 = !DILocation(line: 42, column: 18, scope: !7)
!35 = !DILocation(line: 43, column: 26, scope: !7)
!36 = !DILocation(line: 31, column: 19, scope: !7)
!37 = !DILocation(line: 30, column: 19, scope: !7)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 48, column: 19, scope: !7)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 50, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 52, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 53, column: 19, scope: !7)
!50 = !DILocation(line: 54, column: 4, scope: !7)
!51 = !DILocation(line: 55, column: 47, scope: !7)
!52 = !DILocation(line: 56, column: 35, scope: !7)
!53 = !DILocation(line: 56, column: 47, scope: !7)
!54 = !DILocation(line: 56, column: 30, scope: !7)
!55 = !DILocation(line: 56, column: 40, scope: !7)
!56 = !DILocation(line: 56, column: 25, scope: !7)
!57 = !DILocation(line: 56, column: 59, scope: !7)
!58 = !DILocation(line: 56, column: 4, scope: !7)
