; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 41984, !dbg !14
  %.frozen = freeze i32 %15, !dbg !15
  %17 = sdiv i32 %.frozen, 64, !dbg !15
  %18 = srem i32 %17, 164, !dbg !16
  %19 = mul i32 %17, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %.frozen22 = freeze i32 %15, !dbg !18
  %20 = sdiv i32 %.frozen22, 10496, !dbg !18
  %21 = sext i32 %18 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %16) #3, !dbg !20
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %16) #3, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %16) #3, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %16) #3, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %16) #3, !dbg !22
  %29 = bitcast i32 %28 to float, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %16) #3, !dbg !22
  %31 = bitcast i32 %30 to float, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %16) #3, !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %16) #3, !dbg !22
  %35 = bitcast i32 %34 to float, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %16) #3, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %16) #3, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %16) #3, !dbg !24
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %16) #3, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %16) #3, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %16) #3, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %16) #3, !dbg !26
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %16) #3, !dbg !26
  %46 = icmp slt i32 %18, 152, !dbg !27
  %47 = mul i32 %20, 10496, !dbg !28
  %srem.decomposed = sub i32 %.frozen22, %47, !dbg !28
  %48 = mul nsw i32 %20, 9728, !dbg !29
  %49 = add nsw i32 %48, %srem.decomposed, !dbg !30
  %50 = sext i32 %49 to i64, !dbg !31
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !31
  %52 = and i1 %16, %46, !dbg !32
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #3, !dbg !33
  %54 = icmp sgt i32 %18, 151, !dbg !34
  %55 = shl nsw i32 %18, 6, !dbg !35
  %56 = mul nsw i32 %20, 768, !dbg !36
  %57 = add nsw i32 %.decomposed, -9728, !dbg !35
  %58 = add nsw i32 %57, %56, !dbg !37
  %59 = add nsw i32 %58, %55, !dbg !38
  %60 = sext i32 %59 to i64, !dbg !39
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !39
  %62 = and i1 %16, %54, !dbg !40
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %62, i32 0, i1 %62, i32 0, i1 %62, i32 0, i1 %62, i32 0, i1 %62) #3, !dbg !41
  %64 = fadd float %29, 0x3EE4F8B580000000, !dbg !42
  %65 = fadd float %31, 0x3EE4F8B580000000, !dbg !42
  %66 = fadd float %33, 0x3EE4F8B580000000, !dbg !42
  %67 = fadd float %35, 0x3EE4F8B580000000, !dbg !42
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i = icmp eq i32 %68, 0, !dbg !43
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i = icmp eq i32 %69, 0, !dbg !43
  br i1 %.not.i, label %75, label %70, !dbg !43

70:                                               ; preds = %9
  br i1 %.not1.i, label %73, label %71, !dbg !43

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

75:                                               ; preds = %9
  br i1 %.not1.i, label %78, label %76, !dbg !43

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %71, %73, %76, %78
  %.0.i = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !43
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i4 = icmp eq i32 %80, 0, !dbg !43
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i7 = icmp eq i32 %81, 0, !dbg !43
  br i1 %.not.i4, label %87, label %82, !dbg !43

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %85, label %83, !dbg !43

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !43
  br label %__nv_sqrtf.exit8, !dbg !43

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !43
  br label %__nv_sqrtf.exit8, !dbg !43

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %90, label %88, !dbg !43

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !43
  br label %__nv_sqrtf.exit8, !dbg !43

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !43
  br label %__nv_sqrtf.exit8, !dbg !43

__nv_sqrtf.exit8:                                 ; preds = %83, %85, %88, %90
  %.0.i6 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !43
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i9 = icmp eq i32 %92, 0, !dbg !43
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i12 = icmp eq i32 %93, 0, !dbg !43
  br i1 %.not.i9, label %99, label %94, !dbg !43

94:                                               ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %97, label %95, !dbg !43

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !43
  br label %__nv_sqrtf.exit13, !dbg !43

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !43
  br label %__nv_sqrtf.exit13, !dbg !43

99:                                               ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %102, label %100, !dbg !43

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !43
  br label %__nv_sqrtf.exit13, !dbg !43

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !43
  br label %__nv_sqrtf.exit13, !dbg !43

__nv_sqrtf.exit13:                                ; preds = %95, %97, %100, %102
  %.0.i11 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !43
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i14 = icmp eq i32 %104, 0, !dbg !43
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i17 = icmp eq i32 %105, 0, !dbg !43
  br i1 %.not.i14, label %111, label %106, !dbg !43

106:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %109, label %107, !dbg !43

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

111:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %114, label %112, !dbg !43

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

__nv_sqrtf.exit18:                                ; preds = %107, %109, %112, %114
  %.0.i16 = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !43
  %116 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !33
  %117 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !41
  %118 = insertelement <4 x i32> poison, i32 %26, i64 0, !dbg !20
  %119 = insertelement <4 x i32> %118, i32 %25, i64 1, !dbg !20
  %120 = insertelement <4 x i32> %119, i32 %24, i64 2, !dbg !20
  %121 = insertelement <4 x i32> %120, i32 %23, i64 3, !dbg !20
  %122 = bitcast <4 x i32> %121 to <4 x float>, !dbg !20
  %123 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !33
  %124 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !41
  %125 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !33
  %126 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !41
  %127 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !33
  %128 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !41
  %129 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !26
  %130 = insertelement <4 x i32> %129, i32 %44, i64 1, !dbg !26
  %131 = insertelement <4 x i32> %130, i32 %43, i64 2, !dbg !26
  %132 = insertelement <4 x i32> %131, i32 %42, i64 3, !dbg !26
  %133 = bitcast <4 x i32> %132 to <4 x float>, !dbg !26
  %134 = insertelement <4 x i32> poison, i32 %40, i64 0, !dbg !24
  %135 = insertelement <4 x i32> %134, i32 %39, i64 1, !dbg !24
  %136 = insertelement <4 x i32> %135, i32 %38, i64 2, !dbg !24
  %137 = insertelement <4 x i32> %136, i32 %37, i64 3, !dbg !24
  %138 = bitcast <4 x i32> %137 to <4 x float>, !dbg !24
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !44
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #3, !dbg !44
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #3, !dbg !44
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #3, !dbg !44
  %143 = insertelement <4 x i1> poison, i1 %46, i64 0, !dbg !45
  %144 = shufflevector <4 x i1> %143, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !45
  %145 = insertelement <4 x i32> poison, i32 %116, i64 0, !dbg !45
  %146 = insertelement <4 x i32> %145, i32 %123, i64 1, !dbg !45
  %147 = insertelement <4 x i32> %146, i32 %125, i64 2, !dbg !45
  %148 = insertelement <4 x i32> %147, i32 %127, i64 3, !dbg !45
  %149 = insertelement <4 x i32> poison, i32 %117, i64 0, !dbg !45
  %150 = insertelement <4 x i32> %149, i32 %124, i64 1, !dbg !45
  %151 = insertelement <4 x i32> %150, i32 %126, i64 2, !dbg !45
  %152 = insertelement <4 x i32> %151, i32 %128, i64 3, !dbg !45
  %153 = select <4 x i1> %144, <4 x i32> %148, <4 x i32> %152, !dbg !45
  %154 = bitcast <4 x i32> %153 to <4 x float>, !dbg !45
  %155 = fsub <4 x float> %154, %122, !dbg !46
  %156 = insertelement <4 x float> poison, float %142, i64 0, !dbg !47
  %157 = insertelement <4 x float> %156, float %141, i64 1, !dbg !47
  %158 = insertelement <4 x float> %157, float %140, i64 2, !dbg !47
  %159 = insertelement <4 x float> %158, float %139, i64 3, !dbg !47
  %160 = fmul <4 x float> %155, %159, !dbg !47
  %161 = fmul <4 x float> %160, %138, !dbg !48
  %162 = fadd <4 x float> %161, %133, !dbg !49
  %163 = fcmp olt <4 x float> %162, zeroinitializer, !dbg !50
  %164 = extractelement <4 x i1> %163, i64 3, !dbg !54
  %165 = extractelement <4 x i1> %163, i64 2, !dbg !54
  %166 = extractelement <4 x i1> %163, i64 1, !dbg !54
  %167 = extractelement <4 x i1> %163, i64 0, !dbg !54
  %168 = sext i32 %15 to i64, !dbg !55
  %169 = getelementptr float, ptr addrspace(1) %6, i64 %168, !dbg !55
  %170 = extractelement <4 x i32> %153, i64 0, !dbg !56
  %171 = extractelement <4 x i32> %153, i64 1, !dbg !56
  %172 = extractelement <4 x i32> %153, i64 2, !dbg !56
  %173 = extractelement <4 x i32> %153, i64 3, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %173, i32 %172, i32 %171, i32 %170, ptr addrspace(1) %169, i1 %16) #3, !dbg !56
  %174 = getelementptr float, ptr addrspace(1) %7, i64 %168, !dbg !57
  %bc = bitcast <4 x float> %162 to <4 x i32>, !dbg !58
  %175 = extractelement <4 x i32> %bc, i64 3, !dbg !58
  %176 = select i1 %164, i32 0, i32 %175, !dbg !54
  %bc19 = bitcast <4 x float> %162 to <4 x i32>, !dbg !58
  %177 = extractelement <4 x i32> %bc19, i64 2, !dbg !58
  %178 = select i1 %165, i32 0, i32 %177, !dbg !54
  %bc20 = bitcast <4 x float> %162 to <4 x i32>, !dbg !58
  %179 = extractelement <4 x i32> %bc20, i64 1, !dbg !58
  %180 = select i1 %166, i32 0, i32 %179, !dbg !54
  %bc21 = bitcast <4 x float> %162 to <4 x i32>, !dbg !58
  %181 = extractelement <4 x i32> %bc21, i64 0, !dbg !58
  %182 = select i1 %167, i32 0, i32 %181, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %176, i32 %178, i32 %180, i32 %182, ptr addrspace(1) %174, i1 %16) #3, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csazgmq3i2hpmx7sze5sgt2eftpyywob32565yrndql2d77jvvnf.py", directory: "inductor_cache/sa")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_19", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 35, scope: !7)
!29 = !DILocation(line: 37, column: 50, scope: !7)
!30 = !DILocation(line: 37, column: 45, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 62, scope: !7)
!33 = !DILocation(line: 37, column: 55, scope: !7)
!34 = !DILocation(line: 38, column: 19, scope: !7)
!35 = !DILocation(line: 41, column: 39, scope: !7)
!36 = !DILocation(line: 41, column: 58, scope: !7)
!37 = !DILocation(line: 41, column: 35, scope: !7)
!38 = !DILocation(line: 41, column: 54, scope: !7)
!39 = !DILocation(line: 41, column: 30, scope: !7)
!40 = !DILocation(line: 41, column: 70, scope: !7)
!41 = !DILocation(line: 41, column: 63, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 46, column: 27, scope: !7)
!44 = !DILocation(line: 48, column: 20, scope: !7)
!45 = !DILocation(line: 42, column: 33, scope: !7)
!46 = !DILocation(line: 43, column: 20, scope: !7)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 52, column: 20, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 55, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 56, column: 25, scope: !7)
!56 = !DILocation(line: 56, column: 37, scope: !7)
!57 = !DILocation(line: 57, column: 25, scope: !7)
!58 = !DILocation(line: 57, column: 37, scope: !7)
!59 = !DILocation(line: 57, column: 4, scope: !7)
