; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %9 = shl i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 1, !dbg !12
  %12 = and i32 %11, 3, !dbg !12
  %13 = and i32 %10, 8, !dbg !12
  %14 = lshr exact i32 %13, 1, !dbg !12
  %15 = and i32 %10, 16, !dbg !12
  %16 = lshr exact i32 %15, 1, !dbg !12
  %17 = and i32 %10, 1, !dbg !12
  %18 = shl nuw nsw i32 %17, 1, !dbg !12
  %19 = shl i32 %10, 1, !dbg !12
  %20 = and i32 %19, 14, !dbg !12
  %21 = or disjoint i32 %14, %12, !dbg !12
  %22 = or disjoint i32 %21, %16, !dbg !12
  %23 = or disjoint i32 %22, %9, !dbg !13
  %24 = or disjoint i32 %9, %20, !dbg !13
  %25 = icmp slt i32 %23, 16, !dbg !14
  %26 = icmp slt i32 %24, 16, !dbg !14
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %28 = shl i32 %27, 2, !dbg !16
  %.lobit1 = lshr exact i32 %13, 3, !dbg !17
  %29 = lshr exact i32 %15, 3, !dbg !17
  %30 = or disjoint i32 %.lobit1, %29, !dbg !17
  %31 = or disjoint i32 %28, %18, !dbg !18
  %32 = or disjoint i32 %30, %28, !dbg !18
  %33 = icmp slt i32 %31, 4, !dbg !19
  %34 = icmp slt i32 %32, 4, !dbg !19
  %.frozen = freeze i32 %24, !dbg !20
  %35 = sdiv i32 %.frozen, 4, !dbg !20
  %36 = mul i32 %35, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %36, !dbg !21
  %37 = srem i32 %23, 4, !dbg !21
  %38 = shl i32 %23, 2, !dbg !22
  %39 = add i32 %31, %38, !dbg !23
  %40 = sext i32 %39 to i64, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !24
  %42 = and i1 %25, %33, !dbg !25
  %43 = and i1 %26, %34, !dbg !25
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %42) #4, !dbg !26
  %45 = sext i32 %37 to i64, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %25) #4, !dbg !28
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %25) #4, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !29
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %25) #4, !dbg !30
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %25) #4, !dbg !30
  %52 = bitcast i32 %51 to float, !dbg !30
  %53 = shl i32 %32, 3, !dbg !31
  %54 = shl i32 %35, 5, !dbg !32
  %55 = add i32 %54, %53, !dbg !33
  %56 = add i32 %55, %.decomposed, !dbg !34
  %57 = sext i32 %56 to i64, !dbg !35
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !35
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %58, i1 %43) #4, !dbg !36
  %60 = sext i32 %.decomposed to i64, !dbg !37
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !37
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %26) #4, !dbg !38
  %63 = add nsw i32 %.decomposed, 4, !dbg !39
  %64 = add i32 %55, %63, !dbg !40
  %65 = sext i32 %64 to i64, !dbg !41
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %65, !dbg !41
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 %43) #4, !dbg !42
  %68 = zext nneg i32 %63 to i64, !dbg !43
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %68, !dbg !43
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %69, i1 %26) #4, !dbg !44
  %71 = fadd float %52, 0x3EE4F8B580000000, !dbg !45
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !46
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i4 = icmp eq i32 %74, 0, !dbg !46
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !46
  %.not1.i7 = icmp eq i32 %75, 0, !dbg !46
  br i1 %.not.i4, label %81, label %76, !dbg !46

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %79, label %77, !dbg !46

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !46
  br label %__nv_sqrtf.exit8, !dbg !46

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !46
  br label %__nv_sqrtf.exit8, !dbg !46

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %84, label %82, !dbg !46

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !46
  br label %__nv_sqrtf.exit8, !dbg !46

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !46
  br label %__nv_sqrtf.exit8, !dbg !46

__nv_sqrtf.exit8:                                 ; preds = %77, %79, %82, %84
  %.0.i6 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !46
  %86 = extractvalue { i32, i32 } %44, 1, !dbg !26
  %87 = bitcast i32 %86 to float, !dbg !26
  %88 = bitcast i32 %48 to float, !dbg !28
  %89 = fsub float %87, %88, !dbg !47
  %90 = extractvalue { i32, i32 } %44, 0, !dbg !26
  %91 = bitcast i32 %90 to float, !dbg !26
  %92 = fsub float %91, %88, !dbg !47
  %93 = extractvalue { i32, i32 } %70, 1, !dbg !44
  %94 = extractvalue { i32, i32 } %70, 0, !dbg !44
  %95 = extractvalue { i32, i32 } %67, 1, !dbg !42
  %96 = extractvalue { i32, i32 } %67, 0, !dbg !42
  %97 = extractvalue { i32, i32 } %62, 1, !dbg !38
  %98 = extractvalue { i32, i32 } %62, 0, !dbg !38
  %99 = extractvalue { i32, i32 } %59, 1, !dbg !36
  %100 = extractvalue { i32, i32 } %59, 0, !dbg !36
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !48
  %102 = fmul float %92, %101, !dbg !49
  %103 = fmul float %89, %101, !dbg !49
  %104 = shl nuw nsw i32 %17, 5, !dbg !49
  %105 = or disjoint i32 %104, %12, !dbg !49
  %106 = or disjoint i32 %105, %14, !dbg !49
  %107 = or disjoint i32 %106, %16, !dbg !49
  %108 = and i32 %19, 62, !dbg !49
  %.idx = shl nuw nsw i32 %17, 4, !dbg !49
  %109 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !49
  %110 = getelementptr inbounds float, ptr addrspace(3) %109, i32 %107, !dbg !49
  %111 = bitcast float %102 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #4, !dbg !49
  %112 = or disjoint i32 %107, 16, !dbg !49
  %113 = lshr i32 %112, 3, !dbg !49
  %114 = and i32 %113, 536870910, !dbg !49
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %114, !dbg !49
  %116 = getelementptr inbounds float, ptr addrspace(3) %115, i32 %112, !dbg !49
  %117 = bitcast float %103 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %118 = lshr i32 %19, 3, !dbg !49
  %119 = and i32 %118, 6, !dbg !49
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %119, !dbg !49
  %121 = getelementptr inbounds float, ptr addrspace(3) %120, i32 %108, !dbg !49
  %122 = load float, ptr addrspace(3) %121, align 8, !dbg !49
  %123 = getelementptr inbounds i8, ptr addrspace(3) %121, i32 4, !dbg !49
  %124 = load float, ptr addrspace(3) %123, align 4, !dbg !49
  %125 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !44
  %126 = insertelement <2 x i32> %125, i32 %98, i64 1, !dbg !44
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !44
  %128 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !42
  %129 = insertelement <2 x i32> %128, i32 %100, i64 1, !dbg !42
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !42
  %131 = fadd <2 x float> %130, %127, !dbg !50
  %132 = extractelement <2 x float> %131, i64 1, !dbg !51
  %133 = fmul float %132, %122, !dbg !51
  %134 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !44
  %135 = insertelement <2 x i32> %134, i32 %97, i64 1, !dbg !44
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !44
  %137 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !42
  %138 = insertelement <2 x i32> %137, i32 %99, i64 1, !dbg !42
  %139 = bitcast <2 x i32> %138 to <2 x float>, !dbg !42
  %140 = fadd <2 x float> %139, %136, !dbg !50
  %141 = extractelement <2 x float> %140, i64 1, !dbg !51
  %142 = fmul float %141, %124, !dbg !51
  %143 = extractelement <2 x float> %131, i64 0, !dbg !52
  %144 = fadd float %143, %133, !dbg !52
  %145 = extractelement <2 x float> %140, i64 0, !dbg !52
  %146 = fadd float %145, %142, !dbg !52
  %147 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %148 = shl i32 %10, 3, !dbg !54
  %149 = and i32 %148, 56, !dbg !54
  %150 = or disjoint i32 %149, %.lobit1, !dbg !54
  %151 = or disjoint i32 %150, %29, !dbg !54
  %152 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %149, !dbg !54
  %153 = getelementptr inbounds float, ptr addrspace(3) %152, i32 %151, !dbg !54
  %154 = bitcast float %144 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #4, !dbg !54
  %155 = or disjoint i32 %151, 4, !dbg !54
  %156 = lshr i32 %155, 2, !dbg !54
  %157 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %156, !dbg !54
  %158 = getelementptr inbounds float, ptr addrspace(3) %157, i32 %155, !dbg !54
  %159 = bitcast float %146 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %160 = lshr i32 %108, 2, !dbg !54
  %161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %160, !dbg !54
  %162 = getelementptr inbounds float, ptr addrspace(3) %161, i32 %108, !dbg !54
  %163 = load i32, ptr addrspace(3) %162, align 4, !dbg !54
  %164 = or disjoint i32 %108, 1, !dbg !54
  %165 = getelementptr inbounds float, ptr addrspace(3) %161, i32 %164, !dbg !54
  %166 = load i32, ptr addrspace(3) %165, align 4, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %163, i32 %166, ptr addrspace(1) %147, i1 %42) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxxyoflena5g24llmtslihkruomhqurp5hdsexeatubmdn6ppih5.py", directory: "inductor_cache/xx")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_0", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 50, scope: !7)
!26 = !DILocation(line: 32, column: 42, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 38, scope: !7)
!32 = !DILocation(line: 35, column: 46, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 43, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 51, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 37, column: 35, scope: !7)
!40 = !DILocation(line: 37, column: 47, scope: !7)
!41 = !DILocation(line: 37, column: 31, scope: !7)
!42 = !DILocation(line: 37, column: 55, scope: !7)
!43 = !DILocation(line: 38, column: 31, scope: !7)
!44 = !DILocation(line: 38, column: 40, scope: !7)
!45 = !DILocation(line: 41, column: 18, scope: !7)
!46 = !DILocation(line: 42, column: 26, scope: !7)
!47 = !DILocation(line: 39, column: 18, scope: !7)
!48 = !DILocation(line: 44, column: 18, scope: !7)
!49 = !DILocation(line: 47, column: 19, scope: !7)
!50 = !DILocation(line: 50, column: 20, scope: !7)
!51 = !DILocation(line: 49, column: 20, scope: !7)
!52 = !DILocation(line: 51, column: 20, scope: !7)
!53 = !DILocation(line: 52, column: 25, scope: !7)
!54 = !DILocation(line: 52, column: 44, scope: !7)
!55 = !DILocation(line: 52, column: 4, scope: !7)
