; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %14 = insertelement <4 x i32> poison, i32 %9, i64 0, !dbg !13
  %15 = shufflevector <4 x i32> %14, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !13
  %16 = or disjoint <4 x i32> %15, <i32 515, i32 514, i32 513, i32 512>, !dbg !13
  %17 = icmp slt i32 %9, 254016, !dbg !14
  %18 = icmp slt i32 %13, 254016, !dbg !14
  %19 = shufflevector <4 x i32> %16, <4 x i32> poison, <4 x i32> <i32 1, i32 3, i32 poison, i32 poison>, !dbg !15
  %20 = insertelement <4 x i32> %19, i32 %11, i64 2, !dbg !15
  %21 = insertelement <4 x i32> %20, i32 %9, i64 3, !dbg !15
  %22 = sdiv <4 x i32> %21, splat (i32 126), !dbg !15
  %23 = insertelement <4 x i32> poison, i32 %12, i64 0, !dbg !16
  %24 = insertelement <4 x i32> %23, i32 %11, i64 1, !dbg !16
  %25 = insertelement <4 x i32> %24, i32 %10, i64 2, !dbg !16
  %26 = insertelement <4 x i32> %25, i32 %9, i64 3, !dbg !16
  %27 = srem <4 x i32> %26, splat (i32 126), !dbg !16
  %28 = shufflevector <4 x i32> %22, <4 x i32> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !17
  %29 = srem <8 x i32> %28, splat (i32 126), !dbg !17
  %30 = sdiv i32 %9, 15876, !dbg !18
  %31 = sdiv i32 %13, 15876, !dbg !18
  %32 = sitofp <8 x i32> %29 to <8 x float>, !dbg !19
  %33 = fmul <8 x float> %32, splat (float 0x3F989374C0000000), !dbg !20
  %34 = fcmp ogt <8 x float> %33, zeroinitializer, !dbg !21
  %35 = select <8 x i1> %34, <8 x float> %33, <8 x float> zeroinitializer, !dbg !25
  %36 = fptosi <8 x float> %35 to <8 x i32>, !dbg !26
  %37 = extractelement <8 x i32> %36, i64 3, !dbg !27
  %38 = tail call i32 @llvm.smin.i32(i32 %37, i32 2), !dbg !28
  %narrow = add nsw i32 %38, 1, !dbg !28
  %39 = sext i32 %narrow to i64, !dbg !28
  %40 = extractelement <8 x i32> %36, i64 2, !dbg !27
  %41 = tail call i32 @llvm.smin.i32(i32 %40, i32 2), !dbg !28
  %narrow1 = add nsw i32 %41, 1, !dbg !28
  %42 = sext i32 %narrow1 to i64, !dbg !28
  %43 = extractelement <8 x i32> %36, i64 1, !dbg !27
  %44 = tail call i32 @llvm.smin.i32(i32 %43, i32 2), !dbg !28
  %narrow2 = add nsw i32 %44, 1, !dbg !28
  %45 = sext i32 %narrow2 to i64, !dbg !28
  %46 = extractelement <8 x i32> %36, i64 0, !dbg !27
  %47 = tail call i32 @llvm.smin.i32(i32 %46, i32 2), !dbg !28
  %narrow3 = add nsw i32 %47, 1, !dbg !28
  %48 = sext i32 %narrow3 to i64, !dbg !28
  %49 = sitofp <4 x i32> %27 to <4 x float>, !dbg !30
  %50 = fmul <4 x float> %49, splat (float 0x3F989374C0000000), !dbg !31
  %51 = fcmp ogt <4 x float> %50, zeroinitializer, !dbg !32
  %52 = select <4 x i1> %51, <4 x float> %50, <4 x float> zeroinitializer, !dbg !34
  %53 = fptosi <4 x float> %52 to <4 x i32>, !dbg !35
  %54 = shl nsw i64 %39, 2, !dbg !36
  %55 = shl nsw i64 %42, 2, !dbg !36
  %56 = shl nsw i64 %45, 2, !dbg !36
  %57 = shl nsw i64 %48, 2, !dbg !36
  %58 = extractelement <4 x i32> %53, i64 3, !dbg !37
  %59 = sext i32 %58 to i64, !dbg !38
  %60 = extractelement <4 x i32> %53, i64 2, !dbg !37
  %61 = sext i32 %60 to i64, !dbg !38
  %62 = extractelement <4 x i32> %53, i64 1, !dbg !37
  %63 = sext i32 %62 to i64, !dbg !38
  %64 = extractelement <4 x i32> %53, i64 0, !dbg !37
  %65 = sext i32 %64 to i64, !dbg !38
  %66 = extractelement <8 x i32> %36, i64 7, !dbg !37
  %67 = sext i32 %66 to i64, !dbg !38
  %68 = extractelement <8 x i32> %36, i64 6, !dbg !37
  %69 = sext i32 %68 to i64, !dbg !38
  %70 = extractelement <8 x i32> %36, i64 5, !dbg !37
  %71 = sext i32 %70 to i64, !dbg !38
  %72 = extractelement <8 x i32> %36, i64 4, !dbg !37
  %73 = sext i32 %72 to i64, !dbg !38
  %74 = shl nsw i32 %30, 4, !dbg !39
  %75 = shl nsw i32 %31, 4, !dbg !39
  %76 = sext i32 %74 to i64, !dbg !40
  %77 = sext i32 %75 to i64, !dbg !40
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !41
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %59, !dbg !41
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %76, !dbg !41
  %81 = getelementptr float, ptr addrspace(1) %78, i64 %61, !dbg !41
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %76, !dbg !41
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !41
  %84 = getelementptr float, ptr addrspace(1) %83, i64 %63, !dbg !41
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %76, !dbg !41
  %86 = getelementptr float, ptr addrspace(1) %83, i64 %65, !dbg !41
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %76, !dbg !41
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !41
  %89 = getelementptr float, ptr addrspace(1) %88, i64 %67, !dbg !41
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %77, !dbg !41
  %91 = getelementptr float, ptr addrspace(1) %88, i64 %69, !dbg !41
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %77, !dbg !41
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !41
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %71, !dbg !41
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %77, !dbg !41
  %96 = getelementptr float, ptr addrspace(1) %93, i64 %73, !dbg !41
  %97 = getelementptr float, ptr addrspace(1) %96, i64 %77, !dbg !41
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %17) #2, !dbg !42
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %17) #2, !dbg !42
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %17) #2, !dbg !42
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %17) #2, !dbg !42
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %18) #2, !dbg !42
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %18) #2, !dbg !42
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %18) #2, !dbg !42
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %18) #2, !dbg !42
  %106 = tail call i64 @llvm.smin.i64(i64 %59, i64 2), !dbg !43
  %107 = tail call i64 @llvm.smin.i64(i64 %61, i64 2), !dbg !43
  %108 = tail call i64 @llvm.smin.i64(i64 %63, i64 2), !dbg !43
  %109 = tail call i64 @llvm.smin.i64(i64 %65, i64 2), !dbg !43
  %110 = tail call i64 @llvm.smin.i64(i64 %67, i64 2), !dbg !43
  %111 = tail call i64 @llvm.smin.i64(i64 %69, i64 2), !dbg !43
  %112 = tail call i64 @llvm.smin.i64(i64 %71, i64 2), !dbg !43
  %113 = tail call i64 @llvm.smin.i64(i64 %73, i64 2), !dbg !43
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !45
  %115 = getelementptr i8, ptr addrspace(1) %114, i64 4, !dbg !45
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %54, !dbg !45
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %76, !dbg !45
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !45
  %119 = getelementptr i8, ptr addrspace(1) %118, i64 4, !dbg !45
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %54, !dbg !45
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %76, !dbg !45
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !45
  %123 = getelementptr i8, ptr addrspace(1) %122, i64 4, !dbg !45
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %55, !dbg !45
  %125 = getelementptr float, ptr addrspace(1) %124, i64 %76, !dbg !45
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !45
  %127 = getelementptr i8, ptr addrspace(1) %126, i64 4, !dbg !45
  %128 = getelementptr float, ptr addrspace(1) %127, i64 %55, !dbg !45
  %129 = getelementptr float, ptr addrspace(1) %128, i64 %76, !dbg !45
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !45
  %131 = getelementptr i8, ptr addrspace(1) %130, i64 4, !dbg !45
  %132 = getelementptr float, ptr addrspace(1) %131, i64 %56, !dbg !45
  %133 = getelementptr float, ptr addrspace(1) %132, i64 %77, !dbg !45
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !45
  %135 = getelementptr i8, ptr addrspace(1) %134, i64 4, !dbg !45
  %136 = getelementptr float, ptr addrspace(1) %135, i64 %56, !dbg !45
  %137 = getelementptr float, ptr addrspace(1) %136, i64 %77, !dbg !45
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !45
  %139 = getelementptr i8, ptr addrspace(1) %138, i64 4, !dbg !45
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %57, !dbg !45
  %141 = getelementptr float, ptr addrspace(1) %140, i64 %77, !dbg !45
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !45
  %143 = getelementptr i8, ptr addrspace(1) %142, i64 4, !dbg !45
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %57, !dbg !45
  %145 = getelementptr float, ptr addrspace(1) %144, i64 %77, !dbg !45
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %17) #2, !dbg !46
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %17) #2, !dbg !46
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %17) #2, !dbg !46
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %17) #2, !dbg !46
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %18) #2, !dbg !46
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %18) #2, !dbg !46
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %18) #2, !dbg !46
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %18) #2, !dbg !46
  %154 = sitofp <4 x i32> %53 to <4 x float>, !dbg !47
  %155 = fsub <4 x float> %52, %154, !dbg !48
  %156 = fcmp ogt <4 x float> %155, zeroinitializer, !dbg !49
  %157 = extractelement <4 x i1> %156, i64 3, !dbg !51
  %158 = extractelement <4 x float> %155, i64 3, !dbg !51
  %159 = select i1 %157, float %158, float 0.000000e+00, !dbg !51
  %160 = extractelement <4 x i1> %156, i64 2, !dbg !51
  %161 = extractelement <4 x float> %155, i64 2, !dbg !51
  %162 = select i1 %160, float %161, float 0.000000e+00, !dbg !51
  %163 = extractelement <4 x i1> %156, i64 1, !dbg !51
  %164 = extractelement <4 x float> %155, i64 1, !dbg !51
  %165 = select i1 %163, float %164, float 0.000000e+00, !dbg !51
  %166 = extractelement <4 x i1> %156, i64 0, !dbg !51
  %167 = extractelement <4 x float> %155, i64 0, !dbg !51
  %168 = select i1 %166, float %167, float 0.000000e+00, !dbg !51
  %169 = fcmp olt float %159, 1.000000e+00, !dbg !52
  %170 = fcmp olt float %162, 1.000000e+00, !dbg !52
  %171 = fcmp olt float %165, 1.000000e+00, !dbg !52
  %172 = fcmp olt float %168, 1.000000e+00, !dbg !52
  %173 = select i1 %169, float %159, float 1.000000e+00, !dbg !54
  %174 = select i1 %170, float %162, float 1.000000e+00, !dbg !54
  %175 = select i1 %171, float %165, float 1.000000e+00, !dbg !54
  %176 = select i1 %172, float %168, float 1.000000e+00, !dbg !54
  %177 = sitofp <8 x i32> %36 to <8 x float>, !dbg !55
  %178 = fsub <8 x float> %35, %177, !dbg !56
  %179 = fcmp ogt <8 x float> %178, zeroinitializer, !dbg !57
  %180 = select <8 x i1> %179, <8 x float> %178, <8 x float> zeroinitializer, !dbg !59
  %181 = fcmp olt <8 x float> %180, splat (float 1.000000e+00), !dbg !60
  %182 = extractelement <8 x i1> %181, i64 7, !dbg !54
  %183 = extractelement <8 x float> %180, i64 7, !dbg !54
  %184 = select i1 %182, float %183, float 1.000000e+00, !dbg !54
  %185 = extractelement <8 x i1> %181, i64 6, !dbg !54
  %186 = extractelement <8 x float> %180, i64 6, !dbg !54
  %187 = select i1 %185, float %186, float 1.000000e+00, !dbg !54
  %188 = extractelement <8 x i1> %181, i64 5, !dbg !54
  %189 = extractelement <8 x float> %180, i64 5, !dbg !54
  %190 = select i1 %188, float %189, float 1.000000e+00, !dbg !54
  %191 = extractelement <8 x i1> %181, i64 4, !dbg !54
  %192 = extractelement <8 x float> %180, i64 4, !dbg !54
  %193 = select i1 %191, float %192, float 1.000000e+00, !dbg !54
  %194 = shl i32 %37, 2, !dbg !27
  %195 = shl i32 %40, 2, !dbg !27
  %196 = shl i32 %43, 2, !dbg !27
  %197 = shl i32 %46, 2, !dbg !27
  %198 = add i32 %194, %74, !dbg !62
  %199 = add i32 %198, %58, !dbg !37
  %200 = add i32 %198, %60, !dbg !37
  %201 = add i32 %74, %195, !dbg !62
  %202 = add i32 %201, %62, !dbg !37
  %203 = add i32 %201, %64, !dbg !37
  %204 = add i32 %196, %75, !dbg !62
  %205 = add i32 %204, %66, !dbg !37
  %206 = add i32 %204, %68, !dbg !37
  %207 = add i32 %197, %75, !dbg !62
  %208 = add i32 %207, %70, !dbg !37
  %209 = add i32 %207, %72, !dbg !37
  %210 = sext i32 %199 to i64, !dbg !63
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %210, !dbg !63
  %212 = sext i32 %200 to i64, !dbg !63
  %213 = getelementptr float, ptr addrspace(1) %0, i64 %212, !dbg !63
  %214 = sext i32 %202 to i64, !dbg !63
  %215 = getelementptr float, ptr addrspace(1) %0, i64 %214, !dbg !63
  %216 = sext i32 %203 to i64, !dbg !63
  %217 = getelementptr float, ptr addrspace(1) %0, i64 %216, !dbg !63
  %218 = sext i32 %205 to i64, !dbg !63
  %219 = getelementptr float, ptr addrspace(1) %0, i64 %218, !dbg !63
  %220 = sext i32 %206 to i64, !dbg !63
  %221 = getelementptr float, ptr addrspace(1) %0, i64 %220, !dbg !63
  %222 = sext i32 %208 to i64, !dbg !63
  %223 = getelementptr float, ptr addrspace(1) %0, i64 %222, !dbg !63
  %224 = sext i32 %209 to i64, !dbg !63
  %225 = getelementptr float, ptr addrspace(1) %0, i64 %224, !dbg !63
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %211, i1 %17) #2, !dbg !64
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %213, i1 %17) #2, !dbg !64
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %215, i1 %17) #2, !dbg !64
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 %17) #2, !dbg !64
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %219, i1 %18) #2, !dbg !64
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %221, i1 %18) #2, !dbg !64
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %223, i1 %18) #2, !dbg !64
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %225, i1 %18) #2, !dbg !64
  %234 = sext i32 %194 to i64, !dbg !65
  %235 = sext i32 %195 to i64, !dbg !65
  %236 = sext i32 %196 to i64, !dbg !65
  %237 = sext i32 %197 to i64, !dbg !65
  %238 = getelementptr float, ptr addrspace(1) %115, i64 %234, !dbg !66
  %239 = getelementptr float, ptr addrspace(1) %238, i64 %76, !dbg !66
  %240 = getelementptr float, ptr addrspace(1) %119, i64 %234, !dbg !66
  %241 = getelementptr float, ptr addrspace(1) %240, i64 %76, !dbg !66
  %242 = getelementptr float, ptr addrspace(1) %123, i64 %235, !dbg !66
  %243 = getelementptr float, ptr addrspace(1) %242, i64 %76, !dbg !66
  %244 = getelementptr float, ptr addrspace(1) %127, i64 %235, !dbg !66
  %245 = getelementptr float, ptr addrspace(1) %244, i64 %76, !dbg !66
  %246 = getelementptr float, ptr addrspace(1) %131, i64 %236, !dbg !66
  %247 = getelementptr float, ptr addrspace(1) %246, i64 %77, !dbg !66
  %248 = getelementptr float, ptr addrspace(1) %135, i64 %236, !dbg !66
  %249 = getelementptr float, ptr addrspace(1) %248, i64 %77, !dbg !66
  %250 = getelementptr float, ptr addrspace(1) %139, i64 %237, !dbg !66
  %251 = getelementptr float, ptr addrspace(1) %250, i64 %77, !dbg !66
  %252 = getelementptr float, ptr addrspace(1) %143, i64 %237, !dbg !66
  %253 = getelementptr float, ptr addrspace(1) %252, i64 %77, !dbg !66
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %239, i1 %17) #2, !dbg !67
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 %17) #2, !dbg !67
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %243, i1 %17) #2, !dbg !67
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %17) #2, !dbg !67
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %247, i1 %18) #2, !dbg !67
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %249, i1 %18) #2, !dbg !67
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %251, i1 %18) #2, !dbg !67
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %253, i1 %18) #2, !dbg !67
  %262 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !42
  %263 = insertelement <2 x i32> %262, i32 %226, i64 1, !dbg !42
  %264 = bitcast <2 x i32> %263 to <2 x float>, !dbg !42
  %265 = insertelement <2 x i32> poison, i32 %146, i64 0, !dbg !46
  %266 = insertelement <2 x i32> %265, i32 %254, i64 1, !dbg !46
  %267 = bitcast <2 x i32> %266 to <2 x float>, !dbg !46
  %268 = fsub <2 x float> %267, %264, !dbg !68
  %269 = insertelement <2 x float> poison, float %173, i64 0, !dbg !69
  %270 = shufflevector <2 x float> %269, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !69
  %271 = fmul <2 x float> %268, %270, !dbg !69
  %272 = fadd <2 x float> %271, %264, !dbg !70
  %273 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !42
  %274 = insertelement <2 x i32> %273, i32 %227, i64 1, !dbg !42
  %275 = bitcast <2 x i32> %274 to <2 x float>, !dbg !42
  %276 = insertelement <2 x i32> poison, i32 %147, i64 0, !dbg !46
  %277 = insertelement <2 x i32> %276, i32 %255, i64 1, !dbg !46
  %278 = bitcast <2 x i32> %277 to <2 x float>, !dbg !46
  %279 = fsub <2 x float> %278, %275, !dbg !68
  %280 = insertelement <2 x float> poison, float %174, i64 0, !dbg !69
  %281 = shufflevector <2 x float> %280, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !69
  %282 = fmul <2 x float> %281, %279, !dbg !69
  %283 = fadd <2 x float> %282, %275, !dbg !70
  %284 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !42
  %285 = insertelement <2 x i32> %284, i32 %228, i64 1, !dbg !42
  %286 = bitcast <2 x i32> %285 to <2 x float>, !dbg !42
  %287 = insertelement <2 x i32> poison, i32 %148, i64 0, !dbg !46
  %288 = insertelement <2 x i32> %287, i32 %256, i64 1, !dbg !46
  %289 = bitcast <2 x i32> %288 to <2 x float>, !dbg !46
  %290 = fsub <2 x float> %289, %286, !dbg !68
  %291 = insertelement <2 x float> poison, float %175, i64 0, !dbg !69
  %292 = shufflevector <2 x float> %291, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !69
  %293 = fmul <2 x float> %292, %290, !dbg !69
  %294 = fadd <2 x float> %293, %286, !dbg !70
  %295 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !42
  %296 = insertelement <2 x i32> %295, i32 %229, i64 1, !dbg !42
  %297 = bitcast <2 x i32> %296 to <2 x float>, !dbg !42
  %298 = insertelement <2 x i32> poison, i32 %149, i64 0, !dbg !46
  %299 = insertelement <2 x i32> %298, i32 %257, i64 1, !dbg !46
  %300 = bitcast <2 x i32> %299 to <2 x float>, !dbg !46
  %301 = fsub <2 x float> %300, %297, !dbg !68
  %302 = insertelement <2 x float> poison, float %176, i64 0, !dbg !69
  %303 = shufflevector <2 x float> %302, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !69
  %304 = fmul <2 x float> %303, %301, !dbg !69
  %305 = fadd <2 x float> %304, %297, !dbg !70
  %306 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !42
  %307 = insertelement <2 x i32> %306, i32 %230, i64 1, !dbg !42
  %308 = bitcast <2 x i32> %307 to <2 x float>, !dbg !42
  %309 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !46
  %310 = insertelement <2 x i32> %309, i32 %258, i64 1, !dbg !46
  %311 = bitcast <2 x i32> %310 to <2 x float>, !dbg !46
  %312 = fsub <2 x float> %311, %308, !dbg !68
  %313 = insertelement <2 x float> poison, float %184, i64 0, !dbg !69
  %314 = shufflevector <2 x float> %313, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !69
  %315 = fmul <2 x float> %314, %312, !dbg !69
  %316 = fadd <2 x float> %315, %308, !dbg !70
  %317 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !42
  %318 = insertelement <2 x i32> %317, i32 %231, i64 1, !dbg !42
  %319 = bitcast <2 x i32> %318 to <2 x float>, !dbg !42
  %320 = insertelement <2 x i32> poison, i32 %151, i64 0, !dbg !46
  %321 = insertelement <2 x i32> %320, i32 %259, i64 1, !dbg !46
  %322 = bitcast <2 x i32> %321 to <2 x float>, !dbg !46
  %323 = fsub <2 x float> %322, %319, !dbg !68
  %324 = insertelement <2 x float> poison, float %187, i64 0, !dbg !69
  %325 = shufflevector <2 x float> %324, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !69
  %326 = fmul <2 x float> %325, %323, !dbg !69
  %327 = fadd <2 x float> %326, %319, !dbg !70
  %328 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !42
  %329 = insertelement <2 x i32> %328, i32 %232, i64 1, !dbg !42
  %330 = bitcast <2 x i32> %329 to <2 x float>, !dbg !42
  %331 = insertelement <2 x i32> poison, i32 %152, i64 0, !dbg !46
  %332 = insertelement <2 x i32> %331, i32 %260, i64 1, !dbg !46
  %333 = bitcast <2 x i32> %332 to <2 x float>, !dbg !46
  %334 = fsub <2 x float> %333, %330, !dbg !68
  %335 = insertelement <2 x float> poison, float %190, i64 0, !dbg !69
  %336 = shufflevector <2 x float> %335, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !69
  %337 = fmul <2 x float> %336, %334, !dbg !69
  %338 = fadd <2 x float> %337, %330, !dbg !70
  %339 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !42
  %340 = insertelement <2 x i32> %339, i32 %233, i64 1, !dbg !42
  %341 = bitcast <2 x i32> %340 to <2 x float>, !dbg !42
  %342 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !46
  %343 = insertelement <2 x i32> %342, i32 %261, i64 1, !dbg !46
  %344 = bitcast <2 x i32> %343 to <2 x float>, !dbg !46
  %345 = fsub <2 x float> %344, %341, !dbg !68
  %346 = insertelement <2 x float> poison, float %193, i64 0, !dbg !69
  %347 = shufflevector <2 x float> %346, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !69
  %348 = fmul <2 x float> %347, %345, !dbg !69
  %349 = fadd <2 x float> %348, %341, !dbg !70
  %350 = extractelement <2 x float> %272, i64 0, !dbg !71
  %351 = extractelement <2 x float> %272, i64 1, !dbg !72
  %352 = fsub float %350, %351, !dbg !71
  %353 = extractelement <2 x float> %283, i64 0, !dbg !71
  %354 = extractelement <2 x float> %283, i64 1, !dbg !72
  %355 = fsub float %353, %354, !dbg !71
  %356 = extractelement <2 x float> %294, i64 0, !dbg !71
  %357 = extractelement <2 x float> %294, i64 1, !dbg !72
  %358 = fsub float %356, %357, !dbg !71
  %359 = extractelement <2 x float> %305, i64 0, !dbg !71
  %360 = extractelement <2 x float> %305, i64 1, !dbg !72
  %361 = fsub float %359, %360, !dbg !71
  %362 = extractelement <2 x float> %316, i64 0, !dbg !71
  %363 = extractelement <2 x float> %316, i64 1, !dbg !72
  %364 = fsub float %362, %363, !dbg !71
  %365 = extractelement <2 x float> %327, i64 0, !dbg !71
  %366 = extractelement <2 x float> %327, i64 1, !dbg !72
  %367 = fsub float %365, %366, !dbg !71
  %368 = extractelement <2 x float> %338, i64 0, !dbg !71
  %369 = extractelement <2 x float> %338, i64 1, !dbg !72
  %370 = fsub float %368, %369, !dbg !71
  %371 = extractelement <2 x float> %349, i64 0, !dbg !71
  %372 = extractelement <2 x float> %349, i64 1, !dbg !72
  %373 = fsub float %371, %372, !dbg !71
  %374 = extractelement <8 x i1> %181, i64 3, !dbg !73
  %375 = extractelement <8 x float> %180, i64 3, !dbg !73
  %376 = select i1 %374, float %375, float 1.000000e+00, !dbg !73
  %377 = extractelement <8 x i1> %181, i64 2, !dbg !73
  %378 = extractelement <8 x float> %180, i64 2, !dbg !73
  %379 = select i1 %377, float %378, float 1.000000e+00, !dbg !73
  %380 = extractelement <8 x i1> %181, i64 1, !dbg !73
  %381 = extractelement <8 x float> %180, i64 1, !dbg !73
  %382 = select i1 %380, float %381, float 1.000000e+00, !dbg !73
  %383 = extractelement <8 x i1> %181, i64 0, !dbg !73
  %384 = extractelement <8 x float> %180, i64 0, !dbg !73
  %385 = select i1 %383, float %384, float 1.000000e+00, !dbg !73
  %386 = fmul float %376, %352, !dbg !74
  %387 = fmul float %376, %355, !dbg !74
  %388 = fmul float %379, %358, !dbg !74
  %389 = fmul float %379, %361, !dbg !74
  %390 = fmul float %382, %364, !dbg !74
  %391 = fmul float %382, %367, !dbg !74
  %392 = fmul float %385, %370, !dbg !74
  %393 = fmul float %385, %373, !dbg !74
  %394 = fadd float %351, %386, !dbg !72
  %395 = fadd float %354, %387, !dbg !72
  %396 = fadd float %357, %388, !dbg !72
  %397 = fadd float %360, %389, !dbg !72
  %398 = fadd float %363, %390, !dbg !72
  %399 = fadd float %366, %391, !dbg !72
  %400 = fadd float %369, %392, !dbg !72
  %401 = fadd float %372, %393, !dbg !72
  %402 = sext i32 %9 to i64, !dbg !75
  %403 = getelementptr float, ptr addrspace(1) %1, i64 %402, !dbg !75
  %404 = sext i32 %13 to i64, !dbg !75
  %405 = getelementptr float, ptr addrspace(1) %1, i64 %404, !dbg !75
  %406 = bitcast float %394 to i32, !dbg !76
  %407 = bitcast float %395 to i32, !dbg !76
  %408 = bitcast float %396 to i32, !dbg !76
  %409 = bitcast float %397 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %406, i32 %407, i32 %408, i32 %409, ptr addrspace(1) %403, i1 %17) #2, !dbg !76
  %410 = bitcast float %398 to i32, !dbg !76
  %411 = bitcast float %399 to i32, !dbg !76
  %412 = bitcast float %400 to i32, !dbg !76
  %413 = bitcast float %401 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %410, i32 %411, i32 %412, i32 %413, ptr addrspace(1) %405, i1 %18) #2, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ch6u7ggmfki6iusqwe7hvxbnooqjsnrwytiqwqhnn55djsqsqyvy.py", directory: "inductor_cache/h6")
!4 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0", linkageName: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 24, column: 28, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 18, scope: !7)
!21 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 34, column: 40, scope: !7)
!25 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 35, column: 19, scope: !7)
!27 = !DILocation(line: 57, column: 41, scope: !7)
!28 = !DILocation(line: 113, column: 29, scope: !22, inlinedAt: !29)
!29 = !DILocation(line: 39, column: 41, scope: !7)
!30 = !DILocation(line: 41, column: 21, scope: !7)
!31 = !DILocation(line: 42, column: 20, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !33)
!33 = !DILocation(line: 43, column: 42, scope: !7)
!34 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !33)
!35 = !DILocation(line: 44, column: 21, scope: !7)
!36 = !DILocation(line: 45, column: 41, scope: !7)
!37 = !DILocation(line: 57, column: 48, scope: !7)
!38 = !DILocation(line: 45, column: 39, scope: !7)
!39 = !DILocation(line: 45, column: 52, scope: !7)
!40 = !DILocation(line: 45, column: 49, scope: !7)
!41 = !DILocation(line: 45, column: 31, scope: !7)
!42 = !DILocation(line: 45, column: 57, scope: !7)
!43 = !DILocation(line: 113, column: 29, scope: !22, inlinedAt: !44)
!44 = !DILocation(line: 47, column: 42, scope: !7)
!45 = !DILocation(line: 48, column: 31, scope: !7)
!46 = !DILocation(line: 48, column: 57, scope: !7)
!47 = !DILocation(line: 50, column: 21, scope: !7)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !50)
!50 = !DILocation(line: 52, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !50)
!52 = !DILocation(line: 110, column: 15, scope: !22, inlinedAt: !53)
!53 = !DILocation(line: 54, column: 42, scope: !7)
!54 = !DILocation(line: 113, column: 29, scope: !22, inlinedAt: !53)
!55 = !DILocation(line: 63, column: 20, scope: !7)
!56 = !DILocation(line: 64, column: 19, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !58)
!58 = !DILocation(line: 65, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !58)
!60 = !DILocation(line: 110, column: 15, scope: !22, inlinedAt: !61)
!61 = !DILocation(line: 66, column: 42, scope: !7)
!62 = !DILocation(line: 57, column: 39, scope: !7)
!63 = !DILocation(line: 57, column: 31, scope: !7)
!64 = !DILocation(line: 57, column: 56, scope: !7)
!65 = !DILocation(line: 58, column: 39, scope: !7)
!66 = !DILocation(line: 58, column: 31, scope: !7)
!67 = !DILocation(line: 58, column: 56, scope: !7)
!68 = !DILocation(line: 49, column: 20, scope: !7)
!69 = !DILocation(line: 55, column: 20, scope: !7)
!70 = !DILocation(line: 56, column: 20, scope: !7)
!71 = !DILocation(line: 62, column: 20, scope: !7)
!72 = !DILocation(line: 68, column: 20, scope: !7)
!73 = !DILocation(line: 113, column: 29, scope: !22, inlinedAt: !61)
!74 = !DILocation(line: 67, column: 20, scope: !7)
!75 = !DILocation(line: 69, column: 25, scope: !7)
!76 = !DILocation(line: 69, column: 37, scope: !7)
!77 = !DILocation(line: 69, column: 4, scope: !7)
