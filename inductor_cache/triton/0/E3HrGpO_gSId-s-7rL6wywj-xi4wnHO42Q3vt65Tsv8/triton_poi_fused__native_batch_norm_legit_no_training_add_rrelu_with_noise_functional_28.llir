; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = icmp slt i32 %10, 64, !dbg !11
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %13 = shl i32 %12, 9, !dbg !13
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %15 = shl i32 %14, 2, !dbg !14
  %16 = and i32 %15, 508, !dbg !14
  %17 = or disjoint i32 %16, 1, !dbg !14
  %18 = or disjoint i32 %16, 2, !dbg !14
  %19 = or disjoint i32 %16, 3, !dbg !14
  %20 = or disjoint i32 %13, %16, !dbg !15
  %21 = or disjoint i32 %13, %17, !dbg !15
  %22 = or disjoint i32 %13, %18, !dbg !15
  %23 = or disjoint i32 %13, %19, !dbg !15
  %24 = icmp slt i32 %20, 1024, !dbg !16
  %.frozen = freeze i32 %10, !dbg !17
  %25 = sdiv i32 %.frozen, 16, !dbg !17
  %26 = mul i32 %25, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %26, !dbg !18
  %27 = shl i32 %10, 10, !dbg !19
  %28 = add i32 %20, %27, !dbg !20
  %29 = sext i32 %28 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = and i1 %11, %24, !dbg !22
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %31) #4, !dbg !23
  %33 = shl i32 %20, 4, !dbg !24
  %34 = shl i32 %21, 4, !dbg !24
  %35 = shl i32 %22, 4, !dbg !24
  %36 = shl i32 %23, 4, !dbg !24
  %37 = shl i32 %25, 14, !dbg !25
  %38 = add i32 %37, %.decomposed, !dbg !26
  %39 = add i32 %38, %33, !dbg !27
  %40 = add i32 %38, %34, !dbg !27
  %41 = add i32 %38, %35, !dbg !27
  %42 = add i32 %38, %36, !dbg !27
  %43 = sext i32 %39 to i64, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !28
  %45 = sext i32 %40 to i64, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !28
  %47 = sext i32 %41 to i64, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !28
  %49 = sext i32 %42 to i64, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !28
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %31) #4, !dbg !29
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %31) #4, !dbg !29
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %31) #4, !dbg !29
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %31) #4, !dbg !29
  %55 = sext i32 %.decomposed to i64, !dbg !30
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !30
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %11) #4, !dbg !31
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %11) #4, !dbg !31
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %11) #4, !dbg !31
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %11) #4, !dbg !31
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !32
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %11) #4, !dbg !33
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %11) #4, !dbg !33
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %11) #4, !dbg !33
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %11) #4, !dbg !33
  %66 = bitcast i32 %65 to float, !dbg !33
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !34
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %11) #4, !dbg !35
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %11) #4, !dbg !35
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %11) #4, !dbg !35
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %11) #4, !dbg !35
  %72 = getelementptr float, ptr addrspace(1) %5, i64 %55, !dbg !36
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %11) #4, !dbg !37
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %11) #4, !dbg !37
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %11) #4, !dbg !37
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %11) #4, !dbg !37
  %77 = fadd float %66, 0x3EE4F8B580000000, !dbg !38
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i11 = icmp eq i32 %84, 0, !dbg !39
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i14 = icmp eq i32 %85, 0, !dbg !39
  br i1 %.not.i11, label %91, label %86, !dbg !39

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %89, label %87, !dbg !39

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #4, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #4, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %94, label %92, !dbg !39

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #4, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #4, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

__nv_sqrtf.exit15:                                ; preds = %87, %89, %92, %94
  %.0.i13 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !39
  %96 = insertelement <4 x i32> poison, i32 %54, i64 0, !dbg !29
  %97 = insertelement <4 x i32> %96, i32 %53, i64 1, !dbg !29
  %98 = insertelement <4 x i32> %97, i32 %52, i64 2, !dbg !29
  %99 = insertelement <4 x i32> %98, i32 %51, i64 3, !dbg !29
  %100 = bitcast <4 x i32> %99 to <4 x float>, !dbg !29
  %101 = and i32 %14, 127, !dbg !14
  %102 = or disjoint i32 %101, 384, !dbg !14
  %103 = or disjoint i32 %13, %102, !dbg !15
  %104 = shl i32 %103, 4, !dbg !24
  %105 = add i32 %38, %104, !dbg !27
  %106 = or disjoint i32 %101, 256, !dbg !14
  %107 = or disjoint i32 %13, %106, !dbg !15
  %108 = shl i32 %107, 4, !dbg !24
  %109 = add i32 %38, %108, !dbg !27
  %110 = or disjoint i32 %101, 128, !dbg !14
  %111 = or disjoint i32 %13, %110, !dbg !15
  %112 = shl i32 %111, 4, !dbg !24
  %113 = add i32 %38, %112, !dbg !27
  %114 = or disjoint i32 %13, %101, !dbg !15
  %115 = shl i32 %114, 4, !dbg !24
  %116 = add i32 %38, %115, !dbg !27
  %117 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !23
  %118 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !23
  %119 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !23
  %120 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !23
  %121 = icmp slt i32 %103, 1024, !dbg !16
  %122 = and i1 %11, %121, !dbg !22
  %123 = icmp slt i32 %107, 1024, !dbg !16
  %124 = and i1 %11, %123, !dbg !22
  %125 = icmp slt i32 %111, 1024, !dbg !16
  %126 = and i1 %11, %125, !dbg !22
  %127 = icmp slt i32 %114, 1024, !dbg !16
  %128 = and i1 %11, %127, !dbg !22
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !40
  %130 = insertelement <4 x i32> poison, i32 %60, i64 0, !dbg !41
  %131 = bitcast <4 x i32> %130 to <4 x float>, !dbg !41
  %132 = shufflevector <4 x float> %131, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !41
  %133 = fsub <4 x float> %100, %132, !dbg !41
  %134 = insertelement <4 x i32> poison, i32 %117, i64 0, !dbg !23
  %135 = insertelement <4 x i32> %134, i32 %118, i64 1, !dbg !23
  %136 = insertelement <4 x i32> %135, i32 %119, i64 2, !dbg !23
  %137 = insertelement <4 x i32> %136, i32 %120, i64 3, !dbg !23
  %138 = bitcast <4 x i32> %137 to <4 x float>, !dbg !23
  %139 = insertelement <4 x float> poison, float %129, i64 0, !dbg !42
  %140 = shufflevector <4 x float> %139, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !42
  %141 = fmul <4 x float> %133, %140, !dbg !42
  %142 = insertelement <4 x i32> poison, i32 %71, i64 0, !dbg !43
  %143 = bitcast <4 x i32> %142 to <4 x float>, !dbg !43
  %144 = shufflevector <4 x float> %143, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !43
  %145 = fmul <4 x float> %141, %144, !dbg !43
  %146 = insertelement <4 x i32> poison, i32 %76, i64 0, !dbg !44
  %147 = bitcast <4 x i32> %146 to <4 x float>, !dbg !44
  %148 = shufflevector <4 x float> %147, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !44
  %149 = fadd <4 x float> %145, %148, !dbg !44
  %150 = fadd <4 x float> %149, %138, !dbg !45
  %151 = fcmp ogt <4 x float> %150, zeroinitializer, !dbg !46
  %152 = extractelement <4 x float> %150, i64 3, !dbg !47
  %153 = fmul float %152, 0x3FCD555560000000, !dbg !48
  %154 = extractelement <4 x float> %150, i64 2, !dbg !47
  %155 = fmul float %154, 0x3FCD555560000000, !dbg !48
  %156 = extractelement <4 x float> %150, i64 1, !dbg !47
  %157 = fmul float %156, 0x3FCD555560000000, !dbg !48
  %158 = extractelement <4 x float> %150, i64 0, !dbg !47
  %159 = fmul float %158, 0x3FCD555560000000, !dbg !48
  %160 = extractelement <4 x i1> %151, i64 3, !dbg !49
  %161 = select i1 %160, float %152, float %153, !dbg !47
  %162 = extractelement <4 x i1> %151, i64 2, !dbg !49
  %163 = select i1 %162, float %154, float %155, !dbg !47
  %164 = extractelement <4 x i1> %151, i64 1, !dbg !49
  %165 = select i1 %164, float %156, float %157, !dbg !47
  %166 = extractelement <4 x i1> %151, i64 0, !dbg !49
  %167 = select i1 %166, float %158, float %159, !dbg !47
  %168 = sext i32 %116 to i64, !dbg !50
  %169 = getelementptr i1, ptr addrspace(1) %6, i64 %168, !dbg !50
  %170 = sext i32 %113 to i64, !dbg !50
  %171 = getelementptr i1, ptr addrspace(1) %6, i64 %170, !dbg !50
  %172 = sext i32 %109 to i64, !dbg !50
  %173 = getelementptr i1, ptr addrspace(1) %6, i64 %172, !dbg !50
  %174 = sext i32 %105 to i64, !dbg !50
  %175 = getelementptr i1, ptr addrspace(1) %6, i64 %174, !dbg !50
  %176 = zext i1 %160 to i8, !dbg !49
  %177 = zext i1 %162 to i8, !dbg !49
  %178 = zext i1 %164 to i8, !dbg !49
  %179 = zext i1 %166 to i8, !dbg !49
  %180 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %16, !dbg !49
  %181 = insertelement <1 x i8> poison, i8 %176, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %180, <1 x i8> %181, i1 true) #4, !dbg !49
  %182 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %17, !dbg !49
  %183 = insertelement <1 x i8> poison, i8 %177, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %182, <1 x i8> %183, i1 true) #4, !dbg !49
  %184 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %18, !dbg !49
  %185 = insertelement <1 x i8> poison, i8 %178, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %184, <1 x i8> %185, i1 true) #4, !dbg !49
  %186 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %19, !dbg !49
  %187 = insertelement <1 x i8> poison, i8 %179, i64 0, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %186, <1 x i8> %187, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %188 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %101, !dbg !49
  %189 = load i8, ptr addrspace(3) %188, align 1, !dbg !49
  %190 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %110, !dbg !49
  %191 = load i8, ptr addrspace(3) %190, align 1, !dbg !49
  %192 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %106, !dbg !49
  %193 = load i8, ptr addrspace(3) %192, align 1, !dbg !49
  %194 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %102, !dbg !49
  %195 = load i8, ptr addrspace(3) %194, align 1, !dbg !49
  %196 = and i8 %189, 1, !dbg !49
  %197 = and i8 %191, 1, !dbg !49
  %198 = and i8 %193, 1, !dbg !49
  %199 = and i8 %195, 1, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %196, ptr addrspace(1) %169, i1 %128) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %197, ptr addrspace(1) %171, i1 %126) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %198, ptr addrspace(1) %173, i1 %124) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %199, ptr addrspace(1) %175, i1 %122) #4, !dbg !49
  %200 = getelementptr float, ptr addrspace(1) %7, i64 %168, !dbg !51
  %201 = getelementptr float, ptr addrspace(1) %7, i64 %170, !dbg !51
  %202 = getelementptr float, ptr addrspace(1) %7, i64 %172, !dbg !51
  %203 = getelementptr float, ptr addrspace(1) %7, i64 %174, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !52
  %205 = bitcast float %161 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %205, i1 true) #4, !dbg !52
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !52
  %207 = bitcast float %163 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %207, i1 true) #4, !dbg !52
  %208 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !52
  %209 = bitcast float %165 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %209, i1 true) #4, !dbg !52
  %210 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !52
  %211 = bitcast float %167 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %101, !dbg !52
  %213 = load i32, ptr addrspace(3) %212, align 4, !dbg !52
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %110, !dbg !52
  %215 = load i32, ptr addrspace(3) %214, align 4, !dbg !52
  %216 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %106, !dbg !52
  %217 = load i32, ptr addrspace(3) %216, align 4, !dbg !52
  %218 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %102, !dbg !52
  %219 = load i32, ptr addrspace(3) %218, align 4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %213, ptr addrspace(1) %200, i1 %128) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %215, ptr addrspace(1) %201, i1 %126) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %217, ptr addrspace(1) %202, i1 %124) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %219, ptr addrspace(1) %203, i1 %122) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfzqgjunbhmfgdemy2glwwzqcvvwx2zhzpz67cd5cd3cig4h2vci.py", directory: "inductor_cache/fz")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_28", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 53, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 33, column: 38, scope: !7)
!25 = !DILocation(line: 33, column: 49, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 43, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 54, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 35, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 41, column: 26, scope: !7)
!40 = !DILocation(line: 43, column: 18, scope: !7)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 46, column: 19, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 20, scope: !7)
!45 = !DILocation(line: 49, column: 19, scope: !7)
!46 = !DILocation(line: 51, column: 20, scope: !7)
!47 = !DILocation(line: 54, column: 35, scope: !7)
!48 = !DILocation(line: 53, column: 20, scope: !7)
!49 = !DILocation(line: 55, column: 56, scope: !7)
!50 = !DILocation(line: 55, column: 25, scope: !7)
!51 = !DILocation(line: 56, column: 25, scope: !7)
!52 = !DILocation(line: 56, column: 56, scope: !7)
!53 = !DILocation(line: 56, column: 4, scope: !7)
