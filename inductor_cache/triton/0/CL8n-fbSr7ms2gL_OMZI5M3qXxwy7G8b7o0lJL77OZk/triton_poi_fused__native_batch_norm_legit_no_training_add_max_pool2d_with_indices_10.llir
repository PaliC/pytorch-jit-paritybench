; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 9, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 510, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = srem i32 %20, 48, !dbg !14
  %22 = sext i32 %20 to i64, !dbg !15
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !15
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !16
  %25 = sext i32 %21 to i64, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !17
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !19
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !20
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !20
  %32 = bitcast i32 %30 to float, !dbg !20
  %33 = bitcast i32 %31 to float, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !21
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !23
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !25
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !27
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !29
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !30
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !30
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !30
  %46 = bitcast i32 %44 to float, !dbg !30
  %47 = bitcast i32 %45 to float, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %8, i64 %25, !dbg !31
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !32
  %50 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !33
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !34
  %52 = fadd float %32, 0x3EE4F8B580000000, !dbg !35
  %53 = fadd float %33, 0x3EE4F8B580000000, !dbg !35
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %54, 0, !dbg !36
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %55, 0, !dbg !36
  br i1 %.not.i, label %61, label %56, !dbg !36

56:                                               ; preds = %14
  br i1 %.not1.i, label %59, label %57, !dbg !36

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

61:                                               ; preds = %14
  br i1 %.not1.i, label %64, label %62, !dbg !36

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %57, %59, %62, %64
  %.0.i = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !36
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %66, 0, !dbg !36
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %67, 0, !dbg !36
  br i1 %.not.i1, label %73, label %68, !dbg !36

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %71, label %69, !dbg !36

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %76, label %74, !dbg !36

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %69, %71, %74, %76
  %.0.i3 = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !36
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %80 = fadd float %46, 0x3EE4F8B580000000, !dbg !38
  %81 = fadd float %47, 0x3EE4F8B580000000, !dbg !38
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i6 = icmp eq i32 %82, 0, !dbg !39
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i9 = icmp eq i32 %83, 0, !dbg !39
  br i1 %.not.i6, label %89, label %84, !dbg !39

84:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %87, label %85, !dbg !39

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

89:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %92, label %90, !dbg !39

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

__nv_sqrtf.exit10:                                ; preds = %85, %87, %90, %92
  %.0.i8 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !39
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i11 = icmp eq i32 %94, 0, !dbg !39
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i14 = icmp eq i32 %95, 0, !dbg !39
  br i1 %.not.i11, label %101, label %96, !dbg !39

96:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %99, label %97, !dbg !39

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

101:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %104, label %102, !dbg !39

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

__nv_sqrtf.exit15:                                ; preds = %97, %99, %102, %104
  %.0.i13 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !39
  %106 = extractvalue { i32, i32 } %24, 1, !dbg !16
  %107 = bitcast i32 %106 to float, !dbg !16
  %108 = extractvalue { i32, i32 } %27, 1, !dbg !18
  %109 = bitcast i32 %108 to float, !dbg !18
  %110 = fsub float %107, %109, !dbg !40
  %111 = fmul float %110, %79, !dbg !41
  %112 = extractvalue { i32, i32 } %35, 1, !dbg !22
  %113 = bitcast i32 %112 to float, !dbg !22
  %114 = fmul float %111, %113, !dbg !42
  %115 = extractvalue { i32, i32 } %37, 1, !dbg !24
  %116 = bitcast i32 %115 to float, !dbg !24
  %117 = fadd float %114, %116, !dbg !43
  %118 = extractvalue { i32, i32 } %39, 1, !dbg !26
  %119 = bitcast i32 %118 to float, !dbg !26
  %120 = fadd float %117, %119, !dbg !44
  %121 = extractvalue { i32, i32 } %41, 1, !dbg !28
  %122 = bitcast i32 %121 to float, !dbg !28
  %123 = fsub float %120, %122, !dbg !45
  %124 = extractvalue { i32, i32 } %24, 0, !dbg !16
  %125 = bitcast i32 %124 to float, !dbg !16
  %126 = extractvalue { i32, i32 } %27, 0, !dbg !18
  %127 = bitcast i32 %126 to float, !dbg !18
  %128 = fsub float %125, %127, !dbg !40
  %129 = fmul float %128, %78, !dbg !41
  %130 = extractvalue { i32, i32 } %35, 0, !dbg !22
  %131 = bitcast i32 %130 to float, !dbg !22
  %132 = fmul float %129, %131, !dbg !42
  %133 = extractvalue { i32, i32 } %37, 0, !dbg !24
  %134 = bitcast i32 %133 to float, !dbg !24
  %135 = fadd float %132, %134, !dbg !43
  %136 = extractvalue { i32, i32 } %39, 0, !dbg !26
  %137 = bitcast i32 %136 to float, !dbg !26
  %138 = fadd float %135, %137, !dbg !44
  %139 = extractvalue { i32, i32 } %41, 0, !dbg !28
  %140 = bitcast i32 %139 to float, !dbg !28
  %141 = fsub float %138, %140, !dbg !45
  %142 = extractvalue { i32, i32 } %51, 1, !dbg !34
  %143 = bitcast i32 %142 to float, !dbg !34
  %144 = extractvalue { i32, i32 } %51, 0, !dbg !34
  %145 = bitcast i32 %144 to float, !dbg !34
  %146 = extractvalue { i32, i32 } %49, 1, !dbg !32
  %147 = bitcast i32 %146 to float, !dbg !32
  %148 = extractvalue { i32, i32 } %49, 0, !dbg !32
  %149 = bitcast i32 %148 to float, !dbg !32
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !46
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !46
  %152 = fmul float %141, %150, !dbg !47
  %153 = fmul float %123, %151, !dbg !47
  %154 = fmul float %152, %149, !dbg !48
  %155 = fmul float %153, %147, !dbg !48
  %156 = fadd float %154, %145, !dbg !49
  %157 = fadd float %155, %143, !dbg !49
  %158 = getelementptr float, ptr addrspace(1) %10, i64 %22, !dbg !50
  %159 = bitcast float %138 to i32, !dbg !51
  %160 = bitcast float %120 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %158, i1 true) #3, !dbg !51
  %161 = getelementptr i8, ptr addrspace(1) %11, i64 %22, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 0, ptr addrspace(1) %161, i1 true) #3, !dbg !53
  %162 = getelementptr float, ptr addrspace(1) %12, i64 %22, !dbg !54
  %163 = bitcast float %156 to i32, !dbg !55
  %164 = bitcast float %157 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %163, i32 %164, ptr addrspace(1) %162, i1 true) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cayu6guz4cmafwmefzuxfs5igjx5zjajf42aq6ouln4nvd34f7zo.py", directory: "inductor_cache/ay")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_10, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 26, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 50, column: 20, scope: !7)
!39 = !DILocation(line: 51, column: 27, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 44, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 46, column: 20, scope: !7)
!44 = !DILocation(line: 47, column: 20, scope: !7)
!45 = !DILocation(line: 49, column: 20, scope: !7)
!46 = !DILocation(line: 52, column: 19, scope: !7)
!47 = !DILocation(line: 54, column: 20, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 25, scope: !7)
!51 = !DILocation(line: 57, column: 37, scope: !7)
!52 = !DILocation(line: 58, column: 25, scope: !7)
!53 = !DILocation(line: 58, column: 37, scope: !7)
!54 = !DILocation(line: 59, column: 25, scope: !7)
!55 = !DILocation(line: 59, column: 37, scope: !7)
!56 = !DILocation(line: 59, column: 4, scope: !7)
