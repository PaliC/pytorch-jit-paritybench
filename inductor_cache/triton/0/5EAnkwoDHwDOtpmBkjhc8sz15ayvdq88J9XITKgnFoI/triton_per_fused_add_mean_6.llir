; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_mean_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = and i32 %9, 31, !dbg !11
  %11 = lshr i32 %9, 5, !dbg !11
  %12 = and i32 %9, 63, !dbg !11
  %13 = shl i32 %8, 6, !dbg !12
  %14 = or disjoint i32 %13, %12, !dbg !13
  %15 = sext i32 %14 to i64, !dbg !14
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !14
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 true) #3, !dbg !15
  %18 = bitcast i32 %17 to float, !dbg !15
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !16
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #3, !dbg !17
  %21 = bitcast i32 %20 to float, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %24 = bitcast i32 %23 to float, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %15, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !21
  %27 = bitcast i32 %26 to float, !dbg !21
  %28 = fadd float %18, 0.000000e+00, !dbg !22
  %29 = fadd float %28, %21, !dbg !23
  %30 = fadd float %29, %24, !dbg !24
  %31 = fadd float %30, %27, !dbg !25
  %32 = bitcast float %31 to i32, !dbg !26
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 16, i32 31), !dbg !26
  %34 = bitcast i32 %33 to float, !dbg !26
  %35 = fadd float %31, %34, !dbg !30
  %36 = bitcast float %35 to i32, !dbg !26
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 8, i32 31), !dbg !26
  %38 = bitcast i32 %37 to float, !dbg !26
  %39 = fadd float %35, %38, !dbg !30
  %40 = bitcast float %39 to i32, !dbg !26
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 4, i32 31), !dbg !26
  %42 = bitcast i32 %41 to float, !dbg !26
  %43 = fadd float %39, %42, !dbg !30
  %44 = bitcast float %43 to i32, !dbg !26
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 2, i32 31), !dbg !26
  %46 = bitcast i32 %45 to float, !dbg !26
  %47 = fadd float %43, %46, !dbg !30
  %48 = bitcast float %47 to i32, !dbg !26
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 1, i32 31), !dbg !26
  %50 = bitcast i32 %49 to float, !dbg !26
  %51 = fadd float %47, %50, !dbg !30
  %52 = icmp eq i32 %10, 0, !dbg !26
  %53 = and i32 %11, 1, !dbg !26
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i32 %53, !dbg !26
  %55 = bitcast float %51 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %55, i1 %52) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %56 = icmp slt i32 %9, 2, !dbg !26
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !26
  %58 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %57, i1 %56) #3, !dbg !26
  %59 = bitcast i32 %58 to float, !dbg !26
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !26
  %61 = bitcast i32 %60 to float, !dbg !26
  %62 = fadd float %59, %61, !dbg !30
  %63 = and i32 %9, 1, !dbg !26
  %64 = icmp eq i32 %63, 0, !dbg !26
  %65 = and i1 %56, %64, !dbg !26
  %66 = bitcast float %62 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %66, i1 %65) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %67 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !26
  %68 = sext i32 %8 to i64, !dbg !32
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %68, !dbg !32
  %70 = icmp eq i32 %12, 0, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %67, ptr addrspace(1) %69, i1 %70) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c37qj7dmeimpnleur3hhuqlmk5reqyfbchgdzei3c7gzlojatxyh.py", directory: "inductor_cache/37")
!4 = !{ptr @triton_per_fused_add_mean_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_6, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_6", linkageName: "triton_per_fused_add_mean_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 26, column: 34, scope: !7)
!12 = !DILocation(line: 31, column: 38, scope: !7)
!13 = !DILocation(line: 31, column: 35, scope: !7)
!14 = !DILocation(line: 31, column: 30, scope: !7)
!15 = !DILocation(line: 31, column: 43, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 43, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 43, scope: !7)
!22 = !DILocation(line: 36, column: 18, scope: !7)
!23 = !DILocation(line: 37, column: 18, scope: !7)
!24 = !DILocation(line: 38, column: 18, scope: !7)
!25 = !DILocation(line: 39, column: 18, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 41, column: 25, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 42, column: 25, scope: !7)
!33 = !DILocation(line: 42, column: 37, scope: !7)
!34 = !DILocation(line: 42, column: 4, scope: !7)
