; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 6, !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = or disjoint i32 %10, 4, !dbg !12
  %12 = or disjoint i32 %10, 8, !dbg !12
  %13 = or disjoint i32 %10, 12, !dbg !12
  %14 = or disjoint i32 %10, 16, !dbg !12
  %15 = or disjoint i32 %10, 20, !dbg !12
  %16 = or disjoint i32 %10, 24, !dbg !12
  %17 = or disjoint i32 %10, 28, !dbg !12
  %18 = or disjoint i32 %10, 32, !dbg !12
  %19 = or disjoint i32 %10, 36, !dbg !12
  %20 = or disjoint i32 %10, 40, !dbg !12
  %21 = or disjoint i32 %10, 44, !dbg !12
  %22 = or disjoint i32 %10, 48, !dbg !12
  %23 = or disjoint i32 %10, 52, !dbg !12
  %24 = or disjoint i32 %10, 56, !dbg !12
  %25 = or disjoint i32 %10, 60, !dbg !12
  %26 = and i32 %8, 63, !dbg !12
  %27 = or disjoint i32 %7, %10, !dbg !13
  %28 = or disjoint i32 %7, %11, !dbg !13
  %29 = or disjoint i32 %7, %12, !dbg !13
  %30 = or disjoint i32 %7, %13, !dbg !13
  %31 = or disjoint i32 %7, %14, !dbg !13
  %32 = or disjoint i32 %7, %15, !dbg !13
  %33 = or disjoint i32 %7, %16, !dbg !13
  %34 = or disjoint i32 %7, %17, !dbg !13
  %35 = or disjoint i32 %7, %18, !dbg !13
  %36 = or disjoint i32 %7, %19, !dbg !13
  %37 = or disjoint i32 %7, %20, !dbg !13
  %38 = or disjoint i32 %7, %21, !dbg !13
  %39 = or disjoint i32 %7, %22, !dbg !13
  %40 = or disjoint i32 %7, %23, !dbg !13
  %41 = or disjoint i32 %7, %24, !dbg !13
  %42 = or disjoint i32 %7, %25, !dbg !13
  %43 = or disjoint i32 %7, %26, !dbg !13
  %44 = icmp slt i32 %27, 49, !dbg !14
  %45 = icmp slt i32 %28, 49, !dbg !14
  %46 = icmp slt i32 %29, 49, !dbg !14
  %47 = icmp slt i32 %30, 49, !dbg !14
  %48 = icmp slt i32 %31, 49, !dbg !14
  %49 = icmp slt i32 %32, 49, !dbg !14
  %50 = icmp slt i32 %33, 49, !dbg !14
  %51 = icmp slt i32 %34, 49, !dbg !14
  %52 = icmp slt i32 %35, 49, !dbg !14
  %53 = icmp slt i32 %36, 49, !dbg !14
  %54 = icmp slt i32 %37, 49, !dbg !14
  %55 = icmp slt i32 %38, 49, !dbg !14
  %56 = icmp slt i32 %39, 49, !dbg !14
  %57 = icmp slt i32 %40, 49, !dbg !14
  %58 = icmp slt i32 %41, 49, !dbg !14
  %59 = icmp slt i32 %42, 49, !dbg !14
  %60 = icmp slt i32 %43, 49, !dbg !14
  %61 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %62 = shl i32 %61, 6, !dbg !16
  %63 = or disjoint i32 %62, %26, !dbg !17
  %64 = or disjoint i32 %62, %10, !dbg !17
  %65 = or disjoint i32 %62, %11, !dbg !17
  %66 = or disjoint i32 %62, %12, !dbg !17
  %67 = or disjoint i32 %62, %13, !dbg !17
  %68 = or disjoint i32 %62, %14, !dbg !17
  %69 = or disjoint i32 %62, %15, !dbg !17
  %70 = or disjoint i32 %62, %16, !dbg !17
  %71 = or disjoint i32 %62, %17, !dbg !17
  %72 = or disjoint i32 %62, %18, !dbg !17
  %73 = or disjoint i32 %62, %19, !dbg !17
  %74 = or disjoint i32 %62, %20, !dbg !17
  %75 = or disjoint i32 %62, %21, !dbg !17
  %76 = or disjoint i32 %62, %22, !dbg !17
  %77 = or disjoint i32 %62, %23, !dbg !17
  %78 = or disjoint i32 %62, %24, !dbg !17
  %79 = or disjoint i32 %62, %25, !dbg !17
  %80 = icmp slt i32 %63, 49, !dbg !18
  %81 = icmp slt i32 %64, 49, !dbg !18
  %82 = icmp slt i32 %65, 49, !dbg !18
  %83 = icmp slt i32 %66, 49, !dbg !18
  %84 = icmp slt i32 %67, 49, !dbg !18
  %85 = icmp slt i32 %68, 49, !dbg !18
  %86 = icmp slt i32 %69, 49, !dbg !18
  %87 = icmp slt i32 %70, 49, !dbg !18
  %88 = icmp slt i32 %71, 49, !dbg !18
  %89 = icmp slt i32 %72, 49, !dbg !18
  %90 = icmp slt i32 %73, 49, !dbg !18
  %91 = icmp slt i32 %74, 49, !dbg !18
  %92 = icmp slt i32 %75, 49, !dbg !18
  %93 = icmp slt i32 %76, 49, !dbg !18
  %94 = icmp slt i32 %77, 49, !dbg !18
  %95 = icmp slt i32 %78, 49, !dbg !18
  %96 = icmp slt i32 %79, 49, !dbg !18
  %97 = mul i32 %64, 49, !dbg !19
  %98 = mul i32 %65, 49, !dbg !19
  %99 = mul i32 %66, 49, !dbg !19
  %100 = mul i32 %67, 49, !dbg !19
  %101 = mul i32 %68, 49, !dbg !19
  %102 = mul i32 %69, 49, !dbg !19
  %103 = mul i32 %70, 49, !dbg !19
  %104 = mul i32 %71, 49, !dbg !19
  %105 = mul i32 %72, 49, !dbg !19
  %106 = mul i32 %73, 49, !dbg !19
  %107 = mul i32 %74, 49, !dbg !19
  %108 = mul i32 %75, 49, !dbg !19
  %109 = mul i32 %76, 49, !dbg !19
  %110 = mul i32 %77, 49, !dbg !19
  %111 = mul i32 %78, 49, !dbg !19
  %112 = mul i32 %79, 49, !dbg !19
  %113 = add i32 %97, %43, !dbg !20
  %114 = add i32 %98, %43, !dbg !20
  %115 = add i32 %99, %43, !dbg !20
  %116 = add i32 %100, %43, !dbg !20
  %117 = add i32 %101, %43, !dbg !20
  %118 = add i32 %102, %43, !dbg !20
  %119 = add i32 %103, %43, !dbg !20
  %120 = add i32 %104, %43, !dbg !20
  %121 = add i32 %105, %43, !dbg !20
  %122 = add i32 %106, %43, !dbg !20
  %123 = add i32 %107, %43, !dbg !20
  %124 = add i32 %108, %43, !dbg !20
  %125 = add i32 %109, %43, !dbg !20
  %126 = add i32 %110, %43, !dbg !20
  %127 = add i32 %111, %43, !dbg !20
  %128 = add i32 %112, %43, !dbg !20
  %129 = sext i32 %113 to i64, !dbg !21
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !21
  %131 = sext i32 %114 to i64, !dbg !21
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !21
  %133 = sext i32 %115 to i64, !dbg !21
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !21
  %135 = sext i32 %116 to i64, !dbg !21
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !21
  %137 = sext i32 %117 to i64, !dbg !21
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !21
  %139 = sext i32 %118 to i64, !dbg !21
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !21
  %141 = sext i32 %119 to i64, !dbg !21
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !21
  %143 = sext i32 %120 to i64, !dbg !21
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !21
  %145 = sext i32 %121 to i64, !dbg !21
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !21
  %147 = sext i32 %122 to i64, !dbg !21
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !21
  %149 = sext i32 %123 to i64, !dbg !21
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !21
  %151 = sext i32 %124 to i64, !dbg !21
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !21
  %153 = sext i32 %125 to i64, !dbg !21
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !21
  %155 = sext i32 %126 to i64, !dbg !21
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !21
  %157 = sext i32 %127 to i64, !dbg !21
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !21
  %159 = sext i32 %128 to i64, !dbg !21
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !21
  %161 = and i1 %44, %80, !dbg !22
  %162 = and i1 %45, %80, !dbg !22
  %163 = and i1 %46, %80, !dbg !22
  %164 = and i1 %47, %80, !dbg !22
  %165 = and i1 %48, %80, !dbg !22
  %166 = and i1 %49, %80, !dbg !22
  %167 = and i1 %50, %80, !dbg !22
  %168 = and i1 %51, %80, !dbg !22
  %169 = and i1 %52, %80, !dbg !22
  %170 = and i1 %53, %80, !dbg !22
  %171 = and i1 %54, %80, !dbg !22
  %172 = and i1 %55, %80, !dbg !22
  %173 = and i1 %56, %80, !dbg !22
  %174 = and i1 %57, %80, !dbg !22
  %175 = and i1 %58, %80, !dbg !22
  %176 = and i1 %59, %80, !dbg !22
  %177 = and i1 %60, %81, !dbg !22
  %178 = and i1 %60, %82, !dbg !22
  %179 = and i1 %60, %83, !dbg !22
  %180 = and i1 %60, %84, !dbg !22
  %181 = and i1 %60, %85, !dbg !22
  %182 = and i1 %60, %86, !dbg !22
  %183 = and i1 %60, %87, !dbg !22
  %184 = and i1 %60, %88, !dbg !22
  %185 = and i1 %60, %89, !dbg !22
  %186 = and i1 %60, %90, !dbg !22
  %187 = and i1 %60, %91, !dbg !22
  %188 = and i1 %60, %92, !dbg !22
  %189 = and i1 %60, %93, !dbg !22
  %190 = and i1 %60, %94, !dbg !22
  %191 = and i1 %60, %95, !dbg !22
  %192 = and i1 %60, %96, !dbg !22
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %177) #2, !dbg !23
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %178) #2, !dbg !23
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %179) #2, !dbg !23
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %180) #2, !dbg !23
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %181) #2, !dbg !23
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %182) #2, !dbg !23
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %183) #2, !dbg !23
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %184) #2, !dbg !23
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %185) #2, !dbg !23
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %186) #2, !dbg !23
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %187) #2, !dbg !23
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %188) #2, !dbg !23
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %189) #2, !dbg !23
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 %190) #2, !dbg !23
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %191) #2, !dbg !23
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %192) #2, !dbg !23
  %209 = mul i32 %27, 49, !dbg !24
  %210 = mul i32 %28, 49, !dbg !24
  %211 = mul i32 %29, 49, !dbg !24
  %212 = mul i32 %30, 49, !dbg !24
  %213 = mul i32 %31, 49, !dbg !24
  %214 = mul i32 %32, 49, !dbg !24
  %215 = mul i32 %33, 49, !dbg !24
  %216 = mul i32 %34, 49, !dbg !24
  %217 = mul i32 %35, 49, !dbg !24
  %218 = mul i32 %36, 49, !dbg !24
  %219 = mul i32 %37, 49, !dbg !24
  %220 = mul i32 %38, 49, !dbg !24
  %221 = mul i32 %39, 49, !dbg !24
  %222 = mul i32 %40, 49, !dbg !24
  %223 = mul i32 %41, 49, !dbg !24
  %224 = mul i32 %42, 49, !dbg !24
  %225 = add i32 %63, %209, !dbg !25
  %226 = add i32 %63, %210, !dbg !25
  %227 = add i32 %63, %211, !dbg !25
  %228 = add i32 %63, %212, !dbg !25
  %229 = add i32 %63, %213, !dbg !25
  %230 = add i32 %63, %214, !dbg !25
  %231 = add i32 %63, %215, !dbg !25
  %232 = add i32 %63, %216, !dbg !25
  %233 = add i32 %63, %217, !dbg !25
  %234 = add i32 %63, %218, !dbg !25
  %235 = add i32 %63, %219, !dbg !25
  %236 = add i32 %63, %220, !dbg !25
  %237 = add i32 %63, %221, !dbg !25
  %238 = add i32 %63, %222, !dbg !25
  %239 = add i32 %63, %223, !dbg !25
  %240 = add i32 %63, %224, !dbg !25
  %241 = sext i32 %225 to i64, !dbg !26
  %242 = getelementptr float, ptr addrspace(1) %1, i64 %241, !dbg !26
  %243 = sext i32 %226 to i64, !dbg !26
  %244 = getelementptr float, ptr addrspace(1) %1, i64 %243, !dbg !26
  %245 = sext i32 %227 to i64, !dbg !26
  %246 = getelementptr float, ptr addrspace(1) %1, i64 %245, !dbg !26
  %247 = sext i32 %228 to i64, !dbg !26
  %248 = getelementptr float, ptr addrspace(1) %1, i64 %247, !dbg !26
  %249 = sext i32 %229 to i64, !dbg !26
  %250 = getelementptr float, ptr addrspace(1) %1, i64 %249, !dbg !26
  %251 = sext i32 %230 to i64, !dbg !26
  %252 = getelementptr float, ptr addrspace(1) %1, i64 %251, !dbg !26
  %253 = sext i32 %231 to i64, !dbg !26
  %254 = getelementptr float, ptr addrspace(1) %1, i64 %253, !dbg !26
  %255 = sext i32 %232 to i64, !dbg !26
  %256 = getelementptr float, ptr addrspace(1) %1, i64 %255, !dbg !26
  %257 = sext i32 %233 to i64, !dbg !26
  %258 = getelementptr float, ptr addrspace(1) %1, i64 %257, !dbg !26
  %259 = sext i32 %234 to i64, !dbg !26
  %260 = getelementptr float, ptr addrspace(1) %1, i64 %259, !dbg !26
  %261 = sext i32 %235 to i64, !dbg !26
  %262 = getelementptr float, ptr addrspace(1) %1, i64 %261, !dbg !26
  %263 = sext i32 %236 to i64, !dbg !26
  %264 = getelementptr float, ptr addrspace(1) %1, i64 %263, !dbg !26
  %265 = sext i32 %237 to i64, !dbg !26
  %266 = getelementptr float, ptr addrspace(1) %1, i64 %265, !dbg !26
  %267 = sext i32 %238 to i64, !dbg !26
  %268 = getelementptr float, ptr addrspace(1) %1, i64 %267, !dbg !26
  %269 = sext i32 %239 to i64, !dbg !26
  %270 = getelementptr float, ptr addrspace(1) %1, i64 %269, !dbg !26
  %271 = sext i32 %240 to i64, !dbg !26
  %272 = getelementptr float, ptr addrspace(1) %1, i64 %271, !dbg !26
  %273 = shl i32 %8, 6, !dbg !27
  %274 = and i32 %273, 4032, !dbg !27
  %275 = or disjoint i32 %274, %10, !dbg !27
  %276 = and i32 %8, 255, !dbg !27
  %277 = lshr exact i32 %274, 4, !dbg !27
  %278 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %277, !dbg !27
  %279 = getelementptr float, ptr addrspace(3) %278, i32 %275, !dbg !27
  %280 = insertelement <1 x i32> poison, i32 %193, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #2, !dbg !27
  %281 = or disjoint i32 %275, 4, !dbg !27
  %282 = getelementptr float, ptr addrspace(3) %278, i32 %281, !dbg !27
  %283 = insertelement <1 x i32> poison, i32 %194, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #2, !dbg !27
  %284 = or disjoint i32 %275, 8, !dbg !27
  %285 = getelementptr float, ptr addrspace(3) %278, i32 %284, !dbg !27
  %286 = insertelement <1 x i32> poison, i32 %195, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 true) #2, !dbg !27
  %287 = or disjoint i32 %275, 12, !dbg !27
  %288 = getelementptr float, ptr addrspace(3) %278, i32 %287, !dbg !27
  %289 = insertelement <1 x i32> poison, i32 %196, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %289, i1 true) #2, !dbg !27
  %290 = or disjoint i32 %275, 16, !dbg !27
  %291 = getelementptr float, ptr addrspace(3) %278, i32 %290, !dbg !27
  %292 = insertelement <1 x i32> poison, i32 %197, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %292, i1 true) #2, !dbg !27
  %293 = or disjoint i32 %275, 20, !dbg !27
  %294 = getelementptr float, ptr addrspace(3) %278, i32 %293, !dbg !27
  %295 = insertelement <1 x i32> poison, i32 %198, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #2, !dbg !27
  %296 = or disjoint i32 %275, 24, !dbg !27
  %297 = getelementptr float, ptr addrspace(3) %278, i32 %296, !dbg !27
  %298 = insertelement <1 x i32> poison, i32 %199, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %298, i1 true) #2, !dbg !27
  %299 = or disjoint i32 %275, 28, !dbg !27
  %300 = getelementptr float, ptr addrspace(3) %278, i32 %299, !dbg !27
  %301 = insertelement <1 x i32> poison, i32 %200, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 true) #2, !dbg !27
  %302 = or disjoint i32 %275, 32, !dbg !27
  %303 = getelementptr float, ptr addrspace(3) %278, i32 %302, !dbg !27
  %304 = insertelement <1 x i32> poison, i32 %201, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 true) #2, !dbg !27
  %305 = or disjoint i32 %275, 36, !dbg !27
  %306 = getelementptr float, ptr addrspace(3) %278, i32 %305, !dbg !27
  %307 = insertelement <1 x i32> poison, i32 %202, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %307, i1 true) #2, !dbg !27
  %308 = or disjoint i32 %275, 40, !dbg !27
  %309 = getelementptr float, ptr addrspace(3) %278, i32 %308, !dbg !27
  %310 = insertelement <1 x i32> poison, i32 %203, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 true) #2, !dbg !27
  %311 = or disjoint i32 %275, 44, !dbg !27
  %312 = getelementptr float, ptr addrspace(3) %278, i32 %311, !dbg !27
  %313 = insertelement <1 x i32> poison, i32 %204, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, <1 x i32> %313, i1 true) #2, !dbg !27
  %314 = or disjoint i32 %275, 48, !dbg !27
  %315 = getelementptr float, ptr addrspace(3) %278, i32 %314, !dbg !27
  %316 = insertelement <1 x i32> poison, i32 %205, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %315, <1 x i32> %316, i1 true) #2, !dbg !27
  %317 = or disjoint i32 %275, 52, !dbg !27
  %318 = getelementptr float, ptr addrspace(3) %278, i32 %317, !dbg !27
  %319 = insertelement <1 x i32> poison, i32 %206, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, <1 x i32> %319, i1 true) #2, !dbg !27
  %320 = or disjoint i32 %275, 56, !dbg !27
  %321 = getelementptr float, ptr addrspace(3) %278, i32 %320, !dbg !27
  %322 = insertelement <1 x i32> poison, i32 %207, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %322, i1 true) #2, !dbg !27
  %323 = or disjoint i32 %275, 60, !dbg !27
  %324 = getelementptr float, ptr addrspace(3) %278, i32 %323, !dbg !27
  %325 = insertelement <1 x i32> poison, i32 %208, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, <1 x i32> %325, i1 true) #2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %326 = lshr i32 %276, 6, !dbg !27
  %327 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %326, !dbg !27
  %328 = getelementptr inbounds float, ptr addrspace(3) %327, i32 %276, !dbg !27
  %329 = load i32, ptr addrspace(3) %328, align 4, !dbg !27
  %330 = or disjoint i32 %276, 256, !dbg !27
  %331 = lshr i32 %330, 6, !dbg !27
  %332 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %331, !dbg !27
  %333 = getelementptr inbounds float, ptr addrspace(3) %332, i32 %330, !dbg !27
  %334 = load i32, ptr addrspace(3) %333, align 4, !dbg !27
  %335 = or disjoint i32 %276, 512, !dbg !27
  %336 = lshr i32 %335, 6, !dbg !27
  %337 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %336, !dbg !27
  %338 = getelementptr inbounds float, ptr addrspace(3) %337, i32 %335, !dbg !27
  %339 = load i32, ptr addrspace(3) %338, align 4, !dbg !27
  %340 = or disjoint i32 %276, 768, !dbg !27
  %341 = lshr i32 %340, 6, !dbg !27
  %342 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %341, !dbg !27
  %343 = getelementptr inbounds float, ptr addrspace(3) %342, i32 %340, !dbg !27
  %344 = load i32, ptr addrspace(3) %343, align 4, !dbg !27
  %345 = or disjoint i32 %276, 1024, !dbg !27
  %346 = lshr i32 %345, 6, !dbg !27
  %347 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %346, !dbg !27
  %348 = getelementptr inbounds float, ptr addrspace(3) %347, i32 %345, !dbg !27
  %349 = load i32, ptr addrspace(3) %348, align 4, !dbg !27
  %350 = or disjoint i32 %276, 1280, !dbg !27
  %351 = lshr i32 %350, 6, !dbg !27
  %352 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %351, !dbg !27
  %353 = getelementptr inbounds float, ptr addrspace(3) %352, i32 %350, !dbg !27
  %354 = load i32, ptr addrspace(3) %353, align 4, !dbg !27
  %355 = or disjoint i32 %276, 1536, !dbg !27
  %356 = lshr i32 %355, 6, !dbg !27
  %357 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %356, !dbg !27
  %358 = getelementptr inbounds float, ptr addrspace(3) %357, i32 %355, !dbg !27
  %359 = load i32, ptr addrspace(3) %358, align 4, !dbg !27
  %360 = or disjoint i32 %276, 1792, !dbg !27
  %361 = lshr i32 %360, 6, !dbg !27
  %362 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %361, !dbg !27
  %363 = getelementptr inbounds float, ptr addrspace(3) %362, i32 %360, !dbg !27
  %364 = load i32, ptr addrspace(3) %363, align 4, !dbg !27
  %365 = or disjoint i32 %276, 2048, !dbg !27
  %366 = lshr i32 %365, 6, !dbg !27
  %367 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %366, !dbg !27
  %368 = getelementptr inbounds float, ptr addrspace(3) %367, i32 %365, !dbg !27
  %369 = load i32, ptr addrspace(3) %368, align 4, !dbg !27
  %370 = or disjoint i32 %276, 2304, !dbg !27
  %371 = lshr i32 %370, 6, !dbg !27
  %372 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %371, !dbg !27
  %373 = getelementptr inbounds float, ptr addrspace(3) %372, i32 %370, !dbg !27
  %374 = load i32, ptr addrspace(3) %373, align 4, !dbg !27
  %375 = or disjoint i32 %276, 2560, !dbg !27
  %376 = lshr i32 %375, 6, !dbg !27
  %377 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %376, !dbg !27
  %378 = getelementptr inbounds float, ptr addrspace(3) %377, i32 %375, !dbg !27
  %379 = load i32, ptr addrspace(3) %378, align 4, !dbg !27
  %380 = or disjoint i32 %276, 2816, !dbg !27
  %381 = lshr i32 %380, 6, !dbg !27
  %382 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %381, !dbg !27
  %383 = getelementptr inbounds float, ptr addrspace(3) %382, i32 %380, !dbg !27
  %384 = load i32, ptr addrspace(3) %383, align 4, !dbg !27
  %385 = or disjoint i32 %276, 3072, !dbg !27
  %386 = lshr i32 %385, 6, !dbg !27
  %387 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %386, !dbg !27
  %388 = getelementptr inbounds float, ptr addrspace(3) %387, i32 %385, !dbg !27
  %389 = load i32, ptr addrspace(3) %388, align 4, !dbg !27
  %390 = or disjoint i32 %276, 3328, !dbg !27
  %391 = lshr i32 %390, 6, !dbg !27
  %392 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %391, !dbg !27
  %393 = getelementptr inbounds float, ptr addrspace(3) %392, i32 %390, !dbg !27
  %394 = load i32, ptr addrspace(3) %393, align 4, !dbg !27
  %395 = or disjoint i32 %276, 3584, !dbg !27
  %396 = lshr i32 %395, 6, !dbg !27
  %397 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %396, !dbg !27
  %398 = getelementptr inbounds float, ptr addrspace(3) %397, i32 %395, !dbg !27
  %399 = load i32, ptr addrspace(3) %398, align 4, !dbg !27
  %400 = or disjoint i32 %276, 3840, !dbg !27
  %401 = lshr i32 %400, 6, !dbg !27
  %402 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %401, !dbg !27
  %403 = getelementptr inbounds float, ptr addrspace(3) %402, i32 %400, !dbg !27
  %404 = load i32, ptr addrspace(3) %403, align 4, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %329, ptr addrspace(1) %242, i1 %161) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %334, ptr addrspace(1) %244, i1 %162) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %339, ptr addrspace(1) %246, i1 %163) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %344, ptr addrspace(1) %248, i1 %164) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %349, ptr addrspace(1) %250, i1 %165) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %354, ptr addrspace(1) %252, i1 %166) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %359, ptr addrspace(1) %254, i1 %167) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %364, ptr addrspace(1) %256, i1 %168) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %369, ptr addrspace(1) %258, i1 %169) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %374, ptr addrspace(1) %260, i1 %170) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %379, ptr addrspace(1) %262, i1 %171) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %384, ptr addrspace(1) %264, i1 %172) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %389, ptr addrspace(1) %266, i1 %173) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %394, ptr addrspace(1) %268, i1 %174) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %399, ptr addrspace(1) %270, i1 %175) #2, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %404, ptr addrspace(1) %272, i1 %176) #2, !dbg !27
  %405 = getelementptr float, ptr addrspace(1) %2, i64 %241, !dbg !28
  %406 = getelementptr float, ptr addrspace(1) %2, i64 %243, !dbg !28
  %407 = getelementptr float, ptr addrspace(1) %2, i64 %245, !dbg !28
  %408 = getelementptr float, ptr addrspace(1) %2, i64 %247, !dbg !28
  %409 = getelementptr float, ptr addrspace(1) %2, i64 %249, !dbg !28
  %410 = getelementptr float, ptr addrspace(1) %2, i64 %251, !dbg !28
  %411 = getelementptr float, ptr addrspace(1) %2, i64 %253, !dbg !28
  %412 = getelementptr float, ptr addrspace(1) %2, i64 %255, !dbg !28
  %413 = getelementptr float, ptr addrspace(1) %2, i64 %257, !dbg !28
  %414 = getelementptr float, ptr addrspace(1) %2, i64 %259, !dbg !28
  %415 = getelementptr float, ptr addrspace(1) %2, i64 %261, !dbg !28
  %416 = getelementptr float, ptr addrspace(1) %2, i64 %263, !dbg !28
  %417 = getelementptr float, ptr addrspace(1) %2, i64 %265, !dbg !28
  %418 = getelementptr float, ptr addrspace(1) %2, i64 %267, !dbg !28
  %419 = getelementptr float, ptr addrspace(1) %2, i64 %269, !dbg !28
  %420 = getelementptr float, ptr addrspace(1) %2, i64 %271, !dbg !28
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %329, ptr addrspace(1) %405, i1 %161) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %334, ptr addrspace(1) %406, i1 %162) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %339, ptr addrspace(1) %407, i1 %163) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %344, ptr addrspace(1) %408, i1 %164) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %349, ptr addrspace(1) %409, i1 %165) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %354, ptr addrspace(1) %410, i1 %166) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %359, ptr addrspace(1) %411, i1 %167) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %364, ptr addrspace(1) %412, i1 %168) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %369, ptr addrspace(1) %413, i1 %169) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %374, ptr addrspace(1) %414, i1 %170) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %379, ptr addrspace(1) %415, i1 %171) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %384, ptr addrspace(1) %416, i1 %172) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %389, ptr addrspace(1) %417, i1 %173) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %394, ptr addrspace(1) %418, i1 %174) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %399, ptr addrspace(1) %419, i1 %175) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %404, ptr addrspace(1) %420, i1 %176) #2, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck7vlwvj6uo6rhbprqxipic7or7w5qjnrigio76pkvaswqwsymli.py", directory: "inductor_cache/k7")
!4 = !{ptr @triton_poi_fused_convolution_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_1", linkageName: "triton_poi_fused_convolution_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 38, scope: !7)
!20 = !DILocation(line: 30, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 51, scope: !7)
!23 = !DILocation(line: 30, column: 43, scope: !7)
!24 = !DILocation(line: 31, column: 33, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 25, scope: !7)
!27 = !DILocation(line: 31, column: 44, scope: !7)
!28 = !DILocation(line: 32, column: 25, scope: !7)
!29 = !DILocation(line: 32, column: 44, scope: !7)
!30 = !DILocation(line: 32, column: 4, scope: !7)
