; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_threshold_backward_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 3, !dbg !12
  %11 = and i32 %10, 56, !dbg !12
  %12 = lshr i32 %9, 4, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = or disjoint i32 %8, %13, !dbg !13
  %17 = or disjoint i32 %16, 8, !dbg !13
  %18 = or disjoint i32 %16, 16, !dbg !13
  %19 = or disjoint i32 %16, 24, !dbg !13
  %20 = or disjoint i32 %16, 32, !dbg !13
  %21 = or disjoint i32 %16, 40, !dbg !13
  %22 = or disjoint i32 %16, 48, !dbg !13
  %23 = or disjoint i32 %16, 56, !dbg !13
  %24 = icmp slt i32 %14, 768, !dbg !14
  %25 = icmp slt i32 %16, 768, !dbg !14
  %26 = icmp slt i32 %17, 768, !dbg !14
  %27 = icmp slt i32 %18, 768, !dbg !14
  %28 = icmp slt i32 %19, 768, !dbg !14
  %29 = icmp slt i32 %20, 768, !dbg !14
  %30 = icmp slt i32 %21, 768, !dbg !14
  %31 = icmp slt i32 %22, 768, !dbg !14
  %32 = icmp slt i32 %23, 768, !dbg !14
  %33 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %34 = shl i32 %33, 4, !dbg !16
  %35 = lshr i32 %9, 3, !dbg !17
  %36 = and i32 %35, 15, !dbg !17
  %37 = and i32 %9, 15, !dbg !17
  %38 = or disjoint i32 %34, %36, !dbg !18
  %39 = or disjoint i32 %34, %37, !dbg !18
  %40 = icmp slt i32 %38, 9, !dbg !19
  %41 = icmp slt i32 %39, 9, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %42 = sdiv i32 %.frozen, 192, !dbg !20
  %43 = mul i32 %42, 192, !dbg !21
  %.decomposed = sub i32 %.frozen, %43, !dbg !21
  %44 = srem i32 %15, 192, !dbg !21
  %45 = mul i32 %38, 192, !dbg !22
  %46 = mul i32 %42, 1728, !dbg !23
  %47 = add i32 %46, %45, !dbg !24
  %48 = add i32 %47, %.decomposed, !dbg !25
  %49 = add i32 %47, %44, !dbg !25
  %50 = sext i32 %48 to i64, !dbg !26
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !26
  %52 = sext i32 %49 to i64, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !26
  %54 = and i1 %24, %40, !dbg !27
  %55 = and i1 %25, %41, !dbg !27
  %56 = and i1 %26, %41, !dbg !27
  %57 = and i1 %27, %41, !dbg !27
  %58 = and i1 %28, %41, !dbg !27
  %59 = and i1 %29, %41, !dbg !27
  %60 = and i1 %30, %41, !dbg !27
  %61 = and i1 %31, %41, !dbg !27
  %62 = and i1 %32, %41, !dbg !27
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %54) #2, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !28
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %54) #2, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !28
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !28
  %73 = sext i32 %.decomposed to i64, !dbg !29
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !29
  %75 = sext i32 %44 to i64, !dbg !29
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !29
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %24) #2, !dbg !30
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !30
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !30
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !30
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !30
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %24) #2, !dbg !30
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !30
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !30
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !30
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !30
  %87 = mul i32 %16, 9, !dbg !31
  %88 = mul i32 %17, 9, !dbg !31
  %89 = mul i32 %18, 9, !dbg !31
  %90 = mul i32 %19, 9, !dbg !31
  %91 = mul i32 %20, 9, !dbg !31
  %92 = mul i32 %21, 9, !dbg !31
  %93 = mul i32 %22, 9, !dbg !31
  %94 = mul i32 %23, 9, !dbg !31
  %95 = add i32 %39, %87, !dbg !32
  %96 = add i32 %39, %88, !dbg !32
  %97 = add i32 %39, %89, !dbg !32
  %98 = add i32 %39, %90, !dbg !32
  %99 = add i32 %39, %91, !dbg !32
  %100 = add i32 %39, %92, !dbg !32
  %101 = add i32 %39, %93, !dbg !32
  %102 = add i32 %39, %94, !dbg !32
  %103 = sext i32 %95 to i64, !dbg !33
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !33
  %105 = sext i32 %96 to i64, !dbg !33
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !33
  %107 = sext i32 %97 to i64, !dbg !33
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %107, !dbg !33
  %109 = sext i32 %98 to i64, !dbg !33
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !33
  %111 = sext i32 %99 to i64, !dbg !33
  %112 = getelementptr float, ptr addrspace(1) %2, i64 %111, !dbg !33
  %113 = sext i32 %100 to i64, !dbg !33
  %114 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !33
  %115 = sext i32 %101 to i64, !dbg !33
  %116 = getelementptr float, ptr addrspace(1) %2, i64 %115, !dbg !33
  %117 = sext i32 %102 to i64, !dbg !33
  %118 = getelementptr float, ptr addrspace(1) %2, i64 %117, !dbg !33
  %119 = shl i32 %9, 7, !dbg !34
  %120 = and i32 %119, 896, !dbg !34
  %121 = or disjoint i32 %120, %36, !dbg !34
  %122 = and i32 %9, 127, !dbg !34
  %123 = lshr exact i32 %120, 4, !dbg !34
  %124 = add nuw nsw i32 %123, %121, !dbg !34
  %125 = zext nneg i32 %124 to i64, !dbg !34
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %125, !dbg !34
  %127 = or disjoint i32 %121, 16, !dbg !34
  %128 = lshr i32 %127, 4, !dbg !34
  %129 = add nuw nsw i32 %128, %127, !dbg !34
  %130 = zext nneg i32 %129 to i64, !dbg !34
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %130, !dbg !34
  %132 = or disjoint i32 %121, 32, !dbg !34
  %133 = lshr i32 %132, 4, !dbg !34
  %134 = add nuw nsw i32 %133, %132, !dbg !34
  %135 = zext nneg i32 %134 to i64, !dbg !34
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %135, !dbg !34
  %137 = or disjoint i32 %121, 48, !dbg !34
  %138 = lshr i32 %137, 4, !dbg !34
  %139 = add nuw nsw i32 %138, %137, !dbg !34
  %140 = zext nneg i32 %139 to i64, !dbg !34
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %140, !dbg !34
  %142 = or disjoint i32 %121, 64, !dbg !34
  %143 = lshr i32 %142, 4, !dbg !34
  %144 = add nuw nsw i32 %143, %142, !dbg !34
  %145 = zext nneg i32 %144 to i64, !dbg !34
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %145, !dbg !34
  %147 = or disjoint i32 %121, 80, !dbg !34
  %148 = lshr i32 %147, 4, !dbg !34
  %149 = add nuw nsw i32 %148, %147, !dbg !34
  %150 = zext nneg i32 %149 to i64, !dbg !34
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %150, !dbg !34
  %152 = or disjoint i32 %121, 96, !dbg !34
  %153 = lshr i32 %152, 4, !dbg !34
  %154 = add nuw nsw i32 %153, %152, !dbg !34
  %155 = zext nneg i32 %154 to i64, !dbg !34
  %156 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %155, !dbg !34
  %157 = or disjoint i32 %121, 112, !dbg !34
  %158 = lshr i32 %157, 4, !dbg !34
  %159 = add nuw nsw i32 %158, %157, !dbg !34
  %160 = zext nneg i32 %159 to i64, !dbg !34
  %161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %160, !dbg !34
  %162 = lshr i32 %122, 4, !dbg !34
  %163 = add nuw nsw i32 %162, %122, !dbg !34
  %164 = zext nneg i32 %163 to i64, !dbg !34
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %164, !dbg !34
  %166 = or disjoint i32 %122, 128, !dbg !34
  %167 = lshr i32 %166, 4, !dbg !34
  %168 = add nuw nsw i32 %167, %166, !dbg !34
  %169 = zext nneg i32 %168 to i64, !dbg !34
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %169, !dbg !34
  %171 = or disjoint i32 %122, 256, !dbg !34
  %172 = lshr i32 %171, 4, !dbg !34
  %173 = add nuw nsw i32 %172, %171, !dbg !34
  %174 = zext nneg i32 %173 to i64, !dbg !34
  %175 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %174, !dbg !34
  %176 = or disjoint i32 %122, 384, !dbg !34
  %177 = lshr i32 %176, 4, !dbg !34
  %178 = add nuw nsw i32 %177, %176, !dbg !34
  %179 = zext nneg i32 %178 to i64, !dbg !34
  %180 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %179, !dbg !34
  %181 = or disjoint i32 %122, 512, !dbg !34
  %182 = lshr i32 %181, 4, !dbg !34
  %183 = add nuw nsw i32 %182, %181, !dbg !34
  %184 = zext nneg i32 %183 to i64, !dbg !34
  %185 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %184, !dbg !34
  %186 = or disjoint i32 %122, 640, !dbg !34
  %187 = lshr i32 %186, 4, !dbg !34
  %188 = add nuw nsw i32 %187, %186, !dbg !34
  %189 = zext nneg i32 %188 to i64, !dbg !34
  %190 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %189, !dbg !34
  %191 = or disjoint i32 %122, 768, !dbg !34
  %192 = lshr i32 %191, 4, !dbg !34
  %193 = add nuw nsw i32 %192, %191, !dbg !34
  %194 = zext nneg i32 %193 to i64, !dbg !34
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %194, !dbg !34
  %196 = or disjoint i32 %122, 896, !dbg !34
  %197 = lshr i32 %196, 4, !dbg !34
  %198 = add nuw nsw i32 %197, %196, !dbg !34
  %199 = zext nneg i32 %198 to i64, !dbg !34
  %200 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %199, !dbg !34
  %201 = getelementptr i1, ptr addrspace(1) %3, i64 %50, !dbg !35
  %202 = insertelement <4 x i32> poison, i32 %64, i64 0, !dbg !28
  %203 = insertelement <4 x i32> %202, i32 %65, i64 1, !dbg !28
  %204 = insertelement <4 x i32> %203, i32 %66, i64 2, !dbg !28
  %205 = insertelement <4 x i32> %204, i32 %67, i64 3, !dbg !28
  %206 = bitcast <4 x i32> %205 to <4 x float>, !dbg !28
  %207 = insertelement <4 x i32> poison, i32 %78, i64 0, !dbg !30
  %208 = insertelement <4 x i32> %207, i32 %79, i64 1, !dbg !30
  %209 = insertelement <4 x i32> %208, i32 %80, i64 2, !dbg !30
  %210 = insertelement <4 x i32> %209, i32 %81, i64 3, !dbg !30
  %211 = bitcast <4 x i32> %210 to <4 x float>, !dbg !30
  %212 = fadd <4 x float> %206, %211, !dbg !36
  %213 = fcmp olt <4 x float> %212, zeroinitializer, !dbg !37
  %214 = select <4 x i1> %213, <4 x float> zeroinitializer, <4 x float> %212, !dbg !41
  %215 = fcmp ole <4 x float> %214, zeroinitializer, !dbg !42
  %216 = extractelement <4 x float> %214, i64 0, !dbg !34
  %217 = bitcast float %216 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %217, i1 true) #2, !dbg !34
  %218 = extractelement <4 x float> %214, i64 1, !dbg !34
  %219 = bitcast float %218 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %219, i1 true) #2, !dbg !34
  %220 = extractelement <4 x float> %214, i64 2, !dbg !34
  %221 = bitcast float %220 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %221, i1 true) #2, !dbg !34
  %222 = extractelement <4 x float> %214, i64 3, !dbg !34
  %223 = bitcast float %222 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %223, i1 true) #2, !dbg !34
  %224 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !28
  %225 = insertelement <4 x i32> %224, i32 %70, i64 1, !dbg !28
  %226 = insertelement <4 x i32> %225, i32 %71, i64 2, !dbg !28
  %227 = insertelement <4 x i32> %226, i32 %72, i64 3, !dbg !28
  %228 = bitcast <4 x i32> %227 to <4 x float>, !dbg !28
  %229 = insertelement <4 x i32> poison, i32 %83, i64 0, !dbg !30
  %230 = insertelement <4 x i32> %229, i32 %84, i64 1, !dbg !30
  %231 = insertelement <4 x i32> %230, i32 %85, i64 2, !dbg !30
  %232 = insertelement <4 x i32> %231, i32 %86, i64 3, !dbg !30
  %233 = bitcast <4 x i32> %232 to <4 x float>, !dbg !30
  %234 = fadd <4 x float> %228, %233, !dbg !36
  %235 = fcmp olt <4 x float> %234, zeroinitializer, !dbg !37
  %236 = select <4 x i1> %235, <4 x float> zeroinitializer, <4 x float> %234, !dbg !41
  %237 = fcmp ole <4 x float> %236, zeroinitializer, !dbg !42
  %238 = extractelement <4 x float> %236, i64 0, !dbg !34
  %239 = bitcast float %238 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %239, i1 true) #2, !dbg !34
  %240 = extractelement <4 x float> %236, i64 1, !dbg !34
  %241 = bitcast float %240 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %241, i1 true) #2, !dbg !34
  %242 = extractelement <4 x float> %236, i64 2, !dbg !34
  %243 = bitcast float %242 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %243, i1 true) #2, !dbg !34
  %244 = extractelement <4 x float> %236, i64 3, !dbg !34
  %245 = bitcast float %244 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %245, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %246 = load i32, ptr addrspace(3) %165, align 4, !dbg !34
  %247 = load i32, ptr addrspace(3) %170, align 4, !dbg !34
  %248 = load i32, ptr addrspace(3) %175, align 4, !dbg !34
  %249 = load i32, ptr addrspace(3) %180, align 4, !dbg !34
  %250 = load i32, ptr addrspace(3) %185, align 4, !dbg !34
  %251 = load i32, ptr addrspace(3) %190, align 4, !dbg !34
  %252 = load i32, ptr addrspace(3) %195, align 4, !dbg !34
  %253 = load i32, ptr addrspace(3) %200, align 4, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %246, ptr addrspace(1) %104, i1 %55) #2, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %247, ptr addrspace(1) %106, i1 %56) #2, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %248, ptr addrspace(1) %108, i1 %57) #2, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %249, ptr addrspace(1) %110, i1 %58) #2, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %250, ptr addrspace(1) %112, i1 %59) #2, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %251, ptr addrspace(1) %114, i1 %60) #2, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %252, ptr addrspace(1) %116, i1 %61) #2, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %253, ptr addrspace(1) %118, i1 %62) #2, !dbg !34
  %254 = zext <4 x i1> %215 to <4 x i8>, !dbg !43
  %255 = bitcast <4 x i8> %254 to i32, !dbg !43
  %256 = zext <4 x i1> %237 to <4 x i8>, !dbg !43
  %257 = bitcast <4 x i8> %256 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %255, i32 %257, ptr addrspace(1) %201, i1 %54) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3bzpzr4ees7k2bgk45b5lxigoz26jhrycl7tzt3gwshkuexwkuv.py", directory: "inductor_cache/3b")
!4 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_threshold_backward_8", linkageName: "triton_poi_fused_convolution_relu_threshold_backward_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 39, column: 32, scope: !7)
!32 = !DILocation(line: 39, column: 30, scope: !7)
!33 = !DILocation(line: 39, column: 25, scope: !7)
!34 = !DILocation(line: 39, column: 43, scope: !7)
!35 = !DILocation(line: 40, column: 25, scope: !7)
!36 = !DILocation(line: 34, column: 18, scope: !7)
!37 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 36, column: 40, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 38, column: 19, scope: !7)
!43 = !DILocation(line: 40, column: 55, scope: !7)
!44 = !DILocation(line: 40, column: 4, scope: !7)
