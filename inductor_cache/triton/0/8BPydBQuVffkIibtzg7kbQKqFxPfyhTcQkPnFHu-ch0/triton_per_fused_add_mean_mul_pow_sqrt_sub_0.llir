; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_mean_mul_pow_sqrt_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = icmp slt i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = lshr i32 %11, 5, !dbg !12
  %14 = and i32 %11, 63, !dbg !12
  %15 = lshr i32 %14, 4, !dbg !13
  %16 = shl i32 %9, 6, !dbg !14
  %17 = or disjoint i32 %16, %14, !dbg !15
  %18 = sext i32 %17 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !16
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %10, i32 0, i1 %10) #5, !dbg !17
  %21 = bitcast i32 %20 to float, !dbg !17
  %22 = zext nneg i32 %15 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !21
  %27 = select i1 %10, float %21, float 0.000000e+00, !dbg !22
  %28 = bitcast float %27 to i32, !dbg !23
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 16, i32 31), !dbg !23
  %30 = bitcast i32 %29 to float, !dbg !23
  %31 = fadd float %27, %30, !dbg !27
  %32 = bitcast float %31 to i32, !dbg !23
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 8, i32 31), !dbg !23
  %34 = bitcast i32 %33 to float, !dbg !23
  %35 = fadd float %31, %34, !dbg !27
  %36 = bitcast float %35 to i32, !dbg !23
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 4, i32 31), !dbg !23
  %38 = bitcast i32 %37 to float, !dbg !23
  %39 = fadd float %35, %38, !dbg !27
  %40 = bitcast float %39 to i32, !dbg !23
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 2, i32 31), !dbg !23
  %42 = bitcast i32 %41 to float, !dbg !23
  %43 = fadd float %39, %42, !dbg !27
  %44 = bitcast float %43 to i32, !dbg !23
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 1, i32 31), !dbg !23
  %46 = bitcast i32 %45 to float, !dbg !23
  %47 = fadd float %43, %46, !dbg !27
  %48 = icmp eq i32 %12, 0, !dbg !23
  %49 = and i32 %13, 1, !dbg !23
  %50 = getelementptr float, ptr addrspace(3) @global_smem, i32 %49, !dbg !23
  %51 = bitcast float %47 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %51, i1 %48) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %52 = icmp slt i32 %11, 2, !dbg !23
  %53 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !23
  %54 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %53, i1 %52) #5, !dbg !23
  %55 = bitcast i32 %54 to float, !dbg !23
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 1, i32 31), !dbg !23
  %57 = bitcast i32 %56 to float, !dbg !23
  %58 = fadd float %55, %57, !dbg !27
  %59 = and i32 %11, 1, !dbg !23
  %60 = icmp eq i32 %59, 0, !dbg !23
  %61 = and i1 %52, %60, !dbg !23
  %62 = bitcast float %58 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %62, i1 %61) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %63 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !23
  %64 = fmul float %21, %21, !dbg !29
  %65 = select i1 %10, float %64, float 0.000000e+00, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %66 = bitcast float %65 to i32, !dbg !31
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 16, i32 31), !dbg !31
  %68 = bitcast i32 %67 to float, !dbg !31
  %69 = fadd float %65, %68, !dbg !33
  %70 = bitcast float %69 to i32, !dbg !31
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 8, i32 31), !dbg !31
  %72 = bitcast i32 %71 to float, !dbg !31
  %73 = fadd float %69, %72, !dbg !33
  %74 = bitcast float %73 to i32, !dbg !31
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 4, i32 31), !dbg !31
  %76 = bitcast i32 %75 to float, !dbg !31
  %77 = fadd float %73, %76, !dbg !33
  %78 = bitcast float %77 to i32, !dbg !31
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 2, i32 31), !dbg !31
  %80 = bitcast i32 %79 to float, !dbg !31
  %81 = fadd float %77, %80, !dbg !33
  %82 = bitcast float %81 to i32, !dbg !31
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 1, i32 31), !dbg !31
  %84 = bitcast i32 %83 to float, !dbg !31
  %85 = fadd float %81, %84, !dbg !33
  %86 = bitcast float %85 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %86, i1 %48) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %87 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %53, i1 %52) #5, !dbg !31
  %88 = bitcast i32 %87 to float, !dbg !31
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !31
  %90 = bitcast i32 %89 to float, !dbg !31
  %91 = fadd float %88, %90, !dbg !33
  %92 = bitcast float %91 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %92, i1 %61) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %93 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !31
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float 6.400000e+01) #5, !dbg !34
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float 6.400000e+01) #5, !dbg !35
  %96 = fmul float %94, %94, !dbg !36
  %97 = fsub float %95, %96, !dbg !37
  %98 = fadd float %97, 0x3EE4F8B580000000, !dbg !38
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i = icmp eq i32 %99, 0, !dbg !39
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %.not1.i = icmp eq i32 %100, 0, !dbg !39
  br i1 %.not.i, label %106, label %101, !dbg !39

101:                                              ; preds = %8
  br i1 %.not1.i, label %104, label %102, !dbg !39

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #5, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #5, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

106:                                              ; preds = %8
  br i1 %.not1.i, label %109, label %107, !dbg !39

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #5, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #5, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %102, %104, %107, %109
  %.0.i = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !39
  %111 = bitcast i32 %26 to float, !dbg !21
  %112 = bitcast i32 %24 to float, !dbg !19
  %113 = fsub float %21, %94, !dbg !40
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float %.0.i) #5, !dbg !41
  %115 = fmul float %114, %112, !dbg !42
  %116 = fadd float %115, %111, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %117 = sext i32 %9 to i64, !dbg !45
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !45
  %119 = icmp eq i32 %14, 0, !dbg !46
  %120 = bitcast float %94 to i32, !dbg !46
  %121 = and i1 %119, %10, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %120, ptr addrspace(1) %118, i1 %121) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !48
  %123 = bitcast float %.0.i to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %122, i1 %121) #5, !dbg !49
  %124 = getelementptr float, ptr addrspace(1) %5, i64 %18, !dbg !50
  %125 = bitcast float %116 to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %125, ptr addrspace(1) %124, i1 %10) #5, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu4nzbiza476swv5t3tp2lsplvippsps4fmpf5b43pxhxq4haflx.py", directory: "inductor_cache/u4")
!4 = !{ptr @triton_per_fused_add_mean_mul_pow_sqrt_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_mul_pow_sqrt_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_mul_pow_sqrt_sub_0", linkageName: "triton_per_fused_add_mean_mul_pow_sqrt_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 38, scope: !7)
!15 = !DILocation(line: 32, column: 35, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 31, scope: !7)
!19 = !DILocation(line: 33, column: 36, scope: !7)
!20 = !DILocation(line: 34, column: 31, scope: !7)
!21 = !DILocation(line: 34, column: 36, scope: !7)
!22 = !DILocation(line: 36, column: 33, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 37, column: 24, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !26)
!28 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!29 = !DILocation(line: 38, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 33, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !32)
!32 = !DILocation(line: 41, column: 24, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !32)
!34 = !DILocation(line: 43, column: 19, scope: !7)
!35 = !DILocation(line: 44, column: 19, scope: !7)
!36 = !DILocation(line: 45, column: 20, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 48, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 27, scope: !7)
!40 = !DILocation(line: 50, column: 19, scope: !7)
!41 = !DILocation(line: 51, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 20, scope: !7)
!44 = !DILocation(line: 54, column: 4, scope: !7)
!45 = !DILocation(line: 55, column: 28, scope: !7)
!46 = !DILocation(line: 55, column: 40, scope: !7)
!47 = !DILocation(line: 56, column: 4, scope: !7)
!48 = !DILocation(line: 57, column: 28, scope: !7)
!49 = !DILocation(line: 57, column: 40, scope: !7)
!50 = !DILocation(line: 58, column: 25, scope: !7)
!51 = !DILocation(line: 58, column: 45, scope: !7)
!52 = !DILocation(line: 58, column: 4, scope: !7)
