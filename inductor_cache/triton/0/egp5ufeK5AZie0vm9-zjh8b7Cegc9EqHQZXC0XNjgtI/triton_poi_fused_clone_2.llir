; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 1, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = and i32 %8, 16, !dbg !12
  %12 = lshr exact i32 %11, 1, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !12
  %14 = and i32 %8, 1, !dbg !12
  %15 = and i32 %8, 15, !dbg !12
  %16 = or disjoint i32 %13, %7, !dbg !13
  %17 = or disjoint i32 %7, %15, !dbg !13
  %18 = icmp slt i32 %16, 16, !dbg !14
  %19 = icmp slt i32 %17, 16, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 1, !dbg !16
  %.lobit2 = lshr exact i32 %11, 4, !dbg !17
  %22 = or disjoint i32 %21, %14, !dbg !18
  %23 = or disjoint i32 %21, %.lobit2, !dbg !18
  %24 = icmp slt i32 %22, 4, !dbg !19
  %25 = icmp slt i32 %23, 4, !dbg !19
  %26 = srem i32 %16, 4, !dbg !20
  %.frozen = freeze i32 %17, !dbg !21
  %27 = sdiv i32 %.frozen, 4, !dbg !21
  %28 = mul i32 %27, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %29 = shl i32 %16, 2, !dbg !22
  %30 = add i32 %22, %29, !dbg !23
  %31 = sext i32 %30 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = and i1 %18, %24, !dbg !25
  %34 = and i1 %19, %25, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %33) #2, !dbg !26
  %36 = bitcast i32 %35 to float, !dbg !26
  %37 = shl nsw i32 %26, 2, !dbg !27
  %38 = add i32 %37, %22, !dbg !28
  %39 = sext i32 %38 to i64, !dbg !29
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !29
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %33) #2, !dbg !30
  %42 = bitcast i32 %41 to float, !dbg !30
  %43 = fadd float %36, %42, !dbg !31
  %44 = fsub float 0.000000e+00, %43, !dbg !32
  %45 = fmul float %44, 0x3FF7154760000000, !dbg !36
  %46 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %45) #2, !dbg !36
  %47 = fadd float %46, 1.000000e+00, !dbg !37
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %47) #2, !dbg !38
  %49 = shl i32 %23, 2, !dbg !39
  %50 = add i32 %49, %.decomposed, !dbg !40
  %51 = shl i32 %27, 4, !dbg !41
  %52 = add i32 %50, %51, !dbg !42
  %53 = sext i32 %52 to i64, !dbg !43
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !43
  %55 = shl nuw nsw i32 %14, 4, !dbg !44
  %56 = or disjoint i32 %55, %10, !dbg !44
  %57 = or disjoint i32 %56, %12, !dbg !44
  %58 = and i32 %8, 31, !dbg !44
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !44
  %60 = getelementptr inbounds float, ptr addrspace(3) %59, i32 %57, !dbg !44
  %61 = bitcast float %48 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 true) #2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %62 = lshr i32 %58, 4, !dbg !44
  %63 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %62, !dbg !44
  %64 = getelementptr inbounds float, ptr addrspace(3) %63, i32 %58, !dbg !44
  %65 = load i32, ptr addrspace(3) %64, align 4, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %65, ptr addrspace(1) %54, i1 %34) #2, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3llx46elf4s5zeg77a6vi4pji77iydpez3gmphfme266cvlddh7.py", directory: "inductor_cache/3l")
!4 = !{ptr @triton_poi_fused_clone_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_2", linkageName: "triton_poi_fused_clone_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 50, scope: !7)
!26 = !DILocation(line: 32, column: 42, scope: !7)
!27 = !DILocation(line: 33, column: 37, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 42, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 47, column: 30, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = !DILocation(line: 35, column: 22, scope: !7)
!36 = !DILocation(line: 47, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 47, column: 20, scope: !33, inlinedAt: !35)
!38 = !DILocation(line: 47, column: 16, scope: !33, inlinedAt: !35)
!39 = !DILocation(line: 36, column: 32, scope: !7)
!40 = !DILocation(line: 36, column: 30, scope: !7)
!41 = !DILocation(line: 36, column: 40, scope: !7)
!42 = !DILocation(line: 36, column: 37, scope: !7)
!43 = !DILocation(line: 36, column: 25, scope: !7)
!44 = !DILocation(line: 36, column: 51, scope: !7)
!45 = !DILocation(line: 36, column: 4, scope: !7)
