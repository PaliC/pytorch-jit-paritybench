; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_leaky_relu_backward_5(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 3, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = shl i32 %7, 1, !dbg !12
  %11 = and i32 %10, 14, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 16, !dbg !14
  %15 = icmp slt i32 %13, 16, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %17 = shl i32 %16, 4, !dbg !16
  %18 = or disjoint i32 %17, %11, !dbg !17
  %19 = or disjoint i32 %17, %9, !dbg !17
  %20 = icmp slt i32 %18, 16, !dbg !18
  %21 = icmp slt i32 %19, 16, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %22 = sdiv i32 %.frozen, 4, !dbg !19
  %23 = mul i32 %22, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %23, !dbg !20
  %24 = shl i32 %12, 4, !dbg !21
  %25 = add i32 %18, %24, !dbg !22
  %26 = sext i32 %25 to i64, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !23
  %28 = and i1 %14, %20, !dbg !24
  %29 = and i1 %15, %21, !dbg !24
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %28) #2, !dbg !25
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !25
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !25
  %33 = bitcast i32 %31 to float, !dbg !25
  %34 = bitcast i32 %32 to float, !dbg !25
  %35 = fcmp ogt float %33, 0.000000e+00, !dbg !26
  %36 = fcmp ogt float %34, 0.000000e+00, !dbg !26
  %37 = shl i32 %19, 2, !dbg !27
  %38 = add i32 %37, %.decomposed, !dbg !28
  %39 = shl i32 %22, 6, !dbg !29
  %40 = add i32 %38, %39, !dbg !30
  %41 = sext i32 %40 to i64, !dbg !31
  %42 = getelementptr i1, ptr addrspace(1) %1, i64 %41, !dbg !31
  %43 = zext i1 %35 to i8, !dbg !32
  %44 = zext i1 %36 to i8, !dbg !32
  %45 = shl i32 %7, 5, !dbg !32
  %46 = and i32 %45, 224, !dbg !32
  %47 = or disjoint i32 %46, %9, !dbg !32
  %48 = and i32 %10, 254, !dbg !32
  %49 = lshr exact i32 %46, 3, !dbg !32
  %50 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %49, !dbg !32
  %51 = getelementptr i8, ptr addrspace(3) %50, i32 %47, !dbg !32
  %52 = insertelement <1 x i8> poison, i8 %43, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %51, <1 x i8> %52, i1 true) #2, !dbg !32
  %53 = or disjoint i32 %47, 16, !dbg !32
  %54 = lshr i32 %53, 3, !dbg !32
  %55 = and i32 %54, 30, !dbg !32
  %56 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %55, !dbg !32
  %57 = getelementptr i8, ptr addrspace(3) %56, i32 %53, !dbg !32
  %58 = insertelement <1 x i8> poison, i8 %44, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %57, <1 x i8> %58, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %59 = lshr i32 %10, 3, !dbg !32
  %60 = and i32 %59, 30, !dbg !32
  %61 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %60, !dbg !32
  %62 = getelementptr inbounds i8, ptr addrspace(3) %61, i32 %48, !dbg !32
  %63 = load <16 x i1>, ptr addrspace(3) %62, align 2, !dbg !32
  %64 = shufflevector <16 x i1> %63, <16 x i1> poison, <2 x i32> <i32 0, i32 8>, !dbg !32
  %65 = zext <2 x i1> %64 to <2 x i8>, !dbg !32
  %66 = bitcast <2 x i8> %65 to i16, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %66, ptr addrspace(1) %42, i1 %29) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs37vcvtluq7akbeqh6h43oags6f7phgt6ilwzcgblokc4bdi4sb.py", directory: "inductor_cache/s3")
!4 = !{ptr @triton_poi_fused_leaky_relu_backward_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_backward_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_backward_5", linkageName: "triton_poi_fused_leaky_relu_backward_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 51, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 35, column: 32, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 40, scope: !7)
!30 = !DILocation(line: 35, column: 37, scope: !7)
!31 = !DILocation(line: 35, column: 25, scope: !7)
!32 = !DILocation(line: 35, column: 51, scope: !7)
!33 = !DILocation(line: 35, column: 4, scope: !7)
