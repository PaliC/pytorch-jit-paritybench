; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__weight_norm_interface_convolution_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 28, !dbg !12
  %.lobit1 = lshr i32 %10, 5, !dbg !12
  %13 = and i32 %.lobit1, 3, !dbg !12
  %14 = or disjoint i32 %9, %12, !dbg !13
  %15 = or disjoint i32 %9, %13, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = or disjoint i32 %15, 8, !dbg !13
  %18 = or disjoint i32 %15, 12, !dbg !13
  %19 = or disjoint i32 %15, 16, !dbg !13
  %20 = or disjoint i32 %15, 20, !dbg !13
  %21 = or disjoint i32 %15, 24, !dbg !13
  %22 = or disjoint i32 %15, 28, !dbg !13
  %23 = icmp slt i32 %14, 512, !dbg !14
  %24 = icmp slt i32 %15, 512, !dbg !14
  %25 = icmp slt i32 %16, 512, !dbg !14
  %26 = icmp slt i32 %17, 512, !dbg !14
  %27 = icmp slt i32 %18, 512, !dbg !14
  %28 = icmp slt i32 %19, 512, !dbg !14
  %29 = icmp slt i32 %20, 512, !dbg !14
  %30 = icmp slt i32 %21, 512, !dbg !14
  %31 = icmp slt i32 %22, 512, !dbg !14
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %33 = shl i32 %32, 5, !dbg !16
  %34 = lshr i32 %10, 3, !dbg !17
  %35 = and i32 %34, 15, !dbg !17
  %36 = and i32 %10, 31, !dbg !17
  %37 = or disjoint i32 %33, %35, !dbg !18
  %38 = or disjoint i32 %37, 16, !dbg !18
  %39 = or disjoint i32 %33, %36, !dbg !18
  %40 = icmp slt i32 %37, 25, !dbg !19
  %41 = icmp slt i32 %38, 25, !dbg !19
  %42 = icmp slt i32 %39, 25, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %43 = sdiv i32 %.frozen, 16, !dbg !20
  %44 = mul i32 %43, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %44, !dbg !21
  %45 = shl i32 %37, 4, !dbg !22
  %46 = shl i32 %38, 4, !dbg !22
  %47 = mul i32 %43, 400, !dbg !23
  %48 = add i32 %47, %.decomposed, !dbg !24
  %49 = add i32 %48, %45, !dbg !25
  %50 = add i32 %48, %46, !dbg !25
  %51 = sext i32 %49 to i64, !dbg !26
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !26
  %53 = sext i32 %50 to i64, !dbg !26
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !26
  %55 = and i1 %23, %40, !dbg !27
  %56 = and i1 %41, %23, !dbg !27
  %57 = and i1 %24, %42, !dbg !27
  %58 = and i1 %25, %42, !dbg !27
  %59 = and i1 %26, %42, !dbg !27
  %60 = and i1 %27, %42, !dbg !27
  %61 = and i1 %28, %42, !dbg !27
  %62 = and i1 %29, %42, !dbg !27
  %63 = and i1 %30, %42, !dbg !27
  %64 = and i1 %31, %42, !dbg !27
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %55) #2, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !28
  %70 = bitcast i32 %66 to float, !dbg !28
  %71 = bitcast i32 %67 to float, !dbg !28
  %72 = bitcast i32 %68 to float, !dbg !28
  %73 = bitcast i32 %69 to float, !dbg !28
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %56) #2, !dbg !28
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !28
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !28
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !28
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !28
  %79 = bitcast i32 %75 to float, !dbg !28
  %80 = bitcast i32 %76 to float, !dbg !28
  %81 = bitcast i32 %77 to float, !dbg !28
  %82 = bitcast i32 %78 to float, !dbg !28
  %83 = sext i32 %43 to i64, !dbg !29
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !29
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %23) #2, !dbg !30
  %86 = bitcast i32 %85 to float, !dbg !30
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %23) #2, !dbg !30
  %88 = bitcast i32 %87 to float, !dbg !30
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %23) #2, !dbg !30
  %90 = bitcast i32 %89 to float, !dbg !30
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %23) #2, !dbg !30
  %92 = bitcast i32 %91 to float, !dbg !30
  %93 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !31
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %23) #2, !dbg !32
  %95 = bitcast i32 %94 to float, !dbg !32
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %23) #2, !dbg !32
  %97 = bitcast i32 %96 to float, !dbg !32
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %23) #2, !dbg !32
  %99 = bitcast i32 %98 to float, !dbg !32
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %23) #2, !dbg !32
  %101 = bitcast i32 %100 to float, !dbg !32
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %95) #2, !dbg !33
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float %97) #2, !dbg !33
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float %99) #2, !dbg !33
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float %101) #2, !dbg !33
  %106 = fmul float %102, %70, !dbg !34
  %107 = fmul float %103, %71, !dbg !34
  %108 = fmul float %104, %72, !dbg !34
  %109 = fmul float %105, %73, !dbg !34
  %110 = fmul float %102, %79, !dbg !34
  %111 = fmul float %103, %80, !dbg !34
  %112 = fmul float %104, %81, !dbg !34
  %113 = fmul float %105, %82, !dbg !34
  %114 = mul i32 %15, 25, !dbg !35
  %115 = mul i32 %16, 25, !dbg !35
  %116 = mul i32 %17, 25, !dbg !35
  %117 = mul i32 %18, 25, !dbg !35
  %118 = mul i32 %19, 25, !dbg !35
  %119 = mul i32 %20, 25, !dbg !35
  %120 = mul i32 %21, 25, !dbg !35
  %121 = mul i32 %22, 25, !dbg !35
  %122 = add i32 %39, %114, !dbg !36
  %123 = add i32 %39, %115, !dbg !36
  %124 = add i32 %39, %116, !dbg !36
  %125 = add i32 %39, %117, !dbg !36
  %126 = add i32 %39, %118, !dbg !36
  %127 = add i32 %39, %119, !dbg !36
  %128 = add i32 %39, %120, !dbg !36
  %129 = add i32 %39, %121, !dbg !36
  %130 = sext i32 %122 to i64, !dbg !37
  %131 = getelementptr float, ptr addrspace(1) %3, i64 %130, !dbg !37
  %132 = sext i32 %123 to i64, !dbg !37
  %133 = getelementptr float, ptr addrspace(1) %3, i64 %132, !dbg !37
  %134 = sext i32 %124 to i64, !dbg !37
  %135 = getelementptr float, ptr addrspace(1) %3, i64 %134, !dbg !37
  %136 = sext i32 %125 to i64, !dbg !37
  %137 = getelementptr float, ptr addrspace(1) %3, i64 %136, !dbg !37
  %138 = sext i32 %126 to i64, !dbg !37
  %139 = getelementptr float, ptr addrspace(1) %3, i64 %138, !dbg !37
  %140 = sext i32 %127 to i64, !dbg !37
  %141 = getelementptr float, ptr addrspace(1) %3, i64 %140, !dbg !37
  %142 = sext i32 %128 to i64, !dbg !37
  %143 = getelementptr float, ptr addrspace(1) %3, i64 %142, !dbg !37
  %144 = sext i32 %129 to i64, !dbg !37
  %145 = getelementptr float, ptr addrspace(1) %3, i64 %144, !dbg !37
  %146 = shl i32 %10, 7, !dbg !38
  %147 = and i32 %146, 896, !dbg !38
  %148 = or disjoint i32 %147, %35, !dbg !38
  %149 = and i32 %10, 127, !dbg !38
  %150 = lshr exact i32 %147, 5, !dbg !38
  %151 = add nuw nsw i32 %150, %148, !dbg !38
  %152 = zext nneg i32 %151 to i64, !dbg !38
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %152, !dbg !38
  %154 = bitcast float %106 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #2, !dbg !38
  %155 = or disjoint i32 %148, 32, !dbg !38
  %156 = lshr i32 %155, 5, !dbg !38
  %157 = add nuw nsw i32 %156, %155, !dbg !38
  %158 = zext nneg i32 %157 to i64, !dbg !38
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %158, !dbg !38
  %160 = bitcast float %107 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !38
  %161 = or disjoint i32 %148, 64, !dbg !38
  %162 = lshr i32 %161, 5, !dbg !38
  %163 = add nuw nsw i32 %162, %161, !dbg !38
  %164 = zext nneg i32 %163 to i64, !dbg !38
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %164, !dbg !38
  %166 = bitcast float %108 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %166, i1 true) #2, !dbg !38
  %167 = or disjoint i32 %148, 96, !dbg !38
  %168 = lshr i32 %167, 5, !dbg !38
  %169 = add nuw nsw i32 %168, %167, !dbg !38
  %170 = zext nneg i32 %169 to i64, !dbg !38
  %171 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %170, !dbg !38
  %172 = bitcast float %109 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %171, <1 x i32> %172, i1 true) #2, !dbg !38
  %173 = or disjoint i32 %148, 16, !dbg !38
  %174 = add nuw nsw i32 %173, %150, !dbg !38
  %175 = zext nneg i32 %174 to i64, !dbg !38
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %175, !dbg !38
  %177 = bitcast float %110 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #2, !dbg !38
  %178 = or disjoint i32 %148, 48, !dbg !38
  %179 = lshr i32 %178, 5, !dbg !38
  %180 = add nuw nsw i32 %179, %178, !dbg !38
  %181 = zext nneg i32 %180 to i64, !dbg !38
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %181, !dbg !38
  %183 = bitcast float %111 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #2, !dbg !38
  %184 = or disjoint i32 %148, 80, !dbg !38
  %185 = lshr i32 %184, 5, !dbg !38
  %186 = add nuw nsw i32 %185, %184, !dbg !38
  %187 = zext nneg i32 %186 to i64, !dbg !38
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %187, !dbg !38
  %189 = bitcast float %112 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %189, i1 true) #2, !dbg !38
  %190 = or disjoint i32 %148, 112, !dbg !38
  %191 = lshr i32 %190, 5, !dbg !38
  %192 = add nuw nsw i32 %191, %190, !dbg !38
  %193 = zext nneg i32 %192 to i64, !dbg !38
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %193, !dbg !38
  %195 = bitcast float %113 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %196 = lshr i32 %149, 5, !dbg !38
  %197 = add nuw nsw i32 %196, %149, !dbg !38
  %198 = zext nneg i32 %197 to i64, !dbg !38
  %199 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %198, !dbg !38
  %200 = load i32, ptr addrspace(3) %199, align 4, !dbg !38
  %201 = or disjoint i32 %149, 128, !dbg !38
  %202 = lshr i32 %201, 5, !dbg !38
  %203 = add nuw nsw i32 %202, %201, !dbg !38
  %204 = zext nneg i32 %203 to i64, !dbg !38
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %204, !dbg !38
  %206 = load i32, ptr addrspace(3) %205, align 4, !dbg !38
  %207 = or disjoint i32 %149, 256, !dbg !38
  %208 = lshr i32 %207, 5, !dbg !38
  %209 = add nuw nsw i32 %208, %207, !dbg !38
  %210 = zext nneg i32 %209 to i64, !dbg !38
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %210, !dbg !38
  %212 = load i32, ptr addrspace(3) %211, align 4, !dbg !38
  %213 = or disjoint i32 %149, 384, !dbg !38
  %214 = lshr i32 %213, 5, !dbg !38
  %215 = add nuw nsw i32 %214, %213, !dbg !38
  %216 = zext nneg i32 %215 to i64, !dbg !38
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %216, !dbg !38
  %218 = load i32, ptr addrspace(3) %217, align 4, !dbg !38
  %219 = or disjoint i32 %149, 512, !dbg !38
  %220 = lshr i32 %219, 5, !dbg !38
  %221 = add nuw nsw i32 %220, %219, !dbg !38
  %222 = zext nneg i32 %221 to i64, !dbg !38
  %223 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %222, !dbg !38
  %224 = load i32, ptr addrspace(3) %223, align 4, !dbg !38
  %225 = or disjoint i32 %149, 640, !dbg !38
  %226 = lshr i32 %225, 5, !dbg !38
  %227 = add nuw nsw i32 %226, %225, !dbg !38
  %228 = zext nneg i32 %227 to i64, !dbg !38
  %229 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %228, !dbg !38
  %230 = load i32, ptr addrspace(3) %229, align 4, !dbg !38
  %231 = or disjoint i32 %149, 768, !dbg !38
  %232 = lshr i32 %231, 5, !dbg !38
  %233 = add nuw nsw i32 %232, %231, !dbg !38
  %234 = zext nneg i32 %233 to i64, !dbg !38
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %234, !dbg !38
  %236 = load i32, ptr addrspace(3) %235, align 4, !dbg !38
  %237 = or disjoint i32 %149, 896, !dbg !38
  %238 = lshr i32 %237, 5, !dbg !38
  %239 = add nuw nsw i32 %238, %237, !dbg !38
  %240 = zext nneg i32 %239 to i64, !dbg !38
  %241 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %240, !dbg !38
  %242 = load i32, ptr addrspace(3) %241, align 4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %200, ptr addrspace(1) %131, i1 %57) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %206, ptr addrspace(1) %133, i1 %58) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %212, ptr addrspace(1) %135, i1 %59) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %218, ptr addrspace(1) %137, i1 %60) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %224, ptr addrspace(1) %139, i1 %61) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %230, ptr addrspace(1) %141, i1 %62) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %236, ptr addrspace(1) %143, i1 %63) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %242, ptr addrspace(1) %145, i1 %64) #2, !dbg !38
  %243 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !39
  %244 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !39
  %245 = bitcast float %106 to i32, !dbg !40
  %246 = bitcast float %107 to i32, !dbg !40
  %247 = bitcast float %108 to i32, !dbg !40
  %248 = bitcast float %109 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %245, i32 %246, i32 %247, i32 %248, ptr addrspace(1) %243, i1 %55) #2, !dbg !40
  %249 = bitcast float %110 to i32, !dbg !40
  %250 = bitcast float %111 to i32, !dbg !40
  %251 = bitcast float %112 to i32, !dbg !40
  %252 = bitcast float %113 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %249, i32 %250, i32 %251, i32 %252, ptr addrspace(1) %244, i1 %56) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cc7c4xkfiennpwowvw2xe6gtmgytl7ske7ff7lxlbln627f7zez2.py", directory: "inductor_cache/c7")
!4 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__weight_norm_interface_convolution_9", linkageName: "triton_poi_fused__weight_norm_interface_convolution_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 47, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 60, scope: !7)
!28 = !DILocation(line: 32, column: 52, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 33, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 25, scope: !7)
!38 = !DILocation(line: 37, column: 44, scope: !7)
!39 = !DILocation(line: 38, column: 25, scope: !7)
!40 = !DILocation(line: 38, column: 53, scope: !7)
!41 = !DILocation(line: 38, column: 4, scope: !7)
