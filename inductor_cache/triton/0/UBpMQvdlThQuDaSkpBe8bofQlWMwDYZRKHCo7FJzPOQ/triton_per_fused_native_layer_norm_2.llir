; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_layer_norm_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = and i32 %11, 1, !dbg !12
  %14 = shl nuw nsw i32 %13, 2, !dbg !12
  %15 = lshr i32 %11, 5, !dbg !12
  %16 = and i32 %11, 7, !dbg !12
  %17 = or disjoint i32 %10, %14, !dbg !13
  %18 = icmp slt i32 %17, 256, !dbg !14
  %19 = lshr i32 %11, 1, !dbg !15
  %20 = and i32 %19, 31, !dbg !15
  %.frozen = freeze i32 %17, !dbg !16
  %21 = sdiv i32 %.frozen, 64, !dbg !16
  %22 = mul i32 %21, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %22, !dbg !17
  %23 = shl nuw nsw i32 %20, 6, !dbg !18
  %24 = add nsw i32 %.decomposed, %23, !dbg !19
  %25 = shl i32 %21, 11, !dbg !20
  %26 = add i32 %24, %25, !dbg !21
  %27 = sext i32 %26 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !22
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !23
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !23
  %34 = bitcast i32 %30 to float, !dbg !23
  %35 = bitcast i32 %31 to float, !dbg !23
  %36 = bitcast i32 %32 to float, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = zext nneg i32 %20 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !24
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !26
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #5, !dbg !27
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #5, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #5, !dbg !27
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #5, !dbg !27
  %49 = select i1 %18, float %34, float 0.000000e+00, !dbg !28
  %50 = select i1 %18, float %35, float 0.000000e+00, !dbg !28
  %51 = select i1 %18, float %36, float 0.000000e+00, !dbg !28
  %52 = select i1 %18, float %37, float 0.000000e+00, !dbg !28
  %53 = bitcast float %49 to i32, !dbg !29
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 16, i32 31), !dbg !29
  %55 = bitcast i32 %54 to float, !dbg !29
  %56 = fadd float %49, %55, !dbg !33
  %57 = bitcast float %56 to i32, !dbg !29
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 8, i32 31), !dbg !29
  %59 = bitcast i32 %58 to float, !dbg !29
  %60 = fadd float %56, %59, !dbg !33
  %61 = bitcast float %60 to i32, !dbg !29
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 4, i32 31), !dbg !29
  %63 = bitcast i32 %62 to float, !dbg !29
  %64 = fadd float %60, %63, !dbg !33
  %65 = bitcast float %64 to i32, !dbg !29
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 2, i32 31), !dbg !29
  %67 = bitcast i32 %66 to float, !dbg !29
  %68 = fadd float %64, %67, !dbg !33
  %69 = bitcast float %50 to i32, !dbg !29
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 16, i32 31), !dbg !29
  %71 = bitcast i32 %70 to float, !dbg !29
  %72 = fadd float %50, %71, !dbg !33
  %73 = bitcast float %72 to i32, !dbg !29
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 8, i32 31), !dbg !29
  %75 = bitcast i32 %74 to float, !dbg !29
  %76 = fadd float %72, %75, !dbg !33
  %77 = bitcast float %76 to i32, !dbg !29
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 4, i32 31), !dbg !29
  %79 = bitcast i32 %78 to float, !dbg !29
  %80 = fadd float %76, %79, !dbg !33
  %81 = bitcast float %80 to i32, !dbg !29
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 2, i32 31), !dbg !29
  %83 = bitcast i32 %82 to float, !dbg !29
  %84 = fadd float %80, %83, !dbg !33
  %85 = bitcast float %51 to i32, !dbg !29
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 16, i32 31), !dbg !29
  %87 = bitcast i32 %86 to float, !dbg !29
  %88 = fadd float %51, %87, !dbg !33
  %89 = bitcast float %88 to i32, !dbg !29
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 8, i32 31), !dbg !29
  %91 = bitcast i32 %90 to float, !dbg !29
  %92 = fadd float %88, %91, !dbg !33
  %93 = bitcast float %92 to i32, !dbg !29
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 4, i32 31), !dbg !29
  %95 = bitcast i32 %94 to float, !dbg !29
  %96 = fadd float %92, %95, !dbg !33
  %97 = bitcast float %96 to i32, !dbg !29
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 2, i32 31), !dbg !29
  %99 = bitcast i32 %98 to float, !dbg !29
  %100 = fadd float %96, %99, !dbg !33
  %101 = bitcast float %52 to i32, !dbg !29
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 16, i32 31), !dbg !29
  %103 = bitcast i32 %102 to float, !dbg !29
  %104 = fadd float %52, %103, !dbg !33
  %105 = bitcast float %104 to i32, !dbg !29
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 8, i32 31), !dbg !29
  %107 = bitcast i32 %106 to float, !dbg !29
  %108 = fadd float %104, %107, !dbg !33
  %109 = bitcast float %108 to i32, !dbg !29
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 4, i32 31), !dbg !29
  %111 = bitcast i32 %110 to float, !dbg !29
  %112 = fadd float %108, %111, !dbg !33
  %113 = bitcast float %112 to i32, !dbg !29
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 2, i32 31), !dbg !29
  %115 = bitcast i32 %114 to float, !dbg !29
  %116 = fadd float %112, %115, !dbg !33
  %117 = icmp samesign ult i32 %12, 2, !dbg !29
  %118 = and i32 %15, 1, !dbg !29
  %119 = shl nuw nsw i32 %13, 3, !dbg !29
  %120 = or disjoint i32 %119, %118, !dbg !29
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %120, !dbg !29
  %122 = bitcast float %68 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 %117) #5, !dbg !29
  %123 = or disjoint i32 %119, 2, !dbg !29
  %124 = or disjoint i32 %123, %118, !dbg !29
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !29
  %126 = bitcast float %84 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 %117) #5, !dbg !29
  %127 = or disjoint i32 %119, 4, !dbg !29
  %128 = or disjoint i32 %127, %118, !dbg !29
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %128, !dbg !29
  %130 = bitcast float %100 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 %117) #5, !dbg !29
  %131 = or disjoint i32 %119, 6, !dbg !29
  %132 = or disjoint i32 %131, %118, !dbg !29
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i32 %132, !dbg !29
  %134 = bitcast float %116 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 %117) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %135 = icmp slt i32 %11, 16, !dbg !29
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !29
  %137 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %136, i1 %135) #5, !dbg !29
  %138 = bitcast i32 %137 to float, !dbg !29
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 1, i32 31), !dbg !29
  %140 = bitcast i32 %139 to float, !dbg !29
  %141 = fadd float %138, %140, !dbg !33
  %142 = icmp eq i32 %13, 0, !dbg !29
  %143 = and i1 %135, %142, !dbg !29
  %144 = bitcast float %141 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %144, i1 %143) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !29
  %146 = load float, ptr addrspace(3) %145, align 16, !dbg !29
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !29
  %148 = load float, ptr addrspace(3) %147, align 8, !dbg !29
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %127, !dbg !29
  %150 = load float, ptr addrspace(3) %149, align 16, !dbg !29
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %131, !dbg !29
  %152 = load float, ptr addrspace(3) %151, align 8, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !35
  %154 = bitcast float %146 to i32, !dbg !35
  %155 = bitcast float %148 to i32, !dbg !35
  %156 = bitcast float %150 to i32, !dbg !35
  %157 = bitcast float %152 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %153, i32 %154, i32 %155, i32 %156, i32 %157, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !35
  %159 = load float, ptr addrspace(3) %158, align 4, !dbg !35
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float 3.200000e+01) #5, !dbg !35
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float 3.200000e+01) #5, !dbg !35
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 3.200000e+01) #5, !dbg !35
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float 3.200000e+01) #5, !dbg !35
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float 3.200000e+01) #5, !dbg !35
  %165 = fsub float %34, %161, !dbg !36
  %166 = fsub float %35, %162, !dbg !36
  %167 = fsub float %36, %163, !dbg !36
  %168 = fsub float %37, %164, !dbg !36
  %169 = fmul float %165, %165, !dbg !37
  %170 = fmul float %166, %166, !dbg !37
  %171 = fmul float %167, %167, !dbg !37
  %172 = fmul float %168, %168, !dbg !37
  %173 = select i1 %18, float %169, float 0.000000e+00, !dbg !38
  %174 = select i1 %18, float %170, float 0.000000e+00, !dbg !38
  %175 = select i1 %18, float %171, float 0.000000e+00, !dbg !38
  %176 = select i1 %18, float %172, float 0.000000e+00, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %177 = bitcast float %173 to i32, !dbg !39
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 16, i32 31), !dbg !39
  %179 = bitcast i32 %178 to float, !dbg !39
  %180 = fadd float %173, %179, !dbg !41
  %181 = bitcast float %180 to i32, !dbg !39
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 8, i32 31), !dbg !39
  %183 = bitcast i32 %182 to float, !dbg !39
  %184 = fadd float %180, %183, !dbg !41
  %185 = bitcast float %184 to i32, !dbg !39
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 4, i32 31), !dbg !39
  %187 = bitcast i32 %186 to float, !dbg !39
  %188 = fadd float %184, %187, !dbg !41
  %189 = bitcast float %188 to i32, !dbg !39
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 2, i32 31), !dbg !39
  %191 = bitcast i32 %190 to float, !dbg !39
  %192 = fadd float %188, %191, !dbg !41
  %193 = bitcast float %174 to i32, !dbg !39
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 16, i32 31), !dbg !39
  %195 = bitcast i32 %194 to float, !dbg !39
  %196 = fadd float %174, %195, !dbg !41
  %197 = bitcast float %196 to i32, !dbg !39
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 8, i32 31), !dbg !39
  %199 = bitcast i32 %198 to float, !dbg !39
  %200 = fadd float %196, %199, !dbg !41
  %201 = bitcast float %200 to i32, !dbg !39
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 4, i32 31), !dbg !39
  %203 = bitcast i32 %202 to float, !dbg !39
  %204 = fadd float %200, %203, !dbg !41
  %205 = bitcast float %204 to i32, !dbg !39
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 2, i32 31), !dbg !39
  %207 = bitcast i32 %206 to float, !dbg !39
  %208 = fadd float %204, %207, !dbg !41
  %209 = bitcast float %175 to i32, !dbg !39
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 16, i32 31), !dbg !39
  %211 = bitcast i32 %210 to float, !dbg !39
  %212 = fadd float %175, %211, !dbg !41
  %213 = bitcast float %212 to i32, !dbg !39
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 8, i32 31), !dbg !39
  %215 = bitcast i32 %214 to float, !dbg !39
  %216 = fadd float %212, %215, !dbg !41
  %217 = bitcast float %216 to i32, !dbg !39
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 4, i32 31), !dbg !39
  %219 = bitcast i32 %218 to float, !dbg !39
  %220 = fadd float %216, %219, !dbg !41
  %221 = bitcast float %220 to i32, !dbg !39
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 2, i32 31), !dbg !39
  %223 = bitcast i32 %222 to float, !dbg !39
  %224 = fadd float %220, %223, !dbg !41
  %225 = bitcast float %176 to i32, !dbg !39
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 16, i32 31), !dbg !39
  %227 = bitcast i32 %226 to float, !dbg !39
  %228 = fadd float %176, %227, !dbg !41
  %229 = bitcast float %228 to i32, !dbg !39
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 8, i32 31), !dbg !39
  %231 = bitcast i32 %230 to float, !dbg !39
  %232 = fadd float %228, %231, !dbg !41
  %233 = bitcast float %232 to i32, !dbg !39
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 4, i32 31), !dbg !39
  %235 = bitcast i32 %234 to float, !dbg !39
  %236 = fadd float %232, %235, !dbg !41
  %237 = bitcast float %236 to i32, !dbg !39
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 2, i32 31), !dbg !39
  %239 = bitcast i32 %238 to float, !dbg !39
  %240 = fadd float %236, %239, !dbg !41
  %241 = bitcast float %192 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %241, i1 %117) #5, !dbg !39
  %242 = bitcast float %208 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %242, i1 %117) #5, !dbg !39
  %243 = bitcast float %224 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %243, i1 %117) #5, !dbg !39
  %244 = bitcast float %240 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %244, i1 %117) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %245 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %136, i1 %135) #5, !dbg !39
  %246 = bitcast i32 %245 to float, !dbg !39
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 1, i32 31), !dbg !39
  %248 = bitcast i32 %247 to float, !dbg !39
  %249 = fadd float %246, %248, !dbg !41
  %250 = bitcast float %249 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %250, i1 %143) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %251 = load float, ptr addrspace(3) %145, align 16, !dbg !39
  %252 = load float, ptr addrspace(3) %147, align 8, !dbg !39
  %253 = load float, ptr addrspace(3) %149, align 16, !dbg !39
  %254 = load float, ptr addrspace(3) %151, align 8, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %255 = bitcast float %251 to i32, !dbg !42
  %256 = bitcast float %252 to i32, !dbg !42
  %257 = bitcast float %253 to i32, !dbg !42
  %258 = bitcast float %254 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %153, i32 %255, i32 %256, i32 %257, i32 %258, i1 true) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %259 = load float, ptr addrspace(3) %158, align 4, !dbg !42
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %259, float 3.200000e+01) #5, !dbg !43
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %251, float 3.200000e+01) #5, !dbg !43
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %252, float 3.200000e+01) #5, !dbg !43
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %253, float 3.200000e+01) #5, !dbg !43
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %254, float 3.200000e+01) #5, !dbg !43
  %265 = fadd float %260, 0x3EE4F8B580000000, !dbg !44
  %266 = fadd float %261, 0x3EE4F8B580000000, !dbg !44
  %267 = fadd float %262, 0x3EE4F8B580000000, !dbg !44
  %268 = fadd float %263, 0x3EE4F8B580000000, !dbg !44
  %269 = fadd float %264, 0x3EE4F8B580000000, !dbg !44
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i = icmp eq i32 %270, 0, !dbg !42
  br i1 %.not.i, label %273, label %271, !dbg !42

271:                                              ; preds = %8
  %272 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %265), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

273:                                              ; preds = %8
  %274 = tail call float @llvm.nvvm.rsqrt.approx.f(float %265), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

__nv_rsqrtf.exit:                                 ; preds = %271, %273
  %.0.i = phi float [ %272, %271 ], [ %274, %273 ], !dbg !42
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i10 = icmp eq i32 %275, 0, !dbg !42
  br i1 %.not.i10, label %278, label %276, !dbg !42

276:                                              ; preds = %__nv_rsqrtf.exit
  %277 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %266), !dbg !42
  br label %__nv_rsqrtf.exit12, !dbg !42

278:                                              ; preds = %__nv_rsqrtf.exit
  %279 = tail call float @llvm.nvvm.rsqrt.approx.f(float %266), !dbg !42
  br label %__nv_rsqrtf.exit12, !dbg !42

__nv_rsqrtf.exit12:                               ; preds = %276, %278
  %.0.i11 = phi float [ %277, %276 ], [ %279, %278 ], !dbg !42
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i13 = icmp eq i32 %280, 0, !dbg !42
  br i1 %.not.i13, label %283, label %281, !dbg !42

281:                                              ; preds = %__nv_rsqrtf.exit12
  %282 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %267), !dbg !42
  br label %__nv_rsqrtf.exit15, !dbg !42

283:                                              ; preds = %__nv_rsqrtf.exit12
  %284 = tail call float @llvm.nvvm.rsqrt.approx.f(float %267), !dbg !42
  br label %__nv_rsqrtf.exit15, !dbg !42

__nv_rsqrtf.exit15:                               ; preds = %281, %283
  %.0.i14 = phi float [ %282, %281 ], [ %284, %283 ], !dbg !42
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i16 = icmp eq i32 %285, 0, !dbg !42
  br i1 %.not.i16, label %288, label %286, !dbg !42

286:                                              ; preds = %__nv_rsqrtf.exit15
  %287 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %268), !dbg !42
  br label %__nv_rsqrtf.exit18, !dbg !42

288:                                              ; preds = %__nv_rsqrtf.exit15
  %289 = tail call float @llvm.nvvm.rsqrt.approx.f(float %268), !dbg !42
  br label %__nv_rsqrtf.exit18, !dbg !42

__nv_rsqrtf.exit18:                               ; preds = %286, %288
  %.0.i17 = phi float [ %287, %286 ], [ %289, %288 ], !dbg !42
  %290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i19 = icmp eq i32 %290, 0, !dbg !42
  br i1 %.not.i19, label %293, label %291, !dbg !42

291:                                              ; preds = %__nv_rsqrtf.exit18
  %292 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %269), !dbg !42
  br label %__nv_rsqrtf.exit21, !dbg !42

293:                                              ; preds = %__nv_rsqrtf.exit18
  %294 = tail call float @llvm.nvvm.rsqrt.approx.f(float %269), !dbg !42
  br label %__nv_rsqrtf.exit21, !dbg !42

__nv_rsqrtf.exit21:                               ; preds = %291, %293
  %.0.i20 = phi float [ %292, %291 ], [ %294, %293 ], !dbg !42
  %295 = bitcast i32 %48 to float, !dbg !27
  %296 = bitcast i32 %43 to float, !dbg !25
  %297 = shl i32 %11, 2, !dbg !15
  %298 = and i32 %297, 28, !dbg !15
  %299 = lshr i32 %11, 3, !dbg !12
  %300 = and i32 %299, 7, !dbg !12
  %301 = or disjoint i32 %10, %300, !dbg !13
  %302 = icmp slt i32 %301, 256, !dbg !14
  %303 = or disjoint i32 %10, %16, !dbg !13
  %304 = icmp slt i32 %303, 256, !dbg !14
  %305 = fmul float %165, %.0.i11, !dbg !45
  %306 = fmul float %166, %.0.i14, !dbg !45
  %307 = fmul float %167, %.0.i17, !dbg !45
  %308 = fmul float %168, %.0.i20, !dbg !45
  %309 = fmul float %305, %296, !dbg !46
  %310 = fmul float %306, %296, !dbg !46
  %311 = fmul float %307, %296, !dbg !46
  %312 = fmul float %308, %296, !dbg !46
  %313 = fadd float %309, %295, !dbg !47
  %314 = fadd float %310, %295, !dbg !47
  %315 = fadd float %311, %295, !dbg !47
  %316 = fadd float %312, %295, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %317 = sext i32 %303 to i64, !dbg !49
  %318 = getelementptr float, ptr addrspace(1) %0, i64 %317, !dbg !49
  %319 = lshr i32 %12, 3, !dbg !50
  %320 = shl nuw nsw i32 %118, 2, !dbg !50
  %321 = or disjoint i32 %320, %319, !dbg !50
  %322 = icmp eq i32 %321, 0, !dbg !50
  %323 = bitcast float %.0.i to i32, !dbg !50
  %324 = and i1 %322, %304, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %323, ptr addrspace(1) %318, i1 %324) #5, !dbg !50
  %325 = shl i32 %301, 5, !dbg !51
  %326 = or disjoint i32 %325, %298, !dbg !52
  %327 = sext i32 %326 to i64, !dbg !53
  %328 = getelementptr float, ptr addrspace(1) %5, i64 %327, !dbg !53
  %329 = shl nuw nsw i32 %13, 7, !dbg !54
  %330 = or disjoint i32 %329, %20, !dbg !54
  %331 = and i32 %297, 252, !dbg !54
  %.idx = shl nuw nsw i32 %13, 6, !dbg !54
  %332 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !54
  %333 = getelementptr inbounds float, ptr addrspace(3) %332, i32 %330, !dbg !54
  %334 = bitcast float %313 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %334, i1 true) #5, !dbg !54
  %335 = or disjoint i32 %330, 32, !dbg !54
  %336 = lshr i32 %335, 3, !dbg !54
  %337 = and i32 %336, 20, !dbg !54
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i32 %337, !dbg !54
  %339 = getelementptr float, ptr addrspace(3) %338, i32 %335, !dbg !54
  %340 = bitcast float %314 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %340, i1 true) #5, !dbg !54
  %341 = or disjoint i32 %330, 64, !dbg !54
  %342 = lshr i32 %341, 3, !dbg !54
  %343 = and i32 %342, 24, !dbg !54
  %344 = getelementptr float, ptr addrspace(3) @global_smem, i32 %343, !dbg !54
  %345 = getelementptr float, ptr addrspace(3) %344, i32 %341, !dbg !54
  %346 = bitcast float %315 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %346, i1 true) #5, !dbg !54
  %347 = or disjoint i32 %330, 96, !dbg !54
  %348 = lshr i32 %347, 3, !dbg !54
  %349 = and i32 %348, 28, !dbg !54
  %350 = getelementptr float, ptr addrspace(3) @global_smem, i32 %349, !dbg !54
  %351 = getelementptr float, ptr addrspace(3) %350, i32 %347, !dbg !54
  %352 = bitcast float %316 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %351, <1 x i32> %352, i1 true) #5, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %353 = lshr i32 %297, 3, !dbg !54
  %354 = and i32 %353, 28, !dbg !54
  %355 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %354, !dbg !54
  %356 = getelementptr inbounds float, ptr addrspace(3) %355, i32 %331, !dbg !54
  %.extract = load i32, ptr addrspace(3) %356, align 16, !dbg !54
  %357 = getelementptr inbounds i8, ptr addrspace(3) %356, i32 4, !dbg !54
  %.extract7 = load i32, ptr addrspace(3) %357, align 4, !dbg !54
  %358 = getelementptr inbounds i8, ptr addrspace(3) %356, i32 8, !dbg !54
  %.extract8 = load i32, ptr addrspace(3) %358, align 8, !dbg !54
  %359 = getelementptr inbounds i8, ptr addrspace(3) %356, i32 12, !dbg !54
  %.extract9 = load i32, ptr addrspace(3) %359, align 4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract8, i32 %.extract9, ptr addrspace(1) %328, i1 %302) #5, !dbg !54
  %360 = getelementptr float, ptr addrspace(1) %4, i64 %317, !dbg !55
  %361 = bitcast float %160 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %361, ptr addrspace(1) %360, i1 %324) #5, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvsc36iptsv2cfg5djtaknliti74ddda4nwuwx446wlek6af2hpp.py", directory: "inductor_cache/vs")
!4 = !{ptr @triton_per_fused_native_layer_norm_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_layer_norm_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_layer_norm_2", linkageName: "triton_per_fused_native_layer_norm_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 48, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 53, scope: !7)
!24 = !DILocation(line: 34, column: 31, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 36, scope: !7)
!28 = !DILocation(line: 39, column: 33, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = !DILocation(line: 40, column: 24, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !32)
!34 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!35 = !DILocation(line: 43, column: 19, scope: !7)
!36 = !DILocation(line: 44, column: 19, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 35, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !40)
!40 = !DILocation(line: 48, column: 26, scope: !7)
!41 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !40)
!42 = !DILocation(line: 53, column: 28, scope: !7)
!43 = !DILocation(line: 50, column: 20, scope: !7)
!44 = !DILocation(line: 52, column: 20, scope: !7)
!45 = !DILocation(line: 55, column: 20, scope: !7)
!46 = !DILocation(line: 56, column: 20, scope: !7)
!47 = !DILocation(line: 57, column: 20, scope: !7)
!48 = !DILocation(line: 58, column: 4, scope: !7)
!49 = !DILocation(line: 59, column: 28, scope: !7)
!50 = !DILocation(line: 59, column: 40, scope: !7)
!51 = !DILocation(line: 60, column: 33, scope: !7)
!52 = !DILocation(line: 60, column: 30, scope: !7)
!53 = !DILocation(line: 60, column: 25, scope: !7)
!54 = !DILocation(line: 60, column: 45, scope: !7)
!55 = !DILocation(line: 61, column: 25, scope: !7)
!56 = !DILocation(line: 61, column: 37, scope: !7)
!57 = !DILocation(line: 61, column: 4, scope: !7)
