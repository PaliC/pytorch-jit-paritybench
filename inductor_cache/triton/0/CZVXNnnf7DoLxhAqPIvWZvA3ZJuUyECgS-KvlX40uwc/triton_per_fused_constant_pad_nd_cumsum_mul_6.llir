; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_constant_pad_nd_cumsum_mul_6(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 3, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 6, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %12 = lshr i32 %7, 5, !dbg !15
  %13 = lshr i32 %7, 2, !dbg !15
  %14 = and i32 %13, 15, !dbg !15
  %15 = icmp samesign ult i32 %14, 9, !dbg !16
  %.frozen = freeze i32 %10, !dbg !17
  %16 = sdiv i32 %.frozen, 16, !dbg !17
  %17 = mul i32 %16, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %17, !dbg !18
  %.not = icmp eq i32 %14, 0, !dbg !19
  %18 = shl nuw nsw i32 %14, 4, !dbg !20
  %19 = shl i32 %16, 7, !dbg !21
  %20 = add nsw i32 %.decomposed, %18, !dbg !22
  %21 = add nsw i32 %20, -16, !dbg !23
  %22 = add i32 %21, %19, !dbg !24
  %23 = sext i32 %22 to i64, !dbg !25
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !25
  %25 = add nsw i32 %14, -1, !dbg !26
  %26 = icmp ult i32 %25, 8, !dbg !26
  %27 = and i1 %26, %11, !dbg !27
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #3, !dbg !28
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !28
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !28
  %31 = bitcast i32 %29 to float, !dbg !28
  %32 = bitcast i32 %30 to float, !dbg !28
  %33 = fmul float %31, 0x4023FF7CE0000000, !dbg !29
  %34 = fmul float %32, 0x4023FF7CE0000000, !dbg !29
  %35 = select i1 %.not, float 0x3F50624DE0000000, float %33, !dbg !30
  %36 = select i1 %.not, float 0x3F50624DE0000000, float %34, !dbg !30
  %37 = and i32 %7, 3, !dbg !31
  %38 = and i32 %13, 7, !dbg !31
  %39 = and i32 %12, 1, !dbg !31
  %40 = bitcast float %35 to i32, !dbg !31
  %41 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %40, i32 4, i32 0), !dbg !31
  %42 = bitcast i32 %41 to float, !dbg !31
  %.not1 = icmp eq i32 %38, 0, !dbg !31
  %43 = fadd float %35, %42, !dbg !32
  %44 = select i1 %.not1, float %35, float %43, !dbg !31
  %45 = bitcast float %44 to i32, !dbg !31
  %46 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %45, i32 8, i32 0), !dbg !31
  %47 = bitcast i32 %46 to float, !dbg !31
  %48 = icmp samesign ugt i32 %38, 1, !dbg !31
  %49 = fadd float %44, %47, !dbg !32
  %50 = select i1 %48, float %49, float %44, !dbg !31
  %51 = bitcast float %50 to i32, !dbg !31
  %52 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %51, i32 16, i32 0), !dbg !31
  %53 = bitcast i32 %52 to float, !dbg !31
  %54 = icmp samesign ugt i32 %38, 3, !dbg !31
  %55 = fadd float %50, %53, !dbg !32
  %56 = select i1 %54, float %55, float %50, !dbg !31
  %57 = bitcast float %36 to i32, !dbg !31
  %58 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %57, i32 4, i32 0), !dbg !31
  %59 = bitcast i32 %58 to float, !dbg !31
  %60 = fadd float %36, %59, !dbg !32
  %61 = select i1 %.not1, float %36, float %60, !dbg !31
  %62 = bitcast float %61 to i32, !dbg !31
  %63 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %62, i32 8, i32 0), !dbg !31
  %64 = bitcast i32 %63 to float, !dbg !31
  %65 = fadd float %61, %64, !dbg !32
  %66 = select i1 %48, float %65, float %61, !dbg !31
  %67 = bitcast float %66 to i32, !dbg !31
  %68 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %67, i32 16, i32 0), !dbg !31
  %69 = bitcast i32 %68 to float, !dbg !31
  %70 = fadd float %66, %69, !dbg !32
  %71 = select i1 %54, float %70, float %66, !dbg !31
  %72 = icmp eq i32 %38, 7, !dbg !31
  %73 = shl nuw nsw i32 %39, 2, !dbg !31
  %74 = or disjoint i32 %73, %37, !dbg !31
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !31
  %76 = bitcast float %56 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 %72) #3, !dbg !31
  %77 = or disjoint i32 %74, 8, !dbg !31
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i32 %77, !dbg !31
  %79 = bitcast float %71 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 %72) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.not2 = icmp eq i32 %39, 0, !dbg !31
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i32 %37, !dbg !31
  %81 = load float, ptr addrspace(3) %80, align 4, !dbg !31
  %82 = fadd float %81, %56, !dbg !32
  %83 = select i1 %.not2, float %56, float %82, !dbg !31
  %84 = bitcast float %83 to i32, !dbg !31
  %85 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %84, i32 4, i32 0), !dbg !31
  %86 = or disjoint i32 %37, 8, !dbg !31
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i32 %86, !dbg !31
  %88 = load float, ptr addrspace(3) %87, align 4, !dbg !31
  %89 = fadd float %71, %88, !dbg !32
  %90 = select i1 %.not2, float %71, float %89, !dbg !31
  %91 = bitcast float %90 to i32, !dbg !31
  %92 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %91, i32 4, i32 0), !dbg !31
  %93 = mul i32 %16, 144, !dbg !34
  %94 = add i32 %20, %93, !dbg !35
  %95 = sext i32 %94 to i64, !dbg !36
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !36
  %97 = and i1 %15, %11, !dbg !37
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %84, i32 %91, ptr addrspace(1) %96, i1 %97) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.up.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvlthdmafnrbw4kokce4mum2ujabnipp5riqjsqbbkuunwr5pm3x.py", directory: "inductor_cache/vl")
!4 = !{ptr @triton_per_fused_constant_pad_nd_cumsum_mul_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_constant_pad_nd_cumsum_mul_6, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_constant_pad_nd_cumsum_mul_6", linkageName: "triton_per_fused_constant_pad_nd_cumsum_mul_6", scope: !3, file: !3, line: 24, type: !8, scopeLine: 24, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 28, column: 28, scope: !7)
!11 = !DILocation(line: 28, column: 33, scope: !7)
!12 = !DILocation(line: 29, column: 44, scope: !7)
!13 = !DILocation(line: 29, column: 23, scope: !7)
!14 = !DILocation(line: 30, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 33, column: 21, scope: !7)
!17 = !DILocation(line: 36, column: 19, scope: !7)
!18 = !DILocation(line: 35, column: 19, scope: !7)
!19 = !DILocation(line: 39, column: 19, scope: !7)
!20 = !DILocation(line: 40, column: 46, scope: !7)
!21 = !DILocation(line: 40, column: 55, scope: !7)
!22 = !DILocation(line: 40, column: 38, scope: !7)
!23 = !DILocation(line: 40, column: 43, scope: !7)
!24 = !DILocation(line: 40, column: 51, scope: !7)
!25 = !DILocation(line: 40, column: 30, scope: !7)
!26 = !DILocation(line: 40, column: 68, scope: !7)
!27 = !DILocation(line: 40, column: 75, scope: !7)
!28 = !DILocation(line: 40, column: 60, scope: !7)
!29 = !DILocation(line: 42, column: 18, scope: !7)
!30 = !DILocation(line: 44, column: 32, scope: !7)
!31 = !DILocation(line: 47, column: 45, scope: !7)
!32 = !DILocation(line: 13, column: 20, scope: !33, inlinedAt: !31)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !3, discriminator: 0)
!34 = !DILocation(line: 48, column: 42, scope: !7)
!35 = !DILocation(line: 48, column: 38, scope: !7)
!36 = !DILocation(line: 48, column: 25, scope: !7)
!37 = !DILocation(line: 48, column: 62, scope: !7)
!38 = !DILocation(line: 48, column: 54, scope: !7)
!39 = !DILocation(line: 48, column: 4, scope: !7)
