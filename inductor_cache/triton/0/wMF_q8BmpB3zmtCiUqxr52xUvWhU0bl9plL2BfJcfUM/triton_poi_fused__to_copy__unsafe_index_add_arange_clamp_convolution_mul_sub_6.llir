; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_convolution_mul_sub_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 510, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %12 = sdiv i32 %.frozen, 256, !dbg !14
  %13 = srem i32 %12, 256, !dbg !15
  %14 = mul i32 %12, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %15 = srem i32 %11, 256, !dbg !16
  %16 = sdiv i32 %10, 65536, !dbg !17
  %.lhs.trunc = trunc nsw i32 %16 to i16, !dbg !18
  %17 = srem i16 %.lhs.trunc, 3, !dbg !18
  %18 = sext i32 %10 to i64, !dbg !19
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !19
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #2, !dbg !20
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !20
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !20
  %23 = bitcast i32 %21 to float, !dbg !20
  %24 = bitcast i32 %22 to float, !dbg !20
  %25 = sext i16 %17 to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #2, !dbg !22
  %28 = bitcast i32 %27 to float, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #2, !dbg !22
  %30 = bitcast i32 %29 to float, !dbg !22
  %31 = sitofp i32 %13 to float, !dbg !23
  %32 = fadd float %31, 5.000000e-01, !dbg !24
  %33 = fmul float %32, 2.500000e-01, !dbg !25
  %34 = fadd float %33, -5.000000e-01, !dbg !26
  %35 = fcmp ogt float %34, 0.000000e+00, !dbg !27
  %36 = select i1 %35, float %34, float 0.000000e+00, !dbg !31
  %37 = fptosi float %36 to i32, !dbg !32
  %38 = sitofp i32 %.decomposed to float, !dbg !33
  %39 = sitofp i32 %15 to float, !dbg !33
  %40 = fadd float %38, 5.000000e-01, !dbg !34
  %41 = fadd float %39, 5.000000e-01, !dbg !34
  %42 = fmul float %40, 2.500000e-01, !dbg !35
  %43 = fmul float %41, 2.500000e-01, !dbg !35
  %44 = fadd float %42, -5.000000e-01, !dbg !36
  %45 = fadd float %43, -5.000000e-01, !dbg !36
  %46 = fcmp ogt float %44, 0.000000e+00, !dbg !37
  %47 = fcmp ogt float %45, 0.000000e+00, !dbg !37
  %48 = select i1 %46, float %44, float 0.000000e+00, !dbg !39
  %49 = select i1 %47, float %45, float 0.000000e+00, !dbg !39
  %50 = fptosi float %48 to i32, !dbg !40
  %51 = fptosi float %49 to i32, !dbg !40
  %52 = shl i32 %37, 6, !dbg !41
  %53 = shl nsw i32 %16, 12, !dbg !42
  %54 = add i32 %52, %53, !dbg !43
  %55 = add i32 %54, %50, !dbg !44
  %56 = add i32 %54, %51, !dbg !44
  %57 = sext i32 %55 to i64, !dbg !45
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !45
  %59 = sext i32 %56 to i64, !dbg !45
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !45
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #2, !dbg !46
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #2, !dbg !46
  %63 = sext i32 %50 to i64, !dbg !47
  %64 = sext i32 %51 to i64, !dbg !47
  %65 = tail call i64 @llvm.smin.i64(i64 %63, i64 62), !dbg !48
  %66 = tail call i64 @llvm.smin.i64(i64 %64, i64 62), !dbg !48
  %67 = sext i32 %52 to i64, !dbg !50
  %68 = sext i32 %53 to i64, !dbg !51
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !52
  %70 = getelementptr i8, ptr addrspace(1) %69, i64 4, !dbg !52
  %71 = getelementptr float, ptr addrspace(1) %70, i64 %67, !dbg !52
  %72 = getelementptr float, ptr addrspace(1) %71, i64 %68, !dbg !52
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !52
  %74 = getelementptr i8, ptr addrspace(1) %73, i64 4, !dbg !52
  %75 = getelementptr float, ptr addrspace(1) %74, i64 %67, !dbg !52
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %68, !dbg !52
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #2, !dbg !53
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #2, !dbg !53
  %79 = sitofp i32 %50 to float, !dbg !54
  %80 = sitofp i32 %51 to float, !dbg !54
  %81 = fsub float %48, %79, !dbg !55
  %82 = fsub float %49, %80, !dbg !55
  %83 = fcmp ogt float %81, 0.000000e+00, !dbg !56
  %84 = fcmp ogt float %82, 0.000000e+00, !dbg !56
  %85 = select i1 %83, float %81, float 0.000000e+00, !dbg !58
  %86 = select i1 %84, float %82, float 0.000000e+00, !dbg !58
  %87 = fcmp olt float %85, 1.000000e+00, !dbg !59
  %88 = fcmp olt float %86, 1.000000e+00, !dbg !59
  %89 = select i1 %87, float %85, float 1.000000e+00, !dbg !61
  %90 = select i1 %88, float %86, float 1.000000e+00, !dbg !61
  %91 = tail call i32 @llvm.smin.i32(i32 %37, i32 62), !dbg !62
  %narrow = add nsw i32 %91, 1, !dbg !62
  %92 = sext i32 %narrow to i64, !dbg !62
  %93 = shl nsw i64 %92, 6, !dbg !64
  %94 = getelementptr float, ptr addrspace(1) %70, i64 %93, !dbg !65
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %68, !dbg !65
  %96 = getelementptr float, ptr addrspace(1) %74, i64 %93, !dbg !65
  %97 = getelementptr float, ptr addrspace(1) %96, i64 %68, !dbg !65
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #2, !dbg !66
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #2, !dbg !66
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !67
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %63, !dbg !67
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %68, !dbg !67
  %103 = getelementptr float, ptr addrspace(1) %100, i64 %64, !dbg !67
  %104 = getelementptr float, ptr addrspace(1) %103, i64 %68, !dbg !67
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #2, !dbg !68
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #2, !dbg !68
  %107 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !66
  %108 = insertelement <2 x i32> %107, i32 %77, i64 1, !dbg !66
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !66
  %110 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !68
  %111 = insertelement <2 x i32> %110, i32 %61, i64 1, !dbg !68
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !68
  %113 = fsub <2 x float> %109, %112, !dbg !69
  %114 = insertelement <2 x float> poison, float %89, i64 0, !dbg !70
  %115 = shufflevector <2 x float> %114, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !70
  %116 = fmul <2 x float> %113, %115, !dbg !70
  %117 = fadd <2 x float> %116, %112, !dbg !71
  %118 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !66
  %119 = insertelement <2 x i32> %118, i32 %78, i64 1, !dbg !66
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !66
  %121 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !68
  %122 = insertelement <2 x i32> %121, i32 %62, i64 1, !dbg !68
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !68
  %124 = fsub <2 x float> %120, %123, !dbg !69
  %125 = insertelement <2 x float> poison, float %90, i64 0, !dbg !70
  %126 = shufflevector <2 x float> %125, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !70
  %127 = fmul <2 x float> %126, %124, !dbg !70
  %128 = fadd <2 x float> %127, %123, !dbg !71
  %129 = extractelement <2 x float> %117, i64 0, !dbg !72
  %130 = extractelement <2 x float> %117, i64 1, !dbg !73
  %131 = fsub float %129, %130, !dbg !72
  %132 = extractelement <2 x float> %128, i64 0, !dbg !72
  %133 = extractelement <2 x float> %128, i64 1, !dbg !73
  %134 = fsub float %132, %133, !dbg !72
  %135 = sitofp i32 %37 to float, !dbg !74
  %136 = fsub float %36, %135, !dbg !75
  %137 = fcmp ogt float %136, 0.000000e+00, !dbg !76
  %138 = select i1 %137, float %136, float 0.000000e+00, !dbg !78
  %139 = fcmp olt float %138, 1.000000e+00, !dbg !79
  %140 = select i1 %139, float %138, float 1.000000e+00, !dbg !81
  %141 = fmul float %140, %131, !dbg !82
  %142 = fmul float %134, %140, !dbg !82
  %143 = fadd float %23, %28, !dbg !83
  %144 = fadd float %24, %30, !dbg !83
  %145 = fadd float %130, %141, !dbg !73
  %146 = fadd float %133, %142, !dbg !73
  %147 = fadd float %143, %145, !dbg !84
  %148 = fadd float %144, %146, !dbg !84
  %149 = bitcast float %147 to i32, !dbg !85
  %150 = bitcast float %148 to i32, !dbg !85
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %149, i32 %150, ptr addrspace(1) %19, i1 true) #2, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cczba3vlwuzzlwflvlgjmikobtul2yo43rm2aicfuzrsb5yp3j5r.py", directory: "inductor_cache/cz")
!4 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_convolution_mul_sub_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_convolution_mul_sub_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_convolution_mul_sub_6", linkageName: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_convolution_mul_sub_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 29, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 40, scope: !7)
!21 = !DILocation(line: 30, column: 31, scope: !7)
!22 = !DILocation(line: 30, column: 36, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 18, scope: !7)
!25 = !DILocation(line: 36, column: 18, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 39, column: 40, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 42, column: 21, scope: !7)
!34 = !DILocation(line: 43, column: 20, scope: !7)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 45, column: 20, scope: !7)
!37 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !38)
!38 = !DILocation(line: 46, column: 42, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !38)
!40 = !DILocation(line: 47, column: 21, scope: !7)
!41 = !DILocation(line: 48, column: 42, scope: !7)
!42 = !DILocation(line: 48, column: 54, scope: !7)
!43 = !DILocation(line: 48, column: 39, scope: !7)
!44 = !DILocation(line: 48, column: 49, scope: !7)
!45 = !DILocation(line: 48, column: 31, scope: !7)
!46 = !DILocation(line: 48, column: 59, scope: !7)
!47 = !DILocation(line: 50, column: 20, scope: !7)
!48 = !DILocation(line: 113, column: 29, scope: !28, inlinedAt: !49)
!49 = !DILocation(line: 52, column: 42, scope: !7)
!50 = !DILocation(line: 53, column: 39, scope: !7)
!51 = !DILocation(line: 53, column: 49, scope: !7)
!52 = !DILocation(line: 53, column: 31, scope: !7)
!53 = !DILocation(line: 53, column: 59, scope: !7)
!54 = !DILocation(line: 55, column: 21, scope: !7)
!55 = !DILocation(line: 56, column: 20, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !57)
!57 = !DILocation(line: 57, column: 42, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !57)
!59 = !DILocation(line: 110, column: 15, scope: !28, inlinedAt: !60)
!60 = !DILocation(line: 59, column: 42, scope: !7)
!61 = !DILocation(line: 113, column: 29, scope: !28, inlinedAt: !60)
!62 = !DILocation(line: 113, column: 29, scope: !28, inlinedAt: !63)
!63 = !DILocation(line: 63, column: 42, scope: !7)
!64 = !DILocation(line: 64, column: 42, scope: !7)
!65 = !DILocation(line: 64, column: 31, scope: !7)
!66 = !DILocation(line: 64, column: 60, scope: !7)
!67 = !DILocation(line: 65, column: 31, scope: !7)
!68 = !DILocation(line: 65, column: 60, scope: !7)
!69 = !DILocation(line: 66, column: 20, scope: !7)
!70 = !DILocation(line: 67, column: 20, scope: !7)
!71 = !DILocation(line: 68, column: 20, scope: !7)
!72 = !DILocation(line: 69, column: 20, scope: !7)
!73 = !DILocation(line: 76, column: 20, scope: !7)
!74 = !DILocation(line: 70, column: 20, scope: !7)
!75 = !DILocation(line: 71, column: 19, scope: !7)
!76 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !77)
!77 = !DILocation(line: 72, column: 42, scope: !7)
!78 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !77)
!79 = !DILocation(line: 110, column: 15, scope: !28, inlinedAt: !80)
!80 = !DILocation(line: 73, column: 42, scope: !7)
!81 = !DILocation(line: 113, column: 29, scope: !28, inlinedAt: !80)
!82 = !DILocation(line: 74, column: 20, scope: !7)
!83 = !DILocation(line: 75, column: 20, scope: !7)
!84 = !DILocation(line: 77, column: 20, scope: !7)
!85 = !DILocation(line: 78, column: 40, scope: !7)
!86 = !DILocation(line: 78, column: 4, scope: !7)
