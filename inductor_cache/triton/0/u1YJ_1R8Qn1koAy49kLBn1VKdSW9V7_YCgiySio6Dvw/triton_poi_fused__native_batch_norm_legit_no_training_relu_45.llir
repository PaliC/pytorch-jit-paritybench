; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_45(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = and i32 %11, 255, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = icmp slt i32 %15, 1536, !dbg !14
  %18 = icmp slt i32 %16, 1536, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = shl i32 %19, 4, !dbg !16
  %.lobit4 = lshr i32 %11, 6, !dbg !17
  %21 = and i32 %.lobit4, 3, !dbg !17
  %22 = or disjoint i32 %20, %21, !dbg !18
  %23 = or disjoint i32 %22, 4, !dbg !18
  %24 = or disjoint i32 %22, 8, !dbg !18
  %25 = or disjoint i32 %22, 12, !dbg !18
  %26 = icmp slt i32 %22, 196, !dbg !19
  %27 = icmp slt i32 %23, 196, !dbg !19
  %28 = icmp slt i32 %24, 196, !dbg !19
  %29 = icmp slt i32 %25, 196, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %30 = sdiv i32 %.frozen, 384, !dbg !20
  %31 = mul i32 %30, 384, !dbg !21
  %.decomposed = sub i32 %.frozen, %31, !dbg !21
  %32 = srem i32 %16, 384, !dbg !21
  %33 = mul i32 %22, 384, !dbg !22
  %34 = mul i32 %23, 384, !dbg !22
  %35 = mul i32 %24, 384, !dbg !22
  %36 = mul i32 %25, 384, !dbg !22
  %37 = mul i32 %30, 75264, !dbg !23
  %38 = add i32 %37, %.decomposed, !dbg !24
  %39 = add i32 %38, %33, !dbg !25
  %40 = add i32 %38, %34, !dbg !25
  %41 = add i32 %38, %35, !dbg !25
  %42 = add i32 %38, %36, !dbg !25
  %43 = sext i32 %39 to i64, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !26
  %45 = sext i32 %40 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !26
  %47 = sext i32 %41 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !26
  %49 = sext i32 %42 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = and i1 %17, %26, !dbg !27
  %52 = and i1 %27, %17, !dbg !27
  %53 = and i1 %28, %17, !dbg !27
  %54 = and i1 %29, %17, !dbg !27
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %51) #4, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !28
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %52) #4, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !28
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %53) #4, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !28
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %54) #4, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %75 = and i32 %12, 1020, !dbg !28
  %76 = lshr i32 %12, 6, !dbg !28
  %77 = and i32 %76, 12, !dbg !28
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %77, !dbg !28
  %79 = getelementptr inbounds float, ptr addrspace(3) %78, i32 %75, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %79, i32 %56, i32 %57, i32 %58, i32 %59, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !28
  %81 = load float, ptr addrspace(3) %80, align 4, !dbg !28
  %82 = getelementptr inbounds i8, ptr addrspace(3) %80, i32 1040, !dbg !28
  %83 = load float, ptr addrspace(3) %82, align 4, !dbg !28
  %84 = getelementptr inbounds i8, ptr addrspace(3) %80, i32 2080, !dbg !28
  %85 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %86 = getelementptr inbounds i8, ptr addrspace(3) %80, i32 3120, !dbg !28
  %87 = load float, ptr addrspace(3) %86, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %79, i32 %61, i32 %62, i32 %63, i32 %64, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %88 = load float, ptr addrspace(3) %80, align 4, !dbg !28
  %89 = load float, ptr addrspace(3) %82, align 4, !dbg !28
  %90 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %91 = load float, ptr addrspace(3) %86, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %79, i32 %66, i32 %67, i32 %68, i32 %69, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %92 = load float, ptr addrspace(3) %80, align 4, !dbg !28
  %93 = load float, ptr addrspace(3) %82, align 4, !dbg !28
  %94 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %95 = load float, ptr addrspace(3) %86, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %79, i32 %71, i32 %72, i32 %73, i32 %74, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %96 = load float, ptr addrspace(3) %80, align 4, !dbg !28
  %97 = load float, ptr addrspace(3) %82, align 4, !dbg !28
  %98 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %99 = load float, ptr addrspace(3) %86, align 4, !dbg !28
  %100 = sext i32 %32 to i64, !dbg !29
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !29
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %18) #4, !dbg !30
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !31
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %18) #4, !dbg !32
  %105 = bitcast i32 %104 to float, !dbg !32
  %106 = getelementptr float, ptr addrspace(1) %3, i64 %100, !dbg !33
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %18) #4, !dbg !34
  %108 = getelementptr float, ptr addrspace(1) %4, i64 %100, !dbg !35
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %18) #4, !dbg !36
  %110 = fadd float %105, 0x3EE4F8B580000000, !dbg !37
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %111, 0, !dbg !38
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %112, 0, !dbg !38
  br i1 %.not.i, label %118, label %113, !dbg !38

113:                                              ; preds = %8
  br i1 %.not1.i, label %116, label %114, !dbg !38

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

118:                                              ; preds = %8
  br i1 %.not1.i, label %121, label %119, !dbg !38

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %114, %116, %119, %121
  %.0.i = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !38
  %123 = and i32 %12, 12, !dbg !12
  %124 = or disjoint i32 %20, %123, !dbg !18
  %125 = icmp slt i32 %124, 196, !dbg !19
  %126 = lshr i32 %11, 2, !dbg !12
  %127 = and i32 %126, 63, !dbg !12
  %128 = or disjoint i32 %127, %10, !dbg !13
  %129 = or disjoint i32 %128, 192, !dbg !13
  %130 = icmp slt i32 %129, 1536, !dbg !14
  %131 = and i1 %130, %125, !dbg !27
  %132 = or disjoint i32 %128, 128, !dbg !13
  %133 = icmp slt i32 %132, 1536, !dbg !14
  %134 = and i1 %133, %125, !dbg !27
  %135 = or disjoint i32 %128, 64, !dbg !13
  %136 = icmp slt i32 %135, 1536, !dbg !14
  %137 = and i1 %136, %125, !dbg !27
  %138 = icmp slt i32 %128, 1536, !dbg !14
  %139 = and i1 %138, %125, !dbg !27
  %.frozen5 = freeze i32 %129, !dbg !20
  %140 = sdiv i32 %.frozen5, 384, !dbg !20
  %.frozen7 = freeze i32 %132, !dbg !20
  %141 = sdiv i32 %.frozen7, 384, !dbg !20
  %.frozen9 = freeze i32 %135, !dbg !20
  %142 = sdiv i32 %.frozen9, 384, !dbg !20
  %.frozen11 = freeze i32 %128, !dbg !20
  %143 = sdiv i32 %.frozen11, 384, !dbg !20
  %144 = mul i32 %140, 384, !dbg !21
  %.decomposed6 = sub i32 %.frozen5, %144, !dbg !21
  %145 = mul i32 %141, 384, !dbg !21
  %.decomposed8 = sub i32 %.frozen7, %145, !dbg !21
  %146 = mul i32 %142, 384, !dbg !21
  %.decomposed10 = sub i32 %.frozen9, %146, !dbg !21
  %147 = mul i32 %143, 384, !dbg !21
  %.decomposed12 = sub i32 %.frozen11, %147, !dbg !21
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %149 = insertelement <16 x float> poison, float %99, i64 0, !dbg !40
  %150 = insertelement <16 x float> %149, float %98, i64 1, !dbg !40
  %151 = insertelement <16 x float> %150, float %97, i64 2, !dbg !40
  %152 = insertelement <16 x float> %151, float %96, i64 3, !dbg !40
  %153 = insertelement <16 x float> %152, float %95, i64 4, !dbg !40
  %154 = insertelement <16 x float> %153, float %94, i64 5, !dbg !40
  %155 = insertelement <16 x float> %154, float %93, i64 6, !dbg !40
  %156 = insertelement <16 x float> %155, float %92, i64 7, !dbg !40
  %157 = insertelement <16 x float> %156, float %91, i64 8, !dbg !40
  %158 = insertelement <16 x float> %157, float %90, i64 9, !dbg !40
  %159 = insertelement <16 x float> %158, float %89, i64 10, !dbg !40
  %160 = insertelement <16 x float> %159, float %88, i64 11, !dbg !40
  %161 = insertelement <16 x float> %160, float %87, i64 12, !dbg !40
  %162 = insertelement <16 x float> %161, float %85, i64 13, !dbg !40
  %163 = insertelement <16 x float> %162, float %83, i64 14, !dbg !40
  %164 = insertelement <16 x float> %163, float %81, i64 15, !dbg !40
  %165 = insertelement <16 x i32> poison, i32 %102, i64 0, !dbg !40
  %166 = bitcast <16 x i32> %165 to <16 x float>, !dbg !40
  %167 = shufflevector <16 x float> %166, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %168 = fsub <16 x float> %164, %167, !dbg !40
  %169 = insertelement <16 x float> poison, float %148, i64 0, !dbg !41
  %170 = shufflevector <16 x float> %169, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %171 = fmul <16 x float> %168, %170, !dbg !41
  %172 = insertelement <16 x i32> poison, i32 %107, i64 0, !dbg !42
  %173 = bitcast <16 x i32> %172 to <16 x float>, !dbg !42
  %174 = shufflevector <16 x float> %173, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !42
  %175 = fmul <16 x float> %171, %174, !dbg !42
  %176 = insertelement <16 x i32> poison, i32 %109, i64 0, !dbg !43
  %177 = bitcast <16 x i32> %176 to <16 x float>, !dbg !43
  %178 = shufflevector <16 x float> %177, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !43
  %179 = fadd <16 x float> %175, %178, !dbg !43
  %180 = fcmp olt <16 x float> %179, zeroinitializer, !dbg !44
  %181 = extractelement <16 x i1> %180, i64 15, !dbg !48
  %182 = extractelement <16 x float> %179, i64 15, !dbg !48
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !48
  %184 = extractelement <16 x i1> %180, i64 14, !dbg !48
  %185 = extractelement <16 x float> %179, i64 14, !dbg !48
  %186 = select i1 %184, float 0.000000e+00, float %185, !dbg !48
  %187 = extractelement <16 x i1> %180, i64 13, !dbg !48
  %188 = extractelement <16 x float> %179, i64 13, !dbg !48
  %189 = select i1 %187, float 0.000000e+00, float %188, !dbg !48
  %190 = extractelement <16 x i1> %180, i64 12, !dbg !48
  %191 = extractelement <16 x float> %179, i64 12, !dbg !48
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !48
  %193 = extractelement <16 x i1> %180, i64 11, !dbg !48
  %194 = extractelement <16 x float> %179, i64 11, !dbg !48
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !48
  %196 = extractelement <16 x i1> %180, i64 10, !dbg !48
  %197 = extractelement <16 x float> %179, i64 10, !dbg !48
  %198 = select i1 %196, float 0.000000e+00, float %197, !dbg !48
  %199 = extractelement <16 x i1> %180, i64 9, !dbg !48
  %200 = extractelement <16 x float> %179, i64 9, !dbg !48
  %201 = select i1 %199, float 0.000000e+00, float %200, !dbg !48
  %202 = extractelement <16 x i1> %180, i64 8, !dbg !48
  %203 = extractelement <16 x float> %179, i64 8, !dbg !48
  %204 = select i1 %202, float 0.000000e+00, float %203, !dbg !48
  %205 = extractelement <16 x i1> %180, i64 7, !dbg !48
  %206 = extractelement <16 x float> %179, i64 7, !dbg !48
  %207 = select i1 %205, float 0.000000e+00, float %206, !dbg !48
  %208 = extractelement <16 x i1> %180, i64 6, !dbg !48
  %209 = extractelement <16 x float> %179, i64 6, !dbg !48
  %210 = select i1 %208, float 0.000000e+00, float %209, !dbg !48
  %211 = extractelement <16 x i1> %180, i64 5, !dbg !48
  %212 = extractelement <16 x float> %179, i64 5, !dbg !48
  %213 = select i1 %211, float 0.000000e+00, float %212, !dbg !48
  %214 = extractelement <16 x i1> %180, i64 4, !dbg !48
  %215 = extractelement <16 x float> %179, i64 4, !dbg !48
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !48
  %217 = extractelement <16 x i1> %180, i64 3, !dbg !48
  %218 = extractelement <16 x float> %179, i64 3, !dbg !48
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !48
  %220 = extractelement <16 x i1> %180, i64 2, !dbg !48
  %221 = extractelement <16 x float> %179, i64 2, !dbg !48
  %222 = select i1 %220, float 0.000000e+00, float %221, !dbg !48
  %223 = extractelement <16 x i1> %180, i64 1, !dbg !48
  %224 = extractelement <16 x float> %179, i64 1, !dbg !48
  %225 = select i1 %223, float 0.000000e+00, float %224, !dbg !48
  %226 = extractelement <16 x i1> %180, i64 0, !dbg !48
  %227 = extractelement <16 x float> %179, i64 0, !dbg !48
  %228 = select i1 %226, float 0.000000e+00, float %227, !dbg !48
  %229 = mul nsw i32 %.decomposed12, 196, !dbg !49
  %230 = mul nsw i32 %.decomposed10, 196, !dbg !49
  %231 = mul nsw i32 %.decomposed8, 196, !dbg !49
  %232 = mul nsw i32 %.decomposed6, 196, !dbg !49
  %233 = add i32 %229, %124, !dbg !50
  %234 = add i32 %230, %124, !dbg !50
  %235 = add i32 %231, %124, !dbg !50
  %236 = add i32 %232, %124, !dbg !50
  %237 = mul i32 %143, 407680, !dbg !51
  %238 = mul i32 %142, 407680, !dbg !51
  %239 = mul i32 %141, 407680, !dbg !51
  %240 = mul i32 %140, 407680, !dbg !51
  %241 = add i32 %233, %237, !dbg !52
  %242 = add i32 %234, %238, !dbg !52
  %243 = add i32 %235, %239, !dbg !52
  %244 = add i32 %236, %240, !dbg !52
  %245 = sext i32 %241 to i64, !dbg !53
  %246 = getelementptr float, ptr addrspace(1) %5, i64 %245, !dbg !53
  %247 = sext i32 %242 to i64, !dbg !53
  %248 = getelementptr float, ptr addrspace(1) %5, i64 %247, !dbg !53
  %249 = sext i32 %243 to i64, !dbg !53
  %250 = getelementptr float, ptr addrspace(1) %5, i64 %249, !dbg !53
  %251 = sext i32 %244 to i64, !dbg !53
  %252 = getelementptr float, ptr addrspace(1) %5, i64 %251, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %253 = shl i32 %11, 4, !dbg !54
  %254 = and i32 %253, 4080, !dbg !54
  %255 = lshr exact i32 %254, 2, !dbg !54
  %256 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %255, !dbg !54
  %257 = getelementptr float, ptr addrspace(3) %256, i32 %254, !dbg !54
  %258 = bitcast float %183 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %258, i1 true) #4, !dbg !54
  %259 = or disjoint i32 %254, 1, !dbg !54
  %260 = getelementptr float, ptr addrspace(3) %256, i32 %259, !dbg !54
  %261 = bitcast float %186 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #4, !dbg !54
  %262 = or disjoint i32 %254, 2, !dbg !54
  %263 = getelementptr float, ptr addrspace(3) %256, i32 %262, !dbg !54
  %264 = bitcast float %189 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #4, !dbg !54
  %265 = or disjoint i32 %254, 3, !dbg !54
  %266 = getelementptr float, ptr addrspace(3) %256, i32 %265, !dbg !54
  %267 = bitcast float %192 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #4, !dbg !54
  %268 = or disjoint i32 %254, 4, !dbg !54
  %269 = getelementptr float, ptr addrspace(3) %256, i32 %268, !dbg !54
  %270 = bitcast float %195 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #4, !dbg !54
  %271 = or disjoint i32 %254, 5, !dbg !54
  %272 = getelementptr float, ptr addrspace(3) %256, i32 %271, !dbg !54
  %273 = bitcast float %198 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %273, i1 true) #4, !dbg !54
  %274 = or disjoint i32 %254, 6, !dbg !54
  %275 = getelementptr float, ptr addrspace(3) %256, i32 %274, !dbg !54
  %276 = bitcast float %201 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #4, !dbg !54
  %277 = or disjoint i32 %254, 7, !dbg !54
  %278 = getelementptr float, ptr addrspace(3) %256, i32 %277, !dbg !54
  %279 = bitcast float %204 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 true) #4, !dbg !54
  %280 = or disjoint i32 %254, 8, !dbg !54
  %281 = getelementptr float, ptr addrspace(3) %256, i32 %280, !dbg !54
  %282 = bitcast float %207 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #4, !dbg !54
  %283 = or disjoint i32 %254, 9, !dbg !54
  %284 = getelementptr float, ptr addrspace(3) %256, i32 %283, !dbg !54
  %285 = bitcast float %210 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 true) #4, !dbg !54
  %286 = or disjoint i32 %254, 10, !dbg !54
  %287 = getelementptr float, ptr addrspace(3) %256, i32 %286, !dbg !54
  %288 = bitcast float %213 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %288, i1 true) #4, !dbg !54
  %289 = or disjoint i32 %254, 11, !dbg !54
  %290 = getelementptr float, ptr addrspace(3) %256, i32 %289, !dbg !54
  %291 = bitcast float %216 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 true) #4, !dbg !54
  %292 = or disjoint i32 %254, 12, !dbg !54
  %293 = getelementptr float, ptr addrspace(3) %256, i32 %292, !dbg !54
  %294 = bitcast float %219 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %294, i1 true) #4, !dbg !54
  %295 = or disjoint i32 %254, 13, !dbg !54
  %296 = getelementptr float, ptr addrspace(3) %256, i32 %295, !dbg !54
  %297 = bitcast float %222 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %297, i1 true) #4, !dbg !54
  %298 = or disjoint i32 %254, 14, !dbg !54
  %299 = getelementptr float, ptr addrspace(3) %256, i32 %298, !dbg !54
  %300 = bitcast float %225 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %300, i1 true) #4, !dbg !54
  %301 = or disjoint i32 %254, 15, !dbg !54
  %302 = getelementptr float, ptr addrspace(3) %256, i32 %301, !dbg !54
  %303 = bitcast float %228 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %303, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %304 = lshr i32 %75, 4, !dbg !54
  %305 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %304, !dbg !54
  %306 = getelementptr inbounds float, ptr addrspace(3) %305, i32 %75, !dbg !54
  %307 = load i32, ptr addrspace(3) %306, align 4, !dbg !54
  %308 = or disjoint i32 %75, 1, !dbg !54
  %309 = getelementptr inbounds float, ptr addrspace(3) %305, i32 %308, !dbg !54
  %310 = load i32, ptr addrspace(3) %309, align 4, !dbg !54
  %311 = or disjoint i32 %75, 2, !dbg !54
  %312 = getelementptr inbounds float, ptr addrspace(3) %305, i32 %311, !dbg !54
  %313 = load i32, ptr addrspace(3) %312, align 4, !dbg !54
  %314 = or disjoint i32 %75, 3, !dbg !54
  %315 = getelementptr inbounds float, ptr addrspace(3) %305, i32 %314, !dbg !54
  %316 = load i32, ptr addrspace(3) %315, align 4, !dbg !54
  %317 = or disjoint i32 %75, 1024, !dbg !54
  %318 = lshr i32 %317, 4, !dbg !54
  %319 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %318, !dbg !54
  %320 = getelementptr inbounds float, ptr addrspace(3) %319, i32 %317, !dbg !54
  %321 = load i32, ptr addrspace(3) %320, align 4, !dbg !54
  %322 = or disjoint i32 %75, 1025, !dbg !54
  %323 = lshr i32 %322, 4, !dbg !54
  %324 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %323, !dbg !54
  %325 = getelementptr inbounds float, ptr addrspace(3) %324, i32 %322, !dbg !54
  %326 = load i32, ptr addrspace(3) %325, align 4, !dbg !54
  %327 = or disjoint i32 %75, 1026, !dbg !54
  %328 = lshr i32 %327, 4, !dbg !54
  %329 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %328, !dbg !54
  %330 = getelementptr inbounds float, ptr addrspace(3) %329, i32 %327, !dbg !54
  %331 = load i32, ptr addrspace(3) %330, align 4, !dbg !54
  %332 = or disjoint i32 %75, 1027, !dbg !54
  %333 = lshr i32 %332, 4, !dbg !54
  %334 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %333, !dbg !54
  %335 = getelementptr inbounds float, ptr addrspace(3) %334, i32 %332, !dbg !54
  %336 = load i32, ptr addrspace(3) %335, align 4, !dbg !54
  %337 = or disjoint i32 %75, 2048, !dbg !54
  %338 = lshr i32 %337, 4, !dbg !54
  %339 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %338, !dbg !54
  %340 = getelementptr inbounds float, ptr addrspace(3) %339, i32 %337, !dbg !54
  %341 = load i32, ptr addrspace(3) %340, align 4, !dbg !54
  %342 = or disjoint i32 %75, 2049, !dbg !54
  %343 = lshr i32 %342, 4, !dbg !54
  %344 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %343, !dbg !54
  %345 = getelementptr inbounds float, ptr addrspace(3) %344, i32 %342, !dbg !54
  %346 = load i32, ptr addrspace(3) %345, align 4, !dbg !54
  %347 = or disjoint i32 %75, 2050, !dbg !54
  %348 = lshr i32 %347, 4, !dbg !54
  %349 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %348, !dbg !54
  %350 = getelementptr inbounds float, ptr addrspace(3) %349, i32 %347, !dbg !54
  %351 = load i32, ptr addrspace(3) %350, align 4, !dbg !54
  %352 = or disjoint i32 %75, 2051, !dbg !54
  %353 = lshr i32 %352, 4, !dbg !54
  %354 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %353, !dbg !54
  %355 = getelementptr inbounds float, ptr addrspace(3) %354, i32 %352, !dbg !54
  %356 = load i32, ptr addrspace(3) %355, align 4, !dbg !54
  %357 = or disjoint i32 %75, 3072, !dbg !54
  %358 = lshr i32 %357, 4, !dbg !54
  %359 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %358, !dbg !54
  %360 = getelementptr inbounds float, ptr addrspace(3) %359, i32 %357, !dbg !54
  %361 = load i32, ptr addrspace(3) %360, align 4, !dbg !54
  %362 = or disjoint i32 %75, 3073, !dbg !54
  %363 = lshr i32 %362, 4, !dbg !54
  %364 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %363, !dbg !54
  %365 = getelementptr inbounds float, ptr addrspace(3) %364, i32 %362, !dbg !54
  %366 = load i32, ptr addrspace(3) %365, align 4, !dbg !54
  %367 = or disjoint i32 %75, 3074, !dbg !54
  %368 = lshr i32 %367, 4, !dbg !54
  %369 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %368, !dbg !54
  %370 = getelementptr inbounds float, ptr addrspace(3) %369, i32 %367, !dbg !54
  %371 = load i32, ptr addrspace(3) %370, align 4, !dbg !54
  %372 = or disjoint i32 %75, 3075, !dbg !54
  %373 = lshr i32 %372, 4, !dbg !54
  %374 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %373, !dbg !54
  %375 = getelementptr inbounds float, ptr addrspace(3) %374, i32 %372, !dbg !54
  %376 = load i32, ptr addrspace(3) %375, align 4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %307, i32 %310, i32 %313, i32 %316, ptr addrspace(1) %246, i1 %139) #4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %321, i32 %326, i32 %331, i32 %336, ptr addrspace(1) %248, i1 %137) #4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %341, i32 %346, i32 %351, i32 %356, ptr addrspace(1) %250, i1 %134) #4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %361, i32 %366, i32 %371, i32 %376, ptr addrspace(1) %252, i1 %131) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "colfn2qo6eov3g24a2wz626oyea7jvykgngflx7dybl3outlioia.py", directory: "inductor_cache/ol")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_45, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_45, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_45", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_45", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 39, scope: !7)
!23 = !DILocation(line: 31, column: 50, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 44, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 63, scope: !7)
!28 = !DILocation(line: 31, column: 55, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 39, column: 26, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 44, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 46, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 48, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 49, column: 34, scope: !7)
!50 = !DILocation(line: 49, column: 30, scope: !7)
!51 = !DILocation(line: 49, column: 46, scope: !7)
!52 = !DILocation(line: 49, column: 39, scope: !7)
!53 = !DILocation(line: 49, column: 25, scope: !7)
!54 = !DILocation(line: 49, column: 58, scope: !7)
!55 = !DILocation(line: 49, column: 4, scope: !7)
