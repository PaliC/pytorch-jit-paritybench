; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_div_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = shl i32 %4, 6, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 62, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 64, !dbg !14
  %11 = sdiv i32 %9, 4, !dbg !15
  %12 = sext i32 %9 to i64, !dbg !16
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !16
  %14 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %13, i1 %10) #3, !dbg !17
  %15 = shl nsw i32 %11, 2, !dbg !18
  %16 = sext i32 %15 to i64, !dbg !19
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !19
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %10) #3, !dbg !20
  %19 = bitcast i32 %18 to float, !dbg !20
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %10) #3, !dbg !20
  %21 = bitcast i32 %20 to float, !dbg !20
  %22 = or disjoint i32 %15, 1, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !22
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %10) #3, !dbg !23
  %26 = bitcast i32 %25 to float, !dbg !23
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %10) #3, !dbg !23
  %28 = bitcast i32 %27 to float, !dbg !23
  %29 = or disjoint i32 %15, 2, !dbg !24
  %30 = sext i32 %29 to i64, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !25
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %10) #3, !dbg !26
  %33 = bitcast i32 %32 to float, !dbg !26
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %10) #3, !dbg !26
  %35 = bitcast i32 %34 to float, !dbg !26
  %36 = or disjoint i32 %15, 3, !dbg !27
  %37 = sext i32 %36 to i64, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !28
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %10) #3, !dbg !29
  %40 = bitcast i32 %39 to float, !dbg !29
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %10) #3, !dbg !29
  %42 = bitcast i32 %41 to float, !dbg !29
  %43 = fmul float %19, %19, !dbg !30
  %44 = fmul float %21, %21, !dbg !30
  %45 = fmul float %26, %26, !dbg !31
  %46 = fmul float %28, %28, !dbg !31
  %47 = fadd float %43, %45, !dbg !32
  %48 = fadd float %44, %46, !dbg !32
  %49 = fmul float %33, %33, !dbg !33
  %50 = fmul float %35, %35, !dbg !33
  %51 = fadd float %47, %49, !dbg !34
  %52 = fadd float %48, %50, !dbg !34
  %53 = fmul float %40, %40, !dbg !35
  %54 = fmul float %42, %42, !dbg !35
  %55 = fadd float %51, %53, !dbg !36
  %56 = fadd float %52, %54, !dbg !36
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i = icmp eq i32 %57, 0, !dbg !37
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i = icmp eq i32 %58, 0, !dbg !37
  br i1 %.not.i, label %64, label %59, !dbg !37

59:                                               ; preds = %3
  br i1 %.not1.i, label %62, label %60, !dbg !37

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

64:                                               ; preds = %3
  br i1 %.not1.i, label %67, label %65, !dbg !37

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %60, %62, %65, %67
  %.0.i = phi float [ %61, %60 ], [ %63, %62 ], [ %66, %65 ], [ %68, %67 ], !dbg !37
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i1 = icmp eq i32 %69, 0, !dbg !37
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i4 = icmp eq i32 %70, 0, !dbg !37
  br i1 %.not.i1, label %76, label %71, !dbg !37

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %74, label %72, !dbg !37

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !37

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %72, %74, %77, %79
  %.0.i3 = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !37
  %81 = extractvalue { i32, i32 } %14, 1, !dbg !17
  %82 = bitcast i32 %81 to float, !dbg !17
  %83 = extractvalue { i32, i32 } %14, 0, !dbg !17
  %84 = bitcast i32 %83 to float, !dbg !17
  %85 = fcmp ogt float %.0.i, 0x3D71979980000000, !dbg !38
  %86 = fcmp ogt float %.0.i3, 0x3D71979980000000, !dbg !38
  %87 = fcmp uno float %.0.i, 0.000000e+00, !dbg !42
  %88 = fcmp uno float %.0.i3, 0.000000e+00, !dbg !42
  %89 = or i1 %85, %87, !dbg !43
  %90 = or i1 %86, %88, !dbg !43
  %91 = select i1 %89, float %.0.i, float 0x3D71979980000000, !dbg !44
  %92 = select i1 %90, float %.0.i3, float 0x3D71979980000000, !dbg !44
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float %91) #3, !dbg !45
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float %92) #3, !dbg !45
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !46
  %96 = bitcast float %93 to i32, !dbg !47
  %97 = bitcast float %94 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %96, i32 %97, ptr addrspace(1) %95, i1 %10) #3, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cybcbi5c2vazyood3btummcpkjq3mhlvhocj6u2bnzfy3h37s26b.py", directory: "inductor_cache/yb")
!4 = !{ptr @triton_poi_fused_div_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_0", linkageName: "triton_poi_fused_div_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 32, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 37, scope: !7)
!21 = !DILocation(line: 28, column: 34, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 41, scope: !7)
!24 = !DILocation(line: 29, column: 34, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 41, scope: !7)
!27 = !DILocation(line: 30, column: 34, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 41, scope: !7)
!30 = !DILocation(line: 31, column: 18, scope: !7)
!31 = !DILocation(line: 32, column: 18, scope: !7)
!32 = !DILocation(line: 33, column: 18, scope: !7)
!33 = !DILocation(line: 34, column: 18, scope: !7)
!34 = !DILocation(line: 35, column: 18, scope: !7)
!35 = !DILocation(line: 36, column: 19, scope: !7)
!36 = !DILocation(line: 37, column: 19, scope: !7)
!37 = !DILocation(line: 38, column: 27, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 40, column: 42, scope: !7)
!42 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 41, column: 19, scope: !7)
!46 = !DILocation(line: 42, column: 25, scope: !7)
!47 = !DILocation(line: 42, column: 37, scope: !7)
!48 = !DILocation(line: 42, column: 4, scope: !7)
