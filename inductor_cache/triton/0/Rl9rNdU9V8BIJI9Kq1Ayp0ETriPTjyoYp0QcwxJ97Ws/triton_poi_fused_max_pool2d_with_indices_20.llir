; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 28, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 64, !dbg !14
  %16 = icmp slt i32 %14, 64, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %18 = shl i32 %17, 5, !dbg !16
  %19 = shl i32 %8, 3, !dbg !17
  %20 = and i32 %19, 24, !dbg !17
  %21 = lshr i32 %8, 3, !dbg !17
  %22 = and i32 %21, 15, !dbg !17
  %23 = or disjoint i32 %18, %20, !dbg !18
  %24 = or disjoint i32 %23, 4, !dbg !18
  %25 = or disjoint i32 %18, %22, !dbg !18
  %26 = or disjoint i32 %25, 16, !dbg !18
  %27 = icmp slt i32 %23, 640, !dbg !19
  %28 = icmp slt i32 %25, 640, !dbg !19
  %29 = icmp slt i32 %26, 640, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %30 = sdiv i32 %.frozen, 4, !dbg !20
  %31 = mul i32 %30, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %31, !dbg !21
  %.frozen20 = freeze i32 %14, !dbg !22
  %32 = sdiv i32 %.frozen20, 16, !dbg !22
  %33 = mul i32 %32, 16, !dbg !23
  %.decomposed21 = sub i32 %.frozen20, %33, !dbg !23
  %34 = mul nsw i32 %.decomposed, 1280, !dbg !24
  %35 = mul i32 %30, 10240, !dbg !25
  %36 = add i32 %35, %34, !dbg !26
  %37 = add i32 %36, %23, !dbg !27
  %38 = add i32 %36, %24, !dbg !27
  %39 = sext i32 %37 to i64, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !28
  %41 = sext i32 %38 to i64, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !28
  %43 = and i1 %15, %27, !dbg !29
  %44 = and i1 %16, %28, !dbg !29
  %45 = and i1 %29, %16, !dbg !29
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %43) #2, !dbg !30
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !30
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !30
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !30
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !30
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %43) #2, !dbg !30
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !30
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !30
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !30
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !30
  %56 = add i32 %36, 640, !dbg !31
  %57 = add i32 %56, %23, !dbg !32
  %58 = add i32 %56, %24, !dbg !32
  %59 = sext i32 %57 to i64, !dbg !33
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !33
  %61 = sext i32 %58 to i64, !dbg !33
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !33
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %43) #2, !dbg !34
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !34
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !34
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !34
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !34
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %43) #2, !dbg !34
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !34
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !34
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !34
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !34
  %73 = add i32 %36, 5120, !dbg !35
  %74 = add i32 %73, %23, !dbg !36
  %75 = add i32 %73, %24, !dbg !36
  %76 = sext i32 %74 to i64, !dbg !37
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !37
  %78 = sext i32 %75 to i64, !dbg !37
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !37
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %43) #2, !dbg !38
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !38
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !38
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !38
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !38
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %43) #2, !dbg !38
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !38
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !38
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !38
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !38
  %90 = add i32 %36, 5760, !dbg !39
  %91 = add i32 %90, %23, !dbg !40
  %92 = add i32 %90, %24, !dbg !40
  %93 = sext i32 %91 to i64, !dbg !41
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !41
  %95 = sext i32 %92 to i64, !dbg !41
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !41
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %43) #2, !dbg !42
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !42
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !42
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !42
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !42
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %43) #2, !dbg !42
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !42
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !42
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !42
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !42
  %107 = insertelement <4 x i32> poison, i32 %47, i64 0, !dbg !30
  %108 = insertelement <4 x i32> %107, i32 %48, i64 1, !dbg !30
  %109 = insertelement <4 x i32> %108, i32 %49, i64 2, !dbg !30
  %110 = insertelement <4 x i32> %109, i32 %50, i64 3, !dbg !30
  %111 = bitcast <4 x i32> %110 to <4 x float>, !dbg !30
  %112 = insertelement <4 x i32> poison, i32 %64, i64 0, !dbg !34
  %113 = insertelement <4 x i32> %112, i32 %65, i64 1, !dbg !34
  %114 = insertelement <4 x i32> %113, i32 %66, i64 2, !dbg !34
  %115 = insertelement <4 x i32> %114, i32 %67, i64 3, !dbg !34
  %116 = bitcast <4 x i32> %115 to <4 x float>, !dbg !34
  %117 = insertelement <4 x i32> poison, i32 %81, i64 0, !dbg !38
  %118 = insertelement <4 x i32> %117, i32 %82, i64 1, !dbg !38
  %119 = insertelement <4 x i32> %118, i32 %83, i64 2, !dbg !38
  %120 = insertelement <4 x i32> %119, i32 %84, i64 3, !dbg !38
  %121 = bitcast <4 x i32> %120 to <4 x float>, !dbg !38
  %122 = insertelement <4 x i32> poison, i32 %98, i64 0, !dbg !42
  %123 = insertelement <4 x i32> %122, i32 %99, i64 1, !dbg !42
  %124 = insertelement <4 x i32> %123, i32 %100, i64 2, !dbg !42
  %125 = insertelement <4 x i32> %124, i32 %101, i64 3, !dbg !42
  %126 = bitcast <4 x i32> %125 to <4 x float>, !dbg !42
  %127 = fcmp ogt <4 x float> %116, %111, !dbg !43
  %128 = fcmp uno <4 x float> %116, zeroinitializer, !dbg !47
  %129 = or <4 x i1> %127, %128, !dbg !48
  %.v = select <4 x i1> %129, <4 x i32> %115, <4 x i32> %110, !dbg !49
  %130 = bitcast <4 x i32> %.v to <4 x float>, !dbg !49
  %131 = fcmp olt <4 x float> %130, %121, !dbg !50
  %132 = fcmp uno <4 x float> %121, zeroinitializer, !dbg !52
  %133 = or <4 x i1> %132, %131, !dbg !53
  %.v17 = select <4 x i1> %133, <4 x i32> %120, <4 x i32> %.v, !dbg !54
  %134 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !54
  %135 = fcmp olt <4 x float> %134, %126, !dbg !55
  %136 = extractelement <4 x i1> %135, i64 0, !dbg !57
  %137 = extractelement <4 x i1> %135, i64 1, !dbg !57
  %138 = extractelement <4 x i1> %135, i64 2, !dbg !57
  %139 = extractelement <4 x i1> %135, i64 3, !dbg !57
  %140 = zext <4 x i1> %127 to <4 x i8>, !dbg !58
  %141 = select <4 x i1> %131, <4 x i8> splat (i8 2), <4 x i8> %140, !dbg !59
  %142 = select <4 x i1> %135, <4 x i8> splat (i8 3), <4 x i8> %141, !dbg !60
  %143 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !30
  %144 = insertelement <4 x i32> %143, i32 %53, i64 1, !dbg !30
  %145 = insertelement <4 x i32> %144, i32 %54, i64 2, !dbg !30
  %146 = insertelement <4 x i32> %145, i32 %55, i64 3, !dbg !30
  %147 = bitcast <4 x i32> %146 to <4 x float>, !dbg !30
  %148 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !34
  %149 = insertelement <4 x i32> %148, i32 %70, i64 1, !dbg !34
  %150 = insertelement <4 x i32> %149, i32 %71, i64 2, !dbg !34
  %151 = insertelement <4 x i32> %150, i32 %72, i64 3, !dbg !34
  %152 = bitcast <4 x i32> %151 to <4 x float>, !dbg !34
  %153 = insertelement <4 x i32> poison, i32 %86, i64 0, !dbg !38
  %154 = insertelement <4 x i32> %153, i32 %87, i64 1, !dbg !38
  %155 = insertelement <4 x i32> %154, i32 %88, i64 2, !dbg !38
  %156 = insertelement <4 x i32> %155, i32 %89, i64 3, !dbg !38
  %157 = bitcast <4 x i32> %156 to <4 x float>, !dbg !38
  %158 = insertelement <4 x i32> poison, i32 %103, i64 0, !dbg !42
  %159 = insertelement <4 x i32> %158, i32 %104, i64 1, !dbg !42
  %160 = insertelement <4 x i32> %159, i32 %105, i64 2, !dbg !42
  %161 = insertelement <4 x i32> %160, i32 %106, i64 3, !dbg !42
  %162 = bitcast <4 x i32> %161 to <4 x float>, !dbg !42
  %163 = fcmp ogt <4 x float> %152, %147, !dbg !43
  %164 = fcmp uno <4 x float> %152, zeroinitializer, !dbg !47
  %165 = or <4 x i1> %163, %164, !dbg !48
  %.v18 = select <4 x i1> %165, <4 x i32> %151, <4 x i32> %146, !dbg !49
  %166 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !49
  %167 = fcmp olt <4 x float> %166, %157, !dbg !50
  %168 = fcmp uno <4 x float> %157, zeroinitializer, !dbg !52
  %169 = or <4 x i1> %168, %167, !dbg !53
  %.v19 = select <4 x i1> %169, <4 x i32> %156, <4 x i32> %.v18, !dbg !54
  %170 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !54
  %171 = fcmp olt <4 x float> %170, %162, !dbg !55
  %172 = shufflevector <4 x float> %162, <4 x float> %126, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !61
  %173 = fcmp uno <8 x float> %172, zeroinitializer, !dbg !61
  %174 = extractelement <8 x i1> %173, i64 7, !dbg !57
  %175 = or i1 %174, %136, !dbg !57
  %176 = extractelement <8 x i1> %173, i64 6, !dbg !57
  %177 = or i1 %176, %137, !dbg !57
  %178 = extractelement <8 x i1> %173, i64 5, !dbg !57
  %179 = or i1 %178, %138, !dbg !57
  %180 = extractelement <8 x i1> %173, i64 4, !dbg !57
  %181 = or i1 %180, %139, !dbg !57
  %182 = extractelement <4 x i1> %171, i64 0, !dbg !57
  %183 = extractelement <8 x i1> %173, i64 3, !dbg !57
  %184 = or i1 %183, %182, !dbg !57
  %185 = extractelement <4 x i1> %171, i64 1, !dbg !57
  %186 = extractelement <8 x i1> %173, i64 2, !dbg !57
  %187 = or i1 %186, %185, !dbg !57
  %188 = extractelement <4 x i1> %171, i64 2, !dbg !57
  %189 = extractelement <8 x i1> %173, i64 1, !dbg !57
  %190 = or i1 %189, %188, !dbg !57
  %191 = extractelement <4 x i1> %171, i64 3, !dbg !57
  %192 = extractelement <8 x i1> %173, i64 0, !dbg !57
  %193 = or i1 %192, %191, !dbg !57
  %194 = zext <4 x i1> %163 to <4 x i8>, !dbg !58
  %195 = select <4 x i1> %167, <4 x i8> splat (i8 2), <4 x i8> %194, !dbg !59
  %196 = select <4 x i1> %171, <4 x i8> splat (i8 3), <4 x i8> %195, !dbg !60
  %197 = shl i32 %25, 4, !dbg !62
  %198 = shl i32 %26, 4, !dbg !62
  %199 = mul i32 %32, 10240, !dbg !63
  %200 = add i32 %199, %.decomposed21, !dbg !64
  %201 = add i32 %200, %197, !dbg !65
  %202 = add i32 %200, %198, !dbg !65
  %203 = sext i32 %201 to i64, !dbg !66
  %204 = getelementptr float, ptr addrspace(1) %1, i64 %203, !dbg !66
  %205 = sext i32 %202 to i64, !dbg !66
  %206 = getelementptr float, ptr addrspace(1) %1, i64 %205, !dbg !66
  %207 = shl i32 %8, 8, !dbg !67
  %208 = and i32 %207, 768, !dbg !67
  %209 = or disjoint i32 %208, %10, !dbg !67
  %210 = and i32 %11, 508, !dbg !67
  %211 = lshr exact i32 %208, 1, !dbg !67
  %212 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %211, !dbg !67
  %213 = getelementptr float, ptr addrspace(3) %212, i32 %209, !dbg !67
  %214 = extractelement <4 x i32> %.v17, i64 0, !dbg !67
  %215 = select i1 %175, i32 %98, i32 %214, !dbg !68
  %216 = insertelement <1 x i32> poison, i32 %215, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %216, i1 true) #2, !dbg !67
  %217 = or disjoint i32 %209, 32, !dbg !67
  %218 = lshr i32 %217, 3, !dbg !67
  %219 = and i32 %218, 100, !dbg !67
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i32 %219, !dbg !67
  %221 = getelementptr float, ptr addrspace(3) %220, i32 %217, !dbg !67
  %222 = extractelement <4 x i32> %.v17, i64 1, !dbg !67
  %223 = select i1 %177, i32 %99, i32 %222, !dbg !68
  %224 = insertelement <1 x i32> poison, i32 %223, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %224, i1 true) #2, !dbg !67
  %225 = or disjoint i32 %209, 64, !dbg !67
  %226 = lshr i32 %225, 3, !dbg !67
  %227 = and i32 %226, 104, !dbg !67
  %228 = getelementptr float, ptr addrspace(3) @global_smem, i32 %227, !dbg !67
  %229 = getelementptr float, ptr addrspace(3) %228, i32 %225, !dbg !67
  %230 = extractelement <4 x i32> %.v17, i64 2, !dbg !67
  %231 = select i1 %179, i32 %100, i32 %230, !dbg !68
  %232 = insertelement <1 x i32> poison, i32 %231, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %232, i1 true) #2, !dbg !67
  %233 = or disjoint i32 %209, 96, !dbg !67
  %234 = lshr i32 %233, 3, !dbg !67
  %235 = and i32 %234, 108, !dbg !67
  %236 = getelementptr float, ptr addrspace(3) @global_smem, i32 %235, !dbg !67
  %237 = getelementptr float, ptr addrspace(3) %236, i32 %233, !dbg !67
  %238 = extractelement <4 x i32> %.v17, i64 3, !dbg !67
  %239 = select i1 %181, i32 %101, i32 %238, !dbg !68
  %240 = insertelement <1 x i32> poison, i32 %239, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %240, i1 true) #2, !dbg !67
  %241 = or disjoint i32 %209, 128, !dbg !67
  %242 = lshr i32 %241, 3, !dbg !67
  %243 = and i32 %242, 112, !dbg !67
  %244 = getelementptr float, ptr addrspace(3) @global_smem, i32 %243, !dbg !67
  %245 = getelementptr float, ptr addrspace(3) %244, i32 %241, !dbg !67
  %246 = extractelement <4 x i32> %.v19, i64 0, !dbg !67
  %247 = select i1 %184, i32 %103, i32 %246, !dbg !68
  %248 = insertelement <1 x i32> poison, i32 %247, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %248, i1 true) #2, !dbg !67
  %249 = or disjoint i32 %209, 160, !dbg !67
  %250 = lshr i32 %249, 3, !dbg !67
  %251 = and i32 %250, 116, !dbg !67
  %252 = getelementptr float, ptr addrspace(3) @global_smem, i32 %251, !dbg !67
  %253 = getelementptr float, ptr addrspace(3) %252, i32 %249, !dbg !67
  %254 = extractelement <4 x i32> %.v19, i64 1, !dbg !67
  %255 = select i1 %187, i32 %104, i32 %254, !dbg !68
  %256 = insertelement <1 x i32> poison, i32 %255, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %256, i1 true) #2, !dbg !67
  %257 = or disjoint i32 %209, 192, !dbg !67
  %258 = lshr i32 %257, 3, !dbg !67
  %259 = and i32 %258, 120, !dbg !67
  %260 = getelementptr float, ptr addrspace(3) @global_smem, i32 %259, !dbg !67
  %261 = getelementptr float, ptr addrspace(3) %260, i32 %257, !dbg !67
  %262 = extractelement <4 x i32> %.v19, i64 2, !dbg !67
  %263 = select i1 %190, i32 %105, i32 %262, !dbg !68
  %264 = insertelement <1 x i32> poison, i32 %263, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %264, i1 true) #2, !dbg !67
  %265 = or disjoint i32 %209, 224, !dbg !67
  %266 = lshr i32 %265, 3, !dbg !67
  %267 = and i32 %266, 124, !dbg !67
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i32 %267, !dbg !67
  %269 = getelementptr float, ptr addrspace(3) %268, i32 %265, !dbg !67
  %270 = extractelement <4 x i32> %.v19, i64 3, !dbg !67
  %271 = select i1 %193, i32 %106, i32 %270, !dbg !68
  %272 = insertelement <1 x i32> poison, i32 %271, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %272, i1 true) #2, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %273 = lshr i32 %11, 3, !dbg !67
  %274 = and i32 %273, 60, !dbg !67
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %274, !dbg !67
  %276 = getelementptr inbounds float, ptr addrspace(3) %275, i32 %210, !dbg !67
  %277 = or disjoint i32 %210, 512, !dbg !67
  %278 = lshr i32 %277, 3, !dbg !67
  %279 = and i32 %278, 124, !dbg !67
  %280 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %279, !dbg !67
  %281 = getelementptr inbounds float, ptr addrspace(3) %280, i32 %277, !dbg !67
  %282 = load <4 x i32>, ptr addrspace(3) %281, align 16, !dbg !67
  %.extract = load i32, ptr addrspace(3) %276, align 16, !dbg !67
  %283 = getelementptr inbounds i8, ptr addrspace(3) %276, i32 4, !dbg !67
  %.extract10 = load i32, ptr addrspace(3) %283, align 4, !dbg !67
  %284 = getelementptr inbounds i8, ptr addrspace(3) %276, i32 8, !dbg !67
  %.extract11 = load i32, ptr addrspace(3) %284, align 8, !dbg !67
  %285 = getelementptr inbounds i8, ptr addrspace(3) %276, i32 12, !dbg !67
  %.extract12 = load i32, ptr addrspace(3) %285, align 4, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %204, i1 %44) #2, !dbg !67
  %.extract13 = extractelement <4 x i32> %282, i64 0, !dbg !67
  %.extract14 = extractelement <4 x i32> %282, i64 1, !dbg !67
  %.extract15 = extractelement <4 x i32> %282, i64 2, !dbg !67
  %.extract16 = extractelement <4 x i32> %282, i64 3, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %206, i1 %45) #2, !dbg !67
  %286 = mul i32 %13, 640, !dbg !69
  %287 = add i32 %23, %286, !dbg !70
  %288 = sext i32 %287 to i64, !dbg !71
  %289 = getelementptr i8, ptr addrspace(1) %2, i64 %288, !dbg !71
  %290 = bitcast <4 x i8> %142 to i32, !dbg !72
  %291 = bitcast <4 x i8> %196 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %290, i32 %291, ptr addrspace(1) %289, i1 %43) #2, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjjylk435scqsbno747fvh5nre6edxu54b5lpd2aygahezotzk3j.py", directory: "inductor_cache/jj")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_20", linkageName: "triton_poi_fused_max_pool2d_with_indices_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 40, scope: !7)
!25 = !DILocation(line: 34, column: 51, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 45, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 64, scope: !7)
!30 = !DILocation(line: 34, column: 56, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 51, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 62, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 36, column: 52, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 63, scope: !7)
!39 = !DILocation(line: 37, column: 42, scope: !7)
!40 = !DILocation(line: 37, column: 52, scope: !7)
!41 = !DILocation(line: 37, column: 30, scope: !7)
!42 = !DILocation(line: 37, column: 63, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 38, column: 40, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !51)
!51 = !DILocation(line: 39, column: 40, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !51)
!55 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !56)
!56 = !DILocation(line: 40, column: 40, scope: !7)
!57 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !56)
!58 = !DILocation(line: 44, column: 33, scope: !7)
!59 = !DILocation(line: 47, column: 35, scope: !7)
!60 = !DILocation(line: 50, column: 35, scope: !7)
!61 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !56)
!62 = !DILocation(line: 51, column: 33, scope: !7)
!63 = !DILocation(line: 51, column: 44, scope: !7)
!64 = !DILocation(line: 51, column: 30, scope: !7)
!65 = !DILocation(line: 51, column: 38, scope: !7)
!66 = !DILocation(line: 51, column: 25, scope: !7)
!67 = !DILocation(line: 51, column: 55, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !56)
!69 = !DILocation(line: 52, column: 34, scope: !7)
!70 = !DILocation(line: 52, column: 30, scope: !7)
!71 = !DILocation(line: 52, column: 25, scope: !7)
!72 = !DILocation(line: 52, column: 46, scope: !7)
!73 = !DILocation(line: 52, column: 4, scope: !7)
