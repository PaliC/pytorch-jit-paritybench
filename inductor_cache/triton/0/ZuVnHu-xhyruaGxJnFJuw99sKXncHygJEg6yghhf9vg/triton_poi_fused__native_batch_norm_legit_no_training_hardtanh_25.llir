; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = shl i32 %11, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %10, %15, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %19 = shl i32 %18, 2, !dbg !15
  %20 = lshr i32 %11, 6, !dbg !16
  %.lobit = and i32 %20, 1, !dbg !16
  %21 = or disjoint i32 %19, %.lobit, !dbg !17
  %22 = or disjoint i32 %21, 2, !dbg !17
  %23 = icmp slt i32 %21, 4, !dbg !18
  %24 = icmp slt i32 %22, 4, !dbg !18
  %.frozen = freeze i32 %16, !dbg !19
  %25 = sdiv i32 %.frozen, 1280, !dbg !19
  %26 = mul i32 %25, 1280, !dbg !20
  %.decomposed = sub i32 %.frozen, %26, !dbg !20
  %27 = srem i32 %17, 1280, !dbg !20
  %28 = mul i32 %21, 1280, !dbg !21
  %29 = mul i32 %22, 1280, !dbg !21
  %30 = mul i32 %25, 5120, !dbg !22
  %31 = add i32 %30, %.decomposed, !dbg !23
  %32 = add i32 %31, %28, !dbg !24
  %33 = add i32 %31, %29, !dbg !24
  %34 = sext i32 %32 to i64, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !25
  %36 = sext i32 %33 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %23) #4, !dbg !26
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !26
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %24) #4, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !26
  %48 = and i32 %12, 508, !dbg !26
  %49 = lshr i32 %12, 6, !dbg !26
  %50 = and i32 %49, 4, !dbg !26
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %50, !dbg !26
  %52 = getelementptr inbounds float, ptr addrspace(3) %51, i32 %48, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %52, i32 %39, i32 %40, i32 %41, i32 %42, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !26
  %54 = load <2 x float>, ptr addrspace(3) %53, align 8, !dbg !26
  %55 = getelementptr inbounds i8, ptr addrspace(3) %53, i32 1040, !dbg !26
  %56 = load <2 x float>, ptr addrspace(3) %55, align 8, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %52, i32 %44, i32 %45, i32 %46, i32 %47, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %57 = load <2 x float>, ptr addrspace(3) %53, align 8, !dbg !26
  %58 = load <2 x float>, ptr addrspace(3) %55, align 8, !dbg !26
  %59 = sext i32 %27 to i64, !dbg !27
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !27
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !28
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !29
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !30
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !30
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !30
  %66 = bitcast i32 %64 to float, !dbg !30
  %67 = bitcast i32 %65 to float, !dbg !30
  %68 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !31
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #4, !dbg !32
  %70 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !33
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %70, i1 true) #4, !dbg !34
  %72 = fadd float %66, 0x3EE4F8B580000000, !dbg !35
  %73 = fadd float %67, 0x3EE4F8B580000000, !dbg !35
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %74, 0, !dbg !36
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %75, 0, !dbg !36
  br i1 %.not.i, label %81, label %76, !dbg !36

76:                                               ; preds = %8
  br i1 %.not1.i, label %79, label %77, !dbg !36

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

81:                                               ; preds = %8
  br i1 %.not1.i, label %84, label %82, !dbg !36

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %77, %79, %82, %84
  %.0.i = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !36
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i16 = icmp eq i32 %86, 0, !dbg !36
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i19 = icmp eq i32 %87, 0, !dbg !36
  br i1 %.not.i16, label %93, label %88, !dbg !36

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %91, label %89, !dbg !36

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %96, label %94, !dbg !36

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

__nv_sqrtf.exit20:                                ; preds = %89, %91, %94, %96
  %.0.i18 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !36
  %98 = extractvalue { i32, i32 } %61, 1, !dbg !28
  %99 = extractvalue { i32, i32 } %61, 0, !dbg !28
  %100 = extractelement <2 x float> %56, i64 1, !dbg !26
  %101 = extractelement <2 x float> %56, i64 0, !dbg !26
  %102 = extractelement <2 x float> %54, i64 1, !dbg !26
  %103 = extractelement <2 x float> %54, i64 0, !dbg !26
  %104 = extractvalue { i32, i32 } %71, 1, !dbg !34
  %105 = extractvalue { i32, i32 } %71, 0, !dbg !34
  %106 = extractvalue { i32, i32 } %69, 1, !dbg !32
  %107 = extractvalue { i32, i32 } %69, 0, !dbg !32
  %108 = icmp slt i32 %19, 4, !dbg !18
  %109 = and i32 %11, 127, !dbg !12
  %110 = or disjoint i32 %109, 128, !dbg !12
  %111 = or disjoint i32 %10, %110, !dbg !13
  %112 = or disjoint i32 %10, %109, !dbg !13
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #4, !dbg !37
  %115 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !28
  %116 = insertelement <2 x i32> %115, i32 %99, i64 1, !dbg !28
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !28
  %118 = shufflevector <2 x float> %117, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !28
  %119 = shufflevector <2 x float> %58, <2 x float> %57, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %120 = insertelement <8 x float> %119, float %100, i64 4, !dbg !38
  %121 = insertelement <8 x float> %120, float %101, i64 5, !dbg !38
  %122 = insertelement <8 x float> %121, float %102, i64 6, !dbg !38
  %123 = insertelement <8 x float> %122, float %103, i64 7, !dbg !38
  %124 = fsub <8 x float> %123, %118, !dbg !38
  %125 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !34
  %126 = insertelement <2 x i32> %125, i32 %105, i64 1, !dbg !34
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !34
  %128 = shufflevector <2 x float> %127, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !34
  %129 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !32
  %130 = insertelement <2 x i32> %129, i32 %107, i64 1, !dbg !32
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !32
  %132 = shufflevector <2 x float> %131, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %133 = insertelement <8 x float> poison, float %114, i64 0, !dbg !39
  %134 = insertelement <8 x float> %133, float %113, i64 1, !dbg !39
  %135 = shufflevector <8 x float> %134, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !39
  %136 = fmul <8 x float> %124, %135, !dbg !39
  %137 = fmul <8 x float> %136, %132, !dbg !40
  %138 = fadd <8 x float> %137, %128, !dbg !41
  %139 = fcmp ole <8 x float> %138, zeroinitializer, !dbg !42
  %140 = select <8 x i1> %139, <8 x float> zeroinitializer, <8 x float> %138, !dbg !42
  %141 = fcmp olt <8 x float> %140, splat (float 6.000000e+00), !dbg !46
  %142 = extractelement <8 x float> %140, i64 7, !dbg !48
  %143 = fcmp uno float %142, 0.000000e+00, !dbg !49
  %144 = extractelement <8 x float> %140, i64 6, !dbg !48
  %145 = fcmp uno float %144, 0.000000e+00, !dbg !49
  %146 = extractelement <8 x float> %140, i64 5, !dbg !48
  %147 = fcmp uno float %146, 0.000000e+00, !dbg !49
  %148 = extractelement <8 x float> %140, i64 4, !dbg !48
  %149 = fcmp uno float %148, 0.000000e+00, !dbg !49
  %150 = extractelement <8 x float> %140, i64 3, !dbg !48
  %151 = fcmp uno float %150, 0.000000e+00, !dbg !49
  %152 = extractelement <8 x float> %140, i64 2, !dbg !48
  %153 = fcmp uno float %152, 0.000000e+00, !dbg !49
  %154 = extractelement <8 x float> %140, i64 1, !dbg !48
  %155 = fcmp uno float %154, 0.000000e+00, !dbg !49
  %156 = extractelement <8 x float> %140, i64 0, !dbg !48
  %157 = fcmp uno float %156, 0.000000e+00, !dbg !49
  %158 = extractelement <8 x i1> %141, i64 7, !dbg !50
  %159 = or i1 %158, %143, !dbg !50
  %160 = extractelement <8 x i1> %141, i64 6, !dbg !50
  %161 = or i1 %160, %145, !dbg !50
  %162 = extractelement <8 x i1> %141, i64 5, !dbg !50
  %163 = or i1 %162, %147, !dbg !50
  %164 = extractelement <8 x i1> %141, i64 4, !dbg !50
  %165 = or i1 %164, %149, !dbg !50
  %166 = extractelement <8 x i1> %141, i64 3, !dbg !50
  %167 = or i1 %166, %151, !dbg !50
  %168 = extractelement <8 x i1> %141, i64 2, !dbg !50
  %169 = or i1 %168, %153, !dbg !50
  %170 = extractelement <8 x i1> %141, i64 1, !dbg !50
  %171 = or i1 %170, %155, !dbg !50
  %172 = extractelement <8 x i1> %141, i64 0, !dbg !50
  %173 = or i1 %172, %157, !dbg !50
  %174 = add i32 %112, %18, !dbg !51
  %175 = shl i32 %174, 2, !dbg !51
  %176 = add i32 %111, %18, !dbg !51
  %177 = shl i32 %176, 2, !dbg !51
  %178 = sext i32 %175 to i64, !dbg !52
  %179 = getelementptr float, ptr addrspace(1) %5, i64 %178, !dbg !52
  %180 = sext i32 %177 to i64, !dbg !52
  %181 = getelementptr float, ptr addrspace(1) %5, i64 %180, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %182 = shl i32 %11, 3, !dbg !48
  %183 = and i32 %182, 1016, !dbg !48
  %184 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %183, !dbg !48
  %185 = getelementptr float, ptr addrspace(3) %184, i32 %183, !dbg !48
  %186 = bitcast float %142 to i32, !dbg !48
  %187 = select i1 %159, i32 %186, i32 1086324736, !dbg !53
  %188 = insertelement <1 x i32> poison, i32 %187, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %188, i1 true) #4, !dbg !48
  %189 = or disjoint i32 %183, 4, !dbg !48
  %190 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %189, !dbg !48
  %191 = getelementptr float, ptr addrspace(3) %190, i32 %189, !dbg !48
  %192 = bitcast float %144 to i32, !dbg !48
  %193 = select i1 %161, i32 %192, i32 1086324736, !dbg !53
  %194 = insertelement <1 x i32> poison, i32 %193, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %194, i1 true) #4, !dbg !48
  %195 = or disjoint i32 %183, 1, !dbg !48
  %196 = getelementptr float, ptr addrspace(3) %184, i32 %195, !dbg !48
  %197 = bitcast float %146 to i32, !dbg !48
  %198 = select i1 %163, i32 %197, i32 1086324736, !dbg !53
  %199 = insertelement <1 x i32> poison, i32 %198, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %199, i1 true) #4, !dbg !48
  %200 = or disjoint i32 %183, 5, !dbg !48
  %201 = lshr i32 %200, 2, !dbg !48
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i32 %201, !dbg !48
  %203 = getelementptr float, ptr addrspace(3) %202, i32 %200, !dbg !48
  %204 = bitcast float %148 to i32, !dbg !48
  %205 = select i1 %165, i32 %204, i32 1086324736, !dbg !53
  %206 = insertelement <1 x i32> poison, i32 %205, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %206, i1 true) #4, !dbg !48
  %207 = or disjoint i32 %183, 2, !dbg !48
  %208 = getelementptr float, ptr addrspace(3) %184, i32 %207, !dbg !48
  %209 = bitcast float %150 to i32, !dbg !48
  %210 = select i1 %167, i32 %209, i32 1086324736, !dbg !53
  %211 = insertelement <1 x i32> poison, i32 %210, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %211, i1 true) #4, !dbg !48
  %212 = or disjoint i32 %183, 6, !dbg !48
  %213 = lshr i32 %212, 2, !dbg !48
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i32 %213, !dbg !48
  %215 = getelementptr float, ptr addrspace(3) %214, i32 %212, !dbg !48
  %216 = bitcast float %152 to i32, !dbg !48
  %217 = select i1 %169, i32 %216, i32 1086324736, !dbg !53
  %218 = insertelement <1 x i32> poison, i32 %217, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %218, i1 true) #4, !dbg !48
  %219 = or disjoint i32 %183, 3, !dbg !48
  %220 = getelementptr float, ptr addrspace(3) %184, i32 %219, !dbg !48
  %221 = bitcast float %154 to i32, !dbg !48
  %222 = select i1 %171, i32 %221, i32 1086324736, !dbg !53
  %223 = insertelement <1 x i32> poison, i32 %222, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %223, i1 true) #4, !dbg !48
  %224 = or disjoint i32 %183, 7, !dbg !48
  %225 = lshr i32 %224, 2, !dbg !48
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i32 %225, !dbg !48
  %227 = getelementptr float, ptr addrspace(3) %226, i32 %224, !dbg !48
  %228 = bitcast float %156 to i32, !dbg !48
  %229 = select i1 %173, i32 %228, i32 1086324736, !dbg !53
  %230 = insertelement <1 x i32> poison, i32 %229, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %230, i1 true) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %231 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %48, !dbg !48
  %232 = getelementptr inbounds float, ptr addrspace(3) %231, i32 %48, !dbg !48
  %233 = load i32, ptr addrspace(3) %232, align 4, !dbg !48
  %234 = or disjoint i32 %48, 1, !dbg !48
  %235 = getelementptr inbounds float, ptr addrspace(3) %231, i32 %234, !dbg !48
  %236 = load i32, ptr addrspace(3) %235, align 4, !dbg !48
  %237 = or disjoint i32 %48, 2, !dbg !48
  %238 = getelementptr inbounds float, ptr addrspace(3) %231, i32 %237, !dbg !48
  %239 = load i32, ptr addrspace(3) %238, align 4, !dbg !48
  %240 = or disjoint i32 %48, 3, !dbg !48
  %241 = getelementptr inbounds float, ptr addrspace(3) %231, i32 %240, !dbg !48
  %242 = load i32, ptr addrspace(3) %241, align 4, !dbg !48
  %243 = or disjoint i32 %48, 512, !dbg !48
  %244 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %243, !dbg !48
  %245 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %243, !dbg !48
  %246 = load i32, ptr addrspace(3) %245, align 4, !dbg !48
  %247 = or disjoint i32 %48, 513, !dbg !48
  %248 = lshr i32 %247, 2, !dbg !48
  %249 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %248, !dbg !48
  %250 = getelementptr inbounds float, ptr addrspace(3) %249, i32 %247, !dbg !48
  %251 = load i32, ptr addrspace(3) %250, align 4, !dbg !48
  %252 = or disjoint i32 %48, 514, !dbg !48
  %253 = lshr i32 %252, 2, !dbg !48
  %254 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %253, !dbg !48
  %255 = getelementptr inbounds float, ptr addrspace(3) %254, i32 %252, !dbg !48
  %256 = load i32, ptr addrspace(3) %255, align 4, !dbg !48
  %257 = or disjoint i32 %48, 515, !dbg !48
  %258 = lshr i32 %257, 2, !dbg !48
  %259 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %258, !dbg !48
  %260 = getelementptr inbounds float, ptr addrspace(3) %259, i32 %257, !dbg !48
  %261 = load i32, ptr addrspace(3) %260, align 4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %233, i32 %236, i32 %239, i32 %242, ptr addrspace(1) %179, i1 %108) #4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %246, i32 %251, i32 %256, i32 %261, ptr addrspace(1) %181, i1 %108) #4, !dbg !48
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmi7c53vhcddsjxkclu5e5tguj6b36wovp2dtu5zgobgwof2thou.py", directory: "inductor_cache/mi")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_25", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 49, column: 42, scope: !7)
!46 = !DILocation(line: 110, column: 15, scope: !43, inlinedAt: !47)
!47 = !DILocation(line: 51, column: 42, scope: !7)
!48 = !DILocation(line: 52, column: 44, scope: !7)
!49 = !DILocation(line: 112, column: 21, scope: !43, inlinedAt: !47)
!50 = !DILocation(line: 112, column: 16, scope: !43, inlinedAt: !47)
!51 = !DILocation(line: 52, column: 30, scope: !7)
!52 = !DILocation(line: 52, column: 25, scope: !7)
!53 = !DILocation(line: 113, column: 29, scope: !43, inlinedAt: !47)
!54 = !DILocation(line: 52, column: 4, scope: !7)
