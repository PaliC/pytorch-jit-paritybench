; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 10, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = shl i32 %20, 2, !dbg !12
  %22 = and i32 %21, 508, !dbg !12
  %23 = or disjoint i32 %19, %22, !dbg !13
  %24 = or disjoint i32 %23, 1, !dbg !13
  %25 = or disjoint i32 %23, 2, !dbg !13
  %26 = or disjoint i32 %23, 3, !dbg !13
  %27 = or disjoint i32 %23, 512, !dbg !13
  %.frozen = freeze i32 %23, !dbg !14
  %28 = sdiv i32 %.frozen, 32, !dbg !14
  %29 = mul i32 %28, 32, !dbg !15
  %.decomposed = sub i32 %.frozen, %29, !dbg !15
  %30 = srem i32 %24, 32, !dbg !15
  %31 = srem i32 %25, 32, !dbg !15
  %32 = srem i32 %26, 32, !dbg !15
  %33 = sdiv i32 %27, 32, !dbg !14
  %34 = sdiv i32 %23, 1024, !dbg !16
  %35 = sdiv i32 %27, 1024, !dbg !16
  %36 = srem i32 %34, 108, !dbg !17
  %37 = srem i32 %35, 108, !dbg !17
  %38 = shl nsw i32 %.decomposed, 1, !dbg !18
  %39 = shl nsw i32 %30, 1, !dbg !18
  %40 = shl nsw i32 %31, 1, !dbg !18
  %41 = shl nsw i32 %32, 1, !dbg !18
  %42 = shl i32 %28, 7, !dbg !19
  %43 = shl i32 %33, 7, !dbg !19
  %44 = add i32 %38, %42, !dbg !20
  %45 = add i32 %42, %39, !dbg !20
  %46 = add i32 %42, %40, !dbg !20
  %47 = add i32 %42, %41, !dbg !20
  %48 = add i32 %38, %43, !dbg !20
  %49 = add i32 %39, %43, !dbg !20
  %50 = add i32 %40, %43, !dbg !20
  %51 = add i32 %41, %43, !dbg !20
  %52 = sext i32 %44 to i64, !dbg !21
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !21
  %54 = sext i32 %45 to i64, !dbg !21
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !21
  %56 = sext i32 %46 to i64, !dbg !21
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !21
  %58 = sext i32 %47 to i64, !dbg !21
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !21
  %60 = sext i32 %48 to i64, !dbg !21
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !21
  %62 = sext i32 %49 to i64, !dbg !21
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !21
  %64 = sext i32 %50 to i64, !dbg !21
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !21
  %66 = sext i32 %51 to i64, !dbg !21
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !21
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !22
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !22
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !22
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !22
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !22
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !22
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !22
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !22
  %76 = or disjoint i32 %44, 1, !dbg !23
  %77 = or disjoint i32 %45, 1, !dbg !23
  %78 = or disjoint i32 %46, 1, !dbg !23
  %79 = or disjoint i32 %47, 1, !dbg !23
  %80 = or disjoint i32 %48, 1, !dbg !23
  %81 = or disjoint i32 %49, 1, !dbg !23
  %82 = or disjoint i32 %50, 1, !dbg !23
  %83 = or disjoint i32 %51, 1, !dbg !23
  %84 = sext i32 %76 to i64, !dbg !24
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !24
  %86 = sext i32 %77 to i64, !dbg !24
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !24
  %88 = sext i32 %78 to i64, !dbg !24
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !24
  %90 = sext i32 %79 to i64, !dbg !24
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !24
  %92 = sext i32 %80 to i64, !dbg !24
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !24
  %94 = sext i32 %81 to i64, !dbg !24
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !24
  %96 = sext i32 %82 to i64, !dbg !24
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !24
  %98 = sext i32 %83 to i64, !dbg !24
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !24
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !25
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !25
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !25
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !25
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !25
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !25
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #3, !dbg !25
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #3, !dbg !25
  %108 = or disjoint i32 %42, 64, !dbg !26
  %109 = add i32 %108, %38, !dbg !27
  %110 = add i32 %108, %39, !dbg !27
  %111 = add i32 %108, %40, !dbg !27
  %112 = add i32 %108, %41, !dbg !27
  %113 = or disjoint i32 %43, 64, !dbg !26
  %114 = add i32 %113, %38, !dbg !27
  %115 = add i32 %113, %39, !dbg !27
  %116 = add i32 %113, %40, !dbg !27
  %117 = add i32 %113, %41, !dbg !27
  %118 = sext i32 %109 to i64, !dbg !28
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !28
  %120 = sext i32 %110 to i64, !dbg !28
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !28
  %122 = sext i32 %111 to i64, !dbg !28
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !28
  %124 = sext i32 %112 to i64, !dbg !28
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !28
  %126 = sext i32 %114 to i64, !dbg !28
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !28
  %128 = sext i32 %115 to i64, !dbg !28
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !28
  %130 = sext i32 %116 to i64, !dbg !28
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !28
  %132 = sext i32 %117 to i64, !dbg !28
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !28
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #3, !dbg !29
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #3, !dbg !29
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !29
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #3, !dbg !29
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #3, !dbg !29
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #3, !dbg !29
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 true) #3, !dbg !29
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #3, !dbg !29
  %142 = or disjoint i32 %42, 65, !dbg !30
  %143 = add i32 %142, %38, !dbg !31
  %144 = add i32 %142, %39, !dbg !31
  %145 = add i32 %142, %40, !dbg !31
  %146 = add i32 %142, %41, !dbg !31
  %147 = or disjoint i32 %43, 65, !dbg !30
  %148 = add i32 %147, %38, !dbg !31
  %149 = add i32 %147, %39, !dbg !31
  %150 = add i32 %147, %40, !dbg !31
  %151 = add i32 %147, %41, !dbg !31
  %152 = sext i32 %143 to i64, !dbg !32
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !32
  %154 = sext i32 %144 to i64, !dbg !32
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !32
  %156 = sext i32 %145 to i64, !dbg !32
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !32
  %158 = sext i32 %146 to i64, !dbg !32
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !32
  %160 = sext i32 %148 to i64, !dbg !32
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !32
  %162 = sext i32 %149 to i64, !dbg !32
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !32
  %164 = sext i32 %150 to i64, !dbg !32
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !32
  %166 = sext i32 %151 to i64, !dbg !32
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !32
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 true) #3, !dbg !33
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 true) #3, !dbg !33
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 true) #3, !dbg !33
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 true) #3, !dbg !33
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 true) #3, !dbg !33
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 true) #3, !dbg !33
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 true) #3, !dbg !33
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 true) #3, !dbg !33
  %176 = sext i32 %36 to i64, !dbg !34
  %177 = getelementptr float, ptr addrspace(1) %1, i64 %176, !dbg !34
  %178 = sext i32 %37 to i64, !dbg !34
  %179 = getelementptr float, ptr addrspace(1) %1, i64 %178, !dbg !34
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 true) #3, !dbg !35
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 true) #3, !dbg !35
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 true) #3, !dbg !35
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 true) #3, !dbg !35
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 true) #3, !dbg !35
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 true) #3, !dbg !35
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 true) #3, !dbg !35
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 true) #3, !dbg !35
  %188 = getelementptr float, ptr addrspace(1) %2, i64 %176, !dbg !36
  %189 = getelementptr float, ptr addrspace(1) %2, i64 %178, !dbg !36
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 true) #3, !dbg !37
  %191 = bitcast i32 %190 to float, !dbg !37
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 true) #3, !dbg !37
  %193 = bitcast i32 %192 to float, !dbg !37
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 true) #3, !dbg !37
  %195 = bitcast i32 %194 to float, !dbg !37
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 true) #3, !dbg !37
  %197 = bitcast i32 %196 to float, !dbg !37
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 true) #3, !dbg !37
  %199 = bitcast i32 %198 to float, !dbg !37
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 true) #3, !dbg !37
  %201 = bitcast i32 %200 to float, !dbg !37
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 true) #3, !dbg !37
  %203 = bitcast i32 %202 to float, !dbg !37
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 true) #3, !dbg !37
  %205 = bitcast i32 %204 to float, !dbg !37
  %206 = getelementptr float, ptr addrspace(1) %3, i64 %176, !dbg !38
  %207 = getelementptr float, ptr addrspace(1) %3, i64 %178, !dbg !38
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 true) #3, !dbg !39
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 true) #3, !dbg !39
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 true) #3, !dbg !39
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 true) #3, !dbg !39
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 true) #3, !dbg !39
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 true) #3, !dbg !39
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 true) #3, !dbg !39
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 true) #3, !dbg !39
  %216 = getelementptr float, ptr addrspace(1) %4, i64 %176, !dbg !40
  %217 = getelementptr float, ptr addrspace(1) %4, i64 %178, !dbg !40
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 true) #3, !dbg !41
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 true) #3, !dbg !41
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 true) #3, !dbg !41
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 true) #3, !dbg !41
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 true) #3, !dbg !41
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 true) #3, !dbg !41
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 true) #3, !dbg !41
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 true) #3, !dbg !41
  %226 = fadd float %191, 0x3EE4F8B580000000, !dbg !42
  %227 = fadd float %193, 0x3EE4F8B580000000, !dbg !42
  %228 = fadd float %195, 0x3EE4F8B580000000, !dbg !42
  %229 = fadd float %197, 0x3EE4F8B580000000, !dbg !42
  %230 = fadd float %199, 0x3EE4F8B580000000, !dbg !42
  %231 = fadd float %201, 0x3EE4F8B580000000, !dbg !42
  %232 = fadd float %203, 0x3EE4F8B580000000, !dbg !42
  %233 = fadd float %205, 0x3EE4F8B580000000, !dbg !42
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i = icmp eq i32 %234, 0, !dbg !43
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i = icmp eq i32 %235, 0, !dbg !43
  br i1 %.not.i, label %241, label %236, !dbg !43

236:                                              ; preds = %17
  br i1 %.not1.i, label %239, label %237, !dbg !43

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %226) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %226) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

241:                                              ; preds = %17
  br i1 %.not1.i, label %244, label %242, !dbg !43

242:                                              ; preds = %241
  %243 = tail call float @llvm.nvvm.sqrt.rn.f(float %226) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

244:                                              ; preds = %241
  %245 = tail call float @llvm.nvvm.sqrt.approx.f(float %226) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %237, %239, %242, %244
  %.0.i = phi float [ %238, %237 ], [ %240, %239 ], [ %243, %242 ], [ %245, %244 ], !dbg !43
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i1 = icmp eq i32 %246, 0, !dbg !43
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i4 = icmp eq i32 %247, 0, !dbg !43
  br i1 %.not.i1, label %253, label %248, !dbg !43

248:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %251, label %249, !dbg !43

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %227) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %227) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

253:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %256, label %254, !dbg !43

254:                                              ; preds = %253
  %255 = tail call float @llvm.nvvm.sqrt.rn.f(float %227) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

256:                                              ; preds = %253
  %257 = tail call float @llvm.nvvm.sqrt.approx.f(float %227) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

__nv_sqrtf.exit5:                                 ; preds = %249, %251, %254, %256
  %.0.i3 = phi float [ %250, %249 ], [ %252, %251 ], [ %255, %254 ], [ %257, %256 ], !dbg !43
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i6 = icmp eq i32 %258, 0, !dbg !43
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i9 = icmp eq i32 %259, 0, !dbg !43
  br i1 %.not.i6, label %265, label %260, !dbg !43

260:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %263, label %261, !dbg !43

261:                                              ; preds = %260
  %262 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %228) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

263:                                              ; preds = %260
  %264 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %228) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

265:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %268, label %266, !dbg !43

266:                                              ; preds = %265
  %267 = tail call float @llvm.nvvm.sqrt.rn.f(float %228) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

268:                                              ; preds = %265
  %269 = tail call float @llvm.nvvm.sqrt.approx.f(float %228) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

__nv_sqrtf.exit10:                                ; preds = %261, %263, %266, %268
  %.0.i8 = phi float [ %262, %261 ], [ %264, %263 ], [ %267, %266 ], [ %269, %268 ], !dbg !43
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i11 = icmp eq i32 %270, 0, !dbg !43
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i14 = icmp eq i32 %271, 0, !dbg !43
  br i1 %.not.i11, label %277, label %272, !dbg !43

272:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %275, label %273, !dbg !43

273:                                              ; preds = %272
  %274 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %229) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

275:                                              ; preds = %272
  %276 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %229) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

277:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %280, label %278, !dbg !43

278:                                              ; preds = %277
  %279 = tail call float @llvm.nvvm.sqrt.rn.f(float %229) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

280:                                              ; preds = %277
  %281 = tail call float @llvm.nvvm.sqrt.approx.f(float %229) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

__nv_sqrtf.exit15:                                ; preds = %273, %275, %278, %280
  %.0.i13 = phi float [ %274, %273 ], [ %276, %275 ], [ %279, %278 ], [ %281, %280 ], !dbg !43
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i16 = icmp eq i32 %282, 0, !dbg !43
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i19 = icmp eq i32 %283, 0, !dbg !43
  br i1 %.not.i16, label %289, label %284, !dbg !43

284:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %287, label %285, !dbg !43

285:                                              ; preds = %284
  %286 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %230) #3, !dbg !43
  br label %__nv_sqrtf.exit20, !dbg !43

287:                                              ; preds = %284
  %288 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %230) #3, !dbg !43
  br label %__nv_sqrtf.exit20, !dbg !43

289:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %292, label %290, !dbg !43

290:                                              ; preds = %289
  %291 = tail call float @llvm.nvvm.sqrt.rn.f(float %230) #3, !dbg !43
  br label %__nv_sqrtf.exit20, !dbg !43

292:                                              ; preds = %289
  %293 = tail call float @llvm.nvvm.sqrt.approx.f(float %230) #3, !dbg !43
  br label %__nv_sqrtf.exit20, !dbg !43

__nv_sqrtf.exit20:                                ; preds = %285, %287, %290, %292
  %.0.i18 = phi float [ %286, %285 ], [ %288, %287 ], [ %291, %290 ], [ %293, %292 ], !dbg !43
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i21 = icmp eq i32 %294, 0, !dbg !43
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i24 = icmp eq i32 %295, 0, !dbg !43
  br i1 %.not.i21, label %301, label %296, !dbg !43

296:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %299, label %297, !dbg !43

297:                                              ; preds = %296
  %298 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %231) #3, !dbg !43
  br label %__nv_sqrtf.exit25, !dbg !43

299:                                              ; preds = %296
  %300 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %231) #3, !dbg !43
  br label %__nv_sqrtf.exit25, !dbg !43

301:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %304, label %302, !dbg !43

302:                                              ; preds = %301
  %303 = tail call float @llvm.nvvm.sqrt.rn.f(float %231) #3, !dbg !43
  br label %__nv_sqrtf.exit25, !dbg !43

304:                                              ; preds = %301
  %305 = tail call float @llvm.nvvm.sqrt.approx.f(float %231) #3, !dbg !43
  br label %__nv_sqrtf.exit25, !dbg !43

__nv_sqrtf.exit25:                                ; preds = %297, %299, %302, %304
  %.0.i23 = phi float [ %298, %297 ], [ %300, %299 ], [ %303, %302 ], [ %305, %304 ], !dbg !43
  %306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i26 = icmp eq i32 %306, 0, !dbg !43
  %307 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i29 = icmp eq i32 %307, 0, !dbg !43
  br i1 %.not.i26, label %313, label %308, !dbg !43

308:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %311, label %309, !dbg !43

309:                                              ; preds = %308
  %310 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %232) #3, !dbg !43
  br label %__nv_sqrtf.exit30, !dbg !43

311:                                              ; preds = %308
  %312 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %232) #3, !dbg !43
  br label %__nv_sqrtf.exit30, !dbg !43

313:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %316, label %314, !dbg !43

314:                                              ; preds = %313
  %315 = tail call float @llvm.nvvm.sqrt.rn.f(float %232) #3, !dbg !43
  br label %__nv_sqrtf.exit30, !dbg !43

316:                                              ; preds = %313
  %317 = tail call float @llvm.nvvm.sqrt.approx.f(float %232) #3, !dbg !43
  br label %__nv_sqrtf.exit30, !dbg !43

__nv_sqrtf.exit30:                                ; preds = %309, %311, %314, %316
  %.0.i28 = phi float [ %310, %309 ], [ %312, %311 ], [ %315, %314 ], [ %317, %316 ], !dbg !43
  %318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i31 = icmp eq i32 %318, 0, !dbg !43
  %319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i34 = icmp eq i32 %319, 0, !dbg !43
  br i1 %.not.i31, label %325, label %320, !dbg !43

320:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %323, label %321, !dbg !43

321:                                              ; preds = %320
  %322 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %233) #3, !dbg !43
  br label %__nv_sqrtf.exit35, !dbg !43

323:                                              ; preds = %320
  %324 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %233) #3, !dbg !43
  br label %__nv_sqrtf.exit35, !dbg !43

325:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %328, label %326, !dbg !43

326:                                              ; preds = %325
  %327 = tail call float @llvm.nvvm.sqrt.rn.f(float %233) #3, !dbg !43
  br label %__nv_sqrtf.exit35, !dbg !43

328:                                              ; preds = %325
  %329 = tail call float @llvm.nvvm.sqrt.approx.f(float %233) #3, !dbg !43
  br label %__nv_sqrtf.exit35, !dbg !43

__nv_sqrtf.exit35:                                ; preds = %321, %323, %326, %328
  %.0.i33 = phi float [ %322, %321 ], [ %324, %323 ], [ %327, %326 ], [ %329, %328 ], !dbg !43
  %330 = insertelement <8 x i32> poison, i32 %107, i64 0, !dbg !25
  %331 = insertelement <8 x i32> %330, i32 %106, i64 1, !dbg !25
  %332 = insertelement <8 x i32> %331, i32 %105, i64 2, !dbg !25
  %333 = insertelement <8 x i32> %332, i32 %104, i64 3, !dbg !25
  %334 = insertelement <8 x i32> %333, i32 %103, i64 4, !dbg !25
  %335 = insertelement <8 x i32> %334, i32 %102, i64 5, !dbg !25
  %336 = insertelement <8 x i32> %335, i32 %101, i64 6, !dbg !25
  %337 = insertelement <8 x i32> %336, i32 %100, i64 7, !dbg !25
  %338 = bitcast <8 x i32> %337 to <8 x float>, !dbg !25
  %339 = insertelement <8 x i32> poison, i32 %75, i64 0, !dbg !22
  %340 = insertelement <8 x i32> %339, i32 %74, i64 1, !dbg !22
  %341 = insertelement <8 x i32> %340, i32 %73, i64 2, !dbg !22
  %342 = insertelement <8 x i32> %341, i32 %72, i64 3, !dbg !22
  %343 = insertelement <8 x i32> %342, i32 %71, i64 4, !dbg !22
  %344 = insertelement <8 x i32> %343, i32 %70, i64 5, !dbg !22
  %345 = insertelement <8 x i32> %344, i32 %69, i64 6, !dbg !22
  %346 = insertelement <8 x i32> %345, i32 %68, i64 7, !dbg !22
  %347 = bitcast <8 x i32> %346 to <8 x float>, !dbg !22
  %348 = insertelement <8 x i32> poison, i32 %141, i64 0, !dbg !29
  %349 = insertelement <8 x i32> %348, i32 %140, i64 1, !dbg !29
  %350 = insertelement <8 x i32> %349, i32 %139, i64 2, !dbg !29
  %351 = insertelement <8 x i32> %350, i32 %138, i64 3, !dbg !29
  %352 = insertelement <8 x i32> %351, i32 %137, i64 4, !dbg !29
  %353 = insertelement <8 x i32> %352, i32 %136, i64 5, !dbg !29
  %354 = insertelement <8 x i32> %353, i32 %135, i64 6, !dbg !29
  %355 = insertelement <8 x i32> %354, i32 %134, i64 7, !dbg !29
  %356 = bitcast <8 x i32> %355 to <8 x float>, !dbg !29
  %357 = insertelement <8 x i32> poison, i32 %175, i64 0, !dbg !33
  %358 = insertelement <8 x i32> %357, i32 %174, i64 1, !dbg !33
  %359 = insertelement <8 x i32> %358, i32 %173, i64 2, !dbg !33
  %360 = insertelement <8 x i32> %359, i32 %172, i64 3, !dbg !33
  %361 = insertelement <8 x i32> %360, i32 %171, i64 4, !dbg !33
  %362 = insertelement <8 x i32> %361, i32 %170, i64 5, !dbg !33
  %363 = insertelement <8 x i32> %362, i32 %169, i64 6, !dbg !33
  %364 = insertelement <8 x i32> %363, i32 %168, i64 7, !dbg !33
  %365 = bitcast <8 x i32> %364 to <8 x float>, !dbg !33
  %366 = insertelement <8 x i32> poison, i32 %187, i64 0, !dbg !35
  %367 = insertelement <8 x i32> %366, i32 %186, i64 1, !dbg !35
  %368 = insertelement <8 x i32> %367, i32 %185, i64 2, !dbg !35
  %369 = insertelement <8 x i32> %368, i32 %184, i64 3, !dbg !35
  %370 = insertelement <8 x i32> %369, i32 %183, i64 4, !dbg !35
  %371 = insertelement <8 x i32> %370, i32 %182, i64 5, !dbg !35
  %372 = insertelement <8 x i32> %371, i32 %181, i64 6, !dbg !35
  %373 = insertelement <8 x i32> %372, i32 %180, i64 7, !dbg !35
  %374 = bitcast <8 x i32> %373 to <8 x float>, !dbg !35
  %375 = insertelement <8 x i32> poison, i32 %225, i64 0, !dbg !41
  %376 = insertelement <8 x i32> %375, i32 %224, i64 1, !dbg !41
  %377 = insertelement <8 x i32> %376, i32 %223, i64 2, !dbg !41
  %378 = insertelement <8 x i32> %377, i32 %222, i64 3, !dbg !41
  %379 = insertelement <8 x i32> %378, i32 %221, i64 4, !dbg !41
  %380 = insertelement <8 x i32> %379, i32 %220, i64 5, !dbg !41
  %381 = insertelement <8 x i32> %380, i32 %219, i64 6, !dbg !41
  %382 = insertelement <8 x i32> %381, i32 %218, i64 7, !dbg !41
  %383 = bitcast <8 x i32> %382 to <8 x float>, !dbg !41
  %384 = insertelement <8 x i32> poison, i32 %215, i64 0, !dbg !39
  %385 = insertelement <8 x i32> %384, i32 %214, i64 1, !dbg !39
  %386 = insertelement <8 x i32> %385, i32 %213, i64 2, !dbg !39
  %387 = insertelement <8 x i32> %386, i32 %212, i64 3, !dbg !39
  %388 = insertelement <8 x i32> %387, i32 %211, i64 4, !dbg !39
  %389 = insertelement <8 x i32> %388, i32 %210, i64 5, !dbg !39
  %390 = insertelement <8 x i32> %389, i32 %209, i64 6, !dbg !39
  %391 = insertelement <8 x i32> %390, i32 %208, i64 7, !dbg !39
  %392 = bitcast <8 x i32> %391 to <8 x float>, !dbg !39
  %.frozen51 = freeze i32 %27, !dbg !44
  %393 = sdiv i32 %.frozen51, 110592, !dbg !44
  %394 = mul i32 %393, 110592, !dbg !45
  %.decomposed52 = sub i32 %.frozen51, %394, !dbg !45
  %.frozen53 = freeze i32 %23, !dbg !44
  %395 = sdiv i32 %.frozen53, 110592, !dbg !44
  %396 = mul i32 %395, 110592, !dbg !45
  %.decomposed54 = sub i32 %.frozen53, %396, !dbg !45
  %397 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !46
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !46
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !46
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !46
  %401 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !46
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !46
  %403 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !46
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !46
  %405 = fadd <8 x float> %347, %338, !dbg !47
  %406 = fadd <8 x float> %405, %356, !dbg !48
  %407 = fadd <8 x float> %406, %365, !dbg !49
  %408 = fmul <8 x float> %407, splat (float 2.500000e-01), !dbg !50
  %409 = fsub <8 x float> %408, %374, !dbg !51
  %410 = insertelement <8 x float> poison, float %404, i64 0, !dbg !52
  %411 = insertelement <8 x float> %410, float %403, i64 1, !dbg !52
  %412 = insertelement <8 x float> %411, float %402, i64 2, !dbg !52
  %413 = insertelement <8 x float> %412, float %401, i64 3, !dbg !52
  %414 = insertelement <8 x float> %413, float %400, i64 4, !dbg !52
  %415 = insertelement <8 x float> %414, float %399, i64 5, !dbg !52
  %416 = insertelement <8 x float> %415, float %398, i64 6, !dbg !52
  %417 = insertelement <8 x float> %416, float %397, i64 7, !dbg !52
  %418 = fmul <8 x float> %409, %417, !dbg !52
  %419 = fmul <8 x float> %418, %392, !dbg !53
  %420 = fadd <8 x float> %419, %383, !dbg !54
  %421 = fcmp olt <8 x float> %420, zeroinitializer, !dbg !55
  %422 = extractelement <8 x i1> %421, i64 7, !dbg !59
  %423 = extractelement <8 x i1> %421, i64 6, !dbg !59
  %424 = extractelement <8 x i1> %421, i64 5, !dbg !59
  %425 = extractelement <8 x i1> %421, i64 4, !dbg !59
  %426 = extractelement <8 x i1> %421, i64 3, !dbg !59
  %427 = extractelement <8 x i1> %421, i64 2, !dbg !59
  %428 = extractelement <8 x i1> %421, i64 1, !dbg !59
  %429 = extractelement <8 x i1> %421, i64 0, !dbg !59
  %430 = sext i32 %23 to i64, !dbg !60
  %431 = getelementptr float, ptr addrspace(1) %5, i64 %430, !dbg !60
  %432 = sext i32 %27 to i64, !dbg !60
  %433 = getelementptr float, ptr addrspace(1) %5, i64 %432, !dbg !60
  %bc = bitcast <8 x float> %408 to <8 x i32>, !dbg !61
  %434 = extractelement <8 x i32> %bc, i64 7, !dbg !61
  %bc36 = bitcast <8 x float> %408 to <8 x i32>, !dbg !61
  %435 = extractelement <8 x i32> %bc36, i64 6, !dbg !61
  %bc37 = bitcast <8 x float> %408 to <8 x i32>, !dbg !61
  %436 = extractelement <8 x i32> %bc37, i64 5, !dbg !61
  %bc38 = bitcast <8 x float> %408 to <8 x i32>, !dbg !61
  %437 = extractelement <8 x i32> %bc38, i64 4, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %434, i32 %435, i32 %436, i32 %437, ptr addrspace(1) %431, i1 true) #3, !dbg !61
  %bc39 = bitcast <8 x float> %408 to <8 x i32>, !dbg !61
  %438 = extractelement <8 x i32> %bc39, i64 3, !dbg !61
  %bc40 = bitcast <8 x float> %408 to <8 x i32>, !dbg !61
  %439 = extractelement <8 x i32> %bc40, i64 2, !dbg !61
  %bc41 = bitcast <8 x float> %408 to <8 x i32>, !dbg !61
  %440 = extractelement <8 x i32> %bc41, i64 1, !dbg !61
  %bc42 = bitcast <8 x float> %408 to <8 x i32>, !dbg !61
  %441 = extractelement <8 x i32> %bc42, i64 0, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %438, i32 %439, i32 %440, i32 %441, ptr addrspace(1) %433, i1 true) #3, !dbg !61
  %442 = getelementptr float, ptr addrspace(1) %6, i64 %430, !dbg !62
  %443 = getelementptr float, ptr addrspace(1) %6, i64 %432, !dbg !62
  %bc43 = bitcast <8 x float> %420 to <8 x i32>, !dbg !63
  %444 = extractelement <8 x i32> %bc43, i64 7, !dbg !63
  %445 = select i1 %422, i32 0, i32 %444, !dbg !59
  %bc44 = bitcast <8 x float> %420 to <8 x i32>, !dbg !63
  %446 = extractelement <8 x i32> %bc44, i64 6, !dbg !63
  %447 = select i1 %423, i32 0, i32 %446, !dbg !59
  %bc45 = bitcast <8 x float> %420 to <8 x i32>, !dbg !63
  %448 = extractelement <8 x i32> %bc45, i64 5, !dbg !63
  %449 = select i1 %424, i32 0, i32 %448, !dbg !59
  %bc46 = bitcast <8 x float> %420 to <8 x i32>, !dbg !63
  %450 = extractelement <8 x i32> %bc46, i64 4, !dbg !63
  %451 = select i1 %425, i32 0, i32 %450, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %445, i32 %447, i32 %449, i32 %451, ptr addrspace(1) %442, i1 true) #3, !dbg !63
  %bc47 = bitcast <8 x float> %420 to <8 x i32>, !dbg !63
  %452 = extractelement <8 x i32> %bc47, i64 3, !dbg !63
  %453 = select i1 %426, i32 0, i32 %452, !dbg !59
  %bc48 = bitcast <8 x float> %420 to <8 x i32>, !dbg !63
  %454 = extractelement <8 x i32> %bc48, i64 2, !dbg !63
  %455 = select i1 %427, i32 0, i32 %454, !dbg !59
  %bc49 = bitcast <8 x float> %420 to <8 x i32>, !dbg !63
  %456 = extractelement <8 x i32> %bc49, i64 1, !dbg !63
  %457 = select i1 %428, i32 0, i32 %456, !dbg !59
  %bc50 = bitcast <8 x float> %420 to <8 x i32>, !dbg !63
  %458 = extractelement <8 x i32> %bc50, i64 0, !dbg !63
  %459 = select i1 %429, i32 0, i32 %458, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %453, i32 %455, i32 %457, i32 %459, ptr addrspace(1) %443, i1 true) #3, !dbg !63
  %460 = mul i32 %395, 208896, !dbg !64
  %461 = mul i32 %393, 208896, !dbg !64
  %462 = add i32 %460, %.decomposed54, !dbg !65
  %463 = add i32 %461, %.decomposed52, !dbg !65
  %464 = sext i32 %462 to i64, !dbg !66
  %465 = getelementptr float, ptr addrspace(1) %7, i64 %464, !dbg !66
  %466 = sext i32 %463 to i64, !dbg !66
  %467 = getelementptr float, ptr addrspace(1) %7, i64 %466, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %434, i32 %435, i32 %436, i32 %437, ptr addrspace(1) %465, i1 true) #3, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %438, i32 %439, i32 %440, i32 %441, ptr addrspace(1) %467, i1 true) #3, !dbg !67
  %468 = mul i32 %395, 221184, !dbg !68
  %469 = mul i32 %393, 221184, !dbg !68
  %470 = add i32 %468, %.decomposed54, !dbg !69
  %471 = add i32 %469, %.decomposed52, !dbg !69
  %472 = sext i32 %470 to i64, !dbg !70
  %473 = getelementptr float, ptr addrspace(1) %8, i64 %472, !dbg !70
  %474 = sext i32 %471 to i64, !dbg !70
  %475 = getelementptr float, ptr addrspace(1) %8, i64 %474, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %434, i32 %435, i32 %436, i32 %437, ptr addrspace(1) %473, i1 true) #3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %438, i32 %439, i32 %440, i32 %441, ptr addrspace(1) %475, i1 true) #3, !dbg !71
  %476 = mul i32 %395, 233472, !dbg !72
  %477 = mul i32 %393, 233472, !dbg !72
  %478 = add i32 %476, %.decomposed54, !dbg !73
  %479 = add i32 %477, %.decomposed52, !dbg !73
  %480 = sext i32 %478 to i64, !dbg !74
  %481 = getelementptr float, ptr addrspace(1) %9, i64 %480, !dbg !74
  %482 = sext i32 %479 to i64, !dbg !74
  %483 = getelementptr float, ptr addrspace(1) %9, i64 %482, !dbg !74
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %434, i32 %435, i32 %436, i32 %437, ptr addrspace(1) %481, i1 true) #3, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %438, i32 %439, i32 %440, i32 %441, ptr addrspace(1) %483, i1 true) #3, !dbg !75
  %484 = mul i32 %395, 245760, !dbg !76
  %485 = mul i32 %393, 245760, !dbg !76
  %486 = add i32 %484, %.decomposed54, !dbg !77
  %487 = add i32 %485, %.decomposed52, !dbg !77
  %488 = sext i32 %486 to i64, !dbg !78
  %489 = getelementptr float, ptr addrspace(1) %10, i64 %488, !dbg !78
  %490 = sext i32 %487 to i64, !dbg !78
  %491 = getelementptr float, ptr addrspace(1) %10, i64 %490, !dbg !78
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %434, i32 %435, i32 %436, i32 %437, ptr addrspace(1) %489, i1 true) #3, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %438, i32 %439, i32 %440, i32 %441, ptr addrspace(1) %491, i1 true) #3, !dbg !79
  %492 = mul i32 %395, 258048, !dbg !80
  %493 = mul i32 %393, 258048, !dbg !80
  %494 = add i32 %492, %.decomposed54, !dbg !81
  %495 = add i32 %493, %.decomposed52, !dbg !81
  %496 = sext i32 %494 to i64, !dbg !82
  %497 = getelementptr float, ptr addrspace(1) %11, i64 %496, !dbg !82
  %498 = sext i32 %495 to i64, !dbg !82
  %499 = getelementptr float, ptr addrspace(1) %11, i64 %498, !dbg !82
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %434, i32 %435, i32 %436, i32 %437, ptr addrspace(1) %497, i1 true) #3, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %438, i32 %439, i32 %440, i32 %441, ptr addrspace(1) %499, i1 true) #3, !dbg !83
  %500 = mul i32 %395, 270336, !dbg !84
  %501 = mul i32 %393, 270336, !dbg !84
  %502 = add i32 %500, %.decomposed54, !dbg !85
  %503 = add i32 %501, %.decomposed52, !dbg !85
  %504 = sext i32 %502 to i64, !dbg !86
  %505 = getelementptr float, ptr addrspace(1) %12, i64 %504, !dbg !86
  %506 = sext i32 %503 to i64, !dbg !86
  %507 = getelementptr float, ptr addrspace(1) %12, i64 %506, !dbg !86
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %434, i32 %435, i32 %436, i32 %437, ptr addrspace(1) %505, i1 true) #3, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %438, i32 %439, i32 %440, i32 %441, ptr addrspace(1) %507, i1 true) #3, !dbg !87
  %508 = mul i32 %395, 282624, !dbg !88
  %509 = mul i32 %393, 282624, !dbg !88
  %510 = add i32 %508, %.decomposed54, !dbg !89
  %511 = add i32 %509, %.decomposed52, !dbg !89
  %512 = sext i32 %510 to i64, !dbg !90
  %513 = getelementptr float, ptr addrspace(1) %13, i64 %512, !dbg !90
  %514 = sext i32 %511 to i64, !dbg !90
  %515 = getelementptr float, ptr addrspace(1) %13, i64 %514, !dbg !90
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %434, i32 %435, i32 %436, i32 %437, ptr addrspace(1) %513, i1 true) #3, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %438, i32 %439, i32 %440, i32 %441, ptr addrspace(1) %515, i1 true) #3, !dbg !91
  %516 = mul i32 %395, 294912, !dbg !92
  %517 = mul i32 %393, 294912, !dbg !92
  %518 = add i32 %516, %.decomposed54, !dbg !93
  %519 = add i32 %517, %.decomposed52, !dbg !93
  %520 = sext i32 %518 to i64, !dbg !94
  %521 = getelementptr float, ptr addrspace(1) %14, i64 %520, !dbg !94
  %522 = sext i32 %519 to i64, !dbg !94
  %523 = getelementptr float, ptr addrspace(1) %14, i64 %522, !dbg !94
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %434, i32 %435, i32 %436, i32 %437, ptr addrspace(1) %521, i1 true) #3, !dbg !95
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %438, i32 %439, i32 %440, i32 %441, ptr addrspace(1) %523, i1 true) #3, !dbg !95
  %524 = mul i32 %395, 307200, !dbg !96
  %525 = mul i32 %393, 307200, !dbg !96
  %526 = add i32 %524, %.decomposed54, !dbg !97
  %527 = add i32 %525, %.decomposed52, !dbg !97
  %528 = sext i32 %526 to i64, !dbg !98
  %529 = getelementptr float, ptr addrspace(1) %15, i64 %528, !dbg !98
  %530 = sext i32 %527 to i64, !dbg !98
  %531 = getelementptr float, ptr addrspace(1) %15, i64 %530, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %434, i32 %435, i32 %436, i32 %437, ptr addrspace(1) %529, i1 true) #3, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %438, i32 %439, i32 %440, i32 %441, ptr addrspace(1) %531, i1 true) #3, !dbg !99
  ret void, !dbg !100
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caswtr6w63e7bhpfwjfqon3eo6p577iamam7nc3jzishzazsho3s.py", directory: "inductor_cache/as")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_29", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 27, column: 29, scope: !7)
!18 = !DILocation(line: 30, column: 32, scope: !7)
!19 = !DILocation(line: 30, column: 41, scope: !7)
!20 = !DILocation(line: 30, column: 37, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 46, scope: !7)
!23 = !DILocation(line: 31, column: 41, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 50, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 42, scope: !7)
!28 = !DILocation(line: 32, column: 30, scope: !7)
!29 = !DILocation(line: 32, column: 51, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 42, scope: !7)
!32 = !DILocation(line: 33, column: 30, scope: !7)
!33 = !DILocation(line: 33, column: 51, scope: !7)
!34 = !DILocation(line: 34, column: 30, scope: !7)
!35 = !DILocation(line: 34, column: 35, scope: !7)
!36 = !DILocation(line: 35, column: 31, scope: !7)
!37 = !DILocation(line: 35, column: 36, scope: !7)
!38 = !DILocation(line: 36, column: 31, scope: !7)
!39 = !DILocation(line: 36, column: 36, scope: !7)
!40 = !DILocation(line: 37, column: 31, scope: !7)
!41 = !DILocation(line: 37, column: 36, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 46, column: 27, scope: !7)
!44 = !DILocation(line: 28, column: 19, scope: !7)
!45 = !DILocation(line: 29, column: 19, scope: !7)
!46 = !DILocation(line: 48, column: 20, scope: !7)
!47 = !DILocation(line: 38, column: 18, scope: !7)
!48 = !DILocation(line: 39, column: 18, scope: !7)
!49 = !DILocation(line: 40, column: 18, scope: !7)
!50 = !DILocation(line: 42, column: 18, scope: !7)
!51 = !DILocation(line: 43, column: 19, scope: !7)
!52 = !DILocation(line: 51, column: 20, scope: !7)
!53 = !DILocation(line: 52, column: 20, scope: !7)
!54 = !DILocation(line: 53, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 55, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!60 = !DILocation(line: 56, column: 25, scope: !7)
!61 = !DILocation(line: 56, column: 36, scope: !7)
!62 = !DILocation(line: 57, column: 25, scope: !7)
!63 = !DILocation(line: 57, column: 37, scope: !7)
!64 = !DILocation(line: 58, column: 37, scope: !7)
!65 = !DILocation(line: 58, column: 30, scope: !7)
!66 = !DILocation(line: 58, column: 25, scope: !7)
!67 = !DILocation(line: 58, column: 48, scope: !7)
!68 = !DILocation(line: 59, column: 37, scope: !7)
!69 = !DILocation(line: 59, column: 30, scope: !7)
!70 = !DILocation(line: 59, column: 25, scope: !7)
!71 = !DILocation(line: 59, column: 48, scope: !7)
!72 = !DILocation(line: 60, column: 37, scope: !7)
!73 = !DILocation(line: 60, column: 30, scope: !7)
!74 = !DILocation(line: 60, column: 25, scope: !7)
!75 = !DILocation(line: 60, column: 48, scope: !7)
!76 = !DILocation(line: 61, column: 37, scope: !7)
!77 = !DILocation(line: 61, column: 30, scope: !7)
!78 = !DILocation(line: 61, column: 25, scope: !7)
!79 = !DILocation(line: 61, column: 48, scope: !7)
!80 = !DILocation(line: 62, column: 37, scope: !7)
!81 = !DILocation(line: 62, column: 30, scope: !7)
!82 = !DILocation(line: 62, column: 25, scope: !7)
!83 = !DILocation(line: 62, column: 48, scope: !7)
!84 = !DILocation(line: 63, column: 37, scope: !7)
!85 = !DILocation(line: 63, column: 30, scope: !7)
!86 = !DILocation(line: 63, column: 25, scope: !7)
!87 = !DILocation(line: 63, column: 48, scope: !7)
!88 = !DILocation(line: 64, column: 37, scope: !7)
!89 = !DILocation(line: 64, column: 30, scope: !7)
!90 = !DILocation(line: 64, column: 25, scope: !7)
!91 = !DILocation(line: 64, column: 48, scope: !7)
!92 = !DILocation(line: 65, column: 37, scope: !7)
!93 = !DILocation(line: 65, column: 30, scope: !7)
!94 = !DILocation(line: 65, column: 25, scope: !7)
!95 = !DILocation(line: 65, column: 48, scope: !7)
!96 = !DILocation(line: 66, column: 38, scope: !7)
!97 = !DILocation(line: 66, column: 31, scope: !7)
!98 = !DILocation(line: 66, column: 26, scope: !7)
!99 = !DILocation(line: 66, column: 49, scope: !7)
!100 = !DILocation(line: 66, column: 4, scope: !7)
