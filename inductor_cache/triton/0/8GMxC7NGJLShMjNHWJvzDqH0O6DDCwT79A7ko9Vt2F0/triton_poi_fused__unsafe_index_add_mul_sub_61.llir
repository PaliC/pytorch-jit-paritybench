; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_61(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 2, !dbg !13
  %19 = or disjoint i32 %17, 512, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %20 = sdiv i32 %.frozen, 64, !dbg !14
  %21 = sdiv i32 %19, 64, !dbg !14
  %22 = srem i32 %20, 64, !dbg !15
  %23 = srem i32 %21, 64, !dbg !15
  %24 = mul i32 %20, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = srem i32 %18, 64, !dbg !16
  %26 = sdiv i32 %17, 4096, !dbg !17
  %27 = sdiv i32 %19, 4096, !dbg !17
  %.frozen1 = freeze i32 %17, !dbg !18
  %28 = sdiv i32 %.frozen1, 262144, !dbg !18
  %29 = mul i32 %28, 262144, !dbg !19
  %.decomposed2 = sub i32 %.frozen1, %29, !dbg !19
  %.frozen3 = freeze i32 %19, !dbg !18
  %30 = sdiv i32 %.frozen3, 262144, !dbg !18
  %31 = mul i32 %30, 262144, !dbg !19
  %.decomposed4 = sub i32 %.frozen3, %31, !dbg !19
  %32 = sext i32 %22 to i64, !dbg !20
  %33 = getelementptr i64, ptr addrspace(1) %0, i64 %32, !dbg !20
  %34 = sext i32 %23 to i64, !dbg !20
  %35 = getelementptr i64, ptr addrspace(1) %0, i64 %34, !dbg !20
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !21
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !21
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !21
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !21
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !21
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !21
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !21
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !21
  %44 = sext i32 %.decomposed to i64, !dbg !22
  %45 = getelementptr i64, ptr addrspace(1) %1, i64 %44, !dbg !22
  %46 = sext i32 %25 to i64, !dbg !22
  %47 = getelementptr i64, ptr addrspace(1) %1, i64 %46, !dbg !22
  %48 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !23
  %49 = extractvalue { i64, i64 } %48, 0, !dbg !23
  %50 = extractvalue { i64, i64 } %48, 1, !dbg !23
  %51 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !23
  %52 = extractvalue { i64, i64 } %51, 0, !dbg !23
  %53 = extractvalue { i64, i64 } %51, 1, !dbg !23
  %54 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !23
  %55 = extractvalue { i64, i64 } %54, 0, !dbg !23
  %56 = extractvalue { i64, i64 } %54, 1, !dbg !23
  %57 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !23
  %58 = extractvalue { i64, i64 } %57, 0, !dbg !23
  %59 = extractvalue { i64, i64 } %57, 1, !dbg !23
  %60 = sext i32 %26 to i64, !dbg !24
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !24
  %62 = sext i32 %27 to i64, !dbg !24
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !25
  %72 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %4, i64 %62, !dbg !26
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !27
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !27
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !27
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !27
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !27
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !27
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !27
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !27
  %82 = getelementptr i64, ptr addrspace(1) %5, i64 %32, !dbg !28
  %83 = getelementptr i64, ptr addrspace(1) %5, i64 %34, !dbg !28
  %84 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !29
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !29
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !29
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !29
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !29
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !29
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !29
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !29
  %92 = getelementptr i64, ptr addrspace(1) %6, i64 %44, !dbg !30
  %93 = getelementptr i64, ptr addrspace(1) %6, i64 %46, !dbg !30
  %94 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !31
  %95 = extractvalue { i64, i64 } %94, 0, !dbg !31
  %96 = extractvalue { i64, i64 } %94, 1, !dbg !31
  %97 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !31
  %98 = extractvalue { i64, i64 } %97, 0, !dbg !31
  %99 = extractvalue { i64, i64 } %97, 1, !dbg !31
  %100 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !31
  %101 = extractvalue { i64, i64 } %100, 0, !dbg !31
  %102 = extractvalue { i64, i64 } %100, 1, !dbg !31
  %103 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !31
  %104 = extractvalue { i64, i64 } %103, 0, !dbg !31
  %105 = extractvalue { i64, i64 } %103, 1, !dbg !31
  %106 = getelementptr float, ptr addrspace(1) %7, i64 %44, !dbg !32
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !33
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !33
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !33
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !33
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !33
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !33
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !33
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !33
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !33
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !33
  %117 = getelementptr float, ptr addrspace(1) %8, i64 %32, !dbg !34
  %118 = getelementptr float, ptr addrspace(1) %8, i64 %34, !dbg !34
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #1, !dbg !35
  %120 = bitcast i32 %119 to float, !dbg !35
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #1, !dbg !35
  %122 = bitcast i32 %121 to float, !dbg !35
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #1, !dbg !35
  %124 = bitcast i32 %123 to float, !dbg !35
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #1, !dbg !35
  %126 = bitcast i32 %125 to float, !dbg !35
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #1, !dbg !35
  %128 = bitcast i32 %127 to float, !dbg !35
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #1, !dbg !35
  %130 = bitcast i32 %129 to float, !dbg !35
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #1, !dbg !35
  %132 = bitcast i32 %131 to float, !dbg !35
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #1, !dbg !35
  %134 = bitcast i32 %133 to float, !dbg !35
  %135 = lshr i64 %36, 60, !dbg !36
  %136 = and i64 %135, 8, !dbg !36
  %137 = add i64 %136, %36, !dbg !36
  %138 = lshr i64 %40, 60, !dbg !36
  %139 = and i64 %138, 8, !dbg !36
  %140 = add i64 %139, %40, !dbg !36
  %141 = lshr i64 %49, 60, !dbg !37
  %142 = and i64 %141, 8, !dbg !37
  %143 = lshr i64 %50, 60, !dbg !37
  %144 = and i64 %143, 8, !dbg !37
  %145 = lshr i64 %52, 60, !dbg !37
  %146 = and i64 %145, 8, !dbg !37
  %147 = lshr i64 %53, 60, !dbg !37
  %148 = and i64 %147, 8, !dbg !37
  %149 = lshr i64 %55, 60, !dbg !37
  %150 = and i64 %149, 8, !dbg !37
  %151 = lshr i64 %56, 60, !dbg !37
  %152 = and i64 %151, 8, !dbg !37
  %153 = lshr i64 %58, 60, !dbg !37
  %154 = and i64 %153, 8, !dbg !37
  %155 = lshr i64 %59, 60, !dbg !37
  %156 = and i64 %155, 8, !dbg !37
  %157 = shl i64 %137, 3, !dbg !38
  %158 = shl i64 %140, 3, !dbg !38
  %159 = shl nsw i32 %26, 6, !dbg !39
  %160 = shl nsw i32 %27, 6, !dbg !39
  %161 = sext i32 %159 to i64, !dbg !40
  %162 = sext i32 %160 to i64, !dbg !40
  %163 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !41
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %142, !dbg !41
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %157, !dbg !41
  %166 = getelementptr float, ptr addrspace(1) %165, i64 %161, !dbg !41
  %167 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !41
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %144, !dbg !41
  %169 = getelementptr float, ptr addrspace(1) %168, i64 %157, !dbg !41
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %161, !dbg !41
  %171 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !41
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %146, !dbg !41
  %173 = getelementptr float, ptr addrspace(1) %172, i64 %157, !dbg !41
  %174 = getelementptr float, ptr addrspace(1) %173, i64 %161, !dbg !41
  %175 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !41
  %176 = getelementptr float, ptr addrspace(1) %175, i64 %148, !dbg !41
  %177 = getelementptr float, ptr addrspace(1) %176, i64 %157, !dbg !41
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %161, !dbg !41
  %179 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !41
  %180 = getelementptr float, ptr addrspace(1) %179, i64 %150, !dbg !41
  %181 = getelementptr float, ptr addrspace(1) %180, i64 %158, !dbg !41
  %182 = getelementptr float, ptr addrspace(1) %181, i64 %162, !dbg !41
  %183 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !41
  %184 = getelementptr float, ptr addrspace(1) %183, i64 %152, !dbg !41
  %185 = getelementptr float, ptr addrspace(1) %184, i64 %158, !dbg !41
  %186 = getelementptr float, ptr addrspace(1) %185, i64 %162, !dbg !41
  %187 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !41
  %188 = getelementptr float, ptr addrspace(1) %187, i64 %154, !dbg !41
  %189 = getelementptr float, ptr addrspace(1) %188, i64 %158, !dbg !41
  %190 = getelementptr float, ptr addrspace(1) %189, i64 %162, !dbg !41
  %191 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !41
  %192 = getelementptr float, ptr addrspace(1) %191, i64 %156, !dbg !41
  %193 = getelementptr float, ptr addrspace(1) %192, i64 %158, !dbg !41
  %194 = getelementptr float, ptr addrspace(1) %193, i64 %162, !dbg !41
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #1, !dbg !42
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 true) #1, !dbg !42
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 true) #1, !dbg !42
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 true) #1, !dbg !42
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #1, !dbg !42
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 true) #1, !dbg !42
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 true) #1, !dbg !42
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %194, i1 true) #1, !dbg !42
  %203 = lshr i64 %84, 60, !dbg !43
  %204 = and i64 %203, 8, !dbg !43
  %205 = add i64 %204, %84, !dbg !43
  %206 = lshr i64 %88, 60, !dbg !43
  %207 = and i64 %206, 8, !dbg !43
  %208 = add i64 %207, %88, !dbg !43
  %209 = shl i64 %205, 3, !dbg !44
  %210 = shl i64 %208, 3, !dbg !44
  %211 = getelementptr float, ptr addrspace(1) %164, i64 %209, !dbg !45
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %161, !dbg !45
  %213 = getelementptr float, ptr addrspace(1) %168, i64 %209, !dbg !45
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %161, !dbg !45
  %215 = getelementptr float, ptr addrspace(1) %172, i64 %209, !dbg !45
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %161, !dbg !45
  %217 = getelementptr float, ptr addrspace(1) %176, i64 %209, !dbg !45
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %161, !dbg !45
  %219 = getelementptr float, ptr addrspace(1) %180, i64 %210, !dbg !45
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %162, !dbg !45
  %221 = getelementptr float, ptr addrspace(1) %184, i64 %210, !dbg !45
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %162, !dbg !45
  %223 = getelementptr float, ptr addrspace(1) %188, i64 %210, !dbg !45
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %162, !dbg !45
  %225 = getelementptr float, ptr addrspace(1) %192, i64 %210, !dbg !45
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %162, !dbg !45
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %212, i1 true) #1, !dbg !46
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %214, i1 true) #1, !dbg !46
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 true) #1, !dbg !46
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 true) #1, !dbg !46
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 true) #1, !dbg !46
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %222, i1 true) #1, !dbg !46
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 true) #1, !dbg !46
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #1, !dbg !46
  %235 = lshr i64 %95, 60, !dbg !47
  %236 = and i64 %235, 8, !dbg !47
  %237 = lshr i64 %96, 60, !dbg !47
  %238 = and i64 %237, 8, !dbg !47
  %239 = lshr i64 %98, 60, !dbg !47
  %240 = and i64 %239, 8, !dbg !47
  %241 = lshr i64 %99, 60, !dbg !47
  %242 = and i64 %241, 8, !dbg !47
  %243 = lshr i64 %101, 60, !dbg !47
  %244 = and i64 %243, 8, !dbg !47
  %245 = lshr i64 %102, 60, !dbg !47
  %246 = and i64 %245, 8, !dbg !47
  %247 = lshr i64 %104, 60, !dbg !47
  %248 = and i64 %247, 8, !dbg !47
  %249 = lshr i64 %105, 60, !dbg !47
  %250 = and i64 %249, 8, !dbg !47
  %251 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !48
  %252 = getelementptr float, ptr addrspace(1) %251, i64 %236, !dbg !48
  %253 = getelementptr float, ptr addrspace(1) %252, i64 %209, !dbg !48
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %161, !dbg !48
  %255 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !48
  %256 = getelementptr float, ptr addrspace(1) %255, i64 %238, !dbg !48
  %257 = getelementptr float, ptr addrspace(1) %256, i64 %209, !dbg !48
  %258 = getelementptr float, ptr addrspace(1) %257, i64 %161, !dbg !48
  %259 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !48
  %260 = getelementptr float, ptr addrspace(1) %259, i64 %240, !dbg !48
  %261 = getelementptr float, ptr addrspace(1) %260, i64 %209, !dbg !48
  %262 = getelementptr float, ptr addrspace(1) %261, i64 %161, !dbg !48
  %263 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !48
  %264 = getelementptr float, ptr addrspace(1) %263, i64 %242, !dbg !48
  %265 = getelementptr float, ptr addrspace(1) %264, i64 %209, !dbg !48
  %266 = getelementptr float, ptr addrspace(1) %265, i64 %161, !dbg !48
  %267 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !48
  %268 = getelementptr float, ptr addrspace(1) %267, i64 %244, !dbg !48
  %269 = getelementptr float, ptr addrspace(1) %268, i64 %210, !dbg !48
  %270 = getelementptr float, ptr addrspace(1) %269, i64 %162, !dbg !48
  %271 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !48
  %272 = getelementptr float, ptr addrspace(1) %271, i64 %246, !dbg !48
  %273 = getelementptr float, ptr addrspace(1) %272, i64 %210, !dbg !48
  %274 = getelementptr float, ptr addrspace(1) %273, i64 %162, !dbg !48
  %275 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !48
  %276 = getelementptr float, ptr addrspace(1) %275, i64 %248, !dbg !48
  %277 = getelementptr float, ptr addrspace(1) %276, i64 %210, !dbg !48
  %278 = getelementptr float, ptr addrspace(1) %277, i64 %162, !dbg !48
  %279 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !48
  %280 = getelementptr float, ptr addrspace(1) %279, i64 %250, !dbg !48
  %281 = getelementptr float, ptr addrspace(1) %280, i64 %210, !dbg !48
  %282 = getelementptr float, ptr addrspace(1) %281, i64 %162, !dbg !48
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 true) #1, !dbg !49
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %258, i1 true) #1, !dbg !49
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 true) #1, !dbg !49
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %266, i1 true) #1, !dbg !49
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #1, !dbg !49
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %274, i1 true) #1, !dbg !49
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 true) #1, !dbg !49
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %282, i1 true) #1, !dbg !49
  %291 = getelementptr float, ptr addrspace(1) %252, i64 %157, !dbg !50
  %292 = getelementptr float, ptr addrspace(1) %291, i64 %161, !dbg !50
  %293 = getelementptr float, ptr addrspace(1) %256, i64 %157, !dbg !50
  %294 = getelementptr float, ptr addrspace(1) %293, i64 %161, !dbg !50
  %295 = getelementptr float, ptr addrspace(1) %260, i64 %157, !dbg !50
  %296 = getelementptr float, ptr addrspace(1) %295, i64 %161, !dbg !50
  %297 = getelementptr float, ptr addrspace(1) %264, i64 %157, !dbg !50
  %298 = getelementptr float, ptr addrspace(1) %297, i64 %161, !dbg !50
  %299 = getelementptr float, ptr addrspace(1) %268, i64 %158, !dbg !50
  %300 = getelementptr float, ptr addrspace(1) %299, i64 %162, !dbg !50
  %301 = getelementptr float, ptr addrspace(1) %272, i64 %158, !dbg !50
  %302 = getelementptr float, ptr addrspace(1) %301, i64 %162, !dbg !50
  %303 = getelementptr float, ptr addrspace(1) %276, i64 %158, !dbg !50
  %304 = getelementptr float, ptr addrspace(1) %303, i64 %162, !dbg !50
  %305 = getelementptr float, ptr addrspace(1) %280, i64 %158, !dbg !50
  %306 = getelementptr float, ptr addrspace(1) %305, i64 %162, !dbg !50
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %292, i1 true) #1, !dbg !51
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 true) #1, !dbg !51
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %296, i1 true) #1, !dbg !51
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %298, i1 true) #1, !dbg !51
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %300, i1 true) #1, !dbg !51
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %302, i1 true) #1, !dbg !51
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %304, i1 true) #1, !dbg !51
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %306, i1 true) #1, !dbg !51
  %315 = insertelement <2 x i32> poison, i32 %195, i64 0, !dbg !42
  %316 = insertelement <2 x i32> %315, i32 %227, i64 1, !dbg !42
  %317 = bitcast <2 x i32> %316 to <2 x float>, !dbg !42
  %318 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !52
  %319 = bitcast <2 x i32> %318 to <2 x float>, !dbg !52
  %320 = shufflevector <2 x float> %319, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %321 = fsub <2 x float> %317, %320, !dbg !52
  %322 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !53
  %323 = bitcast <2 x i32> %322 to <2 x float>, !dbg !53
  %324 = shufflevector <2 x float> %323, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %325 = fmul <2 x float> %321, %324, !dbg !53
  %326 = fcmp olt <2 x float> %325, zeroinitializer, !dbg !54
  %327 = select <2 x i1> %326, <2 x float> zeroinitializer, <2 x float> %325, !dbg !58
  %328 = insertelement <2 x i32> poison, i32 %307, i64 0, !dbg !51
  %329 = insertelement <2 x i32> %328, i32 %283, i64 1, !dbg !51
  %330 = bitcast <2 x i32> %329 to <2 x float>, !dbg !51
  %331 = fsub <2 x float> %330, %320, !dbg !59
  %332 = fmul <2 x float> %331, %324, !dbg !60
  %333 = fcmp olt <2 x float> %332, zeroinitializer, !dbg !61
  %334 = select <2 x i1> %333, <2 x float> zeroinitializer, <2 x float> %332, !dbg !63
  %335 = fsub <2 x float> %334, %327, !dbg !64
  %336 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !65
  %337 = bitcast <2 x i32> %336 to <2 x float>, !dbg !65
  %338 = shufflevector <2 x float> %337, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %339 = fmul <2 x float> %335, %338, !dbg !65
  %340 = fadd <2 x float> %327, %339, !dbg !66
  %341 = insertelement <2 x i32> poison, i32 %196, i64 0, !dbg !42
  %342 = insertelement <2 x i32> %341, i32 %228, i64 1, !dbg !42
  %343 = bitcast <2 x i32> %342 to <2 x float>, !dbg !42
  %344 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !52
  %345 = bitcast <2 x i32> %344 to <2 x float>, !dbg !52
  %346 = shufflevector <2 x float> %345, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %347 = fsub <2 x float> %343, %346, !dbg !52
  %348 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !53
  %349 = bitcast <2 x i32> %348 to <2 x float>, !dbg !53
  %350 = shufflevector <2 x float> %349, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %351 = fmul <2 x float> %347, %350, !dbg !53
  %352 = fcmp olt <2 x float> %351, zeroinitializer, !dbg !54
  %353 = select <2 x i1> %352, <2 x float> zeroinitializer, <2 x float> %351, !dbg !58
  %354 = insertelement <2 x i32> poison, i32 %308, i64 0, !dbg !51
  %355 = insertelement <2 x i32> %354, i32 %284, i64 1, !dbg !51
  %356 = bitcast <2 x i32> %355 to <2 x float>, !dbg !51
  %357 = fsub <2 x float> %356, %346, !dbg !59
  %358 = fmul <2 x float> %357, %350, !dbg !60
  %359 = fcmp olt <2 x float> %358, zeroinitializer, !dbg !61
  %360 = select <2 x i1> %359, <2 x float> zeroinitializer, <2 x float> %358, !dbg !63
  %361 = fsub <2 x float> %360, %353, !dbg !64
  %362 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !65
  %363 = bitcast <2 x i32> %362 to <2 x float>, !dbg !65
  %364 = shufflevector <2 x float> %363, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %365 = fmul <2 x float> %361, %364, !dbg !65
  %366 = fadd <2 x float> %353, %365, !dbg !66
  %367 = insertelement <2 x i32> poison, i32 %197, i64 0, !dbg !42
  %368 = insertelement <2 x i32> %367, i32 %229, i64 1, !dbg !42
  %369 = bitcast <2 x i32> %368 to <2 x float>, !dbg !42
  %370 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !52
  %371 = bitcast <2 x i32> %370 to <2 x float>, !dbg !52
  %372 = shufflevector <2 x float> %371, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %373 = fsub <2 x float> %369, %372, !dbg !52
  %374 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !53
  %375 = bitcast <2 x i32> %374 to <2 x float>, !dbg !53
  %376 = shufflevector <2 x float> %375, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %377 = fmul <2 x float> %373, %376, !dbg !53
  %378 = fcmp olt <2 x float> %377, zeroinitializer, !dbg !54
  %379 = select <2 x i1> %378, <2 x float> zeroinitializer, <2 x float> %377, !dbg !58
  %380 = insertelement <2 x i32> poison, i32 %309, i64 0, !dbg !51
  %381 = insertelement <2 x i32> %380, i32 %285, i64 1, !dbg !51
  %382 = bitcast <2 x i32> %381 to <2 x float>, !dbg !51
  %383 = fsub <2 x float> %382, %372, !dbg !59
  %384 = fmul <2 x float> %383, %376, !dbg !60
  %385 = fcmp olt <2 x float> %384, zeroinitializer, !dbg !61
  %386 = select <2 x i1> %385, <2 x float> zeroinitializer, <2 x float> %384, !dbg !63
  %387 = fsub <2 x float> %386, %379, !dbg !64
  %388 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !65
  %389 = bitcast <2 x i32> %388 to <2 x float>, !dbg !65
  %390 = shufflevector <2 x float> %389, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %391 = fmul <2 x float> %387, %390, !dbg !65
  %392 = fadd <2 x float> %379, %391, !dbg !66
  %393 = insertelement <2 x i32> poison, i32 %198, i64 0, !dbg !42
  %394 = insertelement <2 x i32> %393, i32 %230, i64 1, !dbg !42
  %395 = bitcast <2 x i32> %394 to <2 x float>, !dbg !42
  %396 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !52
  %397 = bitcast <2 x i32> %396 to <2 x float>, !dbg !52
  %398 = shufflevector <2 x float> %397, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %399 = fsub <2 x float> %395, %398, !dbg !52
  %400 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !53
  %401 = bitcast <2 x i32> %400 to <2 x float>, !dbg !53
  %402 = shufflevector <2 x float> %401, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %403 = fmul <2 x float> %399, %402, !dbg !53
  %404 = fcmp olt <2 x float> %403, zeroinitializer, !dbg !54
  %405 = select <2 x i1> %404, <2 x float> zeroinitializer, <2 x float> %403, !dbg !58
  %406 = insertelement <2 x i32> poison, i32 %310, i64 0, !dbg !51
  %407 = insertelement <2 x i32> %406, i32 %286, i64 1, !dbg !51
  %408 = bitcast <2 x i32> %407 to <2 x float>, !dbg !51
  %409 = fsub <2 x float> %408, %398, !dbg !59
  %410 = fmul <2 x float> %409, %402, !dbg !60
  %411 = fcmp olt <2 x float> %410, zeroinitializer, !dbg !61
  %412 = select <2 x i1> %411, <2 x float> zeroinitializer, <2 x float> %410, !dbg !63
  %413 = fsub <2 x float> %412, %405, !dbg !64
  %414 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !65
  %415 = bitcast <2 x i32> %414 to <2 x float>, !dbg !65
  %416 = shufflevector <2 x float> %415, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %417 = fmul <2 x float> %413, %416, !dbg !65
  %418 = fadd <2 x float> %405, %417, !dbg !66
  %419 = insertelement <2 x i32> poison, i32 %199, i64 0, !dbg !42
  %420 = insertelement <2 x i32> %419, i32 %231, i64 1, !dbg !42
  %421 = bitcast <2 x i32> %420 to <2 x float>, !dbg !42
  %422 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !52
  %423 = bitcast <2 x i32> %422 to <2 x float>, !dbg !52
  %424 = shufflevector <2 x float> %423, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %425 = fsub <2 x float> %421, %424, !dbg !52
  %426 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !53
  %427 = bitcast <2 x i32> %426 to <2 x float>, !dbg !53
  %428 = shufflevector <2 x float> %427, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %429 = fmul <2 x float> %425, %428, !dbg !53
  %430 = fcmp olt <2 x float> %429, zeroinitializer, !dbg !54
  %431 = select <2 x i1> %430, <2 x float> zeroinitializer, <2 x float> %429, !dbg !58
  %432 = insertelement <2 x i32> poison, i32 %311, i64 0, !dbg !51
  %433 = insertelement <2 x i32> %432, i32 %287, i64 1, !dbg !51
  %434 = bitcast <2 x i32> %433 to <2 x float>, !dbg !51
  %435 = fsub <2 x float> %434, %424, !dbg !59
  %436 = fmul <2 x float> %435, %428, !dbg !60
  %437 = fcmp olt <2 x float> %436, zeroinitializer, !dbg !61
  %438 = select <2 x i1> %437, <2 x float> zeroinitializer, <2 x float> %436, !dbg !63
  %439 = fsub <2 x float> %438, %431, !dbg !64
  %440 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !65
  %441 = bitcast <2 x i32> %440 to <2 x float>, !dbg !65
  %442 = shufflevector <2 x float> %441, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %443 = fmul <2 x float> %439, %442, !dbg !65
  %444 = fadd <2 x float> %431, %443, !dbg !66
  %445 = insertelement <2 x i32> poison, i32 %200, i64 0, !dbg !42
  %446 = insertelement <2 x i32> %445, i32 %232, i64 1, !dbg !42
  %447 = bitcast <2 x i32> %446 to <2 x float>, !dbg !42
  %448 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !52
  %449 = bitcast <2 x i32> %448 to <2 x float>, !dbg !52
  %450 = shufflevector <2 x float> %449, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %451 = fsub <2 x float> %447, %450, !dbg !52
  %452 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !53
  %453 = bitcast <2 x i32> %452 to <2 x float>, !dbg !53
  %454 = shufflevector <2 x float> %453, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %455 = fmul <2 x float> %451, %454, !dbg !53
  %456 = fcmp olt <2 x float> %455, zeroinitializer, !dbg !54
  %457 = select <2 x i1> %456, <2 x float> zeroinitializer, <2 x float> %455, !dbg !58
  %458 = insertelement <2 x i32> poison, i32 %312, i64 0, !dbg !51
  %459 = insertelement <2 x i32> %458, i32 %288, i64 1, !dbg !51
  %460 = bitcast <2 x i32> %459 to <2 x float>, !dbg !51
  %461 = fsub <2 x float> %460, %450, !dbg !59
  %462 = fmul <2 x float> %461, %454, !dbg !60
  %463 = fcmp olt <2 x float> %462, zeroinitializer, !dbg !61
  %464 = select <2 x i1> %463, <2 x float> zeroinitializer, <2 x float> %462, !dbg !63
  %465 = fsub <2 x float> %464, %457, !dbg !64
  %466 = insertelement <2 x i32> poison, i32 %114, i64 0, !dbg !65
  %467 = bitcast <2 x i32> %466 to <2 x float>, !dbg !65
  %468 = shufflevector <2 x float> %467, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %469 = fmul <2 x float> %465, %468, !dbg !65
  %470 = fadd <2 x float> %457, %469, !dbg !66
  %471 = insertelement <2 x i32> poison, i32 %201, i64 0, !dbg !42
  %472 = insertelement <2 x i32> %471, i32 %233, i64 1, !dbg !42
  %473 = bitcast <2 x i32> %472 to <2 x float>, !dbg !42
  %474 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !52
  %475 = bitcast <2 x i32> %474 to <2 x float>, !dbg !52
  %476 = shufflevector <2 x float> %475, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %477 = fsub <2 x float> %473, %476, !dbg !52
  %478 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !53
  %479 = bitcast <2 x i32> %478 to <2 x float>, !dbg !53
  %480 = shufflevector <2 x float> %479, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %481 = fmul <2 x float> %477, %480, !dbg !53
  %482 = fcmp olt <2 x float> %481, zeroinitializer, !dbg !54
  %483 = select <2 x i1> %482, <2 x float> zeroinitializer, <2 x float> %481, !dbg !58
  %484 = insertelement <2 x i32> poison, i32 %313, i64 0, !dbg !51
  %485 = insertelement <2 x i32> %484, i32 %289, i64 1, !dbg !51
  %486 = bitcast <2 x i32> %485 to <2 x float>, !dbg !51
  %487 = fsub <2 x float> %486, %476, !dbg !59
  %488 = fmul <2 x float> %487, %480, !dbg !60
  %489 = fcmp olt <2 x float> %488, zeroinitializer, !dbg !61
  %490 = select <2 x i1> %489, <2 x float> zeroinitializer, <2 x float> %488, !dbg !63
  %491 = fsub <2 x float> %490, %483, !dbg !64
  %492 = insertelement <2 x i32> poison, i32 %115, i64 0, !dbg !65
  %493 = bitcast <2 x i32> %492 to <2 x float>, !dbg !65
  %494 = shufflevector <2 x float> %493, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %495 = fmul <2 x float> %491, %494, !dbg !65
  %496 = fadd <2 x float> %483, %495, !dbg !66
  %497 = insertelement <2 x i32> poison, i32 %202, i64 0, !dbg !42
  %498 = insertelement <2 x i32> %497, i32 %234, i64 1, !dbg !42
  %499 = bitcast <2 x i32> %498 to <2 x float>, !dbg !42
  %500 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !52
  %501 = bitcast <2 x i32> %500 to <2 x float>, !dbg !52
  %502 = shufflevector <2 x float> %501, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %503 = fsub <2 x float> %499, %502, !dbg !52
  %504 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !53
  %505 = bitcast <2 x i32> %504 to <2 x float>, !dbg !53
  %506 = shufflevector <2 x float> %505, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %507 = fmul <2 x float> %503, %506, !dbg !53
  %508 = fcmp olt <2 x float> %507, zeroinitializer, !dbg !54
  %509 = select <2 x i1> %508, <2 x float> zeroinitializer, <2 x float> %507, !dbg !58
  %510 = insertelement <2 x i32> poison, i32 %314, i64 0, !dbg !51
  %511 = insertelement <2 x i32> %510, i32 %290, i64 1, !dbg !51
  %512 = bitcast <2 x i32> %511 to <2 x float>, !dbg !51
  %513 = fsub <2 x float> %512, %502, !dbg !59
  %514 = fmul <2 x float> %513, %506, !dbg !60
  %515 = fcmp olt <2 x float> %514, zeroinitializer, !dbg !61
  %516 = select <2 x i1> %515, <2 x float> zeroinitializer, <2 x float> %514, !dbg !63
  %517 = fsub <2 x float> %516, %509, !dbg !64
  %518 = insertelement <2 x i32> poison, i32 %116, i64 0, !dbg !65
  %519 = bitcast <2 x i32> %518 to <2 x float>, !dbg !65
  %520 = shufflevector <2 x float> %519, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %521 = fmul <2 x float> %517, %520, !dbg !65
  %522 = fadd <2 x float> %509, %521, !dbg !66
  %523 = extractelement <2 x float> %340, i64 0, !dbg !67
  %524 = extractelement <2 x float> %340, i64 1, !dbg !68
  %525 = fsub float %523, %524, !dbg !67
  %526 = extractelement <2 x float> %366, i64 0, !dbg !67
  %527 = extractelement <2 x float> %366, i64 1, !dbg !68
  %528 = fsub float %526, %527, !dbg !67
  %529 = extractelement <2 x float> %392, i64 0, !dbg !67
  %530 = extractelement <2 x float> %392, i64 1, !dbg !68
  %531 = fsub float %529, %530, !dbg !67
  %532 = extractelement <2 x float> %418, i64 0, !dbg !67
  %533 = extractelement <2 x float> %418, i64 1, !dbg !68
  %534 = fsub float %532, %533, !dbg !67
  %535 = extractelement <2 x float> %444, i64 0, !dbg !67
  %536 = extractelement <2 x float> %444, i64 1, !dbg !68
  %537 = fsub float %535, %536, !dbg !67
  %538 = extractelement <2 x float> %470, i64 0, !dbg !67
  %539 = extractelement <2 x float> %470, i64 1, !dbg !68
  %540 = fsub float %538, %539, !dbg !67
  %541 = extractelement <2 x float> %496, i64 0, !dbg !67
  %542 = extractelement <2 x float> %496, i64 1, !dbg !68
  %543 = fsub float %541, %542, !dbg !67
  %544 = extractelement <2 x float> %522, i64 0, !dbg !67
  %545 = extractelement <2 x float> %522, i64 1, !dbg !68
  %546 = fsub float %544, %545, !dbg !67
  %547 = fmul float %525, %120, !dbg !69
  %548 = fmul float %528, %122, !dbg !69
  %549 = fmul float %531, %124, !dbg !69
  %550 = fmul float %534, %126, !dbg !69
  %551 = fmul float %537, %128, !dbg !69
  %552 = fmul float %540, %130, !dbg !69
  %553 = fmul float %543, %132, !dbg !69
  %554 = fmul float %546, %134, !dbg !69
  %555 = fadd float %524, %547, !dbg !68
  %556 = fadd float %527, %548, !dbg !68
  %557 = fadd float %530, %549, !dbg !68
  %558 = fadd float %533, %550, !dbg !68
  %559 = fadd float %536, %551, !dbg !68
  %560 = fadd float %539, %552, !dbg !68
  %561 = fadd float %542, %553, !dbg !68
  %562 = fadd float %545, %554, !dbg !68
  %563 = mul i32 %28, 1310720, !dbg !70
  %564 = mul i32 %30, 1310720, !dbg !70
  %565 = add i32 %563, %.decomposed2, !dbg !71
  %566 = add i32 %564, %.decomposed4, !dbg !71
  %567 = sext i32 %565 to i64, !dbg !72
  %568 = getelementptr float, ptr addrspace(1) %9, i64 %567, !dbg !72
  %569 = sext i32 %566 to i64, !dbg !72
  %570 = getelementptr float, ptr addrspace(1) %9, i64 %569, !dbg !72
  %571 = bitcast float %555 to i32, !dbg !73
  %572 = bitcast float %556 to i32, !dbg !73
  %573 = bitcast float %557 to i32, !dbg !73
  %574 = bitcast float %558 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %571, i32 %572, i32 %573, i32 %574, ptr addrspace(1) %568, i1 true) #1, !dbg !73
  %575 = bitcast float %559 to i32, !dbg !73
  %576 = bitcast float %560 to i32, !dbg !73
  %577 = bitcast float %561 to i32, !dbg !73
  %578 = bitcast float %562 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %575, i32 %576, i32 %577, i32 %578, ptr addrspace(1) %570, i1 true) #1, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck24expqg2fj2pin5icwf6rupfeacp6pmtawjtzobi2ezdrnbkfd.py", directory: "inductor_cache/k2")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_61, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_61, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_61", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_61", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 30, scope: !7)
!21 = !DILocation(line: 30, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 31, scope: !7)
!27 = !DILocation(line: 33, column: 36, scope: !7)
!28 = !DILocation(line: 34, column: 31, scope: !7)
!29 = !DILocation(line: 34, column: 36, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 37, column: 31, scope: !7)
!35 = !DILocation(line: 37, column: 36, scope: !7)
!36 = !DILocation(line: 41, column: 32, scope: !7)
!37 = !DILocation(line: 44, column: 32, scope: !7)
!38 = !DILocation(line: 45, column: 39, scope: !7)
!39 = !DILocation(line: 45, column: 49, scope: !7)
!40 = !DILocation(line: 45, column: 46, scope: !7)
!41 = !DILocation(line: 45, column: 30, scope: !7)
!42 = !DILocation(line: 45, column: 54, scope: !7)
!43 = !DILocation(line: 52, column: 35, scope: !7)
!44 = !DILocation(line: 53, column: 40, scope: !7)
!45 = !DILocation(line: 53, column: 31, scope: !7)
!46 = !DILocation(line: 53, column: 56, scope: !7)
!47 = !DILocation(line: 59, column: 35, scope: !7)
!48 = !DILocation(line: 60, column: 31, scope: !7)
!49 = !DILocation(line: 60, column: 57, scope: !7)
!50 = !DILocation(line: 67, column: 31, scope: !7)
!51 = !DILocation(line: 67, column: 56, scope: !7)
!52 = !DILocation(line: 46, column: 19, scope: !7)
!53 = !DILocation(line: 47, column: 20, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !57)
!55 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!56 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!57 = !DILocation(line: 49, column: 42, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !57)
!59 = !DILocation(line: 68, column: 20, scope: !7)
!60 = !DILocation(line: 69, column: 20, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !62)
!62 = !DILocation(line: 70, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !62)
!64 = !DILocation(line: 71, column: 20, scope: !7)
!65 = !DILocation(line: 72, column: 20, scope: !7)
!66 = !DILocation(line: 73, column: 20, scope: !7)
!67 = !DILocation(line: 74, column: 20, scope: !7)
!68 = !DILocation(line: 76, column: 20, scope: !7)
!69 = !DILocation(line: 75, column: 20, scope: !7)
!70 = !DILocation(line: 77, column: 38, scope: !7)
!71 = !DILocation(line: 77, column: 30, scope: !7)
!72 = !DILocation(line: 77, column: 25, scope: !7)
!73 = !DILocation(line: 77, column: 50, scope: !7)
!74 = !DILocation(line: 77, column: 4, scope: !7)
