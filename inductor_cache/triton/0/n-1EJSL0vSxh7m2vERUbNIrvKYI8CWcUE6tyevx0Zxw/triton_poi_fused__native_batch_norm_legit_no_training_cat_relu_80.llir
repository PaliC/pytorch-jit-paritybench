; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_80(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 8, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 1, !dbg !12
  %20 = and i32 %19, 254, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %22 = icmp slt i32 %21, 11776, !dbg !14
  %.frozen = freeze i32 %21, !dbg !15
  %23 = sdiv i32 %.frozen, 4, !dbg !15
  %24 = srem i32 %23, 736, !dbg !16
  %25 = mul i32 %23, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %25, !dbg !17
  %.frozen19 = freeze i32 %21, !dbg !18
  %26 = sdiv i32 %.frozen19, 2944, !dbg !18
  %27 = sext i32 %24 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %8, i64 %27, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %22) #3, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %22) #3, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %9, i64 %27, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %22) #3, !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %22) #3, !dbg !22
  %35 = bitcast i32 %34 to float, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %10, i64 %27, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %22) #3, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %22) #3, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %11, i64 %27, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %22) #3, !dbg !26
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %22) #3, !dbg !26
  %42 = icmp slt i32 %24, 512, !dbg !27
  %43 = mul i32 %26, 2944, !dbg !28
  %srem.decomposed = sub i32 %.frozen19, %43, !dbg !28
  %44 = shl nsw i32 %26, 11, !dbg !29
  %45 = add nsw i32 %44, %srem.decomposed, !dbg !30
  %46 = sext i32 %45 to i64, !dbg !31
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !31
  %48 = and i1 %22, %42, !dbg !32
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %47, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #3, !dbg !33
  %50 = and i32 %24, -32, !dbg !34
  %51 = icmp eq i32 %50, 512, !dbg !34
  %52 = shl nsw i32 %24, 2, !dbg !35
  %53 = shl nsw i32 %26, 7, !dbg !36
  %54 = add nsw i32 %53, %.decomposed, !dbg !35
  %55 = add nsw i32 %54, -2048, !dbg !37
  %56 = add nsw i32 %55, %52, !dbg !38
  %57 = sext i32 %56 to i64, !dbg !39
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !39
  %59 = and i1 %22, %51, !dbg !40
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %58, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #3, !dbg !41
  %61 = icmp eq i32 %50, 544, !dbg !42
  %62 = add nsw i32 %54, -2176, !dbg !43
  %63 = add nsw i32 %62, %52, !dbg !44
  %64 = sext i32 %63 to i64, !dbg !45
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !45
  %66 = and i1 %22, %61, !dbg !46
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %65, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #3, !dbg !47
  %68 = icmp eq i32 %50, 576, !dbg !48
  %69 = add nsw i32 %54, -2304, !dbg !49
  %70 = add nsw i32 %69, %52, !dbg !50
  %71 = sext i32 %70 to i64, !dbg !51
  %72 = getelementptr float, ptr addrspace(1) %3, i64 %71, !dbg !51
  %73 = and i1 %22, %68, !dbg !52
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %72, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #3, !dbg !53
  %75 = icmp eq i32 %50, 608, !dbg !54
  %76 = add nsw i32 %54, -2432, !dbg !55
  %77 = add nsw i32 %76, %52, !dbg !56
  %78 = sext i32 %77 to i64, !dbg !57
  %79 = getelementptr float, ptr addrspace(1) %4, i64 %78, !dbg !57
  %80 = and i1 %22, %75, !dbg !58
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %79, i1 %80, i32 0, i1 %80, i32 0, i1 %80) #3, !dbg !59
  %82 = icmp eq i32 %50, 640, !dbg !60
  %83 = add nsw i32 %54, -2560, !dbg !61
  %84 = add nsw i32 %83, %52, !dbg !62
  %85 = sext i32 %84 to i64, !dbg !63
  %86 = getelementptr float, ptr addrspace(1) %5, i64 %85, !dbg !63
  %87 = and i1 %22, %82, !dbg !64
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %86, i1 %87, i32 0, i1 %87, i32 0, i1 %87) #3, !dbg !65
  %89 = icmp eq i32 %50, 672, !dbg !66
  %90 = add nsw i32 %54, -2688, !dbg !67
  %91 = add nsw i32 %90, %52, !dbg !68
  %92 = sext i32 %91 to i64, !dbg !69
  %93 = getelementptr float, ptr addrspace(1) %6, i64 %92, !dbg !69
  %94 = and i1 %22, %89, !dbg !70
  %95 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %93, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #3, !dbg !71
  %96 = icmp sgt i32 %24, 703, !dbg !72
  %97 = add nsw i32 %54, -2816, !dbg !73
  %98 = add nsw i32 %97, %52, !dbg !74
  %99 = sext i32 %98 to i64, !dbg !75
  %100 = getelementptr float, ptr addrspace(1) %7, i64 %99, !dbg !75
  %101 = and i1 %22, %96, !dbg !76
  %102 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %100, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #3, !dbg !77
  %103 = fadd float %33, 0x3EE4F8B580000000, !dbg !78
  %104 = fadd float %35, 0x3EE4F8B580000000, !dbg !78
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i = icmp eq i32 %105, 0, !dbg !79
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i = icmp eq i32 %106, 0, !dbg !79
  br i1 %.not.i, label %112, label %107, !dbg !79

107:                                              ; preds = %15
  br i1 %.not1.i, label %110, label %108, !dbg !79

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #3, !dbg !79
  br label %__nv_sqrtf.exit, !dbg !79

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #3, !dbg !79
  br label %__nv_sqrtf.exit, !dbg !79

112:                                              ; preds = %15
  br i1 %.not1.i, label %115, label %113, !dbg !79

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #3, !dbg !79
  br label %__nv_sqrtf.exit, !dbg !79

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #3, !dbg !79
  br label %__nv_sqrtf.exit, !dbg !79

__nv_sqrtf.exit:                                  ; preds = %108, %110, %113, %115
  %.0.i = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !79
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i14 = icmp eq i32 %117, 0, !dbg !79
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i17 = icmp eq i32 %118, 0, !dbg !79
  br i1 %.not.i14, label %124, label %119, !dbg !79

119:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i17, label %122, label %120, !dbg !79

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #3, !dbg !79
  br label %__nv_sqrtf.exit18, !dbg !79

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #3, !dbg !79
  br label %__nv_sqrtf.exit18, !dbg !79

124:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i17, label %127, label %125, !dbg !79

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #3, !dbg !79
  br label %__nv_sqrtf.exit18, !dbg !79

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #3, !dbg !79
  br label %__nv_sqrtf.exit18, !dbg !79

__nv_sqrtf.exit18:                                ; preds = %120, %122, %125, %127
  %.0.i16 = phi float [ %121, %120 ], [ %123, %122 ], [ %126, %125 ], [ %128, %127 ], !dbg !79
  %129 = extractvalue { i32, i32 } %49, 1, !dbg !33
  %130 = extractvalue { i32, i32 } %60, 1, !dbg !41
  %131 = extractvalue { i32, i32 } %67, 1, !dbg !47
  %132 = extractvalue { i32, i32 } %74, 1, !dbg !53
  %133 = extractvalue { i32, i32 } %81, 1, !dbg !59
  %134 = extractvalue { i32, i32 } %88, 1, !dbg !65
  %135 = extractvalue { i32, i32 } %95, 1, !dbg !71
  %136 = extractvalue { i32, i32 } %102, 1, !dbg !77
  %.v1 = select i1 %89, i32 %135, i32 %136, !dbg !80
  %.v3 = select i1 %82, i32 %134, i32 %.v1, !dbg !81
  %.v5 = select i1 %75, i32 %133, i32 %.v3, !dbg !82
  %.v7 = select i1 %68, i32 %132, i32 %.v5, !dbg !83
  %.v9 = select i1 %61, i32 %131, i32 %.v7, !dbg !84
  %.v11 = select i1 %51, i32 %130, i32 %.v9, !dbg !85
  %.v13 = select i1 %42, i32 %129, i32 %.v11, !dbg !86
  %137 = bitcast i32 %.v13 to float, !dbg !86
  %138 = bitcast i32 %30 to float, !dbg !20
  %139 = fsub float %137, %138, !dbg !87
  %140 = extractvalue { i32, i32 } %49, 0, !dbg !33
  %141 = extractvalue { i32, i32 } %60, 0, !dbg !41
  %142 = extractvalue { i32, i32 } %67, 0, !dbg !47
  %143 = extractvalue { i32, i32 } %74, 0, !dbg !53
  %144 = extractvalue { i32, i32 } %81, 0, !dbg !59
  %145 = extractvalue { i32, i32 } %88, 0, !dbg !65
  %146 = extractvalue { i32, i32 } %95, 0, !dbg !71
  %147 = extractvalue { i32, i32 } %102, 0, !dbg !77
  %.v = select i1 %89, i32 %146, i32 %147, !dbg !80
  %.v2 = select i1 %82, i32 %145, i32 %.v, !dbg !81
  %.v4 = select i1 %75, i32 %144, i32 %.v2, !dbg !82
  %.v6 = select i1 %68, i32 %143, i32 %.v4, !dbg !83
  %.v8 = select i1 %61, i32 %142, i32 %.v6, !dbg !84
  %.v10 = select i1 %51, i32 %141, i32 %.v8, !dbg !85
  %.v12 = select i1 %42, i32 %140, i32 %.v10, !dbg !86
  %148 = bitcast i32 %.v12 to float, !dbg !86
  %149 = bitcast i32 %29 to float, !dbg !20
  %150 = fsub float %148, %149, !dbg !87
  %151 = bitcast i32 %41 to float, !dbg !26
  %152 = bitcast i32 %40 to float, !dbg !26
  %153 = bitcast i32 %38 to float, !dbg !24
  %154 = bitcast i32 %37 to float, !dbg !24
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !88
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #3, !dbg !88
  %157 = fmul float %150, %155, !dbg !89
  %158 = fmul float %139, %156, !dbg !89
  %159 = fmul float %157, %154, !dbg !90
  %160 = fmul float %158, %153, !dbg !90
  %161 = fadd float %159, %152, !dbg !91
  %162 = fadd float %160, %151, !dbg !91
  %163 = fcmp olt float %161, 0.000000e+00, !dbg !92
  %164 = fcmp olt float %162, 0.000000e+00, !dbg !92
  %165 = select i1 %163, float 0.000000e+00, float %161, !dbg !96
  %166 = select i1 %164, float 0.000000e+00, float %162, !dbg !96
  %167 = sext i32 %21 to i64, !dbg !97
  %168 = getelementptr float, ptr addrspace(1) %12, i64 %167, !dbg !97
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v12, i32 %.v13, ptr addrspace(1) %168, i1 %22) #3, !dbg !98
  %169 = getelementptr float, ptr addrspace(1) %13, i64 %167, !dbg !99
  %170 = bitcast float %165 to i32, !dbg !100
  %171 = bitcast float %166 to i32, !dbg !100
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %170, i32 %171, ptr addrspace(1) %169, i1 %22) #3, !dbg !100
  ret void, !dbg !101
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "carxrvhbfwxnprgqfrcjch6qrpxjjtsarwjdw7dks6ehzswhyyat.py", directory: "inductor_cache/ar")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_80, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_80, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_80", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_80", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 32, scope: !7)
!24 = !DILocation(line: 30, column: 37, scope: !7)
!25 = !DILocation(line: 31, column: 32, scope: !7)
!26 = !DILocation(line: 31, column: 37, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 35, scope: !7)
!29 = !DILocation(line: 37, column: 49, scope: !7)
!30 = !DILocation(line: 37, column: 44, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 61, scope: !7)
!33 = !DILocation(line: 37, column: 54, scope: !7)
!34 = !DILocation(line: 41, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 39, scope: !7)
!36 = !DILocation(line: 42, column: 58, scope: !7)
!37 = !DILocation(line: 42, column: 36, scope: !7)
!38 = !DILocation(line: 42, column: 54, scope: !7)
!39 = !DILocation(line: 42, column: 31, scope: !7)
!40 = !DILocation(line: 42, column: 70, scope: !7)
!41 = !DILocation(line: 42, column: 63, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 36, scope: !7)
!44 = !DILocation(line: 47, column: 54, scope: !7)
!45 = !DILocation(line: 47, column: 31, scope: !7)
!46 = !DILocation(line: 47, column: 71, scope: !7)
!47 = !DILocation(line: 47, column: 63, scope: !7)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 52, column: 36, scope: !7)
!50 = !DILocation(line: 52, column: 54, scope: !7)
!51 = !DILocation(line: 52, column: 31, scope: !7)
!52 = !DILocation(line: 52, column: 71, scope: !7)
!53 = !DILocation(line: 52, column: 63, scope: !7)
!54 = !DILocation(line: 56, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 36, scope: !7)
!56 = !DILocation(line: 57, column: 54, scope: !7)
!57 = !DILocation(line: 57, column: 31, scope: !7)
!58 = !DILocation(line: 57, column: 71, scope: !7)
!59 = !DILocation(line: 57, column: 63, scope: !7)
!60 = !DILocation(line: 61, column: 20, scope: !7)
!61 = !DILocation(line: 62, column: 36, scope: !7)
!62 = !DILocation(line: 62, column: 54, scope: !7)
!63 = !DILocation(line: 62, column: 31, scope: !7)
!64 = !DILocation(line: 62, column: 71, scope: !7)
!65 = !DILocation(line: 62, column: 63, scope: !7)
!66 = !DILocation(line: 66, column: 20, scope: !7)
!67 = !DILocation(line: 67, column: 36, scope: !7)
!68 = !DILocation(line: 67, column: 54, scope: !7)
!69 = !DILocation(line: 67, column: 31, scope: !7)
!70 = !DILocation(line: 67, column: 71, scope: !7)
!71 = !DILocation(line: 67, column: 63, scope: !7)
!72 = !DILocation(line: 68, column: 20, scope: !7)
!73 = !DILocation(line: 71, column: 36, scope: !7)
!74 = !DILocation(line: 71, column: 54, scope: !7)
!75 = !DILocation(line: 71, column: 31, scope: !7)
!76 = !DILocation(line: 71, column: 71, scope: !7)
!77 = !DILocation(line: 71, column: 63, scope: !7)
!78 = !DILocation(line: 81, column: 20, scope: !7)
!79 = !DILocation(line: 82, column: 27, scope: !7)
!80 = !DILocation(line: 72, column: 35, scope: !7)
!81 = !DILocation(line: 73, column: 35, scope: !7)
!82 = !DILocation(line: 74, column: 35, scope: !7)
!83 = !DILocation(line: 75, column: 35, scope: !7)
!84 = !DILocation(line: 76, column: 35, scope: !7)
!85 = !DILocation(line: 77, column: 34, scope: !7)
!86 = !DILocation(line: 78, column: 33, scope: !7)
!87 = !DILocation(line: 79, column: 20, scope: !7)
!88 = !DILocation(line: 84, column: 20, scope: !7)
!89 = !DILocation(line: 87, column: 20, scope: !7)
!90 = !DILocation(line: 88, column: 20, scope: !7)
!91 = !DILocation(line: 89, column: 20, scope: !7)
!92 = !DILocation(line: 118, column: 15, scope: !93, inlinedAt: !95)
!93 = distinct !DILexicalBlockFile(scope: !7, file: !94, discriminator: 0)
!94 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!95 = !DILocation(line: 91, column: 42, scope: !7)
!96 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !95)
!97 = !DILocation(line: 92, column: 25, scope: !7)
!98 = !DILocation(line: 92, column: 37, scope: !7)
!99 = !DILocation(line: 93, column: 25, scope: !7)
!100 = !DILocation(line: 93, column: 37, scope: !7)
!101 = !DILocation(line: 93, column: 4, scope: !7)
