; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_native_group_norm_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = and i32 %9, 7, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 6144, !dbg !14
  %14 = lshr i32 %9, 5, !dbg !15
  %15 = lshr i32 %9, 3, !dbg !15
  %16 = and i32 %15, 31, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %17 = sdiv i32 %.frozen, 24, !dbg !16
  %18 = mul i32 %17, 24, !dbg !17
  %.decomposed = sub i32 %.frozen, %18, !dbg !17
  %19 = srem i32 %17, 64, !dbg !18
  %20 = sdiv i32 %12, 1536, !dbg !19
  %21 = shl nsw i32 %.decomposed, 3, !dbg !20
  %22 = shl nsw i32 %19, 7, !dbg !21
  %23 = or disjoint i32 %22, %16, !dbg !22
  %24 = or disjoint i32 %23, 32, !dbg !22
  %25 = or disjoint i32 %23, 64, !dbg !22
  %26 = or disjoint i32 %23, 96, !dbg !22
  %27 = sdiv i32 %23, 1024, !dbg !23
  %28 = mul i32 %27, 1024, !dbg !24
  %.decomposed1 = sub i32 %23, %28, !dbg !24
  %29 = sdiv i32 %24, 1024, !dbg !23
  %30 = mul i32 %29, 1024, !dbg !24
  %.decomposed2 = sub i32 %24, %30, !dbg !24
  %31 = sdiv i32 %25, 1024, !dbg !23
  %32 = mul i32 %31, 1024, !dbg !24
  %.decomposed3 = sub i32 %25, %32, !dbg !24
  %33 = sdiv i32 %26, 1024, !dbg !23
  %34 = mul i32 %33, 1024, !dbg !24
  %.decomposed4 = sub i32 %26, %34, !dbg !24
  %35 = mul nsw i32 %.decomposed1, 192, !dbg !25
  %36 = mul nsw i32 %.decomposed2, 192, !dbg !25
  %37 = mul nsw i32 %.decomposed3, 192, !dbg !25
  %38 = mul nsw i32 %.decomposed4, 192, !dbg !25
  %39 = mul i32 %20, 196608, !dbg !26
  %40 = add i32 %39, %21, !dbg !27
  %41 = add i32 %40, %27, !dbg !28
  %42 = add i32 %41, %35, !dbg !29
  %43 = add i32 %40, %29, !dbg !28
  %44 = add i32 %43, %36, !dbg !29
  %45 = add i32 %40, %31, !dbg !28
  %46 = add i32 %45, %37, !dbg !29
  %47 = add i32 %40, %33, !dbg !28
  %48 = add i32 %47, %38, !dbg !29
  %49 = sext i32 %42 to i64, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !30
  %51 = sext i32 %44 to i64, !dbg !30
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !30
  %53 = sext i32 %46 to i64, !dbg !30
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !30
  %55 = sext i32 %48 to i64, !dbg !30
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !30
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %13, i32 0, i1 %13) #3, !dbg !31
  %58 = bitcast i32 %57 to float, !dbg !31
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %13, i32 0, i1 %13) #3, !dbg !31
  %60 = bitcast i32 %59 to float, !dbg !31
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %13, i32 0, i1 %13) #3, !dbg !31
  %62 = bitcast i32 %61 to float, !dbg !31
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %13, i32 0, i1 %13) #3, !dbg !31
  %64 = bitcast i32 %63 to float, !dbg !31
  %65 = fadd float %58, %60, !dbg !32
  %66 = fadd float %65, %62, !dbg !32
  %67 = fadd float %66, %64, !dbg !32
  %68 = select i1 %13, float %67, float 0.000000e+00, !dbg !32
  %69 = bitcast float %68 to i32, !dbg !37
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 16, i32 31), !dbg !37
  %71 = bitcast i32 %70 to float, !dbg !37
  %72 = fadd float %68, %71, !dbg !32
  %73 = bitcast float %72 to i32, !dbg !37
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 8, i32 31), !dbg !37
  %75 = bitcast i32 %74 to float, !dbg !37
  %76 = fadd float %72, %75, !dbg !32
  %77 = lshr i32 %10, 3, !dbg !37
  %78 = icmp samesign ult i32 %10, 8, !dbg !37
  %79 = and i32 %14, 7, !dbg !37
  %80 = shl nuw nsw i32 %11, 3, !dbg !37
  %81 = or disjoint i32 %80, %79, !dbg !37
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81, !dbg !37
  %83 = bitcast float %76 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 %78) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %84 = icmp slt i32 %9, 64, !dbg !37
  %85 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !37
  %86 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %85, i1 %84) #3, !dbg !37
  %87 = bitcast i32 %86 to float, !dbg !37
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 4, i32 31), !dbg !37
  %89 = bitcast i32 %88 to float, !dbg !37
  %90 = fadd float %87, %89, !dbg !32
  %91 = bitcast float %90 to i32, !dbg !37
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 2, i32 31), !dbg !37
  %93 = bitcast i32 %92 to float, !dbg !37
  %94 = fadd float %90, %93, !dbg !32
  %95 = bitcast float %94 to i32, !dbg !37
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 1, i32 31), !dbg !37
  %97 = bitcast i32 %96 to float, !dbg !37
  %98 = fadd float %94, %97, !dbg !32
  %99 = icmp eq i32 %11, 0, !dbg !37
  %100 = and i1 %84, %99, !dbg !37
  %101 = bitcast float %98 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %101, i1 %100) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80, !dbg !37
  %103 = load float, ptr addrspace(3) %102, align 16, !dbg !37
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 1.280000e+02) #3, !dbg !38
  %105 = fsub float %58, %104, !dbg !39
  %106 = fsub float %60, %104, !dbg !39
  %107 = fsub float %62, %104, !dbg !39
  %108 = fsub float %64, %104, !dbg !39
  %109 = fmul float %105, %105, !dbg !40
  %110 = fmul float %106, %106, !dbg !40
  %111 = fmul float %107, %107, !dbg !40
  %112 = fmul float %108, %108, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %113 = fadd float %109, %110, !dbg !43
  %114 = fadd float %111, %113, !dbg !43
  %115 = fadd float %112, %114, !dbg !43
  %116 = select i1 %13, float %115, float 0.000000e+00, !dbg !43
  %117 = bitcast float %116 to i32, !dbg !41
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 16, i32 31), !dbg !41
  %119 = bitcast i32 %118 to float, !dbg !41
  %120 = fadd float %116, %119, !dbg !43
  %121 = bitcast float %120 to i32, !dbg !41
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 8, i32 31), !dbg !41
  %123 = bitcast i32 %122 to float, !dbg !41
  %124 = fadd float %120, %123, !dbg !43
  %125 = bitcast float %124 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %125, i1 %78) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %126 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %85, i1 %84) #3, !dbg !41
  %127 = bitcast i32 %126 to float, !dbg !41
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 4, i32 31), !dbg !41
  %129 = bitcast i32 %128 to float, !dbg !41
  %130 = fadd float %127, %129, !dbg !43
  %131 = bitcast float %130 to i32, !dbg !41
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 2, i32 31), !dbg !41
  %133 = bitcast i32 %132 to float, !dbg !41
  %134 = fadd float %130, %133, !dbg !43
  %135 = bitcast float %134 to i32, !dbg !41
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 1, i32 31), !dbg !41
  %137 = bitcast i32 %136 to float, !dbg !41
  %138 = fadd float %134, %137, !dbg !43
  %139 = bitcast float %138 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %139, i1 %100) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %140 = load i32, ptr addrspace(3) %102, align 16, !dbg !41
  %141 = sext i32 %12 to i64, !dbg !44
  %142 = getelementptr float, ptr addrspace(1) %1, i64 %141, !dbg !44
  %143 = shl nuw nsw i32 %79, 2, !dbg !45
  %144 = or disjoint i32 %143, %77, !dbg !45
  %145 = icmp eq i32 %144, 0, !dbg !45
  %146 = bitcast float %104 to i32, !dbg !45
  %147 = and i1 %145, %13, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %146, ptr addrspace(1) %142, i1 %147) #3, !dbg !45
  %148 = getelementptr float, ptr addrspace(1) %2, i64 %141, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %148, i1 %147) #3, !dbg !47
  %149 = getelementptr float, ptr addrspace(1) %3, i64 %141, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 1124073472, ptr addrspace(1) %149, i1 %147) #3, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2fehpvvf6u63s75nmvqnhcdcr22t5vzknoquaokz6usuv23534o.py", directory: "inductor_cache/2f")
!4 = !{ptr @triton_per_fused_native_group_norm_15, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_15, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_15", linkageName: "triton_per_fused_native_group_norm_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 31, column: 27, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 32, scope: !7)
!21 = !DILocation(line: 34, column: 53, scope: !7)
!22 = !DILocation(line: 34, column: 49, scope: !7)
!23 = !DILocation(line: 34, column: 98, scope: !7)
!24 = !DILocation(line: 34, column: 59, scope: !7)
!25 = !DILocation(line: 34, column: 43, scope: !7)
!26 = !DILocation(line: 34, column: 75, scope: !7)
!27 = !DILocation(line: 34, column: 37, scope: !7)
!28 = !DILocation(line: 34, column: 68, scope: !7)
!29 = !DILocation(line: 34, column: 81, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 106, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!36 = !DILocation(line: 39, column: 24, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 42, column: 19, scope: !7)
!39 = !DILocation(line: 43, column: 19, scope: !7)
!40 = !DILocation(line: 44, column: 20, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !42)
!42 = !DILocation(line: 47, column: 26, scope: !7)
!43 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !42)
!44 = !DILocation(line: 48, column: 25, scope: !7)
!45 = !DILocation(line: 48, column: 37, scope: !7)
!46 = !DILocation(line: 49, column: 25, scope: !7)
!47 = !DILocation(line: 49, column: 37, scope: !7)
!48 = !DILocation(line: 50, column: 25, scope: !7)
!49 = !DILocation(line: 50, column: 36, scope: !7)
!50 = !DILocation(line: 50, column: 4, scope: !7)
