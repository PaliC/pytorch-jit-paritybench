; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %14 = shl i32 %13, 5, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = lshr i32 %15, 4, !dbg !12
  %17 = and i32 %16, 15, !dbg !12
  %18 = or disjoint i32 %17, 16, !dbg !12
  %19 = and i32 %15, 31, !dbg !12
  %20 = or disjoint i32 %14, %17, !dbg !13
  %21 = or disjoint i32 %14, %18, !dbg !13
  %22 = or disjoint i32 %14, %19, !dbg !13
  %23 = icmp slt i32 %20, 2048, !dbg !14
  %24 = icmp slt i32 %21, 2048, !dbg !14
  %25 = icmp slt i32 %22, 2048, !dbg !14
  %26 = shl i32 %15, 2, !dbg !15
  %27 = and i32 %26, 60, !dbg !15
  %28 = srem i32 %20, 512, !dbg !16
  %29 = srem i32 %21, 512, !dbg !16
  %30 = srem i32 %22, 512, !dbg !16
  %31 = sext i32 %20 to i64, !dbg !17
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !17
  %33 = sext i32 %21 to i64, !dbg !17
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !17
  %35 = sext i32 %22 to i64, !dbg !17
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !17
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %23) #5, !dbg !18
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %23) #5, !dbg !18
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %23) #5, !dbg !18
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %23) #5, !dbg !18
  %41 = bitcast i32 %40 to float, !dbg !18
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !18
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !18
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !18
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %24) #5, !dbg !18
  %46 = bitcast i32 %45 to float, !dbg !18
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %25) #5, !dbg !18
  %48 = sext i32 %28 to i64, !dbg !19
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !19
  %50 = sext i32 %29 to i64, !dbg !19
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !19
  %52 = sext i32 %30 to i64, !dbg !19
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !19
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %23) #5, !dbg !20
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %23) #5, !dbg !20
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %23) #5, !dbg !20
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %23) #5, !dbg !20
  %58 = bitcast i32 %57 to float, !dbg !20
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %24) #5, !dbg !20
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %24) #5, !dbg !20
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %24) #5, !dbg !20
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %24) #5, !dbg !20
  %63 = bitcast i32 %62 to float, !dbg !20
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %25) #5, !dbg !20
  %65 = shl i32 %20, 6, !dbg !21
  %66 = shl i32 %21, 6, !dbg !21
  %67 = or disjoint i32 %65, %27, !dbg !22
  %68 = or disjoint i32 %66, %27, !dbg !22
  %69 = sext i32 %67 to i64, !dbg !23
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !23
  %71 = sext i32 %68 to i64, !dbg !23
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !23
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !24
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !24
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !24
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !24
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !24
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %72, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #5, !dbg !24
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !24
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !24
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !24
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !24
  %83 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !25
  %84 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !25
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %23) #5, !dbg !26
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %23) #5, !dbg !26
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %23) #5, !dbg !26
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %23) #5, !dbg !26
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %24) #5, !dbg !26
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %24) #5, !dbg !26
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %24) #5, !dbg !26
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %24) #5, !dbg !26
  %93 = getelementptr float, ptr addrspace(1) %4, i64 %69, !dbg !27
  %94 = getelementptr float, ptr addrspace(1) %4, i64 %71, !dbg !27
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %93, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !28
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %94, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #5, !dbg !28
  %97 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !29
  %98 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !29
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %23) #5, !dbg !30
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %23) #5, !dbg !30
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %23) #5, !dbg !30
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %23) #5, !dbg !30
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %24) #5, !dbg !30
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %24) #5, !dbg !30
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %24) #5, !dbg !30
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %24) #5, !dbg !30
  %107 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !31
  %108 = getelementptr float, ptr addrspace(1) %6, i64 %33, !dbg !31
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %23) #5, !dbg !32
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %23) #5, !dbg !32
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %23) #5, !dbg !32
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %23) #5, !dbg !32
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %24) #5, !dbg !32
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %24) #5, !dbg !32
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %24) #5, !dbg !32
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %24) #5, !dbg !32
  %117 = fadd float %41, %58, !dbg !33
  %118 = fadd float %46, %63, !dbg !33
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !34
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !34
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !34
  %122 = insertelement <8 x i32> poison, i32 %82, i64 0, !dbg !24
  %123 = insertelement <8 x i32> %122, i32 %81, i64 1, !dbg !24
  %124 = insertelement <8 x i32> %123, i32 %80, i64 2, !dbg !24
  %125 = insertelement <8 x i32> %124, i32 %79, i64 3, !dbg !24
  %126 = insertelement <8 x i32> %125, i32 %77, i64 4, !dbg !24
  %127 = insertelement <8 x i32> %126, i32 %76, i64 5, !dbg !24
  %128 = insertelement <8 x i32> %127, i32 %75, i64 6, !dbg !24
  %129 = insertelement <8 x i32> %128, i32 %74, i64 7, !dbg !24
  %130 = bitcast <8 x i32> %129 to <8 x float>, !dbg !24
  %131 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !26
  %132 = insertelement <2 x i32> %131, i32 %88, i64 1, !dbg !26
  %133 = bitcast <2 x i32> %132 to <2 x float>, !dbg !26
  %134 = shufflevector <2 x float> %133, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !26
  %135 = fadd <8 x float> %134, %130, !dbg !35
  %136 = extractelement <8 x float> %135, i64 6, !dbg !36
  %137 = extractelement <8 x float> %135, i64 7, !dbg !36
  %138 = fadd float %137, %136, !dbg !36
  %139 = extractelement <8 x float> %135, i64 5, !dbg !36
  %140 = fadd float %139, %138, !dbg !36
  %141 = extractelement <8 x float> %135, i64 4, !dbg !36
  %142 = fadd float %141, %140, !dbg !36
  %143 = select i1 %23, float %142, float 0.000000e+00, !dbg !36
  %144 = extractelement <8 x float> %135, i64 2, !dbg !36
  %145 = extractelement <8 x float> %135, i64 3, !dbg !36
  %146 = fadd float %145, %144, !dbg !36
  %147 = extractelement <8 x float> %135, i64 1, !dbg !36
  %148 = fadd float %147, %146, !dbg !36
  %149 = extractelement <8 x float> %135, i64 0, !dbg !36
  %150 = fadd float %149, %148, !dbg !36
  %151 = select i1 %24, float %150, float 0.000000e+00, !dbg !36
  %152 = bitcast float %143 to i32, !dbg !41
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 8, i32 31), !dbg !41
  %154 = bitcast i32 %153 to float, !dbg !41
  %155 = fadd float %143, %154, !dbg !36
  %156 = bitcast float %155 to i32, !dbg !41
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 4, i32 31), !dbg !41
  %158 = bitcast i32 %157 to float, !dbg !41
  %159 = fadd float %155, %158, !dbg !36
  %160 = bitcast float %159 to i32, !dbg !41
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 2, i32 31), !dbg !41
  %162 = bitcast i32 %161 to float, !dbg !41
  %163 = fadd float %159, %162, !dbg !36
  %164 = bitcast float %163 to i32, !dbg !41
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 1, i32 31), !dbg !41
  %166 = bitcast i32 %165 to float, !dbg !41
  %167 = fadd float %163, %166, !dbg !36
  %168 = bitcast float %151 to i32, !dbg !41
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 8, i32 31), !dbg !41
  %170 = bitcast i32 %169 to float, !dbg !41
  %171 = fadd float %151, %170, !dbg !36
  %172 = bitcast float %171 to i32, !dbg !41
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 4, i32 31), !dbg !41
  %174 = bitcast i32 %173 to float, !dbg !41
  %175 = fadd float %171, %174, !dbg !36
  %176 = bitcast float %175 to i32, !dbg !41
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 2, i32 31), !dbg !41
  %178 = bitcast i32 %177 to float, !dbg !41
  %179 = fadd float %175, %178, !dbg !36
  %180 = bitcast float %179 to i32, !dbg !41
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 1, i32 31), !dbg !41
  %182 = bitcast i32 %181 to float, !dbg !41
  %183 = fadd float %179, %182, !dbg !36
  %184 = bitcast float %167 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %184, i1 true) #5, !dbg !34
  %185 = bitcast float %183 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %185, i1 true) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %186 = load float, ptr addrspace(3) %121, align 4, !dbg !34
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %186, float 6.400000e+01) #5, !dbg !34
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %167, float 6.400000e+01) #5, !dbg !34
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %183, float 6.400000e+01) #5, !dbg !34
  %190 = insertelement <8 x float> poison, float %189, i64 0, !dbg !42
  %191 = insertelement <8 x float> %190, float %188, i64 1, !dbg !42
  %192 = shufflevector <8 x float> %191, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !42
  %193 = fsub <8 x float> %135, %192, !dbg !42
  %194 = fmul <8 x float> %193, %193, !dbg !43
  %195 = fmul <8 x float> %193, %193, !dbg !43
  %196 = fmul <8 x float> %193, %193, !dbg !43
  %197 = fmul <8 x float> %193, %193, !dbg !43
  %198 = fmul <8 x float> %193, %193, !dbg !43
  %199 = fmul <8 x float> %193, %193, !dbg !43
  %200 = fmul <8 x float> %193, %193, !dbg !43
  %201 = fmul <8 x float> %193, %193, !dbg !43
  %shift = shufflevector <8 x float> %194, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 7, i32 poison>, !dbg !44
  %202 = fadd <8 x float> %shift, %195, !dbg !44
  %shift26 = shufflevector <8 x float> %202, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 6, i32 poison, i32 poison>, !dbg !44
  %203 = fadd <8 x float> %196, %shift26, !dbg !44
  %shift27 = shufflevector <8 x float> %203, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 5, i32 poison, i32 poison, i32 poison>, !dbg !44
  %204 = fadd <8 x float> %197, %shift27, !dbg !44
  %205 = extractelement <8 x float> %204, i64 4, !dbg !44
  %206 = select i1 %23, float %205, float 0.000000e+00, !dbg !44
  %shift28 = shufflevector <8 x float> %198, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %207 = fadd <8 x float> %shift28, %199, !dbg !44
  %shift29 = shufflevector <8 x float> %207, <8 x float> poison, <8 x i32> <i32 poison, i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %208 = fadd <8 x float> %200, %shift29, !dbg !44
  %shift30 = shufflevector <8 x float> %208, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %209 = fadd <8 x float> %201, %shift30, !dbg !44
  %210 = extractelement <8 x float> %209, i64 0, !dbg !44
  %211 = select i1 %24, float %210, float 0.000000e+00, !dbg !44
  %212 = bitcast float %206 to i32, !dbg !46
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 8, i32 31), !dbg !46
  %214 = bitcast i32 %213 to float, !dbg !46
  %215 = fadd float %206, %214, !dbg !44
  %216 = bitcast float %215 to i32, !dbg !46
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 4, i32 31), !dbg !46
  %218 = bitcast i32 %217 to float, !dbg !46
  %219 = fadd float %215, %218, !dbg !44
  %220 = bitcast float %219 to i32, !dbg !46
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 2, i32 31), !dbg !46
  %222 = bitcast i32 %221 to float, !dbg !46
  %223 = fadd float %219, %222, !dbg !44
  %224 = bitcast float %223 to i32, !dbg !46
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 1, i32 31), !dbg !46
  %226 = bitcast i32 %225 to float, !dbg !46
  %227 = fadd float %223, %226, !dbg !44
  %228 = bitcast float %211 to i32, !dbg !46
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 8, i32 31), !dbg !46
  %230 = bitcast i32 %229 to float, !dbg !46
  %231 = fadd float %211, %230, !dbg !44
  %232 = bitcast float %231 to i32, !dbg !46
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 4, i32 31), !dbg !46
  %234 = bitcast i32 %233 to float, !dbg !46
  %235 = fadd float %231, %234, !dbg !44
  %236 = bitcast float %235 to i32, !dbg !46
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 2, i32 31), !dbg !46
  %238 = bitcast i32 %237 to float, !dbg !46
  %239 = fadd float %235, %238, !dbg !44
  %240 = bitcast float %239 to i32, !dbg !46
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 1, i32 31), !dbg !46
  %242 = bitcast i32 %241 to float, !dbg !46
  %243 = fadd float %239, %242, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %244 = bitcast float %227 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %244, i1 true) #5, !dbg !47
  %245 = bitcast float %243 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %245, i1 true) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %246 = load float, ptr addrspace(3) %121, align 4, !dbg !47
  %247 = fsub float 0.000000e+00, %117, !dbg !48
  %248 = fsub float 0.000000e+00, %118, !dbg !48
  %249 = fmul float %247, 0x3FF7154760000000, !dbg !50
  %250 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %249) #5, !dbg !50
  %251 = fmul float %248, 0x3FF7154760000000, !dbg !50
  %252 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %251) #5, !dbg !50
  %253 = fadd float %250, 1.000000e+00, !dbg !51
  %254 = fadd float %252, 1.000000e+00, !dbg !51
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %253) #5, !dbg !52
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %254) #5, !dbg !52
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %246, float 6.400000e+01) #5, !dbg !53
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %227, float 6.400000e+01) #5, !dbg !53
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %243, float 6.400000e+01) #5, !dbg !53
  %260 = fadd float %257, 0x3EE4F8B580000000, !dbg !54
  %261 = fadd float %258, 0x3EE4F8B580000000, !dbg !54
  %262 = fadd float %259, 0x3EE4F8B580000000, !dbg !54
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i = icmp eq i32 %263, 0, !dbg !47
  br i1 %.not.i, label %266, label %264, !dbg !47

264:                                              ; preds = %12
  %265 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %260), !dbg !47
  br label %__nv_rsqrtf.exit, !dbg !47

266:                                              ; preds = %12
  %267 = tail call float @llvm.nvvm.rsqrt.approx.f(float %260), !dbg !47
  br label %__nv_rsqrtf.exit, !dbg !47

__nv_rsqrtf.exit:                                 ; preds = %264, %266
  %.0.i = phi float [ %265, %264 ], [ %267, %266 ], !dbg !47
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i11 = icmp eq i32 %271, 0, !dbg !47
  br i1 %.not.i11, label %274, label %272, !dbg !47

272:                                              ; preds = %__nv_rsqrtf.exit
  %273 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %261), !dbg !47
  br label %__nv_rsqrtf.exit13, !dbg !47

274:                                              ; preds = %__nv_rsqrtf.exit
  %275 = tail call float @llvm.nvvm.rsqrt.approx.f(float %261), !dbg !47
  br label %__nv_rsqrtf.exit13, !dbg !47

__nv_rsqrtf.exit13:                               ; preds = %272, %274
  %.0.i12 = phi float [ %273, %272 ], [ %275, %274 ], !dbg !47
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i23 = icmp eq i32 %279, 0, !dbg !47
  br i1 %.not.i23, label %282, label %280, !dbg !47

280:                                              ; preds = %__nv_rsqrtf.exit13
  %281 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %262), !dbg !47
  br label %__nv_rsqrtf.exit25, !dbg !47

282:                                              ; preds = %__nv_rsqrtf.exit13
  %283 = tail call float @llvm.nvvm.rsqrt.approx.f(float %262), !dbg !47
  br label %__nv_rsqrtf.exit25, !dbg !47

__nv_rsqrtf.exit25:                               ; preds = %280, %282
  %.0.i24 = phi float [ %281, %280 ], [ %283, %282 ], !dbg !47
  %284 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !28
  %285 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !30
  %286 = insertelement <2 x i32> %285, i32 %102, i64 1, !dbg !30
  %287 = bitcast <2 x i32> %286 to <2 x float>, !dbg !30
  %288 = shufflevector <2 x float> %287, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !30
  %289 = insertelement <2 x i32> poison, i32 %116, i64 0, !dbg !32
  %290 = insertelement <2 x i32> %289, i32 %112, i64 1, !dbg !32
  %291 = bitcast <2 x i32> %290 to <2 x float>, !dbg !32
  %292 = shufflevector <2 x float> %291, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !32
  %293 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !28
  %294 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !28
  %295 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !28
  %296 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !28
  %297 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !28
  %298 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !28
  %299 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !28
  %300 = bitcast i32 %47 to float, !dbg !18
  %301 = bitcast i32 %64 to float, !dbg !20
  %302 = fadd float %300, %301, !dbg !33
  %303 = insertelement <8 x float> poison, float %.0.i24, i64 0, !dbg !55
  %304 = insertelement <8 x float> %303, float %.0.i12, i64 1, !dbg !55
  %305 = shufflevector <8 x float> %304, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !55
  %306 = fmul <8 x float> %193, %305, !dbg !55
  %307 = insertelement <8 x i32> poison, i32 %284, i64 0, !dbg !28
  %308 = insertelement <8 x i32> %307, i32 %293, i64 1, !dbg !28
  %309 = insertelement <8 x i32> %308, i32 %294, i64 2, !dbg !28
  %310 = insertelement <8 x i32> %309, i32 %295, i64 3, !dbg !28
  %311 = insertelement <8 x i32> %310, i32 %296, i64 4, !dbg !28
  %312 = insertelement <8 x i32> %311, i32 %297, i64 5, !dbg !28
  %313 = insertelement <8 x i32> %312, i32 %298, i64 6, !dbg !28
  %314 = insertelement <8 x i32> %313, i32 %299, i64 7, !dbg !28
  %315 = bitcast <8 x i32> %314 to <8 x float>, !dbg !28
  %316 = fsub <8 x float> %315, %288, !dbg !56
  %317 = fmul <8 x float> %316, %292, !dbg !57
  %318 = insertelement <8 x float> poison, float %256, i64 0, !dbg !58
  %319 = insertelement <8 x float> %318, float %255, i64 1, !dbg !58
  %320 = shufflevector <8 x float> %319, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !58
  %321 = fmul <8 x float> %317, %320, !dbg !58
  %322 = fadd <8 x float> %321, %306, !dbg !59
  %323 = fcmp olt <8 x float> %322, zeroinitializer, !dbg !60
  %324 = extractelement <8 x i1> %323, i64 7, !dbg !64
  %325 = extractelement <8 x i1> %323, i64 6, !dbg !64
  %326 = extractelement <8 x i1> %323, i64 5, !dbg !64
  %327 = extractelement <8 x i1> %323, i64 4, !dbg !64
  %328 = extractelement <8 x i1> %323, i64 3, !dbg !64
  %329 = extractelement <8 x i1> %323, i64 2, !dbg !64
  %330 = extractelement <8 x i1> %323, i64 1, !dbg !64
  %331 = extractelement <8 x i1> %323, i64 0, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %332 = and i32 %15, 224, !dbg !66
  %333 = icmp eq i32 %332, 0, !dbg !66
  %334 = bitcast float %302 to i32, !dbg !66
  %335 = and i1 %333, %25, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %334, ptr addrspace(1) %36, i1 %335) #5, !dbg !66
  %336 = bitcast float %137 to i32, !dbg !67
  %337 = bitcast float %136 to i32, !dbg !67
  %338 = bitcast float %139 to i32, !dbg !67
  %339 = bitcast float %141 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %336, i32 %337, i32 %338, i32 %339, ptr addrspace(1) %70, i1 %23) #5, !dbg !67
  %340 = bitcast float %145 to i32, !dbg !67
  %341 = bitcast float %144 to i32, !dbg !67
  %342 = bitcast float %147 to i32, !dbg !67
  %343 = bitcast float %149 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %340, i32 %341, i32 %342, i32 %343, ptr addrspace(1) %72, i1 %24) #5, !dbg !67
  %344 = getelementptr float, ptr addrspace(1) %8, i64 %69, !dbg !68
  %345 = getelementptr float, ptr addrspace(1) %8, i64 %71, !dbg !68
  %bc = bitcast <8 x float> %322 to <8 x i32>, !dbg !69
  %346 = extractelement <8 x i32> %bc, i64 7, !dbg !69
  %347 = select i1 %324, i32 0, i32 %346, !dbg !64
  %bc31 = bitcast <8 x float> %322 to <8 x i32>, !dbg !69
  %348 = extractelement <8 x i32> %bc31, i64 6, !dbg !69
  %349 = select i1 %325, i32 0, i32 %348, !dbg !64
  %bc32 = bitcast <8 x float> %322 to <8 x i32>, !dbg !69
  %350 = extractelement <8 x i32> %bc32, i64 5, !dbg !69
  %351 = select i1 %326, i32 0, i32 %350, !dbg !64
  %bc33 = bitcast <8 x float> %322 to <8 x i32>, !dbg !69
  %352 = extractelement <8 x i32> %bc33, i64 4, !dbg !69
  %353 = select i1 %327, i32 0, i32 %352, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %347, i32 %349, i32 %351, i32 %353, ptr addrspace(1) %344, i1 %23) #5, !dbg !69
  %bc34 = bitcast <8 x float> %322 to <8 x i32>, !dbg !69
  %354 = extractelement <8 x i32> %bc34, i64 3, !dbg !69
  %355 = select i1 %328, i32 0, i32 %354, !dbg !64
  %bc35 = bitcast <8 x float> %322 to <8 x i32>, !dbg !69
  %356 = extractelement <8 x i32> %bc35, i64 2, !dbg !69
  %357 = select i1 %329, i32 0, i32 %356, !dbg !64
  %bc36 = bitcast <8 x float> %322 to <8 x i32>, !dbg !69
  %358 = extractelement <8 x i32> %bc36, i64 1, !dbg !69
  %359 = select i1 %330, i32 0, i32 %358, !dbg !64
  %bc37 = bitcast <8 x float> %322 to <8 x i32>, !dbg !69
  %360 = extractelement <8 x i32> %bc37, i64 0, !dbg !69
  %361 = select i1 %331, i32 0, i32 %360, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %355, i32 %357, i32 %359, i32 %361, ptr addrspace(1) %345, i1 %24) #5, !dbg !69
  %362 = getelementptr float, ptr addrspace(1) %9, i64 %35, !dbg !70
  %363 = bitcast float %.0.i to i32, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %363, ptr addrspace(1) %362, i1 %335) #5, !dbg !71
  %364 = getelementptr float, ptr addrspace(1) %7, i64 %35, !dbg !72
  %365 = bitcast float %187 to i32, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %365, ptr addrspace(1) %364, i1 %335) #5, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv4d3gerhh3expejgexnrw23a23edwclwcq4nuuew2cyu646iixg.py", directory: "inductor_cache/v4")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_25, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_25, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_25", linkageName: "triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 34, column: 42, scope: !7)
!22 = !DILocation(line: 34, column: 39, scope: !7)
!23 = !DILocation(line: 34, column: 34, scope: !7)
!24 = !DILocation(line: 34, column: 47, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 44, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 48, column: 20, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !40)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!40 = !DILocation(line: 45, column: 26, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 49, column: 19, scope: !7)
!43 = !DILocation(line: 50, column: 20, scope: !7)
!44 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !45)
!45 = !DILocation(line: 53, column: 26, scope: !7)
!46 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !45)
!47 = !DILocation(line: 63, column: 28, scope: !7)
!48 = !DILocation(line: 47, column: 30, scope: !39, inlinedAt: !49)
!49 = !DILocation(line: 56, column: 23, scope: !7)
!50 = !DILocation(line: 47, column: 29, scope: !39, inlinedAt: !49)
!51 = !DILocation(line: 47, column: 20, scope: !39, inlinedAt: !49)
!52 = !DILocation(line: 47, column: 16, scope: !39, inlinedAt: !49)
!53 = !DILocation(line: 60, column: 20, scope: !7)
!54 = !DILocation(line: 62, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 20, scope: !7)
!56 = !DILocation(line: 54, column: 20, scope: !7)
!57 = !DILocation(line: 55, column: 20, scope: !7)
!58 = !DILocation(line: 57, column: 20, scope: !7)
!59 = !DILocation(line: 65, column: 20, scope: !7)
!60 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !63)
!61 = distinct !DILexicalBlockFile(scope: !7, file: !62, discriminator: 0)
!62 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!63 = !DILocation(line: 67, column: 42, scope: !7)
!64 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !63)
!65 = !DILocation(line: 68, column: 4, scope: !7)
!66 = !DILocation(line: 69, column: 39, scope: !7)
!67 = !DILocation(line: 70, column: 47, scope: !7)
!68 = !DILocation(line: 71, column: 25, scope: !7)
!69 = !DILocation(line: 71, column: 45, scope: !7)
!70 = !DILocation(line: 72, column: 25, scope: !7)
!71 = !DILocation(line: 72, column: 37, scope: !7)
!72 = !DILocation(line: 73, column: 25, scope: !7)
!73 = !DILocation(line: 73, column: 37, scope: !7)
!74 = !DILocation(line: 73, column: 4, scope: !7)
