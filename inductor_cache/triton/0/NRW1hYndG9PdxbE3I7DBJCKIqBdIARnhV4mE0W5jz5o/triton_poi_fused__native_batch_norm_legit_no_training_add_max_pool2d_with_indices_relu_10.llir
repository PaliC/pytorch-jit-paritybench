; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !14
  %18 = shufflevector <2 x i32> %17, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !14
  %19 = sdiv <2 x i32> %18, <i32 2048, i32 256>, !dbg !14
  %20 = srem <2 x i32> %19, splat (i32 8), !dbg !15
  %21 = srem i32 %16, 256, !dbg !16
  %22 = sdiv i32 %16, 16384, !dbg !17
  %23 = sext i32 %16 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !18
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !19
  %26 = sext i32 %21 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !20
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !22
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !23
  %35 = bitcast i32 %31 to float, !dbg !23
  %36 = bitcast i32 %32 to float, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !24
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !26
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !27
  %43 = extractelement <2 x i32> %20, i64 0, !dbg !28
  %44 = shl nsw i32 %43, 1, !dbg !29
  %45 = icmp sgt i32 %43, 0, !dbg !30
  %46 = extractelement <2 x i32> %20, i64 1, !dbg !28
  %47 = shl nsw i32 %46, 1, !dbg !31
  %48 = icmp sgt i32 %46, 0, !dbg !32
  %49 = and i1 %45, %48, !dbg !33
  %50 = shl nsw i32 %46, 9, !dbg !34
  %51 = mul nsw i32 %43, 7680, !dbg !35
  %52 = mul i32 %22, 57600, !dbg !36
  %53 = add i32 %52, %21, !dbg !37
  %54 = add i32 %53, -4096, !dbg !38
  %55 = add i32 %54, %50, !dbg !39
  %56 = add i32 %55, %51, !dbg !40
  %57 = sext i32 %56 to i64, !dbg !41
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !41
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %49, i32 -8388608, i1 %49, i32 -8388608, i1 %49, i32 -8388608, i1 %49, i32 -8388608, i1 %49) #3, !dbg !42
  %60 = icmp sgt i32 %46, -1, !dbg !43
  %61 = and i1 %45, %60, !dbg !44
  %62 = add i32 %53, -3840, !dbg !45
  %63 = add i32 %62, %50, !dbg !46
  %64 = add i32 %63, %51, !dbg !47
  %65 = sext i32 %64 to i64, !dbg !48
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !48
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 %61, i32 -8388608, i1 %61, i32 -8388608, i1 %61, i32 -8388608, i1 %61, i32 -8388608, i1 %61) #3, !dbg !49
  %68 = or disjoint i32 %47, 1, !dbg !50
  %69 = icmp slt i32 %68, 15, !dbg !51
  %70 = and i1 %60, %69, !dbg !52
  %71 = and i1 %45, %70, !dbg !53
  %72 = add i32 %53, -3584, !dbg !54
  %73 = add i32 %72, %50, !dbg !55
  %74 = add i32 %73, %51, !dbg !56
  %75 = sext i32 %74 to i64, !dbg !57
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !57
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 %71, i32 -8388608, i1 %71, i32 -8388608, i1 %71, i32 -8388608, i1 %71, i32 -8388608, i1 %71) #3, !dbg !58
  %78 = icmp sgt i32 %43, -1, !dbg !59
  %79 = and i1 %78, %48, !dbg !60
  %80 = add i32 %53, -256, !dbg !61
  %81 = add i32 %80, %50, !dbg !62
  %82 = add i32 %81, %51, !dbg !63
  %83 = sext i32 %82 to i64, !dbg !64
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !64
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %84, i1 %79, i32 -8388608, i1 %79, i32 -8388608, i1 %79, i32 -8388608, i1 %79, i32 -8388608, i1 %79) #3, !dbg !65
  %86 = or i32 %43, %46, !dbg !28
  %87 = icmp sgt i32 %86, -1, !dbg !28
  %88 = add i32 %53, %50, !dbg !66
  %89 = add i32 %88, %51, !dbg !67
  %90 = sext i32 %89 to i64, !dbg !68
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !68
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %91, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87) #3, !dbg !69
  %93 = and i1 %78, %70, !dbg !70
  %94 = add i32 %53, 256, !dbg !71
  %95 = add i32 %94, %50, !dbg !72
  %96 = add i32 %95, %51, !dbg !73
  %97 = sext i32 %96 to i64, !dbg !74
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !74
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %98, i1 %93, i32 -8388608, i1 %93, i32 -8388608, i1 %93, i32 -8388608, i1 %93, i32 -8388608, i1 %93) #3, !dbg !75
  %100 = or disjoint i32 %44, 1, !dbg !76
  %101 = icmp slt i32 %100, 15, !dbg !77
  %102 = and i1 %78, %101, !dbg !78
  %103 = and i1 %48, %102, !dbg !79
  %104 = add i32 %53, 3584, !dbg !80
  %105 = add i32 %104, %50, !dbg !81
  %106 = add i32 %105, %51, !dbg !82
  %107 = sext i32 %106 to i64, !dbg !83
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !83
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %108, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103) #3, !dbg !84
  %110 = and i1 %60, %102, !dbg !85
  %111 = add i32 %53, 3840, !dbg !86
  %112 = add i32 %111, %50, !dbg !87
  %113 = add i32 %112, %51, !dbg !88
  %114 = sext i32 %113 to i64, !dbg !89
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !89
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %115, i1 %110, i32 -8388608, i1 %110, i32 -8388608, i1 %110, i32 -8388608, i1 %110, i32 -8388608, i1 %110) #3, !dbg !90
  %117 = and i1 %102, %70, !dbg !91
  %118 = add i32 %53, 4096, !dbg !92
  %119 = add i32 %118, %50, !dbg !93
  %120 = add i32 %119, %51, !dbg !94
  %121 = sext i32 %120 to i64, !dbg !95
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %121, !dbg !95
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %122, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117) #3, !dbg !96
  %124 = fadd float %35, 0x3EE4F8B580000000, !dbg !97
  %125 = fadd float %36, 0x3EE4F8B580000000, !dbg !97
  %126 = fadd float %37, 0x3EE4F8B580000000, !dbg !97
  %127 = fadd float %38, 0x3EE4F8B580000000, !dbg !97
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !98
  %.not.i = icmp eq i32 %128, 0, !dbg !98
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !98
  %.not1.i = icmp eq i32 %129, 0, !dbg !98
  br i1 %.not.i, label %135, label %130, !dbg !98

130:                                              ; preds = %10
  br i1 %.not1.i, label %133, label %131, !dbg !98

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !98
  br label %__nv_sqrtf.exit, !dbg !98

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !98
  br label %__nv_sqrtf.exit, !dbg !98

135:                                              ; preds = %10
  br i1 %.not1.i, label %138, label %136, !dbg !98

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !98
  br label %__nv_sqrtf.exit, !dbg !98

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !98
  br label %__nv_sqrtf.exit, !dbg !98

__nv_sqrtf.exit:                                  ; preds = %131, %133, %136, %138
  %.0.i = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !98
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !98
  %.not.i1 = icmp eq i32 %140, 0, !dbg !98
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !98
  %.not1.i4 = icmp eq i32 %141, 0, !dbg !98
  br i1 %.not.i1, label %147, label %142, !dbg !98

142:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %145, label %143, !dbg !98

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !98
  br label %__nv_sqrtf.exit5, !dbg !98

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !98
  br label %__nv_sqrtf.exit5, !dbg !98

147:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %150, label %148, !dbg !98

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !98
  br label %__nv_sqrtf.exit5, !dbg !98

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !98
  br label %__nv_sqrtf.exit5, !dbg !98

__nv_sqrtf.exit5:                                 ; preds = %143, %145, %148, %150
  %.0.i3 = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !98
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !98
  %.not.i6 = icmp eq i32 %152, 0, !dbg !98
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !98
  %.not1.i9 = icmp eq i32 %153, 0, !dbg !98
  br i1 %.not.i6, label %159, label %154, !dbg !98

154:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %157, label %155, !dbg !98

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !98
  br label %__nv_sqrtf.exit10, !dbg !98

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !98
  br label %__nv_sqrtf.exit10, !dbg !98

159:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %162, label %160, !dbg !98

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !98
  br label %__nv_sqrtf.exit10, !dbg !98

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !98
  br label %__nv_sqrtf.exit10, !dbg !98

__nv_sqrtf.exit10:                                ; preds = %155, %157, %160, %162
  %.0.i8 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !98
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !98
  %.not.i11 = icmp eq i32 %164, 0, !dbg !98
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !98
  %.not1.i14 = icmp eq i32 %165, 0, !dbg !98
  br i1 %.not.i11, label %171, label %166, !dbg !98

166:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %169, label %167, !dbg !98

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !98
  br label %__nv_sqrtf.exit15, !dbg !98

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !98
  br label %__nv_sqrtf.exit15, !dbg !98

171:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %174, label %172, !dbg !98

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !98
  br label %__nv_sqrtf.exit15, !dbg !98

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !98
  br label %__nv_sqrtf.exit15, !dbg !98

__nv_sqrtf.exit15:                                ; preds = %167, %169, %172, %174
  %.0.i13 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !98
  %176 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !19
  %177 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !21
  %178 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !19
  %179 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !21
  %180 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !19
  %181 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !21
  %182 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !19
  %183 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !21
  %184 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !49
  %185 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !42
  %186 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !58
  %187 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !65
  %188 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !69
  %189 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !75
  %190 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !84
  %191 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !90
  %192 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !96
  %193 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !49
  %194 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !42
  %195 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !58
  %196 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !65
  %197 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !69
  %198 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !75
  %199 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !84
  %200 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !90
  %201 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !96
  %202 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !49
  %203 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !42
  %204 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !58
  %205 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !65
  %206 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !69
  %207 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !75
  %208 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !84
  %209 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !90
  %210 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !96
  %211 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !49
  %212 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !42
  %213 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !58
  %214 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !65
  %215 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !69
  %216 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !75
  %217 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !84
  %218 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !90
  %219 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !96
  %220 = insertelement <4 x i32> poison, i32 %211, i64 0, !dbg !49
  %221 = insertelement <4 x i32> %220, i32 %202, i64 1, !dbg !49
  %222 = insertelement <4 x i32> %221, i32 %193, i64 2, !dbg !49
  %223 = insertelement <4 x i32> %222, i32 %184, i64 3, !dbg !49
  %224 = bitcast <4 x i32> %223 to <4 x float>, !dbg !49
  %225 = insertelement <4 x i32> poison, i32 %212, i64 0, !dbg !42
  %226 = insertelement <4 x i32> %225, i32 %203, i64 1, !dbg !42
  %227 = insertelement <4 x i32> %226, i32 %194, i64 2, !dbg !42
  %228 = insertelement <4 x i32> %227, i32 %185, i64 3, !dbg !42
  %229 = bitcast <4 x i32> %228 to <4 x float>, !dbg !42
  %230 = fcmp ogt <4 x float> %224, %229, !dbg !99
  %231 = insertelement <4 x i32> poison, i32 %214, i64 0, !dbg !65
  %232 = insertelement <4 x i32> %231, i32 %205, i64 1, !dbg !65
  %233 = insertelement <4 x i32> %232, i32 %196, i64 2, !dbg !65
  %234 = insertelement <4 x i32> %233, i32 %187, i64 3, !dbg !65
  %235 = bitcast <4 x i32> %234 to <4 x float>, !dbg !65
  %236 = fcmp uno <4 x float> %224, zeroinitializer, !dbg !103
  %237 = or <4 x i1> %230, %236, !dbg !104
  %.v = select <4 x i1> %237, <4 x i32> %223, <4 x i32> %228, !dbg !105
  %238 = bitcast <4 x i32> %.v to <4 x float>, !dbg !105
  %239 = insertelement <4 x i32> poison, i32 %213, i64 0, !dbg !58
  %240 = insertelement <4 x i32> %239, i32 %204, i64 1, !dbg !58
  %241 = insertelement <4 x i32> %240, i32 %195, i64 2, !dbg !58
  %242 = insertelement <4 x i32> %241, i32 %186, i64 3, !dbg !58
  %243 = bitcast <4 x i32> %242 to <4 x float>, !dbg !58
  %244 = fcmp olt <4 x float> %238, %243, !dbg !106
  %245 = fcmp uno <4 x float> %243, zeroinitializer, !dbg !108
  %246 = or <4 x i1> %245, %244, !dbg !109
  %.v16 = select <4 x i1> %246, <4 x i32> %242, <4 x i32> %.v, !dbg !110
  %247 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !110
  %248 = fcmp olt <4 x float> %247, %235, !dbg !111
  %249 = insertelement <4 x i32> poison, i32 %215, i64 0, !dbg !69
  %250 = insertelement <4 x i32> %249, i32 %206, i64 1, !dbg !69
  %251 = insertelement <4 x i32> %250, i32 %197, i64 2, !dbg !69
  %252 = insertelement <4 x i32> %251, i32 %188, i64 3, !dbg !69
  %253 = bitcast <4 x i32> %252 to <4 x float>, !dbg !69
  %254 = fcmp uno <4 x float> %235, zeroinitializer, !dbg !113
  %255 = or <4 x i1> %254, %248, !dbg !114
  %.v17 = select <4 x i1> %255, <4 x i32> %234, <4 x i32> %.v16, !dbg !115
  %256 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !115
  %257 = fcmp olt <4 x float> %256, %253, !dbg !116
  %258 = fcmp uno <4 x float> %253, zeroinitializer, !dbg !118
  %259 = or <4 x i1> %258, %257, !dbg !119
  %.v18 = select <4 x i1> %259, <4 x i32> %252, <4 x i32> %.v17, !dbg !120
  %260 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !120
  %261 = insertelement <4 x i32> poison, i32 %216, i64 0, !dbg !75
  %262 = insertelement <4 x i32> %261, i32 %207, i64 1, !dbg !75
  %263 = insertelement <4 x i32> %262, i32 %198, i64 2, !dbg !75
  %264 = insertelement <4 x i32> %263, i32 %189, i64 3, !dbg !75
  %265 = bitcast <4 x i32> %264 to <4 x float>, !dbg !75
  %266 = fcmp olt <4 x float> %260, %265, !dbg !121
  %267 = fcmp uno <4 x float> %265, zeroinitializer, !dbg !123
  %268 = or <4 x i1> %267, %266, !dbg !124
  %.v19 = select <4 x i1> %268, <4 x i32> %264, <4 x i32> %.v18, !dbg !125
  %269 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !125
  %270 = insertelement <4 x i32> poison, i32 %217, i64 0, !dbg !84
  %271 = insertelement <4 x i32> %270, i32 %208, i64 1, !dbg !84
  %272 = insertelement <4 x i32> %271, i32 %199, i64 2, !dbg !84
  %273 = insertelement <4 x i32> %272, i32 %190, i64 3, !dbg !84
  %274 = bitcast <4 x i32> %273 to <4 x float>, !dbg !84
  %275 = fcmp olt <4 x float> %269, %274, !dbg !126
  %276 = fcmp uno <4 x float> %274, zeroinitializer, !dbg !128
  %277 = or <4 x i1> %276, %275, !dbg !129
  %.v20 = select <4 x i1> %277, <4 x i32> %273, <4 x i32> %.v19, !dbg !130
  %278 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !130
  %279 = insertelement <4 x i32> poison, i32 %218, i64 0, !dbg !90
  %280 = insertelement <4 x i32> %279, i32 %209, i64 1, !dbg !90
  %281 = insertelement <4 x i32> %280, i32 %200, i64 2, !dbg !90
  %282 = insertelement <4 x i32> %281, i32 %191, i64 3, !dbg !90
  %283 = bitcast <4 x i32> %282 to <4 x float>, !dbg !90
  %284 = fcmp olt <4 x float> %278, %283, !dbg !131
  %285 = fcmp uno <4 x float> %283, zeroinitializer, !dbg !133
  %286 = or <4 x i1> %285, %284, !dbg !134
  %.v21 = select <4 x i1> %286, <4 x i32> %282, <4 x i32> %.v20, !dbg !135
  %287 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !135
  %288 = insertelement <4 x i32> poison, i32 %219, i64 0, !dbg !96
  %289 = insertelement <4 x i32> %288, i32 %210, i64 1, !dbg !96
  %290 = insertelement <4 x i32> %289, i32 %201, i64 2, !dbg !96
  %291 = insertelement <4 x i32> %290, i32 %192, i64 3, !dbg !96
  %292 = bitcast <4 x i32> %291 to <4 x float>, !dbg !96
  %293 = fcmp olt <4 x float> %287, %292, !dbg !136
  %294 = zext <4 x i1> %230 to <4 x i8>, !dbg !138
  %295 = select <4 x i1> %244, <4 x i8> splat (i8 2), <4 x i8> %294, !dbg !139
  %296 = select <4 x i1> %248, <4 x i8> splat (i8 3), <4 x i8> %295, !dbg !140
  %297 = select <4 x i1> %257, <4 x i8> splat (i8 4), <4 x i8> %296, !dbg !141
  %298 = select <4 x i1> %266, <4 x i8> splat (i8 5), <4 x i8> %297, !dbg !142
  %299 = select <4 x i1> %275, <4 x i8> splat (i8 6), <4 x i8> %298, !dbg !143
  %300 = select <4 x i1> %284, <4 x i8> splat (i8 7), <4 x i8> %299, !dbg !144
  %301 = select <4 x i1> %293, <4 x i8> splat (i8 8), <4 x i8> %300, !dbg !145
  %302 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !27
  %303 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !27
  %304 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !27
  %305 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !27
  %306 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !25
  %307 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !25
  %308 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !25
  %309 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !25
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !146
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !146
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !146
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !146
  %314 = insertelement <4 x i32> poison, i32 %182, i64 0, !dbg !19
  %315 = insertelement <4 x i32> %314, i32 %180, i64 1, !dbg !19
  %316 = insertelement <4 x i32> %315, i32 %178, i64 2, !dbg !19
  %317 = insertelement <4 x i32> %316, i32 %176, i64 3, !dbg !19
  %318 = bitcast <4 x i32> %317 to <4 x float>, !dbg !19
  %319 = insertelement <4 x i32> poison, i32 %183, i64 0, !dbg !21
  %320 = insertelement <4 x i32> %319, i32 %181, i64 1, !dbg !21
  %321 = insertelement <4 x i32> %320, i32 %179, i64 2, !dbg !21
  %322 = insertelement <4 x i32> %321, i32 %177, i64 3, !dbg !21
  %323 = bitcast <4 x i32> %322 to <4 x float>, !dbg !21
  %324 = fsub <4 x float> %318, %323, !dbg !147
  %325 = fcmp uno <4 x float> %292, zeroinitializer, !dbg !148
  %326 = or <4 x i1> %325, %293, !dbg !149
  %.v22 = select <4 x i1> %326, <4 x i32> %291, <4 x i32> %.v21, !dbg !150
  %327 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !150
  %328 = insertelement <4 x i32> poison, i32 %305, i64 0, !dbg !27
  %329 = insertelement <4 x i32> %328, i32 %304, i64 1, !dbg !27
  %330 = insertelement <4 x i32> %329, i32 %303, i64 2, !dbg !27
  %331 = insertelement <4 x i32> %330, i32 %302, i64 3, !dbg !27
  %332 = bitcast <4 x i32> %331 to <4 x float>, !dbg !27
  %333 = insertelement <4 x i32> poison, i32 %309, i64 0, !dbg !25
  %334 = insertelement <4 x i32> %333, i32 %308, i64 1, !dbg !25
  %335 = insertelement <4 x i32> %334, i32 %307, i64 2, !dbg !25
  %336 = insertelement <4 x i32> %335, i32 %306, i64 3, !dbg !25
  %337 = bitcast <4 x i32> %336 to <4 x float>, !dbg !25
  %338 = insertelement <4 x float> poison, float %310, i64 0, !dbg !151
  %339 = insertelement <4 x float> %338, float %311, i64 1, !dbg !151
  %340 = insertelement <4 x float> %339, float %312, i64 2, !dbg !151
  %341 = insertelement <4 x float> %340, float %313, i64 3, !dbg !151
  %342 = fmul <4 x float> %324, %341, !dbg !151
  %343 = fmul <4 x float> %342, %337, !dbg !152
  %344 = fadd <4 x float> %343, %332, !dbg !153
  %345 = fadd <4 x float> %344, %327, !dbg !154
  %346 = fcmp olt <4 x float> %345, zeroinitializer, !dbg !155
  %347 = extractelement <4 x i1> %346, i64 0, !dbg !157
  %348 = extractelement <4 x float> %345, i64 0, !dbg !158
  %349 = extractelement <4 x i1> %346, i64 1, !dbg !157
  %350 = extractelement <4 x float> %345, i64 1, !dbg !158
  %351 = extractelement <4 x i1> %346, i64 2, !dbg !157
  %352 = extractelement <4 x float> %345, i64 2, !dbg !158
  %353 = extractelement <4 x i1> %346, i64 3, !dbg !157
  %354 = extractelement <4 x float> %345, i64 3, !dbg !158
  %355 = getelementptr i8, ptr addrspace(1) %7, i64 %23, !dbg !159
  %356 = bitcast <4 x i8> %301 to i32, !dbg !160
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %356, ptr addrspace(1) %355, i1 true) #3, !dbg !160
  %357 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !161
  %358 = bitcast float %348 to i32, !dbg !158
  %359 = bitcast float %350 to i32, !dbg !158
  %360 = bitcast float %352 to i32, !dbg !158
  %361 = bitcast float %354 to i32, !dbg !158
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %358, i32 %359, i32 %360, i32 %361, ptr addrspace(1) %357, i1 true) #3, !dbg !158
  %362 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !162
  %363 = bitcast float %348 to i32, !dbg !163
  %364 = select i1 %347, i32 0, i32 %363, !dbg !157
  %365 = bitcast float %350 to i32, !dbg !163
  %366 = select i1 %349, i32 0, i32 %365, !dbg !157
  %367 = bitcast float %352 to i32, !dbg !163
  %368 = select i1 %351, i32 0, i32 %367, !dbg !157
  %369 = bitcast float %354 to i32, !dbg !163
  %370 = select i1 %353, i32 0, i32 %369, !dbg !157
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %364, i32 %366, i32 %368, i32 %370, ptr addrspace(1) %362, i1 true) #3, !dbg !163
  ret void, !dbg !164
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccrayhhy25522xnzoa5r3d4grrhag2ldw377ofjjtptbpl2sbpqb.py", directory: "inductor_cache/cr")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 31, scope: !7)
!19 = !DILocation(line: 29, column: 36, scope: !7)
!20 = !DILocation(line: 30, column: 31, scope: !7)
!21 = !DILocation(line: 30, column: 36, scope: !7)
!22 = !DILocation(line: 31, column: 31, scope: !7)
!23 = !DILocation(line: 31, column: 36, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 31, scope: !7)
!27 = !DILocation(line: 33, column: 36, scope: !7)
!28 = !DILocation(line: 67, column: 20, scope: !7)
!29 = !DILocation(line: 34, column: 20, scope: !7)
!30 = !DILocation(line: 36, column: 19, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 41, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 19, scope: !7)
!34 = !DILocation(line: 45, column: 50, scope: !7)
!35 = !DILocation(line: 45, column: 60, scope: !7)
!36 = !DILocation(line: 45, column: 71, scope: !7)
!37 = !DILocation(line: 45, column: 41, scope: !7)
!38 = !DILocation(line: 45, column: 46, scope: !7)
!39 = !DILocation(line: 45, column: 55, scope: !7)
!40 = !DILocation(line: 45, column: 65, scope: !7)
!41 = !DILocation(line: 45, column: 31, scope: !7)
!42 = !DILocation(line: 45, column: 76, scope: !7)
!43 = !DILocation(line: 47, column: 21, scope: !7)
!44 = !DILocation(line: 50, column: 19, scope: !7)
!45 = !DILocation(line: 51, column: 46, scope: !7)
!46 = !DILocation(line: 51, column: 55, scope: !7)
!47 = !DILocation(line: 51, column: 65, scope: !7)
!48 = !DILocation(line: 51, column: 31, scope: !7)
!49 = !DILocation(line: 51, column: 76, scope: !7)
!50 = !DILocation(line: 53, column: 16, scope: !7)
!51 = !DILocation(line: 55, column: 20, scope: !7)
!52 = !DILocation(line: 56, column: 20, scope: !7)
!53 = !DILocation(line: 57, column: 19, scope: !7)
!54 = !DILocation(line: 58, column: 46, scope: !7)
!55 = !DILocation(line: 58, column: 55, scope: !7)
!56 = !DILocation(line: 58, column: 65, scope: !7)
!57 = !DILocation(line: 58, column: 31, scope: !7)
!58 = !DILocation(line: 58, column: 76, scope: !7)
!59 = !DILocation(line: 61, column: 21, scope: !7)
!60 = !DILocation(line: 64, column: 20, scope: !7)
!61 = !DILocation(line: 65, column: 45, scope: !7)
!62 = !DILocation(line: 65, column: 54, scope: !7)
!63 = !DILocation(line: 65, column: 64, scope: !7)
!64 = !DILocation(line: 65, column: 31, scope: !7)
!65 = !DILocation(line: 65, column: 75, scope: !7)
!66 = !DILocation(line: 68, column: 45, scope: !7)
!67 = !DILocation(line: 68, column: 55, scope: !7)
!68 = !DILocation(line: 68, column: 31, scope: !7)
!69 = !DILocation(line: 68, column: 66, scope: !7)
!70 = !DILocation(line: 70, column: 20, scope: !7)
!71 = !DILocation(line: 71, column: 42, scope: !7)
!72 = !DILocation(line: 71, column: 51, scope: !7)
!73 = !DILocation(line: 71, column: 61, scope: !7)
!74 = !DILocation(line: 71, column: 31, scope: !7)
!75 = !DILocation(line: 71, column: 72, scope: !7)
!76 = !DILocation(line: 73, column: 16, scope: !7)
!77 = !DILocation(line: 75, column: 20, scope: !7)
!78 = !DILocation(line: 76, column: 20, scope: !7)
!79 = !DILocation(line: 77, column: 20, scope: !7)
!80 = !DILocation(line: 78, column: 43, scope: !7)
!81 = !DILocation(line: 78, column: 52, scope: !7)
!82 = !DILocation(line: 78, column: 62, scope: !7)
!83 = !DILocation(line: 78, column: 31, scope: !7)
!84 = !DILocation(line: 78, column: 73, scope: !7)
!85 = !DILocation(line: 80, column: 20, scope: !7)
!86 = !DILocation(line: 81, column: 43, scope: !7)
!87 = !DILocation(line: 81, column: 52, scope: !7)
!88 = !DILocation(line: 81, column: 62, scope: !7)
!89 = !DILocation(line: 81, column: 31, scope: !7)
!90 = !DILocation(line: 81, column: 73, scope: !7)
!91 = !DILocation(line: 83, column: 20, scope: !7)
!92 = !DILocation(line: 84, column: 43, scope: !7)
!93 = !DILocation(line: 84, column: 52, scope: !7)
!94 = !DILocation(line: 84, column: 62, scope: !7)
!95 = !DILocation(line: 84, column: 31, scope: !7)
!96 = !DILocation(line: 84, column: 73, scope: !7)
!97 = !DILocation(line: 113, column: 20, scope: !7)
!98 = !DILocation(line: 114, column: 27, scope: !7)
!99 = !DILocation(line: 118, column: 15, scope: !100, inlinedAt: !102)
!100 = distinct !DILexicalBlockFile(scope: !7, file: !101, discriminator: 0)
!101 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!102 = !DILocation(line: 52, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !100, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !100, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !100, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !100, inlinedAt: !107)
!107 = !DILocation(line: 59, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !100, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !100, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !100, inlinedAt: !107)
!111 = !DILocation(line: 118, column: 15, scope: !100, inlinedAt: !112)
!112 = !DILocation(line: 66, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 21, scope: !100, inlinedAt: !112)
!114 = !DILocation(line: 120, column: 16, scope: !100, inlinedAt: !112)
!115 = !DILocation(line: 121, column: 29, scope: !100, inlinedAt: !112)
!116 = !DILocation(line: 118, column: 15, scope: !100, inlinedAt: !117)
!117 = !DILocation(line: 69, column: 42, scope: !7)
!118 = !DILocation(line: 120, column: 21, scope: !100, inlinedAt: !117)
!119 = !DILocation(line: 120, column: 16, scope: !100, inlinedAt: !117)
!120 = !DILocation(line: 121, column: 29, scope: !100, inlinedAt: !117)
!121 = !DILocation(line: 118, column: 15, scope: !100, inlinedAt: !122)
!122 = !DILocation(line: 72, column: 42, scope: !7)
!123 = !DILocation(line: 120, column: 21, scope: !100, inlinedAt: !122)
!124 = !DILocation(line: 120, column: 16, scope: !100, inlinedAt: !122)
!125 = !DILocation(line: 121, column: 29, scope: !100, inlinedAt: !122)
!126 = !DILocation(line: 118, column: 15, scope: !100, inlinedAt: !127)
!127 = !DILocation(line: 79, column: 42, scope: !7)
!128 = !DILocation(line: 120, column: 21, scope: !100, inlinedAt: !127)
!129 = !DILocation(line: 120, column: 16, scope: !100, inlinedAt: !127)
!130 = !DILocation(line: 121, column: 29, scope: !100, inlinedAt: !127)
!131 = !DILocation(line: 118, column: 15, scope: !100, inlinedAt: !132)
!132 = !DILocation(line: 82, column: 42, scope: !7)
!133 = !DILocation(line: 120, column: 21, scope: !100, inlinedAt: !132)
!134 = !DILocation(line: 120, column: 16, scope: !100, inlinedAt: !132)
!135 = !DILocation(line: 121, column: 29, scope: !100, inlinedAt: !132)
!136 = !DILocation(line: 118, column: 15, scope: !100, inlinedAt: !137)
!137 = !DILocation(line: 85, column: 42, scope: !7)
!138 = !DILocation(line: 89, column: 35, scope: !7)
!139 = !DILocation(line: 92, column: 35, scope: !7)
!140 = !DILocation(line: 95, column: 35, scope: !7)
!141 = !DILocation(line: 98, column: 35, scope: !7)
!142 = !DILocation(line: 101, column: 35, scope: !7)
!143 = !DILocation(line: 104, column: 35, scope: !7)
!144 = !DILocation(line: 107, column: 35, scope: !7)
!145 = !DILocation(line: 110, column: 35, scope: !7)
!146 = !DILocation(line: 116, column: 20, scope: !7)
!147 = !DILocation(line: 111, column: 20, scope: !7)
!148 = !DILocation(line: 120, column: 21, scope: !100, inlinedAt: !137)
!149 = !DILocation(line: 120, column: 16, scope: !100, inlinedAt: !137)
!150 = !DILocation(line: 121, column: 29, scope: !100, inlinedAt: !137)
!151 = !DILocation(line: 119, column: 20, scope: !7)
!152 = !DILocation(line: 120, column: 20, scope: !7)
!153 = !DILocation(line: 121, column: 20, scope: !7)
!154 = !DILocation(line: 122, column: 20, scope: !7)
!155 = !DILocation(line: 118, column: 15, scope: !100, inlinedAt: !156)
!156 = !DILocation(line: 124, column: 42, scope: !7)
!157 = !DILocation(line: 121, column: 29, scope: !100, inlinedAt: !156)
!158 = !DILocation(line: 126, column: 40, scope: !7)
!159 = !DILocation(line: 125, column: 25, scope: !7)
!160 = !DILocation(line: 125, column: 37, scope: !7)
!161 = !DILocation(line: 126, column: 28, scope: !7)
!162 = !DILocation(line: 127, column: 25, scope: !7)
!163 = !DILocation(line: 127, column: 37, scope: !7)
!164 = !DILocation(line: 127, column: 4, scope: !7)
