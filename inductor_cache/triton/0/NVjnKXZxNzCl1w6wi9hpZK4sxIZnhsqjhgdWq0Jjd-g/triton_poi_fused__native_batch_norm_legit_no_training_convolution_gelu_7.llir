; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_gelu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 510, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = srem i32 %14, 512, !dbg !14
  %16 = sext i32 %14 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !16
  %19 = extractvalue { i32, i32 } %18, 0, !dbg !16
  %20 = extractvalue { i32, i32 } %18, 1, !dbg !16
  %21 = bitcast i32 %19 to float, !dbg !16
  %22 = bitcast i32 %20 to float, !dbg !16
  %23 = sext i32 %15 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !17
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !18
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !18
  %28 = bitcast i32 %26 to float, !dbg !18
  %29 = bitcast i32 %27 to float, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !19
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !21
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !22
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !22
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !22
  %36 = bitcast i32 %34 to float, !dbg !22
  %37 = bitcast i32 %35 to float, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !23
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !25
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !26
  %42 = fadd float %21, %28, !dbg !27
  %43 = fadd float %22, %29, !dbg !27
  %44 = fmul float %42, 0x3FE6A09E60000000, !dbg !28
  %45 = fmul float %43, 0x3FE6A09E60000000, !dbg !28
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i6 = icmp eq i32 %46, 0, !dbg !29
  %47 = tail call float @llvm.nvvm.fabs.ftz.f(float %44) #3, !dbg !29
  %48 = tail call float @llvm.nvvm.fabs.f(float %44) #3, !dbg !29
  %.0.i7 = select i1 %.not.i6, float %48, float %47, !dbg !29
  %49 = fcmp oge float %.0.i7, 0x3FF00C1FC0000000, !dbg !29
  br i1 %49, label %__nv_fabsf.exit1.i, label %51, !dbg !29

__nv_fabsf.exit1.i:                               ; preds = %8
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not1.i9 = icmp eq i32 %50, 0, !dbg !29
  %.01.i = select i1 %.not1.i9, float %48, float %47, !dbg !29
  br label %__internal_fmad.exit.i, !dbg !29

51:                                               ; preds = %8
  %52 = fmul float %44, %44, !dbg !29
  br label %__internal_fmad.exit.i, !dbg !29

__internal_fmad.exit.i:                           ; preds = %51, %__nv_fabsf.exit1.i
  %53 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i ], [ 0x3FC06EBA60000000, %51 ], !dbg !29
  %54 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i ], [ 0xBFD8127580000000, %51 ], !dbg !29
  %55 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i ], [ 0x3FBCE315E0000000, %51 ], !dbg !29
  %56 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i ], [ 0xBF9B837CE0000000, %51 ], !dbg !29
  %57 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i ], [ 0x3F755ABD40000000, %51 ], !dbg !29
  %58 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i ], [ 0xBF4AE9A400000000, %51 ], !dbg !29
  %59 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i ], [ 0x3F163D2D40000000, %51 ], !dbg !29
  %60 = phi float [ %.01.i, %__nv_fabsf.exit1.i ], [ %52, %51 ], !dbg !29
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not2.i8 = icmp eq i32 %61, 0, !dbg !29
  %62 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %59, float %60, float %58) #3, !dbg !29
  %63 = tail call float @llvm.nvvm.fma.rn.f(float %59, float %60, float %58) #3, !dbg !29
  %.02.i = select i1 %.not2.i8, float %63, float %62, !dbg !29
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not3.i = icmp eq i32 %64, 0, !dbg !29
  %65 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %60, float %57) #3, !dbg !29
  %66 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %60, float %57) #3, !dbg !29
  %.03.i = select i1 %.not3.i, float %66, float %65, !dbg !29
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not4.i = icmp eq i32 %67, 0, !dbg !29
  %68 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i, float %60, float %56) #3, !dbg !29
  %69 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i, float %60, float %56) #3, !dbg !29
  %.04.i = select i1 %.not4.i, float %69, float %68, !dbg !29
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not5.i = icmp eq i32 %70, 0, !dbg !29
  %71 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %60, float %55) #3, !dbg !29
  %72 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %60, float %55) #3, !dbg !29
  %.05.i = select i1 %.not5.i, float %72, float %71, !dbg !29
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not6.i = icmp eq i32 %73, 0, !dbg !29
  %74 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %60, float %54) #3, !dbg !29
  %75 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %60, float %54) #3, !dbg !29
  %.06.i = select i1 %.not6.i, float %75, float %74, !dbg !29
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not7.i = icmp eq i32 %76, 0, !dbg !29
  %77 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %60, float %53) #3, !dbg !29
  %78 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %60, float %53) #3, !dbg !29
  %.07.i = select i1 %.not7.i, float %78, float %77, !dbg !29
  %79 = fneg float %60, !dbg !29
  %80 = select i1 %49, float %79, float %44, !dbg !29
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not8.i = icmp eq i32 %81, 0, !dbg !29
  %82 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %80, float %80) #3, !dbg !29
  %83 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %80, float %80) #3, !dbg !29
  %.08.i = select i1 %.not8.i, float %83, float %82, !dbg !29
  br i1 %49, label %84, label %__nv_erff.exit, !dbg !29

84:                                               ; preds = %__internal_fmad.exit.i
  %85 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i) #3, !dbg !29
  %86 = fsub float 1.000000e+00, %85, !dbg !29
  %87 = bitcast float %86 to i32, !dbg !29
  %88 = bitcast float %44 to i32, !dbg !29
  %89 = and i32 %88, -2147483648, !dbg !29
  %90 = or i32 %89, %87, !dbg !29
  %91 = bitcast i32 %90 to float, !dbg !29
  br label %__nv_erff.exit, !dbg !29

__nv_erff.exit:                                   ; preds = %__internal_fmad.exit.i, %84
  %r.0.i = phi float [ %91, %84 ], [ %.08.i, %__internal_fmad.exit.i ], !dbg !29
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i10 = icmp eq i32 %92, 0, !dbg !29
  %93 = tail call float @llvm.nvvm.fabs.ftz.f(float %45) #3, !dbg !29
  %94 = tail call float @llvm.nvvm.fabs.f(float %45) #3, !dbg !29
  %.0.i11 = select i1 %.not.i10, float %94, float %93, !dbg !29
  %95 = fcmp oge float %.0.i11, 0x3FF00C1FC0000000, !dbg !29
  br i1 %95, label %__nv_fabsf.exit1.i28, label %97, !dbg !29

__nv_fabsf.exit1.i28:                             ; preds = %__nv_erff.exit
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not1.i29 = icmp eq i32 %96, 0, !dbg !29
  %.01.i30 = select i1 %.not1.i29, float %94, float %93, !dbg !29
  br label %__internal_fmad.exit.i12, !dbg !29

97:                                               ; preds = %__nv_erff.exit
  %98 = fmul float %45, %45, !dbg !29
  br label %__internal_fmad.exit.i12, !dbg !29

__internal_fmad.exit.i12:                         ; preds = %97, %__nv_fabsf.exit1.i28
  %99 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i28 ], [ 0x3FC06EBA60000000, %97 ], !dbg !29
  %100 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i28 ], [ 0xBFD8127580000000, %97 ], !dbg !29
  %101 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i28 ], [ 0x3FBCE315E0000000, %97 ], !dbg !29
  %102 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i28 ], [ 0xBF9B837CE0000000, %97 ], !dbg !29
  %103 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i28 ], [ 0x3F755ABD40000000, %97 ], !dbg !29
  %104 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i28 ], [ 0xBF4AE9A400000000, %97 ], !dbg !29
  %105 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i28 ], [ 0x3F163D2D40000000, %97 ], !dbg !29
  %106 = phi float [ %.01.i30, %__nv_fabsf.exit1.i28 ], [ %98, %97 ], !dbg !29
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not2.i13 = icmp eq i32 %107, 0, !dbg !29
  %108 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %105, float %106, float %104) #3, !dbg !29
  %109 = tail call float @llvm.nvvm.fma.rn.f(float %105, float %106, float %104) #3, !dbg !29
  %.02.i14 = select i1 %.not2.i13, float %109, float %108, !dbg !29
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not3.i15 = icmp eq i32 %110, 0, !dbg !29
  %111 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i14, float %106, float %103) #3, !dbg !29
  %112 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i14, float %106, float %103) #3, !dbg !29
  %.03.i16 = select i1 %.not3.i15, float %112, float %111, !dbg !29
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not4.i17 = icmp eq i32 %113, 0, !dbg !29
  %114 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i16, float %106, float %102) #3, !dbg !29
  %115 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i16, float %106, float %102) #3, !dbg !29
  %.04.i18 = select i1 %.not4.i17, float %115, float %114, !dbg !29
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not5.i19 = icmp eq i32 %116, 0, !dbg !29
  %117 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i18, float %106, float %101) #3, !dbg !29
  %118 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i18, float %106, float %101) #3, !dbg !29
  %.05.i20 = select i1 %.not5.i19, float %118, float %117, !dbg !29
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not6.i21 = icmp eq i32 %119, 0, !dbg !29
  %120 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i20, float %106, float %100) #3, !dbg !29
  %121 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i20, float %106, float %100) #3, !dbg !29
  %.06.i22 = select i1 %.not6.i21, float %121, float %120, !dbg !29
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not7.i23 = icmp eq i32 %122, 0, !dbg !29
  %123 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i22, float %106, float %99) #3, !dbg !29
  %124 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i22, float %106, float %99) #3, !dbg !29
  %.07.i24 = select i1 %.not7.i23, float %124, float %123, !dbg !29
  %125 = fneg float %106, !dbg !29
  %126 = select i1 %95, float %125, float %45, !dbg !29
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not8.i25 = icmp eq i32 %127, 0, !dbg !29
  %128 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i24, float %126, float %126) #3, !dbg !29
  %129 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i24, float %126, float %126) #3, !dbg !29
  %.08.i26 = select i1 %.not8.i25, float %129, float %128, !dbg !29
  br i1 %95, label %130, label %__nv_erff.exit31, !dbg !29

130:                                              ; preds = %__internal_fmad.exit.i12
  %131 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i26) #3, !dbg !29
  %132 = fsub float 1.000000e+00, %131, !dbg !29
  %133 = bitcast float %132 to i32, !dbg !29
  %134 = bitcast float %45 to i32, !dbg !29
  %135 = and i32 %134, -2147483648, !dbg !29
  %136 = or i32 %135, %133, !dbg !29
  %137 = bitcast i32 %136 to float, !dbg !29
  br label %__nv_erff.exit31, !dbg !29

__nv_erff.exit31:                                 ; preds = %__internal_fmad.exit.i12, %130
  %r.0.i27 = phi float [ %137, %130 ], [ %.08.i26, %__internal_fmad.exit.i12 ], !dbg !29
  %138 = fadd float %36, 0x3EE4F8B580000000, !dbg !30
  %139 = fadd float %37, 0x3EE4F8B580000000, !dbg !30
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %140, 0, !dbg !31
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %141, 0, !dbg !31
  br i1 %.not.i, label %147, label %142, !dbg !31

142:                                              ; preds = %__nv_erff.exit31
  br i1 %.not1.i, label %145, label %143, !dbg !31

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

147:                                              ; preds = %__nv_erff.exit31
  br i1 %.not1.i, label %150, label %148, !dbg !31

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %143, %145, %148, %150
  %.0.i = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !31
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %152, 0, !dbg !31
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i4 = icmp eq i32 %153, 0, !dbg !31
  br i1 %.not.i1, label %159, label %154, !dbg !31

154:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %157, label %155, !dbg !31

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

159:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %162, label %160, !dbg !31

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %155, %157, %160, %162
  %.0.i3 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !31
  %164 = fmul float %43, 5.000000e-01, !dbg !32
  %165 = fadd float %r.0.i27, 1.000000e+00, !dbg !33
  %166 = fmul float %164, %165, !dbg !34
  %167 = extractvalue { i32, i32 } %31, 1, !dbg !20
  %168 = bitcast i32 %167 to float, !dbg !20
  %169 = fsub float %166, %168, !dbg !35
  %170 = fmul float %42, 5.000000e-01, !dbg !32
  %171 = fadd float %r.0.i, 1.000000e+00, !dbg !33
  %172 = fmul float %170, %171, !dbg !34
  %173 = extractvalue { i32, i32 } %31, 0, !dbg !20
  %174 = bitcast i32 %173 to float, !dbg !20
  %175 = fsub float %172, %174, !dbg !35
  %176 = extractvalue { i32, i32 } %41, 1, !dbg !26
  %177 = bitcast i32 %176 to float, !dbg !26
  %178 = extractvalue { i32, i32 } %41, 0, !dbg !26
  %179 = bitcast i32 %178 to float, !dbg !26
  %180 = extractvalue { i32, i32 } %39, 1, !dbg !24
  %181 = bitcast i32 %180 to float, !dbg !24
  %182 = extractvalue { i32, i32 } %39, 0, !dbg !24
  %183 = bitcast i32 %182 to float, !dbg !24
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !36
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !36
  %186 = fmul float %175, %184, !dbg !37
  %187 = fmul float %169, %185, !dbg !37
  %188 = fmul float %186, %183, !dbg !38
  %189 = fmul float %187, %181, !dbg !38
  %190 = fadd float %188, %179, !dbg !39
  %191 = fadd float %189, %177, !dbg !39
  %192 = bitcast float %42 to i32, !dbg !40
  %193 = bitcast float %43 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %192, i32 %193, ptr addrspace(1) %17, i1 true) #3, !dbg !40
  %194 = getelementptr float, ptr addrspace(1) %6, i64 %16, !dbg !41
  %195 = bitcast float %190 to i32, !dbg !42
  %196 = bitcast float %191 to i32, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %195, i32 %196, ptr addrspace(1) %194, i1 true) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cl5ndy6fdarjezbzubt36acxwmahmmkq4yvxik4rfw4zaujttwvi.py", directory: "inductor_cache/l5")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_gelu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_gelu_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_gelu_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_gelu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 18, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 37, column: 25, scope: !7)
!30 = !DILocation(line: 43, column: 20, scope: !7)
!31 = !DILocation(line: 44, column: 27, scope: !7)
!32 = !DILocation(line: 34, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 19, scope: !7)
!35 = !DILocation(line: 41, column: 20, scope: !7)
!36 = !DILocation(line: 46, column: 20, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 49, column: 20, scope: !7)
!39 = !DILocation(line: 50, column: 20, scope: !7)
!40 = !DILocation(line: 51, column: 39, scope: !7)
!41 = !DILocation(line: 52, column: 25, scope: !7)
!42 = !DILocation(line: 52, column: 37, scope: !7)
!43 = !DILocation(line: 52, column: 4, scope: !7)
