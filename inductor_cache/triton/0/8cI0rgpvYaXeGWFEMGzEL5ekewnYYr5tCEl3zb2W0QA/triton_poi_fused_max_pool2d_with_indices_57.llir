; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_57(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !11
  %8 = shl i32 %7, 8, !dbg !12
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %10 = shl i32 %9, 1, !dbg !13
  %11 = and i32 %10, 254, !dbg !13
  %12 = and i32 %9, 127, !dbg !13
  %13 = or disjoint i32 %12, 128, !dbg !13
  %14 = or disjoint i32 %8, %11, !dbg !14
  %15 = or disjoint i32 %8, %12, !dbg !14
  %16 = or disjoint i32 %8, %13, !dbg !14
  %17 = icmp slt i32 %15, 608, !dbg !15
  %18 = icmp slt i32 %16, 608, !dbg !15
  %.frozen = freeze i32 %6, !dbg !16
  %19 = sdiv i32 %.frozen, 2, !dbg !16
  %20 = srem i32 %19, 2, !dbg !17
  %21 = mul i32 %19, 2, !dbg !18
  %.decomposed = sub i32 %.frozen, %21, !dbg !18
  %.frozen7 = freeze i32 %6, !dbg !19
  %22 = sdiv i32 %.frozen7, 4, !dbg !19
  %23 = mul i32 %22, 4, !dbg !20
  %.decomposed8 = sub i32 %.frozen7, %23, !dbg !20
  %24 = shl nsw i32 %20, 1, !dbg !21
  %25 = icmp sgt i32 %20, -1, !dbg !22
  %26 = shl nsw i32 %.decomposed, 1, !dbg !23
  %27 = or i32 %20, %.decomposed, !dbg !24
  %28 = icmp sgt i32 %27, -1, !dbg !24
  %29 = mul nsw i32 %.decomposed, 1216, !dbg !25
  %30 = mul i32 %19, 4864, !dbg !26
  %31 = add i32 %30, %29, !dbg !27
  %32 = add i32 %31, %14, !dbg !28
  %33 = sext i32 %32 to i64, !dbg !29
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !29
  %35 = add i32 %31, 608, !dbg !30
  %36 = add i32 %35, %14, !dbg !31
  %37 = sext i32 %36 to i64, !dbg !32
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !32
  %39 = add nsw i32 %26, 2, !dbg !33
  %40 = icmp samesign ult i32 %39, 4, !dbg !34
  %41 = and i1 %25, %40, !dbg !35
  %42 = add i32 %31, 1216, !dbg !36
  %43 = add i32 %42, %14, !dbg !37
  %44 = sext i32 %43 to i64, !dbg !38
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !38
  %46 = add i32 %31, 2432, !dbg !39
  %47 = add i32 %46, %14, !dbg !40
  %48 = sext i32 %47 to i64, !dbg !41
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !41
  %50 = add i32 %31, 3040, !dbg !42
  %51 = add i32 %50, %14, !dbg !43
  %52 = sext i32 %51 to i64, !dbg !44
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !44
  %54 = add i32 %31, 3648, !dbg !45
  %55 = add i32 %54, %14, !dbg !46
  %56 = sext i32 %55 to i64, !dbg !47
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !47
  %58 = add nsw i32 %24, 2, !dbg !48
  %59 = insertelement <4 x i32> <i32 poison, i32 poison, i32 poison, i32 -1>, i32 %14, i64 0, !dbg !15
  %60 = insertelement <4 x i32> %59, i32 %6, i64 1, !dbg !15
  %61 = insertelement <4 x i32> %60, i32 %58, i64 2, !dbg !15
  %62 = insertelement <4 x i32> <i32 608, i32 16, i32 4, i32 poison>, i32 %.decomposed, i64 3, !dbg !15
  %63 = icmp slt <4 x i32> %61, %62, !dbg !15
  %64 = icmp samesign ult <4 x i32> %61, %62, !dbg !15
  %65 = shufflevector <4 x i1> %63, <4 x i1> %64, <4 x i32> <i32 0, i32 1, i32 6, i32 3>, !dbg !15
  %66 = extractelement <4 x i1> %63, i64 0, !dbg !49
  %67 = and i1 %28, %66, !dbg !50
  %68 = extractelement <4 x i1> %63, i64 1, !dbg !49
  %69 = and i1 %68, %67, !dbg !51
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %69, i32 -8388608, i1 %69, i32 -8388608, i1 %69) #2, !dbg !52
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !52
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !52
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %38, i1 %69, i32 -8388608, i1 %69, i32 -8388608, i1 %69) #2, !dbg !53
  %74 = extractvalue { i32, i32 } %73, 0, !dbg !53
  %75 = extractvalue { i32, i32 } %73, 1, !dbg !53
  %76 = and i1 %66, %41, !dbg !54
  %77 = and i1 %68, %76, !dbg !55
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 %77, i32 -8388608, i1 %77, i32 -8388608, i1 %77) #2, !dbg !56
  %79 = extractvalue { i32, i32 } %78, 0, !dbg !56
  %80 = extractvalue { i32, i32 } %78, 1, !dbg !56
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %49, i1 %69, i32 -8388608, i1 %69, i32 -8388608, i1 %69) #2, !dbg !57
  %82 = extractvalue { i32, i32 } %81, 0, !dbg !57
  %83 = extractvalue { i32, i32 } %81, 1, !dbg !57
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %53, i1 %69, i32 -8388608, i1 %69, i32 -8388608, i1 %69) #2, !dbg !58
  %85 = extractvalue { i32, i32 } %84, 0, !dbg !58
  %86 = extractvalue { i32, i32 } %84, 1, !dbg !58
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %57, i1 %77, i32 -8388608, i1 %77, i32 -8388608, i1 %77) #2, !dbg !59
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !59
  %89 = extractvalue { i32, i32 } %87, 1, !dbg !59
  %90 = add i32 %31, 4864, !dbg !60
  %91 = add i32 %90, %14, !dbg !61
  %92 = sext i32 %91 to i64, !dbg !62
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !62
  %94 = bitcast <4 x i1> %65 to i4, !dbg !63
  %95 = icmp eq i4 %94, -1, !dbg !63
  %96 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %93, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95) #2, !dbg !64
  %97 = extractvalue { i32, i32 } %96, 0, !dbg !64
  %98 = extractvalue { i32, i32 } %96, 1, !dbg !64
  %99 = add i32 %31, 5472, !dbg !65
  %100 = add i32 %99, %14, !dbg !66
  %101 = sext i32 %100 to i64, !dbg !67
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !67
  %103 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %102, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95) #2, !dbg !68
  %104 = extractvalue { i32, i32 } %103, 0, !dbg !68
  %105 = extractvalue { i32, i32 } %103, 1, !dbg !68
  %106 = or i32 %58, %39, !dbg !69
  %107 = icmp samesign ult i32 %106, 4, !dbg !69
  %108 = add i32 %31, 6080, !dbg !70
  %109 = add i32 %108, %14, !dbg !71
  %110 = sext i32 %109 to i64, !dbg !72
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !72
  %112 = and i1 %66, %107, !dbg !73
  %113 = and i1 %68, %112, !dbg !74
  %114 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %111, i1 %113, i32 -8388608, i1 %113, i32 -8388608, i1 %113) #2, !dbg !75
  %115 = extractvalue { i32, i32 } %114, 0, !dbg !75
  %116 = extractvalue { i32, i32 } %114, 1, !dbg !75
  %117 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !52
  %118 = insertelement <2 x i32> %117, i32 %72, i64 1, !dbg !52
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !52
  %120 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !53
  %121 = insertelement <2 x i32> %120, i32 %75, i64 1, !dbg !53
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !53
  %123 = fcmp ogt <2 x float> %122, %119, !dbg !76
  %124 = fcmp uno <2 x float> %122, zeroinitializer, !dbg !80
  %125 = or <2 x i1> %123, %124, !dbg !81
  %.v = select <2 x i1> %125, <2 x i32> %121, <2 x i32> %118, !dbg !82
  %126 = bitcast <2 x i32> %.v to <2 x float>, !dbg !82
  %127 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !56
  %128 = insertelement <2 x i32> %127, i32 %80, i64 1, !dbg !56
  %129 = bitcast <2 x i32> %128 to <2 x float>, !dbg !56
  %130 = fcmp olt <2 x float> %126, %129, !dbg !83
  %131 = fcmp uno <2 x float> %129, zeroinitializer, !dbg !85
  %132 = or <2 x i1> %131, %130, !dbg !86
  %.v1 = select <2 x i1> %132, <2 x i32> %128, <2 x i32> %.v, !dbg !87
  %133 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !87
  %134 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !57
  %135 = insertelement <2 x i32> %134, i32 %83, i64 1, !dbg !57
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !57
  %137 = fcmp olt <2 x float> %133, %136, !dbg !88
  %138 = fcmp uno <2 x float> %136, zeroinitializer, !dbg !90
  %139 = or <2 x i1> %138, %137, !dbg !91
  %.v2 = select <2 x i1> %139, <2 x i32> %135, <2 x i32> %.v1, !dbg !92
  %140 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !92
  %141 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !58
  %142 = insertelement <2 x i32> %141, i32 %86, i64 1, !dbg !58
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !58
  %144 = fcmp olt <2 x float> %140, %143, !dbg !93
  %145 = fcmp uno <2 x float> %143, zeroinitializer, !dbg !95
  %146 = or <2 x i1> %145, %144, !dbg !96
  %.v3 = select <2 x i1> %146, <2 x i32> %142, <2 x i32> %.v2, !dbg !97
  %147 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !97
  %148 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !59
  %149 = insertelement <2 x i32> %148, i32 %89, i64 1, !dbg !59
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !59
  %151 = fcmp olt <2 x float> %147, %150, !dbg !98
  %152 = fcmp uno <2 x float> %150, zeroinitializer, !dbg !100
  %153 = or <2 x i1> %152, %151, !dbg !101
  %.v4 = select <2 x i1> %153, <2 x i32> %149, <2 x i32> %.v3, !dbg !102
  %154 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !102
  %155 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !64
  %156 = insertelement <2 x i32> %155, i32 %98, i64 1, !dbg !64
  %157 = bitcast <2 x i32> %156 to <2 x float>, !dbg !64
  %158 = fcmp olt <2 x float> %154, %157, !dbg !103
  %159 = fcmp uno <2 x float> %157, zeroinitializer, !dbg !105
  %160 = or <2 x i1> %159, %158, !dbg !106
  %.v5 = select <2 x i1> %160, <2 x i32> %156, <2 x i32> %.v4, !dbg !107
  %161 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !107
  %162 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !68
  %163 = insertelement <2 x i32> %162, i32 %105, i64 1, !dbg !68
  %164 = bitcast <2 x i32> %163 to <2 x float>, !dbg !68
  %165 = fcmp olt <2 x float> %161, %164, !dbg !108
  %166 = fcmp uno <2 x float> %164, zeroinitializer, !dbg !110
  %167 = or <2 x i1> %166, %165, !dbg !111
  %.v6 = select <2 x i1> %167, <2 x i32> %163, <2 x i32> %.v5, !dbg !112
  %168 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !112
  %169 = insertelement <2 x i32> poison, i32 %115, i64 0, !dbg !75
  %170 = insertelement <2 x i32> %169, i32 %116, i64 1, !dbg !75
  %171 = bitcast <2 x i32> %170 to <2 x float>, !dbg !75
  %172 = fcmp olt <2 x float> %168, %171, !dbg !113
  %173 = bitcast i32 %115 to float, !dbg !115
  %174 = fcmp uno float %173, 0.000000e+00, !dbg !115
  %175 = bitcast i32 %116 to float, !dbg !115
  %176 = fcmp uno float %175, 0.000000e+00, !dbg !115
  %177 = extractelement <2 x i1> %172, i64 0, !dbg !116
  %178 = or i1 %174, %177, !dbg !116
  %179 = extractelement <2 x i1> %172, i64 1, !dbg !116
  %180 = or i1 %176, %179, !dbg !116
  %181 = zext <2 x i1> %123 to <2 x i8>, !dbg !117
  %182 = select <2 x i1> %130, <2 x i8> splat (i8 2), <2 x i8> %181, !dbg !118
  %183 = select <2 x i1> %137, <2 x i8> splat (i8 3), <2 x i8> %182, !dbg !119
  %184 = select <2 x i1> %144, <2 x i8> splat (i8 4), <2 x i8> %183, !dbg !120
  %185 = select <2 x i1> %151, <2 x i8> splat (i8 5), <2 x i8> %184, !dbg !121
  %186 = select <2 x i1> %158, <2 x i8> splat (i8 6), <2 x i8> %185, !dbg !122
  %187 = select <2 x i1> %165, <2 x i8> splat (i8 7), <2 x i8> %186, !dbg !123
  %188 = select <2 x i1> %172, <2 x i8> splat (i8 8), <2 x i8> %187, !dbg !124
  %189 = shl i32 %15, 2, !dbg !125
  %190 = shl i32 %16, 2, !dbg !125
  %191 = mul i32 %22, 4224, !dbg !126
  %192 = add i32 %191, %.decomposed8, !dbg !127
  %193 = add i32 %192, %189, !dbg !128
  %194 = add i32 %192, %190, !dbg !128
  %195 = sext i32 %193 to i64, !dbg !129
  %196 = getelementptr float, ptr addrspace(1) %1, i64 %195, !dbg !129
  %197 = sext i32 %194 to i64, !dbg !129
  %198 = getelementptr float, ptr addrspace(1) %1, i64 %197, !dbg !129
  %199 = and i1 %68, %17, !dbg !49
  %200 = and i1 %68, %18, !dbg !49
  %201 = and i1 %68, %66, !dbg !49
  %202 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !130
  %203 = extractelement <2 x i32> %.v6, i64 0, !dbg !130
  %204 = select i1 %178, i32 %115, i32 %203, !dbg !131
  %205 = insertelement <1 x i32> poison, i32 %204, i64 0, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %205, i1 true) #2, !dbg !130
  %206 = or disjoint i32 %11, 1, !dbg !130
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %206, !dbg !130
  %208 = extractelement <2 x i32> %.v6, i64 1, !dbg !130
  %209 = select i1 %180, i32 %116, i32 %208, !dbg !131
  %210 = insertelement <1 x i32> poison, i32 %209, i64 0, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %210, i1 true) #2, !dbg !130
  tail call void @llvm.nvvm.barrier0(), !dbg !130
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !130
  %212 = load i32, ptr addrspace(3) %211, align 4, !dbg !130
  %213 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !130
  %214 = load i32, ptr addrspace(3) %213, align 4, !dbg !130
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %212, ptr addrspace(1) %196, i1 %199) #2, !dbg !130
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %214, ptr addrspace(1) %198, i1 %200) #2, !dbg !130
  %215 = mul i32 %6, 608, !dbg !132
  %216 = add i32 %14, %215, !dbg !133
  %217 = sext i32 %216 to i64, !dbg !134
  %218 = getelementptr i8, ptr addrspace(1) %2, i64 %217, !dbg !134
  %219 = bitcast <2 x i8> %188 to i16, !dbg !135
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %219, ptr addrspace(1) %218, i1 %201) #2, !dbg !135
  ret void, !dbg !136
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwonuek22t2v6rax4nudyg44s62kxho6bwvkghuzrfylck5hil5e.py", directory: "inductor_cache/wo")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_57, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_57, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_57", linkageName: "triton_poi_fused_max_pool2d_with_indices_57", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 28, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 26, column: 23, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 28, column: 26, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 35, column: 13, scope: !7)
!22 = !DILocation(line: 37, column: 19, scope: !7)
!23 = !DILocation(line: 41, column: 13, scope: !7)
!24 = !DILocation(line: 45, column: 19, scope: !7)
!25 = !DILocation(line: 46, column: 41, scope: !7)
!26 = !DILocation(line: 46, column: 51, scope: !7)
!27 = !DILocation(line: 46, column: 36, scope: !7)
!28 = !DILocation(line: 46, column: 46, scope: !7)
!29 = !DILocation(line: 46, column: 31, scope: !7)
!30 = !DILocation(line: 52, column: 42, scope: !7)
!31 = !DILocation(line: 52, column: 52, scope: !7)
!32 = !DILocation(line: 52, column: 31, scope: !7)
!33 = !DILocation(line: 54, column: 16, scope: !7)
!34 = !DILocation(line: 56, column: 20, scope: !7)
!35 = !DILocation(line: 58, column: 19, scope: !7)
!36 = !DILocation(line: 59, column: 43, scope: !7)
!37 = !DILocation(line: 59, column: 53, scope: !7)
!38 = !DILocation(line: 59, column: 31, scope: !7)
!39 = !DILocation(line: 66, column: 43, scope: !7)
!40 = !DILocation(line: 66, column: 53, scope: !7)
!41 = !DILocation(line: 66, column: 31, scope: !7)
!42 = !DILocation(line: 69, column: 43, scope: !7)
!43 = !DILocation(line: 69, column: 53, scope: !7)
!44 = !DILocation(line: 69, column: 31, scope: !7)
!45 = !DILocation(line: 72, column: 43, scope: !7)
!46 = !DILocation(line: 72, column: 53, scope: !7)
!47 = !DILocation(line: 72, column: 31, scope: !7)
!48 = !DILocation(line: 74, column: 16, scope: !7)
!49 = !DILocation(line: 112, column: 62, scope: !7)
!50 = !DILocation(line: 46, column: 64, scope: !7)
!51 = !DILocation(line: 46, column: 72, scope: !7)
!52 = !DILocation(line: 46, column: 56, scope: !7)
!53 = !DILocation(line: 52, column: 62, scope: !7)
!54 = !DILocation(line: 59, column: 71, scope: !7)
!55 = !DILocation(line: 59, column: 79, scope: !7)
!56 = !DILocation(line: 59, column: 63, scope: !7)
!57 = !DILocation(line: 66, column: 63, scope: !7)
!58 = !DILocation(line: 69, column: 63, scope: !7)
!59 = !DILocation(line: 72, column: 63, scope: !7)
!60 = !DILocation(line: 79, column: 43, scope: !7)
!61 = !DILocation(line: 79, column: 53, scope: !7)
!62 = !DILocation(line: 79, column: 31, scope: !7)
!63 = !DILocation(line: 79, column: 79, scope: !7)
!64 = !DILocation(line: 79, column: 63, scope: !7)
!65 = !DILocation(line: 82, column: 43, scope: !7)
!66 = !DILocation(line: 82, column: 53, scope: !7)
!67 = !DILocation(line: 82, column: 31, scope: !7)
!68 = !DILocation(line: 82, column: 63, scope: !7)
!69 = !DILocation(line: 84, column: 20, scope: !7)
!70 = !DILocation(line: 85, column: 43, scope: !7)
!71 = !DILocation(line: 85, column: 53, scope: !7)
!72 = !DILocation(line: 85, column: 31, scope: !7)
!73 = !DILocation(line: 85, column: 71, scope: !7)
!74 = !DILocation(line: 85, column: 79, scope: !7)
!75 = !DILocation(line: 85, column: 63, scope: !7)
!76 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !79)
!77 = distinct !DILexicalBlockFile(scope: !7, file: !78, discriminator: 0)
!78 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!79 = !DILocation(line: 53, column: 42, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !79)
!83 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !84)
!84 = !DILocation(line: 60, column: 42, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !84)
!88 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !89)
!89 = !DILocation(line: 67, column: 42, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !94)
!94 = !DILocation(line: 70, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !99)
!99 = !DILocation(line: 73, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !99)
!102 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !99)
!103 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !104)
!104 = !DILocation(line: 80, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !104)
!107 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !104)
!108 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !109)
!109 = !DILocation(line: 83, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !109)
!111 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !109)
!112 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !109)
!113 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !114)
!114 = !DILocation(line: 86, column: 42, scope: !7)
!115 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !114)
!116 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !114)
!117 = !DILocation(line: 90, column: 35, scope: !7)
!118 = !DILocation(line: 93, column: 35, scope: !7)
!119 = !DILocation(line: 96, column: 35, scope: !7)
!120 = !DILocation(line: 99, column: 35, scope: !7)
!121 = !DILocation(line: 102, column: 35, scope: !7)
!122 = !DILocation(line: 105, column: 35, scope: !7)
!123 = !DILocation(line: 108, column: 35, scope: !7)
!124 = !DILocation(line: 111, column: 35, scope: !7)
!125 = !DILocation(line: 112, column: 32, scope: !7)
!126 = !DILocation(line: 112, column: 42, scope: !7)
!127 = !DILocation(line: 112, column: 30, scope: !7)
!128 = !DILocation(line: 112, column: 37, scope: !7)
!129 = !DILocation(line: 112, column: 25, scope: !7)
!130 = !DILocation(line: 112, column: 54, scope: !7)
!131 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !114)
!132 = !DILocation(line: 113, column: 34, scope: !7)
!133 = !DILocation(line: 113, column: 30, scope: !7)
!134 = !DILocation(line: 113, column: 25, scope: !7)
!135 = !DILocation(line: 113, column: 46, scope: !7)
!136 = !DILocation(line: 113, column: 4, scope: !7)
