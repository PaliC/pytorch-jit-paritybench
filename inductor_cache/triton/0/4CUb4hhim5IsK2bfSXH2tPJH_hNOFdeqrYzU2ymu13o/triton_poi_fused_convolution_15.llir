; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = or disjoint i32 %14, 16, !dbg !13
  %16 = or disjoint i32 %14, 32, !dbg !13
  %17 = or disjoint i32 %14, 48, !dbg !13
  %18 = icmp slt i32 %13, 152, !dbg !14
  %19 = icmp slt i32 %14, 152, !dbg !14
  %20 = icmp slt i32 %15, 152, !dbg !14
  %21 = icmp slt i32 %16, 152, !dbg !14
  %22 = icmp slt i32 %17, 152, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %24 = shl i32 %23, 6, !dbg !16
  %25 = lshr i32 %8, 5, !dbg !17
  %26 = and i32 %25, 7, !dbg !17
  %27 = shl i32 %8, 2, !dbg !17
  %28 = and i32 %27, 60, !dbg !17
  %29 = or disjoint i32 %24, %26, !dbg !18
  %30 = or disjoint i32 %29, 8, !dbg !18
  %31 = or disjoint i32 %29, 16, !dbg !18
  %32 = or disjoint i32 %29, 24, !dbg !18
  %33 = or disjoint i32 %29, 32, !dbg !18
  %34 = or disjoint i32 %29, 40, !dbg !18
  %35 = or disjoint i32 %29, 48, !dbg !18
  %36 = or disjoint i32 %29, 56, !dbg !18
  %37 = or disjoint i32 %24, %28, !dbg !18
  %38 = icmp slt i32 %29, 64, !dbg !19
  %39 = icmp slt i32 %30, 64, !dbg !19
  %40 = icmp slt i32 %31, 64, !dbg !19
  %41 = icmp slt i32 %32, 64, !dbg !19
  %42 = icmp slt i32 %33, 64, !dbg !19
  %43 = icmp slt i32 %34, 64, !dbg !19
  %44 = icmp slt i32 %35, 64, !dbg !19
  %45 = icmp slt i32 %36, 64, !dbg !19
  %46 = icmp slt i32 %37, 64, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %47 = sdiv i32 %.frozen, 38, !dbg !20
  %48 = mul i32 %47, 38, !dbg !21
  %.decomposed = sub i32 %.frozen, %48, !dbg !21
  %49 = mul i32 %29, 38, !dbg !22
  %50 = mul i32 %30, 38, !dbg !22
  %51 = mul i32 %31, 38, !dbg !22
  %52 = mul i32 %32, 38, !dbg !22
  %53 = mul i32 %33, 38, !dbg !22
  %54 = mul i32 %34, 38, !dbg !22
  %55 = mul i32 %35, 38, !dbg !22
  %56 = mul i32 %36, 38, !dbg !22
  %57 = mul i32 %47, 2432, !dbg !23
  %58 = add i32 %57, %.decomposed, !dbg !24
  %59 = add i32 %58, %49, !dbg !25
  %60 = add i32 %58, %50, !dbg !25
  %61 = add i32 %58, %51, !dbg !25
  %62 = add i32 %58, %52, !dbg !25
  %63 = add i32 %58, %53, !dbg !25
  %64 = add i32 %58, %54, !dbg !25
  %65 = add i32 %58, %55, !dbg !25
  %66 = add i32 %58, %56, !dbg !25
  %67 = sext i32 %59 to i64, !dbg !26
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !26
  %69 = sext i32 %60 to i64, !dbg !26
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !26
  %71 = sext i32 %61 to i64, !dbg !26
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !26
  %73 = sext i32 %62 to i64, !dbg !26
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !26
  %75 = sext i32 %63 to i64, !dbg !26
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !26
  %77 = sext i32 %64 to i64, !dbg !26
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !26
  %79 = sext i32 %65 to i64, !dbg !26
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !26
  %81 = sext i32 %66 to i64, !dbg !26
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !26
  %83 = and i1 %18, %38, !dbg !27
  %84 = and i1 %39, %18, !dbg !27
  %85 = and i1 %40, %18, !dbg !27
  %86 = and i1 %41, %18, !dbg !27
  %87 = and i1 %42, %18, !dbg !27
  %88 = and i1 %43, %18, !dbg !27
  %89 = and i1 %44, %18, !dbg !27
  %90 = and i1 %45, %18, !dbg !27
  %91 = and i1 %19, %46, !dbg !27
  %92 = and i1 %20, %46, !dbg !27
  %93 = and i1 %21, %46, !dbg !27
  %94 = and i1 %22, %46, !dbg !27
  %95 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %68, i1 %83) #2, !dbg !28
  %96 = extractvalue { i32, i32 } %95, 0, !dbg !28
  %97 = extractvalue { i32, i32 } %95, 1, !dbg !28
  %98 = bitcast i32 %96 to float, !dbg !28
  %99 = bitcast i32 %97 to float, !dbg !28
  %100 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %70, i1 %84) #2, !dbg !28
  %101 = extractvalue { i32, i32 } %100, 0, !dbg !28
  %102 = extractvalue { i32, i32 } %100, 1, !dbg !28
  %103 = bitcast i32 %101 to float, !dbg !28
  %104 = bitcast i32 %102 to float, !dbg !28
  %105 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %72, i1 %85) #2, !dbg !28
  %106 = extractvalue { i32, i32 } %105, 0, !dbg !28
  %107 = extractvalue { i32, i32 } %105, 1, !dbg !28
  %108 = bitcast i32 %106 to float, !dbg !28
  %109 = bitcast i32 %107 to float, !dbg !28
  %110 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 %86) #2, !dbg !28
  %111 = extractvalue { i32, i32 } %110, 0, !dbg !28
  %112 = extractvalue { i32, i32 } %110, 1, !dbg !28
  %113 = bitcast i32 %111 to float, !dbg !28
  %114 = bitcast i32 %112 to float, !dbg !28
  %115 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %76, i1 %87) #2, !dbg !28
  %116 = extractvalue { i32, i32 } %115, 0, !dbg !28
  %117 = extractvalue { i32, i32 } %115, 1, !dbg !28
  %118 = bitcast i32 %116 to float, !dbg !28
  %119 = bitcast i32 %117 to float, !dbg !28
  %120 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %78, i1 %88) #2, !dbg !28
  %121 = extractvalue { i32, i32 } %120, 0, !dbg !28
  %122 = extractvalue { i32, i32 } %120, 1, !dbg !28
  %123 = bitcast i32 %121 to float, !dbg !28
  %124 = bitcast i32 %122 to float, !dbg !28
  %125 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %80, i1 %89) #2, !dbg !28
  %126 = extractvalue { i32, i32 } %125, 0, !dbg !28
  %127 = extractvalue { i32, i32 } %125, 1, !dbg !28
  %128 = bitcast i32 %126 to float, !dbg !28
  %129 = bitcast i32 %127 to float, !dbg !28
  %130 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %82, i1 %90) #2, !dbg !28
  %131 = extractvalue { i32, i32 } %130, 0, !dbg !28
  %132 = extractvalue { i32, i32 } %130, 1, !dbg !28
  %133 = bitcast i32 %131 to float, !dbg !28
  %134 = bitcast i32 %132 to float, !dbg !28
  %135 = sext i32 %.decomposed to i64, !dbg !29
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !29
  %137 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %136, i1 %18) #2, !dbg !30
  %138 = extractvalue { i32, i32 } %137, 0, !dbg !30
  %139 = extractvalue { i32, i32 } %137, 1, !dbg !30
  %140 = bitcast i32 %138 to float, !dbg !30
  %141 = bitcast i32 %139 to float, !dbg !30
  %142 = fadd float %98, %140, !dbg !31
  %143 = fadd float %99, %141, !dbg !31
  %144 = fadd float %103, %140, !dbg !31
  %145 = fadd float %104, %141, !dbg !31
  %146 = fadd float %108, %140, !dbg !31
  %147 = fadd float %109, %141, !dbg !31
  %148 = fadd float %113, %140, !dbg !31
  %149 = fadd float %114, %141, !dbg !31
  %150 = fadd float %118, %140, !dbg !31
  %151 = fadd float %119, %141, !dbg !31
  %152 = fadd float %123, %140, !dbg !31
  %153 = fadd float %124, %141, !dbg !31
  %154 = fadd float %128, %140, !dbg !31
  %155 = fadd float %129, %141, !dbg !31
  %156 = fadd float %133, %140, !dbg !31
  %157 = fadd float %134, %141, !dbg !31
  %158 = shl i32 %14, 6, !dbg !32
  %159 = shl i32 %15, 6, !dbg !32
  %160 = shl i32 %16, 6, !dbg !32
  %161 = shl i32 %17, 6, !dbg !32
  %162 = add i32 %37, %158, !dbg !33
  %163 = add i32 %37, %159, !dbg !33
  %164 = add i32 %37, %160, !dbg !33
  %165 = add i32 %37, %161, !dbg !33
  %166 = sext i32 %162 to i64, !dbg !34
  %167 = getelementptr float, ptr addrspace(1) %2, i64 %166, !dbg !34
  %168 = sext i32 %163 to i64, !dbg !34
  %169 = getelementptr float, ptr addrspace(1) %2, i64 %168, !dbg !34
  %170 = sext i32 %164 to i64, !dbg !34
  %171 = getelementptr float, ptr addrspace(1) %2, i64 %170, !dbg !34
  %172 = sext i32 %165 to i64, !dbg !34
  %173 = getelementptr float, ptr addrspace(1) %2, i64 %172, !dbg !34
  %174 = shl i32 %8, 7, !dbg !35
  %175 = and i32 %174, 3968, !dbg !35
  %176 = or disjoint i32 %175, %26, !dbg !35
  %177 = and i32 %27, 1020, !dbg !35
  %178 = lshr exact i32 %175, 4, !dbg !35
  %179 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %178, !dbg !35
  %180 = getelementptr float, ptr addrspace(3) %179, i32 %176, !dbg !35
  %181 = bitcast float %142 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #2, !dbg !35
  %182 = or disjoint i32 %176, 64, !dbg !35
  %183 = lshr i32 %182, 6, !dbg !35
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i32 %183, !dbg !35
  %185 = getelementptr float, ptr addrspace(3) %184, i32 %182, !dbg !35
  %186 = bitcast float %143 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 true) #2, !dbg !35
  %187 = or disjoint i32 %176, 8, !dbg !35
  %188 = getelementptr float, ptr addrspace(3) %179, i32 %187, !dbg !35
  %189 = bitcast float %144 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %189, i1 true) #2, !dbg !35
  %190 = or disjoint i32 %176, 72, !dbg !35
  %191 = lshr i32 %190, 6, !dbg !35
  %192 = getelementptr float, ptr addrspace(3) @global_smem, i32 %191, !dbg !35
  %193 = getelementptr float, ptr addrspace(3) %192, i32 %190, !dbg !35
  %194 = bitcast float %145 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %194, i1 true) #2, !dbg !35
  %195 = or disjoint i32 %176, 16, !dbg !35
  %196 = getelementptr float, ptr addrspace(3) %179, i32 %195, !dbg !35
  %197 = bitcast float %146 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %197, i1 true) #2, !dbg !35
  %198 = or disjoint i32 %176, 80, !dbg !35
  %199 = lshr i32 %198, 6, !dbg !35
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i32 %199, !dbg !35
  %201 = getelementptr float, ptr addrspace(3) %200, i32 %198, !dbg !35
  %202 = bitcast float %147 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %202, i1 true) #2, !dbg !35
  %203 = or disjoint i32 %176, 24, !dbg !35
  %204 = getelementptr float, ptr addrspace(3) %179, i32 %203, !dbg !35
  %205 = bitcast float %148 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %205, i1 true) #2, !dbg !35
  %206 = or disjoint i32 %176, 88, !dbg !35
  %207 = lshr i32 %206, 6, !dbg !35
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i32 %207, !dbg !35
  %209 = getelementptr float, ptr addrspace(3) %208, i32 %206, !dbg !35
  %210 = bitcast float %149 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #2, !dbg !35
  %211 = or disjoint i32 %176, 32, !dbg !35
  %212 = getelementptr float, ptr addrspace(3) %179, i32 %211, !dbg !35
  %213 = bitcast float %150 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %213, i1 true) #2, !dbg !35
  %214 = or disjoint i32 %176, 96, !dbg !35
  %215 = lshr i32 %214, 6, !dbg !35
  %216 = getelementptr float, ptr addrspace(3) @global_smem, i32 %215, !dbg !35
  %217 = getelementptr float, ptr addrspace(3) %216, i32 %214, !dbg !35
  %218 = bitcast float %151 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %218, i1 true) #2, !dbg !35
  %219 = or disjoint i32 %176, 40, !dbg !35
  %220 = getelementptr float, ptr addrspace(3) %179, i32 %219, !dbg !35
  %221 = bitcast float %152 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #2, !dbg !35
  %222 = or disjoint i32 %176, 104, !dbg !35
  %223 = lshr i32 %222, 6, !dbg !35
  %224 = getelementptr float, ptr addrspace(3) @global_smem, i32 %223, !dbg !35
  %225 = getelementptr float, ptr addrspace(3) %224, i32 %222, !dbg !35
  %226 = bitcast float %153 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 true) #2, !dbg !35
  %227 = or disjoint i32 %176, 48, !dbg !35
  %228 = getelementptr float, ptr addrspace(3) %179, i32 %227, !dbg !35
  %229 = bitcast float %154 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #2, !dbg !35
  %230 = or disjoint i32 %176, 112, !dbg !35
  %231 = lshr i32 %230, 6, !dbg !35
  %232 = getelementptr float, ptr addrspace(3) @global_smem, i32 %231, !dbg !35
  %233 = getelementptr float, ptr addrspace(3) %232, i32 %230, !dbg !35
  %234 = bitcast float %155 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #2, !dbg !35
  %235 = or disjoint i32 %176, 56, !dbg !35
  %236 = getelementptr float, ptr addrspace(3) %179, i32 %235, !dbg !35
  %237 = bitcast float %156 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 true) #2, !dbg !35
  %238 = or disjoint i32 %176, 120, !dbg !35
  %239 = lshr i32 %238, 6, !dbg !35
  %240 = getelementptr float, ptr addrspace(3) @global_smem, i32 %239, !dbg !35
  %241 = getelementptr float, ptr addrspace(3) %240, i32 %238, !dbg !35
  %242 = bitcast float %157 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %243 = lshr i32 %177, 6, !dbg !35
  %244 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %243, !dbg !35
  %245 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %177, !dbg !35
  %246 = load i32, ptr addrspace(3) %245, align 4, !dbg !35
  %247 = or disjoint i32 %177, 1, !dbg !35
  %248 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %247, !dbg !35
  %249 = load i32, ptr addrspace(3) %248, align 4, !dbg !35
  %250 = or disjoint i32 %177, 2, !dbg !35
  %251 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %250, !dbg !35
  %252 = load i32, ptr addrspace(3) %251, align 4, !dbg !35
  %253 = or disjoint i32 %177, 3, !dbg !35
  %254 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %253, !dbg !35
  %255 = load i32, ptr addrspace(3) %254, align 4, !dbg !35
  %256 = or disjoint i32 %177, 1024, !dbg !35
  %257 = lshr i32 %256, 6, !dbg !35
  %258 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %257, !dbg !35
  %259 = getelementptr inbounds float, ptr addrspace(3) %258, i32 %256, !dbg !35
  %260 = load i32, ptr addrspace(3) %259, align 4, !dbg !35
  %261 = or disjoint i32 %177, 1025, !dbg !35
  %262 = lshr i32 %261, 6, !dbg !35
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %262, !dbg !35
  %264 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %261, !dbg !35
  %265 = load i32, ptr addrspace(3) %264, align 4, !dbg !35
  %266 = or disjoint i32 %177, 1026, !dbg !35
  %267 = lshr i32 %266, 6, !dbg !35
  %268 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %267, !dbg !35
  %269 = getelementptr inbounds float, ptr addrspace(3) %268, i32 %266, !dbg !35
  %270 = load i32, ptr addrspace(3) %269, align 4, !dbg !35
  %271 = or disjoint i32 %177, 1027, !dbg !35
  %272 = lshr i32 %271, 6, !dbg !35
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %272, !dbg !35
  %274 = getelementptr inbounds float, ptr addrspace(3) %273, i32 %271, !dbg !35
  %275 = load i32, ptr addrspace(3) %274, align 4, !dbg !35
  %276 = or disjoint i32 %177, 2048, !dbg !35
  %277 = lshr i32 %276, 6, !dbg !35
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %277, !dbg !35
  %279 = getelementptr inbounds float, ptr addrspace(3) %278, i32 %276, !dbg !35
  %280 = load i32, ptr addrspace(3) %279, align 4, !dbg !35
  %281 = or disjoint i32 %177, 2049, !dbg !35
  %282 = lshr i32 %281, 6, !dbg !35
  %283 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %282, !dbg !35
  %284 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %281, !dbg !35
  %285 = load i32, ptr addrspace(3) %284, align 4, !dbg !35
  %286 = or disjoint i32 %177, 2050, !dbg !35
  %287 = lshr i32 %286, 6, !dbg !35
  %288 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %287, !dbg !35
  %289 = getelementptr inbounds float, ptr addrspace(3) %288, i32 %286, !dbg !35
  %290 = load i32, ptr addrspace(3) %289, align 4, !dbg !35
  %291 = or disjoint i32 %177, 2051, !dbg !35
  %292 = lshr i32 %291, 6, !dbg !35
  %293 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %292, !dbg !35
  %294 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %291, !dbg !35
  %295 = load i32, ptr addrspace(3) %294, align 4, !dbg !35
  %296 = or disjoint i32 %177, 3072, !dbg !35
  %297 = lshr i32 %296, 6, !dbg !35
  %298 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %297, !dbg !35
  %299 = getelementptr inbounds float, ptr addrspace(3) %298, i32 %296, !dbg !35
  %300 = load i32, ptr addrspace(3) %299, align 4, !dbg !35
  %301 = or disjoint i32 %177, 3073, !dbg !35
  %302 = lshr i32 %301, 6, !dbg !35
  %303 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %302, !dbg !35
  %304 = getelementptr inbounds float, ptr addrspace(3) %303, i32 %301, !dbg !35
  %305 = load i32, ptr addrspace(3) %304, align 4, !dbg !35
  %306 = or disjoint i32 %177, 3074, !dbg !35
  %307 = lshr i32 %306, 6, !dbg !35
  %308 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %307, !dbg !35
  %309 = getelementptr inbounds float, ptr addrspace(3) %308, i32 %306, !dbg !35
  %310 = load i32, ptr addrspace(3) %309, align 4, !dbg !35
  %311 = or disjoint i32 %177, 3075, !dbg !35
  %312 = lshr i32 %311, 6, !dbg !35
  %313 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %312, !dbg !35
  %314 = getelementptr inbounds float, ptr addrspace(3) %313, i32 %311, !dbg !35
  %315 = load i32, ptr addrspace(3) %314, align 4, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %246, i32 %249, i32 %252, i32 %255, ptr addrspace(1) %167, i1 %91) #2, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %260, i32 %265, i32 %270, i32 %275, ptr addrspace(1) %169, i1 %92) #2, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %280, i32 %285, i32 %290, i32 %295, ptr addrspace(1) %171, i1 %93) #2, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %300, i32 %305, i32 %310, i32 %315, ptr addrspace(1) %173, i1 %94) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccluitnl5eonqbfpdnugbouju34owaucfc5gay45sqpkr2uwjry2.py", directory: "inductor_cache/cl")
!4 = !{ptr @triton_poi_fused_convolution_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_15, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_15", linkageName: "triton_poi_fused_convolution_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 48, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 61, scope: !7)
!28 = !DILocation(line: 32, column: 53, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 35, column: 33, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 25, scope: !7)
!35 = !DILocation(line: 35, column: 44, scope: !7)
!36 = !DILocation(line: 35, column: 4, scope: !7)
