; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 7, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !13
  %14 = icmp slt i32 %13, 256, !dbg !14
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %16 = shl i32 %15, 2, !dbg !16
  %17 = icmp slt i32 %16, 4, !dbg !17
  %18 = srem i32 %13, 64, !dbg !18
  %19 = add i32 %13, %15, !dbg !19
  %20 = shl i32 %19, 2, !dbg !19
  %21 = sext i32 %20 to i64, !dbg !20
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !20
  %23 = and i1 %17, %14, !dbg !21
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 %23) #4, !dbg !22
  %25 = sext i32 %18 to i64, !dbg !23
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !23
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %14) #4, !dbg !24
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !25
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %14) #4, !dbg !26
  %30 = bitcast i32 %29 to float, !dbg !26
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !27
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %14) #4, !dbg !28
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !29
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %14) #4, !dbg !30
  %35 = fadd float %30, 0x3EE4F8B580000000, !dbg !31
  %36 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i = icmp eq i32 %36, 0, !dbg !32
  %37 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i = icmp eq i32 %37, 0, !dbg !32
  br i1 %.not.i, label %43, label %38, !dbg !32

38:                                               ; preds = %8
  br i1 %.not1.i, label %41, label %39, !dbg !32

39:                                               ; preds = %38
  %40 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %35) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

41:                                               ; preds = %38
  %42 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %35) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

43:                                               ; preds = %8
  br i1 %.not1.i, label %46, label %44, !dbg !32

44:                                               ; preds = %43
  %45 = tail call float @llvm.nvvm.sqrt.rn.f(float %35) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

46:                                               ; preds = %43
  %47 = tail call float @llvm.nvvm.sqrt.approx.f(float %35) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %39, %41, %44, %46
  %.0.i = phi float [ %40, %39 ], [ %42, %41 ], [ %45, %44 ], [ %47, %46 ], !dbg !32
  %48 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !22
  %51 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !22
  %.lobit1 = lshr i32 %11, 5, !dbg !33
  %52 = and i32 %.lobit1, 3, !dbg !33
  %53 = or disjoint i32 %16, %52, !dbg !34
  %54 = icmp slt i32 %53, 4, !dbg !17
  %55 = shl i32 %11, 2, !dbg !12
  %56 = and i32 %55, 124, !dbg !12
  %57 = or disjoint i32 %10, %56, !dbg !13
  %58 = icmp slt i32 %57, 256, !dbg !14
  %59 = and i1 %58, %54, !dbg !21
  %.frozen = freeze i32 %57, !dbg !35
  %60 = sdiv i32 %.frozen, 64, !dbg !35
  %61 = mul i32 %60, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %61, !dbg !18
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %63 = insertelement <4 x i32> poison, i32 %48, i64 0, !dbg !22
  %64 = insertelement <4 x i32> %63, i32 %49, i64 1, !dbg !22
  %65 = insertelement <4 x i32> %64, i32 %50, i64 2, !dbg !22
  %66 = insertelement <4 x i32> %65, i32 %51, i64 3, !dbg !22
  %67 = bitcast <4 x i32> %66 to <4 x float>, !dbg !22
  %68 = insertelement <4 x i32> poison, i32 %27, i64 0, !dbg !37
  %69 = bitcast <4 x i32> %68 to <4 x float>, !dbg !37
  %70 = shufflevector <4 x float> %69, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !37
  %71 = fsub <4 x float> %67, %70, !dbg !37
  %72 = insertelement <4 x float> poison, float %62, i64 0, !dbg !38
  %73 = shufflevector <4 x float> %72, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %74 = fmul <4 x float> %71, %73, !dbg !38
  %75 = insertelement <4 x i32> poison, i32 %32, i64 0, !dbg !39
  %76 = bitcast <4 x i32> %75 to <4 x float>, !dbg !39
  %77 = shufflevector <4 x float> %76, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !39
  %78 = fmul <4 x float> %74, %77, !dbg !39
  %79 = insertelement <4 x i32> poison, i32 %34, i64 0, !dbg !40
  %80 = bitcast <4 x i32> %79 to <4 x float>, !dbg !40
  %81 = shufflevector <4 x float> %80, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %82 = fadd <4 x float> %78, %81, !dbg !40
  %83 = fcmp olt <4 x float> %82, zeroinitializer, !dbg !41
  %84 = extractelement <4 x i1> %83, i64 3, !dbg !45
  %85 = extractelement <4 x float> %82, i64 3, !dbg !45
  %86 = select i1 %84, float 0.000000e+00, float %85, !dbg !45
  %87 = extractelement <4 x i1> %83, i64 2, !dbg !45
  %88 = extractelement <4 x float> %82, i64 2, !dbg !45
  %89 = select i1 %87, float 0.000000e+00, float %88, !dbg !45
  %90 = extractelement <4 x i1> %83, i64 1, !dbg !45
  %91 = extractelement <4 x float> %82, i64 1, !dbg !45
  %92 = select i1 %90, float 0.000000e+00, float %91, !dbg !45
  %93 = extractelement <4 x i1> %83, i64 0, !dbg !45
  %94 = extractelement <4 x float> %82, i64 0, !dbg !45
  %95 = select i1 %93, float 0.000000e+00, float %94, !dbg !45
  %96 = shl i32 %53, 6, !dbg !46
  %97 = add i32 %96, %.decomposed, !dbg !47
  %98 = shl i32 %60, 8, !dbg !48
  %99 = add i32 %97, %98, !dbg !49
  %100 = sext i32 %99 to i64, !dbg !50
  %101 = getelementptr float, ptr addrspace(1) %5, i64 %100, !dbg !50
  %102 = and i32 %55, 508, !dbg !51
  %103 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !51
  %104 = bitcast float %86 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #4, !dbg !51
  %105 = getelementptr inbounds i8, ptr addrspace(3) %103, i32 528, !dbg !51
  %106 = bitcast float %89 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #4, !dbg !51
  %107 = getelementptr inbounds i8, ptr addrspace(3) %103, i32 1056, !dbg !51
  %108 = bitcast float %92 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #4, !dbg !51
  %109 = getelementptr inbounds i8, ptr addrspace(3) %103, i32 1584, !dbg !51
  %110 = bitcast float %95 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %111 = lshr i32 %55, 5, !dbg !51
  %112 = and i32 %111, 12, !dbg !51
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !51
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %102, !dbg !51
  %.extract = load i32, ptr addrspace(3) %114, align 16, !dbg !51
  %115 = getelementptr inbounds i8, ptr addrspace(3) %114, i32 4, !dbg !51
  %.extract5 = load i32, ptr addrspace(3) %115, align 4, !dbg !51
  %116 = getelementptr inbounds i8, ptr addrspace(3) %114, i32 8, !dbg !51
  %.extract6 = load i32, ptr addrspace(3) %116, align 8, !dbg !51
  %117 = getelementptr inbounds i8, ptr addrspace(3) %114, i32 12, !dbg !51
  %.extract7 = load i32, ptr addrspace(3) %117, align 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract5, i32 %.extract6, i32 %.extract7, ptr addrspace(1) %101, i1 %59) #4, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbqdwtkl7zhy2vnvmcnh77lqcu4qxzvoxmfv54n4qmjcczobkhd5.py", directory: "inductor_cache/bq")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 50, scope: !7)
!22 = !DILocation(line: 32, column: 42, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 26, scope: !7)
!33 = !DILocation(line: 26, column: 44, scope: !7)
!34 = !DILocation(line: 26, column: 23, scope: !7)
!35 = !DILocation(line: 31, column: 19, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 49, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 50, column: 33, scope: !7)
!47 = !DILocation(line: 50, column: 30, scope: !7)
!48 = !DILocation(line: 50, column: 42, scope: !7)
!49 = !DILocation(line: 50, column: 38, scope: !7)
!50 = !DILocation(line: 50, column: 25, scope: !7)
!51 = !DILocation(line: 50, column: 54, scope: !7)
!52 = !DILocation(line: 50, column: 4, scope: !7)
