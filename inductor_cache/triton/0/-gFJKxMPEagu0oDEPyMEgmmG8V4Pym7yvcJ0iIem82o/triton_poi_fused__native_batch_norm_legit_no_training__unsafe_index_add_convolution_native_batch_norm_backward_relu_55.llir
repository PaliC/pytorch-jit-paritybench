; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_native_batch_norm_backward_relu_55(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, i32 %17) local_unnamed_addr !dbg !7 {
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %20 = shl i32 %19, 7, !dbg !11
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %22 = and i32 %21, 127, !dbg !12
  %23 = or disjoint i32 %20, %22, !dbg !13
  %.frozen = freeze i32 %23, !dbg !14
  %24 = sdiv i32 %.frozen, 4, !dbg !14
  %25 = mul i32 %24, 4, !dbg !15
  %.decomposed = sub i32 %.frozen, %25, !dbg !15
  %26 = sdiv i32 %23, 64, !dbg !16
  %27 = srem i32 %26, 16, !dbg !17
  %28 = srem i32 %24, 16, !dbg !18
  %29 = sdiv i32 %23, 1024, !dbg !19
  %30 = sext i32 %23 to i64, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !20
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !21
  %33 = sext i32 %.decomposed to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !28
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !29
  %42 = sext i32 %27 to i64, !dbg !30
  %43 = getelementptr i64, ptr addrspace(1) %5, i64 %42, !dbg !30
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !31
  %45 = sext i32 %28 to i64, !dbg !32
  %46 = getelementptr i64, ptr addrspace(1) %5, i64 %45, !dbg !32
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !33
  %48 = getelementptr float, ptr addrspace(1) %7, i64 %33, !dbg !34
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !35
  %50 = getelementptr float, ptr addrspace(1) %9, i64 %33, !dbg !36
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !37
  %52 = getelementptr float, ptr addrspace(1) %11, i64 %33, !dbg !38
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !39
  %54 = getelementptr float, ptr addrspace(1) %12, i64 %33, !dbg !40
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !41
  %56 = bitcast i32 %55 to float, !dbg !41
  %57 = getelementptr float, ptr addrspace(1) %13, i64 %33, !dbg !42
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !43
  %59 = getelementptr float, ptr addrspace(1) %14, i64 %33, !dbg !44
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !45
  %61 = lshr i64 %44, 60, !dbg !46
  %62 = and i64 %61, 8, !dbg !46
  %63 = add i64 %62, %44, !dbg !46
  %64 = lshr i64 %47, 60, !dbg !47
  %65 = and i64 %64, 8, !dbg !47
  %66 = add i64 %65, %47, !dbg !47
  %67 = shl i64 %66, 2, !dbg !48
  %68 = shl i64 %63, 5, !dbg !49
  %69 = shl nsw i32 %29, 8, !dbg !50
  %narrow = add nsw i32 %69, %.decomposed, !dbg !51
  %70 = sext i32 %narrow to i64, !dbg !51
  %71 = add i64 %68, %70, !dbg !52
  %72 = add i64 %71, %67, !dbg !53
  %73 = getelementptr float, ptr addrspace(1) %6, i64 %72, !dbg !54
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !55
  %75 = getelementptr float, ptr addrspace(1) %8, i64 %72, !dbg !56
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !57
  %77 = getelementptr float, ptr addrspace(1) %10, i64 %72, !dbg !58
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !59
  %79 = fadd float %56, 0x3EE4F8B580000000, !dbg !60
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i = icmp eq i32 %80, 0, !dbg !61
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i = icmp eq i32 %81, 0, !dbg !61
  br i1 %.not.i, label %87, label %82, !dbg !61

82:                                               ; preds = %18
  br i1 %.not1.i, label %85, label %83, !dbg !61

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

87:                                               ; preds = %18
  br i1 %.not1.i, label %90, label %88, !dbg !61

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

__nv_sqrtf.exit:                                  ; preds = %83, %85, %88, %90
  %.0.i = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !61
  %92 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !21
  %93 = insertelement <2 x i32> %92, i32 %49, i64 1, !dbg !21
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !21
  %95 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !23
  %96 = insertelement <2 x i32> %95, i32 %74, i64 1, !dbg !23
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !23
  %98 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !25
  %99 = insertelement <2 x i32> %98, i32 %51, i64 1, !dbg !25
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !25
  %101 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !27
  %102 = insertelement <2 x i32> %101, i32 %76, i64 1, !dbg !27
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !27
  %104 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !29
  %105 = insertelement <2 x i32> %104, i32 %78, i64 1, !dbg !29
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !29
  %107 = fadd <2 x float> %94, %97, !dbg !62
  %108 = fadd <2 x float> %100, %103, !dbg !63
  %109 = fadd <2 x float> %108, %106, !dbg !64
  %110 = fadd <2 x float> %107, %109, !dbg !65
  %shift = shufflevector <2 x float> %110, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !66
  %111 = fadd <2 x float> %110, %shift, !dbg !66
  %112 = extractelement <2 x float> %111, i64 0, !dbg !66
  %113 = bitcast i32 %53 to float, !dbg !39
  %114 = fsub float %112, %113, !dbg !67
  %115 = bitcast i32 %60 to float, !dbg !45
  %116 = bitcast i32 %58 to float, !dbg !43
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !68
  %118 = fmul float %114, %117, !dbg !69
  %119 = fmul float %118, %116, !dbg !70
  %120 = fadd float %119, %115, !dbg !71
  %121 = fcmp olt float %120, 0.000000e+00, !dbg !72
  %122 = select i1 %121, float 0.000000e+00, float %120, !dbg !76
  %123 = bitcast float %112 to i32, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %31, i1 true) #3, !dbg !77
  %124 = getelementptr float, ptr addrspace(1) %15, i64 %30, !dbg !78
  %125 = bitcast float %122 to i32, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %125, ptr addrspace(1) %124, i1 true) #3, !dbg !79
  %126 = getelementptr float, ptr addrspace(1) %16, i64 %30, !dbg !80
  %127 = bitcast float %114 to i32, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %127, ptr addrspace(1) %126, i1 true) #3, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czjycfiwurolczhfkin5tgsri6wihmcdslwjqkrzwmdv53d4yne6.py", directory: "inductor_cache/zj")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_native_batch_norm_backward_relu_55, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_native_batch_norm_backward_relu_55, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_native_batch_norm_backward_relu_55", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_native_batch_norm_backward_relu_55", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 27, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 26, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 34, scope: !7)
!21 = !DILocation(line: 29, column: 39, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 38, column: 32, scope: !7)
!39 = !DILocation(line: 38, column: 37, scope: !7)
!40 = !DILocation(line: 39, column: 32, scope: !7)
!41 = !DILocation(line: 39, column: 37, scope: !7)
!42 = !DILocation(line: 40, column: 32, scope: !7)
!43 = !DILocation(line: 40, column: 37, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 41, column: 37, scope: !7)
!46 = !DILocation(line: 49, column: 35, scope: !7)
!47 = !DILocation(line: 52, column: 35, scope: !7)
!48 = !DILocation(line: 53, column: 38, scope: !7)
!49 = !DILocation(line: 53, column: 49, scope: !7)
!50 = !DILocation(line: 53, column: 61, scope: !7)
!51 = !DILocation(line: 53, column: 36, scope: !7)
!52 = !DILocation(line: 53, column: 46, scope: !7)
!53 = !DILocation(line: 53, column: 57, scope: !7)
!54 = !DILocation(line: 53, column: 31, scope: !7)
!55 = !DILocation(line: 53, column: 66, scope: !7)
!56 = !DILocation(line: 55, column: 31, scope: !7)
!57 = !DILocation(line: 55, column: 66, scope: !7)
!58 = !DILocation(line: 57, column: 31, scope: !7)
!59 = !DILocation(line: 57, column: 66, scope: !7)
!60 = !DILocation(line: 63, column: 20, scope: !7)
!61 = !DILocation(line: 64, column: 27, scope: !7)
!62 = !DILocation(line: 42, column: 18, scope: !7)
!63 = !DILocation(line: 43, column: 18, scope: !7)
!64 = !DILocation(line: 44, column: 18, scope: !7)
!65 = !DILocation(line: 45, column: 18, scope: !7)
!66 = !DILocation(line: 60, column: 19, scope: !7)
!67 = !DILocation(line: 61, column: 20, scope: !7)
!68 = !DILocation(line: 66, column: 20, scope: !7)
!69 = !DILocation(line: 69, column: 20, scope: !7)
!70 = !DILocation(line: 70, column: 20, scope: !7)
!71 = !DILocation(line: 71, column: 20, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !75)
!73 = distinct !DILexicalBlockFile(scope: !7, file: !74, discriminator: 0)
!74 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!75 = !DILocation(line: 73, column: 42, scope: !7)
!76 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !75)
!77 = !DILocation(line: 74, column: 40, scope: !7)
!78 = !DILocation(line: 75, column: 25, scope: !7)
!79 = !DILocation(line: 75, column: 37, scope: !7)
!80 = !DILocation(line: 76, column: 25, scope: !7)
!81 = !DILocation(line: 76, column: 37, scope: !7)
!82 = !DILocation(line: 76, column: 4, scope: !7)
