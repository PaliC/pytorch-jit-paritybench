; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %18 = shl i32 %17, 8, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = shl i32 %19, 1, !dbg !12
  %21 = and i32 %20, 254, !dbg !12
  %22 = or disjoint i32 %18, %21, !dbg !13
  %23 = sdiv i32 %22, 256, !dbg !14
  %24 = srem i32 %23, 24, !dbg !15
  %25 = sext i32 %22 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !16
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !17
  %28 = sext i32 %24 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !18
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !21
  %34 = bitcast i32 %33 to float, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !21
  %36 = bitcast i32 %35 to float, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !26
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !29
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !29
  %48 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !30
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !31
  %50 = bitcast i32 %49 to float, !dbg !31
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !31
  %52 = bitcast i32 %51 to float, !dbg !31
  %53 = getelementptr float, ptr addrspace(1) %8, i64 %28, !dbg !32
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !33
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !33
  %56 = getelementptr float, ptr addrspace(1) %9, i64 %28, !dbg !34
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !35
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !35
  %59 = getelementptr float, ptr addrspace(1) %10, i64 %28, !dbg !36
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !37
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !37
  %62 = getelementptr float, ptr addrspace(1) %11, i64 %28, !dbg !38
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !39
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !39
  %65 = fadd float %34, 0x3EE4F8B580000000, !dbg !40
  %66 = fadd float %36, 0x3EE4F8B580000000, !dbg !40
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %67, 0, !dbg !41
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i = icmp eq i32 %68, 0, !dbg !41
  br i1 %.not.i, label %74, label %69, !dbg !41

69:                                               ; preds = %16
  br i1 %.not1.i, label %72, label %70, !dbg !41

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

74:                                               ; preds = %16
  br i1 %.not1.i, label %77, label %75, !dbg !41

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %70, %72, %75, %77
  %.0.i = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !41
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %79, 0, !dbg !41
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i4 = icmp eq i32 %80, 0, !dbg !41
  br i1 %.not.i1, label %86, label %81, !dbg !41

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %84, label %82, !dbg !41

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %89, label %87, !dbg !41

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %82, %84, %87, %89
  %.0.i3 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !41
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !42
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !42
  %93 = fadd float %50, 0x3EE4F8B580000000, !dbg !43
  %94 = fadd float %52, 0x3EE4F8B580000000, !dbg !43
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i6 = icmp eq i32 %95, 0, !dbg !44
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i9 = icmp eq i32 %96, 0, !dbg !44
  br i1 %.not.i6, label %102, label %97, !dbg !44

97:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %100, label %98, !dbg !44

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

102:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %105, label %103, !dbg !44

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

__nv_sqrtf.exit10:                                ; preds = %98, %100, %103, %105
  %.0.i8 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !44
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i11 = icmp eq i32 %107, 0, !dbg !44
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i14 = icmp eq i32 %108, 0, !dbg !44
  br i1 %.not.i11, label %114, label %109, !dbg !44

109:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %112, label %110, !dbg !44

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

114:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %117, label %115, !dbg !44

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

__nv_sqrtf.exit15:                                ; preds = %110, %112, %115, %117
  %.0.i13 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !44
  %119 = extractvalue { i32, i32 } %44, 1, !dbg !27
  %120 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !19
  %121 = insertelement <2 x i32> %120, i32 %47, i64 1, !dbg !19
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !19
  %123 = extractvalue { i32, i32 } %44, 0, !dbg !27
  %124 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !19
  %125 = insertelement <2 x i32> %124, i32 %46, i64 1, !dbg !19
  %126 = bitcast <2 x i32> %125 to <2 x float>, !dbg !19
  %127 = extractvalue { i32, i32 } %27, 1, !dbg !17
  %128 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !23
  %129 = insertelement <2 x i32> %128, i32 %55, i64 1, !dbg !23
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !23
  %131 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !25
  %132 = insertelement <2 x i32> %131, i32 %58, i64 1, !dbg !25
  %133 = bitcast <2 x i32> %132 to <2 x float>, !dbg !25
  %134 = extractvalue { i32, i32 } %27, 0, !dbg !17
  %135 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !23
  %136 = insertelement <2 x i32> %135, i32 %54, i64 1, !dbg !23
  %137 = bitcast <2 x i32> %136 to <2 x float>, !dbg !23
  %138 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !25
  %139 = insertelement <2 x i32> %138, i32 %57, i64 1, !dbg !25
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !25
  %141 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !39
  %142 = insertelement <2 x i32> %141, i32 %61, i64 1, !dbg !39
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !39
  %144 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !39
  %145 = insertelement <2 x i32> %144, i32 %60, i64 1, !dbg !39
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !39
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !45
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !45
  %149 = insertelement <2 x i32> poison, i32 %134, i64 0, !dbg !17
  %150 = insertelement <2 x i32> %149, i32 %123, i64 1, !dbg !17
  %151 = bitcast <2 x i32> %150 to <2 x float>, !dbg !17
  %152 = fsub <2 x float> %151, %126, !dbg !46
  %153 = insertelement <2 x float> poison, float %91, i64 0, !dbg !47
  %154 = insertelement <2 x float> %153, float %147, i64 1, !dbg !47
  %155 = fmul <2 x float> %152, %154, !dbg !47
  %156 = fmul <2 x float> %155, %137, !dbg !48
  %157 = fadd <2 x float> %156, %140, !dbg !49
  %158 = fcmp ogt <2 x float> %157, zeroinitializer, !dbg !50
  %159 = fmul <2 x float> %157, %146, !dbg !51
  %160 = select <2 x i1> %158, <2 x float> %157, <2 x float> %159, !dbg !52
  %161 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !17
  %162 = insertelement <2 x i32> %161, i32 %119, i64 1, !dbg !17
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !17
  %164 = fsub <2 x float> %163, %122, !dbg !46
  %165 = insertelement <2 x float> poison, float %92, i64 0, !dbg !47
  %166 = insertelement <2 x float> %165, float %148, i64 1, !dbg !47
  %167 = fmul <2 x float> %164, %166, !dbg !47
  %168 = fmul <2 x float> %167, %130, !dbg !48
  %169 = fadd <2 x float> %168, %133, !dbg !49
  %170 = fcmp ogt <2 x float> %169, zeroinitializer, !dbg !50
  %171 = fmul <2 x float> %169, %143, !dbg !51
  %172 = select <2 x i1> %170, <2 x float> %169, <2 x float> %171, !dbg !52
  %shift = shufflevector <2 x float> %160, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %173 = fadd <2 x float> %160, %shift, !dbg !53
  %shift16 = shufflevector <2 x float> %172, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %174 = fadd <2 x float> %172, %shift16, !dbg !53
  %175 = getelementptr float, ptr addrspace(1) %12, i64 %25, !dbg !54
  %bc = bitcast <2 x float> %157 to <2 x i32>, !dbg !55
  %176 = extractelement <2 x i32> %bc, i64 0, !dbg !55
  %bc17 = bitcast <2 x float> %169 to <2 x i32>, !dbg !55
  %177 = extractelement <2 x i32> %bc17, i64 0, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %176, i32 %177, ptr addrspace(1) %175, i1 true) #3, !dbg !55
  %178 = getelementptr float, ptr addrspace(1) %13, i64 %25, !dbg !56
  %bc18 = bitcast <2 x float> %157 to <2 x i32>, !dbg !57
  %179 = extractelement <2 x i32> %bc18, i64 1, !dbg !57
  %bc19 = bitcast <2 x float> %169 to <2 x i32>, !dbg !57
  %180 = extractelement <2 x i32> %bc19, i64 1, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %179, i32 %180, ptr addrspace(1) %178, i1 true) #3, !dbg !57
  %181 = getelementptr float, ptr addrspace(1) %14, i64 %25, !dbg !58
  %bc20 = bitcast <2 x float> %173 to <2 x i32>, !dbg !59
  %182 = extractelement <2 x i32> %bc20, i64 0, !dbg !59
  %bc21 = bitcast <2 x float> %174 to <2 x i32>, !dbg !59
  %183 = extractelement <2 x i32> %bc21, i64 0, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %182, i32 %183, ptr addrspace(1) %181, i1 true) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coafhvhdksb7v33g67owa3utbtade5mho6sepmsp624s6gotcbvm.py", directory: "inductor_cache/oa")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 32, scope: !7)
!37 = !DILocation(line: 36, column: 37, scope: !7)
!38 = !DILocation(line: 37, column: 32, scope: !7)
!39 = !DILocation(line: 37, column: 37, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 26, scope: !7)
!42 = !DILocation(line: 43, column: 18, scope: !7)
!43 = !DILocation(line: 50, column: 20, scope: !7)
!44 = !DILocation(line: 51, column: 27, scope: !7)
!45 = !DILocation(line: 52, column: 19, scope: !7)
!46 = !DILocation(line: 38, column: 18, scope: !7)
!47 = !DILocation(line: 46, column: 19, scope: !7)
!48 = !DILocation(line: 47, column: 20, scope: !7)
!49 = !DILocation(line: 48, column: 20, scope: !7)
!50 = !DILocation(line: 61, column: 20, scope: !7)
!51 = !DILocation(line: 62, column: 20, scope: !7)
!52 = !DILocation(line: 63, column: 35, scope: !7)
!53 = !DILocation(line: 64, column: 20, scope: !7)
!54 = !DILocation(line: 65, column: 25, scope: !7)
!55 = !DILocation(line: 65, column: 37, scope: !7)
!56 = !DILocation(line: 66, column: 25, scope: !7)
!57 = !DILocation(line: 66, column: 37, scope: !7)
!58 = !DILocation(line: 67, column: 25, scope: !7)
!59 = !DILocation(line: 67, column: 37, scope: !7)
!60 = !DILocation(line: 67, column: 4, scope: !7)
