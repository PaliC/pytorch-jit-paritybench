; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %7, 1, !dbg !13
  %13 = icmp slt i32 %11, 1024, !dbg !14
  %14 = ashr exact i32 %11, 1, !dbg !15
  %.frozen = freeze i32 %11, !dbg !16
  %15 = sdiv i32 %.frozen, 256, !dbg !16
  %16 = mul i32 %15, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %16, !dbg !17
  %17 = shl i32 %11, 2, !dbg !18
  %18 = add i32 %17, -5, !dbg !19
  %19 = sext i32 %18 to i64, !dbg !20
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !20
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 false, i32 -8388608, i1 false) #1, !dbg !21
  %22 = add i32 %17, -4, !dbg !22
  %23 = sext i32 %22 to i64, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !23
  %25 = add i32 %17, -3, !dbg !24
  %26 = sext i32 %25 to i64, !dbg !25
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !25
  %28 = add i32 %17, -1, !dbg !26
  %29 = sext i32 %28 to i64, !dbg !27
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !27
  %31 = sext i32 %17 to i64, !dbg !28
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !28
  %33 = or disjoint i32 %17, 1, !dbg !29
  %34 = sext i32 %33 to i64, !dbg !30
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !30
  %36 = or disjoint i32 %17, 3, !dbg !31
  %37 = sext i32 %36 to i64, !dbg !32
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !32
  %39 = or disjoint i32 %17, 4, !dbg !33
  %40 = sext i32 %39 to i64, !dbg !34
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !34
  %42 = or disjoint i32 %17, 5, !dbg !35
  %43 = sext i32 %42 to i64, !dbg !36
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !36
  %45 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !21
  %46 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !37
  %47 = insertelement <2 x i32> %46, i32 %14, i64 1, !dbg !37
  %48 = srem <2 x i32> %47, splat (i32 2), !dbg !37
  %49 = extractelement <2 x i32> %48, i64 0, !dbg !37
  %50 = extractelement <2 x i32> %48, i64 1, !dbg !38
  %51 = icmp sgt i32 %50, 0, !dbg !39
  %52 = shl nsw <2 x i32> %48, splat (i32 1), !dbg !40
  %53 = shl nsw i32 %49, 1, !dbg !40
  %54 = icmp sgt i32 %49, 0, !dbg !41
  %55 = and i1 %54, %51, !dbg !42
  %56 = add i32 %53, %17, !dbg !43
  %57 = add i32 %56, -5, !dbg !19
  %58 = sext i32 %57 to i64, !dbg !20
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !20
  %60 = and i1 %13, %55, !dbg !44
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %60, i32 -8388608, i1 %60) #1, !dbg !21
  %62 = icmp sgt i32 %49, -1, !dbg !45
  %63 = and i1 %62, %51, !dbg !46
  %64 = add i32 %56, -4, !dbg !22
  %65 = sext i32 %64 to i64, !dbg !23
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !23
  %67 = and i1 %13, %51, !dbg !47
  %68 = and i1 %13, %63, !dbg !47
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %67, i32 -8388608, i1 %67) #1, !dbg !48
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %68, i32 -8388608, i1 %68) #1, !dbg !48
  %71 = add i32 %56, -3, !dbg !24
  %72 = sext i32 %71 to i64, !dbg !25
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %67, i32 -8388608, i1 %67) #1, !dbg !49
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %68, i32 -8388608, i1 %68) #1, !dbg !49
  %76 = icmp sgt i32 %50, -1, !dbg !50
  %77 = and i1 %54, %76, !dbg !51
  %78 = sext i32 %56 to i64, !dbg !27
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !27
  %80 = getelementptr i8, ptr addrspace(1) %79, i64 -4, !dbg !27
  %81 = and i1 %13, %77, !dbg !52
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 false, i32 -8388608, i1 false) #1, !dbg !53
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %81, i32 -8388608, i1 %81) #1, !dbg !53
  %84 = or i32 %50, %49, !dbg !54
  %85 = icmp sgt i32 %84, -1, !dbg !54
  %86 = and i1 %13, %76, !dbg !55
  %87 = and i1 %13, %85, !dbg !55
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %86, i32 -8388608, i1 %86) #1, !dbg !56
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %87, i32 -8388608, i1 %87) #1, !dbg !56
  %90 = or disjoint i32 %56, 1, !dbg !29
  %91 = sext i32 %90 to i64, !dbg !30
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !30
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %86, i32 -8388608, i1 %86) #1, !dbg !57
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %87, i32 -8388608, i1 %87) #1, !dbg !57
  %95 = add i32 %56, 3, !dbg !31
  %96 = sext i32 %95 to i64, !dbg !32
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !32
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 false, i32 -8388608, i1 false) #1, !dbg !58
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %81, i32 -8388608, i1 %81) #1, !dbg !58
  %100 = add i32 %56, 4, !dbg !33
  %101 = sext i32 %100 to i64, !dbg !34
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !34
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %86, i32 -8388608, i1 %86) #1, !dbg !59
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %87, i32 -8388608, i1 %87) #1, !dbg !59
  %105 = add i32 %56, 5, !dbg !35
  %106 = sext i32 %105 to i64, !dbg !36
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !36
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %86, i32 -8388608, i1 %86) #1, !dbg !60
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %87, i32 -8388608, i1 %87) #1, !dbg !60
  %110 = insertelement <2 x i32> %45, i32 %61, i64 1, !dbg !21
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !21
  %112 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !48
  %113 = insertelement <2 x i32> %112, i32 %70, i64 1, !dbg !48
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !48
  %115 = fcmp ogt <2 x float> %114, %111, !dbg !61
  %116 = fcmp uno <2 x float> %114, zeroinitializer, !dbg !65
  %117 = or <2 x i1> %115, %116, !dbg !66
  %.v = select <2 x i1> %117, <2 x i32> %113, <2 x i32> %110, !dbg !67
  %118 = bitcast <2 x i32> %.v to <2 x float>, !dbg !67
  %119 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !49
  %120 = insertelement <2 x i32> %119, i32 %75, i64 1, !dbg !49
  %121 = bitcast <2 x i32> %120 to <2 x float>, !dbg !49
  %122 = fcmp olt <2 x float> %118, %121, !dbg !68
  %123 = fcmp uno <2 x float> %121, zeroinitializer, !dbg !70
  %124 = or <2 x i1> %123, %122, !dbg !71
  %.v2 = select <2 x i1> %124, <2 x i32> %120, <2 x i32> %.v, !dbg !72
  %125 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !72
  %126 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !53
  %127 = insertelement <2 x i32> %126, i32 %83, i64 1, !dbg !53
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !53
  %129 = fcmp olt <2 x float> %125, %128, !dbg !73
  %130 = fcmp uno <2 x float> %128, zeroinitializer, !dbg !75
  %131 = or <2 x i1> %130, %129, !dbg !76
  %.v3 = select <2 x i1> %131, <2 x i32> %127, <2 x i32> %.v2, !dbg !77
  %132 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !77
  %133 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !56
  %134 = insertelement <2 x i32> %133, i32 %89, i64 1, !dbg !56
  %135 = bitcast <2 x i32> %134 to <2 x float>, !dbg !56
  %136 = fcmp olt <2 x float> %132, %135, !dbg !78
  %137 = fcmp uno <2 x float> %135, zeroinitializer, !dbg !80
  %138 = or <2 x i1> %137, %136, !dbg !81
  %.v4 = select <2 x i1> %138, <2 x i32> %134, <2 x i32> %.v3, !dbg !82
  %139 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !82
  %140 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !57
  %141 = insertelement <2 x i32> %140, i32 %94, i64 1, !dbg !57
  %142 = bitcast <2 x i32> %141 to <2 x float>, !dbg !57
  %143 = fcmp olt <2 x float> %139, %142, !dbg !83
  %144 = fcmp uno <2 x float> %142, zeroinitializer, !dbg !85
  %145 = or <2 x i1> %144, %143, !dbg !86
  %.v5 = select <2 x i1> %145, <2 x i32> %141, <2 x i32> %.v4, !dbg !87
  %146 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !87
  %147 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !58
  %148 = insertelement <2 x i32> %147, i32 %99, i64 1, !dbg !58
  %149 = bitcast <2 x i32> %148 to <2 x float>, !dbg !58
  %150 = fcmp olt <2 x float> %146, %149, !dbg !88
  %151 = fcmp uno <2 x float> %149, zeroinitializer, !dbg !90
  %152 = or <2 x i1> %151, %150, !dbg !91
  %.v6 = select <2 x i1> %152, <2 x i32> %148, <2 x i32> %.v5, !dbg !92
  %153 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !92
  %154 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !59
  %155 = insertelement <2 x i32> %154, i32 %104, i64 1, !dbg !59
  %156 = bitcast <2 x i32> %155 to <2 x float>, !dbg !59
  %157 = fcmp olt <2 x float> %153, %156, !dbg !93
  %158 = fcmp uno <2 x float> %156, zeroinitializer, !dbg !95
  %159 = or <2 x i1> %158, %157, !dbg !96
  %.v7 = select <2 x i1> %159, <2 x i32> %155, <2 x i32> %.v6, !dbg !97
  %160 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !97
  %161 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !60
  %162 = insertelement <2 x i32> %161, i32 %109, i64 1, !dbg !60
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !60
  %164 = fcmp olt <2 x float> %160, %163, !dbg !98
  %165 = bitcast i32 %108 to float, !dbg !100
  %166 = fcmp uno float %165, 0.000000e+00, !dbg !100
  %167 = bitcast i32 %109 to float, !dbg !100
  %168 = fcmp uno float %167, 0.000000e+00, !dbg !100
  %169 = extractelement <2 x i1> %164, i64 0, !dbg !101
  %170 = or i1 %166, %169, !dbg !101
  %171 = extractelement <2 x i1> %164, i64 1, !dbg !101
  %172 = or i1 %168, %171, !dbg !101
  %173 = zext <2 x i1> %115 to <2 x i8>, !dbg !102
  %174 = select <2 x i1> %122, <2 x i8> splat (i8 2), <2 x i8> %173, !dbg !103
  %175 = select <2 x i1> %129, <2 x i8> splat (i8 3), <2 x i8> %174, !dbg !104
  %176 = select <2 x i1> %136, <2 x i8> splat (i8 4), <2 x i8> %175, !dbg !105
  %177 = select <2 x i1> %143, <2 x i8> splat (i8 5), <2 x i8> %176, !dbg !106
  %178 = select <2 x i1> %150, <2 x i8> splat (i8 6), <2 x i8> %177, !dbg !107
  %179 = select <2 x i1> %157, <2 x i8> splat (i8 7), <2 x i8> %178, !dbg !108
  %180 = select <2 x i1> %164, <2 x i8> splat (i8 8), <2 x i8> %179, !dbg !109
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 false, i32 0, i1 false) #1, !dbg !110
  %182 = bitcast i32 %181 to float, !dbg !110
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %60, i32 0, i1 %60) #1, !dbg !110
  %184 = bitcast i32 %183 to float, !dbg !110
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %67, i32 0, i1 %67) #1, !dbg !111
  %186 = bitcast i32 %185 to float, !dbg !111
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %68, i32 0, i1 %68) #1, !dbg !111
  %188 = bitcast i32 %187 to float, !dbg !111
  %189 = fadd float %182, %186, !dbg !112
  %190 = fadd float %184, %188, !dbg !112
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %67, i32 0, i1 %67) #1, !dbg !113
  %192 = bitcast i32 %191 to float, !dbg !113
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %68, i32 0, i1 %68) #1, !dbg !113
  %194 = bitcast i32 %193 to float, !dbg !113
  %195 = fadd float %189, %192, !dbg !114
  %196 = fadd float %190, %194, !dbg !114
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 false, i32 0, i1 false) #1, !dbg !115
  %198 = bitcast i32 %197 to float, !dbg !115
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %81, i32 0, i1 %81) #1, !dbg !115
  %200 = bitcast i32 %199 to float, !dbg !115
  %201 = fadd float %195, %198, !dbg !116
  %202 = fadd float %196, %200, !dbg !116
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %86, i32 0, i1 %86) #1, !dbg !117
  %204 = bitcast i32 %203 to float, !dbg !117
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %87, i32 0, i1 %87) #1, !dbg !117
  %206 = bitcast i32 %205 to float, !dbg !117
  %207 = fadd float %201, %204, !dbg !118
  %208 = fadd float %202, %206, !dbg !118
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %86, i32 0, i1 %86) #1, !dbg !119
  %210 = bitcast i32 %209 to float, !dbg !119
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %87, i32 0, i1 %87) #1, !dbg !119
  %212 = bitcast i32 %211 to float, !dbg !119
  %213 = fadd float %207, %210, !dbg !120
  %214 = fadd float %208, %212, !dbg !120
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 false, i32 0, i1 false) #1, !dbg !121
  %216 = bitcast i32 %215 to float, !dbg !121
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %81, i32 0, i1 %81) #1, !dbg !121
  %218 = bitcast i32 %217 to float, !dbg !121
  %219 = fadd float %213, %216, !dbg !122
  %220 = fadd float %214, %218, !dbg !122
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %86, i32 0, i1 %86) #1, !dbg !123
  %222 = bitcast i32 %221 to float, !dbg !123
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %87, i32 0, i1 %87) #1, !dbg !123
  %224 = bitcast i32 %223 to float, !dbg !123
  %225 = fadd float %219, %222, !dbg !124
  %226 = fadd float %220, %224, !dbg !124
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %86, i32 0, i1 %86) #1, !dbg !125
  %228 = bitcast i32 %227 to float, !dbg !125
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %87, i32 0, i1 %87) #1, !dbg !125
  %230 = bitcast i32 %229 to float, !dbg !125
  %231 = fadd float %225, %228, !dbg !126
  %232 = fadd float %226, %230, !dbg !126
  %233 = mul nsw i32 %49, -2, !dbg !127
  %234 = mul nsw i32 %50, -2, !dbg !128
  %235 = add nsw <2 x i32> %52, splat (i32 2), !dbg !129
  %236 = extractelement <2 x i32> %235, i64 1, !dbg !130
  %237 = shl nuw nsw i32 %236, 1, !dbg !130
  %238 = extractelement <2 x i32> %235, i64 0, !dbg !38
  %239 = mul nsw i32 %234, %238, !dbg !131
  %240 = shl nsw i32 %49, 2, !dbg !132
  %241 = mul nsw i32 %240, %50, !dbg !133
  %242 = add nsw i32 %234, 3, !dbg !134
  %243 = shl nsw i32 %50, 2, !dbg !38
  %244 = sub nsw i32 %242, %243, !dbg !38
  %245 = add nsw i32 %244, %236, !dbg !135
  %246 = add nsw i32 %245, %237, !dbg !136
  %reass.add = add nsw i32 %238, %233
  %reass.mul = mul nsw i32 %reass.add, %236
  %247 = or disjoint i32 %233, 1, !dbg !137
  %248 = add nsw i32 %247, %234, !dbg !134
  %249 = add nsw i32 %248, %241, !dbg !138
  %250 = add nsw i32 %249, %238, !dbg !38
  %251 = add nsw i32 %250, %239, !dbg !139
  %252 = add i32 %251, %236, !dbg !135
  %253 = add i32 %252, %reass.mul, !dbg !136
  %254 = sitofp i32 %246 to float, !dbg !140
  %255 = sitofp i32 %253 to float, !dbg !140
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %231, float %254) #1, !dbg !140
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %232, float %255) #1, !dbg !140
  %258 = shl i32 %15, 9, !dbg !141
  %259 = add i32 %258, %.decomposed, !dbg !142
  %260 = sext i32 %259 to i64, !dbg !143
  %261 = getelementptr float, ptr addrspace(1) %1, i64 %260, !dbg !143
  %262 = extractelement <2 x i32> %.v7, i64 0, !dbg !144
  %263 = select i1 %170, i32 %108, i32 %262, !dbg !145
  %264 = extractelement <2 x i32> %.v7, i64 1, !dbg !144
  %265 = select i1 %172, i32 %109, i32 %264, !dbg !145
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %263, i32 %265, ptr addrspace(1) %261, i1 %13) #1, !dbg !144
  %266 = sext i32 %11 to i64, !dbg !146
  %267 = getelementptr i8, ptr addrspace(1) %2, i64 %266, !dbg !146
  %268 = bitcast <2 x i8> %180 to i16, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %268, ptr addrspace(1) %267, i1 %13) #1, !dbg !147
  %269 = getelementptr float, ptr addrspace(1) %3, i64 %260, !dbg !148
  %270 = bitcast float %256 to i32, !dbg !149
  %271 = bitcast float %257 to i32, !dbg !149
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %270, i32 %271, ptr addrspace(1) %269, i1 %13) #1, !dbg !149
  ret void, !dbg !150
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgbbkkab7sejqu67qn7ieuoegpwwf3j6k3azxf364lluyvehunla.py", directory: "inductor_cache/gb")
!4 = !{ptr @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_max_pool2d_with_indices_12", linkageName: "triton_poi_fused_avg_pool2d_max_pool2d_with_indices_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 41, column: 47, scope: !7)
!19 = !DILocation(line: 41, column: 45, scope: !7)
!20 = !DILocation(line: 41, column: 31, scope: !7)
!21 = !DILocation(line: 41, column: 52, scope: !7)
!22 = !DILocation(line: 47, column: 45, scope: !7)
!23 = !DILocation(line: 47, column: 31, scope: !7)
!24 = !DILocation(line: 54, column: 45, scope: !7)
!25 = !DILocation(line: 54, column: 31, scope: !7)
!26 = !DILocation(line: 61, column: 45, scope: !7)
!27 = !DILocation(line: 61, column: 31, scope: !7)
!28 = !DILocation(line: 64, column: 31, scope: !7)
!29 = !DILocation(line: 67, column: 42, scope: !7)
!30 = !DILocation(line: 67, column: 31, scope: !7)
!31 = !DILocation(line: 74, column: 42, scope: !7)
!32 = !DILocation(line: 74, column: 31, scope: !7)
!33 = !DILocation(line: 77, column: 42, scope: !7)
!34 = !DILocation(line: 77, column: 31, scope: !7)
!35 = !DILocation(line: 80, column: 42, scope: !7)
!36 = !DILocation(line: 80, column: 31, scope: !7)
!37 = !DILocation(line: 25, column: 19, scope: !7)
!38 = !DILocation(line: 124, column: 241, scope: !7)
!39 = !DILocation(line: 32, column: 19, scope: !7)
!40 = !DILocation(line: 36, column: 20, scope: !7)
!41 = !DILocation(line: 37, column: 19, scope: !7)
!42 = !DILocation(line: 40, column: 19, scope: !7)
!43 = !DILocation(line: 41, column: 38, scope: !7)
!44 = !DILocation(line: 41, column: 60, scope: !7)
!45 = !DILocation(line: 43, column: 21, scope: !7)
!46 = !DILocation(line: 46, column: 19, scope: !7)
!47 = !DILocation(line: 47, column: 60, scope: !7)
!48 = !DILocation(line: 47, column: 52, scope: !7)
!49 = !DILocation(line: 54, column: 52, scope: !7)
!50 = !DILocation(line: 57, column: 21, scope: !7)
!51 = !DILocation(line: 60, column: 20, scope: !7)
!52 = !DILocation(line: 61, column: 60, scope: !7)
!53 = !DILocation(line: 61, column: 52, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 53, scope: !7)
!56 = !DILocation(line: 64, column: 45, scope: !7)
!57 = !DILocation(line: 67, column: 49, scope: !7)
!58 = !DILocation(line: 74, column: 49, scope: !7)
!59 = !DILocation(line: 77, column: 49, scope: !7)
!60 = !DILocation(line: 80, column: 49, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !64)
!62 = distinct !DILexicalBlockFile(scope: !7, file: !63, discriminator: 0)
!63 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!64 = !DILocation(line: 48, column: 42, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !64)
!68 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !69)
!69 = !DILocation(line: 55, column: 42, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !69)
!73 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !74)
!74 = !DILocation(line: 62, column: 42, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !74)
!78 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !79)
!79 = !DILocation(line: 65, column: 42, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !79)
!83 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !84)
!84 = !DILocation(line: 68, column: 42, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !84)
!88 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !89)
!89 = !DILocation(line: 75, column: 42, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !94)
!94 = !DILocation(line: 78, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !99)
!99 = !DILocation(line: 81, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !99)
!102 = !DILocation(line: 85, column: 35, scope: !7)
!103 = !DILocation(line: 88, column: 35, scope: !7)
!104 = !DILocation(line: 91, column: 35, scope: !7)
!105 = !DILocation(line: 94, column: 35, scope: !7)
!106 = !DILocation(line: 97, column: 35, scope: !7)
!107 = !DILocation(line: 100, column: 35, scope: !7)
!108 = !DILocation(line: 103, column: 35, scope: !7)
!109 = !DILocation(line: 106, column: 35, scope: !7)
!110 = !DILocation(line: 107, column: 52, scope: !7)
!111 = !DILocation(line: 108, column: 52, scope: !7)
!112 = !DILocation(line: 109, column: 20, scope: !7)
!113 = !DILocation(line: 110, column: 52, scope: !7)
!114 = !DILocation(line: 111, column: 20, scope: !7)
!115 = !DILocation(line: 112, column: 52, scope: !7)
!116 = !DILocation(line: 113, column: 20, scope: !7)
!117 = !DILocation(line: 114, column: 45, scope: !7)
!118 = !DILocation(line: 115, column: 20, scope: !7)
!119 = !DILocation(line: 116, column: 49, scope: !7)
!120 = !DILocation(line: 117, column: 20, scope: !7)
!121 = !DILocation(line: 118, column: 49, scope: !7)
!122 = !DILocation(line: 119, column: 20, scope: !7)
!123 = !DILocation(line: 120, column: 49, scope: !7)
!124 = !DILocation(line: 121, column: 20, scope: !7)
!125 = !DILocation(line: 122, column: 49, scope: !7)
!126 = !DILocation(line: 123, column: 20, scope: !7)
!127 = !DILocation(line: 124, column: 22, scope: !7)
!128 = !DILocation(line: 124, column: 34, scope: !7)
!129 = !DILocation(line: 124, column: 60, scope: !7)
!130 = !DILocation(line: 124, column: 103, scope: !7)
!131 = !DILocation(line: 124, column: 250, scope: !7)
!132 = !DILocation(line: 124, column: 316, scope: !7)
!133 = !DILocation(line: 124, column: 319, scope: !7)
!134 = !DILocation(line: 124, column: 40, scope: !7)
!135 = !DILocation(line: 124, column: 325, scope: !7)
!136 = !DILocation(line: 124, column: 389, scope: !7)
!137 = !DILocation(line: 124, column: 29, scope: !7)
!138 = !DILocation(line: 124, column: 167, scope: !7)
!139 = !DILocation(line: 124, column: 314, scope: !7)
!140 = !DILocation(line: 125, column: 20, scope: !7)
!141 = !DILocation(line: 126, column: 34, scope: !7)
!142 = !DILocation(line: 126, column: 30, scope: !7)
!143 = !DILocation(line: 126, column: 25, scope: !7)
!144 = !DILocation(line: 126, column: 46, scope: !7)
!145 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !99)
!146 = !DILocation(line: 127, column: 25, scope: !7)
!147 = !DILocation(line: 127, column: 37, scope: !7)
!148 = !DILocation(line: 128, column: 25, scope: !7)
!149 = !DILocation(line: 128, column: 46, scope: !7)
!150 = !DILocation(line: 128, column: 4, scope: !7)
