#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 2], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 4], warpsPerCTA = [8, 1], order = [1, 0]}>
#loc = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":19:0)
#loc1 = loc(unknown)
#loc86 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":92:26)
#loc126 = loc(callsite(#loc1 at #loc86))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__to_copy__unsafe_index_abs_add_arange_clamp_exp_mul_pow_sub_sum_3(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<256> : tensor<128x1xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<256> : tensor<128x1xi32, #blocked1> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<-3.000000e+02> : tensor<128x16xf32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<2.000000e+01> : tensor<128x16xf32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<128x16xf32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<128x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<4> : tensor<128x1xi32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<16> : tensor<128x1xi32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<16> : tensor<128x1xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<64> : tensor<128x1xi32, #blocked1> loc(#loc1)
    %cst_9 = arith.constant dense<1> : tensor<128x1xi64, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<1> : tensor<128x1xi64, #blocked1> loc(#loc1)
    %cst_11 = arith.constant dense<4> : tensor<128x1xi64, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<4> : tensor<128x1xi64, #blocked1> loc(#loc1)
    %cst_13 = arith.constant dense<1.000000e+00> : tensor<128x1xf32, #blocked> loc(#loc1)
    %cst_14 = arith.constant dense<1.000000e+00> : tensor<128x1xf32, #blocked1> loc(#loc1)
    %cst_15 = arith.constant dense<3> : tensor<128x1xi64, #blocked> loc(#loc1)
    %cst_16 = arith.constant dense<3> : tensor<128x1xi64, #blocked1> loc(#loc1)
    %cst_17 = arith.constant dense<0.000000e+00> : tensor<128x1xf32, #blocked1> loc(#loc1)
    %cst_18 = arith.constant dense<0.000000e+00> : tensor<128x1xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi32, #blocked> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<128x1xi32, #blocked> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<128x1xi32, #blocked1> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<128x1xi32, #blocked> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_0 : tensor<128x1xi32, #blocked1> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst : tensor<128x1xi32, #blocked> loc(#loc6)
    %12 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc7)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc7)
    %14 = arith.divsi %9, %cst_4 : tensor<128x1xi32, #blocked> loc(#loc8)
    %15 = arith.divsi %8, %cst_5 : tensor<128x1xi32, #blocked1> loc(#loc8)
    %16 = arith.remsi %14, %cst_4 : tensor<128x1xi32, #blocked> loc(#loc9)
    %17 = arith.remsi %15, %cst_5 : tensor<128x1xi32, #blocked1> loc(#loc9)
    %18 = arith.remsi %9, %cst_4 : tensor<128x1xi32, #blocked> loc(#loc10)
    %19 = arith.remsi %8, %cst_5 : tensor<128x1xi32, #blocked1> loc(#loc10)
    %20 = arith.divsi %9, %cst_7 : tensor<128x1xi32, #blocked> loc(#loc11)
    %21 = arith.divsi %8, %cst_6 : tensor<128x1xi32, #blocked1> loc(#loc11)
    %22 = arith.remsi %8, %cst_6 : tensor<128x1xi32, #blocked1> loc(#loc12)
    %23 = arith.divsi %8, %cst_8 : tensor<128x1xi32, #blocked1> loc(#loc13)
    %24 = arith.muli %22, %cst_6 : tensor<128x1xi32, #blocked1> loc(#loc14)
    %25 = tt.broadcast %13 : tensor<1x16xi32, #blocked1> -> tensor<128x16xi32, #blocked1> loc(#loc15)
    %26 = tt.broadcast %24 : tensor<128x1xi32, #blocked1> -> tensor<128x16xi32, #blocked1> loc(#loc15)
    %27 = arith.addi %25, %26 : tensor<128x16xi32, #blocked1> loc(#loc15)
    %28 = arith.muli %23, %cst_0 : tensor<128x1xi32, #blocked1> loc(#loc16)
    %29 = tt.broadcast %28 : tensor<128x1xi32, #blocked1> -> tensor<128x16xi32, #blocked1> loc(#loc17)
    %30 = arith.addi %27, %29 : tensor<128x16xi32, #blocked1> loc(#loc17)
    %31 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<128x16x!tt.ptr<f32>, #blocked1> loc(#loc18)
    %32 = tt.addptr %31, %30 : tensor<128x16x!tt.ptr<f32>, #blocked1>, tensor<128x16xi32, #blocked1> loc(#loc18)
    %33 = tt.broadcast %10 : tensor<128x1xi1, #blocked1> -> tensor<128x16xi1, #blocked1> loc(#loc19)
    %34 = tt.load %32, %33, %cst_3 evictionPolicy = evict_last : tensor<128x16x!tt.ptr<f32>, #blocked1> loc(#loc19)
    %35 = arith.sitofp %16 : tensor<128x1xi32, #blocked> to tensor<128x1xf32, #blocked> loc(#loc20)
    %36 = arith.sitofp %17 : tensor<128x1xi32, #blocked1> to tensor<128x1xf32, #blocked1> loc(#loc20)
    %37 = arith.cmpf ogt, %35, %cst_18 : tensor<128x1xf32, #blocked> loc(#loc97)
    %38 = arith.cmpf ogt, %36, %cst_17 : tensor<128x1xf32, #blocked1> loc(#loc97)
    %39 = arith.cmpf une, %35, %35 : tensor<128x1xf32, #blocked> loc(#loc98)
    %40 = arith.cmpf une, %36, %36 : tensor<128x1xf32, #blocked1> loc(#loc98)
    %41 = arith.ori %37, %39 : tensor<128x1xi1, #blocked> loc(#loc99)
    %42 = arith.ori %38, %40 : tensor<128x1xi1, #blocked1> loc(#loc99)
    %43 = arith.select %41, %35, %cst_18 : tensor<128x1xi1, #blocked>, tensor<128x1xf32, #blocked> loc(#loc100)
    %44 = arith.select %42, %36, %cst_17 : tensor<128x1xi1, #blocked1>, tensor<128x1xf32, #blocked1> loc(#loc100)
    %45 = arith.fptosi %43 : tensor<128x1xf32, #blocked> to tensor<128x1xi32, #blocked> loc(#loc26)
    %46 = arith.fptosi %44 : tensor<128x1xf32, #blocked1> to tensor<128x1xi32, #blocked1> loc(#loc26)
    %47 = arith.extsi %45 : tensor<128x1xi32, #blocked> to tensor<128x1xi64, #blocked> loc(#loc27)
    %48 = arith.extsi %46 : tensor<128x1xi32, #blocked1> to tensor<128x1xi64, #blocked1> loc(#loc27)
    %49 = arith.addi %47, %cst_9 : tensor<128x1xi64, #blocked> loc(#loc27)
    %50 = arith.addi %48, %cst_10 : tensor<128x1xi64, #blocked1> loc(#loc27)
    %51 = arith.cmpi slt, %49, %cst_15 : tensor<128x1xi64, #blocked> loc(#loc101)
    %52 = arith.cmpi slt, %50, %cst_16 : tensor<128x1xi64, #blocked1> loc(#loc101)
    %53 = arith.select %51, %49, %cst_15 : tensor<128x1xi1, #blocked>, tensor<128x1xi64, #blocked> loc(#loc102)
    %54 = arith.select %52, %50, %cst_16 : tensor<128x1xi1, #blocked1>, tensor<128x1xi64, #blocked1> loc(#loc102)
    %55 = arith.sitofp %18 : tensor<128x1xi32, #blocked> to tensor<128x1xf32, #blocked> loc(#loc31)
    %56 = arith.sitofp %19 : tensor<128x1xi32, #blocked1> to tensor<128x1xf32, #blocked1> loc(#loc31)
    %57 = arith.cmpf ogt, %55, %cst_18 : tensor<128x1xf32, #blocked> loc(#loc103)
    %58 = arith.cmpf ogt, %56, %cst_17 : tensor<128x1xf32, #blocked1> loc(#loc103)
    %59 = arith.cmpf une, %55, %55 : tensor<128x1xf32, #blocked> loc(#loc104)
    %60 = arith.cmpf une, %56, %56 : tensor<128x1xf32, #blocked1> loc(#loc104)
    %61 = arith.ori %57, %59 : tensor<128x1xi1, #blocked> loc(#loc105)
    %62 = arith.ori %58, %60 : tensor<128x1xi1, #blocked1> loc(#loc105)
    %63 = arith.select %61, %55, %cst_18 : tensor<128x1xi1, #blocked>, tensor<128x1xf32, #blocked> loc(#loc106)
    %64 = arith.select %62, %56, %cst_17 : tensor<128x1xi1, #blocked1>, tensor<128x1xf32, #blocked1> loc(#loc106)
    %65 = arith.fptosi %63 : tensor<128x1xf32, #blocked> to tensor<128x1xi32, #blocked> loc(#loc33)
    %66 = arith.fptosi %64 : tensor<128x1xf32, #blocked1> to tensor<128x1xi32, #blocked1> loc(#loc33)
    %67 = arith.muli %53, %cst_11 : tensor<128x1xi64, #blocked> loc(#loc34)
    %68 = arith.muli %54, %cst_12 : tensor<128x1xi64, #blocked1> loc(#loc34)
    %69 = arith.extsi %65 : tensor<128x1xi32, #blocked> to tensor<128x1xi64, #blocked> loc(#loc35)
    %70 = arith.extsi %66 : tensor<128x1xi32, #blocked1> to tensor<128x1xi64, #blocked1> loc(#loc35)
    %71 = arith.addi %69, %67 : tensor<128x1xi64, #blocked> loc(#loc35)
    %72 = arith.addi %70, %68 : tensor<128x1xi64, #blocked1> loc(#loc35)
    %73 = arith.muli %20, %cst_7 : tensor<128x1xi32, #blocked> loc(#loc36)
    %74 = arith.muli %21, %cst_6 : tensor<128x1xi32, #blocked1> loc(#loc36)
    %75 = arith.extsi %73 : tensor<128x1xi32, #blocked> to tensor<128x1xi64, #blocked> loc(#loc37)
    %76 = arith.extsi %74 : tensor<128x1xi32, #blocked1> to tensor<128x1xi64, #blocked1> loc(#loc37)
    %77 = arith.addi %71, %75 : tensor<128x1xi64, #blocked> loc(#loc37)
    %78 = arith.addi %72, %76 : tensor<128x1xi64, #blocked1> loc(#loc37)
    %79 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc38)
    %80 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked1> loc(#loc38)
    %81 = tt.addptr %79, %77 : tensor<128x1x!tt.ptr<f32>, #blocked>, tensor<128x1xi64, #blocked> loc(#loc38)
    %82 = tt.addptr %80, %78 : tensor<128x1x!tt.ptr<f32>, #blocked1>, tensor<128x1xi64, #blocked1> loc(#loc38)
    %83 = tt.load %81, %11 evictionPolicy = evict_last : tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc39)
    %84 = tt.load %82, %10 evictionPolicy = evict_last : tensor<128x1x!tt.ptr<f32>, #blocked1> loc(#loc39)
    %85 = arith.addi %69, %cst_9 : tensor<128x1xi64, #blocked> loc(#loc40)
    %86 = arith.addi %70, %cst_10 : tensor<128x1xi64, #blocked1> loc(#loc40)
    %87 = arith.cmpi slt, %85, %cst_15 : tensor<128x1xi64, #blocked> loc(#loc107)
    %88 = arith.cmpi slt, %86, %cst_16 : tensor<128x1xi64, #blocked1> loc(#loc107)
    %89 = arith.select %87, %85, %cst_15 : tensor<128x1xi1, #blocked>, tensor<128x1xi64, #blocked> loc(#loc108)
    %90 = arith.select %88, %86, %cst_16 : tensor<128x1xi1, #blocked1>, tensor<128x1xi64, #blocked1> loc(#loc108)
    %91 = arith.addi %89, %67 : tensor<128x1xi64, #blocked> loc(#loc42)
    %92 = arith.addi %90, %68 : tensor<128x1xi64, #blocked1> loc(#loc42)
    %93 = arith.addi %91, %75 : tensor<128x1xi64, #blocked> loc(#loc43)
    %94 = arith.addi %92, %76 : tensor<128x1xi64, #blocked1> loc(#loc43)
    %95 = tt.addptr %79, %93 : tensor<128x1x!tt.ptr<f32>, #blocked>, tensor<128x1xi64, #blocked> loc(#loc44)
    %96 = tt.addptr %80, %94 : tensor<128x1x!tt.ptr<f32>, #blocked1>, tensor<128x1xi64, #blocked1> loc(#loc44)
    %97 = tt.load %95, %11 evictionPolicy = evict_last : tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc45)
    %98 = tt.load %96, %10 evictionPolicy = evict_last : tensor<128x1x!tt.ptr<f32>, #blocked1> loc(#loc45)
    %99 = arith.subf %97, %83 : tensor<128x1xf32, #blocked> loc(#loc46)
    %100 = arith.subf %98, %84 : tensor<128x1xf32, #blocked1> loc(#loc46)
    %101 = arith.sitofp %65 : tensor<128x1xi32, #blocked> to tensor<128x1xf32, #blocked> loc(#loc47)
    %102 = arith.sitofp %66 : tensor<128x1xi32, #blocked1> to tensor<128x1xf32, #blocked1> loc(#loc47)
    %103 = arith.subf %63, %101 : tensor<128x1xf32, #blocked> loc(#loc48)
    %104 = arith.subf %64, %102 : tensor<128x1xf32, #blocked1> loc(#loc48)
    %105 = arith.cmpf ogt, %103, %cst_18 : tensor<128x1xf32, #blocked> loc(#loc109)
    %106 = arith.cmpf ogt, %104, %cst_17 : tensor<128x1xf32, #blocked1> loc(#loc109)
    %107 = arith.cmpf une, %103, %103 : tensor<128x1xf32, #blocked> loc(#loc110)
    %108 = arith.cmpf une, %104, %104 : tensor<128x1xf32, #blocked1> loc(#loc110)
    %109 = arith.ori %105, %107 : tensor<128x1xi1, #blocked> loc(#loc111)
    %110 = arith.ori %106, %108 : tensor<128x1xi1, #blocked1> loc(#loc111)
    %111 = arith.select %109, %103, %cst_18 : tensor<128x1xi1, #blocked>, tensor<128x1xf32, #blocked> loc(#loc112)
    %112 = arith.select %110, %104, %cst_17 : tensor<128x1xi1, #blocked1>, tensor<128x1xf32, #blocked1> loc(#loc112)
    %113 = arith.cmpf olt, %111, %cst_13 : tensor<128x1xf32, #blocked> loc(#loc113)
    %114 = arith.cmpf olt, %112, %cst_14 : tensor<128x1xf32, #blocked1> loc(#loc113)
    %115 = arith.cmpf une, %111, %111 : tensor<128x1xf32, #blocked> loc(#loc114)
    %116 = arith.cmpf une, %112, %112 : tensor<128x1xf32, #blocked1> loc(#loc114)
    %117 = arith.ori %113, %115 : tensor<128x1xi1, #blocked> loc(#loc115)
    %118 = arith.ori %114, %116 : tensor<128x1xi1, #blocked1> loc(#loc115)
    %119 = arith.select %117, %111, %cst_13 : tensor<128x1xi1, #blocked>, tensor<128x1xf32, #blocked> loc(#loc116)
    %120 = arith.select %118, %112, %cst_14 : tensor<128x1xi1, #blocked1>, tensor<128x1xf32, #blocked1> loc(#loc116)
    %121 = arith.mulf %99, %119 : tensor<128x1xf32, #blocked> loc(#loc53)
    %122 = arith.mulf %100, %120 : tensor<128x1xf32, #blocked1> loc(#loc53)
    %123 = arith.addf %83, %121 : tensor<128x1xf32, #blocked> loc(#loc54)
    %124 = arith.addf %84, %122 : tensor<128x1xf32, #blocked1> loc(#loc54)
    %125 = arith.muli %45, %cst_4 : tensor<128x1xi32, #blocked> loc(#loc55)
    %126 = arith.muli %46, %cst_5 : tensor<128x1xi32, #blocked1> loc(#loc55)
    %127 = arith.addi %65, %125 : tensor<128x1xi32, #blocked> loc(#loc56)
    %128 = arith.addi %66, %126 : tensor<128x1xi32, #blocked1> loc(#loc56)
    %129 = arith.addi %127, %73 : tensor<128x1xi32, #blocked> loc(#loc57)
    %130 = arith.addi %128, %74 : tensor<128x1xi32, #blocked1> loc(#loc57)
    %131 = tt.addptr %79, %129 : tensor<128x1x!tt.ptr<f32>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc58)
    %132 = tt.addptr %80, %130 : tensor<128x1x!tt.ptr<f32>, #blocked1>, tensor<128x1xi32, #blocked1> loc(#loc58)
    %133 = tt.load %131, %11 evictionPolicy = evict_last : tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc59)
    %134 = tt.load %132, %10 evictionPolicy = evict_last : tensor<128x1x!tt.ptr<f32>, #blocked1> loc(#loc59)
    %135 = arith.extsi %125 : tensor<128x1xi32, #blocked> to tensor<128x1xi64, #blocked> loc(#loc60)
    %136 = arith.extsi %126 : tensor<128x1xi32, #blocked1> to tensor<128x1xi64, #blocked1> loc(#loc60)
    %137 = arith.addi %89, %135 : tensor<128x1xi64, #blocked> loc(#loc60)
    %138 = arith.addi %90, %136 : tensor<128x1xi64, #blocked1> loc(#loc60)
    %139 = arith.addi %137, %75 : tensor<128x1xi64, #blocked> loc(#loc61)
    %140 = arith.addi %138, %76 : tensor<128x1xi64, #blocked1> loc(#loc61)
    %141 = tt.addptr %79, %139 : tensor<128x1x!tt.ptr<f32>, #blocked>, tensor<128x1xi64, #blocked> loc(#loc62)
    %142 = tt.addptr %80, %140 : tensor<128x1x!tt.ptr<f32>, #blocked1>, tensor<128x1xi64, #blocked1> loc(#loc62)
    %143 = tt.load %141, %11 evictionPolicy = evict_last : tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc63)
    %144 = tt.load %142, %10 evictionPolicy = evict_last : tensor<128x1x!tt.ptr<f32>, #blocked1> loc(#loc63)
    %145 = arith.subf %143, %133 : tensor<128x1xf32, #blocked> loc(#loc64)
    %146 = arith.subf %144, %134 : tensor<128x1xf32, #blocked1> loc(#loc64)
    %147 = arith.mulf %145, %119 : tensor<128x1xf32, #blocked> loc(#loc65)
    %148 = arith.mulf %146, %120 : tensor<128x1xf32, #blocked1> loc(#loc65)
    %149 = arith.addf %133, %147 : tensor<128x1xf32, #blocked> loc(#loc66)
    %150 = arith.addf %134, %148 : tensor<128x1xf32, #blocked1> loc(#loc66)
    %151 = arith.subf %123, %149 : tensor<128x1xf32, #blocked> loc(#loc67)
    %152 = arith.subf %124, %150 : tensor<128x1xf32, #blocked1> loc(#loc67)
    %153 = arith.sitofp %45 : tensor<128x1xi32, #blocked> to tensor<128x1xf32, #blocked> loc(#loc68)
    %154 = arith.sitofp %46 : tensor<128x1xi32, #blocked1> to tensor<128x1xf32, #blocked1> loc(#loc68)
    %155 = arith.subf %43, %153 : tensor<128x1xf32, #blocked> loc(#loc69)
    %156 = arith.subf %44, %154 : tensor<128x1xf32, #blocked1> loc(#loc69)
    %157 = arith.cmpf ogt, %155, %cst_18 : tensor<128x1xf32, #blocked> loc(#loc117)
    %158 = arith.cmpf ogt, %156, %cst_17 : tensor<128x1xf32, #blocked1> loc(#loc117)
    %159 = arith.cmpf une, %155, %155 : tensor<128x1xf32, #blocked> loc(#loc118)
    %160 = arith.cmpf une, %156, %156 : tensor<128x1xf32, #blocked1> loc(#loc118)
    %161 = arith.ori %157, %159 : tensor<128x1xi1, #blocked> loc(#loc119)
    %162 = arith.ori %158, %160 : tensor<128x1xi1, #blocked1> loc(#loc119)
    %163 = arith.select %161, %155, %cst_18 : tensor<128x1xi1, #blocked>, tensor<128x1xf32, #blocked> loc(#loc120)
    %164 = arith.select %162, %156, %cst_17 : tensor<128x1xi1, #blocked1>, tensor<128x1xf32, #blocked1> loc(#loc120)
    %165 = arith.cmpf olt, %163, %cst_13 : tensor<128x1xf32, #blocked> loc(#loc121)
    %166 = arith.cmpf olt, %164, %cst_14 : tensor<128x1xf32, #blocked1> loc(#loc121)
    %167 = arith.cmpf une, %163, %163 : tensor<128x1xf32, #blocked> loc(#loc122)
    %168 = arith.cmpf une, %164, %164 : tensor<128x1xf32, #blocked1> loc(#loc122)
    %169 = arith.ori %165, %167 : tensor<128x1xi1, #blocked> loc(#loc123)
    %170 = arith.ori %166, %168 : tensor<128x1xi1, #blocked1> loc(#loc123)
    %171 = arith.select %169, %163, %cst_13 : tensor<128x1xi1, #blocked>, tensor<128x1xf32, #blocked> loc(#loc124)
    %172 = arith.select %170, %164, %cst_14 : tensor<128x1xi1, #blocked1>, tensor<128x1xf32, #blocked1> loc(#loc124)
    %173 = arith.mulf %151, %171 : tensor<128x1xf32, #blocked> loc(#loc72)
    %174 = arith.mulf %152, %172 : tensor<128x1xf32, #blocked1> loc(#loc72)
    %175 = arith.addf %149, %173 : tensor<128x1xf32, #blocked> loc(#loc73)
    %176 = arith.addf %150, %174 : tensor<128x1xf32, #blocked1> loc(#loc73)
    %177 = arith.cmpf ogt, %34, %cst_2 : tensor<128x16xf32, #blocked1> loc(#loc74)
    %178 = math.exp %34 : tensor<128x16xf32, #blocked1> loc(#loc75)
    %179 = tt.extern_elementwise %178 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<128x16xf32, #blocked1>) -> tensor<128x16xf32, #blocked1> loc(#loc76)
    %180 = arith.select %177, %34, %179 : tensor<128x16xi1, #blocked1>, tensor<128x16xf32, #blocked1> loc(#loc77)
    %181 = tt.broadcast %176 : tensor<128x1xf32, #blocked1> -> tensor<128x16xf32, #blocked1> loc(#loc78)
    %182 = arith.subf %180, %181 : tensor<128x16xf32, #blocked1> loc(#loc78)
    %183 = math.absf %182 : tensor<128x16xf32, #blocked1> loc(#loc79)
    %184 = arith.mulf %183, %183 : tensor<128x16xf32, #blocked1> loc(#loc80)
    %185 = arith.mulf %184, %cst_1 : tensor<128x16xf32, #blocked1> loc(#loc81)
    %186 = math.exp %185 : tensor<128x16xf32, #blocked1> loc(#loc82)
    %187 = arith.mulf %186, %182 : tensor<128x16xf32, #blocked1> loc(#loc83)
    %188 = arith.select %33, %187, %cst_3 : tensor<128x16xi1, #blocked1>, tensor<128x16xf32, #blocked1> loc(#loc84)
    %189 = "tt.reduce"(%188) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc86)), %arg7: f32 loc(callsite(#loc1 at #loc86))):
      %197 = arith.addf %arg6, %arg7 : f32 loc(#loc128)
      tt.reduce.return %197 : f32 loc(#loc125)
    }) : (tensor<128x16xf32, #blocked1>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc125)
    %190 = triton_gpu.convert_layout %189 {fastmath = #arith.fastmath<none>} : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc88)
    %191 = tt.expand_dims %190 {axis = 1 : i32} : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xf32, #blocked> loc(#loc89)
    %192 = arith.addf %175, %191 : tensor<128x1xf32, #blocked> loc(#loc88)
    gpu.barrier loc(#loc90)
    %193 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc91)
    %194 = tt.addptr %193, %9 : tensor<128x1x!tt.ptr<f32>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc91)
    tt.store %194, %175, %11 : tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc92)
    gpu.barrier loc(#loc93)
    %195 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc94)
    %196 = tt.addptr %195, %9 : tensor<128x1x!tt.ptr<f32>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc94)
    tt.store %196, %192, %11 : tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc95)
    tt.return loc(#loc96)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":23:28)
#loc3 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":23:33)
#loc4 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":24:44)
#loc5 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":24:23)
#loc6 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":25:21)
#loc7 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":26:34)
#loc8 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":29:21)
#loc9 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":29:26)
#loc10 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":30:19)
#loc11 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":31:19)
#loc12 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":34:19)
#loc13 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":35:19)
#loc14 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":36:39)
#loc15 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":36:36)
#loc16 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":36:48)
#loc17 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":36:44)
#loc18 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":36:31)
#loc19 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":36:53)
#loc20 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":38:19)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc22 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":42:40)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc26 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":43:19)
#loc27 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":45:18)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":110:15)
#loc29 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":47:41)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":113:29)
#loc31 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":49:21)
#loc32 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":51:42)
#loc33 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":52:21)
#loc34 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":53:41)
#loc35 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":53:39)
#loc36 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":53:52)
#loc37 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":53:49)
#loc38 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":53:31)
#loc39 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":53:57)
#loc40 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":54:20)
#loc41 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":55:42)
#loc42 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":56:39)
#loc43 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":56:49)
#loc44 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":56:31)
#loc45 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":56:57)
#loc46 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":57:20)
#loc47 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":58:21)
#loc48 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":59:20)
#loc49 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":60:42)
#loc50 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":61:42)
#loc51 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":112:21)
#loc52 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":112:16)
#loc53 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":62:20)
#loc54 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":63:20)
#loc55 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":64:41)
#loc56 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":64:39)
#loc57 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":64:48)
#loc58 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":64:31)
#loc59 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":64:56)
#loc60 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":65:39)
#loc61 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":65:48)
#loc62 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":65:31)
#loc63 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":65:56)
#loc64 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":66:20)
#loc65 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":67:20)
#loc66 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":68:20)
#loc67 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":69:20)
#loc68 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":70:20)
#loc69 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":71:19)
#loc70 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":72:42)
#loc71 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":73:42)
#loc72 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":74:20)
#loc73 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":75:20)
#loc74 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":78:20)
#loc75 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":79:24)
#loc76 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":80:28)
#loc77 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":82:35)
#loc78 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":83:20)
#loc79 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":84:24)
#loc80 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":85:20)
#loc81 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":87:20)
#loc82 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":88:24)
#loc83 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":89:20)
#loc84 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":91:35)
#loc85 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc87 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc88 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":93:20)
#loc89 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":92:29)
#loc90 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":94:4)
#loc91 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":95:28)
#loc92 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":95:40)
#loc93 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":96:4)
#loc94 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":97:28)
#loc95 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":97:40)
#loc96 = loc("inductor_cache/mv/cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py":97:4)
#loc97 = loc(callsite(#loc21 at #loc22))
#loc98 = loc(callsite(#loc23 at #loc22))
#loc99 = loc(callsite(#loc24 at #loc22))
#loc100 = loc(callsite(#loc25 at #loc22))
#loc101 = loc(callsite(#loc28 at #loc29))
#loc102 = loc(callsite(#loc30 at #loc29))
#loc103 = loc(callsite(#loc21 at #loc32))
#loc104 = loc(callsite(#loc23 at #loc32))
#loc105 = loc(callsite(#loc24 at #loc32))
#loc106 = loc(callsite(#loc25 at #loc32))
#loc107 = loc(callsite(#loc28 at #loc41))
#loc108 = loc(callsite(#loc30 at #loc41))
#loc109 = loc(callsite(#loc21 at #loc49))
#loc110 = loc(callsite(#loc23 at #loc49))
#loc111 = loc(callsite(#loc24 at #loc49))
#loc112 = loc(callsite(#loc25 at #loc49))
#loc113 = loc(callsite(#loc28 at #loc50))
#loc114 = loc(callsite(#loc51 at #loc50))
#loc115 = loc(callsite(#loc52 at #loc50))
#loc116 = loc(callsite(#loc30 at #loc50))
#loc117 = loc(callsite(#loc21 at #loc70))
#loc118 = loc(callsite(#loc23 at #loc70))
#loc119 = loc(callsite(#loc24 at #loc70))
#loc120 = loc(callsite(#loc25 at #loc70))
#loc121 = loc(callsite(#loc28 at #loc71))
#loc122 = loc(callsite(#loc51 at #loc71))
#loc123 = loc(callsite(#loc52 at #loc71))
#loc124 = loc(callsite(#loc30 at #loc71))
#loc125 = loc(callsite(#loc85 at #loc86))
#loc127 = loc(callsite(#loc87 at #loc85))
#loc128 = loc(callsite(#loc127 at #loc86))
