; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_cat_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %.fr = freeze i32 %8, !dbg !11
  %9 = shl i32 %.fr, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 2, !dbg !13
  %15 = or disjoint i32 %13, 512, !dbg !13
  %16 = or disjoint i32 %13, 514, !dbg !13
  %17 = sdiv i32 %13, 18, !dbg !14
  %18 = sdiv i32 %14, 18, !dbg !14
  %19 = sdiv i32 %15, 18, !dbg !14
  %20 = sdiv i32 %16, 18, !dbg !14
  %21 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !15
  %22 = insertelement <2 x i32> %21, i32 %13, i64 1, !dbg !15
  %23 = srem <2 x i32> %22, <i32 4096, i32 18>, !dbg !15
  %24 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !15
  %25 = insertelement <2 x i32> %24, i32 %14, i64 1, !dbg !15
  %26 = srem <2 x i32> %25, <i32 4096, i32 18>, !dbg !15
  %27 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !15
  %28 = insertelement <2 x i32> %27, i32 %15, i64 1, !dbg !15
  %29 = srem <2 x i32> %28, <i32 4096, i32 18>, !dbg !15
  %30 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !15
  %31 = insertelement <2 x i32> %30, i32 %16, i64 1, !dbg !15
  %32 = srem <2 x i32> %31, <i32 4096, i32 18>, !dbg !15
  %33 = extractelement <2 x i32> %23, i64 1, !dbg !16
  %34 = icmp slt i32 %33, 9, !dbg !17
  %35 = extractelement <2 x i32> %26, i64 1, !dbg !16
  %36 = icmp slt i32 %35, 9, !dbg !17
  %37 = extractelement <2 x i32> %29, i64 1, !dbg !16
  %38 = icmp slt i32 %37, 9, !dbg !17
  %39 = extractelement <2 x i32> %32, i64 1, !dbg !16
  %40 = icmp slt i32 %39, 9, !dbg !17
  %41 = insertelement <4 x i32> poison, i32 %13, i64 0, !dbg !13
  %42 = shufflevector <4 x i32> %41, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !13
  %43 = or disjoint <4 x i32> %42, <i32 515, i32 513, i32 3, i32 1>, !dbg !13
  %44 = srem <4 x i32> %43, splat (i32 18), !dbg !18
  %45 = icmp slt <4 x i32> %44, splat (i32 9), !dbg !17
  %46 = shl nsw i32 %33, 12, !dbg !19
  %47 = extractelement <4 x i32> %44, i64 3, !dbg !16
  %48 = shl nsw i32 %47, 12, !dbg !19
  %49 = shl nsw i32 %35, 12, !dbg !19
  %50 = extractelement <4 x i32> %44, i64 2, !dbg !16
  %51 = shl nsw i32 %50, 12, !dbg !19
  %52 = shl nsw i32 %37, 12, !dbg !19
  %53 = extractelement <4 x i32> %44, i64 1, !dbg !16
  %54 = shl nsw i32 %53, 12, !dbg !19
  %55 = shl nsw i32 %39, 12, !dbg !19
  %56 = extractelement <4 x i32> %44, i64 0, !dbg !16
  %57 = shl nsw i32 %56, 12, !dbg !19
  %58 = extractelement <2 x i32> %23, i64 0, !dbg !20
  %59 = add nsw i32 %58, %46, !dbg !20
  %60 = add nsw i32 %58, %48, !dbg !20
  %61 = extractelement <2 x i32> %26, i64 0, !dbg !20
  %62 = add nsw i32 %61, %49, !dbg !20
  %63 = add nsw i32 %61, %51, !dbg !20
  %64 = extractelement <2 x i32> %29, i64 0, !dbg !20
  %65 = add nsw i32 %64, %52, !dbg !20
  %66 = add nsw i32 %64, %54, !dbg !20
  %67 = extractelement <2 x i32> %32, i64 0, !dbg !20
  %68 = add nsw i32 %67, %55, !dbg !20
  %69 = add nsw i32 %67, %57, !dbg !20
  %70 = sext i32 %59 to i64, !dbg !21
  %71 = getelementptr i64, ptr addrspace(1) %0, i64 %70, !dbg !21
  %72 = sext i32 %60 to i64, !dbg !21
  %73 = getelementptr i64, ptr addrspace(1) %0, i64 %72, !dbg !21
  %74 = sext i32 %62 to i64, !dbg !21
  %75 = getelementptr i64, ptr addrspace(1) %0, i64 %74, !dbg !21
  %76 = sext i32 %63 to i64, !dbg !21
  %77 = getelementptr i64, ptr addrspace(1) %0, i64 %76, !dbg !21
  %78 = sext i32 %65 to i64, !dbg !21
  %79 = getelementptr i64, ptr addrspace(1) %0, i64 %78, !dbg !21
  %80 = sext i32 %66 to i64, !dbg !21
  %81 = getelementptr i64, ptr addrspace(1) %0, i64 %80, !dbg !21
  %82 = sext i32 %68 to i64, !dbg !21
  %83 = getelementptr i64, ptr addrspace(1) %0, i64 %82, !dbg !21
  %84 = sext i32 %69 to i64, !dbg !21
  %85 = getelementptr i64, ptr addrspace(1) %0, i64 %84, !dbg !21
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %71, i1 %34, i1 %34) #2, !dbg !22
  %87 = extractelement <4 x i1> %45, i64 3, !dbg !22
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %73, i1 %87, i1 %87) #2, !dbg !22
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %75, i1 %36, i1 %36) #2, !dbg !22
  %90 = extractelement <4 x i1> %45, i64 2, !dbg !22
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %77, i1 %90, i1 %90) #2, !dbg !22
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %79, i1 %38, i1 %38) #2, !dbg !22
  %93 = extractelement <4 x i1> %45, i64 1, !dbg !22
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %81, i1 %93, i1 %93) #2, !dbg !22
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %83, i1 %40, i1 %40) #2, !dbg !22
  %96 = extractelement <4 x i1> %45, i64 0, !dbg !22
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %85, i1 %96, i1 %96) #2, !dbg !22
  %98 = sext i32 %33 to i64, !dbg !23
  %99 = getelementptr i64, ptr addrspace(1) %1, i64 %98, !dbg !23
  %100 = sext i32 %47 to i64, !dbg !23
  %101 = getelementptr i64, ptr addrspace(1) %1, i64 %100, !dbg !23
  %102 = sext i32 %35 to i64, !dbg !23
  %103 = getelementptr i64, ptr addrspace(1) %1, i64 %102, !dbg !23
  %104 = sext i32 %50 to i64, !dbg !23
  %105 = getelementptr i64, ptr addrspace(1) %1, i64 %104, !dbg !23
  %106 = sext i32 %37 to i64, !dbg !23
  %107 = getelementptr i64, ptr addrspace(1) %1, i64 %106, !dbg !23
  %108 = sext i32 %53 to i64, !dbg !23
  %109 = getelementptr i64, ptr addrspace(1) %1, i64 %108, !dbg !23
  %110 = sext i32 %39 to i64, !dbg !23
  %111 = getelementptr i64, ptr addrspace(1) %1, i64 %110, !dbg !23
  %112 = sext i32 %56 to i64, !dbg !23
  %113 = getelementptr i64, ptr addrspace(1) %1, i64 %112, !dbg !23
  %114 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %99, i1 %34, i1 %34) #2, !dbg !24
  %115 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %101, i1 %87, i1 %87) #2, !dbg !24
  %116 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %103, i1 %36, i1 %36) #2, !dbg !24
  %117 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %105, i1 %90, i1 %90) #2, !dbg !24
  %118 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %107, i1 %38, i1 %38) #2, !dbg !24
  %119 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %109, i1 %93, i1 %93) #2, !dbg !24
  %120 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %111, i1 %40, i1 %40) #2, !dbg !24
  %121 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %113, i1 %96, i1 %96) #2, !dbg !24
  %122 = srem i32 %13, 73728, !dbg !25
  %123 = sub nsw i32 %13, %122, !dbg !25
  %124 = srem i32 %15, 73728, !dbg !25
  %125 = sub nsw i32 %15, %124, !dbg !25
  %126 = add i32 %59, %123, !dbg !26
  %127 = add i32 %60, %123, !dbg !26
  %128 = add i32 %123, %62, !dbg !26
  %129 = add i32 %123, %63, !dbg !26
  %130 = add i32 %65, %125, !dbg !26
  %131 = add i32 %66, %125, !dbg !26
  %132 = add i32 %68, %125, !dbg !26
  %133 = add i32 %69, %125, !dbg !26
  %134 = sext i32 %126 to i64, !dbg !27
  %135 = getelementptr float, ptr addrspace(1) %2, i64 %134, !dbg !27
  %136 = sext i32 %127 to i64, !dbg !27
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %136, !dbg !27
  %138 = sext i32 %128 to i64, !dbg !27
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !27
  %140 = sext i32 %129 to i64, !dbg !27
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %140, !dbg !27
  %142 = sext i32 %130 to i64, !dbg !27
  %143 = getelementptr float, ptr addrspace(1) %2, i64 %142, !dbg !27
  %144 = sext i32 %131 to i64, !dbg !27
  %145 = getelementptr float, ptr addrspace(1) %2, i64 %144, !dbg !27
  %146 = sext i32 %132 to i64, !dbg !27
  %147 = getelementptr float, ptr addrspace(1) %2, i64 %146, !dbg !27
  %148 = sext i32 %133 to i64, !dbg !27
  %149 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !27
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %34, i32 0, i1 %34) #2, !dbg !28
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %87, i32 0, i1 %87) #2, !dbg !28
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %36, i32 0, i1 %36) #2, !dbg !28
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %90, i32 0, i1 %90) #2, !dbg !28
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %38, i32 0, i1 %38) #2, !dbg !28
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %93, i32 0, i1 %93) #2, !dbg !28
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %40, i32 0, i1 %40) #2, !dbg !28
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %96, i32 0, i1 %96) #2, !dbg !28
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !29
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !29
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !29
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !29
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !29
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !29
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !29
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !29
  %166 = icmp sgt i32 %33, 8, !dbg !16
  %167 = icmp sgt i32 %47, 8, !dbg !16
  %168 = icmp sgt i32 %35, 8, !dbg !16
  %169 = icmp sgt i32 %50, 8, !dbg !16
  %170 = icmp sgt i32 %37, 8, !dbg !16
  %171 = icmp sgt i32 %53, 8, !dbg !16
  %172 = icmp sgt i32 %39, 8, !dbg !16
  %173 = icmp sgt i32 %56, 8, !dbg !16
  %174 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %71, i1 %166, i1 %166) #2, !dbg !30
  %175 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %73, i1 %167, i1 %167) #2, !dbg !30
  %176 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %75, i1 %168, i1 %168) #2, !dbg !30
  %177 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %77, i1 %169, i1 %169) #2, !dbg !30
  %178 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %79, i1 %170, i1 %170) #2, !dbg !30
  %179 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %81, i1 %171, i1 %171) #2, !dbg !30
  %180 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %83, i1 %172, i1 %172) #2, !dbg !30
  %181 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %85, i1 %173, i1 %173) #2, !dbg !30
  %182 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %99, i1 %166, i1 %166) #2, !dbg !31
  %183 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %101, i1 %167, i1 %167) #2, !dbg !31
  %184 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %103, i1 %168, i1 %168) #2, !dbg !31
  %185 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %105, i1 %169, i1 %169) #2, !dbg !31
  %186 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %107, i1 %170, i1 %170) #2, !dbg !31
  %187 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %109, i1 %171, i1 %171) #2, !dbg !31
  %188 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %111, i1 %172, i1 %172) #2, !dbg !31
  %189 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %113, i1 %173, i1 %173) #2, !dbg !31
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %166, i32 0, i1 %166) #2, !dbg !32
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %167, i32 0, i1 %167) #2, !dbg !32
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %168, i32 0, i1 %168) #2, !dbg !32
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %169, i32 0, i1 %169) #2, !dbg !32
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %170, i32 0, i1 %170) #2, !dbg !32
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %171, i32 0, i1 %171) #2, !dbg !32
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %172, i32 0, i1 %172) #2, !dbg !32
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %173, i32 0, i1 %173) #2, !dbg !32
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !33
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !33
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !33
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !33
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !33
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !33
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !33
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !33
  %206 = insertelement <16 x i64> poison, i64 %181, i64 0, !dbg !34
  %207 = insertelement <16 x i64> %206, i64 %180, i64 1, !dbg !34
  %208 = insertelement <16 x i64> %207, i64 %179, i64 2, !dbg !34
  %209 = insertelement <16 x i64> %208, i64 %178, i64 3, !dbg !34
  %210 = insertelement <16 x i64> %209, i64 %177, i64 4, !dbg !34
  %211 = insertelement <16 x i64> %210, i64 %176, i64 5, !dbg !34
  %212 = insertelement <16 x i64> %211, i64 %175, i64 6, !dbg !34
  %213 = insertelement <16 x i64> %212, i64 %174, i64 7, !dbg !34
  %214 = insertelement <16 x i64> %213, i64 %97, i64 8, !dbg !34
  %215 = insertelement <16 x i64> %214, i64 %95, i64 9, !dbg !34
  %216 = insertelement <16 x i64> %215, i64 %94, i64 10, !dbg !34
  %217 = insertelement <16 x i64> %216, i64 %92, i64 11, !dbg !34
  %218 = insertelement <16 x i64> %217, i64 %91, i64 12, !dbg !34
  %219 = insertelement <16 x i64> %218, i64 %89, i64 13, !dbg !34
  %220 = insertelement <16 x i64> %219, i64 %88, i64 14, !dbg !34
  %221 = insertelement <16 x i64> %220, i64 %86, i64 15, !dbg !34
  %222 = sitofp <16 x i64> %221 to <16 x float>, !dbg !34
  %223 = insertelement <16 x i64> poison, i64 %189, i64 0, !dbg !35
  %224 = insertelement <16 x i64> %223, i64 %188, i64 1, !dbg !35
  %225 = insertelement <16 x i64> %224, i64 %187, i64 2, !dbg !35
  %226 = insertelement <16 x i64> %225, i64 %186, i64 3, !dbg !35
  %227 = insertelement <16 x i64> %226, i64 %185, i64 4, !dbg !35
  %228 = insertelement <16 x i64> %227, i64 %184, i64 5, !dbg !35
  %229 = insertelement <16 x i64> %228, i64 %183, i64 6, !dbg !35
  %230 = insertelement <16 x i64> %229, i64 %182, i64 7, !dbg !35
  %231 = insertelement <16 x i64> %230, i64 %121, i64 8, !dbg !35
  %232 = insertelement <16 x i64> %231, i64 %120, i64 9, !dbg !35
  %233 = insertelement <16 x i64> %232, i64 %119, i64 10, !dbg !35
  %234 = insertelement <16 x i64> %233, i64 %118, i64 11, !dbg !35
  %235 = insertelement <16 x i64> %234, i64 %117, i64 12, !dbg !35
  %236 = insertelement <16 x i64> %235, i64 %116, i64 13, !dbg !35
  %237 = insertelement <16 x i64> %236, i64 %115, i64 14, !dbg !35
  %238 = insertelement <16 x i64> %237, i64 %114, i64 15, !dbg !35
  %239 = sitofp <16 x i64> %238 to <16 x float>, !dbg !35
  %240 = fadd <16 x float> %222, %239, !dbg !36
  %241 = insertelement <16 x i32> poison, i32 %197, i64 0, !dbg !32
  %242 = insertelement <16 x i32> %241, i32 %196, i64 1, !dbg !32
  %243 = insertelement <16 x i32> %242, i32 %195, i64 2, !dbg !32
  %244 = insertelement <16 x i32> %243, i32 %194, i64 3, !dbg !32
  %245 = insertelement <16 x i32> %244, i32 %193, i64 4, !dbg !32
  %246 = insertelement <16 x i32> %245, i32 %192, i64 5, !dbg !32
  %247 = insertelement <16 x i32> %246, i32 %191, i64 6, !dbg !32
  %248 = insertelement <16 x i32> %247, i32 %190, i64 7, !dbg !32
  %249 = insertelement <16 x i32> %248, i32 %157, i64 8, !dbg !32
  %250 = insertelement <16 x i32> %249, i32 %156, i64 9, !dbg !32
  %251 = insertelement <16 x i32> %250, i32 %155, i64 10, !dbg !32
  %252 = insertelement <16 x i32> %251, i32 %154, i64 11, !dbg !32
  %253 = insertelement <16 x i32> %252, i32 %153, i64 12, !dbg !32
  %254 = insertelement <16 x i32> %253, i32 %152, i64 13, !dbg !32
  %255 = insertelement <16 x i32> %254, i32 %151, i64 14, !dbg !32
  %256 = insertelement <16 x i32> %255, i32 %150, i64 15, !dbg !32
  %257 = bitcast <16 x i32> %256 to <16 x float>, !dbg !32
  %258 = fadd <16 x float> %240, %257, !dbg !37
  %259 = extractelement <16 x float> %258, i64 15, !dbg !29
  %260 = tail call float @llvm.nvvm.floor.ftz.f(float %259), !dbg !29
  %261 = tail call float @llvm.nvvm.floor.f(float %259), !dbg !29
  %262 = extractelement <16 x float> %258, i64 14, !dbg !29
  %263 = tail call float @llvm.nvvm.floor.ftz.f(float %262), !dbg !29
  %264 = tail call float @llvm.nvvm.floor.f(float %262), !dbg !29
  %265 = extractelement <16 x float> %258, i64 13, !dbg !29
  %266 = tail call float @llvm.nvvm.floor.ftz.f(float %265), !dbg !29
  %267 = tail call float @llvm.nvvm.floor.f(float %265), !dbg !29
  %268 = extractelement <16 x float> %258, i64 12, !dbg !29
  %269 = tail call float @llvm.nvvm.floor.ftz.f(float %268), !dbg !29
  %270 = tail call float @llvm.nvvm.floor.f(float %268), !dbg !29
  %271 = extractelement <16 x float> %258, i64 11, !dbg !29
  %272 = tail call float @llvm.nvvm.floor.ftz.f(float %271), !dbg !29
  %273 = tail call float @llvm.nvvm.floor.f(float %271), !dbg !29
  %274 = extractelement <16 x float> %258, i64 10, !dbg !29
  %275 = tail call float @llvm.nvvm.floor.ftz.f(float %274), !dbg !29
  %276 = tail call float @llvm.nvvm.floor.f(float %274), !dbg !29
  %277 = extractelement <16 x float> %258, i64 9, !dbg !29
  %278 = tail call float @llvm.nvvm.floor.ftz.f(float %277), !dbg !29
  %279 = tail call float @llvm.nvvm.floor.f(float %277), !dbg !29
  %280 = extractelement <16 x float> %258, i64 8, !dbg !29
  %281 = tail call float @llvm.nvvm.floor.ftz.f(float %280), !dbg !29
  %282 = tail call float @llvm.nvvm.floor.f(float %280), !dbg !29
  %283 = extractelement <16 x float> %258, i64 7, !dbg !33
  %284 = tail call float @llvm.nvvm.floor.ftz.f(float %283), !dbg !33
  %285 = tail call float @llvm.nvvm.floor.f(float %283), !dbg !33
  %286 = extractelement <16 x float> %258, i64 6, !dbg !33
  %287 = tail call float @llvm.nvvm.floor.ftz.f(float %286), !dbg !33
  %288 = tail call float @llvm.nvvm.floor.f(float %286), !dbg !33
  %289 = extractelement <16 x float> %258, i64 5, !dbg !33
  %290 = tail call float @llvm.nvvm.floor.ftz.f(float %289), !dbg !33
  %291 = tail call float @llvm.nvvm.floor.f(float %289), !dbg !33
  %292 = extractelement <16 x float> %258, i64 4, !dbg !33
  %293 = tail call float @llvm.nvvm.floor.ftz.f(float %292), !dbg !33
  %294 = tail call float @llvm.nvvm.floor.f(float %292), !dbg !33
  %295 = extractelement <16 x float> %258, i64 3, !dbg !33
  %296 = tail call float @llvm.nvvm.floor.ftz.f(float %295), !dbg !33
  %297 = tail call float @llvm.nvvm.floor.f(float %295), !dbg !33
  %298 = extractelement <16 x float> %258, i64 2, !dbg !33
  %299 = tail call float @llvm.nvvm.floor.ftz.f(float %298), !dbg !33
  %300 = tail call float @llvm.nvvm.floor.f(float %298), !dbg !33
  %301 = extractelement <16 x float> %258, i64 1, !dbg !33
  %302 = tail call float @llvm.nvvm.floor.ftz.f(float %301), !dbg !33
  %303 = tail call float @llvm.nvvm.floor.f(float %301), !dbg !33
  %304 = extractelement <16 x float> %258, i64 0, !dbg !33
  %305 = tail call float @llvm.nvvm.floor.ftz.f(float %304), !dbg !33
  %306 = tail call float @llvm.nvvm.floor.f(float %304), !dbg !33
  %307 = insertelement <16 x i32> poison, i32 %205, i64 0, !dbg !33
  %308 = insertelement <16 x i32> %307, i32 %204, i64 1, !dbg !33
  %309 = insertelement <16 x i32> %308, i32 %203, i64 2, !dbg !33
  %310 = insertelement <16 x i32> %309, i32 %202, i64 3, !dbg !33
  %311 = insertelement <16 x i32> %310, i32 %201, i64 4, !dbg !33
  %312 = insertelement <16 x i32> %311, i32 %200, i64 5, !dbg !33
  %313 = insertelement <16 x i32> %312, i32 %199, i64 6, !dbg !33
  %314 = insertelement <16 x i32> %313, i32 %198, i64 7, !dbg !33
  %315 = insertelement <16 x i32> %314, i32 %165, i64 8, !dbg !33
  %316 = insertelement <16 x i32> %315, i32 %164, i64 9, !dbg !33
  %317 = insertelement <16 x i32> %316, i32 %163, i64 10, !dbg !33
  %318 = insertelement <16 x i32> %317, i32 %162, i64 11, !dbg !33
  %319 = insertelement <16 x i32> %318, i32 %161, i64 12, !dbg !33
  %320 = insertelement <16 x i32> %319, i32 %160, i64 13, !dbg !33
  %321 = insertelement <16 x i32> %320, i32 %159, i64 14, !dbg !33
  %322 = insertelement <16 x i32> %321, i32 %158, i64 15, !dbg !33
  %323 = icmp eq <16 x i32> %322, zeroinitializer, !dbg !33
  %324 = insertelement <16 x float> poison, float %306, i64 0, !dbg !33
  %325 = insertelement <16 x float> %324, float %303, i64 1, !dbg !33
  %326 = insertelement <16 x float> %325, float %300, i64 2, !dbg !33
  %327 = insertelement <16 x float> %326, float %297, i64 3, !dbg !33
  %328 = insertelement <16 x float> %327, float %294, i64 4, !dbg !33
  %329 = insertelement <16 x float> %328, float %291, i64 5, !dbg !33
  %330 = insertelement <16 x float> %329, float %288, i64 6, !dbg !33
  %331 = insertelement <16 x float> %330, float %285, i64 7, !dbg !33
  %332 = insertelement <16 x float> %331, float %282, i64 8, !dbg !33
  %333 = insertelement <16 x float> %332, float %279, i64 9, !dbg !33
  %334 = insertelement <16 x float> %333, float %276, i64 10, !dbg !33
  %335 = insertelement <16 x float> %334, float %273, i64 11, !dbg !33
  %336 = insertelement <16 x float> %335, float %270, i64 12, !dbg !33
  %337 = insertelement <16 x float> %336, float %267, i64 13, !dbg !33
  %338 = insertelement <16 x float> %337, float %264, i64 14, !dbg !33
  %339 = insertelement <16 x float> %338, float %261, i64 15, !dbg !33
  %340 = insertelement <16 x float> poison, float %305, i64 0, !dbg !33
  %341 = insertelement <16 x float> %340, float %302, i64 1, !dbg !33
  %342 = insertelement <16 x float> %341, float %299, i64 2, !dbg !33
  %343 = insertelement <16 x float> %342, float %296, i64 3, !dbg !33
  %344 = insertelement <16 x float> %343, float %293, i64 4, !dbg !33
  %345 = insertelement <16 x float> %344, float %290, i64 5, !dbg !33
  %346 = insertelement <16 x float> %345, float %287, i64 6, !dbg !33
  %347 = insertelement <16 x float> %346, float %284, i64 7, !dbg !33
  %348 = insertelement <16 x float> %347, float %281, i64 8, !dbg !33
  %349 = insertelement <16 x float> %348, float %278, i64 9, !dbg !33
  %350 = insertelement <16 x float> %349, float %275, i64 10, !dbg !33
  %351 = insertelement <16 x float> %350, float %272, i64 11, !dbg !33
  %352 = insertelement <16 x float> %351, float %269, i64 12, !dbg !33
  %353 = insertelement <16 x float> %352, float %266, i64 13, !dbg !33
  %354 = insertelement <16 x float> %353, float %263, i64 14, !dbg !33
  %355 = insertelement <16 x float> %354, float %260, i64 15, !dbg !33
  %356 = select <16 x i1> %323, <16 x float> %339, <16 x float> %355, !dbg !33
  %357 = fcmp ole <16 x float> %356, zeroinitializer, !dbg !38
  %358 = select <16 x i1> %357, <16 x float> zeroinitializer, <16 x float> %356, !dbg !38
  %359 = extractelement <16 x float> %358, i64 15, !dbg !42
  %360 = fcmp olt float %359, 6.500000e+01, !dbg !42
  %361 = extractelement <16 x float> %358, i64 14, !dbg !42
  %362 = fcmp olt float %361, 6.500000e+01, !dbg !42
  %363 = extractelement <16 x float> %358, i64 13, !dbg !42
  %364 = fcmp olt float %363, 6.500000e+01, !dbg !42
  %365 = extractelement <16 x float> %358, i64 12, !dbg !42
  %366 = fcmp olt float %365, 6.500000e+01, !dbg !42
  %367 = extractelement <16 x float> %358, i64 11, !dbg !42
  %368 = fcmp olt float %367, 6.500000e+01, !dbg !42
  %369 = extractelement <16 x float> %358, i64 10, !dbg !42
  %370 = fcmp olt float %369, 6.500000e+01, !dbg !42
  %371 = extractelement <16 x float> %358, i64 9, !dbg !42
  %372 = fcmp olt float %371, 6.500000e+01, !dbg !42
  %373 = extractelement <16 x float> %358, i64 8, !dbg !42
  %374 = fcmp olt float %373, 6.500000e+01, !dbg !42
  %375 = fcmp uno <16 x float> %358, zeroinitializer, !dbg !44
  %376 = extractelement <16 x i1> %375, i64 15, !dbg !46
  %377 = or i1 %360, %376, !dbg !46
  %378 = extractelement <16 x i1> %375, i64 14, !dbg !46
  %379 = or i1 %362, %378, !dbg !46
  %380 = extractelement <16 x i1> %375, i64 13, !dbg !46
  %381 = or i1 %364, %380, !dbg !46
  %382 = extractelement <16 x i1> %375, i64 12, !dbg !46
  %383 = or i1 %366, %382, !dbg !46
  %384 = extractelement <16 x i1> %375, i64 11, !dbg !46
  %385 = or i1 %368, %384, !dbg !46
  %386 = extractelement <16 x i1> %375, i64 10, !dbg !46
  %387 = or i1 %370, %386, !dbg !46
  %388 = extractelement <16 x i1> %375, i64 9, !dbg !46
  %389 = or i1 %372, %388, !dbg !46
  %390 = extractelement <16 x i1> %375, i64 8, !dbg !46
  %391 = or i1 %374, %390, !dbg !46
  %392 = select i1 %377, float %359, float 6.500000e+01, !dbg !47
  %393 = select i1 %379, float %361, float 6.500000e+01, !dbg !47
  %394 = select i1 %381, float %363, float 6.500000e+01, !dbg !47
  %395 = select i1 %383, float %365, float 6.500000e+01, !dbg !47
  %396 = select i1 %385, float %367, float 6.500000e+01, !dbg !47
  %397 = select i1 %387, float %369, float 6.500000e+01, !dbg !47
  %398 = select i1 %389, float %371, float 6.500000e+01, !dbg !47
  %399 = select i1 %391, float %373, float 6.500000e+01, !dbg !47
  %400 = extractelement <16 x float> %358, i64 7, !dbg !48
  %401 = fcmp olt float %400, 6.500000e+01, !dbg !48
  %402 = extractelement <16 x float> %358, i64 6, !dbg !48
  %403 = fcmp olt float %402, 6.500000e+01, !dbg !48
  %404 = extractelement <16 x float> %358, i64 5, !dbg !48
  %405 = fcmp olt float %404, 6.500000e+01, !dbg !48
  %406 = extractelement <16 x float> %358, i64 4, !dbg !48
  %407 = fcmp olt float %406, 6.500000e+01, !dbg !48
  %408 = extractelement <16 x float> %358, i64 3, !dbg !48
  %409 = fcmp olt float %408, 6.500000e+01, !dbg !48
  %410 = extractelement <16 x float> %358, i64 2, !dbg !48
  %411 = fcmp olt float %410, 6.500000e+01, !dbg !48
  %412 = extractelement <16 x float> %358, i64 1, !dbg !48
  %413 = fcmp olt float %412, 6.500000e+01, !dbg !48
  %414 = extractelement <16 x float> %358, i64 0, !dbg !48
  %415 = fcmp olt float %414, 6.500000e+01, !dbg !48
  %416 = extractelement <16 x i1> %375, i64 7, !dbg !49
  %417 = or i1 %401, %416, !dbg !49
  %418 = extractelement <16 x i1> %375, i64 6, !dbg !49
  %419 = or i1 %403, %418, !dbg !49
  %420 = extractelement <16 x i1> %375, i64 5, !dbg !49
  %421 = or i1 %405, %420, !dbg !49
  %422 = extractelement <16 x i1> %375, i64 4, !dbg !49
  %423 = or i1 %407, %422, !dbg !49
  %424 = extractelement <16 x i1> %375, i64 3, !dbg !49
  %425 = or i1 %409, %424, !dbg !49
  %426 = extractelement <16 x i1> %375, i64 2, !dbg !49
  %427 = or i1 %411, %426, !dbg !49
  %428 = extractelement <16 x i1> %375, i64 1, !dbg !49
  %429 = or i1 %413, %428, !dbg !49
  %430 = extractelement <16 x i1> %375, i64 0, !dbg !49
  %431 = or i1 %415, %430, !dbg !49
  %432 = select i1 %417, float %400, float 6.500000e+01, !dbg !50
  %433 = select i1 %419, float %402, float 6.500000e+01, !dbg !50
  %434 = select i1 %421, float %404, float 6.500000e+01, !dbg !50
  %435 = select i1 %423, float %406, float 6.500000e+01, !dbg !50
  %436 = select i1 %425, float %408, float 6.500000e+01, !dbg !50
  %437 = select i1 %427, float %410, float 6.500000e+01, !dbg !50
  %438 = select i1 %429, float %412, float 6.500000e+01, !dbg !50
  %439 = select i1 %431, float %414, float 6.500000e+01, !dbg !50
  %440 = select i1 %34, float %392, float %432, !dbg !51
  %441 = select i1 %87, float %393, float %433, !dbg !51
  %442 = select i1 %36, float %394, float %434, !dbg !51
  %443 = select i1 %90, float %395, float %435, !dbg !51
  %444 = select i1 %38, float %396, float %436, !dbg !51
  %445 = select i1 %93, float %397, float %437, !dbg !51
  %446 = select i1 %40, float %398, float %438, !dbg !51
  %447 = select i1 %96, float %399, float %439, !dbg !51
  %448 = fadd <16 x float> %356, splat (float 1.000000e+00), !dbg !52
  %449 = shufflevector <16 x float> %258, <16 x float> %448, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !53
  %450 = fcmp ole <32 x float> %449, zeroinitializer, !dbg !53
  %451 = select <32 x i1> %450, <32 x float> zeroinitializer, <32 x float> %449, !dbg !53
  %452 = extractelement <32 x float> %451, i64 31, !dbg !55
  %453 = fcmp uno float %452, 0.000000e+00, !dbg !55
  %454 = extractelement <32 x float> %451, i64 30, !dbg !55
  %455 = fcmp uno float %454, 0.000000e+00, !dbg !55
  %456 = extractelement <32 x float> %451, i64 29, !dbg !55
  %457 = fcmp uno float %456, 0.000000e+00, !dbg !55
  %458 = extractelement <32 x float> %451, i64 28, !dbg !55
  %459 = fcmp uno float %458, 0.000000e+00, !dbg !55
  %460 = extractelement <32 x float> %451, i64 27, !dbg !55
  %461 = fcmp uno float %460, 0.000000e+00, !dbg !55
  %462 = extractelement <32 x float> %451, i64 26, !dbg !55
  %463 = fcmp uno float %462, 0.000000e+00, !dbg !55
  %464 = extractelement <32 x float> %451, i64 25, !dbg !55
  %465 = fcmp uno float %464, 0.000000e+00, !dbg !55
  %466 = extractelement <32 x float> %451, i64 24, !dbg !55
  %467 = fcmp uno float %466, 0.000000e+00, !dbg !55
  %468 = fcmp olt <32 x float> %451, splat (float 6.500000e+01), !dbg !57
  %469 = extractelement <32 x i1> %468, i64 31, !dbg !59
  %470 = or i1 %469, %453, !dbg !59
  %471 = extractelement <32 x i1> %468, i64 30, !dbg !59
  %472 = or i1 %471, %455, !dbg !59
  %473 = extractelement <32 x i1> %468, i64 29, !dbg !59
  %474 = or i1 %473, %457, !dbg !59
  %475 = extractelement <32 x i1> %468, i64 28, !dbg !59
  %476 = or i1 %475, %459, !dbg !59
  %477 = extractelement <32 x i1> %468, i64 27, !dbg !59
  %478 = or i1 %477, %461, !dbg !59
  %479 = extractelement <32 x i1> %468, i64 26, !dbg !59
  %480 = or i1 %479, %463, !dbg !59
  %481 = extractelement <32 x i1> %468, i64 25, !dbg !59
  %482 = or i1 %481, %465, !dbg !59
  %483 = extractelement <32 x i1> %468, i64 24, !dbg !59
  %484 = or i1 %483, %467, !dbg !59
  %485 = select i1 %470, float %452, float 6.500000e+01, !dbg !60
  %486 = select i1 %472, float %454, float 6.500000e+01, !dbg !60
  %487 = select i1 %474, float %456, float 6.500000e+01, !dbg !60
  %488 = select i1 %476, float %458, float 6.500000e+01, !dbg !60
  %489 = select i1 %478, float %460, float 6.500000e+01, !dbg !60
  %490 = select i1 %480, float %462, float 6.500000e+01, !dbg !60
  %491 = select i1 %482, float %464, float 6.500000e+01, !dbg !60
  %492 = select i1 %484, float %466, float 6.500000e+01, !dbg !60
  %493 = extractelement <32 x float> %451, i64 23, !dbg !61
  %494 = fcmp uno float %493, 0.000000e+00, !dbg !61
  %495 = extractelement <32 x float> %451, i64 22, !dbg !61
  %496 = fcmp uno float %495, 0.000000e+00, !dbg !61
  %497 = extractelement <32 x float> %451, i64 21, !dbg !61
  %498 = fcmp uno float %497, 0.000000e+00, !dbg !61
  %499 = extractelement <32 x float> %451, i64 20, !dbg !61
  %500 = fcmp uno float %499, 0.000000e+00, !dbg !61
  %501 = extractelement <32 x float> %451, i64 19, !dbg !61
  %502 = fcmp uno float %501, 0.000000e+00, !dbg !61
  %503 = extractelement <32 x float> %451, i64 18, !dbg !61
  %504 = fcmp uno float %503, 0.000000e+00, !dbg !61
  %505 = extractelement <32 x float> %451, i64 17, !dbg !61
  %506 = fcmp uno float %505, 0.000000e+00, !dbg !61
  %507 = extractelement <32 x float> %451, i64 16, !dbg !61
  %508 = fcmp uno float %507, 0.000000e+00, !dbg !61
  %509 = extractelement <32 x i1> %468, i64 23, !dbg !63
  %510 = or i1 %509, %494, !dbg !63
  %511 = extractelement <32 x i1> %468, i64 22, !dbg !63
  %512 = or i1 %511, %496, !dbg !63
  %513 = extractelement <32 x i1> %468, i64 21, !dbg !63
  %514 = or i1 %513, %498, !dbg !63
  %515 = extractelement <32 x i1> %468, i64 20, !dbg !63
  %516 = or i1 %515, %500, !dbg !63
  %517 = extractelement <32 x i1> %468, i64 19, !dbg !63
  %518 = or i1 %517, %502, !dbg !63
  %519 = extractelement <32 x i1> %468, i64 18, !dbg !63
  %520 = or i1 %519, %504, !dbg !63
  %521 = extractelement <32 x i1> %468, i64 17, !dbg !63
  %522 = or i1 %521, %506, !dbg !63
  %523 = extractelement <32 x i1> %468, i64 16, !dbg !63
  %524 = or i1 %523, %508, !dbg !63
  %525 = select i1 %510, float %493, float 6.500000e+01, !dbg !64
  %526 = select i1 %512, float %495, float 6.500000e+01, !dbg !64
  %527 = select i1 %514, float %497, float 6.500000e+01, !dbg !64
  %528 = select i1 %516, float %499, float 6.500000e+01, !dbg !64
  %529 = select i1 %518, float %501, float 6.500000e+01, !dbg !64
  %530 = select i1 %520, float %503, float 6.500000e+01, !dbg !64
  %531 = select i1 %522, float %505, float 6.500000e+01, !dbg !64
  %532 = select i1 %524, float %507, float 6.500000e+01, !dbg !64
  %533 = select i1 %34, float %485, float %525, !dbg !51
  %534 = select i1 %87, float %486, float %526, !dbg !51
  %535 = select i1 %36, float %487, float %527, !dbg !51
  %536 = select i1 %90, float %488, float %528, !dbg !51
  %537 = select i1 %38, float %489, float %529, !dbg !51
  %538 = select i1 %93, float %490, float %530, !dbg !51
  %539 = select i1 %40, float %491, float %531, !dbg !51
  %540 = select i1 %96, float %492, float %532, !dbg !51
  %541 = extractelement <32 x float> %451, i64 15, !dbg !65
  %542 = fcmp uno float %541, 0.000000e+00, !dbg !65
  %543 = extractelement <32 x float> %451, i64 14, !dbg !65
  %544 = fcmp uno float %543, 0.000000e+00, !dbg !65
  %545 = extractelement <32 x float> %451, i64 13, !dbg !65
  %546 = fcmp uno float %545, 0.000000e+00, !dbg !65
  %547 = extractelement <32 x float> %451, i64 12, !dbg !65
  %548 = fcmp uno float %547, 0.000000e+00, !dbg !65
  %549 = extractelement <32 x float> %451, i64 11, !dbg !65
  %550 = fcmp uno float %549, 0.000000e+00, !dbg !65
  %551 = extractelement <32 x float> %451, i64 10, !dbg !65
  %552 = fcmp uno float %551, 0.000000e+00, !dbg !65
  %553 = extractelement <32 x float> %451, i64 9, !dbg !65
  %554 = fcmp uno float %553, 0.000000e+00, !dbg !65
  %555 = extractelement <32 x float> %451, i64 8, !dbg !65
  %556 = fcmp uno float %555, 0.000000e+00, !dbg !65
  %557 = extractelement <32 x i1> %468, i64 15, !dbg !67
  %558 = or i1 %557, %542, !dbg !67
  %559 = extractelement <32 x i1> %468, i64 14, !dbg !67
  %560 = or i1 %559, %544, !dbg !67
  %561 = extractelement <32 x i1> %468, i64 13, !dbg !67
  %562 = or i1 %561, %546, !dbg !67
  %563 = extractelement <32 x i1> %468, i64 12, !dbg !67
  %564 = or i1 %563, %548, !dbg !67
  %565 = extractelement <32 x i1> %468, i64 11, !dbg !67
  %566 = or i1 %565, %550, !dbg !67
  %567 = extractelement <32 x i1> %468, i64 10, !dbg !67
  %568 = or i1 %567, %552, !dbg !67
  %569 = extractelement <32 x i1> %468, i64 9, !dbg !67
  %570 = or i1 %569, %554, !dbg !67
  %571 = extractelement <32 x i1> %468, i64 8, !dbg !67
  %572 = or i1 %571, %556, !dbg !67
  %573 = select i1 %558, float %541, float 6.500000e+01, !dbg !68
  %574 = select i1 %560, float %543, float 6.500000e+01, !dbg !68
  %575 = select i1 %562, float %545, float 6.500000e+01, !dbg !68
  %576 = select i1 %564, float %547, float 6.500000e+01, !dbg !68
  %577 = select i1 %566, float %549, float 6.500000e+01, !dbg !68
  %578 = select i1 %568, float %551, float 6.500000e+01, !dbg !68
  %579 = select i1 %570, float %553, float 6.500000e+01, !dbg !68
  %580 = select i1 %572, float %555, float 6.500000e+01, !dbg !68
  %581 = extractelement <32 x float> %451, i64 7, !dbg !69
  %582 = fcmp uno float %581, 0.000000e+00, !dbg !69
  %583 = extractelement <32 x float> %451, i64 6, !dbg !69
  %584 = fcmp uno float %583, 0.000000e+00, !dbg !69
  %585 = extractelement <32 x float> %451, i64 5, !dbg !69
  %586 = fcmp uno float %585, 0.000000e+00, !dbg !69
  %587 = extractelement <32 x float> %451, i64 4, !dbg !69
  %588 = fcmp uno float %587, 0.000000e+00, !dbg !69
  %589 = extractelement <32 x float> %451, i64 3, !dbg !69
  %590 = fcmp uno float %589, 0.000000e+00, !dbg !69
  %591 = extractelement <32 x float> %451, i64 2, !dbg !69
  %592 = fcmp uno float %591, 0.000000e+00, !dbg !69
  %593 = extractelement <32 x float> %451, i64 1, !dbg !69
  %594 = fcmp uno float %593, 0.000000e+00, !dbg !69
  %595 = extractelement <32 x float> %451, i64 0, !dbg !69
  %596 = fcmp uno float %595, 0.000000e+00, !dbg !69
  %597 = extractelement <32 x i1> %468, i64 7, !dbg !70
  %598 = or i1 %597, %582, !dbg !70
  %599 = extractelement <32 x i1> %468, i64 6, !dbg !70
  %600 = or i1 %599, %584, !dbg !70
  %601 = extractelement <32 x i1> %468, i64 5, !dbg !70
  %602 = or i1 %601, %586, !dbg !70
  %603 = extractelement <32 x i1> %468, i64 4, !dbg !70
  %604 = or i1 %603, %588, !dbg !70
  %605 = extractelement <32 x i1> %468, i64 3, !dbg !70
  %606 = or i1 %605, %590, !dbg !70
  %607 = extractelement <32 x i1> %468, i64 2, !dbg !70
  %608 = or i1 %607, %592, !dbg !70
  %609 = extractelement <32 x i1> %468, i64 1, !dbg !70
  %610 = or i1 %609, %594, !dbg !70
  %611 = extractelement <32 x i1> %468, i64 0, !dbg !70
  %612 = or i1 %611, %596, !dbg !70
  %613 = select i1 %598, float %581, float 6.500000e+01, !dbg !71
  %614 = select i1 %600, float %583, float 6.500000e+01, !dbg !71
  %615 = select i1 %602, float %585, float 6.500000e+01, !dbg !71
  %616 = select i1 %604, float %587, float 6.500000e+01, !dbg !71
  %617 = select i1 %606, float %589, float 6.500000e+01, !dbg !71
  %618 = select i1 %608, float %591, float 6.500000e+01, !dbg !71
  %619 = select i1 %610, float %593, float 6.500000e+01, !dbg !71
  %620 = select i1 %612, float %595, float 6.500000e+01, !dbg !71
  %621 = select i1 %34, float %573, float %613, !dbg !51
  %622 = select i1 %87, float %574, float %614, !dbg !51
  %623 = select i1 %36, float %575, float %615, !dbg !51
  %624 = select i1 %90, float %576, float %616, !dbg !51
  %625 = select i1 %38, float %577, float %617, !dbg !51
  %626 = select i1 %93, float %578, float %618, !dbg !51
  %627 = select i1 %40, float %579, float %619, !dbg !51
  %628 = select i1 %96, float %580, float %620, !dbg !51
  %629 = sext i32 %13 to i64, !dbg !72
  %630 = getelementptr float, ptr addrspace(1) %3, i64 %629, !dbg !72
  %631 = sext i32 %15 to i64, !dbg !72
  %632 = getelementptr float, ptr addrspace(1) %3, i64 %631, !dbg !72
  %633 = bitcast float %440 to i32, !dbg !73
  %634 = bitcast float %441 to i32, !dbg !73
  %635 = bitcast float %442 to i32, !dbg !73
  %636 = bitcast float %443 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %633, i32 %634, i32 %635, i32 %636, ptr addrspace(1) %630, i1 true) #2, !dbg !73
  %637 = bitcast float %444 to i32, !dbg !73
  %638 = bitcast float %445 to i32, !dbg !73
  %639 = bitcast float %446 to i32, !dbg !73
  %640 = bitcast float %447 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %637, i32 %638, i32 %639, i32 %640, ptr addrspace(1) %632, i1 true) #2, !dbg !73
  %641 = getelementptr float, ptr addrspace(1) %4, i64 %629, !dbg !74
  %642 = getelementptr float, ptr addrspace(1) %4, i64 %631, !dbg !74
  %643 = bitcast float %533 to i32, !dbg !75
  %644 = bitcast float %534 to i32, !dbg !75
  %645 = bitcast float %535 to i32, !dbg !75
  %646 = bitcast float %536 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %643, i32 %644, i32 %645, i32 %646, ptr addrspace(1) %641, i1 true) #2, !dbg !75
  %647 = bitcast float %537 to i32, !dbg !75
  %648 = bitcast float %538 to i32, !dbg !75
  %649 = bitcast float %539 to i32, !dbg !75
  %650 = bitcast float %540 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %647, i32 %648, i32 %649, i32 %650, ptr addrspace(1) %642, i1 true) #2, !dbg !75
  %651 = getelementptr float, ptr addrspace(1) %5, i64 %629, !dbg !76
  %652 = getelementptr float, ptr addrspace(1) %5, i64 %631, !dbg !76
  %653 = bitcast float %621 to i32, !dbg !77
  %654 = bitcast float %622 to i32, !dbg !77
  %655 = bitcast float %623 to i32, !dbg !77
  %656 = bitcast float %624 to i32, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %653, i32 %654, i32 %655, i32 %656, ptr addrspace(1) %651, i1 true) #2, !dbg !77
  %657 = bitcast float %625 to i32, !dbg !77
  %658 = bitcast float %626 to i32, !dbg !77
  %659 = bitcast float %627 to i32, !dbg !77
  %660 = bitcast float %628 to i32, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %657, i32 %658, i32 %659, i32 %660, ptr addrspace(1) %652, i1 true) #2, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cggxtlnbiwd4awln3w7qpphbadxqiyptuvdrtaftmbvy4gulaliw.py", directory: "inductor_cache/gg")
!4 = !{ptr @triton_poi_fused_cat_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_4", linkageName: "triton_poi_fused_cat_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 47, column: 20, scope: !7)
!17 = !DILocation(line: 32, column: 18, scope: !7)
!18 = !DILocation(line: 24, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 41, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 47, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 35, scope: !7)
!25 = !DILocation(line: 38, column: 54, scope: !7)
!26 = !DILocation(line: 38, column: 48, scope: !7)
!27 = !DILocation(line: 38, column: 31, scope: !7)
!28 = !DILocation(line: 38, column: 59, scope: !7)
!29 = !DILocation(line: 40, column: 28, scope: !7)
!30 = !DILocation(line: 50, column: 63, scope: !7)
!31 = !DILocation(line: 52, column: 49, scope: !7)
!32 = !DILocation(line: 55, column: 74, scope: !7)
!33 = !DILocation(line: 57, column: 28, scope: !7)
!34 = !DILocation(line: 51, column: 21, scope: !7)
!35 = !DILocation(line: 53, column: 21, scope: !7)
!36 = !DILocation(line: 54, column: 20, scope: !7)
!37 = !DILocation(line: 56, column: 20, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 59, column: 42, scope: !7)
!42 = !DILocation(line: 110, column: 15, scope: !39, inlinedAt: !43)
!43 = !DILocation(line: 44, column: 42, scope: !7)
!44 = !DILocation(line: 112, column: 21, scope: !39, inlinedAt: !45)
!45 = !DILocation(line: 61, column: 42, scope: !7)
!46 = !DILocation(line: 112, column: 16, scope: !39, inlinedAt: !43)
!47 = !DILocation(line: 113, column: 29, scope: !39, inlinedAt: !43)
!48 = !DILocation(line: 110, column: 15, scope: !39, inlinedAt: !45)
!49 = !DILocation(line: 112, column: 16, scope: !39, inlinedAt: !45)
!50 = !DILocation(line: 113, column: 29, scope: !39, inlinedAt: !45)
!51 = !DILocation(line: 0, scope: !7)
!52 = !DILocation(line: 72, column: 20, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !54)
!54 = !DILocation(line: 82, column: 42, scope: !7)
!55 = !DILocation(line: 112, column: 21, scope: !39, inlinedAt: !56)
!56 = !DILocation(line: 68, column: 42, scope: !7)
!57 = !DILocation(line: 110, column: 15, scope: !39, inlinedAt: !58)
!58 = !DILocation(line: 83, column: 42, scope: !7)
!59 = !DILocation(line: 112, column: 16, scope: !39, inlinedAt: !56)
!60 = !DILocation(line: 113, column: 29, scope: !39, inlinedAt: !56)
!61 = !DILocation(line: 112, column: 21, scope: !39, inlinedAt: !62)
!62 = !DILocation(line: 74, column: 42, scope: !7)
!63 = !DILocation(line: 112, column: 16, scope: !39, inlinedAt: !62)
!64 = !DILocation(line: 113, column: 29, scope: !39, inlinedAt: !62)
!65 = !DILocation(line: 112, column: 21, scope: !39, inlinedAt: !66)
!66 = !DILocation(line: 79, column: 42, scope: !7)
!67 = !DILocation(line: 112, column: 16, scope: !39, inlinedAt: !66)
!68 = !DILocation(line: 113, column: 29, scope: !39, inlinedAt: !66)
!69 = !DILocation(line: 112, column: 21, scope: !39, inlinedAt: !58)
!70 = !DILocation(line: 112, column: 16, scope: !39, inlinedAt: !58)
!71 = !DILocation(line: 113, column: 29, scope: !39, inlinedAt: !58)
!72 = !DILocation(line: 87, column: 25, scope: !7)
!73 = !DILocation(line: 87, column: 37, scope: !7)
!74 = !DILocation(line: 88, column: 25, scope: !7)
!75 = !DILocation(line: 88, column: 37, scope: !7)
!76 = !DILocation(line: 89, column: 25, scope: !7)
!77 = !DILocation(line: 89, column: 37, scope: !7)
!78 = !DILocation(line: 89, column: 4, scope: !7)
