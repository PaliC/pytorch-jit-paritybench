; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit21 = lshr i32 %12, 3, !dbg !12
  %13 = and i32 %.lobit21, 3, !dbg !12
  %14 = and i32 %12, 32, !dbg !12
  %15 = lshr exact i32 %14, 3, !dbg !12
  %16 = or disjoint i32 %13, %15, !dbg !12
  %17 = and i32 %12, 64, !dbg !12
  %18 = lshr exact i32 %17, 3, !dbg !12
  %19 = or disjoint i32 %16, %18, !dbg !12
  %20 = shl i32 %12, 2, !dbg !12
  %21 = and i32 %20, 12, !dbg !12
  %22 = or disjoint i32 %19, %11, !dbg !13
  %23 = or disjoint i32 %11, %21, !dbg !13
  %24 = icmp slt i32 %22, 16, !dbg !14
  %25 = icmp slt i32 %23, 16, !dbg !14
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %27 = shl i32 %26, 5, !dbg !16
  %28 = and i32 %20, 28, !dbg !17
  %29 = lshr i32 %12, 2, !dbg !17
  %.lobit1 = and i32 %29, 1, !dbg !17
  %30 = lshr i32 %12, 2, !dbg !17
  %31 = and i32 %30, 2, !dbg !17
  %32 = or disjoint i32 %.lobit1, %31, !dbg !17
  %33 = lshr i32 %12, 2, !dbg !17
  %34 = and i32 %33, 4, !dbg !17
  %35 = or disjoint i32 %32, %34, !dbg !17
  %36 = lshr exact i32 %14, 2, !dbg !17
  %37 = or disjoint i32 %35, %36, !dbg !17
  %38 = lshr exact i32 %17, 2, !dbg !17
  %39 = or disjoint i32 %37, %38, !dbg !17
  %40 = or disjoint i32 %27, %28, !dbg !18
  %41 = or disjoint i32 %39, %27, !dbg !18
  %42 = icmp slt i32 %40, 64, !dbg !19
  %43 = icmp slt i32 %41, 64, !dbg !19
  %44 = shl i32 %22, 6, !dbg !20
  %45 = add i32 %40, %44, !dbg !21
  %46 = sext i32 %45 to i64, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !22
  %48 = and i1 %24, %42, !dbg !23
  %49 = and i1 %25, %43, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %48) #4, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %55 = shl i32 %12, 6, !dbg !24
  %56 = and i32 %55, 448, !dbg !24
  %57 = or disjoint i32 %13, %56, !dbg !24
  %58 = or disjoint i32 %57, %15, !dbg !24
  %59 = or disjoint i32 %58, %18, !dbg !24
  %60 = and i32 %20, 508, !dbg !24
  %61 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %56, !dbg !24
  %62 = getelementptr inbounds float, ptr addrspace(3) %61, i32 %59, !dbg !24
  %63 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 true) #4, !dbg !24
  %64 = or disjoint i32 %59, 16, !dbg !24
  %65 = lshr i32 %64, 2, !dbg !24
  %66 = and i32 %65, 1073741820, !dbg !24
  %67 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %66, !dbg !24
  %68 = getelementptr inbounds float, ptr addrspace(3) %67, i32 %64, !dbg !24
  %69 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #4, !dbg !24
  %70 = or disjoint i32 %59, 32, !dbg !24
  %71 = lshr i32 %70, 2, !dbg !24
  %72 = and i32 %71, 1073741820, !dbg !24
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %72, !dbg !24
  %74 = getelementptr inbounds float, ptr addrspace(3) %73, i32 %70, !dbg !24
  %75 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #4, !dbg !24
  %76 = or disjoint i32 %59, 48, !dbg !24
  %77 = lshr i32 %76, 2, !dbg !24
  %78 = and i32 %77, 1073741820, !dbg !24
  %79 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %78, !dbg !24
  %80 = getelementptr inbounds float, ptr addrspace(3) %79, i32 %76, !dbg !24
  %81 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %82 = and i32 %12, 124, !dbg !24
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %82, !dbg !24
  %84 = getelementptr inbounds float, ptr addrspace(3) %83, i32 %60, !dbg !24
  %85 = load <4 x float>, ptr addrspace(3) %84, align 16, !dbg !24
  %86 = shl i32 %41, 2, !dbg !25
  %87 = shl i32 %23, 6, !dbg !26
  %88 = add i32 %86, %87, !dbg !27
  %89 = sext i32 %88 to i64, !dbg !28
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !28
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 %49) #4, !dbg !29
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %2, i1 %25) #4, !dbg !30
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %3, i1 %25) #4, !dbg !31
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !31
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !31
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !31
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !31
  %98 = bitcast i32 %94 to float, !dbg !31
  %99 = bitcast i32 %95 to float, !dbg !31
  %100 = bitcast i32 %96 to float, !dbg !31
  %101 = bitcast i32 %97 to float, !dbg !31
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %4, i1 %25) #4, !dbg !32
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %5, i1 %25) #4, !dbg !33
  %104 = fadd float %98, 0x3EE4F8B580000000, !dbg !34
  %105 = fadd float %99, 0x3EE4F8B580000000, !dbg !34
  %106 = fadd float %100, 0x3EE4F8B580000000, !dbg !34
  %107 = fadd float %101, 0x3EE4F8B580000000, !dbg !34
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %108, 0, !dbg !35
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %109, 0, !dbg !35
  br i1 %.not.i, label %115, label %110, !dbg !35

110:                                              ; preds = %9
  br i1 %.not1.i, label %113, label %111, !dbg !35

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

115:                                              ; preds = %9
  br i1 %.not1.i, label %118, label %116, !dbg !35

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %111, %113, %116, %118
  %.0.i = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !35
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i6 = icmp eq i32 %120, 0, !dbg !35
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i9 = icmp eq i32 %121, 0, !dbg !35
  br i1 %.not.i6, label %127, label %122, !dbg !35

122:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %125, label %123, !dbg !35

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

127:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %130, label %128, !dbg !35

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

__nv_sqrtf.exit10:                                ; preds = %123, %125, %128, %130
  %.0.i8 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !35
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i11 = icmp eq i32 %132, 0, !dbg !35
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i14 = icmp eq i32 %133, 0, !dbg !35
  br i1 %.not.i11, label %139, label %134, !dbg !35

134:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %137, label %135, !dbg !35

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

139:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %142, label %140, !dbg !35

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

__nv_sqrtf.exit15:                                ; preds = %135, %137, %140, %142
  %.0.i13 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !35
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i16 = icmp eq i32 %144, 0, !dbg !35
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i19 = icmp eq i32 %145, 0, !dbg !35
  br i1 %.not.i16, label %151, label %146, !dbg !35

146:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %149, label %147, !dbg !35

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %107) #4, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %107) #4, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

151:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %154, label %152, !dbg !35

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %107) #4, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %107) #4, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

__nv_sqrtf.exit20:                                ; preds = %147, %149, %152, %154
  %.0.i18 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !35
  %156 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !29
  %157 = bitcast i32 %156 to float, !dbg !29
  %158 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !30
  %159 = bitcast i32 %158 to float, !dbg !30
  %160 = fsub float %157, %159, !dbg !36
  %161 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !29
  %162 = bitcast i32 %161 to float, !dbg !29
  %163 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !30
  %164 = bitcast i32 %163 to float, !dbg !30
  %165 = fsub float %162, %164, !dbg !36
  %166 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !29
  %167 = bitcast i32 %166 to float, !dbg !29
  %168 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !30
  %169 = bitcast i32 %168 to float, !dbg !30
  %170 = fsub float %167, %169, !dbg !36
  %171 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !29
  %172 = bitcast i32 %171 to float, !dbg !29
  %173 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !30
  %174 = bitcast i32 %173 to float, !dbg !30
  %175 = fsub float %172, %174, !dbg !36
  %176 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !33
  %177 = bitcast i32 %176 to float, !dbg !33
  %178 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !33
  %179 = bitcast i32 %178 to float, !dbg !33
  %180 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !33
  %181 = bitcast i32 %180 to float, !dbg !33
  %182 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !33
  %183 = bitcast i32 %182 to float, !dbg !33
  %184 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !32
  %185 = bitcast i32 %184 to float, !dbg !32
  %186 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !32
  %187 = bitcast i32 %186 to float, !dbg !32
  %188 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !32
  %189 = bitcast i32 %188 to float, !dbg !32
  %190 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !32
  %191 = bitcast i32 %190 to float, !dbg !32
  %192 = extractelement <4 x float> %85, i64 3, !dbg !24
  %193 = extractelement <4 x float> %85, i64 2, !dbg !24
  %194 = extractelement <4 x float> %85, i64 1, !dbg !24
  %195 = extractelement <4 x float> %85, i64 0, !dbg !24
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !37
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !37
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #4, !dbg !37
  %200 = fmul float %175, %196, !dbg !38
  %201 = fmul float %170, %197, !dbg !38
  %202 = fmul float %165, %198, !dbg !38
  %203 = fmul float %160, %199, !dbg !38
  %204 = fmul float %200, %191, !dbg !39
  %205 = fmul float %201, %189, !dbg !39
  %206 = fmul float %202, %187, !dbg !39
  %207 = fmul float %203, %185, !dbg !39
  %208 = fadd float %204, %183, !dbg !40
  %209 = fadd float %205, %181, !dbg !40
  %210 = fadd float %206, %179, !dbg !40
  %211 = fadd float %207, %177, !dbg !40
  %212 = fadd float %195, %208, !dbg !41
  %213 = fadd float %194, %209, !dbg !41
  %214 = fadd float %193, %210, !dbg !41
  %215 = fadd float %192, %211, !dbg !41
  %216 = getelementptr float, ptr addrspace(1) %6, i64 %46, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %217 = shl i32 %12, 7, !dbg !43
  %218 = and i32 %217, 384, !dbg !43
  %219 = or disjoint i32 %218, %.lobit1, !dbg !43
  %220 = or disjoint i32 %219, %31, !dbg !43
  %221 = or disjoint i32 %220, %34, !dbg !43
  %222 = or disjoint i32 %221, %36, !dbg !43
  %223 = or disjoint i32 %222, %38, !dbg !43
  %224 = lshr exact i32 %218, 3, !dbg !43
  %225 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %224, !dbg !43
  %226 = getelementptr float, ptr addrspace(3) %225, i32 %223, !dbg !43
  %227 = bitcast float %212 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #4, !dbg !43
  %228 = xor i32 %223, 32, !dbg !43
  %229 = lshr i32 %228, 5, !dbg !43
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i32 %229, !dbg !43
  %231 = getelementptr float, ptr addrspace(3) %230, i32 %228, !dbg !43
  %232 = bitcast float %213 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 true) #4, !dbg !43
  %233 = xor i32 %223, 64, !dbg !43
  %234 = lshr i32 %233, 5, !dbg !43
  %235 = getelementptr float, ptr addrspace(3) @global_smem, i32 %234, !dbg !43
  %236 = getelementptr float, ptr addrspace(3) %235, i32 %233, !dbg !43
  %237 = bitcast float %214 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 true) #4, !dbg !43
  %238 = xor i32 %223, 96, !dbg !43
  %239 = lshr i32 %238, 5, !dbg !43
  %240 = getelementptr float, ptr addrspace(3) @global_smem, i32 %239, !dbg !43
  %241 = getelementptr float, ptr addrspace(3) %240, i32 %238, !dbg !43
  %242 = bitcast float %215 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %243 = lshr i32 %60, 5, !dbg !43
  %244 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %243, !dbg !43
  %245 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %60, !dbg !43
  %246 = load i32, ptr addrspace(3) %245, align 4, !dbg !43
  %247 = or disjoint i32 %60, 1, !dbg !43
  %248 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %247, !dbg !43
  %249 = load i32, ptr addrspace(3) %248, align 4, !dbg !43
  %250 = or disjoint i32 %60, 2, !dbg !43
  %251 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %250, !dbg !43
  %252 = load i32, ptr addrspace(3) %251, align 4, !dbg !43
  %253 = or disjoint i32 %60, 3, !dbg !43
  %254 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %253, !dbg !43
  %255 = load i32, ptr addrspace(3) %254, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %246, i32 %249, i32 %252, i32 %255, ptr addrspace(1) %216, i1 %48) #4, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd7jb6kkqxvw2hc3s4dxh7w47xqiqt6ebr62pwsfuw7usjasouk4.py", directory: "inductor_cache/d7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 51, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 33, column: 37, scope: !7)
!26 = !DILocation(line: 33, column: 46, scope: !7)
!27 = !DILocation(line: 33, column: 42, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 51, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 35, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 37, column: 36, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 26, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 43, column: 18, scope: !7)
!38 = !DILocation(line: 46, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 19, scope: !7)
!42 = !DILocation(line: 50, column: 25, scope: !7)
!43 = !DILocation(line: 50, column: 45, scope: !7)
!44 = !DILocation(line: 50, column: 4, scope: !7)
