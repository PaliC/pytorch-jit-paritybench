; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 6, !dbg !12
  %14 = and i32 %13, 3, !dbg !12
  %15 = shl i32 %12, 2, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = or disjoint i32 %16, 8, !dbg !13
  %19 = or disjoint i32 %16, 12, !dbg !13
  %20 = icmp slt i32 %16, 256, !dbg !14
  %21 = icmp slt i32 %17, 256, !dbg !14
  %22 = icmp slt i32 %18, 256, !dbg !14
  %23 = icmp slt i32 %19, 256, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %25 = shl i32 %24, 8, !dbg !16
  %26 = and i32 %15, 252, !dbg !17
  %27 = and i32 %12, 255, !dbg !17
  %28 = or disjoint i32 %25, %26, !dbg !18
  %29 = or disjoint i32 %25, %27, !dbg !18
  %30 = icmp slt i32 %28, 256, !dbg !19
  %31 = icmp slt i32 %29, 256, !dbg !19
  %32 = shl i32 %16, 8, !dbg !20
  %33 = shl i32 %17, 8, !dbg !20
  %34 = shl i32 %18, 8, !dbg !20
  %35 = shl i32 %19, 8, !dbg !20
  %36 = add i32 %28, %32, !dbg !21
  %37 = add i32 %28, %33, !dbg !21
  %38 = add i32 %28, %34, !dbg !21
  %39 = add i32 %28, %35, !dbg !21
  %40 = sext i32 %36 to i64, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !22
  %42 = sext i32 %37 to i64, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !22
  %44 = sext i32 %38 to i64, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !22
  %46 = sext i32 %39 to i64, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !22
  %48 = and i1 %20, %30, !dbg !23
  %49 = and i1 %21, %30, !dbg !23
  %50 = and i1 %22, %30, !dbg !23
  %51 = and i1 %23, %30, !dbg !23
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %48) #4, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !24
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %49) #4, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !24
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !24
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %50) #4, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !24
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %51) #4, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !24
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !24
  %72 = and i32 %15, 1020, !dbg !24
  %73 = lshr i32 %72, 8, !dbg !24
  %74 = or disjoint i32 %73, %72, !dbg !24
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %74, !dbg !24
  %76 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #4, !dbg !24
  %77 = or disjoint i32 %72, 1, !dbg !24
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %73, !dbg !24
  %79 = getelementptr inbounds float, ptr addrspace(3) %78, i32 %77, !dbg !24
  %80 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #4, !dbg !24
  %81 = or disjoint i32 %72, 2, !dbg !24
  %82 = getelementptr inbounds float, ptr addrspace(3) %78, i32 %81, !dbg !24
  %83 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #4, !dbg !24
  %84 = or disjoint i32 %72, 3, !dbg !24
  %85 = getelementptr inbounds float, ptr addrspace(3) %78, i32 %84, !dbg !24
  %86 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %27, !dbg !24
  %88 = load float, ptr addrspace(3) %87, align 4, !dbg !24
  %89 = getelementptr inbounds i8, ptr addrspace(3) %87, i32 1028, !dbg !24
  %90 = load float, ptr addrspace(3) %89, align 4, !dbg !24
  %91 = getelementptr inbounds i8, ptr addrspace(3) %87, i32 2056, !dbg !24
  %92 = load float, ptr addrspace(3) %91, align 4, !dbg !24
  %93 = getelementptr inbounds i8, ptr addrspace(3) %87, i32 3084, !dbg !24
  %94 = load float, ptr addrspace(3) %93, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %95 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %95, i1 true) #4, !dbg !24
  %96 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %96, i1 true) #4, !dbg !24
  %97 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %97, i1 true) #4, !dbg !24
  %98 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %98, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %99 = load float, ptr addrspace(3) %87, align 4, !dbg !24
  %100 = load float, ptr addrspace(3) %89, align 4, !dbg !24
  %101 = load float, ptr addrspace(3) %91, align 4, !dbg !24
  %102 = load float, ptr addrspace(3) %93, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %103 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %103, i1 true) #4, !dbg !24
  %104 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %104, i1 true) #4, !dbg !24
  %105 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %105, i1 true) #4, !dbg !24
  %106 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %106, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %107 = load float, ptr addrspace(3) %87, align 4, !dbg !24
  %108 = load float, ptr addrspace(3) %89, align 4, !dbg !24
  %109 = load float, ptr addrspace(3) %91, align 4, !dbg !24
  %110 = load float, ptr addrspace(3) %93, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %111 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %111, i1 true) #4, !dbg !24
  %112 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %112, i1 true) #4, !dbg !24
  %113 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %113, i1 true) #4, !dbg !24
  %114 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %114, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %115 = load float, ptr addrspace(3) %87, align 4, !dbg !24
  %116 = load float, ptr addrspace(3) %89, align 4, !dbg !24
  %117 = load float, ptr addrspace(3) %91, align 4, !dbg !24
  %118 = load float, ptr addrspace(3) %93, align 4, !dbg !24
  %119 = sext i32 %29 to i64, !dbg !25
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !25
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %31) #4, !dbg !26
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !27
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %31) #4, !dbg !28
  %124 = bitcast i32 %123 to float, !dbg !28
  %125 = getelementptr float, ptr addrspace(1) %3, i64 %119, !dbg !29
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %31) #4, !dbg !30
  %127 = getelementptr float, ptr addrspace(1) %4, i64 %119, !dbg !31
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %31) #4, !dbg !32
  %129 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !33
  %130 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !33
  %131 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !33
  %132 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !33
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %129, i1 %48) #4, !dbg !34
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %130, i1 %49) #4, !dbg !34
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %131, i1 %50) #4, !dbg !34
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %132, i1 %51) #4, !dbg !34
  %137 = fadd float %124, 0x3EE4F8B580000000, !dbg !35
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %138, 0, !dbg !36
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %139, 0, !dbg !36
  br i1 %.not.i, label %145, label %140, !dbg !36

140:                                              ; preds = %9
  br i1 %.not1.i, label %143, label %141, !dbg !36

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

145:                                              ; preds = %9
  br i1 %.not1.i, label %148, label %146, !dbg !36

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %141, %143, %146, %148
  %.0.i = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !36
  %150 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !34
  %151 = bitcast i32 %150 to float, !dbg !34
  %152 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !34
  %153 = bitcast i32 %152 to float, !dbg !34
  %154 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !34
  %155 = bitcast i32 %154 to float, !dbg !34
  %156 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !34
  %157 = bitcast i32 %156 to float, !dbg !34
  %158 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !34
  %159 = bitcast i32 %158 to float, !dbg !34
  %160 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !34
  %161 = bitcast i32 %160 to float, !dbg !34
  %162 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !34
  %163 = bitcast i32 %162 to float, !dbg !34
  %164 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !34
  %165 = bitcast i32 %164 to float, !dbg !34
  %166 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !34
  %167 = bitcast i32 %166 to float, !dbg !34
  %168 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !34
  %169 = bitcast i32 %168 to float, !dbg !34
  %170 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !34
  %171 = bitcast i32 %170 to float, !dbg !34
  %172 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !34
  %173 = bitcast i32 %172 to float, !dbg !34
  %174 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !34
  %175 = bitcast i32 %174 to float, !dbg !34
  %176 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !34
  %177 = bitcast i32 %176 to float, !dbg !34
  %178 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !34
  %179 = bitcast i32 %178 to float, !dbg !34
  %180 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !34
  %181 = bitcast i32 %180 to float, !dbg !34
  %182 = lshr i32 %12, 2, !dbg !17
  %183 = and i32 %182, 63, !dbg !17
  %184 = or disjoint i32 %183, %25, !dbg !18
  %185 = or disjoint i32 %184, 192, !dbg !18
  %186 = icmp slt i32 %185, 256, !dbg !19
  %187 = and i32 %15, 12, !dbg !12
  %188 = or disjoint i32 %11, %187, !dbg !13
  %189 = icmp slt i32 %188, 256, !dbg !14
  %190 = and i1 %189, %186, !dbg !23
  %191 = or disjoint i32 %184, 128, !dbg !18
  %192 = icmp slt i32 %191, 256, !dbg !19
  %193 = and i1 %189, %192, !dbg !23
  %194 = or disjoint i32 %184, 64, !dbg !18
  %195 = icmp slt i32 %194, 256, !dbg !19
  %196 = and i1 %189, %195, !dbg !23
  %197 = icmp slt i32 %184, 256, !dbg !19
  %198 = and i1 %189, %197, !dbg !23
  %.frozen = freeze i32 %188, !dbg !37
  %199 = sdiv i32 %.frozen, 64, !dbg !37
  %200 = mul i32 %199, 64, !dbg !38
  %.decomposed = sub i32 %.frozen, %200, !dbg !38
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %202 = insertelement <16 x float> poison, float %118, i64 0, !dbg !40
  %203 = insertelement <16 x float> %202, float %117, i64 1, !dbg !40
  %204 = insertelement <16 x float> %203, float %116, i64 2, !dbg !40
  %205 = insertelement <16 x float> %204, float %115, i64 3, !dbg !40
  %206 = insertelement <16 x float> %205, float %110, i64 4, !dbg !40
  %207 = insertelement <16 x float> %206, float %109, i64 5, !dbg !40
  %208 = insertelement <16 x float> %207, float %108, i64 6, !dbg !40
  %209 = insertelement <16 x float> %208, float %107, i64 7, !dbg !40
  %210 = insertelement <16 x float> %209, float %102, i64 8, !dbg !40
  %211 = insertelement <16 x float> %210, float %101, i64 9, !dbg !40
  %212 = insertelement <16 x float> %211, float %100, i64 10, !dbg !40
  %213 = insertelement <16 x float> %212, float %99, i64 11, !dbg !40
  %214 = insertelement <16 x float> %213, float %94, i64 12, !dbg !40
  %215 = insertelement <16 x float> %214, float %92, i64 13, !dbg !40
  %216 = insertelement <16 x float> %215, float %90, i64 14, !dbg !40
  %217 = insertelement <16 x float> %216, float %88, i64 15, !dbg !40
  %218 = insertelement <16 x i32> poison, i32 %121, i64 0, !dbg !40
  %219 = bitcast <16 x i32> %218 to <16 x float>, !dbg !40
  %220 = shufflevector <16 x float> %219, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %221 = fsub <16 x float> %217, %220, !dbg !40
  %222 = insertelement <16 x float> poison, float %201, i64 0, !dbg !41
  %223 = shufflevector <16 x float> %222, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %224 = fmul <16 x float> %221, %223, !dbg !41
  %225 = insertelement <16 x i32> poison, i32 %126, i64 0, !dbg !42
  %226 = bitcast <16 x i32> %225 to <16 x float>, !dbg !42
  %227 = shufflevector <16 x float> %226, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !42
  %228 = fmul <16 x float> %224, %227, !dbg !42
  %229 = insertelement <16 x i32> poison, i32 %128, i64 0, !dbg !43
  %230 = bitcast <16 x i32> %229 to <16 x float>, !dbg !43
  %231 = shufflevector <16 x float> %230, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !43
  %232 = fadd <16 x float> %228, %231, !dbg !43
  %233 = fcmp ogt <16 x float> %232, zeroinitializer, !dbg !44
  %234 = extractelement <16 x float> %232, i64 15, !dbg !45
  %235 = fmul float %234, 0x3FB99999A0000000, !dbg !46
  %236 = extractelement <16 x float> %232, i64 14, !dbg !45
  %237 = fmul float %236, 0x3FB99999A0000000, !dbg !46
  %238 = extractelement <16 x float> %232, i64 13, !dbg !45
  %239 = fmul float %238, 0x3FB99999A0000000, !dbg !46
  %240 = extractelement <16 x float> %232, i64 12, !dbg !45
  %241 = fmul float %240, 0x3FB99999A0000000, !dbg !46
  %242 = extractelement <16 x float> %232, i64 11, !dbg !45
  %243 = fmul float %242, 0x3FB99999A0000000, !dbg !46
  %244 = extractelement <16 x float> %232, i64 10, !dbg !45
  %245 = fmul float %244, 0x3FB99999A0000000, !dbg !46
  %246 = extractelement <16 x float> %232, i64 9, !dbg !45
  %247 = fmul float %246, 0x3FB99999A0000000, !dbg !46
  %248 = extractelement <16 x float> %232, i64 8, !dbg !45
  %249 = fmul float %248, 0x3FB99999A0000000, !dbg !46
  %250 = extractelement <16 x float> %232, i64 7, !dbg !45
  %251 = fmul float %250, 0x3FB99999A0000000, !dbg !46
  %252 = extractelement <16 x float> %232, i64 6, !dbg !45
  %253 = fmul float %252, 0x3FB99999A0000000, !dbg !46
  %254 = extractelement <16 x float> %232, i64 5, !dbg !45
  %255 = fmul float %254, 0x3FB99999A0000000, !dbg !46
  %256 = extractelement <16 x float> %232, i64 4, !dbg !45
  %257 = fmul float %256, 0x3FB99999A0000000, !dbg !46
  %258 = extractelement <16 x float> %232, i64 3, !dbg !45
  %259 = fmul float %258, 0x3FB99999A0000000, !dbg !46
  %260 = extractelement <16 x float> %232, i64 2, !dbg !45
  %261 = fmul float %260, 0x3FB99999A0000000, !dbg !46
  %262 = extractelement <16 x float> %232, i64 1, !dbg !45
  %263 = fmul float %262, 0x3FB99999A0000000, !dbg !46
  %264 = extractelement <16 x float> %232, i64 0, !dbg !45
  %265 = fmul float %264, 0x3FB99999A0000000, !dbg !46
  %266 = extractelement <16 x i1> %233, i64 15, !dbg !45
  %267 = select i1 %266, float %234, float %235, !dbg !45
  %268 = extractelement <16 x i1> %233, i64 14, !dbg !45
  %269 = select i1 %268, float %236, float %237, !dbg !45
  %270 = extractelement <16 x i1> %233, i64 13, !dbg !45
  %271 = select i1 %270, float %238, float %239, !dbg !45
  %272 = extractelement <16 x i1> %233, i64 12, !dbg !45
  %273 = select i1 %272, float %240, float %241, !dbg !45
  %274 = extractelement <16 x i1> %233, i64 11, !dbg !45
  %275 = select i1 %274, float %242, float %243, !dbg !45
  %276 = extractelement <16 x i1> %233, i64 10, !dbg !45
  %277 = select i1 %276, float %244, float %245, !dbg !45
  %278 = extractelement <16 x i1> %233, i64 9, !dbg !45
  %279 = select i1 %278, float %246, float %247, !dbg !45
  %280 = extractelement <16 x i1> %233, i64 8, !dbg !45
  %281 = select i1 %280, float %248, float %249, !dbg !45
  %282 = extractelement <16 x i1> %233, i64 7, !dbg !45
  %283 = select i1 %282, float %250, float %251, !dbg !45
  %284 = extractelement <16 x i1> %233, i64 6, !dbg !45
  %285 = select i1 %284, float %252, float %253, !dbg !45
  %286 = extractelement <16 x i1> %233, i64 5, !dbg !45
  %287 = select i1 %286, float %254, float %255, !dbg !45
  %288 = extractelement <16 x i1> %233, i64 4, !dbg !45
  %289 = select i1 %288, float %256, float %257, !dbg !45
  %290 = extractelement <16 x i1> %233, i64 3, !dbg !45
  %291 = select i1 %290, float %258, float %259, !dbg !45
  %292 = extractelement <16 x i1> %233, i64 2, !dbg !45
  %293 = select i1 %292, float %260, float %261, !dbg !45
  %294 = extractelement <16 x i1> %233, i64 1, !dbg !45
  %295 = select i1 %294, float %262, float %263, !dbg !45
  %296 = extractelement <16 x i1> %233, i64 0, !dbg !45
  %297 = select i1 %296, float %264, float %265, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %298 = bitcast float %267 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %298, i1 true) #4, !dbg !45
  %299 = bitcast float %269 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %299, i1 true) #4, !dbg !45
  %300 = bitcast float %271 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %300, i1 true) #4, !dbg !45
  %301 = bitcast float %273 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %301, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %302 = load float, ptr addrspace(3) %75, align 4, !dbg !45
  %303 = load float, ptr addrspace(3) %79, align 4, !dbg !45
  %304 = load float, ptr addrspace(3) %82, align 4, !dbg !45
  %305 = load float, ptr addrspace(3) %85, align 4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %306 = bitcast float %275 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %306, i1 true) #4, !dbg !45
  %307 = bitcast float %277 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %307, i1 true) #4, !dbg !45
  %308 = bitcast float %279 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %308, i1 true) #4, !dbg !45
  %309 = bitcast float %281 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %309, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %310 = load float, ptr addrspace(3) %75, align 4, !dbg !45
  %311 = load float, ptr addrspace(3) %79, align 4, !dbg !45
  %312 = load float, ptr addrspace(3) %82, align 4, !dbg !45
  %313 = load float, ptr addrspace(3) %85, align 4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %314 = bitcast float %283 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %314, i1 true) #4, !dbg !45
  %315 = bitcast float %285 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %315, i1 true) #4, !dbg !45
  %316 = bitcast float %287 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %316, i1 true) #4, !dbg !45
  %317 = bitcast float %289 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %317, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %318 = load float, ptr addrspace(3) %75, align 4, !dbg !45
  %319 = load float, ptr addrspace(3) %79, align 4, !dbg !45
  %320 = load float, ptr addrspace(3) %82, align 4, !dbg !45
  %321 = load float, ptr addrspace(3) %85, align 4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %322 = bitcast float %291 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %322, i1 true) #4, !dbg !45
  %323 = bitcast float %293 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %323, i1 true) #4, !dbg !45
  %324 = bitcast float %295 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %324, i1 true) #4, !dbg !45
  %325 = bitcast float %297 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %325, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %326 = load float, ptr addrspace(3) %75, align 4, !dbg !45
  %327 = load float, ptr addrspace(3) %79, align 4, !dbg !45
  %328 = load float, ptr addrspace(3) %82, align 4, !dbg !45
  %329 = load float, ptr addrspace(3) %85, align 4, !dbg !45
  %330 = fadd float %302, %181, !dbg !47
  %331 = fadd float %303, %179, !dbg !47
  %332 = fadd float %304, %177, !dbg !47
  %333 = fadd float %305, %175, !dbg !47
  %334 = fadd float %310, %173, !dbg !47
  %335 = fadd float %311, %171, !dbg !47
  %336 = fadd float %312, %169, !dbg !47
  %337 = fadd float %313, %167, !dbg !47
  %338 = fadd float %318, %165, !dbg !47
  %339 = fadd float %319, %163, !dbg !47
  %340 = fadd float %320, %161, !dbg !47
  %341 = fadd float %321, %159, !dbg !47
  %342 = fadd float %326, %157, !dbg !47
  %343 = fadd float %327, %155, !dbg !47
  %344 = fadd float %328, %153, !dbg !47
  %345 = fadd float %329, %151, !dbg !47
  %346 = shl i32 %184, 6, !dbg !48
  %347 = shl i32 %194, 6, !dbg !48
  %348 = shl i32 %191, 6, !dbg !48
  %349 = shl i32 %185, 6, !dbg !48
  %350 = shl i32 %199, 14, !dbg !49
  %351 = add i32 %350, %.decomposed, !dbg !50
  %352 = add i32 %351, %346, !dbg !51
  %353 = add i32 %351, %347, !dbg !51
  %354 = add i32 %351, %348, !dbg !51
  %355 = add i32 %351, %349, !dbg !51
  %356 = sext i32 %352 to i64, !dbg !52
  %357 = getelementptr float, ptr addrspace(1) %6, i64 %356, !dbg !52
  %358 = sext i32 %353 to i64, !dbg !52
  %359 = getelementptr float, ptr addrspace(1) %6, i64 %358, !dbg !52
  %360 = sext i32 %354 to i64, !dbg !52
  %361 = getelementptr float, ptr addrspace(1) %6, i64 %360, !dbg !52
  %362 = sext i32 %355 to i64, !dbg !52
  %363 = getelementptr float, ptr addrspace(1) %6, i64 %362, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %364 = shl i32 %12, 6, !dbg !53
  %365 = and i32 %364, 4032, !dbg !53
  %366 = or disjoint i32 %365, %14, !dbg !53
  %367 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %365, !dbg !53
  %368 = getelementptr float, ptr addrspace(3) %367, i32 %366, !dbg !53
  %369 = bitcast float %330 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %368, <1 x i32> %369, i1 true) #4, !dbg !53
  %370 = or disjoint i32 %366, 16, !dbg !53
  %371 = lshr i32 %370, 2, !dbg !53
  %372 = getelementptr float, ptr addrspace(3) @global_smem, i32 %371, !dbg !53
  %373 = getelementptr float, ptr addrspace(3) %372, i32 %370, !dbg !53
  %374 = bitcast float %331 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %373, <1 x i32> %374, i1 true) #4, !dbg !53
  %375 = or disjoint i32 %366, 32, !dbg !53
  %376 = lshr i32 %375, 2, !dbg !53
  %377 = getelementptr float, ptr addrspace(3) @global_smem, i32 %376, !dbg !53
  %378 = getelementptr float, ptr addrspace(3) %377, i32 %375, !dbg !53
  %379 = bitcast float %332 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %378, <1 x i32> %379, i1 true) #4, !dbg !53
  %380 = or disjoint i32 %366, 48, !dbg !53
  %381 = lshr i32 %380, 2, !dbg !53
  %382 = getelementptr float, ptr addrspace(3) @global_smem, i32 %381, !dbg !53
  %383 = getelementptr float, ptr addrspace(3) %382, i32 %380, !dbg !53
  %384 = bitcast float %333 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %384, i1 true) #4, !dbg !53
  %385 = or disjoint i32 %366, 4, !dbg !53
  %386 = getelementptr float, ptr addrspace(3) %367, i32 %385, !dbg !53
  %387 = bitcast float %334 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %387, i1 true) #4, !dbg !53
  %388 = or disjoint i32 %366, 20, !dbg !53
  %389 = lshr i32 %388, 2, !dbg !53
  %390 = and i32 %389, 1012, !dbg !53
  %391 = getelementptr float, ptr addrspace(3) @global_smem, i32 %390, !dbg !53
  %392 = getelementptr float, ptr addrspace(3) %391, i32 %388, !dbg !53
  %393 = bitcast float %335 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %393, i1 true) #4, !dbg !53
  %394 = or disjoint i32 %366, 36, !dbg !53
  %395 = lshr i32 %394, 2, !dbg !53
  %396 = and i32 %395, 1016, !dbg !53
  %397 = getelementptr float, ptr addrspace(3) @global_smem, i32 %396, !dbg !53
  %398 = getelementptr float, ptr addrspace(3) %397, i32 %394, !dbg !53
  %399 = bitcast float %336 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %398, <1 x i32> %399, i1 true) #4, !dbg !53
  %400 = or disjoint i32 %366, 52, !dbg !53
  %401 = lshr i32 %400, 2, !dbg !53
  %402 = and i32 %401, 1020, !dbg !53
  %403 = getelementptr float, ptr addrspace(3) @global_smem, i32 %402, !dbg !53
  %404 = getelementptr float, ptr addrspace(3) %403, i32 %400, !dbg !53
  %405 = bitcast float %337 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %404, <1 x i32> %405, i1 true) #4, !dbg !53
  %406 = or disjoint i32 %366, 8, !dbg !53
  %407 = getelementptr float, ptr addrspace(3) %367, i32 %406, !dbg !53
  %408 = bitcast float %338 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %408, i1 true) #4, !dbg !53
  %409 = or disjoint i32 %366, 24, !dbg !53
  %410 = lshr i32 %409, 2, !dbg !53
  %411 = and i32 %410, 1012, !dbg !53
  %412 = getelementptr float, ptr addrspace(3) @global_smem, i32 %411, !dbg !53
  %413 = getelementptr float, ptr addrspace(3) %412, i32 %409, !dbg !53
  %414 = bitcast float %339 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %413, <1 x i32> %414, i1 true) #4, !dbg !53
  %415 = or disjoint i32 %366, 40, !dbg !53
  %416 = lshr i32 %415, 2, !dbg !53
  %417 = and i32 %416, 1016, !dbg !53
  %418 = getelementptr float, ptr addrspace(3) @global_smem, i32 %417, !dbg !53
  %419 = getelementptr float, ptr addrspace(3) %418, i32 %415, !dbg !53
  %420 = bitcast float %340 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %419, <1 x i32> %420, i1 true) #4, !dbg !53
  %421 = or disjoint i32 %366, 56, !dbg !53
  %422 = lshr i32 %421, 2, !dbg !53
  %423 = and i32 %422, 1020, !dbg !53
  %424 = getelementptr float, ptr addrspace(3) @global_smem, i32 %423, !dbg !53
  %425 = getelementptr float, ptr addrspace(3) %424, i32 %421, !dbg !53
  %426 = bitcast float %341 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %425, <1 x i32> %426, i1 true) #4, !dbg !53
  %427 = or disjoint i32 %366, 12, !dbg !53
  %428 = getelementptr float, ptr addrspace(3) %367, i32 %427, !dbg !53
  %429 = bitcast float %342 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %429, i1 true) #4, !dbg !53
  %430 = or disjoint i32 %366, 28, !dbg !53
  %431 = lshr i32 %430, 2, !dbg !53
  %432 = and i32 %431, 1012, !dbg !53
  %433 = getelementptr float, ptr addrspace(3) @global_smem, i32 %432, !dbg !53
  %434 = getelementptr float, ptr addrspace(3) %433, i32 %430, !dbg !53
  %435 = bitcast float %343 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %434, <1 x i32> %435, i1 true) #4, !dbg !53
  %436 = or disjoint i32 %366, 44, !dbg !53
  %437 = lshr i32 %436, 2, !dbg !53
  %438 = and i32 %437, 1016, !dbg !53
  %439 = getelementptr float, ptr addrspace(3) @global_smem, i32 %438, !dbg !53
  %440 = getelementptr float, ptr addrspace(3) %439, i32 %436, !dbg !53
  %441 = bitcast float %344 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %441, i1 true) #4, !dbg !53
  %442 = or disjoint i32 %366, 60, !dbg !53
  %443 = lshr i32 %442, 2, !dbg !53
  %444 = and i32 %443, 1020, !dbg !53
  %445 = getelementptr float, ptr addrspace(3) @global_smem, i32 %444, !dbg !53
  %446 = getelementptr float, ptr addrspace(3) %445, i32 %442, !dbg !53
  %447 = bitcast float %345 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %446, <1 x i32> %447, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %448 = and i32 %12, 252, !dbg !53
  %449 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %448, !dbg !53
  %450 = getelementptr inbounds float, ptr addrspace(3) %449, i32 %72, !dbg !53
  %451 = or disjoint i32 %72, 1024, !dbg !53
  %452 = lshr exact i32 %451, 2, !dbg !53
  %453 = and i32 %452, 508, !dbg !53
  %454 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %453, !dbg !53
  %455 = getelementptr inbounds float, ptr addrspace(3) %454, i32 %451, !dbg !53
  %456 = load <4 x i32>, ptr addrspace(3) %455, align 16, !dbg !53
  %457 = or disjoint i32 %72, 2048, !dbg !53
  %458 = lshr exact i32 %457, 2, !dbg !53
  %459 = and i32 %458, 764, !dbg !53
  %460 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %459, !dbg !53
  %461 = getelementptr inbounds float, ptr addrspace(3) %460, i32 %457, !dbg !53
  %462 = load <4 x i32>, ptr addrspace(3) %461, align 16, !dbg !53
  %463 = or disjoint i32 %72, 3072, !dbg !53
  %464 = lshr exact i32 %463, 2, !dbg !53
  %465 = and i32 %464, 1020, !dbg !53
  %466 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %465, !dbg !53
  %467 = getelementptr inbounds float, ptr addrspace(3) %466, i32 %463, !dbg !53
  %468 = load <4 x i32>, ptr addrspace(3) %467, align 16, !dbg !53
  %.extract = load i32, ptr addrspace(3) %450, align 16, !dbg !53
  %469 = getelementptr inbounds i8, ptr addrspace(3) %450, i32 4, !dbg !53
  %.extract20 = load i32, ptr addrspace(3) %469, align 4, !dbg !53
  %470 = getelementptr inbounds i8, ptr addrspace(3) %450, i32 8, !dbg !53
  %.extract21 = load i32, ptr addrspace(3) %470, align 8, !dbg !53
  %471 = getelementptr inbounds i8, ptr addrspace(3) %450, i32 12, !dbg !53
  %.extract22 = load i32, ptr addrspace(3) %471, align 4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %357, i1 %198) #4, !dbg !53
  %.extract23 = extractelement <4 x i32> %456, i64 0, !dbg !53
  %.extract24 = extractelement <4 x i32> %456, i64 1, !dbg !53
  %.extract25 = extractelement <4 x i32> %456, i64 2, !dbg !53
  %.extract26 = extractelement <4 x i32> %456, i64 3, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %359, i1 %196) #4, !dbg !53
  %.extract27 = extractelement <4 x i32> %462, i64 0, !dbg !53
  %.extract28 = extractelement <4 x i32> %462, i64 1, !dbg !53
  %.extract29 = extractelement <4 x i32> %462, i64 2, !dbg !53
  %.extract30 = extractelement <4 x i32> %462, i64 3, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %361, i1 %193) #4, !dbg !53
  %.extract31 = extractelement <4 x i32> %468, i64 0, !dbg !53
  %.extract32 = extractelement <4 x i32> %468, i64 1, !dbg !53
  %.extract33 = extractelement <4 x i32> %468, i64 2, !dbg !53
  %.extract34 = extractelement <4 x i32> %468, i64 3, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %363, i1 %190) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cox3upgia62ws6ysgk42leozv7edlyamh5m5iy3rw3vk3nicgmyp.py", directory: "inductor_cache/ox")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_17, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_17", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 52, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 37, column: 31, scope: !7)
!34 = !DILocation(line: 37, column: 45, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 26, scope: !7)
!37 = !DILocation(line: 31, column: 19, scope: !7)
!38 = !DILocation(line: 30, column: 19, scope: !7)
!39 = !DILocation(line: 43, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 46, column: 19, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 50, column: 20, scope: !7)
!45 = !DILocation(line: 53, column: 35, scope: !7)
!46 = !DILocation(line: 52, column: 20, scope: !7)
!47 = !DILocation(line: 54, column: 20, scope: !7)
!48 = !DILocation(line: 55, column: 33, scope: !7)
!49 = !DILocation(line: 55, column: 44, scope: !7)
!50 = !DILocation(line: 55, column: 30, scope: !7)
!51 = !DILocation(line: 55, column: 38, scope: !7)
!52 = !DILocation(line: 55, column: 25, scope: !7)
!53 = !DILocation(line: 55, column: 56, scope: !7)
!54 = !DILocation(line: 55, column: 4, scope: !7)
