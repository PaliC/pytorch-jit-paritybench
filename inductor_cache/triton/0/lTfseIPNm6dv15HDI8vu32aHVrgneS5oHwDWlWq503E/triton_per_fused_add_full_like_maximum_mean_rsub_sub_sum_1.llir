; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_full_like_maximum_mean_rsub_sub_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = and i32 %5, 15, !dbg !11
  %9 = shl i32 %5, 2, !dbg !12
  %10 = and i32 %9, 192, !dbg !12
  %11 = or disjoint i32 %10, %8, !dbg !13
  %12 = zext nneg i32 %11 to i64, !dbg !14
  %13 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !14
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 true) #3, !dbg !15
  %15 = or disjoint i32 %11, 16, !dbg !16
  %16 = zext nneg i32 %15 to i64, !dbg !17
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !17
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !18
  %19 = or disjoint i32 %11, 32, !dbg !19
  %20 = zext nneg i32 %19 to i64, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !20
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !21
  %23 = or disjoint i32 %11, 48, !dbg !22
  %24 = zext nneg i32 %23 to i64, !dbg !23
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !23
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %12, !dbg !25
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !27
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !28
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !29
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !30
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !31
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !32
  %35 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !15
  %36 = insertelement <2 x i32> %35, i32 %28, i64 1, !dbg !15
  %37 = bitcast <2 x i32> %36 to <2 x float>, !dbg !15
  %38 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !18
  %39 = insertelement <2 x i32> %38, i32 %30, i64 1, !dbg !18
  %40 = bitcast <2 x i32> %39 to <2 x float>, !dbg !18
  %41 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !21
  %42 = insertelement <2 x i32> %41, i32 %32, i64 1, !dbg !21
  %43 = bitcast <2 x i32> %42 to <2 x float>, !dbg !21
  %44 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !24
  %45 = insertelement <2 x i32> %44, i32 %34, i64 1, !dbg !24
  %46 = bitcast <2 x i32> %45 to <2 x float>, !dbg !24
  %47 = fadd <2 x float> %37, %40, !dbg !33
  %48 = fadd <2 x float> %47, %43, !dbg !34
  %49 = fadd <2 x float> %48, %46, !dbg !35
  %50 = extractelement <2 x float> %49, i64 0, !dbg !36
  %51 = fsub float 1.000000e+00, %50, !dbg !36
  %52 = extractelement <2 x float> %49, i64 1, !dbg !36
  %53 = fadd float %52, -1.000000e+00, !dbg !36
  %54 = fadd float %51, %53, !dbg !36
  %55 = fadd float %54, 4.000000e+00, !dbg !37
  %.inv = fcmp ole float %55, 0.000000e+00, !dbg !38
  %56 = select i1 %.inv, float 0.000000e+00, float %55, !dbg !38
  %57 = bitcast float %56 to i32, !dbg !42
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 16, i32 31), !dbg !42
  %59 = bitcast i32 %58 to float, !dbg !42
  %60 = fadd float %56, %59, !dbg !46
  %61 = bitcast float %60 to i32, !dbg !42
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 8, i32 31), !dbg !42
  %63 = bitcast i32 %62 to float, !dbg !42
  %64 = fadd float %60, %63, !dbg !46
  %65 = bitcast float %64 to i32, !dbg !42
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 4, i32 31), !dbg !42
  %67 = bitcast i32 %66 to float, !dbg !42
  %68 = fadd float %64, %67, !dbg !46
  %69 = bitcast float %68 to i32, !dbg !42
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 2, i32 31), !dbg !42
  %71 = bitcast i32 %70 to float, !dbg !42
  %72 = fadd float %68, %71, !dbg !46
  %73 = bitcast float %72 to i32, !dbg !42
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 1, i32 31), !dbg !42
  %75 = bitcast i32 %74 to float, !dbg !42
  %76 = fadd float %72, %75, !dbg !46
  %77 = icmp eq i32 %6, 0, !dbg !42
  %78 = and i32 %7, 1, !dbg !42
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %78, !dbg !42
  %80 = bitcast float %76 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 %77) #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %81 = icmp slt i32 %5, 2, !dbg !42
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %5, !dbg !42
  %83 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %82, i1 %81) #3, !dbg !42
  %84 = bitcast i32 %83 to float, !dbg !42
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 1, i32 31), !dbg !42
  %86 = bitcast i32 %85 to float, !dbg !42
  %87 = fadd float %84, %86, !dbg !46
  %88 = and i32 %5, 1, !dbg !42
  %89 = icmp eq i32 %88, 0, !dbg !42
  %90 = and i1 %81, %89, !dbg !42
  %91 = bitcast float %87 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %91, i1 %90) #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %92 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !42
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float 6.400000e+01) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %urem = and i32 %5, 63, !dbg !50
  %94 = icmp eq i32 %urem, 0, !dbg !50
  %95 = bitcast float %93 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %95, ptr addrspace(1) %0, i1 %94) #3, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cn6q54lx3maxhzsamycpjxq3a4dquxddwdxvvvc5vxbow2w55nq2.py", directory: "inductor_cache/n6")
!4 = !{ptr @triton_per_fused_add_full_like_maximum_mean_rsub_sub_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_full_like_maximum_mean_rsub_sub_sum_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_full_like_maximum_mean_rsub_sub_sum_1", linkageName: "triton_per_fused_add_full_like_maximum_mean_rsub_sub_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 29, column: 19, scope: !7)
!12 = !DILocation(line: 31, column: 38, scope: !7)
!13 = !DILocation(line: 31, column: 35, scope: !7)
!14 = !DILocation(line: 31, column: 30, scope: !7)
!15 = !DILocation(line: 31, column: 43, scope: !7)
!16 = !DILocation(line: 32, column: 40, scope: !7)
!17 = !DILocation(line: 32, column: 30, scope: !7)
!18 = !DILocation(line: 32, column: 48, scope: !7)
!19 = !DILocation(line: 33, column: 40, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 48, scope: !7)
!22 = !DILocation(line: 34, column: 40, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 48, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 43, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 49, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 49, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 49, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 18, scope: !7)
!36 = !DILocation(line: 48, column: 19, scope: !7)
!37 = !DILocation(line: 50, column: 20, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 52, column: 42, scope: !7)
!42 = !DILocation(line: 267, column: 36, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!45 = !DILocation(line: 54, column: 26, scope: !7)
!46 = !DILocation(line: 256, column: 15, scope: !47, inlinedAt: !45)
!47 = distinct !DILexicalBlockFile(scope: !43, file: !44, discriminator: 0)
!48 = !DILocation(line: 56, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 4, scope: !7)
!50 = !DILocation(line: 58, column: 71, scope: !7)
!51 = !DILocation(line: 58, column: 4, scope: !7)
