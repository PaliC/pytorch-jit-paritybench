; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = icmp slt i32 %9, 256, !dbg !11
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %12 = shl i32 %11, 10, !dbg !13
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %14 = shl i32 %13, 2, !dbg !14
  %15 = and i32 %14, 508, !dbg !14
  %16 = or disjoint i32 %15, 1, !dbg !14
  %17 = or disjoint i32 %15, 2, !dbg !14
  %18 = or disjoint i32 %15, 3, !dbg !14
  %19 = or disjoint i32 %15, 513, !dbg !14
  %20 = or disjoint i32 %15, 514, !dbg !14
  %21 = or disjoint i32 %15, 515, !dbg !14
  %22 = and i32 %13, 127, !dbg !14
  %23 = or disjoint i32 %22, 128, !dbg !14
  %24 = or disjoint i32 %22, 256, !dbg !14
  %25 = or disjoint i32 %22, 384, !dbg !14
  %26 = or disjoint i32 %22, 512, !dbg !14
  %27 = or disjoint i32 %22, 640, !dbg !14
  %28 = or disjoint i32 %22, 768, !dbg !14
  %29 = or disjoint i32 %22, 896, !dbg !14
  %30 = or disjoint i32 %12, %15, !dbg !15
  %31 = or disjoint i32 %12, %16, !dbg !15
  %32 = or disjoint i32 %12, %17, !dbg !15
  %33 = or disjoint i32 %12, %18, !dbg !15
  %34 = or disjoint i32 %30, 512, !dbg !15
  %35 = or disjoint i32 %12, %19, !dbg !15
  %36 = or disjoint i32 %12, %20, !dbg !15
  %37 = or disjoint i32 %12, %21, !dbg !15
  %38 = or disjoint i32 %12, %22, !dbg !15
  %39 = or disjoint i32 %12, %23, !dbg !15
  %40 = or disjoint i32 %12, %24, !dbg !15
  %41 = or disjoint i32 %12, %25, !dbg !15
  %42 = or disjoint i32 %12, %26, !dbg !15
  %43 = or disjoint i32 %12, %27, !dbg !15
  %44 = or disjoint i32 %12, %28, !dbg !15
  %45 = or disjoint i32 %12, %29, !dbg !15
  %.frozen = freeze i32 %9, !dbg !16
  %46 = sdiv i32 %.frozen, 64, !dbg !16
  %47 = mul i32 %46, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %47, !dbg !17
  %48 = shl i32 %9, 12, !dbg !18
  %49 = add i32 %30, %48, !dbg !19
  %50 = add i32 %48, %34, !dbg !19
  %51 = sext i32 %49 to i64, !dbg !20
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !20
  %53 = sext i32 %50 to i64, !dbg !20
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !20
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %10) #2, !dbg !21
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !21
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !21
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !21
  %60 = bitcast i32 %56 to float, !dbg !21
  %61 = bitcast i32 %57 to float, !dbg !21
  %62 = bitcast i32 %58 to float, !dbg !21
  %63 = bitcast i32 %59 to float, !dbg !21
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %10) #2, !dbg !21
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !21
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !21
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !21
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !21
  %69 = bitcast i32 %65 to float, !dbg !21
  %70 = bitcast i32 %66 to float, !dbg !21
  %71 = bitcast i32 %67 to float, !dbg !21
  %72 = bitcast i32 %68 to float, !dbg !21
  %73 = sext i32 %.decomposed to i64, !dbg !22
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !22
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %10) #2, !dbg !23
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %10) #2, !dbg !23
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %10) #2, !dbg !23
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %10) #2, !dbg !23
  %79 = bitcast i32 %78 to float, !dbg !23
  %80 = shl i32 %30, 6, !dbg !24
  %81 = shl i32 %31, 6, !dbg !24
  %82 = shl i32 %32, 6, !dbg !24
  %83 = shl i32 %33, 6, !dbg !24
  %84 = shl i32 %34, 6, !dbg !24
  %85 = shl i32 %35, 6, !dbg !24
  %86 = shl i32 %36, 6, !dbg !24
  %87 = shl i32 %37, 6, !dbg !24
  %88 = shl i32 %38, 6, !dbg !24
  %89 = shl i32 %39, 6, !dbg !24
  %90 = shl i32 %40, 6, !dbg !24
  %91 = shl i32 %41, 6, !dbg !24
  %92 = shl i32 %42, 6, !dbg !24
  %93 = shl i32 %43, 6, !dbg !24
  %94 = shl i32 %44, 6, !dbg !24
  %95 = shl i32 %45, 6, !dbg !24
  %96 = shl i32 %46, 18, !dbg !25
  %97 = add i32 %96, %.decomposed, !dbg !26
  %98 = add i32 %97, %80, !dbg !27
  %99 = add i32 %97, %81, !dbg !27
  %100 = add i32 %97, %82, !dbg !27
  %101 = add i32 %97, %83, !dbg !27
  %102 = add i32 %97, %84, !dbg !27
  %103 = add i32 %97, %85, !dbg !27
  %104 = add i32 %97, %86, !dbg !27
  %105 = add i32 %97, %87, !dbg !27
  %106 = add i32 %97, %88, !dbg !27
  %107 = add i32 %97, %89, !dbg !27
  %108 = add i32 %97, %90, !dbg !27
  %109 = add i32 %97, %91, !dbg !27
  %110 = add i32 %97, %92, !dbg !27
  %111 = add i32 %97, %93, !dbg !27
  %112 = add i32 %97, %94, !dbg !27
  %113 = add i32 %97, %95, !dbg !27
  %114 = sext i32 %98 to i64, !dbg !28
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !28
  %116 = sext i32 %99 to i64, !dbg !28
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %116, !dbg !28
  %118 = sext i32 %100 to i64, !dbg !28
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !28
  %120 = sext i32 %101 to i64, !dbg !28
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %120, !dbg !28
  %122 = sext i32 %102 to i64, !dbg !28
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %122, !dbg !28
  %124 = sext i32 %103 to i64, !dbg !28
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %124, !dbg !28
  %126 = sext i32 %104 to i64, !dbg !28
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !28
  %128 = sext i32 %105 to i64, !dbg !28
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !28
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %10) #2, !dbg !29
  %131 = bitcast i32 %130 to float, !dbg !29
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %10) #2, !dbg !29
  %133 = bitcast i32 %132 to float, !dbg !29
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %10) #2, !dbg !29
  %135 = bitcast i32 %134 to float, !dbg !29
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %10) #2, !dbg !29
  %137 = bitcast i32 %136 to float, !dbg !29
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %10) #2, !dbg !29
  %139 = bitcast i32 %138 to float, !dbg !29
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %10) #2, !dbg !29
  %141 = bitcast i32 %140 to float, !dbg !29
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %10) #2, !dbg !29
  %143 = bitcast i32 %142 to float, !dbg !29
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %10) #2, !dbg !29
  %145 = bitcast i32 %144 to float, !dbg !29
  %146 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !30
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %10) #2, !dbg !31
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %10) #2, !dbg !31
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %10) #2, !dbg !31
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %10) #2, !dbg !31
  %151 = bitcast i32 %150 to float, !dbg !31
  %152 = fmul float %79, %131, !dbg !32
  %153 = fmul float %79, %133, !dbg !32
  %154 = fmul float %79, %135, !dbg !32
  %155 = fmul float %79, %137, !dbg !32
  %156 = fmul float %79, %139, !dbg !32
  %157 = fmul float %79, %141, !dbg !32
  %158 = fmul float %79, %143, !dbg !32
  %159 = fmul float %79, %145, !dbg !32
  %160 = fadd float %152, %151, !dbg !33
  %161 = fadd float %153, %151, !dbg !33
  %162 = fadd float %154, %151, !dbg !33
  %163 = fadd float %155, %151, !dbg !33
  %164 = fadd float %156, %151, !dbg !33
  %165 = fadd float %157, %151, !dbg !33
  %166 = fadd float %158, %151, !dbg !33
  %167 = fadd float %159, %151, !dbg !33
  %168 = fadd float %160, %60, !dbg !34
  %169 = fadd float %161, %61, !dbg !34
  %170 = fadd float %162, %62, !dbg !34
  %171 = fadd float %163, %63, !dbg !34
  %172 = fadd float %164, %69, !dbg !34
  %173 = fadd float %165, %70, !dbg !34
  %174 = fadd float %166, %71, !dbg !34
  %175 = fadd float %167, %72, !dbg !34
  %176 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !35
  %177 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !35
  %178 = bitcast float %168 to i32, !dbg !36
  %179 = bitcast float %169 to i32, !dbg !36
  %180 = bitcast float %170 to i32, !dbg !36
  %181 = bitcast float %171 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %178, i32 %179, i32 %180, i32 %181, ptr addrspace(1) %176, i1 %10) #2, !dbg !36
  %182 = bitcast float %172 to i32, !dbg !36
  %183 = bitcast float %173 to i32, !dbg !36
  %184 = bitcast float %174 to i32, !dbg !36
  %185 = bitcast float %175 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %182, i32 %183, i32 %184, i32 %185, ptr addrspace(1) %177, i1 %10) #2, !dbg !36
  %186 = sext i32 %106 to i64, !dbg !37
  %187 = getelementptr float, ptr addrspace(1) %5, i64 %186, !dbg !37
  %188 = sext i32 %107 to i64, !dbg !37
  %189 = getelementptr float, ptr addrspace(1) %5, i64 %188, !dbg !37
  %190 = sext i32 %108 to i64, !dbg !37
  %191 = getelementptr float, ptr addrspace(1) %5, i64 %190, !dbg !37
  %192 = sext i32 %109 to i64, !dbg !37
  %193 = getelementptr float, ptr addrspace(1) %5, i64 %192, !dbg !37
  %194 = sext i32 %110 to i64, !dbg !37
  %195 = getelementptr float, ptr addrspace(1) %5, i64 %194, !dbg !37
  %196 = sext i32 %111 to i64, !dbg !37
  %197 = getelementptr float, ptr addrspace(1) %5, i64 %196, !dbg !37
  %198 = sext i32 %112 to i64, !dbg !37
  %199 = getelementptr float, ptr addrspace(1) %5, i64 %198, !dbg !37
  %200 = sext i32 %113 to i64, !dbg !37
  %201 = getelementptr float, ptr addrspace(1) %5, i64 %200, !dbg !37
  %202 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !38
  %203 = bitcast float %168 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #2, !dbg !38
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !38
  %205 = bitcast float %169 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %205, i1 true) #2, !dbg !38
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !38
  %207 = bitcast float %170 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %207, i1 true) #2, !dbg !38
  %208 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !38
  %209 = bitcast float %171 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %209, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %210 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !38
  %211 = load i32, ptr addrspace(3) %210, align 4, !dbg !38
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %23, !dbg !38
  %213 = load i32, ptr addrspace(3) %212, align 4, !dbg !38
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %24, !dbg !38
  %215 = load i32, ptr addrspace(3) %214, align 4, !dbg !38
  %216 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %25, !dbg !38
  %217 = load i32, ptr addrspace(3) %216, align 4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %218 = bitcast float %172 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %218, i1 true) #2, !dbg !38
  %219 = bitcast float %173 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %219, i1 true) #2, !dbg !38
  %220 = bitcast float %174 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %220, i1 true) #2, !dbg !38
  %221 = bitcast float %175 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %221, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %222 = load i32, ptr addrspace(3) %210, align 4, !dbg !38
  %223 = load i32, ptr addrspace(3) %212, align 4, !dbg !38
  %224 = load i32, ptr addrspace(3) %214, align 4, !dbg !38
  %225 = load i32, ptr addrspace(3) %216, align 4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %211, ptr addrspace(1) %187, i1 %10) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %213, ptr addrspace(1) %189, i1 %10) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %215, ptr addrspace(1) %191, i1 %10) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %217, ptr addrspace(1) %193, i1 %10) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %222, ptr addrspace(1) %195, i1 %10) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %223, ptr addrspace(1) %197, i1 %10) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %224, ptr addrspace(1) %199, i1 %10) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %225, ptr addrspace(1) %201, i1 %10) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cypkicl3pvgg3zxdqen46p3jyav2kym5ooq3nx6ylg5qfk6d4ev6.py", directory: "inductor_cache/yp")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_12", linkageName: "triton_poi_fused_add_convolution_mul_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 38, scope: !7)
!25 = !DILocation(line: 34, column: 50, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 43, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 55, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 35, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 18, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 39, column: 25, scope: !7)
!36 = !DILocation(line: 39, column: 46, scope: !7)
!37 = !DILocation(line: 40, column: 25, scope: !7)
!38 = !DILocation(line: 40, column: 56, scope: !7)
!39 = !DILocation(line: 40, column: 4, scope: !7)
