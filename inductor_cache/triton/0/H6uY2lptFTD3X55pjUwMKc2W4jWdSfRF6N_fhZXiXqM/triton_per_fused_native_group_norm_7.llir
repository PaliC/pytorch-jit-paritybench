; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_native_group_norm_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 24, !dbg !12
  %13 = shl i32 %11, 2, !dbg !12
  %14 = and i32 %13, 28, !dbg !12
  %15 = and i32 %11, 31, !dbg !12
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = or disjoint i32 %10, %15, !dbg !13
  %18 = icmp slt i32 %16, 32, !dbg !14
  %19 = icmp slt i32 %17, 32, !dbg !14
  %20 = lshr i32 %11, 5, !dbg !15
  %21 = and i32 %11, 248, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %22 = sdiv i32 %.frozen, 8, !dbg !16
  %23 = mul i32 %22, 8, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %24 = shl i32 %22, 9, !dbg !18
  %25 = add i32 %24, %.decomposed, !dbg !19
  %26 = add i32 %25, %21, !dbg !20
  %27 = add i32 %25, 256, !dbg !19
  %28 = add nuw i32 %27, %21, !dbg !20
  %29 = sext i32 %26 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = sext i32 %28 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !22
  %38 = bitcast i32 %34 to float, !dbg !22
  %39 = bitcast i32 %35 to float, !dbg !22
  %40 = bitcast i32 %36 to float, !dbg !22
  %41 = bitcast i32 %37 to float, !dbg !22
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !22
  %47 = bitcast i32 %43 to float, !dbg !22
  %48 = bitcast i32 %44 to float, !dbg !22
  %49 = bitcast i32 %45 to float, !dbg !22
  %50 = bitcast i32 %46 to float, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !23
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !24
  %58 = bitcast i32 %54 to float, !dbg !24
  %59 = bitcast i32 %55 to float, !dbg !24
  %60 = bitcast i32 %56 to float, !dbg !24
  %61 = bitcast i32 %57 to float, !dbg !24
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !24
  %67 = bitcast i32 %63 to float, !dbg !24
  %68 = bitcast i32 %64 to float, !dbg !24
  %69 = bitcast i32 %65 to float, !dbg !24
  %70 = bitcast i32 %66 to float, !dbg !24
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !25
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !25
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %71, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !26
  %78 = bitcast i32 %74 to float, !dbg !26
  %79 = bitcast i32 %75 to float, !dbg !26
  %80 = bitcast i32 %76 to float, !dbg !26
  %81 = bitcast i32 %77 to float, !dbg !26
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %72, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !26
  %87 = bitcast i32 %83 to float, !dbg !26
  %88 = bitcast i32 %84 to float, !dbg !26
  %89 = bitcast i32 %85 to float, !dbg !26
  %90 = bitcast i32 %86 to float, !dbg !26
  %91 = select i1 %18, float %38, float 0.000000e+00, !dbg !27
  %92 = select i1 %18, float %39, float 0.000000e+00, !dbg !27
  %93 = select i1 %18, float %40, float 0.000000e+00, !dbg !27
  %94 = select i1 %18, float %41, float 0.000000e+00, !dbg !27
  %95 = select i1 %18, float %47, float 0.000000e+00, !dbg !27
  %96 = select i1 %18, float %48, float 0.000000e+00, !dbg !27
  %97 = select i1 %18, float %49, float 0.000000e+00, !dbg !27
  %98 = select i1 %18, float %50, float 0.000000e+00, !dbg !27
  %99 = select i1 %18, float %78, float 0.000000e+00, !dbg !28
  %100 = select i1 %18, float %79, float 0.000000e+00, !dbg !28
  %101 = select i1 %18, float %80, float 0.000000e+00, !dbg !28
  %102 = select i1 %18, float %81, float 0.000000e+00, !dbg !28
  %103 = select i1 %18, float %87, float 0.000000e+00, !dbg !28
  %104 = select i1 %18, float %88, float 0.000000e+00, !dbg !28
  %105 = select i1 %18, float %89, float 0.000000e+00, !dbg !28
  %106 = select i1 %18, float %90, float 0.000000e+00, !dbg !28
  %107 = fsub float %95, %91, !dbg !29
  %108 = fadd float %99, %103, !dbg !34
  %109 = fcmp oeq float %108, 0.000000e+00, !dbg !35
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %108) #3, !dbg !36
  %111 = select i1 %109, float 0.000000e+00, float %110, !dbg !37
  %112 = fmul float %107, %111, !dbg !38
  %113 = fadd float %91, %112, !dbg !39
  %114 = fadd float %58, %67, !dbg !40
  %115 = select i1 %18, float %114, float 0.000000e+00, !dbg !40
  %116 = fmul float %107, %107, !dbg !41
  %117 = fmul float %116, %99, !dbg !42
  %118 = fmul float %117, %111, !dbg !43
  %119 = fadd float %115, %118, !dbg !44
  %120 = fsub float %96, %92, !dbg !29
  %121 = fadd float %100, %104, !dbg !34
  %122 = fcmp oeq float %121, 0.000000e+00, !dbg !35
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %121) #3, !dbg !36
  %124 = select i1 %122, float 0.000000e+00, float %123, !dbg !37
  %125 = fmul float %120, %124, !dbg !38
  %126 = fadd float %92, %125, !dbg !39
  %127 = fadd float %59, %68, !dbg !40
  %128 = select i1 %18, float %127, float 0.000000e+00, !dbg !40
  %129 = fmul float %120, %120, !dbg !41
  %130 = fmul float %129, %100, !dbg !42
  %131 = fmul float %130, %124, !dbg !43
  %132 = fadd float %128, %131, !dbg !44
  %133 = fsub float %97, %93, !dbg !29
  %134 = fadd float %101, %105, !dbg !34
  %135 = fcmp oeq float %134, 0.000000e+00, !dbg !35
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %134) #3, !dbg !36
  %137 = select i1 %135, float 0.000000e+00, float %136, !dbg !37
  %138 = fmul float %133, %137, !dbg !38
  %139 = fadd float %93, %138, !dbg !39
  %140 = fadd float %60, %69, !dbg !40
  %141 = select i1 %18, float %140, float 0.000000e+00, !dbg !40
  %142 = fmul float %133, %133, !dbg !41
  %143 = fmul float %142, %101, !dbg !42
  %144 = fmul float %143, %137, !dbg !43
  %145 = fadd float %141, %144, !dbg !44
  %146 = fsub float %98, %94, !dbg !29
  %147 = fadd float %102, %106, !dbg !34
  %148 = fcmp oeq float %147, 0.000000e+00, !dbg !35
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %147) #3, !dbg !36
  %150 = select i1 %148, float 0.000000e+00, float %149, !dbg !37
  %151 = fmul float %146, %150, !dbg !38
  %152 = fadd float %94, %151, !dbg !39
  %153 = fadd float %61, %70, !dbg !40
  %154 = select i1 %18, float %153, float 0.000000e+00, !dbg !40
  %155 = fmul float %146, %146, !dbg !41
  %156 = fmul float %155, %102, !dbg !42
  %157 = fmul float %156, %150, !dbg !43
  %158 = fadd float %154, %157, !dbg !44
  %159 = bitcast float %113 to i32, !dbg !45
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 16, i32 31), !dbg !45
  %161 = bitcast i32 %160 to float, !dbg !45
  %162 = bitcast float %119 to i32, !dbg !45
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 16, i32 31), !dbg !45
  %164 = bitcast i32 %163 to float, !dbg !45
  %165 = bitcast float %108 to i32, !dbg !45
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 16, i32 31), !dbg !45
  %167 = bitcast i32 %166 to float, !dbg !45
  %168 = fsub float %161, %113, !dbg !29
  %169 = fadd float %108, %167, !dbg !34
  %170 = fcmp oeq float %169, 0.000000e+00, !dbg !35
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %167, float %169) #3, !dbg !36
  %172 = select i1 %170, float 0.000000e+00, float %171, !dbg !37
  %173 = fmul float %168, %172, !dbg !38
  %174 = fadd float %113, %173, !dbg !39
  %175 = fadd float %119, %164, !dbg !40
  %176 = fmul float %168, %168, !dbg !41
  %177 = fmul float %108, %176, !dbg !42
  %178 = fmul float %177, %172, !dbg !43
  %179 = fadd float %175, %178, !dbg !44
  %180 = bitcast float %174 to i32, !dbg !45
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 8, i32 31), !dbg !45
  %182 = bitcast i32 %181 to float, !dbg !45
  %183 = bitcast float %179 to i32, !dbg !45
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 8, i32 31), !dbg !45
  %185 = bitcast i32 %184 to float, !dbg !45
  %186 = bitcast float %169 to i32, !dbg !45
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 8, i32 31), !dbg !45
  %188 = bitcast i32 %187 to float, !dbg !45
  %189 = fsub float %182, %174, !dbg !29
  %190 = fadd float %169, %188, !dbg !34
  %191 = fcmp oeq float %190, 0.000000e+00, !dbg !35
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %188, float %190) #3, !dbg !36
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !37
  %194 = fmul float %189, %193, !dbg !38
  %195 = fadd float %174, %194, !dbg !39
  %196 = fadd float %179, %185, !dbg !40
  %197 = fmul float %189, %189, !dbg !41
  %198 = fmul float %169, %197, !dbg !42
  %199 = fmul float %193, %198, !dbg !43
  %200 = fadd float %196, %199, !dbg !44
  %201 = bitcast float %126 to i32, !dbg !45
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 16, i32 31), !dbg !45
  %203 = bitcast i32 %202 to float, !dbg !45
  %204 = bitcast float %132 to i32, !dbg !45
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 16, i32 31), !dbg !45
  %206 = bitcast i32 %205 to float, !dbg !45
  %207 = bitcast float %121 to i32, !dbg !45
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 16, i32 31), !dbg !45
  %209 = bitcast i32 %208 to float, !dbg !45
  %210 = fsub float %203, %126, !dbg !29
  %211 = fadd float %121, %209, !dbg !34
  %212 = fcmp oeq float %211, 0.000000e+00, !dbg !35
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float %211) #3, !dbg !36
  %214 = select i1 %212, float 0.000000e+00, float %213, !dbg !37
  %215 = fmul float %210, %214, !dbg !38
  %216 = fadd float %126, %215, !dbg !39
  %217 = fadd float %132, %206, !dbg !40
  %218 = fmul float %210, %210, !dbg !41
  %219 = fmul float %121, %218, !dbg !42
  %220 = fmul float %219, %214, !dbg !43
  %221 = fadd float %217, %220, !dbg !44
  %222 = bitcast float %216 to i32, !dbg !45
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 8, i32 31), !dbg !45
  %224 = bitcast i32 %223 to float, !dbg !45
  %225 = bitcast float %221 to i32, !dbg !45
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 8, i32 31), !dbg !45
  %227 = bitcast i32 %226 to float, !dbg !45
  %228 = bitcast float %211 to i32, !dbg !45
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 8, i32 31), !dbg !45
  %230 = bitcast i32 %229 to float, !dbg !45
  %231 = fsub float %224, %216, !dbg !29
  %232 = fadd float %211, %230, !dbg !34
  %233 = fcmp oeq float %232, 0.000000e+00, !dbg !35
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %230, float %232) #3, !dbg !36
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !37
  %236 = fmul float %231, %235, !dbg !38
  %237 = fadd float %216, %236, !dbg !39
  %238 = fadd float %221, %227, !dbg !40
  %239 = fmul float %231, %231, !dbg !41
  %240 = fmul float %211, %239, !dbg !42
  %241 = fmul float %235, %240, !dbg !43
  %242 = fadd float %238, %241, !dbg !44
  %243 = bitcast float %139 to i32, !dbg !45
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 16, i32 31), !dbg !45
  %245 = bitcast i32 %244 to float, !dbg !45
  %246 = bitcast float %145 to i32, !dbg !45
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 16, i32 31), !dbg !45
  %248 = bitcast i32 %247 to float, !dbg !45
  %249 = bitcast float %134 to i32, !dbg !45
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 16, i32 31), !dbg !45
  %251 = bitcast i32 %250 to float, !dbg !45
  %252 = fsub float %245, %139, !dbg !29
  %253 = fadd float %134, %251, !dbg !34
  %254 = fcmp oeq float %253, 0.000000e+00, !dbg !35
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %251, float %253) #3, !dbg !36
  %256 = select i1 %254, float 0.000000e+00, float %255, !dbg !37
  %257 = fmul float %252, %256, !dbg !38
  %258 = fadd float %139, %257, !dbg !39
  %259 = fadd float %145, %248, !dbg !40
  %260 = fmul float %252, %252, !dbg !41
  %261 = fmul float %134, %260, !dbg !42
  %262 = fmul float %261, %256, !dbg !43
  %263 = fadd float %259, %262, !dbg !44
  %264 = bitcast float %258 to i32, !dbg !45
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 8, i32 31), !dbg !45
  %266 = bitcast i32 %265 to float, !dbg !45
  %267 = bitcast float %263 to i32, !dbg !45
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 8, i32 31), !dbg !45
  %269 = bitcast i32 %268 to float, !dbg !45
  %270 = bitcast float %253 to i32, !dbg !45
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 8, i32 31), !dbg !45
  %272 = bitcast i32 %271 to float, !dbg !45
  %273 = fsub float %266, %258, !dbg !29
  %274 = fadd float %253, %272, !dbg !34
  %275 = fcmp oeq float %274, 0.000000e+00, !dbg !35
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %272, float %274) #3, !dbg !36
  %277 = select i1 %275, float 0.000000e+00, float %276, !dbg !37
  %278 = fmul float %273, %277, !dbg !38
  %279 = fadd float %258, %278, !dbg !39
  %280 = fadd float %263, %269, !dbg !40
  %281 = fmul float %273, %273, !dbg !41
  %282 = fmul float %253, %281, !dbg !42
  %283 = fmul float %277, %282, !dbg !43
  %284 = fadd float %280, %283, !dbg !44
  %285 = bitcast float %152 to i32, !dbg !45
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 16, i32 31), !dbg !45
  %287 = bitcast i32 %286 to float, !dbg !45
  %288 = bitcast float %158 to i32, !dbg !45
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 16, i32 31), !dbg !45
  %290 = bitcast i32 %289 to float, !dbg !45
  %291 = bitcast float %147 to i32, !dbg !45
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 16, i32 31), !dbg !45
  %293 = bitcast i32 %292 to float, !dbg !45
  %294 = fsub float %287, %152, !dbg !29
  %295 = fadd float %147, %293, !dbg !34
  %296 = fcmp oeq float %295, 0.000000e+00, !dbg !35
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %293, float %295) #3, !dbg !36
  %298 = select i1 %296, float 0.000000e+00, float %297, !dbg !37
  %299 = fmul float %294, %298, !dbg !38
  %300 = fadd float %152, %299, !dbg !39
  %301 = fadd float %158, %290, !dbg !40
  %302 = fmul float %294, %294, !dbg !41
  %303 = fmul float %147, %302, !dbg !42
  %304 = fmul float %303, %298, !dbg !43
  %305 = fadd float %301, %304, !dbg !44
  %306 = bitcast float %300 to i32, !dbg !45
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 8, i32 31), !dbg !45
  %308 = bitcast i32 %307 to float, !dbg !45
  %309 = bitcast float %305 to i32, !dbg !45
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 8, i32 31), !dbg !45
  %311 = bitcast i32 %310 to float, !dbg !45
  %312 = bitcast float %295 to i32, !dbg !45
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 8, i32 31), !dbg !45
  %314 = bitcast i32 %313 to float, !dbg !45
  %315 = fsub float %308, %300, !dbg !29
  %316 = fadd float %295, %314, !dbg !34
  %317 = fcmp oeq float %316, 0.000000e+00, !dbg !35
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float %316) #3, !dbg !36
  %319 = select i1 %317, float 0.000000e+00, float %318, !dbg !37
  %320 = fmul float %315, %319, !dbg !38
  %321 = fadd float %300, %320, !dbg !39
  %322 = fadd float %305, %311, !dbg !40
  %323 = fmul float %315, %315, !dbg !41
  %324 = fmul float %295, %323, !dbg !42
  %325 = fmul float %319, %324, !dbg !43
  %326 = fadd float %322, %325, !dbg !44
  %327 = icmp eq i32 %12, 0, !dbg !45
  %328 = and i32 %20, 7, !dbg !45
  %329 = shl nuw nsw i32 %14, 3, !dbg !45
  %330 = or disjoint i32 %329, %328, !dbg !45
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i32 %330, !dbg !45
  %332 = bitcast float %195 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %332, i1 %327) #3, !dbg !45
  %333 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %330, !dbg !45
  %334 = bitcast float %200 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %334, i1 %327) #3, !dbg !45
  %335 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %330, !dbg !45
  %336 = bitcast float %190 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, <1 x i32> %336, i1 %327) #3, !dbg !45
  %337 = or disjoint i32 %329, 8, !dbg !45
  %338 = or disjoint i32 %337, %328, !dbg !45
  %339 = getelementptr float, ptr addrspace(3) @global_smem, i32 %338, !dbg !45
  %340 = bitcast float %237 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %340, i1 %327) #3, !dbg !45
  %341 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %338, !dbg !45
  %342 = bitcast float %242 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %341, <1 x i32> %342, i1 %327) #3, !dbg !45
  %343 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %338, !dbg !45
  %344 = bitcast float %232 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %343, <1 x i32> %344, i1 %327) #3, !dbg !45
  %345 = or disjoint i32 %329, 16, !dbg !45
  %346 = or disjoint i32 %345, %328, !dbg !45
  %347 = getelementptr float, ptr addrspace(3) @global_smem, i32 %346, !dbg !45
  %348 = bitcast float %279 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, <1 x i32> %348, i1 %327) #3, !dbg !45
  %349 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %346, !dbg !45
  %350 = bitcast float %284 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %349, <1 x i32> %350, i1 %327) #3, !dbg !45
  %351 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %346, !dbg !45
  %352 = bitcast float %274 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %351, <1 x i32> %352, i1 %327) #3, !dbg !45
  %353 = or disjoint i32 %329, 24, !dbg !45
  %354 = or disjoint i32 %353, %328, !dbg !45
  %355 = getelementptr float, ptr addrspace(3) @global_smem, i32 %354, !dbg !45
  %356 = bitcast float %321 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %355, <1 x i32> %356, i1 %327) #3, !dbg !45
  %357 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %354, !dbg !45
  %358 = bitcast float %326 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %357, <1 x i32> %358, i1 %327) #3, !dbg !45
  %359 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %354, !dbg !45
  %360 = bitcast float %316 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %359, <1 x i32> %360, i1 %327) #3, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %361 = icmp slt i32 %11, 256, !dbg !45
  %362 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !45
  %363 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %362, i1 %361) #3, !dbg !45
  %364 = bitcast i32 %363 to float, !dbg !45
  %365 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %11, !dbg !45
  %366 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %365, i1 %361) #3, !dbg !45
  %367 = bitcast i32 %366 to float, !dbg !45
  %368 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %11, !dbg !45
  %369 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %368, i1 %361) #3, !dbg !45
  %370 = bitcast i32 %369 to float, !dbg !45
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 4, i32 31), !dbg !45
  %372 = bitcast i32 %371 to float, !dbg !45
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 4, i32 31), !dbg !45
  %374 = bitcast i32 %373 to float, !dbg !45
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %369, i32 4, i32 31), !dbg !45
  %376 = bitcast i32 %375 to float, !dbg !45
  %377 = fsub float %372, %364, !dbg !29
  %378 = fadd float %370, %376, !dbg !34
  %379 = fcmp oeq float %378, 0.000000e+00, !dbg !35
  %380 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %376, float %378) #3, !dbg !36
  %381 = select i1 %379, float 0.000000e+00, float %380, !dbg !37
  %382 = fmul float %377, %381, !dbg !38
  %383 = fadd float %382, %364, !dbg !39
  %384 = fadd float %367, %374, !dbg !40
  %385 = fmul float %377, %377, !dbg !41
  %386 = fmul float %385, %370, !dbg !42
  %387 = fmul float %386, %381, !dbg !43
  %388 = fadd float %384, %387, !dbg !44
  %389 = bitcast float %383 to i32, !dbg !45
  %390 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %389, i32 2, i32 31), !dbg !45
  %391 = bitcast i32 %390 to float, !dbg !45
  %392 = bitcast float %388 to i32, !dbg !45
  %393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %392, i32 2, i32 31), !dbg !45
  %394 = bitcast i32 %393 to float, !dbg !45
  %395 = bitcast float %378 to i32, !dbg !45
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 2, i32 31), !dbg !45
  %397 = bitcast i32 %396 to float, !dbg !45
  %398 = fsub float %391, %383, !dbg !29
  %399 = fadd float %378, %397, !dbg !34
  %400 = fcmp oeq float %399, 0.000000e+00, !dbg !35
  %401 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %397, float %399) #3, !dbg !36
  %402 = select i1 %400, float 0.000000e+00, float %401, !dbg !37
  %403 = fmul float %398, %402, !dbg !38
  %404 = fadd float %383, %403, !dbg !39
  %405 = fadd float %388, %394, !dbg !40
  %406 = fmul float %398, %398, !dbg !41
  %407 = fmul float %378, %406, !dbg !42
  %408 = fmul float %402, %407, !dbg !43
  %409 = fadd float %405, %408, !dbg !44
  %410 = bitcast float %404 to i32, !dbg !45
  %411 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %410, i32 1, i32 31), !dbg !45
  %412 = bitcast i32 %411 to float, !dbg !45
  %413 = bitcast float %409 to i32, !dbg !45
  %414 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %413, i32 1, i32 31), !dbg !45
  %415 = bitcast i32 %414 to float, !dbg !45
  %416 = bitcast float %399 to i32, !dbg !45
  %417 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %416, i32 1, i32 31), !dbg !45
  %418 = bitcast i32 %417 to float, !dbg !45
  %419 = fsub float %412, %404, !dbg !29
  %420 = fadd float %399, %418, !dbg !34
  %421 = fcmp oeq float %420, 0.000000e+00, !dbg !35
  %422 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %418, float %420) #3, !dbg !36
  %423 = select i1 %421, float 0.000000e+00, float %422, !dbg !37
  %424 = fmul float %419, %423, !dbg !38
  %425 = fadd float %404, %424, !dbg !39
  %426 = fadd float %409, %415, !dbg !40
  %427 = fmul float %419, %419, !dbg !41
  %428 = fmul float %399, %427, !dbg !42
  %429 = fmul float %423, %428, !dbg !43
  %430 = fadd float %426, %429, !dbg !44
  %431 = and i32 %11, 7, !dbg !45
  %432 = icmp eq i32 %431, 0, !dbg !45
  %433 = and i1 %361, %432, !dbg !45
  %434 = bitcast float %425 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %362, <1 x i32> %434, i1 %433) #3, !dbg !45
  %435 = bitcast float %430 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %365, <1 x i32> %435, i1 %433) #3, !dbg !45
  %436 = bitcast float %420 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %368, <1 x i32> %436, i1 %433) #3, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %437 = getelementptr float, ptr addrspace(3) @global_smem, i32 %329, !dbg !45
  %438 = load i32, ptr addrspace(3) %437, align 16, !dbg !45
  %439 = getelementptr float, ptr addrspace(3) @global_smem, i32 %337, !dbg !45
  %440 = load i32, ptr addrspace(3) %439, align 16, !dbg !45
  %441 = getelementptr float, ptr addrspace(3) @global_smem, i32 %345, !dbg !45
  %442 = load i32, ptr addrspace(3) %441, align 16, !dbg !45
  %443 = getelementptr float, ptr addrspace(3) @global_smem, i32 %353, !dbg !45
  %444 = load i32, ptr addrspace(3) %443, align 16, !dbg !45
  %445 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %329, !dbg !45
  %446 = load i32, ptr addrspace(3) %445, align 16, !dbg !45
  %447 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %337, !dbg !45
  %448 = load i32, ptr addrspace(3) %447, align 16, !dbg !45
  %449 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %345, !dbg !45
  %450 = load i32, ptr addrspace(3) %449, align 16, !dbg !45
  %451 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %353, !dbg !45
  %452 = load i32, ptr addrspace(3) %451, align 16, !dbg !45
  %453 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %329, !dbg !45
  %454 = load i32, ptr addrspace(3) %453, align 16, !dbg !45
  %455 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %337, !dbg !45
  %456 = load i32, ptr addrspace(3) %455, align 16, !dbg !45
  %457 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %345, !dbg !45
  %458 = load i32, ptr addrspace(3) %457, align 16, !dbg !45
  %459 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %353, !dbg !45
  %460 = load i32, ptr addrspace(3) %459, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %461 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !46
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %461, i32 %438, i32 %440, i32 %442, i32 %444, i1 true) #3, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %462 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !46
  %463 = load i32, ptr addrspace(3) %462, align 4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %461, i32 %446, i32 %448, i32 %450, i32 %452, i1 true) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %464 = load i32, ptr addrspace(3) %462, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %461, i32 %454, i32 %456, i32 %458, i32 %460, i1 true) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %465 = load i32, ptr addrspace(3) %462, align 4, !dbg !48
  %466 = sext i32 %17 to i64, !dbg !49
  %467 = getelementptr float, ptr addrspace(1) %3, i64 %466, !dbg !49
  %468 = icmp eq i32 %328, 0, !dbg !50
  %469 = and i1 %468, %19, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %463, ptr addrspace(1) %467, i1 %469) #3, !dbg !50
  %470 = getelementptr float, ptr addrspace(1) %4, i64 %466, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %464, ptr addrspace(1) %470, i1 %469) #3, !dbg !52
  %471 = getelementptr float, ptr addrspace(1) %5, i64 %466, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %465, ptr addrspace(1) %471, i1 %469) #3, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czket54n5uttlvazwantofmsggkqk6f2i3pzuzn6wvt77fq4u5rg.py", directory: "inductor_cache/zk")
!4 = !{ptr @triton_per_fused_native_group_norm_7, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_7", linkageName: "triton_per_fused_native_group_norm_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 46, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 42, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 51, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 51, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 51, scope: !7)
!27 = !DILocation(line: 39, column: 33, scope: !7)
!28 = !DILocation(line: 41, column: 33, scope: !7)
!29 = !DILocation(line: 192, column: 21, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!33 = !DILocation(line: 42, column: 67, scope: !7)
!34 = !DILocation(line: 193, column: 28, scope: !30, inlinedAt: !33)
!35 = !DILocation(line: 194, column: 39, scope: !30, inlinedAt: !33)
!36 = !DILocation(line: 194, column: 60, scope: !30, inlinedAt: !33)
!37 = !DILocation(line: 194, column: 49, scope: !30, inlinedAt: !33)
!38 = !DILocation(line: 196, column: 25, scope: !30, inlinedAt: !33)
!39 = !DILocation(line: 196, column: 17, scope: !30, inlinedAt: !33)
!40 = !DILocation(line: 197, column: 15, scope: !30, inlinedAt: !33)
!41 = !DILocation(line: 197, column: 30, scope: !30, inlinedAt: !33)
!42 = !DILocation(line: 197, column: 38, scope: !30, inlinedAt: !33)
!43 = !DILocation(line: 197, column: 49, scope: !30, inlinedAt: !33)
!44 = !DILocation(line: 197, column: 22, scope: !30, inlinedAt: !33)
!45 = !DILocation(line: 204, column: 46, scope: !32, inlinedAt: !33)
!46 = !DILocation(line: 43, column: 18, scope: !7)
!47 = !DILocation(line: 44, column: 18, scope: !7)
!48 = !DILocation(line: 45, column: 18, scope: !7)
!49 = !DILocation(line: 46, column: 25, scope: !7)
!50 = !DILocation(line: 46, column: 37, scope: !7)
!51 = !DILocation(line: 47, column: 25, scope: !7)
!52 = !DILocation(line: 47, column: 37, scope: !7)
!53 = !DILocation(line: 48, column: 25, scope: !7)
!54 = !DILocation(line: 48, column: 37, scope: !7)
!55 = !DILocation(line: 48, column: 4, scope: !7)
