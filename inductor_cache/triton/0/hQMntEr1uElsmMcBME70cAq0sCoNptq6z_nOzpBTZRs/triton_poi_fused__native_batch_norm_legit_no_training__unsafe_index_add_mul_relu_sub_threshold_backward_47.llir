; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_47(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, ptr addrspace(1) %26, ptr addrspace(1) %27, ptr addrspace(1) %28, ptr addrspace(1) %29, i32 %30) local_unnamed_addr !dbg !7 {
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %33 = shl i32 %32, 9, !dbg !11
  %34 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %35 = shl i32 %34, 2, !dbg !12
  %36 = and i32 %35, 508, !dbg !12
  %37 = or disjoint i32 %33, %36, !dbg !13
  %38 = or disjoint i32 %37, 2, !dbg !13
  %39 = sdiv i32 %37, 256, !dbg !14
  %40 = srem i32 %39, 48, !dbg !15
  %.frozen = freeze i32 %37, !dbg !16
  %41 = sdiv i32 %.frozen, 16, !dbg !16
  %42 = srem i32 %41, 16, !dbg !17
  %43 = mul i32 %41, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %43, !dbg !18
  %44 = srem i32 %38, 16, !dbg !18
  %45 = sext i32 %37 to i64, !dbg !19
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !19
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !20
  %48 = sext i32 %40 to i64, !dbg !21
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !21
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !22
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !22
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !22
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !23
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !24
  %56 = bitcast i32 %55 to float, !dbg !24
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !24
  %58 = bitcast i32 %57 to float, !dbg !24
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !24
  %60 = bitcast i32 %59 to float, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !24
  %62 = bitcast i32 %61 to float, !dbg !24
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !26
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !26
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !26
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !26
  %68 = getelementptr float, ptr addrspace(1) %5, i64 %48, !dbg !27
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !28
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !28
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !28
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !28
  %73 = getelementptr float, ptr addrspace(1) %6, i64 %45, !dbg !29
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !30
  %75 = sext i32 %42 to i64, !dbg !31
  %76 = getelementptr i64, ptr addrspace(1) %7, i64 %75, !dbg !31
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !32
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !32
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !32
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !32
  %81 = sext i32 %.decomposed to i64, !dbg !33
  %82 = getelementptr i64, ptr addrspace(1) %8, i64 %81, !dbg !33
  %83 = sext i32 %44 to i64, !dbg !33
  %84 = getelementptr i64, ptr addrspace(1) %8, i64 %83, !dbg !33
  %85 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !34
  %86 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !34
  %87 = getelementptr i64, ptr addrspace(1) %10, i64 %81, !dbg !35
  %88 = getelementptr i64, ptr addrspace(1) %10, i64 %83, !dbg !35
  %89 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !36
  %90 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !36
  %91 = getelementptr float, ptr addrspace(1) %11, i64 %81, !dbg !37
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !38
  %93 = getelementptr i64, ptr addrspace(1) %12, i64 %75, !dbg !39
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !40
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !40
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !40
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !40
  %98 = getelementptr float, ptr addrspace(1) %13, i64 %75, !dbg !41
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #3, !dbg !42
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #3, !dbg !42
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #3, !dbg !42
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #3, !dbg !42
  %103 = getelementptr i64, ptr addrspace(1) %14, i64 %75, !dbg !43
  %104 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %103, i1 true) #3, !dbg !44
  %105 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %103, i1 true) #3, !dbg !44
  %106 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %103, i1 true) #3, !dbg !44
  %107 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %103, i1 true) #3, !dbg !44
  %108 = getelementptr i64, ptr addrspace(1) %15, i64 %81, !dbg !45
  %109 = getelementptr i64, ptr addrspace(1) %15, i64 %83, !dbg !45
  %110 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %108, i1 true) #3, !dbg !46
  %111 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %109, i1 true) #3, !dbg !46
  %112 = getelementptr i64, ptr addrspace(1) %17, i64 %81, !dbg !47
  %113 = getelementptr i64, ptr addrspace(1) %17, i64 %83, !dbg !47
  %114 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !48
  %115 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !48
  %116 = getelementptr float, ptr addrspace(1) %18, i64 %81, !dbg !49
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %116, i1 true) #3, !dbg !50
  %118 = getelementptr i64, ptr addrspace(1) %19, i64 %75, !dbg !51
  %119 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !52
  %120 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !52
  %121 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !52
  %122 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !52
  %123 = getelementptr float, ptr addrspace(1) %20, i64 %75, !dbg !53
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !54
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !54
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !54
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !54
  %128 = getelementptr i64, ptr addrspace(1) %21, i64 %75, !dbg !55
  %129 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %128, i1 true) #3, !dbg !56
  %130 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %128, i1 true) #3, !dbg !56
  %131 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %128, i1 true) #3, !dbg !56
  %132 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %128, i1 true) #3, !dbg !56
  %133 = getelementptr i64, ptr addrspace(1) %22, i64 %81, !dbg !57
  %134 = getelementptr i64, ptr addrspace(1) %22, i64 %83, !dbg !57
  %135 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %133, i1 true) #3, !dbg !58
  %136 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %134, i1 true) #3, !dbg !58
  %137 = getelementptr i64, ptr addrspace(1) %24, i64 %81, !dbg !59
  %138 = getelementptr i64, ptr addrspace(1) %24, i64 %83, !dbg !59
  %139 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %137, i1 true) #3, !dbg !60
  %140 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %138, i1 true) #3, !dbg !60
  %141 = getelementptr float, ptr addrspace(1) %25, i64 %81, !dbg !61
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %141, i1 true) #3, !dbg !62
  %143 = getelementptr i64, ptr addrspace(1) %26, i64 %75, !dbg !63
  %144 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %143, i1 true) #3, !dbg !64
  %145 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %143, i1 true) #3, !dbg !64
  %146 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %143, i1 true) #3, !dbg !64
  %147 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %143, i1 true) #3, !dbg !64
  %148 = getelementptr float, ptr addrspace(1) %27, i64 %75, !dbg !65
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #3, !dbg !66
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #3, !dbg !66
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #3, !dbg !66
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #3, !dbg !66
  %153 = fadd float %56, 0x3EE4F8B580000000, !dbg !67
  %154 = fadd float %58, 0x3EE4F8B580000000, !dbg !67
  %155 = fadd float %60, 0x3EE4F8B580000000, !dbg !67
  %156 = fadd float %62, 0x3EE4F8B580000000, !dbg !67
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i = icmp eq i32 %157, 0, !dbg !68
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i = icmp eq i32 %158, 0, !dbg !68
  br i1 %.not.i, label %164, label %159, !dbg !68

159:                                              ; preds = %31
  br i1 %.not1.i, label %162, label %160, !dbg !68

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %153) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %153) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

164:                                              ; preds = %31
  br i1 %.not1.i, label %167, label %165, !dbg !68

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.f(float %153) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.f(float %153) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

__nv_sqrtf.exit:                                  ; preds = %160, %162, %165, %167
  %.0.i = phi float [ %161, %160 ], [ %163, %162 ], [ %166, %165 ], [ %168, %167 ], !dbg !68
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i1 = icmp eq i32 %169, 0, !dbg !68
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i4 = icmp eq i32 %170, 0, !dbg !68
  br i1 %.not.i1, label %176, label %171, !dbg !68

171:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %174, label %172, !dbg !68

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %154) #3, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %154) #3, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

176:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %179, label %177, !dbg !68

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.f(float %154) #3, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.f(float %154) #3, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

__nv_sqrtf.exit5:                                 ; preds = %172, %174, %177, %179
  %.0.i3 = phi float [ %173, %172 ], [ %175, %174 ], [ %178, %177 ], [ %180, %179 ], !dbg !68
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i6 = icmp eq i32 %181, 0, !dbg !68
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i9 = icmp eq i32 %182, 0, !dbg !68
  br i1 %.not.i6, label %188, label %183, !dbg !68

183:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %186, label %184, !dbg !68

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %155) #3, !dbg !68
  br label %__nv_sqrtf.exit10, !dbg !68

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %155) #3, !dbg !68
  br label %__nv_sqrtf.exit10, !dbg !68

188:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %191, label %189, !dbg !68

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.f(float %155) #3, !dbg !68
  br label %__nv_sqrtf.exit10, !dbg !68

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.f(float %155) #3, !dbg !68
  br label %__nv_sqrtf.exit10, !dbg !68

__nv_sqrtf.exit10:                                ; preds = %184, %186, %189, %191
  %.0.i8 = phi float [ %185, %184 ], [ %187, %186 ], [ %190, %189 ], [ %192, %191 ], !dbg !68
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i11 = icmp eq i32 %193, 0, !dbg !68
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i14 = icmp eq i32 %194, 0, !dbg !68
  br i1 %.not.i11, label %200, label %195, !dbg !68

195:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %198, label %196, !dbg !68

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %156) #3, !dbg !68
  br label %__nv_sqrtf.exit15, !dbg !68

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %156) #3, !dbg !68
  br label %__nv_sqrtf.exit15, !dbg !68

200:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %203, label %201, !dbg !68

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.f(float %156) #3, !dbg !68
  br label %__nv_sqrtf.exit15, !dbg !68

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.f(float %156) #3, !dbg !68
  br label %__nv_sqrtf.exit15, !dbg !68

__nv_sqrtf.exit15:                                ; preds = %196, %198, %201, %203
  %.0.i13 = phi float [ %197, %196 ], [ %199, %198 ], [ %202, %201 ], [ %204, %203 ], !dbg !68
  %205 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !20
  %206 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !22
  %207 = insertelement <4 x i32> %206, i32 %51, i64 1, !dbg !22
  %208 = insertelement <4 x i32> %207, i32 %52, i64 2, !dbg !22
  %209 = insertelement <4 x i32> %208, i32 %53, i64 3, !dbg !22
  %210 = bitcast <4 x i32> %209 to <4 x float>, !dbg !22
  %211 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !20
  %212 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !20
  %213 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !20
  %214 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !54
  %215 = insertelement <2 x i32> %214, i32 %152, i64 1, !dbg !54
  %216 = bitcast <2 x i32> %215 to <2 x float>, !dbg !54
  %217 = insertelement <2 x i32> poison, i32 %126, i64 0, !dbg !54
  %218 = insertelement <2 x i32> %217, i32 %151, i64 1, !dbg !54
  %219 = bitcast <2 x i32> %218 to <2 x float>, !dbg !54
  %220 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !54
  %221 = insertelement <2 x i32> %220, i32 %150, i64 1, !dbg !54
  %222 = bitcast <2 x i32> %221 to <2 x float>, !dbg !54
  %223 = insertelement <2 x i32> poison, i32 %124, i64 0, !dbg !54
  %224 = insertelement <2 x i32> %223, i32 %149, i64 1, !dbg !54
  %225 = bitcast <2 x i32> %224 to <2 x float>, !dbg !54
  %226 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !62
  %227 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !62
  %228 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !62
  %229 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !62
  %230 = extractvalue { i64, i64 } %140, 1, !dbg !60
  %231 = extractvalue { i64, i64 } %140, 0, !dbg !60
  %232 = extractvalue { i64, i64 } %139, 1, !dbg !60
  %233 = extractvalue { i64, i64 } %139, 0, !dbg !60
  %234 = extractvalue { i64, i64 } %136, 1, !dbg !58
  %235 = extractvalue { i64, i64 } %136, 0, !dbg !58
  %236 = extractvalue { i64, i64 } %135, 1, !dbg !58
  %237 = extractvalue { i64, i64 } %135, 0, !dbg !58
  %238 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !50
  %239 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !50
  %240 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !50
  %241 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !50
  %242 = extractvalue { i64, i64 } %115, 1, !dbg !48
  %243 = extractvalue { i64, i64 } %115, 0, !dbg !48
  %244 = extractvalue { i64, i64 } %114, 1, !dbg !48
  %245 = extractvalue { i64, i64 } %114, 0, !dbg !48
  %246 = extractvalue { i64, i64 } %111, 1, !dbg !46
  %247 = extractvalue { i64, i64 } %111, 0, !dbg !46
  %248 = extractvalue { i64, i64 } %110, 1, !dbg !46
  %249 = extractvalue { i64, i64 } %110, 0, !dbg !46
  %250 = insertelement <4 x i32> poison, i32 %99, i64 0, !dbg !42
  %251 = insertelement <4 x i32> %250, i32 %100, i64 1, !dbg !42
  %252 = insertelement <4 x i32> %251, i32 %101, i64 2, !dbg !42
  %253 = insertelement <4 x i32> %252, i32 %102, i64 3, !dbg !42
  %254 = bitcast <4 x i32> %253 to <4 x float>, !dbg !42
  %255 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !38
  %256 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !38
  %257 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !38
  %258 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !38
  %259 = extractvalue { i64, i64 } %90, 1, !dbg !36
  %260 = extractvalue { i64, i64 } %90, 0, !dbg !36
  %261 = extractvalue { i64, i64 } %89, 1, !dbg !36
  %262 = extractvalue { i64, i64 } %89, 0, !dbg !36
  %263 = extractvalue { i64, i64 } %86, 1, !dbg !34
  %264 = extractvalue { i64, i64 } %86, 0, !dbg !34
  %265 = extractvalue { i64, i64 } %85, 1, !dbg !34
  %266 = extractvalue { i64, i64 } %85, 0, !dbg !34
  %267 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !30
  %268 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !30
  %269 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !30
  %270 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !30
  %271 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !28
  %272 = insertelement <4 x i32> %271, i32 %70, i64 1, !dbg !28
  %273 = insertelement <4 x i32> %272, i32 %71, i64 2, !dbg !28
  %274 = insertelement <4 x i32> %273, i32 %72, i64 3, !dbg !28
  %275 = bitcast <4 x i32> %274 to <4 x float>, !dbg !28
  %276 = insertelement <4 x i32> poison, i32 %64, i64 0, !dbg !26
  %277 = insertelement <4 x i32> %276, i32 %65, i64 1, !dbg !26
  %278 = insertelement <4 x i32> %277, i32 %66, i64 2, !dbg !26
  %279 = insertelement <4 x i32> %278, i32 %67, i64 3, !dbg !26
  %280 = bitcast <4 x i32> %279 to <4 x float>, !dbg !26
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !69
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !69
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !69
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !69
  %285 = insertelement <4 x i32> poison, i32 %213, i64 0, !dbg !20
  %286 = insertelement <4 x i32> %285, i32 %212, i64 1, !dbg !20
  %287 = insertelement <4 x i32> %286, i32 %211, i64 2, !dbg !20
  %288 = insertelement <4 x i32> %287, i32 %205, i64 3, !dbg !20
  %289 = bitcast <4 x i32> %288 to <4 x float>, !dbg !20
  %290 = fsub <4 x float> %289, %210, !dbg !70
  %291 = insertelement <4 x float> poison, float %281, i64 0, !dbg !71
  %292 = insertelement <4 x float> %291, float %282, i64 1, !dbg !71
  %293 = insertelement <4 x float> %292, float %283, i64 2, !dbg !71
  %294 = insertelement <4 x float> %293, float %284, i64 3, !dbg !71
  %295 = fmul <4 x float> %290, %294, !dbg !71
  %296 = fmul <4 x float> %295, %280, !dbg !72
  %297 = lshr i64 %77, 60, !dbg !73
  %298 = and i64 %297, 8, !dbg !73
  %299 = add i64 %298, %77, !dbg !73
  %300 = lshr i64 %266, 60, !dbg !74
  %301 = and i64 %300, 8, !dbg !74
  %302 = lshr i64 %265, 60, !dbg !74
  %303 = and i64 %302, 8, !dbg !74
  %304 = lshr i64 %264, 60, !dbg !74
  %305 = and i64 %304, 8, !dbg !74
  %306 = lshr i64 %263, 60, !dbg !74
  %307 = and i64 %306, 8, !dbg !74
  %308 = shl i64 %299, 3, !dbg !75
  %309 = shl nsw i32 %39, 6, !dbg !76
  %310 = sext i32 %309 to i64, !dbg !77
  %311 = getelementptr float, ptr addrspace(1) %9, i64 %266, !dbg !78
  %312 = getelementptr float, ptr addrspace(1) %311, i64 %301, !dbg !78
  %313 = getelementptr float, ptr addrspace(1) %312, i64 %308, !dbg !78
  %314 = getelementptr float, ptr addrspace(1) %313, i64 %310, !dbg !78
  %315 = getelementptr float, ptr addrspace(1) %9, i64 %265, !dbg !78
  %316 = getelementptr float, ptr addrspace(1) %315, i64 %303, !dbg !78
  %317 = getelementptr float, ptr addrspace(1) %316, i64 %308, !dbg !78
  %318 = getelementptr float, ptr addrspace(1) %317, i64 %310, !dbg !78
  %319 = getelementptr float, ptr addrspace(1) %9, i64 %264, !dbg !78
  %320 = getelementptr float, ptr addrspace(1) %319, i64 %305, !dbg !78
  %321 = getelementptr float, ptr addrspace(1) %320, i64 %308, !dbg !78
  %322 = getelementptr float, ptr addrspace(1) %321, i64 %310, !dbg !78
  %323 = getelementptr float, ptr addrspace(1) %9, i64 %263, !dbg !78
  %324 = getelementptr float, ptr addrspace(1) %323, i64 %307, !dbg !78
  %325 = getelementptr float, ptr addrspace(1) %324, i64 %308, !dbg !78
  %326 = getelementptr float, ptr addrspace(1) %325, i64 %310, !dbg !78
  %327 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %314, i1 true) #3, !dbg !79
  %328 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %318, i1 true) #3, !dbg !79
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %322, i1 true) #3, !dbg !79
  %330 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %326, i1 true) #3, !dbg !79
  %331 = lshr i64 %262, 60, !dbg !80
  %332 = and i64 %331, 8, !dbg !80
  %333 = lshr i64 %261, 60, !dbg !80
  %334 = and i64 %333, 8, !dbg !80
  %335 = lshr i64 %260, 60, !dbg !80
  %336 = and i64 %335, 8, !dbg !80
  %337 = lshr i64 %259, 60, !dbg !80
  %338 = and i64 %337, 8, !dbg !80
  %339 = getelementptr float, ptr addrspace(1) %9, i64 %262, !dbg !81
  %340 = getelementptr float, ptr addrspace(1) %339, i64 %332, !dbg !81
  %341 = getelementptr float, ptr addrspace(1) %340, i64 %308, !dbg !81
  %342 = getelementptr float, ptr addrspace(1) %341, i64 %310, !dbg !81
  %343 = getelementptr float, ptr addrspace(1) %9, i64 %261, !dbg !81
  %344 = getelementptr float, ptr addrspace(1) %343, i64 %334, !dbg !81
  %345 = getelementptr float, ptr addrspace(1) %344, i64 %308, !dbg !81
  %346 = getelementptr float, ptr addrspace(1) %345, i64 %310, !dbg !81
  %347 = getelementptr float, ptr addrspace(1) %9, i64 %260, !dbg !81
  %348 = getelementptr float, ptr addrspace(1) %347, i64 %336, !dbg !81
  %349 = getelementptr float, ptr addrspace(1) %348, i64 %308, !dbg !81
  %350 = getelementptr float, ptr addrspace(1) %349, i64 %310, !dbg !81
  %351 = getelementptr float, ptr addrspace(1) %9, i64 %259, !dbg !81
  %352 = getelementptr float, ptr addrspace(1) %351, i64 %338, !dbg !81
  %353 = getelementptr float, ptr addrspace(1) %352, i64 %308, !dbg !81
  %354 = getelementptr float, ptr addrspace(1) %353, i64 %310, !dbg !81
  %355 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %342, i1 true) #3, !dbg !82
  %356 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %346, i1 true) #3, !dbg !82
  %357 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %350, i1 true) #3, !dbg !82
  %358 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %354, i1 true) #3, !dbg !82
  %359 = lshr i64 %94, 60, !dbg !83
  %360 = and i64 %359, 8, !dbg !83
  %361 = add i64 %360, %94, !dbg !83
  %362 = shl i64 %361, 3, !dbg !84
  %363 = getelementptr float, ptr addrspace(1) %312, i64 %362, !dbg !85
  %364 = getelementptr float, ptr addrspace(1) %363, i64 %310, !dbg !85
  %365 = getelementptr float, ptr addrspace(1) %316, i64 %362, !dbg !85
  %366 = getelementptr float, ptr addrspace(1) %365, i64 %310, !dbg !85
  %367 = getelementptr float, ptr addrspace(1) %320, i64 %362, !dbg !85
  %368 = getelementptr float, ptr addrspace(1) %367, i64 %310, !dbg !85
  %369 = getelementptr float, ptr addrspace(1) %324, i64 %362, !dbg !85
  %370 = getelementptr float, ptr addrspace(1) %369, i64 %310, !dbg !85
  %371 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %364, i1 true) #3, !dbg !86
  %372 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %366, i1 true) #3, !dbg !86
  %373 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %368, i1 true) #3, !dbg !86
  %374 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %370, i1 true) #3, !dbg !86
  %375 = getelementptr float, ptr addrspace(1) %340, i64 %362, !dbg !87
  %376 = getelementptr float, ptr addrspace(1) %375, i64 %310, !dbg !87
  %377 = getelementptr float, ptr addrspace(1) %344, i64 %362, !dbg !87
  %378 = getelementptr float, ptr addrspace(1) %377, i64 %310, !dbg !87
  %379 = getelementptr float, ptr addrspace(1) %348, i64 %362, !dbg !87
  %380 = getelementptr float, ptr addrspace(1) %379, i64 %310, !dbg !87
  %381 = getelementptr float, ptr addrspace(1) %352, i64 %362, !dbg !87
  %382 = getelementptr float, ptr addrspace(1) %381, i64 %310, !dbg !87
  %383 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %376, i1 true) #3, !dbg !88
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %378, i1 true) #3, !dbg !88
  %385 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %380, i1 true) #3, !dbg !88
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %382, i1 true) #3, !dbg !88
  %387 = insertelement <2 x i32> poison, i32 %371, i64 0, !dbg !86
  %388 = insertelement <2 x i32> %387, i32 %327, i64 1, !dbg !86
  %389 = bitcast <2 x i32> %388 to <2 x float>, !dbg !86
  %390 = insertelement <2 x i32> poison, i32 %383, i64 0, !dbg !88
  %391 = insertelement <2 x i32> %390, i32 %355, i64 1, !dbg !88
  %392 = bitcast <2 x i32> %391 to <2 x float>, !dbg !88
  %393 = fsub <2 x float> %392, %389, !dbg !89
  %394 = insertelement <2 x i32> poison, i32 %258, i64 0, !dbg !90
  %395 = bitcast <2 x i32> %394 to <2 x float>, !dbg !90
  %396 = shufflevector <2 x float> %395, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !90
  %397 = fmul <2 x float> %393, %396, !dbg !90
  %398 = fadd <2 x float> %397, %389, !dbg !91
  %399 = insertelement <2 x i32> poison, i32 %372, i64 0, !dbg !86
  %400 = insertelement <2 x i32> %399, i32 %328, i64 1, !dbg !86
  %401 = bitcast <2 x i32> %400 to <2 x float>, !dbg !86
  %402 = insertelement <2 x i32> poison, i32 %384, i64 0, !dbg !88
  %403 = insertelement <2 x i32> %402, i32 %356, i64 1, !dbg !88
  %404 = bitcast <2 x i32> %403 to <2 x float>, !dbg !88
  %405 = fsub <2 x float> %404, %401, !dbg !89
  %406 = insertelement <2 x i32> poison, i32 %257, i64 0, !dbg !90
  %407 = bitcast <2 x i32> %406 to <2 x float>, !dbg !90
  %408 = shufflevector <2 x float> %407, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !90
  %409 = fmul <2 x float> %405, %408, !dbg !90
  %410 = fadd <2 x float> %409, %401, !dbg !91
  %411 = insertelement <2 x i32> poison, i32 %373, i64 0, !dbg !86
  %412 = insertelement <2 x i32> %411, i32 %329, i64 1, !dbg !86
  %413 = bitcast <2 x i32> %412 to <2 x float>, !dbg !86
  %414 = insertelement <2 x i32> poison, i32 %385, i64 0, !dbg !88
  %415 = insertelement <2 x i32> %414, i32 %357, i64 1, !dbg !88
  %416 = bitcast <2 x i32> %415 to <2 x float>, !dbg !88
  %417 = fsub <2 x float> %416, %413, !dbg !89
  %418 = insertelement <2 x i32> poison, i32 %256, i64 0, !dbg !90
  %419 = bitcast <2 x i32> %418 to <2 x float>, !dbg !90
  %420 = shufflevector <2 x float> %419, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !90
  %421 = fmul <2 x float> %417, %420, !dbg !90
  %422 = fadd <2 x float> %421, %413, !dbg !91
  %423 = shufflevector <2 x float> %422, <2 x float> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %424 = shufflevector <2 x float> %422, <2 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %425 = insertelement <2 x i32> poison, i32 %374, i64 0, !dbg !86
  %426 = insertelement <2 x i32> %425, i32 %330, i64 1, !dbg !86
  %427 = bitcast <2 x i32> %426 to <2 x float>, !dbg !86
  %428 = insertelement <2 x i32> poison, i32 %386, i64 0, !dbg !88
  %429 = insertelement <2 x i32> %428, i32 %358, i64 1, !dbg !88
  %430 = bitcast <2 x i32> %429 to <2 x float>, !dbg !88
  %431 = fsub <2 x float> %430, %427, !dbg !89
  %432 = insertelement <2 x i32> poison, i32 %255, i64 0, !dbg !90
  %433 = bitcast <2 x i32> %432 to <2 x float>, !dbg !90
  %434 = shufflevector <2 x float> %433, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !90
  %435 = fmul <2 x float> %431, %434, !dbg !90
  %436 = fadd <2 x float> %435, %427, !dbg !91
  %437 = shufflevector <2 x float> %436, <2 x float> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %438 = shufflevector <2 x float> %436, <2 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %439 = lshr i64 %104, 61, !dbg !92
  %440 = and i64 %439, 4, !dbg !92
  %441 = add i64 %440, %104, !dbg !92
  %442 = lshr i64 %249, 61, !dbg !93
  %443 = and i64 %442, 4, !dbg !93
  %444 = lshr i64 %248, 61, !dbg !93
  %445 = and i64 %444, 4, !dbg !93
  %446 = lshr i64 %247, 61, !dbg !93
  %447 = and i64 %446, 4, !dbg !93
  %448 = lshr i64 %246, 61, !dbg !93
  %449 = and i64 %448, 4, !dbg !93
  %450 = shl i64 %441, 2, !dbg !94
  %451 = shl nsw i32 %39, 4, !dbg !95
  %452 = sext i32 %451 to i64, !dbg !96
  %453 = getelementptr float, ptr addrspace(1) %16, i64 %249, !dbg !97
  %454 = getelementptr float, ptr addrspace(1) %453, i64 %443, !dbg !97
  %455 = getelementptr float, ptr addrspace(1) %454, i64 %450, !dbg !97
  %456 = getelementptr float, ptr addrspace(1) %455, i64 %452, !dbg !97
  %457 = getelementptr float, ptr addrspace(1) %16, i64 %248, !dbg !97
  %458 = getelementptr float, ptr addrspace(1) %457, i64 %445, !dbg !97
  %459 = getelementptr float, ptr addrspace(1) %458, i64 %450, !dbg !97
  %460 = getelementptr float, ptr addrspace(1) %459, i64 %452, !dbg !97
  %461 = getelementptr float, ptr addrspace(1) %16, i64 %247, !dbg !97
  %462 = getelementptr float, ptr addrspace(1) %461, i64 %447, !dbg !97
  %463 = getelementptr float, ptr addrspace(1) %462, i64 %450, !dbg !97
  %464 = getelementptr float, ptr addrspace(1) %463, i64 %452, !dbg !97
  %465 = getelementptr float, ptr addrspace(1) %16, i64 %246, !dbg !97
  %466 = getelementptr float, ptr addrspace(1) %465, i64 %449, !dbg !97
  %467 = getelementptr float, ptr addrspace(1) %466, i64 %450, !dbg !97
  %468 = getelementptr float, ptr addrspace(1) %467, i64 %452, !dbg !97
  %469 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %456, i1 true) #3, !dbg !98
  %470 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %460, i1 true) #3, !dbg !98
  %471 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %464, i1 true) #3, !dbg !98
  %472 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %468, i1 true) #3, !dbg !98
  %473 = lshr i64 %245, 61, !dbg !99
  %474 = and i64 %473, 4, !dbg !99
  %475 = lshr i64 %244, 61, !dbg !99
  %476 = and i64 %475, 4, !dbg !99
  %477 = lshr i64 %243, 61, !dbg !99
  %478 = and i64 %477, 4, !dbg !99
  %479 = lshr i64 %242, 61, !dbg !99
  %480 = and i64 %479, 4, !dbg !99
  %481 = getelementptr float, ptr addrspace(1) %16, i64 %245, !dbg !100
  %482 = getelementptr float, ptr addrspace(1) %481, i64 %474, !dbg !100
  %483 = getelementptr float, ptr addrspace(1) %482, i64 %450, !dbg !100
  %484 = getelementptr float, ptr addrspace(1) %483, i64 %452, !dbg !100
  %485 = getelementptr float, ptr addrspace(1) %16, i64 %244, !dbg !100
  %486 = getelementptr float, ptr addrspace(1) %485, i64 %476, !dbg !100
  %487 = getelementptr float, ptr addrspace(1) %486, i64 %450, !dbg !100
  %488 = getelementptr float, ptr addrspace(1) %487, i64 %452, !dbg !100
  %489 = getelementptr float, ptr addrspace(1) %16, i64 %243, !dbg !100
  %490 = getelementptr float, ptr addrspace(1) %489, i64 %478, !dbg !100
  %491 = getelementptr float, ptr addrspace(1) %490, i64 %450, !dbg !100
  %492 = getelementptr float, ptr addrspace(1) %491, i64 %452, !dbg !100
  %493 = getelementptr float, ptr addrspace(1) %16, i64 %242, !dbg !100
  %494 = getelementptr float, ptr addrspace(1) %493, i64 %480, !dbg !100
  %495 = getelementptr float, ptr addrspace(1) %494, i64 %450, !dbg !100
  %496 = getelementptr float, ptr addrspace(1) %495, i64 %452, !dbg !100
  %497 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %484, i1 true) #3, !dbg !101
  %498 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %488, i1 true) #3, !dbg !101
  %499 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %492, i1 true) #3, !dbg !101
  %500 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %496, i1 true) #3, !dbg !101
  %501 = lshr i64 %119, 61, !dbg !102
  %502 = and i64 %501, 4, !dbg !102
  %503 = add i64 %502, %119, !dbg !102
  %504 = shl i64 %503, 2, !dbg !103
  %505 = getelementptr float, ptr addrspace(1) %454, i64 %504, !dbg !104
  %506 = getelementptr float, ptr addrspace(1) %505, i64 %452, !dbg !104
  %507 = getelementptr float, ptr addrspace(1) %458, i64 %504, !dbg !104
  %508 = getelementptr float, ptr addrspace(1) %507, i64 %452, !dbg !104
  %509 = getelementptr float, ptr addrspace(1) %462, i64 %504, !dbg !104
  %510 = getelementptr float, ptr addrspace(1) %509, i64 %452, !dbg !104
  %511 = getelementptr float, ptr addrspace(1) %466, i64 %504, !dbg !104
  %512 = getelementptr float, ptr addrspace(1) %511, i64 %452, !dbg !104
  %513 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %506, i1 true) #3, !dbg !105
  %514 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %508, i1 true) #3, !dbg !105
  %515 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %510, i1 true) #3, !dbg !105
  %516 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %512, i1 true) #3, !dbg !105
  %517 = getelementptr float, ptr addrspace(1) %482, i64 %504, !dbg !106
  %518 = getelementptr float, ptr addrspace(1) %517, i64 %452, !dbg !106
  %519 = getelementptr float, ptr addrspace(1) %486, i64 %504, !dbg !106
  %520 = getelementptr float, ptr addrspace(1) %519, i64 %452, !dbg !106
  %521 = getelementptr float, ptr addrspace(1) %490, i64 %504, !dbg !106
  %522 = getelementptr float, ptr addrspace(1) %521, i64 %452, !dbg !106
  %523 = getelementptr float, ptr addrspace(1) %494, i64 %504, !dbg !106
  %524 = getelementptr float, ptr addrspace(1) %523, i64 %452, !dbg !106
  %525 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %518, i1 true) #3, !dbg !107
  %526 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %520, i1 true) #3, !dbg !107
  %527 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %522, i1 true) #3, !dbg !107
  %528 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %524, i1 true) #3, !dbg !107
  %529 = lshr i64 %129, 62, !dbg !108
  %530 = and i64 %529, 2, !dbg !108
  %531 = add i64 %530, %129, !dbg !108
  %532 = lshr i64 %237, 62, !dbg !109
  %533 = and i64 %532, 2, !dbg !109
  %534 = lshr i64 %236, 62, !dbg !109
  %535 = and i64 %534, 2, !dbg !109
  %536 = lshr i64 %235, 62, !dbg !109
  %537 = and i64 %536, 2, !dbg !109
  %538 = lshr i64 %234, 62, !dbg !109
  %539 = and i64 %538, 2, !dbg !109
  %540 = shl i64 %531, 1, !dbg !110
  %541 = shl nsw i32 %39, 2, !dbg !111
  %542 = sext i32 %541 to i64, !dbg !112
  %543 = getelementptr float, ptr addrspace(1) %23, i64 %237, !dbg !113
  %544 = getelementptr float, ptr addrspace(1) %543, i64 %533, !dbg !113
  %545 = getelementptr float, ptr addrspace(1) %544, i64 %540, !dbg !113
  %546 = getelementptr float, ptr addrspace(1) %545, i64 %542, !dbg !113
  %547 = getelementptr float, ptr addrspace(1) %23, i64 %236, !dbg !113
  %548 = getelementptr float, ptr addrspace(1) %547, i64 %535, !dbg !113
  %549 = getelementptr float, ptr addrspace(1) %548, i64 %540, !dbg !113
  %550 = getelementptr float, ptr addrspace(1) %549, i64 %542, !dbg !113
  %551 = getelementptr float, ptr addrspace(1) %23, i64 %235, !dbg !113
  %552 = getelementptr float, ptr addrspace(1) %551, i64 %537, !dbg !113
  %553 = getelementptr float, ptr addrspace(1) %552, i64 %540, !dbg !113
  %554 = getelementptr float, ptr addrspace(1) %553, i64 %542, !dbg !113
  %555 = getelementptr float, ptr addrspace(1) %23, i64 %234, !dbg !113
  %556 = getelementptr float, ptr addrspace(1) %555, i64 %539, !dbg !113
  %557 = getelementptr float, ptr addrspace(1) %556, i64 %540, !dbg !113
  %558 = getelementptr float, ptr addrspace(1) %557, i64 %542, !dbg !113
  %559 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %546, i1 true) #3, !dbg !114
  %560 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %550, i1 true) #3, !dbg !114
  %561 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %554, i1 true) #3, !dbg !114
  %562 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %558, i1 true) #3, !dbg !114
  %563 = lshr i64 %233, 62, !dbg !115
  %564 = and i64 %563, 2, !dbg !115
  %565 = lshr i64 %232, 62, !dbg !115
  %566 = and i64 %565, 2, !dbg !115
  %567 = lshr i64 %231, 62, !dbg !115
  %568 = and i64 %567, 2, !dbg !115
  %569 = lshr i64 %230, 62, !dbg !115
  %570 = and i64 %569, 2, !dbg !115
  %571 = getelementptr float, ptr addrspace(1) %23, i64 %233, !dbg !116
  %572 = getelementptr float, ptr addrspace(1) %571, i64 %564, !dbg !116
  %573 = getelementptr float, ptr addrspace(1) %572, i64 %540, !dbg !116
  %574 = getelementptr float, ptr addrspace(1) %573, i64 %542, !dbg !116
  %575 = getelementptr float, ptr addrspace(1) %23, i64 %232, !dbg !116
  %576 = getelementptr float, ptr addrspace(1) %575, i64 %566, !dbg !116
  %577 = getelementptr float, ptr addrspace(1) %576, i64 %540, !dbg !116
  %578 = getelementptr float, ptr addrspace(1) %577, i64 %542, !dbg !116
  %579 = getelementptr float, ptr addrspace(1) %23, i64 %231, !dbg !116
  %580 = getelementptr float, ptr addrspace(1) %579, i64 %568, !dbg !116
  %581 = getelementptr float, ptr addrspace(1) %580, i64 %540, !dbg !116
  %582 = getelementptr float, ptr addrspace(1) %581, i64 %542, !dbg !116
  %583 = getelementptr float, ptr addrspace(1) %23, i64 %230, !dbg !116
  %584 = getelementptr float, ptr addrspace(1) %583, i64 %570, !dbg !116
  %585 = getelementptr float, ptr addrspace(1) %584, i64 %540, !dbg !116
  %586 = getelementptr float, ptr addrspace(1) %585, i64 %542, !dbg !116
  %587 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %574, i1 true) #3, !dbg !117
  %588 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %578, i1 true) #3, !dbg !117
  %589 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %582, i1 true) #3, !dbg !117
  %590 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %586, i1 true) #3, !dbg !117
  %591 = lshr i64 %144, 62, !dbg !118
  %592 = and i64 %591, 2, !dbg !118
  %593 = add i64 %592, %144, !dbg !118
  %594 = shl i64 %593, 1, !dbg !119
  %595 = getelementptr float, ptr addrspace(1) %544, i64 %594, !dbg !120
  %596 = getelementptr float, ptr addrspace(1) %595, i64 %542, !dbg !120
  %597 = getelementptr float, ptr addrspace(1) %548, i64 %594, !dbg !120
  %598 = getelementptr float, ptr addrspace(1) %597, i64 %542, !dbg !120
  %599 = getelementptr float, ptr addrspace(1) %552, i64 %594, !dbg !120
  %600 = getelementptr float, ptr addrspace(1) %599, i64 %542, !dbg !120
  %601 = getelementptr float, ptr addrspace(1) %556, i64 %594, !dbg !120
  %602 = getelementptr float, ptr addrspace(1) %601, i64 %542, !dbg !120
  %603 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %596, i1 true) #3, !dbg !121
  %604 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %598, i1 true) #3, !dbg !121
  %605 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %600, i1 true) #3, !dbg !121
  %606 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %602, i1 true) #3, !dbg !121
  %607 = getelementptr float, ptr addrspace(1) %572, i64 %594, !dbg !122
  %608 = getelementptr float, ptr addrspace(1) %607, i64 %542, !dbg !122
  %609 = getelementptr float, ptr addrspace(1) %576, i64 %594, !dbg !122
  %610 = getelementptr float, ptr addrspace(1) %609, i64 %542, !dbg !122
  %611 = getelementptr float, ptr addrspace(1) %580, i64 %594, !dbg !122
  %612 = getelementptr float, ptr addrspace(1) %611, i64 %542, !dbg !122
  %613 = getelementptr float, ptr addrspace(1) %584, i64 %594, !dbg !122
  %614 = getelementptr float, ptr addrspace(1) %613, i64 %542, !dbg !122
  %615 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %608, i1 true) #3, !dbg !123
  %616 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %610, i1 true) #3, !dbg !123
  %617 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %612, i1 true) #3, !dbg !123
  %618 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %614, i1 true) #3, !dbg !123
  %619 = insertelement <2 x i32> poison, i32 %241, i64 0, !dbg !50
  %620 = insertelement <2 x i32> %619, i32 %229, i64 1, !dbg !50
  %621 = bitcast <2 x i32> %620 to <2 x float>, !dbg !50
  %622 = insertelement <2 x i32> poison, i32 %469, i64 0, !dbg !98
  %623 = insertelement <2 x i32> %622, i32 %559, i64 1, !dbg !98
  %624 = bitcast <2 x i32> %623 to <2 x float>, !dbg !98
  %625 = insertelement <2 x i32> poison, i32 %497, i64 0, !dbg !101
  %626 = insertelement <2 x i32> %625, i32 %587, i64 1, !dbg !101
  %627 = bitcast <2 x i32> %626 to <2 x float>, !dbg !101
  %628 = fsub <2 x float> %627, %624, !dbg !124
  %629 = fmul <2 x float> %628, %621, !dbg !125
  %630 = fadd <2 x float> %629, %624, !dbg !126
  %631 = insertelement <2 x i32> poison, i32 %513, i64 0, !dbg !105
  %632 = insertelement <2 x i32> %631, i32 %603, i64 1, !dbg !105
  %633 = bitcast <2 x i32> %632 to <2 x float>, !dbg !105
  %634 = insertelement <2 x i32> poison, i32 %525, i64 0, !dbg !107
  %635 = insertelement <2 x i32> %634, i32 %615, i64 1, !dbg !107
  %636 = bitcast <2 x i32> %635 to <2 x float>, !dbg !107
  %637 = fsub <2 x float> %636, %633, !dbg !127
  %638 = fmul <2 x float> %637, %621, !dbg !128
  %639 = fadd <2 x float> %638, %633, !dbg !129
  %640 = fsub <2 x float> %639, %630, !dbg !130
  %641 = fmul <2 x float> %640, %225, !dbg !131
  %642 = fadd <2 x float> %630, %641, !dbg !132
  %643 = insertelement <2 x i32> poison, i32 %240, i64 0, !dbg !50
  %644 = insertelement <2 x i32> %643, i32 %228, i64 1, !dbg !50
  %645 = bitcast <2 x i32> %644 to <2 x float>, !dbg !50
  %646 = insertelement <2 x i32> poison, i32 %470, i64 0, !dbg !98
  %647 = insertelement <2 x i32> %646, i32 %560, i64 1, !dbg !98
  %648 = bitcast <2 x i32> %647 to <2 x float>, !dbg !98
  %649 = insertelement <2 x i32> poison, i32 %498, i64 0, !dbg !101
  %650 = insertelement <2 x i32> %649, i32 %588, i64 1, !dbg !101
  %651 = bitcast <2 x i32> %650 to <2 x float>, !dbg !101
  %652 = fsub <2 x float> %651, %648, !dbg !124
  %653 = fmul <2 x float> %652, %645, !dbg !125
  %654 = fadd <2 x float> %653, %648, !dbg !126
  %655 = insertelement <2 x i32> poison, i32 %514, i64 0, !dbg !105
  %656 = insertelement <2 x i32> %655, i32 %604, i64 1, !dbg !105
  %657 = bitcast <2 x i32> %656 to <2 x float>, !dbg !105
  %658 = insertelement <2 x i32> poison, i32 %526, i64 0, !dbg !107
  %659 = insertelement <2 x i32> %658, i32 %616, i64 1, !dbg !107
  %660 = bitcast <2 x i32> %659 to <2 x float>, !dbg !107
  %661 = fsub <2 x float> %660, %657, !dbg !127
  %662 = fmul <2 x float> %661, %645, !dbg !128
  %663 = fadd <2 x float> %662, %657, !dbg !129
  %664 = fsub <2 x float> %663, %654, !dbg !130
  %665 = fmul <2 x float> %664, %222, !dbg !131
  %666 = fadd <2 x float> %654, %665, !dbg !132
  %667 = insertelement <2 x i32> poison, i32 %239, i64 0, !dbg !50
  %668 = insertelement <2 x i32> %667, i32 %227, i64 1, !dbg !50
  %669 = bitcast <2 x i32> %668 to <2 x float>, !dbg !50
  %670 = insertelement <2 x i32> poison, i32 %471, i64 0, !dbg !98
  %671 = insertelement <2 x i32> %670, i32 %561, i64 1, !dbg !98
  %672 = bitcast <2 x i32> %671 to <2 x float>, !dbg !98
  %673 = insertelement <2 x i32> poison, i32 %499, i64 0, !dbg !101
  %674 = insertelement <2 x i32> %673, i32 %589, i64 1, !dbg !101
  %675 = bitcast <2 x i32> %674 to <2 x float>, !dbg !101
  %676 = fsub <2 x float> %675, %672, !dbg !124
  %677 = fmul <2 x float> %676, %669, !dbg !125
  %678 = fadd <2 x float> %677, %672, !dbg !126
  %679 = insertelement <2 x i32> poison, i32 %515, i64 0, !dbg !105
  %680 = insertelement <2 x i32> %679, i32 %605, i64 1, !dbg !105
  %681 = bitcast <2 x i32> %680 to <2 x float>, !dbg !105
  %682 = insertelement <2 x i32> poison, i32 %527, i64 0, !dbg !107
  %683 = insertelement <2 x i32> %682, i32 %617, i64 1, !dbg !107
  %684 = bitcast <2 x i32> %683 to <2 x float>, !dbg !107
  %685 = fsub <2 x float> %684, %681, !dbg !127
  %686 = fmul <2 x float> %685, %669, !dbg !128
  %687 = fadd <2 x float> %686, %681, !dbg !129
  %688 = fsub <2 x float> %687, %678, !dbg !130
  %689 = fmul <2 x float> %688, %219, !dbg !131
  %690 = fadd <2 x float> %678, %689, !dbg !132
  %691 = shufflevector <2 x float> %690, <2 x float> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %692 = shufflevector <2 x float> %690, <2 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %693 = insertelement <2 x i32> poison, i32 %238, i64 0, !dbg !50
  %694 = insertelement <2 x i32> %693, i32 %226, i64 1, !dbg !50
  %695 = bitcast <2 x i32> %694 to <2 x float>, !dbg !50
  %696 = insertelement <2 x i32> poison, i32 %472, i64 0, !dbg !98
  %697 = insertelement <2 x i32> %696, i32 %562, i64 1, !dbg !98
  %698 = bitcast <2 x i32> %697 to <2 x float>, !dbg !98
  %699 = insertelement <2 x i32> poison, i32 %500, i64 0, !dbg !101
  %700 = insertelement <2 x i32> %699, i32 %590, i64 1, !dbg !101
  %701 = bitcast <2 x i32> %700 to <2 x float>, !dbg !101
  %702 = fsub <2 x float> %701, %698, !dbg !124
  %703 = fmul <2 x float> %702, %695, !dbg !125
  %704 = fadd <2 x float> %703, %698, !dbg !126
  %705 = insertelement <2 x i32> poison, i32 %516, i64 0, !dbg !105
  %706 = insertelement <2 x i32> %705, i32 %606, i64 1, !dbg !105
  %707 = bitcast <2 x i32> %706 to <2 x float>, !dbg !105
  %708 = insertelement <2 x i32> poison, i32 %528, i64 0, !dbg !107
  %709 = insertelement <2 x i32> %708, i32 %618, i64 1, !dbg !107
  %710 = bitcast <2 x i32> %709 to <2 x float>, !dbg !107
  %711 = fsub <2 x float> %710, %707, !dbg !127
  %712 = fmul <2 x float> %711, %695, !dbg !128
  %713 = fadd <2 x float> %712, %707, !dbg !129
  %714 = fsub <2 x float> %713, %704, !dbg !130
  %715 = fmul <2 x float> %714, %216, !dbg !131
  %716 = fadd <2 x float> %704, %715, !dbg !132
  %717 = shufflevector <2 x float> %716, <2 x float> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %718 = shufflevector <2 x float> %716, <2 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %719 = getelementptr float, ptr addrspace(1) %28, i64 %45, !dbg !133
  %720 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !134
  %721 = getelementptr i1, ptr addrspace(1) %29, i64 %45, !dbg !135
  %722 = insertelement <4 x i32> poison, i32 %270, i64 0, !dbg !30
  %723 = insertelement <4 x i32> %722, i32 %269, i64 1, !dbg !30
  %724 = insertelement <4 x i32> %723, i32 %268, i64 2, !dbg !30
  %725 = insertelement <4 x i32> %724, i32 %267, i64 3, !dbg !30
  %726 = bitcast <4 x i32> %725 to <4 x float>, !dbg !30
  %727 = fadd <4 x float> %296, %275, !dbg !136
  %728 = fadd <4 x float> %727, %726, !dbg !137
  %729 = fcmp olt <4 x float> %728, zeroinitializer, !dbg !138
  %730 = select <4 x i1> %729, <4 x float> zeroinitializer, <4 x float> %728, !dbg !142
  %731 = shufflevector <2 x float> %398, <2 x float> %410, <4 x i32> <i32 0, i32 2, i32 poison, i32 poison>, !dbg !143
  %732 = shufflevector <4 x float> %731, <4 x float> %424, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !143
  %733 = shufflevector <4 x float> %732, <4 x float> %438, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !143
  %734 = shufflevector <2 x float> %398, <2 x float> %410, <4 x i32> <i32 1, i32 3, i32 poison, i32 poison>, !dbg !143
  %735 = shufflevector <4 x float> %734, <4 x float> %423, <4 x i32> <i32 0, i32 1, i32 5, i32 poison>, !dbg !143
  %736 = shufflevector <4 x float> %735, <4 x float> %437, <4 x i32> <i32 0, i32 1, i32 2, i32 5>, !dbg !143
  %737 = fsub <4 x float> %733, %736, !dbg !143
  %738 = fmul <4 x float> %737, %254, !dbg !144
  %739 = fadd <4 x float> %736, %738, !dbg !145
  %740 = fadd <4 x float> %730, %739, !dbg !146
  %741 = shufflevector <2 x float> %642, <2 x float> %666, <4 x i32> <i32 0, i32 2, i32 poison, i32 poison>, !dbg !147
  %742 = shufflevector <4 x float> %741, <4 x float> %692, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !147
  %743 = shufflevector <4 x float> %742, <4 x float> %718, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !147
  %744 = fadd <4 x float> %740, %743, !dbg !147
  %745 = shufflevector <2 x float> %642, <2 x float> %666, <4 x i32> <i32 1, i32 3, i32 poison, i32 poison>, !dbg !148
  %746 = shufflevector <4 x float> %745, <4 x float> %691, <4 x i32> <i32 0, i32 1, i32 5, i32 poison>, !dbg !148
  %747 = shufflevector <4 x float> %746, <4 x float> %717, <4 x i32> <i32 0, i32 1, i32 2, i32 5>, !dbg !148
  %748 = fadd <4 x float> %744, %747, !dbg !148
  %749 = fcmp olt <4 x float> %748, zeroinitializer, !dbg !149
  %750 = select <4 x i1> %749, <4 x float> zeroinitializer, <4 x float> %748, !dbg !151
  %751 = fcmp ole <4 x float> %750, zeroinitializer, !dbg !152
  %bc = bitcast <4 x float> %730 to <4 x i32>, !dbg !153
  %752 = extractelement <4 x i32> %bc, i64 0, !dbg !153
  %bc16 = bitcast <4 x float> %730 to <4 x i32>, !dbg !153
  %753 = extractelement <4 x i32> %bc16, i64 1, !dbg !153
  %bc17 = bitcast <4 x float> %730 to <4 x i32>, !dbg !153
  %754 = extractelement <4 x i32> %bc17, i64 2, !dbg !153
  %bc18 = bitcast <4 x float> %730 to <4 x i32>, !dbg !153
  %755 = extractelement <4 x i32> %bc18, i64 3, !dbg !153
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %752, i32 %753, i32 %754, i32 %755, ptr addrspace(1) %719, i1 true) #3, !dbg !153
  %bc19 = bitcast <4 x float> %748 to <4 x i32>, !dbg !154
  %756 = extractelement <4 x i32> %bc19, i64 0, !dbg !154
  %bc20 = bitcast <4 x float> %748 to <4 x i32>, !dbg !154
  %757 = extractelement <4 x i32> %bc20, i64 1, !dbg !154
  %bc21 = bitcast <4 x float> %748 to <4 x i32>, !dbg !154
  %758 = extractelement <4 x i32> %bc21, i64 2, !dbg !154
  %bc22 = bitcast <4 x float> %748 to <4 x i32>, !dbg !154
  %759 = extractelement <4 x i32> %bc22, i64 3, !dbg !154
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %756, i32 %757, i32 %758, i32 %759, ptr addrspace(1) %720, i1 true) #3, !dbg !154
  %760 = zext <4 x i1> %751 to <4 x i8>, !dbg !155
  %761 = bitcast <4 x i8> %760 to i32, !dbg !155
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %761, ptr addrspace(1) %721, i1 true) #3, !dbg !155
  ret void, !dbg !156
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccs4z6ene5u7cgxiosrmu7j7qomy2rn3aipbywofxsxxxoivha6r.py", directory: "inductor_cache/cs")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_47, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_47, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_47", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_47", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 42, column: 32, scope: !7)
!46 = !DILocation(line: 42, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 32, scope: !7)
!48 = !DILocation(line: 43, column: 37, scope: !7)
!49 = !DILocation(line: 44, column: 32, scope: !7)
!50 = !DILocation(line: 44, column: 37, scope: !7)
!51 = !DILocation(line: 45, column: 32, scope: !7)
!52 = !DILocation(line: 45, column: 37, scope: !7)
!53 = !DILocation(line: 46, column: 32, scope: !7)
!54 = !DILocation(line: 46, column: 37, scope: !7)
!55 = !DILocation(line: 47, column: 32, scope: !7)
!56 = !DILocation(line: 47, column: 37, scope: !7)
!57 = !DILocation(line: 48, column: 32, scope: !7)
!58 = !DILocation(line: 48, column: 37, scope: !7)
!59 = !DILocation(line: 49, column: 32, scope: !7)
!60 = !DILocation(line: 49, column: 37, scope: !7)
!61 = !DILocation(line: 50, column: 33, scope: !7)
!62 = !DILocation(line: 50, column: 38, scope: !7)
!63 = !DILocation(line: 51, column: 33, scope: !7)
!64 = !DILocation(line: 51, column: 38, scope: !7)
!65 = !DILocation(line: 52, column: 33, scope: !7)
!66 = !DILocation(line: 52, column: 38, scope: !7)
!67 = !DILocation(line: 55, column: 18, scope: !7)
!68 = !DILocation(line: 56, column: 26, scope: !7)
!69 = !DILocation(line: 58, column: 18, scope: !7)
!70 = !DILocation(line: 53, column: 18, scope: !7)
!71 = !DILocation(line: 61, column: 19, scope: !7)
!72 = !DILocation(line: 62, column: 20, scope: !7)
!73 = !DILocation(line: 70, column: 35, scope: !7)
!74 = !DILocation(line: 73, column: 35, scope: !7)
!75 = !DILocation(line: 74, column: 41, scope: !7)
!76 = !DILocation(line: 74, column: 52, scope: !7)
!77 = !DILocation(line: 74, column: 49, scope: !7)
!78 = !DILocation(line: 74, column: 31, scope: !7)
!79 = !DILocation(line: 74, column: 57, scope: !7)
!80 = !DILocation(line: 77, column: 35, scope: !7)
!81 = !DILocation(line: 78, column: 31, scope: !7)
!82 = !DILocation(line: 78, column: 57, scope: !7)
!83 = !DILocation(line: 84, column: 35, scope: !7)
!84 = !DILocation(line: 85, column: 41, scope: !7)
!85 = !DILocation(line: 85, column: 31, scope: !7)
!86 = !DILocation(line: 85, column: 57, scope: !7)
!87 = !DILocation(line: 86, column: 31, scope: !7)
!88 = !DILocation(line: 86, column: 57, scope: !7)
!89 = !DILocation(line: 87, column: 20, scope: !7)
!90 = !DILocation(line: 88, column: 20, scope: !7)
!91 = !DILocation(line: 89, column: 20, scope: !7)
!92 = !DILocation(line: 97, column: 35, scope: !7)
!93 = !DILocation(line: 100, column: 35, scope: !7)
!94 = !DILocation(line: 101, column: 42, scope: !7)
!95 = !DILocation(line: 101, column: 53, scope: !7)
!96 = !DILocation(line: 101, column: 50, scope: !7)
!97 = !DILocation(line: 101, column: 32, scope: !7)
!98 = !DILocation(line: 101, column: 58, scope: !7)
!99 = !DILocation(line: 104, column: 35, scope: !7)
!100 = !DILocation(line: 105, column: 32, scope: !7)
!101 = !DILocation(line: 105, column: 58, scope: !7)
!102 = !DILocation(line: 111, column: 35, scope: !7)
!103 = !DILocation(line: 112, column: 42, scope: !7)
!104 = !DILocation(line: 112, column: 32, scope: !7)
!105 = !DILocation(line: 112, column: 58, scope: !7)
!106 = !DILocation(line: 113, column: 32, scope: !7)
!107 = !DILocation(line: 113, column: 58, scope: !7)
!108 = !DILocation(line: 124, column: 35, scope: !7)
!109 = !DILocation(line: 127, column: 35, scope: !7)
!110 = !DILocation(line: 128, column: 42, scope: !7)
!111 = !DILocation(line: 128, column: 52, scope: !7)
!112 = !DILocation(line: 128, column: 50, scope: !7)
!113 = !DILocation(line: 128, column: 32, scope: !7)
!114 = !DILocation(line: 128, column: 57, scope: !7)
!115 = !DILocation(line: 131, column: 35, scope: !7)
!116 = !DILocation(line: 132, column: 33, scope: !7)
!117 = !DILocation(line: 132, column: 58, scope: !7)
!118 = !DILocation(line: 138, column: 38, scope: !7)
!119 = !DILocation(line: 139, column: 43, scope: !7)
!120 = !DILocation(line: 139, column: 33, scope: !7)
!121 = !DILocation(line: 139, column: 59, scope: !7)
!122 = !DILocation(line: 140, column: 33, scope: !7)
!123 = !DILocation(line: 140, column: 59, scope: !7)
!124 = !DILocation(line: 106, column: 20, scope: !7)
!125 = !DILocation(line: 107, column: 20, scope: !7)
!126 = !DILocation(line: 108, column: 20, scope: !7)
!127 = !DILocation(line: 114, column: 20, scope: !7)
!128 = !DILocation(line: 115, column: 20, scope: !7)
!129 = !DILocation(line: 116, column: 20, scope: !7)
!130 = !DILocation(line: 117, column: 20, scope: !7)
!131 = !DILocation(line: 118, column: 20, scope: !7)
!132 = !DILocation(line: 119, column: 20, scope: !7)
!133 = !DILocation(line: 151, column: 25, scope: !7)
!134 = !DILocation(line: 152, column: 28, scope: !7)
!135 = !DILocation(line: 153, column: 25, scope: !7)
!136 = !DILocation(line: 63, column: 20, scope: !7)
!137 = !DILocation(line: 64, column: 20, scope: !7)
!138 = !DILocation(line: 118, column: 15, scope: !139, inlinedAt: !141)
!139 = distinct !DILexicalBlockFile(scope: !7, file: !140, discriminator: 0)
!140 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!141 = !DILocation(line: 66, column: 42, scope: !7)
!142 = !DILocation(line: 121, column: 29, scope: !139, inlinedAt: !141)
!143 = !DILocation(line: 90, column: 20, scope: !7)
!144 = !DILocation(line: 91, column: 20, scope: !7)
!145 = !DILocation(line: 92, column: 20, scope: !7)
!146 = !DILocation(line: 93, column: 20, scope: !7)
!147 = !DILocation(line: 120, column: 20, scope: !7)
!148 = !DILocation(line: 147, column: 21, scope: !7)
!149 = !DILocation(line: 118, column: 15, scope: !139, inlinedAt: !150)
!150 = !DILocation(line: 148, column: 43, scope: !7)
!151 = !DILocation(line: 121, column: 29, scope: !139, inlinedAt: !150)
!152 = !DILocation(line: 150, column: 23, scope: !7)
!153 = !DILocation(line: 151, column: 37, scope: !7)
!154 = !DILocation(line: 152, column: 41, scope: !7)
!155 = !DILocation(line: 153, column: 38, scope: !7)
!156 = !DILocation(line: 153, column: 4, scope: !7)
