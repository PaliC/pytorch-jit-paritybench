; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_mul_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 3, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = shl i32 %10, 1, !dbg !12
  %14 = and i32 %13, 14, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %14, !dbg !13
  %17 = icmp slt i32 %15, 16, !dbg !14
  %18 = icmp slt i32 %16, 16, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 4, !dbg !16
  %21 = or disjoint i32 %20, %14, !dbg !17
  %22 = or disjoint i32 %20, %12, !dbg !17
  %23 = icmp slt i32 %21, 16, !dbg !18
  %24 = icmp slt i32 %22, 16, !dbg !18
  %25 = sdiv i32 %15, 4, !dbg !19
  %.frozen = freeze i32 %16, !dbg !19
  %26 = sdiv i32 %.frozen, 4, !dbg !19
  %27 = mul i32 %26, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %27, !dbg !20
  %28 = shl i32 %15, 4, !dbg !21
  %29 = add i32 %21, %28, !dbg !22
  %30 = sext i32 %29 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !23
  %32 = and i1 %17, %23, !dbg !24
  %33 = and i1 %18, %24, !dbg !24
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %32) #2, !dbg !25
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !25
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !25
  %37 = bitcast i32 %35 to float, !dbg !25
  %38 = bitcast i32 %36 to float, !dbg !25
  %39 = shl i32 %25, 4, !dbg !26
  %40 = add i32 %39, %21, !dbg !27
  %41 = sext i32 %40 to i64, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !28
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %32) #2, !dbg !29
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !29
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !29
  %46 = bitcast i32 %44 to float, !dbg !29
  %47 = bitcast i32 %45 to float, !dbg !29
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !30
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %32) #2, !dbg !31
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !31
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !31
  %52 = bitcast i32 %50 to float, !dbg !31
  %53 = bitcast i32 %51 to float, !dbg !31
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #2, !dbg !32
  %55 = bitcast i32 %54 to float, !dbg !32
  %56 = getelementptr i8, ptr addrspace(1) %3, i64 4, !dbg !33
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #2, !dbg !34
  %58 = bitcast i32 %57 to float, !dbg !34
  %59 = fsub float %37, %46, !dbg !35
  %60 = fsub float %38, %47, !dbg !35
  %61 = fmul float %59, %52, !dbg !36
  %62 = fmul float %60, %53, !dbg !36
  %63 = fadd float %55, 1.000000e+00, !dbg !37
  %64 = fmul float %61, %63, !dbg !38
  %65 = fmul float %62, %63, !dbg !38
  %66 = fadd float %64, %58, !dbg !39
  %67 = fadd float %65, %58, !dbg !39
  %68 = shl i32 %22, 2, !dbg !40
  %69 = add i32 %68, %.decomposed, !dbg !41
  %70 = shl i32 %26, 6, !dbg !42
  %71 = add i32 %69, %70, !dbg !43
  %72 = sext i32 %71 to i64, !dbg !44
  %73 = getelementptr float, ptr addrspace(1) %4, i64 %72, !dbg !44
  %74 = shl i32 %10, 5, !dbg !45
  %75 = and i32 %74, 224, !dbg !45
  %76 = or disjoint i32 %75, %12, !dbg !45
  %77 = and i32 %13, 254, !dbg !45
  %78 = lshr exact i32 %75, 3, !dbg !45
  %79 = add nuw nsw i32 %78, %76, !dbg !45
  %80 = zext nneg i32 %79 to i64, !dbg !45
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %80, !dbg !45
  %82 = bitcast float %66 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #2, !dbg !45
  %83 = or disjoint i32 %76, 16, !dbg !45
  %84 = lshr i32 %83, 3, !dbg !45
  %85 = and i32 %84, 30, !dbg !45
  %86 = add nuw nsw i32 %85, %83, !dbg !45
  %87 = zext nneg i32 %86 to i64, !dbg !45
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %87, !dbg !45
  %89 = bitcast float %67 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %90 = lshr i32 %13, 3, !dbg !45
  %91 = and i32 %90, 30, !dbg !45
  %92 = add nuw nsw i32 %91, %77, !dbg !45
  %93 = zext nneg i32 %92 to i64, !dbg !45
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %93, !dbg !45
  %.extract = load i32, ptr addrspace(3) %94, align 8, !dbg !45
  %95 = getelementptr inbounds i8, ptr addrspace(3) %94, i64 4, !dbg !45
  %.extract2 = load i32, ptr addrspace(3) %95, align 4, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %73, i1 %33) #2, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cilme2paswsu3xvqgkhprss76z3bpqgahfy7wsufbogd6azl5zc3.py", directory: "inductor_cache/il")
!4 = !{ptr @triton_poi_fused_add_mul_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_1", linkageName: "triton_poi_fused_add_mul_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 51, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 33, column: 38, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 43, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 43, scope: !7)
!32 = !DILocation(line: 35, column: 19, scope: !7)
!33 = !DILocation(line: 37, column: 31, scope: !7)
!34 = !DILocation(line: 37, column: 20, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 18, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 43, column: 18, scope: !7)
!39 = !DILocation(line: 44, column: 19, scope: !7)
!40 = !DILocation(line: 45, column: 32, scope: !7)
!41 = !DILocation(line: 45, column: 30, scope: !7)
!42 = !DILocation(line: 45, column: 40, scope: !7)
!43 = !DILocation(line: 45, column: 37, scope: !7)
!44 = !DILocation(line: 45, column: 25, scope: !7)
!45 = !DILocation(line: 45, column: 52, scope: !7)
!46 = !DILocation(line: 45, column: 4, scope: !7)
