; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 14, !dbg !12
  %14 = lshr i32 %11, 3, !dbg !12
  %15 = and i32 %14, 15, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %10, %15, !dbg !13
  %18 = icmp slt i32 %16, 16, !dbg !14
  %19 = icmp slt i32 %17, 16, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 4, !dbg !16
  %22 = or disjoint i32 %21, %15, !dbg !17
  %23 = or disjoint i32 %21, %13, !dbg !17
  %24 = icmp slt i32 %22, 16, !dbg !18
  %25 = icmp slt i32 %23, 16, !dbg !18
  %26 = srem i32 %23, 4, !dbg !19
  %27 = shl i32 %22, 4, !dbg !20
  %28 = add i32 %27, %16, !dbg !21
  %29 = sext i32 %28 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !22
  %31 = and i1 %18, %24, !dbg !23
  %32 = and i1 %19, %25, !dbg !23
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %31) #2, !dbg !24
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !24
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !24
  %36 = bitcast i32 %34 to float, !dbg !24
  %37 = bitcast i32 %35 to float, !dbg !24
  %38 = sext i32 %22 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %24) #2, !dbg !26
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %24) #2, !dbg !26
  %42 = bitcast i32 %41 to float, !dbg !26
  %43 = shl i32 %17, 4, !dbg !27
  %44 = add i32 %23, %43, !dbg !28
  %45 = sext i32 %44 to i64, !dbg !29
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !29
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %32) #2, !dbg !30
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !30
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !30
  %50 = sext i32 %26 to i64, !dbg !31
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !31
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %25) #2, !dbg !32
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !32
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !32
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %45, !dbg !33
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 %32) #2, !dbg !34
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !34
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !34
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %50, !dbg !35
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 %25) #2, !dbg !36
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !36
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !36
  %63 = fadd float %36, %42, !dbg !37
  %64 = fadd float %37, %42, !dbg !37
  %65 = shl i32 %11, 5, !dbg !37
  %66 = and i32 %65, 224, !dbg !37
  %67 = or disjoint i32 %66, %15, !dbg !37
  %68 = and i32 %12, 254, !dbg !37
  %69 = lshr exact i32 %66, 2, !dbg !37
  %70 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %69, !dbg !37
  %71 = getelementptr float, ptr addrspace(3) %70, i32 %67, !dbg !37
  %72 = bitcast float %63 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #2, !dbg !37
  %73 = or disjoint i32 %67, 16, !dbg !37
  %74 = lshr i32 %73, 4, !dbg !37
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !37
  %76 = getelementptr float, ptr addrspace(3) %75, i32 %73, !dbg !37
  %77 = bitcast float %64 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %78 = lshr i32 %68, 4, !dbg !37
  %79 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %78, !dbg !37
  %80 = getelementptr inbounds float, ptr addrspace(3) %79, i32 %68, !dbg !37
  %81 = load float, ptr addrspace(3) %80, align 4, !dbg !37
  %82 = or disjoint i32 %68, 1, !dbg !37
  %83 = getelementptr inbounds float, ptr addrspace(3) %79, i32 %82, !dbg !37
  %84 = load float, ptr addrspace(3) %83, align 4, !dbg !37
  %85 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !34
  %86 = insertelement <2 x i32> %85, i32 %48, i64 1, !dbg !34
  %87 = bitcast <2 x i32> %86 to <2 x float>, !dbg !34
  %88 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !36
  %89 = insertelement <2 x i32> %88, i32 %53, i64 1, !dbg !36
  %90 = bitcast <2 x i32> %89 to <2 x float>, !dbg !36
  %91 = fadd <2 x float> %87, %90, !dbg !38
  %92 = extractelement <2 x float> %91, i64 1, !dbg !39
  %93 = fadd float %92, %81, !dbg !39
  %94 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !34
  %95 = insertelement <2 x i32> %94, i32 %49, i64 1, !dbg !34
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !34
  %97 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !36
  %98 = insertelement <2 x i32> %97, i32 %54, i64 1, !dbg !36
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !36
  %100 = fadd <2 x float> %96, %99, !dbg !38
  %101 = extractelement <2 x float> %100, i64 1, !dbg !39
  %102 = fadd float %101, %84, !dbg !39
  %103 = extractelement <2 x float> %91, i64 0, !dbg !40
  %104 = fadd float %103, %93, !dbg !40
  %105 = extractelement <2 x float> %100, i64 0, !dbg !40
  %106 = fadd float %105, %102, !dbg !40
  %107 = bitcast float %104 to i32, !dbg !41
  %108 = bitcast float %106 to i32, !dbg !41
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %107, i32 %108, ptr addrspace(1) %46, i1 %32) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjcojfezxwo5nywrm7cfssj7khedpdkku27svengo3d3zwbhd4qd.py", directory: "inductor_cache/jc")
!4 = !{ptr @triton_poi_fused_add_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_10", linkageName: "triton_poi_fused_add_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 38, scope: !7)
!21 = !DILocation(line: 31, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 51, scope: !7)
!24 = !DILocation(line: 31, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 42, scope: !7)
!28 = !DILocation(line: 33, column: 39, scope: !7)
!29 = !DILocation(line: 33, column: 34, scope: !7)
!30 = !DILocation(line: 33, column: 47, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 43, scope: !7)
!35 = !DILocation(line: 36, column: 30, scope: !7)
!36 = !DILocation(line: 36, column: 35, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 41, column: 19, scope: !7)
!41 = !DILocation(line: 42, column: 48, scope: !7)
!42 = !DILocation(line: 42, column: 4, scope: !7)
