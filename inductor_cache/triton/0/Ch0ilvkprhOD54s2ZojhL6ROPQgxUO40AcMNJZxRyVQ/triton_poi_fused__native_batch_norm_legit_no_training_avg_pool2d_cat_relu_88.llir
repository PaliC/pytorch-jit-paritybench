; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_88(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, ptr addrspace(1) %26, ptr addrspace(1) %27, ptr addrspace(1) %28, ptr addrspace(1) %29, ptr addrspace(1) %30, ptr addrspace(1) %31, i32 %32) local_unnamed_addr !dbg !7 {
  %34 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %35 = shl i32 %34, 8, !dbg !11
  %36 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %37 = shl i32 %36, 1, !dbg !12
  %38 = and i32 %37, 254, !dbg !12
  %39 = or disjoint i32 %35, %38, !dbg !13
  %40 = or disjoint i32 %35, 1, !dbg !13
  %41 = icmp slt i32 %39, 10240, !dbg !14
  %42 = srem i32 %40, 2, !dbg !15
  %43 = sdiv i32 %39, 4, !dbg !16
  %44 = srem i32 %43, 640, !dbg !17
  %45 = shl nsw i32 %42, 1, !dbg !18
  %46 = shl i32 %39, 2, !dbg !19
  %47 = add i32 %45, %46, !dbg !20
  %48 = sext i32 %46 to i64, !dbg !21
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !21
  %50 = sext i32 %47 to i64, !dbg !21
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !21
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %41) #3, !dbg !22
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %41) #3, !dbg !22
  %54 = or disjoint i32 %46, 1, !dbg !23
  %55 = or disjoint i32 %47, 1, !dbg !23
  %56 = sext i32 %54 to i64, !dbg !24
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !24
  %58 = sext i32 %55 to i64, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %41) #3, !dbg !25
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %41) #3, !dbg !25
  %62 = or disjoint i32 %46, 4, !dbg !26
  %63 = add i32 %47, 4, !dbg !26
  %64 = sext i32 %62 to i64, !dbg !27
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !27
  %66 = sext i32 %63 to i64, !dbg !27
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !27
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %41) #3, !dbg !28
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %41) #3, !dbg !28
  %70 = or disjoint i32 %46, 5, !dbg !29
  %71 = add i32 %47, 5, !dbg !29
  %72 = sext i32 %70 to i64, !dbg !30
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !30
  %74 = sext i32 %71 to i64, !dbg !30
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !30
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %41) #3, !dbg !31
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %41) #3, !dbg !31
  %78 = sext i32 %44 to i64, !dbg !32
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !32
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %41) #3, !dbg !33
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %41) #3, !dbg !33
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %78, !dbg !34
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %41) #3, !dbg !35
  %84 = bitcast i32 %83 to float, !dbg !35
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %41) #3, !dbg !35
  %86 = bitcast i32 %85 to float, !dbg !35
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %78, !dbg !36
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %41) #3, !dbg !37
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %41) #3, !dbg !37
  %90 = getelementptr float, ptr addrspace(1) %4, i64 %78, !dbg !38
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %41) #3, !dbg !39
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %41) #3, !dbg !39
  %93 = fadd float %84, 0x3EE4F8B580000000, !dbg !40
  %94 = fadd float %86, 0x3EE4F8B580000000, !dbg !40
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %95, 0, !dbg !41
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i = icmp eq i32 %96, 0, !dbg !41
  br i1 %.not.i, label %102, label %97, !dbg !41

97:                                               ; preds = %33
  br i1 %.not1.i, label %100, label %98, !dbg !41

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

102:                                              ; preds = %33
  br i1 %.not1.i, label %105, label %103, !dbg !41

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %98, %100, %103, %105
  %.0.i = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !41
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %107, 0, !dbg !41
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i4 = icmp eq i32 %108, 0, !dbg !41
  br i1 %.not.i1, label %114, label %109, !dbg !41

109:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %112, label %110, !dbg !41

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

114:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %117, label %115, !dbg !41

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %110, %112, %115, %117
  %.0.i3 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !41
  %119 = bitcast i32 %61 to float, !dbg !25
  %120 = bitcast i32 %53 to float, !dbg !22
  %121 = fadd float %120, %119, !dbg !42
  %122 = bitcast i32 %69 to float, !dbg !28
  %123 = fadd float %121, %122, !dbg !43
  %124 = bitcast i32 %77 to float, !dbg !31
  %125 = fadd float %123, %124, !dbg !44
  %126 = fmul float %125, 2.500000e-01, !dbg !45
  %127 = bitcast i32 %81 to float, !dbg !33
  %128 = fsub float %126, %127, !dbg !46
  %129 = bitcast i32 %60 to float, !dbg !25
  %130 = bitcast i32 %52 to float, !dbg !22
  %131 = fadd float %130, %129, !dbg !42
  %132 = bitcast i32 %68 to float, !dbg !28
  %133 = fadd float %131, %132, !dbg !43
  %134 = bitcast i32 %76 to float, !dbg !31
  %135 = fadd float %133, %134, !dbg !44
  %136 = fmul float %135, 2.500000e-01, !dbg !45
  %137 = bitcast i32 %80 to float, !dbg !33
  %138 = fsub float %136, %137, !dbg !46
  %139 = bitcast i32 %92 to float, !dbg !39
  %140 = bitcast i32 %91 to float, !dbg !39
  %141 = bitcast i32 %89 to float, !dbg !37
  %142 = bitcast i32 %88 to float, !dbg !37
  %.frozen = freeze i32 %39, !dbg !47
  %143 = sdiv i32 %.frozen, 2560, !dbg !47
  %144 = mul i32 %143, 2560, !dbg !48
  %.decomposed = sub i32 %.frozen, %144, !dbg !48
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !49
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !49
  %147 = fmul float %138, %145, !dbg !50
  %148 = fmul float %128, %146, !dbg !50
  %149 = fmul float %147, %142, !dbg !51
  %150 = fmul float %148, %141, !dbg !51
  %151 = fadd float %149, %140, !dbg !52
  %152 = fadd float %150, %139, !dbg !52
  %153 = fcmp olt float %151, 0.000000e+00, !dbg !53
  %154 = fcmp olt float %152, 0.000000e+00, !dbg !53
  %155 = select i1 %153, float 0.000000e+00, float %151, !dbg !57
  %156 = select i1 %154, float 0.000000e+00, float %152, !dbg !57
  %157 = sext i32 %39 to i64, !dbg !58
  %158 = getelementptr float, ptr addrspace(1) %5, i64 %157, !dbg !58
  %159 = bitcast float %136 to i32, !dbg !59
  %160 = bitcast float %126 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %158, i1 %41) #3, !dbg !59
  %161 = getelementptr float, ptr addrspace(1) %6, i64 %157, !dbg !60
  %162 = bitcast float %155 to i32, !dbg !61
  %163 = bitcast float %156 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %161, i1 %41) #3, !dbg !61
  %164 = mul i32 %143, 3584, !dbg !62
  %165 = add i32 %164, %.decomposed, !dbg !63
  %166 = sext i32 %165 to i64, !dbg !64
  %167 = getelementptr float, ptr addrspace(1) %7, i64 %166, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %167, i1 %41) #3, !dbg !65
  %168 = mul i32 %143, 3712, !dbg !66
  %169 = add i32 %168, %.decomposed, !dbg !67
  %170 = sext i32 %169 to i64, !dbg !68
  %171 = getelementptr float, ptr addrspace(1) %8, i64 %170, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %171, i1 %41) #3, !dbg !69
  %172 = mul i32 %143, 3840, !dbg !70
  %173 = add i32 %172, %.decomposed, !dbg !71
  %174 = sext i32 %173 to i64, !dbg !72
  %175 = getelementptr float, ptr addrspace(1) %9, i64 %174, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %175, i1 %41) #3, !dbg !73
  %176 = mul i32 %143, 3968, !dbg !74
  %177 = add i32 %176, %.decomposed, !dbg !75
  %178 = sext i32 %177 to i64, !dbg !76
  %179 = getelementptr float, ptr addrspace(1) %10, i64 %178, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %179, i1 %41) #3, !dbg !77
  %180 = shl i32 %143, 12, !dbg !78
  %181 = add i32 %180, %.decomposed, !dbg !79
  %182 = sext i32 %181 to i64, !dbg !80
  %183 = getelementptr float, ptr addrspace(1) %11, i64 %182, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %183, i1 %41) #3, !dbg !81
  %184 = mul i32 %143, 4224, !dbg !82
  %185 = add i32 %184, %.decomposed, !dbg !83
  %186 = sext i32 %185 to i64, !dbg !84
  %187 = getelementptr float, ptr addrspace(1) %12, i64 %186, !dbg !84
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %187, i1 %41) #3, !dbg !85
  %188 = mul i32 %143, 4352, !dbg !86
  %189 = add i32 %188, %.decomposed, !dbg !87
  %190 = sext i32 %189 to i64, !dbg !88
  %191 = getelementptr float, ptr addrspace(1) %13, i64 %190, !dbg !88
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %191, i1 %41) #3, !dbg !89
  %192 = mul i32 %143, 4480, !dbg !90
  %193 = add i32 %192, %.decomposed, !dbg !91
  %194 = sext i32 %193 to i64, !dbg !92
  %195 = getelementptr float, ptr addrspace(1) %14, i64 %194, !dbg !92
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %195, i1 %41) #3, !dbg !93
  %196 = mul i32 %143, 4608, !dbg !94
  %197 = add i32 %196, %.decomposed, !dbg !95
  %198 = sext i32 %197 to i64, !dbg !96
  %199 = getelementptr float, ptr addrspace(1) %15, i64 %198, !dbg !96
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %199, i1 %41) #3, !dbg !97
  %200 = mul i32 %143, 4736, !dbg !98
  %201 = add i32 %200, %.decomposed, !dbg !99
  %202 = sext i32 %201 to i64, !dbg !100
  %203 = getelementptr float, ptr addrspace(1) %16, i64 %202, !dbg !100
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %203, i1 %41) #3, !dbg !101
  %204 = mul i32 %143, 4864, !dbg !102
  %205 = add i32 %204, %.decomposed, !dbg !103
  %206 = sext i32 %205 to i64, !dbg !104
  %207 = getelementptr float, ptr addrspace(1) %17, i64 %206, !dbg !104
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %207, i1 %41) #3, !dbg !105
  %208 = mul i32 %143, 4992, !dbg !106
  %209 = add i32 %208, %.decomposed, !dbg !107
  %210 = sext i32 %209 to i64, !dbg !108
  %211 = getelementptr float, ptr addrspace(1) %18, i64 %210, !dbg !108
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %211, i1 %41) #3, !dbg !109
  %212 = mul i32 %143, 5120, !dbg !110
  %213 = add i32 %212, %.decomposed, !dbg !111
  %214 = sext i32 %213 to i64, !dbg !112
  %215 = getelementptr float, ptr addrspace(1) %19, i64 %214, !dbg !112
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %215, i1 %41) #3, !dbg !113
  %216 = mul i32 %143, 5248, !dbg !114
  %217 = add i32 %216, %.decomposed, !dbg !115
  %218 = sext i32 %217 to i64, !dbg !116
  %219 = getelementptr float, ptr addrspace(1) %20, i64 %218, !dbg !116
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %219, i1 %41) #3, !dbg !117
  %220 = mul i32 %143, 5376, !dbg !118
  %221 = add i32 %220, %.decomposed, !dbg !119
  %222 = sext i32 %221 to i64, !dbg !120
  %223 = getelementptr float, ptr addrspace(1) %21, i64 %222, !dbg !120
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %223, i1 %41) #3, !dbg !121
  %224 = mul i32 %143, 5504, !dbg !122
  %225 = add i32 %224, %.decomposed, !dbg !123
  %226 = sext i32 %225 to i64, !dbg !124
  %227 = getelementptr float, ptr addrspace(1) %22, i64 %226, !dbg !124
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %227, i1 %41) #3, !dbg !125
  %228 = mul i32 %143, 5632, !dbg !126
  %229 = add i32 %228, %.decomposed, !dbg !127
  %230 = sext i32 %229 to i64, !dbg !128
  %231 = getelementptr float, ptr addrspace(1) %23, i64 %230, !dbg !128
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %231, i1 %41) #3, !dbg !129
  %232 = mul i32 %143, 5760, !dbg !130
  %233 = add i32 %232, %.decomposed, !dbg !131
  %234 = sext i32 %233 to i64, !dbg !132
  %235 = getelementptr float, ptr addrspace(1) %24, i64 %234, !dbg !132
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %235, i1 %41) #3, !dbg !133
  %236 = mul i32 %143, 5888, !dbg !134
  %237 = add i32 %236, %.decomposed, !dbg !135
  %238 = sext i32 %237 to i64, !dbg !136
  %239 = getelementptr float, ptr addrspace(1) %25, i64 %238, !dbg !136
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %239, i1 %41) #3, !dbg !137
  %240 = mul i32 %143, 6016, !dbg !138
  %241 = add i32 %240, %.decomposed, !dbg !139
  %242 = sext i32 %241 to i64, !dbg !140
  %243 = getelementptr float, ptr addrspace(1) %26, i64 %242, !dbg !140
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %243, i1 %41) #3, !dbg !141
  %244 = mul i32 %143, 6144, !dbg !142
  %245 = add i32 %244, %.decomposed, !dbg !143
  %246 = sext i32 %245 to i64, !dbg !144
  %247 = getelementptr float, ptr addrspace(1) %27, i64 %246, !dbg !144
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %247, i1 %41) #3, !dbg !145
  %248 = mul i32 %143, 6272, !dbg !146
  %249 = add i32 %248, %.decomposed, !dbg !147
  %250 = sext i32 %249 to i64, !dbg !148
  %251 = getelementptr float, ptr addrspace(1) %28, i64 %250, !dbg !148
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %251, i1 %41) #3, !dbg !149
  %252 = mul i32 %143, 6400, !dbg !150
  %253 = add i32 %252, %.decomposed, !dbg !151
  %254 = sext i32 %253 to i64, !dbg !152
  %255 = getelementptr float, ptr addrspace(1) %29, i64 %254, !dbg !152
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %255, i1 %41) #3, !dbg !153
  %256 = mul i32 %143, 6528, !dbg !154
  %257 = add i32 %256, %.decomposed, !dbg !155
  %258 = sext i32 %257 to i64, !dbg !156
  %259 = getelementptr float, ptr addrspace(1) %30, i64 %258, !dbg !156
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %259, i1 %41) #3, !dbg !157
  %260 = mul i32 %143, 6656, !dbg !158
  %261 = add i32 %260, %.decomposed, !dbg !159
  %262 = sext i32 %261 to i64, !dbg !160
  %263 = getelementptr float, ptr addrspace(1) %31, i64 %262, !dbg !160
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %263, i1 %41) #3, !dbg !161
  ret void, !dbg !162
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmkjuqwhctzr453wwuvyu563qbqu7lxd6pzvfqdnajqj4tjdjfgk.py", directory: "inductor_cache/mk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_88, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_88, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_88", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_88", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 27, column: 26, scope: !7)
!18 = !DILocation(line: 30, column: 32, scope: !7)
!19 = !DILocation(line: 30, column: 39, scope: !7)
!20 = !DILocation(line: 30, column: 37, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 44, scope: !7)
!23 = !DILocation(line: 31, column: 41, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 48, scope: !7)
!26 = !DILocation(line: 32, column: 41, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 48, scope: !7)
!29 = !DILocation(line: 33, column: 41, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 48, scope: !7)
!32 = !DILocation(line: 34, column: 30, scope: !7)
!33 = !DILocation(line: 34, column: 35, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 36, scope: !7)
!40 = !DILocation(line: 45, column: 20, scope: !7)
!41 = !DILocation(line: 46, column: 27, scope: !7)
!42 = !DILocation(line: 38, column: 18, scope: !7)
!43 = !DILocation(line: 39, column: 18, scope: !7)
!44 = !DILocation(line: 40, column: 18, scope: !7)
!45 = !DILocation(line: 42, column: 18, scope: !7)
!46 = !DILocation(line: 43, column: 19, scope: !7)
!47 = !DILocation(line: 28, column: 19, scope: !7)
!48 = !DILocation(line: 29, column: 19, scope: !7)
!49 = !DILocation(line: 48, column: 20, scope: !7)
!50 = !DILocation(line: 51, column: 20, scope: !7)
!51 = !DILocation(line: 52, column: 20, scope: !7)
!52 = !DILocation(line: 53, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 55, column: 42, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!58 = !DILocation(line: 56, column: 25, scope: !7)
!59 = !DILocation(line: 56, column: 36, scope: !7)
!60 = !DILocation(line: 57, column: 25, scope: !7)
!61 = !DILocation(line: 57, column: 37, scope: !7)
!62 = !DILocation(line: 58, column: 35, scope: !7)
!63 = !DILocation(line: 58, column: 30, scope: !7)
!64 = !DILocation(line: 58, column: 25, scope: !7)
!65 = !DILocation(line: 58, column: 46, scope: !7)
!66 = !DILocation(line: 59, column: 35, scope: !7)
!67 = !DILocation(line: 59, column: 30, scope: !7)
!68 = !DILocation(line: 59, column: 25, scope: !7)
!69 = !DILocation(line: 59, column: 46, scope: !7)
!70 = !DILocation(line: 60, column: 35, scope: !7)
!71 = !DILocation(line: 60, column: 30, scope: !7)
!72 = !DILocation(line: 60, column: 25, scope: !7)
!73 = !DILocation(line: 60, column: 46, scope: !7)
!74 = !DILocation(line: 61, column: 35, scope: !7)
!75 = !DILocation(line: 61, column: 30, scope: !7)
!76 = !DILocation(line: 61, column: 25, scope: !7)
!77 = !DILocation(line: 61, column: 46, scope: !7)
!78 = !DILocation(line: 62, column: 35, scope: !7)
!79 = !DILocation(line: 62, column: 30, scope: !7)
!80 = !DILocation(line: 62, column: 25, scope: !7)
!81 = !DILocation(line: 62, column: 46, scope: !7)
!82 = !DILocation(line: 63, column: 35, scope: !7)
!83 = !DILocation(line: 63, column: 30, scope: !7)
!84 = !DILocation(line: 63, column: 25, scope: !7)
!85 = !DILocation(line: 63, column: 46, scope: !7)
!86 = !DILocation(line: 64, column: 35, scope: !7)
!87 = !DILocation(line: 64, column: 30, scope: !7)
!88 = !DILocation(line: 64, column: 25, scope: !7)
!89 = !DILocation(line: 64, column: 46, scope: !7)
!90 = !DILocation(line: 65, column: 35, scope: !7)
!91 = !DILocation(line: 65, column: 30, scope: !7)
!92 = !DILocation(line: 65, column: 25, scope: !7)
!93 = !DILocation(line: 65, column: 46, scope: !7)
!94 = !DILocation(line: 66, column: 36, scope: !7)
!95 = !DILocation(line: 66, column: 31, scope: !7)
!96 = !DILocation(line: 66, column: 26, scope: !7)
!97 = !DILocation(line: 66, column: 47, scope: !7)
!98 = !DILocation(line: 67, column: 36, scope: !7)
!99 = !DILocation(line: 67, column: 31, scope: !7)
!100 = !DILocation(line: 67, column: 26, scope: !7)
!101 = !DILocation(line: 67, column: 47, scope: !7)
!102 = !DILocation(line: 68, column: 36, scope: !7)
!103 = !DILocation(line: 68, column: 31, scope: !7)
!104 = !DILocation(line: 68, column: 26, scope: !7)
!105 = !DILocation(line: 68, column: 47, scope: !7)
!106 = !DILocation(line: 69, column: 36, scope: !7)
!107 = !DILocation(line: 69, column: 31, scope: !7)
!108 = !DILocation(line: 69, column: 26, scope: !7)
!109 = !DILocation(line: 69, column: 47, scope: !7)
!110 = !DILocation(line: 70, column: 36, scope: !7)
!111 = !DILocation(line: 70, column: 31, scope: !7)
!112 = !DILocation(line: 70, column: 26, scope: !7)
!113 = !DILocation(line: 70, column: 47, scope: !7)
!114 = !DILocation(line: 71, column: 36, scope: !7)
!115 = !DILocation(line: 71, column: 31, scope: !7)
!116 = !DILocation(line: 71, column: 26, scope: !7)
!117 = !DILocation(line: 71, column: 47, scope: !7)
!118 = !DILocation(line: 72, column: 36, scope: !7)
!119 = !DILocation(line: 72, column: 31, scope: !7)
!120 = !DILocation(line: 72, column: 26, scope: !7)
!121 = !DILocation(line: 72, column: 47, scope: !7)
!122 = !DILocation(line: 73, column: 36, scope: !7)
!123 = !DILocation(line: 73, column: 31, scope: !7)
!124 = !DILocation(line: 73, column: 26, scope: !7)
!125 = !DILocation(line: 73, column: 47, scope: !7)
!126 = !DILocation(line: 74, column: 36, scope: !7)
!127 = !DILocation(line: 74, column: 31, scope: !7)
!128 = !DILocation(line: 74, column: 26, scope: !7)
!129 = !DILocation(line: 74, column: 47, scope: !7)
!130 = !DILocation(line: 75, column: 36, scope: !7)
!131 = !DILocation(line: 75, column: 31, scope: !7)
!132 = !DILocation(line: 75, column: 26, scope: !7)
!133 = !DILocation(line: 75, column: 47, scope: !7)
!134 = !DILocation(line: 76, column: 36, scope: !7)
!135 = !DILocation(line: 76, column: 31, scope: !7)
!136 = !DILocation(line: 76, column: 26, scope: !7)
!137 = !DILocation(line: 76, column: 47, scope: !7)
!138 = !DILocation(line: 77, column: 36, scope: !7)
!139 = !DILocation(line: 77, column: 31, scope: !7)
!140 = !DILocation(line: 77, column: 26, scope: !7)
!141 = !DILocation(line: 77, column: 47, scope: !7)
!142 = !DILocation(line: 78, column: 36, scope: !7)
!143 = !DILocation(line: 78, column: 31, scope: !7)
!144 = !DILocation(line: 78, column: 26, scope: !7)
!145 = !DILocation(line: 78, column: 47, scope: !7)
!146 = !DILocation(line: 79, column: 36, scope: !7)
!147 = !DILocation(line: 79, column: 31, scope: !7)
!148 = !DILocation(line: 79, column: 26, scope: !7)
!149 = !DILocation(line: 79, column: 47, scope: !7)
!150 = !DILocation(line: 80, column: 36, scope: !7)
!151 = !DILocation(line: 80, column: 31, scope: !7)
!152 = !DILocation(line: 80, column: 26, scope: !7)
!153 = !DILocation(line: 80, column: 47, scope: !7)
!154 = !DILocation(line: 81, column: 36, scope: !7)
!155 = !DILocation(line: 81, column: 31, scope: !7)
!156 = !DILocation(line: 81, column: 26, scope: !7)
!157 = !DILocation(line: 81, column: 47, scope: !7)
!158 = !DILocation(line: 82, column: 36, scope: !7)
!159 = !DILocation(line: 82, column: 31, scope: !7)
!160 = !DILocation(line: 82, column: 26, scope: !7)
!161 = !DILocation(line: 82, column: 47, scope: !7)
!162 = !DILocation(line: 82, column: 4, scope: !7)
