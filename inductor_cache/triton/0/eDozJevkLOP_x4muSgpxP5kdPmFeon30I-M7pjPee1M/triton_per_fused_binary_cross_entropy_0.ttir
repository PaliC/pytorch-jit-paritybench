#loc = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":19:0)
#loc1 = loc(unknown)
#loc21 = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":45:59)
#loc39 = loc(callsite(#loc1 at #loc21))
module {
  tt.func public @triton_per_fused_binary_cross_entropy_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant 2.560000e+02 : f32 loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_1 = arith.constant dense<-1.000000e+02> : tensor<256xf32> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<256xf32> loc(#loc1)
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<256xf32> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc2)
    %1 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc3)
    %2 = tt.addptr %1, %0 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc3)
    %3 = tt.load %2 : tensor<256x!tt.ptr<f32>> loc(#loc4)
    %4 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc5)
    %5 = tt.addptr %4, %0 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc5)
    %6 = tt.load %5 : tensor<256x!tt.ptr<f32>> loc(#loc6)
    %7 = arith.subf %3, %cst_3 : tensor<256xf32> loc(#loc7)
    %8 = arith.subf %cst_2, %6 : tensor<256xf32> loc(#loc8)
    %9 = tt.extern_elementwise %8 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<256xf32>) -> tensor<256xf32> loc(#loc9)
    %10 = arith.cmpf ogt, %9, %cst_1 : tensor<256xf32> loc(#loc30)
    %11 = arith.cmpf une, %9, %9 : tensor<256xf32> loc(#loc31)
    %12 = arith.ori %10, %11 : tensor<256xi1> loc(#loc32)
    %13 = arith.select %12, %9, %cst_1 : tensor<256xi1>, tensor<256xf32> loc(#loc33)
    %14 = arith.mulf %7, %13 : tensor<256xf32> loc(#loc15)
    %15 = math.log %6 : tensor<256xf32> loc(#loc16)
    %16 = arith.cmpf ogt, %15, %cst_1 : tensor<256xf32> loc(#loc34)
    %17 = arith.cmpf une, %15, %15 : tensor<256xf32> loc(#loc35)
    %18 = arith.ori %16, %17 : tensor<256xi1> loc(#loc36)
    %19 = arith.select %18, %15, %cst_1 : tensor<256xi1>, tensor<256xf32> loc(#loc37)
    %20 = arith.mulf %3, %19 : tensor<256xf32> loc(#loc18)
    %21 = arith.subf %14, %20 : tensor<256xf32> loc(#loc19)
    %22 = "tt.reduce"(%21) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc21)), %arg5: f32 loc(callsite(#loc1 at #loc21))):
      %28 = arith.addf %arg4, %arg5 : f32 loc(#loc42)
      tt.reduce.return %28 : f32 loc(#loc38)
    }) : (tensor<256xf32>) -> f32 loc(#loc38)
    %23 = arith.addf %22, %cst_0 : f32 loc(#loc41)
    %24 = arith.divf %23, %cst : f32 loc(#loc25)
    %25 = tt.splat %24 : f32 -> tensor<1xf32> loc(#loc25)
    gpu.barrier loc(#loc26)
    %26 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc27)
    %27 = tt.splat %26 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>> loc(#loc27)
    tt.store %27, %25 : tensor<1x!tt.ptr<f32>> loc(#loc28)
    tt.return loc(#loc29)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":27:26)
#loc3 = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":31:30)
#loc4 = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":31:35)
#loc5 = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":32:30)
#loc6 = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":32:35)
#loc7 = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":34:18)
#loc8 = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":35:12)
#loc9 = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":36:27)
#loc10 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc11 = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":38:40)
#loc12 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc13 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc15 = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":39:18)
#loc16 = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":40:23)
#loc17 = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":41:41)
#loc18 = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":42:19)
#loc19 = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":43:19)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc24 = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":45:45)
#loc25 = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":47:20)
#loc26 = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":48:4)
#loc27 = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":49:28)
#loc28 = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":49:63)
#loc29 = loc("inductor_cache/ml/cmljyf7gg7ymechg5petckavfta2j35ujhfnwsjjnqayrccrhgap.py":49:4)
#loc30 = loc(callsite(#loc10 at #loc11))
#loc31 = loc(callsite(#loc12 at #loc11))
#loc32 = loc(callsite(#loc13 at #loc11))
#loc33 = loc(callsite(#loc14 at #loc11))
#loc34 = loc(callsite(#loc10 at #loc17))
#loc35 = loc(callsite(#loc12 at #loc17))
#loc36 = loc(callsite(#loc13 at #loc17))
#loc37 = loc(callsite(#loc14 at #loc17))
#loc38 = loc(callsite(#loc20 at #loc21))
#loc40 = loc(callsite(#loc22 at #loc20))
#loc41 = loc(callsite(#loc23 at #loc24))
#loc42 = loc(callsite(#loc40 at #loc21))
