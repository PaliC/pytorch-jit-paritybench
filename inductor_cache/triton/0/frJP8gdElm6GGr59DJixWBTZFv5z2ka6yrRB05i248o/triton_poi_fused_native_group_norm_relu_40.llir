; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_native_group_norm_relu_40(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = srem i32 %13, 4096, !dbg !14
  %16 = srem i32 %14, 4096, !dbg !14
  %17 = sdiv i32 %13, 65536, !dbg !15
  %18 = sdiv i32 %14, 65536, !dbg !15
  %19 = sext i32 %13 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = sext i32 %14 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !17
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !17
  %25 = shl nsw i32 %17, 5, !dbg !18
  %26 = shl nsw i32 %18, 5, !dbg !18
  %.lhs.trunc = trunc nsw i32 %15 to i16, !dbg !19
  %27 = sdiv i16 %.lhs.trunc, 128, !dbg !19
  %.sext = sext i16 %27 to i32, !dbg !19
  %.lhs.trunc22 = trunc nsw i32 %16 to i16, !dbg !19
  %28 = sdiv i16 %.lhs.trunc22, 128, !dbg !19
  %.sext23 = sext i16 %28 to i32, !dbg !19
  %29 = add nsw i32 %25, %.sext, !dbg !20
  %30 = add nsw i32 %26, %.sext23, !dbg !20
  %31 = sext i32 %29 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !21
  %33 = sext i32 %30 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !23
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !24
  %46 = bitcast i32 %45 to float, !dbg !24
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !24
  %48 = bitcast i32 %47 to float, !dbg !24
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !24
  %50 = bitcast i32 %49 to float, !dbg !24
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !24
  %52 = bitcast i32 %51 to float, !dbg !24
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %54 = bitcast i32 %53 to float, !dbg !24
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %56 = bitcast i32 %55 to float, !dbg !24
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %58 = bitcast i32 %57 to float, !dbg !24
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %60 = bitcast i32 %59 to float, !dbg !24
  %61 = sext i32 %15 to i64, !dbg !25
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !25
  %63 = sext i32 %16 to i64, !dbg !25
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !25
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !26
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !26
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !27
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !27
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !28
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !28
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %46, float 2.048000e+03) #3, !dbg !29
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %48, float 2.048000e+03) #3, !dbg !29
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float 2.048000e+03) #3, !dbg !29
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float 2.048000e+03) #3, !dbg !29
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float 2.048000e+03) #3, !dbg !29
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float 2.048000e+03) #3, !dbg !29
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float 2.048000e+03) #3, !dbg !29
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float 2.048000e+03) #3, !dbg !29
  %79 = fadd float %71, 0x3EE4F8B580000000, !dbg !30
  %80 = fadd float %72, 0x3EE4F8B580000000, !dbg !30
  %81 = fadd float %73, 0x3EE4F8B580000000, !dbg !30
  %82 = fadd float %74, 0x3EE4F8B580000000, !dbg !30
  %83 = fadd float %75, 0x3EE4F8B580000000, !dbg !30
  %84 = fadd float %76, 0x3EE4F8B580000000, !dbg !30
  %85 = fadd float %77, 0x3EE4F8B580000000, !dbg !30
  %86 = fadd float %78, 0x3EE4F8B580000000, !dbg !30
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %87, 0, !dbg !31
  br i1 %.not.i, label %90, label %88, !dbg !31

88:                                               ; preds = %7
  %89 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %79), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

90:                                               ; preds = %7
  %91 = tail call float @llvm.nvvm.rsqrt.approx.f(float %79), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

__nv_rsqrtf.exit:                                 ; preds = %88, %90
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], !dbg !31
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %92, 0, !dbg !31
  br i1 %.not.i1, label %95, label %93, !dbg !31

93:                                               ; preds = %__nv_rsqrtf.exit
  %94 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %80), !dbg !31
  br label %__nv_rsqrtf.exit3, !dbg !31

95:                                               ; preds = %__nv_rsqrtf.exit
  %96 = tail call float @llvm.nvvm.rsqrt.approx.f(float %80), !dbg !31
  br label %__nv_rsqrtf.exit3, !dbg !31

__nv_rsqrtf.exit3:                                ; preds = %93, %95
  %.0.i2 = phi float [ %94, %93 ], [ %96, %95 ], !dbg !31
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i4 = icmp eq i32 %97, 0, !dbg !31
  br i1 %.not.i4, label %100, label %98, !dbg !31

98:                                               ; preds = %__nv_rsqrtf.exit3
  %99 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %81), !dbg !31
  br label %__nv_rsqrtf.exit6, !dbg !31

100:                                              ; preds = %__nv_rsqrtf.exit3
  %101 = tail call float @llvm.nvvm.rsqrt.approx.f(float %81), !dbg !31
  br label %__nv_rsqrtf.exit6, !dbg !31

__nv_rsqrtf.exit6:                                ; preds = %98, %100
  %.0.i5 = phi float [ %99, %98 ], [ %101, %100 ], !dbg !31
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i7 = icmp eq i32 %102, 0, !dbg !31
  br i1 %.not.i7, label %105, label %103, !dbg !31

103:                                              ; preds = %__nv_rsqrtf.exit6
  %104 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %82), !dbg !31
  br label %__nv_rsqrtf.exit9, !dbg !31

105:                                              ; preds = %__nv_rsqrtf.exit6
  %106 = tail call float @llvm.nvvm.rsqrt.approx.f(float %82), !dbg !31
  br label %__nv_rsqrtf.exit9, !dbg !31

__nv_rsqrtf.exit9:                                ; preds = %103, %105
  %.0.i8 = phi float [ %104, %103 ], [ %106, %105 ], !dbg !31
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i10 = icmp eq i32 %107, 0, !dbg !31
  br i1 %.not.i10, label %110, label %108, !dbg !31

108:                                              ; preds = %__nv_rsqrtf.exit9
  %109 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %83), !dbg !31
  br label %__nv_rsqrtf.exit12, !dbg !31

110:                                              ; preds = %__nv_rsqrtf.exit9
  %111 = tail call float @llvm.nvvm.rsqrt.approx.f(float %83), !dbg !31
  br label %__nv_rsqrtf.exit12, !dbg !31

__nv_rsqrtf.exit12:                               ; preds = %108, %110
  %.0.i11 = phi float [ %109, %108 ], [ %111, %110 ], !dbg !31
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i13 = icmp eq i32 %112, 0, !dbg !31
  br i1 %.not.i13, label %115, label %113, !dbg !31

113:                                              ; preds = %__nv_rsqrtf.exit12
  %114 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %84), !dbg !31
  br label %__nv_rsqrtf.exit15, !dbg !31

115:                                              ; preds = %__nv_rsqrtf.exit12
  %116 = tail call float @llvm.nvvm.rsqrt.approx.f(float %84), !dbg !31
  br label %__nv_rsqrtf.exit15, !dbg !31

__nv_rsqrtf.exit15:                               ; preds = %113, %115
  %.0.i14 = phi float [ %114, %113 ], [ %116, %115 ], !dbg !31
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i16 = icmp eq i32 %117, 0, !dbg !31
  br i1 %.not.i16, label %120, label %118, !dbg !31

118:                                              ; preds = %__nv_rsqrtf.exit15
  %119 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %85), !dbg !31
  br label %__nv_rsqrtf.exit18, !dbg !31

120:                                              ; preds = %__nv_rsqrtf.exit15
  %121 = tail call float @llvm.nvvm.rsqrt.approx.f(float %85), !dbg !31
  br label %__nv_rsqrtf.exit18, !dbg !31

__nv_rsqrtf.exit18:                               ; preds = %118, %120
  %.0.i17 = phi float [ %119, %118 ], [ %121, %120 ], !dbg !31
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i19 = icmp eq i32 %122, 0, !dbg !31
  br i1 %.not.i19, label %125, label %123, !dbg !31

123:                                              ; preds = %__nv_rsqrtf.exit18
  %124 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %86), !dbg !31
  br label %__nv_rsqrtf.exit21, !dbg !31

125:                                              ; preds = %__nv_rsqrtf.exit18
  %126 = tail call float @llvm.nvvm.rsqrt.approx.f(float %86), !dbg !31
  br label %__nv_rsqrtf.exit21, !dbg !31

__nv_rsqrtf.exit21:                               ; preds = %123, %125
  %.0.i20 = phi float [ %124, %123 ], [ %126, %125 ], !dbg !31
  %127 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %128 = insertelement <8 x i32> poison, i32 %42, i64 0, !dbg !22
  %129 = insertelement <8 x i32> %128, i32 %41, i64 1, !dbg !22
  %130 = insertelement <8 x i32> %129, i32 %40, i64 2, !dbg !22
  %131 = insertelement <8 x i32> %130, i32 %39, i64 3, !dbg !22
  %132 = insertelement <8 x i32> %131, i32 %38, i64 4, !dbg !22
  %133 = insertelement <8 x i32> %132, i32 %37, i64 5, !dbg !22
  %134 = insertelement <8 x i32> %133, i32 %36, i64 6, !dbg !22
  %135 = insertelement <8 x i32> %134, i32 %35, i64 7, !dbg !22
  %136 = bitcast <8 x i32> %135 to <8 x float>, !dbg !22
  %137 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %138 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %139 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %140 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !17
  %141 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !17
  %142 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !17
  %143 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !17
  %144 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %145 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %146 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %147 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %148 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !28
  %149 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !28
  %150 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !28
  %151 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !28
  %152 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !26
  %153 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !26
  %154 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !26
  %155 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !26
  %156 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %157 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %158 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %159 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %160 = insertelement <8 x i32> poison, i32 %127, i64 0, !dbg !17
  %161 = insertelement <8 x i32> %160, i32 %137, i64 1, !dbg !17
  %162 = insertelement <8 x i32> %161, i32 %138, i64 2, !dbg !17
  %163 = insertelement <8 x i32> %162, i32 %139, i64 3, !dbg !17
  %164 = insertelement <8 x i32> %163, i32 %140, i64 4, !dbg !17
  %165 = insertelement <8 x i32> %164, i32 %141, i64 5, !dbg !17
  %166 = insertelement <8 x i32> %165, i32 %142, i64 6, !dbg !17
  %167 = insertelement <8 x i32> %166, i32 %143, i64 7, !dbg !17
  %168 = bitcast <8 x i32> %167 to <8 x float>, !dbg !17
  %169 = fsub <8 x float> %168, %136, !dbg !32
  %170 = insertelement <8 x i32> poison, i32 %144, i64 0, !dbg !28
  %171 = insertelement <8 x i32> %170, i32 %145, i64 1, !dbg !28
  %172 = insertelement <8 x i32> %171, i32 %146, i64 2, !dbg !28
  %173 = insertelement <8 x i32> %172, i32 %147, i64 3, !dbg !28
  %174 = insertelement <8 x i32> %173, i32 %148, i64 4, !dbg !28
  %175 = insertelement <8 x i32> %174, i32 %149, i64 5, !dbg !28
  %176 = insertelement <8 x i32> %175, i32 %150, i64 6, !dbg !28
  %177 = insertelement <8 x i32> %176, i32 %151, i64 7, !dbg !28
  %178 = bitcast <8 x i32> %177 to <8 x float>, !dbg !28
  %179 = insertelement <8 x i32> poison, i32 %152, i64 0, !dbg !26
  %180 = insertelement <8 x i32> %179, i32 %153, i64 1, !dbg !26
  %181 = insertelement <8 x i32> %180, i32 %154, i64 2, !dbg !26
  %182 = insertelement <8 x i32> %181, i32 %155, i64 3, !dbg !26
  %183 = insertelement <8 x i32> %182, i32 %156, i64 4, !dbg !26
  %184 = insertelement <8 x i32> %183, i32 %157, i64 5, !dbg !26
  %185 = insertelement <8 x i32> %184, i32 %158, i64 6, !dbg !26
  %186 = insertelement <8 x i32> %185, i32 %159, i64 7, !dbg !26
  %187 = bitcast <8 x i32> %186 to <8 x float>, !dbg !26
  %188 = insertelement <8 x float> poison, float %.0.i20, i64 0, !dbg !33
  %189 = insertelement <8 x float> %188, float %.0.i17, i64 1, !dbg !33
  %190 = insertelement <8 x float> %189, float %.0.i14, i64 2, !dbg !33
  %191 = insertelement <8 x float> %190, float %.0.i11, i64 3, !dbg !33
  %192 = insertelement <8 x float> %191, float %.0.i8, i64 4, !dbg !33
  %193 = insertelement <8 x float> %192, float %.0.i5, i64 5, !dbg !33
  %194 = insertelement <8 x float> %193, float %.0.i2, i64 6, !dbg !33
  %195 = insertelement <8 x float> %194, float %.0.i, i64 7, !dbg !33
  %196 = fmul <8 x float> %169, %195, !dbg !33
  %197 = fmul <8 x float> %196, %187, !dbg !34
  %198 = fadd <8 x float> %197, %178, !dbg !35
  %199 = fcmp olt <8 x float> %198, zeroinitializer, !dbg !36
  %200 = extractelement <8 x i1> %199, i64 7, !dbg !40
  %201 = extractelement <8 x i1> %199, i64 6, !dbg !40
  %202 = extractelement <8 x i1> %199, i64 5, !dbg !40
  %203 = extractelement <8 x i1> %199, i64 4, !dbg !40
  %204 = extractelement <8 x i1> %199, i64 3, !dbg !40
  %205 = extractelement <8 x i1> %199, i64 2, !dbg !40
  %206 = extractelement <8 x i1> %199, i64 1, !dbg !40
  %207 = extractelement <8 x i1> %199, i64 0, !dbg !40
  %208 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !41
  %209 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !41
  %bc = bitcast <8 x float> %198 to <8 x i32>, !dbg !42
  %210 = extractelement <8 x i32> %bc, i64 7, !dbg !42
  %211 = select i1 %200, i32 0, i32 %210, !dbg !40
  %bc24 = bitcast <8 x float> %198 to <8 x i32>, !dbg !42
  %212 = extractelement <8 x i32> %bc24, i64 6, !dbg !42
  %213 = select i1 %201, i32 0, i32 %212, !dbg !40
  %bc25 = bitcast <8 x float> %198 to <8 x i32>, !dbg !42
  %214 = extractelement <8 x i32> %bc25, i64 5, !dbg !42
  %215 = select i1 %202, i32 0, i32 %214, !dbg !40
  %bc26 = bitcast <8 x float> %198 to <8 x i32>, !dbg !42
  %216 = extractelement <8 x i32> %bc26, i64 4, !dbg !42
  %217 = select i1 %203, i32 0, i32 %216, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %211, i32 %213, i32 %215, i32 %217, ptr addrspace(1) %208, i1 true) #3, !dbg !42
  %bc27 = bitcast <8 x float> %198 to <8 x i32>, !dbg !42
  %218 = extractelement <8 x i32> %bc27, i64 3, !dbg !42
  %219 = select i1 %204, i32 0, i32 %218, !dbg !40
  %bc28 = bitcast <8 x float> %198 to <8 x i32>, !dbg !42
  %220 = extractelement <8 x i32> %bc28, i64 2, !dbg !42
  %221 = select i1 %205, i32 0, i32 %220, !dbg !40
  %bc29 = bitcast <8 x float> %198 to <8 x i32>, !dbg !42
  %222 = extractelement <8 x i32> %bc29, i64 1, !dbg !42
  %223 = select i1 %206, i32 0, i32 %222, !dbg !40
  %bc30 = bitcast <8 x float> %198 to <8 x i32>, !dbg !42
  %224 = extractelement <8 x i32> %bc30, i64 0, !dbg !42
  %225 = select i1 %207, i32 0, i32 %224, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %219, i32 %221, i32 %223, i32 %225, ptr addrspace(1) %209, i1 true) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckvc7penhgx62l4pe7s62d7lhtv6wev52xlqb6zxsyz3qs664uvb.py", directory: "inductor_cache/kv")
!4 = !{ptr @triton_poi_fused_native_group_norm_relu_40, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_group_norm_relu_40, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_group_norm_relu_40", linkageName: "triton_poi_fused_native_group_norm_relu_40", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 33, scope: !7)
!19 = !DILocation(line: 28, column: 45, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 52, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 52, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 27, scope: !7)
!32 = !DILocation(line: 32, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 19, scope: !7)
!35 = !DILocation(line: 40, column: 20, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 42, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 43, column: 25, scope: !7)
!42 = !DILocation(line: 43, column: 37, scope: !7)
!43 = !DILocation(line: 43, column: 4, scope: !7)
