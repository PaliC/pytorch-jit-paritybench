; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 2, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 5, !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = or disjoint i32 %10, %7, !dbg !13
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %13 = shl i32 %12, 8, !dbg !15
  %14 = shl i32 %8, 3, !dbg !16
  %15 = and i32 %14, 248, !dbg !16
  %16 = and i32 %8, 127, !dbg !16
  %17 = or disjoint i32 %13, %15, !dbg !17
  %18 = or disjoint i32 %17, 4, !dbg !17
  %19 = or disjoint i32 %13, %16, !dbg !17
  %20 = or disjoint i32 %19, 128, !dbg !17
  %21 = icmp slt i32 %17, 256, !dbg !18
  %22 = icmp slt i32 %19, 256, !dbg !18
  %23 = icmp slt i32 %20, 256, !dbg !18
  %24 = sdiv i32 %11, 16, !dbg !19
  %.frozen = freeze i32 %7, !dbg !20
  %25 = sdiv i32 %.frozen, 256, !dbg !20
  %26 = mul i32 %25, 256, !dbg !21
  %.decomposed = sub i32 %.frozen, %26, !dbg !21
  %27 = shl i32 %24, 14, !dbg !22
  %28 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !23
  %29 = insertelement <2 x i32> %28, i32 %24, i64 1, !dbg !23
  %30 = srem <2 x i32> %29, splat (i32 16), !dbg !23
  %31 = extractelement <2 x i32> %30, i64 1, !dbg !24
  %32 = icmp sgt i32 %31, 0, !dbg !25
  %33 = icmp sgt <2 x i32> %30, <i32 0, i32 -1>, !dbg !26
  %34 = extractelement <2 x i1> %33, i64 0, !dbg !27
  %35 = and i1 %34, %32, !dbg !27
  %36 = extractelement <2 x i32> %30, i64 0, !dbg !24
  %37 = shl nsw i32 %36, 9, !dbg !28
  %38 = add i32 %27, %37, !dbg !29
  %39 = add i32 %38, -8448, !dbg !30
  %40 = add i32 %39, %17, !dbg !31
  %41 = add i32 %39, %18, !dbg !31
  %42 = sext i32 %40 to i64, !dbg !32
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !32
  %44 = sext i32 %41 to i64, !dbg !32
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !32
  %46 = and i1 %21, %35, !dbg !33
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46) #2, !dbg !34
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !34
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !34
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !34
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !34
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46) #2, !dbg !34
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !34
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !34
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !34
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !34
  %57 = icmp sgt i32 %36, -1, !dbg !35
  %58 = and i1 %57, %32, !dbg !36
  %59 = add i32 %38, -8192, !dbg !37
  %60 = add i32 %59, %17, !dbg !38
  %61 = add i32 %59, %18, !dbg !38
  %62 = sext i32 %60 to i64, !dbg !39
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !39
  %64 = sext i32 %61 to i64, !dbg !39
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !39
  %66 = and i1 %21, %58, !dbg !40
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 %66, i32 -8388608, i1 %66, i32 -8388608, i1 %66, i32 -8388608, i1 %66, i32 -8388608, i1 %66) #2, !dbg !41
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !41
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !41
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !41
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !41
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 %66, i32 -8388608, i1 %66, i32 -8388608, i1 %66, i32 -8388608, i1 %66, i32 -8388608, i1 %66) #2, !dbg !41
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !41
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !41
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !41
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !41
  %77 = add i32 %38, -7936, !dbg !42
  %78 = add i32 %77, %17, !dbg !43
  %79 = add i32 %77, %18, !dbg !43
  %80 = sext i32 %78 to i64, !dbg !44
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !44
  %82 = sext i32 %79 to i64, !dbg !44
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !44
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 %66, i32 -8388608, i1 %66, i32 -8388608, i1 %66, i32 -8388608, i1 %66, i32 -8388608, i1 %66) #2, !dbg !45
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !45
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !45
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !45
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !45
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %66, i32 -8388608, i1 %66, i32 -8388608, i1 %66, i32 -8388608, i1 %66, i32 -8388608, i1 %66) #2, !dbg !45
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !45
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !45
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !45
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !45
  %94 = extractelement <2 x i1> %33, i64 1, !dbg !46
  %95 = and i1 %34, %94, !dbg !46
  %96 = add i32 %38, -256, !dbg !47
  %97 = add i32 %96, %17, !dbg !48
  %98 = add i32 %96, %18, !dbg !48
  %99 = sext i32 %97 to i64, !dbg !49
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !49
  %101 = sext i32 %98 to i64, !dbg !49
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !49
  %103 = and i1 %21, %95, !dbg !50
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %100, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103) #2, !dbg !51
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !51
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !51
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !51
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !51
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %102, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103) #2, !dbg !51
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !51
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !51
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !51
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !51
  %114 = or i32 %31, %36, !dbg !24
  %115 = icmp sgt i32 %114, -1, !dbg !24
  %116 = add i32 %38, %17, !dbg !52
  %117 = add i32 %38, %18, !dbg !52
  %118 = sext i32 %116 to i64, !dbg !53
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !53
  %120 = sext i32 %117 to i64, !dbg !53
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !53
  %122 = and i1 %21, %115, !dbg !54
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %119, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122) #2, !dbg !55
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !55
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !55
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !55
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !55
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %121, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122) #2, !dbg !55
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !55
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !55
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !55
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !55
  %133 = or disjoint i32 %38, 256, !dbg !56
  %134 = add i32 %133, %17, !dbg !57
  %135 = add i32 %133, %18, !dbg !57
  %136 = sext i32 %134 to i64, !dbg !58
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !58
  %138 = sext i32 %135 to i64, !dbg !58
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !58
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %137, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122) #2, !dbg !59
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !59
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !59
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !59
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !59
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %139, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122) #2, !dbg !59
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !59
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !59
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !59
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !59
  %150 = add i32 %38, 7936, !dbg !60
  %151 = add i32 %150, %17, !dbg !61
  %152 = add i32 %150, %18, !dbg !61
  %153 = sext i32 %151 to i64, !dbg !62
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !62
  %155 = sext i32 %152 to i64, !dbg !62
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !62
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %154, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103) #2, !dbg !63
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !63
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !63
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !63
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !63
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %156, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103) #2, !dbg !63
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !63
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !63
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !63
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !63
  %167 = add i32 %38, 8192, !dbg !64
  %168 = add i32 %167, %17, !dbg !65
  %169 = add i32 %167, %18, !dbg !65
  %170 = sext i32 %168 to i64, !dbg !66
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !66
  %172 = sext i32 %169 to i64, !dbg !66
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !66
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %171, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122) #2, !dbg !67
  %175 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !67
  %176 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !67
  %177 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !67
  %178 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !67
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %173, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122) #2, !dbg !67
  %180 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !67
  %181 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !67
  %182 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !67
  %183 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !67
  %184 = add i32 %38, 8448, !dbg !68
  %185 = add i32 %184, %17, !dbg !69
  %186 = add i32 %184, %18, !dbg !69
  %187 = sext i32 %185 to i64, !dbg !70
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %187, !dbg !70
  %189 = sext i32 %186 to i64, !dbg !70
  %190 = getelementptr float, ptr addrspace(1) %0, i64 %189, !dbg !70
  %191 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %188, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122) #2, !dbg !71
  %192 = extractvalue { i32, i32, i32, i32 } %191, 0, !dbg !71
  %193 = extractvalue { i32, i32, i32, i32 } %191, 1, !dbg !71
  %194 = extractvalue { i32, i32, i32, i32 } %191, 2, !dbg !71
  %195 = extractvalue { i32, i32, i32, i32 } %191, 3, !dbg !71
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %190, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122) #2, !dbg !71
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !71
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !71
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !71
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !71
  %201 = insertelement <4 x i32> poison, i32 %48, i64 0, !dbg !34
  %202 = insertelement <4 x i32> %201, i32 %49, i64 1, !dbg !34
  %203 = insertelement <4 x i32> %202, i32 %50, i64 2, !dbg !34
  %204 = insertelement <4 x i32> %203, i32 %51, i64 3, !dbg !34
  %205 = bitcast <4 x i32> %204 to <4 x float>, !dbg !34
  %206 = insertelement <4 x i32> poison, i32 %68, i64 0, !dbg !41
  %207 = insertelement <4 x i32> %206, i32 %69, i64 1, !dbg !41
  %208 = insertelement <4 x i32> %207, i32 %70, i64 2, !dbg !41
  %209 = insertelement <4 x i32> %208, i32 %71, i64 3, !dbg !41
  %210 = bitcast <4 x i32> %209 to <4 x float>, !dbg !41
  %211 = fcmp ogt <4 x float> %210, %205, !dbg !72
  %212 = fcmp uno <4 x float> %210, zeroinitializer, !dbg !76
  %213 = or <4 x i1> %211, %212, !dbg !77
  %.v = select <4 x i1> %213, <4 x i32> %209, <4 x i32> %204, !dbg !78
  %214 = bitcast <4 x i32> %.v to <4 x float>, !dbg !78
  %215 = insertelement <4 x i32> poison, i32 %85, i64 0, !dbg !45
  %216 = insertelement <4 x i32> %215, i32 %86, i64 1, !dbg !45
  %217 = insertelement <4 x i32> %216, i32 %87, i64 2, !dbg !45
  %218 = insertelement <4 x i32> %217, i32 %88, i64 3, !dbg !45
  %219 = bitcast <4 x i32> %218 to <4 x float>, !dbg !45
  %220 = fcmp olt <4 x float> %214, %219, !dbg !79
  %221 = fcmp uno <4 x float> %219, zeroinitializer, !dbg !81
  %222 = or <4 x i1> %221, %220, !dbg !82
  %.v16 = select <4 x i1> %222, <4 x i32> %218, <4 x i32> %.v, !dbg !83
  %223 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !83
  %224 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !51
  %225 = insertelement <4 x i32> %224, i32 %106, i64 1, !dbg !51
  %226 = insertelement <4 x i32> %225, i32 %107, i64 2, !dbg !51
  %227 = insertelement <4 x i32> %226, i32 %108, i64 3, !dbg !51
  %228 = bitcast <4 x i32> %227 to <4 x float>, !dbg !51
  %229 = fcmp olt <4 x float> %223, %228, !dbg !84
  %230 = fcmp uno <4 x float> %228, zeroinitializer, !dbg !86
  %231 = or <4 x i1> %230, %229, !dbg !87
  %.v17 = select <4 x i1> %231, <4 x i32> %227, <4 x i32> %.v16, !dbg !88
  %232 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !88
  %233 = insertelement <4 x i32> poison, i32 %124, i64 0, !dbg !55
  %234 = insertelement <4 x i32> %233, i32 %125, i64 1, !dbg !55
  %235 = insertelement <4 x i32> %234, i32 %126, i64 2, !dbg !55
  %236 = insertelement <4 x i32> %235, i32 %127, i64 3, !dbg !55
  %237 = bitcast <4 x i32> %236 to <4 x float>, !dbg !55
  %238 = fcmp olt <4 x float> %232, %237, !dbg !89
  %239 = fcmp uno <4 x float> %237, zeroinitializer, !dbg !91
  %240 = or <4 x i1> %239, %238, !dbg !92
  %.v18 = select <4 x i1> %240, <4 x i32> %236, <4 x i32> %.v17, !dbg !93
  %241 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !93
  %242 = insertelement <4 x i32> poison, i32 %141, i64 0, !dbg !59
  %243 = insertelement <4 x i32> %242, i32 %142, i64 1, !dbg !59
  %244 = insertelement <4 x i32> %243, i32 %143, i64 2, !dbg !59
  %245 = insertelement <4 x i32> %244, i32 %144, i64 3, !dbg !59
  %246 = bitcast <4 x i32> %245 to <4 x float>, !dbg !59
  %247 = fcmp olt <4 x float> %241, %246, !dbg !94
  %248 = fcmp uno <4 x float> %246, zeroinitializer, !dbg !96
  %249 = or <4 x i1> %248, %247, !dbg !97
  %.v19 = select <4 x i1> %249, <4 x i32> %245, <4 x i32> %.v18, !dbg !98
  %250 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !98
  %251 = insertelement <4 x i32> poison, i32 %158, i64 0, !dbg !63
  %252 = insertelement <4 x i32> %251, i32 %159, i64 1, !dbg !63
  %253 = insertelement <4 x i32> %252, i32 %160, i64 2, !dbg !63
  %254 = insertelement <4 x i32> %253, i32 %161, i64 3, !dbg !63
  %255 = bitcast <4 x i32> %254 to <4 x float>, !dbg !63
  %256 = fcmp olt <4 x float> %250, %255, !dbg !99
  %257 = fcmp uno <4 x float> %255, zeroinitializer, !dbg !101
  %258 = or <4 x i1> %257, %256, !dbg !102
  %.v20 = select <4 x i1> %258, <4 x i32> %254, <4 x i32> %.v19, !dbg !103
  %259 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !103
  %260 = insertelement <4 x i32> poison, i32 %175, i64 0, !dbg !67
  %261 = insertelement <4 x i32> %260, i32 %176, i64 1, !dbg !67
  %262 = insertelement <4 x i32> %261, i32 %177, i64 2, !dbg !67
  %263 = insertelement <4 x i32> %262, i32 %178, i64 3, !dbg !67
  %264 = bitcast <4 x i32> %263 to <4 x float>, !dbg !67
  %265 = fcmp olt <4 x float> %259, %264, !dbg !104
  %266 = fcmp uno <4 x float> %264, zeroinitializer, !dbg !106
  %267 = or <4 x i1> %266, %265, !dbg !107
  %.v21 = select <4 x i1> %267, <4 x i32> %263, <4 x i32> %.v20, !dbg !108
  %268 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !108
  %269 = insertelement <4 x i32> poison, i32 %192, i64 0, !dbg !71
  %270 = insertelement <4 x i32> %269, i32 %193, i64 1, !dbg !71
  %271 = insertelement <4 x i32> %270, i32 %194, i64 2, !dbg !71
  %272 = insertelement <4 x i32> %271, i32 %195, i64 3, !dbg !71
  %273 = bitcast <4 x i32> %272 to <4 x float>, !dbg !71
  %274 = fcmp olt <4 x float> %268, %273, !dbg !109
  %275 = extractelement <4 x i1> %274, i64 0, !dbg !111
  %276 = extractelement <4 x i1> %274, i64 1, !dbg !111
  %277 = extractelement <4 x i1> %274, i64 2, !dbg !111
  %278 = extractelement <4 x i1> %274, i64 3, !dbg !111
  %279 = zext <4 x i1> %211 to <4 x i8>, !dbg !112
  %280 = select <4 x i1> %220, <4 x i8> splat (i8 2), <4 x i8> %279, !dbg !113
  %281 = select <4 x i1> %229, <4 x i8> splat (i8 3), <4 x i8> %280, !dbg !114
  %282 = select <4 x i1> %238, <4 x i8> splat (i8 4), <4 x i8> %281, !dbg !115
  %283 = select <4 x i1> %247, <4 x i8> splat (i8 5), <4 x i8> %282, !dbg !116
  %284 = select <4 x i1> %256, <4 x i8> splat (i8 6), <4 x i8> %283, !dbg !117
  %285 = select <4 x i1> %265, <4 x i8> splat (i8 7), <4 x i8> %284, !dbg !118
  %286 = select <4 x i1> %274, <4 x i8> splat (i8 8), <4 x i8> %285, !dbg !119
  %287 = insertelement <4 x i32> poison, i32 %53, i64 0, !dbg !34
  %288 = insertelement <4 x i32> %287, i32 %54, i64 1, !dbg !34
  %289 = insertelement <4 x i32> %288, i32 %55, i64 2, !dbg !34
  %290 = insertelement <4 x i32> %289, i32 %56, i64 3, !dbg !34
  %291 = bitcast <4 x i32> %290 to <4 x float>, !dbg !34
  %292 = insertelement <4 x i32> poison, i32 %73, i64 0, !dbg !41
  %293 = insertelement <4 x i32> %292, i32 %74, i64 1, !dbg !41
  %294 = insertelement <4 x i32> %293, i32 %75, i64 2, !dbg !41
  %295 = insertelement <4 x i32> %294, i32 %76, i64 3, !dbg !41
  %296 = bitcast <4 x i32> %295 to <4 x float>, !dbg !41
  %297 = fcmp ogt <4 x float> %296, %291, !dbg !72
  %298 = fcmp uno <4 x float> %296, zeroinitializer, !dbg !76
  %299 = or <4 x i1> %297, %298, !dbg !77
  %.v22 = select <4 x i1> %299, <4 x i32> %295, <4 x i32> %290, !dbg !78
  %300 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !78
  %301 = insertelement <4 x i32> poison, i32 %90, i64 0, !dbg !45
  %302 = insertelement <4 x i32> %301, i32 %91, i64 1, !dbg !45
  %303 = insertelement <4 x i32> %302, i32 %92, i64 2, !dbg !45
  %304 = insertelement <4 x i32> %303, i32 %93, i64 3, !dbg !45
  %305 = bitcast <4 x i32> %304 to <4 x float>, !dbg !45
  %306 = fcmp olt <4 x float> %300, %305, !dbg !79
  %307 = fcmp uno <4 x float> %305, zeroinitializer, !dbg !81
  %308 = or <4 x i1> %307, %306, !dbg !82
  %.v23 = select <4 x i1> %308, <4 x i32> %304, <4 x i32> %.v22, !dbg !83
  %309 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !83
  %310 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !51
  %311 = insertelement <4 x i32> %310, i32 %111, i64 1, !dbg !51
  %312 = insertelement <4 x i32> %311, i32 %112, i64 2, !dbg !51
  %313 = insertelement <4 x i32> %312, i32 %113, i64 3, !dbg !51
  %314 = bitcast <4 x i32> %313 to <4 x float>, !dbg !51
  %315 = fcmp olt <4 x float> %309, %314, !dbg !84
  %316 = fcmp uno <4 x float> %314, zeroinitializer, !dbg !86
  %317 = or <4 x i1> %316, %315, !dbg !87
  %.v24 = select <4 x i1> %317, <4 x i32> %313, <4 x i32> %.v23, !dbg !88
  %318 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !88
  %319 = insertelement <4 x i32> poison, i32 %129, i64 0, !dbg !55
  %320 = insertelement <4 x i32> %319, i32 %130, i64 1, !dbg !55
  %321 = insertelement <4 x i32> %320, i32 %131, i64 2, !dbg !55
  %322 = insertelement <4 x i32> %321, i32 %132, i64 3, !dbg !55
  %323 = bitcast <4 x i32> %322 to <4 x float>, !dbg !55
  %324 = fcmp olt <4 x float> %318, %323, !dbg !89
  %325 = fcmp uno <4 x float> %323, zeroinitializer, !dbg !91
  %326 = or <4 x i1> %325, %324, !dbg !92
  %.v25 = select <4 x i1> %326, <4 x i32> %322, <4 x i32> %.v24, !dbg !93
  %327 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !93
  %328 = insertelement <4 x i32> poison, i32 %146, i64 0, !dbg !59
  %329 = insertelement <4 x i32> %328, i32 %147, i64 1, !dbg !59
  %330 = insertelement <4 x i32> %329, i32 %148, i64 2, !dbg !59
  %331 = insertelement <4 x i32> %330, i32 %149, i64 3, !dbg !59
  %332 = bitcast <4 x i32> %331 to <4 x float>, !dbg !59
  %333 = fcmp olt <4 x float> %327, %332, !dbg !94
  %334 = fcmp uno <4 x float> %332, zeroinitializer, !dbg !96
  %335 = or <4 x i1> %334, %333, !dbg !97
  %.v26 = select <4 x i1> %335, <4 x i32> %331, <4 x i32> %.v25, !dbg !98
  %336 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !98
  %337 = insertelement <4 x i32> poison, i32 %163, i64 0, !dbg !63
  %338 = insertelement <4 x i32> %337, i32 %164, i64 1, !dbg !63
  %339 = insertelement <4 x i32> %338, i32 %165, i64 2, !dbg !63
  %340 = insertelement <4 x i32> %339, i32 %166, i64 3, !dbg !63
  %341 = bitcast <4 x i32> %340 to <4 x float>, !dbg !63
  %342 = fcmp olt <4 x float> %336, %341, !dbg !99
  %343 = fcmp uno <4 x float> %341, zeroinitializer, !dbg !101
  %344 = or <4 x i1> %343, %342, !dbg !102
  %.v27 = select <4 x i1> %344, <4 x i32> %340, <4 x i32> %.v26, !dbg !103
  %345 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !103
  %346 = insertelement <4 x i32> poison, i32 %180, i64 0, !dbg !67
  %347 = insertelement <4 x i32> %346, i32 %181, i64 1, !dbg !67
  %348 = insertelement <4 x i32> %347, i32 %182, i64 2, !dbg !67
  %349 = insertelement <4 x i32> %348, i32 %183, i64 3, !dbg !67
  %350 = bitcast <4 x i32> %349 to <4 x float>, !dbg !67
  %351 = fcmp olt <4 x float> %345, %350, !dbg !104
  %352 = fcmp uno <4 x float> %350, zeroinitializer, !dbg !106
  %353 = or <4 x i1> %352, %351, !dbg !107
  %.v28 = select <4 x i1> %353, <4 x i32> %349, <4 x i32> %.v27, !dbg !108
  %354 = bitcast <4 x i32> %.v28 to <4 x float>, !dbg !108
  %355 = insertelement <4 x i32> poison, i32 %197, i64 0, !dbg !71
  %356 = insertelement <4 x i32> %355, i32 %198, i64 1, !dbg !71
  %357 = insertelement <4 x i32> %356, i32 %199, i64 2, !dbg !71
  %358 = insertelement <4 x i32> %357, i32 %200, i64 3, !dbg !71
  %359 = bitcast <4 x i32> %358 to <4 x float>, !dbg !71
  %360 = fcmp olt <4 x float> %354, %359, !dbg !109
  %361 = shufflevector <4 x float> %359, <4 x float> %273, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !120
  %362 = fcmp uno <8 x float> %361, zeroinitializer, !dbg !120
  %363 = extractelement <8 x i1> %362, i64 7, !dbg !111
  %364 = or i1 %363, %275, !dbg !111
  %365 = extractelement <8 x i1> %362, i64 6, !dbg !111
  %366 = or i1 %365, %276, !dbg !111
  %367 = extractelement <8 x i1> %362, i64 5, !dbg !111
  %368 = or i1 %367, %277, !dbg !111
  %369 = extractelement <8 x i1> %362, i64 4, !dbg !111
  %370 = or i1 %369, %278, !dbg !111
  %371 = extractelement <4 x i1> %360, i64 0, !dbg !111
  %372 = extractelement <8 x i1> %362, i64 3, !dbg !111
  %373 = or i1 %372, %371, !dbg !111
  %374 = extractelement <4 x i1> %360, i64 1, !dbg !111
  %375 = extractelement <8 x i1> %362, i64 2, !dbg !111
  %376 = or i1 %375, %374, !dbg !111
  %377 = extractelement <4 x i1> %360, i64 2, !dbg !111
  %378 = extractelement <8 x i1> %362, i64 1, !dbg !111
  %379 = or i1 %378, %377, !dbg !111
  %380 = extractelement <4 x i1> %360, i64 3, !dbg !111
  %381 = extractelement <8 x i1> %362, i64 0, !dbg !111
  %382 = or i1 %381, %380, !dbg !111
  %383 = zext <4 x i1> %297 to <4 x i8>, !dbg !112
  %384 = select <4 x i1> %306, <4 x i8> splat (i8 2), <4 x i8> %383, !dbg !113
  %385 = select <4 x i1> %315, <4 x i8> splat (i8 3), <4 x i8> %384, !dbg !114
  %386 = select <4 x i1> %324, <4 x i8> splat (i8 4), <4 x i8> %385, !dbg !115
  %387 = select <4 x i1> %333, <4 x i8> splat (i8 5), <4 x i8> %386, !dbg !116
  %388 = select <4 x i1> %342, <4 x i8> splat (i8 6), <4 x i8> %387, !dbg !117
  %389 = select <4 x i1> %351, <4 x i8> splat (i8 7), <4 x i8> %388, !dbg !118
  %390 = select <4 x i1> %360, <4 x i8> splat (i8 8), <4 x i8> %389, !dbg !119
  %391 = shl i32 %19, 8, !dbg !121
  %392 = shl i32 %20, 8, !dbg !121
  %393 = shl i32 %25, 16, !dbg !122
  %394 = add i32 %393, %.decomposed, !dbg !123
  %395 = add i32 %394, %391, !dbg !124
  %396 = add i32 %394, %392, !dbg !124
  %397 = sext i32 %395 to i64, !dbg !125
  %398 = getelementptr float, ptr addrspace(1) %1, i64 %397, !dbg !125
  %399 = sext i32 %396 to i64, !dbg !125
  %400 = getelementptr float, ptr addrspace(1) %1, i64 %399, !dbg !125
  %401 = shl i32 %8, 5, !dbg !126
  %402 = and i32 %401, 992, !dbg !126
  %403 = or disjoint i32 %10, %402, !dbg !126
  %404 = shl i32 %8, 2, !dbg !126
  %405 = and i32 %404, 508, !dbg !126
  %406 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %402, !dbg !126
  %407 = getelementptr inbounds float, ptr addrspace(3) %406, i32 %403, !dbg !126
  %408 = extractelement <4 x i32> %.v21, i64 0, !dbg !126
  %409 = select i1 %364, i32 %192, i32 %408, !dbg !127
  %410 = insertelement <1 x i32> poison, i32 %409, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %410, i1 true) #2, !dbg !126
  %411 = or disjoint i32 %403, 4, !dbg !126
  %412 = or disjoint i32 %402, 4, !dbg !126
  %413 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %412, !dbg !126
  %414 = getelementptr inbounds float, ptr addrspace(3) %413, i32 %411, !dbg !126
  %415 = extractelement <4 x i32> %.v21, i64 1, !dbg !126
  %416 = select i1 %366, i32 %193, i32 %415, !dbg !127
  %417 = insertelement <1 x i32> poison, i32 %416, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %417, i1 true) #2, !dbg !126
  %418 = or disjoint i32 %403, 8, !dbg !126
  %419 = or disjoint i32 %402, 8, !dbg !126
  %420 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %419, !dbg !126
  %421 = getelementptr inbounds float, ptr addrspace(3) %420, i32 %418, !dbg !126
  %422 = extractelement <4 x i32> %.v21, i64 2, !dbg !126
  %423 = select i1 %368, i32 %194, i32 %422, !dbg !127
  %424 = insertelement <1 x i32> poison, i32 %423, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %421, <1 x i32> %424, i1 true) #2, !dbg !126
  %425 = or disjoint i32 %403, 12, !dbg !126
  %426 = or disjoint i32 %402, 12, !dbg !126
  %427 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %426, !dbg !126
  %428 = getelementptr inbounds float, ptr addrspace(3) %427, i32 %425, !dbg !126
  %429 = extractelement <4 x i32> %.v21, i64 3, !dbg !126
  %430 = select i1 %370, i32 %195, i32 %429, !dbg !127
  %431 = insertelement <1 x i32> poison, i32 %430, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %431, i1 true) #2, !dbg !126
  %432 = or disjoint i32 %403, 16, !dbg !126
  %433 = or disjoint i32 %402, 16, !dbg !126
  %434 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %433, !dbg !126
  %435 = getelementptr inbounds float, ptr addrspace(3) %434, i32 %432, !dbg !126
  %436 = extractelement <4 x i32> %.v28, i64 0, !dbg !126
  %437 = select i1 %373, i32 %197, i32 %436, !dbg !127
  %438 = insertelement <1 x i32> poison, i32 %437, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %438, i1 true) #2, !dbg !126
  %439 = or disjoint i32 %403, 20, !dbg !126
  %440 = or disjoint i32 %402, 20, !dbg !126
  %441 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %440, !dbg !126
  %442 = getelementptr inbounds float, ptr addrspace(3) %441, i32 %439, !dbg !126
  %443 = extractelement <4 x i32> %.v28, i64 1, !dbg !126
  %444 = select i1 %376, i32 %198, i32 %443, !dbg !127
  %445 = insertelement <1 x i32> poison, i32 %444, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %445, i1 true) #2, !dbg !126
  %446 = or disjoint i32 %403, 24, !dbg !126
  %447 = or disjoint i32 %402, 24, !dbg !126
  %448 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %447, !dbg !126
  %449 = getelementptr inbounds float, ptr addrspace(3) %448, i32 %446, !dbg !126
  %450 = extractelement <4 x i32> %.v28, i64 2, !dbg !126
  %451 = select i1 %379, i32 %199, i32 %450, !dbg !127
  %452 = insertelement <1 x i32> poison, i32 %451, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %449, <1 x i32> %452, i1 true) #2, !dbg !126
  %453 = or disjoint i32 %403, 28, !dbg !126
  %454 = or disjoint i32 %402, 28, !dbg !126
  %455 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %454, !dbg !126
  %456 = getelementptr inbounds float, ptr addrspace(3) %455, i32 %453, !dbg !126
  %457 = extractelement <4 x i32> %.v28, i64 3, !dbg !126
  %458 = select i1 %382, i32 %200, i32 %457, !dbg !127
  %459 = insertelement <1 x i32> poison, i32 %458, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %456, <1 x i32> %459, i1 true) #2, !dbg !126
  tail call void @llvm.nvvm.barrier0(), !dbg !126
  %460 = getelementptr float, ptr addrspace(3) @global_smem, i32 %405, !dbg !126
  %461 = getelementptr float, ptr addrspace(3) %460, i32 %405, !dbg !126
  %462 = or disjoint i32 %405, 512, !dbg !126
  %463 = getelementptr float, ptr addrspace(3) @global_smem, i32 %462, !dbg !126
  %464 = getelementptr float, ptr addrspace(3) %463, i32 %462, !dbg !126
  %465 = load <4 x i32>, ptr addrspace(3) %464, align 16, !dbg !126
  %.extract = load i32, ptr addrspace(3) %461, align 16, !dbg !126
  %466 = getelementptr inbounds i8, ptr addrspace(3) %461, i32 4, !dbg !126
  %.extract9 = load i32, ptr addrspace(3) %466, align 4, !dbg !126
  %467 = getelementptr inbounds i8, ptr addrspace(3) %461, i32 8, !dbg !126
  %.extract10 = load i32, ptr addrspace(3) %467, align 8, !dbg !126
  %468 = getelementptr inbounds i8, ptr addrspace(3) %461, i32 12, !dbg !126
  %.extract11 = load i32, ptr addrspace(3) %468, align 4, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %398, i1 %22) #2, !dbg !126
  %.extract12 = extractelement <4 x i32> %465, i64 0, !dbg !126
  %.extract13 = extractelement <4 x i32> %465, i64 1, !dbg !126
  %.extract14 = extractelement <4 x i32> %465, i64 2, !dbg !126
  %.extract15 = extractelement <4 x i32> %465, i64 3, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %400, i1 %23) #2, !dbg !126
  %469 = shl i32 %11, 8, !dbg !128
  %470 = add i32 %17, %469, !dbg !129
  %471 = sext i32 %470 to i64, !dbg !130
  %472 = getelementptr i8, ptr addrspace(1) %2, i64 %471, !dbg !130
  %473 = bitcast <4 x i8> %286 to i32, !dbg !131
  %474 = bitcast <4 x i8> %390 to i32, !dbg !131
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %473, i32 %474, ptr addrspace(1) %472, i1 %21) #2, !dbg !131
  ret void, !dbg !132
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpsnyigawne76v35tq3wghwofeyslbf5kqpftb4qnxvmn2l3sn66.py", directory: "inductor_cache/ps")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_6", linkageName: "triton_poi_fused_max_pool2d_with_indices_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 46, column: 61, scope: !7)
!23 = !DILocation(line: 29, column: 19, scope: !7)
!24 = !DILocation(line: 68, column: 20, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 42, column: 19, scope: !7)
!27 = !DILocation(line: 45, column: 19, scope: !7)
!28 = !DILocation(line: 46, column: 50, scope: !7)
!29 = !DILocation(line: 46, column: 41, scope: !7)
!30 = !DILocation(line: 46, column: 46, scope: !7)
!31 = !DILocation(line: 46, column: 55, scope: !7)
!32 = !DILocation(line: 46, column: 31, scope: !7)
!33 = !DILocation(line: 46, column: 74, scope: !7)
!34 = !DILocation(line: 46, column: 66, scope: !7)
!35 = !DILocation(line: 48, column: 21, scope: !7)
!36 = !DILocation(line: 51, column: 19, scope: !7)
!37 = !DILocation(line: 52, column: 46, scope: !7)
!38 = !DILocation(line: 52, column: 55, scope: !7)
!39 = !DILocation(line: 52, column: 31, scope: !7)
!40 = !DILocation(line: 52, column: 74, scope: !7)
!41 = !DILocation(line: 52, column: 66, scope: !7)
!42 = !DILocation(line: 59, column: 46, scope: !7)
!43 = !DILocation(line: 59, column: 55, scope: !7)
!44 = !DILocation(line: 59, column: 31, scope: !7)
!45 = !DILocation(line: 59, column: 66, scope: !7)
!46 = !DILocation(line: 65, column: 20, scope: !7)
!47 = !DILocation(line: 66, column: 45, scope: !7)
!48 = !DILocation(line: 66, column: 54, scope: !7)
!49 = !DILocation(line: 66, column: 31, scope: !7)
!50 = !DILocation(line: 66, column: 73, scope: !7)
!51 = !DILocation(line: 66, column: 65, scope: !7)
!52 = !DILocation(line: 69, column: 45, scope: !7)
!53 = !DILocation(line: 69, column: 31, scope: !7)
!54 = !DILocation(line: 69, column: 64, scope: !7)
!55 = !DILocation(line: 69, column: 56, scope: !7)
!56 = !DILocation(line: 72, column: 42, scope: !7)
!57 = !DILocation(line: 72, column: 51, scope: !7)
!58 = !DILocation(line: 72, column: 31, scope: !7)
!59 = !DILocation(line: 72, column: 62, scope: !7)
!60 = !DILocation(line: 79, column: 43, scope: !7)
!61 = !DILocation(line: 79, column: 52, scope: !7)
!62 = !DILocation(line: 79, column: 31, scope: !7)
!63 = !DILocation(line: 79, column: 63, scope: !7)
!64 = !DILocation(line: 82, column: 43, scope: !7)
!65 = !DILocation(line: 82, column: 52, scope: !7)
!66 = !DILocation(line: 82, column: 31, scope: !7)
!67 = !DILocation(line: 82, column: 63, scope: !7)
!68 = !DILocation(line: 85, column: 43, scope: !7)
!69 = !DILocation(line: 85, column: 52, scope: !7)
!70 = !DILocation(line: 85, column: 31, scope: !7)
!71 = !DILocation(line: 85, column: 63, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !75)
!73 = distinct !DILexicalBlockFile(scope: !7, file: !74, discriminator: 0)
!74 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!75 = !DILocation(line: 53, column: 42, scope: !7)
!76 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !75)
!77 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !75)
!78 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !75)
!79 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !80)
!80 = !DILocation(line: 60, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !80)
!84 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !85)
!85 = !DILocation(line: 67, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !85)
!89 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !90)
!90 = !DILocation(line: 70, column: 42, scope: !7)
!91 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !90)
!92 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !90)
!93 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !90)
!94 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !95)
!95 = !DILocation(line: 73, column: 42, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !95)
!97 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !95)
!98 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !95)
!99 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !100)
!100 = !DILocation(line: 80, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !105)
!105 = !DILocation(line: 83, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !105)
!109 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !110)
!110 = !DILocation(line: 86, column: 42, scope: !7)
!111 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !110)
!112 = !DILocation(line: 90, column: 35, scope: !7)
!113 = !DILocation(line: 93, column: 35, scope: !7)
!114 = !DILocation(line: 96, column: 35, scope: !7)
!115 = !DILocation(line: 99, column: 35, scope: !7)
!116 = !DILocation(line: 102, column: 35, scope: !7)
!117 = !DILocation(line: 105, column: 35, scope: !7)
!118 = !DILocation(line: 108, column: 35, scope: !7)
!119 = !DILocation(line: 111, column: 35, scope: !7)
!120 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !110)
!121 = !DILocation(line: 112, column: 34, scope: !7)
!122 = !DILocation(line: 112, column: 45, scope: !7)
!123 = !DILocation(line: 112, column: 30, scope: !7)
!124 = !DILocation(line: 112, column: 39, scope: !7)
!125 = !DILocation(line: 112, column: 25, scope: !7)
!126 = !DILocation(line: 112, column: 57, scope: !7)
!127 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !110)
!128 = !DILocation(line: 113, column: 34, scope: !7)
!129 = !DILocation(line: 113, column: 30, scope: !7)
!130 = !DILocation(line: 113, column: 25, scope: !7)
!131 = !DILocation(line: 113, column: 46, scope: !7)
!132 = !DILocation(line: 113, column: 4, scope: !7)
