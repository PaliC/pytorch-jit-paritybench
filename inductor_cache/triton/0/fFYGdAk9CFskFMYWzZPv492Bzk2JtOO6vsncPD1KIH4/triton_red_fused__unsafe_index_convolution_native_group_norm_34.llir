; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__unsafe_index_convolution_native_group_norm_34(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = icmp slt i32 %10, 1024, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 511, !dbg !12
  %14 = or disjoint i32 %13, 512, !dbg !12
  %15 = or disjoint i32 %13, 1024, !dbg !12
  %16 = or disjoint i32 %13, 1536, !dbg !12
  %17 = shl i32 %12, 2, !dbg !12
  %18 = and i32 %17, 2044, !dbg !12
  %19 = or disjoint i32 %18, 2, !dbg !12
  %.frozen = freeze i32 %10, !dbg !13
  %20 = sdiv i32 %.frozen, 4, !dbg !13
  %21 = mul i32 %20, 4, !dbg !14
  %.decomposed = sub i32 %.frozen, %21, !dbg !14
  %22 = srem i32 %20, 64, !dbg !15
  %23 = sext i32 %22 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !16
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %11) #3, !dbg !17
  %26 = bitcast i32 %25 to float, !dbg !17
  %27 = shl nsw i32 %.decomposed, 3, !dbg !18
  %28 = shl i32 %20, 12, !dbg !19
  %29 = sext i32 %28 to i64, !dbg !20
  %30 = shl i32 %10, 13, !dbg !21
  %31 = lshr i32 %13, 5
  %32 = lshr i32 %14, 5
  %33 = lshr i32 %16, 5
  %34 = and i32 %33, 31
  %35 = and i32 %17, 28
  %36 = and i32 %19, 30
  %37 = zext nneg i32 %31 to i64
  %38 = getelementptr i64, ptr addrspace(1) %0, i64 %37
  %39 = zext nneg i32 %32 to i64
  %40 = getelementptr i64, ptr addrspace(1) %0, i64 %39
  %41 = zext nneg i32 %34 to i64
  %42 = getelementptr i64, ptr addrspace(1) %0, i64 %41
  %43 = zext nneg i32 %35 to i64
  %44 = getelementptr i64, ptr addrspace(1) %0, i64 %43
  %45 = zext nneg i32 %36 to i64
  %46 = getelementptr i64, ptr addrspace(1) %0, i64 %45
  %47 = zext nneg i32 %13 to i64
  %48 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %47
  %49 = zext nneg i32 %14 to i64
  %50 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %49
  %51 = zext nneg i32 %15 to i64
  %52 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %51
  %53 = zext nneg i32 %16 to i64
  %54 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %53
  %55 = zext nneg i32 %18 to i64
  %56 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %55
  %57 = getelementptr inbounds i8, ptr addrspace(3) %56, i64 16
  %58 = shl nuw nsw i32 %18, 1
  %59 = zext nneg i32 %58 to i64
  %60 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %59
  %61 = or disjoint i32 %58, 2
  %62 = zext nneg i32 %61 to i64
  %63 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %62
  %64 = shl nuw nsw i32 %19, 1
  %65 = zext nneg i32 %64 to i64
  %66 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %65
  %67 = or disjoint i32 %58, 6
  %68 = zext nneg i32 %67 to i64
  %69 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %68
  %70 = shl nuw nsw i32 %13, 1
  %71 = zext nneg i32 %70 to i64
  %72 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %71
  %73 = shl nuw nsw i32 %14, 1
  %74 = zext nneg i32 %73 to i64
  %75 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %74
  %76 = shl nuw nsw i32 %15, 1
  %77 = zext nneg i32 %76 to i64
  %78 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %77
  %79 = shl nuw nsw i32 %16, 1
  %80 = zext nneg i32 %79 to i64
  %81 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %80
  %82 = or disjoint i32 %30, %18
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %47
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %49
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %51
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %53
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %55
  %88 = sext i32 %82 to i64, !dbg !22
  %89 = sext i32 %27 to i64, !dbg !22
  %90 = getelementptr inbounds i8, ptr addrspace(3) %56, i64 8
  %91 = getelementptr inbounds i8, ptr addrspace(3) %56, i64 24
  %invariant.gep = getelementptr float, ptr addrspace(1) %3, i64 %88, !dbg !22
  %92 = getelementptr inbounds i8, ptr addrspace(3) %87, i64 4
  %93 = getelementptr inbounds i8, ptr addrspace(3) %87, i64 8
  %94 = getelementptr inbounds i8, ptr addrspace(3) %87, i64 12
  br label %95, !dbg !22

95:                                               ; preds = %9, %._crit_edge
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %._crit_edge ]
  %96 = phi float [ 0.000000e+00, %9 ], [ %277, %._crit_edge ]
  %97 = phi float [ 0.000000e+00, %9 ], [ %278, %._crit_edge ]
  %98 = phi float [ 0.000000e+00, %9 ], [ %279, %._crit_edge ]
  %99 = phi float [ 0.000000e+00, %9 ], [ %280, %._crit_edge ]
  %100 = phi float [ 0.000000e+00, %9 ], [ %273, %._crit_edge ]
  %101 = phi float [ 0.000000e+00, %9 ], [ %274, %._crit_edge ]
  %102 = phi float [ 0.000000e+00, %9 ], [ %275, %._crit_edge ]
  %103 = phi float [ 0.000000e+00, %9 ], [ %276, %._crit_edge ]
  %104 = phi float [ 0.000000e+00, %9 ], [ %269, %._crit_edge ]
  %105 = phi float [ 0.000000e+00, %9 ], [ %270, %._crit_edge ]
  %106 = phi float [ 0.000000e+00, %9 ], [ %271, %._crit_edge ]
  %107 = phi float [ 0.000000e+00, %9 ], [ %272, %._crit_edge ]
  %108 = lshr exact i64 %indvars.iv, 10, !dbg !23
  %109 = add nuw nsw i64 %108, %89, !dbg !24
  %110 = or disjoint i64 %109, 1, !dbg !24
  %111 = getelementptr i64, ptr addrspace(1) %0, i64 %109, !dbg !25
  %112 = getelementptr i64, ptr addrspace(1) %0, i64 %110, !dbg !25
  %113 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %111, i1 %11, i1 %11) #3, !dbg !26
  %114 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %111, i1 %11, i1 %11) #3, !dbg !26
  %115 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %112, i1 %11, i1 %11) #3, !dbg !26
  %116 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %112, i1 %11, i1 %11) #3, !dbg !26
  %117 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %38, i1 true, i1 true) #3, !dbg !27
  %118 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %40, i1 true, i1 true) #3, !dbg !27
  %119 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %38, i1 true, i1 true) #3, !dbg !27
  %120 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %42, i1 true, i1 true) #3, !dbg !27
  %121 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %44, i1 true, i1 true, i1 true) #3, !dbg !28
  %122 = extractvalue { i64, i64 } %121, 0, !dbg !28
  %123 = extractvalue { i64, i64 } %121, 1, !dbg !28
  %124 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %46, i1 true, i1 true, i1 true) #3, !dbg !28
  %125 = extractvalue { i64, i64 } %124, 0, !dbg !28
  %126 = extractvalue { i64, i64 } %124, 1, !dbg !28
  %127 = lshr i64 %113, 59, !dbg !29
  %128 = and i64 %127, 16, !dbg !29
  %129 = add i64 %128, %113, !dbg !29
  %130 = lshr i64 %114, 59, !dbg !29
  %131 = and i64 %130, 16, !dbg !29
  %132 = add i64 %131, %114, !dbg !29
  %133 = lshr i64 %115, 59, !dbg !29
  %134 = and i64 %133, 16, !dbg !29
  %135 = add i64 %134, %115, !dbg !29
  %136 = lshr i64 %116, 59, !dbg !29
  %137 = and i64 %136, 16, !dbg !29
  %138 = add i64 %137, %116, !dbg !29
  %139 = lshr i64 %117, 59, !dbg !30
  %140 = and i64 %139, 16, !dbg !30
  %141 = add i64 %140, %117, !dbg !30
  %142 = lshr i64 %118, 59, !dbg !30
  %143 = and i64 %142, 16, !dbg !30
  %144 = add i64 %143, %118, !dbg !30
  %145 = lshr i64 %119, 59, !dbg !30
  %146 = and i64 %145, 16, !dbg !30
  %147 = add i64 %146, %119, !dbg !30
  %148 = lshr i64 %120, 59, !dbg !30
  %149 = and i64 %148, 16, !dbg !30
  %150 = add i64 %149, %120, !dbg !30
  %151 = lshr i64 %122, 59, !dbg !31
  %152 = and i64 %151, 16, !dbg !31
  %153 = lshr i64 %123, 59, !dbg !31
  %154 = and i64 %153, 16, !dbg !31
  %155 = lshr i64 %125, 59, !dbg !31
  %156 = and i64 %155, 16, !dbg !31
  %157 = lshr i64 %126, 59, !dbg !31
  %158 = and i64 %157, 16, !dbg !31
  %159 = shl i64 %141, 4, !dbg !32
  %160 = shl i64 %144, 4, !dbg !32
  %161 = shl i64 %147, 4, !dbg !32
  %162 = shl i64 %150, 4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %163 = insertelement <1 x i64> poison, i64 %159, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %48, <1 x i64> %163, i1 true) #3, !dbg !32
  %164 = insertelement <1 x i64> poison, i64 %160, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %50, <1 x i64> %164, i1 true) #3, !dbg !32
  %165 = insertelement <1 x i64> poison, i64 %161, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %52, <1 x i64> %165, i1 true) #3, !dbg !32
  %166 = insertelement <1 x i64> poison, i64 %162, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %54, <1 x i64> %166, i1 true) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %167 = load i64, ptr addrspace(3) %56, align 16, !dbg !32
  %168 = load i64, ptr addrspace(3) %90, align 8, !dbg !32
  %169 = load i64, ptr addrspace(3) %57, align 16, !dbg !32
  %170 = load i64, ptr addrspace(3) %91, align 8, !dbg !32
  %171 = shl i64 %129, 8, !dbg !33
  %172 = shl i64 %132, 8, !dbg !33
  %173 = shl i64 %135, 8, !dbg !33
  %174 = shl i64 %138, 8, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %175 = insertelement <1 x i64> poison, i64 %171, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %48, <1 x i64> %175, i1 true) #3, !dbg !33
  %176 = insertelement <1 x i64> poison, i64 %172, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %50, <1 x i64> %176, i1 true) #3, !dbg !33
  %177 = insertelement <1 x i64> poison, i64 %173, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %52, <1 x i64> %177, i1 true) #3, !dbg !33
  %178 = insertelement <1 x i64> poison, i64 %174, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %54, <1 x i64> %178, i1 true) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %179 = load i64, ptr addrspace(3) %56, align 16, !dbg !33
  %180 = load i64, ptr addrspace(3) %90, align 8, !dbg !33
  %181 = load i64, ptr addrspace(3) %57, align 16, !dbg !33
  %182 = load i64, ptr addrspace(3) %91, align 8, !dbg !33
  %183 = getelementptr float, ptr addrspace(1) %1, i64 %122, !dbg !34
  %184 = getelementptr float, ptr addrspace(1) %183, i64 %152, !dbg !34
  %185 = getelementptr float, ptr addrspace(1) %184, i64 %167, !dbg !34
  %186 = getelementptr float, ptr addrspace(1) %185, i64 %179, !dbg !34
  %187 = getelementptr float, ptr addrspace(1) %186, i64 %29, !dbg !34
  %188 = getelementptr float, ptr addrspace(1) %1, i64 %123, !dbg !34
  %189 = getelementptr float, ptr addrspace(1) %188, i64 %154, !dbg !34
  %190 = getelementptr float, ptr addrspace(1) %189, i64 %168, !dbg !34
  %191 = getelementptr float, ptr addrspace(1) %190, i64 %180, !dbg !34
  %192 = getelementptr float, ptr addrspace(1) %191, i64 %29, !dbg !34
  %193 = getelementptr float, ptr addrspace(1) %1, i64 %125, !dbg !34
  %194 = getelementptr float, ptr addrspace(1) %193, i64 %156, !dbg !34
  %195 = getelementptr float, ptr addrspace(1) %194, i64 %169, !dbg !34
  %196 = getelementptr float, ptr addrspace(1) %195, i64 %181, !dbg !34
  %197 = getelementptr float, ptr addrspace(1) %196, i64 %29, !dbg !34
  %198 = getelementptr float, ptr addrspace(1) %1, i64 %126, !dbg !34
  %199 = getelementptr float, ptr addrspace(1) %198, i64 %158, !dbg !34
  %200 = getelementptr float, ptr addrspace(1) %199, i64 %170, !dbg !34
  %201 = getelementptr float, ptr addrspace(1) %200, i64 %182, !dbg !34
  %202 = getelementptr float, ptr addrspace(1) %201, i64 %29, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %203 = ptrtoint ptr addrspace(1) %187 to i64, !dbg !35
  %204 = ptrtoint ptr addrspace(1) %192 to i64, !dbg !35
  %205 = ptrtoint ptr addrspace(1) %197 to i64, !dbg !35
  %206 = ptrtoint ptr addrspace(1) %202 to i64, !dbg !35
  %207 = insertelement <1 x i64> poison, i64 %203, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %60, <1 x i64> %207, i1 true) #3, !dbg !35
  %208 = insertelement <1 x i64> poison, i64 %204, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %63, <1 x i64> %208, i1 true) #3, !dbg !35
  %209 = insertelement <1 x i64> poison, i64 %205, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %66, <1 x i64> %209, i1 true) #3, !dbg !35
  %210 = insertelement <1 x i64> poison, i64 %206, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %69, <1 x i64> %210, i1 true) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %211 = load i64, ptr addrspace(3) %72, align 16, !dbg !35
  %212 = load i64, ptr addrspace(3) %75, align 16, !dbg !35
  %213 = load i64, ptr addrspace(3) %78, align 16, !dbg !35
  %214 = load i64, ptr addrspace(3) %81, align 16, !dbg !35
  %215 = inttoptr i64 %211 to ptr addrspace(1), !dbg !35
  %216 = inttoptr i64 %212 to ptr addrspace(1), !dbg !35
  %217 = inttoptr i64 %213 to ptr addrspace(1), !dbg !35
  %218 = inttoptr i64 %214 to ptr addrspace(1), !dbg !35
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %215, i1 %11) #3, !dbg !35
  %220 = bitcast i32 %219 to float, !dbg !35
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 %11) #3, !dbg !35
  %222 = bitcast i32 %221 to float, !dbg !35
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 %11) #3, !dbg !35
  %224 = bitcast i32 %223 to float, !dbg !35
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 %11) #3, !dbg !35
  %226 = bitcast i32 %225 to float, !dbg !35
  %227 = fadd float %26, %220, !dbg !36
  %228 = fadd float %26, %222, !dbg !36
  %229 = fadd float %26, %224, !dbg !36
  %230 = fadd float %26, %226, !dbg !36
  %231 = icmp eq i64 %indvars.iv, 0, !dbg !37
  br i1 %231, label %._crit_edge, label %232, !dbg !38

232:                                              ; preds = %95
  %233 = fsub float %227, %104, !dbg !42
  %234 = fsub float %228, %105, !dbg !42
  %235 = fsub float %229, %106, !dbg !42
  %236 = fsub float %230, %107, !dbg !42
  %237 = fadd float %96, 1.000000e+00, !dbg !43
  %238 = fadd float %97, 1.000000e+00, !dbg !43
  %239 = fadd float %98, 1.000000e+00, !dbg !43
  %240 = fadd float %99, 1.000000e+00, !dbg !43
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %233, float %237) #3, !dbg !44
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %234, float %238) #3, !dbg !44
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %235, float %239) #3, !dbg !44
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %236, float %240) #3, !dbg !44
  %245 = fadd float %104, %241, !dbg !45
  %246 = fadd float %105, %242, !dbg !45
  %247 = fadd float %106, %243, !dbg !45
  %248 = fadd float %107, %244, !dbg !45
  %249 = fsub float %227, %245, !dbg !46
  %250 = fsub float %228, %246, !dbg !46
  %251 = fsub float %229, %247, !dbg !46
  %252 = fsub float %230, %248, !dbg !46
  %253 = fmul float %233, %249, !dbg !47
  %254 = fmul float %234, %250, !dbg !47
  %255 = fmul float %235, %251, !dbg !47
  %256 = fmul float %236, %252, !dbg !47
  %257 = fadd float %100, %253, !dbg !48
  %258 = fadd float %101, %254, !dbg !48
  %259 = fadd float %102, %255, !dbg !48
  %260 = fadd float %103, %256, !dbg !48
  br label %._crit_edge, !dbg !38

._crit_edge:                                      ; preds = %95, %232
  %261 = phi float [ %257, %232 ], [ 0.000000e+00, %95 ], !dbg !41
  %262 = phi float [ %258, %232 ], [ 0.000000e+00, %95 ], !dbg !41
  %263 = phi float [ %259, %232 ], [ 0.000000e+00, %95 ], !dbg !41
  %264 = phi float [ %260, %232 ], [ 0.000000e+00, %95 ], !dbg !41
  %.pn7 = phi float [ %245, %232 ], [ %227, %95 ]
  %.pn5 = phi float [ %246, %232 ], [ %228, %95 ]
  %.pn3 = phi float [ %247, %232 ], [ %229, %95 ]
  %.pn1 = phi float [ %248, %232 ], [ %230, %95 ]
  %265 = phi float [ %237, %232 ], [ 1.000000e+00, %95 ], !dbg !41
  %266 = phi float [ %238, %232 ], [ 1.000000e+00, %95 ], !dbg !41
  %267 = phi float [ %239, %232 ], [ 1.000000e+00, %95 ], !dbg !41
  %268 = phi float [ %240, %232 ], [ 1.000000e+00, %95 ], !dbg !41
  %269 = select i1 %11, float %.pn7, float %104, !dbg !49
  %270 = select i1 %11, float %.pn5, float %105, !dbg !49
  %271 = select i1 %11, float %.pn3, float %106, !dbg !49
  %272 = select i1 %11, float %.pn1, float %107, !dbg !49
  %273 = select i1 %11, float %261, float %100, !dbg !50
  %274 = select i1 %11, float %262, float %101, !dbg !50
  %275 = select i1 %11, float %263, float %102, !dbg !50
  %276 = select i1 %11, float %264, float %103, !dbg !50
  %277 = select i1 %11, float %265, float %96, !dbg !51
  %278 = select i1 %11, float %266, float %97, !dbg !51
  %279 = select i1 %11, float %267, float %98, !dbg !51
  %280 = select i1 %11, float %268, float %99, !dbg !51
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %281 = bitcast float %227 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %281, i1 true) #3, !dbg !53
  %282 = bitcast float %228 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %282, i1 true) #3, !dbg !53
  %283 = bitcast float %229 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %283, i1 true) #3, !dbg !53
  %284 = bitcast float %230 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %284, i1 true) #3, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %.extract = load i32, ptr addrspace(3) %87, align 16, !dbg !53
  %.extract11 = load i32, ptr addrspace(3) %92, align 4, !dbg !53
  %.extract12 = load i32, ptr addrspace(3) %93, align 8, !dbg !53
  %.extract13 = load i32, ptr addrspace(3) %94, align 4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %gep, i1 %11) #3, !dbg !53
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !22
  %285 = icmp samesign ult i64 %indvars.iv, 6144, !dbg !22
  br i1 %285, label %95, label %286, !dbg !22

286:                                              ; preds = %._crit_edge
  %287 = lshr i32 %12, 5, !dbg !12
  %288 = and i32 %12, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %289 = fsub float %270, %269, !dbg !56
  %290 = fadd float %277, %278, !dbg !58
  %291 = fcmp oeq float %290, 0.000000e+00, !dbg !59
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %278, float %290) #3, !dbg !60
  %293 = select i1 %291, float 0.000000e+00, float %292, !dbg !61
  %294 = fmul float %289, %293, !dbg !62
  %295 = fadd float %269, %294, !dbg !63
  %296 = fadd float %273, %274, !dbg !64
  %297 = fmul float %289, %289, !dbg !65
  %298 = fmul float %297, %277, !dbg !66
  %299 = fmul float %298, %293, !dbg !67
  %300 = fadd float %296, %299, !dbg !68
  %301 = fsub float %271, %295, !dbg !56
  %302 = fadd float %279, %290, !dbg !58
  %303 = fcmp oeq float %302, 0.000000e+00, !dbg !59
  %304 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %279, float %302) #3, !dbg !60
  %305 = select i1 %303, float 0.000000e+00, float %304, !dbg !61
  %306 = fmul float %305, %301, !dbg !62
  %307 = fadd float %295, %306, !dbg !63
  %308 = fadd float %275, %300, !dbg !64
  %309 = fmul float %301, %301, !dbg !65
  %310 = fmul float %290, %309, !dbg !66
  %311 = fmul float %305, %310, !dbg !67
  %312 = fadd float %308, %311, !dbg !68
  %313 = fsub float %272, %307, !dbg !56
  %314 = fadd float %280, %302, !dbg !58
  %315 = fcmp oeq float %314, 0.000000e+00, !dbg !59
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %280, float %314) #3, !dbg !60
  %317 = select i1 %315, float 0.000000e+00, float %316, !dbg !61
  %318 = fmul float %317, %313, !dbg !62
  %319 = fadd float %307, %318, !dbg !63
  %320 = fadd float %276, %312, !dbg !64
  %321 = fmul float %313, %313, !dbg !65
  %322 = fmul float %302, %321, !dbg !66
  %323 = fmul float %317, %322, !dbg !67
  %324 = fadd float %320, %323, !dbg !68
  %325 = bitcast float %319 to i32, !dbg !54
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 16, i32 31), !dbg !54
  %327 = bitcast i32 %326 to float, !dbg !54
  %328 = bitcast float %324 to i32, !dbg !54
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 16, i32 31), !dbg !54
  %330 = bitcast i32 %329 to float, !dbg !54
  %331 = bitcast float %314 to i32, !dbg !54
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 16, i32 31), !dbg !54
  %333 = bitcast i32 %332 to float, !dbg !54
  %334 = fsub float %327, %319, !dbg !56
  %335 = fadd float %314, %333, !dbg !58
  %336 = fcmp oeq float %335, 0.000000e+00, !dbg !59
  %337 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %333, float %335) #3, !dbg !60
  %338 = select i1 %336, float 0.000000e+00, float %337, !dbg !61
  %339 = fmul float %338, %334, !dbg !62
  %340 = fadd float %319, %339, !dbg !63
  %341 = fadd float %324, %330, !dbg !64
  %342 = fmul float %334, %334, !dbg !65
  %343 = fmul float %314, %342, !dbg !66
  %344 = fmul float %338, %343, !dbg !67
  %345 = fadd float %341, %344, !dbg !68
  %346 = bitcast float %340 to i32, !dbg !54
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 8, i32 31), !dbg !54
  %348 = bitcast i32 %347 to float, !dbg !54
  %349 = bitcast float %345 to i32, !dbg !54
  %350 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 8, i32 31), !dbg !54
  %351 = bitcast i32 %350 to float, !dbg !54
  %352 = bitcast float %335 to i32, !dbg !54
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 8, i32 31), !dbg !54
  %354 = bitcast i32 %353 to float, !dbg !54
  %355 = fsub float %348, %340, !dbg !56
  %356 = fadd float %335, %354, !dbg !58
  %357 = fcmp oeq float %356, 0.000000e+00, !dbg !59
  %358 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %354, float %356) #3, !dbg !60
  %359 = select i1 %357, float 0.000000e+00, float %358, !dbg !61
  %360 = fmul float %355, %359, !dbg !62
  %361 = fadd float %340, %360, !dbg !63
  %362 = fadd float %345, %351, !dbg !64
  %363 = fmul float %355, %355, !dbg !65
  %364 = fmul float %335, %363, !dbg !66
  %365 = fmul float %359, %364, !dbg !67
  %366 = fadd float %362, %365, !dbg !68
  %367 = bitcast float %361 to i32, !dbg !54
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 4, i32 31), !dbg !54
  %369 = bitcast i32 %368 to float, !dbg !54
  %370 = bitcast float %366 to i32, !dbg !54
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 4, i32 31), !dbg !54
  %372 = bitcast i32 %371 to float, !dbg !54
  %373 = bitcast float %356 to i32, !dbg !54
  %374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %373, i32 4, i32 31), !dbg !54
  %375 = bitcast i32 %374 to float, !dbg !54
  %376 = fsub float %369, %361, !dbg !56
  %377 = fadd float %356, %375, !dbg !58
  %378 = fcmp oeq float %377, 0.000000e+00, !dbg !59
  %379 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %375, float %377) #3, !dbg !60
  %380 = select i1 %378, float 0.000000e+00, float %379, !dbg !61
  %381 = fmul float %376, %380, !dbg !62
  %382 = fadd float %361, %381, !dbg !63
  %383 = fadd float %366, %372, !dbg !64
  %384 = fmul float %376, %376, !dbg !65
  %385 = fmul float %356, %384, !dbg !66
  %386 = fmul float %380, %385, !dbg !67
  %387 = fadd float %383, %386, !dbg !68
  %388 = bitcast float %382 to i32, !dbg !54
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 2, i32 31), !dbg !54
  %390 = bitcast i32 %389 to float, !dbg !54
  %391 = bitcast float %387 to i32, !dbg !54
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %391, i32 2, i32 31), !dbg !54
  %393 = bitcast i32 %392 to float, !dbg !54
  %394 = bitcast float %377 to i32, !dbg !54
  %395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %394, i32 2, i32 31), !dbg !54
  %396 = bitcast i32 %395 to float, !dbg !54
  %397 = fsub float %390, %382, !dbg !56
  %398 = fadd float %377, %396, !dbg !58
  %399 = fcmp oeq float %398, 0.000000e+00, !dbg !59
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %396, float %398) #3, !dbg !60
  %401 = select i1 %399, float 0.000000e+00, float %400, !dbg !61
  %402 = fmul float %397, %401, !dbg !62
  %403 = fadd float %382, %402, !dbg !63
  %404 = fadd float %387, %393, !dbg !64
  %405 = fmul float %397, %397, !dbg !65
  %406 = fmul float %377, %405, !dbg !66
  %407 = fmul float %401, %406, !dbg !67
  %408 = fadd float %404, %407, !dbg !68
  %409 = bitcast float %403 to i32, !dbg !54
  %410 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %409, i32 1, i32 31), !dbg !54
  %411 = bitcast i32 %410 to float, !dbg !54
  %412 = bitcast float %408 to i32, !dbg !54
  %413 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %412, i32 1, i32 31), !dbg !54
  %414 = bitcast i32 %413 to float, !dbg !54
  %415 = bitcast float %398 to i32, !dbg !54
  %416 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %415, i32 1, i32 31), !dbg !54
  %417 = bitcast i32 %416 to float, !dbg !54
  %418 = fsub float %411, %403, !dbg !56
  %419 = fadd float %398, %417, !dbg !58
  %420 = fcmp oeq float %419, 0.000000e+00, !dbg !59
  %421 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %417, float %419) #3, !dbg !60
  %422 = select i1 %420, float 0.000000e+00, float %421, !dbg !61
  %423 = fmul float %418, %422, !dbg !62
  %424 = fadd float %403, %423, !dbg !63
  %425 = fadd float %408, %414, !dbg !64
  %426 = fmul float %418, %418, !dbg !65
  %427 = fmul float %398, %426, !dbg !66
  %428 = fmul float %422, %427, !dbg !67
  %429 = fadd float %425, %428, !dbg !68
  %430 = icmp eq i32 %288, 0, !dbg !54
  %431 = and i32 %287, 15, !dbg !54
  %432 = zext nneg i32 %431 to i64, !dbg !54
  %433 = getelementptr float, ptr addrspace(3) @global_smem, i64 %432, !dbg !54
  %434 = bitcast float %424 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %433, <1 x i32> %434, i1 %430) #3, !dbg !54
  %435 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %432, !dbg !54
  %436 = bitcast float %429 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %436, i1 %430) #3, !dbg !54
  %437 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %432, !dbg !54
  %438 = bitcast float %419 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %438, i1 %430) #3, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %439 = icmp slt i32 %12, 16, !dbg !54
  %440 = sext i32 %12 to i64, !dbg !54
  %441 = getelementptr float, ptr addrspace(3) @global_smem, i64 %440, !dbg !54
  %442 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %441, i1 %439) #3, !dbg !54
  %443 = bitcast i32 %442 to float, !dbg !54
  %444 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %440, !dbg !54
  %445 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %444, i1 %439) #3, !dbg !54
  %446 = bitcast i32 %445 to float, !dbg !54
  %447 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %440, !dbg !54
  %448 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %447, i1 %439) #3, !dbg !54
  %449 = bitcast i32 %448 to float, !dbg !54
  %450 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 8, i32 31), !dbg !54
  %451 = bitcast i32 %450 to float, !dbg !54
  %452 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %445, i32 8, i32 31), !dbg !54
  %453 = bitcast i32 %452 to float, !dbg !54
  %454 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %448, i32 8, i32 31), !dbg !54
  %455 = bitcast i32 %454 to float, !dbg !54
  %456 = fsub float %451, %443, !dbg !56
  %457 = fadd float %449, %455, !dbg !58
  %458 = fcmp oeq float %457, 0.000000e+00, !dbg !59
  %459 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %455, float %457) #3, !dbg !60
  %460 = select i1 %458, float 0.000000e+00, float %459, !dbg !61
  %461 = fmul float %456, %460, !dbg !62
  %462 = fadd float %461, %443, !dbg !63
  %463 = fadd float %446, %453, !dbg !64
  %464 = fmul float %456, %456, !dbg !65
  %465 = fmul float %464, %449, !dbg !66
  %466 = fmul float %465, %460, !dbg !67
  %467 = fadd float %463, %466, !dbg !68
  %468 = bitcast float %462 to i32, !dbg !54
  %469 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %468, i32 4, i32 31), !dbg !54
  %470 = bitcast i32 %469 to float, !dbg !54
  %471 = bitcast float %467 to i32, !dbg !54
  %472 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %471, i32 4, i32 31), !dbg !54
  %473 = bitcast i32 %472 to float, !dbg !54
  %474 = bitcast float %457 to i32, !dbg !54
  %475 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %474, i32 4, i32 31), !dbg !54
  %476 = bitcast i32 %475 to float, !dbg !54
  %477 = fsub float %470, %462, !dbg !56
  %478 = fadd float %457, %476, !dbg !58
  %479 = fcmp oeq float %478, 0.000000e+00, !dbg !59
  %480 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %476, float %478) #3, !dbg !60
  %481 = select i1 %479, float 0.000000e+00, float %480, !dbg !61
  %482 = fmul float %477, %481, !dbg !62
  %483 = fadd float %462, %482, !dbg !63
  %484 = fadd float %467, %473, !dbg !64
  %485 = fmul float %477, %477, !dbg !65
  %486 = fmul float %457, %485, !dbg !66
  %487 = fmul float %481, %486, !dbg !67
  %488 = fadd float %484, %487, !dbg !68
  %489 = bitcast float %483 to i32, !dbg !54
  %490 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %489, i32 2, i32 31), !dbg !54
  %491 = bitcast i32 %490 to float, !dbg !54
  %492 = bitcast float %488 to i32, !dbg !54
  %493 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %492, i32 2, i32 31), !dbg !54
  %494 = bitcast i32 %493 to float, !dbg !54
  %495 = bitcast float %478 to i32, !dbg !54
  %496 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %495, i32 2, i32 31), !dbg !54
  %497 = bitcast i32 %496 to float, !dbg !54
  %498 = fsub float %491, %483, !dbg !56
  %499 = fadd float %478, %497, !dbg !58
  %500 = fcmp oeq float %499, 0.000000e+00, !dbg !59
  %501 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %497, float %499) #3, !dbg !60
  %502 = select i1 %500, float 0.000000e+00, float %501, !dbg !61
  %503 = fmul float %498, %502, !dbg !62
  %504 = fadd float %483, %503, !dbg !63
  %505 = fadd float %488, %494, !dbg !64
  %506 = fmul float %498, %498, !dbg !65
  %507 = fmul float %478, %506, !dbg !66
  %508 = fmul float %502, %507, !dbg !67
  %509 = fadd float %505, %508, !dbg !68
  %510 = bitcast float %504 to i32, !dbg !54
  %511 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %510, i32 1, i32 31), !dbg !54
  %512 = bitcast i32 %511 to float, !dbg !54
  %513 = bitcast float %509 to i32, !dbg !54
  %514 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %513, i32 1, i32 31), !dbg !54
  %515 = bitcast i32 %514 to float, !dbg !54
  %516 = bitcast float %499 to i32, !dbg !54
  %517 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %516, i32 1, i32 31), !dbg !54
  %518 = bitcast i32 %517 to float, !dbg !54
  %519 = fsub float %512, %504, !dbg !56
  %520 = fadd float %499, %518, !dbg !58
  %521 = fcmp oeq float %520, 0.000000e+00, !dbg !59
  %522 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %518, float %520) #3, !dbg !60
  %523 = select i1 %521, float 0.000000e+00, float %522, !dbg !61
  %524 = fmul float %519, %523, !dbg !62
  %525 = fadd float %504, %524, !dbg !63
  %526 = fadd float %509, %515, !dbg !64
  %527 = fmul float %519, %519, !dbg !65
  %528 = fmul float %499, %527, !dbg !66
  %529 = fmul float %523, %528, !dbg !67
  %530 = fadd float %526, %529, !dbg !68
  %531 = and i32 %12, 15, !dbg !54
  %532 = icmp eq i32 %531, 0, !dbg !54
  %533 = and i1 %439, %532, !dbg !54
  %534 = bitcast float %525 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %441, <1 x i32> %534, i1 %533) #3, !dbg !54
  %535 = bitcast float %530 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %444, <1 x i32> %535, i1 %533) #3, !dbg !54
  %536 = bitcast float %520 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, <1 x i32> %536, i1 %533) #3, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %537 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !54
  %538 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !54
  %539 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), align 16, !dbg !54
  %540 = sext i32 %10 to i64, !dbg !69
  %541 = getelementptr float, ptr addrspace(1) %4, i64 %540, !dbg !69
  %542 = icmp eq i32 %13, 0, !dbg !70
  %543 = and i1 %542, %11, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %537, ptr addrspace(1) %541, i1 %543) #3, !dbg !70
  %544 = getelementptr float, ptr addrspace(1) %5, i64 %540, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %538, ptr addrspace(1) %544, i1 %543) #3, !dbg !72
  %545 = getelementptr float, ptr addrspace(1) %6, i64 %540, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %539, ptr addrspace(1) %545, i1 %543) #3, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmcwq5454sc4cy26h22jxv63jeve26ii2nsznlktuvwx74oxdjtk.py", directory: "inductor_cache/mc")
!4 = !{ptr @triton_red_fused__unsafe_index_convolution_native_group_norm_34, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__unsafe_index_convolution_native_group_norm_34, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__unsafe_index_convolution_native_group_norm_34", linkageName: "triton_red_fused__unsafe_index_convolution_native_group_norm_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 28, column: 26, scope: !7)
!16 = !DILocation(line: 29, column: 31, scope: !7)
!17 = !DILocation(line: 29, column: 36, scope: !7)
!18 = !DILocation(line: 41, column: 41, scope: !7)
!19 = !DILocation(line: 54, column: 69, scope: !7)
!20 = !DILocation(line: 54, column: 64, scope: !7)
!21 = !DILocation(line: 63, column: 39, scope: !7)
!22 = !DILocation(line: 34, column: 36, scope: !7)
!23 = !DILocation(line: 37, column: 23, scope: !7)
!24 = !DILocation(line: 41, column: 39, scope: !7)
!25 = !DILocation(line: 41, column: 34, scope: !7)
!26 = !DILocation(line: 41, column: 46, scope: !7)
!27 = !DILocation(line: 42, column: 39, scope: !7)
!28 = !DILocation(line: 43, column: 39, scope: !7)
!29 = !DILocation(line: 47, column: 36, scope: !7)
!30 = !DILocation(line: 50, column: 36, scope: !7)
!31 = !DILocation(line: 53, column: 39, scope: !7)
!32 = !DILocation(line: 54, column: 46, scope: !7)
!33 = !DILocation(line: 54, column: 57, scope: !7)
!34 = !DILocation(line: 54, column: 35, scope: !7)
!35 = !DILocation(line: 54, column: 74, scope: !7)
!36 = !DILocation(line: 55, column: 24, scope: !7)
!37 = !DILocation(line: 58, column: 66, scope: !7)
!38 = !DILocation(line: 178, column: 7, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 58, column: 55, scope: !7)
!42 = !DILocation(line: 183, column: 24, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 184, column: 30, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 185, column: 34, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 185, column: 26, scope: !39, inlinedAt: !41)
!46 = !DILocation(line: 186, column: 39, scope: !39, inlinedAt: !41)
!47 = !DILocation(line: 186, column: 31, scope: !39, inlinedAt: !41)
!48 = !DILocation(line: 186, column: 22, scope: !39, inlinedAt: !41)
!49 = !DILocation(line: 60, column: 62, scope: !7)
!50 = !DILocation(line: 61, column: 58, scope: !7)
!51 = !DILocation(line: 62, column: 66, scope: !7)
!52 = !DILocation(line: 63, column: 29, scope: !7)
!53 = !DILocation(line: 63, column: 51, scope: !7)
!54 = !DILocation(line: 204, column: 46, scope: !39, inlinedAt: !55)
!55 = !DILocation(line: 65, column: 44, scope: !7)
!56 = !DILocation(line: 192, column: 21, scope: !57, inlinedAt: !55)
!57 = distinct !DILexicalBlockFile(scope: !39, file: !40, discriminator: 0)
!58 = !DILocation(line: 193, column: 28, scope: !57, inlinedAt: !55)
!59 = !DILocation(line: 194, column: 39, scope: !57, inlinedAt: !55)
!60 = !DILocation(line: 194, column: 60, scope: !57, inlinedAt: !55)
!61 = !DILocation(line: 194, column: 49, scope: !57, inlinedAt: !55)
!62 = !DILocation(line: 196, column: 25, scope: !57, inlinedAt: !55)
!63 = !DILocation(line: 196, column: 17, scope: !57, inlinedAt: !55)
!64 = !DILocation(line: 197, column: 15, scope: !57, inlinedAt: !55)
!65 = !DILocation(line: 197, column: 30, scope: !57, inlinedAt: !55)
!66 = !DILocation(line: 197, column: 38, scope: !57, inlinedAt: !55)
!67 = !DILocation(line: 197, column: 49, scope: !57, inlinedAt: !55)
!68 = !DILocation(line: 197, column: 22, scope: !57, inlinedAt: !55)
!69 = !DILocation(line: 70, column: 25, scope: !7)
!70 = !DILocation(line: 70, column: 37, scope: !7)
!71 = !DILocation(line: 71, column: 25, scope: !7)
!72 = !DILocation(line: 71, column: 37, scope: !7)
!73 = !DILocation(line: 72, column: 25, scope: !7)
!74 = !DILocation(line: 72, column: 37, scope: !7)
!75 = !DILocation(line: 72, column: 4, scope: !7)
