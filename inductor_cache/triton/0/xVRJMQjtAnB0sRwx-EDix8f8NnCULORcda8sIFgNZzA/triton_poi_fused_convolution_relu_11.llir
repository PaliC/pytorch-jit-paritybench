; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 60, !dbg !12
  %12 = lshr i32 %9, 4, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = or disjoint i32 %13, 8, !dbg !12
  %15 = or disjoint i32 %13, 16, !dbg !12
  %16 = or disjoint i32 %13, 24, !dbg !12
  %17 = or disjoint i32 %13, 32, !dbg !12
  %18 = or disjoint i32 %13, 40, !dbg !12
  %19 = or disjoint i32 %13, 48, !dbg !12
  %20 = or disjoint i32 %13, 56, !dbg !12
  %21 = or disjoint i32 %8, %11, !dbg !13
  %22 = or disjoint i32 %8, %13, !dbg !13
  %23 = or disjoint i32 %8, %14, !dbg !13
  %24 = or disjoint i32 %8, %15, !dbg !13
  %25 = or disjoint i32 %8, %16, !dbg !13
  %26 = or disjoint i32 %8, %17, !dbg !13
  %27 = or disjoint i32 %8, %18, !dbg !13
  %28 = or disjoint i32 %8, %19, !dbg !13
  %29 = or disjoint i32 %8, %20, !dbg !13
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %31 = shl i32 %30, 4, !dbg !15
  %32 = and i32 %9, 15, !dbg !16
  %33 = or disjoint i32 %31, %13, !dbg !17
  %34 = or disjoint i32 %31, %14, !dbg !17
  %35 = or disjoint i32 %31, %32, !dbg !17
  %36 = icmp slt i32 %33, 9, !dbg !18
  %37 = icmp slt i32 %34, 9, !dbg !18
  %38 = icmp slt i32 %35, 9, !dbg !18
  %.frozen = freeze i32 %21, !dbg !19
  %39 = sdiv i32 %.frozen, 256, !dbg !19
  %40 = mul i32 %39, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %40, !dbg !20
  %41 = shl i32 %33, 8, !dbg !21
  %42 = shl i32 %34, 8, !dbg !21
  %43 = mul i32 %39, 2304, !dbg !22
  %44 = add i32 %43, %.decomposed, !dbg !23
  %45 = add i32 %44, %41, !dbg !24
  %46 = add i32 %44, %42, !dbg !24
  %47 = sext i32 %45 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !25
  %49 = sext i32 %46 to i64, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !25
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %36) #2, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !26
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %37) #2, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !26
  %61 = sext i32 %.decomposed to i64, !dbg !27
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !27
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #2, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !28
  %68 = insertelement <8 x i32> poison, i32 %60, i64 0, !dbg !26
  %69 = insertelement <8 x i32> %68, i32 %59, i64 1, !dbg !26
  %70 = insertelement <8 x i32> %69, i32 %58, i64 2, !dbg !26
  %71 = insertelement <8 x i32> %70, i32 %57, i64 3, !dbg !26
  %72 = insertelement <8 x i32> %71, i32 %55, i64 4, !dbg !26
  %73 = insertelement <8 x i32> %72, i32 %54, i64 5, !dbg !26
  %74 = insertelement <8 x i32> %73, i32 %53, i64 6, !dbg !26
  %75 = insertelement <8 x i32> %74, i32 %52, i64 7, !dbg !26
  %76 = bitcast <8 x i32> %75 to <8 x float>, !dbg !26
  %77 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !28
  %78 = insertelement <4 x i32> %77, i32 %66, i64 1, !dbg !28
  %79 = insertelement <4 x i32> %78, i32 %65, i64 2, !dbg !28
  %80 = insertelement <4 x i32> %79, i32 %64, i64 3, !dbg !28
  %81 = bitcast <4 x i32> %80 to <4 x float>, !dbg !28
  %82 = shufflevector <4 x float> %81, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %83 = fadd <8 x float> %82, %76, !dbg !29
  %84 = fcmp olt <8 x float> %83, zeroinitializer, !dbg !30
  %85 = extractelement <8 x i1> %84, i64 7, !dbg !34
  %86 = extractelement <8 x float> %83, i64 7, !dbg !34
  %87 = select i1 %85, float 0.000000e+00, float %86, !dbg !34
  %88 = extractelement <8 x i1> %84, i64 6, !dbg !34
  %89 = extractelement <8 x float> %83, i64 6, !dbg !34
  %90 = select i1 %88, float 0.000000e+00, float %89, !dbg !34
  %91 = extractelement <8 x i1> %84, i64 5, !dbg !34
  %92 = extractelement <8 x float> %83, i64 5, !dbg !34
  %93 = select i1 %91, float 0.000000e+00, float %92, !dbg !34
  %94 = extractelement <8 x i1> %84, i64 4, !dbg !34
  %95 = extractelement <8 x float> %83, i64 4, !dbg !34
  %96 = select i1 %94, float 0.000000e+00, float %95, !dbg !34
  %97 = extractelement <8 x i1> %84, i64 3, !dbg !34
  %98 = extractelement <8 x float> %83, i64 3, !dbg !34
  %99 = select i1 %97, float 0.000000e+00, float %98, !dbg !34
  %100 = extractelement <8 x i1> %84, i64 2, !dbg !34
  %101 = extractelement <8 x float> %83, i64 2, !dbg !34
  %102 = select i1 %100, float 0.000000e+00, float %101, !dbg !34
  %103 = extractelement <8 x i1> %84, i64 1, !dbg !34
  %104 = extractelement <8 x float> %83, i64 1, !dbg !34
  %105 = select i1 %103, float 0.000000e+00, float %104, !dbg !34
  %106 = extractelement <8 x i1> %84, i64 0, !dbg !34
  %107 = extractelement <8 x float> %83, i64 0, !dbg !34
  %108 = select i1 %106, float 0.000000e+00, float %107, !dbg !34
  %109 = mul i32 %22, 9, !dbg !35
  %110 = mul i32 %23, 9, !dbg !35
  %111 = mul i32 %24, 9, !dbg !35
  %112 = mul i32 %25, 9, !dbg !35
  %113 = mul i32 %26, 9, !dbg !35
  %114 = mul i32 %27, 9, !dbg !35
  %115 = mul i32 %28, 9, !dbg !35
  %116 = mul i32 %29, 9, !dbg !35
  %117 = add i32 %35, %109, !dbg !36
  %118 = add i32 %35, %110, !dbg !36
  %119 = add i32 %35, %111, !dbg !36
  %120 = add i32 %35, %112, !dbg !36
  %121 = add i32 %35, %113, !dbg !36
  %122 = add i32 %35, %114, !dbg !36
  %123 = add i32 %35, %115, !dbg !36
  %124 = add i32 %35, %116, !dbg !36
  %125 = sext i32 %117 to i64, !dbg !37
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %125, !dbg !37
  %127 = sext i32 %118 to i64, !dbg !37
  %128 = getelementptr float, ptr addrspace(1) %2, i64 %127, !dbg !37
  %129 = sext i32 %119 to i64, !dbg !37
  %130 = getelementptr float, ptr addrspace(1) %2, i64 %129, !dbg !37
  %131 = sext i32 %120 to i64, !dbg !37
  %132 = getelementptr float, ptr addrspace(1) %2, i64 %131, !dbg !37
  %133 = sext i32 %121 to i64, !dbg !37
  %134 = getelementptr float, ptr addrspace(1) %2, i64 %133, !dbg !37
  %135 = sext i32 %122 to i64, !dbg !37
  %136 = getelementptr float, ptr addrspace(1) %2, i64 %135, !dbg !37
  %137 = sext i32 %123 to i64, !dbg !37
  %138 = getelementptr float, ptr addrspace(1) %2, i64 %137, !dbg !37
  %139 = sext i32 %124 to i64, !dbg !37
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %139, !dbg !37
  %141 = shl i32 %9, 6, !dbg !38
  %142 = and i32 %141, 960, !dbg !38
  %143 = or disjoint i32 %142, %13, !dbg !38
  %144 = and i32 %9, 127, !dbg !38
  %145 = lshr exact i32 %142, 4, !dbg !38
  %146 = add nuw nsw i32 %145, %143, !dbg !38
  %147 = zext nneg i32 %146 to i64, !dbg !38
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %147, !dbg !38
  %149 = bitcast float %87 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #2, !dbg !38
  %150 = or disjoint i32 %143, 16, !dbg !38
  %151 = lshr i32 %150, 4, !dbg !38
  %152 = add nuw nsw i32 %151, %150, !dbg !38
  %153 = zext nneg i32 %152 to i64, !dbg !38
  %154 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %153, !dbg !38
  %155 = bitcast float %90 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #2, !dbg !38
  %156 = or disjoint i32 %143, 32, !dbg !38
  %157 = lshr i32 %156, 4, !dbg !38
  %158 = add nuw nsw i32 %157, %156, !dbg !38
  %159 = zext nneg i32 %158 to i64, !dbg !38
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %159, !dbg !38
  %161 = bitcast float %93 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %161, i1 true) #2, !dbg !38
  %162 = or disjoint i32 %143, 48, !dbg !38
  %163 = lshr i32 %162, 4, !dbg !38
  %164 = add nuw nsw i32 %163, %162, !dbg !38
  %165 = zext nneg i32 %164 to i64, !dbg !38
  %166 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %165, !dbg !38
  %167 = bitcast float %96 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %167, i1 true) #2, !dbg !38
  %168 = or disjoint i32 %143, 8, !dbg !38
  %169 = add nuw nsw i32 %168, %145, !dbg !38
  %170 = zext nneg i32 %169 to i64, !dbg !38
  %171 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %170, !dbg !38
  %172 = bitcast float %99 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %171, <1 x i32> %172, i1 true) #2, !dbg !38
  %173 = or disjoint i32 %143, 24, !dbg !38
  %174 = lshr i32 %173, 4, !dbg !38
  %175 = add nuw nsw i32 %174, %173, !dbg !38
  %176 = zext nneg i32 %175 to i64, !dbg !38
  %177 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %176, !dbg !38
  %178 = bitcast float %102 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %178, i1 true) #2, !dbg !38
  %179 = or disjoint i32 %143, 40, !dbg !38
  %180 = lshr i32 %179, 4, !dbg !38
  %181 = add nuw nsw i32 %180, %179, !dbg !38
  %182 = zext nneg i32 %181 to i64, !dbg !38
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %182, !dbg !38
  %184 = bitcast float %105 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %184, i1 true) #2, !dbg !38
  %185 = or disjoint i32 %143, 56, !dbg !38
  %186 = lshr i32 %185, 4, !dbg !38
  %187 = add nuw nsw i32 %186, %185, !dbg !38
  %188 = zext nneg i32 %187 to i64, !dbg !38
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %188, !dbg !38
  %190 = bitcast float %108 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %190, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %191 = lshr i32 %144, 4, !dbg !38
  %192 = add nuw nsw i32 %191, %144, !dbg !38
  %193 = zext nneg i32 %192 to i64, !dbg !38
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %193, !dbg !38
  %195 = load i32, ptr addrspace(3) %194, align 4, !dbg !38
  %196 = or disjoint i32 %144, 128, !dbg !38
  %197 = lshr i32 %196, 4, !dbg !38
  %198 = add nuw nsw i32 %197, %196, !dbg !38
  %199 = zext nneg i32 %198 to i64, !dbg !38
  %200 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %199, !dbg !38
  %201 = load i32, ptr addrspace(3) %200, align 4, !dbg !38
  %202 = or disjoint i32 %144, 256, !dbg !38
  %203 = lshr i32 %202, 4, !dbg !38
  %204 = add nuw nsw i32 %203, %202, !dbg !38
  %205 = zext nneg i32 %204 to i64, !dbg !38
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %205, !dbg !38
  %207 = load i32, ptr addrspace(3) %206, align 4, !dbg !38
  %208 = or disjoint i32 %144, 384, !dbg !38
  %209 = lshr i32 %208, 4, !dbg !38
  %210 = add nuw nsw i32 %209, %208, !dbg !38
  %211 = zext nneg i32 %210 to i64, !dbg !38
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %211, !dbg !38
  %213 = load i32, ptr addrspace(3) %212, align 4, !dbg !38
  %214 = or disjoint i32 %144, 512, !dbg !38
  %215 = lshr i32 %214, 4, !dbg !38
  %216 = add nuw nsw i32 %215, %214, !dbg !38
  %217 = zext nneg i32 %216 to i64, !dbg !38
  %218 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %217, !dbg !38
  %219 = load i32, ptr addrspace(3) %218, align 4, !dbg !38
  %220 = or disjoint i32 %144, 640, !dbg !38
  %221 = lshr i32 %220, 4, !dbg !38
  %222 = add nuw nsw i32 %221, %220, !dbg !38
  %223 = zext nneg i32 %222 to i64, !dbg !38
  %224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %223, !dbg !38
  %225 = load i32, ptr addrspace(3) %224, align 4, !dbg !38
  %226 = or disjoint i32 %144, 768, !dbg !38
  %227 = lshr i32 %226, 4, !dbg !38
  %228 = add nuw nsw i32 %227, %226, !dbg !38
  %229 = zext nneg i32 %228 to i64, !dbg !38
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %229, !dbg !38
  %231 = load i32, ptr addrspace(3) %230, align 4, !dbg !38
  %232 = or disjoint i32 %144, 896, !dbg !38
  %233 = lshr i32 %232, 4, !dbg !38
  %234 = add nuw nsw i32 %233, %232, !dbg !38
  %235 = zext nneg i32 %234 to i64, !dbg !38
  %236 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %235, !dbg !38
  %237 = load i32, ptr addrspace(3) %236, align 4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %126, i1 %38) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %201, ptr addrspace(1) %128, i1 %38) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %207, ptr addrspace(1) %130, i1 %38) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %213, ptr addrspace(1) %132, i1 %38) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %219, ptr addrspace(1) %134, i1 %38) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %225, ptr addrspace(1) %136, i1 %38) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %231, ptr addrspace(1) %138, i1 %38) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %237, ptr addrspace(1) %140, i1 %38) #2, !dbg !38
  %238 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !39
  %239 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !39
  %240 = bitcast float %87 to i32, !dbg !40
  %241 = bitcast float %90 to i32, !dbg !40
  %242 = bitcast float %93 to i32, !dbg !40
  %243 = bitcast float %96 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %240, i32 %241, i32 %242, i32 %243, ptr addrspace(1) %238, i1 %36) #2, !dbg !40
  %244 = bitcast float %99 to i32, !dbg !40
  %245 = bitcast float %102 to i32, !dbg !40
  %246 = bitcast float %105 to i32, !dbg !40
  %247 = bitcast float %108 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %244, i32 %245, i32 %246, i32 %247, ptr addrspace(1) %239, i1 %37) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgfbhmjp4irqyewzmaqarm4n2sq6pybthyr26fnw5hfwbejpi5ax.py", directory: "inductor_cache/gf")
!4 = !{ptr @triton_poi_fused_convolution_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_11", linkageName: "triton_poi_fused_convolution_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 36, column: 40, scope: !7)
!34 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 37, column: 32, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 25, scope: !7)
!38 = !DILocation(line: 37, column: 43, scope: !7)
!39 = !DILocation(line: 38, column: 25, scope: !7)
!40 = !DILocation(line: 38, column: 55, scope: !7)
!41 = !DILocation(line: 38, column: 4, scope: !7)
