#loc = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":19:0)
#loc1 = loc(unknown)
#loc16 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":38:57)
#loc23 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":44:59)
#loc47 = loc(callsite(#loc1 at #loc16))
#loc51 = loc(callsite(#loc1 at #loc23))
module {
  tt.func public @triton_per_fused_add_convolution_div_gelu_mean_mul_pow_sqrt_sub_3(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant 9.99999997E-7 : f32 loc(#loc1)
    %cst_0 = arith.constant 2.560000e+02 : f32 loc(#loc1)
    %cst_1 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<256xf32> loc(#loc1)
    %cst_3 = arith.constant dense<0.707106769> : tensor<256xf32> loc(#loc1)
    %cst_4 = arith.constant dense<5.000000e-01> : tensor<256xf32> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc3)
    %2 = arith.muli %0, %c256_i32 : i32 loc(#loc4)
    %3 = tt.splat %2 : i32 -> tensor<256xi32> loc(#loc5)
    %4 = arith.addi %1, %3 : tensor<256xi32> loc(#loc5)
    %5 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc6)
    %6 = tt.addptr %5, %4 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc6)
    %7 = tt.load %6 : tensor<256x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc8)
    %9 = tt.addptr %8, %1 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc8)
    %10 = tt.load %9 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc10)
    %12 = tt.addptr %11, %1 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc10)
    %13 = tt.load %12 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %14, %1 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc12)
    %16 = tt.load %15 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>> loc(#loc13)
    %17 = arith.addf %7, %10 : tensor<256xf32> loc(#loc14)
    %18 = "tt.reduce"(%17) <{axis = 0 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc16)), %arg10: f32 loc(callsite(#loc1 at #loc16))):
      %46 = arith.addf %arg9, %arg10 : f32 loc(#loc53)
      tt.reduce.return %46 : f32 loc(#loc46)
    }) : (tensor<256xf32>) -> f32 loc(#loc46)
    %19 = arith.addf %18, %cst_1 : f32 loc(#loc49)
    %20 = arith.divf %19, %cst_0 : f32 loc(#loc20)
    %21 = tt.splat %20 : f32 -> tensor<1xf32> loc(#loc20)
    %22 = tt.splat %20 : f32 -> tensor<256xf32> loc(#loc21)
    %23 = arith.subf %17, %22 : tensor<256xf32> loc(#loc21)
    %24 = arith.mulf %23, %23 : tensor<256xf32> loc(#loc22)
    %25 = "tt.reduce"(%24) <{axis = 0 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc23)), %arg10: f32 loc(callsite(#loc1 at #loc23))):
      %46 = arith.addf %arg9, %arg10 : f32 loc(#loc54)
      tt.reduce.return %46 : f32 loc(#loc50)
    }) : (tensor<256xf32>) -> f32 loc(#loc50)
    %26 = arith.addf %25, %cst_1 : f32 loc(#loc52)
    %27 = arith.divf %26, %cst_0 : f32 loc(#loc25)
    %28 = arith.addf %27, %cst : f32 loc(#loc26)
    %29 = tt.extern_elementwise %28 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (f32) -> f32 loc(#loc27)
    %30 = tt.splat %29 : f32 -> tensor<1xf32> loc(#loc27)
    %31 = tt.splat %29 : f32 -> tensor<256xf32> loc(#loc28)
    %32 = arith.divf %23, %31 : tensor<256xf32> loc(#loc28)
    %33 = arith.mulf %13, %32 : tensor<256xf32> loc(#loc29)
    %34 = arith.addf %33, %16 : tensor<256xf32> loc(#loc30)
    %35 = arith.mulf %34, %cst_4 : tensor<256xf32> loc(#loc31)
    %36 = arith.mulf %34, %cst_3 : tensor<256xf32> loc(#loc32)
    %37 = tt.extern_elementwise %36 {libname = "", libpath = "", pure = true, symbol = "__nv_erff"} : (tensor<256xf32>) -> tensor<256xf32> loc(#loc33)
    %38 = arith.addf %37, %cst_2 : tensor<256xf32> loc(#loc34)
    %39 = arith.mulf %35, %38 : tensor<256xf32> loc(#loc35)
    tt.store %6, %17 : tensor<256x!tt.ptr<f32>> loc(#loc36)
    gpu.barrier loc(#loc37)
    %40 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc38)
    %41 = tt.splat %40 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>> loc(#loc38)
    tt.store %41, %21 : tensor<1x!tt.ptr<f32>> loc(#loc39)
    gpu.barrier loc(#loc40)
    %42 = tt.addptr %arg2, %0 : !tt.ptr<f32>, i32 loc(#loc41)
    %43 = tt.splat %42 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>> loc(#loc41)
    tt.store %43, %30 : tensor<1x!tt.ptr<f32>> loc(#loc42)
    %44 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc43)
    %45 = tt.addptr %44, %4 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc43)
    tt.store %45, %39 : tensor<256x!tt.ptr<f32>> loc(#loc44)
    tt.return loc(#loc45)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":24:28)
#loc3 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":27:26)
#loc4 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":32:43)
#loc5 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":32:39)
#loc6 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":32:34)
#loc7 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":32:48)
#loc8 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":33:30)
#loc9 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":33:35)
#loc10 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":34:31)
#loc11 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":34:36)
#loc12 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":35:31)
#loc13 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":35:36)
#loc14 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":36:18)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc19 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":38:44)
#loc20 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":40:18)
#loc21 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":41:18)
#loc22 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":42:18)
#loc24 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":44:45)
#loc25 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":45:20)
#loc26 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":47:20)
#loc27 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":48:27)
#loc28 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":49:19)
#loc29 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":50:20)
#loc30 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":51:20)
#loc31 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":53:20)
#loc32 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":55:20)
#loc33 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":56:26)
#loc34 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":58:20)
#loc35 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":59:20)
#loc36 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":60:48)
#loc37 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":61:4)
#loc38 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":62:28)
#loc39 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":62:39)
#loc40 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":63:4)
#loc41 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":64:28)
#loc42 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":64:40)
#loc43 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":65:28)
#loc44 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":65:49)
#loc45 = loc("inductor_cache/zh/czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py":65:4)
#loc46 = loc(callsite(#loc15 at #loc16))
#loc48 = loc(callsite(#loc17 at #loc15))
#loc49 = loc(callsite(#loc18 at #loc19))
#loc50 = loc(callsite(#loc15 at #loc23))
#loc52 = loc(callsite(#loc18 at #loc24))
#loc53 = loc(callsite(#loc48 at #loc16))
#loc54 = loc(callsite(#loc48 at #loc23))
