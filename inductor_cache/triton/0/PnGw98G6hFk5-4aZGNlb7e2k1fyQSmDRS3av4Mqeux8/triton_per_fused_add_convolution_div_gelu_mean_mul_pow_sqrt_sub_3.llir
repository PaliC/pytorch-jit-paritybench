; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_convolution_div_gelu_mean_mul_pow_sqrt_sub_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = lshr i32 %11, 5, !dbg !11
  %14 = shl i32 %11, 2, !dbg !11
  %15 = and i32 %14, 252, !dbg !11
  %16 = shl i32 %10, 8, !dbg !12
  %17 = or disjoint i32 %16, %15, !dbg !13
  %18 = sext i32 %17 to i64, !dbg !14
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !14
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !15
  %25 = zext nneg i32 %15 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !17
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !17
  %32 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !18
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !19
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !19
  %38 = bitcast i32 %34 to float, !dbg !19
  %39 = bitcast i32 %35 to float, !dbg !19
  %40 = bitcast i32 %36 to float, !dbg !19
  %41 = bitcast i32 %37 to float, !dbg !19
  %42 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !20
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #5, !dbg !21
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !21
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !21
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !21
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !21
  %48 = bitcast i32 %44 to float, !dbg !21
  %49 = bitcast i32 %45 to float, !dbg !21
  %50 = bitcast i32 %46 to float, !dbg !21
  %51 = bitcast i32 %47 to float, !dbg !21
  %52 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !15
  %53 = insertelement <2 x i32> %52, i32 %22, i64 1, !dbg !15
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !15
  %55 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !17
  %56 = insertelement <2 x i32> %55, i32 %29, i64 1, !dbg !17
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !17
  %58 = fadd <2 x float> %54, %57, !dbg !22
  %59 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !15
  %60 = insertelement <2 x i32> %59, i32 %23, i64 1, !dbg !15
  %61 = bitcast <2 x i32> %60 to <2 x float>, !dbg !15
  %62 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !17
  %63 = insertelement <2 x i32> %62, i32 %30, i64 1, !dbg !17
  %64 = bitcast <2 x i32> %63 to <2 x float>, !dbg !17
  %65 = fadd <2 x float> %61, %64, !dbg !22
  %66 = extractelement <2 x float> %58, i64 0, !dbg !23
  %67 = extractelement <2 x float> %58, i64 1, !dbg !23
  %68 = fadd float %66, %67, !dbg !24
  %69 = extractelement <2 x float> %65, i64 1, !dbg !23
  %70 = fadd float %69, %68, !dbg !24
  %71 = extractelement <2 x float> %65, i64 0, !dbg !23
  %72 = fadd float %71, %70, !dbg !24
  %73 = bitcast float %72 to i32, !dbg !29
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 16, i32 31), !dbg !29
  %75 = bitcast i32 %74 to float, !dbg !29
  %76 = fadd float %72, %75, !dbg !24
  %77 = bitcast float %76 to i32, !dbg !29
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 8, i32 31), !dbg !29
  %79 = bitcast i32 %78 to float, !dbg !29
  %80 = fadd float %76, %79, !dbg !24
  %81 = bitcast float %80 to i32, !dbg !29
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 4, i32 31), !dbg !29
  %83 = bitcast i32 %82 to float, !dbg !29
  %84 = fadd float %80, %83, !dbg !24
  %85 = bitcast float %84 to i32, !dbg !29
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 2, i32 31), !dbg !29
  %87 = bitcast i32 %86 to float, !dbg !29
  %88 = fadd float %84, %87, !dbg !24
  %89 = bitcast float %88 to i32, !dbg !29
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 1, i32 31), !dbg !29
  %91 = bitcast i32 %90 to float, !dbg !29
  %92 = fadd float %88, %91, !dbg !24
  %93 = icmp eq i32 %12, 0, !dbg !29
  %94 = and i32 %13, 1, !dbg !29
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !29
  %96 = bitcast float %92 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 %93) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %97 = icmp slt i32 %11, 2, !dbg !29
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !29
  %99 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %98, i1 %97) #5, !dbg !29
  %100 = bitcast i32 %99 to float, !dbg !29
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !29
  %102 = bitcast i32 %101 to float, !dbg !29
  %103 = fadd float %100, %102, !dbg !24
  %104 = and i32 %11, 1, !dbg !29
  %105 = icmp eq i32 %104, 0, !dbg !29
  %106 = and i1 %97, %105, !dbg !29
  %107 = bitcast float %103 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %107, i1 %106) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %108 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %109 = fadd float %108, 0.000000e+00, !dbg !30
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float 2.560000e+02) #5, !dbg !34
  %111 = fsub float %66, %110, !dbg !23
  %112 = fsub float %67, %110, !dbg !23
  %113 = fsub float %69, %110, !dbg !23
  %114 = fsub float %71, %110, !dbg !23
  %115 = fmul float %111, %111, !dbg !35
  %116 = fmul float %112, %112, !dbg !35
  %117 = fmul float %113, %113, !dbg !35
  %118 = fmul float %114, %114, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %119 = fadd float %115, %116, !dbg !38
  %120 = fadd float %117, %119, !dbg !38
  %121 = fadd float %118, %120, !dbg !38
  %122 = bitcast float %121 to i32, !dbg !36
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 16, i32 31), !dbg !36
  %124 = bitcast i32 %123 to float, !dbg !36
  %125 = fadd float %121, %124, !dbg !38
  %126 = bitcast float %125 to i32, !dbg !36
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 8, i32 31), !dbg !36
  %128 = bitcast i32 %127 to float, !dbg !36
  %129 = fadd float %125, %128, !dbg !38
  %130 = bitcast float %129 to i32, !dbg !36
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 4, i32 31), !dbg !36
  %132 = bitcast i32 %131 to float, !dbg !36
  %133 = fadd float %129, %132, !dbg !38
  %134 = bitcast float %133 to i32, !dbg !36
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 2, i32 31), !dbg !36
  %136 = bitcast i32 %135 to float, !dbg !36
  %137 = fadd float %133, %136, !dbg !38
  %138 = bitcast float %137 to i32, !dbg !36
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 1, i32 31), !dbg !36
  %140 = bitcast i32 %139 to float, !dbg !36
  %141 = fadd float %137, %140, !dbg !38
  %142 = bitcast float %141 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %142, i1 %93) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %143 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %98, i1 %97) #5, !dbg !36
  %144 = bitcast i32 %143 to float, !dbg !36
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !36
  %146 = bitcast i32 %145 to float, !dbg !36
  %147 = fadd float %144, %146, !dbg !38
  %148 = bitcast float %147 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %148, i1 %106) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %149 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %150 = fadd float %149, 0.000000e+00, !dbg !39
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float 2.560000e+02) #5, !dbg !41
  %152 = fadd float %151, 0x3EB0C6F7A0000000, !dbg !42
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i = icmp eq i32 %153, 0, !dbg !43
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %.not1.i = icmp eq i32 %154, 0, !dbg !43
  br i1 %.not.i, label %160, label %155, !dbg !43

155:                                              ; preds = %9
  br i1 %.not1.i, label %158, label %156, !dbg !43

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %152) #5, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %152) #5, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

160:                                              ; preds = %9
  br i1 %.not1.i, label %163, label %161, !dbg !43

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %152) #5, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %152) #5, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %156, %158, %161, %163
  %.0.i = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !43
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %.0.i) #5, !dbg !44
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %.0.i) #5, !dbg !44
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float %.0.i) #5, !dbg !44
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float %.0.i) #5, !dbg !44
  %169 = fmul float %165, %38, !dbg !45
  %170 = fmul float %166, %39, !dbg !45
  %171 = fmul float %167, %40, !dbg !45
  %172 = fmul float %168, %41, !dbg !45
  %173 = fadd float %169, %48, !dbg !46
  %174 = fadd float %170, %49, !dbg !46
  %175 = fadd float %171, %50, !dbg !46
  %176 = fadd float %172, %51, !dbg !46
  %177 = fmul float %173, 0x3FE6A09E60000000, !dbg !47
  %178 = fmul float %174, 0x3FE6A09E60000000, !dbg !47
  %179 = fmul float %175, 0x3FE6A09E60000000, !dbg !47
  %180 = fmul float %176, 0x3FE6A09E60000000, !dbg !47
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not.i1 = icmp eq i32 %181, 0, !dbg !48
  %182 = tail call float @llvm.nvvm.fabs.ftz.f(float %177) #5, !dbg !48
  %183 = tail call float @llvm.nvvm.fabs.f(float %177) #5, !dbg !48
  %.0.i2 = select i1 %.not.i1, float %183, float %182, !dbg !48
  %184 = fcmp oge float %.0.i2, 0x3FF00C1FC0000000, !dbg !48
  br i1 %184, label %__nv_fabsf.exit1.i, label %186, !dbg !48

__nv_fabsf.exit1.i:                               ; preds = %__nv_sqrtf.exit
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not1.i4 = icmp eq i32 %185, 0, !dbg !48
  %.01.i = select i1 %.not1.i4, float %183, float %182, !dbg !48
  br label %__internal_fmad.exit.i, !dbg !48

186:                                              ; preds = %__nv_sqrtf.exit
  %187 = fmul float %177, %177, !dbg !48
  br label %__internal_fmad.exit.i, !dbg !48

__internal_fmad.exit.i:                           ; preds = %186, %__nv_fabsf.exit1.i
  %188 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i ], [ 0x3FC06EBA60000000, %186 ], !dbg !48
  %189 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i ], [ 0xBFD8127580000000, %186 ], !dbg !48
  %190 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i ], [ 0x3FBCE315E0000000, %186 ], !dbg !48
  %191 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i ], [ 0xBF9B837CE0000000, %186 ], !dbg !48
  %192 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i ], [ 0x3F755ABD40000000, %186 ], !dbg !48
  %193 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i ], [ 0xBF4AE9A400000000, %186 ], !dbg !48
  %194 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i ], [ 0x3F163D2D40000000, %186 ], !dbg !48
  %195 = phi float [ %.01.i, %__nv_fabsf.exit1.i ], [ %187, %186 ], !dbg !48
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not2.i3 = icmp eq i32 %196, 0, !dbg !48
  %197 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %194, float %195, float %193) #5, !dbg !48
  %198 = tail call float @llvm.nvvm.fma.rn.f(float %194, float %195, float %193) #5, !dbg !48
  %.02.i = select i1 %.not2.i3, float %198, float %197, !dbg !48
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not3.i = icmp eq i32 %199, 0, !dbg !48
  %200 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %195, float %192) #5, !dbg !48
  %201 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %195, float %192) #5, !dbg !48
  %.03.i = select i1 %.not3.i, float %201, float %200, !dbg !48
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not4.i = icmp eq i32 %202, 0, !dbg !48
  %203 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i, float %195, float %191) #5, !dbg !48
  %204 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i, float %195, float %191) #5, !dbg !48
  %.04.i = select i1 %.not4.i, float %204, float %203, !dbg !48
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not5.i = icmp eq i32 %205, 0, !dbg !48
  %206 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %195, float %190) #5, !dbg !48
  %207 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %195, float %190) #5, !dbg !48
  %.05.i = select i1 %.not5.i, float %207, float %206, !dbg !48
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not6.i = icmp eq i32 %208, 0, !dbg !48
  %209 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %195, float %189) #5, !dbg !48
  %210 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %195, float %189) #5, !dbg !48
  %.06.i = select i1 %.not6.i, float %210, float %209, !dbg !48
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not7.i = icmp eq i32 %211, 0, !dbg !48
  %212 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %195, float %188) #5, !dbg !48
  %213 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %195, float %188) #5, !dbg !48
  %.07.i = select i1 %.not7.i, float %213, float %212, !dbg !48
  %214 = fneg float %195, !dbg !48
  %215 = select i1 %184, float %214, float %177, !dbg !48
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not8.i = icmp eq i32 %216, 0, !dbg !48
  %217 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %215, float %215) #5, !dbg !48
  %218 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %215, float %215) #5, !dbg !48
  %.08.i = select i1 %.not8.i, float %218, float %217, !dbg !48
  br i1 %184, label %219, label %__nv_erff.exit, !dbg !48

219:                                              ; preds = %__internal_fmad.exit.i
  %220 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i) #5, !dbg !48
  %221 = fsub float 1.000000e+00, %220, !dbg !48
  %222 = bitcast float %221 to i32, !dbg !48
  %223 = bitcast float %177 to i32, !dbg !48
  %224 = and i32 %223, -2147483648, !dbg !48
  %225 = or i32 %224, %222, !dbg !48
  %226 = bitcast i32 %225 to float, !dbg !48
  br label %__nv_erff.exit, !dbg !48

__nv_erff.exit:                                   ; preds = %__internal_fmad.exit.i, %219
  %r.0.i = phi float [ %226, %219 ], [ %.08.i, %__internal_fmad.exit.i ], !dbg !48
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not.i5 = icmp eq i32 %227, 0, !dbg !48
  %228 = tail call float @llvm.nvvm.fabs.ftz.f(float %178) #5, !dbg !48
  %229 = tail call float @llvm.nvvm.fabs.f(float %178) #5, !dbg !48
  %.0.i6 = select i1 %.not.i5, float %229, float %228, !dbg !48
  %230 = fcmp oge float %.0.i6, 0x3FF00C1FC0000000, !dbg !48
  br i1 %230, label %__nv_fabsf.exit1.i23, label %232, !dbg !48

__nv_fabsf.exit1.i23:                             ; preds = %__nv_erff.exit
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not1.i24 = icmp eq i32 %231, 0, !dbg !48
  %.01.i25 = select i1 %.not1.i24, float %229, float %228, !dbg !48
  br label %__internal_fmad.exit.i7, !dbg !48

232:                                              ; preds = %__nv_erff.exit
  %233 = fmul float %178, %178, !dbg !48
  br label %__internal_fmad.exit.i7, !dbg !48

__internal_fmad.exit.i7:                          ; preds = %232, %__nv_fabsf.exit1.i23
  %234 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i23 ], [ 0x3FC06EBA60000000, %232 ], !dbg !48
  %235 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i23 ], [ 0xBFD8127580000000, %232 ], !dbg !48
  %236 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i23 ], [ 0x3FBCE315E0000000, %232 ], !dbg !48
  %237 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i23 ], [ 0xBF9B837CE0000000, %232 ], !dbg !48
  %238 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i23 ], [ 0x3F755ABD40000000, %232 ], !dbg !48
  %239 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i23 ], [ 0xBF4AE9A400000000, %232 ], !dbg !48
  %240 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i23 ], [ 0x3F163D2D40000000, %232 ], !dbg !48
  %241 = phi float [ %.01.i25, %__nv_fabsf.exit1.i23 ], [ %233, %232 ], !dbg !48
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not2.i8 = icmp eq i32 %242, 0, !dbg !48
  %243 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %240, float %241, float %239) #5, !dbg !48
  %244 = tail call float @llvm.nvvm.fma.rn.f(float %240, float %241, float %239) #5, !dbg !48
  %.02.i9 = select i1 %.not2.i8, float %244, float %243, !dbg !48
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not3.i10 = icmp eq i32 %245, 0, !dbg !48
  %246 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i9, float %241, float %238) #5, !dbg !48
  %247 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i9, float %241, float %238) #5, !dbg !48
  %.03.i11 = select i1 %.not3.i10, float %247, float %246, !dbg !48
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not4.i12 = icmp eq i32 %248, 0, !dbg !48
  %249 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i11, float %241, float %237) #5, !dbg !48
  %250 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i11, float %241, float %237) #5, !dbg !48
  %.04.i13 = select i1 %.not4.i12, float %250, float %249, !dbg !48
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not5.i14 = icmp eq i32 %251, 0, !dbg !48
  %252 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i13, float %241, float %236) #5, !dbg !48
  %253 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i13, float %241, float %236) #5, !dbg !48
  %.05.i15 = select i1 %.not5.i14, float %253, float %252, !dbg !48
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not6.i16 = icmp eq i32 %254, 0, !dbg !48
  %255 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i15, float %241, float %235) #5, !dbg !48
  %256 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i15, float %241, float %235) #5, !dbg !48
  %.06.i17 = select i1 %.not6.i16, float %256, float %255, !dbg !48
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not7.i18 = icmp eq i32 %257, 0, !dbg !48
  %258 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i17, float %241, float %234) #5, !dbg !48
  %259 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i17, float %241, float %234) #5, !dbg !48
  %.07.i19 = select i1 %.not7.i18, float %259, float %258, !dbg !48
  %260 = fneg float %241, !dbg !48
  %261 = select i1 %230, float %260, float %178, !dbg !48
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not8.i20 = icmp eq i32 %262, 0, !dbg !48
  %263 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i19, float %261, float %261) #5, !dbg !48
  %264 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i19, float %261, float %261) #5, !dbg !48
  %.08.i21 = select i1 %.not8.i20, float %264, float %263, !dbg !48
  br i1 %230, label %265, label %__nv_erff.exit26, !dbg !48

265:                                              ; preds = %__internal_fmad.exit.i7
  %266 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i21) #5, !dbg !48
  %267 = fsub float 1.000000e+00, %266, !dbg !48
  %268 = bitcast float %267 to i32, !dbg !48
  %269 = bitcast float %178 to i32, !dbg !48
  %270 = and i32 %269, -2147483648, !dbg !48
  %271 = or i32 %270, %268, !dbg !48
  %272 = bitcast i32 %271 to float, !dbg !48
  br label %__nv_erff.exit26, !dbg !48

__nv_erff.exit26:                                 ; preds = %__internal_fmad.exit.i7, %265
  %r.0.i22 = phi float [ %272, %265 ], [ %.08.i21, %__internal_fmad.exit.i7 ], !dbg !48
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not.i27 = icmp eq i32 %273, 0, !dbg !48
  %274 = tail call float @llvm.nvvm.fabs.ftz.f(float %179) #5, !dbg !48
  %275 = tail call float @llvm.nvvm.fabs.f(float %179) #5, !dbg !48
  %.0.i28 = select i1 %.not.i27, float %275, float %274, !dbg !48
  %276 = fcmp oge float %.0.i28, 0x3FF00C1FC0000000, !dbg !48
  br i1 %276, label %__nv_fabsf.exit1.i45, label %278, !dbg !48

__nv_fabsf.exit1.i45:                             ; preds = %__nv_erff.exit26
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not1.i46 = icmp eq i32 %277, 0, !dbg !48
  %.01.i47 = select i1 %.not1.i46, float %275, float %274, !dbg !48
  br label %__internal_fmad.exit.i29, !dbg !48

278:                                              ; preds = %__nv_erff.exit26
  %279 = fmul float %179, %179, !dbg !48
  br label %__internal_fmad.exit.i29, !dbg !48

__internal_fmad.exit.i29:                         ; preds = %278, %__nv_fabsf.exit1.i45
  %280 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i45 ], [ 0x3FC06EBA60000000, %278 ], !dbg !48
  %281 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i45 ], [ 0xBFD8127580000000, %278 ], !dbg !48
  %282 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i45 ], [ 0x3FBCE315E0000000, %278 ], !dbg !48
  %283 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i45 ], [ 0xBF9B837CE0000000, %278 ], !dbg !48
  %284 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i45 ], [ 0x3F755ABD40000000, %278 ], !dbg !48
  %285 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i45 ], [ 0xBF4AE9A400000000, %278 ], !dbg !48
  %286 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i45 ], [ 0x3F163D2D40000000, %278 ], !dbg !48
  %287 = phi float [ %.01.i47, %__nv_fabsf.exit1.i45 ], [ %279, %278 ], !dbg !48
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not2.i30 = icmp eq i32 %288, 0, !dbg !48
  %289 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %286, float %287, float %285) #5, !dbg !48
  %290 = tail call float @llvm.nvvm.fma.rn.f(float %286, float %287, float %285) #5, !dbg !48
  %.02.i31 = select i1 %.not2.i30, float %290, float %289, !dbg !48
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not3.i32 = icmp eq i32 %291, 0, !dbg !48
  %292 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i31, float %287, float %284) #5, !dbg !48
  %293 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i31, float %287, float %284) #5, !dbg !48
  %.03.i33 = select i1 %.not3.i32, float %293, float %292, !dbg !48
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not4.i34 = icmp eq i32 %294, 0, !dbg !48
  %295 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i33, float %287, float %283) #5, !dbg !48
  %296 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i33, float %287, float %283) #5, !dbg !48
  %.04.i35 = select i1 %.not4.i34, float %296, float %295, !dbg !48
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not5.i36 = icmp eq i32 %297, 0, !dbg !48
  %298 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i35, float %287, float %282) #5, !dbg !48
  %299 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i35, float %287, float %282) #5, !dbg !48
  %.05.i37 = select i1 %.not5.i36, float %299, float %298, !dbg !48
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not6.i38 = icmp eq i32 %300, 0, !dbg !48
  %301 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i37, float %287, float %281) #5, !dbg !48
  %302 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i37, float %287, float %281) #5, !dbg !48
  %.06.i39 = select i1 %.not6.i38, float %302, float %301, !dbg !48
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not7.i40 = icmp eq i32 %303, 0, !dbg !48
  %304 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i39, float %287, float %280) #5, !dbg !48
  %305 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i39, float %287, float %280) #5, !dbg !48
  %.07.i41 = select i1 %.not7.i40, float %305, float %304, !dbg !48
  %306 = fneg float %287, !dbg !48
  %307 = select i1 %276, float %306, float %179, !dbg !48
  %308 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not8.i42 = icmp eq i32 %308, 0, !dbg !48
  %309 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i41, float %307, float %307) #5, !dbg !48
  %310 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i41, float %307, float %307) #5, !dbg !48
  %.08.i43 = select i1 %.not8.i42, float %310, float %309, !dbg !48
  br i1 %276, label %311, label %__nv_erff.exit48, !dbg !48

311:                                              ; preds = %__internal_fmad.exit.i29
  %312 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i43) #5, !dbg !48
  %313 = fsub float 1.000000e+00, %312, !dbg !48
  %314 = bitcast float %313 to i32, !dbg !48
  %315 = bitcast float %179 to i32, !dbg !48
  %316 = and i32 %315, -2147483648, !dbg !48
  %317 = or i32 %316, %314, !dbg !48
  %318 = bitcast i32 %317 to float, !dbg !48
  br label %__nv_erff.exit48, !dbg !48

__nv_erff.exit48:                                 ; preds = %__internal_fmad.exit.i29, %311
  %r.0.i44 = phi float [ %318, %311 ], [ %.08.i43, %__internal_fmad.exit.i29 ], !dbg !48
  %319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not.i49 = icmp eq i32 %319, 0, !dbg !48
  %320 = tail call float @llvm.nvvm.fabs.ftz.f(float %180) #5, !dbg !48
  %321 = tail call float @llvm.nvvm.fabs.f(float %180) #5, !dbg !48
  %.0.i50 = select i1 %.not.i49, float %321, float %320, !dbg !48
  %322 = fcmp oge float %.0.i50, 0x3FF00C1FC0000000, !dbg !48
  br i1 %322, label %__nv_fabsf.exit1.i67, label %324, !dbg !48

__nv_fabsf.exit1.i67:                             ; preds = %__nv_erff.exit48
  %323 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not1.i68 = icmp eq i32 %323, 0, !dbg !48
  %.01.i69 = select i1 %.not1.i68, float %321, float %320, !dbg !48
  br label %__internal_fmad.exit.i51, !dbg !48

324:                                              ; preds = %__nv_erff.exit48
  %325 = fmul float %180, %180, !dbg !48
  br label %__internal_fmad.exit.i51, !dbg !48

__internal_fmad.exit.i51:                         ; preds = %324, %__nv_fabsf.exit1.i67
  %326 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i67 ], [ 0x3FC06EBA60000000, %324 ], !dbg !48
  %327 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i67 ], [ 0xBFD8127580000000, %324 ], !dbg !48
  %328 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i67 ], [ 0x3FBCE315E0000000, %324 ], !dbg !48
  %329 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i67 ], [ 0xBF9B837CE0000000, %324 ], !dbg !48
  %330 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i67 ], [ 0x3F755ABD40000000, %324 ], !dbg !48
  %331 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i67 ], [ 0xBF4AE9A400000000, %324 ], !dbg !48
  %332 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i67 ], [ 0x3F163D2D40000000, %324 ], !dbg !48
  %333 = phi float [ %.01.i69, %__nv_fabsf.exit1.i67 ], [ %325, %324 ], !dbg !48
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not2.i52 = icmp eq i32 %334, 0, !dbg !48
  %335 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %332, float %333, float %331) #5, !dbg !48
  %336 = tail call float @llvm.nvvm.fma.rn.f(float %332, float %333, float %331) #5, !dbg !48
  %.02.i53 = select i1 %.not2.i52, float %336, float %335, !dbg !48
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not3.i54 = icmp eq i32 %337, 0, !dbg !48
  %338 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i53, float %333, float %330) #5, !dbg !48
  %339 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i53, float %333, float %330) #5, !dbg !48
  %.03.i55 = select i1 %.not3.i54, float %339, float %338, !dbg !48
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not4.i56 = icmp eq i32 %340, 0, !dbg !48
  %341 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i55, float %333, float %329) #5, !dbg !48
  %342 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i55, float %333, float %329) #5, !dbg !48
  %.04.i57 = select i1 %.not4.i56, float %342, float %341, !dbg !48
  %343 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not5.i58 = icmp eq i32 %343, 0, !dbg !48
  %344 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i57, float %333, float %328) #5, !dbg !48
  %345 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i57, float %333, float %328) #5, !dbg !48
  %.05.i59 = select i1 %.not5.i58, float %345, float %344, !dbg !48
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not6.i60 = icmp eq i32 %346, 0, !dbg !48
  %347 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i59, float %333, float %327) #5, !dbg !48
  %348 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i59, float %333, float %327) #5, !dbg !48
  %.06.i61 = select i1 %.not6.i60, float %348, float %347, !dbg !48
  %349 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not7.i62 = icmp eq i32 %349, 0, !dbg !48
  %350 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i61, float %333, float %326) #5, !dbg !48
  %351 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i61, float %333, float %326) #5, !dbg !48
  %.07.i63 = select i1 %.not7.i62, float %351, float %350, !dbg !48
  %352 = fneg float %333, !dbg !48
  %353 = select i1 %322, float %352, float %180, !dbg !48
  %354 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not8.i64 = icmp eq i32 %354, 0, !dbg !48
  %355 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i63, float %353, float %353) #5, !dbg !48
  %356 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i63, float %353, float %353) #5, !dbg !48
  %.08.i65 = select i1 %.not8.i64, float %356, float %355, !dbg !48
  br i1 %322, label %357, label %__nv_erff.exit70, !dbg !48

357:                                              ; preds = %__internal_fmad.exit.i51
  %358 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i65) #5, !dbg !48
  %359 = fsub float 1.000000e+00, %358, !dbg !48
  %360 = bitcast float %359 to i32, !dbg !48
  %361 = bitcast float %180 to i32, !dbg !48
  %362 = and i32 %361, -2147483648, !dbg !48
  %363 = or i32 %362, %360, !dbg !48
  %364 = bitcast i32 %363 to float, !dbg !48
  br label %__nv_erff.exit70, !dbg !48

__nv_erff.exit70:                                 ; preds = %__internal_fmad.exit.i51, %357
  %r.0.i66 = phi float [ %364, %357 ], [ %.08.i65, %__internal_fmad.exit.i51 ], !dbg !48
  %365 = fmul float %176, 5.000000e-01, !dbg !49
  %366 = fmul float %175, 5.000000e-01, !dbg !49
  %367 = fmul float %174, 5.000000e-01, !dbg !49
  %368 = fmul float %173, 5.000000e-01, !dbg !49
  %369 = fadd float %r.0.i, 1.000000e+00, !dbg !50
  %370 = fadd float %r.0.i22, 1.000000e+00, !dbg !50
  %371 = fadd float %r.0.i44, 1.000000e+00, !dbg !50
  %372 = fadd float %r.0.i66, 1.000000e+00, !dbg !50
  %373 = fmul float %368, %369, !dbg !51
  %374 = fmul float %367, %370, !dbg !51
  %375 = fmul float %366, %371, !dbg !51
  %376 = fmul float %365, %372, !dbg !51
  %377 = bitcast float %66 to i32, !dbg !52
  %378 = bitcast float %67 to i32, !dbg !52
  %379 = bitcast float %69 to i32, !dbg !52
  %380 = bitcast float %71 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %377, i32 %378, i32 %379, i32 %380, ptr addrspace(1) %19, i1 true) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %381 = sext i32 %10 to i64, !dbg !54
  %382 = getelementptr float, ptr addrspace(1) %1, i64 %381, !dbg !54
  %urem = and i32 %11, 63, !dbg !55
  %383 = icmp eq i32 %urem, 0, !dbg !55
  %384 = bitcast float %110 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %384, ptr addrspace(1) %382, i1 %383) #5, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %385 = getelementptr float, ptr addrspace(1) %2, i64 %381, !dbg !57
  %386 = bitcast float %.0.i to i32, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %386, ptr addrspace(1) %385, i1 %383) #5, !dbg !58
  %387 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !59
  %388 = bitcast float %373 to i32, !dbg !60
  %389 = bitcast float %374 to i32, !dbg !60
  %390 = bitcast float %375 to i32, !dbg !60
  %391 = bitcast float %376 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %388, i32 %389, i32 %390, i32 %391, ptr addrspace(1) %387, i1 true) #5, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czhiz6swfj33ratmb6ex54zlrvbueea3v5t56dukjpdwfy6kavsu.py", directory: "inductor_cache/zh")
!4 = !{ptr @triton_per_fused_add_convolution_div_gelu_mean_mul_pow_sqrt_sub_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_convolution_div_gelu_mean_mul_pow_sqrt_sub_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_convolution_div_gelu_mean_mul_pow_sqrt_sub_3", linkageName: "triton_per_fused_add_convolution_div_gelu_mean_mul_pow_sqrt_sub_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 43, scope: !7)
!13 = !DILocation(line: 32, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 34, scope: !7)
!15 = !DILocation(line: 32, column: 48, scope: !7)
!16 = !DILocation(line: 33, column: 30, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 34, column: 31, scope: !7)
!19 = !DILocation(line: 34, column: 36, scope: !7)
!20 = !DILocation(line: 35, column: 31, scope: !7)
!21 = !DILocation(line: 35, column: 36, scope: !7)
!22 = !DILocation(line: 36, column: 18, scope: !7)
!23 = !DILocation(line: 41, column: 18, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 38, column: 57, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 73, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 38, column: 44, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !37)
!37 = !DILocation(line: 44, column: 59, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !37)
!39 = !DILocation(line: 73, column: 15, scope: !31, inlinedAt: !40)
!40 = !DILocation(line: 44, column: 45, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 27, scope: !7)
!44 = !DILocation(line: 49, column: 19, scope: !7)
!45 = !DILocation(line: 50, column: 20, scope: !7)
!46 = !DILocation(line: 51, column: 20, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 56, column: 26, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 58, column: 20, scope: !7)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 60, column: 48, scope: !7)
!53 = !DILocation(line: 61, column: 4, scope: !7)
!54 = !DILocation(line: 62, column: 28, scope: !7)
!55 = !DILocation(line: 62, column: 39, scope: !7)
!56 = !DILocation(line: 63, column: 4, scope: !7)
!57 = !DILocation(line: 64, column: 28, scope: !7)
!58 = !DILocation(line: 64, column: 40, scope: !7)
!59 = !DILocation(line: 65, column: 28, scope: !7)
!60 = !DILocation(line: 65, column: 49, scope: !7)
!61 = !DILocation(line: 65, column: 4, scope: !7)
