; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_clone_mul_sigmoid_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 3, !dbg !12
  %12 = lshr i32 %9, 2, !dbg !12
  %13 = and i32 %12, 4, !dbg !12
  %14 = or disjoint i32 %11, %13, !dbg !12
  %15 = lshr i32 %9, 2, !dbg !12
  %16 = and i32 %15, 8, !dbg !12
  %17 = or disjoint i32 %14, %16, !dbg !12
  %18 = and i32 %9, 64, !dbg !12
  %19 = lshr exact i32 %18, 2, !dbg !12
  %20 = or disjoint i32 %17, %19, !dbg !12
  %21 = or disjoint i32 %20, 32, !dbg !12
  %22 = shl i32 %9, 2, !dbg !12
  %23 = and i32 %22, 12, !dbg !12
  %24 = and i32 %22, 60, !dbg !12
  %25 = or disjoint i32 %8, %20, !dbg !13
  %26 = or disjoint i32 %8, %21, !dbg !13
  %27 = or disjoint i32 %8, %24, !dbg !13
  %28 = icmp slt i32 %25, 64, !dbg !14
  %29 = icmp slt i32 %26, 64, !dbg !14
  %30 = icmp slt i32 %27, 64, !dbg !14
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %32 = shl i32 %31, 4, !dbg !16
  %.lobit110 = lshr i32 %9, 4, !dbg !17
  %33 = and i32 %.lobit110, 3, !dbg !17
  %34 = lshr exact i32 %18, 4, !dbg !17
  %35 = or disjoint i32 %33, %34, !dbg !17
  %36 = or disjoint i32 %32, %23, !dbg !18
  %37 = or disjoint i32 %32, %35, !dbg !18
  %38 = or disjoint i32 %37, 8, !dbg !18
  %39 = icmp slt i32 %36, 16, !dbg !19
  %40 = icmp slt i32 %37, 16, !dbg !19
  %41 = icmp slt i32 %38, 16, !dbg !19
  %42 = shl i32 %25, 4, !dbg !20
  %43 = shl i32 %26, 4, !dbg !20
  %44 = add i32 %36, %42, !dbg !21
  %45 = add i32 %36, %43, !dbg !21
  %46 = sext i32 %44 to i64, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !22
  %48 = sext i32 %45 to i64, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !22
  %50 = and i1 %28, %39, !dbg !23
  %51 = and i1 %29, %39, !dbg !23
  %52 = and i1 %30, %40, !dbg !23
  %53 = and i1 %41, %30, !dbg !23
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %50) #2, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !24
  %59 = bitcast i32 %55 to float, !dbg !24
  %60 = bitcast i32 %56 to float, !dbg !24
  %61 = bitcast i32 %57 to float, !dbg !24
  %62 = bitcast i32 %58 to float, !dbg !24
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %51) #2, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !24
  %68 = bitcast i32 %64 to float, !dbg !24
  %69 = bitcast i32 %65 to float, !dbg !24
  %70 = bitcast i32 %66 to float, !dbg !24
  %71 = bitcast i32 %67 to float, !dbg !24
  %72 = sext i32 %25 to i64, !dbg !25
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !25
  %74 = sext i32 %26 to i64, !dbg !25
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !25
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %28) #2, !dbg !26
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %28) #2, !dbg !26
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %28) #2, !dbg !26
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %28) #2, !dbg !26
  %80 = bitcast i32 %79 to float, !dbg !26
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %29) #2, !dbg !26
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %29) #2, !dbg !26
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %29) #2, !dbg !26
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %29) #2, !dbg !26
  %85 = bitcast i32 %84 to float, !dbg !26
  %86 = shl i32 %37, 2, !dbg !27
  %87 = shl i32 %38, 2, !dbg !27
  %88 = shl i32 %27, 4, !dbg !28
  %89 = add i32 %86, %88, !dbg !29
  %90 = add i32 %88, %87, !dbg !29
  %91 = sext i32 %89 to i64, !dbg !30
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !30
  %93 = sext i32 %90 to i64, !dbg !30
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !30
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 %52) #2, !dbg !31
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !31
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !31
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !31
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !31
  %100 = bitcast i32 %96 to float, !dbg !31
  %101 = bitcast i32 %97 to float, !dbg !31
  %102 = bitcast i32 %98 to float, !dbg !31
  %103 = bitcast i32 %99 to float, !dbg !31
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %53) #2, !dbg !31
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !31
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !31
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !31
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !31
  %109 = bitcast i32 %105 to float, !dbg !31
  %110 = bitcast i32 %106 to float, !dbg !31
  %111 = bitcast i32 %107 to float, !dbg !31
  %112 = bitcast i32 %108 to float, !dbg !31
  %113 = fsub float 0.000000e+00, %80, !dbg !32
  %114 = fsub float 0.000000e+00, %85, !dbg !32
  %115 = fmul float %113, 0x3FF7154760000000, !dbg !36
  %116 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %115) #2, !dbg !36
  %117 = fmul float %114, 0x3FF7154760000000, !dbg !36
  %118 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %117) #2, !dbg !36
  %119 = fadd float %116, 1.000000e+00, !dbg !37
  %120 = fadd float %118, 1.000000e+00, !dbg !37
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %119) #2, !dbg !38
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %120) #2, !dbg !38
  %123 = fmul float %121, %59, !dbg !39
  %124 = fmul float %121, %60, !dbg !39
  %125 = fmul float %121, %61, !dbg !39
  %126 = fmul float %121, %62, !dbg !39
  %127 = fmul float %122, %68, !dbg !39
  %128 = fmul float %122, %69, !dbg !39
  %129 = fmul float %122, %70, !dbg !39
  %130 = fmul float %122, %71, !dbg !39
  %131 = shl i32 %9, 8, !dbg !39
  %132 = and i32 %131, 768, !dbg !39
  %133 = or disjoint i32 %11, %132, !dbg !39
  %134 = or disjoint i32 %133, %13, !dbg !39
  %135 = or disjoint i32 %134, %16, !dbg !39
  %136 = or disjoint i32 %135, %19, !dbg !39
  %137 = and i32 %22, 508, !dbg !39
  %138 = lshr exact i32 %132, 2, !dbg !39
  %139 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %138, !dbg !39
  %140 = getelementptr inbounds float, ptr addrspace(3) %139, i32 %136, !dbg !39
  %141 = bitcast float %123 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #2, !dbg !39
  %142 = or disjoint i32 %136, 64, !dbg !39
  %143 = lshr i32 %142, 4, !dbg !39
  %144 = and i32 %143, 268435452, !dbg !39
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !39
  %146 = getelementptr float, ptr addrspace(3) %145, i32 %142, !dbg !39
  %147 = bitcast float %124 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !39
  %148 = or disjoint i32 %136, 128, !dbg !39
  %149 = lshr i32 %148, 4, !dbg !39
  %150 = and i32 %149, 268435452, !dbg !39
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %150, !dbg !39
  %152 = getelementptr float, ptr addrspace(3) %151, i32 %148, !dbg !39
  %153 = bitcast float %125 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !39
  %154 = or disjoint i32 %136, 192, !dbg !39
  %155 = lshr i32 %154, 4, !dbg !39
  %156 = and i32 %155, 268435452, !dbg !39
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !39
  %158 = getelementptr float, ptr addrspace(3) %157, i32 %154, !dbg !39
  %159 = bitcast float %126 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #2, !dbg !39
  %160 = or disjoint i32 %136, 32, !dbg !39
  %161 = getelementptr float, ptr addrspace(3) %139, i32 %160, !dbg !39
  %162 = bitcast float %127 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 true) #2, !dbg !39
  %163 = or disjoint i32 %136, 96, !dbg !39
  %164 = lshr i32 %163, 4, !dbg !39
  %165 = and i32 %164, 268435452, !dbg !39
  %166 = getelementptr float, ptr addrspace(3) @global_smem, i32 %165, !dbg !39
  %167 = getelementptr float, ptr addrspace(3) %166, i32 %163, !dbg !39
  %168 = bitcast float %128 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %168, i1 true) #2, !dbg !39
  %169 = or disjoint i32 %136, 160, !dbg !39
  %170 = lshr i32 %169, 4, !dbg !39
  %171 = and i32 %170, 268435452, !dbg !39
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %171, !dbg !39
  %173 = getelementptr float, ptr addrspace(3) %172, i32 %169, !dbg !39
  %174 = bitcast float %129 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #2, !dbg !39
  %175 = or disjoint i32 %136, 224, !dbg !39
  %176 = lshr i32 %175, 4, !dbg !39
  %177 = and i32 %176, 268435452, !dbg !39
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i32 %177, !dbg !39
  %179 = getelementptr float, ptr addrspace(3) %178, i32 %175, !dbg !39
  %180 = bitcast float %130 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %181 = lshr i32 %22, 4, !dbg !39
  %182 = and i32 %181, 28, !dbg !39
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %182, !dbg !39
  %184 = getelementptr inbounds float, ptr addrspace(3) %183, i32 %137, !dbg !39
  %185 = load float, ptr addrspace(3) %184, align 16, !dbg !39
  %186 = getelementptr inbounds i8, ptr addrspace(3) %184, i32 4, !dbg !39
  %187 = load float, ptr addrspace(3) %186, align 4, !dbg !39
  %188 = getelementptr inbounds i8, ptr addrspace(3) %184, i32 8, !dbg !39
  %189 = load float, ptr addrspace(3) %188, align 8, !dbg !39
  %190 = getelementptr inbounds i8, ptr addrspace(3) %184, i32 12, !dbg !39
  %191 = load float, ptr addrspace(3) %190, align 4, !dbg !39
  %192 = or disjoint i32 %137, 512, !dbg !39
  %193 = lshr i32 %192, 4, !dbg !39
  %194 = and i32 %193, 60, !dbg !39
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %194, !dbg !39
  %196 = getelementptr inbounds float, ptr addrspace(3) %195, i32 %192, !dbg !39
  %197 = load float, ptr addrspace(3) %196, align 16, !dbg !39
  %198 = getelementptr inbounds i8, ptr addrspace(3) %196, i32 4, !dbg !39
  %199 = load float, ptr addrspace(3) %198, align 4, !dbg !39
  %200 = getelementptr inbounds i8, ptr addrspace(3) %196, i32 8, !dbg !39
  %201 = load float, ptr addrspace(3) %200, align 8, !dbg !39
  %202 = getelementptr inbounds i8, ptr addrspace(3) %196, i32 12, !dbg !39
  %203 = load float, ptr addrspace(3) %202, align 4, !dbg !39
  %204 = fadd float %185, %100, !dbg !40
  %205 = fadd float %187, %101, !dbg !40
  %206 = fadd float %189, %102, !dbg !40
  %207 = fadd float %191, %103, !dbg !40
  %208 = fadd float %197, %109, !dbg !40
  %209 = fadd float %199, %110, !dbg !40
  %210 = fadd float %201, %111, !dbg !40
  %211 = fadd float %203, %112, !dbg !40
  %212 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !41
  %213 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %214 = shl i32 %9, 6, !dbg !42
  %215 = and i32 %214, 960, !dbg !42
  %216 = or disjoint i32 %33, %215, !dbg !42
  %217 = or disjoint i32 %216, %34, !dbg !42
  %218 = lshr exact i32 %215, 2, !dbg !42
  %219 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %218, !dbg !42
  %220 = getelementptr float, ptr addrspace(3) %219, i32 %217, !dbg !42
  %221 = bitcast float %204 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #2, !dbg !42
  %222 = or disjoint i32 %217, 16, !dbg !42
  %223 = lshr i32 %222, 4, !dbg !42
  %224 = getelementptr float, ptr addrspace(3) @global_smem, i32 %223, !dbg !42
  %225 = getelementptr float, ptr addrspace(3) %224, i32 %222, !dbg !42
  %226 = bitcast float %205 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 true) #2, !dbg !42
  %227 = or disjoint i32 %217, 32, !dbg !42
  %228 = lshr i32 %227, 4, !dbg !42
  %229 = getelementptr float, ptr addrspace(3) @global_smem, i32 %228, !dbg !42
  %230 = getelementptr float, ptr addrspace(3) %229, i32 %227, !dbg !42
  %231 = bitcast float %206 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #2, !dbg !42
  %232 = or disjoint i32 %217, 48, !dbg !42
  %233 = lshr i32 %232, 4, !dbg !42
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i32 %233, !dbg !42
  %235 = getelementptr float, ptr addrspace(3) %234, i32 %232, !dbg !42
  %236 = bitcast float %207 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #2, !dbg !42
  %237 = or disjoint i32 %217, 8, !dbg !42
  %238 = getelementptr float, ptr addrspace(3) %219, i32 %237, !dbg !42
  %239 = bitcast float %208 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #2, !dbg !42
  %240 = or disjoint i32 %217, 24, !dbg !42
  %241 = lshr i32 %240, 4, !dbg !42
  %242 = getelementptr float, ptr addrspace(3) @global_smem, i32 %241, !dbg !42
  %243 = getelementptr float, ptr addrspace(3) %242, i32 %240, !dbg !42
  %244 = bitcast float %209 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 true) #2, !dbg !42
  %245 = or disjoint i32 %217, 40, !dbg !42
  %246 = lshr i32 %245, 4, !dbg !42
  %247 = getelementptr float, ptr addrspace(3) @global_smem, i32 %246, !dbg !42
  %248 = getelementptr float, ptr addrspace(3) %247, i32 %245, !dbg !42
  %249 = bitcast float %210 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 true) #2, !dbg !42
  %250 = or disjoint i32 %217, 56, !dbg !42
  %251 = lshr i32 %250, 4, !dbg !42
  %252 = getelementptr float, ptr addrspace(3) @global_smem, i32 %251, !dbg !42
  %253 = getelementptr float, ptr addrspace(3) %252, i32 %250, !dbg !42
  %254 = bitcast float %211 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 true) #2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %255 = lshr i32 %137, 4, !dbg !42
  %256 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %255, !dbg !42
  %257 = getelementptr inbounds float, ptr addrspace(3) %256, i32 %137, !dbg !42
  %258 = load i32, ptr addrspace(3) %257, align 4, !dbg !42
  %259 = or disjoint i32 %137, 1, !dbg !42
  %260 = getelementptr inbounds float, ptr addrspace(3) %256, i32 %259, !dbg !42
  %261 = load i32, ptr addrspace(3) %260, align 4, !dbg !42
  %262 = or disjoint i32 %137, 2, !dbg !42
  %263 = getelementptr inbounds float, ptr addrspace(3) %256, i32 %262, !dbg !42
  %264 = load i32, ptr addrspace(3) %263, align 4, !dbg !42
  %265 = or disjoint i32 %137, 3, !dbg !42
  %266 = getelementptr inbounds float, ptr addrspace(3) %256, i32 %265, !dbg !42
  %267 = load i32, ptr addrspace(3) %266, align 4, !dbg !42
  %268 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %193, !dbg !42
  %269 = getelementptr inbounds float, ptr addrspace(3) %268, i32 %192, !dbg !42
  %270 = load i32, ptr addrspace(3) %269, align 4, !dbg !42
  %271 = or disjoint i32 %137, 513, !dbg !42
  %272 = lshr i32 %271, 4, !dbg !42
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %272, !dbg !42
  %274 = getelementptr inbounds float, ptr addrspace(3) %273, i32 %271, !dbg !42
  %275 = load i32, ptr addrspace(3) %274, align 4, !dbg !42
  %276 = or disjoint i32 %137, 514, !dbg !42
  %277 = lshr i32 %276, 4, !dbg !42
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %277, !dbg !42
  %279 = getelementptr inbounds float, ptr addrspace(3) %278, i32 %276, !dbg !42
  %280 = load i32, ptr addrspace(3) %279, align 4, !dbg !42
  %281 = or disjoint i32 %137, 515, !dbg !42
  %282 = lshr i32 %281, 4, !dbg !42
  %283 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %282, !dbg !42
  %284 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %281, !dbg !42
  %285 = load i32, ptr addrspace(3) %284, align 4, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %258, i32 %261, i32 %264, i32 %267, ptr addrspace(1) %212, i1 %50) #2, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %270, i32 %275, i32 %280, i32 %285, ptr addrspace(1) %213, i1 %51) #2, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cokhrb4iiusee4t7f3h5clt6t2leh4nkqmxfjazrsdrirel6rtrc.py", directory: "inductor_cache/ok")
!4 = !{ptr @triton_poi_fused_add_clone_mul_sigmoid_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_clone_mul_sigmoid_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_clone_mul_sigmoid_3", linkageName: "triton_poi_fused_add_clone_mul_sigmoid_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 51, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 37, scope: !7)
!28 = !DILocation(line: 34, column: 45, scope: !7)
!29 = !DILocation(line: 34, column: 42, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 50, scope: !7)
!32 = !DILocation(line: 47, column: 30, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = !DILocation(line: 35, column: 22, scope: !7)
!36 = !DILocation(line: 47, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 47, column: 20, scope: !33, inlinedAt: !35)
!38 = !DILocation(line: 47, column: 16, scope: !33, inlinedAt: !35)
!39 = !DILocation(line: 36, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 38, column: 25, scope: !7)
!42 = !DILocation(line: 38, column: 44, scope: !7)
!43 = !DILocation(line: 38, column: 4, scope: !7)
