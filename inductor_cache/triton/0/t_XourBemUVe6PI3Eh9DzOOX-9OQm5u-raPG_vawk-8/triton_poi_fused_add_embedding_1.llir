; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_3 = internal constant [8 x i8] c"unknown\00"
@assertFile_3 = internal constant [74 x i8] c"inductor_cache/or/cor6fixcbjnb3433zf5wc63ynlhrbewyspnouiregpes2kuq6ct7.py\00"
@assertMessage_3 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp27 < 13\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/or/cor6fixcbjnb3433zf5wc63ynlhrbewyspnouiregpes2kuq6ct7.py\00"
@assertMessage_2 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp19 < 32\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/or/cor6fixcbjnb3433zf5wc63ynlhrbewyspnouiregpes2kuq6ct7.py\00"
@assertMessage_1 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp11 < 7\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/or/cor6fixcbjnb3433zf5wc63ynlhrbewyspnouiregpes2kuq6ct7.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp4 < 24\00"

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_add_embedding_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !11 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %9 = shl i32 %8, 8, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 1, !dbg !14
  %12 = and i32 %11, 254, !dbg !14
  %13 = or disjoint i32 %9, %12, !dbg !15
  %14 = icmp slt i32 %13, 256, !dbg !16
  %.frozen = freeze i32 %13, !dbg !17
  %15 = sdiv i32 %.frozen, 4, !dbg !17
  %16 = srem i32 %15, 4, !dbg !18
  %17 = sdiv i32 %13, 16, !dbg !19
  %18 = shl nsw i32 %17, 4, !dbg !20
  %19 = add i32 %18, %16, !dbg !21
  %20 = add i32 %19, 12, !dbg !22
  %21 = sext i32 %20 to i64, !dbg !23
  %22 = getelementptr i64, ptr addrspace(1) %0, i64 %21, !dbg !23
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 %14) #3, !dbg !24
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 %14) #3, !dbg !24
  %25 = add i32 %19, 8, !dbg !25
  %26 = sext i32 %25 to i64, !dbg !26
  %27 = getelementptr i64, ptr addrspace(1) %0, i64 %26, !dbg !26
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %14) #3, !dbg !27
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %14) #3, !dbg !27
  %30 = add i32 %19, 4, !dbg !28
  %31 = sext i32 %30 to i64, !dbg !29
  %32 = getelementptr i64, ptr addrspace(1) %0, i64 %31, !dbg !29
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %14) #3, !dbg !30
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %14) #3, !dbg !30
  %35 = sext i32 %19 to i64, !dbg !31
  %36 = getelementptr i64, ptr addrspace(1) %0, i64 %35, !dbg !31
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 %14) #3, !dbg !32
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 %14) #3, !dbg !32
  %39 = add i64 %23, 24, !dbg !33
  %40 = icmp slt i64 %23, 0, !dbg !34
  %41 = select i1 %40, i64 %39, i64 %23, !dbg !35
  %42 = icmp ugt i64 %41, 23, !dbg !36
  %.not1 = and i1 %14, %42, !dbg !37
  br i1 %.not1, label %43, label %44, !dbg !37

43:                                               ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 36, ptr nonnull @assertFunc_0, i64 1), !dbg !37
  unreachable, !dbg !37

44:                                               ; preds = %7
  %45 = mul i32 %15, 4, !dbg !38
  %.decomposed = sub i32 %.frozen, %45, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %46 = sext i32 %.decomposed to i64, !dbg !39
  %.idx = shl i64 %41, 4, !dbg !40
  %47 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !40
  %48 = getelementptr float, ptr addrspace(1) %47, i64 %46, !dbg !40
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %14) #3, !dbg !41
  %50 = add i64 %28, 7, !dbg !42
  %51 = icmp slt i64 %28, 0, !dbg !43
  %52 = select i1 %51, i64 %50, i64 %28, !dbg !44
  %53 = icmp ugt i64 %52, 6, !dbg !45
  %.not2 = and i1 %14, %53, !dbg !46
  br i1 %.not2, label %54, label %55, !dbg !46

54:                                               ; preds = %44
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 42, ptr nonnull @assertFunc_1, i64 1), !dbg !46
  unreachable, !dbg !46

55:                                               ; preds = %44
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %.idx3 = shl i64 %52, 4, !dbg !47
  %56 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx3, !dbg !47
  %57 = getelementptr float, ptr addrspace(1) %56, i64 %46, !dbg !47
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %57, i1 %14) #3, !dbg !48
  %59 = lshr i64 %33, 58, !dbg !49
  %60 = and i64 %59, 32, !dbg !49
  %61 = add i64 %60, %33, !dbg !49
  %62 = icmp ugt i64 %61, 31, !dbg !50
  %.not4 = and i1 %14, %62, !dbg !51
  br i1 %.not4, label %63, label %64, !dbg !51

63:                                               ; preds = %55
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 49, ptr nonnull @assertFunc_2, i64 1), !dbg !51
  unreachable, !dbg !51

64:                                               ; preds = %55
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %.idx5 = shl i64 %61, 4, !dbg !52
  %65 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx5, !dbg !52
  %66 = getelementptr float, ptr addrspace(1) %65, i64 %46, !dbg !52
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 %14) #3, !dbg !53
  %68 = add i64 %37, 13, !dbg !54
  %69 = icmp slt i64 %37, 0, !dbg !55
  %70 = select i1 %69, i64 %68, i64 %37, !dbg !56
  %71 = icmp ugt i64 %70, 12, !dbg !57
  %.not6 = and i1 %14, %71, !dbg !58
  br i1 %.not6, label %72, label %73, !dbg !58

72:                                               ; preds = %64
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 56, ptr nonnull @assertFunc_3, i64 1), !dbg !58
  unreachable, !dbg !58

73:                                               ; preds = %64
  %74 = extractvalue { i32, i32 } %49, 1, !dbg !41
  %75 = bitcast i32 %74 to float, !dbg !41
  %76 = extractvalue { i32, i32 } %58, 1, !dbg !48
  %77 = bitcast i32 %76 to float, !dbg !48
  %78 = fadd float %75, %77, !dbg !59
  %79 = extractvalue { i32, i32 } %67, 1, !dbg !53
  %80 = bitcast i32 %79 to float, !dbg !53
  %81 = fadd float %78, %80, !dbg !60
  %82 = extractvalue { i32, i32 } %49, 0, !dbg !41
  %83 = bitcast i32 %82 to float, !dbg !41
  %84 = extractvalue { i32, i32 } %58, 0, !dbg !48
  %85 = bitcast i32 %84 to float, !dbg !48
  %86 = fadd float %83, %85, !dbg !59
  %87 = extractvalue { i32, i32 } %67, 0, !dbg !53
  %88 = bitcast i32 %87 to float, !dbg !53
  %89 = fadd float %86, %88, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %.idx7 = shl i64 %70, 4, !dbg !61
  %90 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx7, !dbg !61
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %46, !dbg !61
  %92 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %91, i1 %14) #3, !dbg !62
  %93 = extractvalue { i32, i32 } %92, 0, !dbg !62
  %94 = extractvalue { i32, i32 } %92, 1, !dbg !62
  %95 = bitcast i32 %93 to float, !dbg !62
  %96 = bitcast i32 %94 to float, !dbg !62
  %97 = fadd float %89, %95, !dbg !63
  %98 = fadd float %81, %96, !dbg !63
  %99 = fadd float %97, 0.000000e+00, !dbg !64
  %100 = fadd float %98, 0.000000e+00, !dbg !64
  %101 = sext i32 %13 to i64, !dbg !65
  %102 = getelementptr float, ptr addrspace(1) %5, i64 %101, !dbg !65
  %103 = bitcast float %99 to i32, !dbg !66
  %104 = bitcast float %100 to i32, !dbg !66
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %103, i32 %104, ptr addrspace(1) %102, i1 %14) #3, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cor6fixcbjnb3433zf5wc63ynlhrbewyspnouiregpes2kuq6ct7.py", directory: "inductor_cache/or")
!4 = !{ptr @triton_poi_fused_add_embedding_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_embedding_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_add_embedding_1", linkageName: "triton_poi_fused_add_embedding_1", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 24, column: 21, scope: !11)
!18 = !DILocation(line: 24, column: 26, scope: !11)
!19 = !DILocation(line: 25, column: 19, scope: !11)
!20 = !DILocation(line: 28, column: 43, scope: !11)
!21 = !DILocation(line: 28, column: 35, scope: !11)
!22 = !DILocation(line: 28, column: 40, scope: !11)
!23 = !DILocation(line: 28, column: 30, scope: !11)
!24 = !DILocation(line: 28, column: 48, scope: !11)
!25 = !DILocation(line: 29, column: 39, scope: !11)
!26 = !DILocation(line: 29, column: 30, scope: !11)
!27 = !DILocation(line: 29, column: 47, scope: !11)
!28 = !DILocation(line: 30, column: 40, scope: !11)
!29 = !DILocation(line: 30, column: 31, scope: !11)
!30 = !DILocation(line: 30, column: 48, scope: !11)
!31 = !DILocation(line: 31, column: 31, scope: !11)
!32 = !DILocation(line: 31, column: 44, scope: !11)
!33 = !DILocation(line: 33, column: 18, scope: !11)
!34 = !DILocation(line: 34, column: 18, scope: !11)
!35 = !DILocation(line: 35, column: 32, scope: !11)
!36 = !DILocation(line: 36, column: 37, scope: !11)
!37 = !DILocation(line: 36, column: 61, scope: !11)
!38 = !DILocation(line: 26, column: 19, scope: !11)
!39 = !DILocation(line: 37, column: 35, scope: !11)
!40 = !DILocation(line: 37, column: 30, scope: !11)
!41 = !DILocation(line: 37, column: 44, scope: !11)
!42 = !DILocation(line: 39, column: 18, scope: !11)
!43 = !DILocation(line: 40, column: 19, scope: !11)
!44 = !DILocation(line: 41, column: 34, scope: !11)
!45 = !DILocation(line: 42, column: 38, scope: !11)
!46 = !DILocation(line: 42, column: 62, scope: !11)
!47 = !DILocation(line: 43, column: 31, scope: !11)
!48 = !DILocation(line: 43, column: 46, scope: !11)
!49 = !DILocation(line: 48, column: 35, scope: !11)
!50 = !DILocation(line: 49, column: 38, scope: !11)
!51 = !DILocation(line: 49, column: 63, scope: !11)
!52 = !DILocation(line: 50, column: 31, scope: !11)
!53 = !DILocation(line: 50, column: 46, scope: !11)
!54 = !DILocation(line: 53, column: 20, scope: !11)
!55 = !DILocation(line: 54, column: 20, scope: !11)
!56 = !DILocation(line: 55, column: 35, scope: !11)
!57 = !DILocation(line: 56, column: 38, scope: !11)
!58 = !DILocation(line: 56, column: 63, scope: !11)
!59 = !DILocation(line: 44, column: 19, scope: !11)
!60 = !DILocation(line: 51, column: 20, scope: !11)
!61 = !DILocation(line: 57, column: 31, scope: !11)
!62 = !DILocation(line: 57, column: 46, scope: !11)
!63 = !DILocation(line: 58, column: 20, scope: !11)
!64 = !DILocation(line: 60, column: 20, scope: !11)
!65 = !DILocation(line: 61, column: 25, scope: !11)
!66 = !DILocation(line: 61, column: 37, scope: !11)
!67 = !DILocation(line: 61, column: 4, scope: !11)
