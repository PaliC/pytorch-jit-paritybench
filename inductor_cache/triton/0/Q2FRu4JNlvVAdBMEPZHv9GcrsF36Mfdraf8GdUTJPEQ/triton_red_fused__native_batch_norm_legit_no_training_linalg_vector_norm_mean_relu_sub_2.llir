; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 12, !dbg !12
  %12 = lshr i32 %8, 5, !dbg !12
  %13 = lshr i32 %8, 6, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %14, 8, !dbg !12
  %16 = and i32 %8, 15, !dbg !12
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %14, !dbg !13
  %19 = or disjoint i32 %7, %15, !dbg !13
  %20 = or disjoint i32 %7, %16, !dbg !13
  %21 = and i32 %10, 252, !dbg !14
  %22 = lshr i32 %8, 2, !dbg !14
  %.frozen = freeze i32 %17, !dbg !15
  %23 = sdiv i32 %.frozen, 4096, !dbg !15
  %24 = mul i32 %23, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = sdiv i32 %18, 4096, !dbg !15
  %26 = sdiv i32 %19, 4096, !dbg !15
  %27 = shl i32 %22, 12, !dbg !17
  %28 = and i32 %27, 520192, !dbg !17
  %29 = shl i32 %23, 20, !dbg !18
  %30 = add i32 %29, %.decomposed, !dbg !19
  %31 = add i32 %30, %28, !dbg !20
  %32 = add i32 %30, 524288, !dbg !19
  %33 = add nuw i32 %32, %28, !dbg !20
  %34 = sext i32 %31 to i64, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !21
  %36 = sext i32 %33 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !21
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !22
  %48 = shl i32 %8, 10, !dbg !22
  %49 = and i32 %48, 3072, !dbg !22
  %50 = and i32 %22, 127, !dbg !22
  %51 = or disjoint i32 %49, %50, !dbg !22
  %52 = and i32 %10, 2044, !dbg !22
  %53 = lshr exact i32 %49, 4, !dbg !22
  %54 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %53, !dbg !22
  %55 = getelementptr float, ptr addrspace(3) %54, i32 %51, !dbg !22
  %56 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %56, i1 true) #3, !dbg !22
  %57 = or disjoint i32 %51, 256, !dbg !22
  %58 = lshr i32 %57, 6, !dbg !22
  %59 = and i32 %58, 52, !dbg !22
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i32 %59, !dbg !22
  %61 = getelementptr float, ptr addrspace(3) %60, i32 %57, !dbg !22
  %62 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 true) #3, !dbg !22
  %63 = or disjoint i32 %51, 512, !dbg !22
  %64 = lshr i32 %63, 6, !dbg !22
  %65 = and i32 %64, 56, !dbg !22
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %65, !dbg !22
  %67 = getelementptr float, ptr addrspace(3) %66, i32 %63, !dbg !22
  %68 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #3, !dbg !22
  %69 = or disjoint i32 %51, 768, !dbg !22
  %70 = lshr i32 %69, 6, !dbg !22
  %71 = and i32 %70, 60, !dbg !22
  %72 = getelementptr float, ptr addrspace(3) @global_smem, i32 %71, !dbg !22
  %73 = getelementptr float, ptr addrspace(3) %72, i32 %69, !dbg !22
  %74 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #3, !dbg !22
  %75 = or disjoint i32 %51, 128, !dbg !22
  %76 = getelementptr float, ptr addrspace(3) %54, i32 %75, !dbg !22
  %77 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #3, !dbg !22
  %78 = or disjoint i32 %51, 384, !dbg !22
  %79 = lshr i32 %78, 6, !dbg !22
  %80 = and i32 %79, 52, !dbg !22
  %81 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80, !dbg !22
  %82 = getelementptr float, ptr addrspace(3) %81, i32 %78, !dbg !22
  %83 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #3, !dbg !22
  %84 = or disjoint i32 %51, 640, !dbg !22
  %85 = lshr i32 %84, 6, !dbg !22
  %86 = and i32 %85, 56, !dbg !22
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i32 %86, !dbg !22
  %88 = getelementptr float, ptr addrspace(3) %87, i32 %84, !dbg !22
  %89 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #3, !dbg !22
  %90 = or disjoint i32 %51, 896, !dbg !22
  %91 = lshr i32 %90, 6, !dbg !22
  %92 = and i32 %91, 60, !dbg !22
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i32 %92, !dbg !22
  %94 = getelementptr float, ptr addrspace(3) %93, i32 %90, !dbg !22
  %95 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %96 = lshr i32 %10, 6, !dbg !22
  %97 = and i32 %96, 28, !dbg !22
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %97, !dbg !22
  %99 = getelementptr inbounds float, ptr addrspace(3) %98, i32 %52, !dbg !22
  %100 = getelementptr inbounds i8, ptr addrspace(3) %99, i32 8, !dbg !22
  %101 = or disjoint i32 %52, 2048, !dbg !22
  %102 = lshr i32 %101, 6, !dbg !22
  %103 = and i32 %102, 60, !dbg !22
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %103, !dbg !22
  %105 = getelementptr inbounds float, ptr addrspace(3) %104, i32 %101, !dbg !22
  %106 = getelementptr inbounds i8, ptr addrspace(3) %105, i32 8, !dbg !22
  %107 = shl nsw i32 %25, 8, !dbg !23
  %108 = shl nsw i32 %26, 8, !dbg !23
  %109 = or disjoint i32 %107, %21, !dbg !24
  %110 = or disjoint i32 %108, %21, !dbg !24
  %111 = sext i32 %109 to i64, !dbg !25
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !25
  %113 = sext i32 %110 to i64, !dbg !25
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !25
  %115 = load <2 x float>, ptr addrspace(3) %100, align 8, !dbg !22
  %116 = load <2 x float>, ptr addrspace(3) %99, align 16, !dbg !22
  %117 = load <2 x float>, ptr addrspace(3) %106, align 8, !dbg !22
  %118 = load <2 x float>, ptr addrspace(3) %105, align 16, !dbg !22
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %112, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !26
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !26
  %121 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !26
  %122 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !26
  %123 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !26
  %124 = bitcast i32 %120 to float, !dbg !26
  %125 = bitcast i32 %121 to float, !dbg !26
  %126 = bitcast i32 %122 to float, !dbg !26
  %127 = bitcast i32 %123 to float, !dbg !26
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !26
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !26
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !26
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !26
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !26
  %133 = bitcast i32 %129 to float, !dbg !26
  %134 = bitcast i32 %130 to float, !dbg !26
  %135 = bitcast i32 %131 to float, !dbg !26
  %136 = bitcast i32 %132 to float, !dbg !26
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float 4.096000e+03) #3, !dbg !27
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float 4.096000e+03) #3, !dbg !27
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float 4.096000e+03) #3, !dbg !27
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float 4.096000e+03) #3, !dbg !27
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float 4.096000e+03) #3, !dbg !27
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float 4.096000e+03) #3, !dbg !27
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float 4.096000e+03) #3, !dbg !27
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float 4.096000e+03) #3, !dbg !27
  %145 = insertelement <2 x float> poison, float %137, i64 0, !dbg !28
  %146 = insertelement <2 x float> %145, float %138, i64 1, !dbg !28
  %147 = fsub <2 x float> %116, %146, !dbg !28
  %148 = insertelement <2 x float> poison, float %139, i64 0, !dbg !28
  %149 = insertelement <2 x float> %148, float %140, i64 1, !dbg !28
  %150 = fsub <2 x float> %115, %149, !dbg !28
  %151 = insertelement <2 x float> poison, float %141, i64 0, !dbg !28
  %152 = insertelement <2 x float> %151, float %142, i64 1, !dbg !28
  %153 = fsub <2 x float> %118, %152, !dbg !28
  %154 = insertelement <2 x float> poison, float %143, i64 0, !dbg !28
  %155 = insertelement <2 x float> %154, float %144, i64 1, !dbg !28
  %156 = fsub <2 x float> %117, %155, !dbg !28
  %157 = fmul <2 x float> %147, %147, !dbg !29
  %158 = fmul <2 x float> %150, %150, !dbg !29
  %159 = fmul <2 x float> %153, %153, !dbg !29
  %160 = fmul <2 x float> %156, %156, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %shift = shufflevector <2 x float> %157, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !34
  %161 = fadd <2 x float> %157, %shift, !dbg !34
  %162 = fadd <2 x float> %161, %158, !dbg !34
  %shift10 = shufflevector <2 x float> %158, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !34
  %163 = fadd <2 x float> %162, %shift10, !dbg !34
  %164 = extractelement <2 x float> %163, i64 0, !dbg !34
  %shift11 = shufflevector <2 x float> %159, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !34
  %165 = fadd <2 x float> %159, %shift11, !dbg !34
  %166 = fadd <2 x float> %165, %160, !dbg !34
  %shift12 = shufflevector <2 x float> %160, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !34
  %167 = fadd <2 x float> %166, %shift12, !dbg !34
  %168 = extractelement <2 x float> %167, i64 0, !dbg !34
  %169 = bitcast float %164 to i32, !dbg !30
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 16, i32 31), !dbg !30
  %171 = bitcast i32 %170 to float, !dbg !30
  %172 = fadd float %164, %171, !dbg !34
  %173 = bitcast float %172 to i32, !dbg !30
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 8, i32 31), !dbg !30
  %175 = bitcast i32 %174 to float, !dbg !30
  %176 = fadd float %172, %175, !dbg !34
  %177 = bitcast float %176 to i32, !dbg !30
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 4, i32 31), !dbg !30
  %179 = bitcast i32 %178 to float, !dbg !30
  %180 = fadd float %176, %179, !dbg !34
  %181 = bitcast float %180 to i32, !dbg !30
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 2, i32 31), !dbg !30
  %183 = bitcast i32 %182 to float, !dbg !30
  %184 = fadd float %180, %183, !dbg !34
  %185 = bitcast float %184 to i32, !dbg !30
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 1, i32 31), !dbg !30
  %187 = bitcast i32 %186 to float, !dbg !30
  %188 = fadd float %184, %187, !dbg !34
  %189 = bitcast float %168 to i32, !dbg !30
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 16, i32 31), !dbg !30
  %191 = bitcast i32 %190 to float, !dbg !30
  %192 = fadd float %168, %191, !dbg !34
  %193 = bitcast float %192 to i32, !dbg !30
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 8, i32 31), !dbg !30
  %195 = bitcast i32 %194 to float, !dbg !30
  %196 = fadd float %192, %195, !dbg !34
  %197 = bitcast float %196 to i32, !dbg !30
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 4, i32 31), !dbg !30
  %199 = bitcast i32 %198 to float, !dbg !30
  %200 = fadd float %196, %199, !dbg !34
  %201 = bitcast float %200 to i32, !dbg !30
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 2, i32 31), !dbg !30
  %203 = bitcast i32 %202 to float, !dbg !30
  %204 = fadd float %200, %203, !dbg !34
  %205 = bitcast float %204 to i32, !dbg !30
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 1, i32 31), !dbg !30
  %207 = bitcast i32 %206 to float, !dbg !30
  %208 = fadd float %204, %207, !dbg !34
  %209 = icmp eq i32 %9, 0, !dbg !30
  %210 = and i32 %12, 1, !dbg !30
  %211 = shl nuw nsw i32 %14, 1, !dbg !30
  %212 = or disjoint i32 %211, %210, !dbg !30
  %213 = getelementptr float, ptr addrspace(3) @global_smem, i32 %212, !dbg !30
  %214 = bitcast float %188 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %214, i1 %209) #3, !dbg !30
  %215 = shl nuw nsw i32 %15, 1, !dbg !30
  %216 = or disjoint i32 %215, %210, !dbg !30
  %217 = getelementptr float, ptr addrspace(3) @global_smem, i32 %216, !dbg !30
  %218 = bitcast float %208 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %218, i1 %209) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %219 = icmp slt i32 %8, 32, !dbg !30
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !30
  %221 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %220, i1 %219) #3, !dbg !30
  %222 = bitcast i32 %221 to float, !dbg !30
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 1, i32 31), !dbg !30
  %224 = bitcast i32 %223 to float, !dbg !30
  %225 = fadd float %222, %224, !dbg !34
  %226 = and i32 %8, 1, !dbg !30
  %227 = icmp eq i32 %226, 0, !dbg !30
  %228 = and i1 %219, %227, !dbg !30
  %229 = bitcast float %225 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %229, i1 %228) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i32 %211, !dbg !30
  %231 = load i32, ptr addrspace(3) %230, align 8, !dbg !30
  %232 = getelementptr float, ptr addrspace(3) @global_smem, i32 %215, !dbg !30
  %233 = load i32, ptr addrspace(3) %232, align 8, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %234 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !36
  %235 = insertelement <1 x i32> poison, i32 %231, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 true) #3, !dbg !36
  %236 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !36
  %237 = insertelement <1 x i32> poison, i32 %233, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 true) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %238 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !36
  %239 = load i32, ptr addrspace(3) %238, align 4, !dbg !36
  %240 = sext i32 %20 to i64, !dbg !37
  %241 = getelementptr float, ptr addrspace(1) %2, i64 %240, !dbg !37
  %242 = lshr i32 %9, 4, !dbg !38
  %243 = shl nuw nsw i32 %12, 1, !dbg !38
  %244 = and i32 %243, 30, !dbg !38
  %245 = or disjoint i32 %244, %242, !dbg !38
  %246 = icmp eq i32 %245, 0, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %239, ptr addrspace(1) %241, i1 %246) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py", directory: "inductor_cache/y5")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2", linkageName: "triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 44, scope: !7)
!18 = !DILocation(line: 34, column: 57, scope: !7)
!19 = !DILocation(line: 34, column: 39, scope: !7)
!20 = !DILocation(line: 34, column: 49, scope: !7)
!21 = !DILocation(line: 34, column: 34, scope: !7)
!22 = !DILocation(line: 34, column: 62, scope: !7)
!23 = !DILocation(line: 35, column: 43, scope: !7)
!24 = !DILocation(line: 35, column: 39, scope: !7)
!25 = !DILocation(line: 35, column: 34, scope: !7)
!26 = !DILocation(line: 35, column: 48, scope: !7)
!27 = !DILocation(line: 37, column: 22, scope: !7)
!28 = !DILocation(line: 38, column: 22, scope: !7)
!29 = !DILocation(line: 39, column: 22, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 43, column: 25, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !33)
!35 = distinct !DILexicalBlockFile(scope: !31, file: !32, discriminator: 0)
!36 = !DILocation(line: 43, column: 28, scope: !7)
!37 = !DILocation(line: 44, column: 25, scope: !7)
!38 = !DILocation(line: 44, column: 36, scope: !7)
!39 = !DILocation(line: 44, column: 4, scope: !7)
