; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/hz/chz3s4khgzv3hqflkhsfd2oygqzhyqha2g33q72kgrfs7xwzdw4l.py\00"
@assertMessage_0 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp7 < 1024\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_add_embedding_permute_sub_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !11 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !12
  %9 = shl i32 %8, 8, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = and i32 %10, 127, !dbg !14
  %12 = or disjoint i32 %11, 128, !dbg !14
  %13 = shl i32 %10, 1, !dbg !14
  %14 = and i32 %13, 254, !dbg !14
  %15 = or disjoint i32 %9, %11, !dbg !15
  %16 = or disjoint i32 %9, %12, !dbg !15
  %17 = or disjoint i32 %9, %14, !dbg !15
  %18 = icmp slt i32 %15, 256, !dbg !16
  %19 = icmp slt i32 %16, 256, !dbg !16
  %20 = icmp slt i32 %17, 256, !dbg !16
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !17
  %22 = shl i32 %21, 1, !dbg !18
  %23 = icmp slt i32 %22, 256, !dbg !19
  %24 = srem i32 %17, 64, !dbg !20
  %.frozen9 = freeze i32 %15, !dbg !21
  %25 = sdiv i32 %.frozen9, 64, !dbg !21
  %.frozen = freeze i32 %16, !dbg !21
  %26 = sdiv i32 %.frozen, 64, !dbg !21
  %27 = shl i32 %15, 8, !dbg !22
  %28 = shl i32 %16, 8, !dbg !22
  %29 = add i32 %27, %22, !dbg !23
  %30 = add i32 %28, %22, !dbg !23
  %31 = sext i32 %29 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = sext i32 %30 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = and i1 %23, %18, !dbg !25
  %36 = and i1 %23, %19, !dbg !25
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %35) #3, !dbg !26
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %36) #3, !dbg !26
  %39 = sext i32 %24 to i64, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !27
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %20) #3, !dbg !28
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !28
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !28
  %44 = shl i32 %25, 8, !dbg !29
  %45 = shl i32 %26, 8, !dbg !29
  %46 = add i32 %44, %22, !dbg !30
  %47 = add i32 %45, %22, !dbg !30
  %48 = sext i32 %46 to i64, !dbg !31
  %49 = getelementptr i64, ptr addrspace(1) %2, i64 %48, !dbg !31
  %50 = sext i32 %47 to i64, !dbg !31
  %51 = getelementptr i64, ptr addrspace(1) %2, i64 %50, !dbg !31
  %52 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %49, i1 %35) #3, !dbg !32
  %53 = extractvalue { i64, i64 } %52, 0, !dbg !32
  %54 = extractvalue { i64, i64 } %52, 1, !dbg !32
  %55 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %51, i1 %36) #3, !dbg !32
  %56 = extractvalue { i64, i64 } %55, 0, !dbg !32
  %57 = extractvalue { i64, i64 } %55, 1, !dbg !32
  %.idx = shl nuw nsw i32 %14, 3, !dbg !33
  %58 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !33
  %59 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %59, i1 true) #3, !dbg !33
  %60 = shl nuw nsw i32 %14, 1, !dbg !33
  %61 = or disjoint i32 %60, 2, !dbg !33
  %62 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %61, !dbg !33
  %63 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 true) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %64 = insertelement <2 x i64> poison, i64 %53, i64 0, !dbg !34
  %65 = insertelement <2 x i64> %64, i64 %54, i64 1, !dbg !34
  %66 = lshr <2 x i64> %65, splat (i64 53), !dbg !34
  %67 = and <2 x i64> %66, splat (i64 1024), !dbg !34
  %68 = add <2 x i64> %67, %65, !dbg !34
  %69 = insertelement <2 x i64> poison, i64 %56, i64 0, !dbg !34
  %70 = insertelement <2 x i64> %69, i64 %57, i64 1, !dbg !34
  %71 = lshr <2 x i64> %70, splat (i64 53), !dbg !34
  %72 = and <2 x i64> %71, splat (i64 1024), !dbg !34
  %73 = add <2 x i64> %72, %70, !dbg !34
  %74 = shufflevector <2 x i64> %73, <2 x i64> %68, <2 x i32> <i32 0, i32 2>, !dbg !35
  %75 = shufflevector <2 x i64> %73, <2 x i64> %68, <2 x i32> <i32 1, i32 3>, !dbg !35
  %76 = or <2 x i64> %74, %75, !dbg !35
  %77 = icmp ugt <2 x i64> %76, splat (i64 1023), !dbg !35
  %78 = extractelement <2 x i1> %77, i64 1, !dbg !35
  %79 = and i1 %35, %78, !dbg !35
  %80 = extractelement <2 x i1> %77, i64 0, !dbg !35
  %81 = and i1 %36, %80, !dbg !35
  %82 = or i1 %79, %81, !dbg !35
  br i1 %82, label %83, label %84, !dbg !35

83:                                               ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !35
  unreachable, !dbg !35

84:                                               ; preds = %7
  %85 = extractvalue { i32, i32 } %38, 1, !dbg !26
  %86 = bitcast i32 %85 to float, !dbg !26
  %.idx2 = shl nuw nsw i32 %12, 3, !dbg !33
  %87 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !33
  %88 = load float, ptr addrspace(3) %87, align 8, !dbg !33
  %89 = fadd float %88, %86, !dbg !33
  %90 = extractvalue { i32, i32 } %38, 0, !dbg !26
  %91 = bitcast i32 %90 to float, !dbg !26
  %92 = fadd float %88, %91, !dbg !33
  %93 = extractvalue { i32, i32 } %37, 1, !dbg !26
  %94 = bitcast i32 %93 to float, !dbg !26
  %.idx1 = shl nuw nsw i32 %11, 3, !dbg !33
  %95 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !33
  %96 = load float, ptr addrspace(3) %95, align 8, !dbg !33
  %97 = fadd float %96, %94, !dbg !33
  %98 = extractvalue { i32, i32 } %37, 0, !dbg !26
  %99 = bitcast i32 %98 to float, !dbg !26
  %100 = fadd float %96, %99, !dbg !33
  %101 = mul i32 %26, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %101, !dbg !20
  %102 = mul i32 %25, 64, !dbg !20
  %.decomposed10 = sub i32 %.frozen9, %102, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %103 = shl nsw i32 %.decomposed10, 10, !dbg !36
  %104 = shl nsw i32 %.decomposed, 10, !dbg !36
  %105 = sext i32 %103 to i64, !dbg !37
  %106 = sext i32 %104 to i64, !dbg !37
  %107 = extractelement <2 x i64> %68, i64 0, !dbg !38
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %107, !dbg !38
  %109 = getelementptr float, ptr addrspace(1) %108, i64 %105, !dbg !38
  %110 = extractelement <2 x i64> %68, i64 1, !dbg !38
  %111 = getelementptr float, ptr addrspace(1) %3, i64 %110, !dbg !38
  %112 = getelementptr float, ptr addrspace(1) %111, i64 %105, !dbg !38
  %113 = extractelement <2 x i64> %73, i64 0, !dbg !38
  %114 = getelementptr float, ptr addrspace(1) %3, i64 %113, !dbg !38
  %115 = getelementptr float, ptr addrspace(1) %114, i64 %106, !dbg !38
  %116 = extractelement <2 x i64> %73, i64 1, !dbg !38
  %117 = getelementptr float, ptr addrspace(1) %3, i64 %116, !dbg !38
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %106, !dbg !38
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %35) #3, !dbg !39
  %120 = bitcast i32 %119 to float, !dbg !39
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %35) #3, !dbg !39
  %122 = bitcast i32 %121 to float, !dbg !39
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %36) #3, !dbg !39
  %124 = bitcast i32 %123 to float, !dbg !39
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %36) #3, !dbg !39
  %126 = bitcast i32 %125 to float, !dbg !39
  %127 = fsub float %120, %100, !dbg !40
  %128 = fsub float %122, %97, !dbg !40
  %129 = fsub float %124, %92, !dbg !40
  %130 = fsub float %126, %89, !dbg !40
  %131 = fadd float %100, %127, !dbg !41
  %132 = fadd float %97, %128, !dbg !41
  %133 = fadd float %92, %129, !dbg !41
  %134 = fadd float %89, %130, !dbg !41
  %135 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !42
  %136 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !42
  %137 = bitcast float %131 to i32, !dbg !43
  %138 = bitcast float %132 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %137, i32 %138, ptr addrspace(1) %135, i1 %35) #3, !dbg !43
  %139 = bitcast float %133 to i32, !dbg !43
  %140 = bitcast float %134 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %139, i32 %140, ptr addrspace(1) %136, i1 %36) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chz3s4khgzv3hqflkhsfd2oygqzhyqha2g33q72kgrfs7xwzdw4l.py", directory: "inductor_cache/hz")
!4 = !{ptr @triton_poi_fused_add_embedding_permute_sub_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_embedding_permute_sub_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_add_embedding_permute_sub_11", linkageName: "triton_poi_fused_add_embedding_permute_sub_11", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 22, column: 28, scope: !11)
!13 = !DILocation(line: 22, column: 33, scope: !11)
!14 = !DILocation(line: 23, column: 44, scope: !11)
!15 = !DILocation(line: 23, column: 23, scope: !11)
!16 = !DILocation(line: 24, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 28, scope: !11)
!18 = !DILocation(line: 25, column: 33, scope: !11)
!19 = !DILocation(line: 27, column: 21, scope: !11)
!20 = !DILocation(line: 30, column: 19, scope: !11)
!21 = !DILocation(line: 31, column: 19, scope: !11)
!22 = !DILocation(line: 32, column: 39, scope: !11)
!23 = !DILocation(line: 32, column: 35, scope: !11)
!24 = !DILocation(line: 32, column: 30, scope: !11)
!25 = !DILocation(line: 32, column: 52, scope: !11)
!26 = !DILocation(line: 32, column: 44, scope: !11)
!27 = !DILocation(line: 33, column: 30, scope: !11)
!28 = !DILocation(line: 33, column: 35, scope: !11)
!29 = !DILocation(line: 34, column: 39, scope: !11)
!30 = !DILocation(line: 34, column: 35, scope: !11)
!31 = !DILocation(line: 34, column: 30, scope: !11)
!32 = !DILocation(line: 34, column: 44, scope: !11)
!33 = !DILocation(line: 35, column: 18, scope: !11)
!34 = !DILocation(line: 39, column: 32, scope: !11)
!35 = !DILocation(line: 40, column: 71, scope: !11)
!36 = !DILocation(line: 41, column: 42, scope: !11)
!37 = !DILocation(line: 41, column: 37, scope: !11)
!38 = !DILocation(line: 41, column: 30, scope: !11)
!39 = !DILocation(line: 41, column: 47, scope: !11)
!40 = !DILocation(line: 42, column: 19, scope: !11)
!41 = !DILocation(line: 43, column: 19, scope: !11)
!42 = !DILocation(line: 44, column: 25, scope: !11)
!43 = !DILocation(line: 44, column: 46, scope: !11)
!44 = !DILocation(line: 44, column: 4, scope: !11)
