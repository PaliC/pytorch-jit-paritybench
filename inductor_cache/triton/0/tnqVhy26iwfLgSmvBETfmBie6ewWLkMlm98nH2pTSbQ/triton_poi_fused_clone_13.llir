; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_clone_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 7, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 126, !dbg !12
  %14 = and i32 %11, 127, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = icmp slt i32 %15, 256, !dbg !14
  %18 = icmp slt i32 %16, 256, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !15
  %20 = shl i32 %19, 1, !dbg !16
  %21 = lshr i32 %11, 6, !dbg !17
  %.lobit = and i32 %21, 1, !dbg !17
  %22 = or disjoint i32 %20, %.lobit, !dbg !18
  %23 = icmp slt i32 %22, 2, !dbg !19
  %24 = ashr exact i32 %15, 1, !dbg !20
  %25 = sdiv i32 %15, 4, !dbg !21
  %26 = sdiv i32 %15, 8, !dbg !22
  %27 = sdiv i32 %16, 8, !dbg !22
  %28 = sdiv i32 %16, 64, !dbg !23
  %29 = srem i32 %27, 8, !dbg !24
  %30 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !25
  %31 = insertelement <2 x i32> %30, i32 %24, i64 1, !dbg !25
  %32 = srem <2 x i32> %31, splat (i32 2), !dbg !25
  %33 = insertelement <4 x i32> poison, i32 %26, i64 0, !dbg !26
  %34 = insertelement <4 x i32> %33, i32 %22, i64 1, !dbg !26
  %35 = shufflevector <2 x i32> %32, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !26
  %36 = shufflevector <4 x i32> %34, <4 x i32> %35, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !26
  %37 = shl <4 x i32> %36, <i32 4, i32 2, i32 1, i32 3>, !dbg !26
  %38 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %37), !dbg !27
  %39 = sext i32 %38 to i64, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !28
  %41 = and i1 %17, %23, !dbg !29
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %41) #5, !dbg !30
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !30
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !30
  %45 = shl i32 %11, 2, !dbg !30
  %46 = and i32 %45, 252, !dbg !30
  %47 = or disjoint i32 %46, %.lobit, !dbg !30
  %48 = and i32 %12, 254, !dbg !30
  %49 = lshr exact i32 %46, 1, !dbg !30
  %50 = getelementptr float, ptr addrspace(3) @global_smem, i32 %49, !dbg !30
  %51 = getelementptr float, ptr addrspace(3) %50, i32 %47, !dbg !30
  %52 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %52, i1 true) #5, !dbg !30
  %53 = or disjoint i32 %47, 2, !dbg !30
  %54 = lshr i32 %53, 1, !dbg !30
  %55 = getelementptr float, ptr addrspace(3) @global_smem, i32 %54, !dbg !30
  %56 = getelementptr float, ptr addrspace(3) %55, i32 %53, !dbg !30
  %57 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 true) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %58 = lshr exact i32 %48, 1, !dbg !30
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %58, !dbg !30
  %60 = getelementptr inbounds float, ptr addrspace(3) %59, i32 %48, !dbg !30
  %61 = load float, ptr addrspace(3) %60, align 4, !dbg !30
  %62 = or disjoint i32 %48, 1, !dbg !30
  %63 = getelementptr inbounds float, ptr addrspace(3) %59, i32 %62, !dbg !30
  %64 = load float, ptr addrspace(3) %63, align 4, !dbg !30
  %65 = sext i32 %28 to i64, !dbg !31
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !31
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %18) #5, !dbg !32
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !33
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %18) #5, !dbg !34
  %70 = bitcast i32 %69 to float, !dbg !34
  %71 = sext i32 %29 to i64, !dbg !35
  %72 = getelementptr float, ptr addrspace(1) %3, i64 %71, !dbg !35
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %18) #5, !dbg !36
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %71, !dbg !37
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %18) #5, !dbg !38
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %70, float 1.280000e+02) #5, !dbg !39
  %77 = fadd float %76, 0x3EE4F8B580000000, !dbg !40
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %78, 0, !dbg !41
  br i1 %.not.i, label %81, label %79, !dbg !41

79:                                               ; preds = %8
  %80 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %77), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

81:                                               ; preds = %8
  %82 = tail call float @llvm.nvvm.rsqrt.approx.f(float %77), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %79, %81
  %.0.i = phi float [ %80, %79 ], [ %82, %81 ], !dbg !41
  %83 = bitcast i32 %67 to float, !dbg !32
  %84 = fsub float %64, %83, !dbg !42
  %85 = fsub float %61, %83, !dbg !42
  %86 = bitcast i32 %75 to float, !dbg !38
  %87 = bitcast i32 %73 to float, !dbg !36
  %88 = icmp slt i32 %20, 2, !dbg !19
  %89 = and i1 %88, %18, !dbg !29
  %90 = fmul float %85, %.0.i, !dbg !43
  %91 = fmul float %84, %.0.i, !dbg !43
  %92 = fmul float %90, %87, !dbg !44
  %93 = fmul float %91, %87, !dbg !44
  %94 = fadd float %92, %86, !dbg !45
  %95 = fadd float %93, %86, !dbg !45
  %96 = add i32 %16, %19, !dbg !46
  %97 = shl i32 %96, 1, !dbg !46
  %98 = sext i32 %97 to i64, !dbg !47
  %99 = getelementptr float, ptr addrspace(1) %5, i64 %98, !dbg !47
  %100 = bitcast float %94 to i32, !dbg !48
  %101 = bitcast float %95 to i32, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %100, i32 %101, ptr addrspace(1) %99, i1 %89) #5, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czdkcs4ylsqbgu2tajtb2zn6huzl3w7fxbgnyvvmhueaqalpofrg.py", directory: "inductor_cache/zd")
!4 = !{ptr @triton_poi_fused_clone_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_13", linkageName: "triton_poi_fused_clone_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 21, scope: !7)
!21 = !DILocation(line: 31, column: 21, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 26, scope: !7)
!25 = !DILocation(line: 31, column: 26, scope: !7)
!26 = !DILocation(line: 36, column: 59, scope: !7)
!27 = !DILocation(line: 36, column: 56, scope: !7)
!28 = !DILocation(line: 36, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 72, scope: !7)
!30 = !DILocation(line: 36, column: 64, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 35, scope: !7)
!33 = !DILocation(line: 38, column: 30, scope: !7)
!34 = !DILocation(line: 38, column: 35, scope: !7)
!35 = !DILocation(line: 39, column: 31, scope: !7)
!36 = !DILocation(line: 39, column: 36, scope: !7)
!37 = !DILocation(line: 40, column: 31, scope: !7)
!38 = !DILocation(line: 40, column: 36, scope: !7)
!39 = !DILocation(line: 43, column: 18, scope: !7)
!40 = !DILocation(line: 45, column: 18, scope: !7)
!41 = !DILocation(line: 46, column: 27, scope: !7)
!42 = !DILocation(line: 41, column: 18, scope: !7)
!43 = !DILocation(line: 47, column: 18, scope: !7)
!44 = !DILocation(line: 48, column: 19, scope: !7)
!45 = !DILocation(line: 49, column: 20, scope: !7)
!46 = !DILocation(line: 50, column: 30, scope: !7)
!47 = !DILocation(line: 50, column: 25, scope: !7)
!48 = !DILocation(line: 50, column: 44, scope: !7)
!49 = !DILocation(line: 50, column: 4, scope: !7)
