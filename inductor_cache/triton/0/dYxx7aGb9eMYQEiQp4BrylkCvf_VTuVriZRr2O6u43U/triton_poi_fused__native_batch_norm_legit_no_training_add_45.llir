; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_45(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 7, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 127, !dbg !12
  %14 = or disjoint i32 %11, %13, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %16 = shl i32 %15, 2, !dbg !15
  %17 = icmp slt i32 %16, 4, !dbg !16
  %18 = add i32 %14, %15, !dbg !17
  %19 = shl i32 %18, 2, !dbg !17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !18
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 %17) #4, !dbg !19
  %23 = sext i32 %16 to i64, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !20
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 %17) #4, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !22
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 %17) #4, !dbg !23
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !23
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !23
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !23
  %32 = bitcast i32 %28 to float, !dbg !23
  %33 = bitcast i32 %29 to float, !dbg !23
  %34 = bitcast i32 %30 to float, !dbg !23
  %35 = bitcast i32 %31 to float, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !24
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %17) #4, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !26
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %17) #4, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !28
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %17) #4, !dbg !29
  %42 = fadd float %32, 0x3EE4F8B580000000, !dbg !30
  %43 = fadd float %33, 0x3EE4F8B580000000, !dbg !30
  %44 = fadd float %34, 0x3EE4F8B580000000, !dbg !30
  %45 = fadd float %35, 0x3EE4F8B580000000, !dbg !30
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %46, 0, !dbg !31
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i = icmp eq i32 %47, 0, !dbg !31
  br i1 %.not.i, label %53, label %48, !dbg !31

48:                                               ; preds = %9
  br i1 %.not1.i, label %51, label %49, !dbg !31

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

53:                                               ; preds = %9
  br i1 %.not1.i, label %56, label %54, !dbg !31

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %49, %51, %54, %56
  %.0.i = phi float [ %50, %49 ], [ %52, %51 ], [ %55, %54 ], [ %57, %56 ], !dbg !31
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i8 = icmp eq i32 %58, 0, !dbg !31
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i11 = icmp eq i32 %59, 0, !dbg !31
  br i1 %.not.i8, label %65, label %60, !dbg !31

60:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %63, label %61, !dbg !31

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %43) #4, !dbg !31
  br label %__nv_sqrtf.exit12, !dbg !31

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %43) #4, !dbg !31
  br label %__nv_sqrtf.exit12, !dbg !31

65:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %68, label %66, !dbg !31

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %43) #4, !dbg !31
  br label %__nv_sqrtf.exit12, !dbg !31

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %43) #4, !dbg !31
  br label %__nv_sqrtf.exit12, !dbg !31

__nv_sqrtf.exit12:                                ; preds = %61, %63, %66, %68
  %.0.i10 = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !31
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i13 = icmp eq i32 %70, 0, !dbg !31
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i16 = icmp eq i32 %71, 0, !dbg !31
  br i1 %.not.i13, label %77, label %72, !dbg !31

72:                                               ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %75, label %73, !dbg !31

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #4, !dbg !31
  br label %__nv_sqrtf.exit17, !dbg !31

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #4, !dbg !31
  br label %__nv_sqrtf.exit17, !dbg !31

77:                                               ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %80, label %78, !dbg !31

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #4, !dbg !31
  br label %__nv_sqrtf.exit17, !dbg !31

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #4, !dbg !31
  br label %__nv_sqrtf.exit17, !dbg !31

__nv_sqrtf.exit17:                                ; preds = %73, %75, %78, %80
  %.0.i15 = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !31
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i18 = icmp eq i32 %82, 0, !dbg !31
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i21 = icmp eq i32 %83, 0, !dbg !31
  br i1 %.not.i18, label %89, label %84, !dbg !31

84:                                               ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %87, label %85, !dbg !31

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #4, !dbg !31
  br label %__nv_sqrtf.exit22, !dbg !31

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #4, !dbg !31
  br label %__nv_sqrtf.exit22, !dbg !31

89:                                               ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %92, label %90, !dbg !31

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #4, !dbg !31
  br label %__nv_sqrtf.exit22, !dbg !31

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #4, !dbg !31
  br label %__nv_sqrtf.exit22, !dbg !31

__nv_sqrtf.exit22:                                ; preds = %85, %87, %90, %92
  %.0.i20 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !31
  %94 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !19
  %95 = bitcast i32 %94 to float, !dbg !19
  %96 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !21
  %97 = bitcast i32 %96 to float, !dbg !21
  %98 = fsub float %95, %97, !dbg !32
  %99 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !19
  %100 = bitcast i32 %99 to float, !dbg !19
  %101 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !21
  %102 = bitcast i32 %101 to float, !dbg !21
  %103 = fsub float %100, %102, !dbg !32
  %104 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !19
  %105 = bitcast i32 %104 to float, !dbg !19
  %106 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !21
  %107 = bitcast i32 %106 to float, !dbg !21
  %108 = fsub float %105, %107, !dbg !32
  %109 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !19
  %110 = bitcast i32 %109 to float, !dbg !19
  %111 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !21
  %112 = bitcast i32 %111 to float, !dbg !21
  %113 = fsub float %110, %112, !dbg !32
  %114 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !29
  %115 = bitcast i32 %114 to float, !dbg !29
  %116 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !29
  %117 = bitcast i32 %116 to float, !dbg !29
  %118 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !29
  %119 = bitcast i32 %118 to float, !dbg !29
  %120 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !29
  %121 = bitcast i32 %120 to float, !dbg !29
  %122 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !27
  %123 = bitcast i32 %122 to float, !dbg !27
  %124 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !27
  %125 = bitcast i32 %124 to float, !dbg !27
  %126 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !27
  %127 = bitcast i32 %126 to float, !dbg !27
  %128 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !27
  %129 = bitcast i32 %128 to float, !dbg !27
  %130 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %131 = bitcast i32 %130 to float, !dbg !25
  %132 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %133 = bitcast i32 %132 to float, !dbg !25
  %134 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %135 = bitcast i32 %134 to float, !dbg !25
  %136 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %137 = bitcast i32 %136 to float, !dbg !25
  %138 = shl i32 %12, 2, !dbg !12
  %139 = and i32 %138, 124, !dbg !12
  %140 = or disjoint i32 %11, %139, !dbg !13
  %.frozen = freeze i32 %140, !dbg !33
  %141 = sdiv i32 %.frozen, 4096, !dbg !33
  %142 = mul i32 %141, 4096, !dbg !34
  %.decomposed = sub i32 %.frozen, %142, !dbg !34
  %.lobit1 = lshr i32 %12, 5, !dbg !35
  %143 = and i32 %.lobit1, 3, !dbg !35
  %144 = or disjoint i32 %16, %143, !dbg !36
  %145 = icmp slt i32 %144, 4, !dbg !16
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !37
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !37
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !37
  %150 = fmul float %113, %146, !dbg !38
  %151 = fmul float %108, %147, !dbg !38
  %152 = fmul float %103, %148, !dbg !38
  %153 = fmul float %98, %149, !dbg !38
  %154 = fmul float %150, %137, !dbg !39
  %155 = fmul float %151, %135, !dbg !39
  %156 = fmul float %152, %133, !dbg !39
  %157 = fmul float %153, %131, !dbg !39
  %158 = fadd float %154, %129, !dbg !40
  %159 = fadd float %155, %127, !dbg !40
  %160 = fadd float %156, %125, !dbg !40
  %161 = fadd float %157, %123, !dbg !40
  %162 = fadd float %158, %121, !dbg !41
  %163 = fadd float %159, %119, !dbg !41
  %164 = fadd float %160, %117, !dbg !41
  %165 = fadd float %161, %115, !dbg !41
  %166 = shl i32 %144, 12, !dbg !42
  %167 = add i32 %166, %.decomposed, !dbg !43
  %168 = shl i32 %141, 14, !dbg !44
  %169 = add i32 %167, %168, !dbg !45
  %170 = sext i32 %169 to i64, !dbg !46
  %171 = getelementptr float, ptr addrspace(1) %6, i64 %170, !dbg !46
  %172 = and i32 %138, 508, !dbg !47
  %173 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !47
  %174 = bitcast float %162 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #4, !dbg !47
  %175 = getelementptr inbounds i8, ptr addrspace(3) %173, i32 528, !dbg !47
  %176 = bitcast float %163 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %176, i1 true) #4, !dbg !47
  %177 = getelementptr inbounds i8, ptr addrspace(3) %173, i32 1056, !dbg !47
  %178 = bitcast float %164 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %178, i1 true) #4, !dbg !47
  %179 = getelementptr inbounds i8, ptr addrspace(3) %173, i32 1584, !dbg !47
  %180 = bitcast float %165 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %181 = lshr i32 %138, 5, !dbg !47
  %182 = and i32 %181, 12, !dbg !47
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %182, !dbg !47
  %184 = getelementptr float, ptr addrspace(3) %183, i32 %172, !dbg !47
  %.extract = load i32, ptr addrspace(3) %184, align 16, !dbg !47
  %185 = getelementptr inbounds i8, ptr addrspace(3) %184, i32 4, !dbg !47
  %.extract5 = load i32, ptr addrspace(3) %185, align 4, !dbg !47
  %186 = getelementptr inbounds i8, ptr addrspace(3) %184, i32 8, !dbg !47
  %.extract6 = load i32, ptr addrspace(3) %186, align 8, !dbg !47
  %187 = getelementptr inbounds i8, ptr addrspace(3) %184, i32 12, !dbg !47
  %.extract7 = load i32, ptr addrspace(3) %187, align 4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract5, i32 %.extract6, i32 %.extract7, ptr addrspace(1) %171, i1 %145) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c67zzgaqo2lk3amltc52bp53bvc4z3b4klngwzyhjpqfnnreuxwe.py", directory: "inductor_cache/67")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_45, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_45, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_45", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_45", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 42, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 31, scope: !7)
!25 = !DILocation(line: 35, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 43, scope: !7)
!30 = !DILocation(line: 40, column: 18, scope: !7)
!31 = !DILocation(line: 41, column: 26, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 31, column: 19, scope: !7)
!34 = !DILocation(line: 30, column: 19, scope: !7)
!35 = !DILocation(line: 26, column: 44, scope: !7)
!36 = !DILocation(line: 26, column: 23, scope: !7)
!37 = !DILocation(line: 43, column: 18, scope: !7)
!38 = !DILocation(line: 46, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 35, scope: !7)
!43 = !DILocation(line: 50, column: 30, scope: !7)
!44 = !DILocation(line: 50, column: 46, scope: !7)
!45 = !DILocation(line: 50, column: 40, scope: !7)
!46 = !DILocation(line: 50, column: 25, scope: !7)
!47 = !DILocation(line: 50, column: 58, scope: !7)
!48 = !DILocation(line: 50, column: 4, scope: !7)
