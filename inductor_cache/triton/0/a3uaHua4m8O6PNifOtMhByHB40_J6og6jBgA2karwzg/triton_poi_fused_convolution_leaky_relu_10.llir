; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 1, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = lshr i32 %9, 2, !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = or disjoint i32 %15, 32, !dbg !13
  %17 = icmp slt i32 %14, 36, !dbg !14
  %18 = icmp slt i32 %15, 36, !dbg !14
  %19 = icmp slt i32 %16, 36, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 2, !dbg !16
  %22 = shl i32 %9, 1, !dbg !17
  %23 = and i32 %22, 2, !dbg !17
  %24 = and i32 %9, 3, !dbg !17
  %25 = or disjoint i32 %21, %23, !dbg !18
  %26 = or disjoint i32 %21, %24, !dbg !18
  %27 = icmp slt i32 %25, 256, !dbg !19
  %28 = icmp slt i32 %26, 256, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %29 = sdiv i32 %.frozen, 9, !dbg !20
  %30 = mul i32 %29, 9, !dbg !21
  %.decomposed = sub i32 %.frozen, %30, !dbg !21
  %.frozen4 = freeze i32 %16, !dbg !20
  %31 = sdiv i32 %.frozen4, 9, !dbg !20
  %32 = mul i32 %31, 9, !dbg !21
  %.decomposed5 = sub i32 %.frozen4, %32, !dbg !21
  %33 = shl i32 %14, 8, !dbg !22
  %34 = add i32 %25, %33, !dbg !23
  %35 = sext i32 %34 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !24
  %37 = and i1 %17, %27, !dbg !25
  %38 = and i1 %18, %28, !dbg !25
  %39 = and i1 %19, %28, !dbg !25
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %37) #2, !dbg !26
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !26
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !26
  %43 = sext i32 %25 to i64, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !27
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %27) #2, !dbg !28
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !28
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !28
  %48 = getelementptr i1, ptr addrspace(1) %2, i64 %35, !dbg !29
  %49 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !26
  %50 = insertelement <2 x i32> %49, i32 %42, i64 1, !dbg !26
  %51 = bitcast <2 x i32> %50 to <2 x float>, !dbg !26
  %52 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !28
  %53 = insertelement <2 x i32> %52, i32 %47, i64 1, !dbg !28
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !28
  %55 = fadd <2 x float> %51, %54, !dbg !30
  %56 = fcmp ogt <2 x float> %55, zeroinitializer, !dbg !31
  %57 = extractelement <2 x float> %55, i64 0, !dbg !32
  %58 = fmul float %57, 0x3F847AE140000000, !dbg !33
  %59 = extractelement <2 x float> %55, i64 1, !dbg !32
  %60 = fmul float %59, 0x3F847AE140000000, !dbg !33
  %61 = extractelement <2 x i1> %56, i64 0, !dbg !32
  %62 = select i1 %61, float %57, float %58, !dbg !32
  %63 = extractelement <2 x i1> %56, i64 1, !dbg !32
  %64 = select i1 %63, float %59, float %60, !dbg !32
  %65 = zext <2 x i1> %56 to <2 x i8>, !dbg !34
  %66 = bitcast <2 x i8> %65 to i16, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %66, ptr addrspace(1) %48, i1 %37) #2, !dbg !34
  %67 = mul i32 %26, 9, !dbg !35
  %68 = add i32 %67, %.decomposed, !dbg !36
  %69 = mul i32 %29, 2304, !dbg !37
  %70 = mul i32 %31, 2304, !dbg !37
  %71 = add i32 %68, %69, !dbg !38
  %72 = add i32 %70, %.decomposed5, !dbg !36
  %73 = add i32 %72, %67, !dbg !38
  %74 = sext i32 %71 to i64, !dbg !39
  %75 = getelementptr float, ptr addrspace(1) %3, i64 %74, !dbg !39
  %76 = sext i32 %73 to i64, !dbg !39
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %76, !dbg !39
  %78 = and i32 %22, 252, !dbg !40
  %79 = and i32 %22, 254, !dbg !40
  %80 = and i32 %9, 127, !dbg !40
  %81 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %78, !dbg !40
  %82 = getelementptr inbounds float, ptr addrspace(3) %81, i32 %79, !dbg !40
  %83 = bitcast float %62 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #2, !dbg !40
  %84 = or disjoint i32 %79, 1, !dbg !40
  %85 = getelementptr inbounds float, ptr addrspace(3) %81, i32 %84, !dbg !40
  %86 = bitcast float %64 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %87 = lshr i32 %80, 2, !dbg !40
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %87, !dbg !40
  %89 = getelementptr inbounds float, ptr addrspace(3) %88, i32 %80, !dbg !40
  %90 = load i32, ptr addrspace(3) %89, align 4, !dbg !40
  %91 = or disjoint i32 %80, 128, !dbg !40
  %92 = lshr i32 %91, 2, !dbg !40
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %92, !dbg !40
  %94 = getelementptr inbounds float, ptr addrspace(3) %93, i32 %91, !dbg !40
  %95 = load i32, ptr addrspace(3) %94, align 4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %90, ptr addrspace(1) %75, i1 %38) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %95, ptr addrspace(1) %77, i1 %39) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chl5tpewny5oofnkzkepn72of4kbpub3km7rdog2pscsj5zpcd2k.py", directory: "inductor_cache/hl")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_10", linkageName: "triton_poi_fused_convolution_leaky_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 40, column: 25, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 32, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 45, scope: !7)
!35 = !DILocation(line: 41, column: 32, scope: !7)
!36 = !DILocation(line: 41, column: 30, scope: !7)
!37 = !DILocation(line: 41, column: 42, scope: !7)
!38 = !DILocation(line: 41, column: 37, scope: !7)
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 41, column: 53, scope: !7)
!41 = !DILocation(line: 41, column: 4, scope: !7)
