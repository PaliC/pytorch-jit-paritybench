; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_cat_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 1024, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = lshr i32 %9, 5, !dbg !12
  %12 = and i32 %9, 63, !dbg !12
  %13 = shl i32 %7, 6, !dbg !13
  %14 = or disjoint i32 %13, %12, !dbg !14
  %15 = sext i32 %14 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !15
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 %8, i32 0, i1 %8) #5, !dbg !16
  %18 = bitcast i32 %17 to float, !dbg !16
  %19 = select i1 %8, float %18, float 0.000000e+00, !dbg !17
  %20 = bitcast float %19 to i32, !dbg !18
  %21 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %20, i32 16, i32 31), !dbg !18
  %22 = bitcast i32 %21 to float, !dbg !18
  %23 = fadd float %19, %22, !dbg !22
  %24 = bitcast float %23 to i32, !dbg !18
  %25 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %24, i32 8, i32 31), !dbg !18
  %26 = bitcast i32 %25 to float, !dbg !18
  %27 = fadd float %23, %26, !dbg !22
  %28 = bitcast float %27 to i32, !dbg !18
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 4, i32 31), !dbg !18
  %30 = bitcast i32 %29 to float, !dbg !18
  %31 = fadd float %27, %30, !dbg !22
  %32 = bitcast float %31 to i32, !dbg !18
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 2, i32 31), !dbg !18
  %34 = bitcast i32 %33 to float, !dbg !18
  %35 = fadd float %31, %34, !dbg !22
  %36 = bitcast float %35 to i32, !dbg !18
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 1, i32 31), !dbg !18
  %38 = bitcast i32 %37 to float, !dbg !18
  %39 = fadd float %35, %38, !dbg !22
  %40 = icmp eq i32 %10, 0, !dbg !18
  %41 = and i32 %11, 1, !dbg !18
  %42 = getelementptr float, ptr addrspace(3) @global_smem, i32 %41, !dbg !18
  %43 = bitcast float %39 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %43, i1 %40) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %44 = icmp slt i32 %9, 2, !dbg !18
  %45 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !18
  %46 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %45, i1 %44) #5, !dbg !18
  %47 = bitcast i32 %46 to float, !dbg !18
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 1, i32 31), !dbg !18
  %49 = bitcast i32 %48 to float, !dbg !18
  %50 = fadd float %47, %49, !dbg !22
  %51 = and i32 %9, 1, !dbg !18
  %52 = icmp eq i32 %51, 0, !dbg !18
  %53 = and i1 %44, %52, !dbg !18
  %54 = bitcast float %50 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %54, i1 %53) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %55 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !18
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float 6.400000e+01) #5, !dbg !24
  %57 = fsub float %18, %56, !dbg !25
  %58 = fmul float %57, %57, !dbg !26
  %59 = select i1 %8, float %58, float 0.000000e+00, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %60 = bitcast float %59 to i32, !dbg !28
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 16, i32 31), !dbg !28
  %62 = bitcast i32 %61 to float, !dbg !28
  %63 = fadd float %59, %62, !dbg !30
  %64 = bitcast float %63 to i32, !dbg !28
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 8, i32 31), !dbg !28
  %66 = bitcast i32 %65 to float, !dbg !28
  %67 = fadd float %63, %66, !dbg !30
  %68 = bitcast float %67 to i32, !dbg !28
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 4, i32 31), !dbg !28
  %70 = bitcast i32 %69 to float, !dbg !28
  %71 = fadd float %67, %70, !dbg !30
  %72 = bitcast float %71 to i32, !dbg !28
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 2, i32 31), !dbg !28
  %74 = bitcast i32 %73 to float, !dbg !28
  %75 = fadd float %71, %74, !dbg !30
  %76 = bitcast float %75 to i32, !dbg !28
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 1, i32 31), !dbg !28
  %78 = bitcast i32 %77 to float, !dbg !28
  %79 = fadd float %75, %78, !dbg !30
  %80 = bitcast float %79 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %80, i1 %40) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %81 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %45, i1 %44) #5, !dbg !28
  %82 = bitcast i32 %81 to float, !dbg !28
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 1, i32 31), !dbg !28
  %84 = bitcast i32 %83 to float, !dbg !28
  %85 = fadd float %82, %84, !dbg !30
  %86 = bitcast float %85 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %86, i1 %53) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %87 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float 6.400000e+01) #5, !dbg !31
  %89 = fadd float %88, 0x3EE4F8B580000000, !dbg !32
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not.i = icmp eq i32 %90, 0, !dbg !33
  br i1 %.not.i, label %93, label %91, !dbg !33

91:                                               ; preds = %6
  %92 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %89), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

93:                                               ; preds = %6
  %94 = tail call float @llvm.nvvm.rsqrt.approx.f(float %89), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

__nv_rsqrtf.exit:                                 ; preds = %91, %93
  %.0.i = phi float [ %92, %91 ], [ %94, %93 ], !dbg !33
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not.i1 = icmp eq i32 %95, 0, !dbg !33
  br i1 %.not.i1, label %98, label %96, !dbg !33

96:                                               ; preds = %__nv_rsqrtf.exit
  %97 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %89), !dbg !33
  br label %__nv_rsqrtf.exit3, !dbg !33

98:                                               ; preds = %__nv_rsqrtf.exit
  %99 = tail call float @llvm.nvvm.rsqrt.approx.f(float %89), !dbg !33
  br label %__nv_rsqrtf.exit3, !dbg !33

__nv_rsqrtf.exit3:                                ; preds = %96, %98
  %.0.i2 = phi float [ %97, %96 ], [ %99, %98 ], !dbg !33
  %.frozen = freeze i32 %7, !dbg !34
  %100 = sdiv i32 %.frozen, 256, !dbg !34
  %101 = mul i32 %100, 256, !dbg !35
  %.decomposed = sub i32 %.frozen, %101, !dbg !35
  %102 = fmul float %57, %.0.i2, !dbg !36
  %103 = fcmp ogt float %102, 0.000000e+00, !dbg !37
  %104 = fmul float %102, 0x3FC99999A0000000, !dbg !38
  %105 = select i1 %103, float %102, float %104, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %106 = sext i32 %7 to i64, !dbg !41
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !41
  %108 = icmp eq i32 %12, 0, !dbg !42
  %109 = bitcast float %.0.i to i32, !dbg !42
  %110 = and i1 %108, %8, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %109, ptr addrspace(1) %107, i1 %110) #5, !dbg !42
  %111 = shl nsw i32 %.decomposed, 6, !dbg !43
  %112 = or disjoint i32 %111, %12, !dbg !44
  %113 = shl i32 %100, 15, !dbg !45
  %114 = add i32 %112, %113, !dbg !46
  %115 = sext i32 %114 to i64, !dbg !47
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %115, !dbg !47
  %117 = bitcast float %105 to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %117, ptr addrspace(1) %116, i1 %8) #5, !dbg !48
  %118 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !49
  %119 = bitcast float %56 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %119, ptr addrspace(1) %118, i1 %110) #5, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py", directory: "inductor_cache/g3")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_cat_13, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_cat_13, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_cat_13", linkageName: "triton_per_fused__native_batch_norm_legit_cat_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 33, column: 38, scope: !7)
!14 = !DILocation(line: 33, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 30, scope: !7)
!16 = !DILocation(line: 33, column: 43, scope: !7)
!17 = !DILocation(line: 37, column: 33, scope: !7)
!18 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!21 = !DILocation(line: 38, column: 24, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !21)
!23 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!24 = !DILocation(line: 41, column: 19, scope: !7)
!25 = !DILocation(line: 42, column: 19, scope: !7)
!26 = !DILocation(line: 43, column: 20, scope: !7)
!27 = !DILocation(line: 45, column: 35, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !29)
!29 = !DILocation(line: 46, column: 26, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !29)
!31 = !DILocation(line: 48, column: 20, scope: !7)
!32 = !DILocation(line: 50, column: 20, scope: !7)
!33 = !DILocation(line: 51, column: 28, scope: !7)
!34 = !DILocation(line: 32, column: 19, scope: !7)
!35 = !DILocation(line: 31, column: 19, scope: !7)
!36 = !DILocation(line: 53, column: 20, scope: !7)
!37 = !DILocation(line: 55, column: 20, scope: !7)
!38 = !DILocation(line: 57, column: 20, scope: !7)
!39 = !DILocation(line: 58, column: 35, scope: !7)
!40 = !DILocation(line: 59, column: 4, scope: !7)
!41 = !DILocation(line: 60, column: 28, scope: !7)
!42 = !DILocation(line: 60, column: 40, scope: !7)
!43 = !DILocation(line: 61, column: 33, scope: !7)
!44 = !DILocation(line: 61, column: 30, scope: !7)
!45 = !DILocation(line: 61, column: 44, scope: !7)
!46 = !DILocation(line: 61, column: 38, scope: !7)
!47 = !DILocation(line: 61, column: 25, scope: !7)
!48 = !DILocation(line: 61, column: 56, scope: !7)
!49 = !DILocation(line: 62, column: 25, scope: !7)
!50 = !DILocation(line: 62, column: 37, scope: !7)
!51 = !DILocation(line: 62, column: 4, scope: !7)
