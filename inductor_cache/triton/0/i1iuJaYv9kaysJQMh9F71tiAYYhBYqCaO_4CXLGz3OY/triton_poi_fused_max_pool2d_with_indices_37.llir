; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_37(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %12 = sdiv i32 %.frozen, 4, !dbg !14
  %13 = mul i32 %12, 4, !dbg !15
  %.decomposed = sub i32 %.frozen, %13, !dbg !15
  %14 = icmp sgt i32 %.decomposed, 1, !dbg !16
  %15 = add i32 %10, -10, !dbg !17
  %16 = sext i32 %15 to i64, !dbg !18
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !18
  %18 = icmp sgt i32 %.decomposed, 0, !dbg !19
  %19 = add i32 %10, -9, !dbg !20
  %20 = add i32 %10, -8, !dbg !20
  %21 = sext i32 %19 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !21
  %23 = sext i32 %20 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !21
  %25 = icmp sgt i32 %.decomposed, -1, !dbg !22
  %26 = icmp ult i32 %.decomposed, 4, !dbg !23
  %27 = add i32 %10, -7, !dbg !24
  %28 = add i32 %10, -6, !dbg !24
  %29 = sext i32 %27 to i64, !dbg !25
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !25
  %31 = sext i32 %28 to i64, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !25
  %33 = add nsw i32 %.decomposed, 2, !dbg !26
  %34 = icmp ult i32 %33, 4, !dbg !26
  %35 = add i32 %10, -5, !dbg !27
  %36 = add i32 %10, -4, !dbg !27
  %37 = sext i32 %35 to i64, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !28
  %39 = sext i32 %36 to i64, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !28
  %41 = add i32 %10, -3, !dbg !29
  %42 = add i32 %10, -2, !dbg !29
  %43 = sext i32 %41 to i64, !dbg !30
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !30
  %45 = sext i32 %42 to i64, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !30
  %47 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !15
  %48 = insertelement <2 x i32> %47, i32 %12, i64 1, !dbg !15
  %49 = srem <2 x i32> %48, splat (i32 4), !dbg !15
  %50 = extractelement <2 x i32> %49, i64 1, !dbg !31
  %51 = icmp sgt i32 %50, 1, !dbg !32
  %52 = and i1 %14, %51, !dbg !33
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %17, i1 %52, i32 -8388608, i1 %52, i32 -8388608, i1 %52) #1, !dbg !34
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !34
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !34
  %56 = and i1 %18, %51, !dbg !35
  %57 = icmp sgt <2 x i32> %49, <i32 0, i32 -1>, !dbg !19
  %58 = extractelement <2 x i1> %57, i64 0, !dbg !35
  %59 = and i1 %58, %51, !dbg !35
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %56, i32 -8388608, i1 %56) #1, !dbg !36
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %59, i32 -8388608, i1 %59) #1, !dbg !36
  %62 = and i1 %25, %51, !dbg !37
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %62, i32 -8388608, i1 %62, i32 -8388608, i1 %62) #1, !dbg !38
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !38
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !38
  %66 = extractelement <2 x i32> %49, i64 0, !dbg !23
  %67 = add nsw i32 %66, 1, !dbg !23
  %68 = icmp ult i32 %67, 4, !dbg !23
  %69 = and i1 %26, %51, !dbg !39
  %70 = and i1 %68, %51, !dbg !39
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %69, i32 -8388608, i1 %69) #1, !dbg !40
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %70, i32 -8388608, i1 %70) #1, !dbg !40
  %73 = and i1 %51, %34, !dbg !41
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 %73, i32 -8388608, i1 %73, i32 -8388608, i1 %73) #1, !dbg !42
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !42
  %76 = extractvalue { i32, i32 } %74, 1, !dbg !42
  %77 = icmp sgt i32 %50, 0, !dbg !43
  %78 = and i1 %14, %77, !dbg !44
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 %78, i32 -8388608, i1 %78, i32 -8388608, i1 %78) #1, !dbg !45
  %80 = extractvalue { i32, i32 } %79, 0, !dbg !45
  %81 = extractvalue { i32, i32 } %79, 1, !dbg !45
  %82 = and i1 %18, %77, !dbg !46
  %83 = and i1 %58, %77, !dbg !46
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %82, i32 -8388608, i1 %82) #1, !dbg !47
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %83, i32 -8388608, i1 %83) #1, !dbg !47
  %86 = and i1 %25, %77, !dbg !48
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %40, i1 %86, i32 -8388608, i1 %86, i32 -8388608, i1 %86) #1, !dbg !49
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !49
  %89 = extractvalue { i32, i32 } %87, 1, !dbg !49
  %90 = and i1 %26, %77, !dbg !50
  %91 = and i1 %68, %77, !dbg !50
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %90, i32 -8388608, i1 %90) #1, !dbg !51
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %91, i32 -8388608, i1 %91) #1, !dbg !51
  %94 = and i1 %77, %34, !dbg !52
  %95 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94) #1, !dbg !53
  %96 = extractvalue { i32, i32 } %95, 0, !dbg !53
  %97 = extractvalue { i32, i32 } %95, 1, !dbg !53
  %98 = extractelement <2 x i1> %57, i64 1, !dbg !54
  %99 = and i1 %14, %98, !dbg !54
  %100 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %99, i32 -8388608, i1 %99, i32 -8388608, i1 %99) #1, !dbg !55
  %101 = extractvalue { i32, i32 } %100, 0, !dbg !55
  %102 = extractvalue { i32, i32 } %100, 1, !dbg !55
  %103 = and i1 %18, %98, !dbg !56
  %104 = and i1 %58, %98, !dbg !56
  %105 = add i32 %10, -1, !dbg !57
  %106 = sext i32 %105 to i64, !dbg !58
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !58
  %108 = sext i32 %11 to i64, !dbg !58
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !58
  %110 = getelementptr i8, ptr addrspace(1) %109, i64 -4, !dbg !58
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %103, i32 -8388608, i1 %103) #1, !dbg !59
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %104, i32 -8388608, i1 %104) #1, !dbg !59
  %113 = or i32 %50, %.decomposed, !dbg !60
  %114 = icmp sgt i32 %113, -1, !dbg !60
  %115 = sext i32 %10 to i64, !dbg !61
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !61
  %117 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %116, i1 %114, i32 -8388608, i1 %114, i32 -8388608, i1 %114) #1, !dbg !62
  %118 = extractvalue { i32, i32 } %117, 0, !dbg !62
  %119 = extractvalue { i32, i32 } %117, 1, !dbg !62
  %120 = and i1 %26, %98, !dbg !63
  %121 = and i1 %68, %98, !dbg !63
  %122 = add i32 %10, 2, !dbg !64
  %123 = sext i32 %122 to i64, !dbg !65
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !65
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %120, i32 -8388608, i1 %120) #1, !dbg !66
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %121, i32 -8388608, i1 %121) #1, !dbg !66
  %127 = and i1 %98, %34, !dbg !67
  %128 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %124, i1 %127, i32 -8388608, i1 %127, i32 -8388608, i1 %127) #1, !dbg !68
  %129 = extractvalue { i32, i32 } %128, 0, !dbg !68
  %130 = extractvalue { i32, i32 } %128, 1, !dbg !68
  %131 = add nsw i32 %50, 1, !dbg !69
  %132 = icmp ult i32 %131, 4, !dbg !69
  %133 = and i1 %14, %132, !dbg !70
  %134 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %124, i1 %133, i32 -8388608, i1 %133, i32 -8388608, i1 %133) #1, !dbg !71
  %135 = extractvalue { i32, i32 } %134, 0, !dbg !71
  %136 = extractvalue { i32, i32 } %134, 1, !dbg !71
  %137 = and i1 %18, %132, !dbg !72
  %138 = and i1 %58, %132, !dbg !72
  %139 = add i32 %10, 3, !dbg !73
  %140 = add i32 %10, 4, !dbg !73
  %141 = sext i32 %139 to i64, !dbg !74
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !74
  %143 = sext i32 %140 to i64, !dbg !74
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !74
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %137, i32 -8388608, i1 %137) #1, !dbg !75
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %138, i32 -8388608, i1 %138) #1, !dbg !75
  %147 = and i1 %25, %132, !dbg !76
  %148 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %144, i1 %147, i32 -8388608, i1 %147, i32 -8388608, i1 %147) #1, !dbg !77
  %149 = extractvalue { i32, i32 } %148, 0, !dbg !77
  %150 = extractvalue { i32, i32 } %148, 1, !dbg !77
  %151 = or i32 %131, %.decomposed, !dbg !78
  %152 = icmp ult i32 %151, 4, !dbg !78
  %153 = add i32 %10, 5, !dbg !79
  %154 = add i32 %10, 6, !dbg !79
  %155 = sext i32 %153 to i64, !dbg !80
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !80
  %157 = sext i32 %154 to i64, !dbg !80
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !80
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %152, i32 -8388608, i1 %152) #1, !dbg !81
  %160 = add nsw i32 %50, 2, !dbg !31
  %161 = icmp ult i32 %160, 4, !dbg !31
  %162 = and i1 %14, %161, !dbg !82
  %163 = and i1 %18, %161, !dbg !83
  %164 = and i1 %58, %161, !dbg !83
  %165 = add i32 %10, 7, !dbg !84
  %166 = add i32 %10, 8, !dbg !84
  %167 = sext i32 %165 to i64, !dbg !85
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !85
  %169 = sext i32 %166 to i64, !dbg !85
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !85
  %171 = and i1 %25, %161, !dbg !86
  %172 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !87
  %173 = insertelement <4 x i32> %172, i32 %160, i64 1, !dbg !87
  %174 = insertelement <4 x i32> %173, i32 %131, i64 2, !dbg !87
  %175 = shufflevector <4 x i32> %174, <4 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 0>, !dbg !87
  %176 = insertelement <4 x i32> poison, i32 %160, i64 0, !dbg !87
  %177 = insertelement <4 x i32> %176, i32 %.decomposed, i64 1, !dbg !87
  %178 = insertelement <4 x i32> %177, i32 %33, i64 2, !dbg !87
  %179 = insertelement <4 x i32> %178, i32 %131, i64 3, !dbg !87
  %180 = or <4 x i32> %175, %179, !dbg !87
  %181 = icmp ult <4 x i32> %180, splat (i32 4), !dbg !87
  %182 = extractelement <4 x i1> %181, i64 3, !dbg !81
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 %182, i32 -8388608, i1 %182) #1, !dbg !81
  %184 = extractelement <4 x i1> %181, i64 2, !dbg !88
  %185 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %158, i1 %184, i32 -8388608, i1 %184, i32 -8388608, i1 %184) #1, !dbg !88
  %186 = extractvalue { i32, i32 } %185, 0, !dbg !88
  %187 = extractvalue { i32, i32 } %185, 1, !dbg !88
  %188 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %158, i1 %162, i32 -8388608, i1 %162, i32 -8388608, i1 %162) #1, !dbg !89
  %189 = extractvalue { i32, i32 } %188, 0, !dbg !89
  %190 = extractvalue { i32, i32 } %188, 1, !dbg !89
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %168, i1 %163, i32 -8388608, i1 %163) #1, !dbg !90
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %164, i32 -8388608, i1 %164) #1, !dbg !90
  %193 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %170, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171) #1, !dbg !91
  %194 = extractvalue { i32, i32 } %193, 0, !dbg !91
  %195 = extractvalue { i32, i32 } %193, 1, !dbg !91
  %196 = add i32 %10, 9, !dbg !92
  %197 = add i32 %10, 10, !dbg !92
  %198 = sext i32 %196 to i64, !dbg !93
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !93
  %200 = sext i32 %197 to i64, !dbg !93
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !93
  %202 = extractelement <4 x i1> %181, i64 1, !dbg !94
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %199, i1 %202, i32 -8388608, i1 %202) #1, !dbg !94
  %204 = extractelement <4 x i1> %181, i64 0, !dbg !94
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %201, i1 %204, i32 -8388608, i1 %204) #1, !dbg !94
  %206 = or i32 %160, %33, !dbg !95
  %207 = icmp ult i32 %206, 4, !dbg !95
  %208 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %201, i1 %207, i32 -8388608, i1 %207, i32 -8388608, i1 %207) #1, !dbg !96
  %209 = extractvalue { i32, i32 } %208, 0, !dbg !96
  %210 = extractvalue { i32, i32 } %208, 1, !dbg !96
  %211 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !34
  %212 = insertelement <2 x i32> %211, i32 %55, i64 1, !dbg !34
  %213 = bitcast <2 x i32> %212 to <2 x float>, !dbg !34
  %214 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !36
  %215 = insertelement <2 x i32> %214, i32 %61, i64 1, !dbg !36
  %216 = bitcast <2 x i32> %215 to <2 x float>, !dbg !36
  %217 = fcmp ogt <2 x float> %216, %213, !dbg !97
  %218 = fcmp uno <2 x float> %216, zeroinitializer, !dbg !101
  %219 = or <2 x i1> %217, %218, !dbg !102
  %.v = select <2 x i1> %219, <2 x i32> %215, <2 x i32> %212, !dbg !103
  %220 = bitcast <2 x i32> %.v to <2 x float>, !dbg !103
  %221 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !38
  %222 = insertelement <2 x i32> %221, i32 %65, i64 1, !dbg !38
  %223 = bitcast <2 x i32> %222 to <2 x float>, !dbg !38
  %224 = fcmp olt <2 x float> %220, %223, !dbg !104
  %225 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !40
  %226 = insertelement <2 x i32> %225, i32 %72, i64 1, !dbg !40
  %227 = bitcast <2 x i32> %226 to <2 x float>, !dbg !40
  %228 = fcmp uno <2 x float> %223, zeroinitializer, !dbg !106
  %229 = or <2 x i1> %224, %228, !dbg !107
  %.v1 = select <2 x i1> %229, <2 x i32> %222, <2 x i32> %.v, !dbg !108
  %230 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !108
  %231 = fcmp olt <2 x float> %230, %227, !dbg !109
  %232 = fcmp uno <2 x float> %227, zeroinitializer, !dbg !111
  %233 = or <2 x i1> %232, %231, !dbg !112
  %.v2 = select <2 x i1> %233, <2 x i32> %226, <2 x i32> %.v1, !dbg !113
  %234 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !113
  %235 = zext <2 x i1> %217 to <2 x i8>, !dbg !114
  %236 = select <2 x i1> %224, <2 x i8> splat (i8 2), <2 x i8> %235, !dbg !115
  %237 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !42
  %238 = insertelement <2 x i32> %237, i32 %76, i64 1, !dbg !42
  %239 = bitcast <2 x i32> %238 to <2 x float>, !dbg !42
  %240 = fcmp uno <2 x float> %239, zeroinitializer, !dbg !116
  %241 = fcmp olt <2 x float> %234, %239, !dbg !118
  %242 = or <2 x i1> %240, %241, !dbg !119
  %.v3 = select <2 x i1> %242, <2 x i32> %238, <2 x i32> %.v2, !dbg !120
  %243 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !120
  %244 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !45
  %245 = insertelement <2 x i32> %244, i32 %81, i64 1, !dbg !45
  %246 = bitcast <2 x i32> %245 to <2 x float>, !dbg !45
  %247 = fcmp olt <2 x float> %243, %246, !dbg !121
  %248 = fcmp uno <2 x float> %246, zeroinitializer, !dbg !123
  %249 = or <2 x i1> %248, %247, !dbg !124
  %.v4 = select <2 x i1> %249, <2 x i32> %245, <2 x i32> %.v3, !dbg !125
  %250 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !125
  %251 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !47
  %252 = insertelement <2 x i32> %251, i32 %85, i64 1, !dbg !47
  %253 = bitcast <2 x i32> %252 to <2 x float>, !dbg !47
  %254 = fcmp olt <2 x float> %250, %253, !dbg !126
  %255 = fcmp uno <2 x float> %253, zeroinitializer, !dbg !128
  %256 = or <2 x i1> %255, %254, !dbg !129
  %.v5 = select <2 x i1> %256, <2 x i32> %252, <2 x i32> %.v4, !dbg !130
  %257 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !130
  %258 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !49
  %259 = insertelement <2 x i32> %258, i32 %89, i64 1, !dbg !49
  %260 = bitcast <2 x i32> %259 to <2 x float>, !dbg !49
  %261 = fcmp olt <2 x float> %257, %260, !dbg !131
  %262 = fcmp uno <2 x float> %260, zeroinitializer, !dbg !133
  %263 = or <2 x i1> %262, %261, !dbg !134
  %.v6 = select <2 x i1> %263, <2 x i32> %259, <2 x i32> %.v5, !dbg !135
  %264 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !135
  %265 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !51
  %266 = insertelement <2 x i32> %265, i32 %93, i64 1, !dbg !51
  %267 = bitcast <2 x i32> %266 to <2 x float>, !dbg !51
  %268 = fcmp olt <2 x float> %264, %267, !dbg !136
  %269 = fcmp uno <2 x float> %267, zeroinitializer, !dbg !138
  %270 = or <2 x i1> %269, %268, !dbg !139
  %.v7 = select <2 x i1> %270, <2 x i32> %266, <2 x i32> %.v6, !dbg !140
  %271 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !140
  %272 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !53
  %273 = insertelement <2 x i32> %272, i32 %97, i64 1, !dbg !53
  %274 = bitcast <2 x i32> %273 to <2 x float>, !dbg !53
  %275 = fcmp olt <2 x float> %271, %274, !dbg !141
  %276 = fcmp uno <2 x float> %274, zeroinitializer, !dbg !143
  %277 = or <2 x i1> %276, %275, !dbg !144
  %.v8 = select <2 x i1> %277, <2 x i32> %273, <2 x i32> %.v7, !dbg !145
  %278 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !145
  %279 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !55
  %280 = insertelement <2 x i32> %279, i32 %102, i64 1, !dbg !55
  %281 = bitcast <2 x i32> %280 to <2 x float>, !dbg !55
  %282 = fcmp olt <2 x float> %278, %281, !dbg !146
  %283 = fcmp uno <2 x float> %281, zeroinitializer, !dbg !148
  %284 = or <2 x i1> %283, %282, !dbg !149
  %.v9 = select <2 x i1> %284, <2 x i32> %280, <2 x i32> %.v8, !dbg !150
  %285 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !150
  %286 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !59
  %287 = insertelement <2 x i32> %286, i32 %112, i64 1, !dbg !59
  %288 = bitcast <2 x i32> %287 to <2 x float>, !dbg !59
  %289 = fcmp olt <2 x float> %285, %288, !dbg !151
  %290 = fcmp uno <2 x float> %288, zeroinitializer, !dbg !153
  %291 = or <2 x i1> %290, %289, !dbg !154
  %.v10 = select <2 x i1> %291, <2 x i32> %287, <2 x i32> %.v9, !dbg !155
  %292 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !155
  %293 = insertelement <2 x i32> poison, i32 %118, i64 0, !dbg !62
  %294 = insertelement <2 x i32> %293, i32 %119, i64 1, !dbg !62
  %295 = bitcast <2 x i32> %294 to <2 x float>, !dbg !62
  %296 = fcmp olt <2 x float> %292, %295, !dbg !156
  %297 = fcmp uno <2 x float> %295, zeroinitializer, !dbg !158
  %298 = or <2 x i1> %297, %296, !dbg !159
  %.v11 = select <2 x i1> %298, <2 x i32> %294, <2 x i32> %.v10, !dbg !160
  %299 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !160
  %300 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !66
  %301 = insertelement <2 x i32> %300, i32 %126, i64 1, !dbg !66
  %302 = bitcast <2 x i32> %301 to <2 x float>, !dbg !66
  %303 = fcmp olt <2 x float> %299, %302, !dbg !161
  %304 = insertelement <2 x i32> poison, i32 %129, i64 0, !dbg !68
  %305 = insertelement <2 x i32> %304, i32 %130, i64 1, !dbg !68
  %306 = bitcast <2 x i32> %305 to <2 x float>, !dbg !68
  %307 = fcmp uno <2 x float> %302, zeroinitializer, !dbg !163
  %308 = or <2 x i1> %307, %303, !dbg !164
  %.v12 = select <2 x i1> %308, <2 x i32> %301, <2 x i32> %.v11, !dbg !165
  %309 = bitcast <2 x i32> %.v12 to <2 x float>, !dbg !165
  %310 = fcmp olt <2 x float> %309, %306, !dbg !166
  %311 = fcmp uno <2 x float> %306, zeroinitializer, !dbg !168
  %312 = or <2 x i1> %311, %310, !dbg !169
  %.v13 = select <2 x i1> %312, <2 x i32> %305, <2 x i32> %.v12, !dbg !170
  %313 = bitcast <2 x i32> %.v13 to <2 x float>, !dbg !170
  %314 = select <2 x i1> %231, <2 x i8> splat (i8 3), <2 x i8> %236, !dbg !171
  %315 = select <2 x i1> %241, <2 x i8> splat (i8 4), <2 x i8> %314, !dbg !172
  %316 = select <2 x i1> %247, <2 x i8> splat (i8 5), <2 x i8> %315, !dbg !173
  %317 = select <2 x i1> %254, <2 x i8> splat (i8 6), <2 x i8> %316, !dbg !174
  %318 = select <2 x i1> %261, <2 x i8> splat (i8 7), <2 x i8> %317, !dbg !175
  %319 = select <2 x i1> %268, <2 x i8> splat (i8 8), <2 x i8> %318, !dbg !176
  %320 = select <2 x i1> %275, <2 x i8> splat (i8 9), <2 x i8> %319, !dbg !177
  %321 = select <2 x i1> %282, <2 x i8> splat (i8 10), <2 x i8> %320, !dbg !178
  %322 = select <2 x i1> %289, <2 x i8> splat (i8 11), <2 x i8> %321, !dbg !179
  %323 = select <2 x i1> %296, <2 x i8> splat (i8 12), <2 x i8> %322, !dbg !180
  %324 = select <2 x i1> %303, <2 x i8> splat (i8 13), <2 x i8> %323, !dbg !181
  %325 = insertelement <2 x i32> poison, i32 %135, i64 0, !dbg !71
  %326 = insertelement <2 x i32> %325, i32 %136, i64 1, !dbg !71
  %327 = bitcast <2 x i32> %326 to <2 x float>, !dbg !71
  %328 = fcmp uno <2 x float> %327, zeroinitializer, !dbg !182
  %329 = fcmp olt <2 x float> %313, %327, !dbg !184
  %330 = or <2 x i1> %328, %329, !dbg !185
  %.v14 = select <2 x i1> %330, <2 x i32> %326, <2 x i32> %.v13, !dbg !186
  %331 = bitcast <2 x i32> %.v14 to <2 x float>, !dbg !186
  %332 = insertelement <2 x i32> poison, i32 %145, i64 0, !dbg !75
  %333 = insertelement <2 x i32> %332, i32 %146, i64 1, !dbg !75
  %334 = bitcast <2 x i32> %333 to <2 x float>, !dbg !75
  %335 = fcmp olt <2 x float> %331, %334, !dbg !187
  %336 = fcmp uno <2 x float> %334, zeroinitializer, !dbg !189
  %337 = or <2 x i1> %336, %335, !dbg !190
  %.v15 = select <2 x i1> %337, <2 x i32> %333, <2 x i32> %.v14, !dbg !191
  %338 = bitcast <2 x i32> %.v15 to <2 x float>, !dbg !191
  %339 = insertelement <2 x i32> poison, i32 %149, i64 0, !dbg !77
  %340 = insertelement <2 x i32> %339, i32 %150, i64 1, !dbg !77
  %341 = bitcast <2 x i32> %340 to <2 x float>, !dbg !77
  %342 = fcmp olt <2 x float> %338, %341, !dbg !192
  %343 = fcmp uno <2 x float> %341, zeroinitializer, !dbg !194
  %344 = or <2 x i1> %343, %342, !dbg !195
  %.v16 = select <2 x i1> %344, <2 x i32> %340, <2 x i32> %.v15, !dbg !196
  %345 = bitcast <2 x i32> %.v16 to <2 x float>, !dbg !196
  %346 = insertelement <2 x i32> poison, i32 %159, i64 0, !dbg !81
  %347 = insertelement <2 x i32> %346, i32 %183, i64 1, !dbg !81
  %348 = bitcast <2 x i32> %347 to <2 x float>, !dbg !81
  %349 = fcmp olt <2 x float> %345, %348, !dbg !197
  %350 = fcmp uno <2 x float> %348, zeroinitializer, !dbg !199
  %351 = or <2 x i1> %350, %349, !dbg !200
  %.v17 = select <2 x i1> %351, <2 x i32> %347, <2 x i32> %.v16, !dbg !201
  %352 = bitcast <2 x i32> %.v17 to <2 x float>, !dbg !201
  %353 = insertelement <2 x i32> poison, i32 %186, i64 0, !dbg !88
  %354 = insertelement <2 x i32> %353, i32 %187, i64 1, !dbg !88
  %355 = bitcast <2 x i32> %354 to <2 x float>, !dbg !88
  %356 = fcmp olt <2 x float> %352, %355, !dbg !202
  %357 = fcmp uno <2 x float> %355, zeroinitializer, !dbg !204
  %358 = or <2 x i1> %357, %356, !dbg !205
  %.v18 = select <2 x i1> %358, <2 x i32> %354, <2 x i32> %.v17, !dbg !206
  %359 = bitcast <2 x i32> %.v18 to <2 x float>, !dbg !206
  %360 = insertelement <2 x i32> poison, i32 %189, i64 0, !dbg !89
  %361 = insertelement <2 x i32> %360, i32 %190, i64 1, !dbg !89
  %362 = bitcast <2 x i32> %361 to <2 x float>, !dbg !89
  %363 = fcmp olt <2 x float> %359, %362, !dbg !207
  %364 = fcmp uno <2 x float> %362, zeroinitializer, !dbg !209
  %365 = or <2 x i1> %364, %363, !dbg !210
  %.v19 = select <2 x i1> %365, <2 x i32> %361, <2 x i32> %.v18, !dbg !211
  %366 = bitcast <2 x i32> %.v19 to <2 x float>, !dbg !211
  %367 = insertelement <2 x i32> poison, i32 %191, i64 0, !dbg !90
  %368 = insertelement <2 x i32> %367, i32 %192, i64 1, !dbg !90
  %369 = bitcast <2 x i32> %368 to <2 x float>, !dbg !90
  %370 = fcmp olt <2 x float> %366, %369, !dbg !212
  %371 = fcmp uno <2 x float> %369, zeroinitializer, !dbg !214
  %372 = or <2 x i1> %371, %370, !dbg !215
  %.v20 = select <2 x i1> %372, <2 x i32> %368, <2 x i32> %.v19, !dbg !216
  %373 = bitcast <2 x i32> %.v20 to <2 x float>, !dbg !216
  %374 = insertelement <2 x i32> poison, i32 %194, i64 0, !dbg !91
  %375 = insertelement <2 x i32> %374, i32 %195, i64 1, !dbg !91
  %376 = bitcast <2 x i32> %375 to <2 x float>, !dbg !91
  %377 = fcmp olt <2 x float> %373, %376, !dbg !217
  %378 = fcmp uno <2 x float> %376, zeroinitializer, !dbg !219
  %379 = or <2 x i1> %378, %377, !dbg !220
  %.v21 = select <2 x i1> %379, <2 x i32> %375, <2 x i32> %.v20, !dbg !221
  %380 = bitcast <2 x i32> %.v21 to <2 x float>, !dbg !221
  %381 = insertelement <2 x i32> poison, i32 %203, i64 0, !dbg !94
  %382 = insertelement <2 x i32> %381, i32 %205, i64 1, !dbg !94
  %383 = bitcast <2 x i32> %382 to <2 x float>, !dbg !94
  %384 = fcmp olt <2 x float> %380, %383, !dbg !222
  %385 = fcmp uno <2 x float> %383, zeroinitializer, !dbg !224
  %386 = or <2 x i1> %385, %384, !dbg !225
  %.v22 = select <2 x i1> %386, <2 x i32> %382, <2 x i32> %.v21, !dbg !226
  %387 = bitcast <2 x i32> %.v22 to <2 x float>, !dbg !226
  %388 = insertelement <2 x i32> poison, i32 %209, i64 0, !dbg !96
  %389 = insertelement <2 x i32> %388, i32 %210, i64 1, !dbg !96
  %390 = bitcast <2 x i32> %389 to <2 x float>, !dbg !96
  %391 = fcmp olt <2 x float> %387, %390, !dbg !227
  %392 = bitcast i32 %209 to float, !dbg !229
  %393 = fcmp uno float %392, 0.000000e+00, !dbg !229
  %394 = bitcast i32 %210 to float, !dbg !229
  %395 = fcmp uno float %394, 0.000000e+00, !dbg !229
  %396 = extractelement <2 x i1> %391, i64 0, !dbg !230
  %397 = or i1 %393, %396, !dbg !230
  %398 = extractelement <2 x i1> %391, i64 1, !dbg !230
  %399 = or i1 %395, %398, !dbg !230
  %400 = select <2 x i1> %310, <2 x i8> splat (i8 14), <2 x i8> %324, !dbg !231
  %401 = select <2 x i1> %329, <2 x i8> splat (i8 15), <2 x i8> %400, !dbg !232
  %402 = select <2 x i1> %335, <2 x i8> splat (i8 16), <2 x i8> %401, !dbg !233
  %403 = select <2 x i1> %342, <2 x i8> splat (i8 17), <2 x i8> %402, !dbg !234
  %404 = select <2 x i1> %349, <2 x i8> splat (i8 18), <2 x i8> %403, !dbg !235
  %405 = select <2 x i1> %356, <2 x i8> splat (i8 19), <2 x i8> %404, !dbg !236
  %406 = select <2 x i1> %363, <2 x i8> splat (i8 20), <2 x i8> %405, !dbg !237
  %407 = select <2 x i1> %370, <2 x i8> splat (i8 21), <2 x i8> %406, !dbg !238
  %408 = select <2 x i1> %377, <2 x i8> splat (i8 22), <2 x i8> %407, !dbg !239
  %409 = select <2 x i1> %384, <2 x i8> splat (i8 23), <2 x i8> %408, !dbg !240
  %410 = select <2 x i1> %391, <2 x i8> splat (i8 24), <2 x i8> %409, !dbg !241
  %411 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !242
  %412 = extractelement <2 x i32> %.v22, i64 0, !dbg !243
  %413 = select i1 %397, i32 %209, i32 %412, !dbg !244
  %414 = extractelement <2 x i32> %.v22, i64 1, !dbg !243
  %415 = select i1 %399, i32 %210, i32 %414, !dbg !244
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %413, i32 %415, ptr addrspace(1) %411, i1 true) #1, !dbg !243
  %416 = getelementptr i8, ptr addrspace(1) %2, i64 %115, !dbg !245
  %417 = bitcast <2 x i8> %410 to i16, !dbg !246
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %417, ptr addrspace(1) %416, i1 true) #1, !dbg !246
  ret void, !dbg !247
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck44k4ztyg5kbzvjxmivvoworcmggdw4gtgcvalsi2n5wqq4mhtc.py", directory: "inductor_cache/k4")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_37, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_37, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_37", linkageName: "triton_poi_fused_max_pool2d_with_indices_37", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 34, column: 19, scope: !7)
!17 = !DILocation(line: 38, column: 39, scope: !7)
!18 = !DILocation(line: 38, column: 31, scope: !7)
!19 = !DILocation(line: 40, column: 21, scope: !7)
!20 = !DILocation(line: 44, column: 38, scope: !7)
!21 = !DILocation(line: 44, column: 31, scope: !7)
!22 = !DILocation(line: 47, column: 21, scope: !7)
!23 = !DILocation(line: 56, column: 20, scope: !7)
!24 = !DILocation(line: 58, column: 38, scope: !7)
!25 = !DILocation(line: 58, column: 31, scope: !7)
!26 = !DILocation(line: 63, column: 20, scope: !7)
!27 = !DILocation(line: 75, column: 38, scope: !7)
!28 = !DILocation(line: 75, column: 31, scope: !7)
!29 = !DILocation(line: 81, column: 38, scope: !7)
!30 = !DILocation(line: 81, column: 31, scope: !7)
!31 = !DILocation(line: 127, column: 21, scope: !7)
!32 = !DILocation(line: 29, column: 19, scope: !7)
!33 = !DILocation(line: 37, column: 19, scope: !7)
!34 = !DILocation(line: 38, column: 44, scope: !7)
!35 = !DILocation(line: 43, column: 19, scope: !7)
!36 = !DILocation(line: 44, column: 43, scope: !7)
!37 = !DILocation(line: 50, column: 19, scope: !7)
!38 = !DILocation(line: 51, column: 43, scope: !7)
!39 = !DILocation(line: 57, column: 19, scope: !7)
!40 = !DILocation(line: 58, column: 43, scope: !7)
!41 = !DILocation(line: 64, column: 19, scope: !7)
!42 = !DILocation(line: 65, column: 43, scope: !7)
!43 = !DILocation(line: 68, column: 21, scope: !7)
!44 = !DILocation(line: 71, column: 20, scope: !7)
!45 = !DILocation(line: 72, column: 43, scope: !7)
!46 = !DILocation(line: 74, column: 20, scope: !7)
!47 = !DILocation(line: 75, column: 43, scope: !7)
!48 = !DILocation(line: 77, column: 20, scope: !7)
!49 = !DILocation(line: 78, column: 43, scope: !7)
!50 = !DILocation(line: 80, column: 20, scope: !7)
!51 = !DILocation(line: 81, column: 43, scope: !7)
!52 = !DILocation(line: 83, column: 20, scope: !7)
!53 = !DILocation(line: 84, column: 43, scope: !7)
!54 = !DILocation(line: 90, column: 20, scope: !7)
!55 = !DILocation(line: 91, column: 43, scope: !7)
!56 = !DILocation(line: 93, column: 20, scope: !7)
!57 = !DILocation(line: 94, column: 38, scope: !7)
!58 = !DILocation(line: 94, column: 31, scope: !7)
!59 = !DILocation(line: 94, column: 43, scope: !7)
!60 = !DILocation(line: 96, column: 20, scope: !7)
!61 = !DILocation(line: 97, column: 31, scope: !7)
!62 = !DILocation(line: 97, column: 36, scope: !7)
!63 = !DILocation(line: 99, column: 20, scope: !7)
!64 = !DILocation(line: 100, column: 35, scope: !7)
!65 = !DILocation(line: 100, column: 31, scope: !7)
!66 = !DILocation(line: 100, column: 40, scope: !7)
!67 = !DILocation(line: 102, column: 20, scope: !7)
!68 = !DILocation(line: 103, column: 40, scope: !7)
!69 = !DILocation(line: 108, column: 20, scope: !7)
!70 = !DILocation(line: 109, column: 20, scope: !7)
!71 = !DILocation(line: 110, column: 40, scope: !7)
!72 = !DILocation(line: 112, column: 20, scope: !7)
!73 = !DILocation(line: 113, column: 35, scope: !7)
!74 = !DILocation(line: 113, column: 31, scope: !7)
!75 = !DILocation(line: 113, column: 40, scope: !7)
!76 = !DILocation(line: 115, column: 20, scope: !7)
!77 = !DILocation(line: 116, column: 40, scope: !7)
!78 = !DILocation(line: 118, column: 20, scope: !7)
!79 = !DILocation(line: 119, column: 35, scope: !7)
!80 = !DILocation(line: 119, column: 31, scope: !7)
!81 = !DILocation(line: 119, column: 40, scope: !7)
!82 = !DILocation(line: 128, column: 22, scope: !7)
!83 = !DILocation(line: 131, column: 22, scope: !7)
!84 = !DILocation(line: 132, column: 36, scope: !7)
!85 = !DILocation(line: 132, column: 32, scope: !7)
!86 = !DILocation(line: 134, column: 22, scope: !7)
!87 = !DILocation(line: 137, column: 22, scope: !7)
!88 = !DILocation(line: 122, column: 40, scope: !7)
!89 = !DILocation(line: 129, column: 41, scope: !7)
!90 = !DILocation(line: 132, column: 41, scope: !7)
!91 = !DILocation(line: 135, column: 41, scope: !7)
!92 = !DILocation(line: 138, column: 36, scope: !7)
!93 = !DILocation(line: 138, column: 32, scope: !7)
!94 = !DILocation(line: 138, column: 41, scope: !7)
!95 = !DILocation(line: 140, column: 22, scope: !7)
!96 = !DILocation(line: 141, column: 42, scope: !7)
!97 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !100)
!98 = distinct !DILexicalBlockFile(scope: !7, file: !99, discriminator: 0)
!99 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!100 = !DILocation(line: 45, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !105)
!105 = !DILocation(line: 52, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !105)
!109 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !110)
!110 = !DILocation(line: 59, column: 42, scope: !7)
!111 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !110)
!112 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !110)
!113 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !110)
!114 = !DILocation(line: 146, column: 38, scope: !7)
!115 = !DILocation(line: 149, column: 38, scope: !7)
!116 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !117)
!117 = !DILocation(line: 66, column: 42, scope: !7)
!118 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !117)
!119 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !117)
!120 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !117)
!121 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !122)
!122 = !DILocation(line: 73, column: 42, scope: !7)
!123 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !122)
!124 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !122)
!125 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !122)
!126 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !127)
!127 = !DILocation(line: 76, column: 42, scope: !7)
!128 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !127)
!129 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !127)
!130 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !127)
!131 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !132)
!132 = !DILocation(line: 79, column: 42, scope: !7)
!133 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !132)
!134 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !132)
!135 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !132)
!136 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !137)
!137 = !DILocation(line: 82, column: 42, scope: !7)
!138 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !137)
!139 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !137)
!140 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !137)
!141 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !142)
!142 = !DILocation(line: 85, column: 42, scope: !7)
!143 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !142)
!144 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !142)
!145 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !142)
!146 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !147)
!147 = !DILocation(line: 92, column: 42, scope: !7)
!148 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !147)
!149 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !147)
!150 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !147)
!151 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !152)
!152 = !DILocation(line: 95, column: 42, scope: !7)
!153 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !152)
!154 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !152)
!155 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !152)
!156 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !157)
!157 = !DILocation(line: 98, column: 42, scope: !7)
!158 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !157)
!159 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !157)
!160 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !157)
!161 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !162)
!162 = !DILocation(line: 101, column: 42, scope: !7)
!163 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !162)
!164 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !162)
!165 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !162)
!166 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !167)
!167 = !DILocation(line: 104, column: 42, scope: !7)
!168 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !167)
!169 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !167)
!170 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !167)
!171 = !DILocation(line: 152, column: 38, scope: !7)
!172 = !DILocation(line: 155, column: 38, scope: !7)
!173 = !DILocation(line: 158, column: 38, scope: !7)
!174 = !DILocation(line: 161, column: 38, scope: !7)
!175 = !DILocation(line: 164, column: 38, scope: !7)
!176 = !DILocation(line: 167, column: 38, scope: !7)
!177 = !DILocation(line: 170, column: 38, scope: !7)
!178 = !DILocation(line: 173, column: 38, scope: !7)
!179 = !DILocation(line: 176, column: 38, scope: !7)
!180 = !DILocation(line: 179, column: 38, scope: !7)
!181 = !DILocation(line: 182, column: 38, scope: !7)
!182 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !183)
!183 = !DILocation(line: 111, column: 42, scope: !7)
!184 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !183)
!185 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !183)
!186 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !183)
!187 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !188)
!188 = !DILocation(line: 114, column: 42, scope: !7)
!189 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !188)
!190 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !188)
!191 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !188)
!192 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !193)
!193 = !DILocation(line: 117, column: 42, scope: !7)
!194 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !193)
!195 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !193)
!196 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !193)
!197 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !198)
!198 = !DILocation(line: 120, column: 42, scope: !7)
!199 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !198)
!200 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !198)
!201 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !198)
!202 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !203)
!203 = !DILocation(line: 123, column: 42, scope: !7)
!204 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !203)
!205 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !203)
!206 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !203)
!207 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !208)
!208 = !DILocation(line: 130, column: 44, scope: !7)
!209 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !208)
!210 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !208)
!211 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !208)
!212 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !213)
!213 = !DILocation(line: 133, column: 44, scope: !7)
!214 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !213)
!215 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !213)
!216 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !213)
!217 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !218)
!218 = !DILocation(line: 136, column: 44, scope: !7)
!219 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !218)
!220 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !218)
!221 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !218)
!222 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !223)
!223 = !DILocation(line: 139, column: 44, scope: !7)
!224 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !223)
!225 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !223)
!226 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !223)
!227 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !228)
!228 = !DILocation(line: 142, column: 44, scope: !7)
!229 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !228)
!230 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !228)
!231 = !DILocation(line: 185, column: 38, scope: !7)
!232 = !DILocation(line: 188, column: 38, scope: !7)
!233 = !DILocation(line: 191, column: 38, scope: !7)
!234 = !DILocation(line: 194, column: 38, scope: !7)
!235 = !DILocation(line: 197, column: 38, scope: !7)
!236 = !DILocation(line: 200, column: 38, scope: !7)
!237 = !DILocation(line: 203, column: 38, scope: !7)
!238 = !DILocation(line: 206, column: 38, scope: !7)
!239 = !DILocation(line: 209, column: 38, scope: !7)
!240 = !DILocation(line: 212, column: 38, scope: !7)
!241 = !DILocation(line: 215, column: 38, scope: !7)
!242 = !DILocation(line: 216, column: 25, scope: !7)
!243 = !DILocation(line: 216, column: 38, scope: !7)
!244 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !228)
!245 = !DILocation(line: 217, column: 25, scope: !7)
!246 = !DILocation(line: 217, column: 38, scope: !7)
!247 = !DILocation(line: 217, column: 4, scope: !7)
