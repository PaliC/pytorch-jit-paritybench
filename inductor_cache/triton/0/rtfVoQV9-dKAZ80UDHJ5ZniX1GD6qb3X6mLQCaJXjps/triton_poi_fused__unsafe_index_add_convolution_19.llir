; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 2, !dbg !13
  %13 = or disjoint i32 %11, 512, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %14 = sdiv i32 %.frozen, 16, !dbg !14
  %15 = sdiv i32 %13, 16, !dbg !14
  %16 = srem i32 %14, 16, !dbg !15
  %17 = srem i32 %15, 16, !dbg !15
  %18 = mul i32 %14, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %19 = srem i32 %12, 16, !dbg !16
  %20 = sdiv i32 %11, 256, !dbg !17
  %21 = sdiv i32 %13, 256, !dbg !17
  %22 = srem i32 %20, 256, !dbg !18
  %23 = srem i32 %21, 256, !dbg !18
  %24 = sext i32 %16 to i64, !dbg !19
  %25 = getelementptr i64, ptr addrspace(1) %1, i64 %24, !dbg !19
  %26 = sext i32 %17 to i64, !dbg !19
  %27 = getelementptr i64, ptr addrspace(1) %1, i64 %26, !dbg !19
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !20
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !20
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !20
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !20
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !20
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !20
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !20
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !20
  %36 = sext i32 %.decomposed to i64, !dbg !21
  %37 = getelementptr i64, ptr addrspace(1) %1, i64 %36, !dbg !21
  %38 = sext i32 %19 to i64, !dbg !21
  %39 = getelementptr i64, ptr addrspace(1) %1, i64 %38, !dbg !21
  %40 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !22
  %41 = extractvalue { i64, i64 } %40, 0, !dbg !22
  %42 = extractvalue { i64, i64 } %40, 1, !dbg !22
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !22
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !22
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !22
  %46 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !22
  %47 = extractvalue { i64, i64 } %46, 0, !dbg !22
  %48 = extractvalue { i64, i64 } %46, 1, !dbg !22
  %49 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !22
  %50 = extractvalue { i64, i64 } %49, 0, !dbg !22
  %51 = extractvalue { i64, i64 } %49, 1, !dbg !22
  %52 = sext i32 %11 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !23
  %54 = sext i32 %13 to i64, !dbg !23
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !23
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !24
  %61 = bitcast i32 %57 to float, !dbg !24
  %62 = bitcast i32 %58 to float, !dbg !24
  %63 = bitcast i32 %59 to float, !dbg !24
  %64 = bitcast i32 %60 to float, !dbg !24
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !24
  %70 = bitcast i32 %66 to float, !dbg !24
  %71 = bitcast i32 %67 to float, !dbg !24
  %72 = bitcast i32 %68 to float, !dbg !24
  %73 = bitcast i32 %69 to float, !dbg !24
  %74 = sext i32 %22 to i64, !dbg !25
  %75 = getelementptr float, ptr addrspace(1) %3, i64 %74, !dbg !25
  %76 = sext i32 %23 to i64, !dbg !25
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %76, !dbg !25
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !26
  %79 = bitcast i32 %78 to float, !dbg !26
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !26
  %81 = bitcast i32 %80 to float, !dbg !26
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !26
  %83 = bitcast i32 %82 to float, !dbg !26
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !26
  %85 = bitcast i32 %84 to float, !dbg !26
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #1, !dbg !26
  %87 = bitcast i32 %86 to float, !dbg !26
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #1, !dbg !26
  %89 = bitcast i32 %88 to float, !dbg !26
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #1, !dbg !26
  %91 = bitcast i32 %90 to float, !dbg !26
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #1, !dbg !26
  %93 = bitcast i32 %92 to float, !dbg !26
  %94 = lshr i64 %28, 60, !dbg !27
  %95 = and i64 %94, 8, !dbg !27
  %96 = add i64 %95, %28, !dbg !27
  %97 = lshr i64 %32, 60, !dbg !27
  %98 = and i64 %97, 8, !dbg !27
  %99 = add i64 %98, %32, !dbg !27
  %100 = lshr i64 %41, 60, !dbg !28
  %101 = and i64 %100, 8, !dbg !28
  %102 = lshr i64 %42, 60, !dbg !28
  %103 = and i64 %102, 8, !dbg !28
  %104 = lshr i64 %44, 60, !dbg !28
  %105 = and i64 %104, 8, !dbg !28
  %106 = lshr i64 %45, 60, !dbg !28
  %107 = and i64 %106, 8, !dbg !28
  %108 = lshr i64 %47, 60, !dbg !28
  %109 = and i64 %108, 8, !dbg !28
  %110 = lshr i64 %48, 60, !dbg !28
  %111 = and i64 %110, 8, !dbg !28
  %112 = lshr i64 %50, 60, !dbg !28
  %113 = and i64 %112, 8, !dbg !28
  %114 = lshr i64 %51, 60, !dbg !28
  %115 = and i64 %114, 8, !dbg !28
  %116 = shl i64 %96, 3, !dbg !29
  %117 = shl i64 %99, 3, !dbg !29
  %118 = shl nsw i32 %20, 6, !dbg !30
  %119 = shl nsw i32 %21, 6, !dbg !30
  %120 = sext i32 %118 to i64, !dbg !31
  %121 = sext i32 %119 to i64, !dbg !31
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !32
  %123 = getelementptr float, ptr addrspace(1) %122, i64 %101, !dbg !32
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %116, !dbg !32
  %125 = getelementptr float, ptr addrspace(1) %124, i64 %120, !dbg !32
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !32
  %127 = getelementptr float, ptr addrspace(1) %126, i64 %103, !dbg !32
  %128 = getelementptr float, ptr addrspace(1) %127, i64 %116, !dbg !32
  %129 = getelementptr float, ptr addrspace(1) %128, i64 %120, !dbg !32
  %130 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !32
  %131 = getelementptr float, ptr addrspace(1) %130, i64 %105, !dbg !32
  %132 = getelementptr float, ptr addrspace(1) %131, i64 %116, !dbg !32
  %133 = getelementptr float, ptr addrspace(1) %132, i64 %120, !dbg !32
  %134 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !32
  %135 = getelementptr float, ptr addrspace(1) %134, i64 %107, !dbg !32
  %136 = getelementptr float, ptr addrspace(1) %135, i64 %116, !dbg !32
  %137 = getelementptr float, ptr addrspace(1) %136, i64 %120, !dbg !32
  %138 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !32
  %139 = getelementptr float, ptr addrspace(1) %138, i64 %109, !dbg !32
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %117, !dbg !32
  %141 = getelementptr float, ptr addrspace(1) %140, i64 %121, !dbg !32
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !32
  %143 = getelementptr float, ptr addrspace(1) %142, i64 %111, !dbg !32
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %117, !dbg !32
  %145 = getelementptr float, ptr addrspace(1) %144, i64 %121, !dbg !32
  %146 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !32
  %147 = getelementptr float, ptr addrspace(1) %146, i64 %113, !dbg !32
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %117, !dbg !32
  %149 = getelementptr float, ptr addrspace(1) %148, i64 %121, !dbg !32
  %150 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !32
  %151 = getelementptr float, ptr addrspace(1) %150, i64 %115, !dbg !32
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %117, !dbg !32
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %121, !dbg !32
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #1, !dbg !33
  %155 = bitcast i32 %154 to float, !dbg !33
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #1, !dbg !33
  %157 = bitcast i32 %156 to float, !dbg !33
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #1, !dbg !33
  %159 = bitcast i32 %158 to float, !dbg !33
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 true) #1, !dbg !33
  %161 = bitcast i32 %160 to float, !dbg !33
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 true) #1, !dbg !33
  %163 = bitcast i32 %162 to float, !dbg !33
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #1, !dbg !33
  %165 = bitcast i32 %164 to float, !dbg !33
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 true) #1, !dbg !33
  %167 = bitcast i32 %166 to float, !dbg !33
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 true) #1, !dbg !33
  %169 = bitcast i32 %168 to float, !dbg !33
  %170 = fadd float %61, %79, !dbg !34
  %171 = fadd float %62, %81, !dbg !34
  %172 = fadd float %63, %83, !dbg !34
  %173 = fadd float %64, %85, !dbg !34
  %174 = fadd float %70, %87, !dbg !34
  %175 = fadd float %71, %89, !dbg !34
  %176 = fadd float %72, %91, !dbg !34
  %177 = fadd float %73, %93, !dbg !34
  %178 = fadd float %170, %155, !dbg !35
  %179 = fadd float %171, %157, !dbg !35
  %180 = fadd float %172, %159, !dbg !35
  %181 = fadd float %173, %161, !dbg !35
  %182 = fadd float %174, %163, !dbg !35
  %183 = fadd float %175, %165, !dbg !35
  %184 = fadd float %176, %167, !dbg !35
  %185 = fadd float %177, %169, !dbg !35
  %186 = bitcast float %178 to i32, !dbg !36
  %187 = bitcast float %179 to i32, !dbg !36
  %188 = bitcast float %180 to i32, !dbg !36
  %189 = bitcast float %181 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %186, i32 %187, i32 %188, i32 %189, ptr addrspace(1) %53, i1 true) #1, !dbg !36
  %190 = bitcast float %182 to i32, !dbg !36
  %191 = bitcast float %183 to i32, !dbg !36
  %192 = bitcast float %184 to i32, !dbg !36
  %193 = bitcast float %185 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %190, i32 %191, i32 %192, i32 %193, ptr addrspace(1) %55, i1 true) #1, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw3ry6t7ra7qazui24bzndelnedh35xmljrvvwrnrprevzgntwmz.py", directory: "inductor_cache/w3")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_19", linkageName: "triton_poi_fused__unsafe_index_add_convolution_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 28, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 40, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 32, scope: !7)
!28 = !DILocation(line: 39, column: 32, scope: !7)
!29 = !DILocation(line: 40, column: 39, scope: !7)
!30 = !DILocation(line: 40, column: 49, scope: !7)
!31 = !DILocation(line: 40, column: 46, scope: !7)
!32 = !DILocation(line: 40, column: 30, scope: !7)
!33 = !DILocation(line: 40, column: 54, scope: !7)
!34 = !DILocation(line: 41, column: 20, scope: !7)
!35 = !DILocation(line: 42, column: 19, scope: !7)
!36 = !DILocation(line: 43, column: 40, scope: !7)
!37 = !DILocation(line: 43, column: 4, scope: !7)
