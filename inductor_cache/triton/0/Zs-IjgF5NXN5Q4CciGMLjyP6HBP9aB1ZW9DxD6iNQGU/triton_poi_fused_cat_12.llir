; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %13 = icmp slt i32 %11, 198656, !dbg !14
  %14 = icmp slt i32 %12, 198656, !dbg !14
  %15 = sdiv i32 %11, 256, !dbg !15
  %16 = sdiv i32 %12, 256, !dbg !15
  %17 = srem i32 %15, 194, !dbg !16
  %18 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !16
  %19 = insertelement <2 x i32> %18, i32 %11, i64 1, !dbg !16
  %20 = srem <2 x i32> %19, <i32 194, i32 256>, !dbg !16
  %.frozen = freeze i32 %11, !dbg !17
  %21 = sdiv i32 %.frozen, 49664, !dbg !17
  %.frozen4 = freeze i32 %12, !dbg !17
  %22 = sdiv i32 %.frozen4, 49664, !dbg !17
  %23 = icmp slt i32 %17, 128, !dbg !18
  %24 = extractelement <2 x i32> %20, i64 0, !dbg !19
  %25 = icmp slt i32 %24, 128, !dbg !18
  %26 = mul i32 %21, 49664, !dbg !20
  %srem.decomposed = sub i32 %.frozen, %26, !dbg !20
  %27 = mul i32 %22, 49664, !dbg !20
  %srem1.decomposed = sub i32 %.frozen4, %27, !dbg !20
  %28 = shl nsw i32 %21, 15, !dbg !21
  %29 = shl nsw i32 %22, 15, !dbg !21
  %30 = add nsw i32 %28, %srem.decomposed, !dbg !22
  %31 = add nsw i32 %29, %srem1.decomposed, !dbg !22
  %32 = sext i32 %30 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !23
  %34 = sext i32 %31 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = and i1 %13, %23, !dbg !24
  %37 = and i1 %14, %25, !dbg !24
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #1, !dbg !25
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !25
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !25
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !25
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #1, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !25
  %48 = and i32 %17, -64, !dbg !26
  %49 = icmp eq i32 %48, 128, !dbg !26
  %50 = and i32 %24, -64, !dbg !26
  %51 = icmp eq i32 %50, 128, !dbg !26
  %52 = shl nsw i32 %24, 8, !dbg !27
  %53 = shl nsw i32 %21, 14, !dbg !28
  %54 = shl nsw i32 %22, 14, !dbg !28
  %55 = add nsw i32 %srem.decomposed, -32768, !dbg !29
  %56 = add nsw i32 %55, %53, !dbg !30
  %57 = extractelement <2 x i32> %20, i64 1, !dbg !27
  %58 = add nsw i32 %52, %57, !dbg !27
  %59 = add nsw i32 %58, -32768, !dbg !29
  %60 = add nsw i32 %59, %54, !dbg !30
  %61 = sext i32 %56 to i64, !dbg !31
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !31
  %63 = sext i32 %60 to i64, !dbg !31
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !31
  %65 = and i1 %13, %49, !dbg !32
  %66 = and i1 %14, %51, !dbg !32
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %62, i1 %65, i32 0, i1 %65, i32 0, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #1, !dbg !33
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !33
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !33
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !33
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !33
  %72 = bitcast i32 %68 to float, !dbg !33
  %73 = bitcast i32 %69 to float, !dbg !33
  %74 = bitcast i32 %70 to float, !dbg !33
  %75 = bitcast i32 %71 to float, !dbg !33
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %64, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #1, !dbg !33
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !33
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !33
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !33
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !33
  %81 = bitcast i32 %77 to float, !dbg !33
  %82 = bitcast i32 %78 to float, !dbg !33
  %83 = bitcast i32 %79 to float, !dbg !33
  %84 = bitcast i32 %80 to float, !dbg !33
  %85 = fcmp ogt float %72, 0.000000e+00, !dbg !34
  %86 = fcmp ogt float %73, 0.000000e+00, !dbg !34
  %87 = fcmp ogt float %74, 0.000000e+00, !dbg !34
  %88 = fcmp ogt float %75, 0.000000e+00, !dbg !34
  %89 = fcmp ogt float %81, 0.000000e+00, !dbg !34
  %90 = fcmp ogt float %82, 0.000000e+00, !dbg !34
  %91 = fcmp ogt float %83, 0.000000e+00, !dbg !34
  %92 = fcmp ogt float %84, 0.000000e+00, !dbg !34
  %93 = fmul float %72, 0x3FB99999A0000000, !dbg !35
  %94 = fmul float %73, 0x3FB99999A0000000, !dbg !35
  %95 = fmul float %74, 0x3FB99999A0000000, !dbg !35
  %96 = fmul float %75, 0x3FB99999A0000000, !dbg !35
  %97 = fmul float %81, 0x3FB99999A0000000, !dbg !35
  %98 = fmul float %82, 0x3FB99999A0000000, !dbg !35
  %99 = fmul float %83, 0x3FB99999A0000000, !dbg !35
  %100 = fmul float %84, 0x3FB99999A0000000, !dbg !35
  %101 = select i1 %85, float %72, float %93, !dbg !36
  %102 = select i1 %86, float %73, float %94, !dbg !36
  %103 = select i1 %87, float %74, float %95, !dbg !36
  %104 = select i1 %88, float %75, float %96, !dbg !36
  %105 = select i1 %89, float %81, float %97, !dbg !36
  %106 = select i1 %90, float %82, float %98, !dbg !36
  %107 = select i1 %91, float %83, float %99, !dbg !36
  %108 = select i1 %92, float %84, float %100, !dbg !36
  %109 = icmp sgt i32 %17, 191, !dbg !19
  %110 = icmp sgt i32 %24, 191, !dbg !19
  %111 = shl nsw i32 %21, 9, !dbg !37
  %112 = shl nsw i32 %22, 9, !dbg !37
  %113 = add nsw i32 %srem.decomposed, -49152, !dbg !38
  %114 = add nsw i32 %113, %111, !dbg !39
  %115 = add nsw i32 %58, -49152, !dbg !38
  %116 = add nsw i32 %115, %112, !dbg !39
  %117 = sext i32 %114 to i64, !dbg !40
  %118 = getelementptr float, ptr addrspace(1) %2, i64 %117, !dbg !40
  %119 = sext i32 %116 to i64, !dbg !40
  %120 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !40
  %121 = and i1 %13, %109, !dbg !41
  %122 = and i1 %14, %110, !dbg !41
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %118, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121) #1, !dbg !42
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !42
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !42
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !42
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !42
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %120, i1 %122, i32 0, i1 %122, i32 0, i1 %122, i32 0, i1 %122, i32 0, i1 %122) #1, !dbg !42
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !42
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !42
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !42
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !42
  %133 = sext i32 %11 to i64, !dbg !43
  %134 = getelementptr float, ptr addrspace(1) %3, i64 %133, !dbg !43
  %135 = sext i32 %12 to i64, !dbg !43
  %136 = getelementptr float, ptr addrspace(1) %3, i64 %135, !dbg !43
  %137 = bitcast float %101 to i32, !dbg !44
  %138 = select i1 %49, i32 %137, i32 %124, !dbg !45
  %139 = select i1 %23, i32 %39, i32 %138, !dbg !46
  %140 = bitcast float %102 to i32, !dbg !44
  %141 = select i1 %49, i32 %140, i32 %125, !dbg !45
  %142 = select i1 %23, i32 %40, i32 %141, !dbg !46
  %143 = bitcast float %103 to i32, !dbg !44
  %144 = select i1 %49, i32 %143, i32 %126, !dbg !45
  %145 = select i1 %23, i32 %41, i32 %144, !dbg !46
  %146 = bitcast float %104 to i32, !dbg !44
  %147 = select i1 %49, i32 %146, i32 %127, !dbg !45
  %148 = select i1 %23, i32 %42, i32 %147, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %139, i32 %142, i32 %145, i32 %148, ptr addrspace(1) %134, i1 %13) #1, !dbg !44
  %149 = bitcast float %105 to i32, !dbg !44
  %150 = select i1 %51, i32 %149, i32 %129, !dbg !45
  %151 = select i1 %25, i32 %44, i32 %150, !dbg !46
  %152 = bitcast float %106 to i32, !dbg !44
  %153 = select i1 %51, i32 %152, i32 %130, !dbg !45
  %154 = select i1 %25, i32 %45, i32 %153, !dbg !46
  %155 = bitcast float %107 to i32, !dbg !44
  %156 = select i1 %51, i32 %155, i32 %131, !dbg !45
  %157 = select i1 %25, i32 %46, i32 %156, !dbg !46
  %158 = bitcast float %108 to i32, !dbg !44
  %159 = select i1 %51, i32 %158, i32 %132, !dbg !45
  %160 = select i1 %25, i32 %47, i32 %159, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %151, i32 %154, i32 %157, i32 %160, ptr addrspace(1) %136, i1 %14) #1, !dbg !44
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmlsz2rc45hlnlqh3xvhiurymg6etkmmpp4537bt4cgs5i2rcjqz.py", directory: "inductor_cache/ml")
!4 = !{ptr @triton_poi_fused_cat_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_12", linkageName: "triton_poi_fused_cat_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 46, column: 20, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 52, scope: !7)
!22 = !DILocation(line: 33, column: 46, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 64, scope: !7)
!25 = !DILocation(line: 33, column: 57, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 38, column: 41, scope: !7)
!28 = !DILocation(line: 38, column: 62, scope: !7)
!29 = !DILocation(line: 38, column: 36, scope: !7)
!30 = !DILocation(line: 38, column: 56, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 74, scope: !7)
!33 = !DILocation(line: 38, column: 67, scope: !7)
!34 = !DILocation(line: 40, column: 20, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 43, column: 35, scope: !7)
!37 = !DILocation(line: 49, column: 60, scope: !7)
!38 = !DILocation(line: 49, column: 36, scope: !7)
!39 = !DILocation(line: 49, column: 56, scope: !7)
!40 = !DILocation(line: 49, column: 31, scope: !7)
!41 = !DILocation(line: 49, column: 73, scope: !7)
!42 = !DILocation(line: 49, column: 65, scope: !7)
!43 = !DILocation(line: 52, column: 25, scope: !7)
!44 = !DILocation(line: 52, column: 37, scope: !7)
!45 = !DILocation(line: 0, scope: !7)
!46 = !DILocation(line: 51, column: 33, scope: !7)
!47 = !DILocation(line: 52, column: 4, scope: !7)
