#loc = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0)
#loc1 = loc(unknown)
#loc140 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":116:27)
#loc181 = loc(callsite(#loc1 at #loc140))
module {
  tt.func public @triton_red_fused_max_pool2d_with_indices_mean_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0), %arg3: !tt.ptr<i8> {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0)) attributes {noinline = false} {
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<2.560000e+02> : tensor<64x1xf32> loc(#loc1)
    %cst_0 = arith.constant dense<8> : tensor<64x64xi8> loc(#loc1)
    %cst_1 = arith.constant dense<7> : tensor<64x64xi8> loc(#loc1)
    %cst_2 = arith.constant dense<6> : tensor<64x64xi8> loc(#loc1)
    %cst_3 = arith.constant dense<5> : tensor<64x64xi8> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<64x64xi8> loc(#loc1)
    %cst_5 = arith.constant dense<3> : tensor<64x64xi8> loc(#loc1)
    %cst_6 = arith.constant dense<2> : tensor<64x64xi8> loc(#loc1)
    %cst_7 = arith.constant dense<0> : tensor<64x64xi8> loc(#loc1)
    %cst_8 = arith.constant dense<1> : tensor<64x64xi8> loc(#loc1)
    %cst_9 = arith.constant dense<33> : tensor<1x64xi32> loc(#loc1)
    %cst_10 = arith.constant dense<32> : tensor<1x64xi32> loc(#loc1)
    %cst_11 = arith.constant dense<31> : tensor<1x64xi32> loc(#loc1)
    %cst_12 = arith.constant dense<-31> : tensor<1x64xi32> loc(#loc1)
    %cst_13 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc1)
    %cst_14 = arith.constant dense<-32> : tensor<1x64xi32> loc(#loc1)
    %cst_15 = arith.constant dense<0xFF800000> : tensor<64x64xf32> loc(#loc1)
    %cst_16 = arith.constant dense<1024> : tensor<64x1xi32> loc(#loc1)
    %cst_17 = arith.constant dense<64> : tensor<1x64xi32> loc(#loc1)
    %cst_18 = arith.constant dense<-33> : tensor<1x64xi32> loc(#loc1)
    %cst_19 = arith.constant dense<32> : tensor<1x64xi64> loc(#loc1)
    %cst_20 = arith.constant dense<0> : tensor<1x64xi64> loc(#loc1)
    %cst_21 = arith.constant dense<-1> : tensor<1x64xi32> loc(#loc1)
    %cst_22 = arith.constant dense<2> : tensor<1x64xi32> loc(#loc1)
    %cst_23 = arith.constant dense<16> : tensor<1x64xi32> loc(#loc1)
    %cst_24 = arith.constant dense<256> : tensor<1x64xi32> loc(#loc1)
    %cst_25 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %cst_26 = arith.constant dense<256> : tensor<64x1xi32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<64x1xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64x1xi32> loc(#loc6)
    %6 = arith.cmpi slt, %5, %cst_26 : tensor<64x1xi32> loc(#loc7)
    %7 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc8)
    %8 = arith.muli %5, %cst_16 : tensor<64x1xi32> loc(#loc9)
    %9 = tt.broadcast %8 : tensor<64x1xi32> -> tensor<64x64xi32> loc(#loc10)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>> loc(#loc11)
    %11 = tt.broadcast %6 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc12)
    %12 = arith.muli %5, %cst_26 : tensor<64x1xi32> loc(#loc13)
    %13 = tt.broadcast %12 : tensor<64x1xi32> -> tensor<64x64xi32> loc(#loc14)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>> loc(#loc15)
    %15 = tt.splat %arg3 : !tt.ptr<i8> -> tensor<64x64x!tt.ptr<i8>> loc(#loc16)
    %16 = scf.for %arg6 = %c0_i32 to %c256_i32 step %c64_i32 iter_args(%arg7 = %cst_25) -> (tensor<64x64xf32>)  : i32 {
      %22 = tt.splat %arg6 : i32 -> tensor<1x64xi32> loc(#loc18)
      %23 = arith.addi %22, %7 : tensor<1x64xi32> loc(#loc18)
      %24 = arith.cmpi slt, %23, %cst_24 : tensor<1x64xi32> loc(#loc19)
      %25 = arith.divsi %23, %cst_23 : tensor<1x64xi32> loc(#loc20)
      %26 = arith.remsi %23, %cst_23 : tensor<1x64xi32> loc(#loc21)
      %27 = arith.muli %25, %cst_22 : tensor<1x64xi32> loc(#loc22)
      %28 = arith.addi %27, %cst_21 : tensor<1x64xi32> loc(#loc23)
      %29 = arith.extsi %28 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc24)
      %30 = arith.cmpi sge, %29, %cst_20 : tensor<1x64xi64> loc(#loc24)
      %31 = arith.cmpi slt, %29, %cst_19 : tensor<1x64xi64> loc(#loc25)
      %32 = arith.andi %30, %31 : tensor<1x64xi1> loc(#loc26)
      %33 = arith.muli %26, %cst_22 : tensor<1x64xi32> loc(#loc27)
      %34 = arith.addi %33, %cst_21 : tensor<1x64xi32> loc(#loc28)
      %35 = arith.extsi %34 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc29)
      %36 = arith.cmpi sge, %35, %cst_20 : tensor<1x64xi64> loc(#loc29)
      %37 = arith.cmpi slt, %35, %cst_19 : tensor<1x64xi64> loc(#loc30)
      %38 = arith.andi %36, %37 : tensor<1x64xi1> loc(#loc31)
      %39 = arith.andi %32, %38 : tensor<1x64xi1> loc(#loc32)
      %40 = arith.addi %33, %cst_18 : tensor<1x64xi32> loc(#loc33)
      %41 = arith.muli %25, %cst_17 : tensor<1x64xi32> loc(#loc34)
      %42 = arith.addi %40, %41 : tensor<1x64xi32> loc(#loc35)
      %43 = tt.broadcast %42 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc10)
      %44 = arith.addi %43, %9 : tensor<64x64xi32> loc(#loc10)
      %45 = tt.addptr %10, %44 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc11)
      %46 = arith.andi %24, %39 : tensor<1x64xi1> loc(#loc36)
      %47 = tt.broadcast %46 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc12)
      %48 = arith.andi %47, %11 : tensor<64x64xi1> loc(#loc12)
      %49 = tt.load %45, %48, %cst_15 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>> loc(#loc37)
      %50 = arith.extsi %33 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc38)
      %51 = arith.cmpi sge, %50, %cst_20 : tensor<1x64xi64> loc(#loc38)
      %52 = arith.cmpi slt, %50, %cst_19 : tensor<1x64xi64> loc(#loc39)
      %53 = arith.andi %51, %52 : tensor<1x64xi1> loc(#loc40)
      %54 = arith.andi %32, %53 : tensor<1x64xi1> loc(#loc41)
      %55 = arith.addi %33, %cst_14 : tensor<1x64xi32> loc(#loc42)
      %56 = arith.addi %55, %41 : tensor<1x64xi32> loc(#loc43)
      %57 = tt.broadcast %56 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc44)
      %58 = arith.addi %57, %9 : tensor<64x64xi32> loc(#loc44)
      %59 = tt.addptr %10, %58 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc45)
      %60 = arith.andi %24, %54 : tensor<1x64xi1> loc(#loc46)
      %61 = tt.broadcast %60 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc47)
      %62 = arith.andi %61, %11 : tensor<64x64xi1> loc(#loc47)
      %63 = tt.load %59, %62, %cst_15 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>> loc(#loc48)
      %64 = arith.cmpf ogt, %63, %49 : tensor<64x64xf32> loc(#loc148)
      %65 = arith.cmpf une, %63, %63 : tensor<64x64xf32> loc(#loc149)
      %66 = arith.ori %64, %65 : tensor<64x64xi1> loc(#loc150)
      %67 = arith.select %66, %63, %49 : tensor<64x64xi1>, tensor<64x64xf32> loc(#loc151)
      %68 = arith.addi %33, %cst_13 : tensor<1x64xi32> loc(#loc54)
      %69 = arith.extsi %68 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc55)
      %70 = arith.cmpi sge, %69, %cst_20 : tensor<1x64xi64> loc(#loc55)
      %71 = arith.cmpi slt, %69, %cst_19 : tensor<1x64xi64> loc(#loc56)
      %72 = arith.andi %70, %71 : tensor<1x64xi1> loc(#loc57)
      %73 = arith.andi %32, %72 : tensor<1x64xi1> loc(#loc58)
      %74 = arith.addi %33, %cst_12 : tensor<1x64xi32> loc(#loc59)
      %75 = arith.addi %74, %41 : tensor<1x64xi32> loc(#loc60)
      %76 = tt.broadcast %75 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc61)
      %77 = arith.addi %76, %9 : tensor<64x64xi32> loc(#loc61)
      %78 = tt.addptr %10, %77 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc62)
      %79 = arith.andi %24, %73 : tensor<1x64xi1> loc(#loc63)
      %80 = tt.broadcast %79 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc64)
      %81 = arith.andi %80, %11 : tensor<64x64xi1> loc(#loc64)
      %82 = tt.load %78, %81, %cst_15 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>> loc(#loc65)
      %83 = arith.cmpf ogt, %82, %67 : tensor<64x64xf32> loc(#loc152)
      %84 = arith.cmpf une, %82, %82 : tensor<64x64xf32> loc(#loc153)
      %85 = arith.ori %83, %84 : tensor<64x64xi1> loc(#loc154)
      %86 = arith.select %85, %82, %67 : tensor<64x64xi1>, tensor<64x64xf32> loc(#loc155)
      %87 = arith.extsi %27 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc67)
      %88 = arith.cmpi sge, %87, %cst_20 : tensor<1x64xi64> loc(#loc67)
      %89 = arith.cmpi slt, %87, %cst_19 : tensor<1x64xi64> loc(#loc68)
      %90 = arith.andi %88, %89 : tensor<1x64xi1> loc(#loc69)
      %91 = arith.andi %90, %38 : tensor<1x64xi1> loc(#loc70)
      %92 = arith.addi %34, %41 : tensor<1x64xi32> loc(#loc71)
      %93 = tt.broadcast %92 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc72)
      %94 = arith.addi %93, %9 : tensor<64x64xi32> loc(#loc72)
      %95 = tt.addptr %10, %94 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc73)
      %96 = arith.andi %24, %91 : tensor<1x64xi1> loc(#loc74)
      %97 = tt.broadcast %96 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc75)
      %98 = arith.andi %97, %11 : tensor<64x64xi1> loc(#loc75)
      %99 = tt.load %95, %98, %cst_15 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>> loc(#loc76)
      %100 = arith.cmpf ogt, %99, %86 : tensor<64x64xf32> loc(#loc156)
      %101 = arith.cmpf une, %99, %99 : tensor<64x64xf32> loc(#loc157)
      %102 = arith.ori %100, %101 : tensor<64x64xi1> loc(#loc158)
      %103 = arith.select %102, %99, %86 : tensor<64x64xi1>, tensor<64x64xf32> loc(#loc159)
      %104 = arith.andi %90, %53 : tensor<1x64xi1> loc(#loc78)
      %105 = arith.addi %33, %41 : tensor<1x64xi32> loc(#loc79)
      %106 = tt.broadcast %105 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc80)
      %107 = arith.addi %106, %9 : tensor<64x64xi32> loc(#loc80)
      %108 = tt.addptr %10, %107 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc81)
      %109 = arith.andi %24, %104 : tensor<1x64xi1> loc(#loc82)
      %110 = tt.broadcast %109 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc83)
      %111 = arith.andi %110, %11 : tensor<64x64xi1> loc(#loc83)
      %112 = tt.load %108, %111, %cst_15 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>> loc(#loc84)
      %113 = arith.cmpf ogt, %112, %103 : tensor<64x64xf32> loc(#loc160)
      %114 = arith.cmpf une, %112, %112 : tensor<64x64xf32> loc(#loc161)
      %115 = arith.ori %113, %114 : tensor<64x64xi1> loc(#loc162)
      %116 = arith.select %115, %112, %103 : tensor<64x64xi1>, tensor<64x64xf32> loc(#loc163)
      %117 = arith.andi %90, %72 : tensor<1x64xi1> loc(#loc86)
      %118 = arith.addi %68, %41 : tensor<1x64xi32> loc(#loc87)
      %119 = tt.broadcast %118 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc88)
      %120 = arith.addi %119, %9 : tensor<64x64xi32> loc(#loc88)
      %121 = tt.addptr %10, %120 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc89)
      %122 = arith.andi %24, %117 : tensor<1x64xi1> loc(#loc90)
      %123 = tt.broadcast %122 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc91)
      %124 = arith.andi %123, %11 : tensor<64x64xi1> loc(#loc91)
      %125 = tt.load %121, %124, %cst_15 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>> loc(#loc92)
      %126 = arith.cmpf ogt, %125, %116 : tensor<64x64xf32> loc(#loc164)
      %127 = arith.cmpf une, %125, %125 : tensor<64x64xf32> loc(#loc165)
      %128 = arith.ori %126, %127 : tensor<64x64xi1> loc(#loc166)
      %129 = arith.select %128, %125, %116 : tensor<64x64xi1>, tensor<64x64xf32> loc(#loc167)
      %130 = arith.addi %27, %cst_13 : tensor<1x64xi32> loc(#loc94)
      %131 = arith.extsi %130 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc95)
      %132 = arith.cmpi sge, %131, %cst_20 : tensor<1x64xi64> loc(#loc95)
      %133 = arith.cmpi slt, %131, %cst_19 : tensor<1x64xi64> loc(#loc96)
      %134 = arith.andi %132, %133 : tensor<1x64xi1> loc(#loc97)
      %135 = arith.andi %134, %38 : tensor<1x64xi1> loc(#loc98)
      %136 = arith.addi %33, %cst_11 : tensor<1x64xi32> loc(#loc99)
      %137 = arith.addi %136, %41 : tensor<1x64xi32> loc(#loc100)
      %138 = tt.broadcast %137 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc101)
      %139 = arith.addi %138, %9 : tensor<64x64xi32> loc(#loc101)
      %140 = tt.addptr %10, %139 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc102)
      %141 = arith.andi %24, %135 : tensor<1x64xi1> loc(#loc103)
      %142 = tt.broadcast %141 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc104)
      %143 = arith.andi %142, %11 : tensor<64x64xi1> loc(#loc104)
      %144 = tt.load %140, %143, %cst_15 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>> loc(#loc105)
      %145 = arith.cmpf ogt, %144, %129 : tensor<64x64xf32> loc(#loc168)
      %146 = arith.cmpf une, %144, %144 : tensor<64x64xf32> loc(#loc169)
      %147 = arith.ori %145, %146 : tensor<64x64xi1> loc(#loc170)
      %148 = arith.select %147, %144, %129 : tensor<64x64xi1>, tensor<64x64xf32> loc(#loc171)
      %149 = arith.andi %134, %53 : tensor<1x64xi1> loc(#loc107)
      %150 = arith.addi %33, %cst_10 : tensor<1x64xi32> loc(#loc108)
      %151 = arith.addi %150, %41 : tensor<1x64xi32> loc(#loc109)
      %152 = tt.broadcast %151 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc110)
      %153 = arith.addi %152, %9 : tensor<64x64xi32> loc(#loc110)
      %154 = tt.addptr %10, %153 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc111)
      %155 = arith.andi %24, %149 : tensor<1x64xi1> loc(#loc112)
      %156 = tt.broadcast %155 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc113)
      %157 = arith.andi %156, %11 : tensor<64x64xi1> loc(#loc113)
      %158 = tt.load %154, %157, %cst_15 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>> loc(#loc114)
      %159 = arith.cmpf ogt, %158, %148 : tensor<64x64xf32> loc(#loc172)
      %160 = arith.cmpf une, %158, %158 : tensor<64x64xf32> loc(#loc173)
      %161 = arith.ori %159, %160 : tensor<64x64xi1> loc(#loc174)
      %162 = arith.select %161, %158, %148 : tensor<64x64xi1>, tensor<64x64xf32> loc(#loc175)
      %163 = arith.andi %134, %72 : tensor<1x64xi1> loc(#loc116)
      %164 = arith.addi %33, %cst_9 : tensor<1x64xi32> loc(#loc117)
      %165 = arith.addi %164, %41 : tensor<1x64xi32> loc(#loc118)
      %166 = tt.broadcast %165 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc119)
      %167 = arith.addi %166, %9 : tensor<64x64xi32> loc(#loc119)
      %168 = tt.addptr %10, %167 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc120)
      %169 = arith.andi %24, %163 : tensor<1x64xi1> loc(#loc121)
      %170 = tt.broadcast %169 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc122)
      %171 = arith.andi %170, %11 : tensor<64x64xi1> loc(#loc122)
      %172 = tt.load %168, %171, %cst_15 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>> loc(#loc123)
      %173 = arith.cmpf ogt, %172, %162 : tensor<64x64xf32> loc(#loc176)
      %174 = arith.cmpf une, %172, %172 : tensor<64x64xf32> loc(#loc177)
      %175 = arith.ori %173, %174 : tensor<64x64xi1> loc(#loc178)
      %176 = arith.select %175, %172, %162 : tensor<64x64xi1>, tensor<64x64xf32> loc(#loc179)
      %177 = arith.select %64, %cst_8, %cst_7 : tensor<64x64xi1>, tensor<64x64xi8> loc(#loc125)
      %178 = arith.select %83, %cst_6, %177 : tensor<64x64xi1>, tensor<64x64xi8> loc(#loc126)
      %179 = arith.select %100, %cst_5, %178 : tensor<64x64xi1>, tensor<64x64xi8> loc(#loc127)
      %180 = arith.select %113, %cst_4, %179 : tensor<64x64xi1>, tensor<64x64xi8> loc(#loc128)
      %181 = arith.select %126, %cst_3, %180 : tensor<64x64xi1>, tensor<64x64xi8> loc(#loc129)
      %182 = arith.select %145, %cst_2, %181 : tensor<64x64xi1>, tensor<64x64xi8> loc(#loc130)
      %183 = arith.select %159, %cst_1, %182 : tensor<64x64xi1>, tensor<64x64xi8> loc(#loc131)
      %184 = arith.select %173, %cst_0, %183 : tensor<64x64xi1>, tensor<64x64xi8> loc(#loc132)
      %185 = arith.addf %arg7, %176 : tensor<64x64xf32> loc(#loc133)
      %186 = tt.broadcast %24 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc134)
      %187 = arith.andi %186, %11 : tensor<64x64xi1> loc(#loc134)
      %188 = arith.select %187, %185, %arg7 : tensor<64x64xi1>, tensor<64x64xf32> loc(#loc135)
      %189 = tt.broadcast %23 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc14)
      %190 = arith.addi %189, %13 : tensor<64x64xi32> loc(#loc14)
      %191 = tt.addptr %14, %190 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc15)
      tt.store %191, %176, %187 : tensor<64x64x!tt.ptr<f32>> loc(#loc136)
      %192 = tt.addptr %15, %190 : tensor<64x64x!tt.ptr<i8>>, tensor<64x64xi32> loc(#loc16)
      tt.store %192, %184, %187 : tensor<64x64x!tt.ptr<i8>> loc(#loc137)
      scf.yield %188 : tensor<64x64xf32> loc(#loc138)
    } loc(#loc17)
    %17 = "tt.reduce"(%16) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc140)), %arg7: f32 loc(callsite(#loc1 at #loc140))):
      %22 = arith.addf %arg6, %arg7 : f32 loc(#loc183)
      tt.reduce.return %22 : f32 loc(#loc180)
    }) : (tensor<64x64xf32>) -> tensor<64xf32> loc(#loc180)
    %18 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc142)
    %19 = arith.divf %18, %cst : tensor<64x1xf32> loc(#loc143)
    gpu.barrier loc(#loc144)
    %20 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc145)
    %21 = tt.addptr %20, %5 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc145)
    tt.store %21, %19, %6 : tensor<64x1x!tt.ptr<f32>> loc(#loc146)
    tt.return loc(#loc147)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":22:28)
#loc3 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":22:33)
#loc4 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":23:36)
#loc5 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":23:44)
#loc6 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":23:23)
#loc7 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":24:21)
#loc8 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":25:33)
#loc9 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:63)
#loc10 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:58)
#loc11 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:35)
#loc12 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:84)
#loc13 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":114:38)
#loc14 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":114:34)
#loc15 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":114:29)
#loc16 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":115:29)
#loc17 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":28:36)
#loc18 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":29:27)
#loc19 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":30:25)
#loc20 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":31:23)
#loc21 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":32:23)
#loc22 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":34:24)
#loc23 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":34:22)
#loc24 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":36:23)
#loc25 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":38:22)
#loc26 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":39:22)
#loc27 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":40:24)
#loc28 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":40:22)
#loc29 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":41:23)
#loc30 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":42:22)
#loc31 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":43:22)
#loc32 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":44:23)
#loc33 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:43)
#loc34 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:53)
#loc35 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:50)
#loc36 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:76)
#loc37 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:68)
#loc38 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":47:25)
#loc39 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":48:24)
#loc40 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":49:24)
#loc41 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":50:23)
#loc42 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:43)
#loc43 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:50)
#loc44 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:58)
#loc45 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:35)
#loc46 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:76)
#loc47 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:84)
#loc48 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:68)
#loc49 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc50 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":52:46)
#loc51 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc52 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc53 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc54 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":53:20)
#loc55 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":54:25)
#loc56 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":55:24)
#loc57 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":56:24)
#loc58 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":57:23)
#loc59 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:43)
#loc60 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:50)
#loc61 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:58)
#loc62 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:35)
#loc63 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:76)
#loc64 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:84)
#loc65 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:68)
#loc66 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":59:46)
#loc67 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":61:25)
#loc68 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":62:24)
#loc69 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":63:24)
#loc70 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":64:24)
#loc71 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:49)
#loc72 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:57)
#loc73 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:35)
#loc74 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:75)
#loc75 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:83)
#loc76 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:67)
#loc77 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":66:46)
#loc78 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":67:24)
#loc79 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:42)
#loc80 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:50)
#loc81 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:35)
#loc82 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:68)
#loc83 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:76)
#loc84 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:60)
#loc85 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":69:46)
#loc86 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":70:24)
#loc87 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:46)
#loc88 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:54)
#loc89 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:35)
#loc90 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:72)
#loc91 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:80)
#loc92 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:64)
#loc93 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":72:46)
#loc94 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":73:20)
#loc95 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":74:25)
#loc96 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":75:24)
#loc97 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":76:24)
#loc98 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":77:24)
#loc99 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:40)
#loc100 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:47)
#loc101 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:55)
#loc102 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:35)
#loc103 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:73)
#loc104 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:81)
#loc105 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:65)
#loc106 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":79:46)
#loc107 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":80:24)
#loc108 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:40)
#loc109 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:47)
#loc110 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:55)
#loc111 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:35)
#loc112 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:73)
#loc113 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:81)
#loc114 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:65)
#loc115 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":82:46)
#loc116 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":83:24)
#loc117 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:40)
#loc118 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:47)
#loc119 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:55)
#loc120 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:35)
#loc121 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:73)
#loc122 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:81)
#loc123 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:65)
#loc124 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":85:46)
#loc125 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":89:39)
#loc126 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":92:39)
#loc127 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":95:39)
#loc128 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":98:39)
#loc129 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":101:39)
#loc130 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":104:39)
#loc131 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":107:39)
#loc132 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":110:39)
#loc133 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":112:25)
#loc134 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":113:34)
#loc135 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":113:48)
#loc136 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":114:50)
#loc137 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":115:50)
#loc138 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":115:8)
#loc139 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc141 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc142 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":116:30)
#loc143 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":118:20)
#loc144 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":119:4)
#loc145 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":120:28)
#loc146 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":120:40)
#loc147 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":120:4)
#loc148 = loc(callsite(#loc49 at #loc50))
#loc149 = loc(callsite(#loc51 at #loc50))
#loc150 = loc(callsite(#loc52 at #loc50))
#loc151 = loc(callsite(#loc53 at #loc50))
#loc152 = loc(callsite(#loc49 at #loc66))
#loc153 = loc(callsite(#loc51 at #loc66))
#loc154 = loc(callsite(#loc52 at #loc66))
#loc155 = loc(callsite(#loc53 at #loc66))
#loc156 = loc(callsite(#loc49 at #loc77))
#loc157 = loc(callsite(#loc51 at #loc77))
#loc158 = loc(callsite(#loc52 at #loc77))
#loc159 = loc(callsite(#loc53 at #loc77))
#loc160 = loc(callsite(#loc49 at #loc85))
#loc161 = loc(callsite(#loc51 at #loc85))
#loc162 = loc(callsite(#loc52 at #loc85))
#loc163 = loc(callsite(#loc53 at #loc85))
#loc164 = loc(callsite(#loc49 at #loc93))
#loc165 = loc(callsite(#loc51 at #loc93))
#loc166 = loc(callsite(#loc52 at #loc93))
#loc167 = loc(callsite(#loc53 at #loc93))
#loc168 = loc(callsite(#loc49 at #loc106))
#loc169 = loc(callsite(#loc51 at #loc106))
#loc170 = loc(callsite(#loc52 at #loc106))
#loc171 = loc(callsite(#loc53 at #loc106))
#loc172 = loc(callsite(#loc49 at #loc115))
#loc173 = loc(callsite(#loc51 at #loc115))
#loc174 = loc(callsite(#loc52 at #loc115))
#loc175 = loc(callsite(#loc53 at #loc115))
#loc176 = loc(callsite(#loc49 at #loc124))
#loc177 = loc(callsite(#loc51 at #loc124))
#loc178 = loc(callsite(#loc52 at #loc124))
#loc179 = loc(callsite(#loc53 at #loc124))
#loc180 = loc(callsite(#loc139 at #loc140))
#loc182 = loc(callsite(#loc141 at #loc139))
#loc183 = loc(callsite(#loc182 at #loc140))
