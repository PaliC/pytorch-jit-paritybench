; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_max_pool2d_with_indices_mean_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = lshr i32 %9, 4, !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = lshr i32 %9, 3, !dbg !12
  %14 = and i32 %13, 63, !dbg !12
  %15 = or disjoint i32 %8, %10, !dbg !13
  %16 = or disjoint i32 %8, %12, !dbg !13
  %17 = or disjoint i32 %16, 32, !dbg !13
  %18 = or disjoint i32 %8, %14, !dbg !13
  %19 = icmp slt i32 %15, 256, !dbg !14
  %20 = icmp slt i32 %16, 256, !dbg !14
  %21 = icmp slt i32 %17, 256, !dbg !14
  %22 = icmp slt i32 %18, 256, !dbg !14
  %23 = lshr i32 %9, 6, !dbg !15
  %24 = and i32 %23, 7, !dbg !15
  %25 = shl i32 %9, 2, !dbg !15
  %26 = and i32 %25, 60, !dbg !15
  %27 = shl i32 %9, 3, !dbg !15
  %28 = and i32 %27, 56, !dbg !15
  %29 = shl i32 %15, 10, !dbg !16
  %30 = shl i32 %16, 8, !dbg !17
  %31 = shl i32 %17, 8, !dbg !17
  %32 = shl i32 %18, 8, !dbg !17
  %33 = shl nuw nsw i32 %24, 1
  %34 = shl nuw nsw i32 %24, 1
  %35 = or disjoint i32 %34, 16
  %36 = shl nuw nsw i32 %24, 1
  %37 = or disjoint i32 %36, 16
  %38 = shl nuw nsw i32 %24, 1
  %39 = or disjoint i32 %38, 16
  %40 = add nsw i32 %33, -1
  %41 = add nuw nsw i32 %33, 15
  %42 = add nuw nsw i32 %34, 15
  %43 = add nuw nsw i32 %36, 15
  %44 = add nuw nsw i32 %38, 15
  %45 = icmp ne i32 %24, 0
  %46 = add nuw nsw i32 %33, -33
  %47 = add nuw nsw i32 %33, -17
  %48 = add nuw nsw i32 %34, -17
  %49 = add nuw nsw i32 %36, -17
  %50 = add nuw nsw i32 %38, -17
  %51 = add i32 %29, %46
  %52 = add i32 %47, %29
  %53 = add i32 %48, %29
  %54 = add i32 %49, %29
  %55 = add i32 %50, %29
  %invariant.op24 = and i1 %45, %19, !dbg !18
  %invariant.op26 = or disjoint i32 %41, %29, !dbg !18
  %invariant.op28 = or disjoint i32 %42, %29, !dbg !18
  %invariant.op30 = or disjoint i32 %43, %29, !dbg !18
  %invariant.op32 = or disjoint i32 %44, %29, !dbg !18
  %56 = or disjoint i32 %33, -32
  %57 = or disjoint i32 %33, -16
  %58 = or disjoint i32 %34, -16
  %59 = or disjoint i32 %36, -16
  %60 = or disjoint i32 %38, -16
  %61 = add i32 %29, %56
  %62 = add i32 %57, %29
  %invariant.op36 = add i32 %58, %29, !dbg !18
  %invariant.op40 = add i32 %59, %29, !dbg !18
  %invariant.op44 = add i32 %60, %29, !dbg !18
  %63 = or disjoint i32 %33, -31
  %64 = or disjoint i32 %33, -15
  %65 = or disjoint i32 %34, -15
  %66 = or disjoint i32 %36, -15
  %67 = or disjoint i32 %38, -15
  %68 = add i32 %29, %63
  %69 = add i32 %64, %29
  %invariant.op48 = add i32 %65, %29, !dbg !18
  %invariant.op52 = add i32 %66, %29, !dbg !18
  %invariant.op56 = add i32 %67, %29, !dbg !18
  %70 = add i32 %29, %40
  %71 = add nuw nsw i32 %33, 31
  %72 = add nuw nsw i32 %33, 47
  %73 = add nuw nsw i32 %34, 47
  %74 = add nuw nsw i32 %36, 47
  %75 = add nuw nsw i32 %38, 47
  %76 = or disjoint i32 %29, %71
  %invariant.op58 = or disjoint i32 %72, %29, !dbg !18
  %invariant.op60 = or disjoint i32 %73, %29, !dbg !18
  %invariant.op62 = or disjoint i32 %74, %29, !dbg !18
  %invariant.op64 = or disjoint i32 %75, %29, !dbg !18
  %77 = or disjoint i32 %32, %28
  %78 = shl i32 %9, 6
  %79 = and i32 %78, 4032
  %80 = or disjoint i32 %79, %24
  %81 = and i32 %25, 2044
  %82 = lshr exact i32 %79, 3
  %83 = lshr exact i32 %79, 2
  %84 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %83
  %85 = getelementptr float, ptr addrspace(3) %84, i32 %80
  %86 = or disjoint i32 %80, 8
  %87 = getelementptr float, ptr addrspace(3) %84, i32 %86
  %88 = or disjoint i32 %80, 16
  %89 = getelementptr float, ptr addrspace(3) %84, i32 %88
  %90 = or disjoint i32 %80, 24
  %91 = getelementptr float, ptr addrspace(3) %84, i32 %90
  %92 = or disjoint i32 %80, 32
  %93 = getelementptr float, ptr addrspace(3) %84, i32 %92
  %94 = or disjoint i32 %80, 40
  %95 = getelementptr float, ptr addrspace(3) %84, i32 %94
  %96 = or disjoint i32 %80, 48
  %97 = getelementptr float, ptr addrspace(3) %84, i32 %96
  %98 = or disjoint i32 %80, 56
  %99 = getelementptr float, ptr addrspace(3) %84, i32 %98
  %100 = lshr i32 %25, 4
  %101 = and i32 %100, 124
  %102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %101
  %103 = getelementptr inbounds float, ptr addrspace(3) %102, i32 %81
  %104 = or disjoint i32 %81, 2048
  %105 = lshr i32 %104, 4
  %106 = and i32 %105, 252
  %107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %106
  %108 = getelementptr inbounds float, ptr addrspace(3) %107, i32 %104
  %109 = and i32 %27, 4088
  %110 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %82
  %111 = getelementptr i8, ptr addrspace(3) %110, i32 %80
  %112 = getelementptr i8, ptr addrspace(3) %110, i32 %86
  %113 = getelementptr i8, ptr addrspace(3) %110, i32 %88
  %114 = getelementptr i8, ptr addrspace(3) %110, i32 %90
  %115 = getelementptr i8, ptr addrspace(3) %110, i32 %92
  %116 = getelementptr i8, ptr addrspace(3) %110, i32 %94
  %117 = getelementptr i8, ptr addrspace(3) %110, i32 %96
  %118 = getelementptr i8, ptr addrspace(3) %110, i32 %98
  %119 = and i32 %9, 504
  %120 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %119
  %121 = getelementptr inbounds i8, ptr addrspace(3) %120, i32 %109
  %122 = sext i32 %77 to i64, !dbg !18
  %123 = zext nneg i32 %33 to i64, !dbg !18
  %124 = sext i32 %29 to i64, !dbg !18
  %125 = zext nneg i32 %26 to i64, !dbg !18
  %126 = sext i32 %30 to i64, !dbg !18
  %127 = sext i32 %31 to i64, !dbg !18
  %128 = zext nneg i32 %39 to i64, !dbg !18
  %129 = sext i32 %invariant.op32 to i64, !dbg !18
  %130 = sext i32 %invariant.op64 to i64, !dbg !18
  %131 = zext nneg i32 %37 to i64, !dbg !18
  %132 = sext i32 %invariant.op30 to i64, !dbg !18
  %133 = sext i32 %invariant.op62 to i64, !dbg !18
  %134 = zext nneg i32 %35 to i64, !dbg !18
  %135 = sext i32 %invariant.op28 to i64, !dbg !18
  %136 = sext i32 %invariant.op60 to i64, !dbg !18
  %invariant.op = or disjoint i64 %123, 64, !dbg !18
  %invariant.op89 = or disjoint i64 %123, 128, !dbg !18
  %invariant.op91 = or disjoint i64 %123, 192, !dbg !18
  %invariant.op93 = or disjoint i64 %123, %124, !dbg !18
  %invariant.op95 = or disjoint i64 %invariant.op, %124, !dbg !18
  %invariant.op97 = or disjoint i64 %134, %124, !dbg !18
  %invariant.op99 = or disjoint i64 %invariant.op89, %124, !dbg !18
  %invariant.op101 = or disjoint i64 %131, %124, !dbg !18
  %invariant.op103 = or disjoint i64 %invariant.op91, %124, !dbg !18
  %invariant.op105 = or disjoint i64 %128, %124, !dbg !18
  %invariant.gep = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !18
  %invariant.gep107 = getelementptr float, ptr addrspace(1) %2, i64 %127, !dbg !18
  %137 = getelementptr inbounds i8, ptr addrspace(3) %103, i32 4
  %138 = getelementptr inbounds i8, ptr addrspace(3) %103, i32 8
  %139 = getelementptr inbounds i8, ptr addrspace(3) %103, i32 12
  %invariant.gep109 = getelementptr i8, ptr addrspace(1) %3, i64 %122, !dbg !18
  %140 = getelementptr inbounds i8, ptr addrspace(3) %121, i32 4
  %141 = insertelement <8 x i1> poison, i1 %19, i64 0, !dbg !19
  %142 = shufflevector <8 x i1> %141, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !19
  %invariant.op131 = or i32 %33, %29, !dbg !18
  br label %143, !dbg !18

143:                                              ; preds = %6, %143
  %indvars.iv = phi i64 [ 0, %6 ], [ %indvars.iv.next, %143 ]
  %144 = phi <8 x float> [ zeroinitializer, %6 ], [ %663, %143 ]
  %145 = or disjoint i64 %indvars.iv, %125, !dbg !20
  %146 = icmp ne i64 %indvars.iv, 0, !dbg !21
  %147 = shl nuw nsw i64 %indvars.iv, 2, !dbg !22
  %148 = shl nuw nsw i64 %indvars.iv, 2, !dbg !22
  %149 = and i64 %148, 768, !dbg !22
  %150 = or disjoint i64 %149, 64, !dbg !22
  %151 = shl nuw nsw i64 %indvars.iv, 2, !dbg !22
  %152 = and i64 %151, 768, !dbg !22
  %153 = or disjoint i64 %152, 128, !dbg !22
  %154 = shl nuw nsw i64 %indvars.iv, 2, !dbg !22
  %155 = and i64 %154, 768, !dbg !22
  %156 = or disjoint i64 %155, 192, !dbg !22
  %157 = trunc nuw nsw i64 %147 to i32, !dbg !23
  %158 = add i32 %51, %157, !dbg !23
  %159 = add i32 %52, %157, !dbg !23
  %160 = trunc i64 %147 to i32
  %161 = or disjoint i32 %160, 64
  %.reass = add i32 %51, %161
  %162 = trunc nuw nsw i64 %150 to i32, !dbg !23
  %163 = add i32 %53, %162, !dbg !23
  %164 = trunc i64 %147 to i32
  %165 = or disjoint i32 %164, 128
  %.reass21 = add i32 %51, %165
  %166 = trunc nuw nsw i64 %153 to i32, !dbg !23
  %167 = add i32 %54, %166, !dbg !23
  %168 = trunc i64 %147 to i32
  %169 = or disjoint i32 %168, 192
  %.reass23 = add i32 %51, %169
  %170 = trunc nuw nsw i64 %156 to i32, !dbg !23
  %171 = add i32 %55, %170, !dbg !23
  %172 = sext i32 %158 to i64, !dbg !24
  %173 = getelementptr float, ptr addrspace(1) %1, i64 %172, !dbg !24
  %174 = sext i32 %159 to i64, !dbg !24
  %175 = getelementptr float, ptr addrspace(1) %1, i64 %174, !dbg !24
  %176 = sext i32 %.reass to i64, !dbg !24
  %177 = getelementptr float, ptr addrspace(1) %1, i64 %176, !dbg !24
  %178 = sext i32 %163 to i64, !dbg !24
  %179 = getelementptr float, ptr addrspace(1) %1, i64 %178, !dbg !24
  %180 = sext i32 %.reass21 to i64, !dbg !24
  %181 = getelementptr float, ptr addrspace(1) %1, i64 %180, !dbg !24
  %182 = sext i32 %167 to i64, !dbg !24
  %183 = getelementptr float, ptr addrspace(1) %1, i64 %182, !dbg !24
  %184 = sext i32 %.reass23 to i64, !dbg !24
  %185 = getelementptr float, ptr addrspace(1) %1, i64 %184, !dbg !24
  %186 = sext i32 %171 to i64, !dbg !24
  %187 = getelementptr float, ptr addrspace(1) %1, i64 %186, !dbg !24
  %.reass25 = and i1 %146, %invariant.op24
  %188 = and i1 %19, %146, !dbg !25
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %.reass25, i32 -8388608, i1 %.reass25) #3, !dbg !26
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %188, i32 -8388608, i1 %188) #3, !dbg !26
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %invariant.op24, i32 -8388608, i1 %invariant.op24) #3, !dbg !26
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %179, i1 %19, i32 -8388608, i1 %19) #3, !dbg !26
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %invariant.op24, i32 -8388608, i1 %invariant.op24) #3, !dbg !26
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %19, i32 -8388608, i1 %19) #3, !dbg !26
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %invariant.op24, i32 -8388608, i1 %invariant.op24) #3, !dbg !26
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %19, i32 -8388608, i1 %19) #3, !dbg !26
  %197 = add i32 %61, %157, !dbg !27
  %198 = add i32 %62, %157, !dbg !27
  %.reass35 = add i32 %61, %161
  %.reass37 = add i32 %invariant.op36, %162
  %.reass39 = add i32 %61, %165
  %.reass41 = add i32 %invariant.op40, %166
  %.reass43 = add i32 %61, %169
  %.reass45 = add i32 %invariant.op44, %170
  %199 = sext i32 %197 to i64, !dbg !28
  %200 = getelementptr float, ptr addrspace(1) %1, i64 %199, !dbg !28
  %201 = sext i32 %198 to i64, !dbg !28
  %202 = getelementptr float, ptr addrspace(1) %1, i64 %201, !dbg !28
  %203 = sext i32 %.reass35 to i64, !dbg !28
  %204 = getelementptr float, ptr addrspace(1) %1, i64 %203, !dbg !28
  %205 = sext i32 %.reass37 to i64, !dbg !28
  %206 = getelementptr float, ptr addrspace(1) %1, i64 %205, !dbg !28
  %207 = sext i32 %.reass39 to i64, !dbg !28
  %208 = getelementptr float, ptr addrspace(1) %1, i64 %207, !dbg !28
  %209 = sext i32 %.reass41 to i64, !dbg !28
  %210 = getelementptr float, ptr addrspace(1) %1, i64 %209, !dbg !28
  %211 = sext i32 %.reass43 to i64, !dbg !28
  %212 = getelementptr float, ptr addrspace(1) %1, i64 %211, !dbg !28
  %213 = sext i32 %.reass45 to i64, !dbg !28
  %214 = getelementptr float, ptr addrspace(1) %1, i64 %213, !dbg !28
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %188, i32 -8388608, i1 %188) #3, !dbg !29
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %202, i1 %188, i32 -8388608, i1 %188) #3, !dbg !29
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 %19, i32 -8388608, i1 %19) #3, !dbg !29
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 %19, i32 -8388608, i1 %19) #3, !dbg !29
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %19, i32 -8388608, i1 %19) #3, !dbg !29
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %19, i32 -8388608, i1 %19) #3, !dbg !29
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %19, i32 -8388608, i1 %19) #3, !dbg !29
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 %19, i32 -8388608, i1 %19) #3, !dbg !29
  %223 = add i32 %68, %157, !dbg !30
  %224 = add i32 %69, %157, !dbg !30
  %.reass47 = add i32 %68, %161
  %.reass49 = add i32 %invariant.op48, %162
  %.reass51 = add i32 %68, %165
  %.reass53 = add i32 %invariant.op52, %166
  %.reass55 = add i32 %68, %169
  %.reass57 = add i32 %invariant.op56, %170
  %225 = sext i32 %223 to i64, !dbg !31
  %226 = getelementptr float, ptr addrspace(1) %1, i64 %225, !dbg !31
  %227 = sext i32 %224 to i64, !dbg !31
  %228 = getelementptr float, ptr addrspace(1) %1, i64 %227, !dbg !31
  %229 = sext i32 %.reass47 to i64, !dbg !31
  %230 = getelementptr float, ptr addrspace(1) %1, i64 %229, !dbg !31
  %231 = sext i32 %.reass49 to i64, !dbg !31
  %232 = getelementptr float, ptr addrspace(1) %1, i64 %231, !dbg !31
  %233 = sext i32 %.reass51 to i64, !dbg !31
  %234 = getelementptr float, ptr addrspace(1) %1, i64 %233, !dbg !31
  %235 = sext i32 %.reass53 to i64, !dbg !31
  %236 = getelementptr float, ptr addrspace(1) %1, i64 %235, !dbg !31
  %237 = sext i32 %.reass55 to i64, !dbg !31
  %238 = getelementptr float, ptr addrspace(1) %1, i64 %237, !dbg !31
  %239 = sext i32 %.reass57 to i64, !dbg !31
  %240 = getelementptr float, ptr addrspace(1) %1, i64 %239, !dbg !31
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %188, i32 -8388608, i1 %188) #3, !dbg !32
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %228, i1 %188, i32 -8388608, i1 %188) #3, !dbg !32
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %230, i1 %19, i32 -8388608, i1 %19) #3, !dbg !32
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %19, i32 -8388608, i1 %19) #3, !dbg !32
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %19, i32 -8388608, i1 %19) #3, !dbg !32
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %236, i1 %19, i32 -8388608, i1 %19) #3, !dbg !32
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %19, i32 -8388608, i1 %19) #3, !dbg !32
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %240, i1 %19, i32 -8388608, i1 %19) #3, !dbg !32
  %249 = add i32 %70, %157, !dbg !33
  %250 = add i32 %70, %161, !dbg !33
  %251 = or disjoint i64 %150, %135
  %252 = add i32 %70, %165, !dbg !33
  %253 = or disjoint i64 %153, %132
  %254 = add i32 %70, %169, !dbg !33
  %255 = or disjoint i64 %156, %129
  %256 = sext i32 %249 to i64, !dbg !34
  %257 = getelementptr float, ptr addrspace(1) %1, i64 %256, !dbg !34
  %258 = trunc i64 %147 to i32, !dbg !34
  %259 = add i32 %invariant.op26, %258, !dbg !34
  %260 = sext i32 %259 to i64, !dbg !34
  %261 = getelementptr float, ptr addrspace(1) %1, i64 %260, !dbg !34
  %262 = sext i32 %250 to i64, !dbg !34
  %263 = getelementptr float, ptr addrspace(1) %1, i64 %262, !dbg !34
  %264 = getelementptr float, ptr addrspace(1) %1, i64 %251, !dbg !34
  %265 = sext i32 %252 to i64, !dbg !34
  %266 = getelementptr float, ptr addrspace(1) %1, i64 %265, !dbg !34
  %267 = getelementptr float, ptr addrspace(1) %1, i64 %253, !dbg !34
  %268 = sext i32 %254 to i64, !dbg !34
  %269 = getelementptr float, ptr addrspace(1) %1, i64 %268, !dbg !34
  %270 = getelementptr float, ptr addrspace(1) %1, i64 %255, !dbg !34
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %257, i1 %invariant.op24, i32 -8388608, i1 %invariant.op24) #3, !dbg !35
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %261, i1 %19, i32 -8388608, i1 %19) #3, !dbg !35
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %263, i1 %invariant.op24, i32 -8388608, i1 %invariant.op24) #3, !dbg !35
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %264, i1 %19, i32 -8388608, i1 %19) #3, !dbg !35
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %266, i1 %invariant.op24, i32 -8388608, i1 %invariant.op24) #3, !dbg !35
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %267, i1 %19, i32 -8388608, i1 %19) #3, !dbg !35
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %269, i1 %invariant.op24, i32 -8388608, i1 %invariant.op24) #3, !dbg !35
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %270, i1 %19, i32 -8388608, i1 %19) #3, !dbg !35
  %279 = insertelement <8 x i32> poison, i32 %189, i64 0, !dbg !26
  %280 = insertelement <8 x i32> %279, i32 %190, i64 1, !dbg !26
  %281 = insertelement <8 x i32> %280, i32 %191, i64 2, !dbg !26
  %282 = insertelement <8 x i32> %281, i32 %192, i64 3, !dbg !26
  %283 = insertelement <8 x i32> %282, i32 %193, i64 4, !dbg !26
  %284 = insertelement <8 x i32> %283, i32 %194, i64 5, !dbg !26
  %285 = insertelement <8 x i32> %284, i32 %195, i64 6, !dbg !26
  %286 = insertelement <8 x i32> %285, i32 %196, i64 7, !dbg !26
  %287 = bitcast <8 x i32> %286 to <8 x float>, !dbg !26
  %288 = insertelement <8 x i32> poison, i32 %215, i64 0, !dbg !29
  %289 = insertelement <8 x i32> %288, i32 %216, i64 1, !dbg !29
  %290 = insertelement <8 x i32> %289, i32 %217, i64 2, !dbg !29
  %291 = insertelement <8 x i32> %290, i32 %218, i64 3, !dbg !29
  %292 = insertelement <8 x i32> %291, i32 %219, i64 4, !dbg !29
  %293 = insertelement <8 x i32> %292, i32 %220, i64 5, !dbg !29
  %294 = insertelement <8 x i32> %293, i32 %221, i64 6, !dbg !29
  %295 = insertelement <8 x i32> %294, i32 %222, i64 7, !dbg !29
  %296 = bitcast <8 x i32> %295 to <8 x float>, !dbg !29
  %297 = fcmp ogt <8 x float> %296, %287, !dbg !36
  %298 = fcmp uno <8 x float> %296, zeroinitializer, !dbg !40
  %299 = or <8 x i1> %297, %298, !dbg !41
  %.v = select <8 x i1> %299, <8 x i32> %295, <8 x i32> %286, !dbg !42
  %300 = bitcast <8 x i32> %.v to <8 x float>, !dbg !42
  %301 = insertelement <8 x i32> poison, i32 %241, i64 0, !dbg !32
  %302 = insertelement <8 x i32> %301, i32 %242, i64 1, !dbg !32
  %303 = insertelement <8 x i32> %302, i32 %243, i64 2, !dbg !32
  %304 = insertelement <8 x i32> %303, i32 %244, i64 3, !dbg !32
  %305 = insertelement <8 x i32> %304, i32 %245, i64 4, !dbg !32
  %306 = insertelement <8 x i32> %305, i32 %246, i64 5, !dbg !32
  %307 = insertelement <8 x i32> %306, i32 %247, i64 6, !dbg !32
  %308 = insertelement <8 x i32> %307, i32 %248, i64 7, !dbg !32
  %309 = bitcast <8 x i32> %308 to <8 x float>, !dbg !32
  %310 = fcmp olt <8 x float> %300, %309, !dbg !43
  %311 = fcmp uno <8 x float> %309, zeroinitializer, !dbg !45
  %312 = or <8 x i1> %310, %311, !dbg !46
  %.v124 = select <8 x i1> %312, <8 x i32> %308, <8 x i32> %.v, !dbg !47
  %313 = bitcast <8 x i32> %.v124 to <8 x float>, !dbg !47
  %314 = insertelement <8 x i32> poison, i32 %271, i64 0, !dbg !35
  %315 = insertelement <8 x i32> %314, i32 %272, i64 1, !dbg !35
  %316 = insertelement <8 x i32> %315, i32 %273, i64 2, !dbg !35
  %317 = insertelement <8 x i32> %316, i32 %274, i64 3, !dbg !35
  %318 = insertelement <8 x i32> %317, i32 %275, i64 4, !dbg !35
  %319 = insertelement <8 x i32> %318, i32 %276, i64 5, !dbg !35
  %320 = insertelement <8 x i32> %319, i32 %277, i64 6, !dbg !35
  %321 = insertelement <8 x i32> %320, i32 %278, i64 7, !dbg !35
  %322 = bitcast <8 x i32> %321 to <8 x float>, !dbg !35
  %323 = fcmp olt <8 x float> %313, %322, !dbg !48
  %324 = fcmp uno <8 x float> %322, zeroinitializer, !dbg !50
  %325 = or <8 x i1> %323, %324, !dbg !51
  %.v125 = select <8 x i1> %325, <8 x i32> %321, <8 x i32> %.v124, !dbg !52
  %326 = bitcast <8 x i32> %.v125 to <8 x float>, !dbg !52
  %.reass88 = or disjoint i64 %147, %invariant.op
  %.reass90 = or disjoint i64 %147, %invariant.op89
  %.reass92 = or disjoint i64 %147, %invariant.op91
  %.reass94 = or i64 %147, %invariant.op93
  %327 = trunc i64 %147 to i32, !dbg !53
  %.reass132 = or i32 %327, %invariant.op131
  %328 = or disjoint i32 %.reass132, 16, !dbg !53
  %.reass96 = or i64 %147, %invariant.op95
  %.reass98 = or disjoint i64 %150, %invariant.op97
  %.reass100 = or i64 %147, %invariant.op99
  %.reass102 = or disjoint i64 %153, %invariant.op101
  %.reass104 = or i64 %147, %invariant.op103
  %.reass106 = or disjoint i64 %156, %invariant.op105
  %329 = getelementptr float, ptr addrspace(1) %1, i64 %.reass94, !dbg !54
  %330 = sext i32 %328 to i64, !dbg !54
  %331 = getelementptr float, ptr addrspace(1) %1, i64 %330, !dbg !54
  %332 = getelementptr float, ptr addrspace(1) %1, i64 %.reass96, !dbg !54
  %333 = getelementptr float, ptr addrspace(1) %1, i64 %.reass98, !dbg !54
  %334 = getelementptr float, ptr addrspace(1) %1, i64 %.reass100, !dbg !54
  %335 = getelementptr float, ptr addrspace(1) %1, i64 %.reass102, !dbg !54
  %336 = getelementptr float, ptr addrspace(1) %1, i64 %.reass104, !dbg !54
  %337 = getelementptr float, ptr addrspace(1) %1, i64 %.reass106, !dbg !54
  %338 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %329, i1 %19, i32 -8388608, i1 %19) #3, !dbg !55
  %339 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %331, i1 %19, i32 -8388608, i1 %19) #3, !dbg !55
  %340 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %332, i1 %19, i32 -8388608, i1 %19) #3, !dbg !55
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %333, i1 %19, i32 -8388608, i1 %19) #3, !dbg !55
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %334, i1 %19, i32 -8388608, i1 %19) #3, !dbg !55
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %335, i1 %19, i32 -8388608, i1 %19) #3, !dbg !55
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %336, i1 %19, i32 -8388608, i1 %19) #3, !dbg !55
  %345 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %337, i1 %19, i32 -8388608, i1 %19) #3, !dbg !55
  %346 = insertelement <8 x i32> poison, i32 %338, i64 0, !dbg !55
  %347 = insertelement <8 x i32> %346, i32 %339, i64 1, !dbg !55
  %348 = insertelement <8 x i32> %347, i32 %340, i64 2, !dbg !55
  %349 = insertelement <8 x i32> %348, i32 %341, i64 3, !dbg !55
  %350 = insertelement <8 x i32> %349, i32 %342, i64 4, !dbg !55
  %351 = insertelement <8 x i32> %350, i32 %343, i64 5, !dbg !55
  %352 = insertelement <8 x i32> %351, i32 %344, i64 6, !dbg !55
  %353 = insertelement <8 x i32> %352, i32 %345, i64 7, !dbg !55
  %354 = bitcast <8 x i32> %353 to <8 x float>, !dbg !55
  %355 = fcmp olt <8 x float> %326, %354, !dbg !56
  %356 = fcmp uno <8 x float> %354, zeroinitializer, !dbg !58
  %357 = or <8 x i1> %355, %356, !dbg !59
  %358 = or disjoint i32 %.reass132, 1, !dbg !60
  %359 = or disjoint i32 %.reass132, 17, !dbg !60
  %360 = trunc nuw nsw i64 %.reass88 to i32, !dbg !60
  %361 = or i32 %29, %360, !dbg !60
  %362 = or disjoint i32 %361, 1, !dbg !60
  %363 = or disjoint i64 %.reass98, 1, !dbg !60
  %364 = trunc nuw nsw i64 %.reass90 to i32, !dbg !60
  %365 = or i32 %29, %364, !dbg !60
  %366 = or disjoint i32 %365, 1, !dbg !60
  %367 = or disjoint i64 %.reass102, 1, !dbg !60
  %368 = trunc nuw nsw i64 %.reass92 to i32, !dbg !60
  %369 = or i32 %29, %368, !dbg !60
  %370 = or disjoint i32 %369, 1, !dbg !60
  %371 = or disjoint i64 %.reass106, 1, !dbg !60
  %372 = sext i32 %358 to i64, !dbg !61
  %373 = getelementptr float, ptr addrspace(1) %1, i64 %372, !dbg !61
  %374 = sext i32 %359 to i64, !dbg !61
  %375 = getelementptr float, ptr addrspace(1) %1, i64 %374, !dbg !61
  %376 = sext i32 %362 to i64, !dbg !61
  %377 = getelementptr float, ptr addrspace(1) %1, i64 %376, !dbg !61
  %378 = getelementptr float, ptr addrspace(1) %1, i64 %363, !dbg !61
  %379 = sext i32 %366 to i64, !dbg !61
  %380 = getelementptr float, ptr addrspace(1) %1, i64 %379, !dbg !61
  %381 = getelementptr float, ptr addrspace(1) %1, i64 %367, !dbg !61
  %382 = sext i32 %370 to i64, !dbg !61
  %383 = getelementptr float, ptr addrspace(1) %1, i64 %382, !dbg !61
  %384 = getelementptr float, ptr addrspace(1) %1, i64 %371, !dbg !61
  %385 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %373, i1 %19, i32 -8388608, i1 %19) #3, !dbg !62
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %375, i1 %19, i32 -8388608, i1 %19) #3, !dbg !62
  %387 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %377, i1 %19, i32 -8388608, i1 %19) #3, !dbg !62
  %388 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %378, i1 %19, i32 -8388608, i1 %19) #3, !dbg !62
  %389 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %380, i1 %19, i32 -8388608, i1 %19) #3, !dbg !62
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %381, i1 %19, i32 -8388608, i1 %19) #3, !dbg !62
  %391 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %383, i1 %19, i32 -8388608, i1 %19) #3, !dbg !62
  %392 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %384, i1 %19, i32 -8388608, i1 %19) #3, !dbg !62
  %393 = or i32 %76, %157, !dbg !63
  %394 = or i32 %76, %161, !dbg !63
  %395 = or disjoint i64 %150, %136
  %396 = or i32 %76, %165, !dbg !63
  %397 = or disjoint i64 %153, %133
  %398 = or i32 %76, %169, !dbg !63
  %399 = or disjoint i64 %156, %130
  %400 = sext i32 %393 to i64, !dbg !64
  %401 = getelementptr float, ptr addrspace(1) %1, i64 %400, !dbg !64
  %402 = trunc i64 %147 to i32, !dbg !64
  %403 = add i32 %invariant.op58, %402, !dbg !64
  %404 = sext i32 %403 to i64, !dbg !64
  %405 = getelementptr float, ptr addrspace(1) %1, i64 %404, !dbg !64
  %406 = sext i32 %394 to i64, !dbg !64
  %407 = getelementptr float, ptr addrspace(1) %1, i64 %406, !dbg !64
  %408 = getelementptr float, ptr addrspace(1) %1, i64 %395, !dbg !64
  %409 = sext i32 %396 to i64, !dbg !64
  %410 = getelementptr float, ptr addrspace(1) %1, i64 %409, !dbg !64
  %411 = getelementptr float, ptr addrspace(1) %1, i64 %397, !dbg !64
  %412 = sext i32 %398 to i64, !dbg !64
  %413 = getelementptr float, ptr addrspace(1) %1, i64 %412, !dbg !64
  %414 = getelementptr float, ptr addrspace(1) %1, i64 %399, !dbg !64
  %415 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %401, i1 %invariant.op24, i32 -8388608, i1 %invariant.op24) #3, !dbg !65
  %416 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %405, i1 %19, i32 -8388608, i1 %19) #3, !dbg !65
  %417 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %407, i1 %invariant.op24, i32 -8388608, i1 %invariant.op24) #3, !dbg !65
  %418 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %408, i1 %19, i32 -8388608, i1 %19) #3, !dbg !65
  %419 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %410, i1 %invariant.op24, i32 -8388608, i1 %invariant.op24) #3, !dbg !65
  %420 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %411, i1 %19, i32 -8388608, i1 %19) #3, !dbg !65
  %421 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %413, i1 %invariant.op24, i32 -8388608, i1 %invariant.op24) #3, !dbg !65
  %422 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %414, i1 %19, i32 -8388608, i1 %19) #3, !dbg !65
  %423 = or disjoint i32 %.reass132, 32, !dbg !66
  %424 = or disjoint i32 %.reass132, 48, !dbg !66
  %425 = or disjoint i32 %361, 32, !dbg !66
  %426 = or disjoint i64 %.reass98, 32, !dbg !66
  %427 = or disjoint i32 %365, 32, !dbg !66
  %428 = or disjoint i64 %.reass102, 32, !dbg !66
  %429 = or disjoint i32 %369, 32, !dbg !66
  %430 = or disjoint i64 %.reass106, 32, !dbg !66
  %431 = sext i32 %423 to i64, !dbg !67
  %432 = getelementptr float, ptr addrspace(1) %1, i64 %431, !dbg !67
  %433 = sext i32 %424 to i64, !dbg !67
  %434 = getelementptr float, ptr addrspace(1) %1, i64 %433, !dbg !67
  %435 = sext i32 %425 to i64, !dbg !67
  %436 = getelementptr float, ptr addrspace(1) %1, i64 %435, !dbg !67
  %437 = getelementptr float, ptr addrspace(1) %1, i64 %426, !dbg !67
  %438 = sext i32 %427 to i64, !dbg !67
  %439 = getelementptr float, ptr addrspace(1) %1, i64 %438, !dbg !67
  %440 = getelementptr float, ptr addrspace(1) %1, i64 %428, !dbg !67
  %441 = sext i32 %429 to i64, !dbg !67
  %442 = getelementptr float, ptr addrspace(1) %1, i64 %441, !dbg !67
  %443 = getelementptr float, ptr addrspace(1) %1, i64 %430, !dbg !67
  %444 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %432, i1 %19, i32 -8388608, i1 %19) #3, !dbg !68
  %445 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %434, i1 %19, i32 -8388608, i1 %19) #3, !dbg !68
  %446 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %436, i1 %19, i32 -8388608, i1 %19) #3, !dbg !68
  %447 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %437, i1 %19, i32 -8388608, i1 %19) #3, !dbg !68
  %448 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %439, i1 %19, i32 -8388608, i1 %19) #3, !dbg !68
  %449 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %440, i1 %19, i32 -8388608, i1 %19) #3, !dbg !68
  %450 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %442, i1 %19, i32 -8388608, i1 %19) #3, !dbg !68
  %451 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %443, i1 %19, i32 -8388608, i1 %19) #3, !dbg !68
  %452 = or disjoint i32 %.reass132, 33, !dbg !69
  %453 = or disjoint i32 %.reass132, 49, !dbg !69
  %454 = or disjoint i32 %361, 33, !dbg !69
  %455 = or disjoint i64 %.reass98, 33, !dbg !69
  %456 = or disjoint i32 %365, 33, !dbg !69
  %457 = or disjoint i64 %.reass102, 33, !dbg !69
  %458 = or disjoint i32 %369, 33, !dbg !69
  %459 = or disjoint i64 %.reass106, 33, !dbg !69
  %460 = sext i32 %452 to i64, !dbg !70
  %461 = getelementptr float, ptr addrspace(1) %1, i64 %460, !dbg !70
  %462 = sext i32 %453 to i64, !dbg !70
  %463 = getelementptr float, ptr addrspace(1) %1, i64 %462, !dbg !70
  %464 = sext i32 %454 to i64, !dbg !70
  %465 = getelementptr float, ptr addrspace(1) %1, i64 %464, !dbg !70
  %466 = getelementptr float, ptr addrspace(1) %1, i64 %455, !dbg !70
  %467 = sext i32 %456 to i64, !dbg !70
  %468 = getelementptr float, ptr addrspace(1) %1, i64 %467, !dbg !70
  %469 = getelementptr float, ptr addrspace(1) %1, i64 %457, !dbg !70
  %470 = sext i32 %458 to i64, !dbg !70
  %471 = getelementptr float, ptr addrspace(1) %1, i64 %470, !dbg !70
  %472 = getelementptr float, ptr addrspace(1) %1, i64 %459, !dbg !70
  %473 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %461, i1 %19, i32 -8388608, i1 %19) #3, !dbg !71
  %474 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %463, i1 %19, i32 -8388608, i1 %19) #3, !dbg !71
  %475 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %465, i1 %19, i32 -8388608, i1 %19) #3, !dbg !71
  %476 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %466, i1 %19, i32 -8388608, i1 %19) #3, !dbg !71
  %477 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %468, i1 %19, i32 -8388608, i1 %19) #3, !dbg !71
  %478 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %469, i1 %19, i32 -8388608, i1 %19) #3, !dbg !71
  %479 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %471, i1 %19, i32 -8388608, i1 %19) #3, !dbg !71
  %480 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %472, i1 %19, i32 -8388608, i1 %19) #3, !dbg !71
  %481 = extractelement <8 x i1> %297, i64 0, !dbg !72
  %482 = zext i1 %481 to i8, !dbg !72
  %483 = extractelement <8 x i1> %297, i64 1, !dbg !72
  %484 = zext i1 %483 to i8, !dbg !72
  %485 = extractelement <8 x i1> %297, i64 2, !dbg !72
  %486 = zext i1 %485 to i8, !dbg !72
  %487 = extractelement <8 x i1> %297, i64 3, !dbg !72
  %488 = zext i1 %487 to i8, !dbg !72
  %489 = extractelement <8 x i1> %297, i64 4, !dbg !72
  %490 = zext i1 %489 to i8, !dbg !72
  %491 = extractelement <8 x i1> %297, i64 5, !dbg !72
  %492 = zext i1 %491 to i8, !dbg !72
  %493 = extractelement <8 x i1> %297, i64 6, !dbg !72
  %494 = zext i1 %493 to i8, !dbg !72
  %495 = extractelement <8 x i1> %297, i64 7, !dbg !72
  %496 = zext i1 %495 to i8, !dbg !72
  %497 = extractelement <8 x i1> %310, i64 0, !dbg !73
  %498 = select i1 %497, i8 2, i8 %482, !dbg !73
  %499 = extractelement <8 x i1> %310, i64 1, !dbg !73
  %500 = select i1 %499, i8 2, i8 %484, !dbg !73
  %501 = extractelement <8 x i1> %310, i64 2, !dbg !73
  %502 = select i1 %501, i8 2, i8 %486, !dbg !73
  %503 = extractelement <8 x i1> %310, i64 3, !dbg !73
  %504 = select i1 %503, i8 2, i8 %488, !dbg !73
  %505 = extractelement <8 x i1> %310, i64 4, !dbg !73
  %506 = select i1 %505, i8 2, i8 %490, !dbg !73
  %507 = extractelement <8 x i1> %310, i64 5, !dbg !73
  %508 = select i1 %507, i8 2, i8 %492, !dbg !73
  %509 = extractelement <8 x i1> %310, i64 6, !dbg !73
  %510 = select i1 %509, i8 2, i8 %494, !dbg !73
  %511 = extractelement <8 x i1> %310, i64 7, !dbg !73
  %512 = select i1 %511, i8 2, i8 %496, !dbg !73
  %513 = extractelement <8 x i1> %323, i64 0, !dbg !74
  %514 = select i1 %513, i8 3, i8 %498, !dbg !74
  %515 = extractelement <8 x i1> %323, i64 1, !dbg !74
  %516 = select i1 %515, i8 3, i8 %500, !dbg !74
  %517 = extractelement <8 x i1> %323, i64 2, !dbg !74
  %518 = select i1 %517, i8 3, i8 %502, !dbg !74
  %519 = extractelement <8 x i1> %323, i64 3, !dbg !74
  %520 = select i1 %519, i8 3, i8 %504, !dbg !74
  %521 = extractelement <8 x i1> %323, i64 4, !dbg !74
  %522 = select i1 %521, i8 3, i8 %506, !dbg !74
  %523 = extractelement <8 x i1> %323, i64 5, !dbg !74
  %524 = select i1 %523, i8 3, i8 %508, !dbg !74
  %525 = extractelement <8 x i1> %323, i64 6, !dbg !74
  %526 = select i1 %525, i8 3, i8 %510, !dbg !74
  %527 = extractelement <8 x i1> %323, i64 7, !dbg !74
  %528 = select i1 %527, i8 3, i8 %512, !dbg !74
  %529 = extractelement <8 x i1> %355, i64 0, !dbg !75
  %530 = select i1 %529, i8 4, i8 %514, !dbg !75
  %531 = extractelement <8 x i1> %355, i64 1, !dbg !75
  %532 = select i1 %531, i8 4, i8 %516, !dbg !75
  %533 = extractelement <8 x i1> %355, i64 2, !dbg !75
  %534 = select i1 %533, i8 4, i8 %518, !dbg !75
  %535 = extractelement <8 x i1> %355, i64 3, !dbg !75
  %536 = select i1 %535, i8 4, i8 %520, !dbg !75
  %537 = extractelement <8 x i1> %355, i64 4, !dbg !75
  %538 = select i1 %537, i8 4, i8 %522, !dbg !75
  %539 = extractelement <8 x i1> %355, i64 5, !dbg !75
  %540 = select i1 %539, i8 4, i8 %524, !dbg !75
  %541 = extractelement <8 x i1> %355, i64 6, !dbg !75
  %542 = select i1 %541, i8 4, i8 %526, !dbg !75
  %543 = extractelement <8 x i1> %355, i64 7, !dbg !75
  %544 = select i1 %543, i8 4, i8 %528, !dbg !75
  %.v126 = select <8 x i1> %357, <8 x i32> %353, <8 x i32> %.v125, !dbg !76
  %545 = bitcast <8 x i32> %.v126 to <8 x float>, !dbg !76
  %546 = insertelement <8 x i32> poison, i32 %385, i64 0, !dbg !62
  %547 = insertelement <8 x i32> %546, i32 %386, i64 1, !dbg !62
  %548 = insertelement <8 x i32> %547, i32 %387, i64 2, !dbg !62
  %549 = insertelement <8 x i32> %548, i32 %388, i64 3, !dbg !62
  %550 = insertelement <8 x i32> %549, i32 %389, i64 4, !dbg !62
  %551 = insertelement <8 x i32> %550, i32 %390, i64 5, !dbg !62
  %552 = insertelement <8 x i32> %551, i32 %391, i64 6, !dbg !62
  %553 = insertelement <8 x i32> %552, i32 %392, i64 7, !dbg !62
  %554 = bitcast <8 x i32> %553 to <8 x float>, !dbg !62
  %555 = fcmp olt <8 x float> %545, %554, !dbg !77
  %556 = fcmp uno <8 x float> %554, zeroinitializer, !dbg !79
  %557 = or <8 x i1> %555, %556, !dbg !80
  %.v127 = select <8 x i1> %557, <8 x i32> %553, <8 x i32> %.v126, !dbg !81
  %558 = bitcast <8 x i32> %.v127 to <8 x float>, !dbg !81
  %559 = insertelement <8 x i32> poison, i32 %415, i64 0, !dbg !65
  %560 = insertelement <8 x i32> %559, i32 %416, i64 1, !dbg !65
  %561 = insertelement <8 x i32> %560, i32 %417, i64 2, !dbg !65
  %562 = insertelement <8 x i32> %561, i32 %418, i64 3, !dbg !65
  %563 = insertelement <8 x i32> %562, i32 %419, i64 4, !dbg !65
  %564 = insertelement <8 x i32> %563, i32 %420, i64 5, !dbg !65
  %565 = insertelement <8 x i32> %564, i32 %421, i64 6, !dbg !65
  %566 = insertelement <8 x i32> %565, i32 %422, i64 7, !dbg !65
  %567 = bitcast <8 x i32> %566 to <8 x float>, !dbg !65
  %568 = fcmp olt <8 x float> %558, %567, !dbg !82
  %569 = fcmp uno <8 x float> %567, zeroinitializer, !dbg !84
  %570 = or <8 x i1> %568, %569, !dbg !85
  %.v128 = select <8 x i1> %570, <8 x i32> %566, <8 x i32> %.v127, !dbg !86
  %571 = bitcast <8 x i32> %.v128 to <8 x float>, !dbg !86
  %572 = insertelement <8 x i32> poison, i32 %444, i64 0, !dbg !68
  %573 = insertelement <8 x i32> %572, i32 %445, i64 1, !dbg !68
  %574 = insertelement <8 x i32> %573, i32 %446, i64 2, !dbg !68
  %575 = insertelement <8 x i32> %574, i32 %447, i64 3, !dbg !68
  %576 = insertelement <8 x i32> %575, i32 %448, i64 4, !dbg !68
  %577 = insertelement <8 x i32> %576, i32 %449, i64 5, !dbg !68
  %578 = insertelement <8 x i32> %577, i32 %450, i64 6, !dbg !68
  %579 = insertelement <8 x i32> %578, i32 %451, i64 7, !dbg !68
  %580 = bitcast <8 x i32> %579 to <8 x float>, !dbg !68
  %581 = fcmp olt <8 x float> %571, %580, !dbg !87
  %582 = fcmp uno <8 x float> %580, zeroinitializer, !dbg !89
  %583 = or <8 x i1> %581, %582, !dbg !90
  %.v129 = select <8 x i1> %583, <8 x i32> %579, <8 x i32> %.v128, !dbg !91
  %584 = bitcast <8 x i32> %.v129 to <8 x float>, !dbg !91
  %585 = insertelement <8 x i32> poison, i32 %473, i64 0, !dbg !71
  %586 = insertelement <8 x i32> %585, i32 %474, i64 1, !dbg !71
  %587 = insertelement <8 x i32> %586, i32 %475, i64 2, !dbg !71
  %588 = insertelement <8 x i32> %587, i32 %476, i64 3, !dbg !71
  %589 = insertelement <8 x i32> %588, i32 %477, i64 4, !dbg !71
  %590 = insertelement <8 x i32> %589, i32 %478, i64 5, !dbg !71
  %591 = insertelement <8 x i32> %590, i32 %479, i64 6, !dbg !71
  %592 = insertelement <8 x i32> %591, i32 %480, i64 7, !dbg !71
  %593 = bitcast <8 x i32> %592 to <8 x float>, !dbg !71
  %594 = fcmp olt <8 x float> %584, %593, !dbg !92
  %595 = fcmp uno <8 x float> %593, zeroinitializer, !dbg !94
  %596 = or <8 x i1> %594, %595, !dbg !95
  %.v130 = select <8 x i1> %596, <8 x i32> %592, <8 x i32> %.v129, !dbg !96
  %597 = bitcast <8 x i32> %.v130 to <8 x float>, !dbg !96
  %598 = extractelement <8 x i1> %555, i64 0, !dbg !97
  %599 = select i1 %598, i8 5, i8 %530, !dbg !97
  %600 = extractelement <8 x i1> %555, i64 1, !dbg !97
  %601 = select i1 %600, i8 5, i8 %532, !dbg !97
  %602 = extractelement <8 x i1> %555, i64 2, !dbg !97
  %603 = select i1 %602, i8 5, i8 %534, !dbg !97
  %604 = extractelement <8 x i1> %555, i64 3, !dbg !97
  %605 = select i1 %604, i8 5, i8 %536, !dbg !97
  %606 = extractelement <8 x i1> %555, i64 4, !dbg !97
  %607 = select i1 %606, i8 5, i8 %538, !dbg !97
  %608 = extractelement <8 x i1> %555, i64 5, !dbg !97
  %609 = select i1 %608, i8 5, i8 %540, !dbg !97
  %610 = extractelement <8 x i1> %555, i64 6, !dbg !97
  %611 = select i1 %610, i8 5, i8 %542, !dbg !97
  %612 = extractelement <8 x i1> %555, i64 7, !dbg !97
  %613 = select i1 %612, i8 5, i8 %544, !dbg !97
  %614 = extractelement <8 x i1> %568, i64 0, !dbg !98
  %615 = select i1 %614, i8 6, i8 %599, !dbg !98
  %616 = extractelement <8 x i1> %568, i64 1, !dbg !98
  %617 = select i1 %616, i8 6, i8 %601, !dbg !98
  %618 = extractelement <8 x i1> %568, i64 2, !dbg !98
  %619 = select i1 %618, i8 6, i8 %603, !dbg !98
  %620 = extractelement <8 x i1> %568, i64 3, !dbg !98
  %621 = select i1 %620, i8 6, i8 %605, !dbg !98
  %622 = extractelement <8 x i1> %568, i64 4, !dbg !98
  %623 = select i1 %622, i8 6, i8 %607, !dbg !98
  %624 = extractelement <8 x i1> %568, i64 5, !dbg !98
  %625 = select i1 %624, i8 6, i8 %609, !dbg !98
  %626 = extractelement <8 x i1> %568, i64 6, !dbg !98
  %627 = select i1 %626, i8 6, i8 %611, !dbg !98
  %628 = extractelement <8 x i1> %568, i64 7, !dbg !98
  %629 = select i1 %628, i8 6, i8 %613, !dbg !98
  %630 = extractelement <8 x i1> %581, i64 0, !dbg !99
  %631 = select i1 %630, i8 7, i8 %615, !dbg !99
  %632 = extractelement <8 x i1> %581, i64 1, !dbg !99
  %633 = select i1 %632, i8 7, i8 %617, !dbg !99
  %634 = extractelement <8 x i1> %581, i64 2, !dbg !99
  %635 = select i1 %634, i8 7, i8 %619, !dbg !99
  %636 = extractelement <8 x i1> %581, i64 3, !dbg !99
  %637 = select i1 %636, i8 7, i8 %621, !dbg !99
  %638 = extractelement <8 x i1> %581, i64 4, !dbg !99
  %639 = select i1 %638, i8 7, i8 %623, !dbg !99
  %640 = extractelement <8 x i1> %581, i64 5, !dbg !99
  %641 = select i1 %640, i8 7, i8 %625, !dbg !99
  %642 = extractelement <8 x i1> %581, i64 6, !dbg !99
  %643 = select i1 %642, i8 7, i8 %627, !dbg !99
  %644 = extractelement <8 x i1> %581, i64 7, !dbg !99
  %645 = select i1 %644, i8 7, i8 %629, !dbg !99
  %646 = extractelement <8 x i1> %594, i64 0, !dbg !100
  %647 = select i1 %646, i8 8, i8 %631, !dbg !100
  %648 = extractelement <8 x i1> %594, i64 1, !dbg !100
  %649 = select i1 %648, i8 8, i8 %633, !dbg !100
  %650 = extractelement <8 x i1> %594, i64 2, !dbg !100
  %651 = select i1 %650, i8 8, i8 %635, !dbg !100
  %652 = extractelement <8 x i1> %594, i64 3, !dbg !100
  %653 = select i1 %652, i8 8, i8 %637, !dbg !100
  %654 = extractelement <8 x i1> %594, i64 4, !dbg !100
  %655 = select i1 %654, i8 8, i8 %639, !dbg !100
  %656 = extractelement <8 x i1> %594, i64 5, !dbg !100
  %657 = select i1 %656, i8 8, i8 %641, !dbg !100
  %658 = extractelement <8 x i1> %594, i64 6, !dbg !100
  %659 = select i1 %658, i8 8, i8 %643, !dbg !100
  %660 = extractelement <8 x i1> %594, i64 7, !dbg !100
  %661 = select i1 %660, i8 8, i8 %645, !dbg !100
  %662 = fadd <8 x float> %144, %597, !dbg !101
  %663 = select <8 x i1> %142, <8 x float> %662, <8 x float> %144, !dbg !19
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %145, !dbg !102
  %gep108 = getelementptr float, ptr addrspace(1) %invariant.gep107, i64 %145, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %664 = extractelement <8 x float> %597, i64 0, !dbg !103
  %665 = bitcast float %664 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %665, i1 true) #3, !dbg !103
  %666 = extractelement <8 x float> %597, i64 1, !dbg !103
  %667 = bitcast float %666 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %667, i1 true) #3, !dbg !103
  %668 = extractelement <8 x float> %597, i64 2, !dbg !103
  %669 = bitcast float %668 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %669, i1 true) #3, !dbg !103
  %670 = extractelement <8 x float> %597, i64 3, !dbg !103
  %671 = bitcast float %670 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %671, i1 true) #3, !dbg !103
  %672 = extractelement <8 x float> %597, i64 4, !dbg !103
  %673 = bitcast float %672 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %673, i1 true) #3, !dbg !103
  %674 = extractelement <8 x float> %597, i64 5, !dbg !103
  %675 = bitcast float %674 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %675, i1 true) #3, !dbg !103
  %676 = extractelement <8 x float> %597, i64 6, !dbg !103
  %677 = bitcast float %676 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %677, i1 true) #3, !dbg !103
  %678 = extractelement <8 x float> %597, i64 7, !dbg !103
  %679 = bitcast float %678 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %679, i1 true) #3, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %680 = load <4 x i32>, ptr addrspace(3) %108, align 16, !dbg !103
  %.extract = load i32, ptr addrspace(3) %103, align 16, !dbg !103
  %.extract13 = load i32, ptr addrspace(3) %137, align 4, !dbg !103
  %.extract14 = load i32, ptr addrspace(3) %138, align 8, !dbg !103
  %.extract15 = load i32, ptr addrspace(3) %139, align 4, !dbg !103
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %gep, i1 %20) #3, !dbg !103
  %.extract16 = extractelement <4 x i32> %680, i64 0, !dbg !103
  %.extract17 = extractelement <4 x i32> %680, i64 1, !dbg !103
  %.extract18 = extractelement <4 x i32> %680, i64 2, !dbg !103
  %.extract19 = extractelement <4 x i32> %680, i64 3, !dbg !103
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract16, i32 %.extract17, i32 %.extract18, i32 %.extract19, ptr addrspace(1) %gep108, i1 %21) #3, !dbg !103
  %gep110 = getelementptr i8, ptr addrspace(1) %invariant.gep109, i64 %indvars.iv, !dbg !104
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %681 = insertelement <1 x i8> poison, i8 %647, i64 0, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %111, <1 x i8> %681, i1 true) #3, !dbg !105
  %682 = insertelement <1 x i8> poison, i8 %649, i64 0, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %112, <1 x i8> %682, i1 true) #3, !dbg !105
  %683 = insertelement <1 x i8> poison, i8 %651, i64 0, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %113, <1 x i8> %683, i1 true) #3, !dbg !105
  %684 = insertelement <1 x i8> poison, i8 %653, i64 0, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %114, <1 x i8> %684, i1 true) #3, !dbg !105
  %685 = insertelement <1 x i8> poison, i8 %655, i64 0, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %115, <1 x i8> %685, i1 true) #3, !dbg !105
  %686 = insertelement <1 x i8> poison, i8 %657, i64 0, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %116, <1 x i8> %686, i1 true) #3, !dbg !105
  %687 = insertelement <1 x i8> poison, i8 %659, i64 0, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %117, <1 x i8> %687, i1 true) #3, !dbg !105
  %688 = insertelement <1 x i8> poison, i8 %661, i64 0, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %118, <1 x i8> %688, i1 true) #3, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %689 = load i32, ptr addrspace(3) %121, align 8, !dbg !105
  %690 = load i32, ptr addrspace(3) %140, align 4, !dbg !105
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %689, i32 %690, ptr addrspace(1) %gep110, i1 %22) #3, !dbg !105
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !18
  %691 = icmp samesign ult i64 %indvars.iv, 192, !dbg !18
  br i1 %691, label %143, label %692, !dbg !18

692:                                              ; preds = %143
  tail call void @llvm.nvvm.barrier0(), !dbg !106
  %shift = shufflevector <8 x float> %663, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !110
  %693 = fadd <8 x float> %663, %shift, !dbg !110
  %shift118 = shufflevector <8 x float> %663, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !110
  %694 = fadd <8 x float> %shift118, %693, !dbg !110
  %shift119 = shufflevector <8 x float> %663, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !110
  %695 = fadd <8 x float> %shift119, %694, !dbg !110
  %shift120 = shufflevector <8 x float> %663, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !110
  %696 = fadd <8 x float> %shift120, %695, !dbg !110
  %shift121 = shufflevector <8 x float> %663, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !110
  %697 = fadd <8 x float> %shift121, %696, !dbg !110
  %shift122 = shufflevector <8 x float> %663, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !110
  %698 = fadd <8 x float> %shift122, %697, !dbg !110
  %shift123 = shufflevector <8 x float> %663, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !110
  %699 = fadd <8 x float> %shift123, %698, !dbg !110
  %700 = extractelement <8 x float> %699, i64 0, !dbg !110
  %701 = shl nuw nsw i32 %10, 3, !dbg !106
  %702 = or disjoint i32 %701, %24, !dbg !106
  %703 = getelementptr float, ptr addrspace(3) @global_smem, i32 %702, !dbg !106
  %704 = bitcast float %700 to <1 x i32>, !dbg !106
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %703, <1 x i32> %704, i1 true) #3, !dbg !106
  tail call void @llvm.nvvm.barrier0(), !dbg !106
  %705 = icmp slt i32 %9, 512, !dbg !106
  %706 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !106
  %707 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %706, i1 %705) #3, !dbg !106
  %708 = bitcast i32 %707 to float, !dbg !106
  %709 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %707, i32 4, i32 31), !dbg !106
  %710 = bitcast i32 %709 to float, !dbg !106
  %711 = fadd float %708, %710, !dbg !110
  %712 = bitcast float %711 to i32, !dbg !106
  %713 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %712, i32 2, i32 31), !dbg !106
  %714 = bitcast i32 %713 to float, !dbg !106
  %715 = fadd float %711, %714, !dbg !110
  %716 = bitcast float %715 to i32, !dbg !106
  %717 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %716, i32 1, i32 31), !dbg !106
  %718 = bitcast i32 %717 to float, !dbg !106
  %719 = fadd float %715, %718, !dbg !110
  %720 = and i32 %9, 7, !dbg !106
  %721 = icmp eq i32 %720, 0, !dbg !106
  %722 = and i1 %705, %721, !dbg !106
  %723 = bitcast float %719 to <1 x i32>, !dbg !106
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %706, <1 x i32> %723, i1 %722) #3, !dbg !106
  tail call void @llvm.nvvm.barrier0(), !dbg !106
  %724 = getelementptr float, ptr addrspace(3) @global_smem, i32 %701, !dbg !106
  %725 = load float, ptr addrspace(3) %724, align 16, !dbg !106
  %726 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %725, float 2.560000e+02) #3, !dbg !112
  tail call void @llvm.nvvm.barrier0(), !dbg !113
  %727 = sext i32 %15 to i64, !dbg !114
  %728 = getelementptr float, ptr addrspace(1) %0, i64 %727, !dbg !114
  %729 = icmp eq i32 %24, 0, !dbg !115
  %730 = bitcast float %726 to i32, !dbg !115
  %731 = and i1 %729, %19, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %730, ptr addrspace(1) %728, i1 %731) #3, !dbg !115
  ret void, !dbg !116
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py", directory: "inductor_cache/br")
!4 = !{ptr @triton_red_fused_max_pool2d_with_indices_mean_1, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_max_pool2d_with_indices_mean_1, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_max_pool2d_with_indices_mean_1", linkageName: "triton_red_fused_max_pool2d_with_indices_mean_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 45, column: 63, scope: !7)
!17 = !DILocation(line: 114, column: 38, scope: !7)
!18 = !DILocation(line: 28, column: 36, scope: !7)
!19 = !DILocation(line: 113, column: 48, scope: !7)
!20 = !DILocation(line: 29, column: 27, scope: !7)
!21 = !DILocation(line: 36, column: 23, scope: !7)
!22 = !DILocation(line: 45, column: 53, scope: !7)
!23 = !DILocation(line: 45, column: 58, scope: !7)
!24 = !DILocation(line: 45, column: 35, scope: !7)
!25 = !DILocation(line: 45, column: 84, scope: !7)
!26 = !DILocation(line: 45, column: 68, scope: !7)
!27 = !DILocation(line: 51, column: 58, scope: !7)
!28 = !DILocation(line: 51, column: 35, scope: !7)
!29 = !DILocation(line: 51, column: 68, scope: !7)
!30 = !DILocation(line: 58, column: 58, scope: !7)
!31 = !DILocation(line: 58, column: 35, scope: !7)
!32 = !DILocation(line: 58, column: 68, scope: !7)
!33 = !DILocation(line: 65, column: 57, scope: !7)
!34 = !DILocation(line: 65, column: 35, scope: !7)
!35 = !DILocation(line: 65, column: 67, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 52, column: 46, scope: !7)
!40 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !39)
!42 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!43 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !44)
!44 = !DILocation(line: 59, column: 46, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !44)
!46 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !44)
!47 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !44)
!48 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !49)
!49 = !DILocation(line: 66, column: 46, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !49)
!53 = !DILocation(line: 68, column: 50, scope: !7)
!54 = !DILocation(line: 68, column: 35, scope: !7)
!55 = !DILocation(line: 68, column: 60, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !57)
!57 = !DILocation(line: 69, column: 46, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !57)
!59 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !57)
!60 = !DILocation(line: 71, column: 54, scope: !7)
!61 = !DILocation(line: 71, column: 35, scope: !7)
!62 = !DILocation(line: 71, column: 64, scope: !7)
!63 = !DILocation(line: 78, column: 55, scope: !7)
!64 = !DILocation(line: 78, column: 35, scope: !7)
!65 = !DILocation(line: 78, column: 65, scope: !7)
!66 = !DILocation(line: 81, column: 55, scope: !7)
!67 = !DILocation(line: 81, column: 35, scope: !7)
!68 = !DILocation(line: 81, column: 65, scope: !7)
!69 = !DILocation(line: 84, column: 55, scope: !7)
!70 = !DILocation(line: 84, column: 35, scope: !7)
!71 = !DILocation(line: 84, column: 65, scope: !7)
!72 = !DILocation(line: 89, column: 39, scope: !7)
!73 = !DILocation(line: 92, column: 39, scope: !7)
!74 = !DILocation(line: 95, column: 39, scope: !7)
!75 = !DILocation(line: 98, column: 39, scope: !7)
!76 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !57)
!77 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !78)
!78 = !DILocation(line: 72, column: 46, scope: !7)
!79 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !78)
!80 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !78)
!81 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !78)
!82 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !83)
!83 = !DILocation(line: 79, column: 46, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !83)
!86 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !83)
!87 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !88)
!88 = !DILocation(line: 82, column: 46, scope: !7)
!89 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !88)
!90 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !88)
!91 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !88)
!92 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !93)
!93 = !DILocation(line: 85, column: 46, scope: !7)
!94 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !93)
!95 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !93)
!96 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !93)
!97 = !DILocation(line: 101, column: 39, scope: !7)
!98 = !DILocation(line: 104, column: 39, scope: !7)
!99 = !DILocation(line: 107, column: 39, scope: !7)
!100 = !DILocation(line: 110, column: 39, scope: !7)
!101 = !DILocation(line: 112, column: 25, scope: !7)
!102 = !DILocation(line: 114, column: 29, scope: !7)
!103 = !DILocation(line: 114, column: 50, scope: !7)
!104 = !DILocation(line: 115, column: 29, scope: !7)
!105 = !DILocation(line: 115, column: 50, scope: !7)
!106 = !DILocation(line: 267, column: 36, scope: !107, inlinedAt: !109)
!107 = distinct !DILexicalBlockFile(scope: !7, file: !108, discriminator: 0)
!108 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!109 = !DILocation(line: 116, column: 27, scope: !7)
!110 = !DILocation(line: 256, column: 15, scope: !111, inlinedAt: !109)
!111 = distinct !DILexicalBlockFile(scope: !107, file: !108, discriminator: 0)
!112 = !DILocation(line: 118, column: 20, scope: !7)
!113 = !DILocation(line: 119, column: 4, scope: !7)
!114 = !DILocation(line: 120, column: 28, scope: !7)
!115 = !DILocation(line: 120, column: 40, scope: !7)
!116 = !DILocation(line: 120, column: 4, scope: !7)
