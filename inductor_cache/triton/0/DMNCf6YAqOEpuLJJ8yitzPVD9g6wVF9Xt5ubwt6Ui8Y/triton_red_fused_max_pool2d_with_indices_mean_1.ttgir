#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 8], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [16, 1], order = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [16, 1], order = [1, 0]}>
#loc = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0)
#loc1 = loc(unknown)
#loc139 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":116:27)
#loc180 = loc(callsite(#loc1 at #loc139))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_max_pool2d_with_indices_mean_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0), %arg3: !tt.ptr<i8> {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1> : tensor<64x64xi8, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<64x64xi8, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<2> : tensor<64x64xi8, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<3> : tensor<64x64xi8, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<64x64xi8, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<5> : tensor<64x64xi8, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<6> : tensor<64x64xi8, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<7> : tensor<64x64xi8, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<8> : tensor<64x64xi8, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<2.560000e+02> : tensor<64x1xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_10 = arith.constant dense<0xFF800000> : tensor<64x64xf32, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_11 = arith.constant dense<256> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<256> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_13 = arith.constant dense<256> : tensor<64x1xi32, #blocked2> loc(#loc1)
    %cst_14 = arith.constant dense<256> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_15 = arith.constant dense<256> : tensor<1x64xi32, #blocked1> loc(#loc1)
    %cst_16 = arith.constant dense<256> : tensor<1x64xi32, #blocked2> loc(#loc1)
    %cst_17 = arith.constant dense<16> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_18 = arith.constant dense<2> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_19 = arith.constant dense<-1> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_20 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_21 = arith.constant dense<32> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_22 = arith.constant dense<-33> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_23 = arith.constant dense<64> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_24 = arith.constant dense<1024> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_25 = arith.constant dense<-32> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_26 = arith.constant dense<1> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_27 = arith.constant dense<-31> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_28 = arith.constant dense<31> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_29 = arith.constant dense<32> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_30 = arith.constant dense<33> : tensor<1x64xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc4)
    %6 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %7 = tt.expand_dims %4 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi32, #blocked2> loc(#loc4)
    %8 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked> loc(#loc5)
    %9 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc5)
    %10 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked2> loc(#loc5)
    %11 = arith.addi %8, %5 : tensor<64x1xi32, #blocked> loc(#loc5)
    %12 = arith.addi %9, %6 : tensor<64x1xi32, #blocked1> loc(#loc5)
    %13 = arith.addi %10, %7 : tensor<64x1xi32, #blocked2> loc(#loc5)
    %14 = arith.cmpi slt, %11, %cst_11 : tensor<64x1xi32, #blocked> loc(#loc6)
    %15 = arith.cmpi slt, %12, %cst_12 : tensor<64x1xi32, #blocked1> loc(#loc6)
    %16 = arith.cmpi slt, %13, %cst_13 : tensor<64x1xi32, #blocked2> loc(#loc6)
    %17 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %18 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc7)
    %19 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc7)
    %20 = tt.expand_dims %17 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc7)
    %21 = tt.expand_dims %18 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc7)
    %22 = tt.expand_dims %19 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi32, #blocked2> loc(#loc7)
    %23 = arith.muli %11, %cst_24 : tensor<64x1xi32, #blocked> loc(#loc8)
    %24 = tt.broadcast %23 : tensor<64x1xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc9)
    %25 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #blocked> loc(#loc10)
    %26 = tt.broadcast %14 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc11)
    %27 = tt.broadcast %15 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc11)
    %28 = tt.broadcast %16 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc11)
    %29 = arith.muli %12, %cst_12 : tensor<64x1xi32, #blocked1> loc(#loc12)
    %30 = arith.muli %13, %cst_13 : tensor<64x1xi32, #blocked2> loc(#loc12)
    %31 = tt.broadcast %29 : tensor<64x1xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc13)
    %32 = tt.broadcast %30 : tensor<64x1xi32, #blocked2> -> tensor<64x64xi32, #blocked2> loc(#loc13)
    %33 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc14)
    %34 = tt.splat %arg3 : !tt.ptr<i8> -> tensor<64x64x!tt.ptr<i8>, #blocked2> loc(#loc15)
    %35 = scf.for %arg6 = %c0_i32 to %c256_i32 step %c64_i32 iter_args(%arg7 = %cst) -> (tensor<64x64xf32, #blocked>)  : i32 {
      %41 = tt.splat %arg6 : i32 -> tensor<1x64xi32, #blocked> loc(#loc17)
      %42 = tt.splat %arg6 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc17)
      %43 = tt.splat %arg6 : i32 -> tensor<1x64xi32, #blocked2> loc(#loc17)
      %44 = arith.addi %41, %20 : tensor<1x64xi32, #blocked> loc(#loc17)
      %45 = arith.addi %42, %21 : tensor<1x64xi32, #blocked1> loc(#loc17)
      %46 = arith.addi %43, %22 : tensor<1x64xi32, #blocked2> loc(#loc17)
      %47 = arith.cmpi slt, %44, %cst_14 : tensor<1x64xi32, #blocked> loc(#loc18)
      %48 = arith.cmpi slt, %45, %cst_15 : tensor<1x64xi32, #blocked1> loc(#loc18)
      %49 = arith.cmpi slt, %46, %cst_16 : tensor<1x64xi32, #blocked2> loc(#loc18)
      %50 = arith.divsi %44, %cst_17 : tensor<1x64xi32, #blocked> loc(#loc19)
      %51 = arith.remsi %44, %cst_17 : tensor<1x64xi32, #blocked> loc(#loc20)
      %52 = arith.muli %50, %cst_18 : tensor<1x64xi32, #blocked> loc(#loc21)
      %53 = arith.addi %52, %cst_19 : tensor<1x64xi32, #blocked> loc(#loc22)
      %54 = arith.extsi %53 : tensor<1x64xi32, #blocked> to tensor<1x64xi64, #blocked> loc(#loc23)
      %55 = arith.cmpi sge, %54, %cst_20 : tensor<1x64xi64, #blocked> loc(#loc23)
      %56 = arith.cmpi slt, %54, %cst_21 : tensor<1x64xi64, #blocked> loc(#loc24)
      %57 = arith.andi %55, %56 : tensor<1x64xi1, #blocked> loc(#loc25)
      %58 = arith.muli %51, %cst_18 : tensor<1x64xi32, #blocked> loc(#loc26)
      %59 = arith.addi %58, %cst_19 : tensor<1x64xi32, #blocked> loc(#loc27)
      %60 = arith.extsi %59 : tensor<1x64xi32, #blocked> to tensor<1x64xi64, #blocked> loc(#loc28)
      %61 = arith.cmpi sge, %60, %cst_20 : tensor<1x64xi64, #blocked> loc(#loc28)
      %62 = arith.cmpi slt, %60, %cst_21 : tensor<1x64xi64, #blocked> loc(#loc29)
      %63 = arith.andi %61, %62 : tensor<1x64xi1, #blocked> loc(#loc30)
      %64 = arith.andi %57, %63 : tensor<1x64xi1, #blocked> loc(#loc31)
      %65 = arith.addi %58, %cst_22 : tensor<1x64xi32, #blocked> loc(#loc32)
      %66 = arith.muli %50, %cst_23 : tensor<1x64xi32, #blocked> loc(#loc33)
      %67 = arith.addi %65, %66 : tensor<1x64xi32, #blocked> loc(#loc34)
      %68 = tt.broadcast %67 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc9)
      %69 = arith.addi %68, %24 : tensor<64x64xi32, #blocked> loc(#loc9)
      %70 = tt.addptr %25, %69 : tensor<64x64x!tt.ptr<f32>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc10)
      %71 = arith.andi %47, %64 : tensor<1x64xi1, #blocked> loc(#loc35)
      %72 = tt.broadcast %71 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc11)
      %73 = arith.andi %72, %26 : tensor<64x64xi1, #blocked> loc(#loc11)
      %74 = tt.load %70, %73, %cst_10 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>, #blocked> loc(#loc36)
      %75 = arith.extsi %58 : tensor<1x64xi32, #blocked> to tensor<1x64xi64, #blocked> loc(#loc37)
      %76 = arith.cmpi sge, %75, %cst_20 : tensor<1x64xi64, #blocked> loc(#loc37)
      %77 = arith.cmpi slt, %75, %cst_21 : tensor<1x64xi64, #blocked> loc(#loc38)
      %78 = arith.andi %76, %77 : tensor<1x64xi1, #blocked> loc(#loc39)
      %79 = arith.andi %57, %78 : tensor<1x64xi1, #blocked> loc(#loc40)
      %80 = arith.addi %58, %cst_25 : tensor<1x64xi32, #blocked> loc(#loc41)
      %81 = arith.addi %80, %66 : tensor<1x64xi32, #blocked> loc(#loc42)
      %82 = tt.broadcast %81 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc43)
      %83 = arith.addi %82, %24 : tensor<64x64xi32, #blocked> loc(#loc43)
      %84 = tt.addptr %25, %83 : tensor<64x64x!tt.ptr<f32>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc44)
      %85 = arith.andi %47, %79 : tensor<1x64xi1, #blocked> loc(#loc45)
      %86 = tt.broadcast %85 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc46)
      %87 = arith.andi %86, %26 : tensor<64x64xi1, #blocked> loc(#loc46)
      %88 = tt.load %84, %87, %cst_10 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>, #blocked> loc(#loc47)
      %89 = arith.cmpf ogt, %88, %74 : tensor<64x64xf32, #blocked> loc(#loc147)
      %90 = arith.cmpf une, %88, %88 : tensor<64x64xf32, #blocked> loc(#loc148)
      %91 = arith.ori %89, %90 : tensor<64x64xi1, #blocked> loc(#loc149)
      %92 = arith.select %91, %88, %74 : tensor<64x64xi1, #blocked>, tensor<64x64xf32, #blocked> loc(#loc150)
      %93 = arith.addi %58, %cst_26 : tensor<1x64xi32, #blocked> loc(#loc53)
      %94 = arith.extsi %93 : tensor<1x64xi32, #blocked> to tensor<1x64xi64, #blocked> loc(#loc54)
      %95 = arith.cmpi sge, %94, %cst_20 : tensor<1x64xi64, #blocked> loc(#loc54)
      %96 = arith.cmpi slt, %94, %cst_21 : tensor<1x64xi64, #blocked> loc(#loc55)
      %97 = arith.andi %95, %96 : tensor<1x64xi1, #blocked> loc(#loc56)
      %98 = arith.andi %57, %97 : tensor<1x64xi1, #blocked> loc(#loc57)
      %99 = arith.addi %58, %cst_27 : tensor<1x64xi32, #blocked> loc(#loc58)
      %100 = arith.addi %99, %66 : tensor<1x64xi32, #blocked> loc(#loc59)
      %101 = tt.broadcast %100 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc60)
      %102 = arith.addi %101, %24 : tensor<64x64xi32, #blocked> loc(#loc60)
      %103 = tt.addptr %25, %102 : tensor<64x64x!tt.ptr<f32>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc61)
      %104 = arith.andi %47, %98 : tensor<1x64xi1, #blocked> loc(#loc62)
      %105 = tt.broadcast %104 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc63)
      %106 = arith.andi %105, %26 : tensor<64x64xi1, #blocked> loc(#loc63)
      %107 = tt.load %103, %106, %cst_10 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>, #blocked> loc(#loc64)
      %108 = arith.cmpf ogt, %107, %92 : tensor<64x64xf32, #blocked> loc(#loc151)
      %109 = arith.cmpf une, %107, %107 : tensor<64x64xf32, #blocked> loc(#loc152)
      %110 = arith.ori %108, %109 : tensor<64x64xi1, #blocked> loc(#loc153)
      %111 = arith.select %110, %107, %92 : tensor<64x64xi1, #blocked>, tensor<64x64xf32, #blocked> loc(#loc154)
      %112 = arith.extsi %52 : tensor<1x64xi32, #blocked> to tensor<1x64xi64, #blocked> loc(#loc66)
      %113 = arith.cmpi sge, %112, %cst_20 : tensor<1x64xi64, #blocked> loc(#loc66)
      %114 = arith.cmpi slt, %112, %cst_21 : tensor<1x64xi64, #blocked> loc(#loc67)
      %115 = arith.andi %113, %114 : tensor<1x64xi1, #blocked> loc(#loc68)
      %116 = arith.andi %115, %63 : tensor<1x64xi1, #blocked> loc(#loc69)
      %117 = arith.addi %59, %66 : tensor<1x64xi32, #blocked> loc(#loc70)
      %118 = tt.broadcast %117 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc71)
      %119 = arith.addi %118, %24 : tensor<64x64xi32, #blocked> loc(#loc71)
      %120 = tt.addptr %25, %119 : tensor<64x64x!tt.ptr<f32>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc72)
      %121 = arith.andi %47, %116 : tensor<1x64xi1, #blocked> loc(#loc73)
      %122 = tt.broadcast %121 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc74)
      %123 = arith.andi %122, %26 : tensor<64x64xi1, #blocked> loc(#loc74)
      %124 = tt.load %120, %123, %cst_10 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>, #blocked> loc(#loc75)
      %125 = arith.cmpf ogt, %124, %111 : tensor<64x64xf32, #blocked> loc(#loc155)
      %126 = arith.cmpf une, %124, %124 : tensor<64x64xf32, #blocked> loc(#loc156)
      %127 = arith.ori %125, %126 : tensor<64x64xi1, #blocked> loc(#loc157)
      %128 = arith.select %127, %124, %111 : tensor<64x64xi1, #blocked>, tensor<64x64xf32, #blocked> loc(#loc158)
      %129 = arith.andi %115, %78 : tensor<1x64xi1, #blocked> loc(#loc77)
      %130 = arith.addi %58, %66 : tensor<1x64xi32, #blocked> loc(#loc78)
      %131 = tt.broadcast %130 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc79)
      %132 = arith.addi %131, %24 : tensor<64x64xi32, #blocked> loc(#loc79)
      %133 = tt.addptr %25, %132 : tensor<64x64x!tt.ptr<f32>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc80)
      %134 = arith.andi %47, %129 : tensor<1x64xi1, #blocked> loc(#loc81)
      %135 = tt.broadcast %134 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc82)
      %136 = arith.andi %135, %26 : tensor<64x64xi1, #blocked> loc(#loc82)
      %137 = tt.load %133, %136, %cst_10 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>, #blocked> loc(#loc83)
      %138 = arith.cmpf ogt, %137, %128 : tensor<64x64xf32, #blocked> loc(#loc159)
      %139 = arith.cmpf une, %137, %137 : tensor<64x64xf32, #blocked> loc(#loc160)
      %140 = arith.ori %138, %139 : tensor<64x64xi1, #blocked> loc(#loc161)
      %141 = arith.select %140, %137, %128 : tensor<64x64xi1, #blocked>, tensor<64x64xf32, #blocked> loc(#loc162)
      %142 = arith.andi %115, %97 : tensor<1x64xi1, #blocked> loc(#loc85)
      %143 = arith.addi %93, %66 : tensor<1x64xi32, #blocked> loc(#loc86)
      %144 = tt.broadcast %143 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc87)
      %145 = arith.addi %144, %24 : tensor<64x64xi32, #blocked> loc(#loc87)
      %146 = tt.addptr %25, %145 : tensor<64x64x!tt.ptr<f32>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc88)
      %147 = arith.andi %47, %142 : tensor<1x64xi1, #blocked> loc(#loc89)
      %148 = tt.broadcast %147 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc90)
      %149 = arith.andi %148, %26 : tensor<64x64xi1, #blocked> loc(#loc90)
      %150 = tt.load %146, %149, %cst_10 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>, #blocked> loc(#loc91)
      %151 = arith.cmpf ogt, %150, %141 : tensor<64x64xf32, #blocked> loc(#loc163)
      %152 = arith.cmpf une, %150, %150 : tensor<64x64xf32, #blocked> loc(#loc164)
      %153 = arith.ori %151, %152 : tensor<64x64xi1, #blocked> loc(#loc165)
      %154 = arith.select %153, %150, %141 : tensor<64x64xi1, #blocked>, tensor<64x64xf32, #blocked> loc(#loc166)
      %155 = arith.addi %52, %cst_26 : tensor<1x64xi32, #blocked> loc(#loc93)
      %156 = arith.extsi %155 : tensor<1x64xi32, #blocked> to tensor<1x64xi64, #blocked> loc(#loc94)
      %157 = arith.cmpi sge, %156, %cst_20 : tensor<1x64xi64, #blocked> loc(#loc94)
      %158 = arith.cmpi slt, %156, %cst_21 : tensor<1x64xi64, #blocked> loc(#loc95)
      %159 = arith.andi %157, %158 : tensor<1x64xi1, #blocked> loc(#loc96)
      %160 = arith.andi %159, %63 : tensor<1x64xi1, #blocked> loc(#loc97)
      %161 = arith.addi %58, %cst_28 : tensor<1x64xi32, #blocked> loc(#loc98)
      %162 = arith.addi %161, %66 : tensor<1x64xi32, #blocked> loc(#loc99)
      %163 = tt.broadcast %162 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc100)
      %164 = arith.addi %163, %24 : tensor<64x64xi32, #blocked> loc(#loc100)
      %165 = tt.addptr %25, %164 : tensor<64x64x!tt.ptr<f32>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc101)
      %166 = arith.andi %47, %160 : tensor<1x64xi1, #blocked> loc(#loc102)
      %167 = tt.broadcast %166 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc103)
      %168 = arith.andi %167, %26 : tensor<64x64xi1, #blocked> loc(#loc103)
      %169 = tt.load %165, %168, %cst_10 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>, #blocked> loc(#loc104)
      %170 = arith.cmpf ogt, %169, %154 : tensor<64x64xf32, #blocked> loc(#loc167)
      %171 = arith.cmpf une, %169, %169 : tensor<64x64xf32, #blocked> loc(#loc168)
      %172 = arith.ori %170, %171 : tensor<64x64xi1, #blocked> loc(#loc169)
      %173 = arith.select %172, %169, %154 : tensor<64x64xi1, #blocked>, tensor<64x64xf32, #blocked> loc(#loc170)
      %174 = arith.andi %159, %78 : tensor<1x64xi1, #blocked> loc(#loc106)
      %175 = arith.addi %58, %cst_29 : tensor<1x64xi32, #blocked> loc(#loc107)
      %176 = arith.addi %175, %66 : tensor<1x64xi32, #blocked> loc(#loc108)
      %177 = tt.broadcast %176 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc109)
      %178 = arith.addi %177, %24 : tensor<64x64xi32, #blocked> loc(#loc109)
      %179 = tt.addptr %25, %178 : tensor<64x64x!tt.ptr<f32>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc110)
      %180 = arith.andi %47, %174 : tensor<1x64xi1, #blocked> loc(#loc111)
      %181 = tt.broadcast %180 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc112)
      %182 = arith.andi %181, %26 : tensor<64x64xi1, #blocked> loc(#loc112)
      %183 = tt.load %179, %182, %cst_10 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>, #blocked> loc(#loc113)
      %184 = arith.cmpf ogt, %183, %173 : tensor<64x64xf32, #blocked> loc(#loc171)
      %185 = arith.cmpf une, %183, %183 : tensor<64x64xf32, #blocked> loc(#loc172)
      %186 = arith.ori %184, %185 : tensor<64x64xi1, #blocked> loc(#loc173)
      %187 = arith.select %186, %183, %173 : tensor<64x64xi1, #blocked>, tensor<64x64xf32, #blocked> loc(#loc174)
      %188 = arith.andi %159, %97 : tensor<1x64xi1, #blocked> loc(#loc115)
      %189 = arith.addi %58, %cst_30 : tensor<1x64xi32, #blocked> loc(#loc116)
      %190 = arith.addi %189, %66 : tensor<1x64xi32, #blocked> loc(#loc117)
      %191 = tt.broadcast %190 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc118)
      %192 = arith.addi %191, %24 : tensor<64x64xi32, #blocked> loc(#loc118)
      %193 = tt.addptr %25, %192 : tensor<64x64x!tt.ptr<f32>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc119)
      %194 = arith.andi %47, %188 : tensor<1x64xi1, #blocked> loc(#loc120)
      %195 = tt.broadcast %194 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc121)
      %196 = arith.andi %195, %26 : tensor<64x64xi1, #blocked> loc(#loc121)
      %197 = tt.load %193, %196, %cst_10 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>, #blocked> loc(#loc122)
      %198 = arith.cmpf ogt, %197, %187 : tensor<64x64xf32, #blocked> loc(#loc175)
      %199 = arith.cmpf une, %197, %197 : tensor<64x64xf32, #blocked> loc(#loc176)
      %200 = arith.ori %198, %199 : tensor<64x64xi1, #blocked> loc(#loc177)
      %201 = arith.select %200, %197, %187 : tensor<64x64xi1, #blocked>, tensor<64x64xf32, #blocked> loc(#loc178)
      %202 = arith.select %89, %cst_0, %cst_1 : tensor<64x64xi1, #blocked>, tensor<64x64xi8, #blocked> loc(#loc124)
      %203 = arith.select %108, %cst_2, %202 : tensor<64x64xi1, #blocked>, tensor<64x64xi8, #blocked> loc(#loc125)
      %204 = arith.select %125, %cst_3, %203 : tensor<64x64xi1, #blocked>, tensor<64x64xi8, #blocked> loc(#loc126)
      %205 = arith.select %138, %cst_4, %204 : tensor<64x64xi1, #blocked>, tensor<64x64xi8, #blocked> loc(#loc127)
      %206 = arith.select %151, %cst_5, %205 : tensor<64x64xi1, #blocked>, tensor<64x64xi8, #blocked> loc(#loc128)
      %207 = arith.select %170, %cst_6, %206 : tensor<64x64xi1, #blocked>, tensor<64x64xi8, #blocked> loc(#loc129)
      %208 = arith.select %184, %cst_7, %207 : tensor<64x64xi1, #blocked>, tensor<64x64xi8, #blocked> loc(#loc130)
      %209 = arith.select %198, %cst_8, %208 : tensor<64x64xi1, #blocked>, tensor<64x64xi8, #blocked> loc(#loc131)
      %210 = arith.addf %arg7, %201 : tensor<64x64xf32, #blocked> loc(#loc132)
      %211 = tt.broadcast %47 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc133)
      %212 = tt.broadcast %48 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc133)
      %213 = tt.broadcast %49 : tensor<1x64xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc133)
      %214 = arith.andi %211, %26 : tensor<64x64xi1, #blocked> loc(#loc133)
      %215 = arith.andi %212, %27 : tensor<64x64xi1, #blocked1> loc(#loc133)
      %216 = arith.andi %213, %28 : tensor<64x64xi1, #blocked2> loc(#loc133)
      %217 = arith.select %214, %210, %arg7 : tensor<64x64xi1, #blocked>, tensor<64x64xf32, #blocked> loc(#loc134)
      %218 = tt.broadcast %45 : tensor<1x64xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc13)
      %219 = tt.broadcast %46 : tensor<1x64xi32, #blocked2> -> tensor<64x64xi32, #blocked2> loc(#loc13)
      %220 = arith.addi %218, %31 : tensor<64x64xi32, #blocked1> loc(#loc13)
      %221 = arith.addi %219, %32 : tensor<64x64xi32, #blocked2> loc(#loc13)
      %222 = tt.addptr %33, %220 : tensor<64x64x!tt.ptr<f32>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc14)
      %223 = triton_gpu.convert_layout %201 : tensor<64x64xf32, #blocked> -> tensor<64x64xf32, #blocked1> loc(#loc135)
      tt.store %222, %223, %215 : tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc135)
      %224 = tt.addptr %34, %221 : tensor<64x64x!tt.ptr<i8>, #blocked2>, tensor<64x64xi32, #blocked2> loc(#loc15)
      %225 = triton_gpu.convert_layout %209 : tensor<64x64xi8, #blocked> -> tensor<64x64xi8, #blocked2> loc(#loc136)
      tt.store %224, %225, %216 : tensor<64x64x!tt.ptr<i8>, #blocked2> loc(#loc136)
      scf.yield %217 : tensor<64x64xf32, #blocked> loc(#loc137)
    } loc(#loc16)
    %36 = "tt.reduce"(%35) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc139)), %arg7: f32 loc(callsite(#loc1 at #loc139))):
      %41 = arith.addf %arg6, %arg7 : f32 loc(#loc182)
      tt.reduce.return %41 : f32 loc(#loc179)
    }) : (tensor<64x64xf32, #blocked>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc179)
    %37 = tt.expand_dims %36 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xf32, #blocked> loc(#loc141)
    %38 = arith.divf %37, %cst_9 : tensor<64x1xf32, #blocked> loc(#loc142)
    gpu.barrier loc(#loc143)
    %39 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc144)
    %40 = tt.addptr %39, %11 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc144)
    tt.store %40, %38, %14 : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc145)
    tt.return loc(#loc146)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":22:28)
#loc3 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":22:33)
#loc4 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":23:44)
#loc5 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":23:23)
#loc6 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":24:21)
#loc7 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":25:33)
#loc8 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:63)
#loc9 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:58)
#loc10 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:35)
#loc11 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:84)
#loc12 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":114:38)
#loc13 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":114:34)
#loc14 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":114:29)
#loc15 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":115:29)
#loc16 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":28:36)
#loc17 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":29:27)
#loc18 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":30:25)
#loc19 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":31:23)
#loc20 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":32:23)
#loc21 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":34:24)
#loc22 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":34:22)
#loc23 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":36:23)
#loc24 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":38:22)
#loc25 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":39:22)
#loc26 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":40:24)
#loc27 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":40:22)
#loc28 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":41:23)
#loc29 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":42:22)
#loc30 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":43:22)
#loc31 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":44:23)
#loc32 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:43)
#loc33 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:53)
#loc34 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:50)
#loc35 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:76)
#loc36 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":45:68)
#loc37 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":47:25)
#loc38 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":48:24)
#loc39 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":49:24)
#loc40 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":50:23)
#loc41 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:43)
#loc42 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:50)
#loc43 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:58)
#loc44 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:35)
#loc45 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:76)
#loc46 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:84)
#loc47 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":51:68)
#loc48 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc49 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":52:46)
#loc50 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc51 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc52 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc53 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":53:20)
#loc54 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":54:25)
#loc55 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":55:24)
#loc56 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":56:24)
#loc57 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":57:23)
#loc58 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:43)
#loc59 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:50)
#loc60 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:58)
#loc61 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:35)
#loc62 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:76)
#loc63 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:84)
#loc64 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":58:68)
#loc65 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":59:46)
#loc66 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":61:25)
#loc67 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":62:24)
#loc68 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":63:24)
#loc69 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":64:24)
#loc70 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:49)
#loc71 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:57)
#loc72 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:35)
#loc73 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:75)
#loc74 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:83)
#loc75 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":65:67)
#loc76 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":66:46)
#loc77 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":67:24)
#loc78 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:42)
#loc79 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:50)
#loc80 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:35)
#loc81 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:68)
#loc82 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:76)
#loc83 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":68:60)
#loc84 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":69:46)
#loc85 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":70:24)
#loc86 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:46)
#loc87 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:54)
#loc88 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:35)
#loc89 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:72)
#loc90 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:80)
#loc91 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":71:64)
#loc92 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":72:46)
#loc93 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":73:20)
#loc94 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":74:25)
#loc95 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":75:24)
#loc96 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":76:24)
#loc97 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":77:24)
#loc98 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:40)
#loc99 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:47)
#loc100 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:55)
#loc101 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:35)
#loc102 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:73)
#loc103 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:81)
#loc104 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":78:65)
#loc105 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":79:46)
#loc106 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":80:24)
#loc107 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:40)
#loc108 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:47)
#loc109 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:55)
#loc110 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:35)
#loc111 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:73)
#loc112 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:81)
#loc113 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":81:65)
#loc114 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":82:46)
#loc115 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":83:24)
#loc116 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:40)
#loc117 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:47)
#loc118 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:55)
#loc119 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:35)
#loc120 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:73)
#loc121 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:81)
#loc122 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":84:65)
#loc123 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":85:46)
#loc124 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":89:39)
#loc125 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":92:39)
#loc126 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":95:39)
#loc127 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":98:39)
#loc128 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":101:39)
#loc129 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":104:39)
#loc130 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":107:39)
#loc131 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":110:39)
#loc132 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":112:25)
#loc133 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":113:34)
#loc134 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":113:48)
#loc135 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":114:50)
#loc136 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":115:50)
#loc137 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":115:8)
#loc138 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc140 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc141 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":116:30)
#loc142 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":118:20)
#loc143 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":119:4)
#loc144 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":120:28)
#loc145 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":120:40)
#loc146 = loc("inductor_cache/br/cbr67f4fimcgukvib6px57jn5xmt22fdwokdlr3pfvw36l2fbsgi.py":120:4)
#loc147 = loc(callsite(#loc48 at #loc49))
#loc148 = loc(callsite(#loc50 at #loc49))
#loc149 = loc(callsite(#loc51 at #loc49))
#loc150 = loc(callsite(#loc52 at #loc49))
#loc151 = loc(callsite(#loc48 at #loc65))
#loc152 = loc(callsite(#loc50 at #loc65))
#loc153 = loc(callsite(#loc51 at #loc65))
#loc154 = loc(callsite(#loc52 at #loc65))
#loc155 = loc(callsite(#loc48 at #loc76))
#loc156 = loc(callsite(#loc50 at #loc76))
#loc157 = loc(callsite(#loc51 at #loc76))
#loc158 = loc(callsite(#loc52 at #loc76))
#loc159 = loc(callsite(#loc48 at #loc84))
#loc160 = loc(callsite(#loc50 at #loc84))
#loc161 = loc(callsite(#loc51 at #loc84))
#loc162 = loc(callsite(#loc52 at #loc84))
#loc163 = loc(callsite(#loc48 at #loc92))
#loc164 = loc(callsite(#loc50 at #loc92))
#loc165 = loc(callsite(#loc51 at #loc92))
#loc166 = loc(callsite(#loc52 at #loc92))
#loc167 = loc(callsite(#loc48 at #loc105))
#loc168 = loc(callsite(#loc50 at #loc105))
#loc169 = loc(callsite(#loc51 at #loc105))
#loc170 = loc(callsite(#loc52 at #loc105))
#loc171 = loc(callsite(#loc48 at #loc114))
#loc172 = loc(callsite(#loc50 at #loc114))
#loc173 = loc(callsite(#loc51 at #loc114))
#loc174 = loc(callsite(#loc52 at #loc114))
#loc175 = loc(callsite(#loc48 at #loc123))
#loc176 = loc(callsite(#loc50 at #loc123))
#loc177 = loc(callsite(#loc51 at #loc123))
#loc178 = loc(callsite(#loc52 at #loc123))
#loc179 = loc(callsite(#loc138 at #loc139))
#loc181 = loc(callsite(#loc140 at #loc138))
#loc182 = loc(callsite(#loc181 at #loc139))
