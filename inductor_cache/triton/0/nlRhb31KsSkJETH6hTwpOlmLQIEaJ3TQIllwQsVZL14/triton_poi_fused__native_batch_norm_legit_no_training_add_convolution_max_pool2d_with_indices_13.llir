; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %13 = shl i32 %12, 5, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = lshr i32 %14, 2, !dbg !12
  %16 = and i32 %15, 31, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %19 = shl i32 %18, 5, !dbg !15
  %20 = shl i32 %14, 3, !dbg !16
  %21 = and i32 %20, 24, !dbg !16
  %22 = or disjoint i32 %19, %21, !dbg !17
  %23 = or disjoint i32 %22, 4, !dbg !17
  %24 = icmp slt i32 %22, 728, !dbg !18
  %25 = sdiv i32 %17, 16, !dbg !19
  %26 = mul i32 %17, 728, !dbg !20
  %27 = add i32 %22, %26, !dbg !21
  %28 = add i32 %26, %23, !dbg !21
  %29 = sext i32 %27 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = sext i32 %28 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %24) #4, !dbg !23
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %24) #4, !dbg !23
  %35 = sext i32 %22 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !24
  %37 = sext i32 %23 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !24
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %24) #4, !dbg !25
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %24) #4, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !26
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %24) #4, !dbg !27
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %24) #4, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !28
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %24) #4, !dbg !29
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !29
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !29
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !29
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !29
  %52 = bitcast i32 %48 to float, !dbg !29
  %53 = bitcast i32 %49 to float, !dbg !29
  %54 = bitcast i32 %50 to float, !dbg !29
  %55 = bitcast i32 %51 to float, !dbg !29
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %24) #4, !dbg !29
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !29
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !29
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !29
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !29
  %61 = bitcast i32 %57 to float, !dbg !29
  %62 = bitcast i32 %58 to float, !dbg !29
  %63 = bitcast i32 %59 to float, !dbg !29
  %64 = bitcast i32 %60 to float, !dbg !29
  %65 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %5, i64 %37, !dbg !30
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %24) #4, !dbg !31
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %24) #4, !dbg !31
  %69 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !32
  %70 = getelementptr float, ptr addrspace(1) %6, i64 %37, !dbg !32
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %24) #4, !dbg !33
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %24) #4, !dbg !33
  %73 = add i32 %27, -12376, !dbg !34
  %74 = add i32 %28, -12376, !dbg !34
  %75 = sext i32 %73 to i64, !dbg !35
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !35
  %77 = sext i32 %74 to i64, !dbg !35
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !35
  %79 = add i32 %27, -11648, !dbg !36
  %80 = add i32 %28, -11648, !dbg !36
  %81 = sext i32 %79 to i64, !dbg !37
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !37
  %83 = sext i32 %80 to i64, !dbg !37
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !37
  %85 = add i32 %27, -10920, !dbg !38
  %86 = add i32 %28, -10920, !dbg !38
  %87 = sext i32 %85 to i64, !dbg !39
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !39
  %89 = sext i32 %86 to i64, !dbg !39
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !39
  %91 = add i32 %27, -728, !dbg !40
  %92 = add i32 %28, -728, !dbg !40
  %93 = sext i32 %91 to i64, !dbg !41
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !41
  %95 = sext i32 %92 to i64, !dbg !41
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !41
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !42
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !42
  %99 = add i32 %27, 728, !dbg !43
  %100 = add i32 %28, 728, !dbg !43
  %101 = sext i32 %99 to i64, !dbg !44
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !44
  %103 = sext i32 %100 to i64, !dbg !44
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !44
  %105 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !45
  %106 = insertelement <2 x i32> %105, i32 %17, i64 1, !dbg !45
  %107 = srem <2 x i32> %106, splat (i32 16), !dbg !45
  %108 = extractelement <2 x i32> %107, i64 0, !dbg !46
  %109 = icmp sgt i32 %108, 0, !dbg !47
  %110 = extractelement <2 x i32> %107, i64 1, !dbg !46
  %111 = icmp sgt i32 %110, 0, !dbg !48
  %112 = and i1 %111, %109, !dbg !49
  %113 = and i1 %24, %112, !dbg !50
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 %113, i32 -8388608, i1 %113, i32 -8388608, i1 %113, i32 -8388608, i1 %113, i32 -8388608, i1 %113) #4, !dbg !51
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %78, i1 %113, i32 -8388608, i1 %113, i32 -8388608, i1 %113, i32 -8388608, i1 %113, i32 -8388608, i1 %113) #4, !dbg !51
  %116 = icmp sgt i32 %110, -1, !dbg !52
  %117 = and i1 %116, %109, !dbg !53
  %118 = and i1 %24, %117, !dbg !54
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118) #4, !dbg !55
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %84, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118) #4, !dbg !55
  %121 = add nsw <2 x i32> %107, splat (i32 1), !dbg !56
  %122 = extractelement <2 x i32> %121, i64 1, !dbg !57
  %123 = icmp ult i32 %122, 16, !dbg !58
  %124 = and i1 %109, %123, !dbg !59
  %125 = and i1 %24, %124, !dbg !60
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 %125, i32 -8388608, i1 %125, i32 -8388608, i1 %125, i32 -8388608, i1 %125, i32 -8388608, i1 %125) #4, !dbg !61
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %90, i1 %125, i32 -8388608, i1 %125, i32 -8388608, i1 %125, i32 -8388608, i1 %125, i32 -8388608, i1 %125) #4, !dbg !61
  %128 = icmp sgt i32 %108, -1, !dbg !62
  %129 = and i1 %111, %128, !dbg !63
  %130 = and i1 %24, %129, !dbg !64
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %94, i1 %130, i32 -8388608, i1 %130, i32 -8388608, i1 %130, i32 -8388608, i1 %130, i32 -8388608, i1 %130) #4, !dbg !65
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %96, i1 %130, i32 -8388608, i1 %130, i32 -8388608, i1 %130, i32 -8388608, i1 %130, i32 -8388608, i1 %130) #4, !dbg !65
  %133 = or i32 %108, %110, !dbg !46
  %134 = icmp sgt i32 %133, -1, !dbg !46
  %135 = and i1 %24, %134, !dbg !66
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %97, i1 %135, i32 -8388608, i1 %135, i32 -8388608, i1 %135, i32 -8388608, i1 %135, i32 -8388608, i1 %135) #4, !dbg !67
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %98, i1 %135, i32 -8388608, i1 %135, i32 -8388608, i1 %135, i32 -8388608, i1 %135, i32 -8388608, i1 %135) #4, !dbg !67
  %138 = and i1 %128, %123, !dbg !68
  %139 = and i1 %24, %138, !dbg !69
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %102, i1 %139, i32 -8388608, i1 %139, i32 -8388608, i1 %139, i32 -8388608, i1 %139, i32 -8388608, i1 %139) #4, !dbg !70
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %104, i1 %139, i32 -8388608, i1 %139, i32 -8388608, i1 %139, i32 -8388608, i1 %139, i32 -8388608, i1 %139) #4, !dbg !70
  %142 = extractelement <2 x i32> %121, i64 0, !dbg !57
  %143 = icmp ult i32 %142, 16, !dbg !56
  %144 = and i1 %111, %143, !dbg !71
  %145 = add i32 %27, 10920, !dbg !72
  %146 = add i32 %28, 10920, !dbg !72
  %147 = sext i32 %145 to i64, !dbg !73
  %148 = getelementptr float, ptr addrspace(1) %1, i64 %147, !dbg !73
  %149 = sext i32 %146 to i64, !dbg !73
  %150 = getelementptr float, ptr addrspace(1) %1, i64 %149, !dbg !73
  %151 = and i1 %24, %144, !dbg !74
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %148, i1 %151, i32 -8388608, i1 %151, i32 -8388608, i1 %151, i32 -8388608, i1 %151, i32 -8388608, i1 %151) #4, !dbg !75
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %150, i1 %151, i32 -8388608, i1 %151, i32 -8388608, i1 %151, i32 -8388608, i1 %151, i32 -8388608, i1 %151) #4, !dbg !75
  %154 = and i1 %116, %143, !dbg !76
  %155 = add i32 %27, 11648, !dbg !77
  %156 = add i32 %28, 11648, !dbg !77
  %157 = sext i32 %155 to i64, !dbg !78
  %158 = getelementptr float, ptr addrspace(1) %1, i64 %157, !dbg !78
  %159 = sext i32 %156 to i64, !dbg !78
  %160 = getelementptr float, ptr addrspace(1) %1, i64 %159, !dbg !78
  %161 = and i1 %24, %154, !dbg !79
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %158, i1 %161, i32 -8388608, i1 %161, i32 -8388608, i1 %161, i32 -8388608, i1 %161, i32 -8388608, i1 %161) #4, !dbg !80
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %160, i1 %161, i32 -8388608, i1 %161, i32 -8388608, i1 %161, i32 -8388608, i1 %161, i32 -8388608, i1 %161) #4, !dbg !80
  %164 = or i32 %142, %122, !dbg !57
  %165 = icmp ult i32 %164, 16, !dbg !57
  %166 = add i32 %27, 12376, !dbg !81
  %167 = add i32 %28, 12376, !dbg !81
  %168 = sext i32 %166 to i64, !dbg !82
  %169 = getelementptr float, ptr addrspace(1) %1, i64 %168, !dbg !82
  %170 = sext i32 %167 to i64, !dbg !82
  %171 = getelementptr float, ptr addrspace(1) %1, i64 %170, !dbg !82
  %172 = and i1 %24, %165, !dbg !83
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %169, i1 %172, i32 -8388608, i1 %172, i32 -8388608, i1 %172, i32 -8388608, i1 %172, i32 -8388608, i1 %172) #4, !dbg !84
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %171, i1 %172, i32 -8388608, i1 %172, i32 -8388608, i1 %172, i32 -8388608, i1 %172, i32 -8388608, i1 %172) #4, !dbg !84
  %175 = fadd float %52, 0x3EE4F8B580000000, !dbg !85
  %176 = fadd float %53, 0x3EE4F8B580000000, !dbg !85
  %177 = fadd float %54, 0x3EE4F8B580000000, !dbg !85
  %178 = fadd float %55, 0x3EE4F8B580000000, !dbg !85
  %179 = fadd float %61, 0x3EE4F8B580000000, !dbg !85
  %180 = fadd float %62, 0x3EE4F8B580000000, !dbg !85
  %181 = fadd float %63, 0x3EE4F8B580000000, !dbg !85
  %182 = fadd float %64, 0x3EE4F8B580000000, !dbg !85
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !86
  %.not.i = icmp eq i32 %183, 0, !dbg !86
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !86
  %.not1.i = icmp eq i32 %184, 0, !dbg !86
  br i1 %.not.i, label %190, label %185, !dbg !86

185:                                              ; preds = %11
  br i1 %.not1.i, label %188, label %186, !dbg !86

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %175) #4, !dbg !86
  br label %__nv_sqrtf.exit, !dbg !86

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %175) #4, !dbg !86
  br label %__nv_sqrtf.exit, !dbg !86

190:                                              ; preds = %11
  br i1 %.not1.i, label %193, label %191, !dbg !86

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.f(float %175) #4, !dbg !86
  br label %__nv_sqrtf.exit, !dbg !86

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.f(float %175) #4, !dbg !86
  br label %__nv_sqrtf.exit, !dbg !86

__nv_sqrtf.exit:                                  ; preds = %186, %188, %191, %193
  %.0.i = phi float [ %187, %186 ], [ %189, %188 ], [ %192, %191 ], [ %194, %193 ], !dbg !86
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !86
  %.not.i18 = icmp eq i32 %195, 0, !dbg !86
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !86
  %.not1.i21 = icmp eq i32 %196, 0, !dbg !86
  br i1 %.not.i18, label %202, label %197, !dbg !86

197:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %200, label %198, !dbg !86

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %176) #4, !dbg !86
  br label %__nv_sqrtf.exit22, !dbg !86

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %176) #4, !dbg !86
  br label %__nv_sqrtf.exit22, !dbg !86

202:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %205, label %203, !dbg !86

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.f(float %176) #4, !dbg !86
  br label %__nv_sqrtf.exit22, !dbg !86

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.f(float %176) #4, !dbg !86
  br label %__nv_sqrtf.exit22, !dbg !86

__nv_sqrtf.exit22:                                ; preds = %198, %200, %203, %205
  %.0.i20 = phi float [ %199, %198 ], [ %201, %200 ], [ %204, %203 ], [ %206, %205 ], !dbg !86
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !86
  %.not.i23 = icmp eq i32 %207, 0, !dbg !86
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !86
  %.not1.i26 = icmp eq i32 %208, 0, !dbg !86
  br i1 %.not.i23, label %214, label %209, !dbg !86

209:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %212, label %210, !dbg !86

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %177) #4, !dbg !86
  br label %__nv_sqrtf.exit27, !dbg !86

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %177) #4, !dbg !86
  br label %__nv_sqrtf.exit27, !dbg !86

214:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %217, label %215, !dbg !86

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.f(float %177) #4, !dbg !86
  br label %__nv_sqrtf.exit27, !dbg !86

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.f(float %177) #4, !dbg !86
  br label %__nv_sqrtf.exit27, !dbg !86

__nv_sqrtf.exit27:                                ; preds = %210, %212, %215, %217
  %.0.i25 = phi float [ %211, %210 ], [ %213, %212 ], [ %216, %215 ], [ %218, %217 ], !dbg !86
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !86
  %.not.i28 = icmp eq i32 %219, 0, !dbg !86
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !86
  %.not1.i31 = icmp eq i32 %220, 0, !dbg !86
  br i1 %.not.i28, label %226, label %221, !dbg !86

221:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %224, label %222, !dbg !86

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %178) #4, !dbg !86
  br label %__nv_sqrtf.exit32, !dbg !86

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %178) #4, !dbg !86
  br label %__nv_sqrtf.exit32, !dbg !86

226:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %229, label %227, !dbg !86

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.f(float %178) #4, !dbg !86
  br label %__nv_sqrtf.exit32, !dbg !86

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.f(float %178) #4, !dbg !86
  br label %__nv_sqrtf.exit32, !dbg !86

__nv_sqrtf.exit32:                                ; preds = %222, %224, %227, %229
  %.0.i30 = phi float [ %223, %222 ], [ %225, %224 ], [ %228, %227 ], [ %230, %229 ], !dbg !86
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !86
  %.not.i33 = icmp eq i32 %231, 0, !dbg !86
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !86
  %.not1.i36 = icmp eq i32 %232, 0, !dbg !86
  br i1 %.not.i33, label %238, label %233, !dbg !86

233:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %236, label %234, !dbg !86

234:                                              ; preds = %233
  %235 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %179) #4, !dbg !86
  br label %__nv_sqrtf.exit37, !dbg !86

236:                                              ; preds = %233
  %237 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %179) #4, !dbg !86
  br label %__nv_sqrtf.exit37, !dbg !86

238:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %241, label %239, !dbg !86

239:                                              ; preds = %238
  %240 = tail call float @llvm.nvvm.sqrt.rn.f(float %179) #4, !dbg !86
  br label %__nv_sqrtf.exit37, !dbg !86

241:                                              ; preds = %238
  %242 = tail call float @llvm.nvvm.sqrt.approx.f(float %179) #4, !dbg !86
  br label %__nv_sqrtf.exit37, !dbg !86

__nv_sqrtf.exit37:                                ; preds = %234, %236, %239, %241
  %.0.i35 = phi float [ %235, %234 ], [ %237, %236 ], [ %240, %239 ], [ %242, %241 ], !dbg !86
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !86
  %.not.i38 = icmp eq i32 %243, 0, !dbg !86
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !86
  %.not1.i41 = icmp eq i32 %244, 0, !dbg !86
  br i1 %.not.i38, label %250, label %245, !dbg !86

245:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %248, label %246, !dbg !86

246:                                              ; preds = %245
  %247 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %180) #4, !dbg !86
  br label %__nv_sqrtf.exit42, !dbg !86

248:                                              ; preds = %245
  %249 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %180) #4, !dbg !86
  br label %__nv_sqrtf.exit42, !dbg !86

250:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %253, label %251, !dbg !86

251:                                              ; preds = %250
  %252 = tail call float @llvm.nvvm.sqrt.rn.f(float %180) #4, !dbg !86
  br label %__nv_sqrtf.exit42, !dbg !86

253:                                              ; preds = %250
  %254 = tail call float @llvm.nvvm.sqrt.approx.f(float %180) #4, !dbg !86
  br label %__nv_sqrtf.exit42, !dbg !86

__nv_sqrtf.exit42:                                ; preds = %246, %248, %251, %253
  %.0.i40 = phi float [ %247, %246 ], [ %249, %248 ], [ %252, %251 ], [ %254, %253 ], !dbg !86
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !86
  %.not.i43 = icmp eq i32 %255, 0, !dbg !86
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !86
  %.not1.i46 = icmp eq i32 %256, 0, !dbg !86
  br i1 %.not.i43, label %262, label %257, !dbg !86

257:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %260, label %258, !dbg !86

258:                                              ; preds = %257
  %259 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %181) #4, !dbg !86
  br label %__nv_sqrtf.exit47, !dbg !86

260:                                              ; preds = %257
  %261 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %181) #4, !dbg !86
  br label %__nv_sqrtf.exit47, !dbg !86

262:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %265, label %263, !dbg !86

263:                                              ; preds = %262
  %264 = tail call float @llvm.nvvm.sqrt.rn.f(float %181) #4, !dbg !86
  br label %__nv_sqrtf.exit47, !dbg !86

265:                                              ; preds = %262
  %266 = tail call float @llvm.nvvm.sqrt.approx.f(float %181) #4, !dbg !86
  br label %__nv_sqrtf.exit47, !dbg !86

__nv_sqrtf.exit47:                                ; preds = %258, %260, %263, %265
  %.0.i45 = phi float [ %259, %258 ], [ %261, %260 ], [ %264, %263 ], [ %266, %265 ], !dbg !86
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !86
  %.not.i48 = icmp eq i32 %267, 0, !dbg !86
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !86
  %.not1.i51 = icmp eq i32 %268, 0, !dbg !86
  br i1 %.not.i48, label %274, label %269, !dbg !86

269:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %272, label %270, !dbg !86

270:                                              ; preds = %269
  %271 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %182) #4, !dbg !86
  br label %__nv_sqrtf.exit52, !dbg !86

272:                                              ; preds = %269
  %273 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %182) #4, !dbg !86
  br label %__nv_sqrtf.exit52, !dbg !86

274:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %277, label %275, !dbg !86

275:                                              ; preds = %274
  %276 = tail call float @llvm.nvvm.sqrt.rn.f(float %182) #4, !dbg !86
  br label %__nv_sqrtf.exit52, !dbg !86

277:                                              ; preds = %274
  %278 = tail call float @llvm.nvvm.sqrt.approx.f(float %182) #4, !dbg !86
  br label %__nv_sqrtf.exit52, !dbg !86

__nv_sqrtf.exit52:                                ; preds = %270, %272, %275, %277
  %.0.i50 = phi float [ %271, %270 ], [ %273, %272 ], [ %276, %275 ], [ %278, %277 ], !dbg !86
  %279 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !23
  %280 = bitcast i32 %279 to float, !dbg !23
  %281 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !25
  %282 = bitcast i32 %281 to float, !dbg !25
  %283 = fadd float %280, %282, !dbg !87
  %284 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !27
  %285 = bitcast i32 %284 to float, !dbg !27
  %286 = fsub float %283, %285, !dbg !88
  %287 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !23
  %288 = bitcast i32 %287 to float, !dbg !23
  %289 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !25
  %290 = bitcast i32 %289 to float, !dbg !25
  %291 = fadd float %288, %290, !dbg !87
  %292 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !27
  %293 = bitcast i32 %292 to float, !dbg !27
  %294 = fsub float %291, %293, !dbg !88
  %295 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !23
  %296 = bitcast i32 %295 to float, !dbg !23
  %297 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !25
  %298 = bitcast i32 %297 to float, !dbg !25
  %299 = fadd float %296, %298, !dbg !87
  %300 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !27
  %301 = bitcast i32 %300 to float, !dbg !27
  %302 = fsub float %299, %301, !dbg !88
  %303 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !23
  %304 = bitcast i32 %303 to float, !dbg !23
  %305 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !25
  %306 = bitcast i32 %305 to float, !dbg !25
  %307 = fadd float %304, %306, !dbg !87
  %308 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !27
  %309 = bitcast i32 %308 to float, !dbg !27
  %310 = fsub float %307, %309, !dbg !88
  %311 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !23
  %312 = bitcast i32 %311 to float, !dbg !23
  %313 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !25
  %314 = bitcast i32 %313 to float, !dbg !25
  %315 = fadd float %312, %314, !dbg !87
  %316 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !27
  %317 = bitcast i32 %316 to float, !dbg !27
  %318 = fsub float %315, %317, !dbg !88
  %319 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !23
  %320 = bitcast i32 %319 to float, !dbg !23
  %321 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !25
  %322 = bitcast i32 %321 to float, !dbg !25
  %323 = fadd float %320, %322, !dbg !87
  %324 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !27
  %325 = bitcast i32 %324 to float, !dbg !27
  %326 = fsub float %323, %325, !dbg !88
  %327 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !23
  %328 = bitcast i32 %327 to float, !dbg !23
  %329 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !25
  %330 = bitcast i32 %329 to float, !dbg !25
  %331 = fadd float %328, %330, !dbg !87
  %332 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !27
  %333 = bitcast i32 %332 to float, !dbg !27
  %334 = fsub float %331, %333, !dbg !88
  %335 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !23
  %336 = bitcast i32 %335 to float, !dbg !23
  %337 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !25
  %338 = bitcast i32 %337 to float, !dbg !25
  %339 = fadd float %336, %338, !dbg !87
  %340 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !27
  %341 = bitcast i32 %340 to float, !dbg !27
  %342 = fsub float %339, %341, !dbg !88
  %343 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !55
  %344 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !51
  %345 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !61
  %346 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !65
  %347 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !67
  %348 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !70
  %349 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !75
  %350 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !80
  %351 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !84
  %352 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !55
  %353 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !51
  %354 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !61
  %355 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !65
  %356 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !67
  %357 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !70
  %358 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !75
  %359 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !80
  %360 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !84
  %361 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !55
  %362 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !51
  %363 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !61
  %364 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !65
  %365 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !67
  %366 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !70
  %367 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !75
  %368 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !80
  %369 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !84
  %370 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !55
  %371 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !51
  %372 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !61
  %373 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !65
  %374 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !67
  %375 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !70
  %376 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !75
  %377 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !80
  %378 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !84
  %379 = insertelement <4 x i32> poison, i32 %370, i64 0, !dbg !55
  %380 = insertelement <4 x i32> %379, i32 %361, i64 1, !dbg !55
  %381 = insertelement <4 x i32> %380, i32 %352, i64 2, !dbg !55
  %382 = insertelement <4 x i32> %381, i32 %343, i64 3, !dbg !55
  %383 = bitcast <4 x i32> %382 to <4 x float>, !dbg !55
  %384 = insertelement <4 x i32> poison, i32 %371, i64 0, !dbg !51
  %385 = insertelement <4 x i32> %384, i32 %362, i64 1, !dbg !51
  %386 = insertelement <4 x i32> %385, i32 %353, i64 2, !dbg !51
  %387 = insertelement <4 x i32> %386, i32 %344, i64 3, !dbg !51
  %388 = bitcast <4 x i32> %387 to <4 x float>, !dbg !51
  %389 = fcmp ogt <4 x float> %383, %388, !dbg !89
  %390 = insertelement <4 x i32> poison, i32 %373, i64 0, !dbg !65
  %391 = insertelement <4 x i32> %390, i32 %364, i64 1, !dbg !65
  %392 = insertelement <4 x i32> %391, i32 %355, i64 2, !dbg !65
  %393 = insertelement <4 x i32> %392, i32 %346, i64 3, !dbg !65
  %394 = bitcast <4 x i32> %393 to <4 x float>, !dbg !65
  %395 = fcmp uno <4 x float> %383, zeroinitializer, !dbg !93
  %396 = or <4 x i1> %389, %395, !dbg !94
  %.v = select <4 x i1> %396, <4 x i32> %382, <4 x i32> %387, !dbg !95
  %397 = bitcast <4 x i32> %.v to <4 x float>, !dbg !95
  %398 = insertelement <4 x i32> poison, i32 %372, i64 0, !dbg !61
  %399 = insertelement <4 x i32> %398, i32 %363, i64 1, !dbg !61
  %400 = insertelement <4 x i32> %399, i32 %354, i64 2, !dbg !61
  %401 = insertelement <4 x i32> %400, i32 %345, i64 3, !dbg !61
  %402 = bitcast <4 x i32> %401 to <4 x float>, !dbg !61
  %403 = fcmp olt <4 x float> %397, %402, !dbg !96
  %404 = fcmp uno <4 x float> %402, zeroinitializer, !dbg !98
  %405 = or <4 x i1> %404, %403, !dbg !99
  %.v53 = select <4 x i1> %405, <4 x i32> %401, <4 x i32> %.v, !dbg !100
  %406 = bitcast <4 x i32> %.v53 to <4 x float>, !dbg !100
  %407 = fcmp olt <4 x float> %406, %394, !dbg !101
  %408 = insertelement <4 x i32> poison, i32 %374, i64 0, !dbg !67
  %409 = insertelement <4 x i32> %408, i32 %365, i64 1, !dbg !67
  %410 = insertelement <4 x i32> %409, i32 %356, i64 2, !dbg !67
  %411 = insertelement <4 x i32> %410, i32 %347, i64 3, !dbg !67
  %412 = bitcast <4 x i32> %411 to <4 x float>, !dbg !67
  %413 = fcmp uno <4 x float> %394, zeroinitializer, !dbg !103
  %414 = or <4 x i1> %413, %407, !dbg !104
  %.v54 = select <4 x i1> %414, <4 x i32> %393, <4 x i32> %.v53, !dbg !105
  %415 = bitcast <4 x i32> %.v54 to <4 x float>, !dbg !105
  %416 = fcmp olt <4 x float> %415, %412, !dbg !106
  %417 = fcmp uno <4 x float> %412, zeroinitializer, !dbg !108
  %418 = or <4 x i1> %417, %416, !dbg !109
  %.v55 = select <4 x i1> %418, <4 x i32> %411, <4 x i32> %.v54, !dbg !110
  %419 = bitcast <4 x i32> %.v55 to <4 x float>, !dbg !110
  %420 = insertelement <4 x i32> poison, i32 %375, i64 0, !dbg !70
  %421 = insertelement <4 x i32> %420, i32 %366, i64 1, !dbg !70
  %422 = insertelement <4 x i32> %421, i32 %357, i64 2, !dbg !70
  %423 = insertelement <4 x i32> %422, i32 %348, i64 3, !dbg !70
  %424 = bitcast <4 x i32> %423 to <4 x float>, !dbg !70
  %425 = fcmp olt <4 x float> %419, %424, !dbg !111
  %426 = fcmp uno <4 x float> %424, zeroinitializer, !dbg !113
  %427 = or <4 x i1> %426, %425, !dbg !114
  %.v56 = select <4 x i1> %427, <4 x i32> %423, <4 x i32> %.v55, !dbg !115
  %428 = bitcast <4 x i32> %.v56 to <4 x float>, !dbg !115
  %429 = insertelement <4 x i32> poison, i32 %376, i64 0, !dbg !75
  %430 = insertelement <4 x i32> %429, i32 %367, i64 1, !dbg !75
  %431 = insertelement <4 x i32> %430, i32 %358, i64 2, !dbg !75
  %432 = insertelement <4 x i32> %431, i32 %349, i64 3, !dbg !75
  %433 = bitcast <4 x i32> %432 to <4 x float>, !dbg !75
  %434 = fcmp olt <4 x float> %428, %433, !dbg !116
  %435 = fcmp uno <4 x float> %433, zeroinitializer, !dbg !118
  %436 = or <4 x i1> %435, %434, !dbg !119
  %.v57 = select <4 x i1> %436, <4 x i32> %432, <4 x i32> %.v56, !dbg !120
  %437 = bitcast <4 x i32> %.v57 to <4 x float>, !dbg !120
  %438 = insertelement <4 x i32> poison, i32 %377, i64 0, !dbg !80
  %439 = insertelement <4 x i32> %438, i32 %368, i64 1, !dbg !80
  %440 = insertelement <4 x i32> %439, i32 %359, i64 2, !dbg !80
  %441 = insertelement <4 x i32> %440, i32 %350, i64 3, !dbg !80
  %442 = bitcast <4 x i32> %441 to <4 x float>, !dbg !80
  %443 = fcmp olt <4 x float> %437, %442, !dbg !121
  %444 = fcmp uno <4 x float> %442, zeroinitializer, !dbg !123
  %445 = or <4 x i1> %444, %443, !dbg !124
  %.v58 = select <4 x i1> %445, <4 x i32> %441, <4 x i32> %.v57, !dbg !125
  %446 = bitcast <4 x i32> %.v58 to <4 x float>, !dbg !125
  %447 = insertelement <4 x i32> poison, i32 %378, i64 0, !dbg !84
  %448 = insertelement <4 x i32> %447, i32 %369, i64 1, !dbg !84
  %449 = insertelement <4 x i32> %448, i32 %360, i64 2, !dbg !84
  %450 = insertelement <4 x i32> %449, i32 %351, i64 3, !dbg !84
  %451 = bitcast <4 x i32> %450 to <4 x float>, !dbg !84
  %452 = fcmp olt <4 x float> %446, %451, !dbg !126
  %453 = zext <4 x i1> %389 to <4 x i8>, !dbg !128
  %454 = select <4 x i1> %403, <4 x i8> splat (i8 2), <4 x i8> %453, !dbg !129
  %455 = select <4 x i1> %407, <4 x i8> splat (i8 3), <4 x i8> %454, !dbg !130
  %456 = select <4 x i1> %416, <4 x i8> splat (i8 4), <4 x i8> %455, !dbg !131
  %457 = select <4 x i1> %425, <4 x i8> splat (i8 5), <4 x i8> %456, !dbg !132
  %458 = select <4 x i1> %434, <4 x i8> splat (i8 6), <4 x i8> %457, !dbg !133
  %459 = select <4 x i1> %443, <4 x i8> splat (i8 7), <4 x i8> %458, !dbg !134
  %460 = select <4 x i1> %452, <4 x i8> splat (i8 8), <4 x i8> %459, !dbg !135
  %461 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !55
  %462 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !51
  %463 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !61
  %464 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !65
  %465 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !67
  %466 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !70
  %467 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !75
  %468 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !80
  %469 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !84
  %470 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !55
  %471 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !51
  %472 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !61
  %473 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !65
  %474 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !67
  %475 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !70
  %476 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !75
  %477 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !80
  %478 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !84
  %479 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !55
  %480 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !51
  %481 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !61
  %482 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !65
  %483 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !67
  %484 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !70
  %485 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !75
  %486 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !80
  %487 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !84
  %488 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !55
  %489 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !51
  %490 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !61
  %491 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !65
  %492 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !67
  %493 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !70
  %494 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !75
  %495 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !80
  %496 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !84
  %497 = insertelement <4 x i32> poison, i32 %488, i64 0, !dbg !55
  %498 = insertelement <4 x i32> %497, i32 %479, i64 1, !dbg !55
  %499 = insertelement <4 x i32> %498, i32 %470, i64 2, !dbg !55
  %500 = insertelement <4 x i32> %499, i32 %461, i64 3, !dbg !55
  %501 = bitcast <4 x i32> %500 to <4 x float>, !dbg !55
  %502 = insertelement <4 x i32> poison, i32 %489, i64 0, !dbg !51
  %503 = insertelement <4 x i32> %502, i32 %480, i64 1, !dbg !51
  %504 = insertelement <4 x i32> %503, i32 %471, i64 2, !dbg !51
  %505 = insertelement <4 x i32> %504, i32 %462, i64 3, !dbg !51
  %506 = bitcast <4 x i32> %505 to <4 x float>, !dbg !51
  %507 = fcmp ogt <4 x float> %501, %506, !dbg !89
  %508 = insertelement <4 x i32> poison, i32 %491, i64 0, !dbg !65
  %509 = insertelement <4 x i32> %508, i32 %482, i64 1, !dbg !65
  %510 = insertelement <4 x i32> %509, i32 %473, i64 2, !dbg !65
  %511 = insertelement <4 x i32> %510, i32 %464, i64 3, !dbg !65
  %512 = bitcast <4 x i32> %511 to <4 x float>, !dbg !65
  %513 = fcmp uno <4 x float> %501, zeroinitializer, !dbg !93
  %514 = or <4 x i1> %507, %513, !dbg !94
  %.v59 = select <4 x i1> %514, <4 x i32> %500, <4 x i32> %505, !dbg !95
  %515 = bitcast <4 x i32> %.v59 to <4 x float>, !dbg !95
  %516 = insertelement <4 x i32> poison, i32 %490, i64 0, !dbg !61
  %517 = insertelement <4 x i32> %516, i32 %481, i64 1, !dbg !61
  %518 = insertelement <4 x i32> %517, i32 %472, i64 2, !dbg !61
  %519 = insertelement <4 x i32> %518, i32 %463, i64 3, !dbg !61
  %520 = bitcast <4 x i32> %519 to <4 x float>, !dbg !61
  %521 = fcmp olt <4 x float> %515, %520, !dbg !96
  %522 = fcmp uno <4 x float> %520, zeroinitializer, !dbg !98
  %523 = or <4 x i1> %522, %521, !dbg !99
  %.v60 = select <4 x i1> %523, <4 x i32> %519, <4 x i32> %.v59, !dbg !100
  %524 = bitcast <4 x i32> %.v60 to <4 x float>, !dbg !100
  %525 = fcmp olt <4 x float> %524, %512, !dbg !101
  %526 = insertelement <4 x i32> poison, i32 %492, i64 0, !dbg !67
  %527 = insertelement <4 x i32> %526, i32 %483, i64 1, !dbg !67
  %528 = insertelement <4 x i32> %527, i32 %474, i64 2, !dbg !67
  %529 = insertelement <4 x i32> %528, i32 %465, i64 3, !dbg !67
  %530 = bitcast <4 x i32> %529 to <4 x float>, !dbg !67
  %531 = fcmp uno <4 x float> %512, zeroinitializer, !dbg !103
  %532 = or <4 x i1> %531, %525, !dbg !104
  %.v61 = select <4 x i1> %532, <4 x i32> %511, <4 x i32> %.v60, !dbg !105
  %533 = bitcast <4 x i32> %.v61 to <4 x float>, !dbg !105
  %534 = fcmp olt <4 x float> %533, %530, !dbg !106
  %535 = fcmp uno <4 x float> %530, zeroinitializer, !dbg !108
  %536 = or <4 x i1> %535, %534, !dbg !109
  %.v62 = select <4 x i1> %536, <4 x i32> %529, <4 x i32> %.v61, !dbg !110
  %537 = bitcast <4 x i32> %.v62 to <4 x float>, !dbg !110
  %538 = insertelement <4 x i32> poison, i32 %493, i64 0, !dbg !70
  %539 = insertelement <4 x i32> %538, i32 %484, i64 1, !dbg !70
  %540 = insertelement <4 x i32> %539, i32 %475, i64 2, !dbg !70
  %541 = insertelement <4 x i32> %540, i32 %466, i64 3, !dbg !70
  %542 = bitcast <4 x i32> %541 to <4 x float>, !dbg !70
  %543 = fcmp olt <4 x float> %537, %542, !dbg !111
  %544 = fcmp uno <4 x float> %542, zeroinitializer, !dbg !113
  %545 = or <4 x i1> %544, %543, !dbg !114
  %.v63 = select <4 x i1> %545, <4 x i32> %541, <4 x i32> %.v62, !dbg !115
  %546 = bitcast <4 x i32> %.v63 to <4 x float>, !dbg !115
  %547 = insertelement <4 x i32> poison, i32 %494, i64 0, !dbg !75
  %548 = insertelement <4 x i32> %547, i32 %485, i64 1, !dbg !75
  %549 = insertelement <4 x i32> %548, i32 %476, i64 2, !dbg !75
  %550 = insertelement <4 x i32> %549, i32 %467, i64 3, !dbg !75
  %551 = bitcast <4 x i32> %550 to <4 x float>, !dbg !75
  %552 = fcmp olt <4 x float> %546, %551, !dbg !116
  %553 = fcmp uno <4 x float> %551, zeroinitializer, !dbg !118
  %554 = or <4 x i1> %553, %552, !dbg !119
  %.v64 = select <4 x i1> %554, <4 x i32> %550, <4 x i32> %.v63, !dbg !120
  %555 = bitcast <4 x i32> %.v64 to <4 x float>, !dbg !120
  %556 = insertelement <4 x i32> poison, i32 %495, i64 0, !dbg !80
  %557 = insertelement <4 x i32> %556, i32 %486, i64 1, !dbg !80
  %558 = insertelement <4 x i32> %557, i32 %477, i64 2, !dbg !80
  %559 = insertelement <4 x i32> %558, i32 %468, i64 3, !dbg !80
  %560 = bitcast <4 x i32> %559 to <4 x float>, !dbg !80
  %561 = fcmp olt <4 x float> %555, %560, !dbg !121
  %562 = fcmp uno <4 x float> %560, zeroinitializer, !dbg !123
  %563 = or <4 x i1> %562, %561, !dbg !124
  %.v65 = select <4 x i1> %563, <4 x i32> %559, <4 x i32> %.v64, !dbg !125
  %564 = bitcast <4 x i32> %.v65 to <4 x float>, !dbg !125
  %565 = insertelement <4 x i32> poison, i32 %496, i64 0, !dbg !84
  %566 = insertelement <4 x i32> %565, i32 %487, i64 1, !dbg !84
  %567 = insertelement <4 x i32> %566, i32 %478, i64 2, !dbg !84
  %568 = insertelement <4 x i32> %567, i32 %469, i64 3, !dbg !84
  %569 = bitcast <4 x i32> %568 to <4 x float>, !dbg !84
  %570 = fcmp olt <4 x float> %564, %569, !dbg !126
  %571 = zext <4 x i1> %507 to <4 x i8>, !dbg !128
  %572 = select <4 x i1> %521, <4 x i8> splat (i8 2), <4 x i8> %571, !dbg !129
  %573 = select <4 x i1> %525, <4 x i8> splat (i8 3), <4 x i8> %572, !dbg !130
  %574 = select <4 x i1> %534, <4 x i8> splat (i8 4), <4 x i8> %573, !dbg !131
  %575 = select <4 x i1> %543, <4 x i8> splat (i8 5), <4 x i8> %574, !dbg !132
  %576 = select <4 x i1> %552, <4 x i8> splat (i8 6), <4 x i8> %575, !dbg !133
  %577 = select <4 x i1> %561, <4 x i8> splat (i8 7), <4 x i8> %576, !dbg !134
  %578 = select <4 x i1> %570, <4 x i8> splat (i8 8), <4 x i8> %577, !dbg !135
  %579 = bitcast i32 %351 to float, !dbg !136
  %580 = fcmp uno float %579, 0.000000e+00, !dbg !136
  %581 = extractelement <4 x i1> %452, i64 3, !dbg !137
  %582 = or i1 %580, %581, !dbg !137
  %583 = extractelement <4 x float> %446, i64 3, !dbg !138
  %584 = select i1 %582, float %579, float %583, !dbg !138
  %585 = bitcast i32 %360 to float, !dbg !136
  %586 = fcmp uno float %585, 0.000000e+00, !dbg !136
  %587 = extractelement <4 x i1> %452, i64 2, !dbg !137
  %588 = or i1 %586, %587, !dbg !137
  %589 = extractelement <4 x float> %446, i64 2, !dbg !138
  %590 = select i1 %588, float %585, float %589, !dbg !138
  %591 = bitcast i32 %369 to float, !dbg !136
  %592 = fcmp uno float %591, 0.000000e+00, !dbg !136
  %593 = extractelement <4 x i1> %452, i64 1, !dbg !137
  %594 = or i1 %592, %593, !dbg !137
  %595 = extractelement <4 x float> %446, i64 1, !dbg !138
  %596 = select i1 %594, float %591, float %595, !dbg !138
  %597 = bitcast i32 %378 to float, !dbg !136
  %598 = fcmp uno float %597, 0.000000e+00, !dbg !136
  %599 = extractelement <4 x i1> %452, i64 0, !dbg !137
  %600 = or i1 %598, %599, !dbg !137
  %601 = extractelement <4 x float> %446, i64 0, !dbg !138
  %602 = select i1 %600, float %597, float %601, !dbg !138
  %603 = bitcast i32 %469 to float, !dbg !136
  %604 = fcmp uno float %603, 0.000000e+00, !dbg !136
  %605 = extractelement <4 x i1> %570, i64 3, !dbg !137
  %606 = or i1 %604, %605, !dbg !137
  %607 = extractelement <4 x float> %564, i64 3, !dbg !138
  %608 = select i1 %606, float %603, float %607, !dbg !138
  %609 = bitcast i32 %478 to float, !dbg !136
  %610 = fcmp uno float %609, 0.000000e+00, !dbg !136
  %611 = extractelement <4 x i1> %570, i64 2, !dbg !137
  %612 = or i1 %610, %611, !dbg !137
  %613 = extractelement <4 x float> %564, i64 2, !dbg !138
  %614 = select i1 %612, float %609, float %613, !dbg !138
  %615 = bitcast i32 %487 to float, !dbg !136
  %616 = fcmp uno float %615, 0.000000e+00, !dbg !136
  %617 = extractelement <4 x i1> %570, i64 1, !dbg !137
  %618 = or i1 %616, %617, !dbg !137
  %619 = extractelement <4 x float> %564, i64 1, !dbg !138
  %620 = select i1 %618, float %615, float %619, !dbg !138
  %621 = bitcast i32 %496 to float, !dbg !136
  %622 = fcmp uno float %621, 0.000000e+00, !dbg !136
  %623 = extractelement <4 x i1> %570, i64 0, !dbg !137
  %624 = or i1 %622, %623, !dbg !137
  %625 = extractelement <4 x float> %564, i64 0, !dbg !138
  %626 = select i1 %624, float %621, float %625, !dbg !138
  %627 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !33
  %628 = bitcast i32 %627 to float, !dbg !33
  %629 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !33
  %630 = bitcast i32 %629 to float, !dbg !33
  %631 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !33
  %632 = bitcast i32 %631 to float, !dbg !33
  %633 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !33
  %634 = bitcast i32 %633 to float, !dbg !33
  %635 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !33
  %636 = bitcast i32 %635 to float, !dbg !33
  %637 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !33
  %638 = bitcast i32 %637 to float, !dbg !33
  %639 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !33
  %640 = bitcast i32 %639 to float, !dbg !33
  %641 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !33
  %642 = bitcast i32 %641 to float, !dbg !33
  %643 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !31
  %644 = bitcast i32 %643 to float, !dbg !31
  %645 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !31
  %646 = bitcast i32 %645 to float, !dbg !31
  %647 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !31
  %648 = bitcast i32 %647 to float, !dbg !31
  %649 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !31
  %650 = bitcast i32 %649 to float, !dbg !31
  %651 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !31
  %652 = bitcast i32 %651 to float, !dbg !31
  %653 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !31
  %654 = bitcast i32 %653 to float, !dbg !31
  %655 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !31
  %656 = bitcast i32 %655 to float, !dbg !31
  %657 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !31
  %658 = bitcast i32 %657 to float, !dbg !31
  %659 = shl i32 %14, 2, !dbg !12
  %660 = and i32 %659, 28, !dbg !12
  %661 = or disjoint i32 %19, %660, !dbg !17
  %662 = lshr i32 %14, 3, !dbg !12
  %663 = and i32 %662, 15, !dbg !12
  %664 = or disjoint i32 %663, 16, !dbg !12
  %665 = or disjoint i32 %13, %664, !dbg !13
  %666 = mul i32 %665, 728, !dbg !20
  %667 = add i32 %661, %666, !dbg !21
  %668 = sext i32 %667 to i64, !dbg !22
  %669 = getelementptr float, ptr addrspace(1) %0, i64 %668, !dbg !22
  %670 = or disjoint i32 %13, %663, !dbg !13
  %671 = mul i32 %670, 728, !dbg !20
  %672 = add i32 %661, %671, !dbg !21
  %673 = sext i32 %672 to i64, !dbg !22
  %674 = getelementptr float, ptr addrspace(1) %0, i64 %673, !dbg !22
  %675 = or disjoint i32 %13, %660, !dbg !13
  %.frozen = freeze i32 %675, !dbg !139
  %676 = sdiv i32 %.frozen, 256, !dbg !139
  %677 = mul i32 %676, 256, !dbg !140
  %.decomposed = sub i32 %.frozen, %677, !dbg !140
  %678 = or disjoint i32 %19, %664, !dbg !17
  %679 = icmp slt i32 %678, 728, !dbg !18
  %680 = or disjoint i32 %19, %663, !dbg !17
  %681 = icmp slt i32 %680, 728, !dbg !18
  %682 = icmp slt i32 %661, 728, !dbg !18
  %683 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !141
  %684 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !141
  %685 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #4, !dbg !141
  %686 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #4, !dbg !141
  %687 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !141
  %688 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #4, !dbg !141
  %689 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #4, !dbg !141
  %690 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i50) #4, !dbg !141
  %691 = fmul float %342, %683, !dbg !142
  %692 = fmul float %334, %684, !dbg !142
  %693 = fmul float %326, %685, !dbg !142
  %694 = fmul float %318, %686, !dbg !142
  %695 = fmul float %310, %687, !dbg !142
  %696 = fmul float %302, %688, !dbg !142
  %697 = fmul float %294, %689, !dbg !142
  %698 = fmul float %286, %690, !dbg !142
  %699 = fmul float %691, %658, !dbg !143
  %700 = fmul float %692, %656, !dbg !143
  %701 = fmul float %693, %654, !dbg !143
  %702 = fmul float %694, %652, !dbg !143
  %703 = fmul float %695, %650, !dbg !143
  %704 = fmul float %696, %648, !dbg !143
  %705 = fmul float %697, %646, !dbg !143
  %706 = fmul float %698, %644, !dbg !143
  %707 = fadd float %699, %642, !dbg !144
  %708 = fadd float %700, %640, !dbg !144
  %709 = fadd float %701, %638, !dbg !144
  %710 = fadd float %702, %636, !dbg !144
  %711 = fadd float %703, %634, !dbg !144
  %712 = fadd float %704, %632, !dbg !144
  %713 = fadd float %705, %630, !dbg !144
  %714 = fadd float %706, %628, !dbg !144
  %715 = fadd float %626, %707, !dbg !145
  %716 = fadd float %620, %708, !dbg !145
  %717 = fadd float %614, %709, !dbg !145
  %718 = fadd float %608, %710, !dbg !145
  %719 = fadd float %602, %711, !dbg !145
  %720 = fadd float %596, %712, !dbg !145
  %721 = fadd float %590, %713, !dbg !145
  %722 = fadd float %584, %714, !dbg !145
  %723 = getelementptr i8, ptr addrspace(1) %7, i64 %29, !dbg !146
  %724 = bitcast <4 x i8> %578 to i32, !dbg !147
  %725 = bitcast <4 x i8> %460 to i32, !dbg !147
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %724, i32 %725, ptr addrspace(1) %723, i1 %24) #4, !dbg !147
  tail call void @llvm.nvvm.barrier0(), !dbg !148
  %726 = and i32 %20, 1016, !dbg !149
  %727 = and i32 %659, 508, !dbg !149
  %728 = lshr i32 %726, 5, !dbg !149
  %729 = add nuw nsw i32 %728, %726, !dbg !149
  %730 = zext nneg i32 %729 to i64, !dbg !149
  %731 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %730, !dbg !149
  %732 = bitcast float %339 to <1 x i32>, !dbg !149
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %731, <1 x i32> %732, i1 true) #4, !dbg !149
  %733 = or disjoint i32 %726, 1, !dbg !149
  %734 = add nuw nsw i32 %733, %728, !dbg !149
  %735 = zext nneg i32 %734 to i64, !dbg !149
  %736 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %735, !dbg !149
  %737 = bitcast float %331 to <1 x i32>, !dbg !149
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %736, <1 x i32> %737, i1 true) #4, !dbg !149
  %738 = or disjoint i32 %726, 2, !dbg !149
  %739 = add nuw nsw i32 %738, %728, !dbg !149
  %740 = zext nneg i32 %739 to i64, !dbg !149
  %741 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %740, !dbg !149
  %742 = bitcast float %323 to <1 x i32>, !dbg !149
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %741, <1 x i32> %742, i1 true) #4, !dbg !149
  %743 = or disjoint i32 %726, 3, !dbg !149
  %744 = add nuw nsw i32 %743, %728, !dbg !149
  %745 = zext nneg i32 %744 to i64, !dbg !149
  %746 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %745, !dbg !149
  %747 = bitcast float %315 to <1 x i32>, !dbg !149
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %746, <1 x i32> %747, i1 true) #4, !dbg !149
  %748 = or disjoint i32 %726, 4, !dbg !149
  %749 = add nuw nsw i32 %748, %728, !dbg !149
  %750 = zext nneg i32 %749 to i64, !dbg !149
  %751 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %750, !dbg !149
  %752 = bitcast float %307 to <1 x i32>, !dbg !149
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %751, <1 x i32> %752, i1 true) #4, !dbg !149
  %753 = or disjoint i32 %726, 5, !dbg !149
  %754 = add nuw nsw i32 %753, %728, !dbg !149
  %755 = zext nneg i32 %754 to i64, !dbg !149
  %756 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %755, !dbg !149
  %757 = bitcast float %299 to <1 x i32>, !dbg !149
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %756, <1 x i32> %757, i1 true) #4, !dbg !149
  %758 = or disjoint i32 %726, 6, !dbg !149
  %759 = add nuw nsw i32 %758, %728, !dbg !149
  %760 = zext nneg i32 %759 to i64, !dbg !149
  %761 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %760, !dbg !149
  %762 = bitcast float %291 to <1 x i32>, !dbg !149
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %761, <1 x i32> %762, i1 true) #4, !dbg !149
  %763 = or disjoint i32 %726, 7, !dbg !149
  %764 = add nuw nsw i32 %763, %728, !dbg !149
  %765 = zext nneg i32 %764 to i64, !dbg !149
  %766 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %765, !dbg !149
  %767 = bitcast float %283 to <1 x i32>, !dbg !149
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %766, <1 x i32> %767, i1 true) #4, !dbg !149
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %768 = lshr i32 %727, 5, !dbg !149
  %769 = add nuw nsw i32 %768, %727, !dbg !149
  %770 = zext nneg i32 %769 to i64, !dbg !149
  %771 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %770, !dbg !149
  %772 = load i32, ptr addrspace(3) %771, align 4, !dbg !149
  %773 = or disjoint i32 %727, 1, !dbg !149
  %774 = add nuw nsw i32 %773, %768, !dbg !149
  %775 = zext nneg i32 %774 to i64, !dbg !149
  %776 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %775, !dbg !149
  %777 = load i32, ptr addrspace(3) %776, align 4, !dbg !149
  %778 = or disjoint i32 %727, 2, !dbg !149
  %779 = add nuw nsw i32 %778, %768, !dbg !149
  %780 = zext nneg i32 %779 to i64, !dbg !149
  %781 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %780, !dbg !149
  %782 = load i32, ptr addrspace(3) %781, align 4, !dbg !149
  %783 = or disjoint i32 %727, 3, !dbg !149
  %784 = add nuw nsw i32 %783, %768, !dbg !149
  %785 = zext nneg i32 %784 to i64, !dbg !149
  %786 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %785, !dbg !149
  %787 = load i32, ptr addrspace(3) %786, align 4, !dbg !149
  %788 = or disjoint i32 %727, 512, !dbg !149
  %789 = lshr i32 %788, 5, !dbg !149
  %790 = add nuw nsw i32 %789, %788, !dbg !149
  %791 = zext nneg i32 %790 to i64, !dbg !149
  %792 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %791, !dbg !149
  %793 = load i32, ptr addrspace(3) %792, align 4, !dbg !149
  %794 = or disjoint i32 %727, 513, !dbg !149
  %795 = lshr i32 %794, 5, !dbg !149
  %796 = add nuw nsw i32 %795, %794, !dbg !149
  %797 = zext nneg i32 %796 to i64, !dbg !149
  %798 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %797, !dbg !149
  %799 = load i32, ptr addrspace(3) %798, align 4, !dbg !149
  %800 = or disjoint i32 %727, 514, !dbg !149
  %801 = lshr i32 %800, 5, !dbg !149
  %802 = add nuw nsw i32 %801, %800, !dbg !149
  %803 = zext nneg i32 %802 to i64, !dbg !149
  %804 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %803, !dbg !149
  %805 = load i32, ptr addrspace(3) %804, align 4, !dbg !149
  %806 = or disjoint i32 %727, 515, !dbg !149
  %807 = lshr i32 %806, 5, !dbg !149
  %808 = add nuw nsw i32 %807, %806, !dbg !149
  %809 = zext nneg i32 %808 to i64, !dbg !149
  %810 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %809, !dbg !149
  %811 = load i32, ptr addrspace(3) %810, align 4, !dbg !149
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %772, i32 %777, i32 %782, i32 %787, ptr addrspace(1) %674, i1 %682) #4, !dbg !149
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %793, i32 %799, i32 %805, i32 %811, ptr addrspace(1) %669, i1 %682) #4, !dbg !149
  %812 = shl i32 %680, 8, !dbg !150
  %813 = shl i32 %678, 8, !dbg !150
  %814 = mul i32 %676, 186368, !dbg !151
  %815 = add i32 %814, %.decomposed, !dbg !152
  %816 = add i32 %815, %812, !dbg !153
  %817 = add i32 %815, %813, !dbg !153
  %818 = sext i32 %816 to i64, !dbg !154
  %819 = getelementptr float, ptr addrspace(1) %8, i64 %818, !dbg !154
  %820 = sext i32 %817 to i64, !dbg !154
  %821 = getelementptr float, ptr addrspace(1) %8, i64 %820, !dbg !154
  tail call void @llvm.nvvm.barrier0(), !dbg !155
  %822 = shl i32 %14, 8, !dbg !155
  %823 = and i32 %822, 768, !dbg !155
  %824 = or disjoint i32 %823, %16, !dbg !155
  %825 = lshr exact i32 %823, 3, !dbg !155
  %826 = or disjoint i32 %825, %824, !dbg !155
  %827 = zext nneg i32 %826 to i64, !dbg !155
  %828 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %827, !dbg !155
  %829 = bitcast float %715 to <1 x i32>, !dbg !155
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %828, <1 x i32> %829, i1 true) #4, !dbg !155
  %830 = or disjoint i32 %824, 32, !dbg !155
  %831 = lshr i32 %830, 3, !dbg !155
  %832 = and i32 %831, 100, !dbg !155
  %833 = add nuw nsw i32 %832, %830, !dbg !155
  %834 = zext nneg i32 %833 to i64, !dbg !155
  %835 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %834, !dbg !155
  %836 = bitcast float %716 to <1 x i32>, !dbg !155
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %835, <1 x i32> %836, i1 true) #4, !dbg !155
  %837 = or disjoint i32 %824, 64, !dbg !155
  %838 = lshr i32 %837, 3, !dbg !155
  %839 = and i32 %838, 104, !dbg !155
  %840 = add nuw nsw i32 %839, %837, !dbg !155
  %841 = zext nneg i32 %840 to i64, !dbg !155
  %842 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %841, !dbg !155
  %843 = bitcast float %717 to <1 x i32>, !dbg !155
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %842, <1 x i32> %843, i1 true) #4, !dbg !155
  %844 = or disjoint i32 %824, 96, !dbg !155
  %845 = lshr i32 %844, 3, !dbg !155
  %846 = and i32 %845, 108, !dbg !155
  %847 = add nuw nsw i32 %846, %844, !dbg !155
  %848 = zext nneg i32 %847 to i64, !dbg !155
  %849 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %848, !dbg !155
  %850 = bitcast float %718 to <1 x i32>, !dbg !155
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %849, <1 x i32> %850, i1 true) #4, !dbg !155
  %851 = or disjoint i32 %824, 128, !dbg !155
  %852 = lshr i32 %851, 3, !dbg !155
  %853 = and i32 %852, 112, !dbg !155
  %854 = add nuw nsw i32 %853, %851, !dbg !155
  %855 = zext nneg i32 %854 to i64, !dbg !155
  %856 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %855, !dbg !155
  %857 = bitcast float %719 to <1 x i32>, !dbg !155
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %856, <1 x i32> %857, i1 true) #4, !dbg !155
  %858 = or disjoint i32 %824, 160, !dbg !155
  %859 = lshr i32 %858, 3, !dbg !155
  %860 = and i32 %859, 116, !dbg !155
  %861 = add nuw nsw i32 %860, %858, !dbg !155
  %862 = zext nneg i32 %861 to i64, !dbg !155
  %863 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %862, !dbg !155
  %864 = bitcast float %720 to <1 x i32>, !dbg !155
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %863, <1 x i32> %864, i1 true) #4, !dbg !155
  %865 = or disjoint i32 %824, 192, !dbg !155
  %866 = lshr i32 %865, 3, !dbg !155
  %867 = and i32 %866, 120, !dbg !155
  %868 = add nuw nsw i32 %867, %865, !dbg !155
  %869 = zext nneg i32 %868 to i64, !dbg !155
  %870 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %869, !dbg !155
  %871 = bitcast float %721 to <1 x i32>, !dbg !155
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %870, <1 x i32> %871, i1 true) #4, !dbg !155
  %872 = or disjoint i32 %824, 224, !dbg !155
  %873 = lshr i32 %872, 3, !dbg !155
  %874 = and i32 %873, 124, !dbg !155
  %875 = add nuw nsw i32 %874, %872, !dbg !155
  %876 = zext nneg i32 %875 to i64, !dbg !155
  %877 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %876, !dbg !155
  %878 = bitcast float %722 to <1 x i32>, !dbg !155
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %877, <1 x i32> %878, i1 true) #4, !dbg !155
  tail call void @llvm.nvvm.barrier0(), !dbg !155
  %879 = and i32 %14, 127, !dbg !155
  %880 = add nuw nsw i32 %768, %879, !dbg !155
  %881 = shl nuw nsw i32 %880, 2, !dbg !155
  %882 = zext nneg i32 %881 to i64, !dbg !155
  %883 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %882, !dbg !155
  %884 = shl nuw nsw i32 %789, 2, !dbg !155
  %885 = add nuw nsw i32 %884, %788, !dbg !155
  %886 = zext nneg i32 %885 to i64, !dbg !155
  %887 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %886, !dbg !155
  %888 = load <4 x i32>, ptr addrspace(3) %887, align 16, !dbg !155
  %.extract = load i32, ptr addrspace(3) %883, align 16, !dbg !155
  %889 = getelementptr inbounds i8, ptr addrspace(3) %883, i64 4, !dbg !155
  %.extract11 = load i32, ptr addrspace(3) %889, align 4, !dbg !155
  %890 = getelementptr inbounds i8, ptr addrspace(3) %883, i64 8, !dbg !155
  %.extract12 = load i32, ptr addrspace(3) %890, align 8, !dbg !155
  %891 = getelementptr inbounds i8, ptr addrspace(3) %883, i64 12, !dbg !155
  %.extract13 = load i32, ptr addrspace(3) %891, align 4, !dbg !155
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %819, i1 %681) #4, !dbg !155
  %.extract14 = extractelement <4 x i32> %888, i64 0, !dbg !155
  %.extract15 = extractelement <4 x i32> %888, i64 1, !dbg !155
  %.extract16 = extractelement <4 x i32> %888, i64 2, !dbg !155
  %.extract17 = extractelement <4 x i32> %888, i64 3, !dbg !155
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %821, i1 %679) #4, !dbg !155
  ret void, !dbg !156
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2ktk7o3iszzameqeugdr3imivwcvh4sg3ao45lshs54pswdywpt.py", directory: "inductor_cache/2k")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 21, scope: !7)
!20 = !DILocation(line: 34, column: 44, scope: !7)
!21 = !DILocation(line: 34, column: 40, scope: !7)
!22 = !DILocation(line: 34, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 49, scope: !7)
!24 = !DILocation(line: 35, column: 31, scope: !7)
!25 = !DILocation(line: 35, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 36, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 31, scope: !7)
!33 = !DILocation(line: 39, column: 36, scope: !7)
!34 = !DILocation(line: 51, column: 47, scope: !7)
!35 = !DILocation(line: 51, column: 31, scope: !7)
!36 = !DILocation(line: 57, column: 47, scope: !7)
!37 = !DILocation(line: 57, column: 31, scope: !7)
!38 = !DILocation(line: 64, column: 47, scope: !7)
!39 = !DILocation(line: 64, column: 31, scope: !7)
!40 = !DILocation(line: 71, column: 45, scope: !7)
!41 = !DILocation(line: 71, column: 31, scope: !7)
!42 = !DILocation(line: 74, column: 31, scope: !7)
!43 = !DILocation(line: 77, column: 42, scope: !7)
!44 = !DILocation(line: 77, column: 31, scope: !7)
!45 = !DILocation(line: 28, column: 27, scope: !7)
!46 = !DILocation(line: 73, column: 20, scope: !7)
!47 = !DILocation(line: 42, column: 19, scope: !7)
!48 = !DILocation(line: 47, column: 19, scope: !7)
!49 = !DILocation(line: 50, column: 19, scope: !7)
!50 = !DILocation(line: 51, column: 64, scope: !7)
!51 = !DILocation(line: 51, column: 56, scope: !7)
!52 = !DILocation(line: 53, column: 21, scope: !7)
!53 = !DILocation(line: 56, column: 19, scope: !7)
!54 = !DILocation(line: 57, column: 64, scope: !7)
!55 = !DILocation(line: 57, column: 56, scope: !7)
!56 = !DILocation(line: 82, column: 20, scope: !7)
!57 = !DILocation(line: 89, column: 20, scope: !7)
!58 = !DILocation(line: 62, column: 20, scope: !7)
!59 = !DILocation(line: 63, column: 19, scope: !7)
!60 = !DILocation(line: 64, column: 64, scope: !7)
!61 = !DILocation(line: 64, column: 56, scope: !7)
!62 = !DILocation(line: 67, column: 21, scope: !7)
!63 = !DILocation(line: 70, column: 20, scope: !7)
!64 = !DILocation(line: 71, column: 62, scope: !7)
!65 = !DILocation(line: 71, column: 54, scope: !7)
!66 = !DILocation(line: 74, column: 53, scope: !7)
!67 = !DILocation(line: 74, column: 45, scope: !7)
!68 = !DILocation(line: 76, column: 20, scope: !7)
!69 = !DILocation(line: 77, column: 59, scope: !7)
!70 = !DILocation(line: 77, column: 51, scope: !7)
!71 = !DILocation(line: 83, column: 20, scope: !7)
!72 = !DILocation(line: 84, column: 44, scope: !7)
!73 = !DILocation(line: 84, column: 31, scope: !7)
!74 = !DILocation(line: 84, column: 61, scope: !7)
!75 = !DILocation(line: 84, column: 53, scope: !7)
!76 = !DILocation(line: 86, column: 20, scope: !7)
!77 = !DILocation(line: 87, column: 44, scope: !7)
!78 = !DILocation(line: 87, column: 31, scope: !7)
!79 = !DILocation(line: 87, column: 61, scope: !7)
!80 = !DILocation(line: 87, column: 53, scope: !7)
!81 = !DILocation(line: 90, column: 44, scope: !7)
!82 = !DILocation(line: 90, column: 31, scope: !7)
!83 = !DILocation(line: 90, column: 61, scope: !7)
!84 = !DILocation(line: 90, column: 53, scope: !7)
!85 = !DILocation(line: 120, column: 20, scope: !7)
!86 = !DILocation(line: 121, column: 27, scope: !7)
!87 = !DILocation(line: 117, column: 20, scope: !7)
!88 = !DILocation(line: 118, column: 20, scope: !7)
!89 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !92)
!90 = distinct !DILexicalBlockFile(scope: !7, file: !91, discriminator: 0)
!91 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!92 = !DILocation(line: 58, column: 42, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !97)
!97 = !DILocation(line: 65, column: 42, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !102)
!102 = !DILocation(line: 72, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !107)
!107 = !DILocation(line: 75, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !107)
!111 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !112)
!112 = !DILocation(line: 78, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !112)
!114 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !112)
!115 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !112)
!116 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !117)
!117 = !DILocation(line: 85, column: 42, scope: !7)
!118 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !117)
!119 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !117)
!120 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !117)
!121 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !122)
!122 = !DILocation(line: 88, column: 42, scope: !7)
!123 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !122)
!124 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !122)
!125 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !122)
!126 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !127)
!127 = !DILocation(line: 91, column: 42, scope: !7)
!128 = !DILocation(line: 95, column: 35, scope: !7)
!129 = !DILocation(line: 98, column: 35, scope: !7)
!130 = !DILocation(line: 101, column: 35, scope: !7)
!131 = !DILocation(line: 104, column: 35, scope: !7)
!132 = !DILocation(line: 107, column: 35, scope: !7)
!133 = !DILocation(line: 110, column: 35, scope: !7)
!134 = !DILocation(line: 113, column: 35, scope: !7)
!135 = !DILocation(line: 116, column: 35, scope: !7)
!136 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !127)
!137 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !127)
!138 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !127)
!139 = !DILocation(line: 32, column: 19, scope: !7)
!140 = !DILocation(line: 33, column: 19, scope: !7)
!141 = !DILocation(line: 123, column: 20, scope: !7)
!142 = !DILocation(line: 126, column: 20, scope: !7)
!143 = !DILocation(line: 127, column: 20, scope: !7)
!144 = !DILocation(line: 128, column: 20, scope: !7)
!145 = !DILocation(line: 129, column: 20, scope: !7)
!146 = !DILocation(line: 130, column: 25, scope: !7)
!147 = !DILocation(line: 130, column: 46, scope: !7)
!148 = !DILocation(line: 131, column: 4, scope: !7)
!149 = !DILocation(line: 132, column: 49, scope: !7)
!150 = !DILocation(line: 133, column: 34, scope: !7)
!151 = !DILocation(line: 133, column: 46, scope: !7)
!152 = !DILocation(line: 133, column: 30, scope: !7)
!153 = !DILocation(line: 133, column: 39, scope: !7)
!154 = !DILocation(line: 133, column: 25, scope: !7)
!155 = !DILocation(line: 133, column: 58, scope: !7)
!156 = !DILocation(line: 133, column: 4, scope: !7)
