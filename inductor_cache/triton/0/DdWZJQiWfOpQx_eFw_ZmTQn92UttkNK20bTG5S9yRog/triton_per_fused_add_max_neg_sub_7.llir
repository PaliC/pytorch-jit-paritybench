; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_max_neg_sub_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = and i32 %8, 31, !dbg !11
  %10 = lshr i32 %8, 5, !dbg !11
  %11 = shl i32 %8, 2, !dbg !11
  %12 = and i32 %11, 1020, !dbg !11
  %13 = sext i32 %7 to i64, !dbg !12
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !12
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #3, !dbg !13
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #3, !dbg !13
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #3, !dbg !13
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #3, !dbg !13
  %19 = bitcast i32 %18 to float, !dbg !13
  %20 = shl i32 %7, 10, !dbg !14
  %21 = or disjoint i32 %20, %12, !dbg !15
  %22 = sext i32 %21 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %29 = bitcast i32 %27 to float, !dbg !17
  %30 = bitcast i32 %28 to float, !dbg !17
  %31 = zext nneg i32 %12 to i64, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !18
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !19
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !19
  %38 = bitcast i32 %36 to float, !dbg !19
  %39 = bitcast i32 %37 to float, !dbg !19
  %40 = fsub float %19, %29, !dbg !20
  %41 = fsub float %19, %30, !dbg !20
  %42 = fadd float %40, %38, !dbg !21
  %43 = fadd float %41, %39, !dbg !21
  %44 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !17
  %45 = insertelement <2 x i32> %44, i32 %26, i64 1, !dbg !17
  %46 = bitcast <2 x i32> %45 to <2 x float>, !dbg !17
  %47 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !19
  %48 = insertelement <2 x i32> %47, i32 %35, i64 1, !dbg !19
  %49 = bitcast <2 x i32> %48 to <2 x float>, !dbg !19
  %50 = insertelement <2 x float> poison, float %19, i64 0, !dbg !20
  %51 = shufflevector <2 x float> %50, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !20
  %52 = fsub <2 x float> %51, %46, !dbg !20
  %53 = fadd <2 x float> %52, %49, !dbg !21
  %54 = fsub <2 x float> zeroinitializer, %53, !dbg !22
  %55 = fsub float 0.000000e+00, %42, !dbg !22
  %56 = fsub float 0.000000e+00, %43, !dbg !22
  %57 = extractelement <2 x float> %54, i64 0, !dbg !23
  %58 = extractelement <2 x float> %54, i64 1, !dbg !23
  %59 = fcmp ogt float %57, %58, !dbg !28
  %60 = fcmp oeq float %57, %58, !dbg !29
  %61 = fcmp uno float %57, 0.000000e+00, !dbg !30
  %62 = fcmp uno float %58, 0.000000e+00, !dbg !31
  %63 = xor i1 %62, true, !dbg !32
  %64 = and i1 %61, %63, !dbg !33
  %65 = or i1 %59, %64, !dbg !34
  %66 = and i1 %61, %62, !dbg !35
  %67 = or i1 %60, %66, !dbg !36
  %68 = or i1 %65, %67, !dbg !37
  %69 = select i1 %68, float %57, float %58, !dbg !23
  %not. = xor i1 %68, true, !dbg !38
  %70 = zext i1 %not. to i32, !dbg !38
  %71 = fcmp ogt float %69, %55, !dbg !28
  %72 = fcmp oeq float %69, %55, !dbg !29
  %73 = fcmp uno float %69, 0.000000e+00, !dbg !30
  %74 = fcmp uno float %55, 0.000000e+00, !dbg !31
  %75 = xor i1 %74, true, !dbg !32
  %76 = and i1 %73, %75, !dbg !33
  %77 = or i1 %71, %76, !dbg !34
  %78 = and i1 %74, %73, !dbg !35
  %79 = or i1 %72, %78, !dbg !36
  %80 = or i1 %77, %79, !dbg !37
  %81 = select i1 %80, float %69, float %55, !dbg !23
  %.v = select i1 %80, i32 %70, i32 2, !dbg !38
  %82 = fcmp ogt float %81, %56, !dbg !28
  %83 = fcmp oeq float %81, %56, !dbg !29
  %84 = fcmp uno float %81, 0.000000e+00, !dbg !30
  %85 = fcmp uno float %56, 0.000000e+00, !dbg !31
  %86 = xor i1 %85, true, !dbg !32
  %87 = and i1 %84, %86, !dbg !33
  %88 = or i1 %82, %87, !dbg !34
  %89 = and i1 %85, %84, !dbg !35
  %90 = or i1 %83, %89, !dbg !36
  %91 = or i1 %88, %90, !dbg !37
  %92 = select i1 %91, float %81, float %56, !dbg !23
  %.v1 = select i1 %91, i32 %.v, i32 3, !dbg !38
  %93 = or disjoint i32 %.v1, %12, !dbg !38
  %94 = bitcast float %92 to i32, !dbg !39
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 16, i32 31), !dbg !39
  %96 = bitcast i32 %95 to float, !dbg !39
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 16, i32 31), !dbg !39
  %98 = fcmp ogt float %92, %96, !dbg !28
  %99 = fcmp oeq float %92, %96, !dbg !29
  %100 = fcmp uno float %92, 0.000000e+00, !dbg !30
  %101 = fcmp uno float %96, 0.000000e+00, !dbg !31
  %102 = xor i1 %101, true, !dbg !32
  %103 = and i1 %100, %102, !dbg !33
  %104 = or i1 %98, %103, !dbg !34
  %105 = and i1 %101, %100, !dbg !35
  %106 = or i1 %99, %105, !dbg !36
  %107 = icmp slt i32 %93, %97, !dbg !40
  %108 = and i1 %107, %106, !dbg !41
  %109 = or i1 %104, %108, !dbg !37
  %110 = select i1 %109, float %92, float %96, !dbg !23
  %111 = select i1 %109, i32 %93, i32 %97, !dbg !38
  %112 = bitcast float %110 to i32, !dbg !39
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 8, i32 31), !dbg !39
  %114 = bitcast i32 %113 to float, !dbg !39
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 8, i32 31), !dbg !39
  %116 = fcmp ogt float %110, %114, !dbg !28
  %117 = fcmp oeq float %110, %114, !dbg !29
  %118 = fcmp uno float %110, 0.000000e+00, !dbg !30
  %119 = fcmp uno float %114, 0.000000e+00, !dbg !31
  %120 = xor i1 %119, true, !dbg !32
  %121 = and i1 %118, %120, !dbg !33
  %122 = or i1 %116, %121, !dbg !34
  %123 = and i1 %119, %118, !dbg !35
  %124 = or i1 %117, %123, !dbg !36
  %125 = icmp slt i32 %111, %115, !dbg !40
  %126 = and i1 %125, %124, !dbg !41
  %127 = or i1 %122, %126, !dbg !37
  %128 = select i1 %127, float %110, float %114, !dbg !23
  %129 = select i1 %127, i32 %111, i32 %115, !dbg !38
  %130 = bitcast float %128 to i32, !dbg !39
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 4, i32 31), !dbg !39
  %132 = bitcast i32 %131 to float, !dbg !39
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 4, i32 31), !dbg !39
  %134 = fcmp ogt float %128, %132, !dbg !28
  %135 = fcmp oeq float %128, %132, !dbg !29
  %136 = fcmp uno float %128, 0.000000e+00, !dbg !30
  %137 = fcmp uno float %132, 0.000000e+00, !dbg !31
  %138 = xor i1 %137, true, !dbg !32
  %139 = and i1 %136, %138, !dbg !33
  %140 = or i1 %134, %139, !dbg !34
  %141 = and i1 %137, %136, !dbg !35
  %142 = or i1 %135, %141, !dbg !36
  %143 = icmp slt i32 %129, %133, !dbg !40
  %144 = and i1 %143, %142, !dbg !41
  %145 = or i1 %140, %144, !dbg !37
  %146 = select i1 %145, float %128, float %132, !dbg !23
  %147 = select i1 %145, i32 %129, i32 %133, !dbg !38
  %148 = bitcast float %146 to i32, !dbg !39
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 2, i32 31), !dbg !39
  %150 = bitcast i32 %149 to float, !dbg !39
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 2, i32 31), !dbg !39
  %152 = fcmp ogt float %146, %150, !dbg !28
  %153 = fcmp oeq float %146, %150, !dbg !29
  %154 = fcmp uno float %146, 0.000000e+00, !dbg !30
  %155 = fcmp uno float %150, 0.000000e+00, !dbg !31
  %156 = xor i1 %155, true, !dbg !32
  %157 = and i1 %154, %156, !dbg !33
  %158 = or i1 %152, %157, !dbg !34
  %159 = and i1 %155, %154, !dbg !35
  %160 = or i1 %153, %159, !dbg !36
  %161 = icmp slt i32 %147, %151, !dbg !40
  %162 = and i1 %161, %160, !dbg !41
  %163 = or i1 %158, %162, !dbg !37
  %164 = select i1 %163, float %146, float %150, !dbg !23
  %165 = select i1 %163, i32 %147, i32 %151, !dbg !38
  %166 = bitcast float %164 to i32, !dbg !39
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 1, i32 31), !dbg !39
  %168 = bitcast i32 %167 to float, !dbg !39
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 1, i32 31), !dbg !39
  %170 = fcmp ogt float %164, %168, !dbg !28
  %171 = fcmp oeq float %164, %168, !dbg !29
  %172 = fcmp uno float %164, 0.000000e+00, !dbg !30
  %173 = fcmp uno float %168, 0.000000e+00, !dbg !31
  %174 = xor i1 %173, true, !dbg !32
  %175 = and i1 %172, %174, !dbg !33
  %176 = or i1 %170, %175, !dbg !34
  %177 = and i1 %173, %172, !dbg !35
  %178 = or i1 %171, %177, !dbg !36
  %179 = icmp slt i32 %165, %169, !dbg !40
  %180 = and i1 %179, %178, !dbg !41
  %181 = or i1 %176, %180, !dbg !37
  %182 = select i1 %181, i32 %165, i32 %169, !dbg !38
  %183 = icmp eq i32 %9, 0, !dbg !39
  %184 = and i32 %10, 7, !dbg !39
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %184, !dbg !39
  %186 = select i1 %181, i32 %166, i32 %167, !dbg !23
  %187 = insertelement <1 x i32> poison, i32 %186, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %187, i1 %183) #3, !dbg !39
  %188 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %184, !dbg !39
  %189 = insertelement <1 x i32> poison, i32 %182, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %189, i1 %183) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %190 = icmp slt i32 %8, 8, !dbg !39
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !39
  %192 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %191, i1 %190) #3, !dbg !39
  %193 = bitcast i32 %192 to float, !dbg !39
  %194 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %8, !dbg !39
  %195 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %194, i1 %190) #3, !dbg !39
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 4, i32 31), !dbg !39
  %197 = bitcast i32 %196 to float, !dbg !39
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 4, i32 31), !dbg !39
  %199 = fcmp ogt float %193, %197, !dbg !28
  %200 = fcmp oeq float %193, %197, !dbg !29
  %201 = fcmp uno float %193, 0.000000e+00, !dbg !30
  %202 = fcmp uno float %197, 0.000000e+00, !dbg !31
  %203 = xor i1 %202, true, !dbg !32
  %204 = and i1 %201, %203, !dbg !33
  %205 = or i1 %199, %204, !dbg !34
  %206 = and i1 %201, %202, !dbg !35
  %207 = or i1 %200, %206, !dbg !36
  %208 = icmp slt i32 %195, %198, !dbg !40
  %209 = and i1 %208, %207, !dbg !41
  %210 = or i1 %205, %209, !dbg !37
  %211 = select i1 %210, float %193, float %197, !dbg !23
  %212 = select i1 %210, i32 %195, i32 %198, !dbg !38
  %213 = bitcast float %211 to i32, !dbg !39
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 2, i32 31), !dbg !39
  %215 = bitcast i32 %214 to float, !dbg !39
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 2, i32 31), !dbg !39
  %217 = fcmp ogt float %211, %215, !dbg !28
  %218 = fcmp oeq float %211, %215, !dbg !29
  %219 = fcmp uno float %211, 0.000000e+00, !dbg !30
  %220 = fcmp uno float %215, 0.000000e+00, !dbg !31
  %221 = xor i1 %220, true, !dbg !32
  %222 = and i1 %219, %221, !dbg !33
  %223 = or i1 %217, %222, !dbg !34
  %224 = and i1 %220, %219, !dbg !35
  %225 = or i1 %218, %224, !dbg !36
  %226 = icmp slt i32 %212, %216, !dbg !40
  %227 = and i1 %226, %225, !dbg !41
  %228 = or i1 %223, %227, !dbg !37
  %229 = select i1 %228, float %211, float %215, !dbg !23
  %230 = select i1 %228, i32 %212, i32 %216, !dbg !38
  %231 = bitcast float %229 to i32, !dbg !39
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 1, i32 31), !dbg !39
  %233 = bitcast i32 %232 to float, !dbg !39
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 1, i32 31), !dbg !39
  %235 = fcmp ogt float %229, %233, !dbg !28
  %236 = fcmp oeq float %229, %233, !dbg !29
  %237 = fcmp uno float %229, 0.000000e+00, !dbg !30
  %238 = fcmp uno float %233, 0.000000e+00, !dbg !31
  %239 = xor i1 %238, true, !dbg !32
  %240 = and i1 %237, %239, !dbg !33
  %241 = or i1 %235, %240, !dbg !34
  %242 = and i1 %238, %237, !dbg !35
  %243 = or i1 %236, %242, !dbg !36
  %244 = icmp slt i32 %230, %234, !dbg !40
  %245 = and i1 %244, %243, !dbg !41
  %246 = or i1 %241, %245, !dbg !37
  %247 = select i1 %246, i32 %230, i32 %234, !dbg !38
  %248 = and i32 %8, 7, !dbg !39
  %249 = icmp eq i32 %248, 0, !dbg !39
  %250 = and i1 %190, %249, !dbg !39
  %251 = select i1 %246, i32 %231, i32 %232, !dbg !23
  %252 = insertelement <1 x i32> poison, i32 %251, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %252, i1 %250) #3, !dbg !39
  %253 = insertelement <1 x i32> poison, i32 %247, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %253, i1 %250) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %254 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !39
  %255 = getelementptr i64, ptr addrspace(1) %3, i64 %13, !dbg !42
  %256 = sext i32 %254 to i64, !dbg !43
  %urem = and i32 %8, 255, !dbg !43
  %257 = icmp eq i32 %urem, 0, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %256, ptr addrspace(1) %255, i1 %257) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csqsocghae66rej7x4rmykdmcqxoxznzebjlpczyns4z6r7a6cll.py", directory: "inductor_cache/sq")
!4 = !{ptr @triton_per_fused_add_max_neg_sub_7, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_max_neg_sub_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_max_neg_sub_7", linkageName: "triton_per_fused_add_max_neg_sub_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 30, scope: !7)
!13 = !DILocation(line: 32, column: 35, scope: !7)
!14 = !DILocation(line: 33, column: 40, scope: !7)
!15 = !DILocation(line: 33, column: 35, scope: !7)
!16 = !DILocation(line: 33, column: 30, scope: !7)
!17 = !DILocation(line: 33, column: 45, scope: !7)
!18 = !DILocation(line: 34, column: 30, scope: !7)
!19 = !DILocation(line: 34, column: 35, scope: !7)
!20 = !DILocation(line: 35, column: 18, scope: !7)
!21 = !DILocation(line: 36, column: 18, scope: !7)
!22 = !DILocation(line: 37, column: 12, scope: !7)
!23 = !DILocation(line: 163, column: 35, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 40, column: 67, scope: !7)
!28 = !DILocation(line: 152, column: 21, scope: !24, inlinedAt: !27)
!29 = !DILocation(line: 153, column: 23, scope: !24, inlinedAt: !27)
!30 = !DILocation(line: 155, column: 29, scope: !24, inlinedAt: !27)
!31 = !DILocation(line: 156, column: 29, scope: !24, inlinedAt: !27)
!32 = !DILocation(line: 157, column: 32, scope: !24, inlinedAt: !27)
!33 = !DILocation(line: 157, column: 28, scope: !24, inlinedAt: !27)
!34 = !DILocation(line: 157, column: 16, scope: !24, inlinedAt: !27)
!35 = !DILocation(line: 159, column: 29, scope: !24, inlinedAt: !27)
!36 = !DILocation(line: 159, column: 17, scope: !24, inlinedAt: !27)
!37 = !DILocation(line: 162, column: 12, scope: !24, inlinedAt: !27)
!38 = !DILocation(line: 163, column: 69, scope: !24, inlinedAt: !27)
!39 = !DILocation(line: 173, column: 42, scope: !26, inlinedAt: !27)
!40 = !DILocation(line: 162, column: 31, scope: !24, inlinedAt: !27)
!41 = !DILocation(line: 162, column: 21, scope: !24, inlinedAt: !27)
!42 = !DILocation(line: 42, column: 25, scope: !7)
!43 = !DILocation(line: 42, column: 36, scope: !7)
!44 = !DILocation(line: 42, column: 4, scope: !7)
