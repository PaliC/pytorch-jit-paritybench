; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_adaptive_max_pool2d_add_mean_mul_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = icmp slt i32 %5, 16, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 15, !dbg !12
  %9 = shl i32 %5, 4, !dbg !13
  %10 = or disjoint i32 %9, %8, !dbg !14
  %11 = sext i32 %10 to i64, !dbg !15
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !15
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %12, i1 %6, i32 0, i1 %6) #3, !dbg !16
  %14 = bitcast i32 %13 to float, !dbg !16
  %15 = sext i32 %9 to i64, !dbg !17
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !17
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %6) #3, !dbg !18
  %18 = bitcast i32 %17 to float, !dbg !18
  %19 = or disjoint i32 %9, 1, !dbg !19
  %20 = sext i32 %19 to i64, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !20
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %6) #3, !dbg !21
  %23 = bitcast i32 %22 to float, !dbg !21
  %24 = or disjoint i32 %9, 2, !dbg !22
  %25 = sext i32 %24 to i64, !dbg !23
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !23
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %6) #3, !dbg !24
  %28 = bitcast i32 %27 to float, !dbg !24
  %29 = or disjoint i32 %9, 3, !dbg !25
  %30 = sext i32 %29 to i64, !dbg !26
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !26
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %6) #3, !dbg !27
  %33 = bitcast i32 %32 to float, !dbg !27
  %34 = or disjoint i32 %9, 4, !dbg !28
  %35 = sext i32 %34 to i64, !dbg !29
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !29
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %6) #3, !dbg !30
  %38 = bitcast i32 %37 to float, !dbg !30
  %39 = or disjoint i32 %9, 5, !dbg !31
  %40 = sext i32 %39 to i64, !dbg !32
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !32
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %6) #3, !dbg !33
  %43 = bitcast i32 %42 to float, !dbg !33
  %44 = or disjoint i32 %9, 6, !dbg !34
  %45 = sext i32 %44 to i64, !dbg !35
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !35
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %6) #3, !dbg !36
  %48 = bitcast i32 %47 to float, !dbg !36
  %49 = or disjoint i32 %9, 7, !dbg !37
  %50 = sext i32 %49 to i64, !dbg !38
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !38
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %6) #3, !dbg !39
  %53 = bitcast i32 %52 to float, !dbg !39
  %54 = or disjoint i32 %9, 8, !dbg !40
  %55 = sext i32 %54 to i64, !dbg !41
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !41
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %6) #3, !dbg !42
  %58 = bitcast i32 %57 to float, !dbg !42
  %59 = or disjoint i32 %9, 9, !dbg !43
  %60 = sext i32 %59 to i64, !dbg !44
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !44
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %6) #3, !dbg !45
  %63 = bitcast i32 %62 to float, !dbg !45
  %64 = or disjoint i32 %9, 10, !dbg !46
  %65 = sext i32 %64 to i64, !dbg !47
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !47
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %6) #3, !dbg !48
  %68 = bitcast i32 %67 to float, !dbg !48
  %69 = or disjoint i32 %9, 11, !dbg !49
  %70 = sext i32 %69 to i64, !dbg !50
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !50
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %6) #3, !dbg !51
  %73 = bitcast i32 %72 to float, !dbg !51
  %74 = or disjoint i32 %9, 12, !dbg !52
  %75 = sext i32 %74 to i64, !dbg !53
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !53
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %6) #3, !dbg !54
  %78 = bitcast i32 %77 to float, !dbg !54
  %79 = or disjoint i32 %9, 13, !dbg !55
  %80 = sext i32 %79 to i64, !dbg !56
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !56
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %6) #3, !dbg !57
  %83 = bitcast i32 %82 to float, !dbg !57
  %84 = or disjoint i32 %9, 14, !dbg !58
  %85 = sext i32 %84 to i64, !dbg !59
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !59
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %6) #3, !dbg !60
  %88 = bitcast i32 %87 to float, !dbg !60
  %89 = or disjoint i32 %9, 15, !dbg !61
  %90 = sext i32 %89 to i64, !dbg !62
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !62
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %6) #3, !dbg !63
  %93 = bitcast i32 %92 to float, !dbg !63
  %94 = select i1 %6, float %14, float 0.000000e+00, !dbg !64
  %95 = bitcast float %94 to i32, !dbg !65
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 8, i32 31), !dbg !65
  %97 = bitcast i32 %96 to float, !dbg !65
  %98 = fadd float %94, %97, !dbg !69
  %99 = bitcast float %98 to i32, !dbg !65
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 4, i32 31), !dbg !65
  %101 = bitcast i32 %100 to float, !dbg !65
  %102 = fadd float %98, %101, !dbg !69
  %103 = bitcast float %102 to i32, !dbg !65
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 2, i32 31), !dbg !65
  %105 = bitcast i32 %104 to float, !dbg !65
  %106 = fadd float %102, %105, !dbg !69
  %107 = bitcast float %106 to i32, !dbg !65
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 1, i32 31), !dbg !65
  %109 = bitcast i32 %108 to float, !dbg !65
  %110 = fadd float %106, %109, !dbg !69
  %111 = fcmp ogt float %23, %18, !dbg !71
  %112 = fcmp uno float %23, 0.000000e+00, !dbg !75
  %113 = or i1 %111, %112, !dbg !76
  %114 = select i1 %113, float %23, float %18, !dbg !77
  %115 = fcmp olt float %114, %28, !dbg !78
  %116 = fcmp uno float %28, 0.000000e+00, !dbg !80
  %117 = or i1 %116, %115, !dbg !81
  %118 = select i1 %117, float %28, float %114, !dbg !82
  %119 = fcmp olt float %118, %33, !dbg !83
  %120 = fcmp uno float %33, 0.000000e+00, !dbg !85
  %121 = or i1 %120, %119, !dbg !86
  %122 = select i1 %121, float %33, float %118, !dbg !87
  %123 = fcmp olt float %122, %38, !dbg !88
  %124 = fcmp uno float %38, 0.000000e+00, !dbg !90
  %125 = or i1 %124, %123, !dbg !91
  %126 = select i1 %125, float %38, float %122, !dbg !92
  %127 = fcmp olt float %126, %43, !dbg !93
  %128 = fcmp uno float %43, 0.000000e+00, !dbg !95
  %129 = or i1 %128, %127, !dbg !96
  %130 = select i1 %129, float %43, float %126, !dbg !97
  %131 = fcmp olt float %130, %48, !dbg !98
  %132 = fcmp uno float %48, 0.000000e+00, !dbg !100
  %133 = or i1 %132, %131, !dbg !101
  %134 = select i1 %133, float %48, float %130, !dbg !102
  %135 = fcmp olt float %134, %53, !dbg !103
  %136 = fcmp uno float %53, 0.000000e+00, !dbg !105
  %137 = or i1 %136, %135, !dbg !106
  %138 = select i1 %137, float %53, float %134, !dbg !107
  %139 = fcmp olt float %138, %58, !dbg !108
  %140 = fcmp uno float %58, 0.000000e+00, !dbg !110
  %141 = or i1 %140, %139, !dbg !111
  %142 = select i1 %141, float %58, float %138, !dbg !112
  %143 = fcmp olt float %142, %63, !dbg !113
  %144 = fcmp uno float %63, 0.000000e+00, !dbg !115
  %145 = or i1 %144, %143, !dbg !116
  %146 = select i1 %145, float %63, float %142, !dbg !117
  %147 = fcmp olt float %146, %68, !dbg !118
  %148 = fcmp uno float %68, 0.000000e+00, !dbg !120
  %149 = or i1 %148, %147, !dbg !121
  %150 = select i1 %149, float %68, float %146, !dbg !122
  %151 = fcmp olt float %150, %73, !dbg !123
  %152 = fcmp uno float %73, 0.000000e+00, !dbg !125
  %153 = or i1 %152, %151, !dbg !126
  %154 = select i1 %153, float %73, float %150, !dbg !127
  %155 = fcmp olt float %154, %78, !dbg !128
  %156 = fcmp uno float %78, 0.000000e+00, !dbg !130
  %157 = or i1 %156, %155, !dbg !131
  %158 = select i1 %157, float %78, float %154, !dbg !132
  %159 = fcmp olt float %158, %83, !dbg !133
  %160 = fcmp uno float %83, 0.000000e+00, !dbg !135
  %161 = or i1 %160, %159, !dbg !136
  %162 = select i1 %161, float %83, float %158, !dbg !137
  %163 = fcmp olt float %162, %88, !dbg !138
  %164 = fcmp uno float %88, 0.000000e+00, !dbg !140
  %165 = or i1 %164, %163, !dbg !141
  %166 = select i1 %165, float %88, float %162, !dbg !142
  %167 = fcmp olt float %166, %93, !dbg !143
  %168 = fcmp uno float %93, 0.000000e+00, !dbg !145
  %169 = or i1 %168, %167, !dbg !146
  %170 = select i1 %169, float %93, float %166, !dbg !147
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float 1.600000e+01) #3, !dbg !148
  %172 = fadd float %171, %170, !dbg !149
  %173 = fmul float %172, 5.000000e-01, !dbg !150
  tail call void @llvm.nvvm.barrier0(), !dbg !151
  %174 = sext i32 %5 to i64, !dbg !152
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !152
  %176 = and i32 %7, 63, !dbg !153
  %177 = icmp eq i32 %176, 0, !dbg !153
  %178 = bitcast float %173 to i32, !dbg !153
  %179 = and i1 %177, %6, !dbg !153
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %178, ptr addrspace(1) %175, i1 %179) #3, !dbg !153
  ret void, !dbg !154
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3h33f77k3uep5o7ohpdciyv46aeurhbkjthstcafh4bdzksnkx2.py", directory: "inductor_cache/3h")
!4 = !{ptr @triton_per_fused_adaptive_max_pool2d_add_mean_mul_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_adaptive_max_pool2d_add_mean_mul_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_adaptive_max_pool2d_add_mean_mul_0", linkageName: "triton_per_fused_adaptive_max_pool2d_add_mean_mul_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 32, column: 30, scope: !7)
!18 = !DILocation(line: 32, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 42, scope: !7)
!22 = !DILocation(line: 34, column: 34, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 42, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 43, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 43, scope: !7)
!31 = !DILocation(line: 37, column: 35, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 43, scope: !7)
!34 = !DILocation(line: 38, column: 35, scope: !7)
!35 = !DILocation(line: 38, column: 31, scope: !7)
!36 = !DILocation(line: 38, column: 43, scope: !7)
!37 = !DILocation(line: 39, column: 35, scope: !7)
!38 = !DILocation(line: 39, column: 31, scope: !7)
!39 = !DILocation(line: 39, column: 43, scope: !7)
!40 = !DILocation(line: 40, column: 35, scope: !7)
!41 = !DILocation(line: 40, column: 31, scope: !7)
!42 = !DILocation(line: 40, column: 43, scope: !7)
!43 = !DILocation(line: 41, column: 35, scope: !7)
!44 = !DILocation(line: 41, column: 31, scope: !7)
!45 = !DILocation(line: 41, column: 43, scope: !7)
!46 = !DILocation(line: 42, column: 36, scope: !7)
!47 = !DILocation(line: 42, column: 31, scope: !7)
!48 = !DILocation(line: 42, column: 44, scope: !7)
!49 = !DILocation(line: 43, column: 36, scope: !7)
!50 = !DILocation(line: 43, column: 31, scope: !7)
!51 = !DILocation(line: 43, column: 44, scope: !7)
!52 = !DILocation(line: 44, column: 36, scope: !7)
!53 = !DILocation(line: 44, column: 31, scope: !7)
!54 = !DILocation(line: 44, column: 44, scope: !7)
!55 = !DILocation(line: 45, column: 36, scope: !7)
!56 = !DILocation(line: 45, column: 31, scope: !7)
!57 = !DILocation(line: 45, column: 44, scope: !7)
!58 = !DILocation(line: 46, column: 36, scope: !7)
!59 = !DILocation(line: 46, column: 31, scope: !7)
!60 = !DILocation(line: 46, column: 44, scope: !7)
!61 = !DILocation(line: 47, column: 36, scope: !7)
!62 = !DILocation(line: 47, column: 31, scope: !7)
!63 = !DILocation(line: 47, column: 44, scope: !7)
!64 = !DILocation(line: 49, column: 33, scope: !7)
!65 = !DILocation(line: 267, column: 36, scope: !66, inlinedAt: !68)
!66 = distinct !DILexicalBlockFile(scope: !7, file: !67, discriminator: 0)
!67 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!68 = !DILocation(line: 50, column: 24, scope: !7)
!69 = !DILocation(line: 256, column: 15, scope: !70, inlinedAt: !68)
!70 = distinct !DILexicalBlockFile(scope: !66, file: !67, discriminator: 0)
!71 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !74)
!72 = distinct !DILexicalBlockFile(scope: !7, file: !73, discriminator: 0)
!73 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!74 = !DILocation(line: 51, column: 40, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !74)
!78 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !79)
!79 = !DILocation(line: 52, column: 40, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !79)
!83 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !84)
!84 = !DILocation(line: 53, column: 42, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !84)
!88 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !89)
!89 = !DILocation(line: 54, column: 42, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !94)
!94 = !DILocation(line: 55, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !99)
!99 = !DILocation(line: 56, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !99)
!102 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !99)
!103 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !104)
!104 = !DILocation(line: 57, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !104)
!107 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !104)
!108 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !109)
!109 = !DILocation(line: 58, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !109)
!111 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !109)
!112 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !109)
!113 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !114)
!114 = !DILocation(line: 59, column: 42, scope: !7)
!115 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !114)
!116 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !114)
!117 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !114)
!118 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !119)
!119 = !DILocation(line: 60, column: 42, scope: !7)
!120 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !119)
!121 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !119)
!122 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !119)
!123 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !124)
!124 = !DILocation(line: 61, column: 42, scope: !7)
!125 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !124)
!126 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !124)
!127 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !124)
!128 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !129)
!129 = !DILocation(line: 62, column: 42, scope: !7)
!130 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !129)
!131 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !129)
!132 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !129)
!133 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !134)
!134 = !DILocation(line: 63, column: 42, scope: !7)
!135 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !134)
!136 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !134)
!137 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !134)
!138 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !139)
!139 = !DILocation(line: 64, column: 42, scope: !7)
!140 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !139)
!141 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !139)
!142 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !139)
!143 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !144)
!144 = !DILocation(line: 65, column: 42, scope: !7)
!145 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !144)
!146 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !144)
!147 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !144)
!148 = !DILocation(line: 67, column: 19, scope: !7)
!149 = !DILocation(line: 68, column: 20, scope: !7)
!150 = !DILocation(line: 70, column: 20, scope: !7)
!151 = !DILocation(line: 71, column: 4, scope: !7)
!152 = !DILocation(line: 72, column: 28, scope: !7)
!153 = !DILocation(line: 72, column: 40, scope: !7)
!154 = !DILocation(line: 72, column: 4, scope: !7)
