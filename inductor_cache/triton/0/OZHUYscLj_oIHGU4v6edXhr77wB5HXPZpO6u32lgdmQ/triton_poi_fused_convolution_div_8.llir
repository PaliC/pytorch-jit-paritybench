; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_div_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 252, !dbg !12
  %12 = lshr i32 %9, 4, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = or disjoint i32 %15, 16, !dbg !13
  %17 = or disjoint i32 %15, 32, !dbg !13
  %18 = or disjoint i32 %15, 48, !dbg !13
  %19 = or disjoint i32 %15, 64, !dbg !13
  %20 = or disjoint i32 %15, 80, !dbg !13
  %21 = or disjoint i32 %15, 96, !dbg !13
  %22 = or disjoint i32 %15, 112, !dbg !13
  %23 = or disjoint i32 %15, 128, !dbg !13
  %24 = or disjoint i32 %15, 144, !dbg !13
  %25 = or disjoint i32 %15, 160, !dbg !13
  %26 = or disjoint i32 %15, 176, !dbg !13
  %27 = or disjoint i32 %15, 192, !dbg !13
  %28 = or disjoint i32 %15, 208, !dbg !13
  %29 = or disjoint i32 %15, 224, !dbg !13
  %30 = or disjoint i32 %15, 240, !dbg !13
  %31 = icmp slt i32 %14, 256, !dbg !14
  %32 = icmp slt i32 %15, 256, !dbg !14
  %33 = icmp slt i32 %16, 256, !dbg !14
  %34 = icmp slt i32 %17, 256, !dbg !14
  %35 = icmp slt i32 %18, 256, !dbg !14
  %36 = icmp slt i32 %19, 256, !dbg !14
  %37 = icmp slt i32 %20, 256, !dbg !14
  %38 = icmp slt i32 %21, 256, !dbg !14
  %39 = icmp slt i32 %22, 256, !dbg !14
  %40 = icmp slt i32 %23, 256, !dbg !14
  %41 = icmp slt i32 %24, 256, !dbg !14
  %42 = icmp slt i32 %25, 256, !dbg !14
  %43 = icmp slt i32 %26, 256, !dbg !14
  %44 = icmp slt i32 %27, 256, !dbg !14
  %45 = icmp slt i32 %28, 256, !dbg !14
  %46 = icmp slt i32 %29, 256, !dbg !14
  %47 = icmp slt i32 %30, 256, !dbg !14
  %48 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %49 = shl i32 %48, 4, !dbg !16
  %50 = lshr i32 %9, 6, !dbg !17
  %51 = and i32 %50, 3, !dbg !17
  %52 = and i32 %9, 15, !dbg !17
  %53 = or disjoint i32 %49, %51, !dbg !18
  %54 = or disjoint i32 %53, 4, !dbg !18
  %55 = or disjoint i32 %53, 8, !dbg !18
  %56 = or disjoint i32 %53, 12, !dbg !18
  %57 = or disjoint i32 %49, %52, !dbg !18
  %58 = icmp slt i32 %53, 49, !dbg !19
  %59 = icmp slt i32 %54, 49, !dbg !19
  %60 = icmp slt i32 %55, 49, !dbg !19
  %61 = icmp slt i32 %56, 49, !dbg !19
  %62 = icmp slt i32 %57, 49, !dbg !19
  %63 = ashr exact i32 %14, 2, !dbg !20
  %64 = shl i32 %53, 2, !dbg !21
  %65 = shl i32 %54, 2, !dbg !21
  %66 = shl i32 %55, 2, !dbg !21
  %67 = shl i32 %56, 2, !dbg !21
  %68 = mul i32 %63, 196, !dbg !22
  %69 = add i32 %64, %68, !dbg !23
  %70 = add i32 %68, %65, !dbg !23
  %71 = add i32 %68, %66, !dbg !23
  %72 = add i32 %68, %67, !dbg !23
  %73 = sext i32 %69 to i64, !dbg !24
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !24
  %75 = sext i32 %70 to i64, !dbg !24
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !24
  %77 = sext i32 %71 to i64, !dbg !24
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !24
  %79 = sext i32 %72 to i64, !dbg !24
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !24
  %81 = and i1 %31, %58, !dbg !25
  %82 = and i1 %59, %31, !dbg !25
  %83 = and i1 %60, %31, !dbg !25
  %84 = and i1 %61, %31, !dbg !25
  %85 = and i1 %32, %62, !dbg !25
  %86 = and i1 %33, %62, !dbg !25
  %87 = and i1 %34, %62, !dbg !25
  %88 = and i1 %35, %62, !dbg !25
  %89 = and i1 %36, %62, !dbg !25
  %90 = and i1 %37, %62, !dbg !25
  %91 = and i1 %38, %62, !dbg !25
  %92 = and i1 %39, %62, !dbg !25
  %93 = and i1 %40, %62, !dbg !25
  %94 = and i1 %41, %62, !dbg !25
  %95 = and i1 %42, %62, !dbg !25
  %96 = and i1 %43, %62, !dbg !25
  %97 = and i1 %44, %62, !dbg !25
  %98 = and i1 %45, %62, !dbg !25
  %99 = and i1 %46, %62, !dbg !25
  %100 = and i1 %47, %62, !dbg !25
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %81) #2, !dbg !26
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !26
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !26
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !26
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !26
  %106 = bitcast i32 %102 to float, !dbg !26
  %107 = bitcast i32 %103 to float, !dbg !26
  %108 = bitcast i32 %104 to float, !dbg !26
  %109 = bitcast i32 %105 to float, !dbg !26
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %82) #2, !dbg !26
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !26
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !26
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !26
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !26
  %115 = bitcast i32 %111 to float, !dbg !26
  %116 = bitcast i32 %112 to float, !dbg !26
  %117 = bitcast i32 %113 to float, !dbg !26
  %118 = bitcast i32 %114 to float, !dbg !26
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 %83) #2, !dbg !26
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !26
  %121 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !26
  %122 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !26
  %123 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !26
  %124 = bitcast i32 %120 to float, !dbg !26
  %125 = bitcast i32 %121 to float, !dbg !26
  %126 = bitcast i32 %122 to float, !dbg !26
  %127 = bitcast i32 %123 to float, !dbg !26
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 %84) #2, !dbg !26
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !26
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !26
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !26
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !26
  %133 = bitcast i32 %129 to float, !dbg !26
  %134 = bitcast i32 %130 to float, !dbg !26
  %135 = bitcast i32 %131 to float, !dbg !26
  %136 = bitcast i32 %132 to float, !dbg !26
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #2, !dbg !27
  %138 = bitcast i32 %137 to float, !dbg !27
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %138) #2, !dbg !28
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %138) #2, !dbg !28
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float %138) #2, !dbg !28
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %138) #2, !dbg !28
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float %138) #2, !dbg !28
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %138) #2, !dbg !28
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %138) #2, !dbg !28
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %138) #2, !dbg !28
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float %138) #2, !dbg !28
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %138) #2, !dbg !28
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float %138) #2, !dbg !28
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float %138) #2, !dbg !28
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float %138) #2, !dbg !28
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float %138) #2, !dbg !28
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %138) #2, !dbg !28
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float %138) #2, !dbg !28
  %155 = mul i32 %15, 49, !dbg !29
  %156 = mul i32 %16, 49, !dbg !29
  %157 = mul i32 %17, 49, !dbg !29
  %158 = mul i32 %18, 49, !dbg !29
  %159 = mul i32 %19, 49, !dbg !29
  %160 = mul i32 %20, 49, !dbg !29
  %161 = mul i32 %21, 49, !dbg !29
  %162 = mul i32 %22, 49, !dbg !29
  %163 = mul i32 %23, 49, !dbg !29
  %164 = mul i32 %24, 49, !dbg !29
  %165 = mul i32 %25, 49, !dbg !29
  %166 = mul i32 %26, 49, !dbg !29
  %167 = mul i32 %27, 49, !dbg !29
  %168 = mul i32 %28, 49, !dbg !29
  %169 = mul i32 %29, 49, !dbg !29
  %170 = mul i32 %30, 49, !dbg !29
  %171 = add i32 %57, %155, !dbg !30
  %172 = add i32 %57, %156, !dbg !30
  %173 = add i32 %57, %157, !dbg !30
  %174 = add i32 %57, %158, !dbg !30
  %175 = add i32 %57, %159, !dbg !30
  %176 = add i32 %57, %160, !dbg !30
  %177 = add i32 %57, %161, !dbg !30
  %178 = add i32 %57, %162, !dbg !30
  %179 = add i32 %57, %163, !dbg !30
  %180 = add i32 %57, %164, !dbg !30
  %181 = add i32 %57, %165, !dbg !30
  %182 = add i32 %57, %166, !dbg !30
  %183 = add i32 %57, %167, !dbg !30
  %184 = add i32 %57, %168, !dbg !30
  %185 = add i32 %57, %169, !dbg !30
  %186 = add i32 %57, %170, !dbg !30
  %187 = sext i32 %171 to i64, !dbg !31
  %188 = getelementptr float, ptr addrspace(1) %2, i64 %187, !dbg !31
  %189 = sext i32 %172 to i64, !dbg !31
  %190 = getelementptr float, ptr addrspace(1) %2, i64 %189, !dbg !31
  %191 = sext i32 %173 to i64, !dbg !31
  %192 = getelementptr float, ptr addrspace(1) %2, i64 %191, !dbg !31
  %193 = sext i32 %174 to i64, !dbg !31
  %194 = getelementptr float, ptr addrspace(1) %2, i64 %193, !dbg !31
  %195 = sext i32 %175 to i64, !dbg !31
  %196 = getelementptr float, ptr addrspace(1) %2, i64 %195, !dbg !31
  %197 = sext i32 %176 to i64, !dbg !31
  %198 = getelementptr float, ptr addrspace(1) %2, i64 %197, !dbg !31
  %199 = sext i32 %177 to i64, !dbg !31
  %200 = getelementptr float, ptr addrspace(1) %2, i64 %199, !dbg !31
  %201 = sext i32 %178 to i64, !dbg !31
  %202 = getelementptr float, ptr addrspace(1) %2, i64 %201, !dbg !31
  %203 = sext i32 %179 to i64, !dbg !31
  %204 = getelementptr float, ptr addrspace(1) %2, i64 %203, !dbg !31
  %205 = sext i32 %180 to i64, !dbg !31
  %206 = getelementptr float, ptr addrspace(1) %2, i64 %205, !dbg !31
  %207 = sext i32 %181 to i64, !dbg !31
  %208 = getelementptr float, ptr addrspace(1) %2, i64 %207, !dbg !31
  %209 = sext i32 %182 to i64, !dbg !31
  %210 = getelementptr float, ptr addrspace(1) %2, i64 %209, !dbg !31
  %211 = sext i32 %183 to i64, !dbg !31
  %212 = getelementptr float, ptr addrspace(1) %2, i64 %211, !dbg !31
  %213 = sext i32 %184 to i64, !dbg !31
  %214 = getelementptr float, ptr addrspace(1) %2, i64 %213, !dbg !31
  %215 = sext i32 %185 to i64, !dbg !31
  %216 = getelementptr float, ptr addrspace(1) %2, i64 %215, !dbg !31
  %217 = sext i32 %186 to i64, !dbg !31
  %218 = getelementptr float, ptr addrspace(1) %2, i64 %217, !dbg !31
  %219 = shl i32 %9, 6, !dbg !32
  %220 = and i32 %219, 4032, !dbg !32
  %221 = or disjoint i32 %220, %51, !dbg !32
  %222 = and i32 %9, 255, !dbg !32
  %223 = lshr exact i32 %220, 2, !dbg !32
  %224 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %223, !dbg !32
  %225 = getelementptr float, ptr addrspace(3) %224, i32 %221, !dbg !32
  %226 = bitcast float %139 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 true) #2, !dbg !32
  %227 = or disjoint i32 %221, 16, !dbg !32
  %228 = lshr i32 %227, 4, !dbg !32
  %229 = getelementptr float, ptr addrspace(3) @global_smem, i32 %228, !dbg !32
  %230 = getelementptr float, ptr addrspace(3) %229, i32 %227, !dbg !32
  %231 = bitcast float %140 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #2, !dbg !32
  %232 = or disjoint i32 %221, 32, !dbg !32
  %233 = lshr i32 %232, 4, !dbg !32
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i32 %233, !dbg !32
  %235 = getelementptr float, ptr addrspace(3) %234, i32 %232, !dbg !32
  %236 = bitcast float %141 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #2, !dbg !32
  %237 = or disjoint i32 %221, 48, !dbg !32
  %238 = lshr i32 %237, 4, !dbg !32
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i32 %238, !dbg !32
  %240 = getelementptr float, ptr addrspace(3) %239, i32 %237, !dbg !32
  %241 = bitcast float %142 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #2, !dbg !32
  %242 = or disjoint i32 %221, 4, !dbg !32
  %243 = getelementptr float, ptr addrspace(3) %224, i32 %242, !dbg !32
  %244 = bitcast float %143 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 true) #2, !dbg !32
  %245 = or disjoint i32 %221, 20, !dbg !32
  %246 = lshr i32 %245, 4, !dbg !32
  %247 = getelementptr float, ptr addrspace(3) @global_smem, i32 %246, !dbg !32
  %248 = getelementptr float, ptr addrspace(3) %247, i32 %245, !dbg !32
  %249 = bitcast float %144 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 true) #2, !dbg !32
  %250 = or disjoint i32 %221, 36, !dbg !32
  %251 = lshr i32 %250, 4, !dbg !32
  %252 = getelementptr float, ptr addrspace(3) @global_smem, i32 %251, !dbg !32
  %253 = getelementptr float, ptr addrspace(3) %252, i32 %250, !dbg !32
  %254 = bitcast float %145 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 true) #2, !dbg !32
  %255 = or disjoint i32 %221, 52, !dbg !32
  %256 = lshr i32 %255, 4, !dbg !32
  %257 = getelementptr float, ptr addrspace(3) @global_smem, i32 %256, !dbg !32
  %258 = getelementptr float, ptr addrspace(3) %257, i32 %255, !dbg !32
  %259 = bitcast float %146 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #2, !dbg !32
  %260 = or disjoint i32 %221, 8, !dbg !32
  %261 = getelementptr float, ptr addrspace(3) %224, i32 %260, !dbg !32
  %262 = bitcast float %147 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #2, !dbg !32
  %263 = or disjoint i32 %221, 24, !dbg !32
  %264 = lshr i32 %263, 4, !dbg !32
  %265 = getelementptr float, ptr addrspace(3) @global_smem, i32 %264, !dbg !32
  %266 = getelementptr float, ptr addrspace(3) %265, i32 %263, !dbg !32
  %267 = bitcast float %148 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #2, !dbg !32
  %268 = or disjoint i32 %221, 40, !dbg !32
  %269 = lshr i32 %268, 4, !dbg !32
  %270 = getelementptr float, ptr addrspace(3) @global_smem, i32 %269, !dbg !32
  %271 = getelementptr float, ptr addrspace(3) %270, i32 %268, !dbg !32
  %272 = bitcast float %149 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #2, !dbg !32
  %273 = or disjoint i32 %221, 56, !dbg !32
  %274 = lshr i32 %273, 4, !dbg !32
  %275 = getelementptr float, ptr addrspace(3) @global_smem, i32 %274, !dbg !32
  %276 = getelementptr float, ptr addrspace(3) %275, i32 %273, !dbg !32
  %277 = bitcast float %150 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #2, !dbg !32
  %278 = or disjoint i32 %221, 12, !dbg !32
  %279 = getelementptr float, ptr addrspace(3) %224, i32 %278, !dbg !32
  %280 = bitcast float %151 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #2, !dbg !32
  %281 = or disjoint i32 %221, 28, !dbg !32
  %282 = lshr i32 %281, 4, !dbg !32
  %283 = getelementptr float, ptr addrspace(3) @global_smem, i32 %282, !dbg !32
  %284 = getelementptr float, ptr addrspace(3) %283, i32 %281, !dbg !32
  %285 = bitcast float %152 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 true) #2, !dbg !32
  %286 = or disjoint i32 %221, 44, !dbg !32
  %287 = lshr i32 %286, 4, !dbg !32
  %288 = getelementptr float, ptr addrspace(3) @global_smem, i32 %287, !dbg !32
  %289 = getelementptr float, ptr addrspace(3) %288, i32 %286, !dbg !32
  %290 = bitcast float %153 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %290, i1 true) #2, !dbg !32
  %291 = or disjoint i32 %221, 60, !dbg !32
  %292 = lshr i32 %291, 4, !dbg !32
  %293 = getelementptr float, ptr addrspace(3) @global_smem, i32 %292, !dbg !32
  %294 = getelementptr float, ptr addrspace(3) %293, i32 %291, !dbg !32
  %295 = bitcast float %154 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %296 = lshr i32 %222, 4, !dbg !32
  %297 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %296, !dbg !32
  %298 = getelementptr inbounds float, ptr addrspace(3) %297, i32 %222, !dbg !32
  %299 = load i32, ptr addrspace(3) %298, align 4, !dbg !32
  %300 = or disjoint i32 %222, 256, !dbg !32
  %301 = lshr i32 %300, 4, !dbg !32
  %302 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %301, !dbg !32
  %303 = getelementptr inbounds float, ptr addrspace(3) %302, i32 %300, !dbg !32
  %304 = load i32, ptr addrspace(3) %303, align 4, !dbg !32
  %305 = or disjoint i32 %222, 512, !dbg !32
  %306 = lshr i32 %305, 4, !dbg !32
  %307 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %306, !dbg !32
  %308 = getelementptr inbounds float, ptr addrspace(3) %307, i32 %305, !dbg !32
  %309 = load i32, ptr addrspace(3) %308, align 4, !dbg !32
  %310 = or disjoint i32 %222, 768, !dbg !32
  %311 = lshr i32 %310, 4, !dbg !32
  %312 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %311, !dbg !32
  %313 = getelementptr inbounds float, ptr addrspace(3) %312, i32 %310, !dbg !32
  %314 = load i32, ptr addrspace(3) %313, align 4, !dbg !32
  %315 = or disjoint i32 %222, 1024, !dbg !32
  %316 = lshr i32 %315, 4, !dbg !32
  %317 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %316, !dbg !32
  %318 = getelementptr inbounds float, ptr addrspace(3) %317, i32 %315, !dbg !32
  %319 = load i32, ptr addrspace(3) %318, align 4, !dbg !32
  %320 = or disjoint i32 %222, 1280, !dbg !32
  %321 = lshr i32 %320, 4, !dbg !32
  %322 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %321, !dbg !32
  %323 = getelementptr inbounds float, ptr addrspace(3) %322, i32 %320, !dbg !32
  %324 = load i32, ptr addrspace(3) %323, align 4, !dbg !32
  %325 = or disjoint i32 %222, 1536, !dbg !32
  %326 = lshr i32 %325, 4, !dbg !32
  %327 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %326, !dbg !32
  %328 = getelementptr inbounds float, ptr addrspace(3) %327, i32 %325, !dbg !32
  %329 = load i32, ptr addrspace(3) %328, align 4, !dbg !32
  %330 = or disjoint i32 %222, 1792, !dbg !32
  %331 = lshr i32 %330, 4, !dbg !32
  %332 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %331, !dbg !32
  %333 = getelementptr inbounds float, ptr addrspace(3) %332, i32 %330, !dbg !32
  %334 = load i32, ptr addrspace(3) %333, align 4, !dbg !32
  %335 = or disjoint i32 %222, 2048, !dbg !32
  %336 = lshr i32 %335, 4, !dbg !32
  %337 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %336, !dbg !32
  %338 = getelementptr inbounds float, ptr addrspace(3) %337, i32 %335, !dbg !32
  %339 = load i32, ptr addrspace(3) %338, align 4, !dbg !32
  %340 = or disjoint i32 %222, 2304, !dbg !32
  %341 = lshr i32 %340, 4, !dbg !32
  %342 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %341, !dbg !32
  %343 = getelementptr inbounds float, ptr addrspace(3) %342, i32 %340, !dbg !32
  %344 = load i32, ptr addrspace(3) %343, align 4, !dbg !32
  %345 = or disjoint i32 %222, 2560, !dbg !32
  %346 = lshr i32 %345, 4, !dbg !32
  %347 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %346, !dbg !32
  %348 = getelementptr inbounds float, ptr addrspace(3) %347, i32 %345, !dbg !32
  %349 = load i32, ptr addrspace(3) %348, align 4, !dbg !32
  %350 = or disjoint i32 %222, 2816, !dbg !32
  %351 = lshr i32 %350, 4, !dbg !32
  %352 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %351, !dbg !32
  %353 = getelementptr inbounds float, ptr addrspace(3) %352, i32 %350, !dbg !32
  %354 = load i32, ptr addrspace(3) %353, align 4, !dbg !32
  %355 = or disjoint i32 %222, 3072, !dbg !32
  %356 = lshr i32 %355, 4, !dbg !32
  %357 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %356, !dbg !32
  %358 = getelementptr inbounds float, ptr addrspace(3) %357, i32 %355, !dbg !32
  %359 = load i32, ptr addrspace(3) %358, align 4, !dbg !32
  %360 = or disjoint i32 %222, 3328, !dbg !32
  %361 = lshr i32 %360, 4, !dbg !32
  %362 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %361, !dbg !32
  %363 = getelementptr inbounds float, ptr addrspace(3) %362, i32 %360, !dbg !32
  %364 = load i32, ptr addrspace(3) %363, align 4, !dbg !32
  %365 = or disjoint i32 %222, 3584, !dbg !32
  %366 = lshr i32 %365, 4, !dbg !32
  %367 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %366, !dbg !32
  %368 = getelementptr inbounds float, ptr addrspace(3) %367, i32 %365, !dbg !32
  %369 = load i32, ptr addrspace(3) %368, align 4, !dbg !32
  %370 = or disjoint i32 %222, 3840, !dbg !32
  %371 = lshr i32 %370, 4, !dbg !32
  %372 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %371, !dbg !32
  %373 = getelementptr inbounds float, ptr addrspace(3) %372, i32 %370, !dbg !32
  %374 = load i32, ptr addrspace(3) %373, align 4, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %299, ptr addrspace(1) %188, i1 %85) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %304, ptr addrspace(1) %190, i1 %86) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %309, ptr addrspace(1) %192, i1 %87) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %314, ptr addrspace(1) %194, i1 %88) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %319, ptr addrspace(1) %196, i1 %89) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %324, ptr addrspace(1) %198, i1 %90) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %329, ptr addrspace(1) %200, i1 %91) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %334, ptr addrspace(1) %202, i1 %92) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %339, ptr addrspace(1) %204, i1 %93) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %344, ptr addrspace(1) %206, i1 %94) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %349, ptr addrspace(1) %208, i1 %95) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %354, ptr addrspace(1) %210, i1 %96) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %359, ptr addrspace(1) %212, i1 %97) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %364, ptr addrspace(1) %214, i1 %98) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %369, ptr addrspace(1) %216, i1 %99) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %374, ptr addrspace(1) %218, i1 %100) #2, !dbg !32
  %375 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !33
  %376 = getelementptr float, ptr addrspace(1) %3, i64 %75, !dbg !33
  %377 = getelementptr float, ptr addrspace(1) %3, i64 %77, !dbg !33
  %378 = getelementptr float, ptr addrspace(1) %3, i64 %79, !dbg !33
  %379 = bitcast float %139 to i32, !dbg !34
  %380 = bitcast float %140 to i32, !dbg !34
  %381 = bitcast float %141 to i32, !dbg !34
  %382 = bitcast float %142 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %379, i32 %380, i32 %381, i32 %382, ptr addrspace(1) %375, i1 %81) #2, !dbg !34
  %383 = bitcast float %143 to i32, !dbg !34
  %384 = bitcast float %144 to i32, !dbg !34
  %385 = bitcast float %145 to i32, !dbg !34
  %386 = bitcast float %146 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %383, i32 %384, i32 %385, i32 %386, ptr addrspace(1) %376, i1 %82) #2, !dbg !34
  %387 = bitcast float %147 to i32, !dbg !34
  %388 = bitcast float %148 to i32, !dbg !34
  %389 = bitcast float %149 to i32, !dbg !34
  %390 = bitcast float %150 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %387, i32 %388, i32 %389, i32 %390, ptr addrspace(1) %377, i1 %83) #2, !dbg !34
  %391 = bitcast float %151 to i32, !dbg !34
  %392 = bitcast float %152 to i32, !dbg !34
  %393 = bitcast float %153 to i32, !dbg !34
  %394 = bitcast float %154 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %391, i32 %392, i32 %393, i32 %394, ptr addrspace(1) %378, i1 %84) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctdhatcmfujbrfb5cp6d5wrtrho4b4mgbl32jw4la4lhgfd6q372.py", directory: "inductor_cache/td")
!4 = !{ptr @triton_poi_fused_convolution_div_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_div_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_div_8", linkageName: "triton_poi_fused_convolution_div_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 37, scope: !7)
!22 = !DILocation(line: 32, column: 46, scope: !7)
!23 = !DILocation(line: 32, column: 42, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 59, scope: !7)
!26 = !DILocation(line: 32, column: 51, scope: !7)
!27 = !DILocation(line: 33, column: 19, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 33, scope: !7)
!30 = !DILocation(line: 36, column: 30, scope: !7)
!31 = !DILocation(line: 36, column: 25, scope: !7)
!32 = !DILocation(line: 36, column: 44, scope: !7)
!33 = !DILocation(line: 37, column: 25, scope: !7)
!34 = !DILocation(line: 37, column: 52, scope: !7)
!35 = !DILocation(line: 37, column: 4, scope: !7)
