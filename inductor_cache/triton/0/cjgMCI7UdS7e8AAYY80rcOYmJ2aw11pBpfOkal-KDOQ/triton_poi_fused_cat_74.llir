; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_74(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 1, !dbg !13
  %18 = icmp slt i32 %16, 27520, !dbg !14
  %19 = srem i32 %17, 430, !dbg !15
  %20 = sdiv i32 %16, 430, !dbg !16
  %21 = sdiv i32 %16, 6880, !dbg !17
  %22 = sdiv i32 %16, 1720, !dbg !18
  %23 = srem i32 %22, 4, !dbg !19
  %24 = srem i32 %20, 4, !dbg !20
  %25 = icmp slt i32 %19, 325, !dbg !21
  %26 = mul nsw i32 %20, 325, !dbg !22
  %27 = add nsw i32 %26, %19, !dbg !23
  %28 = sext i32 %27 to i64, !dbg !24
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !24
  %30 = and i1 %25, %18, !dbg !25
  %31 = icmp sgt i32 %19, 324, !dbg !26
  %32 = add nsw i32 %19, -325, !dbg !27
  %33 = shl nsw i32 %32, 4, !dbg !28
  %34 = mul nsw i32 %21, 1696, !dbg !29
  %35 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !30
  %36 = insertelement <2 x i32> %35, i32 %16, i64 1, !dbg !30
  %37 = srem <2 x i32> %36, <i32 16, i32 430>, !dbg !30
  %38 = extractelement <2 x i32> %37, i64 1, !dbg !26
  %39 = icmp slt i32 %38, 325, !dbg !21
  %40 = add nsw i32 %26, %38, !dbg !23
  %41 = sext i32 %40 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !24
  %43 = and i1 %18, %39, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %43, i32 0, i1 %43) #1, !dbg !31
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %30, i32 0, i1 %30) #1, !dbg !31
  %46 = icmp sgt i32 %38, 324, !dbg !26
  %47 = insertelement <2 x i32> <i32 poison, i32 -325>, i32 %34, i64 0, !dbg !32
  %48 = add nsw <2 x i32> %47, %37, !dbg !32
  %49 = extractelement <2 x i32> %48, i64 1, !dbg !28
  %50 = shl nsw i32 %49, 4, !dbg !28
  %51 = extractelement <2 x i32> %48, i64 0, !dbg !33
  %52 = add nsw i32 %51, %50, !dbg !33
  %53 = add nsw i32 %51, %33, !dbg !33
  %54 = sext i32 %52 to i64, !dbg !34
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !34
  %56 = sext i32 %53 to i64, !dbg !34
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !34
  %58 = and i1 %18, %46, !dbg !35
  %59 = and i1 %31, %18, !dbg !35
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %58, i32 0, i1 %58) #1, !dbg !36
  %61 = bitcast i32 %60 to float, !dbg !36
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %59, i32 0, i1 %59) #1, !dbg !36
  %63 = bitcast i32 %62 to float, !dbg !36
  %64 = sext i32 %23 to i64, !dbg !37
  %65 = getelementptr i64, ptr addrspace(1) %2, i64 %64, !dbg !37
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %65, i1 %58, i1 %58) #1, !dbg !38
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %65, i1 %59, i1 %59) #1, !dbg !38
  %68 = lshr i64 %66, 62, !dbg !39
  %69 = and i64 %68, 2, !dbg !39
  %70 = add i64 %69, %66, !dbg !39
  %71 = lshr i64 %67, 62, !dbg !39
  %72 = and i64 %71, 2, !dbg !39
  %73 = add i64 %72, %67, !dbg !39
  %74 = sext i32 %24 to i64, !dbg !40
  %75 = getelementptr i64, ptr addrspace(1) %3, i64 %74, !dbg !40
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %75, i1 %58, i1 %58) #1, !dbg !41
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %75, i1 %59, i1 %59) #1, !dbg !41
  %78 = lshr i64 %76, 62, !dbg !42
  %79 = and i64 %78, 2, !dbg !42
  %80 = add i64 %79, %76, !dbg !42
  %81 = lshr i64 %77, 62, !dbg !42
  %82 = and i64 %81, 2, !dbg !42
  %83 = add i64 %82, %77, !dbg !42
  %84 = mul i64 %70, 210, !dbg !43
  %85 = mul i64 %73, 210, !dbg !43
  %86 = mul nsw i32 %21, 420, !dbg !44
  %87 = sext i32 %86 to i64, !dbg !45
  %88 = sext i32 %49 to i64, !dbg !46
  %89 = sext i32 %32 to i64, !dbg !46
  %.idx = mul i64 %80, 420, !dbg !47
  %90 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx, !dbg !47
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %84, !dbg !47
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %87, !dbg !47
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %88, !dbg !47
  %.idx1 = mul i64 %83, 420, !dbg !47
  %94 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx1, !dbg !47
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %85, !dbg !47
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %87, !dbg !47
  %97 = getelementptr float, ptr addrspace(1) %96, i64 %89, !dbg !47
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %58, i32 0, i1 %58) #1, !dbg !48
  %99 = bitcast i32 %98 to float, !dbg !48
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %59, i32 0, i1 %59) #1, !dbg !48
  %101 = bitcast i32 %100 to float, !dbg !48
  %102 = getelementptr i64, ptr addrspace(1) %5, i64 %74, !dbg !49
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %102, i1 %58, i1 %58) #1, !dbg !50
  %104 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %102, i1 %59, i1 %59) #1, !dbg !50
  %105 = lshr i64 %103, 62, !dbg !51
  %106 = and i64 %105, 2, !dbg !51
  %107 = add i64 %106, %103, !dbg !51
  %108 = lshr i64 %104, 62, !dbg !51
  %109 = and i64 %108, 2, !dbg !51
  %110 = add i64 %109, %104, !dbg !51
  %.idx2 = mul i64 %107, 420, !dbg !52
  %111 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx2, !dbg !52
  %112 = getelementptr float, ptr addrspace(1) %111, i64 %84, !dbg !52
  %113 = getelementptr float, ptr addrspace(1) %112, i64 %87, !dbg !52
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %88, !dbg !52
  %.idx3 = mul i64 %110, 420, !dbg !52
  %115 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx3, !dbg !52
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %85, !dbg !52
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %87, !dbg !52
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %89, !dbg !52
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %58, i32 0, i1 %58) #1, !dbg !53
  %120 = bitcast i32 %119 to float, !dbg !53
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %59, i32 0, i1 %59) #1, !dbg !53
  %122 = bitcast i32 %121 to float, !dbg !53
  %123 = fsub float %120, %99, !dbg !54
  %124 = fsub float %122, %101, !dbg !54
  %125 = getelementptr float, ptr addrspace(1) %6, i64 %74, !dbg !55
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %58, i32 0, i1 %58) #1, !dbg !56
  %127 = bitcast i32 %126 to float, !dbg !56
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %59, i32 0, i1 %59) #1, !dbg !56
  %129 = bitcast i32 %128 to float, !dbg !56
  %130 = fmul float %123, %127, !dbg !57
  %131 = fmul float %124, %129, !dbg !57
  %132 = fadd float %130, %99, !dbg !58
  %133 = fadd float %131, %101, !dbg !58
  %134 = fsub float %132, %61, !dbg !59
  %135 = fsub float %133, %63, !dbg !59
  %136 = getelementptr float, ptr addrspace(1) %7, i64 %64, !dbg !60
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %58, i32 0, i1 %58) #1, !dbg !61
  %138 = bitcast i32 %137 to float, !dbg !61
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %59, i32 0, i1 %59) #1, !dbg !61
  %140 = bitcast i32 %139 to float, !dbg !61
  %141 = fmul float %134, %138, !dbg !62
  %142 = fmul float %135, %140, !dbg !62
  %143 = fadd float %141, %61, !dbg !63
  %144 = fadd float %142, %63, !dbg !63
  %145 = sext i32 %16 to i64, !dbg !64
  %146 = getelementptr float, ptr addrspace(1) %8, i64 %145, !dbg !64
  %147 = bitcast float %143 to i32, !dbg !65
  %148 = select i1 %39, i32 %44, i32 %147, !dbg !66
  %149 = bitcast float %144 to i32, !dbg !65
  %150 = select i1 %25, i32 %45, i32 %149, !dbg !66
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %148, i32 %150, ptr addrspace(1) %146, i1 %18) #1, !dbg !65
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciiwtxkk6zfqxy2stwf47fdadkcbxcv5nmkragonmzlrghmgpqde.py", directory: "inductor_cache/ii")
!4 = !{ptr @triton_poi_fused_cat_74, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_74, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_74", linkageName: "triton_poi_fused_cat_74", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 29, scope: !7)
!20 = !DILocation(line: 29, column: 28, scope: !7)
!21 = !DILocation(line: 35, column: 18, scope: !7)
!22 = !DILocation(line: 36, column: 34, scope: !7)
!23 = !DILocation(line: 36, column: 40, scope: !7)
!24 = !DILocation(line: 36, column: 30, scope: !7)
!25 = !DILocation(line: 36, column: 53, scope: !7)
!26 = !DILocation(line: 37, column: 19, scope: !7)
!27 = !DILocation(line: 40, column: 48, scope: !7)
!28 = !DILocation(line: 40, column: 39, scope: !7)
!29 = !DILocation(line: 40, column: 59, scope: !7)
!30 = !DILocation(line: 27, column: 28, scope: !7)
!31 = !DILocation(line: 36, column: 46, scope: !7)
!32 = !DILocation(line: 40, column: 35, scope: !7)
!33 = !DILocation(line: 40, column: 54, scope: !7)
!34 = !DILocation(line: 40, column: 30, scope: !7)
!35 = !DILocation(line: 40, column: 71, scope: !7)
!36 = !DILocation(line: 40, column: 64, scope: !7)
!37 = !DILocation(line: 41, column: 31, scope: !7)
!38 = !DILocation(line: 41, column: 36, scope: !7)
!39 = !DILocation(line: 45, column: 35, scope: !7)
!40 = !DILocation(line: 46, column: 31, scope: !7)
!41 = !DILocation(line: 46, column: 36, scope: !7)
!42 = !DILocation(line: 49, column: 35, scope: !7)
!43 = !DILocation(line: 50, column: 47, scope: !7)
!44 = !DILocation(line: 50, column: 59, scope: !7)
!45 = !DILocation(line: 50, column: 55, scope: !7)
!46 = !DILocation(line: 50, column: 65, scope: !7)
!47 = !DILocation(line: 50, column: 31, scope: !7)
!48 = !DILocation(line: 50, column: 80, scope: !7)
!49 = !DILocation(line: 51, column: 31, scope: !7)
!50 = !DILocation(line: 51, column: 36, scope: !7)
!51 = !DILocation(line: 54, column: 35, scope: !7)
!52 = !DILocation(line: 55, column: 31, scope: !7)
!53 = !DILocation(line: 55, column: 80, scope: !7)
!54 = !DILocation(line: 56, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 31, scope: !7)
!56 = !DILocation(line: 57, column: 36, scope: !7)
!57 = !DILocation(line: 58, column: 20, scope: !7)
!58 = !DILocation(line: 59, column: 20, scope: !7)
!59 = !DILocation(line: 60, column: 20, scope: !7)
!60 = !DILocation(line: 61, column: 31, scope: !7)
!61 = !DILocation(line: 61, column: 36, scope: !7)
!62 = !DILocation(line: 62, column: 20, scope: !7)
!63 = !DILocation(line: 63, column: 19, scope: !7)
!64 = !DILocation(line: 67, column: 25, scope: !7)
!65 = !DILocation(line: 67, column: 37, scope: !7)
!66 = !DILocation(line: 66, column: 33, scope: !7)
!67 = !DILocation(line: 67, column: 4, scope: !7)
