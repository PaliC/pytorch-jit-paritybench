; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_layer_norm_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 6, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 62, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = icmp slt i32 %19, 64, !dbg !14
  %.frozen = freeze i32 %19, !dbg !15
  %21 = sdiv i32 %.frozen, 4, !dbg !15
  %22 = mul i32 %21, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %22, !dbg !16
  %23 = sext i32 %19 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !17
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %20) #3, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !19
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %20) #3, !dbg !20
  %28 = sext i32 %21 to i64, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %20) #3, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %20) #3, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %20) #3, !dbg !24
  %34 = bitcast i32 %33 to float, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %20) #3, !dbg !24
  %36 = bitcast i32 %35 to float, !dbg !24
  %37 = sext i32 %.decomposed to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !25
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %20) #3, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %5, i64 %37, !dbg !27
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %20) #3, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !29
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %20) #3, !dbg !30
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %20) #3, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !31
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %20) #3, !dbg !32
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %20) #3, !dbg !32
  %48 = getelementptr float, ptr addrspace(1) %8, i64 %37, !dbg !33
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %20) #3, !dbg !34
  %50 = getelementptr float, ptr addrspace(1) %9, i64 %37, !dbg !35
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %20) #3, !dbg !36
  %52 = fadd float %34, 0x3EB0C6F7A0000000, !dbg !37
  %53 = fadd float %36, 0x3EB0C6F7A0000000, !dbg !37
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i = icmp eq i32 %54, 0, !dbg !38
  br i1 %.not.i, label %57, label %55, !dbg !38

55:                                               ; preds = %13
  %56 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %52), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

57:                                               ; preds = %13
  %58 = tail call float @llvm.nvvm.rsqrt.approx.f(float %52), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %55, %57
  %.0.i = phi float [ %56, %55 ], [ %58, %57 ], !dbg !38
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i1 = icmp eq i32 %59, 0, !dbg !38
  br i1 %.not.i1, label %62, label %60, !dbg !38

60:                                               ; preds = %__nv_rsqrtf.exit
  %61 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %53), !dbg !38
  br label %__nv_rsqrtf.exit3, !dbg !38

62:                                               ; preds = %__nv_rsqrtf.exit
  %63 = tail call float @llvm.nvvm.rsqrt.approx.f(float %53), !dbg !38
  br label %__nv_rsqrtf.exit3, !dbg !38

__nv_rsqrtf.exit3:                                ; preds = %60, %62
  %.0.i2 = phi float [ %61, %60 ], [ %63, %62 ], !dbg !38
  %64 = extractvalue { i32, i32 } %25, 1, !dbg !18
  %65 = bitcast i32 %64 to float, !dbg !18
  %66 = extractvalue { i32, i32 } %27, 1, !dbg !20
  %67 = bitcast i32 %66 to float, !dbg !20
  %68 = fadd float %65, %67, !dbg !39
  %69 = bitcast i32 %31 to float, !dbg !22
  %70 = fsub float %68, %69, !dbg !40
  %71 = extractvalue { i32, i32 } %25, 0, !dbg !18
  %72 = bitcast i32 %71 to float, !dbg !18
  %73 = extractvalue { i32, i32 } %27, 0, !dbg !20
  %74 = bitcast i32 %73 to float, !dbg !20
  %75 = fadd float %72, %74, !dbg !39
  %76 = bitcast i32 %30 to float, !dbg !22
  %77 = fsub float %75, %76, !dbg !40
  %78 = extractvalue { i32, i32 } %51, 1, !dbg !36
  %79 = bitcast i32 %78 to float, !dbg !36
  %80 = extractvalue { i32, i32 } %51, 0, !dbg !36
  %81 = bitcast i32 %80 to float, !dbg !36
  %82 = extractvalue { i32, i32 } %49, 1, !dbg !34
  %83 = bitcast i32 %82 to float, !dbg !34
  %84 = extractvalue { i32, i32 } %49, 0, !dbg !34
  %85 = bitcast i32 %84 to float, !dbg !34
  %86 = bitcast i32 %47 to float, !dbg !32
  %87 = bitcast i32 %46 to float, !dbg !32
  %88 = bitcast i32 %44 to float, !dbg !30
  %89 = bitcast i32 %43 to float, !dbg !30
  %90 = extractvalue { i32, i32 } %41, 1, !dbg !28
  %91 = bitcast i32 %90 to float, !dbg !28
  %92 = extractvalue { i32, i32 } %41, 0, !dbg !28
  %93 = bitcast i32 %92 to float, !dbg !28
  %94 = extractvalue { i32, i32 } %39, 1, !dbg !26
  %95 = bitcast i32 %94 to float, !dbg !26
  %96 = extractvalue { i32, i32 } %39, 0, !dbg !26
  %97 = bitcast i32 %96 to float, !dbg !26
  %98 = fmul float %77, %.0.i, !dbg !41
  %99 = fmul float %70, %.0.i2, !dbg !41
  %100 = fmul float %98, %97, !dbg !42
  %101 = fmul float %99, %95, !dbg !42
  %102 = fadd float %100, %93, !dbg !43
  %103 = fadd float %101, %91, !dbg !43
  %104 = fsub float %72, %89, !dbg !44
  %105 = fsub float %65, %88, !dbg !44
  %106 = fmul float %104, %87, !dbg !45
  %107 = fmul float %105, %86, !dbg !45
  %108 = fmul float %106, %85, !dbg !46
  %109 = fmul float %107, %83, !dbg !46
  %110 = fadd float %108, %81, !dbg !47
  %111 = fadd float %109, %79, !dbg !47
  %112 = getelementptr float, ptr addrspace(1) %10, i64 %23, !dbg !48
  %113 = bitcast float %102 to i32, !dbg !49
  %114 = bitcast float %103 to i32, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %113, i32 %114, ptr addrspace(1) %112, i1 %20) #3, !dbg !49
  %115 = getelementptr float, ptr addrspace(1) %11, i64 %23, !dbg !50
  %116 = bitcast float %110 to i32, !dbg !51
  %117 = bitcast float %111 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %116, i32 %117, ptr addrspace(1) %115, i1 %20) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu2wvdvohgpquikkng5o4mk674wwgwwheii3hr7y6e3faro7345a.py", directory: "inductor_cache/u2")
!4 = !{ptr @triton_poi_fused_add_native_layer_norm_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_layer_norm_3, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_layer_norm_3", linkageName: "triton_poi_fused_add_native_layer_norm_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 27, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 42, column: 18, scope: !7)
!42 = !DILocation(line: 43, column: 19, scope: !7)
!43 = !DILocation(line: 44, column: 20, scope: !7)
!44 = !DILocation(line: 45, column: 19, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 49, column: 25, scope: !7)
!49 = !DILocation(line: 49, column: 37, scope: !7)
!50 = !DILocation(line: 50, column: 25, scope: !7)
!51 = !DILocation(line: 50, column: 37, scope: !7)
!52 = !DILocation(line: 50, column: 4, scope: !7)
