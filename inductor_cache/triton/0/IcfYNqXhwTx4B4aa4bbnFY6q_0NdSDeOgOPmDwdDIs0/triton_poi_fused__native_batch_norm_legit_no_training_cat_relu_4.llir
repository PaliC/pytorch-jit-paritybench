; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 1, !dbg !13
  %18 = or disjoint i32 %16, 2, !dbg !13
  %19 = or disjoint i32 %16, 3, !dbg !13
  %20 = or disjoint i32 %16, 512, !dbg !13
  %21 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !14
  %22 = insertelement <2 x i32> %21, i32 %16, i64 1, !dbg !14
  %23 = sdiv <2 x i32> %22, splat (i32 1024), !dbg !14
  %24 = srem <2 x i32> %23, splat (i32 56), !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %25 = sdiv i32 %.frozen, 32, !dbg !16
  %26 = mul i32 %25, 32, !dbg !17
  %.decomposed = sub i32 %.frozen, %26, !dbg !17
  %27 = srem i32 %17, 32, !dbg !17
  %28 = srem i32 %18, 32, !dbg !17
  %29 = srem i32 %19, 32, !dbg !17
  %30 = sdiv i32 %20, 32, !dbg !16
  %31 = srem i32 %25, 32, !dbg !18
  %32 = srem i32 %30, 32, !dbg !18
  %33 = sdiv i32 %16, 57344, !dbg !19
  %34 = sdiv i32 %20, 57344, !dbg !19
  %35 = srem i32 %16, 1024, !dbg !20
  %36 = srem i32 %20, 1024, !dbg !20
  %37 = extractelement <2 x i32> %24, i64 1, !dbg !21
  %38 = sext i32 %37 to i64, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !22
  %40 = extractelement <2 x i32> %24, i64 0, !dbg !21
  %41 = sext i32 %40 to i64, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !23
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !23
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !23
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !23
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !23
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !23
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !23
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !24
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !25
  %54 = bitcast i32 %53 to float, !dbg !25
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !25
  %56 = bitcast i32 %55 to float, !dbg !25
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !25
  %58 = bitcast i32 %57 to float, !dbg !25
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !25
  %60 = bitcast i32 %59 to float, !dbg !25
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !25
  %62 = bitcast i32 %61 to float, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !25
  %64 = bitcast i32 %63 to float, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !25
  %66 = bitcast i32 %65 to float, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !25
  %68 = bitcast i32 %67 to float, !dbg !25
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !26
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %41, !dbg !26
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !27
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !27
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !27
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !27
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !27
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !27
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !27
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !27
  %79 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !28
  %80 = getelementptr float, ptr addrspace(1) %6, i64 %41, !dbg !28
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !29
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !29
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !29
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !29
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !29
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !29
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !29
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !29
  %89 = icmp slt <2 x i32> %24, splat (i32 52), !dbg !30
  %90 = shl nsw i32 %.decomposed, 1, !dbg !31
  %91 = shl nsw i32 %27, 1, !dbg !31
  %92 = shl nsw i32 %28, 1, !dbg !31
  %93 = shl nsw i32 %29, 1, !dbg !31
  %94 = shl nsw i32 %31, 7, !dbg !32
  %95 = shl nsw i32 %32, 7, !dbg !32
  %96 = shl nsw i32 %37, 12, !dbg !33
  %97 = shl nsw i32 %40, 12, !dbg !33
  %98 = mul i32 %33, 212992, !dbg !34
  %99 = mul i32 %34, 212992, !dbg !34
  %100 = add i32 %94, %98, !dbg !35
  %101 = add i32 %100, %90, !dbg !36
  %102 = add i32 %101, %96, !dbg !37
  %103 = add i32 %100, %91, !dbg !36
  %104 = add i32 %103, %96, !dbg !37
  %105 = add i32 %100, %92, !dbg !36
  %106 = add i32 %105, %96, !dbg !37
  %107 = add i32 %100, %93, !dbg !36
  %108 = add i32 %107, %96, !dbg !37
  %109 = add i32 %95, %99, !dbg !35
  %110 = add i32 %109, %90, !dbg !36
  %111 = add i32 %110, %97, !dbg !37
  %112 = add i32 %109, %91, !dbg !36
  %113 = add i32 %112, %97, !dbg !37
  %114 = add i32 %109, %92, !dbg !36
  %115 = add i32 %114, %97, !dbg !37
  %116 = add i32 %109, %93, !dbg !36
  %117 = add i32 %116, %97, !dbg !37
  %118 = sext i32 %102 to i64, !dbg !38
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !38
  %120 = sext i32 %104 to i64, !dbg !38
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !38
  %122 = sext i32 %106 to i64, !dbg !38
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !38
  %124 = sext i32 %108 to i64, !dbg !38
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !38
  %126 = sext i32 %111 to i64, !dbg !38
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !38
  %128 = sext i32 %113 to i64, !dbg !38
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !38
  %130 = sext i32 %115 to i64, !dbg !38
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !38
  %132 = sext i32 %117 to i64, !dbg !38
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !38
  %134 = extractelement <2 x i1> %89, i64 1, !dbg !39
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %134, i32 0, i1 %134) #3, !dbg !39
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %134, i32 0, i1 %134) #3, !dbg !39
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %134, i32 0, i1 %134) #3, !dbg !39
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %134, i32 0, i1 %134) #3, !dbg !39
  %139 = extractelement <2 x i1> %89, i64 0, !dbg !39
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %139, i32 0, i1 %139) #3, !dbg !39
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %139, i32 0, i1 %139) #3, !dbg !39
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %139, i32 0, i1 %139) #3, !dbg !39
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %139, i32 0, i1 %139) #3, !dbg !39
  %144 = or disjoint i32 %100, 1, !dbg !40
  %145 = add i32 %144, %90, !dbg !41
  %146 = add i32 %145, %96, !dbg !42
  %147 = add i32 %144, %91, !dbg !41
  %148 = add i32 %147, %96, !dbg !42
  %149 = add i32 %144, %92, !dbg !41
  %150 = add i32 %149, %96, !dbg !42
  %151 = add i32 %144, %93, !dbg !41
  %152 = add i32 %151, %96, !dbg !42
  %153 = or disjoint i32 %109, 1, !dbg !40
  %154 = add i32 %153, %90, !dbg !41
  %155 = add i32 %154, %97, !dbg !42
  %156 = add i32 %153, %91, !dbg !41
  %157 = add i32 %156, %97, !dbg !42
  %158 = add i32 %153, %92, !dbg !41
  %159 = add i32 %158, %97, !dbg !42
  %160 = add i32 %153, %93, !dbg !41
  %161 = add i32 %160, %97, !dbg !42
  %162 = sext i32 %146 to i64, !dbg !43
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !43
  %164 = sext i32 %148 to i64, !dbg !43
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !43
  %166 = sext i32 %150 to i64, !dbg !43
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !43
  %168 = sext i32 %152 to i64, !dbg !43
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %168, !dbg !43
  %170 = sext i32 %155 to i64, !dbg !43
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !43
  %172 = sext i32 %157 to i64, !dbg !43
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !43
  %174 = sext i32 %159 to i64, !dbg !43
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !43
  %176 = sext i32 %161 to i64, !dbg !43
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !43
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %134, i32 0, i1 %134) #3, !dbg !44
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %134, i32 0, i1 %134) #3, !dbg !44
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %167, i1 %134, i32 0, i1 %134) #3, !dbg !44
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %169, i1 %134, i32 0, i1 %134) #3, !dbg !44
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %139, i32 0, i1 %139) #3, !dbg !44
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %139, i32 0, i1 %139) #3, !dbg !44
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %139, i32 0, i1 %139) #3, !dbg !44
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %139, i32 0, i1 %139) #3, !dbg !44
  %186 = or disjoint i32 %100, 64, !dbg !45
  %187 = add i32 %186, %90, !dbg !46
  %188 = add i32 %187, %96, !dbg !47
  %189 = add i32 %186, %91, !dbg !46
  %190 = add i32 %189, %96, !dbg !47
  %191 = add i32 %186, %92, !dbg !46
  %192 = add i32 %191, %96, !dbg !47
  %193 = add i32 %186, %93, !dbg !46
  %194 = add i32 %193, %96, !dbg !47
  %195 = or disjoint i32 %109, 64, !dbg !45
  %196 = add i32 %195, %90, !dbg !46
  %197 = add i32 %196, %97, !dbg !47
  %198 = add i32 %195, %91, !dbg !46
  %199 = add i32 %198, %97, !dbg !47
  %200 = add i32 %195, %92, !dbg !46
  %201 = add i32 %200, %97, !dbg !47
  %202 = add i32 %195, %93, !dbg !46
  %203 = add i32 %202, %97, !dbg !47
  %204 = sext i32 %188 to i64, !dbg !48
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !48
  %206 = sext i32 %190 to i64, !dbg !48
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !48
  %208 = sext i32 %192 to i64, !dbg !48
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !48
  %210 = sext i32 %194 to i64, !dbg !48
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %210, !dbg !48
  %212 = sext i32 %197 to i64, !dbg !48
  %213 = getelementptr float, ptr addrspace(1) %0, i64 %212, !dbg !48
  %214 = sext i32 %199 to i64, !dbg !48
  %215 = getelementptr float, ptr addrspace(1) %0, i64 %214, !dbg !48
  %216 = sext i32 %201 to i64, !dbg !48
  %217 = getelementptr float, ptr addrspace(1) %0, i64 %216, !dbg !48
  %218 = sext i32 %203 to i64, !dbg !48
  %219 = getelementptr float, ptr addrspace(1) %0, i64 %218, !dbg !48
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %205, i1 %134, i32 0, i1 %134) #3, !dbg !49
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %134, i32 0, i1 %134) #3, !dbg !49
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 %134, i32 0, i1 %134) #3, !dbg !49
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %134, i32 0, i1 %134) #3, !dbg !49
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %213, i1 %139, i32 0, i1 %139) #3, !dbg !49
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %215, i1 %139, i32 0, i1 %139) #3, !dbg !49
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %217, i1 %139, i32 0, i1 %139) #3, !dbg !49
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %219, i1 %139, i32 0, i1 %139) #3, !dbg !49
  %228 = or disjoint i32 %100, 65, !dbg !50
  %229 = add i32 %228, %90, !dbg !51
  %230 = add i32 %229, %96, !dbg !52
  %231 = add i32 %228, %91, !dbg !51
  %232 = add i32 %231, %96, !dbg !52
  %233 = add i32 %228, %92, !dbg !51
  %234 = add i32 %233, %96, !dbg !52
  %235 = add i32 %228, %93, !dbg !51
  %236 = add i32 %235, %96, !dbg !52
  %237 = or disjoint i32 %109, 65, !dbg !50
  %238 = add i32 %237, %90, !dbg !51
  %239 = add i32 %238, %97, !dbg !52
  %240 = add i32 %237, %91, !dbg !51
  %241 = add i32 %240, %97, !dbg !52
  %242 = add i32 %237, %92, !dbg !51
  %243 = add i32 %242, %97, !dbg !52
  %244 = add i32 %237, %93, !dbg !51
  %245 = add i32 %244, %97, !dbg !52
  %246 = sext i32 %230 to i64, !dbg !53
  %247 = getelementptr float, ptr addrspace(1) %0, i64 %246, !dbg !53
  %248 = sext i32 %232 to i64, !dbg !53
  %249 = getelementptr float, ptr addrspace(1) %0, i64 %248, !dbg !53
  %250 = sext i32 %234 to i64, !dbg !53
  %251 = getelementptr float, ptr addrspace(1) %0, i64 %250, !dbg !53
  %252 = sext i32 %236 to i64, !dbg !53
  %253 = getelementptr float, ptr addrspace(1) %0, i64 %252, !dbg !53
  %254 = sext i32 %239 to i64, !dbg !53
  %255 = getelementptr float, ptr addrspace(1) %0, i64 %254, !dbg !53
  %256 = sext i32 %241 to i64, !dbg !53
  %257 = getelementptr float, ptr addrspace(1) %0, i64 %256, !dbg !53
  %258 = sext i32 %243 to i64, !dbg !53
  %259 = getelementptr float, ptr addrspace(1) %0, i64 %258, !dbg !53
  %260 = sext i32 %245 to i64, !dbg !53
  %261 = getelementptr float, ptr addrspace(1) %0, i64 %260, !dbg !53
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %247, i1 %134, i32 0, i1 %134) #3, !dbg !54
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %249, i1 %134, i32 0, i1 %134) #3, !dbg !54
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %251, i1 %134, i32 0, i1 %134) #3, !dbg !54
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %253, i1 %134, i32 0, i1 %134) #3, !dbg !54
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %255, i1 %139, i32 0, i1 %139) #3, !dbg !54
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %257, i1 %139, i32 0, i1 %139) #3, !dbg !54
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %259, i1 %139, i32 0, i1 %139) #3, !dbg !54
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %261, i1 %139, i32 0, i1 %139) #3, !dbg !54
  %270 = icmp sgt i32 %37, 51, !dbg !21
  %271 = icmp sgt i32 %40, 51, !dbg !21
  %272 = add nsw i32 %37, -52, !dbg !55
  %273 = add nsw i32 %40, -52, !dbg !55
  %274 = shl nsw i32 %272, 10, !dbg !56
  %275 = shl nsw i32 %273, 10, !dbg !56
  %276 = shl nsw i32 %33, 12, !dbg !57
  %277 = shl nsw i32 %34, 12, !dbg !57
  %278 = add nsw i32 %276, %35, !dbg !58
  %279 = add nsw i32 %278, %274, !dbg !59
  %280 = add nsw i32 %277, %36, !dbg !58
  %281 = add nsw i32 %280, %275, !dbg !59
  %282 = sext i32 %279 to i64, !dbg !60
  %283 = getelementptr float, ptr addrspace(1) %1, i64 %282, !dbg !60
  %284 = sext i32 %281 to i64, !dbg !60
  %285 = getelementptr float, ptr addrspace(1) %1, i64 %284, !dbg !60
  %286 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %283, i1 %270, i32 0, i1 %270, i32 0, i1 %270, i32 0, i1 %270, i32 0, i1 %270) #3, !dbg !61
  %287 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %285, i1 %271, i32 0, i1 %271, i32 0, i1 %271, i32 0, i1 %271, i32 0, i1 %271) #3, !dbg !61
  %288 = sext i32 %272 to i64, !dbg !62
  %289 = getelementptr float, ptr addrspace(1) %2, i64 %288, !dbg !62
  %290 = sext i32 %273 to i64, !dbg !62
  %291 = getelementptr float, ptr addrspace(1) %2, i64 %290, !dbg !62
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %289, i1 %270, i32 0, i1 %270) #3, !dbg !63
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %289, i1 %270, i32 0, i1 %270) #3, !dbg !63
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %289, i1 %270, i32 0, i1 %270) #3, !dbg !63
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %289, i1 %270, i32 0, i1 %270) #3, !dbg !63
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %291, i1 %271, i32 0, i1 %271) #3, !dbg !63
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %291, i1 %271, i32 0, i1 %271) #3, !dbg !63
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %291, i1 %271, i32 0, i1 %271) #3, !dbg !63
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %291, i1 %271, i32 0, i1 %271) #3, !dbg !63
  %300 = fadd float %54, 0x3EE4F8B580000000, !dbg !64
  %301 = fadd float %56, 0x3EE4F8B580000000, !dbg !64
  %302 = fadd float %58, 0x3EE4F8B580000000, !dbg !64
  %303 = fadd float %60, 0x3EE4F8B580000000, !dbg !64
  %304 = fadd float %62, 0x3EE4F8B580000000, !dbg !64
  %305 = fadd float %64, 0x3EE4F8B580000000, !dbg !64
  %306 = fadd float %66, 0x3EE4F8B580000000, !dbg !64
  %307 = fadd float %68, 0x3EE4F8B580000000, !dbg !64
  %308 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i = icmp eq i32 %308, 0, !dbg !65
  %309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i = icmp eq i32 %309, 0, !dbg !65
  br i1 %.not.i, label %315, label %310, !dbg !65

310:                                              ; preds = %10
  br i1 %.not1.i, label %313, label %311, !dbg !65

311:                                              ; preds = %310
  %312 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %300) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

313:                                              ; preds = %310
  %314 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %300) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

315:                                              ; preds = %10
  br i1 %.not1.i, label %318, label %316, !dbg !65

316:                                              ; preds = %315
  %317 = tail call float @llvm.nvvm.sqrt.rn.f(float %300) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

318:                                              ; preds = %315
  %319 = tail call float @llvm.nvvm.sqrt.approx.f(float %300) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

__nv_sqrtf.exit:                                  ; preds = %311, %313, %316, %318
  %.0.i = phi float [ %312, %311 ], [ %314, %313 ], [ %317, %316 ], [ %319, %318 ], !dbg !65
  %320 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i1 = icmp eq i32 %320, 0, !dbg !65
  %321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i4 = icmp eq i32 %321, 0, !dbg !65
  br i1 %.not.i1, label %327, label %322, !dbg !65

322:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %325, label %323, !dbg !65

323:                                              ; preds = %322
  %324 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %301) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

325:                                              ; preds = %322
  %326 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %301) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

327:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %330, label %328, !dbg !65

328:                                              ; preds = %327
  %329 = tail call float @llvm.nvvm.sqrt.rn.f(float %301) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

330:                                              ; preds = %327
  %331 = tail call float @llvm.nvvm.sqrt.approx.f(float %301) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

__nv_sqrtf.exit5:                                 ; preds = %323, %325, %328, %330
  %.0.i3 = phi float [ %324, %323 ], [ %326, %325 ], [ %329, %328 ], [ %331, %330 ], !dbg !65
  %332 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i6 = icmp eq i32 %332, 0, !dbg !65
  %333 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i9 = icmp eq i32 %333, 0, !dbg !65
  br i1 %.not.i6, label %339, label %334, !dbg !65

334:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %337, label %335, !dbg !65

335:                                              ; preds = %334
  %336 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %302) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

337:                                              ; preds = %334
  %338 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %302) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

339:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %342, label %340, !dbg !65

340:                                              ; preds = %339
  %341 = tail call float @llvm.nvvm.sqrt.rn.f(float %302) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

342:                                              ; preds = %339
  %343 = tail call float @llvm.nvvm.sqrt.approx.f(float %302) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

__nv_sqrtf.exit10:                                ; preds = %335, %337, %340, %342
  %.0.i8 = phi float [ %336, %335 ], [ %338, %337 ], [ %341, %340 ], [ %343, %342 ], !dbg !65
  %344 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i11 = icmp eq i32 %344, 0, !dbg !65
  %345 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i14 = icmp eq i32 %345, 0, !dbg !65
  br i1 %.not.i11, label %351, label %346, !dbg !65

346:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %349, label %347, !dbg !65

347:                                              ; preds = %346
  %348 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %303) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

349:                                              ; preds = %346
  %350 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %303) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

351:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %354, label %352, !dbg !65

352:                                              ; preds = %351
  %353 = tail call float @llvm.nvvm.sqrt.rn.f(float %303) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

354:                                              ; preds = %351
  %355 = tail call float @llvm.nvvm.sqrt.approx.f(float %303) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

__nv_sqrtf.exit15:                                ; preds = %347, %349, %352, %354
  %.0.i13 = phi float [ %348, %347 ], [ %350, %349 ], [ %353, %352 ], [ %355, %354 ], !dbg !65
  %356 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i16 = icmp eq i32 %356, 0, !dbg !65
  %357 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i19 = icmp eq i32 %357, 0, !dbg !65
  br i1 %.not.i16, label %363, label %358, !dbg !65

358:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %361, label %359, !dbg !65

359:                                              ; preds = %358
  %360 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %304) #3, !dbg !65
  br label %__nv_sqrtf.exit20, !dbg !65

361:                                              ; preds = %358
  %362 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %304) #3, !dbg !65
  br label %__nv_sqrtf.exit20, !dbg !65

363:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %366, label %364, !dbg !65

364:                                              ; preds = %363
  %365 = tail call float @llvm.nvvm.sqrt.rn.f(float %304) #3, !dbg !65
  br label %__nv_sqrtf.exit20, !dbg !65

366:                                              ; preds = %363
  %367 = tail call float @llvm.nvvm.sqrt.approx.f(float %304) #3, !dbg !65
  br label %__nv_sqrtf.exit20, !dbg !65

__nv_sqrtf.exit20:                                ; preds = %359, %361, %364, %366
  %.0.i18 = phi float [ %360, %359 ], [ %362, %361 ], [ %365, %364 ], [ %367, %366 ], !dbg !65
  %368 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i21 = icmp eq i32 %368, 0, !dbg !65
  %369 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i24 = icmp eq i32 %369, 0, !dbg !65
  br i1 %.not.i21, label %375, label %370, !dbg !65

370:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %373, label %371, !dbg !65

371:                                              ; preds = %370
  %372 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %305) #3, !dbg !65
  br label %__nv_sqrtf.exit25, !dbg !65

373:                                              ; preds = %370
  %374 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %305) #3, !dbg !65
  br label %__nv_sqrtf.exit25, !dbg !65

375:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %378, label %376, !dbg !65

376:                                              ; preds = %375
  %377 = tail call float @llvm.nvvm.sqrt.rn.f(float %305) #3, !dbg !65
  br label %__nv_sqrtf.exit25, !dbg !65

378:                                              ; preds = %375
  %379 = tail call float @llvm.nvvm.sqrt.approx.f(float %305) #3, !dbg !65
  br label %__nv_sqrtf.exit25, !dbg !65

__nv_sqrtf.exit25:                                ; preds = %371, %373, %376, %378
  %.0.i23 = phi float [ %372, %371 ], [ %374, %373 ], [ %377, %376 ], [ %379, %378 ], !dbg !65
  %380 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i26 = icmp eq i32 %380, 0, !dbg !65
  %381 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i29 = icmp eq i32 %381, 0, !dbg !65
  br i1 %.not.i26, label %387, label %382, !dbg !65

382:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %385, label %383, !dbg !65

383:                                              ; preds = %382
  %384 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %306) #3, !dbg !65
  br label %__nv_sqrtf.exit30, !dbg !65

385:                                              ; preds = %382
  %386 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %306) #3, !dbg !65
  br label %__nv_sqrtf.exit30, !dbg !65

387:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %390, label %388, !dbg !65

388:                                              ; preds = %387
  %389 = tail call float @llvm.nvvm.sqrt.rn.f(float %306) #3, !dbg !65
  br label %__nv_sqrtf.exit30, !dbg !65

390:                                              ; preds = %387
  %391 = tail call float @llvm.nvvm.sqrt.approx.f(float %306) #3, !dbg !65
  br label %__nv_sqrtf.exit30, !dbg !65

__nv_sqrtf.exit30:                                ; preds = %383, %385, %388, %390
  %.0.i28 = phi float [ %384, %383 ], [ %386, %385 ], [ %389, %388 ], [ %391, %390 ], !dbg !65
  %392 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i31 = icmp eq i32 %392, 0, !dbg !65
  %393 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i34 = icmp eq i32 %393, 0, !dbg !65
  br i1 %.not.i31, label %399, label %394, !dbg !65

394:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %397, label %395, !dbg !65

395:                                              ; preds = %394
  %396 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %307) #3, !dbg !65
  br label %__nv_sqrtf.exit35, !dbg !65

397:                                              ; preds = %394
  %398 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %307) #3, !dbg !65
  br label %__nv_sqrtf.exit35, !dbg !65

399:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %402, label %400, !dbg !65

400:                                              ; preds = %399
  %401 = tail call float @llvm.nvvm.sqrt.rn.f(float %307) #3, !dbg !65
  br label %__nv_sqrtf.exit35, !dbg !65

402:                                              ; preds = %399
  %403 = tail call float @llvm.nvvm.sqrt.approx.f(float %307) #3, !dbg !65
  br label %__nv_sqrtf.exit35, !dbg !65

__nv_sqrtf.exit35:                                ; preds = %395, %397, %400, %402
  %.0.i33 = phi float [ %396, %395 ], [ %398, %397 ], [ %401, %400 ], [ %403, %402 ], !dbg !65
  %404 = shufflevector <2 x i1> %89, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !30
  %405 = insertelement <8 x i32> poison, i32 %185, i64 0, !dbg !44
  %406 = insertelement <8 x i32> %405, i32 %184, i64 1, !dbg !44
  %407 = insertelement <8 x i32> %406, i32 %183, i64 2, !dbg !44
  %408 = insertelement <8 x i32> %407, i32 %182, i64 3, !dbg !44
  %409 = insertelement <8 x i32> %408, i32 %181, i64 4, !dbg !44
  %410 = insertelement <8 x i32> %409, i32 %180, i64 5, !dbg !44
  %411 = insertelement <8 x i32> %410, i32 %179, i64 6, !dbg !44
  %412 = insertelement <8 x i32> %411, i32 %178, i64 7, !dbg !44
  %413 = bitcast <8 x i32> %412 to <8 x float>, !dbg !44
  %414 = insertelement <8 x i32> poison, i32 %143, i64 0, !dbg !39
  %415 = insertelement <8 x i32> %414, i32 %142, i64 1, !dbg !39
  %416 = insertelement <8 x i32> %415, i32 %141, i64 2, !dbg !39
  %417 = insertelement <8 x i32> %416, i32 %140, i64 3, !dbg !39
  %418 = insertelement <8 x i32> %417, i32 %138, i64 4, !dbg !39
  %419 = insertelement <8 x i32> %418, i32 %137, i64 5, !dbg !39
  %420 = insertelement <8 x i32> %419, i32 %136, i64 6, !dbg !39
  %421 = insertelement <8 x i32> %420, i32 %135, i64 7, !dbg !39
  %422 = bitcast <8 x i32> %421 to <8 x float>, !dbg !39
  %423 = insertelement <8 x i32> poison, i32 %227, i64 0, !dbg !49
  %424 = insertelement <8 x i32> %423, i32 %226, i64 1, !dbg !49
  %425 = insertelement <8 x i32> %424, i32 %225, i64 2, !dbg !49
  %426 = insertelement <8 x i32> %425, i32 %224, i64 3, !dbg !49
  %427 = insertelement <8 x i32> %426, i32 %223, i64 4, !dbg !49
  %428 = insertelement <8 x i32> %427, i32 %222, i64 5, !dbg !49
  %429 = insertelement <8 x i32> %428, i32 %221, i64 6, !dbg !49
  %430 = insertelement <8 x i32> %429, i32 %220, i64 7, !dbg !49
  %431 = bitcast <8 x i32> %430 to <8 x float>, !dbg !49
  %432 = insertelement <8 x i32> poison, i32 %269, i64 0, !dbg !54
  %433 = insertelement <8 x i32> %432, i32 %268, i64 1, !dbg !54
  %434 = insertelement <8 x i32> %433, i32 %267, i64 2, !dbg !54
  %435 = insertelement <8 x i32> %434, i32 %266, i64 3, !dbg !54
  %436 = insertelement <8 x i32> %435, i32 %265, i64 4, !dbg !54
  %437 = insertelement <8 x i32> %436, i32 %264, i64 5, !dbg !54
  %438 = insertelement <8 x i32> %437, i32 %263, i64 6, !dbg !54
  %439 = insertelement <8 x i32> %438, i32 %262, i64 7, !dbg !54
  %440 = bitcast <8 x i32> %439 to <8 x float>, !dbg !54
  %441 = extractvalue { i32, i32, i32, i32 } %287, 3, !dbg !61
  %442 = insertelement <8 x i32> poison, i32 %299, i64 0, !dbg !63
  %443 = insertelement <8 x i32> %442, i32 %298, i64 1, !dbg !63
  %444 = insertelement <8 x i32> %443, i32 %297, i64 2, !dbg !63
  %445 = insertelement <8 x i32> %444, i32 %296, i64 3, !dbg !63
  %446 = insertelement <8 x i32> %445, i32 %295, i64 4, !dbg !63
  %447 = insertelement <8 x i32> %446, i32 %294, i64 5, !dbg !63
  %448 = insertelement <8 x i32> %447, i32 %293, i64 6, !dbg !63
  %449 = insertelement <8 x i32> %448, i32 %292, i64 7, !dbg !63
  %450 = bitcast <8 x i32> %449 to <8 x float>, !dbg !63
  %451 = insertelement <8 x i32> poison, i32 %50, i64 0, !dbg !23
  %452 = insertelement <8 x i32> %451, i32 %49, i64 1, !dbg !23
  %453 = insertelement <8 x i32> %452, i32 %48, i64 2, !dbg !23
  %454 = insertelement <8 x i32> %453, i32 %47, i64 3, !dbg !23
  %455 = insertelement <8 x i32> %454, i32 %46, i64 4, !dbg !23
  %456 = insertelement <8 x i32> %455, i32 %45, i64 5, !dbg !23
  %457 = insertelement <8 x i32> %456, i32 %44, i64 6, !dbg !23
  %458 = insertelement <8 x i32> %457, i32 %43, i64 7, !dbg !23
  %459 = bitcast <8 x i32> %458 to <8 x float>, !dbg !23
  %460 = extractvalue { i32, i32, i32, i32 } %287, 2, !dbg !61
  %461 = extractvalue { i32, i32, i32, i32 } %287, 1, !dbg !61
  %462 = extractvalue { i32, i32, i32, i32 } %287, 0, !dbg !61
  %463 = extractvalue { i32, i32, i32, i32 } %286, 3, !dbg !61
  %464 = extractvalue { i32, i32, i32, i32 } %286, 2, !dbg !61
  %465 = extractvalue { i32, i32, i32, i32 } %286, 1, !dbg !61
  %466 = fcmp ogt <8 x float> %413, %422, !dbg !66
  %467 = fcmp uno <8 x float> %413, zeroinitializer, !dbg !70
  %468 = extractvalue { i32, i32, i32, i32 } %286, 0, !dbg !61
  %469 = insertelement <8 x i32> poison, i32 %88, i64 0, !dbg !29
  %470 = insertelement <8 x i32> %469, i32 %87, i64 1, !dbg !29
  %471 = insertelement <8 x i32> %470, i32 %86, i64 2, !dbg !29
  %472 = insertelement <8 x i32> %471, i32 %85, i64 3, !dbg !29
  %473 = insertelement <8 x i32> %472, i32 %84, i64 4, !dbg !29
  %474 = insertelement <8 x i32> %473, i32 %83, i64 5, !dbg !29
  %475 = insertelement <8 x i32> %474, i32 %82, i64 6, !dbg !29
  %476 = insertelement <8 x i32> %475, i32 %81, i64 7, !dbg !29
  %477 = bitcast <8 x i32> %476 to <8 x float>, !dbg !29
  %478 = insertelement <8 x i32> poison, i32 %78, i64 0, !dbg !27
  %479 = insertelement <8 x i32> %478, i32 %77, i64 1, !dbg !27
  %480 = insertelement <8 x i32> %479, i32 %76, i64 2, !dbg !27
  %481 = insertelement <8 x i32> %480, i32 %75, i64 3, !dbg !27
  %482 = insertelement <8 x i32> %481, i32 %74, i64 4, !dbg !27
  %483 = insertelement <8 x i32> %482, i32 %73, i64 5, !dbg !27
  %484 = insertelement <8 x i32> %483, i32 %72, i64 6, !dbg !27
  %485 = insertelement <8 x i32> %484, i32 %71, i64 7, !dbg !27
  %486 = bitcast <8 x i32> %485 to <8 x float>, !dbg !27
  %487 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !71
  %488 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !71
  %489 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !71
  %490 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !71
  %491 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !71
  %492 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !71
  %493 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !71
  %494 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !71
  %495 = or <8 x i1> %466, %467, !dbg !72
  %.v = select <8 x i1> %495, <8 x i32> %412, <8 x i32> %421, !dbg !73
  %496 = bitcast <8 x i32> %.v to <8 x float>, !dbg !73
  %497 = fcmp olt <8 x float> %496, %431, !dbg !74
  %498 = fcmp uno <8 x float> %431, zeroinitializer, !dbg !76
  %499 = or <8 x i1> %497, %498, !dbg !77
  %.v36 = select <8 x i1> %499, <8 x i32> %430, <8 x i32> %.v, !dbg !78
  %500 = bitcast <8 x i32> %.v36 to <8 x float>, !dbg !78
  %501 = fcmp olt <8 x float> %500, %440, !dbg !79
  %502 = fcmp uno <8 x float> %440, zeroinitializer, !dbg !81
  %503 = or <8 x i1> %501, %502, !dbg !82
  %.v37 = select <8 x i1> %503, <8 x i32> %439, <8 x i32> %.v36, !dbg !83
  %504 = bitcast <8 x i32> %.v37 to <8 x float>, !dbg !83
  %505 = insertelement <8 x i32> poison, i32 %441, i64 0, !dbg !61
  %506 = insertelement <8 x i32> %505, i32 %460, i64 1, !dbg !61
  %507 = insertelement <8 x i32> %506, i32 %461, i64 2, !dbg !61
  %508 = insertelement <8 x i32> %507, i32 %462, i64 3, !dbg !61
  %509 = insertelement <8 x i32> %508, i32 %463, i64 4, !dbg !61
  %510 = insertelement <8 x i32> %509, i32 %464, i64 5, !dbg !61
  %511 = insertelement <8 x i32> %510, i32 %465, i64 6, !dbg !61
  %512 = insertelement <8 x i32> %511, i32 %468, i64 7, !dbg !61
  %513 = bitcast <8 x i32> %512 to <8 x float>, !dbg !61
  %514 = fadd <8 x float> %513, %450, !dbg !84
  %515 = select <8 x i1> %404, <8 x float> %504, <8 x float> %514, !dbg !85
  %516 = fsub <8 x float> %515, %459, !dbg !86
  %517 = insertelement <8 x float> poison, float %494, i64 0, !dbg !87
  %518 = insertelement <8 x float> %517, float %493, i64 1, !dbg !87
  %519 = insertelement <8 x float> %518, float %492, i64 2, !dbg !87
  %520 = insertelement <8 x float> %519, float %491, i64 3, !dbg !87
  %521 = insertelement <8 x float> %520, float %490, i64 4, !dbg !87
  %522 = insertelement <8 x float> %521, float %489, i64 5, !dbg !87
  %523 = insertelement <8 x float> %522, float %488, i64 6, !dbg !87
  %524 = insertelement <8 x float> %523, float %487, i64 7, !dbg !87
  %525 = fmul <8 x float> %516, %524, !dbg !87
  %526 = fmul <8 x float> %525, %486, !dbg !88
  %527 = fadd <8 x float> %526, %477, !dbg !89
  %528 = fcmp olt <8 x float> %527, zeroinitializer, !dbg !90
  %529 = extractelement <8 x i1> %528, i64 7, !dbg !92
  %530 = extractelement <8 x i1> %528, i64 6, !dbg !92
  %531 = extractelement <8 x i1> %528, i64 5, !dbg !92
  %532 = extractelement <8 x i1> %528, i64 4, !dbg !92
  %533 = extractelement <8 x i1> %528, i64 3, !dbg !92
  %534 = extractelement <8 x i1> %528, i64 2, !dbg !92
  %535 = extractelement <8 x i1> %528, i64 1, !dbg !92
  %536 = extractelement <8 x i1> %528, i64 0, !dbg !92
  %537 = sext i32 %16 to i64, !dbg !93
  %538 = getelementptr float, ptr addrspace(1) %7, i64 %537, !dbg !93
  %539 = sext i32 %20 to i64, !dbg !93
  %540 = getelementptr float, ptr addrspace(1) %7, i64 %539, !dbg !93
  %bc = bitcast <8 x float> %515 to <8 x i32>, !dbg !94
  %541 = extractelement <8 x i32> %bc, i64 7, !dbg !94
  %bc38 = bitcast <8 x float> %515 to <8 x i32>, !dbg !94
  %542 = extractelement <8 x i32> %bc38, i64 6, !dbg !94
  %bc39 = bitcast <8 x float> %515 to <8 x i32>, !dbg !94
  %543 = extractelement <8 x i32> %bc39, i64 5, !dbg !94
  %bc40 = bitcast <8 x float> %515 to <8 x i32>, !dbg !94
  %544 = extractelement <8 x i32> %bc40, i64 4, !dbg !94
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %541, i32 %542, i32 %543, i32 %544, ptr addrspace(1) %538, i1 true) #3, !dbg !94
  %bc41 = bitcast <8 x float> %515 to <8 x i32>, !dbg !94
  %545 = extractelement <8 x i32> %bc41, i64 3, !dbg !94
  %bc42 = bitcast <8 x float> %515 to <8 x i32>, !dbg !94
  %546 = extractelement <8 x i32> %bc42, i64 2, !dbg !94
  %bc43 = bitcast <8 x float> %515 to <8 x i32>, !dbg !94
  %547 = extractelement <8 x i32> %bc43, i64 1, !dbg !94
  %bc44 = bitcast <8 x float> %515 to <8 x i32>, !dbg !94
  %548 = extractelement <8 x i32> %bc44, i64 0, !dbg !94
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %545, i32 %546, i32 %547, i32 %548, ptr addrspace(1) %540, i1 true) #3, !dbg !94
  %549 = getelementptr float, ptr addrspace(1) %8, i64 %537, !dbg !95
  %550 = getelementptr float, ptr addrspace(1) %8, i64 %539, !dbg !95
  %bc45 = bitcast <8 x float> %527 to <8 x i32>, !dbg !96
  %551 = extractelement <8 x i32> %bc45, i64 7, !dbg !96
  %552 = select i1 %529, i32 0, i32 %551, !dbg !92
  %bc46 = bitcast <8 x float> %527 to <8 x i32>, !dbg !96
  %553 = extractelement <8 x i32> %bc46, i64 6, !dbg !96
  %554 = select i1 %530, i32 0, i32 %553, !dbg !92
  %bc47 = bitcast <8 x float> %527 to <8 x i32>, !dbg !96
  %555 = extractelement <8 x i32> %bc47, i64 5, !dbg !96
  %556 = select i1 %531, i32 0, i32 %555, !dbg !92
  %bc48 = bitcast <8 x float> %527 to <8 x i32>, !dbg !96
  %557 = extractelement <8 x i32> %bc48, i64 4, !dbg !96
  %558 = select i1 %532, i32 0, i32 %557, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %552, i32 %554, i32 %556, i32 %558, ptr addrspace(1) %549, i1 true) #3, !dbg !96
  %bc49 = bitcast <8 x float> %527 to <8 x i32>, !dbg !96
  %559 = extractelement <8 x i32> %bc49, i64 3, !dbg !96
  %560 = select i1 %533, i32 0, i32 %559, !dbg !92
  %bc50 = bitcast <8 x float> %527 to <8 x i32>, !dbg !96
  %561 = extractelement <8 x i32> %bc50, i64 2, !dbg !96
  %562 = select i1 %534, i32 0, i32 %561, !dbg !92
  %bc51 = bitcast <8 x float> %527 to <8 x i32>, !dbg !96
  %563 = extractelement <8 x i32> %bc51, i64 1, !dbg !96
  %564 = select i1 %535, i32 0, i32 %563, !dbg !92
  %bc52 = bitcast <8 x float> %527 to <8 x i32>, !dbg !96
  %565 = extractelement <8 x i32> %bc52, i64 0, !dbg !96
  %566 = select i1 %536, i32 0, i32 %565, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %560, i32 %562, i32 %564, i32 %566, ptr addrspace(1) %550, i1 true) #3, !dbg !96
  ret void, !dbg !97
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxhpemzyemm3ftrnegq5kjjkrwxhcxnt524v7im722lx6xc4cdee.py", directory: "inductor_cache/xh")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 27, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 48, column: 20, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 32, scope: !7)
!32 = !DILocation(line: 39, column: 41, scope: !7)
!33 = !DILocation(line: 39, column: 52, scope: !7)
!34 = !DILocation(line: 39, column: 65, scope: !7)
!35 = !DILocation(line: 39, column: 37, scope: !7)
!36 = !DILocation(line: 39, column: 46, scope: !7)
!37 = !DILocation(line: 39, column: 58, scope: !7)
!38 = !DILocation(line: 39, column: 30, scope: !7)
!39 = !DILocation(line: 39, column: 70, scope: !7)
!40 = !DILocation(line: 40, column: 41, scope: !7)
!41 = !DILocation(line: 40, column: 50, scope: !7)
!42 = !DILocation(line: 40, column: 62, scope: !7)
!43 = !DILocation(line: 40, column: 30, scope: !7)
!44 = !DILocation(line: 40, column: 74, scope: !7)
!45 = !DILocation(line: 42, column: 42, scope: !7)
!46 = !DILocation(line: 42, column: 51, scope: !7)
!47 = !DILocation(line: 42, column: 63, scope: !7)
!48 = !DILocation(line: 42, column: 30, scope: !7)
!49 = !DILocation(line: 42, column: 75, scope: !7)
!50 = !DILocation(line: 44, column: 43, scope: !7)
!51 = !DILocation(line: 44, column: 52, scope: !7)
!52 = !DILocation(line: 44, column: 64, scope: !7)
!53 = !DILocation(line: 44, column: 31, scope: !7)
!54 = !DILocation(line: 44, column: 76, scope: !7)
!55 = !DILocation(line: 51, column: 50, scope: !7)
!56 = !DILocation(line: 51, column: 42, scope: !7)
!57 = !DILocation(line: 51, column: 61, scope: !7)
!58 = !DILocation(line: 51, column: 36, scope: !7)
!59 = !DILocation(line: 51, column: 56, scope: !7)
!60 = !DILocation(line: 51, column: 31, scope: !7)
!61 = !DILocation(line: 51, column: 66, scope: !7)
!62 = !DILocation(line: 52, column: 31, scope: !7)
!63 = !DILocation(line: 52, column: 44, scope: !7)
!64 = !DILocation(line: 59, column: 20, scope: !7)
!65 = !DILocation(line: 60, column: 27, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !69)
!67 = distinct !DILexicalBlockFile(scope: !7, file: !68, discriminator: 0)
!68 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!69 = !DILocation(line: 41, column: 40, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !69)
!71 = !DILocation(line: 62, column: 20, scope: !7)
!72 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !69)
!73 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !69)
!74 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !75)
!75 = !DILocation(line: 43, column: 40, scope: !7)
!76 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !75)
!77 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !75)
!78 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !75)
!79 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !80)
!80 = !DILocation(line: 45, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !80)
!84 = !DILocation(line: 53, column: 20, scope: !7)
!85 = !DILocation(line: 0, scope: !7)
!86 = !DILocation(line: 57, column: 20, scope: !7)
!87 = !DILocation(line: 65, column: 20, scope: !7)
!88 = !DILocation(line: 66, column: 20, scope: !7)
!89 = !DILocation(line: 67, column: 20, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !91)
!91 = !DILocation(line: 69, column: 42, scope: !7)
!92 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !91)
!93 = !DILocation(line: 70, column: 25, scope: !7)
!94 = !DILocation(line: 70, column: 37, scope: !7)
!95 = !DILocation(line: 71, column: 25, scope: !7)
!96 = !DILocation(line: 71, column: 37, scope: !7)
!97 = !DILocation(line: 71, column: 4, scope: !7)
