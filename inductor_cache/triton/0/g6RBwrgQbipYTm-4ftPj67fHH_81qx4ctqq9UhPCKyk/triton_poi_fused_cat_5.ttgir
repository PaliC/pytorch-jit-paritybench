#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_cat_5(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<512> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<16> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<8> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<128> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<4> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<2> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<32> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<-2> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<-4> : tensor<256xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_1 : tensor<256xi32, #blocked> loc(#loc6)
    %6 = arith.divsi %4, %cst_2 : tensor<256xi32, #blocked> loc(#loc7)
    %7 = arith.remsi %6, %cst_3 : tensor<256xi32, #blocked> loc(#loc8)
    %8 = arith.remsi %4, %cst_2 : tensor<256xi32, #blocked> loc(#loc9)
    %9 = arith.divsi %4, %cst_4 : tensor<256xi32, #blocked> loc(#loc10)
    %10 = arith.extsi %7 : tensor<256xi32, #blocked> to tensor<256xi64, #blocked> loc(#loc11)
    %11 = arith.cmpi slt, %10, %cst_5 : tensor<256xi64, #blocked> loc(#loc11)
    %12 = arith.cmpi slt, %10, %cst_6 : tensor<256xi64, #blocked> loc(#loc12)
    %13 = arith.andi %12, %11 : tensor<256xi1, #blocked> loc(#loc13)
    %14 = arith.muli %7, %cst_2 : tensor<256xi32, #blocked> loc(#loc14)
    %15 = arith.addi %8, %14 : tensor<256xi32, #blocked> loc(#loc15)
    %16 = arith.muli %9, %cst_7 : tensor<256xi32, #blocked> loc(#loc16)
    %17 = arith.addi %15, %16 : tensor<256xi32, #blocked> loc(#loc17)
    %18 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc18)
    %19 = tt.addptr %18, %17 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc18)
    %20 = arith.andi %13, %5 : tensor<256xi1, #blocked> loc(#loc19)
    %21 = tt.load %19, %20, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc20)
    %22 = arith.cmpi sge, %10, %cst_6 : tensor<256xi64, #blocked> loc(#loc21)
    %23 = arith.andi %22, %11 : tensor<256xi1, #blocked> loc(#loc22)
    %24 = arith.addi %7, %cst_8 : tensor<256xi32, #blocked> loc(#loc23)
    %25 = arith.muli %24, %cst_2 : tensor<256xi32, #blocked> loc(#loc24)
    %26 = arith.addi %8, %25 : tensor<256xi32, #blocked> loc(#loc25)
    %27 = arith.addi %26, %16 : tensor<256xi32, #blocked> loc(#loc26)
    %28 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc27)
    %29 = tt.addptr %28, %27 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc27)
    %30 = arith.andi %23, %5 : tensor<256xi1, #blocked> loc(#loc28)
    %31 = tt.load %29, %30, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc29)
    %32 = arith.subf %cst, %31 : tensor<256xf32, #blocked> loc(#loc67)
    %33 = math.exp %32 : tensor<256xf32, #blocked> loc(#loc68)
    %34 = arith.addf %33, %cst_0 : tensor<256xf32, #blocked> loc(#loc69)
    %35 = arith.divf %cst_0, %34 : tensor<256xf32, #blocked> loc(#loc70)
    %36 = arith.mulf %31, %35 : tensor<256xf32, #blocked> loc(#loc35)
    %37 = arith.select %23, %36, %cst : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc36)
    %38 = arith.select %12, %21, %37 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc37)
    %39 = arith.cmpi sge, %10, %cst_5 : tensor<256xi64, #blocked> loc(#loc38)
    %40 = arith.addi %7, %cst_9 : tensor<256xi32, #blocked> loc(#loc39)
    %41 = arith.extsi %40 : tensor<256xi32, #blocked> to tensor<256xi64, #blocked> loc(#loc40)
    %42 = arith.cmpi slt, %41, %cst_6 : tensor<256xi64, #blocked> loc(#loc40)
    %43 = arith.andi %42, %39 : tensor<256xi1, #blocked> loc(#loc41)
    %44 = arith.muli %40, %cst_2 : tensor<256xi32, #blocked> loc(#loc42)
    %45 = arith.addi %8, %44 : tensor<256xi32, #blocked> loc(#loc43)
    %46 = arith.addi %45, %16 : tensor<256xi32, #blocked> loc(#loc44)
    %47 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc45)
    %48 = tt.addptr %47, %46 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc45)
    %49 = arith.andi %43, %5 : tensor<256xi1, #blocked> loc(#loc46)
    %50 = tt.load %48, %49, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc47)
    %51 = arith.cmpi sge, %41, %cst_6 : tensor<256xi64, #blocked> loc(#loc48)
    %52 = arith.andi %51, %39 : tensor<256xi1, #blocked> loc(#loc49)
    %53 = arith.addi %40, %cst_8 : tensor<256xi32, #blocked> loc(#loc50)
    %54 = arith.muli %53, %cst_2 : tensor<256xi32, #blocked> loc(#loc51)
    %55 = arith.addi %8, %54 : tensor<256xi32, #blocked> loc(#loc52)
    %56 = arith.addi %55, %16 : tensor<256xi32, #blocked> loc(#loc53)
    %57 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc54)
    %58 = tt.addptr %57, %56 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc54)
    %59 = arith.andi %52, %5 : tensor<256xi1, #blocked> loc(#loc55)
    %60 = tt.load %58, %59, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc56)
    %61 = arith.subf %cst, %60 : tensor<256xf32, #blocked> loc(#loc71)
    %62 = math.exp %61 : tensor<256xf32, #blocked> loc(#loc72)
    %63 = arith.addf %62, %cst_0 : tensor<256xf32, #blocked> loc(#loc73)
    %64 = arith.divf %cst_0, %63 : tensor<256xf32, #blocked> loc(#loc74)
    %65 = arith.mulf %60, %64 : tensor<256xf32, #blocked> loc(#loc58)
    %66 = arith.select %52, %65, %cst : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc59)
    %67 = arith.select %42, %50, %66 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc60)
    %68 = arith.select %39, %67, %cst : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc61)
    %69 = arith.select %11, %38, %68 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc75)
    %70 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc64)
    %71 = tt.addptr %70, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc64)
    tt.store %71, %69, %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc65)
    tt.return loc(#loc66)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":21:28)
#loc3 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":21:33)
#loc4 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":22:36)
#loc5 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":22:23)
#loc6 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":23:21)
#loc7 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":24:21)
#loc8 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":24:27)
#loc9 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":25:19)
#loc10 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":26:19)
#loc11 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":32:18)
#loc12 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":37:18)
#loc13 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":38:19)
#loc14 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":39:40)
#loc15 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":39:36)
#loc16 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":39:49)
#loc17 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":39:46)
#loc18 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":39:31)
#loc19 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":39:62)
#loc20 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":39:54)
#loc21 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":40:20)
#loc22 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":43:20)
#loc23 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":44:48)
#loc24 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":44:40)
#loc25 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":44:36)
#loc26 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":44:55)
#loc27 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":44:31)
#loc28 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":44:71)
#loc29 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":44:63)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc31 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":45:23)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc35 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":46:20)
#loc36 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":48:35)
#loc37 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":49:34)
#loc38 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":52:20)
#loc39 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":55:19)
#loc40 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":59:20)
#loc41 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":60:20)
#loc42 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":61:40)
#loc43 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":61:36)
#loc44 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":61:53)
#loc45 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":61:31)
#loc46 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":61:69)
#loc47 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":61:61)
#loc48 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":62:21)
#loc49 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":65:20)
#loc50 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":66:48)
#loc51 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":66:40)
#loc52 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":66:36)
#loc53 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":66:62)
#loc54 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":66:31)
#loc55 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":66:78)
#loc56 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":66:70)
#loc57 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":67:23)
#loc58 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":68:20)
#loc59 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":70:35)
#loc60 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":71:35)
#loc61 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":73:35)
#loc62 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":74:34)
#loc63 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":51:34)
#loc64 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":75:25)
#loc65 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":75:37)
#loc66 = loc("inductor_cache/bm/cbmgoryeek5a36xbfhb5aqe254xud5aur5hragiajvxzx5cvqmrw.py":75:4)
#loc67 = loc(callsite(#loc30 at #loc31))
#loc68 = loc(callsite(#loc32 at #loc31))
#loc69 = loc(callsite(#loc33 at #loc31))
#loc70 = loc(callsite(#loc34 at #loc31))
#loc71 = loc(callsite(#loc30 at #loc57))
#loc72 = loc(callsite(#loc32 at #loc57))
#loc73 = loc(callsite(#loc33 at #loc57))
#loc74 = loc(callsite(#loc34 at #loc57))
#loc75 = loc(fused[#loc62, #loc63])
