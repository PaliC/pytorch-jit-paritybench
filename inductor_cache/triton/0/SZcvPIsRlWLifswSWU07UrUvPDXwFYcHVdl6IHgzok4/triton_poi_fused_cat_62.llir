; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_62(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %17 = sdiv i32 %.frozen, 832, !dbg !14
  %18 = mul i32 %17, 832, !dbg !15
  %.decomposed = sub i32 %.frozen, %18, !dbg !15
  %19 = icmp slt i32 %.decomposed, 256, !dbg !16
  %20 = shl nsw i32 %17, 8, !dbg !17
  %21 = add nsw i32 %20, %.decomposed, !dbg !18
  %22 = sext i32 %21 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !19
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #1, !dbg !20
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !20
  %29 = sext i32 %.decomposed to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !21
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #1, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !22
  %36 = add nsw i32 %.decomposed, -256, !dbg !23
  %37 = icmp ult i32 %36, 320, !dbg !23
  %38 = mul nsw i32 %17, 320, !dbg !24
  %39 = add nsw i32 %38, %36, !dbg !25
  %40 = sext i32 %39 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !26
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #1, !dbg !27
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !27
  %47 = sext i32 %36 to i64, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !28
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #1, !dbg !29
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !29
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !29
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !29
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !29
  %54 = add nsw i32 %.decomposed, -576, !dbg !30
  %55 = icmp ult i32 %54, 128, !dbg !30
  %56 = shl nsw i32 %17, 7, !dbg !31
  %57 = add nsw i32 %56, %54, !dbg !32
  %58 = sext i32 %57 to i64, !dbg !33
  %59 = getelementptr float, ptr addrspace(1) %4, i64 %58, !dbg !33
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #1, !dbg !34
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !34
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !34
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !34
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !34
  %65 = sext i32 %54 to i64, !dbg !35
  %66 = getelementptr float, ptr addrspace(1) %5, i64 %65, !dbg !35
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #1, !dbg !36
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !36
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !36
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !36
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !36
  %72 = icmp sgt i32 %.decomposed, 703, !dbg !37
  %73 = add nsw i32 %.decomposed, -704, !dbg !38
  %74 = add nsw i32 %56, %73, !dbg !39
  %75 = sext i32 %74 to i64, !dbg !40
  %76 = getelementptr float, ptr addrspace(1) %6, i64 %75, !dbg !40
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 %72, i32 0, i1 %72, i32 0, i1 %72, i32 0, i1 %72, i32 0, i1 %72) #1, !dbg !41
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !41
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !41
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !41
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !41
  %82 = sext i32 %73 to i64, !dbg !42
  %83 = getelementptr float, ptr addrspace(1) %7, i64 %82, !dbg !42
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %72, i32 0, i1 %72, i32 0, i1 %72, i32 0, i1 %72, i32 0, i1 %72) #1, !dbg !43
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !43
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !43
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !43
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !43
  %89 = insertelement <16 x i32> poison, i32 %81, i64 0, !dbg !41
  %90 = insertelement <16 x i32> %89, i32 %80, i64 1, !dbg !41
  %91 = insertelement <16 x i32> %90, i32 %79, i64 2, !dbg !41
  %92 = insertelement <16 x i32> %91, i32 %78, i64 3, !dbg !41
  %93 = insertelement <16 x i32> %92, i32 %64, i64 4, !dbg !41
  %94 = insertelement <16 x i32> %93, i32 %63, i64 5, !dbg !41
  %95 = insertelement <16 x i32> %94, i32 %62, i64 6, !dbg !41
  %96 = insertelement <16 x i32> %95, i32 %61, i64 7, !dbg !41
  %97 = insertelement <16 x i32> %96, i32 %46, i64 8, !dbg !41
  %98 = insertelement <16 x i32> %97, i32 %45, i64 9, !dbg !41
  %99 = insertelement <16 x i32> %98, i32 %44, i64 10, !dbg !41
  %100 = insertelement <16 x i32> %99, i32 %43, i64 11, !dbg !41
  %101 = insertelement <16 x i32> %100, i32 %28, i64 12, !dbg !41
  %102 = insertelement <16 x i32> %101, i32 %27, i64 13, !dbg !41
  %103 = insertelement <16 x i32> %102, i32 %26, i64 14, !dbg !41
  %104 = insertelement <16 x i32> %103, i32 %25, i64 15, !dbg !41
  %105 = bitcast <16 x i32> %104 to <16 x float>, !dbg !41
  %106 = insertelement <16 x i32> poison, i32 %88, i64 0, !dbg !43
  %107 = insertelement <16 x i32> %106, i32 %87, i64 1, !dbg !43
  %108 = insertelement <16 x i32> %107, i32 %86, i64 2, !dbg !43
  %109 = insertelement <16 x i32> %108, i32 %85, i64 3, !dbg !43
  %110 = insertelement <16 x i32> %109, i32 %71, i64 4, !dbg !43
  %111 = insertelement <16 x i32> %110, i32 %70, i64 5, !dbg !43
  %112 = insertelement <16 x i32> %111, i32 %69, i64 6, !dbg !43
  %113 = insertelement <16 x i32> %112, i32 %68, i64 7, !dbg !43
  %114 = insertelement <16 x i32> %113, i32 %53, i64 8, !dbg !43
  %115 = insertelement <16 x i32> %114, i32 %52, i64 9, !dbg !43
  %116 = insertelement <16 x i32> %115, i32 %51, i64 10, !dbg !43
  %117 = insertelement <16 x i32> %116, i32 %50, i64 11, !dbg !43
  %118 = insertelement <16 x i32> %117, i32 %35, i64 12, !dbg !43
  %119 = insertelement <16 x i32> %118, i32 %34, i64 13, !dbg !43
  %120 = insertelement <16 x i32> %119, i32 %33, i64 14, !dbg !43
  %121 = insertelement <16 x i32> %120, i32 %32, i64 15, !dbg !43
  %122 = bitcast <16 x i32> %121 to <16 x float>, !dbg !43
  %123 = fadd <16 x float> %105, %122, !dbg !44
  %124 = fcmp olt <16 x float> %123, zeroinitializer, !dbg !45
  %125 = extractelement <16 x i1> %124, i64 15, !dbg !49
  %126 = extractelement <16 x float> %123, i64 15, !dbg !49
  %127 = select i1 %125, float 0.000000e+00, float %126, !dbg !49
  %128 = extractelement <16 x i1> %124, i64 14, !dbg !49
  %129 = extractelement <16 x float> %123, i64 14, !dbg !49
  %130 = select i1 %128, float 0.000000e+00, float %129, !dbg !49
  %131 = extractelement <16 x i1> %124, i64 13, !dbg !49
  %132 = extractelement <16 x float> %123, i64 13, !dbg !49
  %133 = select i1 %131, float 0.000000e+00, float %132, !dbg !49
  %134 = extractelement <16 x i1> %124, i64 12, !dbg !49
  %135 = extractelement <16 x float> %123, i64 12, !dbg !49
  %136 = select i1 %134, float 0.000000e+00, float %135, !dbg !49
  %137 = extractelement <16 x i1> %124, i64 11, !dbg !51
  %138 = extractelement <16 x float> %123, i64 11, !dbg !51
  %139 = select i1 %137, float 0.000000e+00, float %138, !dbg !51
  %140 = extractelement <16 x i1> %124, i64 10, !dbg !51
  %141 = extractelement <16 x float> %123, i64 10, !dbg !51
  %142 = select i1 %140, float 0.000000e+00, float %141, !dbg !51
  %143 = extractelement <16 x i1> %124, i64 9, !dbg !51
  %144 = extractelement <16 x float> %123, i64 9, !dbg !51
  %145 = select i1 %143, float 0.000000e+00, float %144, !dbg !51
  %146 = extractelement <16 x i1> %124, i64 8, !dbg !51
  %147 = extractelement <16 x float> %123, i64 8, !dbg !51
  %148 = select i1 %146, float 0.000000e+00, float %147, !dbg !51
  %149 = extractelement <16 x i1> %124, i64 7, !dbg !53
  %150 = extractelement <16 x float> %123, i64 7, !dbg !53
  %151 = select i1 %149, float 0.000000e+00, float %150, !dbg !53
  %152 = extractelement <16 x i1> %124, i64 6, !dbg !53
  %153 = extractelement <16 x float> %123, i64 6, !dbg !53
  %154 = select i1 %152, float 0.000000e+00, float %153, !dbg !53
  %155 = extractelement <16 x i1> %124, i64 5, !dbg !53
  %156 = extractelement <16 x float> %123, i64 5, !dbg !53
  %157 = select i1 %155, float 0.000000e+00, float %156, !dbg !53
  %158 = extractelement <16 x i1> %124, i64 4, !dbg !53
  %159 = extractelement <16 x float> %123, i64 4, !dbg !53
  %160 = select i1 %158, float 0.000000e+00, float %159, !dbg !53
  %161 = extractelement <16 x i1> %124, i64 3, !dbg !55
  %162 = extractelement <16 x float> %123, i64 3, !dbg !55
  %163 = select i1 %161, float 0.000000e+00, float %162, !dbg !55
  %164 = extractelement <16 x i1> %124, i64 2, !dbg !55
  %165 = extractelement <16 x float> %123, i64 2, !dbg !55
  %166 = select i1 %164, float 0.000000e+00, float %165, !dbg !55
  %167 = extractelement <16 x i1> %124, i64 1, !dbg !55
  %168 = extractelement <16 x float> %123, i64 1, !dbg !55
  %169 = select i1 %167, float 0.000000e+00, float %168, !dbg !55
  %170 = extractelement <16 x i1> %124, i64 0, !dbg !55
  %171 = extractelement <16 x float> %123, i64 0, !dbg !55
  %172 = select i1 %170, float 0.000000e+00, float %171, !dbg !55
  %173 = select i1 %72, float %163, float 0.000000e+00, !dbg !56
  %174 = select i1 %72, float %166, float 0.000000e+00, !dbg !56
  %175 = select i1 %72, float %169, float 0.000000e+00, !dbg !56
  %176 = select i1 %72, float %172, float 0.000000e+00, !dbg !56
  %177 = select i1 %55, float %151, float %173, !dbg !57
  %178 = select i1 %55, float %154, float %174, !dbg !57
  %179 = select i1 %55, float %157, float %175, !dbg !57
  %180 = select i1 %55, float %160, float %176, !dbg !57
  %181 = select i1 %37, float %139, float %177, !dbg !57
  %182 = select i1 %37, float %142, float %178, !dbg !57
  %183 = select i1 %37, float %145, float %179, !dbg !57
  %184 = select i1 %37, float %148, float %180, !dbg !57
  %185 = select i1 %19, float %127, float %181, !dbg !57
  %186 = select i1 %19, float %130, float %182, !dbg !57
  %187 = select i1 %19, float %133, float %183, !dbg !57
  %188 = select i1 %19, float %136, float %184, !dbg !57
  %189 = sext i32 %16 to i64, !dbg !58
  %190 = getelementptr float, ptr addrspace(1) %8, i64 %189, !dbg !58
  %191 = bitcast float %185 to i32, !dbg !59
  %192 = bitcast float %186 to i32, !dbg !59
  %193 = bitcast float %187 to i32, !dbg !59
  %194 = bitcast float %188 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %191, i32 %192, i32 %193, i32 %194, ptr addrspace(1) %190, i1 true) #1, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyema6duncc66k33xilo4wzwilo4xbgmmshbheivo6boqn55wprp.py", directory: "inductor_cache/ye")
!4 = !{ptr @triton_poi_fused_cat_62, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_62, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_62", linkageName: "triton_poi_fused_cat_62", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 46, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 42, column: 20, scope: !7)
!24 = !DILocation(line: 43, column: 35, scope: !7)
!25 = !DILocation(line: 43, column: 41, scope: !7)
!26 = !DILocation(line: 43, column: 31, scope: !7)
!27 = !DILocation(line: 43, column: 56, scope: !7)
!28 = !DILocation(line: 44, column: 31, scope: !7)
!29 = !DILocation(line: 44, column: 45, scope: !7)
!30 = !DILocation(line: 53, column: 20, scope: !7)
!31 = !DILocation(line: 54, column: 35, scope: !7)
!32 = !DILocation(line: 54, column: 41, scope: !7)
!33 = !DILocation(line: 54, column: 31, scope: !7)
!34 = !DILocation(line: 54, column: 56, scope: !7)
!35 = !DILocation(line: 55, column: 31, scope: !7)
!36 = !DILocation(line: 55, column: 45, scope: !7)
!37 = !DILocation(line: 61, column: 20, scope: !7)
!38 = !DILocation(line: 64, column: 50, scope: !7)
!39 = !DILocation(line: 64, column: 41, scope: !7)
!40 = !DILocation(line: 64, column: 31, scope: !7)
!41 = !DILocation(line: 64, column: 56, scope: !7)
!42 = !DILocation(line: 65, column: 31, scope: !7)
!43 = !DILocation(line: 65, column: 45, scope: !7)
!44 = !DILocation(line: 66, column: 20, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 68, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !50)
!50 = !DILocation(line: 36, column: 40, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !52)
!52 = !DILocation(line: 47, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !54)
!54 = !DILocation(line: 58, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!56 = !DILocation(line: 70, column: 35, scope: !7)
!57 = !DILocation(line: 0, scope: !7)
!58 = !DILocation(line: 74, column: 25, scope: !7)
!59 = !DILocation(line: 74, column: 37, scope: !7)
!60 = !DILocation(line: 74, column: 4, scope: !7)
