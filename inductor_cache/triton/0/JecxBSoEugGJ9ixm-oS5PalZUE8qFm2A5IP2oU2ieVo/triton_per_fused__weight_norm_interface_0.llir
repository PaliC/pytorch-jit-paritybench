; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %9, 3, !dbg !12
  %10 = and i32 %.lobit1, 31, !dbg !12
  %11 = and i32 %9, 31, !dbg !12
  %12 = or disjoint i32 %8, %10, !dbg !13
  %13 = icmp slt i32 %12, 64, !dbg !14
  %14 = shl i32 %9, 2, !dbg !15
  %15 = and i32 %14, 28, !dbg !15
  %16 = icmp ne i32 %15, 28, !dbg !16
  %17 = mul i32 %12, 28, !dbg !17
  %18 = add i32 %17, %15, !dbg !18
  %19 = sext i32 %18 to i64, !dbg !19
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !19
  %21 = and i1 %16, %13, !dbg !20
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !21
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !21
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !21
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !21
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !21
  %27 = bitcast i32 %23 to float, !dbg !21
  %28 = bitcast i32 %24 to float, !dbg !21
  %29 = bitcast i32 %25 to float, !dbg !21
  %30 = bitcast i32 %26 to float, !dbg !21
  %31 = sext i32 %12 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %13) #5, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %13) #5, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %13) #5, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %13) #5, !dbg !23
  %37 = fmul float %27, %27, !dbg !24
  %38 = fmul float %28, %28, !dbg !24
  %39 = fmul float %29, %29, !dbg !24
  %40 = fmul float %30, %30, !dbg !24
  %41 = fadd float %37, %38, !dbg !25
  %42 = fadd float %39, %41, !dbg !25
  %43 = fadd float %40, %42, !dbg !25
  %44 = select i1 %21, float %43, float 0.000000e+00, !dbg !25
  %45 = bitcast float %44 to i32, !dbg !30
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 4, i32 31), !dbg !30
  %47 = bitcast i32 %46 to float, !dbg !30
  %48 = fadd float %44, %47, !dbg !25
  %49 = bitcast float %48 to i32, !dbg !30
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 2, i32 31), !dbg !30
  %51 = bitcast i32 %50 to float, !dbg !30
  %52 = fadd float %48, %51, !dbg !25
  %53 = bitcast float %52 to i32, !dbg !30
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 1, i32 31), !dbg !30
  %55 = bitcast i32 %54 to float, !dbg !30
  %56 = fadd float %52, %55, !dbg !25
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !31
  %58 = bitcast float %56 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %60 = load float, ptr addrspace(3) %59, align 4, !dbg !31
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i = icmp eq i32 %61, 0, !dbg !31
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i = icmp eq i32 %62, 0, !dbg !31
  br i1 %.not.i, label %68, label %63, !dbg !31

63:                                               ; preds = %6
  br i1 %.not1.i, label %66, label %64, !dbg !31

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

68:                                               ; preds = %6
  br i1 %.not1.i, label %71, label %69, !dbg !31

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %64, %66, %69, %71
  %.0.i = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !31
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i18 = icmp eq i32 %79, 0, !dbg !31
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i21 = icmp eq i32 %80, 0, !dbg !31
  br i1 %.not.i18, label %86, label %81, !dbg !31

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %84, label %82, !dbg !31

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #5, !dbg !31
  br label %__nv_sqrtf.exit22, !dbg !31

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #5, !dbg !31
  br label %__nv_sqrtf.exit22, !dbg !31

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %89, label %87, !dbg !31

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #5, !dbg !31
  br label %__nv_sqrtf.exit22, !dbg !31

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #5, !dbg !31
  br label %__nv_sqrtf.exit22, !dbg !31

__nv_sqrtf.exit22:                                ; preds = %82, %84, %87, %89
  %.0.i20 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !31
  %91 = bitcast i32 %36 to float, !dbg !23
  %92 = or disjoint i32 %8, %11, !dbg !13
  %93 = icmp slt i32 %92, 64, !dbg !14
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float %.0.i20) #5, !dbg !32
  %95 = fmul float %94, %27, !dbg !33
  %96 = fmul float %94, %28, !dbg !33
  %97 = fmul float %94, %29, !dbg !33
  %98 = fmul float %94, %30, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %99 = sext i32 %92 to i64, !dbg !35
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !35
  %101 = and i32 %9, 224, !dbg !36
  %102 = icmp eq i32 %101, 0, !dbg !36
  %103 = bitcast float %.0.i to i32, !dbg !36
  %104 = and i1 %102, %93, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %103, ptr addrspace(1) %100, i1 %104) #5, !dbg !36
  %105 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !37
  %106 = bitcast float %95 to i32, !dbg !38
  %107 = bitcast float %96 to i32, !dbg !38
  %108 = bitcast float %97 to i32, !dbg !38
  %109 = bitcast float %98 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %106, i32 %107, i32 %108, i32 %109, ptr addrspace(1) %105, i1 %21) #5, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "curekjiinnvjug2udb7b4v26nirqjukakco4lwfhjclb4q3eoege.py", directory: "inductor_cache/ur")
!4 = !{ptr @triton_per_fused__weight_norm_interface_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_0", linkageName: "triton_per_fused__weight_norm_interface_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 38, scope: !7)
!18 = !DILocation(line: 31, column: 35, scope: !7)
!19 = !DILocation(line: 31, column: 30, scope: !7)
!20 = !DILocation(line: 31, column: 51, scope: !7)
!21 = !DILocation(line: 31, column: 43, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 18, scope: !7)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!29 = !DILocation(line: 36, column: 24, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 37, column: 26, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
!35 = !DILocation(line: 41, column: 28, scope: !7)
!36 = !DILocation(line: 41, column: 39, scope: !7)
!37 = !DILocation(line: 42, column: 25, scope: !7)
!38 = !DILocation(line: 42, column: 44, scope: !7)
!39 = !DILocation(line: 42, column: 4, scope: !7)
