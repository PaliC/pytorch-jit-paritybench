; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_7 = internal constant [8 x i8] c"unknown\00"
@assertFile_7 = internal constant [74 x i8] c"inductor_cache/r7/cr73h5yd2infalhxg5wygdomfaoa6o4exozrhass7nuhcf53huik.py\00"
@assertMessage_7 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp95 < 4\00"
@assertFunc_6 = internal constant [8 x i8] c"unknown\00"
@assertFile_6 = internal constant [74 x i8] c"inductor_cache/r7/cr73h5yd2infalhxg5wygdomfaoa6o4exozrhass7nuhcf53huik.py\00"
@assertMessage_6 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp90 < 4\00"
@assertFunc_5 = internal constant [8 x i8] c"unknown\00"
@assertFile_5 = internal constant [74 x i8] c"inductor_cache/r7/cr73h5yd2infalhxg5wygdomfaoa6o4exozrhass7nuhcf53huik.py\00"
@assertMessage_5 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp82 < 4\00"
@assertFunc_4 = internal constant [8 x i8] c"unknown\00"
@assertFile_4 = internal constant [74 x i8] c"inductor_cache/r7/cr73h5yd2infalhxg5wygdomfaoa6o4exozrhass7nuhcf53huik.py\00"
@assertMessage_4 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp77 < 4\00"
@assertFunc_3 = internal constant [8 x i8] c"unknown\00"
@assertFile_3 = internal constant [74 x i8] c"inductor_cache/r7/cr73h5yd2infalhxg5wygdomfaoa6o4exozrhass7nuhcf53huik.py\00"
@assertMessage_3 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp70 < 4\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/r7/cr73h5yd2infalhxg5wygdomfaoa6o4exozrhass7nuhcf53huik.py\00"
@assertMessage_2 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp64 < 4\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/r7/cr73h5yd2infalhxg5wygdomfaoa6o4exozrhass7nuhcf53huik.py\00"
@assertMessage_1 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp58 < 4\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/r7/cr73h5yd2infalhxg5wygdomfaoa6o4exozrhass7nuhcf53huik.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp52 < 4\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_grid_sampler_2d_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !11 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %6 = shl i32 %5, 7, !dbg !13
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %8 = and i32 %7, 127, !dbg !14
  %9 = or disjoint i32 %6, %8, !dbg !15
  %10 = icmp slt i32 %9, 256, !dbg !16
  %.frozen = freeze i32 %9, !dbg !17
  %11 = sdiv i32 %.frozen, 16, !dbg !17
  %12 = mul i32 %11, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %12, !dbg !18
  %13 = sdiv i32 %9, 64, !dbg !19
  %14 = shl nsw i32 %.decomposed, 1, !dbg !20
  %15 = shl nsw i32 %13, 5, !dbg !21
  %16 = add nsw i32 %14, %15, !dbg !22
  %17 = sext i32 %16 to i64, !dbg !23
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !23
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %10) #4, !dbg !24
  %20 = or disjoint i32 %14, 1, !dbg !25
  %21 = add nsw i32 %20, %15, !dbg !26
  %22 = sext i32 %21 to i64, !dbg !27
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !27
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %10) #4, !dbg !28
  %25 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %26 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %27 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !28
  %28 = insertelement <2 x i32> %27, i32 %19, i64 1, !dbg !28
  %29 = bitcast <2 x i32> %28 to <2 x float>, !dbg !28
  %30 = fmul <2 x float> %29, splat (float 2.000000e+00), !dbg !31
  %31 = fadd <2 x float> %30, splat (float 1.500000e+00), !dbg !32
  %32 = fcmp ole <2 x float> %31, zeroinitializer, !dbg !33
  %33 = select <2 x i1> %32, <2 x float> zeroinitializer, <2 x float> %31, !dbg !33
  %34 = fcmp olt <2 x float> %33, splat (float 3.000000e+00), !dbg !37
  %35 = fcmp uno <2 x float> %33, zeroinitializer, !dbg !39
  %36 = or <2 x i1> %34, %35, !dbg !40
  %37 = select <2 x i1> %36, <2 x float> %33, <2 x float> splat (float 3.000000e+00), !dbg !41
  %38 = extractelement <2 x float> %37, i64 1, !dbg !41
  %39 = tail call float @llvm.nvvm.floor.ftz.f(float %38), !dbg !29
  %40 = tail call float @llvm.nvvm.floor.f(float %38), !dbg !29
  %41 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !30
  %42 = insertelement <2 x i32> %41, i32 %25, i64 1, !dbg !30
  %43 = icmp eq <2 x i32> %42, zeroinitializer, !dbg !30
  %44 = extractelement <2 x float> %37, i64 0, !dbg !30
  %45 = tail call float @llvm.nvvm.floor.ftz.f(float %44), !dbg !30
  %46 = tail call float @llvm.nvvm.floor.f(float %44), !dbg !30
  %47 = insertelement <2 x float> poison, float %46, i64 0, !dbg !30
  %48 = insertelement <2 x float> %47, float %40, i64 1, !dbg !30
  %49 = insertelement <2 x float> poison, float %45, i64 0, !dbg !30
  %50 = insertelement <2 x float> %49, float %39, i64 1, !dbg !30
  %51 = select <2 x i1> %43, <2 x float> %48, <2 x float> %50, !dbg !30
  %52 = extractelement <2 x float> %51, i64 1, !dbg !30
  %53 = fcmp oge float %52, 0.000000e+00, !dbg !42
  %54 = fcmp olt float %52, 4.000000e+00, !dbg !43
  %55 = extractelement <2 x float> %51, i64 0, !dbg !44
  %56 = fcmp oge float %55, 0.000000e+00, !dbg !44
  %57 = fcmp olt float %55, 4.000000e+00, !dbg !45
  %58 = and i1 %56, %57, !dbg !46
  %59 = and i1 %54, %58, !dbg !47
  %60 = and i1 %53, %59, !dbg !48
  %61 = fadd float %52, 1.000000e+00, !dbg !49
  %62 = fadd float %55, 1.000000e+00, !dbg !50
  %63 = fcmp oge float %61, 0.000000e+00, !dbg !51
  %64 = fcmp olt float %61, 4.000000e+00, !dbg !52
  %65 = and i1 %64, %58, !dbg !53
  %66 = and i1 %63, %65, !dbg !54
  %67 = fcmp oge float %62, 0.000000e+00, !dbg !55
  %68 = fcmp olt float %62, 4.000000e+00, !dbg !56
  %69 = and i1 %67, %68, !dbg !57
  %70 = and i1 %54, %69, !dbg !58
  %71 = and i1 %53, %70, !dbg !59
  %72 = fptosi float %55 to i64, !dbg !60
  %73 = select i1 %60, i64 %72, i64 0, !dbg !61
  %74 = lshr i64 %73, 61, !dbg !62
  %75 = and i64 %74, 4, !dbg !62
  %76 = add i64 %75, %73, !dbg !62
  %77 = icmp ugt i64 %76, 3, !dbg !63
  %.not2 = and i1 %10, %77, !dbg !64
  br i1 %.not2, label %78, label %79, !dbg !64

78:                                               ; preds = %4
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 81, ptr nonnull @assertFunc_0, i64 1), !dbg !64
  unreachable, !dbg !64

79:                                               ; preds = %4
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %80 = fptosi float %52 to i64, !dbg !65
  %81 = select i1 %60, i64 %80, i64 0, !dbg !66
  %82 = lshr i64 %81, 61, !dbg !67
  %83 = and i64 %82, 4, !dbg !67
  %84 = add i64 %83, %81, !dbg !67
  %85 = icmp ugt i64 %84, 3, !dbg !68
  %.not3 = and i1 %10, %85, !dbg !69
  br i1 %.not3, label %86, label %87, !dbg !69

86:                                               ; preds = %79
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 87, ptr nonnull @assertFunc_1, i64 1), !dbg !69
  unreachable, !dbg !69

87:                                               ; preds = %79
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %88 = shl nsw i32 %11, 4, !dbg !70
  %89 = sext i32 %88 to i64, !dbg !71
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !72
  %.idx = shl i64 %76, 4, !dbg !72
  %91 = getelementptr i8, ptr addrspace(1) %90, i64 %.idx, !dbg !72
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %89, !dbg !72
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %10) #4, !dbg !73
  %94 = select i1 %66, i64 %72, i64 0, !dbg !74
  %95 = lshr i64 %94, 61, !dbg !75
  %96 = and i64 %95, 4, !dbg !75
  %97 = add i64 %96, %94, !dbg !75
  %98 = icmp ugt i64 %97, 3, !dbg !76
  %.not4 = and i1 %10, %98, !dbg !77
  br i1 %.not4, label %99, label %100, !dbg !77

99:                                               ; preds = %87
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 93, ptr nonnull @assertFunc_2, i64 1), !dbg !77
  unreachable, !dbg !77

100:                                              ; preds = %87
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %101 = fptosi float %61 to i64, !dbg !78
  %102 = select i1 %66, i64 %101, i64 0, !dbg !79
  %103 = lshr i64 %102, 61, !dbg !80
  %104 = and i64 %103, 4, !dbg !80
  %105 = add i64 %104, %102, !dbg !80
  %106 = icmp ugt i64 %105, 3, !dbg !81
  %.not5 = and i1 %10, %106, !dbg !82
  br i1 %.not5, label %107, label %108, !dbg !82

107:                                              ; preds = %100
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 99, ptr nonnull @assertFunc_3, i64 1), !dbg !82
  unreachable, !dbg !82

108:                                              ; preds = %100
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !83
  %.idx6 = shl i64 %97, 4, !dbg !83
  %110 = getelementptr i8, ptr addrspace(1) %109, i64 %.idx6, !dbg !83
  %111 = getelementptr float, ptr addrspace(1) %110, i64 %89, !dbg !83
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %10) #4, !dbg !84
  %113 = fptosi float %62 to i64, !dbg !85
  %114 = select i1 %71, i64 %113, i64 0, !dbg !86
  %115 = lshr i64 %114, 61, !dbg !87
  %116 = and i64 %115, 4, !dbg !87
  %117 = add i64 %116, %114, !dbg !87
  %118 = icmp ugt i64 %117, 3, !dbg !88
  %.not7 = and i1 %10, %118, !dbg !89
  br i1 %.not7, label %119, label %120, !dbg !89

119:                                              ; preds = %108
  tail call void @__assertfail(ptr nonnull @assertMessage_4, ptr nonnull @assertFile_4, i32 106, ptr nonnull @assertFunc_4, i64 1), !dbg !89
  unreachable, !dbg !89

120:                                              ; preds = %108
  tail call void @llvm.nvvm.barrier0(), !dbg !89
  %121 = select i1 %71, i64 %80, i64 0, !dbg !90
  %122 = lshr i64 %121, 61, !dbg !91
  %123 = and i64 %122, 4, !dbg !91
  %124 = add i64 %123, %121, !dbg !91
  %125 = icmp ugt i64 %124, 3, !dbg !92
  %.not8 = and i1 %10, %125, !dbg !93
  br i1 %.not8, label %126, label %127, !dbg !93

126:                                              ; preds = %120
  tail call void @__assertfail(ptr nonnull @assertMessage_5, ptr nonnull @assertFile_5, i32 111, ptr nonnull @assertFunc_5, i64 1), !dbg !93
  unreachable, !dbg !93

127:                                              ; preds = %120
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %128 = getelementptr float, ptr addrspace(1) %2, i64 %124, !dbg !94
  %.idx9 = shl i64 %117, 4, !dbg !94
  %129 = getelementptr i8, ptr addrspace(1) %128, i64 %.idx9, !dbg !94
  %130 = getelementptr float, ptr addrspace(1) %129, i64 %89, !dbg !94
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %10) #4, !dbg !95
  %132 = and i1 %64, %69, !dbg !96
  %133 = and i1 %63, %132, !dbg !97
  %134 = select i1 %133, i64 %113, i64 0, !dbg !98
  %135 = lshr i64 %134, 61, !dbg !99
  %136 = and i64 %135, 4, !dbg !99
  %137 = add i64 %136, %134, !dbg !99
  %138 = icmp ugt i64 %137, 3, !dbg !100
  %.not10 = and i1 %10, %138, !dbg !101
  br i1 %.not10, label %139, label %140, !dbg !101

139:                                              ; preds = %127
  tail call void @__assertfail(ptr nonnull @assertMessage_6, ptr nonnull @assertFile_6, i32 119, ptr nonnull @assertFunc_6, i64 1), !dbg !101
  unreachable, !dbg !101

140:                                              ; preds = %127
  tail call void @llvm.nvvm.barrier0(), !dbg !101
  %141 = select i1 %133, i64 %101, i64 0, !dbg !102
  %142 = lshr i64 %141, 61, !dbg !103
  %143 = and i64 %142, 4, !dbg !103
  %144 = add i64 %143, %141, !dbg !103
  %145 = icmp ugt i64 %144, 3, !dbg !104
  %.not11 = and i1 %10, %145, !dbg !105
  br i1 %.not11, label %146, label %147, !dbg !105

146:                                              ; preds = %140
  tail call void @__assertfail(ptr nonnull @assertMessage_7, ptr nonnull @assertFile_7, i32 124, ptr nonnull @assertFunc_7, i64 1), !dbg !105
  unreachable, !dbg !105

147:                                              ; preds = %140
  %148 = bitcast i32 %112 to float, !dbg !84
  %149 = bitcast i32 %93 to float, !dbg !73
  %150 = fsub float %61, %38, !dbg !106
  %151 = fsub <2 x float> %37, %51, !dbg !107
  %152 = fsub float %38, %52, !dbg !108
  %153 = fsub float %62, %44, !dbg !109
  %154 = fmul float %152, %153, !dbg !110
  %155 = select i1 %66, float %154, float 0.000000e+00, !dbg !111
  %156 = fmul float %150, %153, !dbg !112
  %157 = select i1 %60, float %156, float 0.000000e+00, !dbg !113
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %158 = getelementptr float, ptr addrspace(1) %2, i64 %144, !dbg !114
  %.idx12 = shl i64 %137, 4, !dbg !114
  %159 = getelementptr i8, ptr addrspace(1) %158, i64 %.idx12, !dbg !114
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %89, !dbg !114
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %10) #4, !dbg !115
  %162 = fmul float %157, %149, !dbg !116
  %163 = fmul float %155, %148, !dbg !117
  %164 = fadd float %162, %163, !dbg !118
  %165 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !95
  %166 = insertelement <2 x i32> %165, i32 %161, i64 1, !dbg !95
  %167 = bitcast <2 x i32> %166 to <2 x float>, !dbg !95
  %168 = shufflevector <2 x float> %151, <2 x float> poison, <2 x i32> <i32 poison, i32 0>, !dbg !119
  %169 = insertelement <2 x float> %168, float %150, i64 0, !dbg !119
  %170 = fmul <2 x float> %151, %169, !dbg !119
  %171 = insertelement <2 x i1> poison, i1 %71, i64 0, !dbg !120
  %172 = insertelement <2 x i1> %171, i1 %133, i64 1, !dbg !120
  %173 = select <2 x i1> %172, <2 x float> %170, <2 x float> zeroinitializer, !dbg !120
  %174 = fmul <2 x float> %173, %167, !dbg !121
  %175 = extractelement <2 x float> %174, i64 0, !dbg !122
  %176 = fadd float %164, %175, !dbg !122
  %177 = extractelement <2 x float> %174, i64 1, !dbg !123
  %178 = fadd float %176, %177, !dbg !123
  %179 = sext i32 %9 to i64, !dbg !124
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !124
  %181 = bitcast float %178 to i32, !dbg !125
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %181, ptr addrspace(1) %180, i1 %10) #4, !dbg !125
  ret void, !dbg !126
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #1

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr73h5yd2infalhxg5wygdomfaoa6o4exozrhass7nuhcf53huik.py", directory: "inductor_cache/r7")
!4 = !{ptr @triton_poi_fused_grid_sampler_2d_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_grid_sampler_2d_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_grid_sampler_2d_1", linkageName: "triton_poi_fused_grid_sampler_2d_1", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 27, column: 19, scope: !11)
!18 = !DILocation(line: 24, column: 19, scope: !11)
!19 = !DILocation(line: 25, column: 19, scope: !11)
!20 = !DILocation(line: 28, column: 32, scope: !11)
!21 = !DILocation(line: 28, column: 40, scope: !11)
!22 = !DILocation(line: 28, column: 37, scope: !11)
!23 = !DILocation(line: 28, column: 30, scope: !11)
!24 = !DILocation(line: 28, column: 45, scope: !11)
!25 = !DILocation(line: 29, column: 35, scope: !11)
!26 = !DILocation(line: 29, column: 42, scope: !11)
!27 = !DILocation(line: 29, column: 31, scope: !11)
!28 = !DILocation(line: 29, column: 50, scope: !11)
!29 = !DILocation(line: 38, column: 27, scope: !11)
!30 = !DILocation(line: 46, column: 28, scope: !11)
!31 = !DILocation(line: 42, column: 20, scope: !11)
!32 = !DILocation(line: 43, column: 20, scope: !11)
!33 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !11, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 44, column: 42, scope: !11)
!37 = !DILocation(line: 110, column: 15, scope: !34, inlinedAt: !38)
!38 = !DILocation(line: 45, column: 42, scope: !11)
!39 = !DILocation(line: 112, column: 21, scope: !34, inlinedAt: !38)
!40 = !DILocation(line: 112, column: 16, scope: !34, inlinedAt: !38)
!41 = !DILocation(line: 113, column: 29, scope: !34, inlinedAt: !38)
!42 = !DILocation(line: 39, column: 20, scope: !11)
!43 = !DILocation(line: 41, column: 19, scope: !11)
!44 = !DILocation(line: 47, column: 21, scope: !11)
!45 = !DILocation(line: 48, column: 20, scope: !11)
!46 = !DILocation(line: 49, column: 20, scope: !11)
!47 = !DILocation(line: 50, column: 20, scope: !11)
!48 = !DILocation(line: 51, column: 20, scope: !11)
!49 = !DILocation(line: 53, column: 19, scope: !11)
!50 = !DILocation(line: 55, column: 20, scope: !11)
!51 = !DILocation(line: 59, column: 21, scope: !11)
!52 = !DILocation(line: 60, column: 20, scope: !11)
!53 = !DILocation(line: 61, column: 20, scope: !11)
!54 = !DILocation(line: 62, column: 20, scope: !11)
!55 = !DILocation(line: 66, column: 21, scope: !11)
!56 = !DILocation(line: 67, column: 20, scope: !11)
!57 = !DILocation(line: 68, column: 20, scope: !11)
!58 = !DILocation(line: 69, column: 20, scope: !11)
!59 = !DILocation(line: 70, column: 20, scope: !11)
!60 = !DILocation(line: 74, column: 21, scope: !11)
!61 = !DILocation(line: 76, column: 35, scope: !11)
!62 = !DILocation(line: 80, column: 35, scope: !11)
!63 = !DILocation(line: 81, column: 38, scope: !11)
!64 = !DILocation(line: 81, column: 62, scope: !11)
!65 = !DILocation(line: 82, column: 20, scope: !11)
!66 = !DILocation(line: 83, column: 35, scope: !11)
!67 = !DILocation(line: 86, column: 35, scope: !11)
!68 = !DILocation(line: 87, column: 38, scope: !11)
!69 = !DILocation(line: 87, column: 62, scope: !11)
!70 = !DILocation(line: 88, column: 52, scope: !11)
!71 = !DILocation(line: 88, column: 49, scope: !11)
!72 = !DILocation(line: 88, column: 31, scope: !11)
!73 = !DILocation(line: 88, column: 57, scope: !11)
!74 = !DILocation(line: 89, column: 35, scope: !11)
!75 = !DILocation(line: 92, column: 35, scope: !11)
!76 = !DILocation(line: 93, column: 38, scope: !11)
!77 = !DILocation(line: 93, column: 62, scope: !11)
!78 = !DILocation(line: 94, column: 21, scope: !11)
!79 = !DILocation(line: 95, column: 35, scope: !11)
!80 = !DILocation(line: 98, column: 35, scope: !11)
!81 = !DILocation(line: 99, column: 38, scope: !11)
!82 = !DILocation(line: 99, column: 62, scope: !11)
!83 = !DILocation(line: 100, column: 31, scope: !11)
!84 = !DILocation(line: 100, column: 57, scope: !11)
!85 = !DILocation(line: 101, column: 21, scope: !11)
!86 = !DILocation(line: 102, column: 35, scope: !11)
!87 = !DILocation(line: 105, column: 35, scope: !11)
!88 = !DILocation(line: 106, column: 38, scope: !11)
!89 = !DILocation(line: 106, column: 62, scope: !11)
!90 = !DILocation(line: 107, column: 35, scope: !11)
!91 = !DILocation(line: 110, column: 35, scope: !11)
!92 = !DILocation(line: 111, column: 38, scope: !11)
!93 = !DILocation(line: 111, column: 62, scope: !11)
!94 = !DILocation(line: 112, column: 31, scope: !11)
!95 = !DILocation(line: 112, column: 57, scope: !11)
!96 = !DILocation(line: 113, column: 20, scope: !11)
!97 = !DILocation(line: 114, column: 20, scope: !11)
!98 = !DILocation(line: 115, column: 35, scope: !11)
!99 = !DILocation(line: 118, column: 35, scope: !11)
!100 = !DILocation(line: 119, column: 38, scope: !11)
!101 = !DILocation(line: 119, column: 62, scope: !11)
!102 = !DILocation(line: 120, column: 35, scope: !11)
!103 = !DILocation(line: 123, column: 35, scope: !11)
!104 = !DILocation(line: 124, column: 38, scope: !11)
!105 = !DILocation(line: 124, column: 62, scope: !11)
!106 = !DILocation(line: 54, column: 20, scope: !11)
!107 = !DILocation(line: 71, column: 20, scope: !11)
!108 = !DILocation(line: 63, column: 19, scope: !11)
!109 = !DILocation(line: 56, column: 20, scope: !11)
!110 = !DILocation(line: 64, column: 20, scope: !11)
!111 = !DILocation(line: 65, column: 35, scope: !11)
!112 = !DILocation(line: 57, column: 20, scope: !11)
!113 = !DILocation(line: 58, column: 35, scope: !11)
!114 = !DILocation(line: 125, column: 31, scope: !11)
!115 = !DILocation(line: 125, column: 57, scope: !11)
!116 = !DILocation(line: 128, column: 21, scope: !11)
!117 = !DILocation(line: 129, column: 21, scope: !11)
!118 = !DILocation(line: 130, column: 22, scope: !11)
!119 = !DILocation(line: 72, column: 20, scope: !11)
!120 = !DILocation(line: 73, column: 35, scope: !11)
!121 = !DILocation(line: 131, column: 21, scope: !11)
!122 = !DILocation(line: 132, column: 22, scope: !11)
!123 = !DILocation(line: 134, column: 22, scope: !11)
!124 = !DILocation(line: 135, column: 28, scope: !11)
!125 = !DILocation(line: 135, column: 41, scope: !11)
!126 = !DILocation(line: 135, column: 4, scope: !11)
