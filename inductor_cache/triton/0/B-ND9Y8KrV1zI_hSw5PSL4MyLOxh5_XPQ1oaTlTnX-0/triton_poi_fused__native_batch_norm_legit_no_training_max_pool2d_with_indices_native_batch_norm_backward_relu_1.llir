; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 1, !dbg !13
  %18 = or disjoint i32 %16, 2, !dbg !13
  %19 = or disjoint i32 %16, 3, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %20 = sdiv i32 %.frozen, 16, !dbg !14
  %21 = mul i32 %20, 16, !dbg !15
  %.decomposed = sub i32 %.frozen, %21, !dbg !15
  %22 = srem i32 %17, 16, !dbg !15
  %23 = srem i32 %18, 16, !dbg !15
  %24 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !16
  %25 = insertelement <2 x i32> %24, i32 %19, i64 1, !dbg !16
  %26 = srem <2 x i32> %25, splat (i32 16), !dbg !16
  %27 = sdiv i32 %16, 256, !dbg !17
  %28 = srem i32 %27, 64, !dbg !18
  %29 = sext i32 %28 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %37 = bitcast i32 %36 to float, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %39 = bitcast i32 %38 to float, !dbg !22
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %41 = bitcast i32 %40 to float, !dbg !22
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %43 = bitcast i32 %42 to float, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !23
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !25
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !26
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !26
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !26
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !26
  %54 = extractelement <2 x i32> %26, i64 0, !dbg !27
  %55 = icmp sgt i32 %54, 0, !dbg !28
  %56 = shl nsw i32 %.decomposed, 1, !dbg !29
  %57 = shl nsw i32 %22, 1, !dbg !29
  %58 = shl nsw i32 %23, 1, !dbg !29
  %59 = extractelement <2 x i32> %26, i64 1, !dbg !27
  %60 = shl nsw i32 %59, 1, !dbg !29
  %61 = icmp sgt i32 %.decomposed, 0, !dbg !30
  %62 = icmp sgt i32 %22, 0, !dbg !30
  %63 = icmp sgt i32 %23, 0, !dbg !30
  %64 = icmp sgt i32 %59, 0, !dbg !30
  %65 = and i1 %61, %55, !dbg !31
  %66 = and i1 %62, %55, !dbg !31
  %67 = and i1 %63, %55, !dbg !31
  %68 = and i1 %64, %55, !dbg !31
  %69 = shl i32 %20, 6, !dbg !32
  %70 = add i32 %69, %56, !dbg !33
  %71 = add i32 %70, -33, !dbg !34
  %72 = add i32 %69, %57, !dbg !33
  %73 = add i32 %72, -33, !dbg !34
  %74 = add i32 %69, %58, !dbg !33
  %75 = add i32 %74, -33, !dbg !34
  %76 = add i32 %69, %60, !dbg !33
  %77 = add i32 %76, -33, !dbg !34
  %78 = sext i32 %71 to i64, !dbg !35
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !35
  %80 = sext i32 %73 to i64, !dbg !35
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !35
  %82 = sext i32 %75 to i64, !dbg !35
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !35
  %84 = sext i32 %77 to i64, !dbg !35
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !35
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %65, i32 -8388608, i1 %65) #3, !dbg !36
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %66, i32 -8388608, i1 %66) #3, !dbg !36
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %67, i32 -8388608, i1 %67) #3, !dbg !36
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %68, i32 -8388608, i1 %68) #3, !dbg !36
  %90 = icmp sgt i32 %.decomposed, -1, !dbg !37
  %91 = icmp sgt i32 %22, -1, !dbg !37
  %92 = icmp sgt i32 %23, -1, !dbg !37
  %93 = icmp sgt i32 %59, -1, !dbg !37
  %94 = and i1 %90, %55, !dbg !38
  %95 = and i1 %91, %55, !dbg !38
  %96 = and i1 %92, %55, !dbg !38
  %97 = and i1 %93, %55, !dbg !38
  %98 = add i32 %70, -32, !dbg !39
  %99 = add i32 %72, -32, !dbg !39
  %100 = add i32 %74, -32, !dbg !39
  %101 = add i32 %76, -32, !dbg !39
  %102 = sext i32 %98 to i64, !dbg !40
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !40
  %104 = sext i32 %99 to i64, !dbg !40
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !40
  %106 = sext i32 %100 to i64, !dbg !40
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !40
  %108 = sext i32 %101 to i64, !dbg !40
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !40
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %94, i32 -8388608, i1 %94) #3, !dbg !41
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %95, i32 -8388608, i1 %95) #3, !dbg !41
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %96, i32 -8388608, i1 %96) #3, !dbg !41
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %97, i32 -8388608, i1 %97) #3, !dbg !41
  %114 = add i32 %70, -31, !dbg !42
  %115 = add i32 %72, -31, !dbg !42
  %116 = add i32 %74, -31, !dbg !42
  %117 = add i32 %76, -31, !dbg !42
  %118 = sext i32 %114 to i64, !dbg !43
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !43
  %120 = sext i32 %115 to i64, !dbg !43
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !43
  %122 = sext i32 %116 to i64, !dbg !43
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !43
  %124 = sext i32 %117 to i64, !dbg !43
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !43
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %94, i32 -8388608, i1 %94) #3, !dbg !44
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %95, i32 -8388608, i1 %95) #3, !dbg !44
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %96, i32 -8388608, i1 %96) #3, !dbg !44
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %97, i32 -8388608, i1 %97) #3, !dbg !44
  %130 = icmp sgt i32 %54, -1, !dbg !45
  %131 = and i1 %61, %130, !dbg !46
  %132 = and i1 %62, %130, !dbg !46
  %133 = and i1 %63, %130, !dbg !46
  %134 = and i1 %64, %130, !dbg !46
  %135 = add i32 %70, -1, !dbg !47
  %136 = sext i32 %135 to i64, !dbg !48
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !48
  %138 = sext i32 %72 to i64, !dbg !48
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !48
  %140 = getelementptr i8, ptr addrspace(1) %139, i64 -4, !dbg !48
  %141 = sext i32 %74 to i64, !dbg !48
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !48
  %143 = getelementptr i8, ptr addrspace(1) %142, i64 -4, !dbg !48
  %144 = sext i32 %76 to i64, !dbg !48
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !48
  %146 = getelementptr i8, ptr addrspace(1) %145, i64 -4, !dbg !48
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %131, i32 -8388608, i1 %131) #3, !dbg !49
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %132, i32 -8388608, i1 %132) #3, !dbg !49
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %133, i32 -8388608, i1 %133) #3, !dbg !49
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %134, i32 -8388608, i1 %134) #3, !dbg !49
  %151 = or i32 %54, %.decomposed, !dbg !27
  %152 = icmp sgt i32 %151, -1, !dbg !27
  %153 = or i32 %54, %22, !dbg !27
  %154 = icmp sgt i32 %153, -1, !dbg !27
  %155 = or i32 %54, %23, !dbg !27
  %156 = icmp sgt i32 %155, -1, !dbg !27
  %157 = or i32 %54, %59, !dbg !27
  %158 = icmp sgt i32 %157, -1, !dbg !27
  %159 = sext i32 %70 to i64, !dbg !50
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !50
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %152, i32 -8388608, i1 %152) #3, !dbg !51
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %154, i32 -8388608, i1 %154) #3, !dbg !51
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %156, i32 -8388608, i1 %156) #3, !dbg !51
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %158, i32 -8388608, i1 %158) #3, !dbg !51
  %165 = or disjoint i32 %70, 1, !dbg !52
  %166 = or disjoint i32 %72, 1, !dbg !52
  %167 = or disjoint i32 %74, 1, !dbg !52
  %168 = or disjoint i32 %76, 1, !dbg !52
  %169 = sext i32 %165 to i64, !dbg !53
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !53
  %171 = sext i32 %166 to i64, !dbg !53
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !53
  %173 = sext i32 %167 to i64, !dbg !53
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !53
  %175 = sext i32 %168 to i64, !dbg !53
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !53
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %152, i32 -8388608, i1 %152) #3, !dbg !54
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %172, i1 %154, i32 -8388608, i1 %154) #3, !dbg !54
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %174, i1 %156, i32 -8388608, i1 %156) #3, !dbg !54
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %176, i1 %158, i32 -8388608, i1 %158) #3, !dbg !54
  %181 = add i32 %70, 31, !dbg !55
  %182 = add i32 %72, 31, !dbg !55
  %183 = add i32 %74, 31, !dbg !55
  %184 = add i32 %76, 31, !dbg !55
  %185 = sext i32 %181 to i64, !dbg !56
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !56
  %187 = sext i32 %182 to i64, !dbg !56
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %187, !dbg !56
  %189 = sext i32 %183 to i64, !dbg !56
  %190 = getelementptr float, ptr addrspace(1) %0, i64 %189, !dbg !56
  %191 = sext i32 %184 to i64, !dbg !56
  %192 = getelementptr float, ptr addrspace(1) %0, i64 %191, !dbg !56
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %131, i32 -8388608, i1 %131) #3, !dbg !57
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %132, i32 -8388608, i1 %132) #3, !dbg !57
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %133, i32 -8388608, i1 %133) #3, !dbg !57
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %134, i32 -8388608, i1 %134) #3, !dbg !57
  %197 = add i32 %70, 32, !dbg !58
  %198 = add i32 %72, 32, !dbg !58
  %199 = add i32 %74, 32, !dbg !58
  %200 = add i32 %76, 32, !dbg !58
  %201 = sext i32 %197 to i64, !dbg !59
  %202 = getelementptr float, ptr addrspace(1) %0, i64 %201, !dbg !59
  %203 = sext i32 %198 to i64, !dbg !59
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !59
  %205 = sext i32 %199 to i64, !dbg !59
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !59
  %207 = sext i32 %200 to i64, !dbg !59
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !59
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %202, i1 %152, i32 -8388608, i1 %152) #3, !dbg !60
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 %154, i32 -8388608, i1 %154) #3, !dbg !60
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 %156, i32 -8388608, i1 %156) #3, !dbg !60
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %158, i32 -8388608, i1 %158) #3, !dbg !60
  %213 = add i32 %70, 33, !dbg !61
  %214 = add i32 %72, 33, !dbg !61
  %215 = add i32 %74, 33, !dbg !61
  %216 = add i32 %76, 33, !dbg !61
  %217 = sext i32 %213 to i64, !dbg !62
  %218 = getelementptr float, ptr addrspace(1) %0, i64 %217, !dbg !62
  %219 = sext i32 %214 to i64, !dbg !62
  %220 = getelementptr float, ptr addrspace(1) %0, i64 %219, !dbg !62
  %221 = sext i32 %215 to i64, !dbg !62
  %222 = getelementptr float, ptr addrspace(1) %0, i64 %221, !dbg !62
  %223 = sext i32 %216 to i64, !dbg !62
  %224 = getelementptr float, ptr addrspace(1) %0, i64 %223, !dbg !62
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %218, i1 %152, i32 -8388608, i1 %152) #3, !dbg !63
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %220, i1 %154, i32 -8388608, i1 %154) #3, !dbg !63
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %222, i1 %156, i32 -8388608, i1 %156) #3, !dbg !63
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %158, i32 -8388608, i1 %158) #3, !dbg !63
  %229 = fadd float %37, 0x3EE4F8B580000000, !dbg !64
  %230 = fadd float %39, 0x3EE4F8B580000000, !dbg !64
  %231 = fadd float %41, 0x3EE4F8B580000000, !dbg !64
  %232 = fadd float %43, 0x3EE4F8B580000000, !dbg !64
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i = icmp eq i32 %233, 0, !dbg !65
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i = icmp eq i32 %234, 0, !dbg !65
  br i1 %.not.i, label %240, label %235, !dbg !65

235:                                              ; preds = %10
  br i1 %.not1.i, label %238, label %236, !dbg !65

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %229) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %229) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

240:                                              ; preds = %10
  br i1 %.not1.i, label %243, label %241, !dbg !65

241:                                              ; preds = %240
  %242 = tail call float @llvm.nvvm.sqrt.rn.f(float %229) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

243:                                              ; preds = %240
  %244 = tail call float @llvm.nvvm.sqrt.approx.f(float %229) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

__nv_sqrtf.exit:                                  ; preds = %236, %238, %241, %243
  %.0.i = phi float [ %237, %236 ], [ %239, %238 ], [ %242, %241 ], [ %244, %243 ], !dbg !65
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i1 = icmp eq i32 %245, 0, !dbg !65
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i4 = icmp eq i32 %246, 0, !dbg !65
  br i1 %.not.i1, label %252, label %247, !dbg !65

247:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %250, label %248, !dbg !65

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %230) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %230) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

252:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %255, label %253, !dbg !65

253:                                              ; preds = %252
  %254 = tail call float @llvm.nvvm.sqrt.rn.f(float %230) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

255:                                              ; preds = %252
  %256 = tail call float @llvm.nvvm.sqrt.approx.f(float %230) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

__nv_sqrtf.exit5:                                 ; preds = %248, %250, %253, %255
  %.0.i3 = phi float [ %249, %248 ], [ %251, %250 ], [ %254, %253 ], [ %256, %255 ], !dbg !65
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i6 = icmp eq i32 %257, 0, !dbg !65
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i9 = icmp eq i32 %258, 0, !dbg !65
  br i1 %.not.i6, label %264, label %259, !dbg !65

259:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %262, label %260, !dbg !65

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %231) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %231) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

264:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %267, label %265, !dbg !65

265:                                              ; preds = %264
  %266 = tail call float @llvm.nvvm.sqrt.rn.f(float %231) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

267:                                              ; preds = %264
  %268 = tail call float @llvm.nvvm.sqrt.approx.f(float %231) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

__nv_sqrtf.exit10:                                ; preds = %260, %262, %265, %267
  %.0.i8 = phi float [ %261, %260 ], [ %263, %262 ], [ %266, %265 ], [ %268, %267 ], !dbg !65
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i11 = icmp eq i32 %269, 0, !dbg !65
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i14 = icmp eq i32 %270, 0, !dbg !65
  br i1 %.not.i11, label %276, label %271, !dbg !65

271:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %274, label %272, !dbg !65

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %232) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %232) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

276:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %279, label %277, !dbg !65

277:                                              ; preds = %276
  %278 = tail call float @llvm.nvvm.sqrt.rn.f(float %232) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

279:                                              ; preds = %276
  %280 = tail call float @llvm.nvvm.sqrt.approx.f(float %232) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

__nv_sqrtf.exit15:                                ; preds = %272, %274, %277, %279
  %.0.i13 = phi float [ %273, %272 ], [ %275, %274 ], [ %278, %277 ], [ %280, %279 ], !dbg !65
  %281 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !41
  %282 = insertelement <4 x i32> %281, i32 %111, i64 1, !dbg !41
  %283 = insertelement <4 x i32> %282, i32 %112, i64 2, !dbg !41
  %284 = insertelement <4 x i32> %283, i32 %113, i64 3, !dbg !41
  %285 = bitcast <4 x i32> %284 to <4 x float>, !dbg !41
  %286 = insertelement <4 x i32> poison, i32 %86, i64 0, !dbg !36
  %287 = insertelement <4 x i32> %286, i32 %87, i64 1, !dbg !36
  %288 = insertelement <4 x i32> %287, i32 %88, i64 2, !dbg !36
  %289 = insertelement <4 x i32> %288, i32 %89, i64 3, !dbg !36
  %290 = bitcast <4 x i32> %289 to <4 x float>, !dbg !36
  %291 = insertelement <4 x i32> poison, i32 %126, i64 0, !dbg !44
  %292 = insertelement <4 x i32> %291, i32 %127, i64 1, !dbg !44
  %293 = insertelement <4 x i32> %292, i32 %128, i64 2, !dbg !44
  %294 = insertelement <4 x i32> %293, i32 %129, i64 3, !dbg !44
  %295 = bitcast <4 x i32> %294 to <4 x float>, !dbg !44
  %296 = insertelement <4 x i32> poison, i32 %147, i64 0, !dbg !49
  %297 = insertelement <4 x i32> %296, i32 %148, i64 1, !dbg !49
  %298 = insertelement <4 x i32> %297, i32 %149, i64 2, !dbg !49
  %299 = insertelement <4 x i32> %298, i32 %150, i64 3, !dbg !49
  %300 = bitcast <4 x i32> %299 to <4 x float>, !dbg !49
  %301 = insertelement <4 x i32> poison, i32 %161, i64 0, !dbg !51
  %302 = insertelement <4 x i32> %301, i32 %162, i64 1, !dbg !51
  %303 = insertelement <4 x i32> %302, i32 %163, i64 2, !dbg !51
  %304 = insertelement <4 x i32> %303, i32 %164, i64 3, !dbg !51
  %305 = bitcast <4 x i32> %304 to <4 x float>, !dbg !51
  %306 = insertelement <4 x i32> poison, i32 %177, i64 0, !dbg !54
  %307 = insertelement <4 x i32> %306, i32 %178, i64 1, !dbg !54
  %308 = insertelement <4 x i32> %307, i32 %179, i64 2, !dbg !54
  %309 = insertelement <4 x i32> %308, i32 %180, i64 3, !dbg !54
  %310 = bitcast <4 x i32> %309 to <4 x float>, !dbg !54
  %311 = insertelement <4 x i32> poison, i32 %193, i64 0, !dbg !57
  %312 = insertelement <4 x i32> %311, i32 %194, i64 1, !dbg !57
  %313 = insertelement <4 x i32> %312, i32 %195, i64 2, !dbg !57
  %314 = insertelement <4 x i32> %313, i32 %196, i64 3, !dbg !57
  %315 = bitcast <4 x i32> %314 to <4 x float>, !dbg !57
  %316 = insertelement <4 x i32> poison, i32 %209, i64 0, !dbg !60
  %317 = insertelement <4 x i32> %316, i32 %210, i64 1, !dbg !60
  %318 = insertelement <4 x i32> %317, i32 %211, i64 2, !dbg !60
  %319 = insertelement <4 x i32> %318, i32 %212, i64 3, !dbg !60
  %320 = bitcast <4 x i32> %319 to <4 x float>, !dbg !60
  %321 = insertelement <4 x i32> poison, i32 %225, i64 0, !dbg !63
  %322 = insertelement <4 x i32> %321, i32 %226, i64 1, !dbg !63
  %323 = insertelement <4 x i32> %322, i32 %227, i64 2, !dbg !63
  %324 = insertelement <4 x i32> %323, i32 %228, i64 3, !dbg !63
  %325 = bitcast <4 x i32> %324 to <4 x float>, !dbg !63
  %326 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !20
  %327 = insertelement <4 x i32> %326, i32 %32, i64 1, !dbg !20
  %328 = insertelement <4 x i32> %327, i32 %33, i64 2, !dbg !20
  %329 = insertelement <4 x i32> %328, i32 %34, i64 3, !dbg !20
  %330 = bitcast <4 x i32> %329 to <4 x float>, !dbg !20
  %331 = fcmp uno <4 x float> %305, zeroinitializer, !dbg !66
  %332 = fcmp ogt <4 x float> %285, %290, !dbg !70
  %333 = fcmp uno <4 x float> %285, zeroinitializer, !dbg !72
  %334 = or <4 x i1> %332, %333, !dbg !73
  %.v = select <4 x i1> %334, <4 x i32> %284, <4 x i32> %289, !dbg !74
  %335 = bitcast <4 x i32> %.v to <4 x float>, !dbg !74
  %336 = fcmp olt <4 x float> %335, %295, !dbg !75
  %337 = fcmp uno <4 x float> %295, zeroinitializer, !dbg !77
  %338 = or <4 x i1> %336, %337, !dbg !78
  %.v16 = select <4 x i1> %338, <4 x i32> %294, <4 x i32> %.v, !dbg !79
  %339 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !79
  %340 = fcmp olt <4 x float> %339, %300, !dbg !80
  %341 = fcmp uno <4 x float> %300, zeroinitializer, !dbg !82
  %342 = or <4 x i1> %340, %341, !dbg !83
  %.v17 = select <4 x i1> %342, <4 x i32> %299, <4 x i32> %.v16, !dbg !84
  %343 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !84
  %344 = fcmp olt <4 x float> %343, %305, !dbg !85
  %345 = or <4 x i1> %344, %331, !dbg !86
  %.v18 = select <4 x i1> %345, <4 x i32> %304, <4 x i32> %.v17, !dbg !87
  %346 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !87
  %347 = fcmp olt <4 x float> %346, %310, !dbg !88
  %348 = fcmp uno <4 x float> %310, zeroinitializer, !dbg !90
  %349 = or <4 x i1> %347, %348, !dbg !91
  %.v19 = select <4 x i1> %349, <4 x i32> %309, <4 x i32> %.v18, !dbg !92
  %350 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !92
  %351 = fcmp olt <4 x float> %350, %315, !dbg !93
  %352 = fcmp uno <4 x float> %315, zeroinitializer, !dbg !95
  %353 = or <4 x i1> %351, %352, !dbg !96
  %.v20 = select <4 x i1> %353, <4 x i32> %314, <4 x i32> %.v19, !dbg !97
  %354 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !97
  %355 = fcmp olt <4 x float> %354, %320, !dbg !98
  %356 = fcmp uno <4 x float> %320, zeroinitializer, !dbg !100
  %357 = or <4 x i1> %355, %356, !dbg !101
  %.v21 = select <4 x i1> %357, <4 x i32> %319, <4 x i32> %.v20, !dbg !102
  %358 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !102
  %359 = fcmp olt <4 x float> %358, %325, !dbg !103
  %360 = zext <4 x i1> %332 to <4 x i8>, !dbg !105
  %361 = select <4 x i1> %336, <4 x i8> splat (i8 2), <4 x i8> %360, !dbg !106
  %362 = select <4 x i1> %340, <4 x i8> splat (i8 3), <4 x i8> %361, !dbg !107
  %363 = select <4 x i1> %344, <4 x i8> splat (i8 4), <4 x i8> %362, !dbg !108
  %364 = select <4 x i1> %347, <4 x i8> splat (i8 5), <4 x i8> %363, !dbg !109
  %365 = select <4 x i1> %351, <4 x i8> splat (i8 6), <4 x i8> %364, !dbg !110
  %366 = select <4 x i1> %355, <4 x i8> splat (i8 7), <4 x i8> %365, !dbg !111
  %367 = select <4 x i1> %359, <4 x i8> splat (i8 8), <4 x i8> %366, !dbg !112
  %368 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !26
  %369 = insertelement <4 x i32> %368, i32 %51, i64 1, !dbg !26
  %370 = insertelement <4 x i32> %369, i32 %52, i64 2, !dbg !26
  %371 = insertelement <4 x i32> %370, i32 %53, i64 3, !dbg !26
  %372 = bitcast <4 x i32> %371 to <4 x float>, !dbg !26
  %373 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !24
  %374 = insertelement <4 x i32> %373, i32 %46, i64 1, !dbg !24
  %375 = insertelement <4 x i32> %374, i32 %47, i64 2, !dbg !24
  %376 = insertelement <4 x i32> %375, i32 %48, i64 3, !dbg !24
  %377 = bitcast <4 x i32> %376 to <4 x float>, !dbg !24
  %.frozen30 = freeze i32 %16, !dbg !113
  %378 = sdiv i32 %.frozen30, 16384, !dbg !113
  %379 = mul i32 %378, 16384, !dbg !114
  %.decomposed31 = sub i32 %.frozen30, %379, !dbg !114
  %380 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !115
  %381 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !115
  %382 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !115
  %383 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !115
  %384 = fcmp uno <4 x float> %325, zeroinitializer, !dbg !116
  %385 = or <4 x i1> %359, %384, !dbg !117
  %.v22 = select <4 x i1> %385, <4 x i32> %324, <4 x i32> %.v21, !dbg !118
  %386 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !118
  %387 = fsub <4 x float> %386, %330, !dbg !119
  %388 = insertelement <4 x float> poison, float %380, i64 0, !dbg !120
  %389 = insertelement <4 x float> %388, float %381, i64 1, !dbg !120
  %390 = insertelement <4 x float> %389, float %382, i64 2, !dbg !120
  %391 = insertelement <4 x float> %390, float %383, i64 3, !dbg !120
  %392 = fmul <4 x float> %387, %391, !dbg !120
  %393 = fmul <4 x float> %392, %377, !dbg !121
  %394 = fadd <4 x float> %393, %372, !dbg !122
  %395 = fcmp olt <4 x float> %394, zeroinitializer, !dbg !123
  %396 = extractelement <4 x i1> %395, i64 0, !dbg !125
  %397 = extractelement <4 x i1> %395, i64 1, !dbg !125
  %398 = extractelement <4 x i1> %395, i64 2, !dbg !125
  %399 = extractelement <4 x i1> %395, i64 3, !dbg !125
  %400 = mul i32 %378, 19456, !dbg !126
  %401 = add i32 %400, %.decomposed31, !dbg !127
  %402 = sext i32 %401 to i64, !dbg !128
  %403 = getelementptr float, ptr addrspace(1) %5, i64 %402, !dbg !128
  %404 = extractelement <4 x i32> %.v22, i64 0, !dbg !129
  %405 = extractelement <4 x i32> %.v22, i64 1, !dbg !129
  %406 = extractelement <4 x i32> %.v22, i64 2, !dbg !129
  %407 = extractelement <4 x i32> %.v22, i64 3, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %404, i32 %405, i32 %406, i32 %407, ptr addrspace(1) %403, i1 true) #3, !dbg !129
  %408 = sext i32 %16 to i64, !dbg !130
  %409 = getelementptr i8, ptr addrspace(1) %6, i64 %408, !dbg !130
  %410 = bitcast <4 x i8> %367 to i32, !dbg !131
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %410, ptr addrspace(1) %409, i1 true) #3, !dbg !131
  %411 = getelementptr float, ptr addrspace(1) %7, i64 %408, !dbg !132
  %bc = bitcast <4 x float> %394 to <4 x i32>, !dbg !133
  %412 = extractelement <4 x i32> %bc, i64 0, !dbg !133
  %413 = select i1 %396, i32 0, i32 %412, !dbg !125
  %bc23 = bitcast <4 x float> %394 to <4 x i32>, !dbg !133
  %414 = extractelement <4 x i32> %bc23, i64 1, !dbg !133
  %415 = select i1 %397, i32 0, i32 %414, !dbg !125
  %bc24 = bitcast <4 x float> %394 to <4 x i32>, !dbg !133
  %416 = extractelement <4 x i32> %bc24, i64 2, !dbg !133
  %417 = select i1 %398, i32 0, i32 %416, !dbg !125
  %bc25 = bitcast <4 x float> %394 to <4 x i32>, !dbg !133
  %418 = extractelement <4 x i32> %bc25, i64 3, !dbg !133
  %419 = select i1 %399, i32 0, i32 %418, !dbg !125
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %413, i32 %415, i32 %417, i32 %419, ptr addrspace(1) %411, i1 true) #3, !dbg !133
  %420 = getelementptr float, ptr addrspace(1) %8, i64 %408, !dbg !134
  %bc26 = bitcast <4 x float> %387 to <4 x i32>, !dbg !135
  %421 = extractelement <4 x i32> %bc26, i64 0, !dbg !135
  %bc27 = bitcast <4 x float> %387 to <4 x i32>, !dbg !135
  %422 = extractelement <4 x i32> %bc27, i64 1, !dbg !135
  %bc28 = bitcast <4 x float> %387 to <4 x i32>, !dbg !135
  %423 = extractelement <4 x i32> %bc28, i64 2, !dbg !135
  %bc29 = bitcast <4 x float> %387 to <4 x i32>, !dbg !135
  %424 = extractelement <4 x i32> %bc29, i64 3, !dbg !135
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %421, i32 %422, i32 %423, i32 %424, ptr addrspace(1) %420, i1 true) #3, !dbg !135
  ret void, !dbg !136
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr6dhvqdofz5ckjxqx64m7zxdldqqmgduo7tpl77o5ufbdidf6qc.py", directory: "inductor_cache/r6")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 30, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 28, scope: !7)
!19 = !DILocation(line: 31, column: 31, scope: !7)
!20 = !DILocation(line: 31, column: 36, scope: !7)
!21 = !DILocation(line: 32, column: 31, scope: !7)
!22 = !DILocation(line: 32, column: 36, scope: !7)
!23 = !DILocation(line: 33, column: 31, scope: !7)
!24 = !DILocation(line: 33, column: 36, scope: !7)
!25 = !DILocation(line: 34, column: 31, scope: !7)
!26 = !DILocation(line: 34, column: 36, scope: !7)
!27 = !DILocation(line: 68, column: 20, scope: !7)
!28 = !DILocation(line: 37, column: 19, scope: !7)
!29 = !DILocation(line: 41, column: 20, scope: !7)
!30 = !DILocation(line: 42, column: 19, scope: !7)
!31 = !DILocation(line: 45, column: 19, scope: !7)
!32 = !DILocation(line: 46, column: 49, scope: !7)
!33 = !DILocation(line: 46, column: 39, scope: !7)
!34 = !DILocation(line: 46, column: 46, scope: !7)
!35 = !DILocation(line: 46, column: 31, scope: !7)
!36 = !DILocation(line: 46, column: 54, scope: !7)
!37 = !DILocation(line: 48, column: 21, scope: !7)
!38 = !DILocation(line: 51, column: 19, scope: !7)
!39 = !DILocation(line: 52, column: 46, scope: !7)
!40 = !DILocation(line: 52, column: 31, scope: !7)
!41 = !DILocation(line: 52, column: 54, scope: !7)
!42 = !DILocation(line: 59, column: 46, scope: !7)
!43 = !DILocation(line: 59, column: 31, scope: !7)
!44 = !DILocation(line: 59, column: 54, scope: !7)
!45 = !DILocation(line: 62, column: 21, scope: !7)
!46 = !DILocation(line: 65, column: 20, scope: !7)
!47 = !DILocation(line: 66, column: 45, scope: !7)
!48 = !DILocation(line: 66, column: 31, scope: !7)
!49 = !DILocation(line: 66, column: 53, scope: !7)
!50 = !DILocation(line: 69, column: 31, scope: !7)
!51 = !DILocation(line: 69, column: 46, scope: !7)
!52 = !DILocation(line: 72, column: 42, scope: !7)
!53 = !DILocation(line: 72, column: 31, scope: !7)
!54 = !DILocation(line: 72, column: 50, scope: !7)
!55 = !DILocation(line: 79, column: 43, scope: !7)
!56 = !DILocation(line: 79, column: 31, scope: !7)
!57 = !DILocation(line: 79, column: 51, scope: !7)
!58 = !DILocation(line: 82, column: 43, scope: !7)
!59 = !DILocation(line: 82, column: 31, scope: !7)
!60 = !DILocation(line: 82, column: 51, scope: !7)
!61 = !DILocation(line: 85, column: 43, scope: !7)
!62 = !DILocation(line: 85, column: 31, scope: !7)
!63 = !DILocation(line: 85, column: 51, scope: !7)
!64 = !DILocation(line: 114, column: 20, scope: !7)
!65 = !DILocation(line: 115, column: 27, scope: !7)
!66 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !69)
!67 = distinct !DILexicalBlockFile(scope: !7, file: !68, discriminator: 0)
!68 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!69 = !DILocation(line: 70, column: 42, scope: !7)
!70 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !71)
!71 = !DILocation(line: 53, column: 42, scope: !7)
!72 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !71)
!73 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !71)
!74 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !71)
!75 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !76)
!76 = !DILocation(line: 60, column: 42, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !76)
!80 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !81)
!81 = !DILocation(line: 67, column: 42, scope: !7)
!82 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !81)
!83 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !81)
!84 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !81)
!85 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !69)
!86 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !69)
!87 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !69)
!88 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !89)
!89 = !DILocation(line: 73, column: 42, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !94)
!94 = !DILocation(line: 80, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !99)
!99 = !DILocation(line: 83, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !99)
!102 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !99)
!103 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !104)
!104 = !DILocation(line: 86, column: 42, scope: !7)
!105 = !DILocation(line: 90, column: 35, scope: !7)
!106 = !DILocation(line: 93, column: 35, scope: !7)
!107 = !DILocation(line: 96, column: 35, scope: !7)
!108 = !DILocation(line: 99, column: 35, scope: !7)
!109 = !DILocation(line: 102, column: 35, scope: !7)
!110 = !DILocation(line: 105, column: 35, scope: !7)
!111 = !DILocation(line: 108, column: 35, scope: !7)
!112 = !DILocation(line: 111, column: 35, scope: !7)
!113 = !DILocation(line: 27, column: 19, scope: !7)
!114 = !DILocation(line: 28, column: 19, scope: !7)
!115 = !DILocation(line: 117, column: 20, scope: !7)
!116 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !104)
!117 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !104)
!118 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !104)
!119 = !DILocation(line: 112, column: 20, scope: !7)
!120 = !DILocation(line: 120, column: 20, scope: !7)
!121 = !DILocation(line: 121, column: 20, scope: !7)
!122 = !DILocation(line: 122, column: 20, scope: !7)
!123 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !124)
!124 = !DILocation(line: 124, column: 42, scope: !7)
!125 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !124)
!126 = !DILocation(line: 125, column: 36, scope: !7)
!127 = !DILocation(line: 125, column: 30, scope: !7)
!128 = !DILocation(line: 125, column: 25, scope: !7)
!129 = !DILocation(line: 125, column: 48, scope: !7)
!130 = !DILocation(line: 126, column: 25, scope: !7)
!131 = !DILocation(line: 126, column: 37, scope: !7)
!132 = !DILocation(line: 127, column: 25, scope: !7)
!133 = !DILocation(line: 127, column: 37, scope: !7)
!134 = !DILocation(line: 128, column: 25, scope: !7)
!135 = !DILocation(line: 128, column: 37, scope: !7)
!136 = !DILocation(line: 128, column: 4, scope: !7)
