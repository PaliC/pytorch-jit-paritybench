; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__prelu_kernel_convolution_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %13 = srem i32 %11, 32, !dbg !14
  %14 = sext i32 %11 to i64, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !15
  %16 = sext i32 %12 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #1, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #1, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !16
  %28 = sext i32 %13 to i64, !dbg !17
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !17
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !18
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !18
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !18
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !18
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !18
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !18
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #1, !dbg !19
  %41 = bitcast i32 %40 to float, !dbg !19
  %42 = insertelement <8 x i32> poison, i32 %27, i64 0, !dbg !16
  %43 = insertelement <8 x i32> %42, i32 %26, i64 1, !dbg !16
  %44 = insertelement <8 x i32> %43, i32 %25, i64 2, !dbg !16
  %45 = insertelement <8 x i32> %44, i32 %24, i64 3, !dbg !16
  %46 = insertelement <8 x i32> %45, i32 %22, i64 4, !dbg !16
  %47 = insertelement <8 x i32> %46, i32 %21, i64 5, !dbg !16
  %48 = insertelement <8 x i32> %47, i32 %20, i64 6, !dbg !16
  %49 = insertelement <8 x i32> %48, i32 %19, i64 7, !dbg !16
  %50 = bitcast <8 x i32> %49 to <8 x float>, !dbg !16
  %51 = insertelement <8 x i32> poison, i32 %39, i64 0, !dbg !18
  %52 = insertelement <8 x i32> %51, i32 %38, i64 1, !dbg !18
  %53 = insertelement <8 x i32> %52, i32 %37, i64 2, !dbg !18
  %54 = insertelement <8 x i32> %53, i32 %36, i64 3, !dbg !18
  %55 = insertelement <8 x i32> %54, i32 %34, i64 4, !dbg !18
  %56 = insertelement <8 x i32> %55, i32 %33, i64 5, !dbg !18
  %57 = insertelement <8 x i32> %56, i32 %32, i64 6, !dbg !18
  %58 = insertelement <8 x i32> %57, i32 %31, i64 7, !dbg !18
  %59 = bitcast <8 x i32> %58 to <8 x float>, !dbg !18
  %60 = fadd <8 x float> %50, %59, !dbg !20
  %61 = fcmp ogt <8 x float> %60, zeroinitializer, !dbg !21
  %62 = extractelement <8 x float> %60, i64 7, !dbg !22
  %63 = fmul float %62, %41, !dbg !23
  %64 = extractelement <8 x float> %60, i64 6, !dbg !22
  %65 = fmul float %64, %41, !dbg !23
  %66 = extractelement <8 x float> %60, i64 5, !dbg !22
  %67 = fmul float %66, %41, !dbg !23
  %68 = extractelement <8 x float> %60, i64 4, !dbg !22
  %69 = fmul float %68, %41, !dbg !23
  %70 = extractelement <8 x float> %60, i64 3, !dbg !22
  %71 = fmul float %70, %41, !dbg !23
  %72 = extractelement <8 x float> %60, i64 2, !dbg !22
  %73 = fmul float %72, %41, !dbg !23
  %74 = extractelement <8 x float> %60, i64 1, !dbg !22
  %75 = fmul float %74, %41, !dbg !23
  %76 = extractelement <8 x float> %60, i64 0, !dbg !22
  %77 = fmul float %76, %41, !dbg !23
  %78 = extractelement <8 x i1> %61, i64 7, !dbg !24
  %79 = select i1 %78, float %62, float %63, !dbg !24
  %80 = extractelement <8 x i1> %61, i64 6, !dbg !24
  %81 = select i1 %80, float %64, float %65, !dbg !24
  %82 = extractelement <8 x i1> %61, i64 5, !dbg !24
  %83 = select i1 %82, float %66, float %67, !dbg !24
  %84 = extractelement <8 x i1> %61, i64 4, !dbg !24
  %85 = select i1 %84, float %68, float %69, !dbg !24
  %86 = extractelement <8 x i1> %61, i64 3, !dbg !24
  %87 = select i1 %86, float %70, float %71, !dbg !24
  %88 = extractelement <8 x i1> %61, i64 2, !dbg !24
  %89 = select i1 %88, float %72, float %73, !dbg !24
  %90 = extractelement <8 x i1> %61, i64 1, !dbg !24
  %91 = select i1 %90, float %74, float %75, !dbg !24
  %92 = extractelement <8 x i1> %61, i64 0, !dbg !24
  %93 = select i1 %92, float %76, float %77, !dbg !24
  %94 = bitcast float %62 to i32, !dbg !22
  %95 = bitcast float %64 to i32, !dbg !22
  %96 = bitcast float %66 to i32, !dbg !22
  %97 = bitcast float %68 to i32, !dbg !22
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %94, i32 %95, i32 %96, i32 %97, ptr addrspace(1) %15, i1 true) #1, !dbg !22
  %98 = bitcast float %70 to i32, !dbg !22
  %99 = bitcast float %72 to i32, !dbg !22
  %100 = bitcast float %74 to i32, !dbg !22
  %101 = bitcast float %76 to i32, !dbg !22
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %98, i32 %99, i32 %100, i32 %101, ptr addrspace(1) %17, i1 true) #1, !dbg !22
  %102 = getelementptr float, ptr addrspace(1) %3, i64 %14, !dbg !25
  %103 = getelementptr float, ptr addrspace(1) %3, i64 %16, !dbg !25
  %104 = bitcast float %79 to i32, !dbg !26
  %105 = bitcast float %81 to i32, !dbg !26
  %106 = bitcast float %83 to i32, !dbg !26
  %107 = bitcast float %85 to i32, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %104, i32 %105, i32 %106, i32 %107, ptr addrspace(1) %102, i1 true) #1, !dbg !26
  %108 = bitcast float %87 to i32, !dbg !26
  %109 = bitcast float %89 to i32, !dbg !26
  %110 = bitcast float %91 to i32, !dbg !26
  %111 = bitcast float %93 to i32, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %108, i32 %109, i32 %110, i32 %111, ptr addrspace(1) %103, i1 true) #1, !dbg !26
  ret void, !dbg !27
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2mdebgnlq7ieogrhjzccyqrqorkcl3gvjnrfg2vqwb5dmmmlssm.py", directory: "inductor_cache/2m")
!4 = !{ptr @triton_poi_fused__prelu_kernel_convolution_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__prelu_kernel_convolution_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__prelu_kernel_convolution_7", linkageName: "triton_poi_fused__prelu_kernel_convolution_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 18, scope: !7)
!21 = !DILocation(line: 32, column: 18, scope: !7)
!22 = !DILocation(line: 35, column: 39, scope: !7)
!23 = !DILocation(line: 33, column: 18, scope: !7)
!24 = !DILocation(line: 34, column: 32, scope: !7)
!25 = !DILocation(line: 36, column: 25, scope: !7)
!26 = !DILocation(line: 36, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 4, scope: !7)
