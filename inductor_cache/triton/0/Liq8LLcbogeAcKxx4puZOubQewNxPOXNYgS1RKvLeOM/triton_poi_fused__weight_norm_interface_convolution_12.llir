; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__weight_norm_interface_convolution_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 124, !dbg !12
  %13 = lshr i32 %10, 5, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %14, 8, !dbg !12
  %16 = or disjoint i32 %14, 16, !dbg !12
  %17 = or disjoint i32 %14, 24, !dbg !12
  %18 = or disjoint i32 %14, 32, !dbg !12
  %19 = or disjoint i32 %14, 40, !dbg !12
  %20 = or disjoint i32 %14, 48, !dbg !12
  %21 = or disjoint i32 %14, 56, !dbg !12
  %22 = or disjoint i32 %14, 64, !dbg !12
  %23 = or disjoint i32 %14, 72, !dbg !12
  %24 = or disjoint i32 %14, 80, !dbg !12
  %25 = or disjoint i32 %14, 88, !dbg !12
  %26 = or disjoint i32 %14, 96, !dbg !12
  %27 = or disjoint i32 %14, 104, !dbg !12
  %28 = or disjoint i32 %14, 112, !dbg !12
  %29 = or disjoint i32 %14, 120, !dbg !12
  %30 = or disjoint i32 %9, %12, !dbg !13
  %31 = or disjoint i32 %9, %14, !dbg !13
  %32 = or disjoint i32 %9, %15, !dbg !13
  %33 = or disjoint i32 %9, %16, !dbg !13
  %34 = or disjoint i32 %9, %17, !dbg !13
  %35 = or disjoint i32 %9, %18, !dbg !13
  %36 = or disjoint i32 %9, %19, !dbg !13
  %37 = or disjoint i32 %9, %20, !dbg !13
  %38 = or disjoint i32 %9, %21, !dbg !13
  %39 = or disjoint i32 %9, %22, !dbg !13
  %40 = or disjoint i32 %9, %23, !dbg !13
  %41 = or disjoint i32 %9, %24, !dbg !13
  %42 = or disjoint i32 %9, %25, !dbg !13
  %43 = or disjoint i32 %9, %26, !dbg !13
  %44 = or disjoint i32 %9, %27, !dbg !13
  %45 = or disjoint i32 %9, %28, !dbg !13
  %46 = or disjoint i32 %9, %29, !dbg !13
  %47 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %48 = shl i32 %47, 5, !dbg !15
  %49 = and i32 %10, 31, !dbg !16
  %50 = or disjoint i32 %48, %14, !dbg !17
  %51 = or disjoint i32 %48, %15, !dbg !17
  %52 = or disjoint i32 %48, %16, !dbg !17
  %53 = or disjoint i32 %48, %17, !dbg !17
  %54 = or disjoint i32 %48, %49, !dbg !17
  %55 = icmp slt i32 %50, 25, !dbg !18
  %56 = icmp slt i32 %51, 25, !dbg !18
  %57 = icmp slt i32 %52, 25, !dbg !18
  %58 = icmp slt i32 %53, 25, !dbg !18
  %59 = icmp slt i32 %54, 25, !dbg !18
  %.frozen = freeze i32 %30, !dbg !19
  %60 = sdiv i32 %.frozen, 32, !dbg !19
  %61 = mul i32 %60, 32, !dbg !20
  %.decomposed = sub i32 %.frozen, %61, !dbg !20
  %62 = shl i32 %50, 5, !dbg !21
  %63 = shl i32 %51, 5, !dbg !21
  %64 = shl i32 %52, 5, !dbg !21
  %65 = shl i32 %53, 5, !dbg !21
  %66 = mul i32 %60, 800, !dbg !22
  %67 = add i32 %66, %.decomposed, !dbg !23
  %68 = add i32 %67, %62, !dbg !24
  %69 = add i32 %67, %63, !dbg !24
  %70 = add i32 %67, %64, !dbg !24
  %71 = add i32 %67, %65, !dbg !24
  %72 = sext i32 %68 to i64, !dbg !25
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !25
  %74 = sext i32 %69 to i64, !dbg !25
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !25
  %76 = sext i32 %70 to i64, !dbg !25
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !25
  %78 = sext i32 %71 to i64, !dbg !25
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !25
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %55) #2, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !26
  %85 = bitcast i32 %81 to float, !dbg !26
  %86 = bitcast i32 %82 to float, !dbg !26
  %87 = bitcast i32 %83 to float, !dbg !26
  %88 = bitcast i32 %84 to float, !dbg !26
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %56) #2, !dbg !26
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !26
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !26
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !26
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !26
  %94 = bitcast i32 %90 to float, !dbg !26
  %95 = bitcast i32 %91 to float, !dbg !26
  %96 = bitcast i32 %92 to float, !dbg !26
  %97 = bitcast i32 %93 to float, !dbg !26
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %57) #2, !dbg !26
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !26
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !26
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !26
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !26
  %103 = bitcast i32 %99 to float, !dbg !26
  %104 = bitcast i32 %100 to float, !dbg !26
  %105 = bitcast i32 %101 to float, !dbg !26
  %106 = bitcast i32 %102 to float, !dbg !26
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %58) #2, !dbg !26
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !26
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !26
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !26
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !26
  %112 = bitcast i32 %108 to float, !dbg !26
  %113 = bitcast i32 %109 to float, !dbg !26
  %114 = bitcast i32 %110 to float, !dbg !26
  %115 = bitcast i32 %111 to float, !dbg !26
  %116 = sext i32 %60 to i64, !dbg !27
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !27
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #2, !dbg !28
  %119 = bitcast i32 %118 to float, !dbg !28
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #2, !dbg !28
  %121 = bitcast i32 %120 to float, !dbg !28
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #2, !dbg !28
  %123 = bitcast i32 %122 to float, !dbg !28
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #2, !dbg !28
  %125 = bitcast i32 %124 to float, !dbg !28
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %116, !dbg !29
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #2, !dbg !30
  %128 = bitcast i32 %127 to float, !dbg !30
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #2, !dbg !30
  %130 = bitcast i32 %129 to float, !dbg !30
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #2, !dbg !30
  %132 = bitcast i32 %131 to float, !dbg !30
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #2, !dbg !30
  %134 = bitcast i32 %133 to float, !dbg !30
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %128) #2, !dbg !31
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %130) #2, !dbg !31
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float %132) #2, !dbg !31
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %134) #2, !dbg !31
  %139 = fmul float %135, %85, !dbg !32
  %140 = fmul float %136, %86, !dbg !32
  %141 = fmul float %137, %87, !dbg !32
  %142 = fmul float %138, %88, !dbg !32
  %143 = fmul float %135, %94, !dbg !32
  %144 = fmul float %136, %95, !dbg !32
  %145 = fmul float %137, %96, !dbg !32
  %146 = fmul float %138, %97, !dbg !32
  %147 = fmul float %135, %103, !dbg !32
  %148 = fmul float %136, %104, !dbg !32
  %149 = fmul float %137, %105, !dbg !32
  %150 = fmul float %138, %106, !dbg !32
  %151 = fmul float %135, %112, !dbg !32
  %152 = fmul float %136, %113, !dbg !32
  %153 = fmul float %137, %114, !dbg !32
  %154 = fmul float %138, %115, !dbg !32
  %155 = mul i32 %31, 25, !dbg !33
  %156 = mul i32 %32, 25, !dbg !33
  %157 = mul i32 %33, 25, !dbg !33
  %158 = mul i32 %34, 25, !dbg !33
  %159 = mul i32 %35, 25, !dbg !33
  %160 = mul i32 %36, 25, !dbg !33
  %161 = mul i32 %37, 25, !dbg !33
  %162 = mul i32 %38, 25, !dbg !33
  %163 = mul i32 %39, 25, !dbg !33
  %164 = mul i32 %40, 25, !dbg !33
  %165 = mul i32 %41, 25, !dbg !33
  %166 = mul i32 %42, 25, !dbg !33
  %167 = mul i32 %43, 25, !dbg !33
  %168 = mul i32 %44, 25, !dbg !33
  %169 = mul i32 %45, 25, !dbg !33
  %170 = mul i32 %46, 25, !dbg !33
  %171 = add i32 %54, %155, !dbg !34
  %172 = add i32 %54, %156, !dbg !34
  %173 = add i32 %54, %157, !dbg !34
  %174 = add i32 %54, %158, !dbg !34
  %175 = add i32 %54, %159, !dbg !34
  %176 = add i32 %54, %160, !dbg !34
  %177 = add i32 %54, %161, !dbg !34
  %178 = add i32 %54, %162, !dbg !34
  %179 = add i32 %54, %163, !dbg !34
  %180 = add i32 %54, %164, !dbg !34
  %181 = add i32 %54, %165, !dbg !34
  %182 = add i32 %54, %166, !dbg !34
  %183 = add i32 %54, %167, !dbg !34
  %184 = add i32 %54, %168, !dbg !34
  %185 = add i32 %54, %169, !dbg !34
  %186 = add i32 %54, %170, !dbg !34
  %187 = sext i32 %171 to i64, !dbg !35
  %188 = getelementptr float, ptr addrspace(1) %3, i64 %187, !dbg !35
  %189 = sext i32 %172 to i64, !dbg !35
  %190 = getelementptr float, ptr addrspace(1) %3, i64 %189, !dbg !35
  %191 = sext i32 %173 to i64, !dbg !35
  %192 = getelementptr float, ptr addrspace(1) %3, i64 %191, !dbg !35
  %193 = sext i32 %174 to i64, !dbg !35
  %194 = getelementptr float, ptr addrspace(1) %3, i64 %193, !dbg !35
  %195 = sext i32 %175 to i64, !dbg !35
  %196 = getelementptr float, ptr addrspace(1) %3, i64 %195, !dbg !35
  %197 = sext i32 %176 to i64, !dbg !35
  %198 = getelementptr float, ptr addrspace(1) %3, i64 %197, !dbg !35
  %199 = sext i32 %177 to i64, !dbg !35
  %200 = getelementptr float, ptr addrspace(1) %3, i64 %199, !dbg !35
  %201 = sext i32 %178 to i64, !dbg !35
  %202 = getelementptr float, ptr addrspace(1) %3, i64 %201, !dbg !35
  %203 = sext i32 %179 to i64, !dbg !35
  %204 = getelementptr float, ptr addrspace(1) %3, i64 %203, !dbg !35
  %205 = sext i32 %180 to i64, !dbg !35
  %206 = getelementptr float, ptr addrspace(1) %3, i64 %205, !dbg !35
  %207 = sext i32 %181 to i64, !dbg !35
  %208 = getelementptr float, ptr addrspace(1) %3, i64 %207, !dbg !35
  %209 = sext i32 %182 to i64, !dbg !35
  %210 = getelementptr float, ptr addrspace(1) %3, i64 %209, !dbg !35
  %211 = sext i32 %183 to i64, !dbg !35
  %212 = getelementptr float, ptr addrspace(1) %3, i64 %211, !dbg !35
  %213 = sext i32 %184 to i64, !dbg !35
  %214 = getelementptr float, ptr addrspace(1) %3, i64 %213, !dbg !35
  %215 = sext i32 %185 to i64, !dbg !35
  %216 = getelementptr float, ptr addrspace(1) %3, i64 %215, !dbg !35
  %217 = sext i32 %186 to i64, !dbg !35
  %218 = getelementptr float, ptr addrspace(1) %3, i64 %217, !dbg !35
  %219 = shl i32 %10, 7, !dbg !36
  %220 = and i32 %219, 3968, !dbg !36
  %221 = or disjoint i32 %220, %14, !dbg !36
  %222 = and i32 %10, 255, !dbg !36
  %223 = lshr exact i32 %220, 3, !dbg !36
  %224 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %223, !dbg !36
  %225 = getelementptr float, ptr addrspace(3) %224, i32 %221, !dbg !36
  %226 = bitcast float %139 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 true) #2, !dbg !36
  %227 = or disjoint i32 %221, 32, !dbg !36
  %228 = lshr i32 %227, 5, !dbg !36
  %229 = getelementptr float, ptr addrspace(3) @global_smem, i32 %228, !dbg !36
  %230 = getelementptr float, ptr addrspace(3) %229, i32 %227, !dbg !36
  %231 = bitcast float %140 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #2, !dbg !36
  %232 = or disjoint i32 %221, 64, !dbg !36
  %233 = lshr i32 %232, 5, !dbg !36
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i32 %233, !dbg !36
  %235 = getelementptr float, ptr addrspace(3) %234, i32 %232, !dbg !36
  %236 = bitcast float %141 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #2, !dbg !36
  %237 = or disjoint i32 %221, 96, !dbg !36
  %238 = lshr i32 %237, 5, !dbg !36
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i32 %238, !dbg !36
  %240 = getelementptr float, ptr addrspace(3) %239, i32 %237, !dbg !36
  %241 = bitcast float %142 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #2, !dbg !36
  %242 = or disjoint i32 %221, 8, !dbg !36
  %243 = getelementptr float, ptr addrspace(3) %224, i32 %242, !dbg !36
  %244 = bitcast float %143 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 true) #2, !dbg !36
  %245 = or disjoint i32 %221, 40, !dbg !36
  %246 = lshr i32 %245, 5, !dbg !36
  %247 = getelementptr float, ptr addrspace(3) @global_smem, i32 %246, !dbg !36
  %248 = getelementptr float, ptr addrspace(3) %247, i32 %245, !dbg !36
  %249 = bitcast float %144 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 true) #2, !dbg !36
  %250 = or disjoint i32 %221, 72, !dbg !36
  %251 = lshr i32 %250, 5, !dbg !36
  %252 = getelementptr float, ptr addrspace(3) @global_smem, i32 %251, !dbg !36
  %253 = getelementptr float, ptr addrspace(3) %252, i32 %250, !dbg !36
  %254 = bitcast float %145 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 true) #2, !dbg !36
  %255 = or disjoint i32 %221, 104, !dbg !36
  %256 = lshr i32 %255, 5, !dbg !36
  %257 = getelementptr float, ptr addrspace(3) @global_smem, i32 %256, !dbg !36
  %258 = getelementptr float, ptr addrspace(3) %257, i32 %255, !dbg !36
  %259 = bitcast float %146 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #2, !dbg !36
  %260 = or disjoint i32 %221, 16, !dbg !36
  %261 = getelementptr float, ptr addrspace(3) %224, i32 %260, !dbg !36
  %262 = bitcast float %147 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #2, !dbg !36
  %263 = or disjoint i32 %221, 48, !dbg !36
  %264 = lshr i32 %263, 5, !dbg !36
  %265 = getelementptr float, ptr addrspace(3) @global_smem, i32 %264, !dbg !36
  %266 = getelementptr float, ptr addrspace(3) %265, i32 %263, !dbg !36
  %267 = bitcast float %148 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #2, !dbg !36
  %268 = or disjoint i32 %221, 80, !dbg !36
  %269 = lshr i32 %268, 5, !dbg !36
  %270 = getelementptr float, ptr addrspace(3) @global_smem, i32 %269, !dbg !36
  %271 = getelementptr float, ptr addrspace(3) %270, i32 %268, !dbg !36
  %272 = bitcast float %149 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #2, !dbg !36
  %273 = or disjoint i32 %221, 112, !dbg !36
  %274 = lshr i32 %273, 5, !dbg !36
  %275 = getelementptr float, ptr addrspace(3) @global_smem, i32 %274, !dbg !36
  %276 = getelementptr float, ptr addrspace(3) %275, i32 %273, !dbg !36
  %277 = bitcast float %150 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #2, !dbg !36
  %278 = or disjoint i32 %221, 24, !dbg !36
  %279 = getelementptr float, ptr addrspace(3) %224, i32 %278, !dbg !36
  %280 = bitcast float %151 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #2, !dbg !36
  %281 = or disjoint i32 %221, 56, !dbg !36
  %282 = lshr i32 %281, 5, !dbg !36
  %283 = getelementptr float, ptr addrspace(3) @global_smem, i32 %282, !dbg !36
  %284 = getelementptr float, ptr addrspace(3) %283, i32 %281, !dbg !36
  %285 = bitcast float %152 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 true) #2, !dbg !36
  %286 = or disjoint i32 %221, 88, !dbg !36
  %287 = lshr i32 %286, 5, !dbg !36
  %288 = getelementptr float, ptr addrspace(3) @global_smem, i32 %287, !dbg !36
  %289 = getelementptr float, ptr addrspace(3) %288, i32 %286, !dbg !36
  %290 = bitcast float %153 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %290, i1 true) #2, !dbg !36
  %291 = or disjoint i32 %221, 120, !dbg !36
  %292 = lshr i32 %291, 5, !dbg !36
  %293 = getelementptr float, ptr addrspace(3) @global_smem, i32 %292, !dbg !36
  %294 = getelementptr float, ptr addrspace(3) %293, i32 %291, !dbg !36
  %295 = bitcast float %154 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %296 = lshr i32 %222, 5, !dbg !36
  %297 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %296, !dbg !36
  %298 = getelementptr inbounds float, ptr addrspace(3) %297, i32 %222, !dbg !36
  %299 = load i32, ptr addrspace(3) %298, align 4, !dbg !36
  %300 = or disjoint i32 %222, 256, !dbg !36
  %301 = lshr i32 %300, 5, !dbg !36
  %302 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %301, !dbg !36
  %303 = getelementptr inbounds float, ptr addrspace(3) %302, i32 %300, !dbg !36
  %304 = load i32, ptr addrspace(3) %303, align 4, !dbg !36
  %305 = or disjoint i32 %222, 512, !dbg !36
  %306 = lshr i32 %305, 5, !dbg !36
  %307 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %306, !dbg !36
  %308 = getelementptr inbounds float, ptr addrspace(3) %307, i32 %305, !dbg !36
  %309 = load i32, ptr addrspace(3) %308, align 4, !dbg !36
  %310 = or disjoint i32 %222, 768, !dbg !36
  %311 = lshr i32 %310, 5, !dbg !36
  %312 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %311, !dbg !36
  %313 = getelementptr inbounds float, ptr addrspace(3) %312, i32 %310, !dbg !36
  %314 = load i32, ptr addrspace(3) %313, align 4, !dbg !36
  %315 = or disjoint i32 %222, 1024, !dbg !36
  %316 = lshr i32 %315, 5, !dbg !36
  %317 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %316, !dbg !36
  %318 = getelementptr inbounds float, ptr addrspace(3) %317, i32 %315, !dbg !36
  %319 = load i32, ptr addrspace(3) %318, align 4, !dbg !36
  %320 = or disjoint i32 %222, 1280, !dbg !36
  %321 = lshr i32 %320, 5, !dbg !36
  %322 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %321, !dbg !36
  %323 = getelementptr inbounds float, ptr addrspace(3) %322, i32 %320, !dbg !36
  %324 = load i32, ptr addrspace(3) %323, align 4, !dbg !36
  %325 = or disjoint i32 %222, 1536, !dbg !36
  %326 = lshr i32 %325, 5, !dbg !36
  %327 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %326, !dbg !36
  %328 = getelementptr inbounds float, ptr addrspace(3) %327, i32 %325, !dbg !36
  %329 = load i32, ptr addrspace(3) %328, align 4, !dbg !36
  %330 = or disjoint i32 %222, 1792, !dbg !36
  %331 = lshr i32 %330, 5, !dbg !36
  %332 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %331, !dbg !36
  %333 = getelementptr inbounds float, ptr addrspace(3) %332, i32 %330, !dbg !36
  %334 = load i32, ptr addrspace(3) %333, align 4, !dbg !36
  %335 = or disjoint i32 %222, 2048, !dbg !36
  %336 = lshr i32 %335, 5, !dbg !36
  %337 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %336, !dbg !36
  %338 = getelementptr inbounds float, ptr addrspace(3) %337, i32 %335, !dbg !36
  %339 = load i32, ptr addrspace(3) %338, align 4, !dbg !36
  %340 = or disjoint i32 %222, 2304, !dbg !36
  %341 = lshr i32 %340, 5, !dbg !36
  %342 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %341, !dbg !36
  %343 = getelementptr inbounds float, ptr addrspace(3) %342, i32 %340, !dbg !36
  %344 = load i32, ptr addrspace(3) %343, align 4, !dbg !36
  %345 = or disjoint i32 %222, 2560, !dbg !36
  %346 = lshr i32 %345, 5, !dbg !36
  %347 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %346, !dbg !36
  %348 = getelementptr inbounds float, ptr addrspace(3) %347, i32 %345, !dbg !36
  %349 = load i32, ptr addrspace(3) %348, align 4, !dbg !36
  %350 = or disjoint i32 %222, 2816, !dbg !36
  %351 = lshr i32 %350, 5, !dbg !36
  %352 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %351, !dbg !36
  %353 = getelementptr inbounds float, ptr addrspace(3) %352, i32 %350, !dbg !36
  %354 = load i32, ptr addrspace(3) %353, align 4, !dbg !36
  %355 = or disjoint i32 %222, 3072, !dbg !36
  %356 = lshr i32 %355, 5, !dbg !36
  %357 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %356, !dbg !36
  %358 = getelementptr inbounds float, ptr addrspace(3) %357, i32 %355, !dbg !36
  %359 = load i32, ptr addrspace(3) %358, align 4, !dbg !36
  %360 = or disjoint i32 %222, 3328, !dbg !36
  %361 = lshr i32 %360, 5, !dbg !36
  %362 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %361, !dbg !36
  %363 = getelementptr inbounds float, ptr addrspace(3) %362, i32 %360, !dbg !36
  %364 = load i32, ptr addrspace(3) %363, align 4, !dbg !36
  %365 = or disjoint i32 %222, 3584, !dbg !36
  %366 = lshr i32 %365, 5, !dbg !36
  %367 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %366, !dbg !36
  %368 = getelementptr inbounds float, ptr addrspace(3) %367, i32 %365, !dbg !36
  %369 = load i32, ptr addrspace(3) %368, align 4, !dbg !36
  %370 = or disjoint i32 %222, 3840, !dbg !36
  %371 = lshr i32 %370, 5, !dbg !36
  %372 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %371, !dbg !36
  %373 = getelementptr inbounds float, ptr addrspace(3) %372, i32 %370, !dbg !36
  %374 = load i32, ptr addrspace(3) %373, align 4, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %299, ptr addrspace(1) %188, i1 %59) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %304, ptr addrspace(1) %190, i1 %59) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %309, ptr addrspace(1) %192, i1 %59) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %314, ptr addrspace(1) %194, i1 %59) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %319, ptr addrspace(1) %196, i1 %59) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %324, ptr addrspace(1) %198, i1 %59) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %329, ptr addrspace(1) %200, i1 %59) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %334, ptr addrspace(1) %202, i1 %59) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %339, ptr addrspace(1) %204, i1 %59) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %344, ptr addrspace(1) %206, i1 %59) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %349, ptr addrspace(1) %208, i1 %59) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %354, ptr addrspace(1) %210, i1 %59) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %359, ptr addrspace(1) %212, i1 %59) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %364, ptr addrspace(1) %214, i1 %59) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %369, ptr addrspace(1) %216, i1 %59) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %374, ptr addrspace(1) %218, i1 %59) #2, !dbg !36
  %375 = getelementptr float, ptr addrspace(1) %4, i64 %72, !dbg !37
  %376 = getelementptr float, ptr addrspace(1) %4, i64 %74, !dbg !37
  %377 = getelementptr float, ptr addrspace(1) %4, i64 %76, !dbg !37
  %378 = getelementptr float, ptr addrspace(1) %4, i64 %78, !dbg !37
  %379 = bitcast float %139 to i32, !dbg !38
  %380 = bitcast float %140 to i32, !dbg !38
  %381 = bitcast float %141 to i32, !dbg !38
  %382 = bitcast float %142 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %379, i32 %380, i32 %381, i32 %382, ptr addrspace(1) %375, i1 %55) #2, !dbg !38
  %383 = bitcast float %143 to i32, !dbg !38
  %384 = bitcast float %144 to i32, !dbg !38
  %385 = bitcast float %145 to i32, !dbg !38
  %386 = bitcast float %146 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %383, i32 %384, i32 %385, i32 %386, ptr addrspace(1) %376, i1 %56) #2, !dbg !38
  %387 = bitcast float %147 to i32, !dbg !38
  %388 = bitcast float %148 to i32, !dbg !38
  %389 = bitcast float %149 to i32, !dbg !38
  %390 = bitcast float %150 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %387, i32 %388, i32 %389, i32 %390, ptr addrspace(1) %377, i1 %57) #2, !dbg !38
  %391 = bitcast float %151 to i32, !dbg !38
  %392 = bitcast float %152 to i32, !dbg !38
  %393 = bitcast float %153 to i32, !dbg !38
  %394 = bitcast float %154 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %391, i32 %392, i32 %393, i32 %394, ptr addrspace(1) %378, i1 %58) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvabjcmx2fnyssnrkwoxdno5qyrldudxdrc2j65lfoqt7yxr6vyy.py", directory: "inductor_cache/va")
!4 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__weight_norm_interface_convolution_12", linkageName: "triton_poi_fused__weight_norm_interface_convolution_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 47, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 52, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 33, scope: !7)
!34 = !DILocation(line: 37, column: 30, scope: !7)
!35 = !DILocation(line: 37, column: 25, scope: !7)
!36 = !DILocation(line: 37, column: 44, scope: !7)
!37 = !DILocation(line: 38, column: 25, scope: !7)
!38 = !DILocation(line: 38, column: 53, scope: !7)
!39 = !DILocation(line: 38, column: 4, scope: !7)
