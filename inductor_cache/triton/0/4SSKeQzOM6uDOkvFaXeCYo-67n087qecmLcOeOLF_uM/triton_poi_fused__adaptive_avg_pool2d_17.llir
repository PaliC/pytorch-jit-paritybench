; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_17(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 510, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 100352, !dbg !14
  %12 = sdiv i32 %9, 7, !dbg !15
  %13 = sdiv i32 %10, 7, !dbg !15
  %14 = sdiv i32 %9, 49, !dbg !16
  %15 = sdiv i32 %10, 49, !dbg !16
  %16 = srem i32 %14, 512, !dbg !17
  %17 = srem i32 %15, 512, !dbg !17
  %18 = sdiv i32 %9, 25088, !dbg !18
  %19 = shl nsw i32 %18, 11, !dbg !19
  %20 = add nsw i32 %19, %16, !dbg !20
  %21 = add nsw i32 %20, 512, !dbg !21
  %22 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !22
  %23 = insertelement <2 x i32> %22, i32 %12, i64 1, !dbg !22
  %24 = srem <2 x i32> %23, splat (i32 7), !dbg !22
  %25 = trunc nsw <2 x i32> %24 to <2 x i8>, !dbg !23
  %26 = shl nsw <2 x i8> %25, splat (i8 1), !dbg !23
  %27 = sdiv <2 x i8> %26, splat (i8 7), !dbg !23
  %28 = add nsw <2 x i8> %26, splat (i8 8), !dbg !24
  %29 = sdiv <2 x i8> %28, splat (i8 7), !dbg !24
  %30 = sext <2 x i8> %27 to <2 x i32>, !dbg !23
  %31 = icmp slt <2 x i8> %27, %29, !dbg !25
  %32 = extractelement <2 x i1> %31, i64 0, !dbg !26
  %33 = extractelement <2 x i1> %31, i64 1, !dbg !26
  %34 = and i1 %32, %33, !dbg !26
  %35 = shl nsw <2 x i32> %30, <i32 9, i32 10>, !dbg !27
  %36 = extractelement <2 x i32> %35, i64 0, !dbg !28
  %37 = add nsw i32 %20, %36, !dbg !29
  %38 = extractelement <2 x i32> %35, i64 1, !dbg !30
  %39 = add nsw i32 %37, %38, !dbg !31
  %40 = sext i32 %39 to i64, !dbg !32
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !32
  %42 = and i1 %11, %34, !dbg !33
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %42, i32 0, i1 %42) #1, !dbg !34
  %44 = bitcast i32 %43 to float, !dbg !34
  %45 = add nsw <2 x i32> %30, splat (i32 1), !dbg !35
  %46 = zext <2 x i8> %29 to <2 x i32>, !dbg !36
  %47 = icmp samesign ult <2 x i32> %45, %46, !dbg !36
  %48 = extractelement <2 x i1> %47, i64 0, !dbg !37
  %49 = and i1 %33, %48, !dbg !38
  %50 = add nsw i32 %21, %36, !dbg !39
  %51 = add nsw i32 %50, %38, !dbg !40
  %52 = sext i32 %51 to i64, !dbg !41
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !41
  %54 = and i1 %11, %49, !dbg !42
  %55 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !22
  %56 = insertelement <2 x i32> %55, i32 %13, i64 1, !dbg !22
  %57 = srem <2 x i32> %56, splat (i32 7), !dbg !22
  %58 = trunc nsw <2 x i32> %57 to <2 x i8>, !dbg !23
  %59 = shl nsw <2 x i8> %58, splat (i8 1), !dbg !23
  %60 = sdiv <2 x i8> %59, splat (i8 7), !dbg !23
  %61 = add nsw <2 x i8> %59, splat (i8 8), !dbg !24
  %62 = sdiv <2 x i8> %61, splat (i8 7), !dbg !24
  %63 = sext <2 x i8> %60 to <2 x i32>, !dbg !23
  %64 = icmp slt <2 x i8> %60, %62, !dbg !25
  %65 = extractelement <2 x i1> %64, i64 0, !dbg !26
  %66 = extractelement <2 x i1> %64, i64 1, !dbg !26
  %67 = and i1 %65, %66, !dbg !26
  %68 = extractelement <2 x i32> %63, i64 0, !dbg !27
  %69 = shl nsw i32 %68, 9, !dbg !27
  %70 = add nsw i32 %69, %17, !dbg !20
  %71 = extractelement <2 x i32> %63, i64 1, !dbg !43
  %72 = shl nsw i32 %71, 10, !dbg !43
  %73 = add nsw i32 %70, %72, !dbg !29
  %74 = add nsw i32 %73, %19, !dbg !31
  %75 = sext i32 %74 to i64, !dbg !32
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !32
  %77 = and i1 %67, %11, !dbg !33
  %78 = add nsw <2 x i32> %63, splat (i32 1), !dbg !35
  %79 = zext <2 x i8> %62 to <2 x i32>, !dbg !36
  %80 = icmp samesign ult <2 x i32> %78, %79, !dbg !36
  %81 = extractelement <2 x i1> %80, i64 0, !dbg !37
  %82 = and i1 %66, %81, !dbg !38
  %83 = add nsw i32 %70, 512, !dbg !21
  %84 = add nsw i32 %83, %72, !dbg !39
  %85 = add nsw i32 %84, %19, !dbg !40
  %86 = sext i32 %85 to i64, !dbg !41
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !41
  %88 = and i1 %82, %11, !dbg !42
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %77, i32 0, i1 %77) #1, !dbg !34
  %90 = bitcast i32 %89 to float, !dbg !34
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %54, i32 0, i1 %54) #1, !dbg !44
  %92 = bitcast i32 %91 to float, !dbg !44
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %88, i32 0, i1 %88) #1, !dbg !44
  %94 = bitcast i32 %93 to float, !dbg !44
  %95 = fadd float %44, %92, !dbg !45
  %96 = fadd float %90, %94, !dbg !45
  %97 = extractelement <2 x i1> %47, i64 1, !dbg !37
  %98 = and i1 %32, %97, !dbg !46
  %99 = extractelement <2 x i1> %80, i64 1, !dbg !37
  %100 = and i1 %65, %99, !dbg !46
  %101 = add nsw i32 %20, 1024, !dbg !47
  %102 = add nsw i32 %101, %36, !dbg !48
  %103 = add nsw i32 %102, %38, !dbg !49
  %104 = add nsw i32 %70, 1024, !dbg !47
  %105 = add nsw i32 %104, %72, !dbg !48
  %106 = add nsw i32 %105, %19, !dbg !49
  %107 = sext i32 %103 to i64, !dbg !50
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !50
  %109 = sext i32 %106 to i64, !dbg !50
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !50
  %111 = and i1 %11, %98, !dbg !51
  %112 = and i1 %100, %11, !dbg !51
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %111, i32 0, i1 %111) #1, !dbg !52
  %114 = bitcast i32 %113 to float, !dbg !52
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %112, i32 0, i1 %112) #1, !dbg !52
  %116 = bitcast i32 %115 to float, !dbg !52
  %117 = fadd float %95, %114, !dbg !53
  %118 = fadd float %96, %116, !dbg !53
  %119 = and i1 %48, %97, !dbg !37
  %120 = and i1 %81, %99, !dbg !37
  %121 = add nsw i32 %20, 1536, !dbg !54
  %122 = add nsw i32 %121, %36, !dbg !28
  %123 = add nsw i32 %122, %38, !dbg !30
  %124 = add nsw i32 %70, 1536, !dbg !54
  %125 = add nsw i32 %124, %72, !dbg !28
  %126 = add nsw i32 %125, %19, !dbg !30
  %127 = sext i32 %123 to i64, !dbg !55
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !55
  %129 = sext i32 %126 to i64, !dbg !55
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !55
  %131 = and i1 %11, %119, !dbg !56
  %132 = and i1 %120, %11, !dbg !56
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %131, i32 0, i1 %131) #1, !dbg !57
  %134 = bitcast i32 %133 to float, !dbg !57
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %132, i32 0, i1 %132) #1, !dbg !57
  %136 = bitcast i32 %135 to float, !dbg !57
  %137 = fadd float %117, %134, !dbg !58
  %138 = fadd float %118, %136, !dbg !58
  %139 = select i1 %34, float 1.000000e+00, float 0.000000e+00, !dbg !59
  %140 = select i1 %67, float 1.000000e+00, float 0.000000e+00, !dbg !59
  %141 = select i1 %49, float 1.000000e+00, float 0.000000e+00, !dbg !60
  %142 = select i1 %82, float 1.000000e+00, float 0.000000e+00, !dbg !60
  %143 = fadd float %141, %139, !dbg !61
  %144 = fadd float %142, %140, !dbg !61
  %145 = select i1 %98, float 1.000000e+00, float 0.000000e+00, !dbg !62
  %146 = select i1 %100, float 1.000000e+00, float 0.000000e+00, !dbg !62
  %147 = fadd float %145, %143, !dbg !63
  %148 = fadd float %146, %144, !dbg !63
  %149 = select i1 %119, float 1.000000e+00, float 0.000000e+00, !dbg !64
  %150 = select i1 %120, float 1.000000e+00, float 0.000000e+00, !dbg !64
  %151 = fadd float %149, %147, !dbg !65
  %152 = fadd float %150, %148, !dbg !65
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float %151) #1, !dbg !66
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float %152) #1, !dbg !66
  %155 = sext i32 %9 to i64, !dbg !67
  %156 = getelementptr float, ptr addrspace(1) %1, i64 %155, !dbg !67
  %157 = bitcast float %153 to i32, !dbg !68
  %158 = bitcast float %154 to i32, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %157, i32 %158, ptr addrspace(1) %156, i1 %11) #1, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chgkzflrhipm44lhja4hca3jrlcveutdcnb6npsm4qawqceu4fmn.py", directory: "inductor_cache/hg")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_17, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_17", linkageName: "triton_poi_fused__adaptive_avg_pool2d_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 36, column: 81, scope: !7)
!20 = !DILocation(line: 36, column: 35, scope: !7)
!21 = !DILocation(line: 40, column: 42, scope: !7)
!22 = !DILocation(line: 25, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 21, scope: !7)
!24 = !DILocation(line: 33, column: 25, scope: !7)
!25 = !DILocation(line: 34, column: 18, scope: !7)
!26 = !DILocation(line: 35, column: 18, scope: !7)
!27 = !DILocation(line: 36, column: 40, scope: !7)
!28 = !DILocation(line: 48, column: 63, scope: !7)
!29 = !DILocation(line: 36, column: 55, scope: !7)
!30 = !DILocation(line: 48, column: 84, scope: !7)
!31 = !DILocation(line: 36, column: 76, scope: !7)
!32 = !DILocation(line: 36, column: 30, scope: !7)
!33 = !DILocation(line: 36, column: 93, scope: !7)
!34 = !DILocation(line: 36, column: 86, scope: !7)
!35 = !DILocation(line: 37, column: 16, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 47, column: 20, scope: !7)
!38 = !DILocation(line: 39, column: 19, scope: !7)
!39 = !DILocation(line: 40, column: 62, scope: !7)
!40 = !DILocation(line: 40, column: 83, scope: !7)
!41 = !DILocation(line: 40, column: 31, scope: !7)
!42 = !DILocation(line: 40, column: 101, scope: !7)
!43 = !DILocation(line: 36, column: 61, scope: !7)
!44 = !DILocation(line: 40, column: 93, scope: !7)
!45 = !DILocation(line: 41, column: 20, scope: !7)
!46 = !DILocation(line: 44, column: 20, scope: !7)
!47 = !DILocation(line: 45, column: 43, scope: !7)
!48 = !DILocation(line: 45, column: 63, scope: !7)
!49 = !DILocation(line: 45, column: 84, scope: !7)
!50 = !DILocation(line: 45, column: 31, scope: !7)
!51 = !DILocation(line: 45, column: 102, scope: !7)
!52 = !DILocation(line: 45, column: 94, scope: !7)
!53 = !DILocation(line: 46, column: 20, scope: !7)
!54 = !DILocation(line: 48, column: 43, scope: !7)
!55 = !DILocation(line: 48, column: 31, scope: !7)
!56 = !DILocation(line: 48, column: 102, scope: !7)
!57 = !DILocation(line: 48, column: 94, scope: !7)
!58 = !DILocation(line: 49, column: 20, scope: !7)
!59 = !DILocation(line: 52, column: 34, scope: !7)
!60 = !DILocation(line: 55, column: 35, scope: !7)
!61 = !DILocation(line: 56, column: 20, scope: !7)
!62 = !DILocation(line: 59, column: 35, scope: !7)
!63 = !DILocation(line: 60, column: 20, scope: !7)
!64 = !DILocation(line: 63, column: 35, scope: !7)
!65 = !DILocation(line: 64, column: 20, scope: !7)
!66 = !DILocation(line: 65, column: 20, scope: !7)
!67 = !DILocation(line: 66, column: 25, scope: !7)
!68 = !DILocation(line: 66, column: 37, scope: !7)
!69 = !DILocation(line: 66, column: 4, scope: !7)
