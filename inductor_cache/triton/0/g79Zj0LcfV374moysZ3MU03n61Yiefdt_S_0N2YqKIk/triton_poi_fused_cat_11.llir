; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 254, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 1, !dbg !13
  %14 = icmp slt i32 %12, 768, !dbg !14
  %.frozen1 = freeze i32 %12, !dbg !15
  %15 = sdiv i32 %.frozen1, 16, !dbg !15
  %16 = srem i32 %15, 3, !dbg !16
  %.frozen = freeze i32 %12, !dbg !17
  %17 = sdiv i32 %.frozen, 4, !dbg !17
  %18 = srem i32 %17, 4, !dbg !18
  %19 = sdiv i32 %12, 48, !dbg !19
  %20 = mul i32 %17, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %20, !dbg !20
  %21 = srem i32 %13, 4, !dbg !20
  %22 = mul i32 %15, 16, !dbg !21
  %.decomposed2 = sub i32 %.frozen1, %22, !dbg !21
  %23 = icmp slt i32 %16, 1, !dbg !22
  %24 = shl nsw i32 %19, 4, !dbg !23
  %25 = add nsw i32 %18, %24, !dbg !24
  %26 = sext i32 %25 to i64, !dbg !25
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !25
  %28 = and i1 %14, %23, !dbg !26
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %28, i32 0, i1 %28) #1, !dbg !27
  %30 = bitcast i32 %29 to float, !dbg !27
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %28, i32 0, i1 %28) #1, !dbg !27
  %32 = bitcast i32 %31 to float, !dbg !27
  %33 = add nsw i32 %.decomposed, 4, !dbg !28
  %34 = add nsw i32 %33, %24, !dbg !29
  %35 = sext i32 %34 to i64, !dbg !30
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !30
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #1, !dbg !31
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !31
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !31
  %40 = bitcast i32 %38 to float, !dbg !31
  %41 = bitcast i32 %39 to float, !dbg !31
  %42 = fmul float %30, %40, !dbg !32
  %43 = fmul float %32, %41, !dbg !32
  %44 = icmp eq i32 %16, 1, !dbg !33
  %45 = and i1 %14, %44, !dbg !34
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %45, i32 0, i1 %45) #1, !dbg !35
  %47 = bitcast i32 %46 to float, !dbg !35
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %45, i32 0, i1 %45) #1, !dbg !35
  %49 = bitcast i32 %48 to float, !dbg !35
  %50 = sext i32 %.decomposed2 to i64, !dbg !36
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !36
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #1, !dbg !37
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !37
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !37
  %55 = bitcast i32 %53 to float, !dbg !37
  %56 = bitcast i32 %54 to float, !dbg !37
  %57 = fmul float %47, %55, !dbg !38
  %58 = fmul float %49, %56, !dbg !38
  %59 = icmp sgt i32 %16, 1, !dbg !39
  %60 = and i1 %14, %59, !dbg !40
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %60, i32 0, i1 %60, i32 0, i1 %60) #1, !dbg !41
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !41
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !41
  %64 = bitcast i32 %62 to float, !dbg !41
  %65 = bitcast i32 %63 to float, !dbg !41
  %66 = add nsw i32 %18, 16, !dbg !42
  %67 = shl nsw i32 %.decomposed, 2, !dbg !43
  %68 = shl nsw i32 %21, 2, !dbg !43
  %69 = add nsw i32 %66, %67, !dbg !44
  %70 = add nsw i32 %66, %68, !dbg !44
  %71 = zext nneg i32 %69 to i64, !dbg !45
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !45
  %73 = zext nneg i32 %70 to i64, !dbg !45
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !45
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %60, i32 0, i1 %60) #1, !dbg !46
  %76 = bitcast i32 %75 to float, !dbg !46
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %60, i32 0, i1 %60) #1, !dbg !46
  %78 = bitcast i32 %77 to float, !dbg !46
  %79 = fmul float %64, %76, !dbg !47
  %80 = fmul float %65, %78, !dbg !47
  %81 = select i1 %59, float %79, float 0.000000e+00, !dbg !48
  %82 = select i1 %59, float %80, float 0.000000e+00, !dbg !48
  %83 = select i1 %44, float %57, float %81, !dbg !49
  %84 = select i1 %44, float %58, float %82, !dbg !49
  %85 = select i1 %23, float %42, float %83, !dbg !49
  %86 = select i1 %23, float %43, float %84, !dbg !49
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !50
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %28, i32 0, i1 %28) #1, !dbg !51
  %89 = bitcast i32 %88 to float, !dbg !51
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %28, i32 0, i1 %28) #1, !dbg !51
  %91 = bitcast i32 %90 to float, !dbg !51
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !52
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %92, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #1, !dbg !53
  %94 = extractvalue { i32, i32 } %93, 0, !dbg !53
  %95 = extractvalue { i32, i32 } %93, 1, !dbg !53
  %96 = bitcast i32 %94 to float, !dbg !53
  %97 = bitcast i32 %95 to float, !dbg !53
  %98 = fmul float %89, %96, !dbg !54
  %99 = fmul float %91, %97, !dbg !54
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %45, i32 0, i1 %45) #1, !dbg !55
  %101 = bitcast i32 %100 to float, !dbg !55
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %45, i32 0, i1 %45) #1, !dbg !55
  %103 = bitcast i32 %102 to float, !dbg !55
  %104 = fmul float %55, %101, !dbg !56
  %105 = fmul float %56, %103, !dbg !56
  %106 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %92, i1 %60, i32 0, i1 %60, i32 0, i1 %60) #1, !dbg !57
  %107 = extractvalue { i32, i32 } %106, 0, !dbg !57
  %108 = extractvalue { i32, i32 } %106, 1, !dbg !57
  %109 = bitcast i32 %107 to float, !dbg !57
  %110 = bitcast i32 %108 to float, !dbg !57
  %111 = fmul float %76, %109, !dbg !58
  %112 = fmul float %78, %110, !dbg !58
  %113 = select i1 %59, float %111, float 0.000000e+00, !dbg !59
  %114 = select i1 %59, float %112, float 0.000000e+00, !dbg !59
  %115 = select i1 %44, float %104, float %113, !dbg !49
  %116 = select i1 %44, float %105, float %114, !dbg !49
  %117 = select i1 %23, float %98, float %115, !dbg !49
  %118 = select i1 %23, float %99, float %116, !dbg !49
  %119 = sext i32 %12 to i64, !dbg !60
  %120 = getelementptr float, ptr addrspace(1) %3, i64 %119, !dbg !60
  %121 = bitcast float %85 to i32, !dbg !61
  %122 = bitcast float %86 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %121, i32 %122, ptr addrspace(1) %120, i1 %14) #1, !dbg !61
  %123 = getelementptr float, ptr addrspace(1) %4, i64 %119, !dbg !62
  %124 = bitcast float %117 to i32, !dbg !63
  %125 = bitcast float %118 to i32, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %124, i32 %125, ptr addrspace(1) %123, i1 %14) #1, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clokmomnqycr7a2u6rridssl6tvcxjcswrkckypw54ddwc5qfpsu.py", directory: "inductor_cache/lo")
!4 = !{ptr @triton_poi_fused_cat_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_11", linkageName: "triton_poi_fused_cat_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 21, scope: !7)
!18 = !DILocation(line: 25, column: 26, scope: !7)
!19 = !DILocation(line: 26, column: 19, scope: !7)
!20 = !DILocation(line: 27, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 18, scope: !7)
!23 = !DILocation(line: 35, column: 38, scope: !7)
!24 = !DILocation(line: 35, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 50, scope: !7)
!27 = !DILocation(line: 35, column: 43, scope: !7)
!28 = !DILocation(line: 36, column: 34, scope: !7)
!29 = !DILocation(line: 36, column: 39, scope: !7)
!30 = !DILocation(line: 36, column: 30, scope: !7)
!31 = !DILocation(line: 36, column: 47, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 43, column: 20, scope: !7)
!34 = !DILocation(line: 44, column: 52, scope: !7)
!35 = !DILocation(line: 44, column: 44, scope: !7)
!36 = !DILocation(line: 45, column: 31, scope: !7)
!37 = !DILocation(line: 45, column: 36, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 52, column: 56, scope: !7)
!41 = !DILocation(line: 52, column: 48, scope: !7)
!42 = !DILocation(line: 53, column: 36, scope: !7)
!43 = !DILocation(line: 53, column: 43, scope: !7)
!44 = !DILocation(line: 53, column: 41, scope: !7)
!45 = !DILocation(line: 53, column: 31, scope: !7)
!46 = !DILocation(line: 53, column: 48, scope: !7)
!47 = !DILocation(line: 54, column: 20, scope: !7)
!48 = !DILocation(line: 56, column: 35, scope: !7)
!49 = !DILocation(line: 0, scope: !7)
!50 = !DILocation(line: 59, column: 31, scope: !7)
!51 = !DILocation(line: 59, column: 44, scope: !7)
!52 = !DILocation(line: 60, column: 31, scope: !7)
!53 = !DILocation(line: 60, column: 48, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 44, scope: !7)
!56 = !DILocation(line: 65, column: 20, scope: !7)
!57 = !DILocation(line: 68, column: 48, scope: !7)
!58 = !DILocation(line: 69, column: 20, scope: !7)
!59 = !DILocation(line: 71, column: 35, scope: !7)
!60 = !DILocation(line: 74, column: 25, scope: !7)
!61 = !DILocation(line: 74, column: 37, scope: !7)
!62 = !DILocation(line: 75, column: 25, scope: !7)
!63 = !DILocation(line: 75, column: 37, scope: !7)
!64 = !DILocation(line: 75, column: 4, scope: !7)
