; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, i32 %18) local_unnamed_addr !dbg !7 {
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %21 = shl i32 %20, 9, !dbg !11
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %23 = shl i32 %22, 1, !dbg !12
  %24 = and i32 %23, 510, !dbg !12
  %25 = or disjoint i32 %21, %24, !dbg !13
  %.frozen = freeze i32 %25, !dbg !14
  %26 = sdiv i32 %.frozen, 64, !dbg !14
  %27 = srem i32 %26, 64, !dbg !15
  %28 = mul i32 %26, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %28, !dbg !16
  %29 = sdiv i32 %25, 4096, !dbg !17
  %30 = srem i32 %29, 128, !dbg !18
  %31 = sext i32 %27 to i64, !dbg !19
  %32 = getelementptr i64, ptr addrspace(1) %0, i64 %31, !dbg !19
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !20
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !20
  %35 = sext i32 %.decomposed to i64, !dbg !21
  %36 = getelementptr i64, ptr addrspace(1) %1, i64 %35, !dbg !21
  %37 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !22
  %38 = extractvalue { i64, i64 } %37, 0, !dbg !22
  %39 = extractvalue { i64, i64 } %37, 1, !dbg !22
  %40 = sext i32 %30 to i64, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !23
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !24
  %44 = getelementptr i64, ptr addrspace(1) %4, i64 %35, !dbg !25
  %45 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !26
  %46 = extractvalue { i64, i64 } %45, 0, !dbg !26
  %47 = extractvalue { i64, i64 } %45, 1, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !27
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !28
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !28
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !28
  %52 = getelementptr i64, ptr addrspace(1) %6, i64 %31, !dbg !29
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !30
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !30
  %55 = getelementptr float, ptr addrspace(1) %7, i64 %31, !dbg !31
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !32
  %57 = bitcast i32 %56 to float, !dbg !32
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !32
  %59 = bitcast i32 %58 to float, !dbg !32
  %60 = getelementptr float, ptr addrspace(1) %9, i64 %40, !dbg !33
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !34
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !34
  %63 = getelementptr float, ptr addrspace(1) %11, i64 %40, !dbg !35
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !36
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !36
  %66 = lshr i64 %33, 57, !dbg !37
  %67 = and i64 %66, 64, !dbg !37
  %68 = add i64 %67, %33, !dbg !37
  %69 = lshr i64 %38, 57, !dbg !38
  %70 = and i64 %69, 64, !dbg !38
  %71 = add i64 %70, %38, !dbg !38
  %72 = lshr i64 %39, 57, !dbg !38
  %73 = and i64 %72, 64, !dbg !38
  %74 = add i64 %73, %39, !dbg !38
  %75 = shl i64 %68, 6, !dbg !39
  %76 = shl nsw i32 %29, 12, !dbg !40
  %77 = sext i32 %76 to i64, !dbg !41
  %78 = add i64 %75, %77, !dbg !42
  %79 = add i64 %78, %71, !dbg !41
  %80 = add i64 %78, %74, !dbg !41
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !43
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !43
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !44
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !44
  %85 = lshr i64 %46, 57, !dbg !45
  %86 = and i64 %85, 64, !dbg !45
  %87 = add i64 %86, %46, !dbg !45
  %88 = lshr i64 %47, 57, !dbg !45
  %89 = and i64 %88, 64, !dbg !45
  %90 = add i64 %89, %47, !dbg !45
  %91 = add i64 %78, %87, !dbg !46
  %92 = add i64 %78, %90, !dbg !46
  %93 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !47
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %92, !dbg !47
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !48
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !48
  %97 = lshr i64 %53, 57, !dbg !49
  %98 = and i64 %97, 64, !dbg !49
  %99 = add i64 %98, %53, !dbg !49
  %100 = shl i64 %99, 6, !dbg !50
  %101 = add i64 %100, %77, !dbg !51
  %102 = add i64 %101, %71, !dbg !52
  %103 = add i64 %101, %74, !dbg !52
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !53
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !53
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !54
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !54
  %108 = add i64 %101, %87, !dbg !55
  %109 = add i64 %101, %90, !dbg !55
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !56
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !56
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #1, !dbg !57
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #1, !dbg !57
  %114 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !54
  %115 = insertelement <2 x i32> %114, i32 %83, i64 1, !dbg !54
  %116 = bitcast <2 x i32> %115 to <2 x float>, !dbg !54
  %117 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !58
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !58
  %119 = shufflevector <2 x float> %118, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %120 = fadd <2 x float> %119, %116, !dbg !58
  %121 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !57
  %122 = insertelement <2 x i32> %121, i32 %95, i64 1, !dbg !57
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !57
  %124 = fadd <2 x float> %119, %123, !dbg !59
  %125 = fsub <2 x float> %124, %120, !dbg !60
  %126 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !61
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !61
  %128 = shufflevector <2 x float> %127, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %129 = fmul <2 x float> %125, %128, !dbg !61
  %130 = fadd <2 x float> %120, %129, !dbg !62
  %131 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !54
  %132 = insertelement <2 x i32> %131, i32 %84, i64 1, !dbg !54
  %133 = bitcast <2 x i32> %132 to <2 x float>, !dbg !54
  %134 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !58
  %135 = bitcast <2 x i32> %134 to <2 x float>, !dbg !58
  %136 = shufflevector <2 x float> %135, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %137 = fadd <2 x float> %136, %133, !dbg !58
  %138 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !57
  %139 = insertelement <2 x i32> %138, i32 %96, i64 1, !dbg !57
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !57
  %141 = fadd <2 x float> %136, %140, !dbg !59
  %142 = fsub <2 x float> %141, %137, !dbg !60
  %143 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !61
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !61
  %145 = shufflevector <2 x float> %144, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %146 = fmul <2 x float> %142, %145, !dbg !61
  %147 = fadd <2 x float> %137, %146, !dbg !62
  %148 = extractelement <2 x float> %130, i64 0, !dbg !63
  %149 = extractelement <2 x float> %130, i64 1, !dbg !64
  %150 = fsub float %148, %149, !dbg !63
  %151 = extractelement <2 x float> %147, i64 0, !dbg !63
  %152 = extractelement <2 x float> %147, i64 1, !dbg !64
  %153 = fsub float %151, %152, !dbg !63
  %154 = fmul float %150, %57, !dbg !65
  %155 = fmul float %153, %59, !dbg !65
  %156 = getelementptr float, ptr addrspace(1) %8, i64 %79, !dbg !66
  %157 = getelementptr float, ptr addrspace(1) %8, i64 %80, !dbg !66
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #1, !dbg !67
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 true) #1, !dbg !67
  %160 = getelementptr float, ptr addrspace(1) %8, i64 %91, !dbg !68
  %161 = getelementptr float, ptr addrspace(1) %8, i64 %92, !dbg !68
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #1, !dbg !69
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 true) #1, !dbg !69
  %164 = getelementptr float, ptr addrspace(1) %8, i64 %102, !dbg !70
  %165 = getelementptr float, ptr addrspace(1) %8, i64 %103, !dbg !70
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 true) #1, !dbg !71
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 true) #1, !dbg !71
  %168 = getelementptr float, ptr addrspace(1) %8, i64 %108, !dbg !72
  %169 = getelementptr float, ptr addrspace(1) %8, i64 %109, !dbg !72
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #1, !dbg !73
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 true) #1, !dbg !73
  %172 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !71
  %173 = insertelement <2 x i32> %172, i32 %158, i64 1, !dbg !71
  %174 = bitcast <2 x i32> %173 to <2 x float>, !dbg !71
  %175 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !74
  %176 = bitcast <2 x i32> %175 to <2 x float>, !dbg !74
  %177 = shufflevector <2 x float> %176, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !74
  %178 = fadd <2 x float> %177, %174, !dbg !74
  %179 = insertelement <2 x i32> poison, i32 %170, i64 0, !dbg !73
  %180 = insertelement <2 x i32> %179, i32 %162, i64 1, !dbg !73
  %181 = bitcast <2 x i32> %180 to <2 x float>, !dbg !73
  %182 = fadd <2 x float> %177, %181, !dbg !75
  %183 = fsub <2 x float> %182, %178, !dbg !76
  %184 = fmul <2 x float> %183, %128, !dbg !77
  %185 = fadd <2 x float> %178, %184, !dbg !78
  %186 = insertelement <2 x i32> poison, i32 %167, i64 0, !dbg !71
  %187 = insertelement <2 x i32> %186, i32 %159, i64 1, !dbg !71
  %188 = bitcast <2 x i32> %187 to <2 x float>, !dbg !71
  %189 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !74
  %190 = bitcast <2 x i32> %189 to <2 x float>, !dbg !74
  %191 = shufflevector <2 x float> %190, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !74
  %192 = fadd <2 x float> %191, %188, !dbg !74
  %193 = insertelement <2 x i32> poison, i32 %171, i64 0, !dbg !73
  %194 = insertelement <2 x i32> %193, i32 %163, i64 1, !dbg !73
  %195 = bitcast <2 x i32> %194 to <2 x float>, !dbg !73
  %196 = fadd <2 x float> %191, %195, !dbg !75
  %197 = fsub <2 x float> %196, %192, !dbg !76
  %198 = fmul <2 x float> %197, %145, !dbg !77
  %199 = fadd <2 x float> %192, %198, !dbg !78
  %200 = extractelement <2 x float> %185, i64 0, !dbg !79
  %201 = extractelement <2 x float> %185, i64 1, !dbg !80
  %202 = fsub float %200, %201, !dbg !79
  %203 = extractelement <2 x float> %199, i64 0, !dbg !79
  %204 = extractelement <2 x float> %199, i64 1, !dbg !80
  %205 = fsub float %203, %204, !dbg !79
  %206 = fmul float %202, %57, !dbg !81
  %207 = fmul float %205, %59, !dbg !81
  %208 = getelementptr float, ptr addrspace(1) %10, i64 %79, !dbg !82
  %209 = getelementptr float, ptr addrspace(1) %10, i64 %80, !dbg !82
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 true) #1, !dbg !83
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 true) #1, !dbg !83
  %212 = getelementptr float, ptr addrspace(1) %10, i64 %91, !dbg !84
  %213 = getelementptr float, ptr addrspace(1) %10, i64 %92, !dbg !84
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %212, i1 true) #1, !dbg !85
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %213, i1 true) #1, !dbg !85
  %216 = getelementptr float, ptr addrspace(1) %10, i64 %102, !dbg !86
  %217 = getelementptr float, ptr addrspace(1) %10, i64 %103, !dbg !86
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 true) #1, !dbg !87
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 true) #1, !dbg !87
  %220 = getelementptr float, ptr addrspace(1) %10, i64 %108, !dbg !88
  %221 = getelementptr float, ptr addrspace(1) %10, i64 %109, !dbg !88
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 true) #1, !dbg !89
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %221, i1 true) #1, !dbg !89
  %224 = insertelement <2 x i32> poison, i32 %218, i64 0, !dbg !87
  %225 = insertelement <2 x i32> %224, i32 %210, i64 1, !dbg !87
  %226 = bitcast <2 x i32> %225 to <2 x float>, !dbg !87
  %227 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !90
  %228 = bitcast <2 x i32> %227 to <2 x float>, !dbg !90
  %229 = shufflevector <2 x float> %228, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !90
  %230 = fadd <2 x float> %229, %226, !dbg !90
  %231 = insertelement <2 x i32> poison, i32 %222, i64 0, !dbg !89
  %232 = insertelement <2 x i32> %231, i32 %214, i64 1, !dbg !89
  %233 = bitcast <2 x i32> %232 to <2 x float>, !dbg !89
  %234 = fadd <2 x float> %229, %233, !dbg !91
  %235 = fsub <2 x float> %234, %230, !dbg !92
  %236 = fmul <2 x float> %235, %128, !dbg !93
  %237 = fadd <2 x float> %230, %236, !dbg !94
  %238 = insertelement <2 x i32> poison, i32 %219, i64 0, !dbg !87
  %239 = insertelement <2 x i32> %238, i32 %211, i64 1, !dbg !87
  %240 = bitcast <2 x i32> %239 to <2 x float>, !dbg !87
  %241 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !90
  %242 = bitcast <2 x i32> %241 to <2 x float>, !dbg !90
  %243 = shufflevector <2 x float> %242, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !90
  %244 = fadd <2 x float> %243, %240, !dbg !90
  %245 = insertelement <2 x i32> poison, i32 %223, i64 0, !dbg !89
  %246 = insertelement <2 x i32> %245, i32 %215, i64 1, !dbg !89
  %247 = bitcast <2 x i32> %246 to <2 x float>, !dbg !89
  %248 = fadd <2 x float> %243, %247, !dbg !91
  %249 = fsub <2 x float> %248, %244, !dbg !92
  %250 = fmul <2 x float> %249, %145, !dbg !93
  %251 = fadd <2 x float> %244, %250, !dbg !94
  %252 = extractelement <2 x float> %237, i64 0, !dbg !95
  %253 = extractelement <2 x float> %237, i64 1, !dbg !96
  %254 = fsub float %252, %253, !dbg !95
  %255 = extractelement <2 x float> %251, i64 0, !dbg !95
  %256 = extractelement <2 x float> %251, i64 1, !dbg !96
  %257 = fsub float %255, %256, !dbg !95
  %258 = fmul float %254, %57, !dbg !97
  %259 = fmul float %257, %59, !dbg !97
  %260 = sext i32 %25 to i64, !dbg !98
  %261 = getelementptr float, ptr addrspace(1) %12, i64 %260, !dbg !98
  %262 = bitcast float %149 to i32, !dbg !64
  %263 = bitcast float %152 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %262, i32 %263, ptr addrspace(1) %261, i1 true) #1, !dbg !64
  %264 = getelementptr float, ptr addrspace(1) %13, i64 %260, !dbg !99
  %265 = bitcast float %154 to i32, !dbg !100
  %266 = bitcast float %155 to i32, !dbg !100
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %265, i32 %266, ptr addrspace(1) %264, i1 true) #1, !dbg !100
  %267 = getelementptr float, ptr addrspace(1) %14, i64 %260, !dbg !101
  %268 = bitcast float %201 to i32, !dbg !80
  %269 = bitcast float %204 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %268, i32 %269, ptr addrspace(1) %267, i1 true) #1, !dbg !80
  %270 = getelementptr float, ptr addrspace(1) %15, i64 %260, !dbg !102
  %271 = bitcast float %206 to i32, !dbg !103
  %272 = bitcast float %207 to i32, !dbg !103
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %271, i32 %272, ptr addrspace(1) %270, i1 true) #1, !dbg !103
  %273 = getelementptr float, ptr addrspace(1) %16, i64 %260, !dbg !104
  %274 = bitcast float %253 to i32, !dbg !96
  %275 = bitcast float %256 to i32, !dbg !96
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %274, i32 %275, ptr addrspace(1) %273, i1 true) #1, !dbg !96
  %276 = getelementptr float, ptr addrspace(1) %17, i64 %260, !dbg !105
  %277 = bitcast float %258 to i32, !dbg !106
  %278 = bitcast float %259 to i32, !dbg !106
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %277, i32 %278, ptr addrspace(1) %276, i1 true) #1, !dbg !106
  ret void, !dbg !107
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvosmrfu6axwrhzd653igk6pmpzgbr4iqpt6jjll2haq7merwbuk.py", directory: "inductor_cache/vo")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_5", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 29, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 32, scope: !7)
!36 = !DILocation(line: 37, column: 37, scope: !7)
!37 = !DILocation(line: 41, column: 32, scope: !7)
!38 = !DILocation(line: 44, column: 32, scope: !7)
!39 = !DILocation(line: 45, column: 40, scope: !7)
!40 = !DILocation(line: 45, column: 52, scope: !7)
!41 = !DILocation(line: 45, column: 47, scope: !7)
!42 = !DILocation(line: 45, column: 37, scope: !7)
!43 = !DILocation(line: 45, column: 30, scope: !7)
!44 = !DILocation(line: 45, column: 57, scope: !7)
!45 = !DILocation(line: 49, column: 35, scope: !7)
!46 = !DILocation(line: 50, column: 49, scope: !7)
!47 = !DILocation(line: 50, column: 31, scope: !7)
!48 = !DILocation(line: 50, column: 59, scope: !7)
!49 = !DILocation(line: 57, column: 35, scope: !7)
!50 = !DILocation(line: 58, column: 41, scope: !7)
!51 = !DILocation(line: 58, column: 38, scope: !7)
!52 = !DILocation(line: 58, column: 49, scope: !7)
!53 = !DILocation(line: 58, column: 31, scope: !7)
!54 = !DILocation(line: 58, column: 59, scope: !7)
!55 = !DILocation(line: 60, column: 50, scope: !7)
!56 = !DILocation(line: 60, column: 31, scope: !7)
!57 = !DILocation(line: 60, column: 60, scope: !7)
!58 = !DILocation(line: 59, column: 20, scope: !7)
!59 = !DILocation(line: 61, column: 20, scope: !7)
!60 = !DILocation(line: 62, column: 20, scope: !7)
!61 = !DILocation(line: 63, column: 20, scope: !7)
!62 = !DILocation(line: 64, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 20, scope: !7)
!64 = !DILocation(line: 99, column: 37, scope: !7)
!65 = !DILocation(line: 66, column: 20, scope: !7)
!66 = !DILocation(line: 67, column: 31, scope: !7)
!67 = !DILocation(line: 67, column: 58, scope: !7)
!68 = !DILocation(line: 69, column: 31, scope: !7)
!69 = !DILocation(line: 69, column: 59, scope: !7)
!70 = !DILocation(line: 74, column: 31, scope: !7)
!71 = !DILocation(line: 74, column: 59, scope: !7)
!72 = !DILocation(line: 76, column: 31, scope: !7)
!73 = !DILocation(line: 76, column: 60, scope: !7)
!74 = !DILocation(line: 75, column: 20, scope: !7)
!75 = !DILocation(line: 77, column: 20, scope: !7)
!76 = !DILocation(line: 78, column: 20, scope: !7)
!77 = !DILocation(line: 79, column: 20, scope: !7)
!78 = !DILocation(line: 80, column: 20, scope: !7)
!79 = !DILocation(line: 81, column: 20, scope: !7)
!80 = !DILocation(line: 101, column: 37, scope: !7)
!81 = !DILocation(line: 82, column: 20, scope: !7)
!82 = !DILocation(line: 83, column: 32, scope: !7)
!83 = !DILocation(line: 83, column: 59, scope: !7)
!84 = !DILocation(line: 85, column: 32, scope: !7)
!85 = !DILocation(line: 85, column: 60, scope: !7)
!86 = !DILocation(line: 90, column: 32, scope: !7)
!87 = !DILocation(line: 90, column: 60, scope: !7)
!88 = !DILocation(line: 92, column: 32, scope: !7)
!89 = !DILocation(line: 92, column: 61, scope: !7)
!90 = !DILocation(line: 91, column: 20, scope: !7)
!91 = !DILocation(line: 93, column: 20, scope: !7)
!92 = !DILocation(line: 94, column: 20, scope: !7)
!93 = !DILocation(line: 95, column: 20, scope: !7)
!94 = !DILocation(line: 96, column: 20, scope: !7)
!95 = !DILocation(line: 97, column: 20, scope: !7)
!96 = !DILocation(line: 103, column: 37, scope: !7)
!97 = !DILocation(line: 98, column: 20, scope: !7)
!98 = !DILocation(line: 99, column: 25, scope: !7)
!99 = !DILocation(line: 100, column: 25, scope: !7)
!100 = !DILocation(line: 100, column: 37, scope: !7)
!101 = !DILocation(line: 101, column: 25, scope: !7)
!102 = !DILocation(line: 102, column: 25, scope: !7)
!103 = !DILocation(line: 102, column: 37, scope: !7)
!104 = !DILocation(line: 103, column: 25, scope: !7)
!105 = !DILocation(line: 104, column: 25, scope: !7)
!106 = !DILocation(line: 104, column: 37, scope: !7)
!107 = !DILocation(line: 104, column: 4, scope: !7)
