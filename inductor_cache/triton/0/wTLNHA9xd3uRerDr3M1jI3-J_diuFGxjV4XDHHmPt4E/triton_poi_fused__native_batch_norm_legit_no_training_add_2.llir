; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %18 = shl i32 %17, 3, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = lshr i32 %19, 2, !dbg !12
  %21 = and i32 %20, 3, !dbg !12
  %22 = lshr i32 %19, 2, !dbg !12
  %23 = and i32 %22, 4, !dbg !12
  %24 = or disjoint i32 %21, %23, !dbg !12
  %25 = and i32 %19, 3, !dbg !12
  %26 = and i32 %19, 7, !dbg !12
  %27 = or disjoint i32 %24, %18, !dbg !13
  %28 = or disjoint i32 %18, %26, !dbg !13
  %29 = icmp slt i32 %27, 16, !dbg !14
  %30 = icmp slt i32 %28, 16, !dbg !14
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %32 = shl i32 %31, 2, !dbg !16
  %33 = lshr i32 %19, 3, !dbg !17
  %34 = and i32 %33, 3, !dbg !17
  %35 = or disjoint i32 %32, %25, !dbg !18
  %36 = or disjoint i32 %34, %32, !dbg !18
  %37 = icmp slt i32 %35, 4, !dbg !19
  %38 = icmp slt i32 %36, 4, !dbg !19
  %39 = srem i32 %27, 4, !dbg !20
  %.frozen = freeze i32 %28, !dbg !21
  %40 = sdiv i32 %.frozen, 4, !dbg !21
  %41 = mul i32 %40, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %41, !dbg !20
  %42 = shl i32 %27, 2, !dbg !22
  %43 = add i32 %35, %42, !dbg !23
  %44 = sext i32 %43 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !24
  %46 = and i1 %29, %37, !dbg !25
  %47 = and i1 %30, %38, !dbg !25
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %46) #4, !dbg !26
  %49 = shl i32 %19, 3, !dbg !26
  %50 = and i32 %49, 24, !dbg !26
  %51 = or disjoint i32 %21, %50, !dbg !26
  %52 = or disjoint i32 %51, %23, !dbg !26
  %53 = and i32 %19, 31, !dbg !26
  %54 = lshr exact i32 %50, 1, !dbg !26
  %55 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %54, !dbg !26
  %56 = getelementptr inbounds float, ptr addrspace(3) %55, i32 %52, !dbg !26
  %57 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %58 = lshr i32 %53, 3, !dbg !26
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %58, !dbg !26
  %60 = getelementptr inbounds float, ptr addrspace(3) %59, i32 %53, !dbg !26
  %61 = load float, ptr addrspace(3) %60, align 4, !dbg !26
  %62 = shl i32 %36, 2, !dbg !27
  %63 = add i32 %62, %.decomposed, !dbg !28
  %64 = shl i32 %40, 4, !dbg !29
  %65 = add i32 %63, %64, !dbg !30
  %66 = sext i32 %65 to i64, !dbg !31
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !31
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %47) #4, !dbg !32
  %69 = bitcast i32 %68 to float, !dbg !32
  %70 = sext i32 %.decomposed to i64, !dbg !33
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !33
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %30) #4, !dbg !34
  %73 = bitcast i32 %72 to float, !dbg !34
  %74 = shl nsw i32 %39, 2, !dbg !35
  %75 = add i32 %74, %35, !dbg !36
  %76 = sext i32 %75 to i64, !dbg !37
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %76, !dbg !37
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %46) #4, !dbg !38
  %79 = getelementptr float, ptr addrspace(1) %4, i64 %76, !dbg !39
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %46) #4, !dbg !40
  %81 = bitcast i32 %80 to float, !dbg !40
  %82 = getelementptr float, ptr addrspace(1) %5, i64 %76, !dbg !41
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %46) #4, !dbg !42
  %84 = getelementptr float, ptr addrspace(1) %6, i64 %76, !dbg !43
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %46) #4, !dbg !44
  %86 = getelementptr float, ptr addrspace(1) %7, i64 %76, !dbg !45
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %46) #4, !dbg !46
  %88 = getelementptr float, ptr addrspace(1) %8, i64 %76, !dbg !47
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %46) #4, !dbg !48
  %90 = bitcast i32 %89 to float, !dbg !48
  %91 = getelementptr float, ptr addrspace(1) %9, i64 %76, !dbg !49
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %46) #4, !dbg !50
  %93 = getelementptr float, ptr addrspace(1) %10, i64 %76, !dbg !51
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %46) #4, !dbg !52
  %95 = fadd float %69, %73, !dbg !53
  %96 = fcmp olt float %95, 0.000000e+00, !dbg !54
  %97 = select i1 %96, float 0.000000e+00, float %95, !dbg !58
  %98 = fadd float %61, %97, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %99 = shl i32 %19, 2, !dbg !59
  %100 = and i32 %99, 28, !dbg !59
  %101 = or disjoint i32 %34, %100, !dbg !59
  %102 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %100, !dbg !59
  %103 = getelementptr inbounds float, ptr addrspace(3) %102, i32 %101, !dbg !59
  %104 = bitcast float %98 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #4, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %105 = lshr i32 %53, 2, !dbg !59
  %106 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %105, !dbg !59
  %107 = getelementptr inbounds float, ptr addrspace(3) %106, i32 %53, !dbg !59
  %108 = load float, ptr addrspace(3) %107, align 4, !dbg !59
  %109 = fadd float %81, 0x3EE4F8B580000000, !dbg !60
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !61
  %.not.i = icmp eq i32 %110, 0, !dbg !61
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !61
  %.not1.i = icmp eq i32 %111, 0, !dbg !61
  br i1 %.not.i, label %117, label %112, !dbg !61

112:                                              ; preds = %16
  br i1 %.not1.i, label %115, label %113, !dbg !61

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #4, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #4, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

117:                                              ; preds = %16
  br i1 %.not1.i, label %120, label %118, !dbg !61

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #4, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #4, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

__nv_sqrtf.exit:                                  ; preds = %113, %115, %118, %120
  %.0.i = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !61
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !62
  %123 = fadd float %90, 0x3EE4F8B580000000, !dbg !63
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not.i4 = icmp eq i32 %124, 0, !dbg !64
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !64
  %.not1.i7 = icmp eq i32 %125, 0, !dbg !64
  br i1 %.not.i4, label %131, label %126, !dbg !64

126:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %129, label %127, !dbg !64

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #4, !dbg !64
  br label %__nv_sqrtf.exit8, !dbg !64

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #4, !dbg !64
  br label %__nv_sqrtf.exit8, !dbg !64

131:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %134, label %132, !dbg !64

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #4, !dbg !64
  br label %__nv_sqrtf.exit8, !dbg !64

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #4, !dbg !64
  br label %__nv_sqrtf.exit8, !dbg !64

__nv_sqrtf.exit8:                                 ; preds = %127, %129, %132, %134
  %.0.i6 = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !64
  %136 = bitcast i32 %78 to float, !dbg !38
  %137 = fsub float %108, %136, !dbg !65
  %138 = fmul float %137, %122, !dbg !66
  %139 = bitcast i32 %83 to float, !dbg !42
  %140 = fmul float %138, %139, !dbg !67
  %141 = bitcast i32 %85 to float, !dbg !44
  %142 = fadd float %140, %141, !dbg !68
  %143 = bitcast i32 %87 to float, !dbg !46
  %144 = fsub float %142, %143, !dbg !69
  %145 = bitcast i32 %94 to float, !dbg !52
  %146 = bitcast i32 %92 to float, !dbg !50
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !70
  %148 = fmul float %144, %147, !dbg !71
  %149 = fmul float %148, %146, !dbg !72
  %150 = fadd float %149, %145, !dbg !73
  %151 = getelementptr float, ptr addrspace(1) %11, i64 %44, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #4, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %152 = load i32, ptr addrspace(3) %107, align 4, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %151, i1 %46) #4, !dbg !75
  %153 = getelementptr float, ptr addrspace(1) %12, i64 %44, !dbg !76
  %154 = bitcast float %142 to i32, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %154, ptr addrspace(1) %153, i1 %46) #4, !dbg !77
  %155 = getelementptr float, ptr addrspace(1) %13, i64 %44, !dbg !78
  %156 = bitcast float %150 to i32, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %156, ptr addrspace(1) %155, i1 %46) #4, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqncs52p2cuscbxxnbktpxxboosgyzzt2xapufoo4qmqesw6ve46.py", directory: "inductor_cache/qn")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_2", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 50, scope: !7)
!26 = !DILocation(line: 32, column: 42, scope: !7)
!27 = !DILocation(line: 33, column: 37, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 45, scope: !7)
!30 = !DILocation(line: 33, column: 42, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 50, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 35, scope: !7)
!35 = !DILocation(line: 35, column: 37, scope: !7)
!36 = !DILocation(line: 35, column: 35, scope: !7)
!37 = !DILocation(line: 35, column: 30, scope: !7)
!38 = !DILocation(line: 35, column: 42, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 42, scope: !7)
!41 = !DILocation(line: 37, column: 31, scope: !7)
!42 = !DILocation(line: 37, column: 43, scope: !7)
!43 = !DILocation(line: 38, column: 31, scope: !7)
!44 = !DILocation(line: 38, column: 43, scope: !7)
!45 = !DILocation(line: 39, column: 31, scope: !7)
!46 = !DILocation(line: 39, column: 43, scope: !7)
!47 = !DILocation(line: 40, column: 31, scope: !7)
!48 = !DILocation(line: 40, column: 43, scope: !7)
!49 = !DILocation(line: 41, column: 31, scope: !7)
!50 = !DILocation(line: 41, column: 43, scope: !7)
!51 = !DILocation(line: 42, column: 32, scope: !7)
!52 = !DILocation(line: 42, column: 44, scope: !7)
!53 = !DILocation(line: 43, column: 18, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !57)
!55 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!56 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!57 = !DILocation(line: 45, column: 40, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !57)
!59 = !DILocation(line: 46, column: 18, scope: !7)
!60 = !DILocation(line: 49, column: 19, scope: !7)
!61 = !DILocation(line: 50, column: 27, scope: !7)
!62 = !DILocation(line: 52, column: 20, scope: !7)
!63 = !DILocation(line: 59, column: 20, scope: !7)
!64 = !DILocation(line: 60, column: 27, scope: !7)
!65 = !DILocation(line: 47, column: 18, scope: !7)
!66 = !DILocation(line: 55, column: 19, scope: !7)
!67 = !DILocation(line: 56, column: 20, scope: !7)
!68 = !DILocation(line: 57, column: 20, scope: !7)
!69 = !DILocation(line: 58, column: 20, scope: !7)
!70 = !DILocation(line: 61, column: 20, scope: !7)
!71 = !DILocation(line: 63, column: 20, scope: !7)
!72 = !DILocation(line: 64, column: 20, scope: !7)
!73 = !DILocation(line: 65, column: 20, scope: !7)
!74 = !DILocation(line: 66, column: 25, scope: !7)
!75 = !DILocation(line: 66, column: 43, scope: !7)
!76 = !DILocation(line: 67, column: 25, scope: !7)
!77 = !DILocation(line: 67, column: 44, scope: !7)
!78 = !DILocation(line: 68, column: 25, scope: !7)
!79 = !DILocation(line: 68, column: 44, scope: !7)
!80 = !DILocation(line: 68, column: 4, scope: !7)
