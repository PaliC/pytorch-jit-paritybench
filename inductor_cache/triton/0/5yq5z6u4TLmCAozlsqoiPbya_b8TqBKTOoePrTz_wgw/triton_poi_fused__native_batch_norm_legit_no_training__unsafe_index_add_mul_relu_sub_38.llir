; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, i32 %21) local_unnamed_addr !dbg !7 {
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %24 = shl i32 %23, 8, !dbg !11
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %26 = shl i32 %25, 1, !dbg !12
  %27 = and i32 %26, 254, !dbg !12
  %28 = or disjoint i32 %24, %27, !dbg !13
  %.frozen = freeze i32 %28, !dbg !14
  %29 = sdiv i32 %.frozen, 8, !dbg !14
  %30 = srem i32 %29, 8, !dbg !15
  %31 = mul i32 %29, 8, !dbg !16
  %.decomposed = sub i32 %.frozen, %31, !dbg !16
  %32 = sdiv i32 %28, 64, !dbg !17
  %33 = srem i32 %32, 96, !dbg !18
  %34 = sext i32 %30 to i64, !dbg !19
  %35 = getelementptr i64, ptr addrspace(1) %1, i64 %34, !dbg !19
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !20
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !20
  %38 = sext i32 %.decomposed to i64, !dbg !21
  %39 = getelementptr i64, ptr addrspace(1) %2, i64 %38, !dbg !21
  %40 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %41 = extractvalue { i64, i64 } %40, 0, !dbg !22
  %42 = extractvalue { i64, i64 } %40, 1, !dbg !22
  %43 = getelementptr i64, ptr addrspace(1) %4, i64 %38, !dbg !23
  %44 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !24
  %45 = extractvalue { i64, i64 } %44, 0, !dbg !24
  %46 = extractvalue { i64, i64 } %44, 1, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !25
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !26
  %49 = sext i32 %28 to i64, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %6, i64 %49, !dbg !27
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !28
  %52 = sext i32 %33 to i64, !dbg !29
  %53 = getelementptr float, ptr addrspace(1) %7, i64 %52, !dbg !29
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !30
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !30
  %56 = getelementptr float, ptr addrspace(1) %8, i64 %52, !dbg !31
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !32
  %58 = bitcast i32 %57 to float, !dbg !32
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !32
  %60 = bitcast i32 %59 to float, !dbg !32
  %61 = getelementptr float, ptr addrspace(1) %9, i64 %52, !dbg !33
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !34
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !34
  %64 = getelementptr float, ptr addrspace(1) %10, i64 %52, !dbg !35
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !36
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !36
  %67 = getelementptr float, ptr addrspace(1) %11, i64 %49, !dbg !37
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !38
  %69 = getelementptr i64, ptr addrspace(1) %12, i64 %34, !dbg !39
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !40
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !40
  %72 = getelementptr float, ptr addrspace(1) %13, i64 %34, !dbg !41
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !42
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !42
  %75 = getelementptr i64, ptr addrspace(1) %14, i64 %34, !dbg !43
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !44
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !44
  %78 = getelementptr i64, ptr addrspace(1) %15, i64 %38, !dbg !45
  %79 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !46
  %80 = getelementptr i64, ptr addrspace(1) %17, i64 %38, !dbg !47
  %81 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !48
  %82 = getelementptr float, ptr addrspace(1) %18, i64 %38, !dbg !49
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !50
  %84 = getelementptr i64, ptr addrspace(1) %19, i64 %34, !dbg !51
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !52
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !52
  %87 = getelementptr float, ptr addrspace(1) %20, i64 %34, !dbg !53
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !54
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !54
  %90 = lshr i64 %36, 61, !dbg !55
  %91 = and i64 %90, 4, !dbg !55
  %92 = add i64 %91, %36, !dbg !55
  %93 = lshr i64 %41, 61, !dbg !56
  %94 = and i64 %93, 4, !dbg !56
  %95 = lshr i64 %42, 61, !dbg !56
  %96 = and i64 %95, 4, !dbg !56
  %97 = shl i64 %92, 2, !dbg !57
  %98 = shl nsw i32 %32, 4, !dbg !58
  %99 = sext i32 %98 to i64, !dbg !59
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !60
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %94, !dbg !60
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %97, !dbg !60
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %99, !dbg !60
  %104 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !60
  %105 = getelementptr float, ptr addrspace(1) %104, i64 %96, !dbg !60
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %97, !dbg !60
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %99, !dbg !60
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #3, !dbg !61
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #3, !dbg !61
  %110 = lshr i64 %45, 61, !dbg !62
  %111 = and i64 %110, 4, !dbg !62
  %112 = lshr i64 %46, 61, !dbg !62
  %113 = and i64 %112, 4, !dbg !62
  %114 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !63
  %115 = getelementptr float, ptr addrspace(1) %114, i64 %111, !dbg !63
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %97, !dbg !63
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %99, !dbg !63
  %118 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !63
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %113, !dbg !63
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %97, !dbg !63
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %99, !dbg !63
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #3, !dbg !64
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #3, !dbg !64
  %124 = fadd float %58, 0x3EE4F8B580000000, !dbg !65
  %125 = fadd float %60, 0x3EE4F8B580000000, !dbg !65
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i = icmp eq i32 %126, 0, !dbg !66
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i = icmp eq i32 %127, 0, !dbg !66
  br i1 %.not.i, label %133, label %128, !dbg !66

128:                                              ; preds = %22
  br i1 %.not1.i, label %131, label %129, !dbg !66

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

133:                                              ; preds = %22
  br i1 %.not1.i, label %136, label %134, !dbg !66

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

__nv_sqrtf.exit:                                  ; preds = %129, %131, %134, %136
  %.0.i = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !66
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i1 = icmp eq i32 %138, 0, !dbg !66
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i4 = icmp eq i32 %139, 0, !dbg !66
  br i1 %.not.i1, label %145, label %140, !dbg !66

140:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %143, label %141, !dbg !66

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

145:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %148, label %146, !dbg !66

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

__nv_sqrtf.exit5:                                 ; preds = %141, %143, %146, %148
  %.0.i3 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !66
  %150 = extractvalue { i32, i32 } %51, 1, !dbg !28
  %151 = bitcast i32 %150 to float, !dbg !28
  %152 = bitcast i32 %55 to float, !dbg !30
  %153 = fsub float %151, %152, !dbg !67
  %154 = extractvalue { i32, i32 } %51, 0, !dbg !28
  %155 = bitcast i32 %154 to float, !dbg !28
  %156 = bitcast i32 %54 to float, !dbg !30
  %157 = fsub float %155, %156, !dbg !67
  %158 = extractvalue { i32, i32 } %48, 1, !dbg !26
  %159 = extractvalue { i32, i32 } %48, 0, !dbg !26
  %160 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !42
  %161 = insertelement <2 x i32> %160, i32 %89, i64 1, !dbg !42
  %162 = bitcast <2 x i32> %161 to <2 x float>, !dbg !42
  %163 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !42
  %164 = insertelement <2 x i32> %163, i32 %88, i64 1, !dbg !42
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !42
  %166 = extractvalue { i32, i32 } %83, 1, !dbg !50
  %167 = extractvalue { i32, i32 } %83, 0, !dbg !50
  %168 = extractvalue { i64, i64 } %81, 1, !dbg !48
  %169 = extractvalue { i64, i64 } %81, 0, !dbg !48
  %170 = extractvalue { i64, i64 } %79, 1, !dbg !46
  %171 = extractvalue { i64, i64 } %79, 0, !dbg !46
  %172 = extractvalue { i32, i32 } %68, 1, !dbg !38
  %173 = bitcast i32 %172 to float, !dbg !38
  %174 = extractvalue { i32, i32 } %68, 0, !dbg !38
  %175 = bitcast i32 %174 to float, !dbg !38
  %176 = bitcast i32 %66 to float, !dbg !36
  %177 = bitcast i32 %65 to float, !dbg !36
  %178 = bitcast i32 %63 to float, !dbg !34
  %179 = bitcast i32 %62 to float, !dbg !34
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !68
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !68
  %182 = fmul float %157, %180, !dbg !69
  %183 = fmul float %153, %181, !dbg !69
  %184 = fmul float %182, %179, !dbg !70
  %185 = fmul float %183, %178, !dbg !70
  %186 = fadd float %184, %177, !dbg !71
  %187 = fadd float %185, %176, !dbg !71
  %188 = fadd float %186, %175, !dbg !72
  %189 = fadd float %187, %173, !dbg !72
  %190 = lshr i64 %70, 61, !dbg !73
  %191 = and i64 %190, 4, !dbg !73
  %192 = add i64 %191, %70, !dbg !73
  %193 = shl i64 %192, 2, !dbg !74
  %194 = getelementptr float, ptr addrspace(1) %101, i64 %193, !dbg !75
  %195 = getelementptr float, ptr addrspace(1) %194, i64 %99, !dbg !75
  %196 = getelementptr float, ptr addrspace(1) %105, i64 %193, !dbg !75
  %197 = getelementptr float, ptr addrspace(1) %196, i64 %99, !dbg !75
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 true) #3, !dbg !76
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 true) #3, !dbg !76
  %200 = getelementptr float, ptr addrspace(1) %115, i64 %193, !dbg !77
  %201 = getelementptr float, ptr addrspace(1) %200, i64 %99, !dbg !77
  %202 = getelementptr float, ptr addrspace(1) %119, i64 %193, !dbg !77
  %203 = getelementptr float, ptr addrspace(1) %202, i64 %99, !dbg !77
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 true) #3, !dbg !78
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 true) #3, !dbg !78
  %206 = lshr i64 %76, 62, !dbg !79
  %207 = and i64 %206, 2, !dbg !79
  %208 = add i64 %207, %76, !dbg !79
  %209 = lshr i64 %171, 62, !dbg !80
  %210 = and i64 %209, 2, !dbg !80
  %211 = lshr i64 %170, 62, !dbg !80
  %212 = and i64 %211, 2, !dbg !80
  %213 = shl i64 %208, 1, !dbg !81
  %214 = shl nsw i32 %32, 2, !dbg !82
  %215 = sext i32 %214 to i64, !dbg !83
  %216 = getelementptr float, ptr addrspace(1) %16, i64 %171, !dbg !84
  %217 = getelementptr float, ptr addrspace(1) %216, i64 %210, !dbg !84
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %213, !dbg !84
  %219 = getelementptr float, ptr addrspace(1) %218, i64 %215, !dbg !84
  %220 = getelementptr float, ptr addrspace(1) %16, i64 %170, !dbg !84
  %221 = getelementptr float, ptr addrspace(1) %220, i64 %212, !dbg !84
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %213, !dbg !84
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %215, !dbg !84
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %219, i1 true) #3, !dbg !85
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %223, i1 true) #3, !dbg !85
  %226 = lshr i64 %169, 62, !dbg !86
  %227 = and i64 %226, 2, !dbg !86
  %228 = lshr i64 %168, 62, !dbg !86
  %229 = and i64 %228, 2, !dbg !86
  %230 = getelementptr float, ptr addrspace(1) %16, i64 %169, !dbg !87
  %231 = getelementptr float, ptr addrspace(1) %230, i64 %227, !dbg !87
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %213, !dbg !87
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %215, !dbg !87
  %234 = getelementptr float, ptr addrspace(1) %16, i64 %168, !dbg !87
  %235 = getelementptr float, ptr addrspace(1) %234, i64 %229, !dbg !87
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %213, !dbg !87
  %237 = getelementptr float, ptr addrspace(1) %236, i64 %215, !dbg !87
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 true) #3, !dbg !88
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %237, i1 true) #3, !dbg !88
  %240 = lshr i64 %85, 62, !dbg !89
  %241 = and i64 %240, 2, !dbg !89
  %242 = add i64 %241, %85, !dbg !89
  %243 = shl i64 %242, 1, !dbg !90
  %244 = getelementptr float, ptr addrspace(1) %217, i64 %243, !dbg !91
  %245 = getelementptr float, ptr addrspace(1) %244, i64 %215, !dbg !91
  %246 = getelementptr float, ptr addrspace(1) %221, i64 %243, !dbg !91
  %247 = getelementptr float, ptr addrspace(1) %246, i64 %215, !dbg !91
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 true) #3, !dbg !92
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %247, i1 true) #3, !dbg !92
  %250 = getelementptr float, ptr addrspace(1) %231, i64 %243, !dbg !93
  %251 = getelementptr float, ptr addrspace(1) %250, i64 %215, !dbg !93
  %252 = getelementptr float, ptr addrspace(1) %235, i64 %243, !dbg !93
  %253 = getelementptr float, ptr addrspace(1) %252, i64 %215, !dbg !93
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %251, i1 true) #3, !dbg !94
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %253, i1 true) #3, !dbg !94
  %256 = insertelement <2 x i32> poison, i32 %159, i64 0, !dbg !26
  %257 = insertelement <2 x i32> %256, i32 %167, i64 1, !dbg !26
  %258 = bitcast <2 x i32> %257 to <2 x float>, !dbg !26
  %259 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !61
  %260 = insertelement <2 x i32> %259, i32 %224, i64 1, !dbg !61
  %261 = bitcast <2 x i32> %260 to <2 x float>, !dbg !61
  %262 = insertelement <2 x i32> poison, i32 %122, i64 0, !dbg !64
  %263 = insertelement <2 x i32> %262, i32 %238, i64 1, !dbg !64
  %264 = bitcast <2 x i32> %263 to <2 x float>, !dbg !64
  %265 = fsub <2 x float> %264, %261, !dbg !95
  %266 = fmul <2 x float> %265, %258, !dbg !96
  %267 = fadd <2 x float> %266, %261, !dbg !97
  %268 = insertelement <2 x i32> poison, i32 %198, i64 0, !dbg !76
  %269 = insertelement <2 x i32> %268, i32 %248, i64 1, !dbg !76
  %270 = bitcast <2 x i32> %269 to <2 x float>, !dbg !76
  %271 = insertelement <2 x i32> poison, i32 %204, i64 0, !dbg !78
  %272 = insertelement <2 x i32> %271, i32 %254, i64 1, !dbg !78
  %273 = bitcast <2 x i32> %272 to <2 x float>, !dbg !78
  %274 = fsub <2 x float> %273, %270, !dbg !98
  %275 = fmul <2 x float> %274, %258, !dbg !99
  %276 = fadd <2 x float> %275, %270, !dbg !100
  %277 = fsub <2 x float> %276, %267, !dbg !101
  %278 = fmul <2 x float> %277, %165, !dbg !102
  %279 = fadd <2 x float> %267, %278, !dbg !103
  %280 = extractelement <2 x float> %279, i64 0, !dbg !104
  %281 = fadd float %188, %280, !dbg !104
  %282 = insertelement <2 x i32> poison, i32 %158, i64 0, !dbg !26
  %283 = insertelement <2 x i32> %282, i32 %166, i64 1, !dbg !26
  %284 = bitcast <2 x i32> %283 to <2 x float>, !dbg !26
  %285 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !61
  %286 = insertelement <2 x i32> %285, i32 %225, i64 1, !dbg !61
  %287 = bitcast <2 x i32> %286 to <2 x float>, !dbg !61
  %288 = insertelement <2 x i32> poison, i32 %123, i64 0, !dbg !64
  %289 = insertelement <2 x i32> %288, i32 %239, i64 1, !dbg !64
  %290 = bitcast <2 x i32> %289 to <2 x float>, !dbg !64
  %291 = fsub <2 x float> %290, %287, !dbg !95
  %292 = fmul <2 x float> %291, %284, !dbg !96
  %293 = fadd <2 x float> %292, %287, !dbg !97
  %294 = insertelement <2 x i32> poison, i32 %199, i64 0, !dbg !76
  %295 = insertelement <2 x i32> %294, i32 %249, i64 1, !dbg !76
  %296 = bitcast <2 x i32> %295 to <2 x float>, !dbg !76
  %297 = insertelement <2 x i32> poison, i32 %205, i64 0, !dbg !78
  %298 = insertelement <2 x i32> %297, i32 %255, i64 1, !dbg !78
  %299 = bitcast <2 x i32> %298 to <2 x float>, !dbg !78
  %300 = fsub <2 x float> %299, %296, !dbg !98
  %301 = fmul <2 x float> %300, %284, !dbg !99
  %302 = fadd <2 x float> %301, %296, !dbg !100
  %303 = fsub <2 x float> %302, %293, !dbg !101
  %304 = fmul <2 x float> %303, %162, !dbg !102
  %305 = fadd <2 x float> %293, %304, !dbg !103
  %306 = extractelement <2 x float> %305, i64 0, !dbg !104
  %307 = fadd float %189, %306, !dbg !104
  %308 = extractelement <2 x float> %279, i64 1, !dbg !105
  %309 = fadd float %281, %308, !dbg !105
  %310 = extractelement <2 x float> %305, i64 1, !dbg !105
  %311 = fadd float %307, %310, !dbg !105
  %312 = fcmp olt float %309, 0.000000e+00, !dbg !106
  %313 = fcmp olt float %311, 0.000000e+00, !dbg !106
  %314 = select i1 %312, float 0.000000e+00, float %309, !dbg !110
  %315 = select i1 %313, float 0.000000e+00, float %311, !dbg !110
  %316 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !111
  %317 = bitcast float %314 to i32, !dbg !112
  %318 = bitcast float %315 to i32, !dbg !112
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %317, i32 %318, ptr addrspace(1) %316, i1 true) #3, !dbg !112
  ret void, !dbg !113
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp2gita7bvjuxljnazd2bp7dnwy4buhxb2cy724y5dzynskb526w.py", directory: "inductor_cache/p2")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_38, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_38", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 42, column: 32, scope: !7)
!46 = !DILocation(line: 42, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 32, scope: !7)
!48 = !DILocation(line: 43, column: 37, scope: !7)
!49 = !DILocation(line: 44, column: 32, scope: !7)
!50 = !DILocation(line: 44, column: 37, scope: !7)
!51 = !DILocation(line: 45, column: 32, scope: !7)
!52 = !DILocation(line: 45, column: 37, scope: !7)
!53 = !DILocation(line: 46, column: 32, scope: !7)
!54 = !DILocation(line: 46, column: 37, scope: !7)
!55 = !DILocation(line: 50, column: 32, scope: !7)
!56 = !DILocation(line: 53, column: 32, scope: !7)
!57 = !DILocation(line: 54, column: 39, scope: !7)
!58 = !DILocation(line: 54, column: 49, scope: !7)
!59 = !DILocation(line: 54, column: 46, scope: !7)
!60 = !DILocation(line: 54, column: 30, scope: !7)
!61 = !DILocation(line: 54, column: 54, scope: !7)
!62 = !DILocation(line: 57, column: 35, scope: !7)
!63 = !DILocation(line: 58, column: 31, scope: !7)
!64 = !DILocation(line: 58, column: 56, scope: !7)
!65 = !DILocation(line: 64, column: 20, scope: !7)
!66 = !DILocation(line: 65, column: 27, scope: !7)
!67 = !DILocation(line: 62, column: 20, scope: !7)
!68 = !DILocation(line: 67, column: 20, scope: !7)
!69 = !DILocation(line: 70, column: 20, scope: !7)
!70 = !DILocation(line: 71, column: 20, scope: !7)
!71 = !DILocation(line: 72, column: 20, scope: !7)
!72 = !DILocation(line: 73, column: 20, scope: !7)
!73 = !DILocation(line: 76, column: 35, scope: !7)
!74 = !DILocation(line: 77, column: 40, scope: !7)
!75 = !DILocation(line: 77, column: 31, scope: !7)
!76 = !DILocation(line: 77, column: 56, scope: !7)
!77 = !DILocation(line: 78, column: 31, scope: !7)
!78 = !DILocation(line: 78, column: 57, scope: !7)
!79 = !DILocation(line: 89, column: 35, scope: !7)
!80 = !DILocation(line: 92, column: 35, scope: !7)
!81 = !DILocation(line: 93, column: 42, scope: !7)
!82 = !DILocation(line: 93, column: 52, scope: !7)
!83 = !DILocation(line: 93, column: 50, scope: !7)
!84 = !DILocation(line: 93, column: 32, scope: !7)
!85 = !DILocation(line: 93, column: 57, scope: !7)
!86 = !DILocation(line: 96, column: 35, scope: !7)
!87 = !DILocation(line: 97, column: 32, scope: !7)
!88 = !DILocation(line: 97, column: 57, scope: !7)
!89 = !DILocation(line: 103, column: 35, scope: !7)
!90 = !DILocation(line: 104, column: 42, scope: !7)
!91 = !DILocation(line: 104, column: 32, scope: !7)
!92 = !DILocation(line: 104, column: 57, scope: !7)
!93 = !DILocation(line: 105, column: 32, scope: !7)
!94 = !DILocation(line: 105, column: 57, scope: !7)
!95 = !DILocation(line: 59, column: 20, scope: !7)
!96 = !DILocation(line: 60, column: 20, scope: !7)
!97 = !DILocation(line: 61, column: 19, scope: !7)
!98 = !DILocation(line: 79, column: 20, scope: !7)
!99 = !DILocation(line: 80, column: 20, scope: !7)
!100 = !DILocation(line: 81, column: 20, scope: !7)
!101 = !DILocation(line: 82, column: 20, scope: !7)
!102 = !DILocation(line: 83, column: 20, scope: !7)
!103 = !DILocation(line: 84, column: 20, scope: !7)
!104 = !DILocation(line: 85, column: 20, scope: !7)
!105 = !DILocation(line: 112, column: 20, scope: !7)
!106 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !109)
!107 = distinct !DILexicalBlockFile(scope: !7, file: !108, discriminator: 0)
!108 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!109 = !DILocation(line: 114, column: 42, scope: !7)
!110 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !109)
!111 = !DILocation(line: 115, column: 28, scope: !7)
!112 = !DILocation(line: 115, column: 40, scope: !7)
!113 = !DILocation(line: 115, column: 4, scope: !7)
