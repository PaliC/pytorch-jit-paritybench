; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %.frozen = freeze i32 %18, !dbg !14
  %19 = sdiv i32 %.frozen, 4, !dbg !14
  %20 = srem i32 %19, 4, !dbg !15
  %21 = mul i32 %19, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %22 = sdiv i32 %18, 16, !dbg !17
  %23 = sext i32 %20 to i64, !dbg !18
  %24 = getelementptr i64, ptr addrspace(1) %2, i64 %23, !dbg !18
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !19
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !19
  %27 = sext i32 %.decomposed to i64, !dbg !20
  %28 = getelementptr i64, ptr addrspace(1) %3, i64 %27, !dbg !20
  %29 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !21
  %30 = extractvalue { i64, i64 } %29, 0, !dbg !21
  %31 = extractvalue { i64, i64 } %29, 1, !dbg !21
  %32 = sext i32 %22 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !25
  %39 = getelementptr i64, ptr addrspace(1) %7, i64 %23, !dbg !26
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !27
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !27
  %42 = getelementptr i64, ptr addrspace(1) %8, i64 %27, !dbg !28
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !29
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !29
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !29
  %46 = getelementptr float, ptr addrspace(1) %9, i64 %27, !dbg !30
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !31
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !31
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %10, i64 %23, !dbg !32
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !33
  %52 = bitcast i32 %51 to float, !dbg !33
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !33
  %54 = bitcast i32 %53 to float, !dbg !33
  %55 = lshr i64 %25, 62, !dbg !34
  %56 = and i64 %55, 2, !dbg !34
  %57 = add i64 %56, %25, !dbg !34
  %58 = lshr i64 %30, 62, !dbg !35
  %59 = and i64 %58, 2, !dbg !35
  %60 = lshr i64 %31, 62, !dbg !35
  %61 = and i64 %60, 2, !dbg !35
  %62 = shl i64 %57, 1, !dbg !36
  %63 = shl nsw i32 %22, 2, !dbg !37
  %64 = sext i32 %63 to i64, !dbg !38
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !39
  %66 = getelementptr float, ptr addrspace(1) %65, i64 %59, !dbg !39
  %67 = getelementptr float, ptr addrspace(1) %66, i64 %62, !dbg !39
  %68 = getelementptr float, ptr addrspace(1) %67, i64 %64, !dbg !39
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !39
  %70 = getelementptr float, ptr addrspace(1) %69, i64 %61, !dbg !39
  %71 = getelementptr float, ptr addrspace(1) %70, i64 %62, !dbg !39
  %72 = getelementptr float, ptr addrspace(1) %71, i64 %64, !dbg !39
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #1, !dbg !40
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !40
  %75 = lshr i64 %40, 62, !dbg !41
  %76 = and i64 %75, 2, !dbg !41
  %77 = add i64 %76, %40, !dbg !41
  %78 = shl i64 %77, 1, !dbg !42
  %79 = getelementptr float, ptr addrspace(1) %66, i64 %78, !dbg !43
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %64, !dbg !43
  %81 = getelementptr float, ptr addrspace(1) %70, i64 %78, !dbg !43
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %64, !dbg !43
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !44
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !44
  %85 = lshr i64 %44, 62, !dbg !45
  %86 = and i64 %85, 2, !dbg !45
  %87 = lshr i64 %45, 62, !dbg !45
  %88 = and i64 %87, 2, !dbg !45
  %89 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !46
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %86, !dbg !46
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %78, !dbg !46
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %64, !dbg !46
  %93 = getelementptr float, ptr addrspace(1) %4, i64 %45, !dbg !46
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %88, !dbg !46
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %78, !dbg !46
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %64, !dbg !46
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !47
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !47
  %99 = getelementptr float, ptr addrspace(1) %90, i64 %62, !dbg !48
  %100 = getelementptr float, ptr addrspace(1) %99, i64 %64, !dbg !48
  %101 = getelementptr float, ptr addrspace(1) %94, i64 %62, !dbg !48
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %64, !dbg !48
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #1, !dbg !49
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !49
  %105 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !40
  %106 = insertelement <2 x i32> %105, i32 %83, i64 1, !dbg !40
  %107 = bitcast <2 x i32> %106 to <2 x float>, !dbg !40
  %108 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !50
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !50
  %110 = shufflevector <2 x float> %109, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %111 = fsub <2 x float> %107, %110, !dbg !50
  %112 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !51
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !51
  %114 = shufflevector <2 x float> %113, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !51
  %115 = fmul <2 x float> %111, %114, !dbg !51
  %116 = fcmp olt <2 x float> %115, zeroinitializer, !dbg !52
  %117 = select <2 x i1> %116, <2 x float> zeroinitializer, <2 x float> %115, !dbg !56
  %118 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !49
  %119 = insertelement <2 x i32> %118, i32 %97, i64 1, !dbg !49
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !49
  %121 = fsub <2 x float> %120, %110, !dbg !57
  %122 = fmul <2 x float> %121, %114, !dbg !58
  %123 = fcmp olt <2 x float> %122, zeroinitializer, !dbg !59
  %124 = select <2 x i1> %123, <2 x float> zeroinitializer, <2 x float> %122, !dbg !61
  %125 = fsub <2 x float> %124, %117, !dbg !62
  %126 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !63
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !63
  %128 = shufflevector <2 x float> %127, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !63
  %129 = fmul <2 x float> %125, %128, !dbg !63
  %130 = fadd <2 x float> %117, %129, !dbg !64
  %131 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !40
  %132 = insertelement <2 x i32> %131, i32 %84, i64 1, !dbg !40
  %133 = bitcast <2 x i32> %132 to <2 x float>, !dbg !40
  %134 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !50
  %135 = bitcast <2 x i32> %134 to <2 x float>, !dbg !50
  %136 = shufflevector <2 x float> %135, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %137 = fsub <2 x float> %133, %136, !dbg !50
  %138 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !51
  %139 = bitcast <2 x i32> %138 to <2 x float>, !dbg !51
  %140 = shufflevector <2 x float> %139, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !51
  %141 = fmul <2 x float> %137, %140, !dbg !51
  %142 = fcmp olt <2 x float> %141, zeroinitializer, !dbg !52
  %143 = select <2 x i1> %142, <2 x float> zeroinitializer, <2 x float> %141, !dbg !56
  %144 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !49
  %145 = insertelement <2 x i32> %144, i32 %98, i64 1, !dbg !49
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !49
  %147 = fsub <2 x float> %146, %136, !dbg !57
  %148 = fmul <2 x float> %147, %140, !dbg !58
  %149 = fcmp olt <2 x float> %148, zeroinitializer, !dbg !59
  %150 = select <2 x i1> %149, <2 x float> zeroinitializer, <2 x float> %148, !dbg !61
  %151 = fsub <2 x float> %150, %143, !dbg !62
  %152 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !63
  %153 = bitcast <2 x i32> %152 to <2 x float>, !dbg !63
  %154 = shufflevector <2 x float> %153, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !63
  %155 = fmul <2 x float> %151, %154, !dbg !63
  %156 = fadd <2 x float> %143, %155, !dbg !64
  %157 = extractelement <2 x float> %130, i64 0, !dbg !65
  %158 = extractelement <2 x float> %130, i64 1, !dbg !66
  %159 = fsub float %157, %158, !dbg !65
  %160 = extractelement <2 x float> %156, i64 0, !dbg !65
  %161 = extractelement <2 x float> %156, i64 1, !dbg !66
  %162 = fsub float %160, %161, !dbg !65
  %163 = fmul float %159, %52, !dbg !67
  %164 = fmul float %162, %54, !dbg !67
  %165 = sext i32 %18 to i64, !dbg !68
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !68
  %167 = bitcast float %158 to i32, !dbg !66
  %168 = bitcast float %161 to i32, !dbg !66
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %167, i32 %168, ptr addrspace(1) %166, i1 true) #1, !dbg !66
  %169 = getelementptr float, ptr addrspace(1) %1, i64 %165, !dbg !69
  %170 = bitcast float %163 to i32, !dbg !70
  %171 = bitcast float %164 to i32, !dbg !70
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %170, i32 %171, ptr addrspace(1) %169, i1 true) #1, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c46xux5yghuav7hxj4zrf3n26yqwadkwe2rawhbsajqux7wgmtb4.py", directory: "inductor_cache/46")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_7", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 32, scope: !7)
!35 = !DILocation(line: 42, column: 32, scope: !7)
!36 = !DILocation(line: 43, column: 39, scope: !7)
!37 = !DILocation(line: 43, column: 48, scope: !7)
!38 = !DILocation(line: 43, column: 46, scope: !7)
!39 = !DILocation(line: 43, column: 30, scope: !7)
!40 = !DILocation(line: 43, column: 53, scope: !7)
!41 = !DILocation(line: 50, column: 35, scope: !7)
!42 = !DILocation(line: 51, column: 40, scope: !7)
!43 = !DILocation(line: 51, column: 31, scope: !7)
!44 = !DILocation(line: 51, column: 55, scope: !7)
!45 = !DILocation(line: 57, column: 35, scope: !7)
!46 = !DILocation(line: 58, column: 31, scope: !7)
!47 = !DILocation(line: 58, column: 56, scope: !7)
!48 = !DILocation(line: 65, column: 31, scope: !7)
!49 = !DILocation(line: 65, column: 55, scope: !7)
!50 = !DILocation(line: 44, column: 19, scope: !7)
!51 = !DILocation(line: 45, column: 20, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!55 = !DILocation(line: 47, column: 42, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !55)
!57 = !DILocation(line: 66, column: 20, scope: !7)
!58 = !DILocation(line: 67, column: 20, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !60)
!60 = !DILocation(line: 68, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !60)
!62 = !DILocation(line: 69, column: 20, scope: !7)
!63 = !DILocation(line: 70, column: 20, scope: !7)
!64 = !DILocation(line: 71, column: 20, scope: !7)
!65 = !DILocation(line: 72, column: 20, scope: !7)
!66 = !DILocation(line: 74, column: 40, scope: !7)
!67 = !DILocation(line: 73, column: 20, scope: !7)
!68 = !DILocation(line: 74, column: 28, scope: !7)
!69 = !DILocation(line: 75, column: 28, scope: !7)
!70 = !DILocation(line: 75, column: 40, scope: !7)
!71 = !DILocation(line: 75, column: 4, scope: !7)
