; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = or disjoint i32 %10, 128, !dbg !13
  %12 = or disjoint i32 %10, 256, !dbg !13
  %13 = or disjoint i32 %10, 384, !dbg !13
  %14 = or disjoint i32 %10, 512, !dbg !13
  %15 = or disjoint i32 %10, 640, !dbg !13
  %16 = or disjoint i32 %10, 768, !dbg !13
  %17 = or disjoint i32 %10, 896, !dbg !13
  %18 = icmp slt i32 %10, 1156, !dbg !14
  %19 = icmp slt i32 %11, 1156, !dbg !14
  %20 = icmp slt i32 %12, 1156, !dbg !14
  %21 = icmp slt i32 %13, 1156, !dbg !14
  %22 = icmp slt i32 %14, 1156, !dbg !14
  %23 = icmp slt i32 %15, 1156, !dbg !14
  %24 = icmp slt i32 %16, 1156, !dbg !14
  %25 = icmp slt i32 %17, 1156, !dbg !14
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !15
  %27 = icmp slt i32 %26, 288, !dbg !16
  %.frozen = freeze i32 %10, !dbg !17
  %28 = sdiv i32 %.frozen, 17, !dbg !17
  %29 = mul i32 %28, 17, !dbg !18
  %.decomposed = sub i32 %.frozen, %29, !dbg !18
  %30 = sdiv i32 %11, 17, !dbg !17
  %31 = sdiv i32 %12, 17, !dbg !17
  %32 = sdiv i32 %13, 17, !dbg !17
  %33 = sdiv i32 %14, 17, !dbg !17
  %34 = sdiv i32 %15, 17, !dbg !17
  %35 = sdiv i32 %16, 17, !dbg !17
  %36 = sdiv i32 %17, 17, !dbg !17
  %37 = srem i32 %28, 17, !dbg !19
  %.frozen1 = freeze i32 %10, !dbg !20
  %38 = sdiv i32 %.frozen1, 289, !dbg !20
  %.frozen3 = freeze i32 %11, !dbg !20
  %39 = sdiv i32 %.frozen3, 289, !dbg !20
  %.frozen5 = freeze i32 %12, !dbg !20
  %40 = sdiv i32 %.frozen5, 289, !dbg !20
  %.frozen7 = freeze i32 %13, !dbg !20
  %41 = sdiv i32 %.frozen7, 289, !dbg !20
  %.frozen9 = freeze i32 %14, !dbg !20
  %42 = sdiv i32 %.frozen9, 289, !dbg !20
  %.frozen11 = freeze i32 %15, !dbg !20
  %43 = sdiv i32 %.frozen11, 289, !dbg !20
  %.frozen13 = freeze i32 %16, !dbg !20
  %44 = sdiv i32 %.frozen13, 289, !dbg !20
  %.frozen15 = freeze i32 %17, !dbg !20
  %45 = sdiv i32 %.frozen15, 289, !dbg !20
  %46 = mul i32 %38, 289, !dbg !21
  %.decomposed2 = sub i32 %.frozen1, %46, !dbg !21
  %47 = mul i32 %39, 289, !dbg !21
  %.decomposed4 = sub i32 %.frozen3, %47, !dbg !21
  %48 = mul i32 %40, 289, !dbg !21
  %.decomposed6 = sub i32 %.frozen5, %48, !dbg !21
  %49 = mul i32 %41, 289, !dbg !21
  %.decomposed8 = sub i32 %.frozen7, %49, !dbg !21
  %50 = mul i32 %42, 289, !dbg !21
  %.decomposed10 = sub i32 %.frozen9, %50, !dbg !21
  %51 = mul i32 %43, 289, !dbg !21
  %.decomposed12 = sub i32 %.frozen11, %51, !dbg !21
  %52 = mul i32 %44, 289, !dbg !21
  %.decomposed14 = sub i32 %.frozen13, %52, !dbg !21
  %53 = mul i32 %45, 289, !dbg !21
  %.decomposed16 = sub i32 %.frozen15, %53, !dbg !21
  %54 = mul nsw i32 %.decomposed, 576, !dbg !22
  %55 = mul nsw i32 %37, 20160, !dbg !23
  %56 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !18
  %57 = insertelement <2 x i32> %56, i32 %30, i64 1, !dbg !18
  %58 = srem <2 x i32> %57, splat (i32 17), !dbg !18
  %59 = mul nsw <2 x i32> %58, <i32 576, i32 20160>, !dbg !22
  %60 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !18
  %61 = insertelement <2 x i32> %60, i32 %31, i64 1, !dbg !18
  %62 = srem <2 x i32> %61, splat (i32 17), !dbg !18
  %63 = mul nsw <2 x i32> %62, <i32 576, i32 20160>, !dbg !22
  %64 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !18
  %65 = insertelement <2 x i32> %64, i32 %32, i64 1, !dbg !18
  %66 = srem <2 x i32> %65, splat (i32 17), !dbg !18
  %67 = mul nsw <2 x i32> %66, <i32 576, i32 20160>, !dbg !22
  %68 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !18
  %69 = insertelement <2 x i32> %68, i32 %33, i64 1, !dbg !18
  %70 = srem <2 x i32> %69, splat (i32 17), !dbg !18
  %71 = mul nsw <2 x i32> %70, <i32 576, i32 20160>, !dbg !22
  %72 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !18
  %73 = insertelement <2 x i32> %72, i32 %34, i64 1, !dbg !18
  %74 = srem <2 x i32> %73, splat (i32 17), !dbg !18
  %75 = mul nsw <2 x i32> %74, <i32 576, i32 20160>, !dbg !22
  %76 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !18
  %77 = insertelement <2 x i32> %76, i32 %35, i64 1, !dbg !18
  %78 = srem <2 x i32> %77, splat (i32 17), !dbg !18
  %79 = mul nsw <2 x i32> %78, <i32 576, i32 20160>, !dbg !22
  %80 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !18
  %81 = insertelement <2 x i32> %80, i32 %36, i64 1, !dbg !18
  %82 = srem <2 x i32> %81, splat (i32 17), !dbg !18
  %83 = mul nsw <2 x i32> %82, <i32 576, i32 20160>, !dbg !22
  %84 = mul i32 %38, 352800, !dbg !24
  %85 = mul i32 %39, 352800, !dbg !24
  %86 = mul i32 %40, 352800, !dbg !24
  %87 = mul i32 %41, 352800, !dbg !24
  %88 = mul i32 %42, 352800, !dbg !24
  %89 = mul i32 %43, 352800, !dbg !24
  %90 = mul i32 %44, 352800, !dbg !24
  %91 = mul i32 %45, 352800, !dbg !24
  %92 = add i32 %84, %54, !dbg !25
  %93 = add i32 %92, %26, !dbg !26
  %94 = add i32 %93, %55, !dbg !27
  %95 = extractelement <2 x i32> %59, i64 0, !dbg !25
  %96 = add i32 %85, %95, !dbg !25
  %97 = extractelement <2 x i32> %59, i64 1, !dbg !26
  %98 = add i32 %96, %97, !dbg !26
  %99 = add i32 %98, %26, !dbg !27
  %100 = extractelement <2 x i32> %63, i64 0, !dbg !25
  %101 = add i32 %86, %100, !dbg !25
  %102 = extractelement <2 x i32> %63, i64 1, !dbg !26
  %103 = add i32 %101, %102, !dbg !26
  %104 = add i32 %103, %26, !dbg !27
  %105 = extractelement <2 x i32> %67, i64 0, !dbg !25
  %106 = add i32 %87, %105, !dbg !25
  %107 = extractelement <2 x i32> %67, i64 1, !dbg !26
  %108 = add i32 %106, %107, !dbg !26
  %109 = add i32 %108, %26, !dbg !27
  %110 = extractelement <2 x i32> %71, i64 0, !dbg !25
  %111 = add i32 %88, %110, !dbg !25
  %112 = extractelement <2 x i32> %71, i64 1, !dbg !26
  %113 = add i32 %111, %112, !dbg !26
  %114 = add i32 %113, %26, !dbg !27
  %115 = extractelement <2 x i32> %75, i64 0, !dbg !25
  %116 = add i32 %89, %115, !dbg !25
  %117 = extractelement <2 x i32> %75, i64 1, !dbg !26
  %118 = add i32 %116, %117, !dbg !26
  %119 = add i32 %118, %26, !dbg !27
  %120 = extractelement <2 x i32> %79, i64 0, !dbg !25
  %121 = add i32 %90, %120, !dbg !25
  %122 = extractelement <2 x i32> %79, i64 1, !dbg !26
  %123 = add i32 %121, %122, !dbg !26
  %124 = add i32 %123, %26, !dbg !27
  %125 = extractelement <2 x i32> %83, i64 0, !dbg !25
  %126 = add i32 %91, %125, !dbg !25
  %127 = extractelement <2 x i32> %83, i64 1, !dbg !26
  %128 = add i32 %126, %127, !dbg !26
  %129 = add i32 %128, %26, !dbg !27
  %130 = sext i32 %94 to i64, !dbg !28
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !28
  %132 = sext i32 %99 to i64, !dbg !28
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !28
  %134 = sext i32 %104 to i64, !dbg !28
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !28
  %136 = sext i32 %109 to i64, !dbg !28
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !28
  %138 = sext i32 %114 to i64, !dbg !28
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !28
  %140 = sext i32 %119 to i64, !dbg !28
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !28
  %142 = sext i32 %124 to i64, !dbg !28
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !28
  %144 = sext i32 %129 to i64, !dbg !28
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !28
  %146 = and i1 %27, %18, !dbg !29
  %147 = and i1 %19, %27, !dbg !29
  %148 = and i1 %20, %27, !dbg !29
  %149 = and i1 %21, %27, !dbg !29
  %150 = and i1 %22, %27, !dbg !29
  %151 = and i1 %23, %27, !dbg !29
  %152 = and i1 %24, %27, !dbg !29
  %153 = and i1 %25, %27, !dbg !29
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %146) #1, !dbg !30
  %155 = bitcast i32 %154 to float, !dbg !30
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %147) #1, !dbg !30
  %157 = bitcast i32 %156 to float, !dbg !30
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %148) #1, !dbg !30
  %159 = bitcast i32 %158 to float, !dbg !30
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %149) #1, !dbg !30
  %161 = bitcast i32 %160 to float, !dbg !30
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %150) #1, !dbg !30
  %163 = bitcast i32 %162 to float, !dbg !30
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %151) #1, !dbg !30
  %165 = bitcast i32 %164 to float, !dbg !30
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %152) #1, !dbg !30
  %167 = bitcast i32 %166 to float, !dbg !30
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %153) #1, !dbg !30
  %169 = bitcast i32 %168 to float, !dbg !30
  %170 = add i32 %26, 288, !dbg !31
  %171 = add i32 %92, %170, !dbg !32
  %172 = add i32 %171, %55, !dbg !33
  %173 = add i32 %98, %170, !dbg !33
  %174 = add i32 %103, %170, !dbg !33
  %175 = add i32 %108, %170, !dbg !33
  %176 = add i32 %113, %170, !dbg !33
  %177 = add i32 %118, %170, !dbg !33
  %178 = add i32 %123, %170, !dbg !33
  %179 = add i32 %128, %170, !dbg !33
  %180 = sext i32 %172 to i64, !dbg !34
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !34
  %182 = sext i32 %173 to i64, !dbg !34
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !34
  %184 = sext i32 %174 to i64, !dbg !34
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !34
  %186 = sext i32 %175 to i64, !dbg !34
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !34
  %188 = sext i32 %176 to i64, !dbg !34
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !34
  %190 = sext i32 %177 to i64, !dbg !34
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !34
  %192 = sext i32 %178 to i64, !dbg !34
  %193 = getelementptr float, ptr addrspace(1) %0, i64 %192, !dbg !34
  %194 = sext i32 %179 to i64, !dbg !34
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !34
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 %146) #1, !dbg !35
  %197 = bitcast i32 %196 to float, !dbg !35
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %147) #1, !dbg !35
  %199 = bitcast i32 %198 to float, !dbg !35
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %148) #1, !dbg !35
  %201 = bitcast i32 %200 to float, !dbg !35
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %149) #1, !dbg !35
  %203 = bitcast i32 %202 to float, !dbg !35
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 %150) #1, !dbg !35
  %205 = bitcast i32 %204 to float, !dbg !35
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %151) #1, !dbg !35
  %207 = bitcast i32 %206 to float, !dbg !35
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 %152) #1, !dbg !35
  %209 = bitcast i32 %208 to float, !dbg !35
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 %153) #1, !dbg !35
  %211 = bitcast i32 %210 to float, !dbg !35
  %212 = add i32 %26, 576, !dbg !36
  %213 = add i32 %92, %212, !dbg !37
  %214 = add i32 %213, %55, !dbg !38
  %215 = add i32 %98, %212, !dbg !38
  %216 = add i32 %103, %212, !dbg !38
  %217 = add i32 %108, %212, !dbg !38
  %218 = add i32 %113, %212, !dbg !38
  %219 = add i32 %118, %212, !dbg !38
  %220 = add i32 %123, %212, !dbg !38
  %221 = add i32 %128, %212, !dbg !38
  %222 = sext i32 %214 to i64, !dbg !39
  %223 = getelementptr float, ptr addrspace(1) %0, i64 %222, !dbg !39
  %224 = sext i32 %215 to i64, !dbg !39
  %225 = getelementptr float, ptr addrspace(1) %0, i64 %224, !dbg !39
  %226 = sext i32 %216 to i64, !dbg !39
  %227 = getelementptr float, ptr addrspace(1) %0, i64 %226, !dbg !39
  %228 = sext i32 %217 to i64, !dbg !39
  %229 = getelementptr float, ptr addrspace(1) %0, i64 %228, !dbg !39
  %230 = sext i32 %218 to i64, !dbg !39
  %231 = getelementptr float, ptr addrspace(1) %0, i64 %230, !dbg !39
  %232 = sext i32 %219 to i64, !dbg !39
  %233 = getelementptr float, ptr addrspace(1) %0, i64 %232, !dbg !39
  %234 = sext i32 %220 to i64, !dbg !39
  %235 = getelementptr float, ptr addrspace(1) %0, i64 %234, !dbg !39
  %236 = sext i32 %221 to i64, !dbg !39
  %237 = getelementptr float, ptr addrspace(1) %0, i64 %236, !dbg !39
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %223, i1 %146) #1, !dbg !40
  %239 = bitcast i32 %238 to float, !dbg !40
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %225, i1 %147) #1, !dbg !40
  %241 = bitcast i32 %240 to float, !dbg !40
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 %148) #1, !dbg !40
  %243 = bitcast i32 %242 to float, !dbg !40
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %229, i1 %149) #1, !dbg !40
  %245 = bitcast i32 %244 to float, !dbg !40
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %150) #1, !dbg !40
  %247 = bitcast i32 %246 to float, !dbg !40
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 %151) #1, !dbg !40
  %249 = bitcast i32 %248 to float, !dbg !40
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %235, i1 %152) #1, !dbg !40
  %251 = bitcast i32 %250 to float, !dbg !40
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %237, i1 %153) #1, !dbg !40
  %253 = bitcast i32 %252 to float, !dbg !40
  %254 = add i32 %26, 10080, !dbg !41
  %255 = add i32 %92, %254, !dbg !42
  %256 = add i32 %255, %55, !dbg !43
  %257 = add i32 %98, %254, !dbg !43
  %258 = add i32 %103, %254, !dbg !43
  %259 = add i32 %108, %254, !dbg !43
  %260 = add i32 %113, %254, !dbg !43
  %261 = add i32 %118, %254, !dbg !43
  %262 = add i32 %123, %254, !dbg !43
  %263 = add i32 %128, %254, !dbg !43
  %264 = sext i32 %256 to i64, !dbg !44
  %265 = getelementptr float, ptr addrspace(1) %0, i64 %264, !dbg !44
  %266 = sext i32 %257 to i64, !dbg !44
  %267 = getelementptr float, ptr addrspace(1) %0, i64 %266, !dbg !44
  %268 = sext i32 %258 to i64, !dbg !44
  %269 = getelementptr float, ptr addrspace(1) %0, i64 %268, !dbg !44
  %270 = sext i32 %259 to i64, !dbg !44
  %271 = getelementptr float, ptr addrspace(1) %0, i64 %270, !dbg !44
  %272 = sext i32 %260 to i64, !dbg !44
  %273 = getelementptr float, ptr addrspace(1) %0, i64 %272, !dbg !44
  %274 = sext i32 %261 to i64, !dbg !44
  %275 = getelementptr float, ptr addrspace(1) %0, i64 %274, !dbg !44
  %276 = sext i32 %262 to i64, !dbg !44
  %277 = getelementptr float, ptr addrspace(1) %0, i64 %276, !dbg !44
  %278 = sext i32 %263 to i64, !dbg !44
  %279 = getelementptr float, ptr addrspace(1) %0, i64 %278, !dbg !44
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %265, i1 %146) #1, !dbg !45
  %281 = bitcast i32 %280 to float, !dbg !45
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %267, i1 %147) #1, !dbg !45
  %283 = bitcast i32 %282 to float, !dbg !45
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 %148) #1, !dbg !45
  %285 = bitcast i32 %284 to float, !dbg !45
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %149) #1, !dbg !45
  %287 = bitcast i32 %286 to float, !dbg !45
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 %150) #1, !dbg !45
  %289 = bitcast i32 %288 to float, !dbg !45
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 %151) #1, !dbg !45
  %291 = bitcast i32 %290 to float, !dbg !45
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %277, i1 %152) #1, !dbg !45
  %293 = bitcast i32 %292 to float, !dbg !45
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %279, i1 %153) #1, !dbg !45
  %295 = bitcast i32 %294 to float, !dbg !45
  %296 = add i32 %26, 10368, !dbg !46
  %297 = add i32 %92, %296, !dbg !47
  %298 = add i32 %297, %55, !dbg !48
  %299 = add i32 %98, %296, !dbg !48
  %300 = add i32 %103, %296, !dbg !48
  %301 = add i32 %108, %296, !dbg !48
  %302 = add i32 %113, %296, !dbg !48
  %303 = add i32 %118, %296, !dbg !48
  %304 = add i32 %123, %296, !dbg !48
  %305 = add i32 %128, %296, !dbg !48
  %306 = sext i32 %298 to i64, !dbg !49
  %307 = getelementptr float, ptr addrspace(1) %0, i64 %306, !dbg !49
  %308 = sext i32 %299 to i64, !dbg !49
  %309 = getelementptr float, ptr addrspace(1) %0, i64 %308, !dbg !49
  %310 = sext i32 %300 to i64, !dbg !49
  %311 = getelementptr float, ptr addrspace(1) %0, i64 %310, !dbg !49
  %312 = sext i32 %301 to i64, !dbg !49
  %313 = getelementptr float, ptr addrspace(1) %0, i64 %312, !dbg !49
  %314 = sext i32 %302 to i64, !dbg !49
  %315 = getelementptr float, ptr addrspace(1) %0, i64 %314, !dbg !49
  %316 = sext i32 %303 to i64, !dbg !49
  %317 = getelementptr float, ptr addrspace(1) %0, i64 %316, !dbg !49
  %318 = sext i32 %304 to i64, !dbg !49
  %319 = getelementptr float, ptr addrspace(1) %0, i64 %318, !dbg !49
  %320 = sext i32 %305 to i64, !dbg !49
  %321 = getelementptr float, ptr addrspace(1) %0, i64 %320, !dbg !49
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %307, i1 %146) #1, !dbg !50
  %323 = bitcast i32 %322 to float, !dbg !50
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %309, i1 %147) #1, !dbg !50
  %325 = bitcast i32 %324 to float, !dbg !50
  %326 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %311, i1 %148) #1, !dbg !50
  %327 = bitcast i32 %326 to float, !dbg !50
  %328 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %313, i1 %149) #1, !dbg !50
  %329 = bitcast i32 %328 to float, !dbg !50
  %330 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %315, i1 %150) #1, !dbg !50
  %331 = bitcast i32 %330 to float, !dbg !50
  %332 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %317, i1 %151) #1, !dbg !50
  %333 = bitcast i32 %332 to float, !dbg !50
  %334 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %319, i1 %152) #1, !dbg !50
  %335 = bitcast i32 %334 to float, !dbg !50
  %336 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %321, i1 %153) #1, !dbg !50
  %337 = bitcast i32 %336 to float, !dbg !50
  %338 = add i32 %26, 10656, !dbg !51
  %339 = add i32 %92, %338, !dbg !52
  %340 = add i32 %339, %55, !dbg !53
  %341 = add i32 %98, %338, !dbg !53
  %342 = add i32 %103, %338, !dbg !53
  %343 = add i32 %108, %338, !dbg !53
  %344 = add i32 %113, %338, !dbg !53
  %345 = add i32 %118, %338, !dbg !53
  %346 = add i32 %123, %338, !dbg !53
  %347 = add i32 %128, %338, !dbg !53
  %348 = sext i32 %340 to i64, !dbg !54
  %349 = getelementptr float, ptr addrspace(1) %0, i64 %348, !dbg !54
  %350 = sext i32 %341 to i64, !dbg !54
  %351 = getelementptr float, ptr addrspace(1) %0, i64 %350, !dbg !54
  %352 = sext i32 %342 to i64, !dbg !54
  %353 = getelementptr float, ptr addrspace(1) %0, i64 %352, !dbg !54
  %354 = sext i32 %343 to i64, !dbg !54
  %355 = getelementptr float, ptr addrspace(1) %0, i64 %354, !dbg !54
  %356 = sext i32 %344 to i64, !dbg !54
  %357 = getelementptr float, ptr addrspace(1) %0, i64 %356, !dbg !54
  %358 = sext i32 %345 to i64, !dbg !54
  %359 = getelementptr float, ptr addrspace(1) %0, i64 %358, !dbg !54
  %360 = sext i32 %346 to i64, !dbg !54
  %361 = getelementptr float, ptr addrspace(1) %0, i64 %360, !dbg !54
  %362 = sext i32 %347 to i64, !dbg !54
  %363 = getelementptr float, ptr addrspace(1) %0, i64 %362, !dbg !54
  %364 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %349, i1 %146) #1, !dbg !55
  %365 = bitcast i32 %364 to float, !dbg !55
  %366 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %351, i1 %147) #1, !dbg !55
  %367 = bitcast i32 %366 to float, !dbg !55
  %368 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %353, i1 %148) #1, !dbg !55
  %369 = bitcast i32 %368 to float, !dbg !55
  %370 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %355, i1 %149) #1, !dbg !55
  %371 = bitcast i32 %370 to float, !dbg !55
  %372 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %357, i1 %150) #1, !dbg !55
  %373 = bitcast i32 %372 to float, !dbg !55
  %374 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %359, i1 %151) #1, !dbg !55
  %375 = bitcast i32 %374 to float, !dbg !55
  %376 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %361, i1 %152) #1, !dbg !55
  %377 = bitcast i32 %376 to float, !dbg !55
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %363, i1 %153) #1, !dbg !55
  %379 = bitcast i32 %378 to float, !dbg !55
  %380 = add i32 %26, 20160, !dbg !56
  %381 = add i32 %92, %380, !dbg !57
  %382 = add i32 %381, %55, !dbg !58
  %383 = add i32 %98, %380, !dbg !58
  %384 = add i32 %103, %380, !dbg !58
  %385 = add i32 %108, %380, !dbg !58
  %386 = add i32 %113, %380, !dbg !58
  %387 = add i32 %118, %380, !dbg !58
  %388 = add i32 %123, %380, !dbg !58
  %389 = add i32 %128, %380, !dbg !58
  %390 = sext i32 %382 to i64, !dbg !59
  %391 = getelementptr float, ptr addrspace(1) %0, i64 %390, !dbg !59
  %392 = sext i32 %383 to i64, !dbg !59
  %393 = getelementptr float, ptr addrspace(1) %0, i64 %392, !dbg !59
  %394 = sext i32 %384 to i64, !dbg !59
  %395 = getelementptr float, ptr addrspace(1) %0, i64 %394, !dbg !59
  %396 = sext i32 %385 to i64, !dbg !59
  %397 = getelementptr float, ptr addrspace(1) %0, i64 %396, !dbg !59
  %398 = sext i32 %386 to i64, !dbg !59
  %399 = getelementptr float, ptr addrspace(1) %0, i64 %398, !dbg !59
  %400 = sext i32 %387 to i64, !dbg !59
  %401 = getelementptr float, ptr addrspace(1) %0, i64 %400, !dbg !59
  %402 = sext i32 %388 to i64, !dbg !59
  %403 = getelementptr float, ptr addrspace(1) %0, i64 %402, !dbg !59
  %404 = sext i32 %389 to i64, !dbg !59
  %405 = getelementptr float, ptr addrspace(1) %0, i64 %404, !dbg !59
  %406 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %391, i1 %146) #1, !dbg !60
  %407 = bitcast i32 %406 to float, !dbg !60
  %408 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %393, i1 %147) #1, !dbg !60
  %409 = bitcast i32 %408 to float, !dbg !60
  %410 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %395, i1 %148) #1, !dbg !60
  %411 = bitcast i32 %410 to float, !dbg !60
  %412 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %397, i1 %149) #1, !dbg !60
  %413 = bitcast i32 %412 to float, !dbg !60
  %414 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %399, i1 %150) #1, !dbg !60
  %415 = bitcast i32 %414 to float, !dbg !60
  %416 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %401, i1 %151) #1, !dbg !60
  %417 = bitcast i32 %416 to float, !dbg !60
  %418 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %403, i1 %152) #1, !dbg !60
  %419 = bitcast i32 %418 to float, !dbg !60
  %420 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %405, i1 %153) #1, !dbg !60
  %421 = bitcast i32 %420 to float, !dbg !60
  %422 = add i32 %26, 20448, !dbg !61
  %423 = add i32 %92, %422, !dbg !62
  %424 = add i32 %423, %55, !dbg !63
  %425 = add i32 %98, %422, !dbg !63
  %426 = add i32 %103, %422, !dbg !63
  %427 = add i32 %108, %422, !dbg !63
  %428 = add i32 %113, %422, !dbg !63
  %429 = add i32 %118, %422, !dbg !63
  %430 = add i32 %123, %422, !dbg !63
  %431 = add i32 %128, %422, !dbg !63
  %432 = sext i32 %424 to i64, !dbg !64
  %433 = getelementptr float, ptr addrspace(1) %0, i64 %432, !dbg !64
  %434 = sext i32 %425 to i64, !dbg !64
  %435 = getelementptr float, ptr addrspace(1) %0, i64 %434, !dbg !64
  %436 = sext i32 %426 to i64, !dbg !64
  %437 = getelementptr float, ptr addrspace(1) %0, i64 %436, !dbg !64
  %438 = sext i32 %427 to i64, !dbg !64
  %439 = getelementptr float, ptr addrspace(1) %0, i64 %438, !dbg !64
  %440 = sext i32 %428 to i64, !dbg !64
  %441 = getelementptr float, ptr addrspace(1) %0, i64 %440, !dbg !64
  %442 = sext i32 %429 to i64, !dbg !64
  %443 = getelementptr float, ptr addrspace(1) %0, i64 %442, !dbg !64
  %444 = sext i32 %430 to i64, !dbg !64
  %445 = getelementptr float, ptr addrspace(1) %0, i64 %444, !dbg !64
  %446 = sext i32 %431 to i64, !dbg !64
  %447 = getelementptr float, ptr addrspace(1) %0, i64 %446, !dbg !64
  %448 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %433, i1 %146) #1, !dbg !65
  %449 = bitcast i32 %448 to float, !dbg !65
  %450 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %435, i1 %147) #1, !dbg !65
  %451 = bitcast i32 %450 to float, !dbg !65
  %452 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %437, i1 %148) #1, !dbg !65
  %453 = bitcast i32 %452 to float, !dbg !65
  %454 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %439, i1 %149) #1, !dbg !65
  %455 = bitcast i32 %454 to float, !dbg !65
  %456 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %441, i1 %150) #1, !dbg !65
  %457 = bitcast i32 %456 to float, !dbg !65
  %458 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %443, i1 %151) #1, !dbg !65
  %459 = bitcast i32 %458 to float, !dbg !65
  %460 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %445, i1 %152) #1, !dbg !65
  %461 = bitcast i32 %460 to float, !dbg !65
  %462 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %447, i1 %153) #1, !dbg !65
  %463 = bitcast i32 %462 to float, !dbg !65
  %464 = add i32 %26, 20736, !dbg !66
  %465 = add i32 %92, %464, !dbg !67
  %466 = add i32 %465, %55, !dbg !68
  %467 = add i32 %98, %464, !dbg !68
  %468 = add i32 %103, %464, !dbg !68
  %469 = add i32 %108, %464, !dbg !68
  %470 = add i32 %113, %464, !dbg !68
  %471 = add i32 %118, %464, !dbg !68
  %472 = add i32 %123, %464, !dbg !68
  %473 = add i32 %128, %464, !dbg !68
  %474 = sext i32 %466 to i64, !dbg !69
  %475 = getelementptr float, ptr addrspace(1) %0, i64 %474, !dbg !69
  %476 = sext i32 %467 to i64, !dbg !69
  %477 = getelementptr float, ptr addrspace(1) %0, i64 %476, !dbg !69
  %478 = sext i32 %468 to i64, !dbg !69
  %479 = getelementptr float, ptr addrspace(1) %0, i64 %478, !dbg !69
  %480 = sext i32 %469 to i64, !dbg !69
  %481 = getelementptr float, ptr addrspace(1) %0, i64 %480, !dbg !69
  %482 = sext i32 %470 to i64, !dbg !69
  %483 = getelementptr float, ptr addrspace(1) %0, i64 %482, !dbg !69
  %484 = sext i32 %471 to i64, !dbg !69
  %485 = getelementptr float, ptr addrspace(1) %0, i64 %484, !dbg !69
  %486 = sext i32 %472 to i64, !dbg !69
  %487 = getelementptr float, ptr addrspace(1) %0, i64 %486, !dbg !69
  %488 = sext i32 %473 to i64, !dbg !69
  %489 = getelementptr float, ptr addrspace(1) %0, i64 %488, !dbg !69
  %490 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %475, i1 %146) #1, !dbg !70
  %491 = bitcast i32 %490 to float, !dbg !70
  %492 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %477, i1 %147) #1, !dbg !70
  %493 = bitcast i32 %492 to float, !dbg !70
  %494 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %479, i1 %148) #1, !dbg !70
  %495 = bitcast i32 %494 to float, !dbg !70
  %496 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %481, i1 %149) #1, !dbg !70
  %497 = bitcast i32 %496 to float, !dbg !70
  %498 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %483, i1 %150) #1, !dbg !70
  %499 = bitcast i32 %498 to float, !dbg !70
  %500 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %485, i1 %151) #1, !dbg !70
  %501 = bitcast i32 %500 to float, !dbg !70
  %502 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %487, i1 %152) #1, !dbg !70
  %503 = bitcast i32 %502 to float, !dbg !70
  %504 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %489, i1 %153) #1, !dbg !70
  %505 = bitcast i32 %504 to float, !dbg !70
  %506 = fcmp ogt float %197, %155, !dbg !71
  %507 = fcmp ogt float %199, %157, !dbg !71
  %508 = fcmp ogt float %201, %159, !dbg !71
  %509 = fcmp ogt float %203, %161, !dbg !71
  %510 = fcmp ogt float %205, %163, !dbg !71
  %511 = fcmp ogt float %207, %165, !dbg !71
  %512 = fcmp ogt float %209, %167, !dbg !71
  %513 = fcmp ogt float %211, %169, !dbg !71
  %514 = fcmp uno float %197, 0.000000e+00, !dbg !75
  %515 = fcmp uno float %199, 0.000000e+00, !dbg !75
  %516 = fcmp uno float %201, 0.000000e+00, !dbg !75
  %517 = fcmp uno float %203, 0.000000e+00, !dbg !75
  %518 = fcmp uno float %205, 0.000000e+00, !dbg !75
  %519 = fcmp uno float %207, 0.000000e+00, !dbg !75
  %520 = fcmp uno float %209, 0.000000e+00, !dbg !75
  %521 = fcmp uno float %211, 0.000000e+00, !dbg !75
  %522 = or i1 %506, %514, !dbg !76
  %523 = or i1 %507, %515, !dbg !76
  %524 = or i1 %508, %516, !dbg !76
  %525 = or i1 %509, %517, !dbg !76
  %526 = or i1 %510, %518, !dbg !76
  %527 = or i1 %511, %519, !dbg !76
  %528 = or i1 %512, %520, !dbg !76
  %529 = or i1 %513, %521, !dbg !76
  %530 = select i1 %522, float %197, float %155, !dbg !77
  %531 = select i1 %523, float %199, float %157, !dbg !77
  %532 = select i1 %524, float %201, float %159, !dbg !77
  %533 = select i1 %525, float %203, float %161, !dbg !77
  %534 = select i1 %526, float %205, float %163, !dbg !77
  %535 = select i1 %527, float %207, float %165, !dbg !77
  %536 = select i1 %528, float %209, float %167, !dbg !77
  %537 = select i1 %529, float %211, float %169, !dbg !77
  %538 = fcmp olt float %530, %239, !dbg !78
  %539 = fcmp olt float %531, %241, !dbg !78
  %540 = fcmp olt float %532, %243, !dbg !78
  %541 = fcmp olt float %533, %245, !dbg !78
  %542 = fcmp olt float %534, %247, !dbg !78
  %543 = fcmp olt float %535, %249, !dbg !78
  %544 = fcmp olt float %536, %251, !dbg !78
  %545 = fcmp olt float %537, %253, !dbg !78
  %546 = fcmp uno float %239, 0.000000e+00, !dbg !80
  %547 = fcmp uno float %241, 0.000000e+00, !dbg !80
  %548 = fcmp uno float %243, 0.000000e+00, !dbg !80
  %549 = fcmp uno float %245, 0.000000e+00, !dbg !80
  %550 = fcmp uno float %247, 0.000000e+00, !dbg !80
  %551 = fcmp uno float %249, 0.000000e+00, !dbg !80
  %552 = fcmp uno float %251, 0.000000e+00, !dbg !80
  %553 = fcmp uno float %253, 0.000000e+00, !dbg !80
  %554 = or i1 %538, %546, !dbg !81
  %555 = or i1 %539, %547, !dbg !81
  %556 = or i1 %540, %548, !dbg !81
  %557 = or i1 %541, %549, !dbg !81
  %558 = or i1 %542, %550, !dbg !81
  %559 = or i1 %543, %551, !dbg !81
  %560 = or i1 %544, %552, !dbg !81
  %561 = or i1 %545, %553, !dbg !81
  %562 = select i1 %554, float %239, float %530, !dbg !82
  %563 = select i1 %555, float %241, float %531, !dbg !82
  %564 = select i1 %556, float %243, float %532, !dbg !82
  %565 = select i1 %557, float %245, float %533, !dbg !82
  %566 = select i1 %558, float %247, float %534, !dbg !82
  %567 = select i1 %559, float %249, float %535, !dbg !82
  %568 = select i1 %560, float %251, float %536, !dbg !82
  %569 = select i1 %561, float %253, float %537, !dbg !82
  %570 = fcmp olt float %562, %281, !dbg !83
  %571 = fcmp olt float %563, %283, !dbg !83
  %572 = fcmp olt float %564, %285, !dbg !83
  %573 = fcmp olt float %565, %287, !dbg !83
  %574 = fcmp olt float %566, %289, !dbg !83
  %575 = fcmp olt float %567, %291, !dbg !83
  %576 = fcmp olt float %568, %293, !dbg !83
  %577 = fcmp olt float %569, %295, !dbg !83
  %578 = fcmp uno float %281, 0.000000e+00, !dbg !85
  %579 = fcmp uno float %283, 0.000000e+00, !dbg !85
  %580 = fcmp uno float %285, 0.000000e+00, !dbg !85
  %581 = fcmp uno float %287, 0.000000e+00, !dbg !85
  %582 = fcmp uno float %289, 0.000000e+00, !dbg !85
  %583 = fcmp uno float %291, 0.000000e+00, !dbg !85
  %584 = fcmp uno float %293, 0.000000e+00, !dbg !85
  %585 = fcmp uno float %295, 0.000000e+00, !dbg !85
  %586 = or i1 %570, %578, !dbg !86
  %587 = or i1 %571, %579, !dbg !86
  %588 = or i1 %572, %580, !dbg !86
  %589 = or i1 %573, %581, !dbg !86
  %590 = or i1 %574, %582, !dbg !86
  %591 = or i1 %575, %583, !dbg !86
  %592 = or i1 %576, %584, !dbg !86
  %593 = or i1 %577, %585, !dbg !86
  %594 = select i1 %586, float %281, float %562, !dbg !87
  %595 = select i1 %587, float %283, float %563, !dbg !87
  %596 = select i1 %588, float %285, float %564, !dbg !87
  %597 = select i1 %589, float %287, float %565, !dbg !87
  %598 = select i1 %590, float %289, float %566, !dbg !87
  %599 = select i1 %591, float %291, float %567, !dbg !87
  %600 = select i1 %592, float %293, float %568, !dbg !87
  %601 = select i1 %593, float %295, float %569, !dbg !87
  %602 = fcmp olt float %594, %323, !dbg !88
  %603 = fcmp olt float %595, %325, !dbg !88
  %604 = fcmp olt float %596, %327, !dbg !88
  %605 = fcmp olt float %597, %329, !dbg !88
  %606 = fcmp olt float %598, %331, !dbg !88
  %607 = fcmp olt float %599, %333, !dbg !88
  %608 = fcmp olt float %600, %335, !dbg !88
  %609 = fcmp olt float %601, %337, !dbg !88
  %610 = fcmp uno float %323, 0.000000e+00, !dbg !90
  %611 = fcmp uno float %325, 0.000000e+00, !dbg !90
  %612 = fcmp uno float %327, 0.000000e+00, !dbg !90
  %613 = fcmp uno float %329, 0.000000e+00, !dbg !90
  %614 = fcmp uno float %331, 0.000000e+00, !dbg !90
  %615 = fcmp uno float %333, 0.000000e+00, !dbg !90
  %616 = fcmp uno float %335, 0.000000e+00, !dbg !90
  %617 = fcmp uno float %337, 0.000000e+00, !dbg !90
  %618 = or i1 %602, %610, !dbg !91
  %619 = or i1 %603, %611, !dbg !91
  %620 = or i1 %604, %612, !dbg !91
  %621 = or i1 %605, %613, !dbg !91
  %622 = or i1 %606, %614, !dbg !91
  %623 = or i1 %607, %615, !dbg !91
  %624 = or i1 %608, %616, !dbg !91
  %625 = or i1 %609, %617, !dbg !91
  %626 = select i1 %618, float %323, float %594, !dbg !92
  %627 = select i1 %619, float %325, float %595, !dbg !92
  %628 = select i1 %620, float %327, float %596, !dbg !92
  %629 = select i1 %621, float %329, float %597, !dbg !92
  %630 = select i1 %622, float %331, float %598, !dbg !92
  %631 = select i1 %623, float %333, float %599, !dbg !92
  %632 = select i1 %624, float %335, float %600, !dbg !92
  %633 = select i1 %625, float %337, float %601, !dbg !92
  %634 = fcmp olt float %626, %365, !dbg !93
  %635 = fcmp olt float %627, %367, !dbg !93
  %636 = fcmp olt float %628, %369, !dbg !93
  %637 = fcmp olt float %629, %371, !dbg !93
  %638 = fcmp olt float %630, %373, !dbg !93
  %639 = fcmp olt float %631, %375, !dbg !93
  %640 = fcmp olt float %632, %377, !dbg !93
  %641 = fcmp olt float %633, %379, !dbg !93
  %642 = fcmp uno float %365, 0.000000e+00, !dbg !95
  %643 = fcmp uno float %367, 0.000000e+00, !dbg !95
  %644 = fcmp uno float %369, 0.000000e+00, !dbg !95
  %645 = fcmp uno float %371, 0.000000e+00, !dbg !95
  %646 = fcmp uno float %373, 0.000000e+00, !dbg !95
  %647 = fcmp uno float %375, 0.000000e+00, !dbg !95
  %648 = fcmp uno float %377, 0.000000e+00, !dbg !95
  %649 = fcmp uno float %379, 0.000000e+00, !dbg !95
  %650 = or i1 %634, %642, !dbg !96
  %651 = or i1 %635, %643, !dbg !96
  %652 = or i1 %636, %644, !dbg !96
  %653 = or i1 %637, %645, !dbg !96
  %654 = or i1 %638, %646, !dbg !96
  %655 = or i1 %639, %647, !dbg !96
  %656 = or i1 %640, %648, !dbg !96
  %657 = or i1 %641, %649, !dbg !96
  %658 = select i1 %650, float %365, float %626, !dbg !97
  %659 = select i1 %651, float %367, float %627, !dbg !97
  %660 = select i1 %652, float %369, float %628, !dbg !97
  %661 = select i1 %653, float %371, float %629, !dbg !97
  %662 = select i1 %654, float %373, float %630, !dbg !97
  %663 = select i1 %655, float %375, float %631, !dbg !97
  %664 = select i1 %656, float %377, float %632, !dbg !97
  %665 = select i1 %657, float %379, float %633, !dbg !97
  %666 = fcmp olt float %658, %407, !dbg !98
  %667 = fcmp olt float %659, %409, !dbg !98
  %668 = fcmp olt float %660, %411, !dbg !98
  %669 = fcmp olt float %661, %413, !dbg !98
  %670 = fcmp olt float %662, %415, !dbg !98
  %671 = fcmp olt float %663, %417, !dbg !98
  %672 = fcmp olt float %664, %419, !dbg !98
  %673 = fcmp olt float %665, %421, !dbg !98
  %674 = fcmp uno float %407, 0.000000e+00, !dbg !100
  %675 = fcmp uno float %409, 0.000000e+00, !dbg !100
  %676 = fcmp uno float %411, 0.000000e+00, !dbg !100
  %677 = fcmp uno float %413, 0.000000e+00, !dbg !100
  %678 = fcmp uno float %415, 0.000000e+00, !dbg !100
  %679 = fcmp uno float %417, 0.000000e+00, !dbg !100
  %680 = fcmp uno float %419, 0.000000e+00, !dbg !100
  %681 = fcmp uno float %421, 0.000000e+00, !dbg !100
  %682 = or i1 %666, %674, !dbg !101
  %683 = or i1 %667, %675, !dbg !101
  %684 = or i1 %668, %676, !dbg !101
  %685 = or i1 %669, %677, !dbg !101
  %686 = or i1 %670, %678, !dbg !101
  %687 = or i1 %671, %679, !dbg !101
  %688 = or i1 %672, %680, !dbg !101
  %689 = or i1 %673, %681, !dbg !101
  %690 = select i1 %682, float %407, float %658, !dbg !102
  %691 = select i1 %683, float %409, float %659, !dbg !102
  %692 = select i1 %684, float %411, float %660, !dbg !102
  %693 = select i1 %685, float %413, float %661, !dbg !102
  %694 = select i1 %686, float %415, float %662, !dbg !102
  %695 = select i1 %687, float %417, float %663, !dbg !102
  %696 = select i1 %688, float %419, float %664, !dbg !102
  %697 = select i1 %689, float %421, float %665, !dbg !102
  %698 = fcmp olt float %690, %449, !dbg !103
  %699 = fcmp olt float %691, %451, !dbg !103
  %700 = fcmp olt float %692, %453, !dbg !103
  %701 = fcmp olt float %693, %455, !dbg !103
  %702 = fcmp olt float %694, %457, !dbg !103
  %703 = fcmp olt float %695, %459, !dbg !103
  %704 = fcmp olt float %696, %461, !dbg !103
  %705 = fcmp olt float %697, %463, !dbg !103
  %706 = fcmp uno float %449, 0.000000e+00, !dbg !105
  %707 = fcmp uno float %451, 0.000000e+00, !dbg !105
  %708 = fcmp uno float %453, 0.000000e+00, !dbg !105
  %709 = fcmp uno float %455, 0.000000e+00, !dbg !105
  %710 = fcmp uno float %457, 0.000000e+00, !dbg !105
  %711 = fcmp uno float %459, 0.000000e+00, !dbg !105
  %712 = fcmp uno float %461, 0.000000e+00, !dbg !105
  %713 = fcmp uno float %463, 0.000000e+00, !dbg !105
  %714 = or i1 %698, %706, !dbg !106
  %715 = or i1 %699, %707, !dbg !106
  %716 = or i1 %700, %708, !dbg !106
  %717 = or i1 %701, %709, !dbg !106
  %718 = or i1 %702, %710, !dbg !106
  %719 = or i1 %703, %711, !dbg !106
  %720 = or i1 %704, %712, !dbg !106
  %721 = or i1 %705, %713, !dbg !106
  %722 = select i1 %714, float %449, float %690, !dbg !107
  %723 = select i1 %715, float %451, float %691, !dbg !107
  %724 = select i1 %716, float %453, float %692, !dbg !107
  %725 = select i1 %717, float %455, float %693, !dbg !107
  %726 = select i1 %718, float %457, float %694, !dbg !107
  %727 = select i1 %719, float %459, float %695, !dbg !107
  %728 = select i1 %720, float %461, float %696, !dbg !107
  %729 = select i1 %721, float %463, float %697, !dbg !107
  %730 = fcmp olt float %722, %491, !dbg !108
  %731 = fcmp olt float %723, %493, !dbg !108
  %732 = fcmp olt float %724, %495, !dbg !108
  %733 = fcmp olt float %725, %497, !dbg !108
  %734 = fcmp olt float %726, %499, !dbg !108
  %735 = fcmp olt float %727, %501, !dbg !108
  %736 = fcmp olt float %728, %503, !dbg !108
  %737 = fcmp olt float %729, %505, !dbg !108
  %738 = fcmp uno float %491, 0.000000e+00, !dbg !110
  %739 = fcmp uno float %493, 0.000000e+00, !dbg !110
  %740 = fcmp uno float %495, 0.000000e+00, !dbg !110
  %741 = fcmp uno float %497, 0.000000e+00, !dbg !110
  %742 = fcmp uno float %499, 0.000000e+00, !dbg !110
  %743 = fcmp uno float %501, 0.000000e+00, !dbg !110
  %744 = fcmp uno float %503, 0.000000e+00, !dbg !110
  %745 = fcmp uno float %505, 0.000000e+00, !dbg !110
  %746 = or i1 %730, %738, !dbg !111
  %747 = or i1 %731, %739, !dbg !111
  %748 = or i1 %732, %740, !dbg !111
  %749 = or i1 %733, %741, !dbg !111
  %750 = or i1 %734, %742, !dbg !111
  %751 = or i1 %735, %743, !dbg !111
  %752 = or i1 %736, %744, !dbg !111
  %753 = or i1 %737, %745, !dbg !111
  %754 = zext i1 %506 to i8, !dbg !112
  %755 = zext i1 %507 to i8, !dbg !112
  %756 = zext i1 %508 to i8, !dbg !112
  %757 = zext i1 %509 to i8, !dbg !112
  %758 = zext i1 %510 to i8, !dbg !112
  %759 = zext i1 %511 to i8, !dbg !112
  %760 = zext i1 %512 to i8, !dbg !112
  %761 = zext i1 %513 to i8, !dbg !112
  %762 = select i1 %538, i8 2, i8 %754, !dbg !113
  %763 = select i1 %539, i8 2, i8 %755, !dbg !113
  %764 = select i1 %540, i8 2, i8 %756, !dbg !113
  %765 = select i1 %541, i8 2, i8 %757, !dbg !113
  %766 = select i1 %542, i8 2, i8 %758, !dbg !113
  %767 = select i1 %543, i8 2, i8 %759, !dbg !113
  %768 = select i1 %544, i8 2, i8 %760, !dbg !113
  %769 = select i1 %545, i8 2, i8 %761, !dbg !113
  %770 = select i1 %570, i8 3, i8 %762, !dbg !114
  %771 = select i1 %571, i8 3, i8 %763, !dbg !114
  %772 = select i1 %572, i8 3, i8 %764, !dbg !114
  %773 = select i1 %573, i8 3, i8 %765, !dbg !114
  %774 = select i1 %574, i8 3, i8 %766, !dbg !114
  %775 = select i1 %575, i8 3, i8 %767, !dbg !114
  %776 = select i1 %576, i8 3, i8 %768, !dbg !114
  %777 = select i1 %577, i8 3, i8 %769, !dbg !114
  %778 = select i1 %602, i8 4, i8 %770, !dbg !115
  %779 = select i1 %603, i8 4, i8 %771, !dbg !115
  %780 = select i1 %604, i8 4, i8 %772, !dbg !115
  %781 = select i1 %605, i8 4, i8 %773, !dbg !115
  %782 = select i1 %606, i8 4, i8 %774, !dbg !115
  %783 = select i1 %607, i8 4, i8 %775, !dbg !115
  %784 = select i1 %608, i8 4, i8 %776, !dbg !115
  %785 = select i1 %609, i8 4, i8 %777, !dbg !115
  %786 = select i1 %634, i8 5, i8 %778, !dbg !116
  %787 = select i1 %635, i8 5, i8 %779, !dbg !116
  %788 = select i1 %636, i8 5, i8 %780, !dbg !116
  %789 = select i1 %637, i8 5, i8 %781, !dbg !116
  %790 = select i1 %638, i8 5, i8 %782, !dbg !116
  %791 = select i1 %639, i8 5, i8 %783, !dbg !116
  %792 = select i1 %640, i8 5, i8 %784, !dbg !116
  %793 = select i1 %641, i8 5, i8 %785, !dbg !116
  %794 = select i1 %666, i8 6, i8 %786, !dbg !117
  %795 = select i1 %667, i8 6, i8 %787, !dbg !117
  %796 = select i1 %668, i8 6, i8 %788, !dbg !117
  %797 = select i1 %669, i8 6, i8 %789, !dbg !117
  %798 = select i1 %670, i8 6, i8 %790, !dbg !117
  %799 = select i1 %671, i8 6, i8 %791, !dbg !117
  %800 = select i1 %672, i8 6, i8 %792, !dbg !117
  %801 = select i1 %673, i8 6, i8 %793, !dbg !117
  %802 = select i1 %698, i8 7, i8 %794, !dbg !118
  %803 = select i1 %699, i8 7, i8 %795, !dbg !118
  %804 = select i1 %700, i8 7, i8 %796, !dbg !118
  %805 = select i1 %701, i8 7, i8 %797, !dbg !118
  %806 = select i1 %702, i8 7, i8 %798, !dbg !118
  %807 = select i1 %703, i8 7, i8 %799, !dbg !118
  %808 = select i1 %704, i8 7, i8 %800, !dbg !118
  %809 = select i1 %705, i8 7, i8 %801, !dbg !118
  %810 = select i1 %730, i8 8, i8 %802, !dbg !119
  %811 = select i1 %731, i8 8, i8 %803, !dbg !119
  %812 = select i1 %732, i8 8, i8 %804, !dbg !119
  %813 = select i1 %733, i8 8, i8 %805, !dbg !119
  %814 = select i1 %734, i8 8, i8 %806, !dbg !119
  %815 = select i1 %735, i8 8, i8 %807, !dbg !119
  %816 = select i1 %736, i8 8, i8 %808, !dbg !119
  %817 = select i1 %737, i8 8, i8 %809, !dbg !119
  %818 = mul i32 %26, 289, !dbg !120
  %819 = add i32 %.decomposed2, %818, !dbg !121
  %820 = mul i32 %38, 221952, !dbg !122
  %821 = mul i32 %39, 221952, !dbg !122
  %822 = mul i32 %40, 221952, !dbg !122
  %823 = mul i32 %41, 221952, !dbg !122
  %824 = mul i32 %42, 221952, !dbg !122
  %825 = mul i32 %43, 221952, !dbg !122
  %826 = mul i32 %44, 221952, !dbg !122
  %827 = mul i32 %45, 221952, !dbg !122
  %828 = add i32 %819, %820, !dbg !123
  %829 = add i32 %821, %.decomposed4, !dbg !121
  %830 = add i32 %829, %818, !dbg !123
  %831 = add i32 %822, %.decomposed6, !dbg !121
  %832 = add i32 %831, %818, !dbg !123
  %833 = add i32 %823, %.decomposed8, !dbg !121
  %834 = add i32 %833, %818, !dbg !123
  %835 = add i32 %824, %.decomposed10, !dbg !121
  %836 = add i32 %835, %818, !dbg !123
  %837 = add i32 %825, %.decomposed12, !dbg !121
  %838 = add i32 %837, %818, !dbg !123
  %839 = add i32 %826, %.decomposed14, !dbg !121
  %840 = add i32 %839, %818, !dbg !123
  %841 = add i32 %827, %.decomposed16, !dbg !121
  %842 = add i32 %841, %818, !dbg !123
  %843 = sext i32 %828 to i64, !dbg !124
  %844 = getelementptr float, ptr addrspace(1) %1, i64 %843, !dbg !124
  %845 = sext i32 %830 to i64, !dbg !124
  %846 = getelementptr float, ptr addrspace(1) %1, i64 %845, !dbg !124
  %847 = sext i32 %832 to i64, !dbg !124
  %848 = getelementptr float, ptr addrspace(1) %1, i64 %847, !dbg !124
  %849 = sext i32 %834 to i64, !dbg !124
  %850 = getelementptr float, ptr addrspace(1) %1, i64 %849, !dbg !124
  %851 = sext i32 %836 to i64, !dbg !124
  %852 = getelementptr float, ptr addrspace(1) %1, i64 %851, !dbg !124
  %853 = sext i32 %838 to i64, !dbg !124
  %854 = getelementptr float, ptr addrspace(1) %1, i64 %853, !dbg !124
  %855 = sext i32 %840 to i64, !dbg !124
  %856 = getelementptr float, ptr addrspace(1) %1, i64 %855, !dbg !124
  %857 = sext i32 %842 to i64, !dbg !124
  %858 = getelementptr float, ptr addrspace(1) %1, i64 %857, !dbg !124
  %859 = bitcast float %722 to i32, !dbg !125
  %860 = select i1 %746, i32 %490, i32 %859, !dbg !126
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %860, ptr addrspace(1) %844, i1 %146) #1, !dbg !125
  %861 = bitcast float %723 to i32, !dbg !125
  %862 = select i1 %747, i32 %492, i32 %861, !dbg !126
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %862, ptr addrspace(1) %846, i1 %147) #1, !dbg !125
  %863 = bitcast float %724 to i32, !dbg !125
  %864 = select i1 %748, i32 %494, i32 %863, !dbg !126
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %864, ptr addrspace(1) %848, i1 %148) #1, !dbg !125
  %865 = bitcast float %725 to i32, !dbg !125
  %866 = select i1 %749, i32 %496, i32 %865, !dbg !126
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %866, ptr addrspace(1) %850, i1 %149) #1, !dbg !125
  %867 = bitcast float %726 to i32, !dbg !125
  %868 = select i1 %750, i32 %498, i32 %867, !dbg !126
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %868, ptr addrspace(1) %852, i1 %150) #1, !dbg !125
  %869 = bitcast float %727 to i32, !dbg !125
  %870 = select i1 %751, i32 %500, i32 %869, !dbg !126
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %870, ptr addrspace(1) %854, i1 %151) #1, !dbg !125
  %871 = bitcast float %728 to i32, !dbg !125
  %872 = select i1 %752, i32 %502, i32 %871, !dbg !126
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %872, ptr addrspace(1) %856, i1 %152) #1, !dbg !125
  %873 = bitcast float %729 to i32, !dbg !125
  %874 = select i1 %753, i32 %504, i32 %873, !dbg !126
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %874, ptr addrspace(1) %858, i1 %153) #1, !dbg !125
  %875 = mul i32 %10, 288, !dbg !127
  %876 = mul i32 %11, 288, !dbg !127
  %877 = mul i32 %12, 288, !dbg !127
  %878 = mul i32 %13, 288, !dbg !127
  %879 = mul i32 %14, 288, !dbg !127
  %880 = mul i32 %15, 288, !dbg !127
  %881 = mul i32 %16, 288, !dbg !127
  %882 = mul i32 %17, 288, !dbg !127
  %883 = add i32 %875, %26, !dbg !128
  %884 = add i32 %26, %876, !dbg !128
  %885 = add i32 %26, %877, !dbg !128
  %886 = add i32 %26, %878, !dbg !128
  %887 = add i32 %26, %879, !dbg !128
  %888 = add i32 %26, %880, !dbg !128
  %889 = add i32 %26, %881, !dbg !128
  %890 = add i32 %26, %882, !dbg !128
  %891 = sext i32 %883 to i64, !dbg !129
  %892 = getelementptr i8, ptr addrspace(1) %2, i64 %891, !dbg !129
  %893 = sext i32 %884 to i64, !dbg !129
  %894 = getelementptr i8, ptr addrspace(1) %2, i64 %893, !dbg !129
  %895 = sext i32 %885 to i64, !dbg !129
  %896 = getelementptr i8, ptr addrspace(1) %2, i64 %895, !dbg !129
  %897 = sext i32 %886 to i64, !dbg !129
  %898 = getelementptr i8, ptr addrspace(1) %2, i64 %897, !dbg !129
  %899 = sext i32 %887 to i64, !dbg !129
  %900 = getelementptr i8, ptr addrspace(1) %2, i64 %899, !dbg !129
  %901 = sext i32 %888 to i64, !dbg !129
  %902 = getelementptr i8, ptr addrspace(1) %2, i64 %901, !dbg !129
  %903 = sext i32 %889 to i64, !dbg !129
  %904 = getelementptr i8, ptr addrspace(1) %2, i64 %903, !dbg !129
  %905 = sext i32 %890 to i64, !dbg !129
  %906 = getelementptr i8, ptr addrspace(1) %2, i64 %905, !dbg !129
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %810, ptr addrspace(1) %892, i1 %146) #1, !dbg !130
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %811, ptr addrspace(1) %894, i1 %147) #1, !dbg !130
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %812, ptr addrspace(1) %896, i1 %148) #1, !dbg !130
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %813, ptr addrspace(1) %898, i1 %149) #1, !dbg !130
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %814, ptr addrspace(1) %900, i1 %150) #1, !dbg !130
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %815, ptr addrspace(1) %902, i1 %151) #1, !dbg !130
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %816, ptr addrspace(1) %904, i1 %152) #1, !dbg !130
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %817, ptr addrspace(1) %906, i1 %153) #1, !dbg !130
  ret void, !dbg !131
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxnrb2fsk3244maxp22ftzahp45hqnrs5iatxqfkpvgqbd5e5eoy.py", directory: "inductor_cache/xn")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_33, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_33, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_33", linkageName: "triton_poi_fused_max_pool2d_with_indices_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 21, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 27, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 39, scope: !7)
!23 = !DILocation(line: 34, column: 50, scope: !7)
!24 = !DILocation(line: 34, column: 62, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 44, scope: !7)
!27 = !DILocation(line: 34, column: 55, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 75, scope: !7)
!30 = !DILocation(line: 34, column: 67, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 50, scope: !7)
!33 = !DILocation(line: 35, column: 61, scope: !7)
!34 = !DILocation(line: 35, column: 30, scope: !7)
!35 = !DILocation(line: 35, column: 73, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 50, scope: !7)
!38 = !DILocation(line: 36, column: 61, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 73, scope: !7)
!41 = !DILocation(line: 37, column: 38, scope: !7)
!42 = !DILocation(line: 37, column: 52, scope: !7)
!43 = !DILocation(line: 37, column: 63, scope: !7)
!44 = !DILocation(line: 37, column: 30, scope: !7)
!45 = !DILocation(line: 37, column: 75, scope: !7)
!46 = !DILocation(line: 38, column: 38, scope: !7)
!47 = !DILocation(line: 38, column: 52, scope: !7)
!48 = !DILocation(line: 38, column: 63, scope: !7)
!49 = !DILocation(line: 38, column: 30, scope: !7)
!50 = !DILocation(line: 38, column: 75, scope: !7)
!51 = !DILocation(line: 39, column: 38, scope: !7)
!52 = !DILocation(line: 39, column: 52, scope: !7)
!53 = !DILocation(line: 39, column: 63, scope: !7)
!54 = !DILocation(line: 39, column: 30, scope: !7)
!55 = !DILocation(line: 39, column: 75, scope: !7)
!56 = !DILocation(line: 40, column: 39, scope: !7)
!57 = !DILocation(line: 40, column: 53, scope: !7)
!58 = !DILocation(line: 40, column: 64, scope: !7)
!59 = !DILocation(line: 40, column: 31, scope: !7)
!60 = !DILocation(line: 40, column: 76, scope: !7)
!61 = !DILocation(line: 41, column: 39, scope: !7)
!62 = !DILocation(line: 41, column: 53, scope: !7)
!63 = !DILocation(line: 41, column: 64, scope: !7)
!64 = !DILocation(line: 41, column: 31, scope: !7)
!65 = !DILocation(line: 41, column: 76, scope: !7)
!66 = !DILocation(line: 42, column: 39, scope: !7)
!67 = !DILocation(line: 42, column: 53, scope: !7)
!68 = !DILocation(line: 42, column: 64, scope: !7)
!69 = !DILocation(line: 42, column: 31, scope: !7)
!70 = !DILocation(line: 42, column: 76, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !74)
!72 = distinct !DILexicalBlockFile(scope: !7, file: !73, discriminator: 0)
!73 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!74 = !DILocation(line: 43, column: 40, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !74)
!78 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !79)
!79 = !DILocation(line: 44, column: 40, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !79)
!83 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !84)
!84 = !DILocation(line: 45, column: 40, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !84)
!88 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !89)
!89 = !DILocation(line: 46, column: 40, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !94)
!94 = !DILocation(line: 47, column: 41, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !99)
!99 = !DILocation(line: 48, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !99)
!102 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !99)
!103 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !104)
!104 = !DILocation(line: 49, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !104)
!107 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !104)
!108 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !109)
!109 = !DILocation(line: 50, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !72, inlinedAt: !109)
!111 = !DILocation(line: 120, column: 16, scope: !72, inlinedAt: !109)
!112 = !DILocation(line: 54, column: 35, scope: !7)
!113 = !DILocation(line: 57, column: 35, scope: !7)
!114 = !DILocation(line: 60, column: 35, scope: !7)
!115 = !DILocation(line: 63, column: 35, scope: !7)
!116 = !DILocation(line: 66, column: 35, scope: !7)
!117 = !DILocation(line: 69, column: 35, scope: !7)
!118 = !DILocation(line: 72, column: 35, scope: !7)
!119 = !DILocation(line: 75, column: 35, scope: !7)
!120 = !DILocation(line: 76, column: 34, scope: !7)
!121 = !DILocation(line: 76, column: 30, scope: !7)
!122 = !DILocation(line: 76, column: 46, scope: !7)
!123 = !DILocation(line: 76, column: 39, scope: !7)
!124 = !DILocation(line: 76, column: 25, scope: !7)
!125 = !DILocation(line: 76, column: 58, scope: !7)
!126 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !109)
!127 = !DILocation(line: 77, column: 34, scope: !7)
!128 = !DILocation(line: 77, column: 30, scope: !7)
!129 = !DILocation(line: 77, column: 25, scope: !7)
!130 = !DILocation(line: 77, column: 46, scope: !7)
!131 = !DILocation(line: 77, column: 4, scope: !7)
