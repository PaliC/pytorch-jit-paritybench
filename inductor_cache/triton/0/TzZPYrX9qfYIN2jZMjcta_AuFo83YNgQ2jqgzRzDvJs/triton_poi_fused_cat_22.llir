; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 510, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 1476096, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %14 = sdiv i32 %.frozen, 384, !dbg !15
  %15 = mul i32 %14, 384, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = icmp slt i32 %.decomposed, 192, !dbg !17
  %17 = mul nsw i32 %14, 192, !dbg !18
  %18 = add nsw i32 %17, %.decomposed, !dbg !19
  %19 = sext i32 %18 to i64, !dbg !20
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !20
  %21 = and i1 %13, %16, !dbg !21
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %20, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #1, !dbg !22
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !22
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !22
  %25 = sext i32 %.decomposed to i64, !dbg !23
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !23
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #1, !dbg !24
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !24
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !24
  %30 = icmp sgt i32 %.decomposed, 191, !dbg !25
  %31 = add nsw i32 %.decomposed, -192, !dbg !26
  %32 = add nsw i32 %17, %31, !dbg !27
  %33 = sext i32 %32 to i64, !dbg !28
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !28
  %35 = and i1 %13, %30, !dbg !29
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #1, !dbg !30
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !30
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !30
  %39 = sext i32 %31 to i64, !dbg !31
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !31
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %40, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #1, !dbg !32
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !32
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !32
  %44 = insertelement <4 x i32> poison, i32 %38, i64 0, !dbg !30
  %45 = insertelement <4 x i32> %44, i32 %37, i64 1, !dbg !30
  %46 = insertelement <4 x i32> %45, i32 %24, i64 2, !dbg !30
  %47 = insertelement <4 x i32> %46, i32 %23, i64 3, !dbg !30
  %48 = bitcast <4 x i32> %47 to <4 x float>, !dbg !30
  %49 = insertelement <4 x i32> poison, i32 %43, i64 0, !dbg !32
  %50 = insertelement <4 x i32> %49, i32 %42, i64 1, !dbg !32
  %51 = insertelement <4 x i32> %50, i32 %29, i64 2, !dbg !32
  %52 = insertelement <4 x i32> %51, i32 %28, i64 3, !dbg !32
  %53 = bitcast <4 x i32> %52 to <4 x float>, !dbg !32
  %54 = fadd <4 x float> %48, %53, !dbg !33
  %55 = fcmp ole <4 x float> %54, zeroinitializer, !dbg !34
  %56 = select <4 x i1> %55, <4 x float> zeroinitializer, <4 x float> %54, !dbg !34
  %57 = extractelement <4 x float> %56, i64 3, !dbg !38
  %58 = fcmp uno float %57, 0.000000e+00, !dbg !38
  %59 = extractelement <4 x float> %56, i64 2, !dbg !38
  %60 = fcmp uno float %59, 0.000000e+00, !dbg !38
  %61 = fcmp olt <4 x float> %56, splat (float 6.000000e+00), !dbg !40
  %62 = extractelement <4 x i1> %61, i64 3, !dbg !42
  %63 = or i1 %62, %58, !dbg !42
  %64 = extractelement <4 x i1> %61, i64 2, !dbg !42
  %65 = or i1 %64, %60, !dbg !42
  %66 = select i1 %63, float %57, float 6.000000e+00, !dbg !43
  %67 = select i1 %65, float %59, float 6.000000e+00, !dbg !43
  %68 = extractelement <4 x float> %56, i64 1, !dbg !44
  %69 = fcmp uno float %68, 0.000000e+00, !dbg !44
  %70 = extractelement <4 x float> %56, i64 0, !dbg !44
  %71 = fcmp uno float %70, 0.000000e+00, !dbg !44
  %72 = extractelement <4 x i1> %61, i64 1, !dbg !45
  %73 = or i1 %72, %69, !dbg !45
  %74 = extractelement <4 x i1> %61, i64 0, !dbg !45
  %75 = or i1 %74, %71, !dbg !45
  %76 = select i1 %73, float %68, float 6.000000e+00, !dbg !46
  %77 = select i1 %75, float %70, float 6.000000e+00, !dbg !46
  %78 = select i1 %16, float %66, float %76, !dbg !47
  %79 = select i1 %16, float %67, float %77, !dbg !47
  %80 = sext i32 %12 to i64, !dbg !48
  %81 = getelementptr float, ptr addrspace(1) %4, i64 %80, !dbg !48
  %82 = bitcast float %78 to i32, !dbg !49
  %83 = bitcast float %79 to i32, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %82, i32 %83, ptr addrspace(1) %81, i1 %13) #1, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cddjqcq5g4opibhvzhcdr6hki5wobonil2kgj5pjfb36a3vz6vx6.py", directory: "inductor_cache/dd")
!4 = !{ptr @triton_poi_fused_cat_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_22, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_22", linkageName: "triton_poi_fused_cat_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 18, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 53, scope: !7)
!22 = !DILocation(line: 32, column: 46, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 41, column: 20, scope: !7)
!26 = !DILocation(line: 44, column: 50, scope: !7)
!27 = !DILocation(line: 44, column: 41, scope: !7)
!28 = !DILocation(line: 44, column: 31, scope: !7)
!29 = !DILocation(line: 44, column: 64, scope: !7)
!30 = !DILocation(line: 44, column: 56, scope: !7)
!31 = !DILocation(line: 45, column: 31, scope: !7)
!32 = !DILocation(line: 45, column: 45, scope: !7)
!33 = !DILocation(line: 46, column: 20, scope: !7)
!34 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 48, column: 42, scope: !7)
!38 = !DILocation(line: 112, column: 21, scope: !35, inlinedAt: !39)
!39 = !DILocation(line: 38, column: 41, scope: !7)
!40 = !DILocation(line: 110, column: 15, scope: !35, inlinedAt: !41)
!41 = !DILocation(line: 50, column: 42, scope: !7)
!42 = !DILocation(line: 112, column: 16, scope: !35, inlinedAt: !39)
!43 = !DILocation(line: 113, column: 29, scope: !35, inlinedAt: !39)
!44 = !DILocation(line: 112, column: 21, scope: !35, inlinedAt: !41)
!45 = !DILocation(line: 112, column: 16, scope: !35, inlinedAt: !41)
!46 = !DILocation(line: 113, column: 29, scope: !35, inlinedAt: !41)
!47 = !DILocation(line: 0, scope: !7)
!48 = !DILocation(line: 54, column: 25, scope: !7)
!49 = !DILocation(line: 54, column: 37, scope: !7)
!50 = !DILocation(line: 54, column: 4, scope: !7)
