; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_max_pool2d_with_indices_mul_sub_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = sdiv i32 %10, 32, !dbg !14
  %13 = srem i32 %11, 32, !dbg !15
  %14 = sdiv i32 %10, 1024, !dbg !16
  %15 = srem i32 %14, 3, !dbg !17
  %16 = sdiv i32 %10, 3072, !dbg !18
  %17 = sitofp i32 %13 to float, !dbg !19
  %18 = fadd float %17, 5.000000e-01, !dbg !20
  %19 = fadd float %18, -5.000000e-01, !dbg !21
  %20 = fcmp ogt float %19, 0.000000e+00, !dbg !22
  %21 = select i1 %20, float %19, float 0.000000e+00, !dbg !26
  %22 = fptosi float %21 to i32, !dbg !27
  %23 = tail call i32 @llvm.smin.i32(i32 %22, i32 30), !dbg !28
  %narrow1 = add nsw i32 %23, 1, !dbg !28
  %24 = sext i32 %narrow1 to i64, !dbg !28
  %25 = sext i32 %15 to i64, !dbg !30
  %.idx3 = mul nsw i64 %24, 24, !dbg !31
  %26 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx3, !dbg !31
  %27 = getelementptr float, ptr addrspace(1) %26, i64 %25, !dbg !31
  %28 = add nsw i32 %15, 3, !dbg !32
  %29 = zext nneg i32 %28 to i64, !dbg !33
  %30 = getelementptr float, ptr addrspace(1) %26, i64 %29, !dbg !34
  %31 = add nsw i32 %15, 192, !dbg !35
  %32 = zext nneg i32 %31 to i64, !dbg !36
  %33 = getelementptr float, ptr addrspace(1) %26, i64 %32, !dbg !37
  %34 = mul i32 %22, 6, !dbg !38
  %35 = add i32 %15, %34, !dbg !39
  %36 = add i32 %28, %34, !dbg !40
  %37 = add i32 %31, %34, !dbg !41
  %38 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !42
  %39 = insertelement <2 x i32> %38, i32 %10, i64 1, !dbg !42
  %40 = srem <2 x i32> %39, splat (i32 32), !dbg !42
  %41 = sitofp <2 x i32> %40 to <2 x float>, !dbg !43
  %42 = fadd <2 x float> %41, splat (float 5.000000e-01), !dbg !44
  %43 = fadd <2 x float> %42, splat (float -5.000000e-01), !dbg !45
  %44 = fcmp ogt <2 x float> %43, zeroinitializer, !dbg !46
  %45 = select <2 x i1> %44, <2 x float> %43, <2 x float> zeroinitializer, !dbg !48
  %46 = fptosi <2 x float> %45 to <2 x i32>, !dbg !49
  %47 = extractelement <2 x i32> %46, i64 1, !dbg !28
  %48 = tail call i32 @llvm.smin.i32(i32 %47, i32 30), !dbg !28
  %narrow = add nsw i32 %48, 1, !dbg !28
  %49 = sext i32 %narrow to i64, !dbg !28
  %50 = mul <2 x i32> %46, <i32 384, i32 6>, !dbg !50
  %51 = extractelement <2 x i32> %50, i64 0, !dbg !51
  %52 = sext i32 %51 to i64, !dbg !51
  %53 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !52
  %54 = insertelement <2 x i32> %53, i32 %15, i64 1, !dbg !52
  %55 = mul <2 x i32> %54, <i32 12288, i32 poison>, !dbg !52
  %56 = add nsw <2 x i32> %54, <i32 poison, i32 195>, !dbg !52
  %57 = shufflevector <2 x i32> %55, <2 x i32> %56, <2 x i32> <i32 0, i32 3>, !dbg !52
  %58 = extractelement <2 x i32> %55, i64 0, !dbg !53
  %59 = sext i32 %58 to i64, !dbg !53
  %.idx = mul nsw i64 %49, 24, !dbg !31
  %60 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !31
  %61 = getelementptr float, ptr addrspace(1) %60, i64 %25, !dbg !31
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %52, !dbg !31
  %63 = getelementptr float, ptr addrspace(1) %62, i64 %59, !dbg !31
  %64 = getelementptr float, ptr addrspace(1) %27, i64 %52, !dbg !31
  %65 = getelementptr float, ptr addrspace(1) %64, i64 %59, !dbg !31
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #2, !dbg !54
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #2, !dbg !54
  %68 = getelementptr float, ptr addrspace(1) %60, i64 %29, !dbg !34
  %69 = getelementptr float, ptr addrspace(1) %68, i64 %52, !dbg !34
  %70 = getelementptr float, ptr addrspace(1) %69, i64 %59, !dbg !34
  %71 = getelementptr float, ptr addrspace(1) %30, i64 %52, !dbg !34
  %72 = getelementptr float, ptr addrspace(1) %71, i64 %59, !dbg !34
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #2, !dbg !55
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #2, !dbg !55
  %75 = getelementptr float, ptr addrspace(1) %60, i64 %32, !dbg !37
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %52, !dbg !37
  %77 = getelementptr float, ptr addrspace(1) %76, i64 %59, !dbg !37
  %78 = getelementptr float, ptr addrspace(1) %33, i64 %52, !dbg !37
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %59, !dbg !37
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #2, !dbg !56
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #2, !dbg !56
  %82 = extractelement <2 x i32> %56, i64 1, !dbg !57
  %83 = zext nneg i32 %82 to i64, !dbg !57
  %84 = getelementptr float, ptr addrspace(1) %60, i64 %83, !dbg !58
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %52, !dbg !58
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %59, !dbg !58
  %87 = getelementptr float, ptr addrspace(1) %26, i64 %83, !dbg !58
  %88 = getelementptr float, ptr addrspace(1) %87, i64 %52, !dbg !58
  %89 = getelementptr float, ptr addrspace(1) %88, i64 %59, !dbg !58
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #2, !dbg !59
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #2, !dbg !59
  %92 = extractelement <2 x i32> %50, i64 1, !dbg !41
  %93 = add i32 %92, %15, !dbg !39
  %94 = add <2 x i32> %50, %57, !dbg !60
  %95 = extractelement <2 x i32> %94, i64 0, !dbg !61
  %96 = add i32 %95, %93, !dbg !62
  %97 = add i32 %95, %35, !dbg !62
  %98 = sext i32 %96 to i64, !dbg !63
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !63
  %100 = sext i32 %97 to i64, !dbg !63
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !63
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #2, !dbg !64
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #2, !dbg !64
  %104 = add i32 %92, %28, !dbg !40
  %105 = add i32 %95, %104, !dbg !65
  %106 = add i32 %95, %36, !dbg !65
  %107 = sext i32 %105 to i64, !dbg !66
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %107, !dbg !66
  %109 = sext i32 %106 to i64, !dbg !66
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !66
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #2, !dbg !67
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #2, !dbg !67
  %113 = add i32 %92, %31, !dbg !41
  %114 = add i32 %95, %113, !dbg !68
  %115 = add i32 %95, %37, !dbg !68
  %116 = sext i32 %114 to i64, !dbg !69
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %116, !dbg !69
  %118 = sext i32 %115 to i64, !dbg !69
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !69
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #2, !dbg !70
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #2, !dbg !70
  %122 = add i32 %82, %34, !dbg !71
  %123 = extractelement <2 x i32> %94, i64 1, !dbg !61
  %124 = add i32 %95, %123, !dbg !61
  %125 = add i32 %95, %122, !dbg !61
  %126 = sext i32 %124 to i64, !dbg !72
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !72
  %128 = sext i32 %125 to i64, !dbg !72
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !72
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #2, !dbg !73
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #2, !dbg !73
  %132 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !54
  %133 = insertelement <2 x i32> %132, i32 %102, i64 1, !dbg !54
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !54
  %135 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !55
  %136 = insertelement <2 x i32> %135, i32 %111, i64 1, !dbg !55
  %137 = bitcast <2 x i32> %136 to <2 x float>, !dbg !55
  %138 = fcmp ogt <2 x float> %137, %134, !dbg !74
  %139 = fcmp uno <2 x float> %137, zeroinitializer, !dbg !76
  %140 = or <2 x i1> %138, %139, !dbg !77
  %.v = select <2 x i1> %140, <2 x i32> %136, <2 x i32> %133, !dbg !78
  %141 = bitcast <2 x i32> %.v to <2 x float>, !dbg !78
  %142 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !56
  %143 = insertelement <2 x i32> %142, i32 %120, i64 1, !dbg !56
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !56
  %145 = fcmp olt <2 x float> %141, %144, !dbg !79
  %146 = fcmp uno <2 x float> %144, zeroinitializer, !dbg !81
  %147 = or <2 x i1> %146, %145, !dbg !82
  %.v4 = select <2 x i1> %147, <2 x i32> %143, <2 x i32> %.v, !dbg !83
  %148 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !83
  %149 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !59
  %150 = insertelement <2 x i32> %149, i32 %130, i64 1, !dbg !59
  %151 = bitcast <2 x i32> %150 to <2 x float>, !dbg !59
  %152 = fcmp olt <2 x float> %148, %151, !dbg !84
  %153 = fcmp uno <2 x float> %151, zeroinitializer, !dbg !86
  %154 = or <2 x i1> %153, %152, !dbg !87
  %.v5 = select <2 x i1> %154, <2 x i32> %150, <2 x i32> %.v4, !dbg !88
  %155 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !88
  %156 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !54
  %157 = insertelement <2 x i32> %156, i32 %103, i64 1, !dbg !54
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !54
  %159 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !55
  %160 = insertelement <2 x i32> %159, i32 %112, i64 1, !dbg !55
  %161 = bitcast <2 x i32> %160 to <2 x float>, !dbg !55
  %162 = fcmp ogt <2 x float> %161, %158, !dbg !74
  %163 = fcmp uno <2 x float> %161, zeroinitializer, !dbg !76
  %164 = or <2 x i1> %162, %163, !dbg !77
  %.v6 = select <2 x i1> %164, <2 x i32> %160, <2 x i32> %157, !dbg !78
  %165 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !78
  %166 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !56
  %167 = insertelement <2 x i32> %166, i32 %121, i64 1, !dbg !56
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !56
  %169 = fcmp olt <2 x float> %165, %168, !dbg !79
  %170 = fcmp uno <2 x float> %168, zeroinitializer, !dbg !81
  %171 = or <2 x i1> %170, %169, !dbg !82
  %.v7 = select <2 x i1> %171, <2 x i32> %167, <2 x i32> %.v6, !dbg !83
  %172 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !83
  %173 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !59
  %174 = insertelement <2 x i32> %173, i32 %131, i64 1, !dbg !59
  %175 = bitcast <2 x i32> %174 to <2 x float>, !dbg !59
  %176 = fcmp olt <2 x float> %172, %175, !dbg !84
  %177 = fcmp uno <2 x float> %175, zeroinitializer, !dbg !86
  %178 = or <2 x i1> %177, %176, !dbg !87
  %.v8 = select <2 x i1> %178, <2 x i32> %174, <2 x i32> %.v7, !dbg !88
  %179 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !88
  %180 = extractelement <2 x float> %155, i64 0, !dbg !89
  %181 = extractelement <2 x float> %155, i64 1, !dbg !90
  %182 = fsub float %180, %181, !dbg !89
  %183 = extractelement <2 x float> %179, i64 0, !dbg !89
  %184 = extractelement <2 x float> %179, i64 1, !dbg !90
  %185 = fsub float %183, %184, !dbg !89
  %186 = extractelement <2 x i32> %46, i64 0, !dbg !91
  %187 = tail call i32 @llvm.smin.i32(i32 %186, i32 30), !dbg !91
  %narrow2 = add nsw i32 %187, 1, !dbg !91
  %188 = sext i32 %narrow2 to i64, !dbg !91
  %189 = mul nsw i64 %188, 384, !dbg !93
  %190 = getelementptr float, ptr addrspace(1) %61, i64 %189, !dbg !94
  %191 = getelementptr float, ptr addrspace(1) %190, i64 %59, !dbg !94
  %192 = getelementptr float, ptr addrspace(1) %27, i64 %189, !dbg !94
  %193 = getelementptr float, ptr addrspace(1) %192, i64 %59, !dbg !94
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 true) #2, !dbg !95
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 true) #2, !dbg !95
  %196 = getelementptr float, ptr addrspace(1) %68, i64 %189, !dbg !96
  %197 = getelementptr float, ptr addrspace(1) %196, i64 %59, !dbg !96
  %198 = getelementptr float, ptr addrspace(1) %30, i64 %189, !dbg !96
  %199 = getelementptr float, ptr addrspace(1) %198, i64 %59, !dbg !96
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 true) #2, !dbg !97
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 true) #2, !dbg !97
  %202 = getelementptr float, ptr addrspace(1) %75, i64 %189, !dbg !98
  %203 = getelementptr float, ptr addrspace(1) %202, i64 %59, !dbg !98
  %204 = getelementptr float, ptr addrspace(1) %33, i64 %189, !dbg !98
  %205 = getelementptr float, ptr addrspace(1) %204, i64 %59, !dbg !98
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 true) #2, !dbg !99
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %205, i1 true) #2, !dbg !99
  %208 = getelementptr float, ptr addrspace(1) %84, i64 %189, !dbg !100
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %59, !dbg !100
  %210 = getelementptr float, ptr addrspace(1) %87, i64 %189, !dbg !100
  %211 = getelementptr float, ptr addrspace(1) %210, i64 %59, !dbg !100
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 true) #2, !dbg !101
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %211, i1 true) #2, !dbg !101
  %214 = sext i32 %93 to i64, !dbg !102
  %215 = sext i32 %35 to i64, !dbg !102
  %216 = getelementptr float, ptr addrspace(1) %2, i64 %189, !dbg !103
  %217 = getelementptr float, ptr addrspace(1) %216, i64 %214, !dbg !103
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %59, !dbg !103
  %219 = getelementptr float, ptr addrspace(1) %216, i64 %215, !dbg !103
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %59, !dbg !103
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 true) #2, !dbg !104
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 true) #2, !dbg !104
  %223 = sext i32 %104 to i64, !dbg !105
  %224 = sext i32 %36 to i64, !dbg !105
  %225 = getelementptr float, ptr addrspace(1) %216, i64 %223, !dbg !106
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %59, !dbg !106
  %227 = getelementptr float, ptr addrspace(1) %216, i64 %224, !dbg !106
  %228 = getelementptr float, ptr addrspace(1) %227, i64 %59, !dbg !106
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #2, !dbg !107
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 true) #2, !dbg !107
  %231 = sext i32 %113 to i64, !dbg !108
  %232 = sext i32 %37 to i64, !dbg !108
  %233 = getelementptr float, ptr addrspace(1) %216, i64 %231, !dbg !109
  %234 = getelementptr float, ptr addrspace(1) %233, i64 %59, !dbg !109
  %235 = getelementptr float, ptr addrspace(1) %216, i64 %232, !dbg !109
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %59, !dbg !109
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 true) #2, !dbg !110
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 true) #2, !dbg !110
  %239 = sext i32 %123 to i64, !dbg !111
  %240 = sext i32 %122 to i64, !dbg !111
  %241 = getelementptr float, ptr addrspace(1) %216, i64 %239, !dbg !112
  %242 = getelementptr float, ptr addrspace(1) %241, i64 %59, !dbg !112
  %243 = getelementptr float, ptr addrspace(1) %216, i64 %240, !dbg !112
  %244 = getelementptr float, ptr addrspace(1) %243, i64 %59, !dbg !112
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 true) #2, !dbg !113
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #2, !dbg !113
  %247 = insertelement <2 x i32> poison, i32 %194, i64 0, !dbg !95
  %248 = insertelement <2 x i32> %247, i32 %221, i64 1, !dbg !95
  %249 = bitcast <2 x i32> %248 to <2 x float>, !dbg !95
  %250 = insertelement <2 x i32> poison, i32 %200, i64 0, !dbg !97
  %251 = insertelement <2 x i32> %250, i32 %229, i64 1, !dbg !97
  %252 = bitcast <2 x i32> %251 to <2 x float>, !dbg !97
  %253 = fcmp ogt <2 x float> %252, %249, !dbg !114
  %254 = fcmp uno <2 x float> %252, zeroinitializer, !dbg !116
  %255 = or <2 x i1> %253, %254, !dbg !117
  %.v9 = select <2 x i1> %255, <2 x i32> %251, <2 x i32> %248, !dbg !118
  %256 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !118
  %257 = insertelement <2 x i32> poison, i32 %206, i64 0, !dbg !99
  %258 = insertelement <2 x i32> %257, i32 %237, i64 1, !dbg !99
  %259 = bitcast <2 x i32> %258 to <2 x float>, !dbg !99
  %260 = fcmp olt <2 x float> %256, %259, !dbg !119
  %261 = fcmp uno <2 x float> %259, zeroinitializer, !dbg !121
  %262 = or <2 x i1> %261, %260, !dbg !122
  %.v10 = select <2 x i1> %262, <2 x i32> %258, <2 x i32> %.v9, !dbg !123
  %263 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !123
  %264 = insertelement <2 x i32> poison, i32 %212, i64 0, !dbg !101
  %265 = insertelement <2 x i32> %264, i32 %245, i64 1, !dbg !101
  %266 = bitcast <2 x i32> %265 to <2 x float>, !dbg !101
  %267 = fcmp olt <2 x float> %263, %266, !dbg !124
  %268 = fcmp uno <2 x float> %266, zeroinitializer, !dbg !126
  %269 = or <2 x i1> %268, %267, !dbg !127
  %.v11 = select <2 x i1> %269, <2 x i32> %265, <2 x i32> %.v10, !dbg !128
  %270 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !128
  %271 = insertelement <2 x i32> poison, i32 %195, i64 0, !dbg !95
  %272 = insertelement <2 x i32> %271, i32 %222, i64 1, !dbg !95
  %273 = bitcast <2 x i32> %272 to <2 x float>, !dbg !95
  %274 = insertelement <2 x i32> poison, i32 %201, i64 0, !dbg !97
  %275 = insertelement <2 x i32> %274, i32 %230, i64 1, !dbg !97
  %276 = bitcast <2 x i32> %275 to <2 x float>, !dbg !97
  %277 = fcmp ogt <2 x float> %276, %273, !dbg !114
  %278 = fcmp uno <2 x float> %276, zeroinitializer, !dbg !116
  %279 = or <2 x i1> %277, %278, !dbg !117
  %.v12 = select <2 x i1> %279, <2 x i32> %275, <2 x i32> %272, !dbg !118
  %280 = bitcast <2 x i32> %.v12 to <2 x float>, !dbg !118
  %281 = insertelement <2 x i32> poison, i32 %207, i64 0, !dbg !99
  %282 = insertelement <2 x i32> %281, i32 %238, i64 1, !dbg !99
  %283 = bitcast <2 x i32> %282 to <2 x float>, !dbg !99
  %284 = fcmp olt <2 x float> %280, %283, !dbg !119
  %285 = fcmp uno <2 x float> %283, zeroinitializer, !dbg !121
  %286 = or <2 x i1> %285, %284, !dbg !122
  %.v13 = select <2 x i1> %286, <2 x i32> %282, <2 x i32> %.v12, !dbg !123
  %287 = bitcast <2 x i32> %.v13 to <2 x float>, !dbg !123
  %288 = insertelement <2 x i32> poison, i32 %213, i64 0, !dbg !101
  %289 = insertelement <2 x i32> %288, i32 %246, i64 1, !dbg !101
  %290 = bitcast <2 x i32> %289 to <2 x float>, !dbg !101
  %291 = fcmp olt <2 x float> %287, %290, !dbg !124
  %292 = fcmp uno <2 x float> %290, zeroinitializer, !dbg !126
  %293 = or <2 x i1> %292, %291, !dbg !127
  %.v14 = select <2 x i1> %293, <2 x i32> %289, <2 x i32> %.v13, !dbg !128
  %294 = bitcast <2 x i32> %.v14 to <2 x float>, !dbg !128
  %295 = extractelement <2 x float> %270, i64 0, !dbg !129
  %296 = extractelement <2 x float> %270, i64 1, !dbg !130
  %297 = fsub float %295, %296, !dbg !129
  %298 = extractelement <2 x float> %294, i64 0, !dbg !129
  %299 = extractelement <2 x float> %294, i64 1, !dbg !130
  %300 = fsub float %298, %299, !dbg !129
  %301 = sitofp i32 %47 to float, !dbg !131
  %302 = sitofp i32 %22 to float, !dbg !131
  %303 = extractelement <2 x float> %45, i64 1, !dbg !132
  %304 = fsub float %303, %301, !dbg !132
  %305 = fsub float %21, %302, !dbg !132
  %306 = fcmp ogt float %304, 0.000000e+00, !dbg !133
  %307 = fcmp ogt float %305, 0.000000e+00, !dbg !133
  %308 = select i1 %306, float %304, float 0.000000e+00, !dbg !135
  %309 = select i1 %307, float %305, float 0.000000e+00, !dbg !135
  %310 = fcmp olt float %308, 1.000000e+00, !dbg !136
  %311 = fcmp olt float %309, 1.000000e+00, !dbg !136
  %312 = select i1 %310, float %308, float 1.000000e+00, !dbg !138
  %313 = select i1 %311, float %309, float 1.000000e+00, !dbg !138
  %314 = fmul float %312, %182, !dbg !139
  %315 = fmul float %313, %185, !dbg !139
  %316 = fadd float %181, %314, !dbg !90
  %317 = fadd float %184, %315, !dbg !90
  %318 = fmul float %312, %297, !dbg !140
  %319 = fmul float %313, %300, !dbg !140
  %320 = fadd float %296, %318, !dbg !130
  %321 = fadd float %299, %319, !dbg !130
  %322 = sext i32 %10 to i64, !dbg !141
  %323 = getelementptr float, ptr addrspace(1) %0, i64 %322, !dbg !141
  %324 = bitcast float %316 to i32, !dbg !142
  %325 = bitcast float %317 to i32, !dbg !142
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %324, i32 %325, ptr addrspace(1) %323, i1 true) #2, !dbg !142
  %326 = getelementptr float, ptr addrspace(1) %1, i64 %322, !dbg !143
  %327 = bitcast float %320 to i32, !dbg !144
  %328 = bitcast float %321 to i32, !dbg !144
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %327, i32 %328, ptr addrspace(1) %326, i1 true) #2, !dbg !144
  ret void, !dbg !145
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6cvezd6m66fzq5ubehdhc377w3sewjmtnqwkvwmnrctyil3jce6.py", directory: "inductor_cache/6c")
!4 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_max_pool2d_with_indices_mul_sub_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_max_pool2d_with_indices_mul_sub_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_max_pool2d_with_indices_mul_sub_9", linkageName: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_max_pool2d_with_indices_mul_sub_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 29, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 40, column: 21, scope: !7)
!20 = !DILocation(line: 41, column: 20, scope: !7)
!21 = !DILocation(line: 43, column: 20, scope: !7)
!22 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 44, column: 42, scope: !7)
!26 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 45, column: 21, scope: !7)
!28 = !DILocation(line: 113, column: 29, scope: !23, inlinedAt: !29)
!29 = !DILocation(line: 49, column: 42, scope: !7)
!30 = !DILocation(line: 50, column: 36, scope: !7)
!31 = !DILocation(line: 50, column: 31, scope: !7)
!32 = !DILocation(line: 51, column: 35, scope: !7)
!33 = !DILocation(line: 51, column: 40, scope: !7)
!34 = !DILocation(line: 51, column: 31, scope: !7)
!35 = !DILocation(line: 53, column: 37, scope: !7)
!36 = !DILocation(line: 53, column: 42, scope: !7)
!37 = !DILocation(line: 53, column: 31, scope: !7)
!38 = !DILocation(line: 57, column: 38, scope: !7)
!39 = !DILocation(line: 57, column: 36, scope: !7)
!40 = !DILocation(line: 58, column: 40, scope: !7)
!41 = !DILocation(line: 60, column: 42, scope: !7)
!42 = !DILocation(line: 24, column: 27, scope: !7)
!43 = !DILocation(line: 30, column: 19, scope: !7)
!44 = !DILocation(line: 32, column: 18, scope: !7)
!45 = !DILocation(line: 35, column: 18, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !47)
!47 = !DILocation(line: 37, column: 40, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !47)
!49 = !DILocation(line: 38, column: 19, scope: !7)
!50 = !DILocation(line: 50, column: 50, scope: !7)
!51 = !DILocation(line: 50, column: 46, scope: !7)
!52 = !DILocation(line: 50, column: 63, scope: !7)
!53 = !DILocation(line: 50, column: 57, scope: !7)
!54 = !DILocation(line: 50, column: 68, scope: !7)
!55 = !DILocation(line: 51, column: 72, scope: !7)
!56 = !DILocation(line: 53, column: 74, scope: !7)
!57 = !DILocation(line: 55, column: 42, scope: !7)
!58 = !DILocation(line: 55, column: 31, scope: !7)
!59 = !DILocation(line: 55, column: 74, scope: !7)
!60 = !DILocation(line: 57, column: 46, scope: !7)
!61 = !DILocation(line: 62, column: 63, scope: !7)
!62 = !DILocation(line: 57, column: 57, scope: !7)
!63 = !DILocation(line: 57, column: 31, scope: !7)
!64 = !DILocation(line: 57, column: 68, scope: !7)
!65 = !DILocation(line: 58, column: 61, scope: !7)
!66 = !DILocation(line: 58, column: 31, scope: !7)
!67 = !DILocation(line: 58, column: 72, scope: !7)
!68 = !DILocation(line: 60, column: 63, scope: !7)
!69 = !DILocation(line: 60, column: 31, scope: !7)
!70 = !DILocation(line: 60, column: 74, scope: !7)
!71 = !DILocation(line: 62, column: 42, scope: !7)
!72 = !DILocation(line: 62, column: 31, scope: !7)
!73 = !DILocation(line: 62, column: 74, scope: !7)
!74 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !75)
!75 = !DILocation(line: 52, column: 42, scope: !7)
!76 = !DILocation(line: 120, column: 21, scope: !23, inlinedAt: !75)
!77 = !DILocation(line: 120, column: 16, scope: !23, inlinedAt: !75)
!78 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !75)
!79 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !80)
!80 = !DILocation(line: 54, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !23, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !23, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !80)
!84 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !85)
!85 = !DILocation(line: 56, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !23, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !23, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !85)
!89 = !DILocation(line: 64, column: 20, scope: !7)
!90 = !DILocation(line: 87, column: 20, scope: !7)
!91 = !DILocation(line: 113, column: 29, scope: !23, inlinedAt: !92)
!92 = !DILocation(line: 66, column: 42, scope: !7)
!93 = !DILocation(line: 67, column: 50, scope: !7)
!94 = !DILocation(line: 67, column: 31, scope: !7)
!95 = !DILocation(line: 67, column: 69, scope: !7)
!96 = !DILocation(line: 68, column: 31, scope: !7)
!97 = !DILocation(line: 68, column: 73, scope: !7)
!98 = !DILocation(line: 70, column: 31, scope: !7)
!99 = !DILocation(line: 70, column: 75, scope: !7)
!100 = !DILocation(line: 72, column: 31, scope: !7)
!101 = !DILocation(line: 72, column: 75, scope: !7)
!102 = !DILocation(line: 74, column: 46, scope: !7)
!103 = !DILocation(line: 74, column: 31, scope: !7)
!104 = !DILocation(line: 74, column: 69, scope: !7)
!105 = !DILocation(line: 75, column: 50, scope: !7)
!106 = !DILocation(line: 75, column: 31, scope: !7)
!107 = !DILocation(line: 75, column: 73, scope: !7)
!108 = !DILocation(line: 77, column: 52, scope: !7)
!109 = !DILocation(line: 77, column: 31, scope: !7)
!110 = !DILocation(line: 77, column: 75, scope: !7)
!111 = !DILocation(line: 79, column: 52, scope: !7)
!112 = !DILocation(line: 79, column: 31, scope: !7)
!113 = !DILocation(line: 79, column: 75, scope: !7)
!114 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !115)
!115 = !DILocation(line: 69, column: 42, scope: !7)
!116 = !DILocation(line: 120, column: 21, scope: !23, inlinedAt: !115)
!117 = !DILocation(line: 120, column: 16, scope: !23, inlinedAt: !115)
!118 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !115)
!119 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !120)
!120 = !DILocation(line: 71, column: 42, scope: !7)
!121 = !DILocation(line: 120, column: 21, scope: !23, inlinedAt: !120)
!122 = !DILocation(line: 120, column: 16, scope: !23, inlinedAt: !120)
!123 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !120)
!124 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !125)
!125 = !DILocation(line: 73, column: 42, scope: !7)
!126 = !DILocation(line: 120, column: 21, scope: !23, inlinedAt: !125)
!127 = !DILocation(line: 120, column: 16, scope: !23, inlinedAt: !125)
!128 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !125)
!129 = !DILocation(line: 81, column: 20, scope: !7)
!130 = !DILocation(line: 89, column: 20, scope: !7)
!131 = !DILocation(line: 82, column: 21, scope: !7)
!132 = !DILocation(line: 83, column: 20, scope: !7)
!133 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !134)
!134 = !DILocation(line: 84, column: 42, scope: !7)
!135 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !134)
!136 = !DILocation(line: 110, column: 15, scope: !23, inlinedAt: !137)
!137 = !DILocation(line: 85, column: 42, scope: !7)
!138 = !DILocation(line: 113, column: 29, scope: !23, inlinedAt: !137)
!139 = !DILocation(line: 86, column: 20, scope: !7)
!140 = !DILocation(line: 88, column: 20, scope: !7)
!141 = !DILocation(line: 90, column: 28, scope: !7)
!142 = !DILocation(line: 90, column: 40, scope: !7)
!143 = !DILocation(line: 91, column: 28, scope: !7)
!144 = !DILocation(line: 91, column: 40, scope: !7)
!145 = !DILocation(line: 91, column: 4, scope: !7)
