#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_affine_grid_generator_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<-2> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0> : tensor<128xi64, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<7.500000e-01> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<-1> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<-7.500000e-01> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<5.000000e-01> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<2.000000e+00> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<4> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<1> : tensor<128xi64, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<96> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<2> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<16> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_14 = arith.constant dense<6> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_15 = arith.constant dense<3> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_16 = arith.constant dense<384> : tensor<128xi32, #blocked> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<128xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<128xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_16 : tensor<128xi32, #blocked> loc(#loc6)
    %6 = arith.remsi %4, %cst_15 : tensor<128xi32, #blocked> loc(#loc7)
    %7 = arith.divsi %4, %cst_14 : tensor<128xi32, #blocked> loc(#loc8)
    %8 = arith.remsi %7, %cst_13 : tensor<128xi32, #blocked> loc(#loc9)
    %9 = arith.divsi %4, %cst_15 : tensor<128xi32, #blocked> loc(#loc10)
    %10 = arith.remsi %9, %cst_12 : tensor<128xi32, #blocked> loc(#loc11)
    %11 = arith.divsi %4, %cst_11 : tensor<128xi32, #blocked> loc(#loc12)
    %12 = arith.remsi %4, %cst_14 : tensor<128xi32, #blocked> loc(#loc13)
    %13 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc14)
    %14 = tt.addptr %13, %11 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc14)
    %15 = tt.load %14, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc15)
    %16 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc16)
    %17 = tt.addptr %16, %6 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc16)
    %18 = tt.load %17, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc17)
    %19 = tt.addptr %16, %12 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc18)
    %20 = tt.load %19, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc19)
    %21 = arith.extsi %6 : tensor<128xi32, #blocked> to tensor<128xi64, #blocked> loc(#loc20)
    %22 = arith.cmpi slt, %21, %cst_10 : tensor<128xi64, #blocked> loc(#loc20)
    %23 = arith.remsi %8, %cst_9 : tensor<128xi32, #blocked> loc(#loc21)
    %24 = arith.sitofp %23 : tensor<128xi32, #blocked> to tensor<128xf32, #blocked> loc(#loc22)
    %25 = arith.cmpf olt, %24, %cst_8 : tensor<128xf32, #blocked> loc(#loc23)
    %26 = arith.mulf %24, %cst_7 : tensor<128xf32, #blocked> loc(#loc24)
    %27 = arith.addf %26, %cst_6 : tensor<128xf32, #blocked> loc(#loc25)
    %28 = arith.subi %cst_15, %23 : tensor<128xi32, #blocked> loc(#loc26)
    %29 = arith.sitofp %28 : tensor<128xi32, #blocked> to tensor<128xf32, #blocked> loc(#loc27)
    %30 = arith.mulf %29, %cst_7 : tensor<128xf32, #blocked> loc(#loc28)
    %31 = arith.subf %cst_4, %30 : tensor<128xf32, #blocked> loc(#loc29)
    %32 = arith.select %25, %27, %31 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc30)
    %33 = arith.select %22, %32, %cst_3 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc31)
    %34 = arith.addi %6, %cst_5 : tensor<128xi32, #blocked> loc(#loc32)
    %35 = arith.extsi %34 : tensor<128xi32, #blocked> to tensor<128xi64, #blocked> loc(#loc33)
    %36 = arith.cmpi sge, %35, %cst_2 : tensor<128xi64, #blocked> loc(#loc33)
    %37 = arith.cmpi slt, %35, %cst_10 : tensor<128xi64, #blocked> loc(#loc34)
    %38 = arith.andi %36, %37 : tensor<128xi1, #blocked> loc(#loc35)
    %39 = arith.divsi %8, %cst_9 : tensor<128xi32, #blocked> loc(#loc36)
    %40 = arith.sitofp %39 : tensor<128xi32, #blocked> to tensor<128xf32, #blocked> loc(#loc37)
    %41 = arith.cmpf olt, %40, %cst_8 : tensor<128xf32, #blocked> loc(#loc38)
    %42 = arith.mulf %40, %cst_7 : tensor<128xf32, #blocked> loc(#loc39)
    %43 = arith.addf %42, %cst_6 : tensor<128xf32, #blocked> loc(#loc40)
    %44 = arith.subi %cst_15, %39 : tensor<128xi32, #blocked> loc(#loc41)
    %45 = arith.sitofp %44 : tensor<128xi32, #blocked> to tensor<128xf32, #blocked> loc(#loc42)
    %46 = arith.mulf %45, %cst_7 : tensor<128xf32, #blocked> loc(#loc43)
    %47 = arith.subf %cst_4, %46 : tensor<128xf32, #blocked> loc(#loc44)
    %48 = arith.select %41, %43, %47 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc45)
    %49 = arith.select %38, %48, %cst_3 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc46)
    %50 = arith.addf %33, %49 : tensor<128xf32, #blocked> loc(#loc47)
    %51 = arith.addi %6, %cst_1 : tensor<128xi32, #blocked> loc(#loc48)
    %52 = arith.extsi %51 : tensor<128xi32, #blocked> to tensor<128xi64, #blocked> loc(#loc49)
    %53 = arith.cmpi sge, %52, %cst_2 : tensor<128xi64, #blocked> loc(#loc49)
    %54 = arith.select %53, %cst_0, %cst_3 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc50)
    %55 = arith.addf %50, %54 : tensor<128xf32, #blocked> loc(#loc51)
    %56 = arith.cmpi eq, %10, %cst : tensor<128xi32, #blocked> loc(#loc52)
    %57 = arith.cmpi eq, %6, %cst : tensor<128xi32, #blocked> loc(#loc53)
    %58 = arith.cmpf olt, %15, %cst_7 : tensor<128xf32, #blocked> loc(#loc54)
    %59 = arith.uitofp %58 : tensor<128xi1, #blocked> to tensor<128xf32, #blocked> loc(#loc55)
    %60 = arith.mulf %59, %cst_8 : tensor<128xf32, #blocked> loc(#loc56)
    %61 = arith.subf %60, %cst_0 : tensor<128xf32, #blocked> loc(#loc57)
    %62 = arith.select %57, %61, %18 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc58)
    %63 = arith.select %56, %62, %20 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc59)
    %64 = arith.mulf %55, %63 : tensor<128xf32, #blocked> loc(#loc60)
    %65 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc61)
    %66 = tt.addptr %65, %4 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc61)
    tt.store %66, %64, %5 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc62)
    tt.return loc(#loc63)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":21:28)
#loc3 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":21:33)
#loc4 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":22:36)
#loc5 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":22:23)
#loc6 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":23:21)
#loc7 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":24:19)
#loc8 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":26:21)
#loc9 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":26:26)
#loc10 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":27:21)
#loc11 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":27:26)
#loc12 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":28:19)
#loc13 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":29:19)
#loc14 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":30:31)
#loc15 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":30:36)
#loc16 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":31:31)
#loc17 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":31:36)
#loc18 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":32:31)
#loc19 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":32:36)
#loc20 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":35:18)
#loc21 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":36:33)
#loc22 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":37:19)
#loc23 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":39:18)
#loc24 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":41:18)
#loc25 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":43:19)
#loc26 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":44:17)
#loc27 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":45:21)
#loc28 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":46:20)
#loc29 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":48:20)
#loc30 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":49:34)
#loc31 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":51:34)
#loc32 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":52:19)
#loc33 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":54:21)
#loc34 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":55:20)
#loc35 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":56:20)
#loc36 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":57:18)
#loc37 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":58:21)
#loc38 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":60:20)
#loc39 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":62:20)
#loc40 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":64:20)
#loc41 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":65:17)
#loc42 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":66:21)
#loc43 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":67:20)
#loc44 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":69:20)
#loc45 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":70:35)
#loc46 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":72:35)
#loc47 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":73:20)
#loc48 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":74:19)
#loc49 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":75:21)
#loc50 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":78:35)
#loc51 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":79:20)
#loc52 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":82:21)
#loc53 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":83:20)
#loc54 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":85:20)
#loc55 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":86:21)
#loc56 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":88:20)
#loc57 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":90:20)
#loc58 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":91:35)
#loc59 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":92:35)
#loc60 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":93:20)
#loc61 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":94:25)
#loc62 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":94:37)
#loc63 = loc("inductor_cache/nq/cnqboyu6qhunakqt6sioyyefjcz3txnoaukraaxglz5mqrenf5ks.py":94:4)
