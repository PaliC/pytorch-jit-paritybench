; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_48(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 8, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = shl i32 %20, 1, !dbg !12
  %22 = and i32 %21, 254, !dbg !12
  %23 = or disjoint i32 %19, %22, !dbg !13
  %.frozen = freeze i32 %23, !dbg !14
  %24 = sdiv i32 %.frozen, 4, !dbg !14
  %25 = mul i32 %24, 4, !dbg !15
  %.decomposed = sub i32 %.frozen, %25, !dbg !15
  %26 = sdiv i32 %23, 64, !dbg !16
  %27 = srem i32 %26, 16, !dbg !17
  %28 = srem i32 %24, 16, !dbg !18
  %29 = sdiv i32 %23, 1024, !dbg !19
  %30 = sext i32 %23 to i64, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !20
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !21
  %33 = sext i32 %.decomposed to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !22
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !24
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !26
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !28
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !29
  %42 = sext i32 %27 to i64, !dbg !30
  %43 = getelementptr i64, ptr addrspace(1) %5, i64 %42, !dbg !30
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !31
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !31
  %46 = sext i32 %28 to i64, !dbg !32
  %47 = getelementptr i64, ptr addrspace(1) %5, i64 %46, !dbg !32
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !33
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !33
  %50 = getelementptr float, ptr addrspace(1) %7, i64 %33, !dbg !34
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !35
  %52 = getelementptr float, ptr addrspace(1) %9, i64 %33, !dbg !36
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !37
  %54 = getelementptr float, ptr addrspace(1) %11, i64 %33, !dbg !38
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !39
  %56 = getelementptr float, ptr addrspace(1) %12, i64 %33, !dbg !40
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !41
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !41
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !41
  %60 = bitcast i32 %58 to float, !dbg !41
  %61 = bitcast i32 %59 to float, !dbg !41
  %62 = getelementptr float, ptr addrspace(1) %13, i64 %33, !dbg !42
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !43
  %64 = getelementptr float, ptr addrspace(1) %14, i64 %33, !dbg !44
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !45
  %66 = lshr i64 %44, 60, !dbg !46
  %67 = and i64 %66, 8, !dbg !46
  %68 = add i64 %67, %44, !dbg !46
  %69 = lshr i64 %48, 60, !dbg !47
  %70 = and i64 %69, 8, !dbg !47
  %71 = add i64 %70, %48, !dbg !47
  %72 = shl i64 %71, 2, !dbg !48
  %73 = shl i64 %68, 5, !dbg !49
  %74 = shl nsw i32 %29, 8, !dbg !50
  %narrow = add nsw i32 %74, %.decomposed, !dbg !51
  %75 = sext i32 %narrow to i64, !dbg !51
  %76 = add i64 %73, %75, !dbg !52
  %77 = add i64 %76, %72, !dbg !53
  %78 = getelementptr float, ptr addrspace(1) %6, i64 %77, !dbg !54
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !55
  %80 = getelementptr float, ptr addrspace(1) %8, i64 %77, !dbg !56
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !57
  %82 = getelementptr float, ptr addrspace(1) %10, i64 %77, !dbg !58
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !59
  %84 = fadd float %60, 0x3EE4F8B580000000, !dbg !60
  %85 = fadd float %61, 0x3EE4F8B580000000, !dbg !60
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i = icmp eq i32 %86, 0, !dbg !61
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i = icmp eq i32 %87, 0, !dbg !61
  br i1 %.not.i, label %93, label %88, !dbg !61

88:                                               ; preds = %17
  br i1 %.not1.i, label %91, label %89, !dbg !61

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

93:                                               ; preds = %17
  br i1 %.not1.i, label %96, label %94, !dbg !61

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

__nv_sqrtf.exit:                                  ; preds = %89, %91, %94, %96
  %.0.i = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !61
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i1 = icmp eq i32 %98, 0, !dbg !61
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i4 = icmp eq i32 %99, 0, !dbg !61
  br i1 %.not.i1, label %105, label %100, !dbg !61

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %103, label %101, !dbg !61

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !61
  br label %__nv_sqrtf.exit5, !dbg !61

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !61
  br label %__nv_sqrtf.exit5, !dbg !61

105:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %108, label %106, !dbg !61

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !61
  br label %__nv_sqrtf.exit5, !dbg !61

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !61
  br label %__nv_sqrtf.exit5, !dbg !61

__nv_sqrtf.exit5:                                 ; preds = %101, %103, %106, %108
  %.0.i3 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !61
  %110 = extractvalue { i32, i32 } %32, 1, !dbg !21
  %111 = extractvalue { i32, i32 } %35, 1, !dbg !23
  %112 = extractvalue { i32, i32 } %37, 1, !dbg !25
  %113 = extractvalue { i32, i32 } %39, 1, !dbg !27
  %114 = extractvalue { i32, i32 } %41, 1, !dbg !29
  %115 = extractvalue { i32, i32 } %79, 1, !dbg !55
  %116 = extractvalue { i32, i32 } %51, 1, !dbg !35
  %117 = extractvalue { i32, i32 } %81, 1, !dbg !57
  %118 = extractvalue { i32, i32 } %53, 1, !dbg !37
  %119 = extractvalue { i32, i32 } %83, 1, !dbg !59
  %120 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !23
  %121 = insertelement <2 x i32> %120, i32 %115, i64 1, !dbg !23
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !23
  %123 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !21
  %124 = insertelement <2 x i32> %123, i32 %116, i64 1, !dbg !21
  %125 = bitcast <2 x i32> %124 to <2 x float>, !dbg !21
  %126 = fadd <2 x float> %125, %122, !dbg !62
  %127 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !27
  %128 = insertelement <2 x i32> %127, i32 %117, i64 1, !dbg !27
  %129 = bitcast <2 x i32> %128 to <2 x float>, !dbg !27
  %130 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !25
  %131 = insertelement <2 x i32> %130, i32 %118, i64 1, !dbg !25
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !25
  %133 = fadd <2 x float> %132, %129, !dbg !63
  %134 = insertelement <2 x i32> poison, i32 %114, i64 0, !dbg !29
  %135 = insertelement <2 x i32> %134, i32 %119, i64 1, !dbg !29
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !29
  %137 = fadd <2 x float> %133, %136, !dbg !64
  %138 = fadd <2 x float> %126, %137, !dbg !65
  %shift = shufflevector <2 x float> %138, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !66
  %139 = fadd <2 x float> %138, %shift, !dbg !66
  %140 = extractelement <2 x float> %139, i64 0, !dbg !66
  %141 = extractvalue { i32, i32 } %55, 1, !dbg !39
  %142 = bitcast i32 %141 to float, !dbg !39
  %143 = fsub float %140, %142, !dbg !67
  %144 = extractvalue { i32, i32 } %32, 0, !dbg !21
  %145 = extractvalue { i32, i32 } %35, 0, !dbg !23
  %146 = extractvalue { i32, i32 } %37, 0, !dbg !25
  %147 = extractvalue { i32, i32 } %39, 0, !dbg !27
  %148 = extractvalue { i32, i32 } %41, 0, !dbg !29
  %149 = extractvalue { i32, i32 } %79, 0, !dbg !55
  %150 = extractvalue { i32, i32 } %51, 0, !dbg !35
  %151 = extractvalue { i32, i32 } %81, 0, !dbg !57
  %152 = extractvalue { i32, i32 } %53, 0, !dbg !37
  %153 = extractvalue { i32, i32 } %83, 0, !dbg !59
  %154 = insertelement <2 x i32> poison, i32 %145, i64 0, !dbg !23
  %155 = insertelement <2 x i32> %154, i32 %149, i64 1, !dbg !23
  %156 = bitcast <2 x i32> %155 to <2 x float>, !dbg !23
  %157 = insertelement <2 x i32> poison, i32 %144, i64 0, !dbg !21
  %158 = insertelement <2 x i32> %157, i32 %150, i64 1, !dbg !21
  %159 = bitcast <2 x i32> %158 to <2 x float>, !dbg !21
  %160 = fadd <2 x float> %159, %156, !dbg !62
  %161 = insertelement <2 x i32> poison, i32 %147, i64 0, !dbg !27
  %162 = insertelement <2 x i32> %161, i32 %151, i64 1, !dbg !27
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !27
  %164 = insertelement <2 x i32> poison, i32 %146, i64 0, !dbg !25
  %165 = insertelement <2 x i32> %164, i32 %152, i64 1, !dbg !25
  %166 = bitcast <2 x i32> %165 to <2 x float>, !dbg !25
  %167 = fadd <2 x float> %166, %163, !dbg !63
  %168 = insertelement <2 x i32> poison, i32 %148, i64 0, !dbg !29
  %169 = insertelement <2 x i32> %168, i32 %153, i64 1, !dbg !29
  %170 = bitcast <2 x i32> %169 to <2 x float>, !dbg !29
  %171 = fadd <2 x float> %167, %170, !dbg !64
  %172 = fadd <2 x float> %160, %171, !dbg !65
  %shift6 = shufflevector <2 x float> %172, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !66
  %173 = fadd <2 x float> %172, %shift6, !dbg !66
  %174 = extractelement <2 x float> %173, i64 0, !dbg !66
  %175 = extractvalue { i32, i32 } %55, 0, !dbg !39
  %176 = bitcast i32 %175 to float, !dbg !39
  %177 = fsub float %174, %176, !dbg !67
  %178 = extractvalue { i32, i32 } %65, 1, !dbg !45
  %179 = bitcast i32 %178 to float, !dbg !45
  %180 = extractvalue { i32, i32 } %65, 0, !dbg !45
  %181 = bitcast i32 %180 to float, !dbg !45
  %182 = extractvalue { i32, i32 } %63, 1, !dbg !43
  %183 = bitcast i32 %182 to float, !dbg !43
  %184 = extractvalue { i32, i32 } %63, 0, !dbg !43
  %185 = bitcast i32 %184 to float, !dbg !43
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !68
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !68
  %188 = fmul float %177, %186, !dbg !69
  %189 = fmul float %143, %187, !dbg !69
  %190 = fmul float %188, %185, !dbg !70
  %191 = fmul float %189, %183, !dbg !70
  %192 = fadd float %190, %181, !dbg !71
  %193 = fadd float %191, %179, !dbg !71
  %194 = fcmp olt float %192, 0.000000e+00, !dbg !72
  %195 = fcmp olt float %193, 0.000000e+00, !dbg !72
  %196 = select i1 %194, float 0.000000e+00, float %192, !dbg !76
  %197 = select i1 %195, float 0.000000e+00, float %193, !dbg !76
  %198 = bitcast float %174 to i32, !dbg !77
  %199 = bitcast float %140 to i32, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %198, i32 %199, ptr addrspace(1) %31, i1 true) #3, !dbg !77
  %200 = getelementptr float, ptr addrspace(1) %15, i64 %30, !dbg !78
  %201 = bitcast float %196 to i32, !dbg !79
  %202 = bitcast float %197 to i32, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %201, i32 %202, ptr addrspace(1) %200, i1 true) #3, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyxjbjqzcq72b6kjsy3o4wt6675zdhy66fqhajpm5r24vioyznxt.py", directory: "inductor_cache/yx")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_48, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_48, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_48", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_48", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 27, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 26, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 34, scope: !7)
!21 = !DILocation(line: 29, column: 39, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 38, column: 32, scope: !7)
!39 = !DILocation(line: 38, column: 37, scope: !7)
!40 = !DILocation(line: 39, column: 32, scope: !7)
!41 = !DILocation(line: 39, column: 37, scope: !7)
!42 = !DILocation(line: 40, column: 32, scope: !7)
!43 = !DILocation(line: 40, column: 37, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 41, column: 37, scope: !7)
!46 = !DILocation(line: 49, column: 35, scope: !7)
!47 = !DILocation(line: 52, column: 35, scope: !7)
!48 = !DILocation(line: 53, column: 38, scope: !7)
!49 = !DILocation(line: 53, column: 49, scope: !7)
!50 = !DILocation(line: 53, column: 61, scope: !7)
!51 = !DILocation(line: 53, column: 36, scope: !7)
!52 = !DILocation(line: 53, column: 46, scope: !7)
!53 = !DILocation(line: 53, column: 57, scope: !7)
!54 = !DILocation(line: 53, column: 31, scope: !7)
!55 = !DILocation(line: 53, column: 66, scope: !7)
!56 = !DILocation(line: 55, column: 31, scope: !7)
!57 = !DILocation(line: 55, column: 66, scope: !7)
!58 = !DILocation(line: 57, column: 31, scope: !7)
!59 = !DILocation(line: 57, column: 66, scope: !7)
!60 = !DILocation(line: 63, column: 20, scope: !7)
!61 = !DILocation(line: 64, column: 27, scope: !7)
!62 = !DILocation(line: 42, column: 18, scope: !7)
!63 = !DILocation(line: 43, column: 18, scope: !7)
!64 = !DILocation(line: 44, column: 18, scope: !7)
!65 = !DILocation(line: 45, column: 18, scope: !7)
!66 = !DILocation(line: 60, column: 19, scope: !7)
!67 = !DILocation(line: 61, column: 20, scope: !7)
!68 = !DILocation(line: 66, column: 20, scope: !7)
!69 = !DILocation(line: 69, column: 20, scope: !7)
!70 = !DILocation(line: 70, column: 20, scope: !7)
!71 = !DILocation(line: 71, column: 20, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !75)
!73 = distinct !DILexicalBlockFile(scope: !7, file: !74, discriminator: 0)
!74 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!75 = !DILocation(line: 73, column: 42, scope: !7)
!76 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !75)
!77 = !DILocation(line: 74, column: 40, scope: !7)
!78 = !DILocation(line: 75, column: 25, scope: !7)
!79 = !DILocation(line: 75, column: 37, scope: !7)
!80 = !DILocation(line: 75, column: 4, scope: !7)
