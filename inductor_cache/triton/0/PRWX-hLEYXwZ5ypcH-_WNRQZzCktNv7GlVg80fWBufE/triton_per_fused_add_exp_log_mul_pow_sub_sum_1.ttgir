#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":19:0)
#loc1 = loc(unknown)
#loc31 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":49:26)
#loc51 = loc(callsite(#loc1 at #loc31))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_exp_log_mul_pow_sub_sum_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":19:0), %arg3: i64 {tt.divisibility = 16 : i32} loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":19:0), %arg5: i32 loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x32xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<1x32xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant 1.8378770664093453 : f64 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst_2 = arith.constant -5.000000e-01 : f32 loc(#loc1)
    %cst_3 = arith.constant dense<5.000000e-01> : tensor<1x32xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<5.000000e-01> : tensor<1x32xf32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<32> : tensor<1x32xi32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<1x32xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %3 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc4)
    %6 = arith.muli %0, %c64_i32 : i32 loc(#loc5)
    %7 = tt.splat %6 : i32 -> tensor<1x32xi32, #blocked1> loc(#loc6)
    %8 = tt.splat %6 : i32 -> tensor<1x32xi32, #blocked> loc(#loc6)
    %9 = arith.addi %5, %8 : tensor<1x32xi32, #blocked> loc(#loc6)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %11 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %12 = tt.addptr %11, %9 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc7)
    %13 = tt.splat %1 : i1 -> tensor<1x32xi1, #blocked1> loc(#loc8)
    %14 = tt.splat %1 : i1 -> tensor<1x32xi1, #blocked> loc(#loc8)
    %15 = tt.load %12, %14, %cst : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %16 = arith.addi %4, %cst_5 : tensor<1x32xi32, #blocked1> loc(#loc9)
    %17 = arith.addi %5, %cst_0 : tensor<1x32xi32, #blocked> loc(#loc9)
    %18 = arith.addi %16, %7 : tensor<1x32xi32, #blocked1> loc(#loc10)
    %19 = arith.addi %17, %8 : tensor<1x32xi32, #blocked> loc(#loc10)
    %20 = tt.addptr %10, %18 : tensor<1x32x!tt.ptr<f32>, #blocked1>, tensor<1x32xi32, #blocked1> loc(#loc11)
    %21 = tt.addptr %11, %19 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc11)
    %22 = tt.load %20, %13, %cst_6 : tensor<1x32x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %23 = tt.load %21, %14, %cst : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc12)
    %24 = arith.muli %0, %c32_i32 : i32 loc(#loc13)
    %25 = tt.splat %24 : i32 -> tensor<1x32xi32, #blocked1> loc(#loc14)
    %26 = tt.splat %24 : i32 -> tensor<1x32xi32, #blocked> loc(#loc14)
    %27 = arith.addi %4, %25 : tensor<1x32xi32, #blocked1> loc(#loc14)
    %28 = arith.addi %5, %26 : tensor<1x32xi32, #blocked> loc(#loc14)
    %29 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked1> loc(#loc15)
    %30 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc15)
    %31 = tt.addptr %29, %27 : tensor<1x32x!tt.ptr<f32>, #blocked1>, tensor<1x32xi32, #blocked1> loc(#loc15)
    %32 = tt.addptr %30, %28 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc15)
    %33 = tt.load %31, %13, %cst_6 : tensor<1x32x!tt.ptr<f32>, #blocked1> loc(#loc16)
    %34 = tt.load %32, %14, %cst : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc16)
    %35 = arith.cmpf ogt, %cst, %15 : tensor<1x32xf32, #blocked> loc(#loc46)
    %36 = arith.select %35, %cst, %15 : tensor<1x32xi1, #blocked>, tensor<1x32xf32, #blocked> loc(#loc47)
    %37 = arith.cmpf ogt, %cst_6, %22 : tensor<1x32xf32, #blocked1> loc(#loc48)
    %38 = arith.cmpf ogt, %cst, %23 : tensor<1x32xf32, #blocked> loc(#loc48)
    %39 = arith.select %37, %cst_6, %22 : tensor<1x32xi1, #blocked1>, tensor<1x32xf32, #blocked1> loc(#loc49)
    %40 = arith.select %38, %cst, %23 : tensor<1x32xi1, #blocked>, tensor<1x32xf32, #blocked> loc(#loc49)
    %41 = arith.mulf %39, %cst_4 : tensor<1x32xf32, #blocked1> loc(#loc21)
    %42 = arith.mulf %40, %cst_3 : tensor<1x32xf32, #blocked> loc(#loc21)
    %43 = math.exp %41 : tensor<1x32xf32, #blocked1> loc(#loc22)
    %44 = math.exp %42 : tensor<1x32xf32, #blocked> loc(#loc22)
    %45 = arith.mulf %44, %34 : tensor<1x32xf32, #blocked> loc(#loc23)
    %46 = arith.addf %36, %45 : tensor<1x32xf32, #blocked> loc(#loc24)
    %47 = math.log %43 : tensor<1x32xf32, #blocked1> loc(#loc25)
    %48 = arith.mulf %33, %33 : tensor<1x32xf32, #blocked1> loc(#loc26)
    %49 = arith.mulf %48, %cst_4 : tensor<1x32xf32, #blocked1> loc(#loc27)
    %50 = arith.addf %47, %49 : tensor<1x32xf32, #blocked1> loc(#loc28)
    %51 = arith.select %13, %50, %cst_6 : tensor<1x32xi1, #blocked1>, tensor<1x32xf32, #blocked1> loc(#loc29)
    %52 = "tt.reduce"(%51) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc31)), %arg8: f32 loc(callsite(#loc1 at #loc31))):
      %66 = arith.addf %arg7, %arg8 : f32 loc(#loc53)
      tt.reduce.return %66 : f32 loc(#loc50)
    }) : (tensor<1x32xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc50)
    %53 = tt.expand_dims %52 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc33)
    %54 = arith.sitofp %arg3 : i64 to f32 loc(#loc34)
    %55 = arith.mulf %54, %cst_2 : f32 loc(#loc35)
    %56 = arith.extf %55 : f32 to f64 loc(#loc36)
    %57 = arith.mulf %56, %cst_1 : f64 loc(#loc37)
    %58 = arith.truncf %57 : f64 to f32 loc(#loc38)
    %59 = tt.splat %58 : f32 -> tensor<1x1xf32, #blocked1> loc(#loc38)
    %60 = arith.subf %59, %53 : tensor<1x1xf32, #blocked1> loc(#loc39)
    %61 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc40)
    %62 = tt.addptr %61, %28 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc40)
    tt.store %62, %46, %14 : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc41)
    gpu.barrier loc(#loc42)
    %63 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc43)
    %64 = tt.splat %63 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc44)
    %65 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc44)
    tt.store %64, %60, %65 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc44)
    tt.return loc(#loc45)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":23:28)
#loc3 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":25:21)
#loc4 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":26:34)
#loc5 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":31:38)
#loc6 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":31:35)
#loc7 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":31:30)
#loc8 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":31:43)
#loc9 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":32:35)
#loc10 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":32:40)
#loc11 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":32:30)
#loc12 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":32:48)
#loc13 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":33:38)
#loc14 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":33:35)
#loc15 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":33:30)
#loc16 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":33:43)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc18 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":36:40)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc20 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":37:40)
#loc21 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":39:18)
#loc22 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":40:23)
#loc23 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":41:18)
#loc24 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":42:19)
#loc25 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":43:24)
#loc26 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":44:19)
#loc27 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":45:20)
#loc28 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":46:20)
#loc29 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":48:35)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc33 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":49:29)
#loc34 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":50:21)
#loc35 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":52:20)
#loc36 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":53:21)
#loc37 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":55:20)
#loc38 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":56:21)
#loc39 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":57:20)
#loc40 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":58:25)
#loc41 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":58:45)
#loc42 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":59:4)
#loc43 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":60:28)
#loc44 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":60:40)
#loc45 = loc("inductor_cache/ar/carkjyhtjtpbqmllly26eszb2g2o56z3mokryx3ojbqjfctucph2.py":60:4)
#loc46 = loc(callsite(#loc17 at #loc18))
#loc47 = loc(callsite(#loc19 at #loc18))
#loc48 = loc(callsite(#loc17 at #loc20))
#loc49 = loc(callsite(#loc19 at #loc20))
#loc50 = loc(callsite(#loc30 at #loc31))
#loc52 = loc(callsite(#loc32 at #loc30))
#loc53 = loc(callsite(#loc52 at #loc31))
