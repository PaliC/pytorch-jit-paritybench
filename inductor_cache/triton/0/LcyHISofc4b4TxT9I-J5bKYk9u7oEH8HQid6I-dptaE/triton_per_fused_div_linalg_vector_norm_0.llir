; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_div_linalg_vector_norm_0(ptr addrspace(1) %0, i32 %1) local_unnamed_addr !dbg !7 {
  %3 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %4 = and i32 %3, 31, !dbg !10
  %5 = lshr i32 %3, 5, !dbg !10
  %6 = and i32 %3, 63, !dbg !10
  %7 = zext nneg i32 %6 to i64, !dbg !11
  %8 = getelementptr float, ptr addrspace(1) %0, i64 %7, !dbg !11
  %9 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #5, !dbg !12
  %10 = bitcast i32 %9 to float, !dbg !12
  %11 = fmul float %10, %10, !dbg !13
  %12 = bitcast float %11 to i32, !dbg !14
  %13 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %12, i32 16, i32 31), !dbg !14
  %14 = bitcast i32 %13 to float, !dbg !14
  %15 = fadd float %11, %14, !dbg !18
  %16 = bitcast float %15 to i32, !dbg !14
  %17 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %16, i32 8, i32 31), !dbg !14
  %18 = bitcast i32 %17 to float, !dbg !14
  %19 = fadd float %15, %18, !dbg !18
  %20 = bitcast float %19 to i32, !dbg !14
  %21 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %20, i32 4, i32 31), !dbg !14
  %22 = bitcast i32 %21 to float, !dbg !14
  %23 = fadd float %19, %22, !dbg !18
  %24 = bitcast float %23 to i32, !dbg !14
  %25 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %24, i32 2, i32 31), !dbg !14
  %26 = bitcast i32 %25 to float, !dbg !14
  %27 = fadd float %23, %26, !dbg !18
  %28 = bitcast float %27 to i32, !dbg !14
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 1, i32 31), !dbg !14
  %30 = bitcast i32 %29 to float, !dbg !14
  %31 = fadd float %27, %30, !dbg !18
  %32 = icmp eq i32 %4, 0, !dbg !14
  %33 = and i32 %5, 1, !dbg !14
  %34 = zext nneg i32 %33 to i64, !dbg !14
  %35 = getelementptr float, ptr addrspace(3) @global_smem, i64 %34, !dbg !14
  %36 = bitcast float %31 to <1 x i32>, !dbg !14
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %35, <1 x i32> %36, i1 %32) #5, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %37 = icmp slt i32 %3, 2, !dbg !14
  %38 = sext i32 %3 to i64, !dbg !14
  %39 = getelementptr float, ptr addrspace(3) @global_smem, i64 %38, !dbg !14
  %40 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %39, i1 %37) #5, !dbg !14
  %41 = bitcast i32 %40 to float, !dbg !14
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 1, i32 31), !dbg !14
  %43 = bitcast i32 %42 to float, !dbg !14
  %44 = fadd float %41, %43, !dbg !18
  %45 = and i32 %3, 1, !dbg !14
  %46 = icmp eq i32 %45, 0, !dbg !14
  %47 = and i1 %37, %46, !dbg !14
  %48 = bitcast float %44 to <1 x i32>, !dbg !14
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %48, i1 %47) #5, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  %49 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !14
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %.not.i = icmp eq i32 %50, 0, !dbg !20
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %.not1.i = icmp eq i32 %51, 0, !dbg !20
  br i1 %.not.i, label %57, label %52, !dbg !20

52:                                               ; preds = %2
  br i1 %.not1.i, label %55, label %53, !dbg !20

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #5, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #5, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

57:                                               ; preds = %2
  br i1 %.not1.i, label %60, label %58, !dbg !20

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #5, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #5, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

__nv_sqrtf.exit:                                  ; preds = %53, %55, %58, %60
  %.0.i = phi float [ %54, %53 ], [ %56, %55 ], [ %59, %58 ], [ %61, %60 ], !dbg !20
  %62 = fcmp ogt float %.0.i, 0x3D71979980000000, !dbg !21
  %63 = fcmp uno float %.0.i, 0.000000e+00, !dbg !25
  %64 = or i1 %62, %63, !dbg !26
  %65 = select i1 %64, float %.0.i, float 0x3D71979980000000, !dbg !27
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %10, float %65) #5, !dbg !28
  %67 = bitcast float %66 to i32, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %67, ptr addrspace(1) %8, i1 true) #5, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c45jtewznmmtbr2sxl2getv5uo7o33bgx7335x3gq2jttryoo55d.py", directory: "inductor_cache/45")
!4 = !{ptr @triton_per_fused_div_linalg_vector_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_div_linalg_vector_norm_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_div_linalg_vector_norm_0", linkageName: "triton_per_fused_div_linalg_vector_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 34, scope: !7)
!12 = !DILocation(line: 30, column: 39, scope: !7)
!13 = !DILocation(line: 31, column: 18, scope: !7)
!14 = !DILocation(line: 267, column: 36, scope: !15, inlinedAt: !17)
!15 = distinct !DILexicalBlockFile(scope: !7, file: !16, discriminator: 0)
!16 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!17 = !DILocation(line: 33, column: 24, scope: !7)
!18 = !DILocation(line: 256, column: 15, scope: !19, inlinedAt: !17)
!19 = distinct !DILexicalBlockFile(scope: !15, file: !16, discriminator: 0)
!20 = !DILocation(line: 34, column: 26, scope: !7)
!21 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 36, column: 40, scope: !7)
!25 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 38, column: 74, scope: !7)
!30 = !DILocation(line: 38, column: 4, scope: !7)
