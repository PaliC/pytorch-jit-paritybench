; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 6, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 60, !dbg !12
  %17 = lshr i32 %14, 4, !dbg !12
  %18 = and i32 %17, 7, !dbg !12
  %19 = or disjoint i32 %18, 8, !dbg !12
  %20 = or disjoint i32 %18, 16, !dbg !12
  %21 = or disjoint i32 %18, 24, !dbg !12
  %22 = or disjoint i32 %18, 32, !dbg !12
  %23 = or disjoint i32 %18, 40, !dbg !12
  %24 = or disjoint i32 %18, 48, !dbg !12
  %25 = or disjoint i32 %18, 56, !dbg !12
  %26 = or disjoint i32 %13, %16, !dbg !13
  %27 = or disjoint i32 %13, %18, !dbg !13
  %28 = or disjoint i32 %13, %19, !dbg !13
  %29 = or disjoint i32 %13, %20, !dbg !13
  %30 = or disjoint i32 %13, %21, !dbg !13
  %31 = or disjoint i32 %13, %22, !dbg !13
  %32 = or disjoint i32 %13, %23, !dbg !13
  %33 = or disjoint i32 %13, %24, !dbg !13
  %34 = or disjoint i32 %13, %25, !dbg !13
  %35 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %36 = shl i32 %35, 4, !dbg !15
  %37 = and i32 %14, 15, !dbg !16
  %38 = or disjoint i32 %36, %37, !dbg !17
  %39 = or disjoint i32 %36, %18, !dbg !17
  %40 = or disjoint i32 %36, %19, !dbg !17
  %41 = icmp slt i32 %38, 16, !dbg !18
  %42 = icmp slt i32 %39, 16, !dbg !18
  %43 = icmp slt i32 %40, 16, !dbg !18
  %.frozen = freeze i32 %38, !dbg !19
  %44 = sdiv i32 %.frozen, 4, !dbg !19
  %45 = mul i32 %44, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %45, !dbg !20
  %.frozen16 = freeze i32 %26, !dbg !21
  %46 = sdiv i32 %.frozen16, 256, !dbg !21
  %47 = mul i32 %46, 256, !dbg !22
  %.decomposed17 = sub i32 %.frozen16, %47, !dbg !22
  %48 = sext i32 %44 to i64, !dbg !23
  %49 = getelementptr i64, ptr addrspace(1) %1, i64 %48, !dbg !23
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 %41) #2, !dbg !24
  %51 = sext i32 %.decomposed to i64, !dbg !25
  %52 = getelementptr i64, ptr addrspace(1) %2, i64 %51, !dbg !25
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 %41) #2, !dbg !26
  %54 = getelementptr i64, ptr addrspace(1) %4, i64 %51, !dbg !27
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 %41) #2, !dbg !28
  %56 = getelementptr float, ptr addrspace(1) %5, i64 %51, !dbg !29
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %41) #2, !dbg !30
  %58 = getelementptr i64, ptr addrspace(1) %6, i64 %48, !dbg !31
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %58, i1 %41) #2, !dbg !32
  %60 = getelementptr float, ptr addrspace(1) %7, i64 %48, !dbg !33
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %41) #2, !dbg !34
  %62 = bitcast i32 %61 to float, !dbg !34
  %63 = shl i32 %39, 8, !dbg !35
  %64 = shl i32 %40, 8, !dbg !35
  %65 = shl i32 %46, 12, !dbg !36
  %66 = add i32 %65, %.decomposed17, !dbg !37
  %67 = add i32 %66, %63, !dbg !38
  %68 = add i32 %66, %64, !dbg !38
  %69 = sext i32 %67 to i64, !dbg !39
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !39
  %71 = sext i32 %68 to i64, !dbg !39
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !39
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %42) #2, !dbg !40
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !40
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !40
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !40
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !40
  %78 = bitcast i32 %74 to float, !dbg !40
  %79 = bitcast i32 %75 to float, !dbg !40
  %80 = bitcast i32 %76 to float, !dbg !40
  %81 = bitcast i32 %77 to float, !dbg !40
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 %43) #2, !dbg !40
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !40
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !40
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !40
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !40
  %87 = bitcast i32 %83 to float, !dbg !40
  %88 = bitcast i32 %84 to float, !dbg !40
  %89 = bitcast i32 %85 to float, !dbg !40
  %90 = bitcast i32 %86 to float, !dbg !40
  %91 = sext i32 %.decomposed17 to i64, !dbg !41
  %92 = getelementptr float, ptr addrspace(1) %8, i64 %91, !dbg !41
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 true) #2, !dbg !42
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !42
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !42
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !42
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !42
  %98 = bitcast i32 %94 to float, !dbg !42
  %99 = bitcast i32 %95 to float, !dbg !42
  %100 = bitcast i32 %96 to float, !dbg !42
  %101 = bitcast i32 %97 to float, !dbg !42
  %102 = lshr i64 %50, 62, !dbg !43
  %103 = and i64 %102, 2, !dbg !43
  %104 = add i64 %103, %50, !dbg !43
  %105 = lshr i64 %53, 62, !dbg !44
  %106 = and i64 %105, 2, !dbg !44
  %107 = shl i64 %104, 1, !dbg !45
  %108 = shl i32 %27, 2, !dbg !46
  %109 = shl i32 %28, 2, !dbg !46
  %110 = shl i32 %29, 2, !dbg !46
  %111 = shl i32 %30, 2, !dbg !46
  %112 = shl i32 %31, 2, !dbg !46
  %113 = shl i32 %32, 2, !dbg !46
  %114 = shl i32 %33, 2, !dbg !46
  %115 = shl i32 %34, 2, !dbg !46
  %116 = sext i32 %108 to i64, !dbg !47
  %117 = sext i32 %109 to i64, !dbg !47
  %118 = sext i32 %110 to i64, !dbg !47
  %119 = sext i32 %111 to i64, !dbg !47
  %120 = sext i32 %112 to i64, !dbg !47
  %121 = sext i32 %113 to i64, !dbg !47
  %122 = sext i32 %114 to i64, !dbg !47
  %123 = sext i32 %115 to i64, !dbg !47
  %124 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !48
  %125 = getelementptr float, ptr addrspace(1) %124, i64 %53, !dbg !48
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %107, !dbg !48
  %127 = getelementptr float, ptr addrspace(1) %126, i64 %116, !dbg !48
  %128 = getelementptr float, ptr addrspace(1) %126, i64 %117, !dbg !48
  %129 = getelementptr float, ptr addrspace(1) %126, i64 %118, !dbg !48
  %130 = getelementptr float, ptr addrspace(1) %126, i64 %119, !dbg !48
  %131 = getelementptr float, ptr addrspace(1) %126, i64 %120, !dbg !48
  %132 = getelementptr float, ptr addrspace(1) %126, i64 %121, !dbg !48
  %133 = getelementptr float, ptr addrspace(1) %126, i64 %122, !dbg !48
  %134 = getelementptr float, ptr addrspace(1) %126, i64 %123, !dbg !48
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %41) #2, !dbg !49
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %41) #2, !dbg !49
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %41) #2, !dbg !49
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %41) #2, !dbg !49
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %41) #2, !dbg !49
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %41) #2, !dbg !49
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %41) #2, !dbg !49
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %41) #2, !dbg !49
  %143 = lshr i64 %55, 62, !dbg !50
  %144 = and i64 %143, 2, !dbg !50
  %145 = getelementptr float, ptr addrspace(1) %3, i64 %144, !dbg !51
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %55, !dbg !51
  %147 = getelementptr float, ptr addrspace(1) %146, i64 %107, !dbg !51
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %116, !dbg !51
  %149 = getelementptr float, ptr addrspace(1) %147, i64 %117, !dbg !51
  %150 = getelementptr float, ptr addrspace(1) %147, i64 %118, !dbg !51
  %151 = getelementptr float, ptr addrspace(1) %147, i64 %119, !dbg !51
  %152 = getelementptr float, ptr addrspace(1) %147, i64 %120, !dbg !51
  %153 = getelementptr float, ptr addrspace(1) %147, i64 %121, !dbg !51
  %154 = getelementptr float, ptr addrspace(1) %147, i64 %122, !dbg !51
  %155 = getelementptr float, ptr addrspace(1) %147, i64 %123, !dbg !51
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %41) #2, !dbg !52
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %41) #2, !dbg !52
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %41) #2, !dbg !52
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %41) #2, !dbg !52
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %41) #2, !dbg !52
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %41) #2, !dbg !52
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %41) #2, !dbg !52
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %41) #2, !dbg !52
  %164 = lshr i64 %59, 62, !dbg !53
  %165 = and i64 %164, 2, !dbg !53
  %166 = add i64 %165, %59, !dbg !53
  %167 = shl i64 %166, 1, !dbg !54
  %168 = getelementptr float, ptr addrspace(1) %125, i64 %167, !dbg !55
  %169 = getelementptr float, ptr addrspace(1) %168, i64 %116, !dbg !55
  %170 = getelementptr float, ptr addrspace(1) %168, i64 %117, !dbg !55
  %171 = getelementptr float, ptr addrspace(1) %168, i64 %118, !dbg !55
  %172 = getelementptr float, ptr addrspace(1) %168, i64 %119, !dbg !55
  %173 = getelementptr float, ptr addrspace(1) %168, i64 %120, !dbg !55
  %174 = getelementptr float, ptr addrspace(1) %168, i64 %121, !dbg !55
  %175 = getelementptr float, ptr addrspace(1) %168, i64 %122, !dbg !55
  %176 = getelementptr float, ptr addrspace(1) %168, i64 %123, !dbg !55
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %41) #2, !dbg !56
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %41) #2, !dbg !56
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %41) #2, !dbg !56
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %41) #2, !dbg !56
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 %41) #2, !dbg !56
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %41) #2, !dbg !56
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %41) #2, !dbg !56
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %41) #2, !dbg !56
  %185 = getelementptr float, ptr addrspace(1) %146, i64 %167, !dbg !57
  %186 = getelementptr float, ptr addrspace(1) %185, i64 %116, !dbg !57
  %187 = getelementptr float, ptr addrspace(1) %185, i64 %117, !dbg !57
  %188 = getelementptr float, ptr addrspace(1) %185, i64 %118, !dbg !57
  %189 = getelementptr float, ptr addrspace(1) %185, i64 %119, !dbg !57
  %190 = getelementptr float, ptr addrspace(1) %185, i64 %120, !dbg !57
  %191 = getelementptr float, ptr addrspace(1) %185, i64 %121, !dbg !57
  %192 = getelementptr float, ptr addrspace(1) %185, i64 %122, !dbg !57
  %193 = getelementptr float, ptr addrspace(1) %185, i64 %123, !dbg !57
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %41) #2, !dbg !58
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %41) #2, !dbg !58
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 %41) #2, !dbg !58
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 %41) #2, !dbg !58
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 %41) #2, !dbg !58
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %41) #2, !dbg !58
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 %41) #2, !dbg !58
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 %41) #2, !dbg !58
  %202 = insertelement <2 x i32> poison, i32 %177, i64 0, !dbg !56
  %203 = insertelement <2 x i32> %202, i32 %135, i64 1, !dbg !56
  %204 = bitcast <2 x i32> %203 to <2 x float>, !dbg !56
  %205 = insertelement <2 x i32> poison, i32 %194, i64 0, !dbg !58
  %206 = insertelement <2 x i32> %205, i32 %156, i64 1, !dbg !58
  %207 = bitcast <2 x i32> %206 to <2 x float>, !dbg !58
  %208 = fsub <2 x float> %207, %204, !dbg !59
  %209 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !60
  %210 = bitcast <2 x i32> %209 to <2 x float>, !dbg !60
  %211 = shufflevector <2 x float> %210, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %212 = fmul <2 x float> %208, %211, !dbg !60
  %213 = fadd <2 x float> %212, %204, !dbg !61
  %214 = insertelement <2 x i32> poison, i32 %178, i64 0, !dbg !56
  %215 = insertelement <2 x i32> %214, i32 %136, i64 1, !dbg !56
  %216 = bitcast <2 x i32> %215 to <2 x float>, !dbg !56
  %217 = insertelement <2 x i32> poison, i32 %195, i64 0, !dbg !58
  %218 = insertelement <2 x i32> %217, i32 %157, i64 1, !dbg !58
  %219 = bitcast <2 x i32> %218 to <2 x float>, !dbg !58
  %220 = fsub <2 x float> %219, %216, !dbg !59
  %221 = fmul <2 x float> %220, %211, !dbg !60
  %222 = fadd <2 x float> %221, %216, !dbg !61
  %223 = insertelement <2 x i32> poison, i32 %179, i64 0, !dbg !56
  %224 = insertelement <2 x i32> %223, i32 %137, i64 1, !dbg !56
  %225 = bitcast <2 x i32> %224 to <2 x float>, !dbg !56
  %226 = insertelement <2 x i32> poison, i32 %196, i64 0, !dbg !58
  %227 = insertelement <2 x i32> %226, i32 %158, i64 1, !dbg !58
  %228 = bitcast <2 x i32> %227 to <2 x float>, !dbg !58
  %229 = fsub <2 x float> %228, %225, !dbg !59
  %230 = fmul <2 x float> %229, %211, !dbg !60
  %231 = fadd <2 x float> %230, %225, !dbg !61
  %232 = insertelement <2 x i32> poison, i32 %180, i64 0, !dbg !56
  %233 = insertelement <2 x i32> %232, i32 %138, i64 1, !dbg !56
  %234 = bitcast <2 x i32> %233 to <2 x float>, !dbg !56
  %235 = insertelement <2 x i32> poison, i32 %197, i64 0, !dbg !58
  %236 = insertelement <2 x i32> %235, i32 %159, i64 1, !dbg !58
  %237 = bitcast <2 x i32> %236 to <2 x float>, !dbg !58
  %238 = fsub <2 x float> %237, %234, !dbg !59
  %239 = fmul <2 x float> %238, %211, !dbg !60
  %240 = fadd <2 x float> %239, %234, !dbg !61
  %241 = insertelement <2 x i32> poison, i32 %181, i64 0, !dbg !56
  %242 = insertelement <2 x i32> %241, i32 %139, i64 1, !dbg !56
  %243 = bitcast <2 x i32> %242 to <2 x float>, !dbg !56
  %244 = insertelement <2 x i32> poison, i32 %198, i64 0, !dbg !58
  %245 = insertelement <2 x i32> %244, i32 %160, i64 1, !dbg !58
  %246 = bitcast <2 x i32> %245 to <2 x float>, !dbg !58
  %247 = fsub <2 x float> %246, %243, !dbg !59
  %248 = fmul <2 x float> %247, %211, !dbg !60
  %249 = fadd <2 x float> %248, %243, !dbg !61
  %250 = insertelement <2 x i32> poison, i32 %182, i64 0, !dbg !56
  %251 = insertelement <2 x i32> %250, i32 %140, i64 1, !dbg !56
  %252 = bitcast <2 x i32> %251 to <2 x float>, !dbg !56
  %253 = insertelement <2 x i32> poison, i32 %199, i64 0, !dbg !58
  %254 = insertelement <2 x i32> %253, i32 %161, i64 1, !dbg !58
  %255 = bitcast <2 x i32> %254 to <2 x float>, !dbg !58
  %256 = fsub <2 x float> %255, %252, !dbg !59
  %257 = fmul <2 x float> %256, %211, !dbg !60
  %258 = fadd <2 x float> %257, %252, !dbg !61
  %259 = insertelement <2 x i32> poison, i32 %183, i64 0, !dbg !56
  %260 = insertelement <2 x i32> %259, i32 %141, i64 1, !dbg !56
  %261 = bitcast <2 x i32> %260 to <2 x float>, !dbg !56
  %262 = insertelement <2 x i32> poison, i32 %200, i64 0, !dbg !58
  %263 = insertelement <2 x i32> %262, i32 %162, i64 1, !dbg !58
  %264 = bitcast <2 x i32> %263 to <2 x float>, !dbg !58
  %265 = fsub <2 x float> %264, %261, !dbg !59
  %266 = fmul <2 x float> %265, %211, !dbg !60
  %267 = fadd <2 x float> %266, %261, !dbg !61
  %268 = insertelement <2 x i32> poison, i32 %184, i64 0, !dbg !56
  %269 = insertelement <2 x i32> %268, i32 %142, i64 1, !dbg !56
  %270 = bitcast <2 x i32> %269 to <2 x float>, !dbg !56
  %271 = insertelement <2 x i32> poison, i32 %201, i64 0, !dbg !58
  %272 = insertelement <2 x i32> %271, i32 %163, i64 1, !dbg !58
  %273 = bitcast <2 x i32> %272 to <2 x float>, !dbg !58
  %274 = fsub <2 x float> %273, %270, !dbg !59
  %275 = fmul <2 x float> %274, %211, !dbg !60
  %276 = fadd <2 x float> %275, %270, !dbg !61
  %277 = extractelement <2 x float> %213, i64 0, !dbg !62
  %278 = extractelement <2 x float> %213, i64 1, !dbg !63
  %279 = fsub float %277, %278, !dbg !62
  %280 = extractelement <2 x float> %222, i64 0, !dbg !62
  %281 = extractelement <2 x float> %222, i64 1, !dbg !63
  %282 = fsub float %280, %281, !dbg !62
  %283 = extractelement <2 x float> %231, i64 0, !dbg !62
  %284 = extractelement <2 x float> %231, i64 1, !dbg !63
  %285 = fsub float %283, %284, !dbg !62
  %286 = extractelement <2 x float> %240, i64 0, !dbg !62
  %287 = extractelement <2 x float> %240, i64 1, !dbg !63
  %288 = fsub float %286, %287, !dbg !62
  %289 = extractelement <2 x float> %249, i64 0, !dbg !62
  %290 = extractelement <2 x float> %249, i64 1, !dbg !63
  %291 = fsub float %289, %290, !dbg !62
  %292 = extractelement <2 x float> %258, i64 0, !dbg !62
  %293 = extractelement <2 x float> %258, i64 1, !dbg !63
  %294 = fsub float %292, %293, !dbg !62
  %295 = extractelement <2 x float> %267, i64 0, !dbg !62
  %296 = extractelement <2 x float> %267, i64 1, !dbg !63
  %297 = fsub float %295, %296, !dbg !62
  %298 = extractelement <2 x float> %276, i64 0, !dbg !62
  %299 = extractelement <2 x float> %276, i64 1, !dbg !63
  %300 = fsub float %298, %299, !dbg !62
  %301 = fmul float %279, %62, !dbg !64
  %302 = fmul float %282, %62, !dbg !64
  %303 = fmul float %285, %62, !dbg !64
  %304 = fmul float %288, %62, !dbg !64
  %305 = fmul float %291, %62, !dbg !64
  %306 = fmul float %294, %62, !dbg !64
  %307 = fmul float %297, %62, !dbg !64
  %308 = fmul float %300, %62, !dbg !64
  %309 = fadd float %278, %301, !dbg !63
  %310 = fadd float %281, %302, !dbg !63
  %311 = fadd float %284, %303, !dbg !63
  %312 = fadd float %287, %304, !dbg !63
  %313 = fadd float %290, %305, !dbg !63
  %314 = fadd float %293, %306, !dbg !63
  %315 = fadd float %296, %307, !dbg !63
  %316 = fadd float %299, %308, !dbg !63
  %317 = fadd float %78, %98, !dbg !65
  %318 = fadd float %79, %99, !dbg !65
  %319 = fadd float %80, %100, !dbg !65
  %320 = fadd float %81, %101, !dbg !65
  %321 = fadd float %87, %98, !dbg !65
  %322 = fadd float %88, %99, !dbg !65
  %323 = fadd float %89, %100, !dbg !65
  %324 = fadd float %90, %101, !dbg !65
  %325 = shl i32 %14, 6, !dbg !65
  %326 = and i32 %325, 960, !dbg !65
  %327 = or disjoint i32 %326, %18, !dbg !65
  %328 = and i32 %14, 127, !dbg !65
  %329 = lshr exact i32 %326, 4, !dbg !65
  %330 = add nuw nsw i32 %329, %327, !dbg !65
  %331 = zext nneg i32 %330 to i64, !dbg !65
  %332 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %331, !dbg !65
  %333 = bitcast float %317 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %333, i1 true) #2, !dbg !65
  %334 = or disjoint i32 %327, 16, !dbg !65
  %335 = lshr i32 %334, 4, !dbg !65
  %336 = add nuw nsw i32 %335, %334, !dbg !65
  %337 = zext nneg i32 %336 to i64, !dbg !65
  %338 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %337, !dbg !65
  %339 = bitcast float %318 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, <1 x i32> %339, i1 true) #2, !dbg !65
  %340 = or disjoint i32 %327, 32, !dbg !65
  %341 = lshr i32 %340, 4, !dbg !65
  %342 = add nuw nsw i32 %341, %340, !dbg !65
  %343 = zext nneg i32 %342 to i64, !dbg !65
  %344 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %343, !dbg !65
  %345 = bitcast float %319 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %345, i1 true) #2, !dbg !65
  %346 = or disjoint i32 %327, 48, !dbg !65
  %347 = lshr i32 %346, 4, !dbg !65
  %348 = add nuw nsw i32 %347, %346, !dbg !65
  %349 = zext nneg i32 %348 to i64, !dbg !65
  %350 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %349, !dbg !65
  %351 = bitcast float %320 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %351, i1 true) #2, !dbg !65
  %352 = or disjoint i32 %327, 8, !dbg !65
  %353 = add nuw nsw i32 %352, %329, !dbg !65
  %354 = zext nneg i32 %353 to i64, !dbg !65
  %355 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %354, !dbg !65
  %356 = bitcast float %321 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %355, <1 x i32> %356, i1 true) #2, !dbg !65
  %357 = or disjoint i32 %327, 24, !dbg !65
  %358 = lshr i32 %357, 4, !dbg !65
  %359 = add nuw nsw i32 %358, %357, !dbg !65
  %360 = zext nneg i32 %359 to i64, !dbg !65
  %361 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %360, !dbg !65
  %362 = bitcast float %322 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %361, <1 x i32> %362, i1 true) #2, !dbg !65
  %363 = or disjoint i32 %327, 40, !dbg !65
  %364 = lshr i32 %363, 4, !dbg !65
  %365 = add nuw nsw i32 %364, %363, !dbg !65
  %366 = zext nneg i32 %365 to i64, !dbg !65
  %367 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %366, !dbg !65
  %368 = bitcast float %323 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %367, <1 x i32> %368, i1 true) #2, !dbg !65
  %369 = or disjoint i32 %327, 56, !dbg !65
  %370 = lshr i32 %369, 4, !dbg !65
  %371 = add nuw nsw i32 %370, %369, !dbg !65
  %372 = zext nneg i32 %371 to i64, !dbg !65
  %373 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %372, !dbg !65
  %374 = bitcast float %324 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %373, <1 x i32> %374, i1 true) #2, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %375 = lshr i32 %328, 4, !dbg !65
  %376 = add nuw nsw i32 %375, %328, !dbg !65
  %377 = zext nneg i32 %376 to i64, !dbg !65
  %378 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %377, !dbg !65
  %379 = load float, ptr addrspace(3) %378, align 4, !dbg !65
  %380 = or disjoint i32 %328, 128, !dbg !65
  %381 = lshr i32 %380, 4, !dbg !65
  %382 = add nuw nsw i32 %381, %380, !dbg !65
  %383 = zext nneg i32 %382 to i64, !dbg !65
  %384 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %383, !dbg !65
  %385 = load float, ptr addrspace(3) %384, align 4, !dbg !65
  %386 = or disjoint i32 %328, 256, !dbg !65
  %387 = lshr i32 %386, 4, !dbg !65
  %388 = add nuw nsw i32 %387, %386, !dbg !65
  %389 = zext nneg i32 %388 to i64, !dbg !65
  %390 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %389, !dbg !65
  %391 = load float, ptr addrspace(3) %390, align 4, !dbg !65
  %392 = or disjoint i32 %328, 384, !dbg !65
  %393 = lshr i32 %392, 4, !dbg !65
  %394 = add nuw nsw i32 %393, %392, !dbg !65
  %395 = zext nneg i32 %394 to i64, !dbg !65
  %396 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %395, !dbg !65
  %397 = load float, ptr addrspace(3) %396, align 4, !dbg !65
  %398 = or disjoint i32 %328, 512, !dbg !65
  %399 = lshr i32 %398, 4, !dbg !65
  %400 = add nuw nsw i32 %399, %398, !dbg !65
  %401 = zext nneg i32 %400 to i64, !dbg !65
  %402 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %401, !dbg !65
  %403 = load float, ptr addrspace(3) %402, align 4, !dbg !65
  %404 = or disjoint i32 %328, 640, !dbg !65
  %405 = lshr i32 %404, 4, !dbg !65
  %406 = add nuw nsw i32 %405, %404, !dbg !65
  %407 = zext nneg i32 %406 to i64, !dbg !65
  %408 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %407, !dbg !65
  %409 = load float, ptr addrspace(3) %408, align 4, !dbg !65
  %410 = or disjoint i32 %328, 768, !dbg !65
  %411 = lshr i32 %410, 4, !dbg !65
  %412 = add nuw nsw i32 %411, %410, !dbg !65
  %413 = zext nneg i32 %412 to i64, !dbg !65
  %414 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %413, !dbg !65
  %415 = load float, ptr addrspace(3) %414, align 4, !dbg !65
  %416 = or disjoint i32 %328, 896, !dbg !65
  %417 = lshr i32 %416, 4, !dbg !65
  %418 = add nuw nsw i32 %417, %416, !dbg !65
  %419 = zext nneg i32 %418 to i64, !dbg !65
  %420 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %419, !dbg !65
  %421 = load float, ptr addrspace(3) %420, align 4, !dbg !65
  %422 = fadd float %309, %379, !dbg !66
  %423 = fadd float %310, %385, !dbg !66
  %424 = fadd float %311, %391, !dbg !66
  %425 = fadd float %312, %397, !dbg !66
  %426 = fadd float %313, %403, !dbg !66
  %427 = fadd float %314, %409, !dbg !66
  %428 = fadd float %315, %415, !dbg !66
  %429 = fadd float %316, %421, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %430 = and i32 %15, 508, !dbg !68
  %431 = bitcast float %422 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %431, i1 true) #2, !dbg !68
  %432 = bitcast float %423 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %355, <1 x i32> %432, i1 true) #2, !dbg !68
  %433 = add nuw nsw i32 %334, %329, !dbg !68
  %434 = zext nneg i32 %433 to i64, !dbg !68
  %435 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %434, !dbg !68
  %436 = bitcast float %424 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %436, i1 true) #2, !dbg !68
  %437 = add nuw nsw i32 %357, %329, !dbg !68
  %438 = zext nneg i32 %437 to i64, !dbg !68
  %439 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %438, !dbg !68
  %440 = bitcast float %425 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %439, <1 x i32> %440, i1 true) #2, !dbg !68
  %441 = add nuw nsw i32 %340, %329, !dbg !68
  %442 = zext nneg i32 %441 to i64, !dbg !68
  %443 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %442, !dbg !68
  %444 = bitcast float %426 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %443, <1 x i32> %444, i1 true) #2, !dbg !68
  %445 = add nuw nsw i32 %363, %329, !dbg !68
  %446 = zext nneg i32 %445 to i64, !dbg !68
  %447 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %446, !dbg !68
  %448 = bitcast float %427 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, <1 x i32> %448, i1 true) #2, !dbg !68
  %449 = add nuw nsw i32 %346, %329, !dbg !68
  %450 = zext nneg i32 %449 to i64, !dbg !68
  %451 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %450, !dbg !68
  %452 = bitcast float %428 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %451, <1 x i32> %452, i1 true) #2, !dbg !68
  %453 = add nuw nsw i32 %369, %329, !dbg !68
  %454 = zext nneg i32 %453 to i64, !dbg !68
  %455 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %454, !dbg !68
  %456 = bitcast float %429 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %455, <1 x i32> %456, i1 true) #2, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %457 = lshr i32 %15, 4, !dbg !68
  %458 = and i32 %457, 28, !dbg !68
  %459 = add nuw nsw i32 %458, %430, !dbg !68
  %460 = zext nneg i32 %459 to i64, !dbg !68
  %461 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %460, !dbg !68
  %462 = or disjoint i32 %430, 512, !dbg !68
  %463 = lshr i32 %462, 4, !dbg !68
  %464 = and i32 %463, 60, !dbg !68
  %465 = add nuw nsw i32 %464, %462, !dbg !68
  %466 = zext nneg i32 %465 to i64, !dbg !68
  %467 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %466, !dbg !68
  %468 = load <4 x i32>, ptr addrspace(3) %467, align 16, !dbg !68
  %.extract = load i32, ptr addrspace(3) %461, align 16, !dbg !68
  %469 = getelementptr inbounds i8, ptr addrspace(3) %461, i64 4, !dbg !68
  %.extract9 = load i32, ptr addrspace(3) %469, align 4, !dbg !68
  %470 = getelementptr inbounds i8, ptr addrspace(3) %461, i64 8, !dbg !68
  %.extract10 = load i32, ptr addrspace(3) %470, align 8, !dbg !68
  %471 = getelementptr inbounds i8, ptr addrspace(3) %461, i64 12, !dbg !68
  %.extract11 = load i32, ptr addrspace(3) %471, align 4, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %70, i1 %42) #2, !dbg !68
  %.extract12 = extractelement <4 x i32> %468, i64 0, !dbg !68
  %.extract13 = extractelement <4 x i32> %468, i64 1, !dbg !68
  %.extract14 = extractelement <4 x i32> %468, i64 2, !dbg !68
  %.extract15 = extractelement <4 x i32> %468, i64 3, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %72, i1 %43) #2, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccfsithsieiev2a7hhnvkmsl2enqrx7zxzanpkavyiw3obs4atrw.py", directory: "inductor_cache/cf")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_24", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 44, scope: !7)
!36 = !DILocation(line: 40, column: 54, scope: !7)
!37 = !DILocation(line: 40, column: 40, scope: !7)
!38 = !DILocation(line: 40, column: 49, scope: !7)
!39 = !DILocation(line: 40, column: 35, scope: !7)
!40 = !DILocation(line: 40, column: 59, scope: !7)
!41 = !DILocation(line: 41, column: 31, scope: !7)
!42 = !DILocation(line: 41, column: 36, scope: !7)
!43 = !DILocation(line: 45, column: 32, scope: !7)
!44 = !DILocation(line: 48, column: 32, scope: !7)
!45 = !DILocation(line: 49, column: 39, scope: !7)
!46 = !DILocation(line: 49, column: 48, scope: !7)
!47 = !DILocation(line: 49, column: 46, scope: !7)
!48 = !DILocation(line: 49, column: 30, scope: !7)
!49 = !DILocation(line: 49, column: 53, scope: !7)
!50 = !DILocation(line: 52, column: 35, scope: !7)
!51 = !DILocation(line: 53, column: 31, scope: !7)
!52 = !DILocation(line: 53, column: 55, scope: !7)
!53 = !DILocation(line: 59, column: 35, scope: !7)
!54 = !DILocation(line: 60, column: 40, scope: !7)
!55 = !DILocation(line: 60, column: 31, scope: !7)
!56 = !DILocation(line: 60, column: 55, scope: !7)
!57 = !DILocation(line: 61, column: 31, scope: !7)
!58 = !DILocation(line: 61, column: 56, scope: !7)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 63, column: 20, scope: !7)
!61 = !DILocation(line: 64, column: 20, scope: !7)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 67, column: 20, scope: !7)
!64 = !DILocation(line: 66, column: 20, scope: !7)
!65 = !DILocation(line: 68, column: 20, scope: !7)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 70, column: 4, scope: !7)
!68 = !DILocation(line: 71, column: 59, scope: !7)
!69 = !DILocation(line: 71, column: 4, scope: !7)
