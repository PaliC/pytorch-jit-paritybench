; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_mean_sub_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = icmp slt i32 %6, 1024, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = lshr i32 %8, 5, !dbg !12
  %11 = and i32 %8, 63, !dbg !12
  %.frozen = freeze i32 %6, !dbg !13
  %12 = sdiv i32 %.frozen, 64, !dbg !13
  %13 = mul i32 %12, 64, !dbg !14
  %.decomposed = sub i32 %.frozen, %13, !dbg !14
  %14 = shl nuw nsw i32 %11, 9, !dbg !15
  %15 = shl nsw i32 %.decomposed, 7, !dbg !16
  %16 = or disjoint i32 %15, %11, !dbg !17
  %17 = or disjoint i32 %16, 64, !dbg !17
  %18 = shl i32 %12, 13, !dbg !18
  %19 = add i32 %16, %18, !dbg !19
  %20 = add i32 %17, %18, !dbg !19
  %21 = sdiv i32 %19, 32768, !dbg !20
  %22 = sdiv i32 %20, 32768, !dbg !20
  %23 = shl nsw i32 %21, 15, !dbg !21
  %24 = shl nsw i32 %22, 15, !dbg !21
  %25 = or disjoint i32 %23, %14, !dbg !22
  %26 = or disjoint i32 %24, %14, !dbg !22
  %27 = sdiv i32 %19, 64, !dbg !23
  %28 = sdiv i32 %20, 64, !dbg !23
  %29 = srem i32 %27, 512, !dbg !24
  %30 = srem i32 %28, 512, !dbg !24
  %31 = add i32 %25, %29, !dbg !25
  %32 = add i32 %26, %30, !dbg !25
  %33 = sext i32 %31 to i64, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !26
  %35 = sext i32 %32 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %7, i32 0, i1 %7) #4, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %7, i32 0, i1 %7) #4, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !28
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %7, i32 0, i1 %7) #4, !dbg !29
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %7, i32 0, i1 %7) #4, !dbg !29
  %43 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !27
  %44 = insertelement <2 x i32> %43, i32 %38, i64 1, !dbg !27
  %45 = bitcast <2 x i32> %44 to <2 x float>, !dbg !27
  %46 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !29
  %47 = insertelement <2 x i32> %46, i32 %42, i64 1, !dbg !29
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !29
  %49 = fsub <2 x float> %45, %48, !dbg !30
  %50 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %49), !dbg !31
  %shift = shufflevector <2 x float> %50, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !32
  %51 = fadd <2 x float> %50, %shift, !dbg !32
  %52 = extractelement <2 x float> %51, i64 0, !dbg !32
  %53 = select i1 %7, float %52, float 0.000000e+00, !dbg !32
  %54 = bitcast float %53 to i32, !dbg !37
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 16, i32 31), !dbg !37
  %56 = bitcast i32 %55 to float, !dbg !37
  %57 = fadd float %53, %56, !dbg !32
  %58 = bitcast float %57 to i32, !dbg !37
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 8, i32 31), !dbg !37
  %60 = bitcast i32 %59 to float, !dbg !37
  %61 = fadd float %57, %60, !dbg !32
  %62 = bitcast float %61 to i32, !dbg !37
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 4, i32 31), !dbg !37
  %64 = bitcast i32 %63 to float, !dbg !37
  %65 = fadd float %61, %64, !dbg !32
  %66 = bitcast float %65 to i32, !dbg !37
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 2, i32 31), !dbg !37
  %68 = bitcast i32 %67 to float, !dbg !37
  %69 = fadd float %65, %68, !dbg !32
  %70 = bitcast float %69 to i32, !dbg !37
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !37
  %72 = bitcast i32 %71 to float, !dbg !37
  %73 = fadd float %69, %72, !dbg !32
  %74 = icmp eq i32 %9, 0, !dbg !37
  %75 = and i32 %10, 1, !dbg !37
  %76 = getelementptr float, ptr addrspace(3) @global_smem, i32 %75, !dbg !37
  %77 = bitcast float %73 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 %74) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %78 = icmp slt i32 %8, 2, !dbg !37
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !37
  %80 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %79, i1 %78) #4, !dbg !37
  %81 = bitcast i32 %80 to float, !dbg !37
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !37
  %83 = bitcast i32 %82 to float, !dbg !37
  %84 = fadd float %81, %83, !dbg !32
  %85 = and i32 %8, 1, !dbg !37
  %86 = icmp eq i32 %85, 0, !dbg !37
  %87 = and i1 %78, %86, !dbg !37
  %88 = bitcast float %84 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %88, i1 %87) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %89 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !37
  %90 = sext i32 %6 to i64, !dbg !38
  %91 = getelementptr float, ptr addrspace(1) %2, i64 %90, !dbg !38
  %92 = icmp eq i32 %11, 0, !dbg !39
  %93 = and i1 %92, %7, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %89, ptr addrspace(1) %91, i1 %93) #4, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6btjnmro5kudbaehykdaub7nw6vvp2hwfkp7piza7fjrhyp25l3.py", directory: "inductor_cache/6b")
!4 = !{ptr @triton_per_fused_abs_mean_sub_24, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_mean_sub_24, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_mean_sub_24", linkageName: "triton_per_fused_abs_mean_sub_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 30, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 36, scope: !7)
!16 = !DILocation(line: 33, column: 65, scope: !7)
!17 = !DILocation(line: 33, column: 61, scope: !7)
!18 = !DILocation(line: 33, column: 75, scope: !7)
!19 = !DILocation(line: 33, column: 70, scope: !7)
!20 = !DILocation(line: 33, column: 82, scope: !7)
!21 = !DILocation(line: 33, column: 55, scope: !7)
!22 = !DILocation(line: 33, column: 48, scope: !7)
!23 = !DILocation(line: 33, column: 121, scope: !7)
!24 = !DILocation(line: 33, column: 127, scope: !7)
!25 = !DILocation(line: 33, column: 93, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 135, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 135, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 23, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!36 = !DILocation(line: 39, column: 24, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 40, column: 25, scope: !7)
!39 = !DILocation(line: 40, column: 36, scope: !7)
!40 = !DILocation(line: 40, column: 4, scope: !7)
