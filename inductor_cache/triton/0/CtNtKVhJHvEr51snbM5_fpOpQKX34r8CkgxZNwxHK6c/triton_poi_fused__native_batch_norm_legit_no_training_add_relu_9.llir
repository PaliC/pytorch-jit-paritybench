; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = icmp slt i32 %10, 256, !dbg !11
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %13 = shl i32 %12, 10, !dbg !13
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %15 = shl i32 %14, 2, !dbg !14
  %16 = and i32 %15, 508, !dbg !14
  %17 = or disjoint i32 %16, 1, !dbg !14
  %18 = or disjoint i32 %16, 2, !dbg !14
  %19 = or disjoint i32 %16, 3, !dbg !14
  %20 = or disjoint i32 %16, 513, !dbg !14
  %21 = or disjoint i32 %16, 514, !dbg !14
  %22 = or disjoint i32 %16, 515, !dbg !14
  %23 = or disjoint i32 %13, %16, !dbg !15
  %24 = or disjoint i32 %13, %17, !dbg !15
  %25 = or disjoint i32 %13, %18, !dbg !15
  %26 = or disjoint i32 %13, %19, !dbg !15
  %27 = or disjoint i32 %23, 512, !dbg !15
  %28 = or disjoint i32 %13, %20, !dbg !15
  %29 = or disjoint i32 %13, %21, !dbg !15
  %30 = or disjoint i32 %13, %22, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %31 = sdiv i32 %.frozen, 64, !dbg !16
  %32 = mul i32 %31, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %32, !dbg !17
  %33 = shl i32 %23, 6, !dbg !18
  %34 = shl i32 %24, 6, !dbg !18
  %35 = shl i32 %25, 6, !dbg !18
  %36 = shl i32 %26, 6, !dbg !18
  %37 = shl i32 %27, 6, !dbg !18
  %38 = shl i32 %28, 6, !dbg !18
  %39 = shl i32 %29, 6, !dbg !18
  %40 = shl i32 %30, 6, !dbg !18
  %41 = shl i32 %31, 18, !dbg !19
  %42 = add i32 %41, %.decomposed, !dbg !20
  %43 = add i32 %42, %33, !dbg !21
  %44 = add i32 %42, %34, !dbg !21
  %45 = add i32 %42, %35, !dbg !21
  %46 = add i32 %42, %36, !dbg !21
  %47 = add i32 %42, %37, !dbg !21
  %48 = add i32 %42, %38, !dbg !21
  %49 = add i32 %42, %39, !dbg !21
  %50 = add i32 %42, %40, !dbg !21
  %51 = sext i32 %43 to i64, !dbg !22
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !22
  %53 = sext i32 %44 to i64, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !22
  %55 = sext i32 %45 to i64, !dbg !22
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !22
  %57 = sext i32 %46 to i64, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !22
  %59 = sext i32 %47 to i64, !dbg !22
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !22
  %61 = sext i32 %48 to i64, !dbg !22
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !22
  %63 = sext i32 %49 to i64, !dbg !22
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !22
  %65 = sext i32 %50 to i64, !dbg !22
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !22
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %11) #4, !dbg !23
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %11) #4, !dbg !23
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %11) #4, !dbg !23
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %11) #4, !dbg !23
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %11) #4, !dbg !23
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %11) #4, !dbg !23
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %11) #4, !dbg !23
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %11) #4, !dbg !23
  %75 = sext i32 %.decomposed to i64, !dbg !24
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !24
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %11) #4, !dbg !25
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %11) #4, !dbg !25
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %11) #4, !dbg !25
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %11) #4, !dbg !25
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !26
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %11) #4, !dbg !27
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %11) #4, !dbg !27
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %11) #4, !dbg !27
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %11) #4, !dbg !27
  %86 = bitcast i32 %85 to float, !dbg !27
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %75, !dbg !28
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %11) #4, !dbg !29
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %11) #4, !dbg !29
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %11) #4, !dbg !29
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %11) #4, !dbg !29
  %92 = getelementptr float, ptr addrspace(1) %4, i64 %75, !dbg !30
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %11) #4, !dbg !31
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %11) #4, !dbg !31
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %11) #4, !dbg !31
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %11) #4, !dbg !31
  %97 = shl nsw i32 %.decomposed, 12, !dbg !32
  %98 = shl i32 %31, 20, !dbg !33
  %99 = add i32 %98, %97, !dbg !34
  %100 = add i32 %99, 786432, !dbg !35
  %101 = add i32 %100, %23, !dbg !36
  %102 = add i32 %100, %27, !dbg !36
  %103 = sext i32 %101 to i64, !dbg !37
  %104 = getelementptr float, ptr addrspace(1) %5, i64 %103, !dbg !37
  %105 = sext i32 %102 to i64, !dbg !37
  %106 = getelementptr float, ptr addrspace(1) %5, i64 %105, !dbg !37
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 %11) #4, !dbg !38
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %11) #4, !dbg !38
  %109 = fadd float %86, 0x3EE4F8B580000000, !dbg !39
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i11 = icmp eq i32 %116, 0, !dbg !40
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %.not1.i14 = icmp eq i32 %117, 0, !dbg !40
  br i1 %.not.i11, label %123, label %118, !dbg !40

118:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %121, label %119, !dbg !40

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #4, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #4, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

123:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %126, label %124, !dbg !40

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #4, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #4, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

__nv_sqrtf.exit15:                                ; preds = %119, %121, %124, %126
  %.0.i13 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !40
  %128 = insertelement <8 x i32> poison, i32 %74, i64 0, !dbg !23
  %129 = insertelement <8 x i32> %128, i32 %73, i64 1, !dbg !23
  %130 = insertelement <8 x i32> %129, i32 %72, i64 2, !dbg !23
  %131 = insertelement <8 x i32> %130, i32 %71, i64 3, !dbg !23
  %132 = insertelement <8 x i32> %131, i32 %70, i64 4, !dbg !23
  %133 = insertelement <8 x i32> %132, i32 %69, i64 5, !dbg !23
  %134 = insertelement <8 x i32> %133, i32 %68, i64 6, !dbg !23
  %135 = insertelement <8 x i32> %134, i32 %67, i64 7, !dbg !23
  %136 = bitcast <8 x i32> %135 to <8 x float>, !dbg !23
  %137 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !38
  %138 = bitcast i32 %137 to float, !dbg !38
  %139 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !38
  %140 = bitcast i32 %139 to float, !dbg !38
  %141 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !38
  %142 = bitcast i32 %141 to float, !dbg !38
  %143 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !38
  %144 = bitcast i32 %143 to float, !dbg !38
  %145 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !38
  %146 = bitcast i32 %145 to float, !dbg !38
  %147 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !38
  %148 = bitcast i32 %147 to float, !dbg !38
  %149 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !38
  %150 = bitcast i32 %149 to float, !dbg !38
  %151 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !38
  %152 = bitcast i32 %151 to float, !dbg !38
  %153 = and i32 %14, 127, !dbg !14
  %154 = or disjoint i32 %153, 896, !dbg !14
  %155 = or disjoint i32 %13, %154, !dbg !15
  %156 = shl i32 %155, 6, !dbg !18
  %157 = add i32 %42, %156, !dbg !21
  %158 = or disjoint i32 %153, 768, !dbg !14
  %159 = or disjoint i32 %13, %158, !dbg !15
  %160 = shl i32 %159, 6, !dbg !18
  %161 = add i32 %42, %160, !dbg !21
  %162 = or disjoint i32 %153, 640, !dbg !14
  %163 = or disjoint i32 %13, %162, !dbg !15
  %164 = shl i32 %163, 6, !dbg !18
  %165 = add i32 %42, %164, !dbg !21
  %166 = or disjoint i32 %153, 512, !dbg !14
  %167 = or disjoint i32 %13, %166, !dbg !15
  %168 = shl i32 %167, 6, !dbg !18
  %169 = add i32 %42, %168, !dbg !21
  %170 = or disjoint i32 %153, 384, !dbg !14
  %171 = or disjoint i32 %13, %170, !dbg !15
  %172 = shl i32 %171, 6, !dbg !18
  %173 = add i32 %42, %172, !dbg !21
  %174 = or disjoint i32 %153, 256, !dbg !14
  %175 = or disjoint i32 %13, %174, !dbg !15
  %176 = shl i32 %175, 6, !dbg !18
  %177 = add i32 %42, %176, !dbg !21
  %178 = or disjoint i32 %153, 128, !dbg !14
  %179 = or disjoint i32 %13, %178, !dbg !15
  %180 = shl i32 %179, 6, !dbg !18
  %181 = add i32 %42, %180, !dbg !21
  %182 = or disjoint i32 %13, %153, !dbg !15
  %183 = shl i32 %182, 6, !dbg !18
  %184 = add i32 %42, %183, !dbg !21
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !41
  %186 = insertelement <8 x i32> poison, i32 %80, i64 0, !dbg !42
  %187 = bitcast <8 x i32> %186 to <8 x float>, !dbg !42
  %188 = shufflevector <8 x float> %187, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !42
  %189 = fsub <8 x float> %136, %188, !dbg !42
  %190 = insertelement <8 x float> poison, float %185, i64 0, !dbg !43
  %191 = shufflevector <8 x float> %190, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !43
  %192 = fmul <8 x float> %189, %191, !dbg !43
  %193 = insertelement <8 x i32> poison, i32 %91, i64 0, !dbg !44
  %194 = bitcast <8 x i32> %193 to <8 x float>, !dbg !44
  %195 = shufflevector <8 x float> %194, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !44
  %196 = fmul <8 x float> %192, %195, !dbg !44
  %197 = insertelement <8 x i32> poison, i32 %96, i64 0, !dbg !45
  %198 = bitcast <8 x i32> %197 to <8 x float>, !dbg !45
  %199 = shufflevector <8 x float> %198, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !45
  %200 = fadd <8 x float> %196, %199, !dbg !45
  %201 = fcmp olt <8 x float> %200, zeroinitializer, !dbg !46
  %202 = extractelement <8 x i1> %201, i64 7, !dbg !50
  %203 = extractelement <8 x float> %200, i64 7, !dbg !50
  %204 = select i1 %202, float 0.000000e+00, float %203, !dbg !50
  %205 = extractelement <8 x i1> %201, i64 6, !dbg !50
  %206 = extractelement <8 x float> %200, i64 6, !dbg !50
  %207 = select i1 %205, float 0.000000e+00, float %206, !dbg !50
  %208 = extractelement <8 x i1> %201, i64 5, !dbg !50
  %209 = extractelement <8 x float> %200, i64 5, !dbg !50
  %210 = select i1 %208, float 0.000000e+00, float %209, !dbg !50
  %211 = extractelement <8 x i1> %201, i64 4, !dbg !50
  %212 = extractelement <8 x float> %200, i64 4, !dbg !50
  %213 = select i1 %211, float 0.000000e+00, float %212, !dbg !50
  %214 = extractelement <8 x i1> %201, i64 3, !dbg !50
  %215 = extractelement <8 x float> %200, i64 3, !dbg !50
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !50
  %217 = extractelement <8 x i1> %201, i64 2, !dbg !50
  %218 = extractelement <8 x float> %200, i64 2, !dbg !50
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !50
  %220 = extractelement <8 x i1> %201, i64 1, !dbg !50
  %221 = extractelement <8 x float> %200, i64 1, !dbg !50
  %222 = select i1 %220, float 0.000000e+00, float %221, !dbg !50
  %223 = extractelement <8 x i1> %201, i64 0, !dbg !50
  %224 = extractelement <8 x float> %200, i64 0, !dbg !50
  %225 = select i1 %223, float 0.000000e+00, float %224, !dbg !50
  %226 = fadd float %204, %152, !dbg !51
  %227 = fadd float %207, %150, !dbg !51
  %228 = fadd float %210, %148, !dbg !51
  %229 = fadd float %213, %146, !dbg !51
  %230 = fadd float %216, %144, !dbg !51
  %231 = fadd float %219, %142, !dbg !51
  %232 = fadd float %222, %140, !dbg !51
  %233 = fadd float %225, %138, !dbg !51
  %234 = add i32 %99, %23, !dbg !52
  %235 = add i32 %99, %27, !dbg !52
  %236 = sext i32 %234 to i64, !dbg !53
  %237 = getelementptr float, ptr addrspace(1) %6, i64 %236, !dbg !53
  %238 = sext i32 %235 to i64, !dbg !53
  %239 = getelementptr float, ptr addrspace(1) %6, i64 %238, !dbg !53
  %240 = bitcast float %204 to i32, !dbg !54
  %241 = bitcast float %207 to i32, !dbg !54
  %242 = bitcast float %210 to i32, !dbg !54
  %243 = bitcast float %213 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %240, i32 %241, i32 %242, i32 %243, ptr addrspace(1) %237, i1 %11) #4, !dbg !54
  %244 = bitcast float %216 to i32, !dbg !54
  %245 = bitcast float %219 to i32, !dbg !54
  %246 = bitcast float %222 to i32, !dbg !54
  %247 = bitcast float %225 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %244, i32 %245, i32 %246, i32 %247, ptr addrspace(1) %239, i1 %11) #4, !dbg !54
  %248 = sext i32 %184 to i64, !dbg !55
  %249 = getelementptr float, ptr addrspace(1) %7, i64 %248, !dbg !55
  %250 = sext i32 %181 to i64, !dbg !55
  %251 = getelementptr float, ptr addrspace(1) %7, i64 %250, !dbg !55
  %252 = sext i32 %177 to i64, !dbg !55
  %253 = getelementptr float, ptr addrspace(1) %7, i64 %252, !dbg !55
  %254 = sext i32 %173 to i64, !dbg !55
  %255 = getelementptr float, ptr addrspace(1) %7, i64 %254, !dbg !55
  %256 = sext i32 %169 to i64, !dbg !55
  %257 = getelementptr float, ptr addrspace(1) %7, i64 %256, !dbg !55
  %258 = sext i32 %165 to i64, !dbg !55
  %259 = getelementptr float, ptr addrspace(1) %7, i64 %258, !dbg !55
  %260 = sext i32 %161 to i64, !dbg !55
  %261 = getelementptr float, ptr addrspace(1) %7, i64 %260, !dbg !55
  %262 = sext i32 %157 to i64, !dbg !55
  %263 = getelementptr float, ptr addrspace(1) %7, i64 %262, !dbg !55
  %264 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !56
  %265 = bitcast float %226 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #4, !dbg !56
  %266 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !56
  %267 = bitcast float %227 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #4, !dbg !56
  %268 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !56
  %269 = bitcast float %228 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #4, !dbg !56
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !56
  %271 = bitcast float %229 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %271, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %153, !dbg !56
  %273 = load i32, ptr addrspace(3) %272, align 4, !dbg !56
  %274 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %178, !dbg !56
  %275 = load i32, ptr addrspace(3) %274, align 4, !dbg !56
  %276 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %174, !dbg !56
  %277 = load i32, ptr addrspace(3) %276, align 4, !dbg !56
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %170, !dbg !56
  %279 = load i32, ptr addrspace(3) %278, align 4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %280 = bitcast float %230 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %280, i1 true) #4, !dbg !56
  %281 = bitcast float %231 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %281, i1 true) #4, !dbg !56
  %282 = bitcast float %232 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %282, i1 true) #4, !dbg !56
  %283 = bitcast float %233 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %283, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %284 = load i32, ptr addrspace(3) %272, align 4, !dbg !56
  %285 = load i32, ptr addrspace(3) %274, align 4, !dbg !56
  %286 = load i32, ptr addrspace(3) %276, align 4, !dbg !56
  %287 = load i32, ptr addrspace(3) %278, align 4, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %273, ptr addrspace(1) %249, i1 %11) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %275, ptr addrspace(1) %251, i1 %11) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %277, ptr addrspace(1) %253, i1 %11) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %279, ptr addrspace(1) %255, i1 %11) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %284, ptr addrspace(1) %257, i1 %11) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %285, ptr addrspace(1) %259, i1 %11) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %286, ptr addrspace(1) %261, i1 %11) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %287, ptr addrspace(1) %263, i1 %11) #4, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuskfcikofcmvilq3mvdiy53dtcbrpeewuicxylld5df5wgwh6ir.py", directory: "inductor_cache/us")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 31, column: 38, scope: !7)
!19 = !DILocation(line: 31, column: 50, scope: !7)
!20 = !DILocation(line: 31, column: 35, scope: !7)
!21 = !DILocation(line: 31, column: 43, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 55, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 31, scope: !7)
!29 = !DILocation(line: 34, column: 36, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 50, scope: !7)
!33 = !DILocation(line: 36, column: 63, scope: !7)
!34 = !DILocation(line: 36, column: 40, scope: !7)
!35 = !DILocation(line: 36, column: 45, scope: !7)
!36 = !DILocation(line: 36, column: 55, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 68, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 40, column: 26, scope: !7)
!41 = !DILocation(line: 42, column: 18, scope: !7)
!42 = !DILocation(line: 37, column: 18, scope: !7)
!43 = !DILocation(line: 45, column: 19, scope: !7)
!44 = !DILocation(line: 46, column: 20, scope: !7)
!45 = !DILocation(line: 47, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 49, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 50, column: 20, scope: !7)
!52 = !DILocation(line: 51, column: 40, scope: !7)
!53 = !DILocation(line: 51, column: 25, scope: !7)
!54 = !DILocation(line: 51, column: 60, scope: !7)
!55 = !DILocation(line: 52, column: 25, scope: !7)
!56 = !DILocation(line: 52, column: 57, scope: !7)
!57 = !DILocation(line: 52, column: 4, scope: !7)
