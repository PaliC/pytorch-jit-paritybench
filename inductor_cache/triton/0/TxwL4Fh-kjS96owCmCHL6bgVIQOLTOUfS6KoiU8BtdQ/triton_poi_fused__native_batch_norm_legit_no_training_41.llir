; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_41(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = shl i32 %11, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %10, %15, !dbg !13
  %18 = icmp slt i32 %16, 1280, !dbg !14
  %19 = icmp slt i32 %17, 1280, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %21 = shl i32 %20, 2, !dbg !16
  %22 = lshr i32 %11, 6, !dbg !17
  %.lobit = and i32 %22, 1, !dbg !17
  %23 = or disjoint i32 %21, %.lobit, !dbg !18
  %24 = or disjoint i32 %23, 2, !dbg !18
  %25 = icmp slt i32 %23, 4, !dbg !19
  %26 = icmp slt i32 %24, 4, !dbg !19
  %.frozen = freeze i32 %16, !dbg !20
  %27 = sdiv i32 %.frozen, 320, !dbg !20
  %28 = mul i32 %27, 320, !dbg !21
  %.decomposed = sub i32 %.frozen, %28, !dbg !21
  %29 = srem i32 %17, 320, !dbg !21
  %30 = mul i32 %23, 320, !dbg !22
  %31 = mul i32 %24, 320, !dbg !22
  %32 = mul i32 %27, 1280, !dbg !23
  %33 = add i32 %32, %.decomposed, !dbg !24
  %34 = add i32 %33, %30, !dbg !25
  %35 = add i32 %33, %31, !dbg !25
  %36 = sext i32 %34 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !26
  %38 = sext i32 %35 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !26
  %40 = and i1 %18, %25, !dbg !27
  %41 = and i1 %26, %18, !dbg !27
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %40) #4, !dbg !28
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !28
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !28
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !28
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !28
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %41) #4, !dbg !28
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !28
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !28
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !28
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !28
  %52 = and i32 %12, 508, !dbg !28
  %53 = lshr i32 %12, 6, !dbg !28
  %54 = and i32 %53, 4, !dbg !28
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %54, !dbg !28
  %56 = getelementptr inbounds float, ptr addrspace(3) %55, i32 %52, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %56, i32 %43, i32 %44, i32 %45, i32 %46, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !28
  %58 = load <2 x float>, ptr addrspace(3) %57, align 8, !dbg !28
  %59 = getelementptr inbounds i8, ptr addrspace(3) %57, i32 1040, !dbg !28
  %60 = load <2 x float>, ptr addrspace(3) %59, align 8, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %56, i32 %48, i32 %49, i32 %50, i32 %51, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %61 = load <2 x float>, ptr addrspace(3) %57, align 8, !dbg !28
  %62 = load <2 x float>, ptr addrspace(3) %59, align 8, !dbg !28
  %63 = sext i32 %29 to i64, !dbg !29
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !29
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 %19) #4, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !31
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 %19) #4, !dbg !32
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !32
  %69 = extractvalue { i32, i32 } %67, 1, !dbg !32
  %70 = bitcast i32 %68 to float, !dbg !32
  %71 = bitcast i32 %69 to float, !dbg !32
  %72 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !33
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %72, i1 %19) #4, !dbg !34
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !35
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 %19) #4, !dbg !36
  %76 = fadd float %70, 0x3EE4F8B580000000, !dbg !37
  %77 = fadd float %71, 0x3EE4F8B580000000, !dbg !37
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %78, 0, !dbg !38
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %79, 0, !dbg !38
  br i1 %.not.i, label %85, label %80, !dbg !38

80:                                               ; preds = %8
  br i1 %.not1.i, label %83, label %81, !dbg !38

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

85:                                               ; preds = %8
  br i1 %.not1.i, label %88, label %86, !dbg !38

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %81, %83, %86, %88
  %.0.i = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !38
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i9 = icmp eq i32 %90, 0, !dbg !38
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i12 = icmp eq i32 %91, 0, !dbg !38
  br i1 %.not.i9, label %97, label %92, !dbg !38

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %95, label %93, !dbg !38

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %100, label %98, !dbg !38

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

__nv_sqrtf.exit13:                                ; preds = %93, %95, %98, %100
  %.0.i11 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !38
  %102 = extractelement <2 x float> %62, i64 1, !dbg !28
  %103 = extractvalue { i32, i32 } %65, 1, !dbg !30
  %104 = bitcast i32 %103 to float, !dbg !30
  %105 = fsub float %102, %104, !dbg !39
  %106 = extractelement <2 x float> %62, i64 0, !dbg !28
  %107 = extractvalue { i32, i32 } %65, 0, !dbg !30
  %108 = bitcast i32 %107 to float, !dbg !30
  %109 = fsub float %106, %108, !dbg !39
  %110 = extractelement <2 x float> %61, i64 1, !dbg !28
  %111 = fsub float %110, %104, !dbg !39
  %112 = extractelement <2 x float> %61, i64 0, !dbg !28
  %113 = fsub float %112, %108, !dbg !39
  %114 = extractelement <2 x float> %60, i64 1, !dbg !28
  %115 = fsub float %114, %104, !dbg !39
  %116 = extractelement <2 x float> %60, i64 0, !dbg !28
  %117 = fsub float %116, %108, !dbg !39
  %118 = extractelement <2 x float> %58, i64 1, !dbg !28
  %119 = fsub float %118, %104, !dbg !39
  %120 = extractelement <2 x float> %58, i64 0, !dbg !28
  %121 = fsub float %120, %108, !dbg !39
  %122 = extractvalue { i32, i32 } %75, 1, !dbg !36
  %123 = bitcast i32 %122 to float, !dbg !36
  %124 = extractvalue { i32, i32 } %75, 0, !dbg !36
  %125 = bitcast i32 %124 to float, !dbg !36
  %126 = extractvalue { i32, i32 } %73, 1, !dbg !34
  %127 = bitcast i32 %126 to float, !dbg !34
  %128 = extractvalue { i32, i32 } %73, 0, !dbg !34
  %129 = bitcast i32 %128 to float, !dbg !34
  %130 = icmp slt i32 %21, 4, !dbg !19
  %131 = and i32 %11, 127, !dbg !12
  %132 = or disjoint i32 %131, %10, !dbg !13
  %133 = or disjoint i32 %132, 128, !dbg !13
  %134 = icmp slt i32 %133, 1280, !dbg !14
  %135 = and i1 %130, %134, !dbg !27
  %136 = icmp slt i32 %132, 1280, !dbg !14
  %137 = and i1 %130, %136, !dbg !27
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #4, !dbg !40
  %140 = fmul float %121, %138, !dbg !41
  %141 = fmul float %119, %139, !dbg !41
  %142 = fmul float %117, %138, !dbg !41
  %143 = fmul float %115, %139, !dbg !41
  %144 = fmul float %113, %138, !dbg !41
  %145 = fmul float %111, %139, !dbg !41
  %146 = fmul float %109, %138, !dbg !41
  %147 = fmul float %105, %139, !dbg !41
  %148 = fmul float %140, %129, !dbg !42
  %149 = fmul float %141, %127, !dbg !42
  %150 = fmul float %142, %129, !dbg !42
  %151 = fmul float %143, %127, !dbg !42
  %152 = fmul float %144, %129, !dbg !42
  %153 = fmul float %145, %127, !dbg !42
  %154 = fmul float %146, %129, !dbg !42
  %155 = fmul float %147, %127, !dbg !42
  %156 = fadd float %148, %125, !dbg !43
  %157 = fadd float %149, %123, !dbg !43
  %158 = fadd float %150, %125, !dbg !43
  %159 = fadd float %151, %123, !dbg !43
  %160 = fadd float %152, %125, !dbg !43
  %161 = fadd float %153, %123, !dbg !43
  %162 = fadd float %154, %125, !dbg !43
  %163 = fadd float %155, %123, !dbg !43
  %164 = add i32 %132, %20, !dbg !44
  %165 = shl i32 %164, 2, !dbg !44
  %166 = add i32 %133, %20, !dbg !44
  %167 = shl i32 %166, 2, !dbg !44
  %168 = sext i32 %165 to i64, !dbg !45
  %169 = getelementptr float, ptr addrspace(1) %5, i64 %168, !dbg !45
  %170 = sext i32 %167 to i64, !dbg !45
  %171 = getelementptr float, ptr addrspace(1) %5, i64 %170, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %172 = shl i32 %11, 3, !dbg !46
  %173 = and i32 %172, 1016, !dbg !46
  %174 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %173, !dbg !46
  %175 = getelementptr float, ptr addrspace(3) %174, i32 %173, !dbg !46
  %176 = bitcast float %156 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %176, i1 true) #4, !dbg !46
  %177 = or disjoint i32 %173, 4, !dbg !46
  %178 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %177, !dbg !46
  %179 = getelementptr float, ptr addrspace(3) %178, i32 %177, !dbg !46
  %180 = bitcast float %157 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #4, !dbg !46
  %181 = or disjoint i32 %173, 1, !dbg !46
  %182 = getelementptr float, ptr addrspace(3) %174, i32 %181, !dbg !46
  %183 = bitcast float %158 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #4, !dbg !46
  %184 = or disjoint i32 %173, 5, !dbg !46
  %185 = lshr i32 %184, 2, !dbg !46
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i32 %185, !dbg !46
  %187 = getelementptr float, ptr addrspace(3) %186, i32 %184, !dbg !46
  %188 = bitcast float %159 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #4, !dbg !46
  %189 = or disjoint i32 %173, 2, !dbg !46
  %190 = getelementptr float, ptr addrspace(3) %174, i32 %189, !dbg !46
  %191 = bitcast float %160 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %191, i1 true) #4, !dbg !46
  %192 = or disjoint i32 %173, 6, !dbg !46
  %193 = lshr i32 %192, 2, !dbg !46
  %194 = getelementptr float, ptr addrspace(3) @global_smem, i32 %193, !dbg !46
  %195 = getelementptr float, ptr addrspace(3) %194, i32 %192, !dbg !46
  %196 = bitcast float %161 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %196, i1 true) #4, !dbg !46
  %197 = or disjoint i32 %173, 3, !dbg !46
  %198 = getelementptr float, ptr addrspace(3) %174, i32 %197, !dbg !46
  %199 = bitcast float %162 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %199, i1 true) #4, !dbg !46
  %200 = or disjoint i32 %173, 7, !dbg !46
  %201 = lshr i32 %200, 2, !dbg !46
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i32 %201, !dbg !46
  %203 = getelementptr float, ptr addrspace(3) %202, i32 %200, !dbg !46
  %204 = bitcast float %163 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %205 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %52, !dbg !46
  %206 = getelementptr inbounds float, ptr addrspace(3) %205, i32 %52, !dbg !46
  %207 = load i32, ptr addrspace(3) %206, align 4, !dbg !46
  %208 = or disjoint i32 %52, 1, !dbg !46
  %209 = getelementptr inbounds float, ptr addrspace(3) %205, i32 %208, !dbg !46
  %210 = load i32, ptr addrspace(3) %209, align 4, !dbg !46
  %211 = or disjoint i32 %52, 2, !dbg !46
  %212 = getelementptr inbounds float, ptr addrspace(3) %205, i32 %211, !dbg !46
  %213 = load i32, ptr addrspace(3) %212, align 4, !dbg !46
  %214 = or disjoint i32 %52, 3, !dbg !46
  %215 = getelementptr inbounds float, ptr addrspace(3) %205, i32 %214, !dbg !46
  %216 = load i32, ptr addrspace(3) %215, align 4, !dbg !46
  %217 = or disjoint i32 %52, 512, !dbg !46
  %218 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %217, !dbg !46
  %219 = getelementptr inbounds float, ptr addrspace(3) %218, i32 %217, !dbg !46
  %220 = load i32, ptr addrspace(3) %219, align 4, !dbg !46
  %221 = or disjoint i32 %52, 513, !dbg !46
  %222 = lshr i32 %221, 2, !dbg !46
  %223 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %222, !dbg !46
  %224 = getelementptr inbounds float, ptr addrspace(3) %223, i32 %221, !dbg !46
  %225 = load i32, ptr addrspace(3) %224, align 4, !dbg !46
  %226 = or disjoint i32 %52, 514, !dbg !46
  %227 = lshr i32 %226, 2, !dbg !46
  %228 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %227, !dbg !46
  %229 = getelementptr inbounds float, ptr addrspace(3) %228, i32 %226, !dbg !46
  %230 = load i32, ptr addrspace(3) %229, align 4, !dbg !46
  %231 = or disjoint i32 %52, 515, !dbg !46
  %232 = lshr i32 %231, 2, !dbg !46
  %233 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %232, !dbg !46
  %234 = getelementptr inbounds float, ptr addrspace(3) %233, i32 %231, !dbg !46
  %235 = load i32, ptr addrspace(3) %234, align 4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %207, i32 %210, i32 %213, i32 %216, ptr addrspace(1) %169, i1 %137) #4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %220, i32 %225, i32 %230, i32 %235, ptr addrspace(1) %171, i1 %135) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chcbp3kkxvlvu47ajauqz6xezvhmt7izsszrq5ycskibafewp6zo.py", directory: "inductor_cache/hc")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_41, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_41, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_41", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_41", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 30, scope: !7)
!45 = !DILocation(line: 48, column: 25, scope: !7)
!46 = !DILocation(line: 48, column: 44, scope: !7)
!47 = !DILocation(line: 48, column: 4, scope: !7)
