; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_73(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !13
  %14 = or disjoint i32 %13, 128, !dbg !13
  %15 = icmp slt i32 %13, 300, !dbg !14
  %16 = icmp slt i32 %14, 300, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %18 = shl i32 %17, 2, !dbg !16
  %19 = icmp slt i32 %18, 4, !dbg !17
  %.frozen = freeze i32 %13, !dbg !18
  %20 = sdiv i32 %.frozen, 75, !dbg !18
  %21 = mul i32 %20, 75, !dbg !19
  %.decomposed = sub i32 %.frozen, %21, !dbg !19
  %.frozen13 = freeze i32 %14, !dbg !18
  %22 = sdiv i32 %.frozen13, 75, !dbg !18
  %23 = mul i32 %22, 75, !dbg !19
  %.decomposed14 = sub i32 %.frozen13, %23, !dbg !19
  %24 = mul i32 %17, 300, !dbg !20
  %25 = add i32 %24, 75, !dbg !20
  %26 = add i32 %24, 150, !dbg !20
  %27 = add i32 %24, 225, !dbg !20
  %28 = mul i32 %20, 300, !dbg !21
  %29 = mul i32 %22, 300, !dbg !21
  %30 = add i32 %28, %.decomposed, !dbg !22
  %31 = add i32 %30, %24, !dbg !23
  %32 = add i32 %30, %25, !dbg !23
  %33 = add i32 %30, %26, !dbg !23
  %34 = add i32 %30, %27, !dbg !23
  %35 = add i32 %29, %.decomposed14, !dbg !22
  %36 = add i32 %35, %24, !dbg !23
  %37 = add i32 %35, %25, !dbg !23
  %38 = add i32 %35, %26, !dbg !23
  %39 = add i32 %35, %27, !dbg !23
  %40 = sext i32 %31 to i64, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !24
  %42 = sext i32 %32 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !24
  %44 = sext i32 %33 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !24
  %46 = sext i32 %34 to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !24
  %48 = sext i32 %36 to i64, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !24
  %50 = sext i32 %37 to i64, !dbg !24
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !24
  %52 = sext i32 %38 to i64, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !24
  %54 = sext i32 %39 to i64, !dbg !24
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !24
  %56 = and i1 %19, %15, !dbg !25
  %57 = and i1 %16, %19, !dbg !25
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %56) #3, !dbg !26
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %56) #3, !dbg !26
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %56) #3, !dbg !26
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %56) #3, !dbg !26
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %57) #3, !dbg !26
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %57) #3, !dbg !26
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %57) #3, !dbg !26
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %57) #3, !dbg !26
  %66 = sext i32 %.decomposed to i64, !dbg !27
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !27
  %68 = sext i32 %.decomposed14 to i64, !dbg !27
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !27
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %15) #3, !dbg !28
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %16) #3, !dbg !28
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !29
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !29
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %15) #3, !dbg !30
  %75 = bitcast i32 %74 to float, !dbg !30
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %16) #3, !dbg !30
  %77 = bitcast i32 %76 to float, !dbg !30
  %78 = getelementptr float, ptr addrspace(1) %3, i64 %66, !dbg !31
  %79 = getelementptr float, ptr addrspace(1) %3, i64 %68, !dbg !31
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %15) #3, !dbg !32
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %16) #3, !dbg !32
  %82 = getelementptr float, ptr addrspace(1) %4, i64 %66, !dbg !33
  %83 = getelementptr float, ptr addrspace(1) %4, i64 %68, !dbg !33
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %15) #3, !dbg !34
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %16) #3, !dbg !34
  %86 = fadd float %75, 0x3EE4F8B580000000, !dbg !35
  %87 = fadd float %77, 0x3EE4F8B580000000, !dbg !35
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %88, 0, !dbg !36
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %89, 0, !dbg !36
  br i1 %.not.i, label %95, label %90, !dbg !36

90:                                               ; preds = %8
  br i1 %.not1.i, label %93, label %91, !dbg !36

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

95:                                               ; preds = %8
  br i1 %.not1.i, label %98, label %96, !dbg !36

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %91, %93, %96, %98
  %.0.i = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !36
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i8 = icmp eq i32 %100, 0, !dbg !36
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i11 = icmp eq i32 %101, 0, !dbg !36
  br i1 %.not.i8, label %107, label %102, !dbg !36

102:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %105, label %103, !dbg !36

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

107:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %110, label %108, !dbg !36

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

__nv_sqrtf.exit12:                                ; preds = %103, %105, %108, %110
  %.0.i10 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !36
  %112 = insertelement <8 x i32> poison, i32 %65, i64 0, !dbg !26
  %113 = insertelement <8 x i32> %112, i32 %64, i64 1, !dbg !26
  %114 = insertelement <8 x i32> %113, i32 %63, i64 2, !dbg !26
  %115 = insertelement <8 x i32> %114, i32 %62, i64 3, !dbg !26
  %116 = insertelement <8 x i32> %115, i32 %61, i64 4, !dbg !26
  %117 = insertelement <8 x i32> %116, i32 %60, i64 5, !dbg !26
  %118 = insertelement <8 x i32> %117, i32 %59, i64 6, !dbg !26
  %119 = insertelement <8 x i32> %118, i32 %58, i64 7, !dbg !26
  %120 = bitcast <8 x i32> %119 to <8 x float>, !dbg !26
  %121 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !28
  %122 = insertelement <2 x i32> %121, i32 %70, i64 1, !dbg !28
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !28
  %124 = shufflevector <2 x float> %123, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !28
  %125 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !34
  %126 = insertelement <2 x i32> %125, i32 %84, i64 1, !dbg !34
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !34
  %128 = shufflevector <2 x float> %127, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !34
  %129 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !32
  %130 = insertelement <2 x i32> %129, i32 %80, i64 1, !dbg !32
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !32
  %132 = shufflevector <2 x float> %131, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !32
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !37
  %135 = fsub <8 x float> %120, %124, !dbg !38
  %136 = insertelement <8 x float> poison, float %134, i64 0, !dbg !39
  %137 = insertelement <8 x float> %136, float %133, i64 1, !dbg !39
  %138 = shufflevector <8 x float> %137, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !39
  %139 = fmul <8 x float> %135, %138, !dbg !39
  %140 = fmul <8 x float> %139, %132, !dbg !40
  %141 = fadd <8 x float> %140, %128, !dbg !41
  %142 = fcmp ole <8 x float> %141, zeroinitializer, !dbg !42
  %143 = select <8 x i1> %142, <8 x float> zeroinitializer, <8 x float> %141, !dbg !42
  %144 = fcmp olt <8 x float> %143, splat (float 6.000000e+00), !dbg !46
  %145 = extractelement <8 x float> %143, i64 7, !dbg !48
  %146 = fcmp uno float %145, 0.000000e+00, !dbg !49
  %147 = extractelement <8 x float> %143, i64 6, !dbg !48
  %148 = fcmp uno float %147, 0.000000e+00, !dbg !49
  %149 = extractelement <8 x float> %143, i64 5, !dbg !48
  %150 = fcmp uno float %149, 0.000000e+00, !dbg !49
  %151 = extractelement <8 x float> %143, i64 4, !dbg !48
  %152 = fcmp uno float %151, 0.000000e+00, !dbg !49
  %153 = extractelement <8 x float> %143, i64 3, !dbg !48
  %154 = fcmp uno float %153, 0.000000e+00, !dbg !49
  %155 = extractelement <8 x float> %143, i64 2, !dbg !48
  %156 = fcmp uno float %155, 0.000000e+00, !dbg !49
  %157 = extractelement <8 x float> %143, i64 1, !dbg !48
  %158 = fcmp uno float %157, 0.000000e+00, !dbg !49
  %159 = extractelement <8 x float> %143, i64 0, !dbg !48
  %160 = fcmp uno float %159, 0.000000e+00, !dbg !49
  %161 = extractelement <8 x i1> %144, i64 7, !dbg !50
  %162 = or i1 %161, %146, !dbg !50
  %163 = extractelement <8 x i1> %144, i64 6, !dbg !50
  %164 = or i1 %163, %148, !dbg !50
  %165 = extractelement <8 x i1> %144, i64 5, !dbg !50
  %166 = or i1 %165, %150, !dbg !50
  %167 = extractelement <8 x i1> %144, i64 4, !dbg !50
  %168 = or i1 %167, %152, !dbg !50
  %169 = extractelement <8 x i1> %144, i64 3, !dbg !50
  %170 = or i1 %169, %154, !dbg !50
  %171 = extractelement <8 x i1> %144, i64 2, !dbg !50
  %172 = or i1 %171, %156, !dbg !50
  %173 = extractelement <8 x i1> %144, i64 1, !dbg !50
  %174 = or i1 %173, %158, !dbg !50
  %175 = extractelement <8 x i1> %144, i64 0, !dbg !50
  %176 = or i1 %175, %160, !dbg !50
  %177 = add i32 %13, %17, !dbg !51
  %178 = shl i32 %177, 2, !dbg !51
  %179 = add i32 %17, %14, !dbg !51
  %180 = shl i32 %179, 2, !dbg !51
  %181 = sext i32 %178 to i64, !dbg !52
  %182 = getelementptr float, ptr addrspace(1) %5, i64 %181, !dbg !52
  %183 = sext i32 %180 to i64, !dbg !52
  %184 = getelementptr float, ptr addrspace(1) %5, i64 %183, !dbg !52
  %185 = bitcast float %145 to i32, !dbg !48
  %186 = select i1 %162, i32 %185, i32 1086324736, !dbg !53
  %187 = bitcast float %147 to i32, !dbg !48
  %188 = select i1 %164, i32 %187, i32 1086324736, !dbg !53
  %189 = bitcast float %149 to i32, !dbg !48
  %190 = select i1 %166, i32 %189, i32 1086324736, !dbg !53
  %191 = bitcast float %151 to i32, !dbg !48
  %192 = select i1 %168, i32 %191, i32 1086324736, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %186, i32 %188, i32 %190, i32 %192, ptr addrspace(1) %182, i1 %56) #3, !dbg !48
  %193 = bitcast float %153 to i32, !dbg !48
  %194 = select i1 %170, i32 %193, i32 1086324736, !dbg !53
  %195 = bitcast float %155 to i32, !dbg !48
  %196 = select i1 %172, i32 %195, i32 1086324736, !dbg !53
  %197 = bitcast float %157 to i32, !dbg !48
  %198 = select i1 %174, i32 %197, i32 1086324736, !dbg !53
  %199 = bitcast float %159 to i32, !dbg !48
  %200 = select i1 %176, i32 %199, i32 1086324736, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %194, i32 %196, i32 %198, i32 %200, ptr addrspace(1) %184, i1 %57) #3, !dbg !48
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp4eii4lrrcyvxbunrdtov4ghtp4jpwkm4vgl4mr73jsiyujrzwg.py", directory: "inductor_cache/p4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_73, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_73, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_73", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_73", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 47, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 43, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 60, scope: !7)
!26 = !DILocation(line: 32, column: 52, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 49, column: 42, scope: !7)
!46 = !DILocation(line: 110, column: 15, scope: !43, inlinedAt: !47)
!47 = !DILocation(line: 51, column: 42, scope: !7)
!48 = !DILocation(line: 52, column: 44, scope: !7)
!49 = !DILocation(line: 112, column: 21, scope: !43, inlinedAt: !47)
!50 = !DILocation(line: 112, column: 16, scope: !43, inlinedAt: !47)
!51 = !DILocation(line: 52, column: 30, scope: !7)
!52 = !DILocation(line: 52, column: 25, scope: !7)
!53 = !DILocation(line: 113, column: 29, scope: !43, inlinedAt: !47)
!54 = !DILocation(line: 52, column: 4, scope: !7)
