; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 510, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = srem i32 %10, 2176, !dbg !14
  %12 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !15
  %13 = shufflevector <2 x i32> %12, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !15
  %14 = sdiv <2 x i32> %13, <i32 2176, i32 128>, !dbg !15
  %15 = srem <2 x i32> %14, <i32 8, i32 17>, !dbg !16
  %16 = extractelement <2 x i32> %15, i64 1, !dbg !17
  %17 = icmp sgt i32 %16, 0, !dbg !17
  %18 = extractelement <2 x i32> %15, i64 0, !dbg !18
  %19 = icmp sgt i32 %18, -1, !dbg !18
  %20 = and i1 %19, %17, !dbg !18
  %21 = extractelement <2 x i32> %14, i64 0, !dbg !19
  %22 = shl i32 %21, 12, !dbg !19
  %23 = add i32 %22, %11, !dbg !20
  %24 = add i32 %23, -128, !dbg !21
  %25 = sext i32 %24 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !22
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %20, i32 -8388608, i1 %20, i32 -8388608, i1 %20) #1, !dbg !23
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !23
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !23
  %30 = extractelement <2 x i32> %15, i64 1, !dbg !24
  %31 = icmp ult i32 %30, 16, !dbg !24
  %32 = and i1 %19, %31, !dbg !24
  %33 = sext i32 %23 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !25
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %32, i32 -8388608, i1 %32, i32 -8388608, i1 %32) #1, !dbg !26
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !26
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !26
  %38 = add i32 %23, 1920, !dbg !27
  %39 = sext i32 %38 to i64, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !28
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %40, i1 %20, i32 -8388608, i1 %20, i32 -8388608, i1 %20) #1, !dbg !29
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !29
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !29
  %44 = add i32 %23, 2048, !dbg !30
  %45 = sext i32 %44 to i64, !dbg !31
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !31
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %32, i32 -8388608, i1 %32, i32 -8388608, i1 %32) #1, !dbg !32
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !32
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !32
  %50 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !23
  %51 = insertelement <2 x i32> %50, i32 %29, i64 1, !dbg !23
  %52 = bitcast <2 x i32> %51 to <2 x float>, !dbg !23
  %53 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !26
  %54 = insertelement <2 x i32> %53, i32 %37, i64 1, !dbg !26
  %55 = bitcast <2 x i32> %54 to <2 x float>, !dbg !26
  %56 = fcmp ogt <2 x float> %55, %52, !dbg !33
  %57 = fcmp uno <2 x float> %55, zeroinitializer, !dbg !37
  %58 = or <2 x i1> %56, %57, !dbg !38
  %.v = select <2 x i1> %58, <2 x i32> %54, <2 x i32> %51, !dbg !39
  %59 = bitcast <2 x i32> %.v to <2 x float>, !dbg !39
  %60 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !29
  %61 = insertelement <2 x i32> %60, i32 %43, i64 1, !dbg !29
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !29
  %63 = fcmp olt <2 x float> %59, %62, !dbg !40
  %64 = fcmp uno <2 x float> %62, zeroinitializer, !dbg !42
  %65 = or <2 x i1> %64, %63, !dbg !43
  %.v1 = select <2 x i1> %65, <2 x i32> %61, <2 x i32> %.v, !dbg !44
  %66 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !44
  %67 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !32
  %68 = insertelement <2 x i32> %67, i32 %49, i64 1, !dbg !32
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !32
  %70 = fcmp olt <2 x float> %66, %69, !dbg !45
  %71 = bitcast i32 %48 to float, !dbg !47
  %72 = fcmp uno float %71, 0.000000e+00, !dbg !47
  %73 = bitcast i32 %49 to float, !dbg !47
  %74 = fcmp uno float %73, 0.000000e+00, !dbg !47
  %75 = extractelement <2 x i1> %70, i64 0, !dbg !48
  %76 = or i1 %72, %75, !dbg !48
  %77 = extractelement <2 x i1> %70, i64 1, !dbg !48
  %78 = or i1 %74, %77, !dbg !48
  %79 = zext <2 x i1> %56 to <2 x i8>, !dbg !49
  %80 = select <2 x i1> %63, <2 x i8> splat (i8 2), <2 x i8> %79, !dbg !50
  %81 = select <2 x i1> %70, <2 x i8> splat (i8 3), <2 x i8> %80, !dbg !51
  %82 = sext i32 %10 to i64, !dbg !52
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !52
  %84 = extractelement <2 x i32> %.v1, i64 0, !dbg !53
  %85 = select i1 %76, i32 %48, i32 %84, !dbg !54
  %86 = extractelement <2 x i32> %.v1, i64 1, !dbg !53
  %87 = select i1 %78, i32 %49, i32 %86, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %85, i32 %87, ptr addrspace(1) %83, i1 true) #1, !dbg !53
  %88 = getelementptr i8, ptr addrspace(1) %2, i64 %82, !dbg !55
  %89 = bitcast <2 x i8> %81 to i16, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %89, ptr addrspace(1) %88, i1 true) #1, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu5iuv7p5tfz5uxkdijv7wfbxcqmfvqoi5qf6bt6unrdc6kwz23t.py", directory: "inductor_cache/u5")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_15, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_15", linkageName: "triton_poi_fused_max_pool2d_with_indices_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 29, scope: !7)
!17 = !DILocation(line: 36, column: 19, scope: !7)
!18 = !DILocation(line: 39, column: 19, scope: !7)
!19 = !DILocation(line: 40, column: 50, scope: !7)
!20 = !DILocation(line: 40, column: 40, scope: !7)
!21 = !DILocation(line: 40, column: 45, scope: !7)
!22 = !DILocation(line: 40, column: 31, scope: !7)
!23 = !DILocation(line: 40, column: 55, scope: !7)
!24 = !DILocation(line: 45, column: 19, scope: !7)
!25 = !DILocation(line: 46, column: 31, scope: !7)
!26 = !DILocation(line: 46, column: 46, scope: !7)
!27 = !DILocation(line: 53, column: 43, scope: !7)
!28 = !DILocation(line: 53, column: 31, scope: !7)
!29 = !DILocation(line: 53, column: 53, scope: !7)
!30 = !DILocation(line: 56, column: 43, scope: !7)
!31 = !DILocation(line: 56, column: 31, scope: !7)
!32 = !DILocation(line: 56, column: 53, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 47, column: 42, scope: !7)
!37 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !41)
!41 = !DILocation(line: 54, column: 42, scope: !7)
!42 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !41)
!43 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !41)
!44 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !41)
!45 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !46)
!46 = !DILocation(line: 57, column: 42, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !46)
!49 = !DILocation(line: 61, column: 35, scope: !7)
!50 = !DILocation(line: 64, column: 35, scope: !7)
!51 = !DILocation(line: 67, column: 35, scope: !7)
!52 = !DILocation(line: 68, column: 25, scope: !7)
!53 = !DILocation(line: 68, column: 37, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !46)
!55 = !DILocation(line: 69, column: 25, scope: !7)
!56 = !DILocation(line: 69, column: 37, scope: !7)
!57 = !DILocation(line: 69, column: 4, scope: !7)
