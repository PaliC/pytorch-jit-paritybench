; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 1020, !dbg !12
  %12 = and i32 %9, 255, !dbg !12
  %13 = or disjoint i32 %12, 256, !dbg !12
  %14 = or disjoint i32 %12, 512, !dbg !12
  %15 = or disjoint i32 %12, 768, !dbg !12
  %16 = or disjoint i32 %8, %11, !dbg !13
  %17 = or disjoint i32 %8, %12, !dbg !13
  %18 = or disjoint i32 %8, %13, !dbg !13
  %19 = or disjoint i32 %8, %14, !dbg !13
  %20 = or disjoint i32 %8, %15, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %22 = shl i32 %21, 2, !dbg !15
  %23 = or disjoint i32 %22, 1, !dbg !16
  %24 = or disjoint i32 %22, 2, !dbg !16
  %25 = or disjoint i32 %22, 3, !dbg !16
  %26 = icmp slt i32 %22, 4, !dbg !17
  %27 = icmp slt i32 %23, 4, !dbg !17
  %28 = icmp slt i32 %24, 4, !dbg !17
  %29 = icmp slt i32 %25, 4, !dbg !17
  %.frozen = freeze i32 %16, !dbg !18
  %30 = sdiv i32 %.frozen, 256, !dbg !18
  %31 = mul i32 %30, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %31, !dbg !19
  %32 = shl i32 %23, 8, !dbg !20
  %33 = shl i32 %24, 8, !dbg !20
  %34 = shl i32 %25, 8, !dbg !20
  %35 = shl i32 %30, 10, !dbg !21
  %36 = add i32 %35, %.decomposed, !dbg !22
  %37 = add i32 %30, %21, !dbg !23
  %38 = shl i32 %37, 10, !dbg !23
  %39 = add i32 %38, %.decomposed, !dbg !23
  %40 = add i32 %36, %32, !dbg !23
  %41 = add i32 %36, %33, !dbg !23
  %42 = add i32 %36, %34, !dbg !23
  %43 = sext i32 %39 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !24
  %45 = sext i32 %40 to i64, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !24
  %47 = sext i32 %41 to i64, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !24
  %49 = sext i32 %42 to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !24
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %26) #2, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !25
  %56 = bitcast i32 %52 to float, !dbg !25
  %57 = bitcast i32 %53 to float, !dbg !25
  %58 = bitcast i32 %54 to float, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %27) #2, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !25
  %65 = bitcast i32 %61 to float, !dbg !25
  %66 = bitcast i32 %62 to float, !dbg !25
  %67 = bitcast i32 %63 to float, !dbg !25
  %68 = bitcast i32 %64 to float, !dbg !25
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %28) #2, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !25
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !25
  %74 = bitcast i32 %70 to float, !dbg !25
  %75 = bitcast i32 %71 to float, !dbg !25
  %76 = bitcast i32 %72 to float, !dbg !25
  %77 = bitcast i32 %73 to float, !dbg !25
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %29) #2, !dbg !25
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !25
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !25
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !25
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !25
  %83 = bitcast i32 %79 to float, !dbg !25
  %84 = bitcast i32 %80 to float, !dbg !25
  %85 = bitcast i32 %81 to float, !dbg !25
  %86 = bitcast i32 %82 to float, !dbg !25
  %87 = sext i32 %.decomposed to i64, !dbg !26
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !26
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %88, i1 true) #2, !dbg !27
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !27
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !27
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !27
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !27
  %94 = bitcast i32 %90 to float, !dbg !27
  %95 = bitcast i32 %91 to float, !dbg !27
  %96 = bitcast i32 %92 to float, !dbg !27
  %97 = bitcast i32 %93 to float, !dbg !27
  %98 = fadd float %56, %94, !dbg !28
  %99 = fadd float %57, %95, !dbg !28
  %100 = fadd float %58, %96, !dbg !28
  %101 = fadd float %59, %97, !dbg !28
  %102 = fadd float %65, %94, !dbg !28
  %103 = fadd float %66, %95, !dbg !28
  %104 = fadd float %67, %96, !dbg !28
  %105 = fadd float %68, %97, !dbg !28
  %106 = fadd float %74, %94, !dbg !28
  %107 = fadd float %75, %95, !dbg !28
  %108 = fadd float %76, %96, !dbg !28
  %109 = fadd float %77, %97, !dbg !28
  %110 = fadd float %83, %94, !dbg !28
  %111 = fadd float %84, %95, !dbg !28
  %112 = fadd float %85, %96, !dbg !28
  %113 = fadd float %86, %97, !dbg !28
  %114 = add i32 %17, %21, !dbg !29
  %115 = shl i32 %114, 2, !dbg !29
  %116 = add i32 %18, %21, !dbg !29
  %117 = shl i32 %116, 2, !dbg !29
  %118 = add i32 %19, %21, !dbg !29
  %119 = shl i32 %118, 2, !dbg !29
  %120 = add i32 %20, %21, !dbg !29
  %121 = shl i32 %120, 2, !dbg !29
  %122 = sext i32 %115 to i64, !dbg !30
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %122, !dbg !30
  %124 = sext i32 %117 to i64, !dbg !30
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %124, !dbg !30
  %126 = sext i32 %119 to i64, !dbg !30
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !30
  %128 = sext i32 %121 to i64, !dbg !30
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !30
  %130 = shl i32 %9, 4, !dbg !31
  %131 = and i32 %130, 4080, !dbg !31
  %132 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %131, !dbg !31
  %133 = getelementptr float, ptr addrspace(3) %132, i32 %131, !dbg !31
  %134 = bitcast float %98 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #2, !dbg !31
  %135 = or disjoint i32 %131, 4, !dbg !31
  %136 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %135, !dbg !31
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %135, !dbg !31
  %138 = bitcast float %99 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #2, !dbg !31
  %139 = or disjoint i32 %131, 8, !dbg !31
  %140 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %139, !dbg !31
  %141 = getelementptr float, ptr addrspace(3) %140, i32 %139, !dbg !31
  %142 = bitcast float %100 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !31
  %143 = or disjoint i32 %131, 12, !dbg !31
  %144 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %143, !dbg !31
  %145 = getelementptr float, ptr addrspace(3) %144, i32 %143, !dbg !31
  %146 = bitcast float %101 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #2, !dbg !31
  %147 = or disjoint i32 %131, 1, !dbg !31
  %148 = getelementptr float, ptr addrspace(3) %132, i32 %147, !dbg !31
  %149 = bitcast float %102 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #2, !dbg !31
  %150 = or disjoint i32 %131, 5, !dbg !31
  %151 = lshr i32 %150, 2, !dbg !31
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !31
  %153 = getelementptr float, ptr addrspace(3) %152, i32 %150, !dbg !31
  %154 = bitcast float %103 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #2, !dbg !31
  %155 = or disjoint i32 %131, 9, !dbg !31
  %156 = lshr i32 %155, 2, !dbg !31
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !31
  %158 = getelementptr float, ptr addrspace(3) %157, i32 %155, !dbg !31
  %159 = bitcast float %104 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #2, !dbg !31
  %160 = or disjoint i32 %131, 13, !dbg !31
  %161 = lshr i32 %160, 2, !dbg !31
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !31
  %163 = getelementptr float, ptr addrspace(3) %162, i32 %160, !dbg !31
  %164 = bitcast float %105 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #2, !dbg !31
  %165 = or disjoint i32 %131, 2, !dbg !31
  %166 = getelementptr float, ptr addrspace(3) %132, i32 %165, !dbg !31
  %167 = bitcast float %106 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %167, i1 true) #2, !dbg !31
  %168 = or disjoint i32 %131, 6, !dbg !31
  %169 = lshr i32 %168, 2, !dbg !31
  %170 = getelementptr float, ptr addrspace(3) @global_smem, i32 %169, !dbg !31
  %171 = getelementptr float, ptr addrspace(3) %170, i32 %168, !dbg !31
  %172 = bitcast float %107 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %171, <1 x i32> %172, i1 true) #2, !dbg !31
  %173 = or disjoint i32 %131, 10, !dbg !31
  %174 = lshr i32 %173, 2, !dbg !31
  %175 = getelementptr float, ptr addrspace(3) @global_smem, i32 %174, !dbg !31
  %176 = getelementptr float, ptr addrspace(3) %175, i32 %173, !dbg !31
  %177 = bitcast float %108 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #2, !dbg !31
  %178 = or disjoint i32 %131, 14, !dbg !31
  %179 = lshr i32 %178, 2, !dbg !31
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %179, !dbg !31
  %181 = getelementptr float, ptr addrspace(3) %180, i32 %178, !dbg !31
  %182 = bitcast float %109 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 true) #2, !dbg !31
  %183 = or disjoint i32 %131, 3, !dbg !31
  %184 = getelementptr float, ptr addrspace(3) %132, i32 %183, !dbg !31
  %185 = bitcast float %110 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #2, !dbg !31
  %186 = or disjoint i32 %131, 7, !dbg !31
  %187 = lshr i32 %186, 2, !dbg !31
  %188 = getelementptr float, ptr addrspace(3) @global_smem, i32 %187, !dbg !31
  %189 = getelementptr float, ptr addrspace(3) %188, i32 %186, !dbg !31
  %190 = bitcast float %111 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %190, i1 true) #2, !dbg !31
  %191 = or disjoint i32 %131, 11, !dbg !31
  %192 = lshr i32 %191, 2, !dbg !31
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i32 %192, !dbg !31
  %194 = getelementptr float, ptr addrspace(3) %193, i32 %191, !dbg !31
  %195 = bitcast float %112 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #2, !dbg !31
  %196 = or disjoint i32 %131, 15, !dbg !31
  %197 = lshr i32 %196, 2, !dbg !31
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i32 %197, !dbg !31
  %199 = getelementptr float, ptr addrspace(3) %198, i32 %196, !dbg !31
  %200 = bitcast float %113 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %200, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %201 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %202 = getelementptr inbounds float, ptr addrspace(3) %201, i32 %11, !dbg !31
  %203 = load i32, ptr addrspace(3) %202, align 4, !dbg !31
  %204 = or disjoint i32 %11, 1, !dbg !31
  %205 = getelementptr inbounds float, ptr addrspace(3) %201, i32 %204, !dbg !31
  %206 = load i32, ptr addrspace(3) %205, align 4, !dbg !31
  %207 = or disjoint i32 %11, 2, !dbg !31
  %208 = getelementptr inbounds float, ptr addrspace(3) %201, i32 %207, !dbg !31
  %209 = load i32, ptr addrspace(3) %208, align 4, !dbg !31
  %210 = or disjoint i32 %11, 3, !dbg !31
  %211 = getelementptr inbounds float, ptr addrspace(3) %201, i32 %210, !dbg !31
  %212 = load i32, ptr addrspace(3) %211, align 4, !dbg !31
  %213 = or disjoint i32 %11, 1024, !dbg !31
  %214 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %213, !dbg !31
  %215 = getelementptr inbounds float, ptr addrspace(3) %214, i32 %213, !dbg !31
  %216 = load i32, ptr addrspace(3) %215, align 4, !dbg !31
  %217 = or disjoint i32 %11, 1025, !dbg !31
  %218 = lshr i32 %217, 2, !dbg !31
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %218, !dbg !31
  %220 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %217, !dbg !31
  %221 = load i32, ptr addrspace(3) %220, align 4, !dbg !31
  %222 = or disjoint i32 %11, 1026, !dbg !31
  %223 = lshr i32 %222, 2, !dbg !31
  %224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %223, !dbg !31
  %225 = getelementptr inbounds float, ptr addrspace(3) %224, i32 %222, !dbg !31
  %226 = load i32, ptr addrspace(3) %225, align 4, !dbg !31
  %227 = or disjoint i32 %11, 1027, !dbg !31
  %228 = lshr i32 %227, 2, !dbg !31
  %229 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %228, !dbg !31
  %230 = getelementptr inbounds float, ptr addrspace(3) %229, i32 %227, !dbg !31
  %231 = load i32, ptr addrspace(3) %230, align 4, !dbg !31
  %232 = or disjoint i32 %11, 2048, !dbg !31
  %233 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %232, !dbg !31
  %234 = getelementptr inbounds float, ptr addrspace(3) %233, i32 %232, !dbg !31
  %235 = load i32, ptr addrspace(3) %234, align 4, !dbg !31
  %236 = or disjoint i32 %11, 2049, !dbg !31
  %237 = lshr i32 %236, 2, !dbg !31
  %238 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %237, !dbg !31
  %239 = getelementptr inbounds float, ptr addrspace(3) %238, i32 %236, !dbg !31
  %240 = load i32, ptr addrspace(3) %239, align 4, !dbg !31
  %241 = or disjoint i32 %11, 2050, !dbg !31
  %242 = lshr i32 %241, 2, !dbg !31
  %243 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %242, !dbg !31
  %244 = getelementptr inbounds float, ptr addrspace(3) %243, i32 %241, !dbg !31
  %245 = load i32, ptr addrspace(3) %244, align 4, !dbg !31
  %246 = or disjoint i32 %11, 2051, !dbg !31
  %247 = lshr i32 %246, 2, !dbg !31
  %248 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %247, !dbg !31
  %249 = getelementptr inbounds float, ptr addrspace(3) %248, i32 %246, !dbg !31
  %250 = load i32, ptr addrspace(3) %249, align 4, !dbg !31
  %251 = or disjoint i32 %11, 3072, !dbg !31
  %252 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %251, !dbg !31
  %253 = getelementptr inbounds float, ptr addrspace(3) %252, i32 %251, !dbg !31
  %254 = load i32, ptr addrspace(3) %253, align 4, !dbg !31
  %255 = or disjoint i32 %11, 3073, !dbg !31
  %256 = lshr i32 %255, 2, !dbg !31
  %257 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %256, !dbg !31
  %258 = getelementptr inbounds float, ptr addrspace(3) %257, i32 %255, !dbg !31
  %259 = load i32, ptr addrspace(3) %258, align 4, !dbg !31
  %260 = or disjoint i32 %11, 3074, !dbg !31
  %261 = lshr i32 %260, 2, !dbg !31
  %262 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %261, !dbg !31
  %263 = getelementptr inbounds float, ptr addrspace(3) %262, i32 %260, !dbg !31
  %264 = load i32, ptr addrspace(3) %263, align 4, !dbg !31
  %265 = or disjoint i32 %11, 3075, !dbg !31
  %266 = lshr i32 %265, 2, !dbg !31
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %266, !dbg !31
  %268 = getelementptr inbounds float, ptr addrspace(3) %267, i32 %265, !dbg !31
  %269 = load i32, ptr addrspace(3) %268, align 4, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %203, i32 %206, i32 %209, i32 %212, ptr addrspace(1) %123, i1 %26) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %216, i32 %221, i32 %226, i32 %231, ptr addrspace(1) %125, i1 %26) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %235, i32 %240, i32 %245, i32 %250, ptr addrspace(1) %127, i1 %26) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %254, i32 %259, i32 %264, i32 %269, ptr addrspace(1) %129, i1 %26) #2, !dbg !31
  %270 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !32
  %271 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !32
  %272 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !32
  %273 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !32
  %274 = bitcast float %98 to i32, !dbg !33
  %275 = bitcast float %99 to i32, !dbg !33
  %276 = bitcast float %100 to i32, !dbg !33
  %277 = bitcast float %101 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %274, i32 %275, i32 %276, i32 %277, ptr addrspace(1) %270, i1 %26) #2, !dbg !33
  %278 = bitcast float %102 to i32, !dbg !33
  %279 = bitcast float %103 to i32, !dbg !33
  %280 = bitcast float %104 to i32, !dbg !33
  %281 = bitcast float %105 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %278, i32 %279, i32 %280, i32 %281, ptr addrspace(1) %271, i1 %27) #2, !dbg !33
  %282 = bitcast float %106 to i32, !dbg !33
  %283 = bitcast float %107 to i32, !dbg !33
  %284 = bitcast float %108 to i32, !dbg !33
  %285 = bitcast float %109 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %282, i32 %283, i32 %284, i32 %285, ptr addrspace(1) %272, i1 %28) #2, !dbg !33
  %286 = bitcast float %110 to i32, !dbg !33
  %287 = bitcast float %111 to i32, !dbg !33
  %288 = bitcast float %112 to i32, !dbg !33
  %289 = bitcast float %113 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %286, i32 %287, i32 %288, i32 %289, ptr addrspace(1) %273, i1 %29) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqx3zdp5pw27wct37ty4ywplyqponchc7nms6f554f6aut5qeaeu.py", directory: "inductor_cache/qx")
!4 = !{ptr @triton_poi_fused_convolution_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_24, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_24", linkageName: "triton_poi_fused_convolution_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 49, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 25, scope: !7)
!31 = !DILocation(line: 35, column: 43, scope: !7)
!32 = !DILocation(line: 36, column: 25, scope: !7)
!33 = !DILocation(line: 36, column: 55, scope: !7)
!34 = !DILocation(line: 36, column: 4, scope: !7)
