; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mean_34(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = shl i32 %7, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = and i32 %7, 15, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = lshr i32 %7, 5, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %15 = sdiv i32 %.frozen, 4096, !dbg !15
  %16 = mul i32 %15, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = shl i32 %7, 10, !dbg !17
  %18 = and i32 %17, 520192, !dbg !17
  %19 = shl i32 %15, 20, !dbg !18
  %20 = add i32 %19, %.decomposed, !dbg !19
  %21 = add i32 %20, %18, !dbg !20
  %22 = add i32 %20, 524288, !dbg !19
  %23 = add nuw i32 %22, %18, !dbg !20
  %24 = sext i32 %21 to i64, !dbg !21
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !21
  %26 = sext i32 %23 to i64, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !21
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !22
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !22
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !22
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !22
  %33 = bitcast i32 %29 to float, !dbg !22
  %34 = bitcast i32 %30 to float, !dbg !22
  %35 = bitcast i32 %31 to float, !dbg !22
  %36 = bitcast i32 %32 to float, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %42 = bitcast i32 %38 to float, !dbg !22
  %43 = bitcast i32 %39 to float, !dbg !22
  %44 = bitcast i32 %40 to float, !dbg !22
  %45 = bitcast i32 %41 to float, !dbg !22
  %46 = fadd float %33, 0.000000e+00, !dbg !23
  %47 = fadd float %34, 0.000000e+00, !dbg !23
  %48 = fadd float %35, 0.000000e+00, !dbg !23
  %49 = fadd float %36, 0.000000e+00, !dbg !23
  %50 = fadd float %42, 0.000000e+00, !dbg !23
  %51 = fadd float %43, 0.000000e+00, !dbg !23
  %52 = fadd float %44, 0.000000e+00, !dbg !23
  %53 = fadd float %45, 0.000000e+00, !dbg !23
  %54 = fadd float %46, %50, !dbg !24
  %55 = fadd float %47, %51, !dbg !24
  %56 = fadd float %48, %52, !dbg !24
  %57 = fadd float %49, %53, !dbg !24
  %58 = bitcast float %54 to i32, !dbg !29
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 16, i32 31), !dbg !29
  %60 = bitcast i32 %59 to float, !dbg !29
  %61 = fadd float %54, %60, !dbg !24
  %62 = bitcast float %61 to i32, !dbg !29
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 8, i32 31), !dbg !29
  %64 = bitcast i32 %63 to float, !dbg !29
  %65 = fadd float %61, %64, !dbg !24
  %66 = bitcast float %65 to i32, !dbg !29
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 4, i32 31), !dbg !29
  %68 = bitcast i32 %67 to float, !dbg !29
  %69 = fadd float %65, %68, !dbg !24
  %70 = bitcast float %55 to i32, !dbg !29
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 16, i32 31), !dbg !29
  %72 = bitcast i32 %71 to float, !dbg !29
  %73 = fadd float %55, %72, !dbg !24
  %74 = bitcast float %73 to i32, !dbg !29
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 8, i32 31), !dbg !29
  %76 = bitcast i32 %75 to float, !dbg !29
  %77 = fadd float %73, %76, !dbg !24
  %78 = bitcast float %77 to i32, !dbg !29
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 4, i32 31), !dbg !29
  %80 = bitcast i32 %79 to float, !dbg !29
  %81 = fadd float %77, %80, !dbg !24
  %82 = bitcast float %56 to i32, !dbg !29
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 16, i32 31), !dbg !29
  %84 = bitcast i32 %83 to float, !dbg !29
  %85 = fadd float %56, %84, !dbg !24
  %86 = bitcast float %85 to i32, !dbg !29
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 8, i32 31), !dbg !29
  %88 = bitcast i32 %87 to float, !dbg !29
  %89 = fadd float %85, %88, !dbg !24
  %90 = bitcast float %89 to i32, !dbg !29
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 4, i32 31), !dbg !29
  %92 = bitcast i32 %91 to float, !dbg !29
  %93 = fadd float %89, %92, !dbg !24
  %94 = bitcast float %57 to i32, !dbg !29
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 16, i32 31), !dbg !29
  %96 = bitcast i32 %95 to float, !dbg !29
  %97 = fadd float %57, %96, !dbg !24
  %98 = bitcast float %97 to i32, !dbg !29
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 8, i32 31), !dbg !29
  %100 = bitcast i32 %99 to float, !dbg !29
  %101 = fadd float %97, %100, !dbg !24
  %102 = bitcast float %101 to i32, !dbg !29
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 4, i32 31), !dbg !29
  %104 = bitcast i32 %103 to float, !dbg !29
  %105 = fadd float %101, %104, !dbg !24
  %106 = icmp samesign ult i32 %8, 4, !dbg !29
  %107 = and i32 %14, 15, !dbg !29
  %108 = shl nuw nsw i32 %10, 4, !dbg !29
  %109 = or disjoint i32 %108, %107, !dbg !29
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !29
  %111 = bitcast float %69 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 %106) #3, !dbg !29
  %112 = or disjoint i32 %108, 16, !dbg !29
  %113 = or disjoint i32 %112, %107, !dbg !29
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !29
  %115 = bitcast float %81 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 %106) #3, !dbg !29
  %116 = or disjoint i32 %108, 32, !dbg !29
  %117 = or disjoint i32 %116, %107, !dbg !29
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !29
  %119 = bitcast float %93 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 %106) #3, !dbg !29
  %120 = or disjoint i32 %108, 48, !dbg !29
  %121 = or disjoint i32 %120, %107, !dbg !29
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %121, !dbg !29
  %123 = bitcast float %105 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 %106) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %124 = icmp slt i32 %7, 256, !dbg !29
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !29
  %126 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %125, i1 %124) #3, !dbg !29
  %127 = bitcast i32 %126 to float, !dbg !29
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 8, i32 31), !dbg !29
  %129 = bitcast i32 %128 to float, !dbg !29
  %130 = fadd float %127, %129, !dbg !24
  %131 = bitcast float %130 to i32, !dbg !29
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 4, i32 31), !dbg !29
  %133 = bitcast i32 %132 to float, !dbg !29
  %134 = fadd float %130, %133, !dbg !24
  %135 = bitcast float %134 to i32, !dbg !29
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 2, i32 31), !dbg !29
  %137 = bitcast i32 %136 to float, !dbg !29
  %138 = fadd float %134, %137, !dbg !24
  %139 = bitcast float %138 to i32, !dbg !29
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !29
  %141 = bitcast i32 %140 to float, !dbg !29
  %142 = fadd float %138, %141, !dbg !24
  %143 = icmp eq i32 %11, 0, !dbg !29
  %144 = and i1 %124, %143, !dbg !29
  %145 = bitcast float %142 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %145, i1 %144) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !29
  %147 = load i32, ptr addrspace(3) %146, align 16, !dbg !29
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !29
  %149 = load i32, ptr addrspace(3) %148, align 16, !dbg !29
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !29
  %151 = load i32, ptr addrspace(3) %150, align 16, !dbg !29
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %120, !dbg !29
  %153 = load i32, ptr addrspace(3) %152, align 16, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %154 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !30
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %154, i32 %147, i32 %149, i32 %151, i32 %153, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !30
  %156 = load float, ptr addrspace(3) %155, align 4, !dbg !30
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %156, float 2.560000e+02) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %158 = sext i32 %13 to i64, !dbg !32
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !32
  %160 = lshr i32 %8, 4, !dbg !33
  %161 = shl nuw nsw i32 %107, 1, !dbg !33
  %162 = or disjoint i32 %161, %160, !dbg !33
  %163 = icmp eq i32 %162, 0, !dbg !33
  %164 = bitcast float %157 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %164, ptr addrspace(1) %159, i1 %163) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3ojoprknxyrg2pes6evjhkfhlrqmz3umcwmfqqxdx5ngnm7ksel.py", directory: "inductor_cache/3o")
!4 = !{ptr @triton_red_fused_mean_34, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mean_34, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mean_34", linkageName: "triton_red_fused_mean_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 44, scope: !7)
!18 = !DILocation(line: 34, column: 57, scope: !7)
!19 = !DILocation(line: 34, column: 39, scope: !7)
!20 = !DILocation(line: 34, column: 49, scope: !7)
!21 = !DILocation(line: 34, column: 34, scope: !7)
!22 = !DILocation(line: 34, column: 62, scope: !7)
!23 = !DILocation(line: 36, column: 23, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 38, column: 25, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 40, column: 18, scope: !7)
!31 = !DILocation(line: 41, column: 4, scope: !7)
!32 = !DILocation(line: 42, column: 28, scope: !7)
!33 = !DILocation(line: 42, column: 39, scope: !7)
!34 = !DILocation(line: 42, column: 4, scope: !7)
