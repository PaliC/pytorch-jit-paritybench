#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [32, 1], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__native_batch_norm_legit_no_training_silu_25(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.000000e-03> : tensor<128x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<128x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<128x8xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<128x8xf32, #blocked> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<128> : tensor<128x1xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<128> : tensor<128x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<128> : tensor<128x1xi32, #blocked2> loc(#loc1)
    %cst_6 = arith.constant dense<256> : tensor<1x8xi32, #blocked2> loc(#loc1)
    %cst_7 = arith.constant dense<128> : tensor<1x8xi32, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<256> : tensor<128x1xi32, #blocked2> loc(#loc1)
    %cst_9 = arith.constant dense<32768> : tensor<1x8xi32, #blocked2> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %3 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x8xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x8xi32, #blocked2> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<1x8xi32, #blocked1> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<1x8xi32, #blocked2> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<1x8xi32, #blocked1> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<1x8xi32, #blocked2> loc(#loc5)
    %10 = tt.get_program_id x : i32 loc(#loc6)
    %11 = arith.muli %10, %c128_i32 : i32 loc(#loc7)
    %12 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc8)
    %13 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc8)
    %14 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %15 = tt.expand_dims %12 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc8)
    %16 = tt.expand_dims %13 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc8)
    %17 = tt.expand_dims %14 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi32, #blocked> loc(#loc8)
    %18 = tt.splat %11 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc9)
    %19 = tt.splat %11 : i32 -> tensor<128x1xi32, #blocked2> loc(#loc9)
    %20 = tt.splat %11 : i32 -> tensor<128x1xi32, #blocked> loc(#loc9)
    %21 = arith.addi %18, %15 : tensor<128x1xi32, #blocked1> loc(#loc9)
    %22 = arith.addi %19, %16 : tensor<128x1xi32, #blocked2> loc(#loc9)
    %23 = arith.addi %20, %17 : tensor<128x1xi32, #blocked> loc(#loc9)
    %24 = arith.cmpi slt, %21, %cst_3 : tensor<128x1xi32, #blocked1> loc(#loc10)
    %25 = arith.cmpi slt, %23, %cst_4 : tensor<128x1xi32, #blocked> loc(#loc10)
    %26 = arith.cmpi slt, %22, %cst_5 : tensor<128x1xi32, #blocked2> loc(#loc10)
    %27 = arith.remsi %9, %cst_6 : tensor<1x8xi32, #blocked2> loc(#loc11)
    %28 = arith.divsi %9, %cst_6 : tensor<1x8xi32, #blocked2> loc(#loc12)
    %29 = arith.muli %8, %cst_7 : tensor<1x8xi32, #blocked1> loc(#loc13)
    %30 = tt.broadcast %21 : tensor<128x1xi32, #blocked1> -> tensor<128x8xi32, #blocked1> loc(#loc14)
    %31 = tt.broadcast %29 : tensor<1x8xi32, #blocked1> -> tensor<128x8xi32, #blocked1> loc(#loc14)
    %32 = arith.addi %30, %31 : tensor<128x8xi32, #blocked1> loc(#loc14)
    %33 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x8x!tt.ptr<f32>, #blocked1> loc(#loc15)
    %34 = tt.addptr %33, %32 : tensor<128x8x!tt.ptr<f32>, #blocked1>, tensor<128x8xi32, #blocked1> loc(#loc15)
    %35 = tt.broadcast %24 : tensor<128x1xi1, #blocked1> -> tensor<128x8xi1, #blocked1> loc(#loc16)
    %36 = tt.broadcast %26 : tensor<128x1xi1, #blocked2> -> tensor<128x8xi1, #blocked2> loc(#loc16)
    %37 = tt.load %34, %35 evictionPolicy = evict_last : tensor<128x8x!tt.ptr<f32>, #blocked1> loc(#loc16)
    %38 = triton_gpu.convert_layout %37 : tensor<128x8xf32, #blocked1> -> tensor<128x8xf32, #blocked> loc(#loc16)
    %39 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %40 = tt.addptr %39, %23 : tensor<128x1x!tt.ptr<f32>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc17)
    %41 = tt.load %40, %25 evictionPolicy = evict_last : tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc18)
    %42 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc19)
    %43 = tt.addptr %42, %23 : tensor<128x1x!tt.ptr<f32>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc19)
    %44 = tt.load %43, %25 evictionPolicy = evict_last : tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc20)
    %45 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc21)
    %46 = tt.addptr %45, %23 : tensor<128x1x!tt.ptr<f32>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc21)
    %47 = tt.load %46, %25 evictionPolicy = evict_last : tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc22)
    %48 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc23)
    %49 = tt.addptr %48, %23 : tensor<128x1x!tt.ptr<f32>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc23)
    %50 = tt.load %49, %25 evictionPolicy = evict_last : tensor<128x1x!tt.ptr<f32>, #blocked> loc(#loc24)
    %51 = tt.broadcast %41 : tensor<128x1xf32, #blocked> -> tensor<128x8xf32, #blocked> loc(#loc25)
    %52 = arith.subf %38, %51 : tensor<128x8xf32, #blocked> loc(#loc25)
    %53 = arith.addf %44, %cst : tensor<128x1xf32, #blocked> loc(#loc26)
    %54 = tt.extern_elementwise %53 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<128x1xf32, #blocked>) -> tensor<128x1xf32, #blocked> loc(#loc27)
    %55 = arith.divf %cst_0, %54 : tensor<128x1xf32, #blocked> loc(#loc28)
    %56 = tt.broadcast %55 : tensor<128x1xf32, #blocked> -> tensor<128x8xf32, #blocked> loc(#loc29)
    %57 = arith.mulf %52, %56 : tensor<128x8xf32, #blocked> loc(#loc29)
    %58 = tt.broadcast %47 : tensor<128x1xf32, #blocked> -> tensor<128x8xf32, #blocked> loc(#loc30)
    %59 = arith.mulf %57, %58 : tensor<128x8xf32, #blocked> loc(#loc30)
    %60 = tt.broadcast %50 : tensor<128x1xf32, #blocked> -> tensor<128x8xf32, #blocked> loc(#loc31)
    %61 = arith.addf %59, %60 : tensor<128x8xf32, #blocked> loc(#loc31)
    %62 = arith.subf %cst_2, %61 : tensor<128x8xf32, #blocked> loc(#loc45)
    %63 = math.exp %62 : tensor<128x8xf32, #blocked> loc(#loc46)
    %64 = arith.addf %63, %cst_1 : tensor<128x8xf32, #blocked> loc(#loc47)
    %65 = arith.divf %cst_1, %64 : tensor<128x8xf32, #blocked> loc(#loc48)
    %66 = arith.mulf %61, %65 : tensor<128x8xf32, #blocked> loc(#loc37)
    %67 = arith.muli %22, %cst_8 : tensor<128x1xi32, #blocked2> loc(#loc38)
    %68 = tt.broadcast %27 : tensor<1x8xi32, #blocked2> -> tensor<128x8xi32, #blocked2> loc(#loc39)
    %69 = tt.broadcast %67 : tensor<128x1xi32, #blocked2> -> tensor<128x8xi32, #blocked2> loc(#loc39)
    %70 = arith.addi %68, %69 : tensor<128x8xi32, #blocked2> loc(#loc39)
    %71 = arith.muli %28, %cst_9 : tensor<1x8xi32, #blocked2> loc(#loc40)
    %72 = tt.broadcast %71 : tensor<1x8xi32, #blocked2> -> tensor<128x8xi32, #blocked2> loc(#loc41)
    %73 = arith.addi %70, %72 : tensor<128x8xi32, #blocked2> loc(#loc41)
    %74 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<128x8x!tt.ptr<f32>, #blocked2> loc(#loc42)
    %75 = tt.addptr %74, %73 : tensor<128x8x!tt.ptr<f32>, #blocked2>, tensor<128x8xi32, #blocked2> loc(#loc42)
    %76 = triton_gpu.convert_layout %66 : tensor<128x8xf32, #blocked> -> tensor<128x8xf32, #blocked2> loc(#loc43)
    tt.store %75, %76, %36 : tensor<128x8x!tt.ptr<f32>, #blocked2> loc(#loc43)
    tt.return loc(#loc44)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":22:28)
#loc3 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":22:33)
#loc4 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":23:44)
#loc5 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":23:23)
#loc6 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":25:28)
#loc7 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":25:33)
#loc8 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":26:44)
#loc9 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":26:23)
#loc10 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":27:21)
#loc11 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":30:19)
#loc12 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":31:19)
#loc13 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":32:39)
#loc14 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":32:35)
#loc15 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":32:30)
#loc16 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":32:44)
#loc17 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":33:30)
#loc18 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":33:35)
#loc19 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":34:30)
#loc20 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":34:35)
#loc21 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":35:31)
#loc22 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":35:36)
#loc23 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":36:31)
#loc24 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":36:36)
#loc25 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":37:18)
#loc26 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":39:18)
#loc27 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":40:26)
#loc28 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":42:18)
#loc29 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":45:19)
#loc30 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":46:20)
#loc31 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":47:20)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc33 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":48:23)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc37 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":49:20)
#loc38 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":50:34)
#loc39 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":50:30)
#loc40 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":50:45)
#loc41 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":50:39)
#loc42 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":50:25)
#loc43 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":50:57)
#loc44 = loc("inductor_cache/e3/ce3h7h6hxpwwlkiuntfdqgpu5s5yfwjrsxqzrqar6himi5zonz7a.py":50:4)
#loc45 = loc(callsite(#loc32 at #loc33))
#loc46 = loc(callsite(#loc34 at #loc33))
#loc47 = loc(callsite(#loc35 at #loc33))
#loc48 = loc(callsite(#loc36 at #loc33))
