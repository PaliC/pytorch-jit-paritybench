; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 6, !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = icmp slt i32 %13, 256, !dbg !14
  %19 = icmp slt i32 %14, 256, !dbg !14
  %20 = icmp slt i32 %15, 256, !dbg !14
  %21 = icmp slt i32 %16, 256, !dbg !14
  %22 = icmp slt i32 %17, 256, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %24 = shl i32 %23, 8, !dbg !16
  %25 = and i32 %11, 252, !dbg !17
  %26 = lshr i32 %8, 2, !dbg !17
  %27 = and i32 %26, 63, !dbg !17
  %28 = or disjoint i32 %24, %25, !dbg !18
  %29 = or disjoint i32 %24, %27, !dbg !18
  %30 = or disjoint i32 %29, 64, !dbg !18
  %31 = or disjoint i32 %29, 128, !dbg !18
  %32 = or disjoint i32 %29, 192, !dbg !18
  %33 = icmp slt i32 %28, 68644, !dbg !19
  %34 = icmp slt i32 %29, 68644, !dbg !19
  %35 = icmp slt i32 %30, 68644, !dbg !19
  %36 = icmp slt i32 %31, 68644, !dbg !19
  %37 = icmp slt i32 %32, 68644, !dbg !19
  %38 = srem i32 %13, 64, !dbg !20
  %39 = srem i32 %14, 64, !dbg !20
  %40 = srem i32 %15, 64, !dbg !20
  %41 = srem i32 %16, 64, !dbg !20
  %.frozen = freeze i32 %17, !dbg !21
  %42 = sdiv i32 %.frozen, 64, !dbg !21
  %43 = mul i32 %42, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %43, !dbg !20
  %44 = mul i32 %13, 68644, !dbg !22
  %45 = mul i32 %14, 68644, !dbg !22
  %46 = mul i32 %15, 68644, !dbg !22
  %47 = mul i32 %16, 68644, !dbg !22
  %48 = add i32 %28, %44, !dbg !23
  %49 = add i32 %28, %45, !dbg !23
  %50 = add i32 %28, %46, !dbg !23
  %51 = add i32 %28, %47, !dbg !23
  %52 = sext i32 %48 to i64, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !24
  %54 = sext i32 %49 to i64, !dbg !24
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !24
  %56 = sext i32 %50 to i64, !dbg !24
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !24
  %58 = sext i32 %51 to i64, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !24
  %60 = and i1 %18, %33, !dbg !25
  %61 = and i1 %19, %33, !dbg !25
  %62 = and i1 %20, %33, !dbg !25
  %63 = and i1 %21, %33, !dbg !25
  %64 = and i1 %22, %34, !dbg !25
  %65 = and i1 %35, %22, !dbg !25
  %66 = and i1 %36, %22, !dbg !25
  %67 = and i1 %37, %22, !dbg !25
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %60) #2, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !26
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %61) #2, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !26
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %62) #2, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !26
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %63) #2, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !26
  %88 = sext i32 %38 to i64, !dbg !27
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !27
  %90 = sext i32 %39 to i64, !dbg !27
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !27
  %92 = sext i32 %40 to i64, !dbg !27
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !27
  %94 = sext i32 %41 to i64, !dbg !27
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !27
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %18) #2, !dbg !28
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %18) #2, !dbg !28
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %18) #2, !dbg !28
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %18) #2, !dbg !28
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %19) #2, !dbg !28
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %19) #2, !dbg !28
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %19) #2, !dbg !28
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %19) #2, !dbg !28
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %20) #2, !dbg !28
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %20) #2, !dbg !28
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %20) #2, !dbg !28
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %20) #2, !dbg !28
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %21) #2, !dbg !28
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %21) #2, !dbg !28
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %21) #2, !dbg !28
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %21) #2, !dbg !28
  %112 = insertelement <16 x i32> poison, i32 %87, i64 0, !dbg !26
  %113 = insertelement <16 x i32> %112, i32 %82, i64 1, !dbg !26
  %114 = insertelement <16 x i32> %113, i32 %77, i64 2, !dbg !26
  %115 = insertelement <16 x i32> %114, i32 %72, i64 3, !dbg !26
  %116 = insertelement <16 x i32> %115, i32 %86, i64 4, !dbg !26
  %117 = insertelement <16 x i32> %116, i32 %81, i64 5, !dbg !26
  %118 = insertelement <16 x i32> %117, i32 %76, i64 6, !dbg !26
  %119 = insertelement <16 x i32> %118, i32 %71, i64 7, !dbg !26
  %120 = insertelement <16 x i32> %119, i32 %85, i64 8, !dbg !26
  %121 = insertelement <16 x i32> %120, i32 %80, i64 9, !dbg !26
  %122 = insertelement <16 x i32> %121, i32 %75, i64 10, !dbg !26
  %123 = insertelement <16 x i32> %122, i32 %70, i64 11, !dbg !26
  %124 = insertelement <16 x i32> %123, i32 %84, i64 12, !dbg !26
  %125 = insertelement <16 x i32> %124, i32 %79, i64 13, !dbg !26
  %126 = insertelement <16 x i32> %125, i32 %74, i64 14, !dbg !26
  %127 = insertelement <16 x i32> %126, i32 %69, i64 15, !dbg !26
  %128 = bitcast <16 x i32> %127 to <16 x float>, !dbg !26
  %129 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !28
  %130 = insertelement <4 x i32> %129, i32 %107, i64 1, !dbg !28
  %131 = insertelement <4 x i32> %130, i32 %103, i64 2, !dbg !28
  %132 = insertelement <4 x i32> %131, i32 %99, i64 3, !dbg !28
  %133 = bitcast <4 x i32> %132 to <4 x float>, !dbg !28
  %134 = shufflevector <4 x float> %133, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %135 = fadd <16 x float> %134, %128, !dbg !29
  %136 = fcmp olt <16 x float> %135, zeroinitializer, !dbg !30
  %137 = extractelement <16 x i1> %136, i64 15, !dbg !34
  %138 = extractelement <16 x float> %135, i64 15, !dbg !34
  %139 = select i1 %137, float 0.000000e+00, float %138, !dbg !34
  %140 = extractelement <16 x i1> %136, i64 11, !dbg !34
  %141 = extractelement <16 x float> %135, i64 11, !dbg !34
  %142 = select i1 %140, float 0.000000e+00, float %141, !dbg !34
  %143 = extractelement <16 x i1> %136, i64 7, !dbg !34
  %144 = extractelement <16 x float> %135, i64 7, !dbg !34
  %145 = select i1 %143, float 0.000000e+00, float %144, !dbg !34
  %146 = extractelement <16 x i1> %136, i64 3, !dbg !34
  %147 = extractelement <16 x float> %135, i64 3, !dbg !34
  %148 = select i1 %146, float 0.000000e+00, float %147, !dbg !34
  %149 = extractelement <16 x i1> %136, i64 14, !dbg !34
  %150 = extractelement <16 x float> %135, i64 14, !dbg !34
  %151 = select i1 %149, float 0.000000e+00, float %150, !dbg !34
  %152 = extractelement <16 x i1> %136, i64 10, !dbg !34
  %153 = extractelement <16 x float> %135, i64 10, !dbg !34
  %154 = select i1 %152, float 0.000000e+00, float %153, !dbg !34
  %155 = extractelement <16 x i1> %136, i64 6, !dbg !34
  %156 = extractelement <16 x float> %135, i64 6, !dbg !34
  %157 = select i1 %155, float 0.000000e+00, float %156, !dbg !34
  %158 = extractelement <16 x i1> %136, i64 2, !dbg !34
  %159 = extractelement <16 x float> %135, i64 2, !dbg !34
  %160 = select i1 %158, float 0.000000e+00, float %159, !dbg !34
  %161 = extractelement <16 x i1> %136, i64 13, !dbg !34
  %162 = extractelement <16 x float> %135, i64 13, !dbg !34
  %163 = select i1 %161, float 0.000000e+00, float %162, !dbg !34
  %164 = extractelement <16 x i1> %136, i64 9, !dbg !34
  %165 = extractelement <16 x float> %135, i64 9, !dbg !34
  %166 = select i1 %164, float 0.000000e+00, float %165, !dbg !34
  %167 = extractelement <16 x i1> %136, i64 5, !dbg !34
  %168 = extractelement <16 x float> %135, i64 5, !dbg !34
  %169 = select i1 %167, float 0.000000e+00, float %168, !dbg !34
  %170 = extractelement <16 x i1> %136, i64 1, !dbg !34
  %171 = extractelement <16 x float> %135, i64 1, !dbg !34
  %172 = select i1 %170, float 0.000000e+00, float %171, !dbg !34
  %173 = extractelement <16 x i1> %136, i64 12, !dbg !34
  %174 = extractelement <16 x float> %135, i64 12, !dbg !34
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !34
  %176 = extractelement <16 x i1> %136, i64 8, !dbg !34
  %177 = extractelement <16 x float> %135, i64 8, !dbg !34
  %178 = select i1 %176, float 0.000000e+00, float %177, !dbg !34
  %179 = extractelement <16 x i1> %136, i64 4, !dbg !34
  %180 = extractelement <16 x float> %135, i64 4, !dbg !34
  %181 = select i1 %179, float 0.000000e+00, float %180, !dbg !34
  %182 = extractelement <16 x i1> %136, i64 0, !dbg !34
  %183 = extractelement <16 x float> %135, i64 0, !dbg !34
  %184 = select i1 %182, float 0.000000e+00, float %183, !dbg !34
  %185 = shl i32 %29, 6, !dbg !35
  %186 = shl i32 %30, 6, !dbg !35
  %187 = shl i32 %31, 6, !dbg !35
  %188 = shl i32 %32, 6, !dbg !35
  %189 = mul i32 %42, 4393216, !dbg !36
  %190 = add i32 %189, %.decomposed, !dbg !37
  %191 = add i32 %190, %185, !dbg !38
  %192 = add i32 %190, %186, !dbg !38
  %193 = add i32 %190, %187, !dbg !38
  %194 = add i32 %190, %188, !dbg !38
  %195 = sext i32 %191 to i64, !dbg !39
  %196 = getelementptr float, ptr addrspace(1) %2, i64 %195, !dbg !39
  %197 = sext i32 %192 to i64, !dbg !39
  %198 = getelementptr float, ptr addrspace(1) %2, i64 %197, !dbg !39
  %199 = sext i32 %193 to i64, !dbg !39
  %200 = getelementptr float, ptr addrspace(1) %2, i64 %199, !dbg !39
  %201 = sext i32 %194 to i64, !dbg !39
  %202 = getelementptr float, ptr addrspace(1) %2, i64 %201, !dbg !39
  %203 = shl i32 %8, 6, !dbg !40
  %204 = and i32 %203, 4032, !dbg !40
  %205 = or disjoint i32 %204, %10, !dbg !40
  %206 = and i32 %11, 1020, !dbg !40
  %207 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %204, !dbg !40
  %208 = getelementptr float, ptr addrspace(3) %207, i32 %205, !dbg !40
  %209 = bitcast float %139 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %209, i1 true) #2, !dbg !40
  %210 = or disjoint i32 %205, 16, !dbg !40
  %211 = lshr i32 %210, 2, !dbg !40
  %212 = getelementptr float, ptr addrspace(3) @global_smem, i32 %211, !dbg !40
  %213 = getelementptr float, ptr addrspace(3) %212, i32 %210, !dbg !40
  %214 = bitcast float %142 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %214, i1 true) #2, !dbg !40
  %215 = or disjoint i32 %205, 32, !dbg !40
  %216 = lshr i32 %215, 2, !dbg !40
  %217 = getelementptr float, ptr addrspace(3) @global_smem, i32 %216, !dbg !40
  %218 = getelementptr float, ptr addrspace(3) %217, i32 %215, !dbg !40
  %219 = bitcast float %145 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #2, !dbg !40
  %220 = or disjoint i32 %205, 48, !dbg !40
  %221 = lshr i32 %220, 2, !dbg !40
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i32 %221, !dbg !40
  %223 = getelementptr float, ptr addrspace(3) %222, i32 %220, !dbg !40
  %224 = bitcast float %148 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #2, !dbg !40
  %225 = or disjoint i32 %205, 4, !dbg !40
  %226 = getelementptr float, ptr addrspace(3) %207, i32 %225, !dbg !40
  %227 = bitcast float %151 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #2, !dbg !40
  %228 = or disjoint i32 %205, 20, !dbg !40
  %229 = lshr i32 %228, 2, !dbg !40
  %230 = and i32 %229, 1012, !dbg !40
  %231 = getelementptr float, ptr addrspace(3) @global_smem, i32 %230, !dbg !40
  %232 = getelementptr float, ptr addrspace(3) %231, i32 %228, !dbg !40
  %233 = bitcast float %154 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 true) #2, !dbg !40
  %234 = or disjoint i32 %205, 36, !dbg !40
  %235 = lshr i32 %234, 2, !dbg !40
  %236 = and i32 %235, 1016, !dbg !40
  %237 = getelementptr float, ptr addrspace(3) @global_smem, i32 %236, !dbg !40
  %238 = getelementptr float, ptr addrspace(3) %237, i32 %234, !dbg !40
  %239 = bitcast float %157 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #2, !dbg !40
  %240 = or disjoint i32 %205, 52, !dbg !40
  %241 = lshr i32 %240, 2, !dbg !40
  %242 = and i32 %241, 1020, !dbg !40
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %242, !dbg !40
  %244 = getelementptr float, ptr addrspace(3) %243, i32 %240, !dbg !40
  %245 = bitcast float %160 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #2, !dbg !40
  %246 = or disjoint i32 %205, 8, !dbg !40
  %247 = getelementptr float, ptr addrspace(3) %207, i32 %246, !dbg !40
  %248 = bitcast float %163 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 true) #2, !dbg !40
  %249 = or disjoint i32 %205, 24, !dbg !40
  %250 = lshr i32 %249, 2, !dbg !40
  %251 = and i32 %250, 1012, !dbg !40
  %252 = getelementptr float, ptr addrspace(3) @global_smem, i32 %251, !dbg !40
  %253 = getelementptr float, ptr addrspace(3) %252, i32 %249, !dbg !40
  %254 = bitcast float %166 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 true) #2, !dbg !40
  %255 = or disjoint i32 %205, 40, !dbg !40
  %256 = lshr i32 %255, 2, !dbg !40
  %257 = and i32 %256, 1016, !dbg !40
  %258 = getelementptr float, ptr addrspace(3) @global_smem, i32 %257, !dbg !40
  %259 = getelementptr float, ptr addrspace(3) %258, i32 %255, !dbg !40
  %260 = bitcast float %169 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #2, !dbg !40
  %261 = or disjoint i32 %205, 56, !dbg !40
  %262 = lshr i32 %261, 2, !dbg !40
  %263 = and i32 %262, 1020, !dbg !40
  %264 = getelementptr float, ptr addrspace(3) @global_smem, i32 %263, !dbg !40
  %265 = getelementptr float, ptr addrspace(3) %264, i32 %261, !dbg !40
  %266 = bitcast float %172 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #2, !dbg !40
  %267 = or disjoint i32 %205, 12, !dbg !40
  %268 = getelementptr float, ptr addrspace(3) %207, i32 %267, !dbg !40
  %269 = bitcast float %175 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #2, !dbg !40
  %270 = or disjoint i32 %205, 28, !dbg !40
  %271 = lshr i32 %270, 2, !dbg !40
  %272 = and i32 %271, 1012, !dbg !40
  %273 = getelementptr float, ptr addrspace(3) @global_smem, i32 %272, !dbg !40
  %274 = getelementptr float, ptr addrspace(3) %273, i32 %270, !dbg !40
  %275 = bitcast float %178 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #2, !dbg !40
  %276 = or disjoint i32 %205, 44, !dbg !40
  %277 = lshr i32 %276, 2, !dbg !40
  %278 = and i32 %277, 1016, !dbg !40
  %279 = getelementptr float, ptr addrspace(3) @global_smem, i32 %278, !dbg !40
  %280 = getelementptr float, ptr addrspace(3) %279, i32 %276, !dbg !40
  %281 = bitcast float %181 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #2, !dbg !40
  %282 = or disjoint i32 %205, 60, !dbg !40
  %283 = lshr i32 %282, 2, !dbg !40
  %284 = and i32 %283, 1020, !dbg !40
  %285 = getelementptr float, ptr addrspace(3) @global_smem, i32 %284, !dbg !40
  %286 = getelementptr float, ptr addrspace(3) %285, i32 %282, !dbg !40
  %287 = bitcast float %184 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %288 = and i32 %8, 252, !dbg !40
  %289 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %288, !dbg !40
  %290 = getelementptr inbounds float, ptr addrspace(3) %289, i32 %206, !dbg !40
  %291 = or disjoint i32 %206, 1024, !dbg !40
  %292 = lshr exact i32 %291, 2, !dbg !40
  %293 = and i32 %292, 508, !dbg !40
  %294 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %293, !dbg !40
  %295 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %291, !dbg !40
  %296 = load <4 x i32>, ptr addrspace(3) %295, align 16, !dbg !40
  %297 = or disjoint i32 %206, 2048, !dbg !40
  %298 = lshr exact i32 %297, 2, !dbg !40
  %299 = and i32 %298, 764, !dbg !40
  %300 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %299, !dbg !40
  %301 = getelementptr inbounds float, ptr addrspace(3) %300, i32 %297, !dbg !40
  %302 = load <4 x i32>, ptr addrspace(3) %301, align 16, !dbg !40
  %303 = or disjoint i32 %206, 3072, !dbg !40
  %304 = lshr exact i32 %303, 2, !dbg !40
  %305 = and i32 %304, 1020, !dbg !40
  %306 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %305, !dbg !40
  %307 = getelementptr inbounds float, ptr addrspace(3) %306, i32 %303, !dbg !40
  %308 = load <4 x i32>, ptr addrspace(3) %307, align 16, !dbg !40
  %.extract = load i32, ptr addrspace(3) %290, align 16, !dbg !40
  %309 = getelementptr inbounds i8, ptr addrspace(3) %290, i32 4, !dbg !40
  %.extract19 = load i32, ptr addrspace(3) %309, align 4, !dbg !40
  %310 = getelementptr inbounds i8, ptr addrspace(3) %290, i32 8, !dbg !40
  %.extract20 = load i32, ptr addrspace(3) %310, align 8, !dbg !40
  %311 = getelementptr inbounds i8, ptr addrspace(3) %290, i32 12, !dbg !40
  %.extract21 = load i32, ptr addrspace(3) %311, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %196, i1 %64) #2, !dbg !40
  %.extract22 = extractelement <4 x i32> %296, i64 0, !dbg !40
  %.extract23 = extractelement <4 x i32> %296, i64 1, !dbg !40
  %.extract24 = extractelement <4 x i32> %296, i64 2, !dbg !40
  %.extract25 = extractelement <4 x i32> %296, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %198, i1 %65) #2, !dbg !40
  %.extract26 = extractelement <4 x i32> %302, i64 0, !dbg !40
  %.extract27 = extractelement <4 x i32> %302, i64 1, !dbg !40
  %.extract28 = extractelement <4 x i32> %302, i64 2, !dbg !40
  %.extract29 = extractelement <4 x i32> %302, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %200, i1 %66) #2, !dbg !40
  %.extract30 = extractelement <4 x i32> %308, i64 0, !dbg !40
  %.extract31 = extractelement <4 x i32> %308, i64 1, !dbg !40
  %.extract32 = extractelement <4 x i32> %308, i64 2, !dbg !40
  %.extract33 = extractelement <4 x i32> %308, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %202, i1 %67) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqtrultqaifjqwzybqeeblejpj2dsuwtj2a2sktuja2xhg5rua3k.py", directory: "inductor_cache/qt")
!4 = !{ptr @triton_poi_fused_convolution_relu_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_8", linkageName: "triton_poi_fused_convolution_relu_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 41, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 32, column: 46, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 36, column: 40, scope: !7)
!34 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 37, column: 33, scope: !7)
!36 = !DILocation(line: 37, column: 46, scope: !7)
!37 = !DILocation(line: 37, column: 30, scope: !7)
!38 = !DILocation(line: 37, column: 38, scope: !7)
!39 = !DILocation(line: 37, column: 25, scope: !7)
!40 = !DILocation(line: 37, column: 57, scope: !7)
!41 = !DILocation(line: 37, column: 4, scope: !7)
