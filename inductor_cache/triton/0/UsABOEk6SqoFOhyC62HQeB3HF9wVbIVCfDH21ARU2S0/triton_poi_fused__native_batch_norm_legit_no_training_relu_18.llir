; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 2, !dbg !11
  %11 = icmp slt i32 %10, 512, !dbg !12
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !13
  %13 = shl i32 %12, 7, !dbg !14
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !15
  %15 = and i32 %14, 127, !dbg !15
  %16 = or disjoint i32 %13, %15, !dbg !16
  %17 = icmp slt i32 %16, 81, !dbg !17
  %.frozen = freeze i32 %10, !dbg !18
  %18 = sdiv i32 %.frozen, 128, !dbg !18
  %19 = mul i32 %18, 128, !dbg !19
  %.decomposed = sub i32 %.frozen, %19, !dbg !19
  %20 = shl i32 %16, 7, !dbg !20
  %21 = mul i32 %18, 10368, !dbg !21
  %22 = add i32 %21, %.decomposed, !dbg !22
  %23 = add i32 %22, %20, !dbg !23
  %24 = sext i32 %23 to i64, !dbg !24
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !24
  %26 = and i1 %11, %17, !dbg !25
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 %26) #3, !dbg !26
  %28 = sext i32 %.decomposed to i64, !dbg !27
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !27
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %11) #3, !dbg !28
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !29
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %11) #3, !dbg !30
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !30
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !30
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !30
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !30
  %37 = bitcast i32 %33 to float, !dbg !30
  %38 = bitcast i32 %34 to float, !dbg !30
  %39 = bitcast i32 %35 to float, !dbg !30
  %40 = bitcast i32 %36 to float, !dbg !30
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !31
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %11) #3, !dbg !32
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !33
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %11) #3, !dbg !34
  %45 = fadd float %37, 0x3EE4F8B580000000, !dbg !35
  %46 = fadd float %38, 0x3EE4F8B580000000, !dbg !35
  %47 = fadd float %39, 0x3EE4F8B580000000, !dbg !35
  %48 = fadd float %40, 0x3EE4F8B580000000, !dbg !35
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %49, 0, !dbg !36
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %50, 0, !dbg !36
  br i1 %.not.i, label %56, label %51, !dbg !36

51:                                               ; preds = %8
  br i1 %.not1.i, label %54, label %52, !dbg !36

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

56:                                               ; preds = %8
  br i1 %.not1.i, label %59, label %57, !dbg !36

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %52, %54, %57, %59
  %.0.i = phi float [ %53, %52 ], [ %55, %54 ], [ %58, %57 ], [ %60, %59 ], !dbg !36
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %61, 0, !dbg !36
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %62, 0, !dbg !36
  br i1 %.not.i1, label %68, label %63, !dbg !36

63:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %66, label %64, !dbg !36

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %71, label %69, !dbg !36

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %64, %66, %69, %71
  %.0.i3 = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !36
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i6 = icmp eq i32 %73, 0, !dbg !36
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i9 = icmp eq i32 %74, 0, !dbg !36
  br i1 %.not.i6, label %80, label %75, !dbg !36

75:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %78, label %76, !dbg !36

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

80:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %83, label %81, !dbg !36

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

__nv_sqrtf.exit10:                                ; preds = %76, %78, %81, %83
  %.0.i8 = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !36
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i11 = icmp eq i32 %85, 0, !dbg !36
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i14 = icmp eq i32 %86, 0, !dbg !36
  br i1 %.not.i11, label %92, label %87, !dbg !36

87:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %90, label %88, !dbg !36

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

92:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %95, label %93, !dbg !36

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

__nv_sqrtf.exit15:                                ; preds = %88, %90, %93, %95
  %.0.i13 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !36
  %97 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !26
  %98 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !28
  %99 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !26
  %100 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !28
  %101 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !26
  %102 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !28
  %103 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !26
  %104 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !28
  %105 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !34
  %106 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !34
  %107 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !34
  %108 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !34
  %109 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !32
  %110 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !32
  %111 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !32
  %112 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !32
  %113 = or disjoint i32 %10, 3, !dbg !37
  %114 = icmp slt i32 %113, 512, !dbg !12
  %115 = and i1 %114, %17, !dbg !25
  %116 = or disjoint i32 %10, 2, !dbg !37
  %117 = icmp slt i32 %116, 512, !dbg !12
  %118 = and i1 %117, %17, !dbg !25
  %119 = or disjoint i32 %10, 1, !dbg !37
  %120 = icmp slt i32 %119, 512, !dbg !12
  %121 = and i1 %120, %17, !dbg !25
  %.frozen19 = freeze i32 %113, !dbg !18
  %122 = sdiv i32 %.frozen19, 128, !dbg !18
  %.frozen21 = freeze i32 %116, !dbg !18
  %123 = sdiv i32 %.frozen21, 128, !dbg !18
  %.frozen23 = freeze i32 %119, !dbg !18
  %124 = sdiv i32 %.frozen23, 128, !dbg !18
  %125 = mul i32 %122, 128, !dbg !19
  %.decomposed20 = sub i32 %.frozen19, %125, !dbg !19
  %126 = mul i32 %123, 128, !dbg !19
  %.decomposed22 = sub i32 %.frozen21, %126, !dbg !19
  %127 = mul i32 %124, 128, !dbg !19
  %.decomposed24 = sub i32 %.frozen23, %127, !dbg !19
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !38
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !38
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !38
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !38
  %132 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !26
  %133 = insertelement <4 x i32> %132, i32 %99, i64 1, !dbg !26
  %134 = insertelement <4 x i32> %133, i32 %101, i64 2, !dbg !26
  %135 = insertelement <4 x i32> %134, i32 %103, i64 3, !dbg !26
  %136 = bitcast <4 x i32> %135 to <4 x float>, !dbg !26
  %137 = insertelement <4 x i32> poison, i32 %98, i64 0, !dbg !28
  %138 = insertelement <4 x i32> %137, i32 %100, i64 1, !dbg !28
  %139 = insertelement <4 x i32> %138, i32 %102, i64 2, !dbg !28
  %140 = insertelement <4 x i32> %139, i32 %104, i64 3, !dbg !28
  %141 = bitcast <4 x i32> %140 to <4 x float>, !dbg !28
  %142 = fsub <4 x float> %136, %141, !dbg !39
  %143 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !34
  %144 = insertelement <4 x i32> %143, i32 %106, i64 1, !dbg !34
  %145 = insertelement <4 x i32> %144, i32 %107, i64 2, !dbg !34
  %146 = insertelement <4 x i32> %145, i32 %108, i64 3, !dbg !34
  %147 = bitcast <4 x i32> %146 to <4 x float>, !dbg !34
  %148 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !32
  %149 = insertelement <4 x i32> %148, i32 %110, i64 1, !dbg !32
  %150 = insertelement <4 x i32> %149, i32 %111, i64 2, !dbg !32
  %151 = insertelement <4 x i32> %150, i32 %112, i64 3, !dbg !32
  %152 = bitcast <4 x i32> %151 to <4 x float>, !dbg !32
  %153 = insertelement <4 x float> poison, float %131, i64 0, !dbg !40
  %154 = insertelement <4 x float> %153, float %130, i64 1, !dbg !40
  %155 = insertelement <4 x float> %154, float %129, i64 2, !dbg !40
  %156 = insertelement <4 x float> %155, float %128, i64 3, !dbg !40
  %157 = fmul <4 x float> %142, %156, !dbg !40
  %158 = fmul <4 x float> %157, %152, !dbg !41
  %159 = fadd <4 x float> %158, %147, !dbg !42
  %160 = fcmp olt <4 x float> %159, zeroinitializer, !dbg !43
  %161 = extractelement <4 x i1> %160, i64 3, !dbg !47
  %162 = extractelement <4 x i1> %160, i64 2, !dbg !47
  %163 = extractelement <4 x i1> %160, i64 1, !dbg !47
  %164 = extractelement <4 x i1> %160, i64 0, !dbg !47
  %165 = mul nsw i32 %.decomposed, 81, !dbg !48
  %166 = mul nsw i32 %.decomposed24, 81, !dbg !48
  %167 = mul nsw i32 %.decomposed22, 81, !dbg !48
  %168 = mul nsw i32 %.decomposed20, 81, !dbg !48
  %169 = add i32 %16, %165, !dbg !49
  %170 = add i32 %166, %16, !dbg !49
  %171 = add i32 %167, %16, !dbg !49
  %172 = add i32 %168, %16, !dbg !49
  %173 = mul i32 %18, 62208, !dbg !50
  %174 = mul i32 %124, 62208, !dbg !50
  %175 = mul i32 %123, 62208, !dbg !50
  %176 = mul i32 %122, 62208, !dbg !50
  %177 = add i32 %169, %173, !dbg !51
  %178 = add i32 %170, %174, !dbg !51
  %179 = add i32 %171, %175, !dbg !51
  %180 = add i32 %172, %176, !dbg !51
  %181 = sext i32 %177 to i64, !dbg !52
  %182 = getelementptr float, ptr addrspace(1) %5, i64 %181, !dbg !52
  %183 = sext i32 %178 to i64, !dbg !52
  %184 = getelementptr float, ptr addrspace(1) %5, i64 %183, !dbg !52
  %185 = sext i32 %179 to i64, !dbg !52
  %186 = getelementptr float, ptr addrspace(1) %5, i64 %185, !dbg !52
  %187 = sext i32 %180 to i64, !dbg !52
  %188 = getelementptr float, ptr addrspace(1) %5, i64 %187, !dbg !52
  %bc = bitcast <4 x float> %159 to <4 x i32>, !dbg !53
  %189 = extractelement <4 x i32> %bc, i64 3, !dbg !53
  %190 = select i1 %161, i32 0, i32 %189, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %190, ptr addrspace(1) %182, i1 %26) #3, !dbg !53
  %bc16 = bitcast <4 x float> %159 to <4 x i32>, !dbg !53
  %191 = extractelement <4 x i32> %bc16, i64 2, !dbg !53
  %192 = select i1 %162, i32 0, i32 %191, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %192, ptr addrspace(1) %184, i1 %121) #3, !dbg !53
  %bc17 = bitcast <4 x float> %159 to <4 x i32>, !dbg !53
  %193 = extractelement <4 x i32> %bc17, i64 1, !dbg !53
  %194 = select i1 %163, i32 0, i32 %193, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %194, ptr addrspace(1) %186, i1 %118) #3, !dbg !53
  %bc18 = bitcast <4 x float> %159 to <4 x i32>, !dbg !53
  %195 = extractelement <4 x i32> %bc18, i64 0, !dbg !53
  %196 = select i1 %164, i32 0, i32 %195, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %196, ptr addrspace(1) %188, i1 %115) #3, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cy2cnhmhxpzeszbklkajcpxtokngg4o53hqkiexuaogatqaefyn3.py", directory: "inductor_cache/y2")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_18", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 21, scope: !7)
!13 = !DILocation(line: 25, column: 28, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 26, column: 44, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 39, scope: !7)
!21 = !DILocation(line: 31, column: 50, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 44, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 63, scope: !7)
!26 = !DILocation(line: 31, column: 55, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 26, scope: !7)
!37 = !DILocation(line: 23, column: 23, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 36, column: 18, scope: !7)
!40 = !DILocation(line: 44, column: 19, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 48, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 49, column: 33, scope: !7)
!49 = !DILocation(line: 49, column: 30, scope: !7)
!50 = !DILocation(line: 49, column: 44, scope: !7)
!51 = !DILocation(line: 49, column: 38, scope: !7)
!52 = !DILocation(line: 49, column: 25, scope: !7)
!53 = !DILocation(line: 49, column: 56, scope: !7)
!54 = !DILocation(line: 49, column: 4, scope: !7)
