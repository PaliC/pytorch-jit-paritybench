; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_3 = internal constant [8 x i8] c"unknown\00"
@assertFile_3 = internal constant [74 x i8] c"inductor_cache/g4/cg4pc7ap5v6yjpyyhz3zkyfmn7obvcah43zpo6kh3ptlcyjplzp5.py\00"
@assertMessage_3 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp77 < 36\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/g4/cg4pc7ap5v6yjpyyhz3zkyfmn7obvcah43zpo6kh3ptlcyjplzp5.py\00"
@assertMessage_2 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp57 < 36\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/g4/cg4pc7ap5v6yjpyyhz3zkyfmn7obvcah43zpo6kh3ptlcyjplzp5.py\00"
@assertMessage_1 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp36 < 36\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/g4/cg4pc7ap5v6yjpyyhz3zkyfmn7obvcah43zpo6kh3ptlcyjplzp5.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp18 < 36\00"

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_add_mul_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !11 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %12 = shl i32 %11, 8, !dbg !13
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %14 = shl i32 %13, 1, !dbg !14
  %15 = and i32 %14, 254, !dbg !14
  %16 = or disjoint i32 %12, %15, !dbg !15
  %17 = or disjoint i32 %16, 1, !dbg !15
  %18 = icmp slt i32 %16, 2304, !dbg !16
  %.frozen = freeze i32 %16, !dbg !17
  %19 = sdiv i32 %.frozen, 9, !dbg !17
  %20 = mul i32 %19, 9, !dbg !18
  %.decomposed = sub i32 %.frozen, %20, !dbg !18
  %.frozen19 = freeze i32 %17, !dbg !17
  %21 = sdiv i32 %.frozen19, 9, !dbg !17
  %22 = mul i32 %21, 9, !dbg !18
  %.decomposed20 = sub i32 %.frozen19, %22, !dbg !18
  %23 = sdiv i32 %16, 576, !dbg !19
  %24 = srem i32 %19, 16, !dbg !20
  %25 = srem i32 %21, 16, !dbg !20
  %.frozen21 = freeze i32 %16, !dbg !21
  %26 = sdiv i32 %.frozen21, 144, !dbg !21
  %27 = mul i32 %26, 144, !dbg !22
  %.decomposed22 = sub i32 %.frozen21, %27, !dbg !22
  %28 = srem i32 %19, 4, !dbg !23
  %29 = srem i32 %21, 4, !dbg !23
  %30 = sdiv i32 %16, 36, !dbg !24
  %31 = srem i32 %30, 4, !dbg !25
  %32 = mul nsw i32 %24, 18, !dbg !26
  %33 = mul nsw i32 %25, 18, !dbg !26
  %34 = mul nsw i32 %23, 288, !dbg !27
  %35 = add nsw i32 %34, %.decomposed, !dbg !28
  %36 = add nsw i32 %35, %32, !dbg !29
  %37 = add nsw i32 %34, %.decomposed20, !dbg !28
  %38 = add nsw i32 %37, %33, !dbg !29
  %39 = sext i32 %36 to i64, !dbg !30
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !30
  %41 = sext i32 %38 to i64, !dbg !30
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !30
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %18) #3, !dbg !31
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %18) #3, !dbg !31
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !32
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !32
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %18) #3, !dbg !33
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %18) #3, !dbg !33
  %49 = add nsw i32 %.decomposed, 9, !dbg !34
  %50 = add nsw i32 %.decomposed20, 9, !dbg !34
  %51 = add nsw i32 %34, %49, !dbg !35
  %52 = add nsw i32 %51, %32, !dbg !36
  %53 = add nsw i32 %34, %50, !dbg !35
  %54 = add nsw i32 %53, %33, !dbg !36
  %55 = sext i32 %52 to i64, !dbg !37
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !37
  %57 = sext i32 %54 to i64, !dbg !37
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !37
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %18) #3, !dbg !38
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %18) #3, !dbg !38
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !39
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !39
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %18) #3, !dbg !40
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %18) #3, !dbg !40
  %65 = mul nsw i32 %23, 144, !dbg !41
  %66 = add nsw i32 %65, %.decomposed22, !dbg !42
  %67 = sext i32 %66 to i64, !dbg !43
  %68 = getelementptr i64, ptr addrspace(1) %3, i64 %67, !dbg !43
  %69 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %68, i1 %18) #3, !dbg !44
  %70 = extractvalue { i64, i64 } %69, 0, !dbg !44
  %71 = extractvalue { i64, i64 } %69, 1, !dbg !44
  %72 = getelementptr float, ptr addrspace(1) %5, i64 %39, !dbg !45
  %73 = getelementptr float, ptr addrspace(1) %5, i64 %41, !dbg !45
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %18) #3, !dbg !46
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %18) #3, !dbg !46
  %76 = getelementptr float, ptr addrspace(1) %5, i64 %55, !dbg !47
  %77 = getelementptr float, ptr addrspace(1) %5, i64 %57, !dbg !47
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %18) #3, !dbg !48
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %18) #3, !dbg !48
  %80 = getelementptr i64, ptr addrspace(1) %6, i64 %67, !dbg !49
  %81 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %80, i1 %18) #3, !dbg !50
  %82 = getelementptr i64, ptr addrspace(1) %7, i64 %39, !dbg !51
  %83 = getelementptr i64, ptr addrspace(1) %7, i64 %41, !dbg !51
  %84 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %18) #3, !dbg !52
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %83, i1 %18) #3, !dbg !52
  %86 = getelementptr i64, ptr addrspace(1) %7, i64 %55, !dbg !53
  %87 = getelementptr i64, ptr addrspace(1) %7, i64 %57, !dbg !53
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %86, i1 %18) #3, !dbg !54
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %87, i1 %18) #3, !dbg !54
  %90 = mul nsw i32 %28, 18, !dbg !55
  %91 = mul nsw i32 %29, 18, !dbg !55
  %92 = mul nsw i32 %31, 72, !dbg !56
  %93 = add nsw i32 %92, %34, !dbg !57
  %94 = add nsw i32 %93, %.decomposed, !dbg !58
  %95 = add nsw i32 %94, %90, !dbg !59
  %96 = add nsw i32 %93, %.decomposed20, !dbg !58
  %97 = add nsw i32 %96, %91, !dbg !59
  %98 = sext i32 %95 to i64, !dbg !60
  %99 = getelementptr i64, ptr addrspace(1) %7, i64 %98, !dbg !60
  %100 = sext i32 %97 to i64, !dbg !60
  %101 = getelementptr i64, ptr addrspace(1) %7, i64 %100, !dbg !60
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %99, i1 %18) #3, !dbg !61
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %101, i1 %18) #3, !dbg !61
  %104 = add nsw i32 %93, %49, !dbg !62
  %105 = add nsw i32 %104, %90, !dbg !63
  %106 = add nsw i32 %93, %50, !dbg !62
  %107 = add nsw i32 %106, %91, !dbg !63
  %108 = sext i32 %105 to i64, !dbg !64
  %109 = getelementptr i64, ptr addrspace(1) %7, i64 %108, !dbg !64
  %110 = sext i32 %107 to i64, !dbg !64
  %111 = getelementptr i64, ptr addrspace(1) %7, i64 %110, !dbg !64
  %112 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %109, i1 %18) #3, !dbg !65
  %113 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %111, i1 %18) #3, !dbg !65
  %114 = getelementptr i64, ptr addrspace(1) %8, i64 %39, !dbg !66
  %115 = getelementptr i64, ptr addrspace(1) %8, i64 %41, !dbg !66
  %116 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %114, i1 %18) #3, !dbg !67
  %117 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %115, i1 %18) #3, !dbg !67
  %118 = getelementptr i64, ptr addrspace(1) %8, i64 %55, !dbg !68
  %119 = getelementptr i64, ptr addrspace(1) %8, i64 %57, !dbg !68
  %120 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %118, i1 %18) #3, !dbg !69
  %121 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %119, i1 %18) #3, !dbg !69
  %122 = getelementptr i64, ptr addrspace(1) %8, i64 %98, !dbg !70
  %123 = getelementptr i64, ptr addrspace(1) %8, i64 %100, !dbg !70
  %124 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %122, i1 %18) #3, !dbg !71
  %125 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %123, i1 %18) #3, !dbg !71
  %126 = getelementptr i64, ptr addrspace(1) %8, i64 %108, !dbg !72
  %127 = getelementptr i64, ptr addrspace(1) %8, i64 %110, !dbg !72
  %128 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %126, i1 %18) #3, !dbg !73
  %129 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %127, i1 %18) #3, !dbg !73
  %130 = add i64 %70, 36, !dbg !74
  %131 = add i64 %71, 36, !dbg !74
  %132 = icmp slt i64 %70, 0, !dbg !75
  %133 = icmp slt i64 %71, 0, !dbg !75
  %134 = select i1 %132, i64 %130, i64 %70, !dbg !76
  %135 = select i1 %133, i64 %131, i64 %71, !dbg !76
  %136 = icmp ugt i64 %134, 35, !dbg !77
  %137 = icmp ugt i64 %135, 35, !dbg !77
  %.not13 = or i1 %136, %137, !dbg !78
  %138 = and i1 %18, %.not13, !dbg !78
  br i1 %138, label %139, label %140, !dbg !78

139:                                              ; preds = %10
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 62, ptr nonnull @assertFunc_0, i64 1), !dbg !78
  unreachable, !dbg !78

140:                                              ; preds = %10
  %141 = extractvalue { i64, i64 } %81, 1, !dbg !50
  %142 = extractvalue { i64, i64 } %81, 0, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %143 = mul nsw i32 %26, 36, !dbg !79
  %144 = sext i32 %143 to i64, !dbg !80
  %145 = getelementptr float, ptr addrspace(1) %4, i64 %134, !dbg !81
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %144, !dbg !81
  %147 = getelementptr float, ptr addrspace(1) %4, i64 %135, !dbg !81
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %144, !dbg !81
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %18) #3, !dbg !82
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %18) #3, !dbg !82
  %151 = add i64 %142, 36, !dbg !83
  %152 = add i64 %141, 36, !dbg !83
  %153 = icmp slt i64 %142, 0, !dbg !84
  %154 = icmp slt i64 %141, 0, !dbg !84
  %155 = select i1 %153, i64 %151, i64 %142, !dbg !85
  %156 = select i1 %154, i64 %152, i64 %141, !dbg !85
  %157 = icmp ugt i64 %155, 35, !dbg !86
  %158 = icmp ugt i64 %156, 35, !dbg !86
  %.not46 = or i1 %157, %158, !dbg !87
  %159 = and i1 %18, %.not46, !dbg !87
  br i1 %159, label %160, label %161, !dbg !87

160:                                              ; preds = %140
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 77, ptr nonnull @assertFunc_1, i64 1), !dbg !87
  unreachable, !dbg !87

161:                                              ; preds = %140
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %162 = getelementptr float, ptr addrspace(1) %4, i64 %155, !dbg !88
  %163 = getelementptr float, ptr addrspace(1) %162, i64 %144, !dbg !88
  %164 = getelementptr float, ptr addrspace(1) %4, i64 %156, !dbg !88
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %144, !dbg !88
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %18) #3, !dbg !89
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %18) #3, !dbg !89
  %168 = insertelement <2 x i64> poison, i64 %102, i64 0, !dbg !90
  %169 = insertelement <2 x i64> %168, i64 %103, i64 1, !dbg !90
  %170 = mul <2 x i64> %169, splat (i64 6), !dbg !90
  %171 = insertelement <2 x i64> poison, i64 %112, i64 0, !dbg !91
  %172 = insertelement <2 x i64> %171, i64 %113, i64 1, !dbg !91
  %173 = add <2 x i64> %172, %170, !dbg !91
  %174 = add <2 x i64> %173, splat (i64 36), !dbg !92
  %175 = icmp slt <2 x i64> %173, zeroinitializer, !dbg !93
  %176 = select <2 x i1> %175, <2 x i64> %174, <2 x i64> %173, !dbg !94
  %177 = icmp ugt <2 x i64> %176, splat (i64 35), !dbg !95
  %shift = shufflevector <2 x i1> %177, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !96
  %178 = or <2 x i1> %177, %shift, !dbg !96
  %.not79 = extractelement <2 x i1> %178, i64 0, !dbg !96
  %179 = and i1 %18, %.not79, !dbg !96
  br i1 %179, label %180, label %181, !dbg !96

180:                                              ; preds = %161
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 94, ptr nonnull @assertFunc_2, i64 1), !dbg !96
  unreachable, !dbg !96

181:                                              ; preds = %161
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %182 = extractelement <2 x i64> %176, i64 0, !dbg !97
  %183 = getelementptr float, ptr addrspace(1) %4, i64 %182, !dbg !97
  %184 = getelementptr float, ptr addrspace(1) %183, i64 %144, !dbg !97
  %185 = extractelement <2 x i64> %176, i64 1, !dbg !97
  %186 = getelementptr float, ptr addrspace(1) %4, i64 %185, !dbg !97
  %187 = getelementptr float, ptr addrspace(1) %186, i64 %144, !dbg !97
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %18) #3, !dbg !98
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %18) #3, !dbg !98
  %190 = insertelement <2 x i64> poison, i64 %124, i64 0, !dbg !99
  %191 = insertelement <2 x i64> %190, i64 %125, i64 1, !dbg !99
  %192 = mul <2 x i64> %191, splat (i64 6), !dbg !99
  %193 = insertelement <2 x i64> poison, i64 %128, i64 0, !dbg !100
  %194 = insertelement <2 x i64> %193, i64 %129, i64 1, !dbg !100
  %195 = add <2 x i64> %194, %192, !dbg !100
  %196 = add <2 x i64> %195, splat (i64 36), !dbg !101
  %197 = icmp slt <2 x i64> %195, zeroinitializer, !dbg !102
  %198 = select <2 x i1> %197, <2 x i64> %196, <2 x i64> %195, !dbg !103
  %199 = icmp ugt <2 x i64> %198, splat (i64 35), !dbg !104
  %shift13 = shufflevector <2 x i1> %199, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !105
  %200 = or <2 x i1> %199, %shift13, !dbg !105
  %.not1012 = extractelement <2 x i1> %200, i64 0, !dbg !105
  %201 = and i1 %18, %.not1012, !dbg !105
  br i1 %201, label %202, label %203, !dbg !105

202:                                              ; preds = %181
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 110, ptr nonnull @assertFunc_3, i64 1), !dbg !105
  unreachable, !dbg !105

203:                                              ; preds = %181
  %204 = bitcast i32 %48 to float, !dbg !33
  %205 = sitofp i64 %117 to float, !dbg !106
  %206 = sitofp i64 %121 to float, !dbg !107
  %207 = bitcast i32 %64 to float, !dbg !40
  %208 = bitcast i32 %47 to float, !dbg !33
  %209 = sitofp i64 %116 to float, !dbg !106
  %210 = sitofp i64 %120 to float, !dbg !107
  %211 = bitcast i32 %63 to float, !dbg !40
  %212 = bitcast i32 %44 to float, !dbg !31
  %213 = fptosi float %212 to i64, !dbg !108
  %214 = sitofp i64 %213 to float, !dbg !109
  %215 = bitcast i32 %60 to float, !dbg !38
  %216 = fptosi float %215 to i64, !dbg !110
  %217 = sitofp i64 %216 to float, !dbg !111
  %218 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !82
  %219 = insertelement <2 x i32> %218, i32 %167, i64 1, !dbg !82
  %220 = bitcast <2 x i32> %219 to <2 x float>, !dbg !82
  %221 = bitcast i32 %75 to float, !dbg !46
  %222 = fptosi float %221 to i64, !dbg !112
  %223 = sitofp i64 %222 to float, !dbg !113
  %224 = bitcast i32 %79 to float, !dbg !48
  %225 = fptosi float %224 to i64, !dbg !114
  %226 = sitofp i64 %225 to float, !dbg !115
  %227 = insertelement <2 x float> poison, float %214, i64 0, !dbg !116
  %228 = insertelement <2 x float> %227, float %204, i64 1, !dbg !116
  %229 = insertelement <2 x float> poison, float %204, i64 0, !dbg !116
  %230 = insertelement <2 x float> %229, float %223, i64 1, !dbg !116
  %231 = fsub <2 x float> %228, %230, !dbg !116
  %232 = fadd <2 x float> %231, splat (float 1.000000e+00), !dbg !117
  %233 = insertelement <2 x float> poison, float %217, i64 0, !dbg !118
  %234 = insertelement <2 x float> %233, float %207, i64 1, !dbg !118
  %235 = insertelement <2 x float> poison, float %207, i64 0, !dbg !118
  %236 = insertelement <2 x float> %235, float %226, i64 1, !dbg !118
  %237 = fsub <2 x float> %234, %236, !dbg !118
  %238 = fadd <2 x float> %237, splat (float 1.000000e+00), !dbg !119
  %239 = fmul <2 x float> %232, %238, !dbg !120
  %240 = fmul <2 x float> %239, %220, !dbg !121
  %shift14 = shufflevector <2 x float> %240, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !122
  %241 = fadd <2 x float> %240, %shift14, !dbg !122
  %242 = sitofp i64 %85 to float, !dbg !123
  %243 = sitofp i64 %89 to float, !dbg !124
  %244 = bitcast i32 %43 to float, !dbg !31
  %245 = fptosi float %244 to i64, !dbg !108
  %246 = sitofp i64 %245 to float, !dbg !109
  %247 = bitcast i32 %59 to float, !dbg !38
  %248 = fptosi float %247 to i64, !dbg !110
  %249 = sitofp i64 %248 to float, !dbg !111
  %250 = insertelement <2 x i32> poison, i32 %149, i64 0, !dbg !82
  %251 = insertelement <2 x i32> %250, i32 %166, i64 1, !dbg !82
  %252 = bitcast <2 x i32> %251 to <2 x float>, !dbg !82
  %253 = bitcast i32 %74 to float, !dbg !46
  %254 = fptosi float %253 to i64, !dbg !112
  %255 = sitofp i64 %254 to float, !dbg !113
  %256 = bitcast i32 %78 to float, !dbg !48
  %257 = fptosi float %256 to i64, !dbg !114
  %258 = sitofp i64 %257 to float, !dbg !115
  %259 = insertelement <2 x float> poison, float %246, i64 0, !dbg !116
  %260 = insertelement <2 x float> %259, float %208, i64 1, !dbg !116
  %261 = insertelement <2 x float> poison, float %208, i64 0, !dbg !116
  %262 = insertelement <2 x float> %261, float %255, i64 1, !dbg !116
  %263 = fsub <2 x float> %260, %262, !dbg !116
  %264 = fadd <2 x float> %263, splat (float 1.000000e+00), !dbg !117
  %265 = insertelement <2 x float> poison, float %249, i64 0, !dbg !118
  %266 = insertelement <2 x float> %265, float %211, i64 1, !dbg !118
  %267 = insertelement <2 x float> poison, float %211, i64 0, !dbg !118
  %268 = insertelement <2 x float> %267, float %258, i64 1, !dbg !118
  %269 = fsub <2 x float> %266, %268, !dbg !118
  %270 = fadd <2 x float> %269, splat (float 1.000000e+00), !dbg !119
  %271 = fmul <2 x float> %264, %270, !dbg !120
  %272 = fmul <2 x float> %271, %252, !dbg !121
  %shift15 = shufflevector <2 x float> %272, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !122
  %273 = fadd <2 x float> %272, %shift15, !dbg !122
  %274 = sitofp i64 %84 to float, !dbg !123
  %275 = sitofp i64 %88 to float, !dbg !124
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %276 = extractelement <2 x i64> %198, i64 0, !dbg !125
  %277 = getelementptr float, ptr addrspace(1) %4, i64 %276, !dbg !125
  %278 = getelementptr float, ptr addrspace(1) %277, i64 %144, !dbg !125
  %279 = extractelement <2 x i64> %198, i64 1, !dbg !125
  %280 = getelementptr float, ptr addrspace(1) %4, i64 %279, !dbg !125
  %281 = getelementptr float, ptr addrspace(1) %280, i64 %144, !dbg !125
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 %18) #3, !dbg !126
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %281, i1 %18) #3, !dbg !126
  %284 = insertelement <2 x float> poison, float %274, i64 0, !dbg !127
  %285 = insertelement <2 x float> %284, float %208, i64 1, !dbg !127
  %286 = insertelement <2 x float> poison, float %208, i64 0, !dbg !127
  %287 = insertelement <2 x float> %286, float %209, i64 1, !dbg !127
  %288 = fsub <2 x float> %285, %287, !dbg !127
  %289 = fadd <2 x float> %288, splat (float 1.000000e+00), !dbg !128
  %290 = insertelement <2 x float> poison, float %211, i64 0, !dbg !129
  %291 = insertelement <2 x float> %290, float %210, i64 1, !dbg !129
  %292 = insertelement <2 x float> poison, float %275, i64 0, !dbg !129
  %293 = insertelement <2 x float> %292, float %211, i64 1, !dbg !129
  %294 = fsub <2 x float> %291, %293, !dbg !129
  %295 = fadd <2 x float> %294, splat (float 1.000000e+00), !dbg !129
  %296 = fmul <2 x float> %289, %295, !dbg !130
  %297 = insertelement <2 x i32> poison, i32 %188, i64 0, !dbg !98
  %298 = insertelement <2 x i32> %297, i32 %282, i64 1, !dbg !98
  %299 = bitcast <2 x i32> %298 to <2 x float>, !dbg !98
  %300 = fmul <2 x float> %296, %299, !dbg !131
  %301 = fadd <2 x float> %273, %300, !dbg !132
  %302 = insertelement <2 x float> poison, float %242, i64 0, !dbg !127
  %303 = insertelement <2 x float> %302, float %204, i64 1, !dbg !127
  %304 = insertelement <2 x float> poison, float %204, i64 0, !dbg !127
  %305 = insertelement <2 x float> %304, float %205, i64 1, !dbg !127
  %306 = fsub <2 x float> %303, %305, !dbg !127
  %307 = fadd <2 x float> %306, splat (float 1.000000e+00), !dbg !128
  %308 = insertelement <2 x float> poison, float %207, i64 0, !dbg !129
  %309 = insertelement <2 x float> %308, float %206, i64 1, !dbg !129
  %310 = insertelement <2 x float> poison, float %243, i64 0, !dbg !129
  %311 = insertelement <2 x float> %310, float %207, i64 1, !dbg !129
  %312 = fsub <2 x float> %309, %311, !dbg !129
  %313 = fadd <2 x float> %312, splat (float 1.000000e+00), !dbg !129
  %314 = fmul <2 x float> %307, %313, !dbg !130
  %315 = insertelement <2 x i32> poison, i32 %189, i64 0, !dbg !98
  %316 = insertelement <2 x i32> %315, i32 %283, i64 1, !dbg !98
  %317 = bitcast <2 x i32> %316 to <2 x float>, !dbg !98
  %318 = fmul <2 x float> %314, %317, !dbg !131
  %319 = fadd <2 x float> %241, %318, !dbg !132
  %shift16 = shufflevector <2 x float> %300, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !133
  %320 = fadd <2 x float> %301, %shift16, !dbg !133
  %shift17 = shufflevector <2 x float> %318, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !133
  %321 = fadd <2 x float> %319, %shift17, !dbg !133
  %322 = sext i32 %16 to i64, !dbg !134
  %323 = getelementptr float, ptr addrspace(1) %0, i64 %322, !dbg !134
  %bc = bitcast <2 x float> %320 to <2 x i32>, !dbg !135
  %324 = extractelement <2 x i32> %bc, i64 0, !dbg !135
  %bc18 = bitcast <2 x float> %321 to <2 x i32>, !dbg !135
  %325 = extractelement <2 x i32> %bc18, i64 0, !dbg !135
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %324, i32 %325, ptr addrspace(1) %323, i1 %18) #3, !dbg !135
  ret void, !dbg !136
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cg4pc7ap5v6yjpyyhz3zkyfmn7obvcah43zpo6kh3ptlcyjplzp5.py", directory: "inductor_cache/g4")
!4 = !{ptr @triton_poi_fused_add_mul_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_8", linkageName: "triton_poi_fused_add_mul_8", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 26, column: 21, scope: !11)
!18 = !DILocation(line: 24, column: 19, scope: !11)
!19 = !DILocation(line: 25, column: 19, scope: !11)
!20 = !DILocation(line: 26, column: 26, scope: !11)
!21 = !DILocation(line: 28, column: 19, scope: !11)
!22 = !DILocation(line: 27, column: 19, scope: !11)
!23 = !DILocation(line: 30, column: 26, scope: !11)
!24 = !DILocation(line: 31, column: 21, scope: !11)
!25 = !DILocation(line: 31, column: 27, scope: !11)
!26 = !DILocation(line: 32, column: 38, scope: !11)
!27 = !DILocation(line: 32, column: 47, scope: !11)
!28 = !DILocation(line: 32, column: 35, scope: !11)
!29 = !DILocation(line: 32, column: 43, scope: !11)
!30 = !DILocation(line: 32, column: 30, scope: !11)
!31 = !DILocation(line: 32, column: 52, scope: !11)
!32 = !DILocation(line: 33, column: 30, scope: !11)
!33 = !DILocation(line: 33, column: 52, scope: !11)
!34 = !DILocation(line: 34, column: 34, scope: !11)
!35 = !DILocation(line: 34, column: 39, scope: !11)
!36 = !DILocation(line: 34, column: 47, scope: !11)
!37 = !DILocation(line: 34, column: 30, scope: !11)
!38 = !DILocation(line: 34, column: 56, scope: !11)
!39 = !DILocation(line: 35, column: 31, scope: !11)
!40 = !DILocation(line: 35, column: 57, scope: !11)
!41 = !DILocation(line: 36, column: 40, scope: !11)
!42 = !DILocation(line: 36, column: 36, scope: !11)
!43 = !DILocation(line: 36, column: 31, scope: !11)
!44 = !DILocation(line: 36, column: 45, scope: !11)
!45 = !DILocation(line: 37, column: 31, scope: !11)
!46 = !DILocation(line: 37, column: 53, scope: !11)
!47 = !DILocation(line: 38, column: 31, scope: !11)
!48 = !DILocation(line: 38, column: 57, scope: !11)
!49 = !DILocation(line: 39, column: 31, scope: !11)
!50 = !DILocation(line: 39, column: 45, scope: !11)
!51 = !DILocation(line: 40, column: 31, scope: !11)
!52 = !DILocation(line: 40, column: 53, scope: !11)
!53 = !DILocation(line: 41, column: 31, scope: !11)
!54 = !DILocation(line: 41, column: 57, scope: !11)
!55 = !DILocation(line: 42, column: 39, scope: !11)
!56 = !DILocation(line: 42, column: 47, scope: !11)
!57 = !DILocation(line: 42, column: 36, scope: !11)
!58 = !DILocation(line: 42, column: 44, scope: !11)
!59 = !DILocation(line: 42, column: 77, scope: !11)
!60 = !DILocation(line: 42, column: 31, scope: !11)
!61 = !DILocation(line: 42, column: 86, scope: !11)
!62 = !DILocation(line: 43, column: 48, scope: !11)
!63 = !DILocation(line: 43, column: 81, scope: !11)
!64 = !DILocation(line: 43, column: 31, scope: !11)
!65 = !DILocation(line: 43, column: 90, scope: !11)
!66 = !DILocation(line: 44, column: 31, scope: !11)
!67 = !DILocation(line: 44, column: 53, scope: !11)
!68 = !DILocation(line: 45, column: 31, scope: !11)
!69 = !DILocation(line: 45, column: 57, scope: !11)
!70 = !DILocation(line: 46, column: 31, scope: !11)
!71 = !DILocation(line: 46, column: 86, scope: !11)
!72 = !DILocation(line: 47, column: 31, scope: !11)
!73 = !DILocation(line: 47, column: 90, scope: !11)
!74 = !DILocation(line: 59, column: 20, scope: !11)
!75 = !DILocation(line: 60, column: 20, scope: !11)
!76 = !DILocation(line: 61, column: 35, scope: !11)
!77 = !DILocation(line: 62, column: 38, scope: !11)
!78 = !DILocation(line: 62, column: 63, scope: !11)
!79 = !DILocation(line: 63, column: 42, scope: !11)
!80 = !DILocation(line: 63, column: 39, scope: !11)
!81 = !DILocation(line: 63, column: 31, scope: !11)
!82 = !DILocation(line: 63, column: 47, scope: !11)
!83 = !DILocation(line: 74, column: 20, scope: !11)
!84 = !DILocation(line: 75, column: 20, scope: !11)
!85 = !DILocation(line: 76, column: 35, scope: !11)
!86 = !DILocation(line: 77, column: 38, scope: !11)
!87 = !DILocation(line: 77, column: 63, scope: !11)
!88 = !DILocation(line: 78, column: 31, scope: !11)
!89 = !DILocation(line: 78, column: 47, scope: !11)
!90 = !DILocation(line: 89, column: 20, scope: !11)
!91 = !DILocation(line: 90, column: 20, scope: !11)
!92 = !DILocation(line: 91, column: 20, scope: !11)
!93 = !DILocation(line: 92, column: 20, scope: !11)
!94 = !DILocation(line: 93, column: 35, scope: !11)
!95 = !DILocation(line: 94, column: 38, scope: !11)
!96 = !DILocation(line: 94, column: 63, scope: !11)
!97 = !DILocation(line: 95, column: 31, scope: !11)
!98 = !DILocation(line: 95, column: 47, scope: !11)
!99 = !DILocation(line: 105, column: 20, scope: !11)
!100 = !DILocation(line: 106, column: 20, scope: !11)
!101 = !DILocation(line: 107, column: 20, scope: !11)
!102 = !DILocation(line: 108, column: 20, scope: !11)
!103 = !DILocation(line: 109, column: 35, scope: !11)
!104 = !DILocation(line: 110, column: 38, scope: !11)
!105 = !DILocation(line: 110, column: 63, scope: !11)
!106 = !DILocation(line: 98, column: 21, scope: !11)
!107 = !DILocation(line: 101, column: 21, scope: !11)
!108 = !DILocation(line: 48, column: 19, scope: !11)
!109 = !DILocation(line: 49, column: 19, scope: !11)
!110 = !DILocation(line: 53, column: 19, scope: !11)
!111 = !DILocation(line: 54, column: 19, scope: !11)
!112 = !DILocation(line: 65, column: 21, scope: !11)
!113 = !DILocation(line: 66, column: 21, scope: !11)
!114 = !DILocation(line: 69, column: 21, scope: !11)
!115 = !DILocation(line: 70, column: 21, scope: !11)
!116 = !DILocation(line: 50, column: 18, scope: !11)
!117 = !DILocation(line: 52, column: 18, scope: !11)
!118 = !DILocation(line: 55, column: 19, scope: !11)
!119 = !DILocation(line: 56, column: 20, scope: !11)
!120 = !DILocation(line: 57, column: 19, scope: !11)
!121 = !DILocation(line: 64, column: 20, scope: !11)
!122 = !DILocation(line: 80, column: 20, scope: !11)
!123 = !DILocation(line: 81, column: 21, scope: !11)
!124 = !DILocation(line: 84, column: 21, scope: !11)
!125 = !DILocation(line: 111, column: 31, scope: !11)
!126 = !DILocation(line: 111, column: 47, scope: !11)
!127 = !DILocation(line: 82, column: 20, scope: !11)
!128 = !DILocation(line: 83, column: 20, scope: !11)
!129 = !DILocation(line: 86, column: 19, scope: !11)
!130 = !DILocation(line: 87, column: 20, scope: !11)
!131 = !DILocation(line: 96, column: 20, scope: !11)
!132 = !DILocation(line: 97, column: 20, scope: !11)
!133 = !DILocation(line: 113, column: 20, scope: !11)
!134 = !DILocation(line: 114, column: 28, scope: !11)
!135 = !DILocation(line: 114, column: 40, scope: !11)
!136 = !DILocation(line: 114, column: 4, scope: !11)
