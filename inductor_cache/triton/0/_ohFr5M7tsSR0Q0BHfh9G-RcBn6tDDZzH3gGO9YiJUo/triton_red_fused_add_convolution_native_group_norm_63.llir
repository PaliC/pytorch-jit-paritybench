; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_add_convolution_native_group_norm_63(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = icmp slt i32 %9, 256, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 511, !dbg !12
  %13 = or disjoint i32 %12, 512, !dbg !12
  %14 = or disjoint i32 %12, 1024, !dbg !12
  %15 = or disjoint i32 %12, 1536, !dbg !12
  %16 = shl i32 %11, 2, !dbg !12
  %17 = and i32 %16, 2044, !dbg !12
  %18 = srem i32 %9, 64, !dbg !13
  %19 = shl i32 %9, 13, !dbg !14
  %20 = shl nsw i32 %18, 1, !dbg !15
  %21 = or disjoint i32 %19, %17
  %.idx = shl nuw nsw i32 %17, 3
  %22 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx
  %23 = shl nuw nsw i32 %17, 1
  %24 = or disjoint i32 %23, 2
  %25 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %24
  %26 = or disjoint i32 %23, 4
  %27 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %26
  %28 = or disjoint i32 %23, 6
  %29 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %28
  %.idx1 = shl nuw nsw i32 %12, 3
  %30 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1
  %.idx2 = shl nuw nsw i32 %13, 3
  %31 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2
  %.idx3 = shl nuw nsw i32 %14, 3
  %32 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3
  %.idx4 = shl nuw nsw i32 %15, 3
  %33 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4
  %34 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12
  %35 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13
  %36 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14
  %37 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15
  %38 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17
  %39 = sext i32 %21 to i64, !dbg !16
  %40 = getelementptr inbounds i8, ptr addrspace(3) %38, i32 4
  %41 = getelementptr inbounds i8, ptr addrspace(3) %38, i32 8
  %42 = getelementptr inbounds i8, ptr addrspace(3) %38, i32 12
  br label %43, !dbg !16

43:                                               ; preds = %8, %._crit_edge
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %8 ], [ %152, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %8 ], [ %153, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %8 ], [ %154, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %8 ], [ %155, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %8 ], [ %148, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %8 ], [ %149, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %8 ], [ %150, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %8 ], [ %151, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %8 ], [ %144, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %8 ], [ %145, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %8 ], [ %146, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %8 ], [ %147, %._crit_edge ]
  %56 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !17
  %57 = lshr i32 %56, 12, !dbg !17
  %58 = add nuw nsw i64 %indvars.iv, %39, !dbg !18
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !19
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #3, !dbg !20
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !20
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !20
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !20
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %65 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %22, <1 x i32> %65, i1 true) #3, !dbg !20
  %66 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %25, <1 x i32> %66, i1 true) #3, !dbg !20
  %67 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %27, <1 x i32> %67, i1 true) #3, !dbg !20
  %68 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %29, <1 x i32> %68, i1 true) #3, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %69 = load float, ptr addrspace(3) %30, align 8, !dbg !20
  %70 = load float, ptr addrspace(3) %31, align 8, !dbg !20
  %71 = load float, ptr addrspace(3) %32, align 8, !dbg !20
  %72 = load float, ptr addrspace(3) %33, align 8, !dbg !20
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !21
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #3, !dbg !22
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !22
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !22
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !22
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %79 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %22, <1 x i32> %79, i1 true) #3, !dbg !22
  %80 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %25, <1 x i32> %80, i1 true) #3, !dbg !22
  %81 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %27, <1 x i32> %81, i1 true) #3, !dbg !22
  %82 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %29, <1 x i32> %82, i1 true) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %83 = load float, ptr addrspace(3) %30, align 8, !dbg !22
  %84 = load float, ptr addrspace(3) %31, align 8, !dbg !22
  %85 = load float, ptr addrspace(3) %32, align 8, !dbg !22
  %86 = load float, ptr addrspace(3) %33, align 8, !dbg !22
  %87 = add nuw nsw i32 %57, %20, !dbg !23
  %88 = sext i32 %87 to i64, !dbg !24
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !24
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %10, i32 0, i1 %10) #3, !dbg !25
  %91 = bitcast i32 %90 to float, !dbg !25
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %10, i32 0, i1 %10) #3, !dbg !25
  %93 = bitcast i32 %92 to float, !dbg !25
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %10, i32 0, i1 %10) #3, !dbg !25
  %95 = bitcast i32 %94 to float, !dbg !25
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %10, i32 0, i1 %10) #3, !dbg !25
  %97 = bitcast i32 %96 to float, !dbg !25
  %98 = fadd float %83, %91, !dbg !26
  %99 = fadd float %84, %93, !dbg !26
  %100 = fadd float %85, %95, !dbg !26
  %101 = fadd float %86, %97, !dbg !26
  %102 = fadd float %69, %98, !dbg !27
  %103 = fadd float %70, %99, !dbg !27
  %104 = fadd float %71, %100, !dbg !27
  %105 = fadd float %72, %101, !dbg !27
  %106 = icmp eq i64 %indvars.iv, 0, !dbg !28
  br i1 %106, label %._crit_edge, label %107, !dbg !29

107:                                              ; preds = %43
  %108 = fsub float %102, %52, !dbg !33
  %109 = fsub float %103, %53, !dbg !33
  %110 = fsub float %104, %54, !dbg !33
  %111 = fsub float %105, %55, !dbg !33
  %112 = fadd float %44, 1.000000e+00, !dbg !34
  %113 = fadd float %45, 1.000000e+00, !dbg !34
  %114 = fadd float %46, 1.000000e+00, !dbg !34
  %115 = fadd float %47, 1.000000e+00, !dbg !34
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float %112) #3, !dbg !35
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %113) #3, !dbg !35
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float %114) #3, !dbg !35
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %115) #3, !dbg !35
  %120 = fadd float %52, %116, !dbg !36
  %121 = fadd float %53, %117, !dbg !36
  %122 = fadd float %54, %118, !dbg !36
  %123 = fadd float %55, %119, !dbg !36
  %124 = fsub float %102, %120, !dbg !37
  %125 = fsub float %103, %121, !dbg !37
  %126 = fsub float %104, %122, !dbg !37
  %127 = fsub float %105, %123, !dbg !37
  %128 = fmul float %108, %124, !dbg !38
  %129 = fmul float %109, %125, !dbg !38
  %130 = fmul float %110, %126, !dbg !38
  %131 = fmul float %111, %127, !dbg !38
  %132 = fadd float %48, %128, !dbg !39
  %133 = fadd float %49, %129, !dbg !39
  %134 = fadd float %50, %130, !dbg !39
  %135 = fadd float %51, %131, !dbg !39
  br label %._crit_edge, !dbg !29

._crit_edge:                                      ; preds = %43, %107
  %136 = phi float [ %132, %107 ], [ 0.000000e+00, %43 ], !dbg !32
  %137 = phi float [ %133, %107 ], [ 0.000000e+00, %43 ], !dbg !32
  %138 = phi float [ %134, %107 ], [ 0.000000e+00, %43 ], !dbg !32
  %139 = phi float [ %135, %107 ], [ 0.000000e+00, %43 ], !dbg !32
  %.pn11 = phi float [ %120, %107 ], [ %102, %43 ]
  %.pn9 = phi float [ %121, %107 ], [ %103, %43 ]
  %.pn7 = phi float [ %122, %107 ], [ %104, %43 ]
  %.pn5 = phi float [ %123, %107 ], [ %105, %43 ]
  %140 = phi float [ %112, %107 ], [ 1.000000e+00, %43 ], !dbg !32
  %141 = phi float [ %113, %107 ], [ 1.000000e+00, %43 ], !dbg !32
  %142 = phi float [ %114, %107 ], [ 1.000000e+00, %43 ], !dbg !32
  %143 = phi float [ %115, %107 ], [ 1.000000e+00, %43 ], !dbg !32
  %144 = select i1 %10, float %.pn11, float %52, !dbg !40
  %145 = select i1 %10, float %.pn9, float %53, !dbg !40
  %146 = select i1 %10, float %.pn7, float %54, !dbg !40
  %147 = select i1 %10, float %.pn5, float %55, !dbg !40
  %148 = select i1 %10, float %136, float %48, !dbg !41
  %149 = select i1 %10, float %137, float %49, !dbg !41
  %150 = select i1 %10, float %138, float %50, !dbg !41
  %151 = select i1 %10, float %139, float %51, !dbg !41
  %152 = select i1 %10, float %140, float %44, !dbg !42
  %153 = select i1 %10, float %141, float %45, !dbg !42
  %154 = select i1 %10, float %142, float %46, !dbg !42
  %155 = select i1 %10, float %143, float %47, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %156 = bitcast float %102 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %34, <1 x i32> %156, i1 true) #3, !dbg !43
  %157 = bitcast float %103 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %35, <1 x i32> %157, i1 true) #3, !dbg !43
  %158 = bitcast float %104 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %158, i1 true) #3, !dbg !43
  %159 = bitcast float %105 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %37, <1 x i32> %159, i1 true) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %.extract = load i32, ptr addrspace(3) %38, align 16, !dbg !43
  %.extract15 = load i32, ptr addrspace(3) %40, align 4, !dbg !43
  %.extract16 = load i32, ptr addrspace(3) %41, align 8, !dbg !43
  %.extract17 = load i32, ptr addrspace(3) %42, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %73, i1 %10) #3, !dbg !43
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !16
  %160 = icmp samesign ult i64 %indvars.iv, 6144, !dbg !16
  br i1 %160, label %43, label %161, !dbg !16

161:                                              ; preds = %._crit_edge
  %162 = lshr i32 %11, 5, !dbg !12
  %163 = and i32 %11, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %164 = fsub float %145, %144, !dbg !46
  %165 = fadd float %152, %153, !dbg !48
  %166 = fcmp oeq float %165, 0.000000e+00, !dbg !49
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float %165) #3, !dbg !50
  %168 = select i1 %166, float 0.000000e+00, float %167, !dbg !51
  %169 = fmul float %164, %168, !dbg !52
  %170 = fadd float %144, %169, !dbg !53
  %171 = fadd float %148, %149, !dbg !54
  %172 = fmul float %164, %164, !dbg !55
  %173 = fmul float %172, %152, !dbg !56
  %174 = fmul float %173, %168, !dbg !57
  %175 = fadd float %171, %174, !dbg !58
  %176 = fsub float %146, %170, !dbg !46
  %177 = fadd float %154, %165, !dbg !48
  %178 = fcmp oeq float %177, 0.000000e+00, !dbg !49
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float %177) #3, !dbg !50
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !51
  %181 = fmul float %180, %176, !dbg !52
  %182 = fadd float %170, %181, !dbg !53
  %183 = fadd float %150, %175, !dbg !54
  %184 = fmul float %176, %176, !dbg !55
  %185 = fmul float %165, %184, !dbg !56
  %186 = fmul float %180, %185, !dbg !57
  %187 = fadd float %183, %186, !dbg !58
  %188 = fsub float %147, %182, !dbg !46
  %189 = fadd float %155, %177, !dbg !48
  %190 = fcmp oeq float %189, 0.000000e+00, !dbg !49
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %155, float %189) #3, !dbg !50
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !51
  %193 = fmul float %192, %188, !dbg !52
  %194 = fadd float %182, %193, !dbg !53
  %195 = fadd float %151, %187, !dbg !54
  %196 = fmul float %188, %188, !dbg !55
  %197 = fmul float %177, %196, !dbg !56
  %198 = fmul float %192, %197, !dbg !57
  %199 = fadd float %195, %198, !dbg !58
  %200 = bitcast float %194 to i32, !dbg !44
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 16, i32 31), !dbg !44
  %202 = bitcast i32 %201 to float, !dbg !44
  %203 = bitcast float %199 to i32, !dbg !44
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 16, i32 31), !dbg !44
  %205 = bitcast i32 %204 to float, !dbg !44
  %206 = bitcast float %189 to i32, !dbg !44
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 16, i32 31), !dbg !44
  %208 = bitcast i32 %207 to float, !dbg !44
  %209 = fsub float %202, %194, !dbg !46
  %210 = fadd float %189, %208, !dbg !48
  %211 = fcmp oeq float %210, 0.000000e+00, !dbg !49
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float %210) #3, !dbg !50
  %213 = select i1 %211, float 0.000000e+00, float %212, !dbg !51
  %214 = fmul float %213, %209, !dbg !52
  %215 = fadd float %194, %214, !dbg !53
  %216 = fadd float %199, %205, !dbg !54
  %217 = fmul float %209, %209, !dbg !55
  %218 = fmul float %189, %217, !dbg !56
  %219 = fmul float %213, %218, !dbg !57
  %220 = fadd float %216, %219, !dbg !58
  %221 = bitcast float %215 to i32, !dbg !44
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 8, i32 31), !dbg !44
  %223 = bitcast i32 %222 to float, !dbg !44
  %224 = bitcast float %220 to i32, !dbg !44
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 8, i32 31), !dbg !44
  %226 = bitcast i32 %225 to float, !dbg !44
  %227 = bitcast float %210 to i32, !dbg !44
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 8, i32 31), !dbg !44
  %229 = bitcast i32 %228 to float, !dbg !44
  %230 = fsub float %223, %215, !dbg !46
  %231 = fadd float %210, %229, !dbg !48
  %232 = fcmp oeq float %231, 0.000000e+00, !dbg !49
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %229, float %231) #3, !dbg !50
  %234 = select i1 %232, float 0.000000e+00, float %233, !dbg !51
  %235 = fmul float %230, %234, !dbg !52
  %236 = fadd float %215, %235, !dbg !53
  %237 = fadd float %220, %226, !dbg !54
  %238 = fmul float %230, %230, !dbg !55
  %239 = fmul float %210, %238, !dbg !56
  %240 = fmul float %234, %239, !dbg !57
  %241 = fadd float %237, %240, !dbg !58
  %242 = bitcast float %236 to i32, !dbg !44
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 4, i32 31), !dbg !44
  %244 = bitcast i32 %243 to float, !dbg !44
  %245 = bitcast float %241 to i32, !dbg !44
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 4, i32 31), !dbg !44
  %247 = bitcast i32 %246 to float, !dbg !44
  %248 = bitcast float %231 to i32, !dbg !44
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 4, i32 31), !dbg !44
  %250 = bitcast i32 %249 to float, !dbg !44
  %251 = fsub float %244, %236, !dbg !46
  %252 = fadd float %231, %250, !dbg !48
  %253 = fcmp oeq float %252, 0.000000e+00, !dbg !49
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %250, float %252) #3, !dbg !50
  %255 = select i1 %253, float 0.000000e+00, float %254, !dbg !51
  %256 = fmul float %251, %255, !dbg !52
  %257 = fadd float %236, %256, !dbg !53
  %258 = fadd float %241, %247, !dbg !54
  %259 = fmul float %251, %251, !dbg !55
  %260 = fmul float %231, %259, !dbg !56
  %261 = fmul float %255, %260, !dbg !57
  %262 = fadd float %258, %261, !dbg !58
  %263 = bitcast float %257 to i32, !dbg !44
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 2, i32 31), !dbg !44
  %265 = bitcast i32 %264 to float, !dbg !44
  %266 = bitcast float %262 to i32, !dbg !44
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 2, i32 31), !dbg !44
  %268 = bitcast i32 %267 to float, !dbg !44
  %269 = bitcast float %252 to i32, !dbg !44
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 2, i32 31), !dbg !44
  %271 = bitcast i32 %270 to float, !dbg !44
  %272 = fsub float %265, %257, !dbg !46
  %273 = fadd float %252, %271, !dbg !48
  %274 = fcmp oeq float %273, 0.000000e+00, !dbg !49
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %271, float %273) #3, !dbg !50
  %276 = select i1 %274, float 0.000000e+00, float %275, !dbg !51
  %277 = fmul float %272, %276, !dbg !52
  %278 = fadd float %257, %277, !dbg !53
  %279 = fadd float %262, %268, !dbg !54
  %280 = fmul float %272, %272, !dbg !55
  %281 = fmul float %252, %280, !dbg !56
  %282 = fmul float %276, %281, !dbg !57
  %283 = fadd float %279, %282, !dbg !58
  %284 = bitcast float %278 to i32, !dbg !44
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 1, i32 31), !dbg !44
  %286 = bitcast i32 %285 to float, !dbg !44
  %287 = bitcast float %283 to i32, !dbg !44
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 1, i32 31), !dbg !44
  %289 = bitcast i32 %288 to float, !dbg !44
  %290 = bitcast float %273 to i32, !dbg !44
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 1, i32 31), !dbg !44
  %292 = bitcast i32 %291 to float, !dbg !44
  %293 = fsub float %286, %278, !dbg !46
  %294 = fadd float %273, %292, !dbg !48
  %295 = fcmp oeq float %294, 0.000000e+00, !dbg !49
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %292, float %294) #3, !dbg !50
  %297 = select i1 %295, float 0.000000e+00, float %296, !dbg !51
  %298 = fmul float %293, %297, !dbg !52
  %299 = fadd float %278, %298, !dbg !53
  %300 = fadd float %283, %289, !dbg !54
  %301 = fmul float %293, %293, !dbg !55
  %302 = fmul float %273, %301, !dbg !56
  %303 = fmul float %297, %302, !dbg !57
  %304 = fadd float %300, %303, !dbg !58
  %305 = icmp eq i32 %163, 0, !dbg !44
  %306 = and i32 %162, 15, !dbg !44
  %307 = getelementptr float, ptr addrspace(3) @global_smem, i32 %306, !dbg !44
  %308 = bitcast float %299 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %308, i1 %305) #3, !dbg !44
  %309 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %306, !dbg !44
  %310 = bitcast float %304 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 %305) #3, !dbg !44
  %311 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %306, !dbg !44
  %312 = bitcast float %294 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 %305) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %313 = icmp slt i32 %11, 16, !dbg !44
  %314 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !44
  %315 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %314, i1 %313) #3, !dbg !44
  %316 = bitcast i32 %315 to float, !dbg !44
  %317 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %11, !dbg !44
  %318 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %317, i1 %313) #3, !dbg !44
  %319 = bitcast i32 %318 to float, !dbg !44
  %320 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %11, !dbg !44
  %321 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %320, i1 %313) #3, !dbg !44
  %322 = bitcast i32 %321 to float, !dbg !44
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 8, i32 31), !dbg !44
  %324 = bitcast i32 %323 to float, !dbg !44
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 8, i32 31), !dbg !44
  %326 = bitcast i32 %325 to float, !dbg !44
  %327 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 8, i32 31), !dbg !44
  %328 = bitcast i32 %327 to float, !dbg !44
  %329 = fsub float %324, %316, !dbg !46
  %330 = fadd float %322, %328, !dbg !48
  %331 = fcmp oeq float %330, 0.000000e+00, !dbg !49
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %328, float %330) #3, !dbg !50
  %333 = select i1 %331, float 0.000000e+00, float %332, !dbg !51
  %334 = fmul float %329, %333, !dbg !52
  %335 = fadd float %334, %316, !dbg !53
  %336 = fadd float %319, %326, !dbg !54
  %337 = fmul float %329, %329, !dbg !55
  %338 = fmul float %337, %322, !dbg !56
  %339 = fmul float %338, %333, !dbg !57
  %340 = fadd float %336, %339, !dbg !58
  %341 = bitcast float %335 to i32, !dbg !44
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %341, i32 4, i32 31), !dbg !44
  %343 = bitcast i32 %342 to float, !dbg !44
  %344 = bitcast float %340 to i32, !dbg !44
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 4, i32 31), !dbg !44
  %346 = bitcast i32 %345 to float, !dbg !44
  %347 = bitcast float %330 to i32, !dbg !44
  %348 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %347, i32 4, i32 31), !dbg !44
  %349 = bitcast i32 %348 to float, !dbg !44
  %350 = fsub float %343, %335, !dbg !46
  %351 = fadd float %330, %349, !dbg !48
  %352 = fcmp oeq float %351, 0.000000e+00, !dbg !49
  %353 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %349, float %351) #3, !dbg !50
  %354 = select i1 %352, float 0.000000e+00, float %353, !dbg !51
  %355 = fmul float %350, %354, !dbg !52
  %356 = fadd float %335, %355, !dbg !53
  %357 = fadd float %340, %346, !dbg !54
  %358 = fmul float %350, %350, !dbg !55
  %359 = fmul float %330, %358, !dbg !56
  %360 = fmul float %354, %359, !dbg !57
  %361 = fadd float %357, %360, !dbg !58
  %362 = bitcast float %356 to i32, !dbg !44
  %363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %362, i32 2, i32 31), !dbg !44
  %364 = bitcast i32 %363 to float, !dbg !44
  %365 = bitcast float %361 to i32, !dbg !44
  %366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %365, i32 2, i32 31), !dbg !44
  %367 = bitcast i32 %366 to float, !dbg !44
  %368 = bitcast float %351 to i32, !dbg !44
  %369 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %368, i32 2, i32 31), !dbg !44
  %370 = bitcast i32 %369 to float, !dbg !44
  %371 = fsub float %364, %356, !dbg !46
  %372 = fadd float %351, %370, !dbg !48
  %373 = fcmp oeq float %372, 0.000000e+00, !dbg !49
  %374 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %370, float %372) #3, !dbg !50
  %375 = select i1 %373, float 0.000000e+00, float %374, !dbg !51
  %376 = fmul float %371, %375, !dbg !52
  %377 = fadd float %356, %376, !dbg !53
  %378 = fadd float %361, %367, !dbg !54
  %379 = fmul float %371, %371, !dbg !55
  %380 = fmul float %351, %379, !dbg !56
  %381 = fmul float %375, %380, !dbg !57
  %382 = fadd float %378, %381, !dbg !58
  %383 = bitcast float %377 to i32, !dbg !44
  %384 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %383, i32 1, i32 31), !dbg !44
  %385 = bitcast i32 %384 to float, !dbg !44
  %386 = bitcast float %382 to i32, !dbg !44
  %387 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %386, i32 1, i32 31), !dbg !44
  %388 = bitcast i32 %387 to float, !dbg !44
  %389 = bitcast float %372 to i32, !dbg !44
  %390 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %389, i32 1, i32 31), !dbg !44
  %391 = bitcast i32 %390 to float, !dbg !44
  %392 = fsub float %385, %377, !dbg !46
  %393 = fadd float %372, %391, !dbg !48
  %394 = fcmp oeq float %393, 0.000000e+00, !dbg !49
  %395 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %391, float %393) #3, !dbg !50
  %396 = select i1 %394, float 0.000000e+00, float %395, !dbg !51
  %397 = fmul float %392, %396, !dbg !52
  %398 = fadd float %377, %397, !dbg !53
  %399 = fadd float %382, %388, !dbg !54
  %400 = fmul float %392, %392, !dbg !55
  %401 = fmul float %372, %400, !dbg !56
  %402 = fmul float %396, %401, !dbg !57
  %403 = fadd float %399, %402, !dbg !58
  %404 = and i32 %11, 15, !dbg !44
  %405 = icmp eq i32 %404, 0, !dbg !44
  %406 = and i1 %313, %405, !dbg !44
  %407 = bitcast float %398 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, <1 x i32> %407, i1 %406) #3, !dbg !44
  %408 = bitcast float %403 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %408, i1 %406) #3, !dbg !44
  %409 = bitcast float %393 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %320, <1 x i32> %409, i1 %406) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %410 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !44
  %411 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !44
  %412 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !44
  %413 = sext i32 %9 to i64, !dbg !59
  %414 = getelementptr float, ptr addrspace(1) %3, i64 %413, !dbg !59
  %415 = icmp eq i32 %12, 0, !dbg !60
  %416 = and i1 %415, %10, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %410, ptr addrspace(1) %414, i1 %416) #3, !dbg !60
  %417 = getelementptr float, ptr addrspace(1) %4, i64 %413, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %411, ptr addrspace(1) %417, i1 %416) #3, !dbg !62
  %418 = getelementptr float, ptr addrspace(1) %5, i64 %413, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %412, ptr addrspace(1) %418, i1 %416) #3, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck3pestybr5hund6gj36zztnwb2vzmar3d7zyn5eiielzo2k377r.py", directory: "inductor_cache/k3")
!4 = !{ptr @triton_red_fused_add_convolution_native_group_norm_63, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_convolution_native_group_norm_63, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_convolution_native_group_norm_63", linkageName: "triton_red_fused_add_convolution_native_group_norm_63", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 36, column: 44, scope: !7)
!15 = !DILocation(line: 38, column: 41, scope: !7)
!16 = !DILocation(line: 31, column: 36, scope: !7)
!17 = !DILocation(line: 35, column: 23, scope: !7)
!18 = !DILocation(line: 36, column: 39, scope: !7)
!19 = !DILocation(line: 36, column: 34, scope: !7)
!20 = !DILocation(line: 36, column: 49, scope: !7)
!21 = !DILocation(line: 37, column: 38, scope: !7)
!22 = !DILocation(line: 37, column: 53, scope: !7)
!23 = !DILocation(line: 38, column: 39, scope: !7)
!24 = !DILocation(line: 38, column: 34, scope: !7)
!25 = !DILocation(line: 38, column: 46, scope: !7)
!26 = !DILocation(line: 39, column: 22, scope: !7)
!27 = !DILocation(line: 40, column: 22, scope: !7)
!28 = !DILocation(line: 43, column: 62, scope: !7)
!29 = !DILocation(line: 178, column: 7, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 43, column: 51, scope: !7)
!33 = !DILocation(line: 183, column: 24, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 184, column: 30, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 185, column: 34, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 185, column: 26, scope: !30, inlinedAt: !32)
!37 = !DILocation(line: 186, column: 39, scope: !30, inlinedAt: !32)
!38 = !DILocation(line: 186, column: 31, scope: !30, inlinedAt: !32)
!39 = !DILocation(line: 186, column: 22, scope: !30, inlinedAt: !32)
!40 = !DILocation(line: 45, column: 60, scope: !7)
!41 = !DILocation(line: 46, column: 56, scope: !7)
!42 = !DILocation(line: 47, column: 64, scope: !7)
!43 = !DILocation(line: 48, column: 53, scope: !7)
!44 = !DILocation(line: 204, column: 46, scope: !30, inlinedAt: !45)
!45 = !DILocation(line: 50, column: 41, scope: !7)
!46 = !DILocation(line: 192, column: 21, scope: !47, inlinedAt: !45)
!47 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!48 = !DILocation(line: 193, column: 28, scope: !47, inlinedAt: !45)
!49 = !DILocation(line: 194, column: 39, scope: !47, inlinedAt: !45)
!50 = !DILocation(line: 194, column: 60, scope: !47, inlinedAt: !45)
!51 = !DILocation(line: 194, column: 49, scope: !47, inlinedAt: !45)
!52 = !DILocation(line: 196, column: 25, scope: !47, inlinedAt: !45)
!53 = !DILocation(line: 196, column: 17, scope: !47, inlinedAt: !45)
!54 = !DILocation(line: 197, column: 15, scope: !47, inlinedAt: !45)
!55 = !DILocation(line: 197, column: 30, scope: !47, inlinedAt: !45)
!56 = !DILocation(line: 197, column: 38, scope: !47, inlinedAt: !45)
!57 = !DILocation(line: 197, column: 49, scope: !47, inlinedAt: !45)
!58 = !DILocation(line: 197, column: 22, scope: !47, inlinedAt: !45)
!59 = !DILocation(line: 55, column: 25, scope: !7)
!60 = !DILocation(line: 55, column: 36, scope: !7)
!61 = !DILocation(line: 56, column: 25, scope: !7)
!62 = !DILocation(line: 56, column: 36, scope: !7)
!63 = !DILocation(line: 57, column: 25, scope: !7)
!64 = !DILocation(line: 57, column: 36, scope: !7)
!65 = !DILocation(line: 57, column: 4, scope: !7)
