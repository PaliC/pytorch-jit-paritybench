; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_max_pool2d_with_indices_relu_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = and i32 %10, 127, !dbg !12
  %14 = or disjoint i32 %13, 128, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %13, !dbg !13
  %17 = or disjoint i32 %9, %14, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = icmp slt i32 %18, 16, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %20 = sdiv i32 %.frozen, 512, !dbg !16
  %21 = mul i32 %20, 512, !dbg !17
  %.decomposed = sub i32 %.frozen, %21, !dbg !17
  %22 = shl i32 %18, 9, !dbg !18
  %23 = add i32 %.decomposed, %22, !dbg !19
  %24 = shl i32 %20, 13, !dbg !20
  %25 = add i32 %23, %24, !dbg !21
  %26 = sext i32 %25 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !22
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %19) #2, !dbg !23
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !23
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !23
  %31 = bitcast i32 %29 to float, !dbg !23
  %32 = bitcast i32 %30 to float, !dbg !23
  %33 = sext i32 %.decomposed to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !24
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #2, !dbg !25
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !25
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !25
  %38 = bitcast i32 %36 to float, !dbg !25
  %39 = bitcast i32 %37 to float, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !26
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %19) #2, !dbg !27
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !27
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !27
  %44 = bitcast i32 %42 to float, !dbg !27
  %45 = bitcast i32 %43 to float, !dbg !27
  %46 = fadd float %31, %38, !dbg !28
  %47 = fadd float %32, %39, !dbg !28
  %48 = fcmp olt float %46, 0.000000e+00, !dbg !29
  %49 = fcmp olt float %47, 0.000000e+00, !dbg !29
  %50 = select i1 %48, float 0.000000e+00, float %46, !dbg !33
  %51 = select i1 %49, float 0.000000e+00, float %47, !dbg !33
  %52 = fadd float %38, %44, !dbg !34
  %53 = fadd float %39, %45, !dbg !34
  %54 = fcmp olt float %52, 0.000000e+00, !dbg !35
  %55 = fcmp olt float %53, 0.000000e+00, !dbg !35
  %56 = select i1 %54, float 0.000000e+00, float %52, !dbg !37
  %57 = select i1 %55, float 0.000000e+00, float %53, !dbg !37
  %58 = shl i32 %16, 4, !dbg !38
  %59 = shl i32 %17, 4, !dbg !38
  %60 = add i32 %58, %18, !dbg !39
  %61 = add i32 %59, %18, !dbg !39
  %62 = sext i32 %60 to i64, !dbg !40
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !40
  %64 = sext i32 %61 to i64, !dbg !40
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %64, !dbg !40
  %.idx = shl nuw nsw i32 %12, 3, !dbg !41
  %66 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !41
  %67 = bitcast float %50 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #2, !dbg !41
  %68 = shl nuw nsw i32 %12, 1, !dbg !41
  %69 = or disjoint i32 %68, 2, !dbg !41
  %70 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %69, !dbg !41
  %71 = bitcast float %51 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #2, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %.idx1 = shl nuw nsw i32 %13, 3, !dbg !41
  %72 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !41
  %73 = load i32, ptr addrspace(3) %72, align 8, !dbg !41
  %.idx2 = shl nuw nsw i32 %14, 3, !dbg !41
  %74 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !41
  %75 = load i32, ptr addrspace(3) %74, align 8, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %73, ptr addrspace(1) %63, i1 %19) #2, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %75, ptr addrspace(1) %65, i1 %19) #2, !dbg !41
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %62, !dbg !42
  %77 = getelementptr float, ptr addrspace(1) %4, i64 %64, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %78 = bitcast float %56 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %78, i1 true) #2, !dbg !43
  %79 = bitcast float %57 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %79, i1 true) #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %80 = load i32, ptr addrspace(3) %72, align 8, !dbg !43
  %81 = load i32, ptr addrspace(3) %74, align 8, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %80, ptr addrspace(1) %76, i1 %19) #2, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %81, ptr addrspace(1) %77, i1 %19) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5mdcsfiispsbpsfzld362fmfaicaouv6unhc3fov3msbm476leq.py", directory: "inductor_cache/5m")
!4 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_relu_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_relu_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_max_pool2d_with_indices_relu_23", linkageName: "triton_poi_fused_convolution_max_pool2d_with_indices_relu_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 49, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 54, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 54, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 37, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !36)
!36 = !DILocation(line: 39, column: 40, scope: !7)
!37 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !36)
!38 = !DILocation(line: 40, column: 33, scope: !7)
!39 = !DILocation(line: 40, column: 30, scope: !7)
!40 = !DILocation(line: 40, column: 25, scope: !7)
!41 = !DILocation(line: 40, column: 44, scope: !7)
!42 = !DILocation(line: 41, column: 25, scope: !7)
!43 = !DILocation(line: 41, column: 44, scope: !7)
!44 = !DILocation(line: 41, column: 4, scope: !7)
