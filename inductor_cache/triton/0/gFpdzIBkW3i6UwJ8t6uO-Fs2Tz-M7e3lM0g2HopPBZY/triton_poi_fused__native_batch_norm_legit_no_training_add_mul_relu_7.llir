; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %13 = shl i32 %12, 5, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = lshr i32 %14, 3, !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = or disjoint i32 %16, 16, !dbg !12
  %18 = shl i32 %14, 2, !dbg !12
  %19 = and i32 %18, 28, !dbg !12
  %20 = or disjoint i32 %13, %16, !dbg !13
  %21 = or disjoint i32 %13, %17, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %23 = shl i32 %22, 5, !dbg !15
  %24 = or disjoint i32 %23, %19, !dbg !16
  %25 = icmp slt i32 %24, 1152, !dbg !17
  %26 = mul i32 %20, 1152, !dbg !18
  %27 = mul i32 %21, 1152, !dbg !18
  %28 = add i32 %24, %26, !dbg !19
  %29 = add i32 %24, %27, !dbg !19
  %30 = sext i32 %28 to i64, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !20
  %32 = sext i32 %29 to i64, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !20
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %25) #4, !dbg !21
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %25) #4, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !22
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %25) #4, !dbg !23
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %25) #4, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !24
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %25) #4, !dbg !25
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %25) #4, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !26
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %25) #4, !dbg !27
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %25) #4, !dbg !27
  %48 = sext i32 %24 to i64, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !28
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %25) #4, !dbg !29
  %51 = getelementptr float, ptr addrspace(1) %5, i64 %48, !dbg !30
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %25) #4, !dbg !31
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !31
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !31
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !31
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !31
  %57 = bitcast i32 %53 to float, !dbg !31
  %58 = bitcast i32 %54 to float, !dbg !31
  %59 = bitcast i32 %55 to float, !dbg !31
  %60 = bitcast i32 %56 to float, !dbg !31
  %61 = getelementptr float, ptr addrspace(1) %6, i64 %48, !dbg !32
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %25) #4, !dbg !33
  %63 = getelementptr float, ptr addrspace(1) %7, i64 %48, !dbg !34
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %25) #4, !dbg !35
  %65 = fadd float %57, 0x3EE4F8B580000000, !dbg !36
  %66 = fadd float %58, 0x3EE4F8B580000000, !dbg !36
  %67 = fadd float %59, 0x3EE4F8B580000000, !dbg !36
  %68 = fadd float %60, 0x3EE4F8B580000000, !dbg !36
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %69, 0, !dbg !37
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %70, 0, !dbg !37
  br i1 %.not.i, label %76, label %71, !dbg !37

71:                                               ; preds = %11
  br i1 %.not1.i, label %74, label %72, !dbg !37

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

76:                                               ; preds = %11
  br i1 %.not1.i, label %79, label %77, !dbg !37

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %72, %74, %77, %79
  %.0.i = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !37
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i15 = icmp eq i32 %81, 0, !dbg !37
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i18 = icmp eq i32 %82, 0, !dbg !37
  br i1 %.not.i15, label %88, label %83, !dbg !37

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %86, label %84, !dbg !37

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #4, !dbg !37
  br label %__nv_sqrtf.exit19, !dbg !37

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #4, !dbg !37
  br label %__nv_sqrtf.exit19, !dbg !37

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %91, label %89, !dbg !37

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #4, !dbg !37
  br label %__nv_sqrtf.exit19, !dbg !37

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #4, !dbg !37
  br label %__nv_sqrtf.exit19, !dbg !37

__nv_sqrtf.exit19:                                ; preds = %84, %86, %89, %91
  %.0.i17 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !37
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i20 = icmp eq i32 %93, 0, !dbg !37
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i23 = icmp eq i32 %94, 0, !dbg !37
  br i1 %.not.i20, label %100, label %95, !dbg !37

95:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %98, label %96, !dbg !37

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #4, !dbg !37
  br label %__nv_sqrtf.exit24, !dbg !37

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #4, !dbg !37
  br label %__nv_sqrtf.exit24, !dbg !37

100:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %103, label %101, !dbg !37

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #4, !dbg !37
  br label %__nv_sqrtf.exit24, !dbg !37

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #4, !dbg !37
  br label %__nv_sqrtf.exit24, !dbg !37

__nv_sqrtf.exit24:                                ; preds = %96, %98, %101, %103
  %.0.i22 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !37
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i25 = icmp eq i32 %105, 0, !dbg !37
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i28 = icmp eq i32 %106, 0, !dbg !37
  br i1 %.not.i25, label %112, label %107, !dbg !37

107:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %110, label %108, !dbg !37

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #4, !dbg !37
  br label %__nv_sqrtf.exit29, !dbg !37

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #4, !dbg !37
  br label %__nv_sqrtf.exit29, !dbg !37

112:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %115, label %113, !dbg !37

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #4, !dbg !37
  br label %__nv_sqrtf.exit29, !dbg !37

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #4, !dbg !37
  br label %__nv_sqrtf.exit29, !dbg !37

__nv_sqrtf.exit29:                                ; preds = %108, %110, %113, %115
  %.0.i27 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !37
  %117 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !27
  %118 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !29
  %119 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !27
  %120 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !29
  %121 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !27
  %122 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !29
  %123 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !27
  %124 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !29
  %125 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !27
  %126 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !27
  %127 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !27
  %128 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !27
  %129 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !21
  %130 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !23
  %131 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !25
  %132 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !21
  %133 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !23
  %134 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !25
  %135 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !21
  %136 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !23
  %137 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !25
  %138 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !21
  %139 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !23
  %140 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !25
  %141 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !21
  %142 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !23
  %143 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !25
  %144 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !21
  %145 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !23
  %146 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !25
  %147 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !21
  %148 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !23
  %149 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !25
  %150 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !21
  %151 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !23
  %152 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !25
  %153 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !35
  %154 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !35
  %155 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !35
  %156 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !35
  %157 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !33
  %158 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !33
  %159 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !33
  %160 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !33
  %161 = or disjoint i32 %13, %19, !dbg !13
  %.frozen = freeze i32 %161, !dbg !38
  %162 = sdiv i32 %.frozen, 4096, !dbg !38
  %163 = mul i32 %162, 4096, !dbg !39
  %.decomposed = sub i32 %.frozen, %163, !dbg !39
  %164 = or disjoint i32 %23, %17, !dbg !16
  %165 = icmp slt i32 %164, 1152, !dbg !17
  %166 = or disjoint i32 %23, %16, !dbg !16
  %167 = icmp slt i32 %166, 1152, !dbg !17
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !40
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !40
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !40
  %172 = insertelement <4 x i32> poison, i32 %118, i64 0, !dbg !29
  %173 = insertelement <4 x i32> %172, i32 %120, i64 1, !dbg !29
  %174 = insertelement <4 x i32> %173, i32 %122, i64 2, !dbg !29
  %175 = insertelement <4 x i32> %174, i32 %124, i64 3, !dbg !29
  %176 = bitcast <4 x i32> %175 to <4 x float>, !dbg !29
  %177 = shufflevector <4 x float> %176, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %178 = insertelement <8 x i32> poison, i32 %117, i64 0, !dbg !27
  %179 = insertelement <8 x i32> %178, i32 %119, i64 1, !dbg !27
  %180 = insertelement <8 x i32> %179, i32 %121, i64 2, !dbg !27
  %181 = insertelement <8 x i32> %180, i32 %123, i64 3, !dbg !27
  %182 = insertelement <8 x i32> %181, i32 %125, i64 4, !dbg !27
  %183 = insertelement <8 x i32> %182, i32 %126, i64 5, !dbg !27
  %184 = insertelement <8 x i32> %183, i32 %127, i64 6, !dbg !27
  %185 = insertelement <8 x i32> %184, i32 %128, i64 7, !dbg !27
  %186 = bitcast <8 x i32> %185 to <8 x float>, !dbg !27
  %187 = fsub <8 x float> %186, %177, !dbg !41
  %188 = insertelement <8 x i32> poison, i32 %129, i64 0, !dbg !21
  %189 = insertelement <8 x i32> %188, i32 %132, i64 1, !dbg !21
  %190 = insertelement <8 x i32> %189, i32 %135, i64 2, !dbg !21
  %191 = insertelement <8 x i32> %190, i32 %138, i64 3, !dbg !21
  %192 = insertelement <8 x i32> %191, i32 %141, i64 4, !dbg !21
  %193 = insertelement <8 x i32> %192, i32 %144, i64 5, !dbg !21
  %194 = insertelement <8 x i32> %193, i32 %147, i64 6, !dbg !21
  %195 = insertelement <8 x i32> %194, i32 %150, i64 7, !dbg !21
  %196 = bitcast <8 x i32> %195 to <8 x float>, !dbg !21
  %197 = insertelement <8 x i32> poison, i32 %130, i64 0, !dbg !23
  %198 = insertelement <8 x i32> %197, i32 %133, i64 1, !dbg !23
  %199 = insertelement <8 x i32> %198, i32 %136, i64 2, !dbg !23
  %200 = insertelement <8 x i32> %199, i32 %139, i64 3, !dbg !23
  %201 = insertelement <8 x i32> %200, i32 %142, i64 4, !dbg !23
  %202 = insertelement <8 x i32> %201, i32 %145, i64 5, !dbg !23
  %203 = insertelement <8 x i32> %202, i32 %148, i64 6, !dbg !23
  %204 = insertelement <8 x i32> %203, i32 %151, i64 7, !dbg !23
  %205 = bitcast <8 x i32> %204 to <8 x float>, !dbg !23
  %206 = fadd <8 x float> %196, %205, !dbg !42
  %207 = insertelement <8 x i32> poison, i32 %131, i64 0, !dbg !25
  %208 = insertelement <8 x i32> %207, i32 %134, i64 1, !dbg !25
  %209 = insertelement <8 x i32> %208, i32 %137, i64 2, !dbg !25
  %210 = insertelement <8 x i32> %209, i32 %140, i64 3, !dbg !25
  %211 = insertelement <8 x i32> %210, i32 %143, i64 4, !dbg !25
  %212 = insertelement <8 x i32> %211, i32 %146, i64 5, !dbg !25
  %213 = insertelement <8 x i32> %212, i32 %149, i64 6, !dbg !25
  %214 = insertelement <8 x i32> %213, i32 %152, i64 7, !dbg !25
  %215 = bitcast <8 x i32> %214 to <8 x float>, !dbg !25
  %216 = fadd <8 x float> %206, %215, !dbg !43
  %217 = insertelement <4 x i32> poison, i32 %153, i64 0, !dbg !35
  %218 = insertelement <4 x i32> %217, i32 %154, i64 1, !dbg !35
  %219 = insertelement <4 x i32> %218, i32 %155, i64 2, !dbg !35
  %220 = insertelement <4 x i32> %219, i32 %156, i64 3, !dbg !35
  %221 = bitcast <4 x i32> %220 to <4 x float>, !dbg !35
  %222 = shufflevector <4 x float> %221, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !35
  %223 = insertelement <4 x i32> poison, i32 %157, i64 0, !dbg !33
  %224 = insertelement <4 x i32> %223, i32 %158, i64 1, !dbg !33
  %225 = insertelement <4 x i32> %224, i32 %159, i64 2, !dbg !33
  %226 = insertelement <4 x i32> %225, i32 %160, i64 3, !dbg !33
  %227 = bitcast <4 x i32> %226 to <4 x float>, !dbg !33
  %228 = shufflevector <4 x float> %227, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %229 = insertelement <8 x float> poison, float %171, i64 0, !dbg !44
  %230 = insertelement <8 x float> %229, float %170, i64 1, !dbg !44
  %231 = insertelement <8 x float> %230, float %169, i64 2, !dbg !44
  %232 = insertelement <8 x float> %231, float %168, i64 3, !dbg !44
  %233 = shufflevector <8 x float> %232, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !44
  %234 = fmul <8 x float> %187, %233, !dbg !44
  %235 = fmul <8 x float> %234, %228, !dbg !45
  %236 = fadd <8 x float> %235, %222, !dbg !46
  %237 = fadd <8 x float> %216, %236, !dbg !47
  %238 = fcmp olt <8 x float> %237, zeroinitializer, !dbg !48
  %239 = extractelement <8 x i1> %238, i64 7, !dbg !52
  %240 = extractelement <8 x float> %237, i64 7, !dbg !52
  %241 = select i1 %239, float 0.000000e+00, float %240, !dbg !52
  %242 = extractelement <8 x i1> %238, i64 6, !dbg !52
  %243 = extractelement <8 x float> %237, i64 6, !dbg !52
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !52
  %245 = extractelement <8 x i1> %238, i64 5, !dbg !52
  %246 = extractelement <8 x float> %237, i64 5, !dbg !52
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !52
  %248 = extractelement <8 x i1> %238, i64 4, !dbg !52
  %249 = extractelement <8 x float> %237, i64 4, !dbg !52
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !52
  %251 = extractelement <8 x i1> %238, i64 3, !dbg !52
  %252 = extractelement <8 x float> %237, i64 3, !dbg !52
  %253 = select i1 %251, float 0.000000e+00, float %252, !dbg !52
  %254 = extractelement <8 x i1> %238, i64 2, !dbg !52
  %255 = extractelement <8 x float> %237, i64 2, !dbg !52
  %256 = select i1 %254, float 0.000000e+00, float %255, !dbg !52
  %257 = extractelement <8 x i1> %238, i64 1, !dbg !52
  %258 = extractelement <8 x float> %237, i64 1, !dbg !52
  %259 = select i1 %257, float 0.000000e+00, float %258, !dbg !52
  %260 = extractelement <8 x i1> %238, i64 0, !dbg !52
  %261 = extractelement <8 x float> %237, i64 0, !dbg !52
  %262 = select i1 %260, float 0.000000e+00, float %261, !dbg !52
  %263 = shl i32 %166, 12, !dbg !53
  %264 = shl i32 %164, 12, !dbg !53
  %265 = mul i32 %162, 4718592, !dbg !54
  %266 = add i32 %265, %.decomposed, !dbg !55
  %267 = add i32 %266, %263, !dbg !56
  %268 = add i32 %266, %264, !dbg !56
  %269 = sext i32 %267 to i64, !dbg !57
  %270 = getelementptr float, ptr addrspace(1) %8, i64 %269, !dbg !57
  %271 = sext i32 %268 to i64, !dbg !57
  %272 = getelementptr float, ptr addrspace(1) %8, i64 %271, !dbg !57
  %273 = shl i32 %14, 7, !dbg !58
  %274 = and i32 %273, 896, !dbg !58
  %275 = or disjoint i32 %274, %16, !dbg !58
  %276 = and i32 %18, 508, !dbg !58
  %277 = lshr exact i32 %274, 1, !dbg !58
  %278 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %277, !dbg !58
  %279 = getelementptr float, ptr addrspace(3) %278, i32 %275, !dbg !58
  %280 = bitcast float %241 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #4, !dbg !58
  %281 = or disjoint i32 %275, 32, !dbg !58
  %282 = lshr i32 %281, 3, !dbg !58
  %283 = and i32 %282, 116, !dbg !58
  %284 = getelementptr float, ptr addrspace(3) @global_smem, i32 %283, !dbg !58
  %285 = getelementptr float, ptr addrspace(3) %284, i32 %281, !dbg !58
  %286 = bitcast float %244 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 true) #4, !dbg !58
  %287 = or disjoint i32 %275, 64, !dbg !58
  %288 = lshr i32 %287, 3, !dbg !58
  %289 = and i32 %288, 120, !dbg !58
  %290 = getelementptr float, ptr addrspace(3) @global_smem, i32 %289, !dbg !58
  %291 = getelementptr float, ptr addrspace(3) %290, i32 %287, !dbg !58
  %292 = bitcast float %247 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %292, i1 true) #4, !dbg !58
  %293 = or disjoint i32 %275, 96, !dbg !58
  %294 = lshr i32 %293, 3, !dbg !58
  %295 = and i32 %294, 124, !dbg !58
  %296 = getelementptr float, ptr addrspace(3) @global_smem, i32 %295, !dbg !58
  %297 = getelementptr float, ptr addrspace(3) %296, i32 %293, !dbg !58
  %298 = bitcast float %250 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %298, i1 true) #4, !dbg !58
  %299 = or disjoint i32 %275, 16, !dbg !58
  %300 = getelementptr float, ptr addrspace(3) %278, i32 %299, !dbg !58
  %301 = bitcast float %253 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 true) #4, !dbg !58
  %302 = or disjoint i32 %275, 48, !dbg !58
  %303 = lshr i32 %302, 3, !dbg !58
  %304 = and i32 %303, 116, !dbg !58
  %305 = getelementptr float, ptr addrspace(3) @global_smem, i32 %304, !dbg !58
  %306 = getelementptr float, ptr addrspace(3) %305, i32 %302, !dbg !58
  %307 = bitcast float %256 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %307, i1 true) #4, !dbg !58
  %308 = or disjoint i32 %275, 80, !dbg !58
  %309 = lshr i32 %308, 3, !dbg !58
  %310 = and i32 %309, 120, !dbg !58
  %311 = getelementptr float, ptr addrspace(3) @global_smem, i32 %310, !dbg !58
  %312 = getelementptr float, ptr addrspace(3) %311, i32 %308, !dbg !58
  %313 = bitcast float %259 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, <1 x i32> %313, i1 true) #4, !dbg !58
  %314 = or disjoint i32 %275, 112, !dbg !58
  %315 = lshr i32 %314, 3, !dbg !58
  %316 = and i32 %315, 124, !dbg !58
  %317 = getelementptr float, ptr addrspace(3) @global_smem, i32 %316, !dbg !58
  %318 = getelementptr float, ptr addrspace(3) %317, i32 %314, !dbg !58
  %319 = bitcast float %262 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, <1 x i32> %319, i1 true) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %320 = lshr i32 %18, 3, !dbg !58
  %321 = and i32 %320, 60, !dbg !58
  %322 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %321, !dbg !58
  %323 = getelementptr inbounds float, ptr addrspace(3) %322, i32 %276, !dbg !58
  %324 = or disjoint i32 %276, 512, !dbg !58
  %325 = lshr i32 %324, 3, !dbg !58
  %326 = and i32 %325, 124, !dbg !58
  %327 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %326, !dbg !58
  %328 = getelementptr inbounds float, ptr addrspace(3) %327, i32 %324, !dbg !58
  %329 = load <4 x i32>, ptr addrspace(3) %328, align 16, !dbg !58
  %.extract = load i32, ptr addrspace(3) %323, align 16, !dbg !58
  %330 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 4, !dbg !58
  %.extract8 = load i32, ptr addrspace(3) %330, align 4, !dbg !58
  %331 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 8, !dbg !58
  %.extract9 = load i32, ptr addrspace(3) %331, align 8, !dbg !58
  %332 = getelementptr inbounds i8, ptr addrspace(3) %323, i32 12, !dbg !58
  %.extract10 = load i32, ptr addrspace(3) %332, align 4, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %270, i1 %167) #4, !dbg !58
  %.extract11 = extractelement <4 x i32> %329, i64 0, !dbg !58
  %.extract12 = extractelement <4 x i32> %329, i64 1, !dbg !58
  %.extract13 = extractelement <4 x i32> %329, i64 2, !dbg !58
  %.extract14 = extractelement <4 x i32> %329, i64 3, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %272, i1 %165) #4, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckbxd4ntqvfoyfcpw4mokohoo6qzye4h2f2iov7llxpltfkfaa76.py", directory: "inductor_cache/kb")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 45, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 45, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 45, scope: !7)
!28 = !DILocation(line: 36, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 35, scope: !7)
!30 = !DILocation(line: 37, column: 31, scope: !7)
!31 = !DILocation(line: 37, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 31, scope: !7)
!33 = !DILocation(line: 38, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 31, scope: !7)
!35 = !DILocation(line: 39, column: 36, scope: !7)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 48, column: 27, scope: !7)
!38 = !DILocation(line: 31, column: 19, scope: !7)
!39 = !DILocation(line: 30, column: 19, scope: !7)
!40 = !DILocation(line: 50, column: 20, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 42, column: 18, scope: !7)
!43 = !DILocation(line: 44, column: 18, scope: !7)
!44 = !DILocation(line: 52, column: 20, scope: !7)
!45 = !DILocation(line: 53, column: 20, scope: !7)
!46 = !DILocation(line: 54, column: 20, scope: !7)
!47 = !DILocation(line: 56, column: 19, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 58, column: 42, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 59, column: 35, scope: !7)
!54 = !DILocation(line: 59, column: 48, scope: !7)
!55 = !DILocation(line: 59, column: 30, scope: !7)
!56 = !DILocation(line: 59, column: 40, scope: !7)
!57 = !DILocation(line: 59, column: 25, scope: !7)
!58 = !DILocation(line: 59, column: 60, scope: !7)
!59 = !DILocation(line: 59, column: 4, scope: !7)
