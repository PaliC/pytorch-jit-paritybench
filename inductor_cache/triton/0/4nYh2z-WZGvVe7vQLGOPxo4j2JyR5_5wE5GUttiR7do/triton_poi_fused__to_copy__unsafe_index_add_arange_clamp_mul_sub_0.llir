; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %11 = sdiv i32 %.frozen, 16, !dbg !14
  %12 = srem i32 %11, 16, !dbg !15
  %13 = mul i32 %11, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = srem i32 %10, 16, !dbg !16
  %15 = sdiv i32 %9, 256, !dbg !17
  %16 = sitofp i32 %12 to float, !dbg !18
  %17 = fmul float %16, 0x3FDDDDDDE0000000, !dbg !19
  %18 = fcmp ogt float %17, 0.000000e+00, !dbg !20
  %19 = select i1 %18, float %17, float 0.000000e+00, !dbg !24
  %20 = fptosi float %19 to i32, !dbg !25
  %21 = tail call i32 @llvm.smin.i32(i32 %20, i32 6), !dbg !26
  %narrow = add nsw i32 %21, 1, !dbg !26
  %22 = sext i32 %narrow to i64, !dbg !26
  %23 = sitofp i32 %.decomposed to float, !dbg !28
  %24 = sitofp i32 %14 to float, !dbg !28
  %25 = fmul float %23, 0x3FDDDDDDE0000000, !dbg !29
  %26 = fmul float %24, 0x3FDDDDDDE0000000, !dbg !29
  %27 = fcmp ogt float %25, 0.000000e+00, !dbg !30
  %28 = fcmp ogt float %26, 0.000000e+00, !dbg !30
  %29 = select i1 %27, float %25, float 0.000000e+00, !dbg !32
  %30 = select i1 %28, float %26, float 0.000000e+00, !dbg !32
  %31 = fptosi float %29 to i32, !dbg !33
  %32 = fptosi float %30 to i32, !dbg !33
  %33 = shl nsw i64 %22, 3, !dbg !34
  %34 = sext i32 %31 to i64, !dbg !35
  %35 = sext i32 %32 to i64, !dbg !35
  %36 = shl nsw i32 %15, 6, !dbg !36
  %37 = sext i32 %36 to i64, !dbg !37
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !38
  %39 = getelementptr float, ptr addrspace(1) %38, i64 %34, !dbg !38
  %40 = getelementptr float, ptr addrspace(1) %39, i64 %37, !dbg !38
  %41 = getelementptr float, ptr addrspace(1) %38, i64 %35, !dbg !38
  %42 = getelementptr float, ptr addrspace(1) %41, i64 %37, !dbg !38
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #2, !dbg !39
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #2, !dbg !39
  %45 = tail call i64 @llvm.smin.i64(i64 %34, i64 6), !dbg !40
  %46 = tail call i64 @llvm.smin.i64(i64 %35, i64 6), !dbg !40
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !42
  %48 = getelementptr i8, ptr addrspace(1) %47, i64 4, !dbg !42
  %49 = getelementptr float, ptr addrspace(1) %48, i64 %33, !dbg !42
  %50 = getelementptr float, ptr addrspace(1) %49, i64 %37, !dbg !42
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !42
  %52 = getelementptr i8, ptr addrspace(1) %51, i64 4, !dbg !42
  %53 = getelementptr float, ptr addrspace(1) %52, i64 %33, !dbg !42
  %54 = getelementptr float, ptr addrspace(1) %53, i64 %37, !dbg !42
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #2, !dbg !43
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #2, !dbg !43
  %57 = sitofp i32 %31 to float, !dbg !44
  %58 = sitofp i32 %32 to float, !dbg !44
  %59 = fsub float %29, %57, !dbg !45
  %60 = fsub float %30, %58, !dbg !45
  %61 = fcmp ogt float %59, 0.000000e+00, !dbg !46
  %62 = fcmp ogt float %60, 0.000000e+00, !dbg !46
  %63 = select i1 %61, float %59, float 0.000000e+00, !dbg !48
  %64 = select i1 %62, float %60, float 0.000000e+00, !dbg !48
  %65 = fcmp olt float %63, 1.000000e+00, !dbg !49
  %66 = fcmp olt float %64, 1.000000e+00, !dbg !49
  %67 = select i1 %65, float %63, float 1.000000e+00, !dbg !51
  %68 = select i1 %66, float %64, float 1.000000e+00, !dbg !51
  %69 = shl i32 %20, 3, !dbg !52
  %70 = add i32 %69, %36, !dbg !53
  %71 = add i32 %70, %31, !dbg !54
  %72 = add i32 %70, %32, !dbg !54
  %73 = sext i32 %71 to i64, !dbg !55
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !55
  %75 = sext i32 %72 to i64, !dbg !55
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !55
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #2, !dbg !56
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #2, !dbg !56
  %79 = sext i32 %69 to i64, !dbg !57
  %80 = getelementptr float, ptr addrspace(1) %48, i64 %79, !dbg !58
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %37, !dbg !58
  %82 = getelementptr float, ptr addrspace(1) %52, i64 %79, !dbg !58
  %83 = getelementptr float, ptr addrspace(1) %82, i64 %37, !dbg !58
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #2, !dbg !59
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #2, !dbg !59
  %86 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !39
  %87 = insertelement <2 x i32> %86, i32 %77, i64 1, !dbg !39
  %88 = bitcast <2 x i32> %87 to <2 x float>, !dbg !39
  %89 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !43
  %90 = insertelement <2 x i32> %89, i32 %84, i64 1, !dbg !43
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !43
  %92 = fsub <2 x float> %91, %88, !dbg !60
  %93 = insertelement <2 x float> poison, float %67, i64 0, !dbg !61
  %94 = shufflevector <2 x float> %93, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %95 = fmul <2 x float> %92, %94, !dbg !61
  %96 = fadd <2 x float> %95, %88, !dbg !62
  %97 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !39
  %98 = insertelement <2 x i32> %97, i32 %78, i64 1, !dbg !39
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !39
  %100 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !43
  %101 = insertelement <2 x i32> %100, i32 %85, i64 1, !dbg !43
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !43
  %103 = fsub <2 x float> %102, %99, !dbg !60
  %104 = insertelement <2 x float> poison, float %68, i64 0, !dbg !61
  %105 = shufflevector <2 x float> %104, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %106 = fmul <2 x float> %105, %103, !dbg !61
  %107 = fadd <2 x float> %106, %99, !dbg !62
  %108 = extractelement <2 x float> %96, i64 0, !dbg !63
  %109 = extractelement <2 x float> %96, i64 1, !dbg !64
  %110 = fsub float %108, %109, !dbg !63
  %111 = extractelement <2 x float> %107, i64 0, !dbg !63
  %112 = extractelement <2 x float> %107, i64 1, !dbg !64
  %113 = fsub float %111, %112, !dbg !63
  %114 = sitofp i32 %20 to float, !dbg !65
  %115 = fsub float %19, %114, !dbg !66
  %116 = fcmp ogt float %115, 0.000000e+00, !dbg !67
  %117 = select i1 %116, float %115, float 0.000000e+00, !dbg !69
  %118 = fcmp olt float %117, 1.000000e+00, !dbg !70
  %119 = select i1 %118, float %117, float 1.000000e+00, !dbg !72
  %120 = fmul float %119, %110, !dbg !73
  %121 = fmul float %113, %119, !dbg !73
  %122 = fadd float %109, %120, !dbg !64
  %123 = fadd float %112, %121, !dbg !64
  %124 = sext i32 %9 to i64, !dbg !74
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !74
  %126 = bitcast float %122 to i32, !dbg !75
  %127 = bitcast float %123 to i32, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %126, i32 %127, ptr addrspace(1) %125, i1 true) #2, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyadfmk6buededyyqimw6irnml4dkirbf7blozbudygiznsajxxr.py", directory: "inductor_cache/ya")
!4 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0", linkageName: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 18, scope: !7)
!20 = !DILocation(line: 118, column: 15, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 33, column: 40, scope: !7)
!24 = !DILocation(line: 121, column: 29, scope: !21, inlinedAt: !23)
!25 = !DILocation(line: 34, column: 19, scope: !7)
!26 = !DILocation(line: 113, column: 29, scope: !21, inlinedAt: !27)
!27 = !DILocation(line: 38, column: 41, scope: !7)
!28 = !DILocation(line: 40, column: 21, scope: !7)
!29 = !DILocation(line: 41, column: 20, scope: !7)
!30 = !DILocation(line: 118, column: 15, scope: !21, inlinedAt: !31)
!31 = !DILocation(line: 42, column: 42, scope: !7)
!32 = !DILocation(line: 121, column: 29, scope: !21, inlinedAt: !31)
!33 = !DILocation(line: 43, column: 21, scope: !7)
!34 = !DILocation(line: 44, column: 41, scope: !7)
!35 = !DILocation(line: 44, column: 39, scope: !7)
!36 = !DILocation(line: 44, column: 52, scope: !7)
!37 = !DILocation(line: 44, column: 49, scope: !7)
!38 = !DILocation(line: 44, column: 31, scope: !7)
!39 = !DILocation(line: 44, column: 57, scope: !7)
!40 = !DILocation(line: 113, column: 29, scope: !21, inlinedAt: !41)
!41 = !DILocation(line: 46, column: 42, scope: !7)
!42 = !DILocation(line: 47, column: 31, scope: !7)
!43 = !DILocation(line: 47, column: 57, scope: !7)
!44 = !DILocation(line: 49, column: 21, scope: !7)
!45 = !DILocation(line: 50, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !21, inlinedAt: !47)
!47 = !DILocation(line: 51, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !21, inlinedAt: !47)
!49 = !DILocation(line: 110, column: 15, scope: !21, inlinedAt: !50)
!50 = !DILocation(line: 53, column: 42, scope: !7)
!51 = !DILocation(line: 113, column: 29, scope: !21, inlinedAt: !50)
!52 = !DILocation(line: 56, column: 41, scope: !7)
!53 = !DILocation(line: 56, column: 39, scope: !7)
!54 = !DILocation(line: 56, column: 48, scope: !7)
!55 = !DILocation(line: 56, column: 31, scope: !7)
!56 = !DILocation(line: 56, column: 56, scope: !7)
!57 = !DILocation(line: 57, column: 39, scope: !7)
!58 = !DILocation(line: 57, column: 31, scope: !7)
!59 = !DILocation(line: 57, column: 56, scope: !7)
!60 = !DILocation(line: 48, column: 20, scope: !7)
!61 = !DILocation(line: 54, column: 20, scope: !7)
!62 = !DILocation(line: 55, column: 20, scope: !7)
!63 = !DILocation(line: 61, column: 20, scope: !7)
!64 = !DILocation(line: 67, column: 20, scope: !7)
!65 = !DILocation(line: 62, column: 20, scope: !7)
!66 = !DILocation(line: 63, column: 19, scope: !7)
!67 = !DILocation(line: 118, column: 15, scope: !21, inlinedAt: !68)
!68 = !DILocation(line: 64, column: 42, scope: !7)
!69 = !DILocation(line: 121, column: 29, scope: !21, inlinedAt: !68)
!70 = !DILocation(line: 110, column: 15, scope: !21, inlinedAt: !71)
!71 = !DILocation(line: 65, column: 42, scope: !7)
!72 = !DILocation(line: 113, column: 29, scope: !21, inlinedAt: !71)
!73 = !DILocation(line: 66, column: 20, scope: !7)
!74 = !DILocation(line: 68, column: 28, scope: !7)
!75 = !DILocation(line: 68, column: 40, scope: !7)
!76 = !DILocation(line: 68, column: 4, scope: !7)
