; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_stack_47(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = sdiv i32 %13, 8192, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %15 = sdiv i32 %.frozen, 2048, !dbg !15
  %16 = mul i32 %15, 2048, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = srem i32 %15, 4, !dbg !17
  %18 = icmp slt i32 %13, 32768, !dbg !18
  %19 = shl nsw i32 %17, 12, !dbg !19
  %20 = shl i32 %14, 14, !dbg !20
  %21 = add i32 %19, %20, !dbg !21
  %22 = add i32 %21, %.decomposed, !dbg !22
  %23 = sext i32 %22 to i64, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !23
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !24
  %26 = sext i32 %.decomposed to i64, !dbg !25
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !25
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !27
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !28
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !28
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !28
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !28
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !28
  %35 = bitcast i32 %31 to float, !dbg !28
  %36 = bitcast i32 %32 to float, !dbg !28
  %37 = bitcast i32 %33 to float, !dbg !28
  %38 = bitcast i32 %34 to float, !dbg !28
  %39 = fadd float %35, 0x3EE4F8B580000000, !dbg !29
  %40 = fadd float %36, 0x3EE4F8B580000000, !dbg !29
  %41 = fadd float %37, 0x3EE4F8B580000000, !dbg !29
  %42 = fadd float %38, 0x3EE4F8B580000000, !dbg !29
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %43, 0, !dbg !30
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %44, 0, !dbg !30
  br i1 %.not.i, label %50, label %45, !dbg !30

45:                                               ; preds = %7
  br i1 %.not1.i, label %48, label %46, !dbg !30

46:                                               ; preds = %45
  %47 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %39) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

48:                                               ; preds = %45
  %49 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %39) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

50:                                               ; preds = %7
  br i1 %.not1.i, label %53, label %51, !dbg !30

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.f(float %39) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.f(float %39) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %46, %48, %51, %53
  %.0.i = phi float [ %47, %46 ], [ %49, %48 ], [ %52, %51 ], [ %54, %53 ], !dbg !30
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %55, 0, !dbg !30
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %56, 0, !dbg !30
  br i1 %.not.i1, label %62, label %57, !dbg !30

57:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %60, label %58, !dbg !30

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %40) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %40) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %65, label %63, !dbg !30

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.f(float %40) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.f(float %40) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %58, %60, %63, %65
  %.0.i3 = phi float [ %59, %58 ], [ %61, %60 ], [ %64, %63 ], [ %66, %65 ], !dbg !30
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %67, 0, !dbg !30
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %68, 0, !dbg !30
  br i1 %.not.i6, label %74, label %69, !dbg !30

69:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %72, label %70, !dbg !30

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %41) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %41) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

74:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %77, label %75, !dbg !30

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %41) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %41) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %70, %72, %75, %77
  %.0.i8 = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !30
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %79, 0, !dbg !30
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %80, 0, !dbg !30
  br i1 %.not.i11, label %86, label %81, !dbg !30

81:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %84, label %82, !dbg !30

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

86:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %89, label %87, !dbg !30

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %82, %84, %87, %89
  %.0.i13 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !30
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !31
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !31
  %95 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !32
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %95, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !33
  %97 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !34
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %97, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !35
  %99 = icmp sgt i32 %13, 32767, !dbg !36
  %100 = add nsw i32 %.decomposed, 2048, !dbg !37
  %101 = add i32 %20, -65536, !dbg !38
  %102 = add i32 %101, %100, !dbg !39
  %103 = add i32 %102, %19, !dbg !40
  %104 = sext i32 %103 to i64, !dbg !41
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !41
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %105, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #3, !dbg !42
  %107 = zext nneg i32 %100 to i64, !dbg !43
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !43
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %108, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #3, !dbg !44
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %107, !dbg !45
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %110, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #3, !dbg !46
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !46
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !46
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !46
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !46
  %116 = bitcast i32 %112 to float, !dbg !46
  %117 = bitcast i32 %113 to float, !dbg !46
  %118 = bitcast i32 %114 to float, !dbg !46
  %119 = bitcast i32 %115 to float, !dbg !46
  %120 = fadd float %116, 0x3EE4F8B580000000, !dbg !47
  %121 = fadd float %117, 0x3EE4F8B580000000, !dbg !47
  %122 = fadd float %118, 0x3EE4F8B580000000, !dbg !47
  %123 = fadd float %119, 0x3EE4F8B580000000, !dbg !47
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i16 = icmp eq i32 %124, 0, !dbg !48
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i19 = icmp eq i32 %125, 0, !dbg !48
  br i1 %.not.i16, label %131, label %126, !dbg !48

126:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %129, label %127, !dbg !48

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #3, !dbg !48
  br label %__nv_sqrtf.exit20, !dbg !48

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #3, !dbg !48
  br label %__nv_sqrtf.exit20, !dbg !48

131:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %134, label %132, !dbg !48

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #3, !dbg !48
  br label %__nv_sqrtf.exit20, !dbg !48

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #3, !dbg !48
  br label %__nv_sqrtf.exit20, !dbg !48

__nv_sqrtf.exit20:                                ; preds = %127, %129, %132, %134
  %.0.i18 = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !48
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i21 = icmp eq i32 %136, 0, !dbg !48
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i24 = icmp eq i32 %137, 0, !dbg !48
  br i1 %.not.i21, label %143, label %138, !dbg !48

138:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %141, label %139, !dbg !48

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #3, !dbg !48
  br label %__nv_sqrtf.exit25, !dbg !48

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #3, !dbg !48
  br label %__nv_sqrtf.exit25, !dbg !48

143:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %146, label %144, !dbg !48

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #3, !dbg !48
  br label %__nv_sqrtf.exit25, !dbg !48

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #3, !dbg !48
  br label %__nv_sqrtf.exit25, !dbg !48

__nv_sqrtf.exit25:                                ; preds = %139, %141, %144, %146
  %.0.i23 = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !48
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i26 = icmp eq i32 %148, 0, !dbg !48
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i29 = icmp eq i32 %149, 0, !dbg !48
  br i1 %.not.i26, label %155, label %150, !dbg !48

150:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %153, label %151, !dbg !48

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #3, !dbg !48
  br label %__nv_sqrtf.exit30, !dbg !48

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #3, !dbg !48
  br label %__nv_sqrtf.exit30, !dbg !48

155:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %158, label %156, !dbg !48

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #3, !dbg !48
  br label %__nv_sqrtf.exit30, !dbg !48

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #3, !dbg !48
  br label %__nv_sqrtf.exit30, !dbg !48

__nv_sqrtf.exit30:                                ; preds = %151, %153, %156, %158
  %.0.i28 = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !48
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i31 = icmp eq i32 %160, 0, !dbg !48
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i34 = icmp eq i32 %161, 0, !dbg !48
  br i1 %.not.i31, label %167, label %162, !dbg !48

162:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %165, label %163, !dbg !48

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #3, !dbg !48
  br label %__nv_sqrtf.exit35, !dbg !48

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #3, !dbg !48
  br label %__nv_sqrtf.exit35, !dbg !48

167:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %170, label %168, !dbg !48

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #3, !dbg !48
  br label %__nv_sqrtf.exit35, !dbg !48

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #3, !dbg !48
  br label %__nv_sqrtf.exit35, !dbg !48

__nv_sqrtf.exit35:                                ; preds = %163, %165, %168, %170
  %.0.i33 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !48
  %172 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !42
  %173 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !44
  %174 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !42
  %175 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !44
  %176 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !42
  %177 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !44
  %178 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !42
  %179 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !44
  %180 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !24
  %181 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !26
  %182 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !33
  %183 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !35
  %184 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !24
  %185 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !26
  %186 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !33
  %187 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !35
  %188 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !24
  %189 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !26
  %190 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !33
  %191 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !35
  %192 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !24
  %193 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !26
  %194 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !33
  %195 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !35
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !49
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !49
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !49
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !49
  %200 = getelementptr float, ptr addrspace(1) %3, i64 %107, !dbg !50
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %200, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #3, !dbg !51
  %202 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !51
  %203 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !51
  %204 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !51
  %205 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !51
  %206 = getelementptr float, ptr addrspace(1) %4, i64 %107, !dbg !52
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %206, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #3, !dbg !53
  %208 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !53
  %209 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !53
  %210 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !53
  %211 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !53
  %212 = insertelement <8 x i32> poison, i32 %172, i64 0, !dbg !42
  %213 = insertelement <8 x i32> %212, i32 %174, i64 1, !dbg !42
  %214 = insertelement <8 x i32> %213, i32 %176, i64 2, !dbg !42
  %215 = insertelement <8 x i32> %214, i32 %178, i64 3, !dbg !42
  %216 = insertelement <8 x i32> %215, i32 %192, i64 4, !dbg !42
  %217 = insertelement <8 x i32> %216, i32 %188, i64 5, !dbg !42
  %218 = insertelement <8 x i32> %217, i32 %184, i64 6, !dbg !42
  %219 = insertelement <8 x i32> %218, i32 %180, i64 7, !dbg !42
  %220 = bitcast <8 x i32> %219 to <8 x float>, !dbg !42
  %221 = insertelement <8 x i32> poison, i32 %173, i64 0, !dbg !44
  %222 = insertelement <8 x i32> %221, i32 %175, i64 1, !dbg !44
  %223 = insertelement <8 x i32> %222, i32 %177, i64 2, !dbg !44
  %224 = insertelement <8 x i32> %223, i32 %179, i64 3, !dbg !44
  %225 = insertelement <8 x i32> %224, i32 %193, i64 4, !dbg !44
  %226 = insertelement <8 x i32> %225, i32 %189, i64 5, !dbg !44
  %227 = insertelement <8 x i32> %226, i32 %185, i64 6, !dbg !44
  %228 = insertelement <8 x i32> %227, i32 %181, i64 7, !dbg !44
  %229 = bitcast <8 x i32> %228 to <8 x float>, !dbg !44
  %230 = fsub <8 x float> %220, %229, !dbg !54
  %231 = insertelement <8 x float> poison, float %199, i64 0, !dbg !55
  %232 = insertelement <8 x float> %231, float %198, i64 1, !dbg !55
  %233 = insertelement <8 x float> %232, float %197, i64 2, !dbg !55
  %234 = insertelement <8 x float> %233, float %196, i64 3, !dbg !55
  %235 = insertelement <8 x float> %234, float %91, i64 4, !dbg !55
  %236 = insertelement <8 x float> %235, float %92, i64 5, !dbg !55
  %237 = insertelement <8 x float> %236, float %93, i64 6, !dbg !55
  %238 = insertelement <8 x float> %237, float %94, i64 7, !dbg !55
  %239 = fmul <8 x float> %230, %238, !dbg !55
  %240 = insertelement <8 x i32> poison, i32 %205, i64 0, !dbg !51
  %241 = insertelement <8 x i32> %240, i32 %204, i64 1, !dbg !51
  %242 = insertelement <8 x i32> %241, i32 %203, i64 2, !dbg !51
  %243 = insertelement <8 x i32> %242, i32 %202, i64 3, !dbg !51
  %244 = insertelement <8 x i32> %243, i32 %194, i64 4, !dbg !51
  %245 = insertelement <8 x i32> %244, i32 %190, i64 5, !dbg !51
  %246 = insertelement <8 x i32> %245, i32 %186, i64 6, !dbg !51
  %247 = insertelement <8 x i32> %246, i32 %182, i64 7, !dbg !51
  %248 = bitcast <8 x i32> %247 to <8 x float>, !dbg !51
  %249 = fmul <8 x float> %239, %248, !dbg !56
  %250 = insertelement <8 x i32> poison, i32 %211, i64 0, !dbg !53
  %251 = insertelement <8 x i32> %250, i32 %210, i64 1, !dbg !53
  %252 = insertelement <8 x i32> %251, i32 %209, i64 2, !dbg !53
  %253 = insertelement <8 x i32> %252, i32 %208, i64 3, !dbg !53
  %254 = insertelement <8 x i32> %253, i32 %195, i64 4, !dbg !53
  %255 = insertelement <8 x i32> %254, i32 %191, i64 5, !dbg !53
  %256 = insertelement <8 x i32> %255, i32 %187, i64 6, !dbg !53
  %257 = insertelement <8 x i32> %256, i32 %183, i64 7, !dbg !53
  %258 = bitcast <8 x i32> %257 to <8 x float>, !dbg !53
  %259 = fadd <8 x float> %249, %258, !dbg !57
  %260 = fcmp olt <8 x float> %259, zeroinitializer, !dbg !58
  %261 = extractelement <8 x i1> %260, i64 7, !dbg !62
  %262 = extractelement <8 x float> %259, i64 7, !dbg !62
  %263 = select i1 %261, float 0.000000e+00, float %262, !dbg !62
  %264 = extractelement <8 x i1> %260, i64 6, !dbg !62
  %265 = extractelement <8 x float> %259, i64 6, !dbg !62
  %266 = select i1 %264, float 0.000000e+00, float %265, !dbg !62
  %267 = extractelement <8 x i1> %260, i64 5, !dbg !62
  %268 = extractelement <8 x float> %259, i64 5, !dbg !62
  %269 = select i1 %267, float 0.000000e+00, float %268, !dbg !62
  %270 = extractelement <8 x i1> %260, i64 4, !dbg !62
  %271 = extractelement <8 x float> %259, i64 4, !dbg !62
  %272 = select i1 %270, float 0.000000e+00, float %271, !dbg !62
  %273 = extractelement <8 x i1> %260, i64 3, !dbg !64
  %274 = extractelement <8 x float> %259, i64 3, !dbg !64
  %275 = select i1 %273, float 0.000000e+00, float %274, !dbg !64
  %276 = extractelement <8 x i1> %260, i64 2, !dbg !64
  %277 = extractelement <8 x float> %259, i64 2, !dbg !64
  %278 = select i1 %276, float 0.000000e+00, float %277, !dbg !64
  %279 = extractelement <8 x i1> %260, i64 1, !dbg !64
  %280 = extractelement <8 x float> %259, i64 1, !dbg !64
  %281 = select i1 %279, float 0.000000e+00, float %280, !dbg !64
  %282 = extractelement <8 x i1> %260, i64 0, !dbg !64
  %283 = extractelement <8 x float> %259, i64 0, !dbg !64
  %284 = select i1 %282, float 0.000000e+00, float %283, !dbg !64
  %285 = select i1 %18, float %272, float %275, !dbg !65
  %286 = select i1 %18, float %269, float %278, !dbg !65
  %287 = select i1 %18, float %266, float %281, !dbg !65
  %288 = select i1 %18, float %263, float %284, !dbg !65
  %289 = sext i32 %13 to i64, !dbg !66
  %290 = getelementptr float, ptr addrspace(1) %5, i64 %289, !dbg !66
  %291 = bitcast float %285 to i32, !dbg !67
  %292 = bitcast float %286 to i32, !dbg !67
  %293 = bitcast float %287 to i32, !dbg !67
  %294 = bitcast float %288 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %291, i32 %292, i32 %293, i32 %294, ptr addrspace(1) %290, i1 true) #3, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjefxhx5bgsgcfbddbcbuyc2kzbnroiev2wpctpyljwbxu3rxbav.py", directory: "inductor_cache/je")
!4 = !{ptr @triton_poi_fused_stack_47, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_stack_47, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_stack_47", linkageName: "triton_poi_fused_stack_47", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 29, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 40, scope: !7)
!20 = !DILocation(line: 33, column: 52, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 58, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 39, column: 27, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 45, column: 31, scope: !7)
!33 = !DILocation(line: 45, column: 36, scope: !7)
!34 = !DILocation(line: 47, column: 31, scope: !7)
!35 = !DILocation(line: 47, column: 36, scope: !7)
!36 = !DILocation(line: 53, column: 20, scope: !7)
!37 = !DILocation(line: 56, column: 38, scope: !7)
!38 = !DILocation(line: 56, column: 43, scope: !7)
!39 = !DILocation(line: 56, column: 60, scope: !7)
!40 = !DILocation(line: 56, column: 53, scope: !7)
!41 = !DILocation(line: 56, column: 31, scope: !7)
!42 = !DILocation(line: 56, column: 73, scope: !7)
!43 = !DILocation(line: 57, column: 31, scope: !7)
!44 = !DILocation(line: 57, column: 43, scope: !7)
!45 = !DILocation(line: 59, column: 31, scope: !7)
!46 = !DILocation(line: 59, column: 43, scope: !7)
!47 = !DILocation(line: 61, column: 20, scope: !7)
!48 = !DILocation(line: 62, column: 27, scope: !7)
!49 = !DILocation(line: 64, column: 20, scope: !7)
!50 = !DILocation(line: 68, column: 31, scope: !7)
!51 = !DILocation(line: 68, column: 43, scope: !7)
!52 = !DILocation(line: 70, column: 31, scope: !7)
!53 = !DILocation(line: 70, column: 43, scope: !7)
!54 = !DILocation(line: 58, column: 20, scope: !7)
!55 = !DILocation(line: 67, column: 20, scope: !7)
!56 = !DILocation(line: 69, column: 20, scope: !7)
!57 = !DILocation(line: 71, column: 20, scope: !7)
!58 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !61)
!59 = distinct !DILexicalBlockFile(scope: !7, file: !60, discriminator: 0)
!60 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!61 = !DILocation(line: 73, column: 42, scope: !7)
!62 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !63)
!63 = !DILocation(line: 50, column: 42, scope: !7)
!64 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !61)
!65 = !DILocation(line: 0, scope: !7)
!66 = !DILocation(line: 77, column: 25, scope: !7)
!67 = !DILocation(line: 77, column: 37, scope: !7)
!68 = !DILocation(line: 77, column: 4, scope: !7)
