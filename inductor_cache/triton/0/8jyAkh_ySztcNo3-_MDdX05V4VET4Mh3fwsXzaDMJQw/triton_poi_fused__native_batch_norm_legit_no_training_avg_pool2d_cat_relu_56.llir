; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_56(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 9, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = shl i32 %20, 1, !dbg !12
  %22 = and i32 %21, 510, !dbg !12
  %23 = or disjoint i32 %19, %22, !dbg !13
  %24 = or disjoint i32 %23, 1, !dbg !13
  %25 = icmp slt i32 %23, 153600, !dbg !14
  %.frozen = freeze i32 %23, !dbg !15
  %26 = sdiv i32 %.frozen, 16, !dbg !15
  %27 = mul i32 %26, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %27, !dbg !16
  %28 = srem i32 %24, 16, !dbg !16
  %29 = sdiv i32 %23, 256, !dbg !17
  %30 = srem i32 %29, 150, !dbg !18
  %31 = shl nsw i32 %.decomposed, 1, !dbg !19
  %32 = shl nsw i32 %28, 1, !dbg !19
  %33 = shl i32 %26, 6, !dbg !20
  %34 = add i32 %31, %33, !dbg !21
  %35 = add i32 %33, %32, !dbg !21
  %36 = sext i32 %34 to i64, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !22
  %38 = sext i32 %35 to i64, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !22
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %25) #3, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %25) #3, !dbg !23
  %42 = or disjoint i32 %34, 1, !dbg !24
  %43 = or disjoint i32 %35, 1, !dbg !24
  %44 = sext i32 %42 to i64, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !25
  %46 = sext i32 %43 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %25) #3, !dbg !26
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %25) #3, !dbg !26
  %50 = add i32 %34, 32, !dbg !27
  %51 = add i32 %35, 32, !dbg !27
  %52 = sext i32 %50 to i64, !dbg !28
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !28
  %54 = sext i32 %51 to i64, !dbg !28
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !28
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %25) #3, !dbg !29
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %25) #3, !dbg !29
  %58 = add i32 %34, 33, !dbg !30
  %59 = add i32 %35, 33, !dbg !30
  %60 = sext i32 %58 to i64, !dbg !31
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !31
  %62 = sext i32 %59 to i64, !dbg !31
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !31
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %25) #3, !dbg !32
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %25) #3, !dbg !32
  %66 = sext i32 %30 to i64, !dbg !33
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !33
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %25) #3, !dbg !34
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %25) #3, !dbg !34
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !35
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %25) #3, !dbg !36
  %72 = bitcast i32 %71 to float, !dbg !36
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %25) #3, !dbg !36
  %74 = bitcast i32 %73 to float, !dbg !36
  %75 = getelementptr float, ptr addrspace(1) %3, i64 %66, !dbg !37
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %25) #3, !dbg !38
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %25) #3, !dbg !38
  %78 = getelementptr float, ptr addrspace(1) %4, i64 %66, !dbg !39
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %25) #3, !dbg !40
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %25) #3, !dbg !40
  %81 = fadd float %72, 0x3EE4F8B580000000, !dbg !41
  %82 = fadd float %74, 0x3EE4F8B580000000, !dbg !41
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i = icmp eq i32 %83, 0, !dbg !42
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i = icmp eq i32 %84, 0, !dbg !42
  br i1 %.not.i, label %90, label %85, !dbg !42

85:                                               ; preds = %17
  br i1 %.not1.i, label %88, label %86, !dbg !42

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

90:                                               ; preds = %17
  br i1 %.not1.i, label %93, label %91, !dbg !42

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %86, %88, %91, %93
  %.0.i = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !42
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i1 = icmp eq i32 %95, 0, !dbg !42
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i4 = icmp eq i32 %96, 0, !dbg !42
  br i1 %.not.i1, label %102, label %97, !dbg !42

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %100, label %98, !dbg !42

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

102:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %105, label %103, !dbg !42

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

__nv_sqrtf.exit5:                                 ; preds = %98, %100, %103, %105
  %.0.i3 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !42
  %107 = bitcast i32 %49 to float, !dbg !26
  %108 = bitcast i32 %41 to float, !dbg !23
  %109 = fadd float %108, %107, !dbg !43
  %110 = bitcast i32 %57 to float, !dbg !29
  %111 = fadd float %109, %110, !dbg !44
  %112 = bitcast i32 %65 to float, !dbg !32
  %113 = fadd float %111, %112, !dbg !45
  %114 = fmul float %113, 2.500000e-01, !dbg !46
  %115 = bitcast i32 %69 to float, !dbg !34
  %116 = fsub float %114, %115, !dbg !47
  %117 = bitcast i32 %48 to float, !dbg !26
  %118 = bitcast i32 %40 to float, !dbg !23
  %119 = fadd float %118, %117, !dbg !43
  %120 = bitcast i32 %56 to float, !dbg !29
  %121 = fadd float %119, %120, !dbg !44
  %122 = bitcast i32 %64 to float, !dbg !32
  %123 = fadd float %121, %122, !dbg !45
  %124 = fmul float %123, 2.500000e-01, !dbg !46
  %125 = bitcast i32 %68 to float, !dbg !34
  %126 = fsub float %124, %125, !dbg !47
  %127 = bitcast i32 %80 to float, !dbg !40
  %128 = bitcast i32 %79 to float, !dbg !40
  %129 = bitcast i32 %77 to float, !dbg !38
  %130 = bitcast i32 %76 to float, !dbg !38
  %.frozen6 = freeze i32 %23, !dbg !48
  %131 = sdiv i32 %.frozen6, 38400, !dbg !48
  %132 = mul i32 %131, 38400, !dbg !49
  %.decomposed7 = sub i32 %.frozen6, %132, !dbg !49
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !50
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !50
  %135 = fmul float %126, %133, !dbg !51
  %136 = fmul float %116, %134, !dbg !51
  %137 = fmul float %135, %130, !dbg !52
  %138 = fmul float %136, %129, !dbg !52
  %139 = fadd float %137, %128, !dbg !53
  %140 = fadd float %138, %127, !dbg !53
  %141 = fcmp olt float %139, 0.000000e+00, !dbg !54
  %142 = fcmp olt float %140, 0.000000e+00, !dbg !54
  %143 = select i1 %141, float 0.000000e+00, float %139, !dbg !58
  %144 = select i1 %142, float 0.000000e+00, float %140, !dbg !58
  %145 = sext i32 %23 to i64, !dbg !59
  %146 = getelementptr float, ptr addrspace(1) %5, i64 %145, !dbg !59
  %147 = bitcast float %124 to i32, !dbg !60
  %148 = bitcast float %114 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %147, i32 %148, ptr addrspace(1) %146, i1 %25) #3, !dbg !60
  %149 = getelementptr float, ptr addrspace(1) %6, i64 %145, !dbg !61
  %150 = bitcast float %143 to i32, !dbg !62
  %151 = bitcast float %144 to i32, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %150, i32 %151, ptr addrspace(1) %149, i1 %25) #3, !dbg !62
  %152 = mul i32 %131, 62976, !dbg !63
  %153 = add i32 %152, %.decomposed7, !dbg !64
  %154 = sext i32 %153 to i64, !dbg !65
  %155 = getelementptr float, ptr addrspace(1) %7, i64 %154, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %147, i32 %148, ptr addrspace(1) %155, i1 %25) #3, !dbg !66
  %156 = mul i32 %131, 66048, !dbg !67
  %157 = add i32 %156, %.decomposed7, !dbg !68
  %158 = sext i32 %157 to i64, !dbg !69
  %159 = getelementptr float, ptr addrspace(1) %8, i64 %158, !dbg !69
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %147, i32 %148, ptr addrspace(1) %159, i1 %25) #3, !dbg !70
  %160 = mul i32 %131, 69120, !dbg !71
  %161 = add i32 %160, %.decomposed7, !dbg !72
  %162 = sext i32 %161 to i64, !dbg !73
  %163 = getelementptr float, ptr addrspace(1) %9, i64 %162, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %147, i32 %148, ptr addrspace(1) %163, i1 %25) #3, !dbg !74
  %164 = mul i32 %131, 72192, !dbg !75
  %165 = add i32 %164, %.decomposed7, !dbg !76
  %166 = sext i32 %165 to i64, !dbg !77
  %167 = getelementptr float, ptr addrspace(1) %10, i64 %166, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %147, i32 %148, ptr addrspace(1) %167, i1 %25) #3, !dbg !78
  %168 = mul i32 %131, 75264, !dbg !79
  %169 = add i32 %168, %.decomposed7, !dbg !80
  %170 = sext i32 %169 to i64, !dbg !81
  %171 = getelementptr float, ptr addrspace(1) %11, i64 %170, !dbg !81
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %147, i32 %148, ptr addrspace(1) %171, i1 %25) #3, !dbg !82
  %172 = mul i32 %131, 78336, !dbg !83
  %173 = add i32 %172, %.decomposed7, !dbg !84
  %174 = sext i32 %173 to i64, !dbg !85
  %175 = getelementptr float, ptr addrspace(1) %12, i64 %174, !dbg !85
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %147, i32 %148, ptr addrspace(1) %175, i1 %25) #3, !dbg !86
  %176 = mul i32 %131, 81408, !dbg !87
  %177 = add i32 %176, %.decomposed7, !dbg !88
  %178 = sext i32 %177 to i64, !dbg !89
  %179 = getelementptr float, ptr addrspace(1) %13, i64 %178, !dbg !89
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %147, i32 %148, ptr addrspace(1) %179, i1 %25) #3, !dbg !90
  %180 = mul i32 %131, 84480, !dbg !91
  %181 = add i32 %180, %.decomposed7, !dbg !92
  %182 = sext i32 %181 to i64, !dbg !93
  %183 = getelementptr float, ptr addrspace(1) %14, i64 %182, !dbg !93
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %147, i32 %148, ptr addrspace(1) %183, i1 %25) #3, !dbg !94
  %184 = mul i32 %131, 87552, !dbg !95
  %185 = add i32 %184, %.decomposed7, !dbg !96
  %186 = sext i32 %185 to i64, !dbg !97
  %187 = getelementptr float, ptr addrspace(1) %15, i64 %186, !dbg !97
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %147, i32 %148, ptr addrspace(1) %187, i1 %25) #3, !dbg !98
  ret void, !dbg !99
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvwrv6263lyasnwuxauqgchk6beiw3szhqsj6sktqaaaj4qcy255.py", directory: "inductor_cache/vw")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_56, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_56, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_56", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_56", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 27, column: 28, scope: !7)
!19 = !DILocation(line: 30, column: 32, scope: !7)
!20 = !DILocation(line: 30, column: 40, scope: !7)
!21 = !DILocation(line: 30, column: 37, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 45, scope: !7)
!24 = !DILocation(line: 31, column: 41, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 49, scope: !7)
!27 = !DILocation(line: 32, column: 42, scope: !7)
!28 = !DILocation(line: 32, column: 30, scope: !7)
!29 = !DILocation(line: 32, column: 50, scope: !7)
!30 = !DILocation(line: 33, column: 42, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 50, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 35, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 36, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 46, column: 27, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 40, column: 18, scope: !7)
!46 = !DILocation(line: 42, column: 18, scope: !7)
!47 = !DILocation(line: 43, column: 19, scope: !7)
!48 = !DILocation(line: 28, column: 19, scope: !7)
!49 = !DILocation(line: 29, column: 19, scope: !7)
!50 = !DILocation(line: 48, column: 20, scope: !7)
!51 = !DILocation(line: 51, column: 20, scope: !7)
!52 = !DILocation(line: 52, column: 20, scope: !7)
!53 = !DILocation(line: 53, column: 20, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !57)
!55 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!56 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!57 = !DILocation(line: 55, column: 42, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !57)
!59 = !DILocation(line: 56, column: 25, scope: !7)
!60 = !DILocation(line: 56, column: 36, scope: !7)
!61 = !DILocation(line: 57, column: 25, scope: !7)
!62 = !DILocation(line: 57, column: 37, scope: !7)
!63 = !DILocation(line: 58, column: 36, scope: !7)
!64 = !DILocation(line: 58, column: 30, scope: !7)
!65 = !DILocation(line: 58, column: 25, scope: !7)
!66 = !DILocation(line: 58, column: 47, scope: !7)
!67 = !DILocation(line: 59, column: 36, scope: !7)
!68 = !DILocation(line: 59, column: 30, scope: !7)
!69 = !DILocation(line: 59, column: 25, scope: !7)
!70 = !DILocation(line: 59, column: 47, scope: !7)
!71 = !DILocation(line: 60, column: 36, scope: !7)
!72 = !DILocation(line: 60, column: 30, scope: !7)
!73 = !DILocation(line: 60, column: 25, scope: !7)
!74 = !DILocation(line: 60, column: 47, scope: !7)
!75 = !DILocation(line: 61, column: 36, scope: !7)
!76 = !DILocation(line: 61, column: 30, scope: !7)
!77 = !DILocation(line: 61, column: 25, scope: !7)
!78 = !DILocation(line: 61, column: 47, scope: !7)
!79 = !DILocation(line: 62, column: 36, scope: !7)
!80 = !DILocation(line: 62, column: 30, scope: !7)
!81 = !DILocation(line: 62, column: 25, scope: !7)
!82 = !DILocation(line: 62, column: 47, scope: !7)
!83 = !DILocation(line: 63, column: 36, scope: !7)
!84 = !DILocation(line: 63, column: 30, scope: !7)
!85 = !DILocation(line: 63, column: 25, scope: !7)
!86 = !DILocation(line: 63, column: 47, scope: !7)
!87 = !DILocation(line: 64, column: 36, scope: !7)
!88 = !DILocation(line: 64, column: 30, scope: !7)
!89 = !DILocation(line: 64, column: 25, scope: !7)
!90 = !DILocation(line: 64, column: 47, scope: !7)
!91 = !DILocation(line: 65, column: 36, scope: !7)
!92 = !DILocation(line: 65, column: 30, scope: !7)
!93 = !DILocation(line: 65, column: 25, scope: !7)
!94 = !DILocation(line: 65, column: 47, scope: !7)
!95 = !DILocation(line: 66, column: 37, scope: !7)
!96 = !DILocation(line: 66, column: 31, scope: !7)
!97 = !DILocation(line: 66, column: 26, scope: !7)
!98 = !DILocation(line: 66, column: 48, scope: !7)
!99 = !DILocation(line: 66, column: 4, scope: !7)
