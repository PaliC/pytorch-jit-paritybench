; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 255, !dbg !12
  %9 = or disjoint i32 %6, %8, !dbg !13
  %10 = or disjoint i32 %9, 256, !dbg !13
  %11 = icmp slt i32 %9, 1072812, !dbg !14
  %12 = icmp slt i32 %10, 1072812, !dbg !14
  %13 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !15
  %14 = insertelement <2 x i32> %13, i32 %9, i64 1, !dbg !15
  %15 = sdiv <2 x i32> %14, splat (i32 299), !dbg !15
  %16 = shufflevector <2 x i32> %14, <2 x i32> poison, <4 x i32> <i32 poison, i32 poison, i32 0, i32 1>, !dbg !16
  %17 = shufflevector <2 x i32> %15, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !16
  %18 = shufflevector <4 x i32> %17, <4 x i32> %16, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !16
  %19 = srem <4 x i32> %18, splat (i32 299), !dbg !16
  %.frozen = freeze i32 %9, !dbg !17
  %20 = sdiv i32 %.frozen, 89401, !dbg !17
  %.frozen2 = freeze i32 %10, !dbg !17
  %21 = sdiv i32 %.frozen2, 89401, !dbg !17
  %22 = mul i32 %20, 89401, !dbg !18
  %.decomposed = sub i32 %.frozen, %22, !dbg !18
  %23 = mul i32 %21, 89401, !dbg !18
  %.decomposed3 = sub i32 %.frozen2, %23, !dbg !18
  %24 = sitofp <4 x i32> %19 to <4 x float>, !dbg !19
  %25 = fadd <4 x float> %24, splat (float 5.000000e-01), !dbg !20
  %26 = fmul <4 x float> %25, splat (float 0x3F8B65E2E0000000), !dbg !21
  %27 = fadd <4 x float> %26, splat (float -5.000000e-01), !dbg !22
  %28 = fcmp ogt <4 x float> %27, zeroinitializer, !dbg !23
  %29 = select <4 x i1> %28, <4 x float> %27, <4 x float> zeroinitializer, !dbg !27
  %30 = fptosi <4 x float> %29 to <4 x i32>, !dbg !28
  %31 = extractelement <4 x i32> %30, i64 1, !dbg !29
  %32 = tail call i32 @llvm.smin.i32(i32 %31, i32 2), !dbg !30
  %narrow = add nsw i32 %32, 1, !dbg !30
  %33 = sext i32 %narrow to i64, !dbg !30
  %34 = extractelement <4 x i32> %30, i64 0, !dbg !29
  %35 = tail call i32 @llvm.smin.i32(i32 %34, i32 2), !dbg !30
  %narrow1 = add nsw i32 %35, 1, !dbg !30
  %36 = sext i32 %narrow1 to i64, !dbg !30
  %37 = extractelement <4 x i32> %30, i64 3, !dbg !32
  %38 = sext i32 %37 to i64, !dbg !33
  %39 = extractelement <4 x i32> %30, i64 2, !dbg !32
  %40 = sext i32 %39 to i64, !dbg !33
  %41 = tail call i64 @llvm.smin.i64(i64 %38, i64 2), !dbg !34
  %42 = tail call i64 @llvm.smin.i64(i64 %40, i64 2), !dbg !34
  %43 = shl nsw i64 %33, 2, !dbg !36
  %44 = shl nsw i64 %36, 2, !dbg !36
  %45 = shl nsw i32 %20, 4, !dbg !37
  %46 = shl nsw i32 %21, 4, !dbg !37
  %47 = sext i32 %45 to i64, !dbg !38
  %48 = sext i32 %46 to i64, !dbg !38
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !39
  %50 = getelementptr i8, ptr addrspace(1) %49, i64 4, !dbg !39
  %51 = getelementptr float, ptr addrspace(1) %50, i64 %43, !dbg !39
  %52 = getelementptr float, ptr addrspace(1) %51, i64 %47, !dbg !39
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !39
  %54 = getelementptr i8, ptr addrspace(1) %53, i64 4, !dbg !39
  %55 = getelementptr float, ptr addrspace(1) %54, i64 %44, !dbg !39
  %56 = getelementptr float, ptr addrspace(1) %55, i64 %48, !dbg !39
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %11) #2, !dbg !40
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %12) #2, !dbg !40
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !41
  %60 = getelementptr float, ptr addrspace(1) %59, i64 %38, !dbg !41
  %61 = getelementptr float, ptr addrspace(1) %60, i64 %47, !dbg !41
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !41
  %63 = getelementptr float, ptr addrspace(1) %62, i64 %40, !dbg !41
  %64 = getelementptr float, ptr addrspace(1) %63, i64 %48, !dbg !41
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %11) #2, !dbg !42
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %12) #2, !dbg !42
  %67 = sitofp <4 x i32> %30 to <4 x float>, !dbg !43
  %68 = fsub <4 x float> %29, %67, !dbg !44
  %69 = fcmp ogt <4 x float> %68, zeroinitializer, !dbg !45
  %70 = select <4 x i1> %69, <4 x float> %68, <4 x float> zeroinitializer, !dbg !47
  %71 = fcmp olt <4 x float> %70, splat (float 1.000000e+00), !dbg !48
  %72 = extractelement <4 x i1> %71, i64 3, !dbg !50
  %73 = extractelement <4 x float> %70, i64 3, !dbg !50
  %74 = select i1 %72, float %73, float 1.000000e+00, !dbg !50
  %75 = extractelement <4 x i1> %71, i64 2, !dbg !50
  %76 = extractelement <4 x float> %70, i64 2, !dbg !50
  %77 = select i1 %75, float %76, float 1.000000e+00, !dbg !50
  %78 = shl i32 %31, 2, !dbg !29
  %79 = shl i32 %34, 2, !dbg !29
  %80 = add i32 %45, %37, !dbg !32
  %81 = add i32 %80, %78, !dbg !52
  %82 = add i32 %46, %39, !dbg !32
  %83 = add i32 %82, %79, !dbg !52
  %84 = sext i32 %81 to i64, !dbg !53
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !53
  %86 = sext i32 %83 to i64, !dbg !53
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !53
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %11) #2, !dbg !54
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %12) #2, !dbg !54
  %90 = sext i32 %78 to i64, !dbg !55
  %91 = sext i32 %79 to i64, !dbg !55
  %92 = getelementptr float, ptr addrspace(1) %50, i64 %90, !dbg !56
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %47, !dbg !56
  %94 = getelementptr float, ptr addrspace(1) %54, i64 %91, !dbg !56
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %48, !dbg !56
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %11) #2, !dbg !57
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %12) #2, !dbg !57
  %98 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !42
  %99 = insertelement <2 x i32> %98, i32 %88, i64 1, !dbg !42
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !42
  %101 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !40
  %102 = insertelement <2 x i32> %101, i32 %96, i64 1, !dbg !40
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !40
  %104 = fsub <2 x float> %103, %100, !dbg !58
  %105 = insertelement <2 x float> poison, float %74, i64 0, !dbg !59
  %106 = shufflevector <2 x float> %105, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %107 = fmul <2 x float> %104, %106, !dbg !59
  %108 = fadd <2 x float> %107, %100, !dbg !60
  %109 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !42
  %110 = insertelement <2 x i32> %109, i32 %89, i64 1, !dbg !42
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !42
  %112 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !40
  %113 = insertelement <2 x i32> %112, i32 %97, i64 1, !dbg !40
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !40
  %115 = fsub <2 x float> %114, %111, !dbg !58
  %116 = insertelement <2 x float> poison, float %77, i64 0, !dbg !59
  %117 = shufflevector <2 x float> %116, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %118 = fmul <2 x float> %117, %115, !dbg !59
  %119 = fadd <2 x float> %118, %111, !dbg !60
  %120 = extractelement <2 x float> %108, i64 0, !dbg !61
  %121 = extractelement <2 x float> %108, i64 1, !dbg !62
  %122 = fsub float %120, %121, !dbg !61
  %123 = extractelement <2 x float> %119, i64 0, !dbg !61
  %124 = extractelement <2 x float> %119, i64 1, !dbg !62
  %125 = fsub float %123, %124, !dbg !61
  %126 = extractelement <4 x i1> %71, i64 1, !dbg !63
  %127 = extractelement <4 x float> %70, i64 1, !dbg !63
  %128 = select i1 %126, float %127, float 1.000000e+00, !dbg !63
  %129 = extractelement <4 x i1> %71, i64 0, !dbg !63
  %130 = extractelement <4 x float> %70, i64 0, !dbg !63
  %131 = select i1 %129, float %130, float 1.000000e+00, !dbg !63
  %132 = fmul float %128, %122, !dbg !64
  %133 = fmul float %131, %125, !dbg !64
  %134 = mul i32 %20, 89408, !dbg !65
  %135 = mul i32 %21, 89408, !dbg !65
  %136 = add i32 %134, %.decomposed, !dbg !66
  %137 = add i32 %135, %.decomposed3, !dbg !66
  %138 = sext i32 %136 to i64, !dbg !67
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !67
  %140 = sext i32 %137 to i64, !dbg !67
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %140, !dbg !67
  %142 = bitcast float %121 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %139, i1 %11) #2, !dbg !62
  %143 = bitcast float %124 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %141, i1 %12) #2, !dbg !62
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !68
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !68
  %146 = bitcast float %132 to i32, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %146, ptr addrspace(1) %144, i1 %11) #2, !dbg !69
  %147 = bitcast float %133 to i32, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %145, i1 %12) #2, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep7ej7hzso2tnojotha7k7ykoj4dawnil6tpgag46j2sycqq7j4.py", directory: "inductor_cache/ep")
!4 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0", linkageName: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 18, scope: !7)
!21 = !DILocation(line: 33, column: 18, scope: !7)
!22 = !DILocation(line: 34, column: 18, scope: !7)
!23 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 36, column: 40, scope: !7)
!27 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 37, column: 19, scope: !7)
!29 = !DILocation(line: 60, column: 41, scope: !7)
!30 = !DILocation(line: 113, column: 29, scope: !24, inlinedAt: !31)
!31 = !DILocation(line: 41, column: 42, scope: !7)
!32 = !DILocation(line: 60, column: 39, scope: !7)
!33 = !DILocation(line: 49, column: 20, scope: !7)
!34 = !DILocation(line: 113, column: 29, scope: !24, inlinedAt: !35)
!35 = !DILocation(line: 50, column: 42, scope: !7)
!36 = !DILocation(line: 51, column: 41, scope: !7)
!37 = !DILocation(line: 51, column: 52, scope: !7)
!38 = !DILocation(line: 51, column: 49, scope: !7)
!39 = !DILocation(line: 51, column: 31, scope: !7)
!40 = !DILocation(line: 51, column: 57, scope: !7)
!41 = !DILocation(line: 52, column: 31, scope: !7)
!42 = !DILocation(line: 52, column: 57, scope: !7)
!43 = !DILocation(line: 67, column: 20, scope: !7)
!44 = !DILocation(line: 68, column: 19, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !46)
!46 = !DILocation(line: 69, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !46)
!48 = !DILocation(line: 110, column: 15, scope: !24, inlinedAt: !49)
!49 = !DILocation(line: 70, column: 42, scope: !7)
!50 = !DILocation(line: 113, column: 29, scope: !24, inlinedAt: !51)
!51 = !DILocation(line: 58, column: 42, scope: !7)
!52 = !DILocation(line: 60, column: 48, scope: !7)
!53 = !DILocation(line: 60, column: 31, scope: !7)
!54 = !DILocation(line: 60, column: 56, scope: !7)
!55 = !DILocation(line: 61, column: 39, scope: !7)
!56 = !DILocation(line: 61, column: 31, scope: !7)
!57 = !DILocation(line: 61, column: 56, scope: !7)
!58 = !DILocation(line: 53, column: 20, scope: !7)
!59 = !DILocation(line: 59, column: 20, scope: !7)
!60 = !DILocation(line: 65, column: 20, scope: !7)
!61 = !DILocation(line: 66, column: 20, scope: !7)
!62 = !DILocation(line: 72, column: 48, scope: !7)
!63 = !DILocation(line: 113, column: 29, scope: !24, inlinedAt: !49)
!64 = !DILocation(line: 71, column: 20, scope: !7)
!65 = !DILocation(line: 72, column: 36, scope: !7)
!66 = !DILocation(line: 72, column: 30, scope: !7)
!67 = !DILocation(line: 72, column: 25, scope: !7)
!68 = !DILocation(line: 73, column: 28, scope: !7)
!69 = !DILocation(line: 73, column: 51, scope: !7)
!70 = !DILocation(line: 73, column: 4, scope: !7)
