; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = shl i32 %10, 2, !dbg !14
  %12 = or disjoint i32 %11, 4, !dbg !14
  %13 = sext i32 %11 to i64, !dbg !15
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !15
  %15 = sext i32 %12 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #3, !dbg !16
  %18 = bitcast i32 %17 to float, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 true) #3, !dbg !16
  %20 = bitcast i32 %19 to float, !dbg !16
  %21 = or disjoint i32 %11, 1, !dbg !17
  %22 = or disjoint i32 %11, 5, !dbg !17
  %23 = sext i32 %21 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = sext i32 %22 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !19
  %28 = bitcast i32 %27 to float, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !19
  %30 = bitcast i32 %29 to float, !dbg !19
  %31 = or disjoint i32 %11, 2, !dbg !20
  %32 = or disjoint i32 %11, 6, !dbg !20
  %33 = sext i32 %31 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !21
  %35 = sext i32 %32 to i64, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %38 = bitcast i32 %37 to float, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !22
  %40 = bitcast i32 %39 to float, !dbg !22
  %41 = or disjoint i32 %11, 3, !dbg !23
  %42 = or disjoint i32 %11, 7, !dbg !23
  %43 = sext i32 %41 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !24
  %45 = sext i32 %42 to i64, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !24
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !25
  %48 = bitcast i32 %47 to float, !dbg !25
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !25
  %50 = bitcast i32 %49 to float, !dbg !25
  %51 = fadd float %18, %28, !dbg !26
  %52 = fadd float %20, %30, !dbg !26
  %53 = fadd float %51, %38, !dbg !27
  %54 = fadd float %52, %40, !dbg !27
  %55 = fadd float %53, %48, !dbg !28
  %56 = fadd float %54, %50, !dbg !28
  %57 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float 4.000000e+00) #3, !dbg !29
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float 4.000000e+00) #3, !dbg !29
  %59 = fsub float %18, %57, !dbg !30
  %60 = fsub float %20, %58, !dbg !30
  %61 = fmul float %59, %59, !dbg !31
  %62 = fmul float %60, %60, !dbg !31
  %63 = fsub float %28, %57, !dbg !32
  %64 = fsub float %30, %58, !dbg !32
  %65 = fmul float %63, %63, !dbg !33
  %66 = fmul float %64, %64, !dbg !33
  %67 = fadd float %61, %65, !dbg !34
  %68 = fadd float %62, %66, !dbg !34
  %69 = fsub float %38, %57, !dbg !35
  %70 = fsub float %40, %58, !dbg !35
  %71 = fmul float %69, %69, !dbg !36
  %72 = fmul float %70, %70, !dbg !36
  %73 = fadd float %71, %67, !dbg !37
  %74 = fadd float %72, %68, !dbg !37
  %75 = fsub float %48, %57, !dbg !38
  %76 = fsub float %50, %58, !dbg !38
  %77 = fmul float %75, %75, !dbg !39
  %78 = fmul float %76, %76, !dbg !39
  %79 = fadd float %77, %73, !dbg !40
  %80 = fadd float %78, %74, !dbg !40
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float 4.000000e+00) #3, !dbg !41
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 4.000000e+00) #3, !dbg !41
  %83 = fadd float %81, 0x3EE4F8B580000000, !dbg !42
  %84 = fadd float %82, 0x3EE4F8B580000000, !dbg !42
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i = icmp eq i32 %85, 0, !dbg !43
  br i1 %.not.i, label %88, label %86, !dbg !43

86:                                               ; preds = %4
  %87 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %83), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

88:                                               ; preds = %4
  %89 = tail call float @llvm.nvvm.rsqrt.approx.f(float %83), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %86, %88
  %.0.i = phi float [ %87, %86 ], [ %89, %88 ], !dbg !43
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i1 = icmp eq i32 %90, 0, !dbg !43
  br i1 %.not.i1, label %93, label %91, !dbg !43

91:                                               ; preds = %__nv_rsqrtf.exit
  %92 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %84), !dbg !43
  br label %__nv_rsqrtf.exit3, !dbg !43

93:                                               ; preds = %__nv_rsqrtf.exit
  %94 = tail call float @llvm.nvvm.rsqrt.approx.f(float %84), !dbg !43
  br label %__nv_rsqrtf.exit3, !dbg !43

__nv_rsqrtf.exit3:                                ; preds = %91, %93
  %.0.i2 = phi float [ %92, %91 ], [ %94, %93 ], !dbg !43
  %95 = sext i32 %10 to i64, !dbg !44
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !44
  %97 = bitcast float %57 to i32, !dbg !45
  %98 = bitcast float %58 to i32, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %97, i32 %98, ptr addrspace(1) %96, i1 true) #3, !dbg !45
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !46
  %100 = bitcast float %.0.i to i32, !dbg !47
  %101 = bitcast float %.0.i2 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %100, i32 %101, ptr addrspace(1) %99, i1 true) #3, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdex32j5j7zixz44sxe3j6qjvj45kqcocpig42f76f5ubzuyurwq.py", directory: "inductor_cache/de")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_38, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_38", linkageName: "triton_poi_fused__native_batch_norm_legit_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 32, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 25, column: 37, scope: !7)
!17 = !DILocation(line: 26, column: 34, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 41, scope: !7)
!20 = !DILocation(line: 27, column: 34, scope: !7)
!21 = !DILocation(line: 27, column: 30, scope: !7)
!22 = !DILocation(line: 27, column: 41, scope: !7)
!23 = !DILocation(line: 28, column: 34, scope: !7)
!24 = !DILocation(line: 28, column: 30, scope: !7)
!25 = !DILocation(line: 28, column: 41, scope: !7)
!26 = !DILocation(line: 29, column: 18, scope: !7)
!27 = !DILocation(line: 30, column: 18, scope: !7)
!28 = !DILocation(line: 31, column: 18, scope: !7)
!29 = !DILocation(line: 33, column: 18, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 35, column: 19, scope: !7)
!32 = !DILocation(line: 36, column: 19, scope: !7)
!33 = !DILocation(line: 37, column: 20, scope: !7)
!34 = !DILocation(line: 38, column: 20, scope: !7)
!35 = !DILocation(line: 39, column: 19, scope: !7)
!36 = !DILocation(line: 40, column: 20, scope: !7)
!37 = !DILocation(line: 41, column: 20, scope: !7)
!38 = !DILocation(line: 42, column: 19, scope: !7)
!39 = !DILocation(line: 43, column: 20, scope: !7)
!40 = !DILocation(line: 44, column: 20, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 28, scope: !7)
!44 = !DILocation(line: 49, column: 25, scope: !7)
!45 = !DILocation(line: 49, column: 36, scope: !7)
!46 = !DILocation(line: 50, column: 25, scope: !7)
!47 = !DILocation(line: 50, column: 37, scope: !7)
!48 = !DILocation(line: 50, column: 4, scope: !7)
