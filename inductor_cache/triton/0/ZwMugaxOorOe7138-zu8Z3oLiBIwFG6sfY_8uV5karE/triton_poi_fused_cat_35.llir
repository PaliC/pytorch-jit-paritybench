; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 254, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %13 = sdiv i32 %.frozen, 1536, !dbg !14
  %14 = mul i32 %13, 1536, !dbg !15
  %.decomposed = sub i32 %.frozen, %14, !dbg !15
  %15 = icmp slt i32 %.decomposed, 384, !dbg !16
  %16 = mul nsw i32 %13, 384, !dbg !17
  %17 = add nsw i32 %16, %.decomposed, !dbg !18
  %18 = sext i32 %17 to i64, !dbg !19
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !19
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %19, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #1, !dbg !20
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !20
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !20
  %23 = bitcast i32 %21 to float, !dbg !20
  %24 = bitcast i32 %22 to float, !dbg !20
  %25 = fsub float 0.000000e+00, %23, !dbg !21
  %26 = fsub float 0.000000e+00, %24, !dbg !21
  %27 = fmul float %25, 0x3FF7154760000000, !dbg !25
  %28 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %27) #1, !dbg !25
  %29 = fmul float %26, 0x3FF7154760000000, !dbg !25
  %30 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %29) #1, !dbg !25
  %31 = fadd float %28, 1.000000e+00, !dbg !26
  %32 = fadd float %30, 1.000000e+00, !dbg !26
  %33 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %31) #1, !dbg !27
  %34 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %32) #1, !dbg !27
  %35 = fmul float %33, %23, !dbg !28
  %36 = fmul float %34, %24, !dbg !28
  %37 = add nsw i32 %.decomposed, -384, !dbg !29
  %38 = icmp ult i32 %37, 384, !dbg !29
  %39 = add nsw i32 %16, %37, !dbg !30
  %40 = sext i32 %39 to i64, !dbg !31
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !31
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #1, !dbg !32
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !32
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !32
  %45 = bitcast i32 %43 to float, !dbg !32
  %46 = bitcast i32 %44 to float, !dbg !32
  %47 = add nsw i32 %.decomposed, -768, !dbg !33
  %48 = icmp ult i32 %47, 384, !dbg !33
  %49 = add nsw i32 %16, %47, !dbg !34
  %50 = sext i32 %49 to i64, !dbg !35
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !35
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #1, !dbg !36
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !36
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !36
  %55 = bitcast i32 %53 to float, !dbg !36
  %56 = bitcast i32 %54 to float, !dbg !36
  %57 = icmp sgt i32 %.decomposed, 1151, !dbg !37
  %58 = sext i32 %17 to i64, !dbg !38
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !38
  %60 = getelementptr i8, ptr addrspace(1) %59, i64 -4608, !dbg !38
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %57, i32 0, i1 %57, i32 0, i1 %57) #1, !dbg !39
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !39
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !39
  %64 = bitcast i32 %62 to float, !dbg !39
  %65 = bitcast i32 %63 to float, !dbg !39
  %66 = fsub float 0.000000e+00, %64, !dbg !40
  %67 = fsub float 0.000000e+00, %65, !dbg !40
  %68 = fmul float %66, 0x3FF7154760000000, !dbg !42
  %69 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %68) #1, !dbg !42
  %70 = fmul float %67, 0x3FF7154760000000, !dbg !42
  %71 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %70) #1, !dbg !42
  %72 = fadd float %69, 1.000000e+00, !dbg !43
  %73 = fadd float %71, 1.000000e+00, !dbg !43
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %72) #1, !dbg !44
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %73) #1, !dbg !44
  %76 = fmul float %74, %64, !dbg !45
  %77 = fmul float %75, %65, !dbg !45
  %78 = select i1 %57, float %76, float 0.000000e+00, !dbg !46
  %79 = select i1 %57, float %77, float 0.000000e+00, !dbg !46
  %80 = select i1 %48, float %55, float %78, !dbg !47
  %81 = select i1 %48, float %56, float %79, !dbg !47
  %82 = select i1 %38, float %45, float %80, !dbg !48
  %83 = select i1 %38, float %46, float %81, !dbg !48
  %84 = select i1 %15, float %35, float %82, !dbg !49
  %85 = select i1 %15, float %36, float %83, !dbg !49
  %86 = sext i32 %12 to i64, !dbg !50
  %87 = getelementptr float, ptr addrspace(1) %4, i64 %86, !dbg !50
  %88 = bitcast float %84 to i32, !dbg !51
  %89 = bitcast float %85 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %88, i32 %89, ptr addrspace(1) %87, i1 true) #1, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr53t4z6h5ogxdy33y4bvcv25u4khpmkyvt4qvdtdn7ztnbzkdlp.py", directory: "inductor_cache/r5")
!4 = !{ptr @triton_poi_fused_cat_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_35", linkageName: "triton_poi_fused_cat_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 46, scope: !7)
!21 = !DILocation(line: 47, column: 30, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = !DILocation(line: 33, column: 22, scope: !7)
!25 = !DILocation(line: 47, column: 29, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 47, column: 20, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 47, column: 16, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 40, column: 20, scope: !7)
!30 = !DILocation(line: 41, column: 41, scope: !7)
!31 = !DILocation(line: 41, column: 31, scope: !7)
!32 = !DILocation(line: 41, column: 56, scope: !7)
!33 = !DILocation(line: 45, column: 20, scope: !7)
!34 = !DILocation(line: 46, column: 41, scope: !7)
!35 = !DILocation(line: 46, column: 31, scope: !7)
!36 = !DILocation(line: 46, column: 56, scope: !7)
!37 = !DILocation(line: 47, column: 20, scope: !7)
!38 = !DILocation(line: 50, column: 31, scope: !7)
!39 = !DILocation(line: 50, column: 57, scope: !7)
!40 = !DILocation(line: 47, column: 30, scope: !22, inlinedAt: !41)
!41 = !DILocation(line: 51, column: 23, scope: !7)
!42 = !DILocation(line: 47, column: 29, scope: !22, inlinedAt: !41)
!43 = !DILocation(line: 47, column: 20, scope: !22, inlinedAt: !41)
!44 = !DILocation(line: 47, column: 16, scope: !22, inlinedAt: !41)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 54, column: 35, scope: !7)
!47 = !DILocation(line: 55, column: 35, scope: !7)
!48 = !DILocation(line: 56, column: 35, scope: !7)
!49 = !DILocation(line: 0, scope: !7)
!50 = !DILocation(line: 58, column: 25, scope: !7)
!51 = !DILocation(line: 58, column: 37, scope: !7)
!52 = !DILocation(line: 58, column: 4, scope: !7)
