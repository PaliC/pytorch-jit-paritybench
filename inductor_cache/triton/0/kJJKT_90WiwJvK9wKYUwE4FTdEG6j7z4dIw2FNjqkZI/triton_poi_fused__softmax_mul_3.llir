; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_mul_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 62, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = icmp slt i32 %13, 64, !dbg !14
  %16 = srem i32 %13, 4, !dbg !15
  %17 = srem i32 %14, 4, !dbg !15
  %18 = sdiv i32 %13, 16, !dbg !16
  %19 = mul i32 %13, 3, !dbg !17
  %20 = mul i32 %14, 3, !dbg !17
  %21 = sext i32 %19 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = sext i32 %20 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %15) #1, !dbg !19
  %26 = bitcast i32 %25 to float, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %15) #1, !dbg !19
  %28 = bitcast i32 %27 to float, !dbg !19
  %29 = mul nsw i32 %16, 3, !dbg !20
  %30 = mul nsw i32 %17, 3, !dbg !20
  %31 = sext i32 %29 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !21
  %33 = sext i32 %30 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %15) #1, !dbg !22
  %36 = bitcast i32 %35 to float, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %15) #1, !dbg !22
  %38 = bitcast i32 %37 to float, !dbg !22
  %39 = shl nsw i32 %18, 4, !dbg !23
  %40 = add i32 %39, %16, !dbg !24
  %41 = sext i32 %40 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !25
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %15) #1, !dbg !26
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !26
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !26
  %46 = bitcast i32 %44 to float, !dbg !26
  %47 = bitcast i32 %45 to float, !dbg !26
  %48 = add i32 %40, 4, !dbg !27
  %49 = sext i32 %48 to i64, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !28
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %15) #1, !dbg !29
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !29
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !29
  %54 = bitcast i32 %52 to float, !dbg !29
  %55 = bitcast i32 %53 to float, !dbg !29
  %56 = add i32 %40, 8, !dbg !30
  %57 = sext i32 %56 to i64, !dbg !31
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !31
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %58, i1 %15) #1, !dbg !32
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !32
  %61 = extractvalue { i32, i32 } %59, 1, !dbg !32
  %62 = bitcast i32 %60 to float, !dbg !32
  %63 = bitcast i32 %61 to float, !dbg !32
  %64 = add i32 %40, 12, !dbg !33
  %65 = sext i32 %64 to i64, !dbg !34
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !34
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 %15) #1, !dbg !35
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !35
  %69 = extractvalue { i32, i32 } %67, 1, !dbg !35
  %70 = bitcast i32 %68 to float, !dbg !35
  %71 = bitcast i32 %69 to float, !dbg !35
  %72 = fadd float %26, %36, !dbg !36
  %73 = fadd float %28, %38, !dbg !36
  %74 = fmul float %72, %46, !dbg !37
  %75 = fmul float %73, %47, !dbg !37
  %76 = fmul float %72, %54, !dbg !38
  %77 = fmul float %73, %55, !dbg !38
  %78 = fcmp ogt float %74, %76, !dbg !39
  %79 = fcmp ogt float %75, %77, !dbg !39
  %80 = fcmp uno float %74, 0.000000e+00, !dbg !43
  %81 = fcmp uno float %75, 0.000000e+00, !dbg !43
  %82 = or i1 %80, %78, !dbg !44
  %83 = or i1 %81, %79, !dbg !44
  %84 = select i1 %82, float %74, float %76, !dbg !45
  %85 = select i1 %83, float %75, float %77, !dbg !45
  %86 = fmul float %72, %62, !dbg !46
  %87 = fmul float %73, %63, !dbg !46
  %88 = fcmp ogt float %84, %86, !dbg !47
  %89 = fcmp ogt float %85, %87, !dbg !47
  %90 = fcmp uno float %84, 0.000000e+00, !dbg !49
  %91 = fcmp uno float %85, 0.000000e+00, !dbg !49
  %92 = or i1 %88, %90, !dbg !50
  %93 = or i1 %89, %91, !dbg !50
  %94 = select i1 %92, float %84, float %86, !dbg !51
  %95 = select i1 %93, float %85, float %87, !dbg !51
  %96 = fmul float %72, %70, !dbg !52
  %97 = fmul float %73, %71, !dbg !52
  %98 = fcmp ogt float %94, %96, !dbg !53
  %99 = fcmp ogt float %95, %97, !dbg !53
  %100 = fcmp uno float %94, 0.000000e+00, !dbg !55
  %101 = fcmp uno float %95, 0.000000e+00, !dbg !55
  %102 = or i1 %98, %100, !dbg !56
  %103 = or i1 %99, %101, !dbg !56
  %104 = select i1 %102, float %94, float %96, !dbg !57
  %105 = select i1 %103, float %95, float %97, !dbg !57
  %106 = fsub float %74, %104, !dbg !58
  %107 = fsub float %75, %105, !dbg !58
  %108 = fmul float %106, 0x3FF7154760000000, !dbg !59
  %109 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %108) #1, !dbg !59
  %110 = fmul float %107, 0x3FF7154760000000, !dbg !59
  %111 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %110) #1, !dbg !59
  %112 = fsub float %76, %104, !dbg !60
  %113 = fsub float %77, %105, !dbg !60
  %114 = fmul float %112, 0x3FF7154760000000, !dbg !61
  %115 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %114) #1, !dbg !61
  %116 = fmul float %113, 0x3FF7154760000000, !dbg !61
  %117 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %116) #1, !dbg !61
  %118 = fadd float %109, %115, !dbg !62
  %119 = fadd float %111, %117, !dbg !62
  %120 = fsub float %86, %104, !dbg !63
  %121 = fsub float %87, %105, !dbg !63
  %122 = fmul float %120, 0x3FF7154760000000, !dbg !64
  %123 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %122) #1, !dbg !64
  %124 = fmul float %121, 0x3FF7154760000000, !dbg !64
  %125 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %124) #1, !dbg !64
  %126 = fadd float %118, %123, !dbg !65
  %127 = fadd float %119, %125, !dbg !65
  %128 = fsub float %96, %104, !dbg !66
  %129 = fsub float %97, %105, !dbg !66
  %130 = fmul float %128, 0x3FF7154760000000, !dbg !67
  %131 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %130) #1, !dbg !67
  %132 = fmul float %129, 0x3FF7154760000000, !dbg !67
  %133 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %132) #1, !dbg !67
  %134 = fadd float %126, %131, !dbg !68
  %135 = fadd float %127, %133, !dbg !68
  %136 = sext i32 %13 to i64, !dbg !69
  %137 = getelementptr float, ptr addrspace(1) %3, i64 %136, !dbg !69
  %138 = bitcast float %72 to i32, !dbg !70
  %139 = bitcast float %73 to i32, !dbg !70
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %138, i32 %139, ptr addrspace(1) %137, i1 %15) #1, !dbg !70
  %140 = getelementptr float, ptr addrspace(1) %4, i64 %136, !dbg !71
  %141 = bitcast float %104 to i32, !dbg !72
  %142 = bitcast float %105 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %141, i32 %142, ptr addrspace(1) %140, i1 %15) #1, !dbg !72
  %143 = getelementptr float, ptr addrspace(1) %5, i64 %136, !dbg !73
  %144 = bitcast float %134 to i32, !dbg !74
  %145 = bitcast float %135 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %144, i32 %145, ptr addrspace(1) %143, i1 %15) #1, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv422qjvxsirwejxr3r6fwnbe5q6c3ya3ozkwnqv7exmq4l7z5y6.py", directory: "inductor_cache/v4")
!4 = !{ptr @triton_poi_fused__softmax_mul_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_mul_3, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_mul_3", linkageName: "triton_poi_fused__softmax_mul_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 32, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 37, scope: !7)
!20 = !DILocation(line: 28, column: 32, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 37, scope: !7)
!23 = !DILocation(line: 29, column: 38, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 43, scope: !7)
!27 = !DILocation(line: 30, column: 39, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 47, scope: !7)
!30 = !DILocation(line: 31, column: 40, scope: !7)
!31 = !DILocation(line: 31, column: 31, scope: !7)
!32 = !DILocation(line: 31, column: 48, scope: !7)
!33 = !DILocation(line: 32, column: 41, scope: !7)
!34 = !DILocation(line: 32, column: 31, scope: !7)
!35 = !DILocation(line: 32, column: 49, scope: !7)
!36 = !DILocation(line: 33, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 38, column: 40, scope: !7)
!43 = !DILocation(line: 120, column: 21, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 120, column: 16, scope: !40, inlinedAt: !42)
!45 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!46 = !DILocation(line: 39, column: 19, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !48)
!48 = !DILocation(line: 40, column: 41, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !40, inlinedAt: !48)
!50 = !DILocation(line: 120, column: 16, scope: !40, inlinedAt: !48)
!51 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !48)
!52 = !DILocation(line: 41, column: 19, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !54)
!54 = !DILocation(line: 42, column: 42, scope: !7)
!55 = !DILocation(line: 120, column: 21, scope: !40, inlinedAt: !54)
!56 = !DILocation(line: 120, column: 16, scope: !40, inlinedAt: !54)
!57 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !54)
!58 = !DILocation(line: 43, column: 19, scope: !7)
!59 = !DILocation(line: 44, column: 24, scope: !7)
!60 = !DILocation(line: 45, column: 19, scope: !7)
!61 = !DILocation(line: 46, column: 24, scope: !7)
!62 = !DILocation(line: 47, column: 20, scope: !7)
!63 = !DILocation(line: 48, column: 20, scope: !7)
!64 = !DILocation(line: 49, column: 24, scope: !7)
!65 = !DILocation(line: 50, column: 20, scope: !7)
!66 = !DILocation(line: 51, column: 20, scope: !7)
!67 = !DILocation(line: 52, column: 24, scope: !7)
!68 = !DILocation(line: 53, column: 20, scope: !7)
!69 = !DILocation(line: 54, column: 25, scope: !7)
!70 = !DILocation(line: 54, column: 36, scope: !7)
!71 = !DILocation(line: 55, column: 25, scope: !7)
!72 = !DILocation(line: 55, column: 37, scope: !7)
!73 = !DILocation(line: 56, column: 25, scope: !7)
!74 = !DILocation(line: 56, column: 37, scope: !7)
!75 = !DILocation(line: 56, column: 4, scope: !7)
