; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 8, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = shl i32 %20, 2, !dbg !12
  %22 = and i32 %21, 252, !dbg !12
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !13
  %24 = shl i32 %23, 1, !dbg !14
  %25 = lshr i32 %20, 6, !dbg !15
  %.lobit = and i32 %25, 1, !dbg !15
  %26 = or disjoint i32 %24, %.lobit, !dbg !16
  %27 = icmp slt i32 %26, 256, !dbg !17
  %28 = or disjoint i32 %19, %22, !dbg !18
  %29 = or disjoint i32 %28, 1, !dbg !18
  %30 = or disjoint i32 %28, 2, !dbg !18
  %31 = or disjoint i32 %28, 3, !dbg !18
  %32 = icmp slt i32 %28, 176, !dbg !19
  %33 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !20
  %34 = insertelement <4 x i32> %33, i32 %30, i64 1, !dbg !20
  %35 = insertelement <4 x i32> %34, i32 %29, i64 2, !dbg !20
  %36 = insertelement <4 x i32> %35, i32 %28, i64 3, !dbg !20
  %37 = srem <4 x i32> %36, splat (i32 44), !dbg !20
  %38 = sdiv i32 %28, 44, !dbg !21
  %39 = icmp slt <4 x i32> %37, splat (i32 11), !dbg !22
  %40 = mul i32 %26, 11, !dbg !23
  %41 = mul i32 %38, 2816, !dbg !24
  %42 = add i32 %40, %41, !dbg !25
  %43 = extractelement <4 x i32> %37, i64 3, !dbg !26
  %44 = add i32 %42, %43, !dbg !27
  %45 = extractelement <4 x i32> %37, i64 2, !dbg !28
  %46 = add i32 %42, %45, !dbg !27
  %47 = extractelement <4 x i32> %37, i64 1, !dbg !26
  %48 = add i32 %42, %47, !dbg !27
  %49 = extractelement <4 x i32> %37, i64 0, !dbg !28
  %50 = add i32 %42, %49, !dbg !27
  %51 = sext i32 %44 to i64, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !29
  %53 = sext i32 %46 to i64, !dbg !29
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !29
  %55 = sext i32 %48 to i64, !dbg !29
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !29
  %57 = sext i32 %50 to i64, !dbg !29
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !29
  %59 = extractelement <4 x i1> %39, i64 3, !dbg !30
  %60 = and i1 %59, %27, !dbg !30
  %61 = extractelement <4 x i1> %39, i64 2, !dbg !30
  %62 = and i1 %61, %27, !dbg !30
  %63 = extractelement <4 x i1> %39, i64 1, !dbg !30
  %64 = and i1 %63, %27, !dbg !30
  %65 = extractelement <4 x i1> %39, i64 0, !dbg !30
  %66 = and i1 %65, %27, !dbg !30
  %67 = and i1 %32, %60, !dbg !31
  %68 = and i1 %32, %62, !dbg !31
  %69 = and i1 %32, %64, !dbg !31
  %70 = and i1 %32, %66, !dbg !31
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %67, i32 0, i1 %67) #3, !dbg !32
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %68, i32 0, i1 %68) #3, !dbg !32
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %69, i32 0, i1 %69) #3, !dbg !32
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %70, i32 0, i1 %70) #3, !dbg !32
  %75 = icmp sgt i32 %45, 10, !dbg !28
  %76 = icmp sgt i32 %49, 10, !dbg !28
  %77 = icmp slt i32 %43, 22, !dbg !33
  %78 = icmp slt i32 %47, 22, !dbg !33
  %79 = add nsw i32 %43, -11, !dbg !26
  %80 = icmp ult i32 %79, 11, !dbg !26
  %81 = and i1 %75, %77, !dbg !26
  %82 = add nsw i32 %47, -11, !dbg !26
  %83 = icmp ult i32 %82, 11, !dbg !26
  %84 = and i1 %76, %78, !dbg !26
  %85 = add nsw i32 %45, -11, !dbg !34
  %86 = add nsw i32 %49, -11, !dbg !34
  %87 = add i32 %42, %79, !dbg !35
  %88 = add i32 %42, %85, !dbg !35
  %89 = add i32 %42, %82, !dbg !35
  %90 = add i32 %42, %86, !dbg !35
  %91 = sext i32 %87 to i64, !dbg !36
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !36
  %93 = sext i32 %88 to i64, !dbg !36
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !36
  %95 = sext i32 %89 to i64, !dbg !36
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !36
  %97 = sext i32 %90 to i64, !dbg !36
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !36
  %99 = and i1 %27, %80, !dbg !37
  %100 = and i1 %27, %81, !dbg !37
  %101 = and i1 %83, %27, !dbg !37
  %102 = and i1 %84, %27, !dbg !37
  %103 = and i1 %32, %99, !dbg !38
  %104 = and i1 %32, %100, !dbg !38
  %105 = and i1 %32, %101, !dbg !38
  %106 = and i1 %32, %102, !dbg !38
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %103, i32 0, i1 %103) #3, !dbg !39
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %104, i32 0, i1 %104) #3, !dbg !39
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %105, i32 0, i1 %105) #3, !dbg !39
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %106, i32 0, i1 %106) #3, !dbg !39
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !40
  %112 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !40
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !40
  %114 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !40
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %103, i32 0, i1 %103) #3, !dbg !41
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %104, i32 0, i1 %104) #3, !dbg !41
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %105, i32 0, i1 %105) #3, !dbg !41
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %106, i32 0, i1 %106) #3, !dbg !41
  %119 = sext i32 %79 to i64, !dbg !42
  %120 = getelementptr float, ptr addrspace(1) %3, i64 %119, !dbg !42
  %121 = sext i32 %85 to i64, !dbg !42
  %122 = getelementptr float, ptr addrspace(1) %3, i64 %121, !dbg !42
  %123 = sext i32 %82 to i64, !dbg !42
  %124 = getelementptr float, ptr addrspace(1) %3, i64 %123, !dbg !42
  %125 = sext i32 %86 to i64, !dbg !42
  %126 = getelementptr float, ptr addrspace(1) %3, i64 %125, !dbg !42
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %103, i32 0, i1 %103) #3, !dbg !43
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %104, i32 0, i1 %104) #3, !dbg !43
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %105, i32 0, i1 %105) #3, !dbg !43
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %106, i32 0, i1 %106) #3, !dbg !43
  %131 = getelementptr float, ptr addrspace(1) %4, i64 %119, !dbg !44
  %132 = getelementptr float, ptr addrspace(1) %4, i64 %121, !dbg !44
  %133 = getelementptr float, ptr addrspace(1) %4, i64 %123, !dbg !44
  %134 = getelementptr float, ptr addrspace(1) %4, i64 %125, !dbg !44
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %103, i32 0, i1 %103) #3, !dbg !45
  %136 = bitcast i32 %135 to float, !dbg !45
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %104, i32 0, i1 %104) #3, !dbg !45
  %138 = bitcast i32 %137 to float, !dbg !45
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %105, i32 0, i1 %105) #3, !dbg !45
  %140 = bitcast i32 %139 to float, !dbg !45
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %106, i32 0, i1 %106) #3, !dbg !45
  %142 = bitcast i32 %141 to float, !dbg !45
  %143 = fadd float %136, 0x3F50624DE0000000, !dbg !46
  %144 = fadd float %138, 0x3F50624DE0000000, !dbg !46
  %145 = fadd float %140, 0x3F50624DE0000000, !dbg !46
  %146 = fadd float %142, 0x3F50624DE0000000, !dbg !46
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i = icmp eq i32 %147, 0, !dbg !47
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i = icmp eq i32 %148, 0, !dbg !47
  br i1 %.not.i, label %154, label %149, !dbg !47

149:                                              ; preds = %17
  br i1 %.not1.i, label %152, label %150, !dbg !47

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %143) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %143) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

154:                                              ; preds = %17
  br i1 %.not1.i, label %157, label %155, !dbg !47

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %143) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %143) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

__nv_sqrtf.exit:                                  ; preds = %150, %152, %155, %157
  %.0.i = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !47
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i1 = icmp eq i32 %159, 0, !dbg !47
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i4 = icmp eq i32 %160, 0, !dbg !47
  br i1 %.not.i1, label %166, label %161, !dbg !47

161:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %164, label %162, !dbg !47

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %144) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %144) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

166:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %169, label %167, !dbg !47

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %144) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %144) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

__nv_sqrtf.exit5:                                 ; preds = %162, %164, %167, %169
  %.0.i3 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !47
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i6 = icmp eq i32 %171, 0, !dbg !47
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i9 = icmp eq i32 %172, 0, !dbg !47
  br i1 %.not.i6, label %178, label %173, !dbg !47

173:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %176, label %174, !dbg !47

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %145) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %145) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

178:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %181, label %179, !dbg !47

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.f(float %145) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.f(float %145) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

__nv_sqrtf.exit10:                                ; preds = %174, %176, %179, %181
  %.0.i8 = phi float [ %175, %174 ], [ %177, %176 ], [ %180, %179 ], [ %182, %181 ], !dbg !47
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i11 = icmp eq i32 %183, 0, !dbg !47
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i14 = icmp eq i32 %184, 0, !dbg !47
  br i1 %.not.i11, label %190, label %185, !dbg !47

185:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %188, label %186, !dbg !47

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %146) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %146) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

190:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %193, label %191, !dbg !47

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.f(float %146) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.f(float %146) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

__nv_sqrtf.exit15:                                ; preds = %186, %188, %191, %193
  %.0.i13 = phi float [ %187, %186 ], [ %189, %188 ], [ %192, %191 ], [ %194, %193 ], !dbg !47
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !48
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !48
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !48
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !48
  %199 = getelementptr float, ptr addrspace(1) %5, i64 %119, !dbg !49
  %200 = getelementptr float, ptr addrspace(1) %5, i64 %121, !dbg !49
  %201 = getelementptr float, ptr addrspace(1) %5, i64 %123, !dbg !49
  %202 = getelementptr float, ptr addrspace(1) %5, i64 %125, !dbg !49
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %199, i1 %103, i32 0, i1 %103) #3, !dbg !50
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %104, i32 0, i1 %104) #3, !dbg !50
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %201, i1 %105, i32 0, i1 %105) #3, !dbg !50
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %202, i1 %106, i32 0, i1 %106) #3, !dbg !50
  %207 = getelementptr float, ptr addrspace(1) %6, i64 %119, !dbg !51
  %208 = getelementptr float, ptr addrspace(1) %6, i64 %121, !dbg !51
  %209 = getelementptr float, ptr addrspace(1) %6, i64 %123, !dbg !51
  %210 = getelementptr float, ptr addrspace(1) %6, i64 %125, !dbg !51
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %103, i32 0, i1 %103) #3, !dbg !52
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %104, i32 0, i1 %104) #3, !dbg !52
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 %105, i32 0, i1 %105) #3, !dbg !52
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %106, i32 0, i1 %106) #3, !dbg !52
  %215 = icmp sgt i32 %43, 21, !dbg !53
  %216 = icmp sgt i32 %47, 21, !dbg !53
  %217 = icmp slt i32 %45, 33, !dbg !54
  %218 = icmp slt i32 %49, 33, !dbg !54
  %219 = add nsw i32 %43, -22, !dbg !55
  %220 = icmp ult i32 %219, 11, !dbg !55
  %221 = and i1 %217, %215, !dbg !55
  %222 = add nsw i32 %47, -22, !dbg !55
  %223 = icmp ult i32 %222, 11, !dbg !55
  %224 = and i1 %216, %218, !dbg !55
  %225 = add i32 %42, %219, !dbg !56
  %226 = add i32 %42, -22, !dbg !57
  %227 = add i32 %226, %45, !dbg !56
  %228 = add i32 %42, %222, !dbg !56
  %229 = add i32 %226, %49, !dbg !56
  %230 = sext i32 %225 to i64, !dbg !58
  %231 = getelementptr float, ptr addrspace(1) %7, i64 %230, !dbg !58
  %232 = sext i32 %227 to i64, !dbg !58
  %233 = getelementptr float, ptr addrspace(1) %7, i64 %232, !dbg !58
  %234 = sext i32 %228 to i64, !dbg !58
  %235 = getelementptr float, ptr addrspace(1) %7, i64 %234, !dbg !58
  %236 = sext i32 %229 to i64, !dbg !58
  %237 = getelementptr float, ptr addrspace(1) %7, i64 %236, !dbg !58
  %238 = and i1 %27, %220, !dbg !59
  %239 = and i1 %27, %221, !dbg !59
  %240 = and i1 %223, %27, !dbg !59
  %241 = and i1 %224, %27, !dbg !59
  %242 = and i1 %32, %238, !dbg !60
  %243 = and i1 %32, %239, !dbg !60
  %244 = and i1 %32, %240, !dbg !60
  %245 = and i1 %32, %241, !dbg !60
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %242, i32 0, i1 %242) #3, !dbg !61
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %243, i32 0, i1 %243) #3, !dbg !61
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %244, i32 0, i1 %244) #3, !dbg !61
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %245, i32 0, i1 %245) #3, !dbg !61
  %250 = getelementptr float, ptr addrspace(1) %0, i64 %230, !dbg !62
  %251 = getelementptr float, ptr addrspace(1) %0, i64 %232, !dbg !62
  %252 = getelementptr float, ptr addrspace(1) %0, i64 %234, !dbg !62
  %253 = getelementptr float, ptr addrspace(1) %0, i64 %236, !dbg !62
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %250, i1 %242, i32 0, i1 %242) #3, !dbg !63
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %251, i1 %243, i32 0, i1 %243) #3, !dbg !63
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %252, i1 %244, i32 0, i1 %244) #3, !dbg !63
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %253, i1 %245, i32 0, i1 %245) #3, !dbg !63
  %258 = icmp sgt <4 x i32> %37, splat (i32 32), !dbg !64
  %259 = add nsw i32 %43, -33, !dbg !65
  %260 = add nsw i32 %45, -33, !dbg !65
  %261 = add nsw i32 %47, -33, !dbg !65
  %262 = add nsw i32 %49, -33, !dbg !65
  %263 = add i32 %42, %259, !dbg !66
  %264 = add i32 %42, %260, !dbg !66
  %265 = add i32 %42, %261, !dbg !66
  %266 = add i32 %42, %262, !dbg !66
  %267 = sext i32 %263 to i64, !dbg !67
  %268 = getelementptr float, ptr addrspace(1) %8, i64 %267, !dbg !67
  %269 = sext i32 %264 to i64, !dbg !67
  %270 = getelementptr float, ptr addrspace(1) %8, i64 %269, !dbg !67
  %271 = sext i32 %265 to i64, !dbg !67
  %272 = getelementptr float, ptr addrspace(1) %8, i64 %271, !dbg !67
  %273 = sext i32 %266 to i64, !dbg !67
  %274 = getelementptr float, ptr addrspace(1) %8, i64 %273, !dbg !67
  %275 = extractelement <4 x i1> %258, i64 3, !dbg !68
  %276 = and i1 %275, %27, !dbg !68
  %277 = extractelement <4 x i1> %258, i64 2, !dbg !68
  %278 = and i1 %277, %27, !dbg !68
  %279 = extractelement <4 x i1> %258, i64 1, !dbg !68
  %280 = and i1 %279, %27, !dbg !68
  %281 = extractelement <4 x i1> %258, i64 0, !dbg !68
  %282 = and i1 %281, %27, !dbg !68
  %283 = and i1 %32, %276, !dbg !69
  %284 = and i1 %32, %278, !dbg !69
  %285 = and i1 %32, %280, !dbg !69
  %286 = and i1 %32, %282, !dbg !69
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %268, i1 %283, i32 0, i1 %283) #3, !dbg !70
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %270, i1 %284, i32 0, i1 %284) #3, !dbg !70
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %272, i1 %285, i32 0, i1 %285) #3, !dbg !70
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %274, i1 %286, i32 0, i1 %286) #3, !dbg !70
  %291 = sext i32 %259 to i64, !dbg !71
  %292 = getelementptr float, ptr addrspace(1) %9, i64 %291, !dbg !71
  %293 = sext i32 %260 to i64, !dbg !71
  %294 = getelementptr float, ptr addrspace(1) %9, i64 %293, !dbg !71
  %295 = sext i32 %261 to i64, !dbg !71
  %296 = getelementptr float, ptr addrspace(1) %9, i64 %295, !dbg !71
  %297 = sext i32 %262 to i64, !dbg !71
  %298 = getelementptr float, ptr addrspace(1) %9, i64 %297, !dbg !71
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %292, i1 %283, i32 0, i1 %283) #3, !dbg !72
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %294, i1 %284, i32 0, i1 %284) #3, !dbg !72
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %296, i1 %285, i32 0, i1 %285) #3, !dbg !72
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %298, i1 %286, i32 0, i1 %286) #3, !dbg !72
  %303 = getelementptr float, ptr addrspace(1) %10, i64 %291, !dbg !73
  %304 = getelementptr float, ptr addrspace(1) %10, i64 %293, !dbg !73
  %305 = getelementptr float, ptr addrspace(1) %10, i64 %295, !dbg !73
  %306 = getelementptr float, ptr addrspace(1) %10, i64 %297, !dbg !73
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %303, i1 %283, i32 0, i1 %283) #3, !dbg !74
  %308 = bitcast i32 %307 to float, !dbg !74
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %304, i1 %284, i32 0, i1 %284) #3, !dbg !74
  %310 = bitcast i32 %309 to float, !dbg !74
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %305, i1 %285, i32 0, i1 %285) #3, !dbg !74
  %312 = bitcast i32 %311 to float, !dbg !74
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %306, i1 %286, i32 0, i1 %286) #3, !dbg !74
  %314 = bitcast i32 %313 to float, !dbg !74
  %315 = fadd float %308, 0x3F50624DE0000000, !dbg !75
  %316 = fadd float %310, 0x3F50624DE0000000, !dbg !75
  %317 = fadd float %312, 0x3F50624DE0000000, !dbg !75
  %318 = fadd float %314, 0x3F50624DE0000000, !dbg !75
  %319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i16 = icmp eq i32 %319, 0, !dbg !76
  %320 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i19 = icmp eq i32 %320, 0, !dbg !76
  br i1 %.not.i16, label %326, label %321, !dbg !76

321:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %324, label %322, !dbg !76

322:                                              ; preds = %321
  %323 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %315) #3, !dbg !76
  br label %__nv_sqrtf.exit20, !dbg !76

324:                                              ; preds = %321
  %325 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %315) #3, !dbg !76
  br label %__nv_sqrtf.exit20, !dbg !76

326:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %329, label %327, !dbg !76

327:                                              ; preds = %326
  %328 = tail call float @llvm.nvvm.sqrt.rn.f(float %315) #3, !dbg !76
  br label %__nv_sqrtf.exit20, !dbg !76

329:                                              ; preds = %326
  %330 = tail call float @llvm.nvvm.sqrt.approx.f(float %315) #3, !dbg !76
  br label %__nv_sqrtf.exit20, !dbg !76

__nv_sqrtf.exit20:                                ; preds = %322, %324, %327, %329
  %.0.i18 = phi float [ %323, %322 ], [ %325, %324 ], [ %328, %327 ], [ %330, %329 ], !dbg !76
  %331 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i21 = icmp eq i32 %331, 0, !dbg !76
  %332 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i24 = icmp eq i32 %332, 0, !dbg !76
  br i1 %.not.i21, label %338, label %333, !dbg !76

333:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %336, label %334, !dbg !76

334:                                              ; preds = %333
  %335 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %316) #3, !dbg !76
  br label %__nv_sqrtf.exit25, !dbg !76

336:                                              ; preds = %333
  %337 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %316) #3, !dbg !76
  br label %__nv_sqrtf.exit25, !dbg !76

338:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %341, label %339, !dbg !76

339:                                              ; preds = %338
  %340 = tail call float @llvm.nvvm.sqrt.rn.f(float %316) #3, !dbg !76
  br label %__nv_sqrtf.exit25, !dbg !76

341:                                              ; preds = %338
  %342 = tail call float @llvm.nvvm.sqrt.approx.f(float %316) #3, !dbg !76
  br label %__nv_sqrtf.exit25, !dbg !76

__nv_sqrtf.exit25:                                ; preds = %334, %336, %339, %341
  %.0.i23 = phi float [ %335, %334 ], [ %337, %336 ], [ %340, %339 ], [ %342, %341 ], !dbg !76
  %343 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i26 = icmp eq i32 %343, 0, !dbg !76
  %344 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i29 = icmp eq i32 %344, 0, !dbg !76
  br i1 %.not.i26, label %350, label %345, !dbg !76

345:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %348, label %346, !dbg !76

346:                                              ; preds = %345
  %347 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %317) #3, !dbg !76
  br label %__nv_sqrtf.exit30, !dbg !76

348:                                              ; preds = %345
  %349 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %317) #3, !dbg !76
  br label %__nv_sqrtf.exit30, !dbg !76

350:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %353, label %351, !dbg !76

351:                                              ; preds = %350
  %352 = tail call float @llvm.nvvm.sqrt.rn.f(float %317) #3, !dbg !76
  br label %__nv_sqrtf.exit30, !dbg !76

353:                                              ; preds = %350
  %354 = tail call float @llvm.nvvm.sqrt.approx.f(float %317) #3, !dbg !76
  br label %__nv_sqrtf.exit30, !dbg !76

__nv_sqrtf.exit30:                                ; preds = %346, %348, %351, %353
  %.0.i28 = phi float [ %347, %346 ], [ %349, %348 ], [ %352, %351 ], [ %354, %353 ], !dbg !76
  %355 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i31 = icmp eq i32 %355, 0, !dbg !76
  %356 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i34 = icmp eq i32 %356, 0, !dbg !76
  br i1 %.not.i31, label %362, label %357, !dbg !76

357:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %360, label %358, !dbg !76

358:                                              ; preds = %357
  %359 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %318) #3, !dbg !76
  br label %__nv_sqrtf.exit35, !dbg !76

360:                                              ; preds = %357
  %361 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %318) #3, !dbg !76
  br label %__nv_sqrtf.exit35, !dbg !76

362:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %365, label %363, !dbg !76

363:                                              ; preds = %362
  %364 = tail call float @llvm.nvvm.sqrt.rn.f(float %318) #3, !dbg !76
  br label %__nv_sqrtf.exit35, !dbg !76

365:                                              ; preds = %362
  %366 = tail call float @llvm.nvvm.sqrt.approx.f(float %318) #3, !dbg !76
  br label %__nv_sqrtf.exit35, !dbg !76

__nv_sqrtf.exit35:                                ; preds = %358, %360, %363, %365
  %.0.i33 = phi float [ %359, %358 ], [ %361, %360 ], [ %364, %363 ], [ %366, %365 ], !dbg !76
  %367 = insertelement <4 x i32> poison, i32 %290, i64 0, !dbg !70
  %368 = insertelement <4 x i32> %367, i32 %289, i64 1, !dbg !70
  %369 = insertelement <4 x i32> %368, i32 %288, i64 2, !dbg !70
  %370 = insertelement <4 x i32> %369, i32 %287, i64 3, !dbg !70
  %371 = bitcast <4 x i32> %370 to <4 x float>, !dbg !70
  %372 = insertelement <4 x i32> poison, i32 %302, i64 0, !dbg !72
  %373 = insertelement <4 x i32> %372, i32 %301, i64 1, !dbg !72
  %374 = insertelement <4 x i32> %373, i32 %300, i64 2, !dbg !72
  %375 = insertelement <4 x i32> %374, i32 %299, i64 3, !dbg !72
  %376 = bitcast <4 x i32> %375 to <4 x float>, !dbg !72
  %377 = insertelement <4 x i32> poison, i32 %249, i64 0, !dbg !61
  %378 = insertelement <4 x i32> %377, i32 %248, i64 1, !dbg !61
  %379 = insertelement <4 x i32> %378, i32 %247, i64 2, !dbg !61
  %380 = insertelement <4 x i32> %379, i32 %246, i64 3, !dbg !61
  %381 = bitcast <4 x i32> %380 to <4 x float>, !dbg !61
  %382 = insertelement <4 x i32> poison, i32 %257, i64 0, !dbg !63
  %383 = insertelement <4 x i32> %382, i32 %256, i64 1, !dbg !63
  %384 = insertelement <4 x i32> %383, i32 %255, i64 2, !dbg !63
  %385 = insertelement <4 x i32> %384, i32 %254, i64 3, !dbg !63
  %386 = bitcast <4 x i32> %385 to <4 x float>, !dbg !63
  %387 = insertelement <4 x i32> poison, i32 %118, i64 0, !dbg !41
  %388 = insertelement <4 x i32> %387, i32 %117, i64 1, !dbg !41
  %389 = insertelement <4 x i32> %388, i32 %116, i64 2, !dbg !41
  %390 = insertelement <4 x i32> %389, i32 %115, i64 3, !dbg !41
  %391 = bitcast <4 x i32> %390 to <4 x float>, !dbg !41
  %392 = insertelement <4 x i32> poison, i32 %130, i64 0, !dbg !43
  %393 = insertelement <4 x i32> %392, i32 %129, i64 1, !dbg !43
  %394 = insertelement <4 x i32> %393, i32 %128, i64 2, !dbg !43
  %395 = insertelement <4 x i32> %394, i32 %127, i64 3, !dbg !43
  %396 = bitcast <4 x i32> %395 to <4 x float>, !dbg !43
  %397 = insertelement <4 x i32> poison, i32 %206, i64 0, !dbg !50
  %398 = insertelement <4 x i32> %397, i32 %205, i64 1, !dbg !50
  %399 = insertelement <4 x i32> %398, i32 %204, i64 2, !dbg !50
  %400 = insertelement <4 x i32> %399, i32 %203, i64 3, !dbg !50
  %401 = bitcast <4 x i32> %400 to <4 x float>, !dbg !50
  %402 = insertelement <4 x i32> poison, i32 %214, i64 0, !dbg !52
  %403 = insertelement <4 x i32> %402, i32 %213, i64 1, !dbg !52
  %404 = insertelement <4 x i32> %403, i32 %212, i64 2, !dbg !52
  %405 = insertelement <4 x i32> %404, i32 %211, i64 3, !dbg !52
  %406 = bitcast <4 x i32> %405 to <4 x float>, !dbg !52
  %407 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !39
  %408 = insertelement <4 x i32> %407, i32 %109, i64 1, !dbg !39
  %409 = insertelement <4 x i32> %408, i32 %108, i64 2, !dbg !39
  %410 = insertelement <4 x i32> %409, i32 %107, i64 3, !dbg !39
  %411 = bitcast <4 x i32> %410 to <4 x float>, !dbg !39
  %412 = insertelement <4 x i32> poison, i32 %74, i64 0, !dbg !32
  %413 = insertelement <4 x i32> %412, i32 %73, i64 1, !dbg !32
  %414 = insertelement <4 x i32> %413, i32 %72, i64 2, !dbg !32
  %415 = insertelement <4 x i32> %414, i32 %71, i64 3, !dbg !32
  %416 = bitcast <4 x i32> %415 to <4 x float>, !dbg !32
  %417 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !77
  %418 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !77
  %419 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !77
  %420 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !77
  %421 = getelementptr float, ptr addrspace(1) %11, i64 %291, !dbg !78
  %422 = getelementptr float, ptr addrspace(1) %11, i64 %293, !dbg !78
  %423 = getelementptr float, ptr addrspace(1) %11, i64 %295, !dbg !78
  %424 = getelementptr float, ptr addrspace(1) %11, i64 %297, !dbg !78
  %425 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %421, i1 %283, i32 0, i1 %283) #3, !dbg !79
  %426 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %422, i1 %284, i32 0, i1 %284) #3, !dbg !79
  %427 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %423, i1 %285, i32 0, i1 %285) #3, !dbg !79
  %428 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %424, i1 %286, i32 0, i1 %286) #3, !dbg !79
  %429 = getelementptr float, ptr addrspace(1) %12, i64 %291, !dbg !80
  %430 = getelementptr float, ptr addrspace(1) %12, i64 %293, !dbg !80
  %431 = getelementptr float, ptr addrspace(1) %12, i64 %295, !dbg !80
  %432 = getelementptr float, ptr addrspace(1) %12, i64 %297, !dbg !80
  %433 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %429, i1 %283, i32 0, i1 %283) #3, !dbg !81
  %434 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %430, i1 %284, i32 0, i1 %284) #3, !dbg !81
  %435 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %431, i1 %285, i32 0, i1 %285) #3, !dbg !81
  %436 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %432, i1 %286, i32 0, i1 %286) #3, !dbg !81
  %437 = getelementptr float, ptr addrspace(1) %13, i64 %267, !dbg !82
  %438 = getelementptr float, ptr addrspace(1) %13, i64 %269, !dbg !82
  %439 = getelementptr float, ptr addrspace(1) %13, i64 %271, !dbg !82
  %440 = getelementptr float, ptr addrspace(1) %13, i64 %273, !dbg !82
  %441 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %437, i1 %283, i32 0, i1 %283) #3, !dbg !83
  %442 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %438, i1 %284, i32 0, i1 %284) #3, !dbg !83
  %443 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %439, i1 %285, i32 0, i1 %285) #3, !dbg !83
  %444 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %440, i1 %286, i32 0, i1 %286) #3, !dbg !83
  %445 = fsub <4 x float> %371, %376, !dbg !84
  %446 = fadd <4 x float> %381, %386, !dbg !85
  %447 = fsub <4 x float> %391, %396, !dbg !86
  %448 = insertelement <4 x float> poison, float %198, i64 0, !dbg !87
  %449 = insertelement <4 x float> %448, float %197, i64 1, !dbg !87
  %450 = insertelement <4 x float> %449, float %196, i64 2, !dbg !87
  %451 = insertelement <4 x float> %450, float %195, i64 3, !dbg !87
  %452 = fmul <4 x float> %447, %451, !dbg !87
  %453 = fmul <4 x float> %452, %401, !dbg !88
  %454 = fadd <4 x float> %453, %406, !dbg !89
  %455 = fadd <4 x float> %454, %411, !dbg !90
  %456 = insertelement <4 x float> poison, float %420, i64 0, !dbg !91
  %457 = insertelement <4 x float> %456, float %419, i64 1, !dbg !91
  %458 = insertelement <4 x float> %457, float %418, i64 2, !dbg !91
  %459 = insertelement <4 x float> %458, float %417, i64 3, !dbg !91
  %460 = fmul <4 x float> %445, %459, !dbg !91
  %461 = insertelement <4 x i32> poison, i32 %428, i64 0, !dbg !79
  %462 = insertelement <4 x i32> %461, i32 %427, i64 1, !dbg !79
  %463 = insertelement <4 x i32> %462, i32 %426, i64 2, !dbg !79
  %464 = insertelement <4 x i32> %463, i32 %425, i64 3, !dbg !79
  %465 = bitcast <4 x i32> %464 to <4 x float>, !dbg !79
  %466 = fmul <4 x float> %460, %465, !dbg !92
  %467 = insertelement <4 x i32> poison, i32 %436, i64 0, !dbg !81
  %468 = insertelement <4 x i32> %467, i32 %435, i64 1, !dbg !81
  %469 = insertelement <4 x i32> %468, i32 %434, i64 2, !dbg !81
  %470 = insertelement <4 x i32> %469, i32 %433, i64 3, !dbg !81
  %471 = bitcast <4 x i32> %470 to <4 x float>, !dbg !81
  %472 = fadd <4 x float> %466, %471, !dbg !93
  %473 = insertelement <4 x i32> poison, i32 %444, i64 0, !dbg !83
  %474 = insertelement <4 x i32> %473, i32 %443, i64 1, !dbg !83
  %475 = insertelement <4 x i32> %474, i32 %442, i64 2, !dbg !83
  %476 = insertelement <4 x i32> %475, i32 %441, i64 3, !dbg !83
  %477 = bitcast <4 x i32> %476 to <4 x float>, !dbg !83
  %478 = fadd <4 x float> %472, %477, !dbg !94
  %479 = select <4 x i1> %258, <4 x float> %478, <4 x float> zeroinitializer, !dbg !95
  %480 = insertelement <4 x i1> poison, i1 %224, i64 0, !dbg !96
  %481 = insertelement <4 x i1> %480, i1 %223, i64 1, !dbg !96
  %482 = insertelement <4 x i1> %481, i1 %221, i64 2, !dbg !96
  %483 = insertelement <4 x i1> %482, i1 %220, i64 3, !dbg !96
  %484 = select <4 x i1> %483, <4 x float> %446, <4 x float> %479, !dbg !96
  %485 = insertelement <4 x i1> poison, i1 %84, i64 0, !dbg !96
  %486 = insertelement <4 x i1> %485, i1 %83, i64 1, !dbg !96
  %487 = insertelement <4 x i1> %486, i1 %81, i64 2, !dbg !96
  %488 = insertelement <4 x i1> %487, i1 %80, i64 3, !dbg !96
  %489 = select <4 x i1> %488, <4 x float> %455, <4 x float> %484, !dbg !96
  %490 = select <4 x i1> %39, <4 x float> %416, <4 x float> %489, !dbg !97
  %491 = fcmp olt <4 x float> %490, zeroinitializer, !dbg !98
  %492 = extractelement <4 x i1> %491, i64 3, !dbg !102
  %493 = extractelement <4 x i1> %491, i64 2, !dbg !102
  %494 = extractelement <4 x i1> %491, i64 1, !dbg !102
  %495 = extractelement <4 x i1> %491, i64 0, !dbg !102
  %496 = mul i32 %26, 44, !dbg !103
  %497 = add i32 %496, %43, !dbg !104
  %498 = mul i32 %38, 11264, !dbg !105
  %499 = add i32 %497, %498, !dbg !106
  %500 = sext i32 %499 to i64, !dbg !107
  %501 = getelementptr float, ptr addrspace(1) %14, i64 %500, !dbg !107
  %502 = and i1 %32, %27, !dbg !108
  %bc = bitcast <4 x float> %490 to <4 x i32>, !dbg !109
  %503 = extractelement <4 x i32> %bc, i64 3, !dbg !109
  %504 = select i1 %492, i32 0, i32 %503, !dbg !102
  %bc36 = bitcast <4 x float> %490 to <4 x i32>, !dbg !109
  %505 = extractelement <4 x i32> %bc36, i64 2, !dbg !109
  %506 = select i1 %493, i32 0, i32 %505, !dbg !102
  %bc37 = bitcast <4 x float> %490 to <4 x i32>, !dbg !109
  %507 = extractelement <4 x i32> %bc37, i64 1, !dbg !109
  %508 = select i1 %494, i32 0, i32 %507, !dbg !102
  %bc38 = bitcast <4 x float> %490 to <4 x i32>, !dbg !109
  %509 = extractelement <4 x i32> %bc38, i64 0, !dbg !109
  %510 = select i1 %495, i32 0, i32 %509, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %504, i32 %506, i32 %508, i32 %510, ptr addrspace(1) %501, i1 %502) #3, !dbg !109
  ret void, !dbg !110
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyy2ojrhwcjtxlmgfz2566bd2z54ndsbf7vhzwwrckanv4m5nkrk.py", directory: "inductor_cache/yy")
!4 = !{ptr @triton_poi_fused_cat_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_9", linkageName: "triton_poi_fused_cat_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 25, column: 28, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 26, column: 44, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 23, column: 23, scope: !7)
!19 = !DILocation(line: 24, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 36, column: 18, scope: !7)
!23 = !DILocation(line: 37, column: 33, scope: !7)
!24 = !DILocation(line: 37, column: 43, scope: !7)
!25 = !DILocation(line: 37, column: 38, scope: !7)
!26 = !DILocation(line: 41, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 49, scope: !7)
!28 = !DILocation(line: 38, column: 19, scope: !7)
!29 = !DILocation(line: 37, column: 30, scope: !7)
!30 = !DILocation(line: 37, column: 62, scope: !7)
!31 = !DILocation(line: 37, column: 70, scope: !7)
!32 = !DILocation(line: 37, column: 55, scope: !7)
!33 = !DILocation(line: 40, column: 18, scope: !7)
!34 = !DILocation(line: 42, column: 58, scope: !7)
!35 = !DILocation(line: 42, column: 50, scope: !7)
!36 = !DILocation(line: 42, column: 31, scope: !7)
!37 = !DILocation(line: 42, column: 71, scope: !7)
!38 = !DILocation(line: 42, column: 79, scope: !7)
!39 = !DILocation(line: 42, column: 64, scope: !7)
!40 = !DILocation(line: 43, column: 31, scope: !7)
!41 = !DILocation(line: 43, column: 64, scope: !7)
!42 = !DILocation(line: 44, column: 31, scope: !7)
!43 = !DILocation(line: 44, column: 79, scope: !7)
!44 = !DILocation(line: 46, column: 31, scope: !7)
!45 = !DILocation(line: 46, column: 79, scope: !7)
!46 = !DILocation(line: 48, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 27, scope: !7)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 55, column: 31, scope: !7)
!50 = !DILocation(line: 55, column: 79, scope: !7)
!51 = !DILocation(line: 57, column: 31, scope: !7)
!52 = !DILocation(line: 57, column: 79, scope: !7)
!53 = !DILocation(line: 62, column: 20, scope: !7)
!54 = !DILocation(line: 64, column: 19, scope: !7)
!55 = !DILocation(line: 65, column: 20, scope: !7)
!56 = !DILocation(line: 66, column: 50, scope: !7)
!57 = !DILocation(line: 66, column: 58, scope: !7)
!58 = !DILocation(line: 66, column: 31, scope: !7)
!59 = !DILocation(line: 66, column: 72, scope: !7)
!60 = !DILocation(line: 66, column: 80, scope: !7)
!61 = !DILocation(line: 66, column: 64, scope: !7)
!62 = !DILocation(line: 67, column: 31, scope: !7)
!63 = !DILocation(line: 67, column: 64, scope: !7)
!64 = !DILocation(line: 71, column: 20, scope: !7)
!65 = !DILocation(line: 74, column: 58, scope: !7)
!66 = !DILocation(line: 74, column: 50, scope: !7)
!67 = !DILocation(line: 74, column: 31, scope: !7)
!68 = !DILocation(line: 74, column: 72, scope: !7)
!69 = !DILocation(line: 74, column: 80, scope: !7)
!70 = !DILocation(line: 74, column: 64, scope: !7)
!71 = !DILocation(line: 75, column: 31, scope: !7)
!72 = !DILocation(line: 75, column: 79, scope: !7)
!73 = !DILocation(line: 77, column: 32, scope: !7)
!74 = !DILocation(line: 77, column: 80, scope: !7)
!75 = !DILocation(line: 79, column: 20, scope: !7)
!76 = !DILocation(line: 80, column: 27, scope: !7)
!77 = !DILocation(line: 82, column: 20, scope: !7)
!78 = !DILocation(line: 86, column: 32, scope: !7)
!79 = !DILocation(line: 86, column: 80, scope: !7)
!80 = !DILocation(line: 88, column: 32, scope: !7)
!81 = !DILocation(line: 88, column: 80, scope: !7)
!82 = !DILocation(line: 90, column: 32, scope: !7)
!83 = !DILocation(line: 90, column: 65, scope: !7)
!84 = !DILocation(line: 76, column: 20, scope: !7)
!85 = !DILocation(line: 68, column: 20, scope: !7)
!86 = !DILocation(line: 45, column: 20, scope: !7)
!87 = !DILocation(line: 54, column: 20, scope: !7)
!88 = !DILocation(line: 56, column: 20, scope: !7)
!89 = !DILocation(line: 58, column: 20, scope: !7)
!90 = !DILocation(line: 59, column: 20, scope: !7)
!91 = !DILocation(line: 85, column: 20, scope: !7)
!92 = !DILocation(line: 87, column: 20, scope: !7)
!93 = !DILocation(line: 89, column: 20, scope: !7)
!94 = !DILocation(line: 91, column: 20, scope: !7)
!95 = !DILocation(line: 93, column: 35, scope: !7)
!96 = !DILocation(line: 0, scope: !7)
!97 = !DILocation(line: 96, column: 33, scope: !7)
!98 = !DILocation(line: 118, column: 15, scope: !99, inlinedAt: !101)
!99 = distinct !DILexicalBlockFile(scope: !7, file: !100, discriminator: 0)
!100 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!101 = !DILocation(line: 98, column: 42, scope: !7)
!102 = !DILocation(line: 121, column: 29, scope: !99, inlinedAt: !101)
!103 = !DILocation(line: 99, column: 33, scope: !7)
!104 = !DILocation(line: 99, column: 30, scope: !7)
!105 = !DILocation(line: 99, column: 44, scope: !7)
!106 = !DILocation(line: 99, column: 38, scope: !7)
!107 = !DILocation(line: 99, column: 25, scope: !7)
!108 = !DILocation(line: 99, column: 64, scope: !7)
!109 = !DILocation(line: 99, column: 56, scope: !7)
!110 = !DILocation(line: 99, column: 4, scope: !7)
