; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 60, !dbg !12
  %15 = lshr i32 %12, 4, !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = or disjoint i32 %16, 16, !dbg !12
  %18 = or disjoint i32 %16, 32, !dbg !12
  %19 = or disjoint i32 %16, 48, !dbg !12
  %20 = or disjoint i32 %11, %14, !dbg !13
  %21 = or disjoint i32 %11, %16, !dbg !13
  %22 = or disjoint i32 %11, %17, !dbg !13
  %23 = or disjoint i32 %11, %18, !dbg !13
  %24 = or disjoint i32 %11, %19, !dbg !13
  %25 = icmp slt i32 %20, 64, !dbg !14
  %26 = icmp slt i32 %21, 64, !dbg !14
  %27 = icmp slt i32 %22, 64, !dbg !14
  %28 = icmp slt i32 %23, 64, !dbg !14
  %29 = icmp slt i32 %24, 64, !dbg !14
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %31 = shl i32 %30, 6, !dbg !16
  %32 = or disjoint i32 %31, %16, !dbg !17
  %33 = or disjoint i32 %31, %17, !dbg !17
  %34 = or disjoint i32 %31, %18, !dbg !17
  %35 = or disjoint i32 %31, %19, !dbg !17
  %36 = or disjoint i32 %31, %14, !dbg !17
  %37 = icmp slt i32 %32, 64, !dbg !18
  %38 = icmp slt i32 %33, 64, !dbg !18
  %39 = icmp slt i32 %34, 64, !dbg !18
  %40 = icmp slt i32 %35, 64, !dbg !18
  %41 = icmp slt i32 %36, 64, !dbg !18
  %.frozen = freeze i32 %20, !dbg !19
  %42 = sdiv i32 %.frozen, 16, !dbg !19
  %43 = mul i32 %42, 16, !dbg !20
  %.decomposed = sub i32 %.frozen, %43, !dbg !20
  %44 = shl i32 %32, 4, !dbg !21
  %45 = shl i32 %33, 4, !dbg !21
  %46 = shl i32 %34, 4, !dbg !21
  %47 = shl i32 %35, 4, !dbg !21
  %48 = shl i32 %42, 10, !dbg !22
  %49 = add i32 %48, %.decomposed, !dbg !23
  %50 = add i32 %49, %44, !dbg !24
  %51 = add i32 %49, %45, !dbg !24
  %52 = add i32 %49, %46, !dbg !24
  %53 = add i32 %49, %47, !dbg !24
  %54 = sext i32 %50 to i64, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !25
  %56 = sext i32 %51 to i64, !dbg !25
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !25
  %58 = sext i32 %52 to i64, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !25
  %60 = sext i32 %53 to i64, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !25
  %62 = and i1 %25, %37, !dbg !26
  %63 = and i1 %25, %38, !dbg !26
  %64 = and i1 %25, %39, !dbg !26
  %65 = and i1 %25, %40, !dbg !26
  %66 = and i1 %26, %41, !dbg !26
  %67 = and i1 %27, %41, !dbg !26
  %68 = and i1 %28, %41, !dbg !26
  %69 = and i1 %29, %41, !dbg !26
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %62) #4, !dbg !27
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !27
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !27
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !27
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !27
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %63) #4, !dbg !27
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !27
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !27
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !27
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !27
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %64) #4, !dbg !27
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !27
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !27
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !27
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !27
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %65) #4, !dbg !27
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !27
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !27
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !27
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !27
  %90 = shl i32 %12, 8, !dbg !27
  %91 = and i32 %90, 3840, !dbg !27
  %92 = or disjoint i32 %91, %16, !dbg !27
  %93 = and i32 %13, 1020, !dbg !27
  %94 = lshr exact i32 %91, 4, !dbg !27
  %95 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %94, !dbg !27
  %96 = getelementptr float, ptr addrspace(3) %95, i32 %92, !dbg !27
  %97 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #4, !dbg !27
  %98 = or disjoint i32 %92, 64, !dbg !27
  %99 = lshr i32 %98, 6, !dbg !27
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !27
  %101 = getelementptr float, ptr addrspace(3) %100, i32 %98, !dbg !27
  %102 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #4, !dbg !27
  %103 = or disjoint i32 %92, 128, !dbg !27
  %104 = lshr i32 %103, 6, !dbg !27
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !27
  %106 = getelementptr float, ptr addrspace(3) %105, i32 %103, !dbg !27
  %107 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #4, !dbg !27
  %108 = or disjoint i32 %92, 192, !dbg !27
  %109 = lshr i32 %108, 6, !dbg !27
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !27
  %111 = getelementptr float, ptr addrspace(3) %110, i32 %108, !dbg !27
  %112 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #4, !dbg !27
  %113 = or disjoint i32 %92, 16, !dbg !27
  %114 = getelementptr float, ptr addrspace(3) %95, i32 %113, !dbg !27
  %115 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #4, !dbg !27
  %116 = or disjoint i32 %92, 80, !dbg !27
  %117 = lshr i32 %116, 6, !dbg !27
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !27
  %119 = getelementptr float, ptr addrspace(3) %118, i32 %116, !dbg !27
  %120 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #4, !dbg !27
  %121 = or disjoint i32 %92, 144, !dbg !27
  %122 = lshr i32 %121, 6, !dbg !27
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i32 %122, !dbg !27
  %124 = getelementptr float, ptr addrspace(3) %123, i32 %121, !dbg !27
  %125 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #4, !dbg !27
  %126 = or disjoint i32 %92, 208, !dbg !27
  %127 = lshr i32 %126, 6, !dbg !27
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %127, !dbg !27
  %129 = getelementptr float, ptr addrspace(3) %128, i32 %126, !dbg !27
  %130 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #4, !dbg !27
  %131 = or disjoint i32 %92, 32, !dbg !27
  %132 = getelementptr float, ptr addrspace(3) %95, i32 %131, !dbg !27
  %133 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #4, !dbg !27
  %134 = or disjoint i32 %92, 96, !dbg !27
  %135 = lshr i32 %134, 6, !dbg !27
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !27
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %134, !dbg !27
  %138 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #4, !dbg !27
  %139 = or disjoint i32 %92, 160, !dbg !27
  %140 = lshr i32 %139, 6, !dbg !27
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %140, !dbg !27
  %142 = getelementptr float, ptr addrspace(3) %141, i32 %139, !dbg !27
  %143 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #4, !dbg !27
  %144 = or disjoint i32 %92, 224, !dbg !27
  %145 = lshr i32 %144, 6, !dbg !27
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !27
  %147 = getelementptr float, ptr addrspace(3) %146, i32 %144, !dbg !27
  %148 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #4, !dbg !27
  %149 = or disjoint i32 %92, 48, !dbg !27
  %150 = getelementptr float, ptr addrspace(3) %95, i32 %149, !dbg !27
  %151 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #4, !dbg !27
  %152 = or disjoint i32 %92, 112, !dbg !27
  %153 = lshr i32 %152, 6, !dbg !27
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !27
  %155 = getelementptr float, ptr addrspace(3) %154, i32 %152, !dbg !27
  %156 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #4, !dbg !27
  %157 = or disjoint i32 %92, 176, !dbg !27
  %158 = lshr i32 %157, 6, !dbg !27
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i32 %158, !dbg !27
  %160 = getelementptr float, ptr addrspace(3) %159, i32 %157, !dbg !27
  %161 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %161, i1 true) #4, !dbg !27
  %162 = or disjoint i32 %92, 240, !dbg !27
  %163 = lshr i32 %162, 6, !dbg !27
  %164 = getelementptr float, ptr addrspace(3) @global_smem, i32 %163, !dbg !27
  %165 = getelementptr float, ptr addrspace(3) %164, i32 %162, !dbg !27
  %166 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %166, i1 true) #4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %167 = lshr i32 %93, 6, !dbg !27
  %168 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %167, !dbg !27
  %169 = getelementptr inbounds float, ptr addrspace(3) %168, i32 %93, !dbg !27
  %170 = load float, ptr addrspace(3) %169, align 4, !dbg !27
  %171 = or disjoint i32 %93, 1, !dbg !27
  %172 = getelementptr inbounds float, ptr addrspace(3) %168, i32 %171, !dbg !27
  %173 = load float, ptr addrspace(3) %172, align 4, !dbg !27
  %174 = or disjoint i32 %93, 2, !dbg !27
  %175 = getelementptr inbounds float, ptr addrspace(3) %168, i32 %174, !dbg !27
  %176 = load float, ptr addrspace(3) %175, align 4, !dbg !27
  %177 = or disjoint i32 %93, 3, !dbg !27
  %178 = getelementptr inbounds float, ptr addrspace(3) %168, i32 %177, !dbg !27
  %179 = load float, ptr addrspace(3) %178, align 4, !dbg !27
  %180 = or disjoint i32 %93, 1024, !dbg !27
  %181 = lshr i32 %180, 6, !dbg !27
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %181, !dbg !27
  %183 = getelementptr inbounds float, ptr addrspace(3) %182, i32 %180, !dbg !27
  %184 = load float, ptr addrspace(3) %183, align 4, !dbg !27
  %185 = or disjoint i32 %93, 1025, !dbg !27
  %186 = lshr i32 %185, 6, !dbg !27
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %186, !dbg !27
  %188 = getelementptr inbounds float, ptr addrspace(3) %187, i32 %185, !dbg !27
  %189 = load float, ptr addrspace(3) %188, align 4, !dbg !27
  %190 = or disjoint i32 %93, 1026, !dbg !27
  %191 = lshr i32 %190, 6, !dbg !27
  %192 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %191, !dbg !27
  %193 = getelementptr inbounds float, ptr addrspace(3) %192, i32 %190, !dbg !27
  %194 = load float, ptr addrspace(3) %193, align 4, !dbg !27
  %195 = or disjoint i32 %93, 1027, !dbg !27
  %196 = lshr i32 %195, 6, !dbg !27
  %197 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %196, !dbg !27
  %198 = getelementptr inbounds float, ptr addrspace(3) %197, i32 %195, !dbg !27
  %199 = load float, ptr addrspace(3) %198, align 4, !dbg !27
  %200 = or disjoint i32 %93, 2048, !dbg !27
  %201 = lshr i32 %200, 6, !dbg !27
  %202 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %201, !dbg !27
  %203 = getelementptr inbounds float, ptr addrspace(3) %202, i32 %200, !dbg !27
  %204 = load float, ptr addrspace(3) %203, align 4, !dbg !27
  %205 = or disjoint i32 %93, 2049, !dbg !27
  %206 = lshr i32 %205, 6, !dbg !27
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %206, !dbg !27
  %208 = getelementptr inbounds float, ptr addrspace(3) %207, i32 %205, !dbg !27
  %209 = load float, ptr addrspace(3) %208, align 4, !dbg !27
  %210 = or disjoint i32 %93, 2050, !dbg !27
  %211 = lshr i32 %210, 6, !dbg !27
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %211, !dbg !27
  %213 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %210, !dbg !27
  %214 = load float, ptr addrspace(3) %213, align 4, !dbg !27
  %215 = or disjoint i32 %93, 2051, !dbg !27
  %216 = lshr i32 %215, 6, !dbg !27
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %216, !dbg !27
  %218 = getelementptr inbounds float, ptr addrspace(3) %217, i32 %215, !dbg !27
  %219 = load float, ptr addrspace(3) %218, align 4, !dbg !27
  %220 = or disjoint i32 %93, 3072, !dbg !27
  %221 = lshr i32 %220, 6, !dbg !27
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !27
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %220, !dbg !27
  %224 = load float, ptr addrspace(3) %223, align 4, !dbg !27
  %225 = or disjoint i32 %93, 3073, !dbg !27
  %226 = lshr i32 %225, 6, !dbg !27
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !27
  %228 = getelementptr inbounds float, ptr addrspace(3) %227, i32 %225, !dbg !27
  %229 = load float, ptr addrspace(3) %228, align 4, !dbg !27
  %230 = or disjoint i32 %93, 3074, !dbg !27
  %231 = lshr i32 %230, 6, !dbg !27
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %231, !dbg !27
  %233 = getelementptr inbounds float, ptr addrspace(3) %232, i32 %230, !dbg !27
  %234 = load float, ptr addrspace(3) %233, align 4, !dbg !27
  %235 = or disjoint i32 %93, 3075, !dbg !27
  %236 = lshr i32 %235, 6, !dbg !27
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %236, !dbg !27
  %238 = getelementptr inbounds float, ptr addrspace(3) %237, i32 %235, !dbg !27
  %239 = load float, ptr addrspace(3) %238, align 4, !dbg !27
  %240 = shl i32 %21, 6, !dbg !28
  %241 = shl i32 %22, 6, !dbg !28
  %242 = shl i32 %23, 6, !dbg !28
  %243 = shl i32 %24, 6, !dbg !28
  %244 = add i32 %36, %240, !dbg !29
  %245 = add i32 %36, %241, !dbg !29
  %246 = add i32 %36, %242, !dbg !29
  %247 = add i32 %36, %243, !dbg !29
  %248 = sext i32 %244 to i64, !dbg !30
  %249 = getelementptr float, ptr addrspace(1) %1, i64 %248, !dbg !30
  %250 = sext i32 %245 to i64, !dbg !30
  %251 = getelementptr float, ptr addrspace(1) %1, i64 %250, !dbg !30
  %252 = sext i32 %246 to i64, !dbg !30
  %253 = getelementptr float, ptr addrspace(1) %1, i64 %252, !dbg !30
  %254 = sext i32 %247 to i64, !dbg !30
  %255 = getelementptr float, ptr addrspace(1) %1, i64 %254, !dbg !30
  %256 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %249, i1 %66) #4, !dbg !31
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %251, i1 %67) #4, !dbg !31
  %258 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %253, i1 %68) #4, !dbg !31
  %259 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %255, i1 %69) #4, !dbg !31
  %260 = sext i32 %36 to i64, !dbg !32
  %261 = getelementptr float, ptr addrspace(1) %2, i64 %260, !dbg !32
  %262 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %261, i1 %41) #4, !dbg !33
  %263 = getelementptr float, ptr addrspace(1) %3, i64 %260, !dbg !34
  %264 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %263, i1 %41) #4, !dbg !35
  %265 = extractvalue { i32, i32, i32, i32 } %264, 0, !dbg !35
  %266 = extractvalue { i32, i32, i32, i32 } %264, 1, !dbg !35
  %267 = extractvalue { i32, i32, i32, i32 } %264, 2, !dbg !35
  %268 = extractvalue { i32, i32, i32, i32 } %264, 3, !dbg !35
  %269 = bitcast i32 %265 to float, !dbg !35
  %270 = bitcast i32 %266 to float, !dbg !35
  %271 = bitcast i32 %267 to float, !dbg !35
  %272 = bitcast i32 %268 to float, !dbg !35
  %273 = getelementptr float, ptr addrspace(1) %4, i64 %260, !dbg !36
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %273, i1 %41) #4, !dbg !37
  %275 = getelementptr float, ptr addrspace(1) %5, i64 %260, !dbg !38
  %276 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %275, i1 %41) #4, !dbg !39
  %277 = fadd float %269, 0x3EE4F8B580000000, !dbg !40
  %278 = fadd float %270, 0x3EE4F8B580000000, !dbg !40
  %279 = fadd float %271, 0x3EE4F8B580000000, !dbg !40
  %280 = fadd float %272, 0x3EE4F8B580000000, !dbg !40
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i = icmp eq i32 %281, 0, !dbg !41
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i = icmp eq i32 %282, 0, !dbg !41
  br i1 %.not.i, label %288, label %283, !dbg !41

283:                                              ; preds = %9
  br i1 %.not1.i, label %286, label %284, !dbg !41

284:                                              ; preds = %283
  %285 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %277) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

286:                                              ; preds = %283
  %287 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %277) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

288:                                              ; preds = %9
  br i1 %.not1.i, label %291, label %289, !dbg !41

289:                                              ; preds = %288
  %290 = tail call float @llvm.nvvm.sqrt.rn.f(float %277) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

291:                                              ; preds = %288
  %292 = tail call float @llvm.nvvm.sqrt.approx.f(float %277) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %284, %286, %289, %291
  %.0.i = phi float [ %285, %284 ], [ %287, %286 ], [ %290, %289 ], [ %292, %291 ], !dbg !41
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i1 = icmp eq i32 %293, 0, !dbg !41
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i4 = icmp eq i32 %294, 0, !dbg !41
  br i1 %.not.i1, label %300, label %295, !dbg !41

295:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %298, label %296, !dbg !41

296:                                              ; preds = %295
  %297 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %278) #4, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

298:                                              ; preds = %295
  %299 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %278) #4, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

300:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %303, label %301, !dbg !41

301:                                              ; preds = %300
  %302 = tail call float @llvm.nvvm.sqrt.rn.f(float %278) #4, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

303:                                              ; preds = %300
  %304 = tail call float @llvm.nvvm.sqrt.approx.f(float %278) #4, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %296, %298, %301, %303
  %.0.i3 = phi float [ %297, %296 ], [ %299, %298 ], [ %302, %301 ], [ %304, %303 ], !dbg !41
  %305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i6 = icmp eq i32 %305, 0, !dbg !41
  %306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i9 = icmp eq i32 %306, 0, !dbg !41
  br i1 %.not.i6, label %312, label %307, !dbg !41

307:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %310, label %308, !dbg !41

308:                                              ; preds = %307
  %309 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %279) #4, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

310:                                              ; preds = %307
  %311 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %279) #4, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

312:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %315, label %313, !dbg !41

313:                                              ; preds = %312
  %314 = tail call float @llvm.nvvm.sqrt.rn.f(float %279) #4, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

315:                                              ; preds = %312
  %316 = tail call float @llvm.nvvm.sqrt.approx.f(float %279) #4, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

__nv_sqrtf.exit10:                                ; preds = %308, %310, %313, %315
  %.0.i8 = phi float [ %309, %308 ], [ %311, %310 ], [ %314, %313 ], [ %316, %315 ], !dbg !41
  %317 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i11 = icmp eq i32 %317, 0, !dbg !41
  %318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i14 = icmp eq i32 %318, 0, !dbg !41
  br i1 %.not.i11, label %324, label %319, !dbg !41

319:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %322, label %320, !dbg !41

320:                                              ; preds = %319
  %321 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %280) #4, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

322:                                              ; preds = %319
  %323 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %280) #4, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

324:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %327, label %325, !dbg !41

325:                                              ; preds = %324
  %326 = tail call float @llvm.nvvm.sqrt.rn.f(float %280) #4, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

327:                                              ; preds = %324
  %328 = tail call float @llvm.nvvm.sqrt.approx.f(float %280) #4, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

__nv_sqrtf.exit15:                                ; preds = %320, %322, %325, %327
  %.0.i13 = phi float [ %321, %320 ], [ %323, %322 ], [ %326, %325 ], [ %328, %327 ], !dbg !41
  %329 = extractvalue { i32, i32, i32, i32 } %259, 3, !dbg !31
  %330 = bitcast i32 %329 to float, !dbg !31
  %331 = extractvalue { i32, i32, i32, i32 } %262, 3, !dbg !33
  %332 = bitcast i32 %331 to float, !dbg !33
  %333 = fsub float %330, %332, !dbg !42
  %334 = extractvalue { i32, i32, i32, i32 } %259, 2, !dbg !31
  %335 = bitcast i32 %334 to float, !dbg !31
  %336 = extractvalue { i32, i32, i32, i32 } %262, 2, !dbg !33
  %337 = bitcast i32 %336 to float, !dbg !33
  %338 = fsub float %335, %337, !dbg !42
  %339 = extractvalue { i32, i32, i32, i32 } %259, 1, !dbg !31
  %340 = bitcast i32 %339 to float, !dbg !31
  %341 = extractvalue { i32, i32, i32, i32 } %262, 1, !dbg !33
  %342 = bitcast i32 %341 to float, !dbg !33
  %343 = fsub float %340, %342, !dbg !42
  %344 = extractvalue { i32, i32, i32, i32 } %259, 0, !dbg !31
  %345 = bitcast i32 %344 to float, !dbg !31
  %346 = extractvalue { i32, i32, i32, i32 } %262, 0, !dbg !33
  %347 = bitcast i32 %346 to float, !dbg !33
  %348 = fsub float %345, %347, !dbg !42
  %349 = extractvalue { i32, i32, i32, i32 } %258, 3, !dbg !31
  %350 = bitcast i32 %349 to float, !dbg !31
  %351 = fsub float %350, %332, !dbg !42
  %352 = extractvalue { i32, i32, i32, i32 } %258, 2, !dbg !31
  %353 = bitcast i32 %352 to float, !dbg !31
  %354 = fsub float %353, %337, !dbg !42
  %355 = extractvalue { i32, i32, i32, i32 } %258, 1, !dbg !31
  %356 = bitcast i32 %355 to float, !dbg !31
  %357 = fsub float %356, %342, !dbg !42
  %358 = extractvalue { i32, i32, i32, i32 } %258, 0, !dbg !31
  %359 = bitcast i32 %358 to float, !dbg !31
  %360 = fsub float %359, %347, !dbg !42
  %361 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !31
  %362 = bitcast i32 %361 to float, !dbg !31
  %363 = fsub float %362, %332, !dbg !42
  %364 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !31
  %365 = bitcast i32 %364 to float, !dbg !31
  %366 = fsub float %365, %337, !dbg !42
  %367 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !31
  %368 = bitcast i32 %367 to float, !dbg !31
  %369 = fsub float %368, %342, !dbg !42
  %370 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !31
  %371 = bitcast i32 %370 to float, !dbg !31
  %372 = fsub float %371, %347, !dbg !42
  %373 = extractvalue { i32, i32, i32, i32 } %256, 3, !dbg !31
  %374 = bitcast i32 %373 to float, !dbg !31
  %375 = fsub float %374, %332, !dbg !42
  %376 = extractvalue { i32, i32, i32, i32 } %256, 2, !dbg !31
  %377 = bitcast i32 %376 to float, !dbg !31
  %378 = fsub float %377, %337, !dbg !42
  %379 = extractvalue { i32, i32, i32, i32 } %256, 1, !dbg !31
  %380 = bitcast i32 %379 to float, !dbg !31
  %381 = fsub float %380, %342, !dbg !42
  %382 = extractvalue { i32, i32, i32, i32 } %256, 0, !dbg !31
  %383 = bitcast i32 %382 to float, !dbg !31
  %384 = fsub float %383, %347, !dbg !42
  %385 = extractvalue { i32, i32, i32, i32 } %276, 3, !dbg !39
  %386 = bitcast i32 %385 to float, !dbg !39
  %387 = extractvalue { i32, i32, i32, i32 } %276, 2, !dbg !39
  %388 = bitcast i32 %387 to float, !dbg !39
  %389 = extractvalue { i32, i32, i32, i32 } %276, 1, !dbg !39
  %390 = bitcast i32 %389 to float, !dbg !39
  %391 = extractvalue { i32, i32, i32, i32 } %276, 0, !dbg !39
  %392 = bitcast i32 %391 to float, !dbg !39
  %393 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !37
  %394 = bitcast i32 %393 to float, !dbg !37
  %395 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !37
  %396 = bitcast i32 %395 to float, !dbg !37
  %397 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !37
  %398 = bitcast i32 %397 to float, !dbg !37
  %399 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !37
  %400 = bitcast i32 %399 to float, !dbg !37
  %401 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !43
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !43
  %403 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !43
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !43
  %405 = fmul float %384, %401, !dbg !44
  %406 = fmul float %381, %402, !dbg !44
  %407 = fmul float %378, %403, !dbg !44
  %408 = fmul float %375, %404, !dbg !44
  %409 = fmul float %372, %401, !dbg !44
  %410 = fmul float %369, %402, !dbg !44
  %411 = fmul float %366, %403, !dbg !44
  %412 = fmul float %363, %404, !dbg !44
  %413 = fmul float %360, %401, !dbg !44
  %414 = fmul float %357, %402, !dbg !44
  %415 = fmul float %354, %403, !dbg !44
  %416 = fmul float %351, %404, !dbg !44
  %417 = fmul float %348, %401, !dbg !44
  %418 = fmul float %343, %402, !dbg !44
  %419 = fmul float %338, %403, !dbg !44
  %420 = fmul float %333, %404, !dbg !44
  %421 = fmul float %405, %400, !dbg !45
  %422 = fmul float %406, %398, !dbg !45
  %423 = fmul float %407, %396, !dbg !45
  %424 = fmul float %408, %394, !dbg !45
  %425 = fmul float %409, %400, !dbg !45
  %426 = fmul float %410, %398, !dbg !45
  %427 = fmul float %411, %396, !dbg !45
  %428 = fmul float %412, %394, !dbg !45
  %429 = fmul float %413, %400, !dbg !45
  %430 = fmul float %414, %398, !dbg !45
  %431 = fmul float %415, %396, !dbg !45
  %432 = fmul float %416, %394, !dbg !45
  %433 = fmul float %417, %400, !dbg !45
  %434 = fmul float %418, %398, !dbg !45
  %435 = fmul float %419, %396, !dbg !45
  %436 = fmul float %420, %394, !dbg !45
  %437 = fadd float %421, %392, !dbg !46
  %438 = fadd float %422, %390, !dbg !46
  %439 = fadd float %423, %388, !dbg !46
  %440 = fadd float %424, %386, !dbg !46
  %441 = fadd float %425, %392, !dbg !46
  %442 = fadd float %426, %390, !dbg !46
  %443 = fadd float %427, %388, !dbg !46
  %444 = fadd float %428, %386, !dbg !46
  %445 = fadd float %429, %392, !dbg !46
  %446 = fadd float %430, %390, !dbg !46
  %447 = fadd float %431, %388, !dbg !46
  %448 = fadd float %432, %386, !dbg !46
  %449 = fadd float %433, %392, !dbg !46
  %450 = fadd float %434, %390, !dbg !46
  %451 = fadd float %435, %388, !dbg !46
  %452 = fadd float %436, %386, !dbg !46
  %453 = fadd float %170, %437, !dbg !47
  %454 = fadd float %173, %438, !dbg !47
  %455 = fadd float %176, %439, !dbg !47
  %456 = fadd float %179, %440, !dbg !47
  %457 = fadd float %184, %441, !dbg !47
  %458 = fadd float %189, %442, !dbg !47
  %459 = fadd float %194, %443, !dbg !47
  %460 = fadd float %199, %444, !dbg !47
  %461 = fadd float %204, %445, !dbg !47
  %462 = fadd float %209, %446, !dbg !47
  %463 = fadd float %214, %447, !dbg !47
  %464 = fadd float %219, %448, !dbg !47
  %465 = fadd float %224, %449, !dbg !47
  %466 = fadd float %229, %450, !dbg !47
  %467 = fadd float %234, %451, !dbg !47
  %468 = fadd float %239, %452, !dbg !47
  %469 = getelementptr float, ptr addrspace(1) %6, i64 %248, !dbg !48
  %470 = getelementptr float, ptr addrspace(1) %6, i64 %250, !dbg !48
  %471 = getelementptr float, ptr addrspace(1) %6, i64 %252, !dbg !48
  %472 = getelementptr float, ptr addrspace(1) %6, i64 %254, !dbg !48
  %473 = bitcast float %453 to i32, !dbg !49
  %474 = bitcast float %454 to i32, !dbg !49
  %475 = bitcast float %455 to i32, !dbg !49
  %476 = bitcast float %456 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %473, i32 %474, i32 %475, i32 %476, ptr addrspace(1) %469, i1 %66) #4, !dbg !49
  %477 = bitcast float %457 to i32, !dbg !49
  %478 = bitcast float %458 to i32, !dbg !49
  %479 = bitcast float %459 to i32, !dbg !49
  %480 = bitcast float %460 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %477, i32 %478, i32 %479, i32 %480, ptr addrspace(1) %470, i1 %67) #4, !dbg !49
  %481 = bitcast float %461 to i32, !dbg !49
  %482 = bitcast float %462 to i32, !dbg !49
  %483 = bitcast float %463 to i32, !dbg !49
  %484 = bitcast float %464 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %481, i32 %482, i32 %483, i32 %484, ptr addrspace(1) %471, i1 %68) #4, !dbg !49
  %485 = bitcast float %465 to i32, !dbg !49
  %486 = bitcast float %466 to i32, !dbg !49
  %487 = bitcast float %467 to i32, !dbg !49
  %488 = bitcast float %468 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %485, i32 %486, i32 %487, i32 %488, ptr addrspace(1) %472, i1 %69) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csau6uhtgfznjxh7jglbzqlw7hzdjkq3kjpw6qsw5bknzvg4kp6j.py", directory: "inductor_cache/sa")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_18, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_18", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 48, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 61, scope: !7)
!27 = !DILocation(line: 32, column: 53, scope: !7)
!28 = !DILocation(line: 33, column: 38, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 43, scope: !7)
!32 = !DILocation(line: 34, column: 30, scope: !7)
!33 = !DILocation(line: 34, column: 35, scope: !7)
!34 = !DILocation(line: 35, column: 30, scope: !7)
!35 = !DILocation(line: 35, column: 35, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 36, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 26, scope: !7)
!42 = !DILocation(line: 38, column: 18, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 46, column: 19, scope: !7)
!45 = !DILocation(line: 47, column: 20, scope: !7)
!46 = !DILocation(line: 48, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 19, scope: !7)
!48 = !DILocation(line: 50, column: 25, scope: !7)
!49 = !DILocation(line: 50, column: 45, scope: !7)
!50 = !DILocation(line: 50, column: 4, scope: !7)
