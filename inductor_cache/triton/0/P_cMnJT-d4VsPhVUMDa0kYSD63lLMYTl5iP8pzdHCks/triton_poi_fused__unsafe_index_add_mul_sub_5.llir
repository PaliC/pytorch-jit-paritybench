; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 252, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 512, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !15
  %19 = shl i32 %18, 4, !dbg !16
  %20 = lshr i32 %13, 6, !dbg !17
  %21 = and i32 %20, 3, !dbg !17
  %22 = or disjoint i32 %19, %21, !dbg !18
  %23 = or disjoint i32 %22, 4, !dbg !18
  %24 = or disjoint i32 %22, 8, !dbg !18
  %25 = or disjoint i32 %22, 12, !dbg !18
  %.frozen = freeze i32 %22, !dbg !19
  %26 = sdiv i32 %.frozen, 64, !dbg !19
  %.frozen1 = freeze i32 %23, !dbg !19
  %27 = sdiv i32 %.frozen1, 64, !dbg !19
  %.frozen3 = freeze i32 %24, !dbg !19
  %28 = sdiv i32 %.frozen3, 64, !dbg !19
  %.frozen5 = freeze i32 %25, !dbg !19
  %29 = sdiv i32 %.frozen5, 64, !dbg !19
  %30 = mul i32 %26, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %30, !dbg !20
  %31 = mul i32 %27, 64, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %31, !dbg !20
  %32 = mul i32 %28, 64, !dbg !20
  %.decomposed4 = sub i32 %.frozen3, %32, !dbg !20
  %33 = mul i32 %29, 64, !dbg !20
  %.decomposed6 = sub i32 %.frozen5, %33, !dbg !20
  %.frozen7 = freeze i32 %16, !dbg !21
  %34 = sdiv i32 %.frozen7, 128, !dbg !21
  %35 = mul i32 %34, 128, !dbg !22
  %.decomposed8 = sub i32 %.frozen7, %35, !dbg !22
  %36 = sext i32 %26 to i64, !dbg !23
  %37 = getelementptr i64, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = sext i32 %27 to i64, !dbg !23
  %39 = getelementptr i64, ptr addrspace(1) %0, i64 %38, !dbg !23
  %40 = sext i32 %28 to i64, !dbg !23
  %41 = getelementptr i64, ptr addrspace(1) %0, i64 %40, !dbg !23
  %42 = sext i32 %29 to i64, !dbg !23
  %43 = getelementptr i64, ptr addrspace(1) %0, i64 %42, !dbg !23
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !24
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !24
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !24
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !24
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !24
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !24
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !24
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !24
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !24
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !24
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !24
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !24
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !24
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !24
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !24
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !24
  %60 = sext i32 %.decomposed to i64, !dbg !25
  %61 = getelementptr i64, ptr addrspace(1) %1, i64 %60, !dbg !25
  %62 = sext i32 %.decomposed2 to i64, !dbg !25
  %63 = getelementptr i64, ptr addrspace(1) %1, i64 %62, !dbg !25
  %64 = sext i32 %.decomposed4 to i64, !dbg !25
  %65 = getelementptr i64, ptr addrspace(1) %1, i64 %64, !dbg !25
  %66 = sext i32 %.decomposed6 to i64, !dbg !25
  %67 = getelementptr i64, ptr addrspace(1) %1, i64 %66, !dbg !25
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !26
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !26
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !26
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !26
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !26
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !26
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !26
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !26
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !26
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !26
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !26
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !26
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !26
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !26
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !26
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !26
  %84 = getelementptr i64, ptr addrspace(1) %3, i64 %60, !dbg !27
  %85 = getelementptr i64, ptr addrspace(1) %3, i64 %62, !dbg !27
  %86 = getelementptr i64, ptr addrspace(1) %3, i64 %64, !dbg !27
  %87 = getelementptr i64, ptr addrspace(1) %3, i64 %66, !dbg !27
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !28
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !28
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !28
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !28
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !28
  %93 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !28
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !28
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !28
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !28
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !28
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !28
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !28
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !28
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !28
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !28
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !28
  %104 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !29
  %105 = getelementptr float, ptr addrspace(1) %4, i64 %62, !dbg !29
  %106 = getelementptr float, ptr addrspace(1) %4, i64 %64, !dbg !29
  %107 = getelementptr float, ptr addrspace(1) %4, i64 %66, !dbg !29
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !30
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !30
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !30
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !30
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !30
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !30
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !30
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !30
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !30
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !30
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !30
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !30
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !30
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !30
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !30
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !30
  %124 = getelementptr i64, ptr addrspace(1) %5, i64 %36, !dbg !31
  %125 = getelementptr i64, ptr addrspace(1) %5, i64 %38, !dbg !31
  %126 = getelementptr i64, ptr addrspace(1) %5, i64 %40, !dbg !31
  %127 = getelementptr i64, ptr addrspace(1) %5, i64 %42, !dbg !31
  %128 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %124, i1 true) #1, !dbg !32
  %129 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %124, i1 true) #1, !dbg !32
  %130 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %124, i1 true) #1, !dbg !32
  %131 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %124, i1 true) #1, !dbg !32
  %132 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %125, i1 true) #1, !dbg !32
  %133 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %125, i1 true) #1, !dbg !32
  %134 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %125, i1 true) #1, !dbg !32
  %135 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %125, i1 true) #1, !dbg !32
  %136 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %126, i1 true) #1, !dbg !32
  %137 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %126, i1 true) #1, !dbg !32
  %138 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %126, i1 true) #1, !dbg !32
  %139 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %126, i1 true) #1, !dbg !32
  %140 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %127, i1 true) #1, !dbg !32
  %141 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %127, i1 true) #1, !dbg !32
  %142 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %127, i1 true) #1, !dbg !32
  %143 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %127, i1 true) #1, !dbg !32
  %144 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !33
  %145 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !33
  %146 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !33
  %147 = getelementptr float, ptr addrspace(1) %6, i64 %42, !dbg !33
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !34
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !34
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !34
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !34
  %152 = bitcast i32 %151 to float, !dbg !34
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #1, !dbg !34
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #1, !dbg !34
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #1, !dbg !34
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #1, !dbg !34
  %157 = bitcast i32 %156 to float, !dbg !34
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !34
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !34
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !34
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !34
  %162 = bitcast i32 %161 to float, !dbg !34
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #1, !dbg !34
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #1, !dbg !34
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #1, !dbg !34
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #1, !dbg !34
  %167 = bitcast i32 %166 to float, !dbg !34
  %168 = add i64 %47, 5, !dbg !35
  %169 = add i64 %51, 5, !dbg !35
  %170 = add i64 %55, 5, !dbg !35
  %171 = add i64 %59, 5, !dbg !35
  %172 = icmp slt i64 %47, 0, !dbg !36
  %173 = icmp slt i64 %51, 0, !dbg !36
  %174 = icmp slt i64 %55, 0, !dbg !36
  %175 = icmp slt i64 %59, 0, !dbg !36
  %176 = select i1 %172, i64 %168, i64 %47, !dbg !37
  %177 = select i1 %173, i64 %169, i64 %51, !dbg !37
  %178 = select i1 %174, i64 %170, i64 %55, !dbg !37
  %179 = select i1 %175, i64 %171, i64 %59, !dbg !37
  %180 = icmp slt i64 %71, 0, !dbg !38
  %181 = icmp slt i64 %75, 0, !dbg !38
  %182 = icmp slt i64 %79, 0, !dbg !38
  %183 = icmp slt i64 %83, 0, !dbg !38
  %184 = shl i64 %71, 7, !dbg !39
  %185 = add i64 %184, 640, !dbg !39
  %186 = select i1 %180, i64 %185, i64 %184, !dbg !39
  %187 = shl i64 %75, 7, !dbg !39
  %188 = add i64 %187, 640, !dbg !39
  %189 = select i1 %181, i64 %188, i64 %187, !dbg !39
  %190 = shl i64 %79, 7, !dbg !39
  %191 = add i64 %190, 640, !dbg !39
  %192 = select i1 %182, i64 %191, i64 %190, !dbg !39
  %193 = shl i64 %83, 7, !dbg !39
  %194 = add i64 %193, 640, !dbg !39
  %195 = select i1 %183, i64 %194, i64 %193, !dbg !39
  %196 = sext i32 %.decomposed8 to i64, !dbg !40
  %197 = mul i64 %176, 640, !dbg !41
  %198 = mul i64 %177, 640, !dbg !41
  %199 = mul i64 %178, 640, !dbg !41
  %200 = mul i64 %179, 640, !dbg !41
  %201 = mul i32 %34, 3200, !dbg !42
  %202 = sext i32 %201 to i64, !dbg !43
  %203 = getelementptr float, ptr addrspace(1) %2, i64 %186, !dbg !44
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %196, !dbg !44
  %205 = getelementptr float, ptr addrspace(1) %204, i64 %197, !dbg !44
  %206 = getelementptr float, ptr addrspace(1) %205, i64 %202, !dbg !44
  %207 = getelementptr float, ptr addrspace(1) %2, i64 %189, !dbg !44
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %196, !dbg !44
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %198, !dbg !44
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %202, !dbg !44
  %211 = getelementptr float, ptr addrspace(1) %2, i64 %192, !dbg !44
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %196, !dbg !44
  %213 = getelementptr float, ptr addrspace(1) %212, i64 %199, !dbg !44
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %202, !dbg !44
  %215 = getelementptr float, ptr addrspace(1) %2, i64 %195, !dbg !44
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %196, !dbg !44
  %217 = getelementptr float, ptr addrspace(1) %216, i64 %200, !dbg !44
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %202, !dbg !44
  %219 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %206, i1 %17) #1, !dbg !45
  %220 = extractvalue { i32, i32, i32, i32 } %219, 0, !dbg !45
  %221 = extractvalue { i32, i32, i32, i32 } %219, 1, !dbg !45
  %222 = extractvalue { i32, i32, i32, i32 } %219, 2, !dbg !45
  %223 = extractvalue { i32, i32, i32, i32 } %219, 3, !dbg !45
  %224 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %210, i1 %17) #1, !dbg !45
  %225 = extractvalue { i32, i32, i32, i32 } %224, 0, !dbg !45
  %226 = extractvalue { i32, i32, i32, i32 } %224, 1, !dbg !45
  %227 = extractvalue { i32, i32, i32, i32 } %224, 2, !dbg !45
  %228 = extractvalue { i32, i32, i32, i32 } %224, 3, !dbg !45
  %229 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %214, i1 %17) #1, !dbg !45
  %230 = extractvalue { i32, i32, i32, i32 } %229, 0, !dbg !45
  %231 = extractvalue { i32, i32, i32, i32 } %229, 1, !dbg !45
  %232 = extractvalue { i32, i32, i32, i32 } %229, 2, !dbg !45
  %233 = extractvalue { i32, i32, i32, i32 } %229, 3, !dbg !45
  %234 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %218, i1 %17) #1, !dbg !45
  %235 = extractvalue { i32, i32, i32, i32 } %234, 0, !dbg !45
  %236 = extractvalue { i32, i32, i32, i32 } %234, 1, !dbg !45
  %237 = extractvalue { i32, i32, i32, i32 } %234, 2, !dbg !45
  %238 = extractvalue { i32, i32, i32, i32 } %234, 3, !dbg !45
  %239 = icmp slt i64 %91, 0, !dbg !46
  %240 = icmp slt i64 %95, 0, !dbg !46
  %241 = icmp slt i64 %99, 0, !dbg !46
  %242 = icmp slt i64 %103, 0, !dbg !46
  %243 = shl i64 %91, 7, !dbg !47
  %244 = add i64 %243, 640, !dbg !47
  %245 = select i1 %239, i64 %244, i64 %243, !dbg !47
  %246 = shl i64 %95, 7, !dbg !47
  %247 = add i64 %246, 640, !dbg !47
  %248 = select i1 %240, i64 %247, i64 %246, !dbg !47
  %249 = shl i64 %99, 7, !dbg !47
  %250 = add i64 %249, 640, !dbg !47
  %251 = select i1 %241, i64 %250, i64 %249, !dbg !47
  %252 = shl i64 %103, 7, !dbg !47
  %253 = add i64 %252, 640, !dbg !47
  %254 = select i1 %242, i64 %253, i64 %252, !dbg !47
  %255 = getelementptr float, ptr addrspace(1) %2, i64 %245, !dbg !48
  %256 = getelementptr float, ptr addrspace(1) %255, i64 %196, !dbg !48
  %257 = getelementptr float, ptr addrspace(1) %256, i64 %197, !dbg !48
  %258 = getelementptr float, ptr addrspace(1) %257, i64 %202, !dbg !48
  %259 = getelementptr float, ptr addrspace(1) %2, i64 %248, !dbg !48
  %260 = getelementptr float, ptr addrspace(1) %259, i64 %196, !dbg !48
  %261 = getelementptr float, ptr addrspace(1) %260, i64 %198, !dbg !48
  %262 = getelementptr float, ptr addrspace(1) %261, i64 %202, !dbg !48
  %263 = getelementptr float, ptr addrspace(1) %2, i64 %251, !dbg !48
  %264 = getelementptr float, ptr addrspace(1) %263, i64 %196, !dbg !48
  %265 = getelementptr float, ptr addrspace(1) %264, i64 %199, !dbg !48
  %266 = getelementptr float, ptr addrspace(1) %265, i64 %202, !dbg !48
  %267 = getelementptr float, ptr addrspace(1) %2, i64 %254, !dbg !48
  %268 = getelementptr float, ptr addrspace(1) %267, i64 %196, !dbg !48
  %269 = getelementptr float, ptr addrspace(1) %268, i64 %200, !dbg !48
  %270 = getelementptr float, ptr addrspace(1) %269, i64 %202, !dbg !48
  %271 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %258, i1 %17) #1, !dbg !49
  %272 = extractvalue { i32, i32, i32, i32 } %271, 0, !dbg !49
  %273 = extractvalue { i32, i32, i32, i32 } %271, 1, !dbg !49
  %274 = extractvalue { i32, i32, i32, i32 } %271, 2, !dbg !49
  %275 = extractvalue { i32, i32, i32, i32 } %271, 3, !dbg !49
  %276 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %262, i1 %17) #1, !dbg !49
  %277 = extractvalue { i32, i32, i32, i32 } %276, 0, !dbg !49
  %278 = extractvalue { i32, i32, i32, i32 } %276, 1, !dbg !49
  %279 = extractvalue { i32, i32, i32, i32 } %276, 2, !dbg !49
  %280 = extractvalue { i32, i32, i32, i32 } %276, 3, !dbg !49
  %281 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %266, i1 %17) #1, !dbg !49
  %282 = extractvalue { i32, i32, i32, i32 } %281, 0, !dbg !49
  %283 = extractvalue { i32, i32, i32, i32 } %281, 1, !dbg !49
  %284 = extractvalue { i32, i32, i32, i32 } %281, 2, !dbg !49
  %285 = extractvalue { i32, i32, i32, i32 } %281, 3, !dbg !49
  %286 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %270, i1 %17) #1, !dbg !49
  %287 = extractvalue { i32, i32, i32, i32 } %286, 0, !dbg !49
  %288 = extractvalue { i32, i32, i32, i32 } %286, 1, !dbg !49
  %289 = extractvalue { i32, i32, i32, i32 } %286, 2, !dbg !49
  %290 = extractvalue { i32, i32, i32, i32 } %286, 3, !dbg !49
  %291 = add i64 %131, 5, !dbg !50
  %292 = add i64 %135, 5, !dbg !50
  %293 = add i64 %139, 5, !dbg !50
  %294 = add i64 %143, 5, !dbg !50
  %295 = icmp slt i64 %131, 0, !dbg !51
  %296 = icmp slt i64 %135, 0, !dbg !51
  %297 = icmp slt i64 %139, 0, !dbg !51
  %298 = icmp slt i64 %143, 0, !dbg !51
  %299 = select i1 %295, i64 %291, i64 %131, !dbg !52
  %300 = select i1 %296, i64 %292, i64 %135, !dbg !52
  %301 = select i1 %297, i64 %293, i64 %139, !dbg !52
  %302 = select i1 %298, i64 %294, i64 %143, !dbg !52
  %303 = mul i64 %299, 640, !dbg !53
  %304 = mul i64 %300, 640, !dbg !53
  %305 = mul i64 %301, 640, !dbg !53
  %306 = mul i64 %302, 640, !dbg !53
  %307 = getelementptr float, ptr addrspace(1) %204, i64 %303, !dbg !54
  %308 = getelementptr float, ptr addrspace(1) %307, i64 %202, !dbg !54
  %309 = getelementptr float, ptr addrspace(1) %208, i64 %304, !dbg !54
  %310 = getelementptr float, ptr addrspace(1) %309, i64 %202, !dbg !54
  %311 = getelementptr float, ptr addrspace(1) %212, i64 %305, !dbg !54
  %312 = getelementptr float, ptr addrspace(1) %311, i64 %202, !dbg !54
  %313 = getelementptr float, ptr addrspace(1) %216, i64 %306, !dbg !54
  %314 = getelementptr float, ptr addrspace(1) %313, i64 %202, !dbg !54
  %315 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %308, i1 %17) #1, !dbg !55
  %316 = extractvalue { i32, i32, i32, i32 } %315, 0, !dbg !55
  %317 = extractvalue { i32, i32, i32, i32 } %315, 1, !dbg !55
  %318 = extractvalue { i32, i32, i32, i32 } %315, 2, !dbg !55
  %319 = extractvalue { i32, i32, i32, i32 } %315, 3, !dbg !55
  %320 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %310, i1 %17) #1, !dbg !55
  %321 = extractvalue { i32, i32, i32, i32 } %320, 0, !dbg !55
  %322 = extractvalue { i32, i32, i32, i32 } %320, 1, !dbg !55
  %323 = extractvalue { i32, i32, i32, i32 } %320, 2, !dbg !55
  %324 = extractvalue { i32, i32, i32, i32 } %320, 3, !dbg !55
  %325 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %312, i1 %17) #1, !dbg !55
  %326 = extractvalue { i32, i32, i32, i32 } %325, 0, !dbg !55
  %327 = extractvalue { i32, i32, i32, i32 } %325, 1, !dbg !55
  %328 = extractvalue { i32, i32, i32, i32 } %325, 2, !dbg !55
  %329 = extractvalue { i32, i32, i32, i32 } %325, 3, !dbg !55
  %330 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %314, i1 %17) #1, !dbg !55
  %331 = extractvalue { i32, i32, i32, i32 } %330, 0, !dbg !55
  %332 = extractvalue { i32, i32, i32, i32 } %330, 1, !dbg !55
  %333 = extractvalue { i32, i32, i32, i32 } %330, 2, !dbg !55
  %334 = extractvalue { i32, i32, i32, i32 } %330, 3, !dbg !55
  %335 = getelementptr float, ptr addrspace(1) %256, i64 %303, !dbg !56
  %336 = getelementptr float, ptr addrspace(1) %335, i64 %202, !dbg !56
  %337 = getelementptr float, ptr addrspace(1) %260, i64 %304, !dbg !56
  %338 = getelementptr float, ptr addrspace(1) %337, i64 %202, !dbg !56
  %339 = getelementptr float, ptr addrspace(1) %264, i64 %305, !dbg !56
  %340 = getelementptr float, ptr addrspace(1) %339, i64 %202, !dbg !56
  %341 = getelementptr float, ptr addrspace(1) %268, i64 %306, !dbg !56
  %342 = getelementptr float, ptr addrspace(1) %341, i64 %202, !dbg !56
  %343 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %336, i1 %17) #1, !dbg !57
  %344 = extractvalue { i32, i32, i32, i32 } %343, 0, !dbg !57
  %345 = extractvalue { i32, i32, i32, i32 } %343, 1, !dbg !57
  %346 = extractvalue { i32, i32, i32, i32 } %343, 2, !dbg !57
  %347 = extractvalue { i32, i32, i32, i32 } %343, 3, !dbg !57
  %348 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %338, i1 %17) #1, !dbg !57
  %349 = extractvalue { i32, i32, i32, i32 } %348, 0, !dbg !57
  %350 = extractvalue { i32, i32, i32, i32 } %348, 1, !dbg !57
  %351 = extractvalue { i32, i32, i32, i32 } %348, 2, !dbg !57
  %352 = extractvalue { i32, i32, i32, i32 } %348, 3, !dbg !57
  %353 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %340, i1 %17) #1, !dbg !57
  %354 = extractvalue { i32, i32, i32, i32 } %353, 0, !dbg !57
  %355 = extractvalue { i32, i32, i32, i32 } %353, 1, !dbg !57
  %356 = extractvalue { i32, i32, i32, i32 } %353, 2, !dbg !57
  %357 = extractvalue { i32, i32, i32, i32 } %353, 3, !dbg !57
  %358 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %342, i1 %17) #1, !dbg !57
  %359 = extractvalue { i32, i32, i32, i32 } %358, 0, !dbg !57
  %360 = extractvalue { i32, i32, i32, i32 } %358, 1, !dbg !57
  %361 = extractvalue { i32, i32, i32, i32 } %358, 2, !dbg !57
  %362 = extractvalue { i32, i32, i32, i32 } %358, 3, !dbg !57
  %363 = insertelement <2 x i32> poison, i32 %316, i64 0, !dbg !55
  %364 = insertelement <2 x i32> %363, i32 %220, i64 1, !dbg !55
  %365 = bitcast <2 x i32> %364 to <2 x float>, !dbg !55
  %366 = insertelement <2 x i32> poison, i32 %344, i64 0, !dbg !57
  %367 = insertelement <2 x i32> %366, i32 %272, i64 1, !dbg !57
  %368 = bitcast <2 x i32> %367 to <2 x float>, !dbg !57
  %369 = fsub <2 x float> %368, %365, !dbg !58
  %370 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !59
  %371 = bitcast <2 x i32> %370 to <2 x float>, !dbg !59
  %372 = shufflevector <2 x float> %371, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %373 = fmul <2 x float> %369, %372, !dbg !59
  %374 = fadd <2 x float> %373, %365, !dbg !60
  %375 = insertelement <2 x i32> poison, i32 %317, i64 0, !dbg !55
  %376 = insertelement <2 x i32> %375, i32 %221, i64 1, !dbg !55
  %377 = bitcast <2 x i32> %376 to <2 x float>, !dbg !55
  %378 = insertelement <2 x i32> poison, i32 %345, i64 0, !dbg !57
  %379 = insertelement <2 x i32> %378, i32 %273, i64 1, !dbg !57
  %380 = bitcast <2 x i32> %379 to <2 x float>, !dbg !57
  %381 = fsub <2 x float> %380, %377, !dbg !58
  %382 = fmul <2 x float> %381, %372, !dbg !59
  %383 = fadd <2 x float> %382, %377, !dbg !60
  %384 = insertelement <2 x i32> poison, i32 %318, i64 0, !dbg !55
  %385 = insertelement <2 x i32> %384, i32 %222, i64 1, !dbg !55
  %386 = bitcast <2 x i32> %385 to <2 x float>, !dbg !55
  %387 = insertelement <2 x i32> poison, i32 %346, i64 0, !dbg !57
  %388 = insertelement <2 x i32> %387, i32 %274, i64 1, !dbg !57
  %389 = bitcast <2 x i32> %388 to <2 x float>, !dbg !57
  %390 = fsub <2 x float> %389, %386, !dbg !58
  %391 = fmul <2 x float> %390, %372, !dbg !59
  %392 = fadd <2 x float> %391, %386, !dbg !60
  %393 = insertelement <2 x i32> poison, i32 %319, i64 0, !dbg !55
  %394 = insertelement <2 x i32> %393, i32 %223, i64 1, !dbg !55
  %395 = bitcast <2 x i32> %394 to <2 x float>, !dbg !55
  %396 = insertelement <2 x i32> poison, i32 %347, i64 0, !dbg !57
  %397 = insertelement <2 x i32> %396, i32 %275, i64 1, !dbg !57
  %398 = bitcast <2 x i32> %397 to <2 x float>, !dbg !57
  %399 = fsub <2 x float> %398, %395, !dbg !58
  %400 = fmul <2 x float> %399, %372, !dbg !59
  %401 = fadd <2 x float> %400, %395, !dbg !60
  %402 = insertelement <2 x i32> poison, i32 %321, i64 0, !dbg !55
  %403 = insertelement <2 x i32> %402, i32 %225, i64 1, !dbg !55
  %404 = bitcast <2 x i32> %403 to <2 x float>, !dbg !55
  %405 = insertelement <2 x i32> poison, i32 %349, i64 0, !dbg !57
  %406 = insertelement <2 x i32> %405, i32 %277, i64 1, !dbg !57
  %407 = bitcast <2 x i32> %406 to <2 x float>, !dbg !57
  %408 = fsub <2 x float> %407, %404, !dbg !58
  %409 = insertelement <2 x i32> poison, i32 %115, i64 0, !dbg !59
  %410 = bitcast <2 x i32> %409 to <2 x float>, !dbg !59
  %411 = shufflevector <2 x float> %410, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %412 = fmul <2 x float> %408, %411, !dbg !59
  %413 = fadd <2 x float> %412, %404, !dbg !60
  %414 = insertelement <2 x i32> poison, i32 %322, i64 0, !dbg !55
  %415 = insertelement <2 x i32> %414, i32 %226, i64 1, !dbg !55
  %416 = bitcast <2 x i32> %415 to <2 x float>, !dbg !55
  %417 = insertelement <2 x i32> poison, i32 %350, i64 0, !dbg !57
  %418 = insertelement <2 x i32> %417, i32 %278, i64 1, !dbg !57
  %419 = bitcast <2 x i32> %418 to <2 x float>, !dbg !57
  %420 = fsub <2 x float> %419, %416, !dbg !58
  %421 = fmul <2 x float> %420, %411, !dbg !59
  %422 = fadd <2 x float> %421, %416, !dbg !60
  %423 = insertelement <2 x i32> poison, i32 %323, i64 0, !dbg !55
  %424 = insertelement <2 x i32> %423, i32 %227, i64 1, !dbg !55
  %425 = bitcast <2 x i32> %424 to <2 x float>, !dbg !55
  %426 = insertelement <2 x i32> poison, i32 %351, i64 0, !dbg !57
  %427 = insertelement <2 x i32> %426, i32 %279, i64 1, !dbg !57
  %428 = bitcast <2 x i32> %427 to <2 x float>, !dbg !57
  %429 = fsub <2 x float> %428, %425, !dbg !58
  %430 = fmul <2 x float> %429, %411, !dbg !59
  %431 = fadd <2 x float> %430, %425, !dbg !60
  %432 = insertelement <2 x i32> poison, i32 %324, i64 0, !dbg !55
  %433 = insertelement <2 x i32> %432, i32 %228, i64 1, !dbg !55
  %434 = bitcast <2 x i32> %433 to <2 x float>, !dbg !55
  %435 = insertelement <2 x i32> poison, i32 %352, i64 0, !dbg !57
  %436 = insertelement <2 x i32> %435, i32 %280, i64 1, !dbg !57
  %437 = bitcast <2 x i32> %436 to <2 x float>, !dbg !57
  %438 = fsub <2 x float> %437, %434, !dbg !58
  %439 = fmul <2 x float> %438, %411, !dbg !59
  %440 = fadd <2 x float> %439, %434, !dbg !60
  %441 = insertelement <2 x i32> poison, i32 %326, i64 0, !dbg !55
  %442 = insertelement <2 x i32> %441, i32 %230, i64 1, !dbg !55
  %443 = bitcast <2 x i32> %442 to <2 x float>, !dbg !55
  %444 = insertelement <2 x i32> poison, i32 %354, i64 0, !dbg !57
  %445 = insertelement <2 x i32> %444, i32 %282, i64 1, !dbg !57
  %446 = bitcast <2 x i32> %445 to <2 x float>, !dbg !57
  %447 = fsub <2 x float> %446, %443, !dbg !58
  %448 = insertelement <2 x i32> poison, i32 %119, i64 0, !dbg !59
  %449 = bitcast <2 x i32> %448 to <2 x float>, !dbg !59
  %450 = shufflevector <2 x float> %449, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %451 = fmul <2 x float> %447, %450, !dbg !59
  %452 = fadd <2 x float> %451, %443, !dbg !60
  %453 = insertelement <2 x i32> poison, i32 %327, i64 0, !dbg !55
  %454 = insertelement <2 x i32> %453, i32 %231, i64 1, !dbg !55
  %455 = bitcast <2 x i32> %454 to <2 x float>, !dbg !55
  %456 = insertelement <2 x i32> poison, i32 %355, i64 0, !dbg !57
  %457 = insertelement <2 x i32> %456, i32 %283, i64 1, !dbg !57
  %458 = bitcast <2 x i32> %457 to <2 x float>, !dbg !57
  %459 = fsub <2 x float> %458, %455, !dbg !58
  %460 = fmul <2 x float> %459, %450, !dbg !59
  %461 = fadd <2 x float> %460, %455, !dbg !60
  %462 = insertelement <2 x i32> poison, i32 %328, i64 0, !dbg !55
  %463 = insertelement <2 x i32> %462, i32 %232, i64 1, !dbg !55
  %464 = bitcast <2 x i32> %463 to <2 x float>, !dbg !55
  %465 = insertelement <2 x i32> poison, i32 %356, i64 0, !dbg !57
  %466 = insertelement <2 x i32> %465, i32 %284, i64 1, !dbg !57
  %467 = bitcast <2 x i32> %466 to <2 x float>, !dbg !57
  %468 = fsub <2 x float> %467, %464, !dbg !58
  %469 = fmul <2 x float> %468, %450, !dbg !59
  %470 = fadd <2 x float> %469, %464, !dbg !60
  %471 = insertelement <2 x i32> poison, i32 %329, i64 0, !dbg !55
  %472 = insertelement <2 x i32> %471, i32 %233, i64 1, !dbg !55
  %473 = bitcast <2 x i32> %472 to <2 x float>, !dbg !55
  %474 = insertelement <2 x i32> poison, i32 %357, i64 0, !dbg !57
  %475 = insertelement <2 x i32> %474, i32 %285, i64 1, !dbg !57
  %476 = bitcast <2 x i32> %475 to <2 x float>, !dbg !57
  %477 = fsub <2 x float> %476, %473, !dbg !58
  %478 = fmul <2 x float> %477, %450, !dbg !59
  %479 = fadd <2 x float> %478, %473, !dbg !60
  %480 = insertelement <2 x i32> poison, i32 %331, i64 0, !dbg !55
  %481 = insertelement <2 x i32> %480, i32 %235, i64 1, !dbg !55
  %482 = bitcast <2 x i32> %481 to <2 x float>, !dbg !55
  %483 = insertelement <2 x i32> poison, i32 %359, i64 0, !dbg !57
  %484 = insertelement <2 x i32> %483, i32 %287, i64 1, !dbg !57
  %485 = bitcast <2 x i32> %484 to <2 x float>, !dbg !57
  %486 = fsub <2 x float> %485, %482, !dbg !58
  %487 = insertelement <2 x i32> poison, i32 %123, i64 0, !dbg !59
  %488 = bitcast <2 x i32> %487 to <2 x float>, !dbg !59
  %489 = shufflevector <2 x float> %488, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %490 = fmul <2 x float> %486, %489, !dbg !59
  %491 = fadd <2 x float> %490, %482, !dbg !60
  %492 = insertelement <2 x i32> poison, i32 %332, i64 0, !dbg !55
  %493 = insertelement <2 x i32> %492, i32 %236, i64 1, !dbg !55
  %494 = bitcast <2 x i32> %493 to <2 x float>, !dbg !55
  %495 = insertelement <2 x i32> poison, i32 %360, i64 0, !dbg !57
  %496 = insertelement <2 x i32> %495, i32 %288, i64 1, !dbg !57
  %497 = bitcast <2 x i32> %496 to <2 x float>, !dbg !57
  %498 = fsub <2 x float> %497, %494, !dbg !58
  %499 = fmul <2 x float> %498, %489, !dbg !59
  %500 = fadd <2 x float> %499, %494, !dbg !60
  %501 = insertelement <2 x i32> poison, i32 %333, i64 0, !dbg !55
  %502 = insertelement <2 x i32> %501, i32 %237, i64 1, !dbg !55
  %503 = bitcast <2 x i32> %502 to <2 x float>, !dbg !55
  %504 = insertelement <2 x i32> poison, i32 %361, i64 0, !dbg !57
  %505 = insertelement <2 x i32> %504, i32 %289, i64 1, !dbg !57
  %506 = bitcast <2 x i32> %505 to <2 x float>, !dbg !57
  %507 = fsub <2 x float> %506, %503, !dbg !58
  %508 = fmul <2 x float> %507, %489, !dbg !59
  %509 = fadd <2 x float> %508, %503, !dbg !60
  %510 = insertelement <2 x i32> poison, i32 %334, i64 0, !dbg !55
  %511 = insertelement <2 x i32> %510, i32 %238, i64 1, !dbg !55
  %512 = bitcast <2 x i32> %511 to <2 x float>, !dbg !55
  %513 = insertelement <2 x i32> poison, i32 %362, i64 0, !dbg !57
  %514 = insertelement <2 x i32> %513, i32 %290, i64 1, !dbg !57
  %515 = bitcast <2 x i32> %514 to <2 x float>, !dbg !57
  %516 = fsub <2 x float> %515, %512, !dbg !58
  %517 = fmul <2 x float> %516, %489, !dbg !59
  %518 = fadd <2 x float> %517, %512, !dbg !60
  %519 = extractelement <2 x float> %374, i64 0, !dbg !61
  %520 = extractelement <2 x float> %374, i64 1, !dbg !62
  %521 = fsub float %519, %520, !dbg !61
  %522 = extractelement <2 x float> %383, i64 0, !dbg !61
  %523 = extractelement <2 x float> %383, i64 1, !dbg !62
  %524 = fsub float %522, %523, !dbg !61
  %525 = extractelement <2 x float> %392, i64 0, !dbg !61
  %526 = extractelement <2 x float> %392, i64 1, !dbg !62
  %527 = fsub float %525, %526, !dbg !61
  %528 = extractelement <2 x float> %401, i64 0, !dbg !61
  %529 = extractelement <2 x float> %401, i64 1, !dbg !62
  %530 = fsub float %528, %529, !dbg !61
  %531 = extractelement <2 x float> %413, i64 0, !dbg !61
  %532 = extractelement <2 x float> %413, i64 1, !dbg !62
  %533 = fsub float %531, %532, !dbg !61
  %534 = extractelement <2 x float> %422, i64 0, !dbg !61
  %535 = extractelement <2 x float> %422, i64 1, !dbg !62
  %536 = fsub float %534, %535, !dbg !61
  %537 = extractelement <2 x float> %431, i64 0, !dbg !61
  %538 = extractelement <2 x float> %431, i64 1, !dbg !62
  %539 = fsub float %537, %538, !dbg !61
  %540 = extractelement <2 x float> %440, i64 0, !dbg !61
  %541 = extractelement <2 x float> %440, i64 1, !dbg !62
  %542 = fsub float %540, %541, !dbg !61
  %543 = extractelement <2 x float> %452, i64 0, !dbg !61
  %544 = extractelement <2 x float> %452, i64 1, !dbg !62
  %545 = fsub float %543, %544, !dbg !61
  %546 = extractelement <2 x float> %461, i64 0, !dbg !61
  %547 = extractelement <2 x float> %461, i64 1, !dbg !62
  %548 = fsub float %546, %547, !dbg !61
  %549 = extractelement <2 x float> %470, i64 0, !dbg !61
  %550 = extractelement <2 x float> %470, i64 1, !dbg !62
  %551 = fsub float %549, %550, !dbg !61
  %552 = extractelement <2 x float> %479, i64 0, !dbg !61
  %553 = extractelement <2 x float> %479, i64 1, !dbg !62
  %554 = fsub float %552, %553, !dbg !61
  %555 = extractelement <2 x float> %491, i64 0, !dbg !61
  %556 = extractelement <2 x float> %491, i64 1, !dbg !62
  %557 = fsub float %555, %556, !dbg !61
  %558 = extractelement <2 x float> %500, i64 0, !dbg !61
  %559 = extractelement <2 x float> %500, i64 1, !dbg !62
  %560 = fsub float %558, %559, !dbg !61
  %561 = extractelement <2 x float> %509, i64 0, !dbg !61
  %562 = extractelement <2 x float> %509, i64 1, !dbg !62
  %563 = fsub float %561, %562, !dbg !61
  %564 = extractelement <2 x float> %518, i64 0, !dbg !61
  %565 = extractelement <2 x float> %518, i64 1, !dbg !62
  %566 = fsub float %564, %565, !dbg !61
  %567 = fmul float %521, %152, !dbg !63
  %568 = fmul float %524, %152, !dbg !63
  %569 = fmul float %527, %152, !dbg !63
  %570 = fmul float %530, %152, !dbg !63
  %571 = fmul float %533, %157, !dbg !63
  %572 = fmul float %536, %157, !dbg !63
  %573 = fmul float %539, %157, !dbg !63
  %574 = fmul float %542, %157, !dbg !63
  %575 = fmul float %545, %162, !dbg !63
  %576 = fmul float %548, %162, !dbg !63
  %577 = fmul float %551, %162, !dbg !63
  %578 = fmul float %554, %162, !dbg !63
  %579 = fmul float %557, %167, !dbg !63
  %580 = fmul float %560, %167, !dbg !63
  %581 = fmul float %563, %167, !dbg !63
  %582 = fmul float %566, %167, !dbg !63
  %583 = fadd float %520, %567, !dbg !62
  %584 = fadd float %523, %568, !dbg !62
  %585 = fadd float %526, %569, !dbg !62
  %586 = fadd float %529, %570, !dbg !62
  %587 = fadd float %532, %571, !dbg !62
  %588 = fadd float %535, %572, !dbg !62
  %589 = fadd float %538, %573, !dbg !62
  %590 = fadd float %541, %574, !dbg !62
  %591 = fadd float %544, %575, !dbg !62
  %592 = fadd float %547, %576, !dbg !62
  %593 = fadd float %550, %577, !dbg !62
  %594 = fadd float %553, %578, !dbg !62
  %595 = fadd float %556, %579, !dbg !62
  %596 = fadd float %559, %580, !dbg !62
  %597 = fadd float %562, %581, !dbg !62
  %598 = fadd float %565, %582, !dbg !62
  %599 = shl i32 %22, 7, !dbg !64
  %600 = shl i32 %23, 7, !dbg !64
  %601 = shl i32 %24, 7, !dbg !64
  %602 = shl i32 %25, 7, !dbg !64
  %603 = shl i32 %34, 19, !dbg !65
  %604 = add i32 %603, %.decomposed8, !dbg !66
  %605 = add i32 %604, %599, !dbg !67
  %606 = add i32 %604, %600, !dbg !67
  %607 = add i32 %604, %601, !dbg !67
  %608 = add i32 %604, %602, !dbg !67
  %609 = sext i32 %605 to i64, !dbg !68
  %610 = getelementptr float, ptr addrspace(1) %7, i64 %609, !dbg !68
  %611 = sext i32 %606 to i64, !dbg !68
  %612 = getelementptr float, ptr addrspace(1) %7, i64 %611, !dbg !68
  %613 = sext i32 %607 to i64, !dbg !68
  %614 = getelementptr float, ptr addrspace(1) %7, i64 %613, !dbg !68
  %615 = sext i32 %608 to i64, !dbg !68
  %616 = getelementptr float, ptr addrspace(1) %7, i64 %615, !dbg !68
  %617 = bitcast float %583 to i32, !dbg !69
  %618 = bitcast float %584 to i32, !dbg !69
  %619 = bitcast float %585 to i32, !dbg !69
  %620 = bitcast float %586 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %617, i32 %618, i32 %619, i32 %620, ptr addrspace(1) %610, i1 %17) #1, !dbg !69
  %621 = bitcast float %587 to i32, !dbg !69
  %622 = bitcast float %588 to i32, !dbg !69
  %623 = bitcast float %589 to i32, !dbg !69
  %624 = bitcast float %590 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %621, i32 %622, i32 %623, i32 %624, ptr addrspace(1) %612, i1 %17) #1, !dbg !69
  %625 = bitcast float %591 to i32, !dbg !69
  %626 = bitcast float %592 to i32, !dbg !69
  %627 = bitcast float %593 to i32, !dbg !69
  %628 = bitcast float %594 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %625, i32 %626, i32 %627, i32 %628, ptr addrspace(1) %614, i1 %17) #1, !dbg !69
  %629 = bitcast float %595 to i32, !dbg !69
  %630 = bitcast float %596 to i32, !dbg !69
  %631 = bitcast float %597 to i32, !dbg !69
  %632 = bitcast float %598 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %629, i32 %630, i32 %631, i32 %632, ptr addrspace(1) %616, i1 %17) #1, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmn6coy37qzpcg4bfjezdd44ithvz7bliibnw6zzzd5unnduwe3i.py", directory: "inductor_cache/mn")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_5", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 41, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 43, column: 32, scope: !7)
!38 = !DILocation(line: 45, column: 18, scope: !7)
!39 = !DILocation(line: 47, column: 39, scope: !7)
!40 = !DILocation(line: 47, column: 35, scope: !7)
!41 = !DILocation(line: 47, column: 50, scope: !7)
!42 = !DILocation(line: 47, column: 62, scope: !7)
!43 = !DILocation(line: 47, column: 57, scope: !7)
!44 = !DILocation(line: 47, column: 30, scope: !7)
!45 = !DILocation(line: 47, column: 67, scope: !7)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 51, column: 40, scope: !7)
!48 = !DILocation(line: 51, column: 31, scope: !7)
!49 = !DILocation(line: 51, column: 69, scope: !7)
!50 = !DILocation(line: 55, column: 20, scope: !7)
!51 = !DILocation(line: 56, column: 20, scope: !7)
!52 = !DILocation(line: 57, column: 35, scope: !7)
!53 = !DILocation(line: 58, column: 51, scope: !7)
!54 = !DILocation(line: 58, column: 31, scope: !7)
!55 = !DILocation(line: 58, column: 69, scope: !7)
!56 = !DILocation(line: 59, column: 31, scope: !7)
!57 = !DILocation(line: 59, column: 70, scope: !7)
!58 = !DILocation(line: 60, column: 20, scope: !7)
!59 = !DILocation(line: 61, column: 20, scope: !7)
!60 = !DILocation(line: 62, column: 20, scope: !7)
!61 = !DILocation(line: 63, column: 20, scope: !7)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 64, column: 20, scope: !7)
!64 = !DILocation(line: 66, column: 34, scope: !7)
!65 = !DILocation(line: 66, column: 46, scope: !7)
!66 = !DILocation(line: 66, column: 30, scope: !7)
!67 = !DILocation(line: 66, column: 39, scope: !7)
!68 = !DILocation(line: 66, column: 25, scope: !7)
!69 = !DILocation(line: 66, column: 58, scope: !7)
!70 = !DILocation(line: 66, column: 4, scope: !7)
