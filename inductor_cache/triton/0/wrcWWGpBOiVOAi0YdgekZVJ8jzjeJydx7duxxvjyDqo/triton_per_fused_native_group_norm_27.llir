; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 5, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %11, 8, !dbg !12
  %13 = or disjoint i32 %11, 16, !dbg !12
  %14 = or disjoint i32 %11, 24, !dbg !12
  %15 = and i32 %9, 31, !dbg !12
  %16 = or disjoint i32 %8, %11, !dbg !13
  %17 = or disjoint i32 %8, %12, !dbg !13
  %18 = or disjoint i32 %8, %13, !dbg !13
  %19 = or disjoint i32 %8, %14, !dbg !13
  %20 = icmp slt i32 %16, 128, !dbg !14
  %21 = icmp slt i32 %17, 128, !dbg !14
  %22 = icmp slt i32 %18, 128, !dbg !14
  %23 = icmp slt i32 %19, 128, !dbg !14
  %24 = shl i32 %9, 2, !dbg !15
  %25 = and i32 %24, 4, !dbg !15
  %26 = shl i32 %9, 7, !dbg !15
  %27 = and i32 %26, 3840, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %28 = sdiv i32 %.frozen, 32, !dbg !16
  %29 = mul i32 %28, 32, !dbg !17
  %.decomposed = sub i32 %.frozen, %29, !dbg !17
  %.frozen1 = freeze i32 %17, !dbg !16
  %30 = sdiv i32 %.frozen1, 32, !dbg !16
  %31 = mul i32 %30, 32, !dbg !17
  %.decomposed2 = sub i32 %.frozen1, %31, !dbg !17
  %.frozen3 = freeze i32 %18, !dbg !16
  %32 = sdiv i32 %.frozen3, 32, !dbg !16
  %33 = mul i32 %32, 32, !dbg !17
  %.decomposed4 = sub i32 %.frozen3, %33, !dbg !17
  %.frozen5 = freeze i32 %19, !dbg !16
  %34 = sdiv i32 %.frozen5, 32, !dbg !16
  %35 = mul i32 %34, 32, !dbg !17
  %.decomposed6 = sub i32 %.frozen5, %35, !dbg !17
  %36 = shl nsw i32 %.decomposed, 3, !dbg !18
  %37 = shl nsw i32 %.decomposed2, 3, !dbg !18
  %38 = shl nsw i32 %.decomposed4, 3, !dbg !18
  %39 = shl nsw i32 %.decomposed6, 3, !dbg !18
  %40 = shl i32 %28, 12, !dbg !19
  %41 = shl i32 %30, 12, !dbg !19
  %42 = shl i32 %32, 12, !dbg !19
  %43 = shl i32 %34, 12, !dbg !19
  %44 = or disjoint i32 %27, %25, !dbg !20
  %45 = add nsw i32 %44, %36, !dbg !21
  %46 = add i32 %45, %40, !dbg !22
  %47 = add nsw i32 %44, %37, !dbg !21
  %48 = add i32 %47, %41, !dbg !22
  %49 = add nsw i32 %44, %38, !dbg !21
  %50 = add i32 %49, %42, !dbg !22
  %51 = add nsw i32 %44, %39, !dbg !21
  %52 = add i32 %51, %43, !dbg !22
  %53 = sext i32 %46 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = sext i32 %48 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !23
  %57 = sext i32 %50 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = sext i32 %52 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !23
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !24
  %66 = bitcast i32 %62 to float, !dbg !24
  %67 = bitcast i32 %63 to float, !dbg !24
  %68 = bitcast i32 %64 to float, !dbg !24
  %69 = bitcast i32 %65 to float, !dbg !24
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !24
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !24
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !24
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !24
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !24
  %75 = bitcast i32 %71 to float, !dbg !24
  %76 = bitcast i32 %72 to float, !dbg !24
  %77 = bitcast i32 %73 to float, !dbg !24
  %78 = bitcast i32 %74 to float, !dbg !24
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !24
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !24
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !24
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !24
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !24
  %84 = bitcast i32 %80 to float, !dbg !24
  %85 = bitcast i32 %81 to float, !dbg !24
  %86 = bitcast i32 %82 to float, !dbg !24
  %87 = bitcast i32 %83 to float, !dbg !24
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !24
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !24
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !24
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !24
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !24
  %93 = bitcast i32 %89 to float, !dbg !24
  %94 = bitcast i32 %90 to float, !dbg !24
  %95 = bitcast i32 %91 to float, !dbg !24
  %96 = bitcast i32 %92 to float, !dbg !24
  %97 = fadd float %66, %67, !dbg !25
  %98 = fadd float %97, %68, !dbg !25
  %99 = fadd float %98, %69, !dbg !25
  %100 = select i1 %20, float %99, float 0.000000e+00, !dbg !25
  %101 = fadd float %75, %76, !dbg !25
  %102 = fadd float %101, %77, !dbg !25
  %103 = fadd float %102, %78, !dbg !25
  %104 = select i1 %21, float %103, float 0.000000e+00, !dbg !25
  %105 = fadd float %84, %85, !dbg !25
  %106 = fadd float %105, %86, !dbg !25
  %107 = fadd float %106, %87, !dbg !25
  %108 = select i1 %22, float %107, float 0.000000e+00, !dbg !25
  %109 = fadd float %93, %94, !dbg !25
  %110 = fadd float %109, %95, !dbg !25
  %111 = fadd float %110, %96, !dbg !25
  %112 = select i1 %23, float %111, float 0.000000e+00, !dbg !25
  %113 = bitcast float %100 to i32, !dbg !30
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 16, i32 31), !dbg !30
  %115 = bitcast i32 %114 to float, !dbg !30
  %116 = fadd float %100, %115, !dbg !25
  %117 = bitcast float %116 to i32, !dbg !30
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 8, i32 31), !dbg !30
  %119 = bitcast i32 %118 to float, !dbg !30
  %120 = fadd float %116, %119, !dbg !25
  %121 = bitcast float %120 to i32, !dbg !30
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 4, i32 31), !dbg !30
  %123 = bitcast i32 %122 to float, !dbg !30
  %124 = fadd float %120, %123, !dbg !25
  %125 = bitcast float %124 to i32, !dbg !30
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 2, i32 31), !dbg !30
  %127 = bitcast i32 %126 to float, !dbg !30
  %128 = fadd float %124, %127, !dbg !25
  %129 = bitcast float %128 to i32, !dbg !30
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 1, i32 31), !dbg !30
  %131 = bitcast i32 %130 to float, !dbg !30
  %132 = fadd float %128, %131, !dbg !25
  %133 = bitcast float %104 to i32, !dbg !30
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 16, i32 31), !dbg !30
  %135 = bitcast i32 %134 to float, !dbg !30
  %136 = fadd float %104, %135, !dbg !25
  %137 = bitcast float %136 to i32, !dbg !30
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 8, i32 31), !dbg !30
  %139 = bitcast i32 %138 to float, !dbg !30
  %140 = fadd float %136, %139, !dbg !25
  %141 = bitcast float %140 to i32, !dbg !30
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 4, i32 31), !dbg !30
  %143 = bitcast i32 %142 to float, !dbg !30
  %144 = fadd float %140, %143, !dbg !25
  %145 = bitcast float %144 to i32, !dbg !30
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 2, i32 31), !dbg !30
  %147 = bitcast i32 %146 to float, !dbg !30
  %148 = fadd float %144, %147, !dbg !25
  %149 = bitcast float %148 to i32, !dbg !30
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 1, i32 31), !dbg !30
  %151 = bitcast i32 %150 to float, !dbg !30
  %152 = fadd float %148, %151, !dbg !25
  %153 = bitcast float %108 to i32, !dbg !30
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 16, i32 31), !dbg !30
  %155 = bitcast i32 %154 to float, !dbg !30
  %156 = fadd float %108, %155, !dbg !25
  %157 = bitcast float %156 to i32, !dbg !30
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 8, i32 31), !dbg !30
  %159 = bitcast i32 %158 to float, !dbg !30
  %160 = fadd float %156, %159, !dbg !25
  %161 = bitcast float %160 to i32, !dbg !30
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 4, i32 31), !dbg !30
  %163 = bitcast i32 %162 to float, !dbg !30
  %164 = fadd float %160, %163, !dbg !25
  %165 = bitcast float %164 to i32, !dbg !30
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 2, i32 31), !dbg !30
  %167 = bitcast i32 %166 to float, !dbg !30
  %168 = fadd float %164, %167, !dbg !25
  %169 = bitcast float %168 to i32, !dbg !30
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 1, i32 31), !dbg !30
  %171 = bitcast i32 %170 to float, !dbg !30
  %172 = fadd float %168, %171, !dbg !25
  %173 = bitcast float %112 to i32, !dbg !30
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 16, i32 31), !dbg !30
  %175 = bitcast i32 %174 to float, !dbg !30
  %176 = fadd float %112, %175, !dbg !25
  %177 = bitcast float %176 to i32, !dbg !30
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 8, i32 31), !dbg !30
  %179 = bitcast i32 %178 to float, !dbg !30
  %180 = fadd float %176, %179, !dbg !25
  %181 = bitcast float %180 to i32, !dbg !30
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 4, i32 31), !dbg !30
  %183 = bitcast i32 %182 to float, !dbg !30
  %184 = fadd float %180, %183, !dbg !25
  %185 = bitcast float %184 to i32, !dbg !30
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 2, i32 31), !dbg !30
  %187 = bitcast i32 %186 to float, !dbg !30
  %188 = fadd float %184, %187, !dbg !25
  %189 = bitcast float %188 to i32, !dbg !30
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 1, i32 31), !dbg !30
  %191 = bitcast i32 %190 to float, !dbg !30
  %192 = fadd float %188, %191, !dbg !25
  %193 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %194 = bitcast float %132 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %194, i1 true) #5, !dbg !31
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %196 = bitcast float %152 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %196, i1 true) #5, !dbg !31
  %197 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !31
  %198 = bitcast float %172 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #5, !dbg !31
  %199 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !31
  %200 = bitcast float %192 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %200, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %201 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !31
  %202 = load float, ptr addrspace(3) %201, align 4, !dbg !31
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %202, float 1.280000e+02) #5, !dbg !31
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float 1.280000e+02) #5, !dbg !31
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float 1.280000e+02) #5, !dbg !31
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %172, float 1.280000e+02) #5, !dbg !31
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %192, float 1.280000e+02) #5, !dbg !31
  %208 = fsub float %66, %204, !dbg !32
  %209 = fsub float %67, %204, !dbg !32
  %210 = fsub float %68, %204, !dbg !32
  %211 = fsub float %69, %204, !dbg !32
  %212 = fsub float %75, %205, !dbg !32
  %213 = fsub float %76, %205, !dbg !32
  %214 = fsub float %77, %205, !dbg !32
  %215 = fsub float %78, %205, !dbg !32
  %216 = fsub float %84, %206, !dbg !32
  %217 = fsub float %85, %206, !dbg !32
  %218 = fsub float %86, %206, !dbg !32
  %219 = fsub float %87, %206, !dbg !32
  %220 = fsub float %93, %207, !dbg !32
  %221 = fsub float %94, %207, !dbg !32
  %222 = fsub float %95, %207, !dbg !32
  %223 = fsub float %96, %207, !dbg !32
  %224 = fmul float %208, %208, !dbg !33
  %225 = fmul float %209, %209, !dbg !33
  %226 = fmul float %210, %210, !dbg !33
  %227 = fmul float %211, %211, !dbg !33
  %228 = fmul float %212, %212, !dbg !33
  %229 = fmul float %213, %213, !dbg !33
  %230 = fmul float %214, %214, !dbg !33
  %231 = fmul float %215, %215, !dbg !33
  %232 = fmul float %216, %216, !dbg !33
  %233 = fmul float %217, %217, !dbg !33
  %234 = fmul float %218, %218, !dbg !33
  %235 = fmul float %219, %219, !dbg !33
  %236 = fmul float %220, %220, !dbg !33
  %237 = fmul float %221, %221, !dbg !33
  %238 = fmul float %222, %222, !dbg !33
  %239 = fmul float %223, %223, !dbg !33
  %240 = fadd float %224, %225, !dbg !34
  %241 = fadd float %226, %240, !dbg !34
  %242 = fadd float %227, %241, !dbg !34
  %243 = select i1 %20, float %242, float 0.000000e+00, !dbg !34
  %244 = fadd float %228, %229, !dbg !34
  %245 = fadd float %230, %244, !dbg !34
  %246 = fadd float %231, %245, !dbg !34
  %247 = select i1 %21, float %246, float 0.000000e+00, !dbg !34
  %248 = fadd float %232, %233, !dbg !34
  %249 = fadd float %234, %248, !dbg !34
  %250 = fadd float %235, %249, !dbg !34
  %251 = select i1 %22, float %250, float 0.000000e+00, !dbg !34
  %252 = fadd float %236, %237, !dbg !34
  %253 = fadd float %238, %252, !dbg !34
  %254 = fadd float %239, %253, !dbg !34
  %255 = select i1 %23, float %254, float 0.000000e+00, !dbg !34
  %256 = bitcast float %243 to i32, !dbg !36
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 16, i32 31), !dbg !36
  %258 = bitcast i32 %257 to float, !dbg !36
  %259 = fadd float %243, %258, !dbg !34
  %260 = bitcast float %259 to i32, !dbg !36
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 8, i32 31), !dbg !36
  %262 = bitcast i32 %261 to float, !dbg !36
  %263 = fadd float %259, %262, !dbg !34
  %264 = bitcast float %263 to i32, !dbg !36
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 4, i32 31), !dbg !36
  %266 = bitcast i32 %265 to float, !dbg !36
  %267 = fadd float %263, %266, !dbg !34
  %268 = bitcast float %267 to i32, !dbg !36
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 2, i32 31), !dbg !36
  %270 = bitcast i32 %269 to float, !dbg !36
  %271 = fadd float %267, %270, !dbg !34
  %272 = bitcast float %271 to i32, !dbg !36
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 1, i32 31), !dbg !36
  %274 = bitcast i32 %273 to float, !dbg !36
  %275 = fadd float %271, %274, !dbg !34
  %276 = bitcast float %247 to i32, !dbg !36
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 16, i32 31), !dbg !36
  %278 = bitcast i32 %277 to float, !dbg !36
  %279 = fadd float %247, %278, !dbg !34
  %280 = bitcast float %279 to i32, !dbg !36
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 8, i32 31), !dbg !36
  %282 = bitcast i32 %281 to float, !dbg !36
  %283 = fadd float %279, %282, !dbg !34
  %284 = bitcast float %283 to i32, !dbg !36
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 4, i32 31), !dbg !36
  %286 = bitcast i32 %285 to float, !dbg !36
  %287 = fadd float %283, %286, !dbg !34
  %288 = bitcast float %287 to i32, !dbg !36
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 2, i32 31), !dbg !36
  %290 = bitcast i32 %289 to float, !dbg !36
  %291 = fadd float %287, %290, !dbg !34
  %292 = bitcast float %291 to i32, !dbg !36
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 1, i32 31), !dbg !36
  %294 = bitcast i32 %293 to float, !dbg !36
  %295 = fadd float %291, %294, !dbg !34
  %296 = bitcast float %251 to i32, !dbg !36
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 16, i32 31), !dbg !36
  %298 = bitcast i32 %297 to float, !dbg !36
  %299 = fadd float %251, %298, !dbg !34
  %300 = bitcast float %299 to i32, !dbg !36
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 8, i32 31), !dbg !36
  %302 = bitcast i32 %301 to float, !dbg !36
  %303 = fadd float %299, %302, !dbg !34
  %304 = bitcast float %303 to i32, !dbg !36
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 4, i32 31), !dbg !36
  %306 = bitcast i32 %305 to float, !dbg !36
  %307 = fadd float %303, %306, !dbg !34
  %308 = bitcast float %307 to i32, !dbg !36
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 2, i32 31), !dbg !36
  %310 = bitcast i32 %309 to float, !dbg !36
  %311 = fadd float %307, %310, !dbg !34
  %312 = bitcast float %311 to i32, !dbg !36
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 1, i32 31), !dbg !36
  %314 = bitcast i32 %313 to float, !dbg !36
  %315 = fadd float %311, %314, !dbg !34
  %316 = bitcast float %255 to i32, !dbg !36
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 16, i32 31), !dbg !36
  %318 = bitcast i32 %317 to float, !dbg !36
  %319 = fadd float %255, %318, !dbg !34
  %320 = bitcast float %319 to i32, !dbg !36
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %320, i32 8, i32 31), !dbg !36
  %322 = bitcast i32 %321 to float, !dbg !36
  %323 = fadd float %319, %322, !dbg !34
  %324 = bitcast float %323 to i32, !dbg !36
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 4, i32 31), !dbg !36
  %326 = bitcast i32 %325 to float, !dbg !36
  %327 = fadd float %323, %326, !dbg !34
  %328 = bitcast float %327 to i32, !dbg !36
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 2, i32 31), !dbg !36
  %330 = bitcast i32 %329 to float, !dbg !36
  %331 = fadd float %327, %330, !dbg !34
  %332 = bitcast float %331 to i32, !dbg !36
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 1, i32 31), !dbg !36
  %334 = bitcast i32 %333 to float, !dbg !36
  %335 = fadd float %331, %334, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %336 = bitcast float %275 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %336, i1 true) #5, !dbg !37
  %337 = bitcast float %295 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %337, i1 true) #5, !dbg !37
  %338 = bitcast float %315 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %338, i1 true) #5, !dbg !37
  %339 = bitcast float %335 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %339, i1 true) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %340 = load float, ptr addrspace(3) %201, align 4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %336, i1 true) #5, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %337, i1 true) #5, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %338, i1 true) #5, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %339, i1 true) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %341 = load i32, ptr addrspace(3) %201, align 4, !dbg !38
  %342 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %340, float 1.280000e+02) #5, !dbg !39
  %343 = fadd float %342, 0x3EE4F8B580000000, !dbg !40
  %344 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %344, 0, !dbg !37
  br i1 %.not.i, label %347, label %345, !dbg !37

345:                                              ; preds = %6
  %346 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %343), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

347:                                              ; preds = %6
  %348 = tail call float @llvm.nvvm.rsqrt.approx.f(float %343), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %345, %347
  %.0.i = phi float [ %346, %345 ], [ %348, %347 ], !dbg !37
  %349 = or disjoint i32 %8, %15, !dbg !13
  %350 = icmp slt i32 %349, 128, !dbg !14
  %351 = sext i32 %349 to i64, !dbg !41
  %352 = getelementptr float, ptr addrspace(1) %3, i64 %351, !dbg !41
  %353 = and i32 %9, 224, !dbg !42
  %354 = icmp eq i32 %353, 0, !dbg !42
  %355 = bitcast float %.0.i to i32, !dbg !42
  %356 = and i1 %354, %350, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %355, ptr addrspace(1) %352, i1 %356) #5, !dbg !42
  %357 = getelementptr float, ptr addrspace(1) %1, i64 %351, !dbg !43
  %358 = bitcast float %203 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %358, ptr addrspace(1) %357, i1 %356) #5, !dbg !44
  %359 = getelementptr float, ptr addrspace(1) %2, i64 %351, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %341, ptr addrspace(1) %359, i1 %356) #5, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py", directory: "inductor_cache/6g")
!4 = !{ptr @triton_per_fused_native_group_norm_27, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_27, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_27", linkageName: "triton_per_fused_native_group_norm_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 34, column: 37, scope: !7)
!19 = !DILocation(line: 34, column: 56, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 34, column: 42, scope: !7)
!22 = !DILocation(line: 34, column: 51, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 61, scope: !7)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!29 = !DILocation(line: 39, column: 24, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 42, column: 19, scope: !7)
!32 = !DILocation(line: 43, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 20, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !35)
!35 = !DILocation(line: 47, column: 26, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !35)
!37 = !DILocation(line: 52, column: 28, scope: !7)
!38 = !DILocation(line: 47, column: 29, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 51, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 25, scope: !7)
!42 = !DILocation(line: 53, column: 37, scope: !7)
!43 = !DILocation(line: 54, column: 25, scope: !7)
!44 = !DILocation(line: 54, column: 37, scope: !7)
!45 = !DILocation(line: 55, column: 25, scope: !7)
!46 = !DILocation(line: 55, column: 37, scope: !7)
!47 = !DILocation(line: 55, column: 4, scope: !7)
