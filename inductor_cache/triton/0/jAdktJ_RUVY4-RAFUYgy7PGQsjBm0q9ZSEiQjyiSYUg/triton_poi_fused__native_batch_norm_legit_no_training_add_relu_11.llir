; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 6, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 1, !dbg !12
  %15 = shl nuw nsw i32 %14, 1, !dbg !12
  %16 = shl i32 %13, 1, !dbg !12
  %17 = and i32 %16, 62, !dbg !12
  %18 = lshr i32 %13, 1, !dbg !12
  %19 = and i32 %18, 15, !dbg !12
  %20 = and i32 %13, 32, !dbg !12
  %21 = lshr exact i32 %20, 1, !dbg !12
  %22 = and i32 %13, 64, !dbg !12
  %23 = lshr exact i32 %22, 1, !dbg !12
  %24 = or disjoint i32 %12, %17, !dbg !13
  %25 = or disjoint i32 %21, %19, !dbg !12
  %26 = or disjoint i32 %25, %23, !dbg !12
  %27 = or disjoint i32 %26, %12, !dbg !13
  %28 = icmp slt i32 %24, 64, !dbg !14
  %29 = icmp slt i32 %27, 64, !dbg !14
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %31 = shl i32 %30, 2, !dbg !16
  %.lobit1 = lshr exact i32 %20, 5, !dbg !17
  %32 = lshr exact i32 %22, 5, !dbg !17
  %33 = or disjoint i32 %.lobit1, %32, !dbg !17
  %34 = or disjoint i32 %33, %31, !dbg !18
  %35 = or disjoint i32 %31, %15, !dbg !18
  %36 = icmp slt i32 %34, 256, !dbg !19
  %37 = icmp slt i32 %35, 256, !dbg !19
  %.frozen = freeze i32 %24, !dbg !20
  %38 = sdiv i32 %.frozen, 16, !dbg !20
  %39 = mul i32 %38, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %39, !dbg !21
  %.frozen10 = freeze i32 %27, !dbg !20
  %40 = sdiv i32 %.frozen10, 16, !dbg !20
  %41 = mul i32 %40, 16, !dbg !21
  %.decomposed11 = sub i32 %.frozen10, %41, !dbg !21
  %42 = shl i32 %34, 4, !dbg !22
  %43 = add i32 %42, %.decomposed, !dbg !23
  %44 = shl i32 %38, 12, !dbg !24
  %45 = add i32 %43, %44, !dbg !25
  %46 = sext i32 %45 to i64, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !26
  %48 = and i1 %28, %36, !dbg !27
  %49 = and i1 %29, %37, !dbg !27
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %48) #4, !dbg !28
  %51 = sext i32 %.decomposed to i64, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !29
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %28) #4, !dbg !30
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !31
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 %28) #4, !dbg !32
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !32
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !32
  %58 = bitcast i32 %56 to float, !dbg !32
  %59 = bitcast i32 %57 to float, !dbg !32
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !33
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 %28) #4, !dbg !34
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !35
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %62, i1 %28) #4, !dbg !36
  %64 = shl nsw i32 %.decomposed11, 8, !dbg !37
  %65 = shl i32 %40, 14, !dbg !38
  %66 = add i32 %65, %64, !dbg !39
  %67 = add i32 %66, 12288, !dbg !40
  %68 = add i32 %67, %35, !dbg !41
  %69 = sext i32 %68 to i64, !dbg !42
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %69, !dbg !42
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %70, i1 %49) #4, !dbg !43
  %72 = fadd float %58, 0x3EE4F8B580000000, !dbg !44
  %73 = fadd float %59, 0x3EE4F8B580000000, !dbg !44
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %74, 0, !dbg !45
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i = icmp eq i32 %75, 0, !dbg !45
  br i1 %.not.i, label %81, label %76, !dbg !45

76:                                               ; preds = %10
  br i1 %.not1.i, label %79, label %77, !dbg !45

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

81:                                               ; preds = %10
  br i1 %.not1.i, label %84, label %82, !dbg !45

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %77, %79, %82, %84
  %.0.i = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !45
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i5 = icmp eq i32 %86, 0, !dbg !45
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i8 = icmp eq i32 %87, 0, !dbg !45
  br i1 %.not.i5, label %93, label %88, !dbg !45

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %91, label %89, !dbg !45

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !45
  br label %__nv_sqrtf.exit9, !dbg !45

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !45
  br label %__nv_sqrtf.exit9, !dbg !45

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %96, label %94, !dbg !45

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !45
  br label %__nv_sqrtf.exit9, !dbg !45

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !45
  br label %__nv_sqrtf.exit9, !dbg !45

__nv_sqrtf.exit9:                                 ; preds = %89, %91, %94, %96
  %.0.i7 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !45
  %98 = extractvalue { i32, i32 } %50, 1, !dbg !28
  %99 = bitcast i32 %98 to float, !dbg !28
  %100 = extractvalue { i32, i32 } %53, 1, !dbg !30
  %101 = bitcast i32 %100 to float, !dbg !30
  %102 = fsub float %99, %101, !dbg !46
  %103 = extractvalue { i32, i32 } %50, 0, !dbg !28
  %104 = bitcast i32 %103 to float, !dbg !28
  %105 = extractvalue { i32, i32 } %53, 0, !dbg !30
  %106 = bitcast i32 %105 to float, !dbg !30
  %107 = fsub float %104, %106, !dbg !46
  %108 = extractvalue { i32, i32 } %71, 1, !dbg !43
  %109 = bitcast i32 %108 to float, !dbg !43
  %110 = extractvalue { i32, i32 } %71, 0, !dbg !43
  %111 = bitcast i32 %110 to float, !dbg !43
  %112 = extractvalue { i32, i32 } %63, 1, !dbg !36
  %113 = bitcast i32 %112 to float, !dbg !36
  %114 = extractvalue { i32, i32 } %63, 0, !dbg !36
  %115 = bitcast i32 %114 to float, !dbg !36
  %116 = extractvalue { i32, i32 } %61, 1, !dbg !34
  %117 = bitcast i32 %116 to float, !dbg !34
  %118 = extractvalue { i32, i32 } %61, 0, !dbg !34
  %119 = bitcast i32 %118 to float, !dbg !34
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !47
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #4, !dbg !47
  %122 = fmul float %107, %120, !dbg !48
  %123 = fmul float %102, %121, !dbg !48
  %124 = fmul float %122, %119, !dbg !49
  %125 = fmul float %123, %117, !dbg !49
  %126 = fadd float %124, %115, !dbg !50
  %127 = fadd float %125, %113, !dbg !50
  %128 = fcmp olt float %126, 0.000000e+00, !dbg !51
  %129 = fcmp olt float %127, 0.000000e+00, !dbg !51
  %130 = select i1 %128, float 0.000000e+00, float %126, !dbg !55
  %131 = select i1 %129, float 0.000000e+00, float %127, !dbg !55
  %132 = shl i32 %13, 3, !dbg !55
  %133 = and i32 %132, 248, !dbg !55
  %134 = or disjoint i32 %133, %.lobit1, !dbg !55
  %135 = or disjoint i32 %134, %32, !dbg !55
  %136 = and i32 %16, 254, !dbg !55
  %137 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %133, !dbg !55
  %138 = getelementptr inbounds float, ptr addrspace(3) %137, i32 %135, !dbg !55
  %139 = bitcast float %130 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #4, !dbg !55
  %140 = or disjoint i32 %135, 4, !dbg !55
  %141 = lshr i32 %140, 2, !dbg !55
  %142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %141, !dbg !55
  %143 = getelementptr inbounds float, ptr addrspace(3) %142, i32 %140, !dbg !55
  %144 = bitcast float %131 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %145 = lshr i32 %136, 2, !dbg !55
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %145, !dbg !55
  %147 = getelementptr inbounds float, ptr addrspace(3) %146, i32 %136, !dbg !55
  %148 = load float, ptr addrspace(3) %147, align 4, !dbg !55
  %149 = or disjoint i32 %136, 1, !dbg !55
  %150 = getelementptr inbounds float, ptr addrspace(3) %146, i32 %149, !dbg !55
  %151 = load float, ptr addrspace(3) %150, align 4, !dbg !55
  %152 = fadd float %148, %111, !dbg !56
  %153 = fadd float %151, %109, !dbg !56
  %154 = add i32 %66, %35, !dbg !57
  %155 = sext i32 %154 to i64, !dbg !58
  %156 = getelementptr float, ptr addrspace(1) %6, i64 %155, !dbg !58
  %157 = bitcast float %148 to i32, !dbg !59
  %158 = bitcast float %151 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %157, i32 %158, ptr addrspace(1) %156, i1 %49) #4, !dbg !59
  %159 = getelementptr float, ptr addrspace(1) %7, i64 %46, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %160 = shl nuw nsw i32 %14, 7, !dbg !61
  %161 = or disjoint i32 %160, %19, !dbg !61
  %162 = or disjoint i32 %161, %21, !dbg !61
  %163 = or disjoint i32 %162, %23, !dbg !61
  %.idx = shl nuw nsw i32 %14, 4, !dbg !61
  %164 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !61
  %165 = getelementptr float, ptr addrspace(3) %164, i32 %163, !dbg !61
  %166 = bitcast float %152 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %166, i1 true) #4, !dbg !61
  %167 = or disjoint i32 %163, 64, !dbg !61
  %168 = lshr i32 %167, 5, !dbg !61
  %169 = and i32 %168, 134217726, !dbg !61
  %170 = getelementptr float, ptr addrspace(3) @global_smem, i32 %169, !dbg !61
  %171 = getelementptr float, ptr addrspace(3) %170, i32 %167, !dbg !61
  %172 = bitcast float %153 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %171, <1 x i32> %172, i1 true) #4, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %173 = lshr i32 %16, 5, !dbg !61
  %174 = and i32 %173, 6, !dbg !61
  %175 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %174, !dbg !61
  %176 = getelementptr inbounds float, ptr addrspace(3) %175, i32 %136, !dbg !61
  %.extract = load i32, ptr addrspace(3) %176, align 8, !dbg !61
  %177 = getelementptr inbounds i8, ptr addrspace(3) %176, i32 4, !dbg !61
  %.extract4 = load i32, ptr addrspace(3) %177, align 4, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract4, ptr addrspace(1) %159, i1 %48) #4, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4kga2zzsrzdo44g542mtar7ldue3zjslwq4665dfv3ifws3jfgk.py", directory: "inductor_cache/4k")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 38, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 48, scope: !7)
!25 = !DILocation(line: 31, column: 43, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 61, scope: !7)
!28 = !DILocation(line: 31, column: 53, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 48, scope: !7)
!38 = !DILocation(line: 36, column: 59, scope: !7)
!39 = !DILocation(line: 36, column: 39, scope: !7)
!40 = !DILocation(line: 36, column: 44, scope: !7)
!41 = !DILocation(line: 36, column: 53, scope: !7)
!42 = !DILocation(line: 36, column: 31, scope: !7)
!43 = !DILocation(line: 36, column: 64, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 40, column: 26, scope: !7)
!46 = !DILocation(line: 37, column: 18, scope: !7)
!47 = !DILocation(line: 42, column: 18, scope: !7)
!48 = !DILocation(line: 45, column: 19, scope: !7)
!49 = !DILocation(line: 46, column: 20, scope: !7)
!50 = !DILocation(line: 47, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 49, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 50, column: 20, scope: !7)
!57 = !DILocation(line: 51, column: 39, scope: !7)
!58 = !DILocation(line: 51, column: 25, scope: !7)
!59 = !DILocation(line: 51, column: 57, scope: !7)
!60 = !DILocation(line: 52, column: 25, scope: !7)
!61 = !DILocation(line: 52, column: 55, scope: !7)
!62 = !DILocation(line: 52, column: 4, scope: !7)
