; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 512, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %13 = sdiv i32 %.frozen, 16, !dbg !15
  %14 = srem i32 %13, 8, !dbg !16
  %15 = sdiv i32 %11, 128, !dbg !17
  %16 = mul i32 %13, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %16, !dbg !18
  %17 = icmp slt i32 %14, 4, !dbg !19
  %18 = shl nsw i32 %15, 2, !dbg !20
  %19 = add nsw i32 %18, %14, !dbg !21
  %20 = sext i32 %19 to i64, !dbg !22
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !22
  %22 = and i1 %12, %17, !dbg !23
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %22, i32 0, i1 %22) #3, !dbg !24
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %22, i32 0, i1 %22) #3, !dbg !24
  %25 = icmp sgt i32 %14, 3, !dbg !25
  %26 = shl nsw i32 %14, 4, !dbg !26
  %27 = add nsw i32 %.decomposed, -64, !dbg !26
  %28 = add nsw i32 %27, %26, !dbg !27
  %29 = sext i32 %28 to i64, !dbg !28
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !28
  %31 = and i1 %12, %25, !dbg !29
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #3, !dbg !30
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !31
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #3, !dbg !32
  %35 = sext i32 %18 to i64, !dbg !33
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !33
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %31, i32 0, i1 %31) #3, !dbg !34
  %38 = bitcast i32 %37 to float, !dbg !34
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %31, i32 0, i1 %31) #3, !dbg !34
  %40 = bitcast i32 %39 to float, !dbg !34
  %41 = fmul float %38, %38, !dbg !35
  %42 = fmul float %40, %40, !dbg !35
  %43 = or disjoint i32 %18, 1, !dbg !36
  %44 = sext i32 %43 to i64, !dbg !37
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !37
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %31, i32 0, i1 %31) #3, !dbg !38
  %47 = bitcast i32 %46 to float, !dbg !38
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %31, i32 0, i1 %31) #3, !dbg !38
  %49 = bitcast i32 %48 to float, !dbg !38
  %50 = fmul float %47, %47, !dbg !39
  %51 = fmul float %49, %49, !dbg !39
  %52 = fadd float %41, %50, !dbg !40
  %53 = fadd float %42, %51, !dbg !40
  %54 = or disjoint i32 %18, 2, !dbg !41
  %55 = sext i32 %54 to i64, !dbg !42
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !42
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %31, i32 0, i1 %31) #3, !dbg !43
  %58 = bitcast i32 %57 to float, !dbg !43
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %31, i32 0, i1 %31) #3, !dbg !43
  %60 = bitcast i32 %59 to float, !dbg !43
  %61 = fmul float %58, %58, !dbg !44
  %62 = fmul float %60, %60, !dbg !44
  %63 = fadd float %52, %61, !dbg !45
  %64 = fadd float %53, %62, !dbg !45
  %65 = or disjoint i32 %18, 3, !dbg !46
  %66 = sext i32 %65 to i64, !dbg !47
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !47
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %31, i32 0, i1 %31) #3, !dbg !48
  %69 = bitcast i32 %68 to float, !dbg !48
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %31, i32 0, i1 %31) #3, !dbg !48
  %71 = bitcast i32 %70 to float, !dbg !48
  %72 = fmul float %69, %69, !dbg !49
  %73 = fmul float %71, %71, !dbg !49
  %74 = fadd float %63, %72, !dbg !50
  %75 = fadd float %64, %73, !dbg !50
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not.i = icmp eq i32 %76, 0, !dbg !51
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !51
  %.not1.i = icmp eq i32 %77, 0, !dbg !51
  br i1 %.not.i, label %83, label %78, !dbg !51

78:                                               ; preds = %5
  br i1 %.not1.i, label %81, label %79, !dbg !51

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #3, !dbg !51
  br label %__nv_sqrtf.exit, !dbg !51

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #3, !dbg !51
  br label %__nv_sqrtf.exit, !dbg !51

83:                                               ; preds = %5
  br i1 %.not1.i, label %86, label %84, !dbg !51

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #3, !dbg !51
  br label %__nv_sqrtf.exit, !dbg !51

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #3, !dbg !51
  br label %__nv_sqrtf.exit, !dbg !51

__nv_sqrtf.exit:                                  ; preds = %79, %81, %84, %86
  %.0.i = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !51
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not.i1 = icmp eq i32 %88, 0, !dbg !51
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !51
  %.not1.i4 = icmp eq i32 %89, 0, !dbg !51
  br i1 %.not.i1, label %95, label %90, !dbg !51

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %93, label %91, !dbg !51

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !51
  br label %__nv_sqrtf.exit5, !dbg !51

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !51
  br label %__nv_sqrtf.exit5, !dbg !51

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %98, label %96, !dbg !51

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !51
  br label %__nv_sqrtf.exit5, !dbg !51

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !51
  br label %__nv_sqrtf.exit5, !dbg !51

__nv_sqrtf.exit5:                                 ; preds = %91, %93, %96, %98
  %.0.i3 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !51
  %100 = extractvalue { i32, i32 } %34, 1, !dbg !32
  %101 = bitcast i32 %100 to float, !dbg !32
  %102 = extractvalue { i32, i32 } %34, 0, !dbg !32
  %103 = bitcast i32 %102 to float, !dbg !32
  %104 = extractvalue { i32, i32 } %32, 1, !dbg !30
  %105 = bitcast i32 %104 to float, !dbg !30
  %106 = extractvalue { i32, i32 } %32, 0, !dbg !30
  %107 = bitcast i32 %106 to float, !dbg !30
  %108 = fmul float %.0.i, %.0.i, !dbg !52
  %109 = fmul float %.0.i3, %.0.i3, !dbg !52
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %108) #3, !dbg !53
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float %109) #3, !dbg !53
  %112 = fsub float %107, %110, !dbg !54
  %113 = fsub float %105, %111, !dbg !54
  %114 = sext i32 %11 to i64, !dbg !55
  %115 = getelementptr float, ptr addrspace(1) %3, i64 %114, !dbg !55
  %116 = bitcast float %112 to i32, !dbg !56
  %117 = select i1 %17, i32 %23, i32 %116, !dbg !57
  %118 = bitcast float %113 to i32, !dbg !56
  %119 = select i1 %17, i32 %24, i32 %118, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %117, i32 %119, ptr addrspace(1) %115, i1 %12) #3, !dbg !56
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clfzhie5tbj2vjoxavqtosd3vhfre5v4zezzdljyflhjc6xl7ejz.py", directory: "inductor_cache/lf")
!4 = !{ptr @triton_poi_fused_cat_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_0", linkageName: "triton_poi_fused_cat_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 32, scope: !7)
!21 = !DILocation(line: 33, column: 38, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 51, scope: !7)
!24 = !DILocation(line: 33, column: 44, scope: !7)
!25 = !DILocation(line: 34, column: 19, scope: !7)
!26 = !DILocation(line: 37, column: 39, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 30, scope: !7)
!29 = !DILocation(line: 37, column: 59, scope: !7)
!30 = !DILocation(line: 37, column: 52, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 53, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 38, scope: !7)
!35 = !DILocation(line: 40, column: 20, scope: !7)
!36 = !DILocation(line: 41, column: 35, scope: !7)
!37 = !DILocation(line: 41, column: 31, scope: !7)
!38 = !DILocation(line: 41, column: 42, scope: !7)
!39 = !DILocation(line: 42, column: 20, scope: !7)
!40 = !DILocation(line: 43, column: 20, scope: !7)
!41 = !DILocation(line: 44, column: 35, scope: !7)
!42 = !DILocation(line: 44, column: 31, scope: !7)
!43 = !DILocation(line: 44, column: 42, scope: !7)
!44 = !DILocation(line: 45, column: 20, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 35, scope: !7)
!47 = !DILocation(line: 47, column: 31, scope: !7)
!48 = !DILocation(line: 47, column: 42, scope: !7)
!49 = !DILocation(line: 48, column: 20, scope: !7)
!50 = !DILocation(line: 49, column: 20, scope: !7)
!51 = !DILocation(line: 50, column: 27, scope: !7)
!52 = !DILocation(line: 51, column: 20, scope: !7)
!53 = !DILocation(line: 52, column: 20, scope: !7)
!54 = !DILocation(line: 53, column: 19, scope: !7)
!55 = !DILocation(line: 57, column: 25, scope: !7)
!56 = !DILocation(line: 57, column: 37, scope: !7)
!57 = !DILocation(line: 56, column: 33, scope: !7)
!58 = !DILocation(line: 57, column: 4, scope: !7)
