; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__softmax_4(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %7 = and i32 %6, 31, !dbg !11
  %8 = lshr i32 %6, 5, !dbg !11
  %9 = shl i32 %6, 2, !dbg !11
  %10 = and i32 %9, 252, !dbg !11
  %11 = shl i32 %5, 8, !dbg !12
  %12 = or disjoint i32 %11, %10, !dbg !13
  %13 = sext i32 %12 to i64, !dbg !14
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !14
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %14, i1 true) #3, !dbg !15
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !15
  %20 = bitcast i32 %16 to float, !dbg !15
  %21 = bitcast i32 %17 to float, !dbg !15
  %22 = bitcast i32 %18 to float, !dbg !15
  %23 = bitcast i32 %19 to float, !dbg !15
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #3, !dbg !16
  %25 = bitcast i32 %24 to float, !dbg !16
  %26 = fadd float %20, %25, !dbg !17
  %27 = fadd float %21, %25, !dbg !17
  %28 = fadd float %22, %25, !dbg !17
  %29 = fadd float %23, %25, !dbg !17
  %30 = fcmp ogt float %26, %27, !dbg !18
  %31 = fcmp uno float %26, 0.000000e+00, !dbg !23
  %32 = or i1 %30, %31, !dbg !24
  %33 = select i1 %32, float %26, float %27, !dbg !25
  %34 = fcmp ogt float %33, %28, !dbg !18
  %35 = fcmp uno float %33, 0.000000e+00, !dbg !23
  %36 = or i1 %34, %35, !dbg !24
  %37 = select i1 %36, float %33, float %28, !dbg !25
  %38 = fcmp ogt float %37, %29, !dbg !18
  %39 = fcmp uno float %37, 0.000000e+00, !dbg !23
  %40 = or i1 %38, %39, !dbg !24
  %41 = select i1 %40, float %37, float %29, !dbg !25
  %42 = bitcast float %41 to i32, !dbg !26
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 16, i32 31), !dbg !26
  %44 = bitcast i32 %43 to float, !dbg !26
  %45 = fcmp ogt float %41, %44, !dbg !18
  %46 = fcmp uno float %41, 0.000000e+00, !dbg !23
  %47 = or i1 %45, %46, !dbg !24
  %48 = select i1 %47, float %41, float %44, !dbg !25
  %49 = bitcast float %48 to i32, !dbg !26
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 8, i32 31), !dbg !26
  %51 = bitcast i32 %50 to float, !dbg !26
  %52 = fcmp ogt float %48, %51, !dbg !18
  %53 = fcmp uno float %48, 0.000000e+00, !dbg !23
  %54 = or i1 %52, %53, !dbg !24
  %55 = select i1 %54, float %48, float %51, !dbg !25
  %56 = bitcast float %55 to i32, !dbg !26
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 4, i32 31), !dbg !26
  %58 = bitcast i32 %57 to float, !dbg !26
  %59 = fcmp ogt float %55, %58, !dbg !18
  %60 = fcmp uno float %55, 0.000000e+00, !dbg !23
  %61 = or i1 %59, %60, !dbg !24
  %62 = select i1 %61, float %55, float %58, !dbg !25
  %63 = bitcast float %62 to i32, !dbg !26
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 2, i32 31), !dbg !26
  %65 = bitcast i32 %64 to float, !dbg !26
  %66 = fcmp ogt float %62, %65, !dbg !18
  %67 = fcmp uno float %62, 0.000000e+00, !dbg !23
  %68 = or i1 %66, %67, !dbg !24
  %69 = select i1 %68, float %62, float %65, !dbg !25
  %70 = bitcast float %69 to i32, !dbg !26
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !26
  %72 = bitcast i32 %71 to float, !dbg !26
  %73 = fcmp ogt float %69, %72, !dbg !18
  %74 = fcmp uno float %69, 0.000000e+00, !dbg !23
  %75 = or i1 %73, %74, !dbg !24
  %76 = icmp eq i32 %7, 0, !dbg !26
  %77 = and i32 %8, 1, !dbg !26
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i32 %77, !dbg !26
  %79 = select i1 %75, i32 %70, i32 %71, !dbg !25
  %80 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %80, i1 %76) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %81 = icmp slt i32 %6, 2, !dbg !26
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %6, !dbg !26
  %83 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %82, i1 %81) #3, !dbg !26
  %84 = bitcast i32 %83 to float, !dbg !26
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 1, i32 31), !dbg !26
  %86 = bitcast i32 %85 to float, !dbg !26
  %87 = fcmp ogt float %84, %86, !dbg !18
  %88 = fcmp uno float %84, 0.000000e+00, !dbg !23
  %89 = or i1 %88, %87, !dbg !24
  %90 = and i32 %6, 1, !dbg !26
  %91 = icmp eq i32 %90, 0, !dbg !26
  %92 = and i1 %81, %91, !dbg !26
  %93 = select i1 %89, i32 %83, i32 %85, !dbg !25
  %94 = insertelement <1 x i32> poison, i32 %93, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %94, i1 %92) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %95 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !26
  %96 = fadd float %95, 0.000000e+00, !dbg !27
  %97 = fsub float %26, %96, !dbg !29
  %98 = fsub float %27, %96, !dbg !29
  %99 = fsub float %28, %96, !dbg !29
  %100 = fsub float %29, %96, !dbg !29
  %101 = fmul float %97, 0x3FF7154760000000, !dbg !30
  %102 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %101) #3, !dbg !30
  %103 = fmul float %98, 0x3FF7154760000000, !dbg !30
  %104 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %103) #3, !dbg !30
  %105 = fmul float %99, 0x3FF7154760000000, !dbg !30
  %106 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %105) #3, !dbg !30
  %107 = fmul float %100, 0x3FF7154760000000, !dbg !30
  %108 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %107) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %109 = fadd float %102, %104, !dbg !35
  %110 = fadd float %109, %106, !dbg !35
  %111 = fadd float %110, %108, !dbg !35
  %112 = bitcast float %111 to i32, !dbg !31
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 16, i32 31), !dbg !31
  %114 = bitcast i32 %113 to float, !dbg !31
  %115 = fadd float %111, %114, !dbg !35
  %116 = bitcast float %115 to i32, !dbg !31
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 8, i32 31), !dbg !31
  %118 = bitcast i32 %117 to float, !dbg !31
  %119 = fadd float %115, %118, !dbg !35
  %120 = bitcast float %119 to i32, !dbg !31
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 4, i32 31), !dbg !31
  %122 = bitcast i32 %121 to float, !dbg !31
  %123 = fadd float %119, %122, !dbg !35
  %124 = bitcast float %123 to i32, !dbg !31
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 2, i32 31), !dbg !31
  %126 = bitcast i32 %125 to float, !dbg !31
  %127 = fadd float %123, %126, !dbg !35
  %128 = bitcast float %127 to i32, !dbg !31
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 1, i32 31), !dbg !31
  %130 = bitcast i32 %129 to float, !dbg !31
  %131 = fadd float %127, %130, !dbg !35
  %132 = bitcast float %131 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %132, i1 %76) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %133 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %82, i1 %81) #3, !dbg !31
  %134 = bitcast i32 %133 to float, !dbg !31
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 1, i32 31), !dbg !31
  %136 = bitcast i32 %135 to float, !dbg !31
  %137 = fadd float %134, %136, !dbg !35
  %138 = bitcast float %137 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %138, i1 %92) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %139 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !31
  %140 = fadd float %139, 0.000000e+00, !dbg !37
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %140) #3, !dbg !39
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %140) #3, !dbg !39
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %140) #3, !dbg !39
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float %140) #3, !dbg !39
  %145 = bitcast float %141 to i32, !dbg !40
  %146 = bitcast float %142 to i32, !dbg !40
  %147 = bitcast float %143 to i32, !dbg !40
  %148 = bitcast float %144 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %145, i32 %146, i32 %147, i32 %148, ptr addrspace(1) %14, i1 true) #3, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cviafgsxydzp64jzxod47l7namzcatxegsdeqpnyhp5rcnpkwvtj.py", directory: "inductor_cache/vi")
!4 = !{ptr @triton_per_fused__softmax_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_4, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_4", linkageName: "triton_per_fused__softmax_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 43, scope: !7)
!13 = !DILocation(line: 32, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 34, scope: !7)
!15 = !DILocation(line: 32, column: 48, scope: !7)
!16 = !DILocation(line: 33, column: 19, scope: !7)
!17 = !DILocation(line: 35, column: 18, scope: !7)
!18 = !DILocation(line: 118, column: 15, scope: !19, inlinedAt: !22)
!19 = distinct !DILexicalBlockFile(scope: !21, file: !20, discriminator: 0)
!20 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!21 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!22 = !DILocation(line: 37, column: 70, scope: !7)
!23 = !DILocation(line: 120, column: 21, scope: !19, inlinedAt: !22)
!24 = !DILocation(line: 120, column: 16, scope: !19, inlinedAt: !22)
!25 = !DILocation(line: 121, column: 29, scope: !19, inlinedAt: !22)
!26 = !DILocation(line: 131, column: 29, scope: !21, inlinedAt: !22)
!27 = !DILocation(line: 73, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 37, column: 44, scope: !7)
!29 = !DILocation(line: 38, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 23, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 41, column: 58, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 73, column: 15, scope: !21, inlinedAt: !38)
!38 = !DILocation(line: 41, column: 45, scope: !7)
!39 = !DILocation(line: 42, column: 19, scope: !7)
!40 = !DILocation(line: 43, column: 49, scope: !7)
!41 = !DILocation(line: 43, column: 4, scope: !7)
