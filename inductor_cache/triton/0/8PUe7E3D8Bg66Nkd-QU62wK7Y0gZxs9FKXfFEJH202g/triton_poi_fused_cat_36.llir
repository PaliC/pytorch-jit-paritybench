; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %12 = sdiv i32 %.frozen, 384, !dbg !14
  %13 = mul i32 %12, 384, !dbg !15
  %.decomposed = sub i32 %.frozen, %13, !dbg !15
  %.frozen1 = freeze i32 %11, !dbg !14
  %14 = sdiv i32 %.frozen1, 384, !dbg !14
  %15 = mul i32 %14, 384, !dbg !15
  %.decomposed2 = sub i32 %.frozen1, %15, !dbg !15
  %16 = icmp slt i32 %.decomposed, 256, !dbg !16
  %17 = icmp slt i32 %.decomposed2, 256, !dbg !16
  %18 = shl i32 %12, 9, !dbg !17
  %19 = shl i32 %14, 9, !dbg !17
  %20 = add i32 %18, %.decomposed, !dbg !18
  %21 = add i32 %19, %.decomposed2, !dbg !18
  %22 = sext i32 %20 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !19
  %24 = sext i32 %21 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #1, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !20
  %31 = bitcast i32 %27 to float, !dbg !20
  %32 = bitcast i32 %28 to float, !dbg !20
  %33 = bitcast i32 %29 to float, !dbg !20
  %34 = bitcast i32 %30 to float, !dbg !20
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #1, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !20
  %40 = bitcast i32 %36 to float, !dbg !20
  %41 = bitcast i32 %37 to float, !dbg !20
  %42 = bitcast i32 %38 to float, !dbg !20
  %43 = bitcast i32 %39 to float, !dbg !20
  %44 = add nsw i32 %.decomposed, 256, !dbg !21
  %45 = add i32 %44, %18, !dbg !22
  %46 = add nsw i32 %.decomposed2, 256, !dbg !21
  %47 = add i32 %46, %19, !dbg !22
  %48 = sext i32 %45 to i64, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !23
  %50 = sext i32 %47 to i64, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !23
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #1, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !24
  %57 = bitcast i32 %53 to float, !dbg !24
  %58 = bitcast i32 %54 to float, !dbg !24
  %59 = bitcast i32 %55 to float, !dbg !24
  %60 = bitcast i32 %56 to float, !dbg !24
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #1, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !24
  %66 = bitcast i32 %62 to float, !dbg !24
  %67 = bitcast i32 %63 to float, !dbg !24
  %68 = bitcast i32 %64 to float, !dbg !24
  %69 = bitcast i32 %65 to float, !dbg !24
  %70 = fsub float 0.000000e+00, %57, !dbg !25
  %71 = fsub float 0.000000e+00, %58, !dbg !25
  %72 = fsub float 0.000000e+00, %59, !dbg !25
  %73 = fsub float 0.000000e+00, %60, !dbg !25
  %74 = fsub float 0.000000e+00, %66, !dbg !25
  %75 = fsub float 0.000000e+00, %67, !dbg !25
  %76 = fsub float 0.000000e+00, %68, !dbg !25
  %77 = fsub float 0.000000e+00, %69, !dbg !25
  %78 = fmul float %70, 0x3FF7154760000000, !dbg !29
  %79 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %78) #1, !dbg !29
  %80 = fmul float %71, 0x3FF7154760000000, !dbg !29
  %81 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %80) #1, !dbg !29
  %82 = fmul float %72, 0x3FF7154760000000, !dbg !29
  %83 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %82) #1, !dbg !29
  %84 = fmul float %73, 0x3FF7154760000000, !dbg !29
  %85 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %84) #1, !dbg !29
  %86 = fmul float %74, 0x3FF7154760000000, !dbg !29
  %87 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %86) #1, !dbg !29
  %88 = fmul float %75, 0x3FF7154760000000, !dbg !29
  %89 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %88) #1, !dbg !29
  %90 = fmul float %76, 0x3FF7154760000000, !dbg !29
  %91 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %90) #1, !dbg !29
  %92 = fmul float %77, 0x3FF7154760000000, !dbg !29
  %93 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %92) #1, !dbg !29
  %94 = fadd float %79, 1.000000e+00, !dbg !30
  %95 = fadd float %81, 1.000000e+00, !dbg !30
  %96 = fadd float %83, 1.000000e+00, !dbg !30
  %97 = fadd float %85, 1.000000e+00, !dbg !30
  %98 = fadd float %87, 1.000000e+00, !dbg !30
  %99 = fadd float %89, 1.000000e+00, !dbg !30
  %100 = fadd float %91, 1.000000e+00, !dbg !30
  %101 = fadd float %93, 1.000000e+00, !dbg !30
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %94) #1, !dbg !31
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %95) #1, !dbg !31
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %96) #1, !dbg !31
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %97) #1, !dbg !31
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %98) #1, !dbg !31
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %99) #1, !dbg !31
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %100) #1, !dbg !31
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %101) #1, !dbg !31
  %110 = fmul float %102, %31, !dbg !32
  %111 = fmul float %103, %32, !dbg !32
  %112 = fmul float %104, %33, !dbg !32
  %113 = fmul float %105, %34, !dbg !32
  %114 = fmul float %106, %40, !dbg !32
  %115 = fmul float %107, %41, !dbg !32
  %116 = fmul float %108, %42, !dbg !32
  %117 = fmul float %109, %43, !dbg !32
  %118 = icmp sgt i32 %.decomposed, 255, !dbg !33
  %119 = icmp sgt i32 %.decomposed2, 255, !dbg !33
  %120 = shl nsw i32 %12, 7, !dbg !34
  %121 = shl nsw i32 %14, 7, !dbg !34
  %122 = add nsw i32 %.decomposed, -256, !dbg !35
  %123 = add nsw i32 %.decomposed2, -256, !dbg !35
  %124 = add nsw i32 %122, %120, !dbg !36
  %125 = add nsw i32 %123, %121, !dbg !36
  %126 = sext i32 %124 to i64, !dbg !37
  %127 = getelementptr float, ptr addrspace(1) %1, i64 %126, !dbg !37
  %128 = sext i32 %125 to i64, !dbg !37
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %128, !dbg !37
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %127, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118) #1, !dbg !38
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !38
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !38
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !38
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !38
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %129, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #1, !dbg !38
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !38
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !38
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !38
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !38
  %140 = sext i32 %10 to i64, !dbg !39
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %140, !dbg !39
  %142 = sext i32 %11 to i64, !dbg !39
  %143 = getelementptr float, ptr addrspace(1) %2, i64 %142, !dbg !39
  %144 = bitcast float %110 to i32, !dbg !40
  %145 = select i1 %16, i32 %144, i32 %131, !dbg !41
  %146 = bitcast float %111 to i32, !dbg !40
  %147 = select i1 %16, i32 %146, i32 %132, !dbg !41
  %148 = bitcast float %112 to i32, !dbg !40
  %149 = select i1 %16, i32 %148, i32 %133, !dbg !41
  %150 = bitcast float %113 to i32, !dbg !40
  %151 = select i1 %16, i32 %150, i32 %134, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %145, i32 %147, i32 %149, i32 %151, ptr addrspace(1) %141, i1 true) #1, !dbg !40
  %152 = bitcast float %114 to i32, !dbg !40
  %153 = select i1 %17, i32 %152, i32 %136, !dbg !41
  %154 = bitcast float %115 to i32, !dbg !40
  %155 = select i1 %17, i32 %154, i32 %137, !dbg !41
  %156 = bitcast float %116 to i32, !dbg !40
  %157 = select i1 %17, i32 %156, i32 %138, !dbg !41
  %158 = bitcast float %117 to i32, !dbg !40
  %159 = select i1 %17, i32 %158, i32 %139, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %153, i32 %155, i32 %157, i32 %159, ptr addrspace(1) %143, i1 true) #1, !dbg !40
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4c6stlmo3wqfh4xmcznz45ob43v4ixgh5oqcdxnisrozaxubcb6.py", directory: "inductor_cache/4c")
!4 = !{ptr @triton_poi_fused_cat_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_36", linkageName: "triton_poi_fused_cat_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 46, scope: !7)
!21 = !DILocation(line: 33, column: 36, scope: !7)
!22 = !DILocation(line: 33, column: 46, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 52, scope: !7)
!25 = !DILocation(line: 47, column: 30, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 34, column: 22, scope: !7)
!29 = !DILocation(line: 47, column: 29, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 47, column: 20, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 47, column: 16, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 35, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 20, scope: !7)
!34 = !DILocation(line: 41, column: 35, scope: !7)
!35 = !DILocation(line: 41, column: 50, scope: !7)
!36 = !DILocation(line: 41, column: 41, scope: !7)
!37 = !DILocation(line: 41, column: 31, scope: !7)
!38 = !DILocation(line: 41, column: 56, scope: !7)
!39 = !DILocation(line: 43, column: 25, scope: !7)
!40 = !DILocation(line: 43, column: 37, scope: !7)
!41 = !DILocation(line: 0, scope: !7)
!42 = !DILocation(line: 43, column: 4, scope: !7)
