; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused__adaptive_avg_pool2d__to_copy__unsafe_index_add_arange_clamp_mean_mul_sub_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = icmp slt i32 %7, 16, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = lshr i32 %10, 2, !dbg !13
  %12 = and i32 %9, 3, !dbg !14
  %13 = shl i32 %7, 4, !dbg !15
  %14 = or disjoint i32 %13, %10, !dbg !16
  %15 = sext i32 %14 to i64, !dbg !17
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !17
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 %8, i32 0, i1 %8) #3, !dbg !18
  %18 = bitcast i32 %17 to float, !dbg !18
  %19 = select i1 %8, float %18, float 0.000000e+00, !dbg !19
  %20 = bitcast float %19 to i32, !dbg !20
  %21 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %20, i32 8, i32 31), !dbg !20
  %22 = bitcast i32 %21 to float, !dbg !20
  %23 = fadd float %19, %22, !dbg !24
  %24 = bitcast float %23 to i32, !dbg !20
  %25 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %24, i32 4, i32 31), !dbg !20
  %26 = bitcast i32 %25 to float, !dbg !20
  %27 = fadd float %23, %26, !dbg !24
  %28 = bitcast float %27 to i32, !dbg !20
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 2, i32 31), !dbg !20
  %30 = bitcast i32 %29 to float, !dbg !20
  %31 = fadd float %27, %30, !dbg !24
  %32 = bitcast float %31 to i32, !dbg !20
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 1, i32 31), !dbg !20
  %34 = bitcast i32 %33 to float, !dbg !20
  %35 = fadd float %31, %34, !dbg !24
  %36 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %35, float 1.600000e+01) #3, !dbg !26
  %37 = fsub float %36, %36, !dbg !27
  %38 = uitofp nneg i32 %11 to float, !dbg !28
  %39 = fmul float %38, 0x3FD5555560000000, !dbg !29
  %40 = fcmp ogt float %39, 0.000000e+00, !dbg !30
  %41 = select i1 %40, float %39, float 0.000000e+00, !dbg !34
  %42 = fptosi float %41 to i32, !dbg !35
  %43 = tail call i32 @llvm.smin.i32(i32 %42, i32 0), !dbg !36
  %narrow = add nsw i32 %43, 1, !dbg !36
  %44 = sext i32 %narrow to i64, !dbg !36
  %45 = uitofp nneg i32 %12 to float, !dbg !38
  %46 = fmul float %45, 0x3FD5555560000000, !dbg !39
  %47 = fcmp ogt float %46, 0.000000e+00, !dbg !40
  %48 = select i1 %47, float %46, float 0.000000e+00, !dbg !42
  %49 = fptosi float %48 to i32, !dbg !43
  %50 = tail call i32 @llvm.smin.i32(i32 %49, i32 0), !dbg !44
  %narrow1 = add nsw i32 %50, 1, !dbg !44
  %51 = sext i32 %narrow1 to i64, !dbg !44
  %52 = shl nsw i64 %51, 1, !dbg !46
  %53 = shl nsw i64 %44, 3, !dbg !47
  %54 = sext i32 %13 to i64, !dbg !48
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !49
  %56 = getelementptr float, ptr addrspace(1) %55, i64 %53, !dbg !49
  %57 = getelementptr float, ptr addrspace(1) %56, i64 %54, !dbg !49
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %8) #3, !dbg !50
  %59 = or disjoint i64 %52, 1, !dbg !51
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !52
  %61 = getelementptr float, ptr addrspace(1) %60, i64 %53, !dbg !52
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %54, !dbg !52
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %8) #3, !dbg !53
  %64 = getelementptr i8, ptr addrspace(1) %55, i64 16, !dbg !54
  %65 = getelementptr float, ptr addrspace(1) %64, i64 %53, !dbg !54
  %66 = getelementptr float, ptr addrspace(1) %65, i64 %54, !dbg !54
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %8) #3, !dbg !55
  %68 = getelementptr i8, ptr addrspace(1) %55, i64 20, !dbg !56
  %69 = getelementptr float, ptr addrspace(1) %68, i64 %53, !dbg !56
  %70 = getelementptr float, ptr addrspace(1) %69, i64 %54, !dbg !56
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %8) #3, !dbg !57
  %72 = shl i32 %49, 1, !dbg !58
  %73 = sext i32 %72 to i64, !dbg !59
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !60
  %75 = getelementptr float, ptr addrspace(1) %74, i64 %73, !dbg !60
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %54, !dbg !60
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %8) #3, !dbg !61
  %78 = or disjoint i32 %72, 1, !dbg !62
  %79 = sext i32 %78 to i64, !dbg !63
  %80 = getelementptr float, ptr addrspace(1) %74, i64 %79, !dbg !64
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %54, !dbg !64
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %8) #3, !dbg !65
  %83 = add i32 %72, 4, !dbg !66
  %84 = sext i32 %83 to i64, !dbg !67
  %85 = getelementptr float, ptr addrspace(1) %74, i64 %84, !dbg !68
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %54, !dbg !68
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %8) #3, !dbg !69
  %88 = add i32 %72, 5, !dbg !70
  %89 = sext i32 %88 to i64, !dbg !71
  %90 = getelementptr float, ptr addrspace(1) %74, i64 %89, !dbg !72
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %54, !dbg !72
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %8) #3, !dbg !73
  %93 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !50
  %94 = insertelement <2 x i32> %93, i32 %77, i64 1, !dbg !50
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !50
  %96 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !53
  %97 = insertelement <2 x i32> %96, i32 %82, i64 1, !dbg !53
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !53
  %99 = fadd <2 x float> %95, %98, !dbg !74
  %100 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !55
  %101 = insertelement <2 x i32> %100, i32 %87, i64 1, !dbg !55
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !55
  %103 = fadd <2 x float> %99, %102, !dbg !75
  %104 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !57
  %105 = insertelement <2 x i32> %104, i32 %92, i64 1, !dbg !57
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !57
  %107 = fadd <2 x float> %103, %106, !dbg !76
  %108 = fmul <2 x float> %107, splat (float 2.500000e-01), !dbg !77
  %109 = extractelement <2 x float> %108, i64 0, !dbg !78
  %110 = extractelement <2 x float> %108, i64 1, !dbg !79
  %111 = fsub float %109, %110, !dbg !78
  %112 = shl i32 %42, 3, !dbg !80
  %113 = sext i32 %112 to i64, !dbg !81
  %114 = getelementptr float, ptr addrspace(1) %55, i64 %113, !dbg !82
  %115 = getelementptr float, ptr addrspace(1) %114, i64 %54, !dbg !82
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %8) #3, !dbg !83
  %117 = getelementptr float, ptr addrspace(1) %60, i64 %113, !dbg !84
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %54, !dbg !84
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %8) #3, !dbg !85
  %120 = getelementptr float, ptr addrspace(1) %64, i64 %113, !dbg !86
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %54, !dbg !86
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %8) #3, !dbg !87
  %123 = getelementptr float, ptr addrspace(1) %68, i64 %113, !dbg !88
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %54, !dbg !88
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %8) #3, !dbg !89
  %126 = add i32 %13, %112, !dbg !90
  %127 = add i32 %126, %72, !dbg !91
  %128 = sext i32 %127 to i64, !dbg !92
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %128, !dbg !92
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %8) #3, !dbg !93
  %131 = add i32 %126, %78, !dbg !94
  %132 = sext i32 %131 to i64, !dbg !95
  %133 = getelementptr float, ptr addrspace(1) %1, i64 %132, !dbg !95
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %8) #3, !dbg !96
  %135 = add i32 %126, %83, !dbg !97
  %136 = sext i32 %135 to i64, !dbg !98
  %137 = getelementptr float, ptr addrspace(1) %1, i64 %136, !dbg !98
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %8) #3, !dbg !99
  %139 = add i32 %126, %88, !dbg !100
  %140 = sext i32 %139 to i64, !dbg !101
  %141 = getelementptr float, ptr addrspace(1) %1, i64 %140, !dbg !101
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %8) #3, !dbg !102
  %143 = sitofp i32 %49 to float, !dbg !103
  %144 = fsub float %48, %143, !dbg !104
  %145 = fcmp ogt float %144, 0.000000e+00, !dbg !105
  %146 = select i1 %145, float %144, float 0.000000e+00, !dbg !107
  %147 = fcmp olt float %146, 1.000000e+00, !dbg !108
  %148 = select i1 %147, float %146, float 1.000000e+00, !dbg !110
  %149 = fmul float %148, %111, !dbg !111
  %150 = fadd float %110, %149, !dbg !79
  %151 = mul i32 %7, 9, !dbg !112
  %152 = sext i32 %151 to i64, !dbg !113
  %153 = mul i32 %7, 36, !dbg !114
  %154 = sext i32 %153 to i64, !dbg !115
  %155 = insertelement <2 x float> poison, float %38, i64 0, !dbg !116
  %156 = shufflevector <2 x float> %155, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !116
  %157 = fmul <2 x float> %156, <float 0x3FE5555560000000, float 0x3FFAAAAAA0000000>, !dbg !116
  %158 = fcmp ogt <2 x float> %157, zeroinitializer, !dbg !117
  %159 = select <2 x i1> %158, <2 x float> %157, <2 x float> zeroinitializer, !dbg !119
  %160 = fptosi <2 x float> %159 to <2 x i32>, !dbg !120
  %161 = extractelement <2 x i32> %160, i64 0, !dbg !121
  %162 = tail call i32 @llvm.smin.i32(i32 %161, i32 1), !dbg !121
  %narrow2 = add nsw i32 %162, 1, !dbg !121
  %163 = sext i32 %narrow2 to i64, !dbg !121
  %164 = mul nsw i64 %163, 3, !dbg !123
  %165 = insertelement <2 x float> poison, float %45, i64 0, !dbg !124
  %166 = shufflevector <2 x float> %165, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !124
  %167 = fmul <2 x float> %166, <float 0x3FE5555560000000, float 0x3FFAAAAAA0000000>, !dbg !124
  %168 = fcmp ogt <2 x float> %167, zeroinitializer, !dbg !125
  %169 = select <2 x i1> %168, <2 x float> %167, <2 x float> zeroinitializer, !dbg !127
  %170 = fptosi <2 x float> %169 to <2 x i32>, !dbg !128
  %171 = extractelement <2 x i32> %170, i64 0, !dbg !129
  %172 = sext i32 %171 to i64, !dbg !130
  %173 = getelementptr float, ptr addrspace(1) %2, i64 %164, !dbg !131
  %174 = getelementptr float, ptr addrspace(1) %173, i64 %172, !dbg !131
  %175 = getelementptr float, ptr addrspace(1) %174, i64 %152, !dbg !131
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %8) #3, !dbg !132
  %177 = tail call i64 @llvm.smin.i64(i64 %172, i64 1), !dbg !133
  %178 = getelementptr float, ptr addrspace(1) %2, i64 %177, !dbg !135
  %179 = getelementptr i8, ptr addrspace(1) %178, i64 4, !dbg !135
  %180 = getelementptr float, ptr addrspace(1) %179, i64 %164, !dbg !135
  %181 = getelementptr float, ptr addrspace(1) %180, i64 %152, !dbg !135
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 %8) #3, !dbg !136
  %183 = mul i32 %161, 3, !dbg !137
  %184 = add i32 %183, %171, !dbg !129
  %185 = add i32 %184, %151, !dbg !138
  %186 = sext i32 %185 to i64, !dbg !139
  %187 = getelementptr float, ptr addrspace(1) %2, i64 %186, !dbg !139
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %8) #3, !dbg !140
  %189 = sext i32 %183 to i64, !dbg !141
  %190 = getelementptr float, ptr addrspace(1) %179, i64 %189, !dbg !142
  %191 = getelementptr float, ptr addrspace(1) %190, i64 %152, !dbg !142
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %8) #3, !dbg !143
  %193 = extractelement <2 x i32> %160, i64 1, !dbg !144
  %194 = tail call i32 @llvm.smin.i32(i32 %193, i32 4), !dbg !144
  %narrow3 = add nsw i32 %194, 1, !dbg !144
  %195 = sext i32 %narrow3 to i64, !dbg !144
  %196 = mul nsw i64 %195, 6, !dbg !146
  %197 = extractelement <2 x i32> %170, i64 1, !dbg !147
  %198 = sext i32 %197 to i64, !dbg !148
  %199 = getelementptr float, ptr addrspace(1) %3, i64 %196, !dbg !149
  %200 = getelementptr float, ptr addrspace(1) %199, i64 %198, !dbg !149
  %201 = getelementptr float, ptr addrspace(1) %200, i64 %154, !dbg !149
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %8) #3, !dbg !150
  %203 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !132
  %204 = insertelement <2 x i32> %203, i32 %202, i64 1, !dbg !132
  %205 = bitcast <2 x i32> %204 to <2 x float>, !dbg !132
  %206 = tail call i64 @llvm.smin.i64(i64 %198, i64 4), !dbg !151
  %207 = getelementptr float, ptr addrspace(1) %3, i64 %206, !dbg !153
  %208 = getelementptr i8, ptr addrspace(1) %207, i64 4, !dbg !153
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %196, !dbg !153
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %154, !dbg !153
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %210, i1 %8) #3, !dbg !154
  %212 = insertelement <2 x i32> poison, i32 %182, i64 0, !dbg !136
  %213 = insertelement <2 x i32> %212, i32 %211, i64 1, !dbg !136
  %214 = bitcast <2 x i32> %213 to <2 x float>, !dbg !136
  %215 = fsub <2 x float> %214, %205, !dbg !155
  %216 = sitofp <2 x i32> %170 to <2 x float>, !dbg !156
  %217 = fsub <2 x float> %169, %216, !dbg !157
  %218 = fcmp ogt <2 x float> %217, zeroinitializer, !dbg !158
  %219 = select <2 x i1> %218, <2 x float> %217, <2 x float> zeroinitializer, !dbg !160
  %220 = fcmp olt <2 x float> %219, splat (float 1.000000e+00), !dbg !161
  %221 = select <2 x i1> %220, <2 x float> %219, <2 x float> splat (float 1.000000e+00), !dbg !163
  %222 = fmul <2 x float> %221, %215, !dbg !164
  %223 = fadd <2 x float> %222, %205, !dbg !165
  %224 = mul i32 %193, 6, !dbg !166
  %225 = add i32 %224, %197, !dbg !147
  %226 = add i32 %225, %153, !dbg !167
  %227 = sext i32 %226 to i64, !dbg !168
  %228 = getelementptr float, ptr addrspace(1) %3, i64 %227, !dbg !168
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 %8) #3, !dbg !169
  %230 = insertelement <2 x i32> poison, i32 %188, i64 0, !dbg !140
  %231 = insertelement <2 x i32> %230, i32 %229, i64 1, !dbg !140
  %232 = bitcast <2 x i32> %231 to <2 x float>, !dbg !140
  %233 = sext i32 %224 to i64, !dbg !170
  %234 = getelementptr float, ptr addrspace(1) %208, i64 %233, !dbg !171
  %235 = getelementptr float, ptr addrspace(1) %234, i64 %154, !dbg !171
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %235, i1 %8) #3, !dbg !172
  %237 = insertelement <2 x i32> poison, i32 %192, i64 0, !dbg !143
  %238 = insertelement <2 x i32> %237, i32 %236, i64 1, !dbg !143
  %239 = bitcast <2 x i32> %238 to <2 x float>, !dbg !143
  %240 = fsub <2 x float> %239, %232, !dbg !173
  %241 = fmul <2 x float> %221, %240, !dbg !174
  %242 = fadd <2 x float> %241, %232, !dbg !175
  %243 = fsub <2 x float> %223, %242, !dbg !176
  %244 = sitofp <2 x i32> %160 to <2 x float>, !dbg !177
  %245 = fsub <2 x float> %159, %244, !dbg !178
  %246 = fcmp ogt <2 x float> %245, zeroinitializer, !dbg !179
  %247 = select <2 x i1> %246, <2 x float> %245, <2 x float> zeroinitializer, !dbg !181
  %248 = fcmp olt <2 x float> %247, splat (float 1.000000e+00), !dbg !182
  %249 = select <2 x i1> %248, <2 x float> %247, <2 x float> splat (float 1.000000e+00), !dbg !184
  %250 = fmul <2 x float> %249, %243, !dbg !185
  %251 = fadd <2 x float> %242, %250, !dbg !186
  %252 = sitofp i32 %42 to float, !dbg !187
  %253 = fsub float %41, %252, !dbg !188
  %254 = fcmp ogt float %253, 0.000000e+00, !dbg !189
  %255 = select i1 %254, float %253, float 0.000000e+00, !dbg !191
  %256 = fcmp olt float %255, 1.000000e+00, !dbg !192
  %257 = select i1 %256, float %255, float 1.000000e+00, !dbg !194
  %258 = insertelement <2 x i32> poison, i32 %116, i64 0, !dbg !83
  %259 = insertelement <2 x i32> %258, i32 %130, i64 1, !dbg !83
  %260 = bitcast <2 x i32> %259 to <2 x float>, !dbg !83
  %261 = insertelement <2 x i32> poison, i32 %119, i64 0, !dbg !85
  %262 = insertelement <2 x i32> %261, i32 %134, i64 1, !dbg !85
  %263 = bitcast <2 x i32> %262 to <2 x float>, !dbg !85
  %264 = fadd <2 x float> %260, %263, !dbg !195
  %265 = insertelement <2 x i32> poison, i32 %122, i64 0, !dbg !87
  %266 = insertelement <2 x i32> %265, i32 %138, i64 1, !dbg !87
  %267 = bitcast <2 x i32> %266 to <2 x float>, !dbg !87
  %268 = fadd <2 x float> %264, %267, !dbg !196
  %269 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !89
  %270 = insertelement <2 x i32> %269, i32 %142, i64 1, !dbg !89
  %271 = bitcast <2 x i32> %270 to <2 x float>, !dbg !89
  %272 = fadd <2 x float> %268, %271, !dbg !197
  %273 = fmul <2 x float> %272, splat (float 2.500000e-01), !dbg !198
  %274 = insertelement <2 x float> %272, float %37, i64 0, !dbg !199
  %275 = fmul <2 x float> %274, <float 0.000000e+00, float 2.500000e-01>, !dbg !199
  %shift = shufflevector <2 x float> %273, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !200
  %276 = fsub <2 x float> %273, %shift, !dbg !200
  %277 = extractelement <2 x float> %276, i64 0, !dbg !200
  %278 = fmul float %148, %277, !dbg !201
  %279 = insertelement <2 x float> poison, float %36, i64 0, !dbg !202
  %280 = insertelement <2 x float> %279, float %278, i64 1, !dbg !202
  %281 = fadd <2 x float> %280, %275, !dbg !202
  %282 = insertelement <2 x float> %281, float %150, i64 1, !dbg !203
  %283 = fsub <2 x float> %282, %281, !dbg !203
  %284 = insertelement <2 x float> <float 0.000000e+00, float poison>, float %257, i64 1, !dbg !204
  %285 = fmul <2 x float> %284, %283, !dbg !204
  %286 = fadd <2 x float> %281, %285, !dbg !205
  %287 = extractelement <2 x float> %286, i64 0, !dbg !206
  %288 = fadd float %287, %18, !dbg !206
  %289 = extractelement <2 x float> %286, i64 1, !dbg !207
  %290 = fadd float %288, %289, !dbg !207
  %291 = extractelement <2 x float> %251, i64 0, !dbg !208
  %292 = fadd float %290, %291, !dbg !208
  %293 = extractelement <2 x float> %251, i64 1, !dbg !209
  %294 = fadd float %292, %293, !dbg !209
  %295 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !210
  %296 = and i32 %9, 48, !dbg !211
  %297 = icmp eq i32 %296, 0, !dbg !211
  %298 = bitcast float %294 to i32, !dbg !211
  %299 = and i1 %297, %8, !dbg !211
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %298, ptr addrspace(1) %295, i1 %299) #3, !dbg !211
  ret void, !dbg !212
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck2iwrxsxkr35k7u6k3sdvtgrwxlpoy4q6b6qemwmrciu4cfx6hf.py", directory: "inductor_cache/k2")
!4 = !{ptr @triton_per_fused__adaptive_avg_pool2d__to_copy__unsafe_index_add_arange_clamp_mean_mul_sub_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__adaptive_avg_pool2d__to_copy__unsafe_index_add_arange_clamp_mean_mul_sub_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__adaptive_avg_pool2d__to_copy__unsafe_index_add_arange_clamp_mean_mul_sub_2", linkageName: "triton_per_fused__adaptive_avg_pool2d__to_copy__unsafe_index_add_arange_clamp_mean_mul_sub_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 38, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 43, scope: !7)
!19 = !DILocation(line: 35, column: 33, scope: !7)
!20 = !DILocation(line: 267, column: 36, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = !DILocation(line: 36, column: 24, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !23)
!25 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!26 = !DILocation(line: 38, column: 18, scope: !7)
!27 = !DILocation(line: 39, column: 18, scope: !7)
!28 = !DILocation(line: 48, column: 21, scope: !7)
!29 = !DILocation(line: 50, column: 20, scope: !7)
!30 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 51, column: 42, scope: !7)
!34 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 52, column: 21, scope: !7)
!36 = !DILocation(line: 113, column: 29, scope: !31, inlinedAt: !37)
!37 = !DILocation(line: 55, column: 42, scope: !7)
!38 = !DILocation(line: 57, column: 21, scope: !7)
!39 = !DILocation(line: 58, column: 20, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !41)
!41 = !DILocation(line: 59, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !41)
!43 = !DILocation(line: 60, column: 21, scope: !7)
!44 = !DILocation(line: 113, column: 29, scope: !31, inlinedAt: !45)
!45 = !DILocation(line: 62, column: 42, scope: !7)
!46 = !DILocation(line: 63, column: 33, scope: !7)
!47 = !DILocation(line: 63, column: 43, scope: !7)
!48 = !DILocation(line: 63, column: 51, scope: !7)
!49 = !DILocation(line: 63, column: 31, scope: !7)
!50 = !DILocation(line: 63, column: 59, scope: !7)
!51 = !DILocation(line: 64, column: 35, scope: !7)
!52 = !DILocation(line: 64, column: 31, scope: !7)
!53 = !DILocation(line: 64, column: 63, scope: !7)
!54 = !DILocation(line: 66, column: 31, scope: !7)
!55 = !DILocation(line: 66, column: 63, scope: !7)
!56 = !DILocation(line: 68, column: 31, scope: !7)
!57 = !DILocation(line: 68, column: 63, scope: !7)
!58 = !DILocation(line: 72, column: 33, scope: !7)
!59 = !DILocation(line: 72, column: 41, scope: !7)
!60 = !DILocation(line: 72, column: 31, scope: !7)
!61 = !DILocation(line: 72, column: 59, scope: !7)
!62 = !DILocation(line: 73, column: 35, scope: !7)
!63 = !DILocation(line: 73, column: 45, scope: !7)
!64 = !DILocation(line: 73, column: 31, scope: !7)
!65 = !DILocation(line: 73, column: 63, scope: !7)
!66 = !DILocation(line: 75, column: 35, scope: !7)
!67 = !DILocation(line: 75, column: 45, scope: !7)
!68 = !DILocation(line: 75, column: 31, scope: !7)
!69 = !DILocation(line: 75, column: 63, scope: !7)
!70 = !DILocation(line: 77, column: 35, scope: !7)
!71 = !DILocation(line: 77, column: 45, scope: !7)
!72 = !DILocation(line: 77, column: 31, scope: !7)
!73 = !DILocation(line: 77, column: 63, scope: !7)
!74 = !DILocation(line: 65, column: 20, scope: !7)
!75 = !DILocation(line: 67, column: 20, scope: !7)
!76 = !DILocation(line: 69, column: 20, scope: !7)
!77 = !DILocation(line: 71, column: 20, scope: !7)
!78 = !DILocation(line: 80, column: 20, scope: !7)
!79 = !DILocation(line: 104, column: 20, scope: !7)
!80 = !DILocation(line: 81, column: 43, scope: !7)
!81 = !DILocation(line: 81, column: 41, scope: !7)
!82 = !DILocation(line: 81, column: 31, scope: !7)
!83 = !DILocation(line: 81, column: 59, scope: !7)
!84 = !DILocation(line: 82, column: 31, scope: !7)
!85 = !DILocation(line: 82, column: 63, scope: !7)
!86 = !DILocation(line: 84, column: 31, scope: !7)
!87 = !DILocation(line: 84, column: 63, scope: !7)
!88 = !DILocation(line: 86, column: 31, scope: !7)
!89 = !DILocation(line: 86, column: 63, scope: !7)
!90 = !DILocation(line: 89, column: 41, scope: !7)
!91 = !DILocation(line: 89, column: 51, scope: !7)
!92 = !DILocation(line: 89, column: 31, scope: !7)
!93 = !DILocation(line: 89, column: 59, scope: !7)
!94 = !DILocation(line: 90, column: 55, scope: !7)
!95 = !DILocation(line: 90, column: 31, scope: !7)
!96 = !DILocation(line: 90, column: 63, scope: !7)
!97 = !DILocation(line: 92, column: 55, scope: !7)
!98 = !DILocation(line: 92, column: 31, scope: !7)
!99 = !DILocation(line: 92, column: 63, scope: !7)
!100 = !DILocation(line: 94, column: 55, scope: !7)
!101 = !DILocation(line: 94, column: 31, scope: !7)
!102 = !DILocation(line: 94, column: 63, scope: !7)
!103 = !DILocation(line: 98, column: 21, scope: !7)
!104 = !DILocation(line: 99, column: 20, scope: !7)
!105 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !106)
!106 = !DILocation(line: 100, column: 42, scope: !7)
!107 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !106)
!108 = !DILocation(line: 110, column: 15, scope: !31, inlinedAt: !109)
!109 = !DILocation(line: 102, column: 42, scope: !7)
!110 = !DILocation(line: 113, column: 29, scope: !31, inlinedAt: !109)
!111 = !DILocation(line: 103, column: 20, scope: !7)
!112 = !DILocation(line: 117, column: 51, scope: !7)
!113 = !DILocation(line: 117, column: 49, scope: !7)
!114 = !DILocation(line: 150, column: 55, scope: !7)
!115 = !DILocation(line: 150, column: 52, scope: !7)
!116 = !DILocation(line: 108, column: 20, scope: !7)
!117 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !118)
!118 = !DILocation(line: 109, column: 42, scope: !7)
!119 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !118)
!120 = !DILocation(line: 110, column: 21, scope: !7)
!121 = !DILocation(line: 113, column: 29, scope: !31, inlinedAt: !122)
!122 = !DILocation(line: 113, column: 42, scope: !7)
!123 = !DILocation(line: 117, column: 41, scope: !7)
!124 = !DILocation(line: 114, column: 20, scope: !7)
!125 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !126)
!126 = !DILocation(line: 115, column: 42, scope: !7)
!127 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !126)
!128 = !DILocation(line: 116, column: 21, scope: !7)
!129 = !DILocation(line: 128, column: 39, scope: !7)
!130 = !DILocation(line: 117, column: 39, scope: !7)
!131 = !DILocation(line: 117, column: 31, scope: !7)
!132 = !DILocation(line: 117, column: 56, scope: !7)
!133 = !DILocation(line: 113, column: 29, scope: !31, inlinedAt: !134)
!134 = !DILocation(line: 119, column: 42, scope: !7)
!135 = !DILocation(line: 120, column: 31, scope: !7)
!136 = !DILocation(line: 120, column: 56, scope: !7)
!137 = !DILocation(line: 128, column: 41, scope: !7)
!138 = !DILocation(line: 128, column: 49, scope: !7)
!139 = !DILocation(line: 128, column: 31, scope: !7)
!140 = !DILocation(line: 128, column: 56, scope: !7)
!141 = !DILocation(line: 129, column: 39, scope: !7)
!142 = !DILocation(line: 129, column: 31, scope: !7)
!143 = !DILocation(line: 129, column: 56, scope: !7)
!144 = !DILocation(line: 113, column: 29, scope: !31, inlinedAt: !145)
!145 = !DILocation(line: 146, column: 44, scope: !7)
!146 = !DILocation(line: 150, column: 43, scope: !7)
!147 = !DILocation(line: 161, column: 41, scope: !7)
!148 = !DILocation(line: 150, column: 41, scope: !7)
!149 = !DILocation(line: 150, column: 32, scope: !7)
!150 = !DILocation(line: 150, column: 60, scope: !7)
!151 = !DILocation(line: 113, column: 29, scope: !31, inlinedAt: !152)
!152 = !DILocation(line: 152, column: 44, scope: !7)
!153 = !DILocation(line: 153, column: 32, scope: !7)
!154 = !DILocation(line: 153, column: 60, scope: !7)
!155 = !DILocation(line: 121, column: 20, scope: !7)
!156 = !DILocation(line: 122, column: 21, scope: !7)
!157 = !DILocation(line: 123, column: 20, scope: !7)
!158 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !159)
!159 = !DILocation(line: 124, column: 42, scope: !7)
!160 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !159)
!161 = !DILocation(line: 110, column: 15, scope: !31, inlinedAt: !162)
!162 = !DILocation(line: 125, column: 42, scope: !7)
!163 = !DILocation(line: 113, column: 29, scope: !31, inlinedAt: !162)
!164 = !DILocation(line: 126, column: 20, scope: !7)
!165 = !DILocation(line: 127, column: 20, scope: !7)
!166 = !DILocation(line: 161, column: 43, scope: !7)
!167 = !DILocation(line: 161, column: 52, scope: !7)
!168 = !DILocation(line: 161, column: 32, scope: !7)
!169 = !DILocation(line: 161, column: 60, scope: !7)
!170 = !DILocation(line: 162, column: 41, scope: !7)
!171 = !DILocation(line: 162, column: 32, scope: !7)
!172 = !DILocation(line: 162, column: 60, scope: !7)
!173 = !DILocation(line: 130, column: 20, scope: !7)
!174 = !DILocation(line: 131, column: 20, scope: !7)
!175 = !DILocation(line: 132, column: 21, scope: !7)
!176 = !DILocation(line: 133, column: 21, scope: !7)
!177 = !DILocation(line: 134, column: 22, scope: !7)
!178 = !DILocation(line: 135, column: 21, scope: !7)
!179 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !180)
!180 = !DILocation(line: 136, column: 44, scope: !7)
!181 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !180)
!182 = !DILocation(line: 110, column: 15, scope: !31, inlinedAt: !183)
!183 = !DILocation(line: 137, column: 44, scope: !7)
!184 = !DILocation(line: 113, column: 29, scope: !31, inlinedAt: !183)
!185 = !DILocation(line: 138, column: 22, scope: !7)
!186 = !DILocation(line: 139, column: 22, scope: !7)
!187 = !DILocation(line: 174, column: 22, scope: !7)
!188 = !DILocation(line: 175, column: 21, scope: !7)
!189 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !190)
!190 = !DILocation(line: 176, column: 44, scope: !7)
!191 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !190)
!192 = !DILocation(line: 110, column: 15, scope: !31, inlinedAt: !193)
!193 = !DILocation(line: 177, column: 44, scope: !7)
!194 = !DILocation(line: 113, column: 29, scope: !31, inlinedAt: !193)
!195 = !DILocation(line: 83, column: 20, scope: !7)
!196 = !DILocation(line: 85, column: 20, scope: !7)
!197 = !DILocation(line: 87, column: 20, scope: !7)
!198 = !DILocation(line: 88, column: 20, scope: !7)
!199 = !DILocation(line: 41, column: 18, scope: !7)
!200 = !DILocation(line: 97, column: 20, scope: !7)
!201 = !DILocation(line: 105, column: 20, scope: !7)
!202 = !DILocation(line: 42, column: 19, scope: !7)
!203 = !DILocation(line: 43, column: 20, scope: !7)
!204 = !DILocation(line: 44, column: 20, scope: !7)
!205 = !DILocation(line: 45, column: 20, scope: !7)
!206 = !DILocation(line: 46, column: 19, scope: !7)
!207 = !DILocation(line: 180, column: 21, scope: !7)
!208 = !DILocation(line: 181, column: 22, scope: !7)
!209 = !DILocation(line: 182, column: 22, scope: !7)
!210 = !DILocation(line: 183, column: 28, scope: !7)
!211 = !DILocation(line: 183, column: 49, scope: !7)
!212 = !DILocation(line: 183, column: 4, scope: !7)
