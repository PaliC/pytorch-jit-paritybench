; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = and i32 %8, 127, !dbg !12
  %12 = or disjoint i32 %11, 128, !dbg !12
  %13 = or disjoint i32 %11, 256, !dbg !12
  %14 = or disjoint i32 %11, 384, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %15, 512, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %12, !dbg !13
  %19 = or disjoint i32 %7, %13, !dbg !13
  %20 = or disjoint i32 %7, %14, !dbg !13
  %21 = or disjoint i32 %17, 512, !dbg !13
  %22 = or disjoint i32 %17, 640, !dbg !13
  %23 = or disjoint i32 %17, 768, !dbg !13
  %24 = or disjoint i32 %17, 896, !dbg !13
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %26 = icmp slt i32 %25, 64, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %27 = sdiv i32 %.frozen, 512, !dbg !16
  %28 = mul i32 %27, 512, !dbg !17
  %.decomposed = sub i32 %.frozen, %28, !dbg !17
  %29 = sdiv i32 %16, 512, !dbg !16
  %30 = sdiv i32 %17, 512, !dbg !16
  %31 = sdiv i32 %18, 512, !dbg !16
  %32 = sdiv i32 %19, 512, !dbg !16
  %33 = sdiv i32 %20, 512, !dbg !16
  %34 = sdiv i32 %21, 512, !dbg !16
  %35 = sdiv i32 %22, 512, !dbg !16
  %36 = sdiv i32 %23, 512, !dbg !16
  %37 = sdiv i32 %24, 512, !dbg !16
  %38 = shl i32 %25, 9, !dbg !18
  %39 = add i32 %.decomposed, %38, !dbg !19
  %40 = shl i32 %27, 15, !dbg !20
  %41 = shl i32 %29, 15, !dbg !20
  %42 = add i32 %39, %40, !dbg !21
  %43 = add i32 %41, %.decomposed, !dbg !19
  %44 = add i32 %43, %38, !dbg !21
  %45 = sext i32 %42 to i64, !dbg !22
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !22
  %47 = sext i32 %44 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !22
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %26) #4, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !23
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %26) #4, !dbg !23
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !23
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !23
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !23
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !23
  %.idx = shl nuw nsw i32 %10, 3, !dbg !23
  %59 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !23
  %60 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #4, !dbg !23
  %61 = shl nuw nsw i32 %10, 1, !dbg !23
  %62 = or disjoint i32 %61, 2, !dbg !23
  %63 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %62, !dbg !23
  %64 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #4, !dbg !23
  %65 = or disjoint i32 %61, 4, !dbg !23
  %66 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %65, !dbg !23
  %67 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #4, !dbg !23
  %68 = or disjoint i32 %61, 6, !dbg !23
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %68, !dbg !23
  %70 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #4, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %.idx1 = shl nuw nsw i32 %11, 3, !dbg !23
  %71 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !23
  %72 = load float, ptr addrspace(3) %71, align 8, !dbg !23
  %.idx2 = shl nuw nsw i32 %12, 3, !dbg !23
  %73 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !23
  %74 = load float, ptr addrspace(3) %73, align 8, !dbg !23
  %.idx3 = shl nuw nsw i32 %13, 3, !dbg !23
  %75 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !23
  %76 = load float, ptr addrspace(3) %75, align 8, !dbg !23
  %.idx4 = shl nuw nsw i32 %14, 3, !dbg !23
  %77 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !23
  %78 = load float, ptr addrspace(3) %77, align 8, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %79 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %79, i1 true) #4, !dbg !23
  %80 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %80, i1 true) #4, !dbg !23
  %81 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %81, i1 true) #4, !dbg !23
  %82 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %82, i1 true) #4, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %83 = load float, ptr addrspace(3) %71, align 8, !dbg !23
  %84 = load float, ptr addrspace(3) %73, align 8, !dbg !23
  %85 = load float, ptr addrspace(3) %75, align 8, !dbg !23
  %86 = load float, ptr addrspace(3) %77, align 8, !dbg !23
  %87 = shl nsw i32 %30, 6, !dbg !24
  %88 = shl nsw i32 %31, 6, !dbg !24
  %89 = shl nsw i32 %32, 6, !dbg !24
  %90 = shl nsw i32 %33, 6, !dbg !24
  %91 = shl nsw i32 %34, 6, !dbg !24
  %92 = shl nsw i32 %35, 6, !dbg !24
  %93 = shl nsw i32 %36, 6, !dbg !24
  %94 = shl nsw i32 %37, 6, !dbg !24
  %95 = add i32 %87, %25, !dbg !25
  %96 = add i32 %88, %25, !dbg !25
  %97 = add i32 %89, %25, !dbg !25
  %98 = add i32 %90, %25, !dbg !25
  %99 = add i32 %25, %91, !dbg !25
  %100 = add i32 %25, %92, !dbg !25
  %101 = add i32 %25, %93, !dbg !25
  %102 = add i32 %25, %94, !dbg !25
  %103 = sext i32 %95 to i64, !dbg !26
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !26
  %105 = sext i32 %96 to i64, !dbg !26
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !26
  %107 = sext i32 %97 to i64, !dbg !26
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !26
  %109 = sext i32 %98 to i64, !dbg !26
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !26
  %111 = sext i32 %99 to i64, !dbg !26
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !26
  %113 = sext i32 %100 to i64, !dbg !26
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !26
  %115 = sext i32 %101 to i64, !dbg !26
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !26
  %117 = sext i32 %102 to i64, !dbg !26
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !26
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %26) #4, !dbg !27
  %120 = bitcast i32 %119 to float, !dbg !27
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %26) #4, !dbg !27
  %122 = bitcast i32 %121 to float, !dbg !27
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %26) #4, !dbg !27
  %124 = bitcast i32 %123 to float, !dbg !27
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %26) #4, !dbg !27
  %126 = bitcast i32 %125 to float, !dbg !27
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %26) #4, !dbg !27
  %128 = bitcast i32 %127 to float, !dbg !27
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %26) #4, !dbg !27
  %130 = bitcast i32 %129 to float, !dbg !27
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %26) #4, !dbg !27
  %132 = bitcast i32 %131 to float, !dbg !27
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %26) #4, !dbg !27
  %134 = bitcast i32 %133 to float, !dbg !27
  %135 = fadd float %120, 0x3E112E0BE0000000, !dbg !28
  %136 = fadd float %122, 0x3E112E0BE0000000, !dbg !28
  %137 = fadd float %124, 0x3E112E0BE0000000, !dbg !28
  %138 = fadd float %126, 0x3E112E0BE0000000, !dbg !28
  %139 = fadd float %128, 0x3E112E0BE0000000, !dbg !28
  %140 = fadd float %130, 0x3E112E0BE0000000, !dbg !28
  %141 = fadd float %132, 0x3E112E0BE0000000, !dbg !28
  %142 = fadd float %134, 0x3E112E0BE0000000, !dbg !28
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i = icmp eq i32 %143, 0, !dbg !29
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i = icmp eq i32 %144, 0, !dbg !29
  br i1 %.not.i, label %150, label %145, !dbg !29

145:                                              ; preds = %5
  br i1 %.not1.i, label %148, label %146, !dbg !29

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

150:                                              ; preds = %5
  br i1 %.not1.i, label %153, label %151, !dbg !29

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %146, %148, %151, %153
  %.0.i = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !29
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i5 = icmp eq i32 %155, 0, !dbg !29
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i8 = icmp eq i32 %156, 0, !dbg !29
  br i1 %.not.i5, label %162, label %157, !dbg !29

157:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %160, label %158, !dbg !29

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %136) #4, !dbg !29
  br label %__nv_sqrtf.exit9, !dbg !29

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %136) #4, !dbg !29
  br label %__nv_sqrtf.exit9, !dbg !29

162:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %165, label %163, !dbg !29

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %136) #4, !dbg !29
  br label %__nv_sqrtf.exit9, !dbg !29

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %136) #4, !dbg !29
  br label %__nv_sqrtf.exit9, !dbg !29

__nv_sqrtf.exit9:                                 ; preds = %158, %160, %163, %165
  %.0.i7 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !29
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i10 = icmp eq i32 %167, 0, !dbg !29
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i13 = icmp eq i32 %168, 0, !dbg !29
  br i1 %.not.i10, label %174, label %169, !dbg !29

169:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %172, label %170, !dbg !29

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #4, !dbg !29
  br label %__nv_sqrtf.exit14, !dbg !29

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #4, !dbg !29
  br label %__nv_sqrtf.exit14, !dbg !29

174:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %177, label %175, !dbg !29

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #4, !dbg !29
  br label %__nv_sqrtf.exit14, !dbg !29

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #4, !dbg !29
  br label %__nv_sqrtf.exit14, !dbg !29

__nv_sqrtf.exit14:                                ; preds = %170, %172, %175, %177
  %.0.i12 = phi float [ %171, %170 ], [ %173, %172 ], [ %176, %175 ], [ %178, %177 ], !dbg !29
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i15 = icmp eq i32 %179, 0, !dbg !29
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i18 = icmp eq i32 %180, 0, !dbg !29
  br i1 %.not.i15, label %186, label %181, !dbg !29

181:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %184, label %182, !dbg !29

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #4, !dbg !29
  br label %__nv_sqrtf.exit19, !dbg !29

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #4, !dbg !29
  br label %__nv_sqrtf.exit19, !dbg !29

186:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %189, label %187, !dbg !29

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #4, !dbg !29
  br label %__nv_sqrtf.exit19, !dbg !29

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #4, !dbg !29
  br label %__nv_sqrtf.exit19, !dbg !29

__nv_sqrtf.exit19:                                ; preds = %182, %184, %187, %189
  %.0.i17 = phi float [ %183, %182 ], [ %185, %184 ], [ %188, %187 ], [ %190, %189 ], !dbg !29
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i20 = icmp eq i32 %191, 0, !dbg !29
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i23 = icmp eq i32 %192, 0, !dbg !29
  br i1 %.not.i20, label %198, label %193, !dbg !29

193:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %196, label %194, !dbg !29

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #4, !dbg !29
  br label %__nv_sqrtf.exit24, !dbg !29

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #4, !dbg !29
  br label %__nv_sqrtf.exit24, !dbg !29

198:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %201, label %199, !dbg !29

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #4, !dbg !29
  br label %__nv_sqrtf.exit24, !dbg !29

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #4, !dbg !29
  br label %__nv_sqrtf.exit24, !dbg !29

__nv_sqrtf.exit24:                                ; preds = %194, %196, %199, %201
  %.0.i22 = phi float [ %195, %194 ], [ %197, %196 ], [ %200, %199 ], [ %202, %201 ], !dbg !29
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i25 = icmp eq i32 %203, 0, !dbg !29
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i28 = icmp eq i32 %204, 0, !dbg !29
  br i1 %.not.i25, label %210, label %205, !dbg !29

205:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %208, label %206, !dbg !29

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #4, !dbg !29
  br label %__nv_sqrtf.exit29, !dbg !29

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #4, !dbg !29
  br label %__nv_sqrtf.exit29, !dbg !29

210:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %213, label %211, !dbg !29

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #4, !dbg !29
  br label %__nv_sqrtf.exit29, !dbg !29

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #4, !dbg !29
  br label %__nv_sqrtf.exit29, !dbg !29

__nv_sqrtf.exit29:                                ; preds = %206, %208, %211, %213
  %.0.i27 = phi float [ %207, %206 ], [ %209, %208 ], [ %212, %211 ], [ %214, %213 ], !dbg !29
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i30 = icmp eq i32 %215, 0, !dbg !29
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i33 = icmp eq i32 %216, 0, !dbg !29
  br i1 %.not.i30, label %222, label %217, !dbg !29

217:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %220, label %218, !dbg !29

218:                                              ; preds = %217
  %219 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #4, !dbg !29
  br label %__nv_sqrtf.exit34, !dbg !29

220:                                              ; preds = %217
  %221 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #4, !dbg !29
  br label %__nv_sqrtf.exit34, !dbg !29

222:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %225, label %223, !dbg !29

223:                                              ; preds = %222
  %224 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #4, !dbg !29
  br label %__nv_sqrtf.exit34, !dbg !29

225:                                              ; preds = %222
  %226 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #4, !dbg !29
  br label %__nv_sqrtf.exit34, !dbg !29

__nv_sqrtf.exit34:                                ; preds = %218, %220, %223, %225
  %.0.i32 = phi float [ %219, %218 ], [ %221, %220 ], [ %224, %223 ], [ %226, %225 ], !dbg !29
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i35 = icmp eq i32 %227, 0, !dbg !29
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i38 = icmp eq i32 %228, 0, !dbg !29
  br i1 %.not.i35, label %234, label %229, !dbg !29

229:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %232, label %230, !dbg !29

230:                                              ; preds = %229
  %231 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %142) #4, !dbg !29
  br label %__nv_sqrtf.exit39, !dbg !29

232:                                              ; preds = %229
  %233 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %142) #4, !dbg !29
  br label %__nv_sqrtf.exit39, !dbg !29

234:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %237, label %235, !dbg !29

235:                                              ; preds = %234
  %236 = tail call float @llvm.nvvm.sqrt.rn.f(float %142) #4, !dbg !29
  br label %__nv_sqrtf.exit39, !dbg !29

237:                                              ; preds = %234
  %238 = tail call float @llvm.nvvm.sqrt.approx.f(float %142) #4, !dbg !29
  br label %__nv_sqrtf.exit39, !dbg !29

__nv_sqrtf.exit39:                                ; preds = %230, %232, %235, %237
  %.0.i37 = phi float [ %231, %230 ], [ %233, %232 ], [ %236, %235 ], [ %238, %237 ], !dbg !29
  %239 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !30
  %240 = fadd float %.0.i7, 0x3DDB7CDFE0000000, !dbg !30
  %241 = fadd float %.0.i12, 0x3DDB7CDFE0000000, !dbg !30
  %242 = fadd float %.0.i17, 0x3DDB7CDFE0000000, !dbg !30
  %243 = fadd float %.0.i22, 0x3DDB7CDFE0000000, !dbg !30
  %244 = fadd float %.0.i27, 0x3DDB7CDFE0000000, !dbg !30
  %245 = fadd float %.0.i32, 0x3DDB7CDFE0000000, !dbg !30
  %246 = fadd float %.0.i37, 0x3DDB7CDFE0000000, !dbg !30
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float %239) #4, !dbg !31
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %240) #4, !dbg !31
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float %241) #4, !dbg !31
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %78, float %242) #4, !dbg !31
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float %243) #4, !dbg !31
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float %244) #4, !dbg !31
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float %245) #4, !dbg !31
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %246) #4, !dbg !31
  %255 = shl i32 %17, 6, !dbg !32
  %256 = shl i32 %18, 6, !dbg !32
  %257 = shl i32 %19, 6, !dbg !32
  %258 = shl i32 %20, 6, !dbg !32
  %259 = shl i32 %21, 6, !dbg !32
  %260 = shl i32 %22, 6, !dbg !32
  %261 = shl i32 %23, 6, !dbg !32
  %262 = shl i32 %24, 6, !dbg !32
  %263 = add i32 %255, %25, !dbg !33
  %264 = add i32 %256, %25, !dbg !33
  %265 = add i32 %257, %25, !dbg !33
  %266 = add i32 %258, %25, !dbg !33
  %267 = add i32 %25, %259, !dbg !33
  %268 = add i32 %25, %260, !dbg !33
  %269 = add i32 %25, %261, !dbg !33
  %270 = add i32 %25, %262, !dbg !33
  %271 = sext i32 %263 to i64, !dbg !34
  %272 = getelementptr float, ptr addrspace(1) %2, i64 %271, !dbg !34
  %273 = sext i32 %264 to i64, !dbg !34
  %274 = getelementptr float, ptr addrspace(1) %2, i64 %273, !dbg !34
  %275 = sext i32 %265 to i64, !dbg !34
  %276 = getelementptr float, ptr addrspace(1) %2, i64 %275, !dbg !34
  %277 = sext i32 %266 to i64, !dbg !34
  %278 = getelementptr float, ptr addrspace(1) %2, i64 %277, !dbg !34
  %279 = sext i32 %267 to i64, !dbg !34
  %280 = getelementptr float, ptr addrspace(1) %2, i64 %279, !dbg !34
  %281 = sext i32 %268 to i64, !dbg !34
  %282 = getelementptr float, ptr addrspace(1) %2, i64 %281, !dbg !34
  %283 = sext i32 %269 to i64, !dbg !34
  %284 = getelementptr float, ptr addrspace(1) %2, i64 %283, !dbg !34
  %285 = sext i32 %270 to i64, !dbg !34
  %286 = getelementptr float, ptr addrspace(1) %2, i64 %285, !dbg !34
  %287 = bitcast float %247 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %287, ptr addrspace(1) %272, i1 %26) #4, !dbg !35
  %288 = bitcast float %248 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %288, ptr addrspace(1) %274, i1 %26) #4, !dbg !35
  %289 = bitcast float %249 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %289, ptr addrspace(1) %276, i1 %26) #4, !dbg !35
  %290 = bitcast float %250 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %290, ptr addrspace(1) %278, i1 %26) #4, !dbg !35
  %291 = bitcast float %251 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %291, ptr addrspace(1) %280, i1 %26) #4, !dbg !35
  %292 = bitcast float %252 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %292, ptr addrspace(1) %282, i1 %26) #4, !dbg !35
  %293 = bitcast float %253 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %293, ptr addrspace(1) %284, i1 %26) #4, !dbg !35
  %294 = bitcast float %254 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %294, ptr addrspace(1) %286, i1 %26) #4, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci5tacv3jwschojcuc4eggm2blc2gy73ypauyavlex5qthk6tvyk.py", directory: "inductor_cache/i5")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_24", linkageName: "triton_poi_fused_add_div_sqrt_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 50, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 55, scope: !7)
!24 = !DILocation(line: 33, column: 38, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 43, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 26, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 33, scope: !7)
!33 = !DILocation(line: 40, column: 30, scope: !7)
!34 = !DILocation(line: 40, column: 25, scope: !7)
!35 = !DILocation(line: 40, column: 44, scope: !7)
!36 = !DILocation(line: 40, column: 4, scope: !7)
