; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_group_norm_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 2048, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 511, !dbg !12
  %11 = or disjoint i32 %10, 512, !dbg !12
  %12 = or disjoint i32 %10, 1024, !dbg !12
  %13 = or disjoint i32 %10, 1536, !dbg !12
  %14 = shl i32 %9, 2, !dbg !12
  %15 = and i32 %14, 2044, !dbg !12
  %16 = srem i32 %7, 8, !dbg !13
  %17 = shl i32 %7, 14, !dbg !14
  %18 = shl nsw i32 %16, 6, !dbg !15
  %19 = or disjoint i32 %17, %15
  %20 = shl nuw nsw i32 %15, 1
  %21 = zext nneg i32 %20 to i64
  %22 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %21
  %23 = or disjoint i32 %20, 2
  %24 = zext nneg i32 %23 to i64
  %25 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %24
  %26 = or disjoint i32 %20, 4
  %27 = zext nneg i32 %26 to i64
  %28 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %27
  %29 = or disjoint i32 %20, 6
  %30 = zext nneg i32 %29 to i64
  %31 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %30
  %32 = shl nuw nsw i32 %10, 1
  %33 = zext nneg i32 %32 to i64
  %34 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %33
  %35 = shl nuw nsw i32 %11, 1
  %36 = zext nneg i32 %35 to i64
  %37 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %36
  %38 = shl nuw nsw i32 %12, 1
  %39 = zext nneg i32 %38 to i64
  %40 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %39
  %41 = shl nuw nsw i32 %13, 1
  %42 = zext nneg i32 %41 to i64
  %43 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %42
  %44 = zext nneg i32 %10 to i64
  %45 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %44
  %46 = zext nneg i32 %11 to i64
  %47 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %46
  %48 = zext nneg i32 %12 to i64
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %48
  %50 = zext nneg i32 %13 to i64
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %50
  %52 = zext nneg i32 %15 to i64
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %52
  %54 = sext i32 %19 to i64, !dbg !16
  %55 = zext nneg i32 %13 to i64, !dbg !16
  %56 = sext i32 %18 to i64, !dbg !16
  %57 = zext nneg i32 %12 to i64, !dbg !16
  %58 = zext nneg i32 %11 to i64, !dbg !16
  %59 = zext nneg i32 %10 to i64, !dbg !16
  %invariant.gep = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !16
  %60 = getelementptr inbounds i8, ptr addrspace(3) %53, i64 4
  %61 = getelementptr inbounds i8, ptr addrspace(3) %53, i64 8
  %62 = getelementptr inbounds i8, ptr addrspace(3) %53, i64 12
  br label %63, !dbg !16

63:                                               ; preds = %6, %._crit_edge
  %indvars.iv = phi i64 [ 0, %6 ], [ %indvars.iv.next, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %6 ], [ %163, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %6 ], [ %164, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %6 ], [ %165, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %6 ], [ %166, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %6 ], [ %159, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %6 ], [ %160, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %6 ], [ %161, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %6 ], [ %162, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %6 ], [ %155, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %6 ], [ %156, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %6 ], [ %157, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %6 ], [ %158, %._crit_edge ]
  %76 = or disjoint i64 %indvars.iv, %59, !dbg !17
  %77 = or disjoint i64 %indvars.iv, %58, !dbg !17
  %78 = or disjoint i64 %indvars.iv, %57, !dbg !17
  %79 = or disjoint i64 %indvars.iv, %55, !dbg !17
  %80 = lshr i64 %76, 8, !dbg !18
  %81 = lshr i64 %77, 8, !dbg !18
  %82 = lshr i64 %78, 8, !dbg !18
  %83 = lshr i64 %79, 8, !dbg !18
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !19
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !20
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !20
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !20
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !20
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %89 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %22, <1 x i32> %89, i1 true) #5, !dbg !20
  %90 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %25, <1 x i32> %90, i1 true) #5, !dbg !20
  %91 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %28, <1 x i32> %91, i1 true) #5, !dbg !20
  %92 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %31, <1 x i32> %92, i1 true) #5, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %93 = load float, ptr addrspace(3) %34, align 8, !dbg !20
  %94 = load float, ptr addrspace(3) %37, align 8, !dbg !20
  %95 = load float, ptr addrspace(3) %40, align 8, !dbg !20
  %96 = load float, ptr addrspace(3) %43, align 8, !dbg !20
  %97 = or disjoint i64 %80, %56, !dbg !21
  %98 = or disjoint i64 %81, %56, !dbg !21
  %99 = or disjoint i64 %82, %56, !dbg !21
  %100 = or disjoint i64 %83, %56, !dbg !21
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !22
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !22
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !22
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !22
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %8, i32 0, i1 %8) #5, !dbg !23
  %106 = bitcast i32 %105 to float, !dbg !23
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %8, i32 0, i1 %8) #5, !dbg !23
  %108 = bitcast i32 %107 to float, !dbg !23
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %8, i32 0, i1 %8) #5, !dbg !23
  %110 = bitcast i32 %109 to float, !dbg !23
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %8, i32 0, i1 %8) #5, !dbg !23
  %112 = bitcast i32 %111 to float, !dbg !23
  %113 = fadd float %93, %106, !dbg !24
  %114 = fadd float %94, %108, !dbg !24
  %115 = fadd float %95, %110, !dbg !24
  %116 = fadd float %96, %112, !dbg !24
  %117 = icmp eq i64 %indvars.iv, 0, !dbg !25
  br i1 %117, label %._crit_edge, label %118, !dbg !26

118:                                              ; preds = %63
  %119 = fsub float %113, %72, !dbg !30
  %120 = fsub float %114, %73, !dbg !30
  %121 = fsub float %115, %74, !dbg !30
  %122 = fsub float %116, %75, !dbg !30
  %123 = fadd float %64, 1.000000e+00, !dbg !31
  %124 = fadd float %65, 1.000000e+00, !dbg !31
  %125 = fadd float %66, 1.000000e+00, !dbg !31
  %126 = fadd float %67, 1.000000e+00, !dbg !31
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %123) #5, !dbg !32
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %124) #5, !dbg !32
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %125) #5, !dbg !32
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %126) #5, !dbg !32
  %131 = fadd float %72, %127, !dbg !33
  %132 = fadd float %73, %128, !dbg !33
  %133 = fadd float %74, %129, !dbg !33
  %134 = fadd float %75, %130, !dbg !33
  %135 = fsub float %113, %131, !dbg !34
  %136 = fsub float %114, %132, !dbg !34
  %137 = fsub float %115, %133, !dbg !34
  %138 = fsub float %116, %134, !dbg !34
  %139 = fmul float %119, %135, !dbg !35
  %140 = fmul float %120, %136, !dbg !35
  %141 = fmul float %121, %137, !dbg !35
  %142 = fmul float %122, %138, !dbg !35
  %143 = fadd float %68, %139, !dbg !36
  %144 = fadd float %69, %140, !dbg !36
  %145 = fadd float %70, %141, !dbg !36
  %146 = fadd float %71, %142, !dbg !36
  br label %._crit_edge, !dbg !26

._crit_edge:                                      ; preds = %63, %118
  %147 = phi float [ %143, %118 ], [ 0.000000e+00, %63 ], !dbg !29
  %148 = phi float [ %144, %118 ], [ 0.000000e+00, %63 ], !dbg !29
  %149 = phi float [ %145, %118 ], [ 0.000000e+00, %63 ], !dbg !29
  %150 = phi float [ %146, %118 ], [ 0.000000e+00, %63 ], !dbg !29
  %.pn7 = phi float [ %131, %118 ], [ %113, %63 ]
  %.pn5 = phi float [ %132, %118 ], [ %114, %63 ]
  %.pn3 = phi float [ %133, %118 ], [ %115, %63 ]
  %.pn1 = phi float [ %134, %118 ], [ %116, %63 ]
  %151 = phi float [ %123, %118 ], [ 1.000000e+00, %63 ], !dbg !29
  %152 = phi float [ %124, %118 ], [ 1.000000e+00, %63 ], !dbg !29
  %153 = phi float [ %125, %118 ], [ 1.000000e+00, %63 ], !dbg !29
  %154 = phi float [ %126, %118 ], [ 1.000000e+00, %63 ], !dbg !29
  %155 = select i1 %8, float %.pn7, float %72, !dbg !37
  %156 = select i1 %8, float %.pn5, float %73, !dbg !37
  %157 = select i1 %8, float %.pn3, float %74, !dbg !37
  %158 = select i1 %8, float %.pn1, float %75, !dbg !37
  %159 = select i1 %8, float %147, float %68, !dbg !38
  %160 = select i1 %8, float %148, float %69, !dbg !38
  %161 = select i1 %8, float %149, float %70, !dbg !38
  %162 = select i1 %8, float %150, float %71, !dbg !38
  %163 = select i1 %8, float %151, float %64, !dbg !39
  %164 = select i1 %8, float %152, float %65, !dbg !39
  %165 = select i1 %8, float %153, float %66, !dbg !39
  %166 = select i1 %8, float %154, float %67, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %167 = bitcast float %113 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %167, i1 true) #5, !dbg !40
  %168 = bitcast float %114 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %168, i1 true) #5, !dbg !40
  %169 = bitcast float %115 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %169, i1 true) #5, !dbg !40
  %170 = bitcast float %116 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %170, i1 true) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %.extract = load i32, ptr addrspace(3) %53, align 16, !dbg !40
  %.extract11 = load i32, ptr addrspace(3) %60, align 4, !dbg !40
  %.extract12 = load i32, ptr addrspace(3) %61, align 8, !dbg !40
  %.extract13 = load i32, ptr addrspace(3) %62, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %gep, i1 %8) #5, !dbg !40
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !16
  %171 = icmp samesign ult i64 %indvars.iv, 14336, !dbg !16
  br i1 %171, label %63, label %172, !dbg !16

172:                                              ; preds = %._crit_edge
  %173 = lshr i32 %9, 5, !dbg !12
  %174 = and i32 %9, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %175 = fsub float %156, %155, !dbg !43
  %176 = fadd float %163, %164, !dbg !45
  %177 = fcmp oeq float %176, 0.000000e+00, !dbg !46
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float %176) #5, !dbg !47
  %179 = select i1 %177, float 0.000000e+00, float %178, !dbg !48
  %180 = fmul float %175, %179, !dbg !49
  %181 = fadd float %155, %180, !dbg !50
  %182 = fadd float %159, %160, !dbg !51
  %183 = fmul float %175, %175, !dbg !52
  %184 = fmul float %183, %163, !dbg !53
  %185 = fmul float %184, %179, !dbg !54
  %186 = fadd float %182, %185, !dbg !55
  %187 = fsub float %157, %181, !dbg !43
  %188 = fadd float %165, %176, !dbg !45
  %189 = fcmp oeq float %188, 0.000000e+00, !dbg !46
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float %188) #5, !dbg !47
  %191 = select i1 %189, float 0.000000e+00, float %190, !dbg !48
  %192 = fmul float %191, %187, !dbg !49
  %193 = fadd float %181, %192, !dbg !50
  %194 = fadd float %161, %186, !dbg !51
  %195 = fmul float %187, %187, !dbg !52
  %196 = fmul float %176, %195, !dbg !53
  %197 = fmul float %191, %196, !dbg !54
  %198 = fadd float %194, %197, !dbg !55
  %199 = fsub float %158, %193, !dbg !43
  %200 = fadd float %166, %188, !dbg !45
  %201 = fcmp oeq float %200, 0.000000e+00, !dbg !46
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float %200) #5, !dbg !47
  %203 = select i1 %201, float 0.000000e+00, float %202, !dbg !48
  %204 = fmul float %203, %199, !dbg !49
  %205 = fadd float %193, %204, !dbg !50
  %206 = fadd float %162, %198, !dbg !51
  %207 = fmul float %199, %199, !dbg !52
  %208 = fmul float %188, %207, !dbg !53
  %209 = fmul float %203, %208, !dbg !54
  %210 = fadd float %206, %209, !dbg !55
  %211 = bitcast float %205 to i32, !dbg !41
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 16, i32 31), !dbg !41
  %213 = bitcast i32 %212 to float, !dbg !41
  %214 = bitcast float %210 to i32, !dbg !41
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 16, i32 31), !dbg !41
  %216 = bitcast i32 %215 to float, !dbg !41
  %217 = bitcast float %200 to i32, !dbg !41
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 16, i32 31), !dbg !41
  %219 = bitcast i32 %218 to float, !dbg !41
  %220 = fsub float %213, %205, !dbg !43
  %221 = fadd float %200, %219, !dbg !45
  %222 = fcmp oeq float %221, 0.000000e+00, !dbg !46
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %219, float %221) #5, !dbg !47
  %224 = select i1 %222, float 0.000000e+00, float %223, !dbg !48
  %225 = fmul float %224, %220, !dbg !49
  %226 = fadd float %205, %225, !dbg !50
  %227 = fadd float %210, %216, !dbg !51
  %228 = fmul float %220, %220, !dbg !52
  %229 = fmul float %200, %228, !dbg !53
  %230 = fmul float %224, %229, !dbg !54
  %231 = fadd float %227, %230, !dbg !55
  %232 = bitcast float %226 to i32, !dbg !41
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 8, i32 31), !dbg !41
  %234 = bitcast i32 %233 to float, !dbg !41
  %235 = bitcast float %231 to i32, !dbg !41
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 8, i32 31), !dbg !41
  %237 = bitcast i32 %236 to float, !dbg !41
  %238 = bitcast float %221 to i32, !dbg !41
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 8, i32 31), !dbg !41
  %240 = bitcast i32 %239 to float, !dbg !41
  %241 = fsub float %234, %226, !dbg !43
  %242 = fadd float %221, %240, !dbg !45
  %243 = fcmp oeq float %242, 0.000000e+00, !dbg !46
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %240, float %242) #5, !dbg !47
  %245 = select i1 %243, float 0.000000e+00, float %244, !dbg !48
  %246 = fmul float %241, %245, !dbg !49
  %247 = fadd float %226, %246, !dbg !50
  %248 = fadd float %231, %237, !dbg !51
  %249 = fmul float %241, %241, !dbg !52
  %250 = fmul float %221, %249, !dbg !53
  %251 = fmul float %245, %250, !dbg !54
  %252 = fadd float %248, %251, !dbg !55
  %253 = bitcast float %247 to i32, !dbg !41
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 4, i32 31), !dbg !41
  %255 = bitcast i32 %254 to float, !dbg !41
  %256 = bitcast float %252 to i32, !dbg !41
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 4, i32 31), !dbg !41
  %258 = bitcast i32 %257 to float, !dbg !41
  %259 = bitcast float %242 to i32, !dbg !41
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 4, i32 31), !dbg !41
  %261 = bitcast i32 %260 to float, !dbg !41
  %262 = fsub float %255, %247, !dbg !43
  %263 = fadd float %242, %261, !dbg !45
  %264 = fcmp oeq float %263, 0.000000e+00, !dbg !46
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %261, float %263) #5, !dbg !47
  %266 = select i1 %264, float 0.000000e+00, float %265, !dbg !48
  %267 = fmul float %262, %266, !dbg !49
  %268 = fadd float %247, %267, !dbg !50
  %269 = fadd float %252, %258, !dbg !51
  %270 = fmul float %262, %262, !dbg !52
  %271 = fmul float %242, %270, !dbg !53
  %272 = fmul float %266, %271, !dbg !54
  %273 = fadd float %269, %272, !dbg !55
  %274 = bitcast float %268 to i32, !dbg !41
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 2, i32 31), !dbg !41
  %276 = bitcast i32 %275 to float, !dbg !41
  %277 = bitcast float %273 to i32, !dbg !41
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 2, i32 31), !dbg !41
  %279 = bitcast i32 %278 to float, !dbg !41
  %280 = bitcast float %263 to i32, !dbg !41
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 2, i32 31), !dbg !41
  %282 = bitcast i32 %281 to float, !dbg !41
  %283 = fsub float %276, %268, !dbg !43
  %284 = fadd float %263, %282, !dbg !45
  %285 = fcmp oeq float %284, 0.000000e+00, !dbg !46
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %282, float %284) #5, !dbg !47
  %287 = select i1 %285, float 0.000000e+00, float %286, !dbg !48
  %288 = fmul float %283, %287, !dbg !49
  %289 = fadd float %268, %288, !dbg !50
  %290 = fadd float %273, %279, !dbg !51
  %291 = fmul float %283, %283, !dbg !52
  %292 = fmul float %263, %291, !dbg !53
  %293 = fmul float %287, %292, !dbg !54
  %294 = fadd float %290, %293, !dbg !55
  %295 = bitcast float %289 to i32, !dbg !41
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 1, i32 31), !dbg !41
  %297 = bitcast i32 %296 to float, !dbg !41
  %298 = bitcast float %294 to i32, !dbg !41
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 1, i32 31), !dbg !41
  %300 = bitcast i32 %299 to float, !dbg !41
  %301 = bitcast float %284 to i32, !dbg !41
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 1, i32 31), !dbg !41
  %303 = bitcast i32 %302 to float, !dbg !41
  %304 = fsub float %297, %289, !dbg !43
  %305 = fadd float %284, %303, !dbg !45
  %306 = fcmp oeq float %305, 0.000000e+00, !dbg !46
  %307 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %303, float %305) #5, !dbg !47
  %308 = select i1 %306, float 0.000000e+00, float %307, !dbg !48
  %309 = fmul float %304, %308, !dbg !49
  %310 = fadd float %289, %309, !dbg !50
  %311 = fadd float %294, %300, !dbg !51
  %312 = fmul float %304, %304, !dbg !52
  %313 = fmul float %284, %312, !dbg !53
  %314 = fmul float %308, %313, !dbg !54
  %315 = fadd float %311, %314, !dbg !55
  %316 = icmp eq i32 %174, 0, !dbg !41
  %317 = and i32 %173, 15, !dbg !41
  %318 = zext nneg i32 %317 to i64, !dbg !41
  %319 = getelementptr float, ptr addrspace(3) @global_smem, i64 %318, !dbg !41
  %320 = bitcast float %310 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %319, <1 x i32> %320, i1 %316) #5, !dbg !41
  %321 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %318, !dbg !41
  %322 = bitcast float %315 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %322, i1 %316) #5, !dbg !41
  %323 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %318, !dbg !41
  %324 = bitcast float %305 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, <1 x i32> %324, i1 %316) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %325 = icmp slt i32 %9, 16, !dbg !41
  %326 = sext i32 %9 to i64, !dbg !41
  %327 = getelementptr float, ptr addrspace(3) @global_smem, i64 %326, !dbg !41
  %328 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %327, i1 %325) #5, !dbg !41
  %329 = bitcast i32 %328 to float, !dbg !41
  %330 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %326, !dbg !41
  %331 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %330, i1 %325) #5, !dbg !41
  %332 = bitcast i32 %331 to float, !dbg !41
  %333 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %326, !dbg !41
  %334 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %333, i1 %325) #5, !dbg !41
  %335 = bitcast i32 %334 to float, !dbg !41
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 8, i32 31), !dbg !41
  %337 = bitcast i32 %336 to float, !dbg !41
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 8, i32 31), !dbg !41
  %339 = bitcast i32 %338 to float, !dbg !41
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 8, i32 31), !dbg !41
  %341 = bitcast i32 %340 to float, !dbg !41
  %342 = fsub float %337, %329, !dbg !43
  %343 = fadd float %335, %341, !dbg !45
  %344 = fcmp oeq float %343, 0.000000e+00, !dbg !46
  %345 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %341, float %343) #5, !dbg !47
  %346 = select i1 %344, float 0.000000e+00, float %345, !dbg !48
  %347 = fmul float %342, %346, !dbg !49
  %348 = fadd float %347, %329, !dbg !50
  %349 = fadd float %332, %339, !dbg !51
  %350 = fmul float %342, %342, !dbg !52
  %351 = fmul float %350, %335, !dbg !53
  %352 = fmul float %351, %346, !dbg !54
  %353 = fadd float %349, %352, !dbg !55
  %354 = bitcast float %348 to i32, !dbg !41
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 4, i32 31), !dbg !41
  %356 = bitcast i32 %355 to float, !dbg !41
  %357 = bitcast float %353 to i32, !dbg !41
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 4, i32 31), !dbg !41
  %359 = bitcast i32 %358 to float, !dbg !41
  %360 = bitcast float %343 to i32, !dbg !41
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 4, i32 31), !dbg !41
  %362 = bitcast i32 %361 to float, !dbg !41
  %363 = fsub float %356, %348, !dbg !43
  %364 = fadd float %343, %362, !dbg !45
  %365 = fcmp oeq float %364, 0.000000e+00, !dbg !46
  %366 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %362, float %364) #5, !dbg !47
  %367 = select i1 %365, float 0.000000e+00, float %366, !dbg !48
  %368 = fmul float %363, %367, !dbg !49
  %369 = fadd float %348, %368, !dbg !50
  %370 = fadd float %353, %359, !dbg !51
  %371 = fmul float %363, %363, !dbg !52
  %372 = fmul float %343, %371, !dbg !53
  %373 = fmul float %367, %372, !dbg !54
  %374 = fadd float %370, %373, !dbg !55
  %375 = bitcast float %369 to i32, !dbg !41
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 2, i32 31), !dbg !41
  %377 = bitcast i32 %376 to float, !dbg !41
  %378 = bitcast float %374 to i32, !dbg !41
  %379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %378, i32 2, i32 31), !dbg !41
  %380 = bitcast i32 %379 to float, !dbg !41
  %381 = bitcast float %364 to i32, !dbg !41
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 2, i32 31), !dbg !41
  %383 = bitcast i32 %382 to float, !dbg !41
  %384 = fsub float %377, %369, !dbg !43
  %385 = fadd float %364, %383, !dbg !45
  %386 = fcmp oeq float %385, 0.000000e+00, !dbg !46
  %387 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %383, float %385) #5, !dbg !47
  %388 = select i1 %386, float 0.000000e+00, float %387, !dbg !48
  %389 = fmul float %384, %388, !dbg !49
  %390 = fadd float %369, %389, !dbg !50
  %391 = fadd float %374, %380, !dbg !51
  %392 = fmul float %384, %384, !dbg !52
  %393 = fmul float %364, %392, !dbg !53
  %394 = fmul float %388, %393, !dbg !54
  %395 = fadd float %391, %394, !dbg !55
  %396 = bitcast float %390 to i32, !dbg !41
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 1, i32 31), !dbg !41
  %398 = bitcast i32 %397 to float, !dbg !41
  %399 = bitcast float %395 to i32, !dbg !41
  %400 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %399, i32 1, i32 31), !dbg !41
  %401 = bitcast i32 %400 to float, !dbg !41
  %402 = bitcast float %385 to i32, !dbg !41
  %403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %402, i32 1, i32 31), !dbg !41
  %404 = bitcast i32 %403 to float, !dbg !41
  %405 = fsub float %398, %390, !dbg !43
  %406 = fadd float %385, %404, !dbg !45
  %407 = fcmp oeq float %406, 0.000000e+00, !dbg !46
  %408 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %404, float %406) #5, !dbg !47
  %409 = select i1 %407, float 0.000000e+00, float %408, !dbg !48
  %410 = fmul float %405, %409, !dbg !49
  %411 = fadd float %390, %410, !dbg !50
  %412 = fadd float %395, %401, !dbg !51
  %413 = fmul float %405, %405, !dbg !52
  %414 = fmul float %385, %413, !dbg !53
  %415 = fmul float %409, %414, !dbg !54
  %416 = fadd float %412, %415, !dbg !55
  %417 = and i32 %9, 15, !dbg !41
  %418 = icmp eq i32 %417, 0, !dbg !41
  %419 = and i1 %325, %418, !dbg !41
  %420 = bitcast float %411 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %420, i1 %419) #5, !dbg !41
  %421 = bitcast float %416 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %330, <1 x i32> %421, i1 %419) #5, !dbg !41
  %422 = bitcast float %406 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %422, i1 %419) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %423 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !41
  %424 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !41
  %425 = sext i32 %7 to i64, !dbg !56
  %426 = getelementptr float, ptr addrspace(1) %3, i64 %425, !dbg !56
  %427 = icmp eq i32 %10, 0, !dbg !57
  %428 = and i1 %427, %8, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %423, ptr addrspace(1) %426, i1 %428) #5, !dbg !57
  %429 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %424, float 1.638400e+04) #5, !dbg !58
  %430 = fadd float %429, 0x3EE4F8B580000000, !dbg !59
  %431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i = icmp eq i32 %431, 0, !dbg !60
  br i1 %.not.i, label %434, label %432, !dbg !60

432:                                              ; preds = %172
  %433 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %430), !dbg !60
  br label %__nv_rsqrtf.exit, !dbg !60

434:                                              ; preds = %172
  %435 = tail call float @llvm.nvvm.rsqrt.approx.f(float %430), !dbg !60
  br label %__nv_rsqrtf.exit, !dbg !60

__nv_rsqrtf.exit:                                 ; preds = %432, %434
  %.0.i = phi float [ %433, %432 ], [ %435, %434 ], !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %436 = getelementptr float, ptr addrspace(1) %1, i64 %425, !dbg !62
  %437 = bitcast float %.0.i to i32, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %437, ptr addrspace(1) %436, i1 %428) #5, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3jfuba5p5byevuhnyud3mtmaespau3kyemw7cfd4ersckdvbfct.py", directory: "inductor_cache/3j")
!4 = !{ptr @triton_red_fused_convolution_native_group_norm_16, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_group_norm_16, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_group_norm_16", linkageName: "triton_red_fused_convolution_native_group_norm_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 36, column: 49, scope: !7)
!15 = !DILocation(line: 37, column: 42, scope: !7)
!16 = !DILocation(line: 31, column: 36, scope: !7)
!17 = !DILocation(line: 32, column: 27, scope: !7)
!18 = !DILocation(line: 35, column: 23, scope: !7)
!19 = !DILocation(line: 36, column: 38, scope: !7)
!20 = !DILocation(line: 36, column: 54, scope: !7)
!21 = !DILocation(line: 37, column: 39, scope: !7)
!22 = !DILocation(line: 37, column: 34, scope: !7)
!23 = !DILocation(line: 37, column: 47, scope: !7)
!24 = !DILocation(line: 38, column: 22, scope: !7)
!25 = !DILocation(line: 41, column: 62, scope: !7)
!26 = !DILocation(line: 178, column: 7, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 41, column: 51, scope: !7)
!30 = !DILocation(line: 183, column: 24, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 184, column: 30, scope: !27, inlinedAt: !29)
!32 = !DILocation(line: 185, column: 34, scope: !27, inlinedAt: !29)
!33 = !DILocation(line: 185, column: 26, scope: !27, inlinedAt: !29)
!34 = !DILocation(line: 186, column: 39, scope: !27, inlinedAt: !29)
!35 = !DILocation(line: 186, column: 31, scope: !27, inlinedAt: !29)
!36 = !DILocation(line: 186, column: 22, scope: !27, inlinedAt: !29)
!37 = !DILocation(line: 43, column: 60, scope: !7)
!38 = !DILocation(line: 44, column: 56, scope: !7)
!39 = !DILocation(line: 45, column: 64, scope: !7)
!40 = !DILocation(line: 46, column: 54, scope: !7)
!41 = !DILocation(line: 204, column: 46, scope: !27, inlinedAt: !42)
!42 = !DILocation(line: 48, column: 41, scope: !7)
!43 = !DILocation(line: 192, column: 21, scope: !44, inlinedAt: !42)
!44 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!45 = !DILocation(line: 193, column: 28, scope: !44, inlinedAt: !42)
!46 = !DILocation(line: 194, column: 39, scope: !44, inlinedAt: !42)
!47 = !DILocation(line: 194, column: 60, scope: !44, inlinedAt: !42)
!48 = !DILocation(line: 194, column: 49, scope: !44, inlinedAt: !42)
!49 = !DILocation(line: 196, column: 25, scope: !44, inlinedAt: !42)
!50 = !DILocation(line: 196, column: 17, scope: !44, inlinedAt: !42)
!51 = !DILocation(line: 197, column: 15, scope: !44, inlinedAt: !42)
!52 = !DILocation(line: 197, column: 30, scope: !44, inlinedAt: !42)
!53 = !DILocation(line: 197, column: 38, scope: !44, inlinedAt: !42)
!54 = !DILocation(line: 197, column: 49, scope: !44, inlinedAt: !42)
!55 = !DILocation(line: 197, column: 22, scope: !44, inlinedAt: !42)
!56 = !DILocation(line: 53, column: 25, scope: !7)
!57 = !DILocation(line: 53, column: 36, scope: !7)
!58 = !DILocation(line: 55, column: 18, scope: !7)
!59 = !DILocation(line: 57, column: 19, scope: !7)
!60 = !DILocation(line: 58, column: 28, scope: !7)
!61 = !DILocation(line: 59, column: 4, scope: !7)
!62 = !DILocation(line: 60, column: 28, scope: !7)
!63 = !DILocation(line: 60, column: 40, scope: !7)
!64 = !DILocation(line: 60, column: 4, scope: !7)
