; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 127, !dbg !12
  %14 = or disjoint i32 %13, 128, !dbg !12
  %15 = or disjoint i32 %13, 256, !dbg !12
  %16 = or disjoint i32 %13, 384, !dbg !12
  %17 = or disjoint i32 %11, %13, !dbg !13
  %18 = or disjoint i32 %11, %14, !dbg !13
  %19 = or disjoint i32 %11, %15, !dbg !13
  %20 = or disjoint i32 %11, %16, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %22 = icmp slt i32 %21, 64, !dbg !15
  %23 = shl i32 %17, 6, !dbg !16
  %24 = shl i32 %18, 6, !dbg !16
  %25 = shl i32 %19, 6, !dbg !16
  %26 = shl i32 %20, 6, !dbg !16
  %27 = add i32 %23, %21, !dbg !17
  %28 = add i32 %24, %21, !dbg !17
  %29 = add i32 %25, %21, !dbg !17
  %30 = add i32 %26, %21, !dbg !17
  %31 = sext i32 %27 to i64, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !18
  %33 = sext i32 %28 to i64, !dbg !18
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !18
  %35 = sext i32 %29 to i64, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !18
  %37 = sext i32 %30 to i64, !dbg !18
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !18
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %22) #4, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %22) #4, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %22) #4, !dbg !19
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %22) #4, !dbg !19
  %43 = sext i32 %21 to i64, !dbg !20
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !20
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %22) #4, !dbg !21
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %22) #4, !dbg !23
  %48 = bitcast i32 %47 to float, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !24
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %22) #4, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !26
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %22) #4, !dbg !27
  %53 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !28
  %55 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !28
  %56 = getelementptr float, ptr addrspace(1) %5, i64 %37, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %22) #4, !dbg !29
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %22) #4, !dbg !29
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %22) #4, !dbg !29
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %22) #4, !dbg !29
  %61 = fadd float %48, 0x3EE4F8B580000000, !dbg !30
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %62, 0, !dbg !31
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i = icmp eq i32 %63, 0, !dbg !31
  br i1 %.not.i, label %69, label %64, !dbg !31

64:                                               ; preds = %9
  br i1 %.not1.i, label %67, label %65, !dbg !31

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

69:                                               ; preds = %9
  br i1 %.not1.i, label %72, label %70, !dbg !31

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !31
  %74 = insertelement <4 x i32> poison, i32 %42, i64 0, !dbg !19
  %75 = insertelement <4 x i32> %74, i32 %41, i64 1, !dbg !19
  %76 = insertelement <4 x i32> %75, i32 %40, i64 2, !dbg !19
  %77 = insertelement <4 x i32> %76, i32 %39, i64 3, !dbg !19
  %78 = bitcast <4 x i32> %77 to <4 x float>, !dbg !19
  %79 = bitcast i32 %60 to float, !dbg !29
  %80 = bitcast i32 %59 to float, !dbg !29
  %81 = bitcast i32 %58 to float, !dbg !29
  %82 = bitcast i32 %57 to float, !dbg !29
  %83 = shl i32 %12, 2, !dbg !12
  %84 = and i32 %83, 508, !dbg !12
  %85 = or disjoint i32 %11, %84, !dbg !13
  %.frozen = freeze i32 %85, !dbg !32
  %86 = sdiv i32 %.frozen, 256, !dbg !32
  %87 = mul i32 %86, 256, !dbg !33
  %.decomposed = sub i32 %.frozen, %87, !dbg !33
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !34
  %89 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !35
  %90 = bitcast <4 x i32> %89 to <4 x float>, !dbg !35
  %91 = shufflevector <4 x float> %90, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !35
  %92 = fsub <4 x float> %78, %91, !dbg !35
  %93 = insertelement <4 x float> poison, float %88, i64 0, !dbg !36
  %94 = shufflevector <4 x float> %93, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !36
  %95 = fmul <4 x float> %92, %94, !dbg !36
  %96 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !37
  %97 = bitcast <4 x i32> %96 to <4 x float>, !dbg !37
  %98 = shufflevector <4 x float> %97, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !37
  %99 = fmul <4 x float> %95, %98, !dbg !37
  %100 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !38
  %101 = bitcast <4 x i32> %100 to <4 x float>, !dbg !38
  %102 = shufflevector <4 x float> %101, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %103 = fadd <4 x float> %99, %102, !dbg !38
  %104 = fcmp olt <4 x float> %103, zeroinitializer, !dbg !39
  %105 = extractelement <4 x i1> %104, i64 3, !dbg !43
  %106 = extractelement <4 x float> %103, i64 3, !dbg !43
  %107 = select i1 %105, float 0.000000e+00, float %106, !dbg !43
  %108 = extractelement <4 x i1> %104, i64 2, !dbg !43
  %109 = extractelement <4 x float> %103, i64 2, !dbg !43
  %110 = select i1 %108, float 0.000000e+00, float %109, !dbg !43
  %111 = extractelement <4 x i1> %104, i64 1, !dbg !43
  %112 = extractelement <4 x float> %103, i64 1, !dbg !43
  %113 = select i1 %111, float 0.000000e+00, float %112, !dbg !43
  %114 = extractelement <4 x i1> %104, i64 0, !dbg !43
  %115 = extractelement <4 x float> %103, i64 0, !dbg !43
  %116 = select i1 %114, float 0.000000e+00, float %115, !dbg !43
  %117 = fadd float %107, %82, !dbg !44
  %118 = fadd float %110, %81, !dbg !44
  %119 = fadd float %113, %80, !dbg !44
  %120 = fadd float %116, %79, !dbg !44
  %121 = shl i32 %21, 8, !dbg !45
  %122 = add i32 %.decomposed, %121, !dbg !46
  %123 = shl i32 %86, 14, !dbg !47
  %124 = add i32 %122, %123, !dbg !48
  %125 = sext i32 %124 to i64, !dbg !49
  %126 = getelementptr float, ptr addrspace(1) %6, i64 %125, !dbg !49
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !50
  %128 = bitcast float %117 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #4, !dbg !50
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !50
  %130 = bitcast float %118 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #4, !dbg !50
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !50
  %132 = bitcast float %119 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #4, !dbg !50
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !50
  %134 = bitcast float %120 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %84, !dbg !50
  %.extract = load i32, ptr addrspace(3) %135, align 16, !dbg !50
  %136 = getelementptr inbounds i8, ptr addrspace(3) %135, i32 4, !dbg !50
  %.extract4 = load i32, ptr addrspace(3) %136, align 4, !dbg !50
  %137 = getelementptr inbounds i8, ptr addrspace(3) %135, i32 8, !dbg !50
  %.extract5 = load i32, ptr addrspace(3) %137, align 8, !dbg !50
  %138 = getelementptr inbounds i8, ptr addrspace(3) %135, i32 12, !dbg !50
  %.extract6 = load i32, ptr addrspace(3) %138, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %126, i1 %22) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clt4fujazd5xqiqu75pqeqru2rbo5qrvsbsytubgfs5tyw47snai.py", directory: "inductor_cache/lt")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_23", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 32, column: 38, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 43, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 31, scope: !7)
!25 = !DILocation(line: 35, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 44, scope: !7)
!30 = !DILocation(line: 40, column: 18, scope: !7)
!31 = !DILocation(line: 41, column: 26, scope: !7)
!32 = !DILocation(line: 31, column: 19, scope: !7)
!33 = !DILocation(line: 30, column: 19, scope: !7)
!34 = !DILocation(line: 43, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 46, column: 19, scope: !7)
!37 = !DILocation(line: 47, column: 20, scope: !7)
!38 = !DILocation(line: 48, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 50, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 34, scope: !7)
!46 = !DILocation(line: 52, column: 30, scope: !7)
!47 = !DILocation(line: 52, column: 45, scope: !7)
!48 = !DILocation(line: 52, column: 39, scope: !7)
!49 = !DILocation(line: 52, column: 25, scope: !7)
!50 = !DILocation(line: 52, column: 57, scope: !7)
!51 = !DILocation(line: 52, column: 4, scope: !7)
