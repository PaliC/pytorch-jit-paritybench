; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_layer_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 2, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 6, !dbg !12
  %.lobit = and i32 %13, 1, !dbg !12
  %14 = or disjoint i32 %11, %.lobit, !dbg !13
  %15 = or disjoint i32 %14, 2, !dbg !13
  %16 = icmp slt i32 %14, 384, !dbg !14
  %17 = icmp slt i32 %15, 384, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %19 = shl i32 %18, 8, !dbg !16
  %20 = shl i32 %12, 2, !dbg !17
  %21 = and i32 %20, 252, !dbg !17
  %22 = or disjoint i32 %19, %21, !dbg !18
  %23 = or disjoint i32 %22, 1, !dbg !18
  %24 = or disjoint i32 %22, 2, !dbg !18
  %25 = or disjoint i32 %22, 3, !dbg !18
  %26 = icmp slt i32 %22, 256, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %27 = sdiv i32 %.frozen, 96, !dbg !20
  %28 = mul i32 %27, 96, !dbg !21
  %.decomposed = sub i32 %.frozen, %28, !dbg !21
  %.frozen43 = freeze i32 %15, !dbg !20
  %29 = sdiv i32 %.frozen43, 96, !dbg !20
  %30 = mul i32 %29, 96, !dbg !21
  %.decomposed44 = sub i32 %.frozen43, %30, !dbg !21
  %.frozen45 = freeze i32 %22, !dbg !22
  %31 = sdiv i32 %.frozen45, 16, !dbg !22
  %32 = mul i32 %31, 16, !dbg !23
  %.decomposed46 = sub i32 %.frozen45, %32, !dbg !23
  %33 = srem i32 %23, 16, !dbg !23
  %34 = srem i32 %24, 16, !dbg !23
  %35 = srem i32 %25, 16, !dbg !23
  %36 = shl i32 %14, 8, !dbg !24
  %37 = shl i32 %15, 8, !dbg !24
  %38 = add i32 %22, %36, !dbg !25
  %39 = add i32 %22, %37, !dbg !25
  %40 = sext i32 %38 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = sext i32 %39 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !26
  %44 = and i1 %16, %26, !dbg !27
  %45 = and i1 %17, %26, !dbg !27
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %44) #4, !dbg !28
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %45) #4, !dbg !28
  %48 = sext i32 %.decomposed to i64, !dbg !29
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !29
  %50 = sext i32 %.decomposed44 to i64, !dbg !29
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !29
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %16) #4, !dbg !30
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %16) #4, !dbg !30
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %16) #4, !dbg !30
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %16) #4, !dbg !30
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %17) #4, !dbg !30
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %17) #4, !dbg !30
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %17) #4, !dbg !30
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %17) #4, !dbg !30
  %60 = shl nsw i32 %.decomposed, 8, !dbg !31
  %61 = shl nsw i32 %.decomposed44, 8, !dbg !31
  %62 = add i32 %60, %22, !dbg !32
  %63 = add i32 %22, %61, !dbg !32
  %64 = sext i32 %62 to i64, !dbg !33
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !33
  %66 = sext i32 %63 to i64, !dbg !33
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !33
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %44) #4, !dbg !34
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %45) #4, !dbg !34
  %70 = srem i32 %31, 8, !dbg !35
  %71 = shl nsw i32 %70, 3, !dbg !36
  %72 = shl nsw i32 %.decomposed, 6, !dbg !37
  %73 = shl nsw i32 %.decomposed44, 6, !dbg !37
  %74 = add nsw i32 %71, %72, !dbg !38
  %75 = add nsw i32 %71, %73, !dbg !38
  %.lhs.trunc = trunc nsw i32 %.decomposed46 to i8, !dbg !39
  %76 = srem i8 %.lhs.trunc, 8, !dbg !39
  %.sext = sext i8 %76 to i32, !dbg !39
  %.lhs.trunc37 = trunc nsw i32 %33 to i8, !dbg !39
  %77 = srem i8 %.lhs.trunc37, 8, !dbg !39
  %.sext38 = sext i8 %77 to i32, !dbg !39
  %.lhs.trunc39 = trunc nsw i32 %34 to i8, !dbg !39
  %78 = srem i8 %.lhs.trunc39, 8, !dbg !39
  %.sext40 = sext i8 %78 to i32, !dbg !39
  %.lhs.trunc41 = trunc nsw i32 %35 to i8, !dbg !39
  %79 = srem i8 %.lhs.trunc41, 8, !dbg !39
  %.sext42 = sext i8 %79 to i32, !dbg !39
  %80 = add nsw i32 %74, %.sext, !dbg !40
  %81 = add nsw i32 %74, %.sext38, !dbg !40
  %82 = add nsw i32 %74, %.sext40, !dbg !40
  %83 = add nsw i32 %74, %.sext42, !dbg !40
  %84 = add nsw i32 %75, %.sext, !dbg !40
  %85 = add nsw i32 %75, %.sext38, !dbg !40
  %86 = add nsw i32 %75, %.sext40, !dbg !40
  %87 = add nsw i32 %75, %.sext42, !dbg !40
  %88 = sext i32 %80 to i64, !dbg !41
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %88, !dbg !41
  %90 = sext i32 %81 to i64, !dbg !41
  %91 = getelementptr float, ptr addrspace(1) %3, i64 %90, !dbg !41
  %92 = sext i32 %82 to i64, !dbg !41
  %93 = getelementptr float, ptr addrspace(1) %3, i64 %92, !dbg !41
  %94 = sext i32 %83 to i64, !dbg !41
  %95 = getelementptr float, ptr addrspace(1) %3, i64 %94, !dbg !41
  %96 = sext i32 %84 to i64, !dbg !41
  %97 = getelementptr float, ptr addrspace(1) %3, i64 %96, !dbg !41
  %98 = sext i32 %85 to i64, !dbg !41
  %99 = getelementptr float, ptr addrspace(1) %3, i64 %98, !dbg !41
  %100 = sext i32 %86 to i64, !dbg !41
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %100, !dbg !41
  %102 = sext i32 %87 to i64, !dbg !41
  %103 = getelementptr float, ptr addrspace(1) %3, i64 %102, !dbg !41
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %44) #4, !dbg !42
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %44) #4, !dbg !42
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %44) #4, !dbg !42
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %44) #4, !dbg !42
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %45) #4, !dbg !42
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %45) #4, !dbg !42
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %45) #4, !dbg !42
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %45) #4, !dbg !42
  %112 = shl i32 %27, 8, !dbg !43
  %113 = shl i32 %29, 8, !dbg !43
  %114 = add i32 %112, %22, !dbg !44
  %115 = add i32 %22, %113, !dbg !44
  %116 = sext i32 %114 to i64, !dbg !45
  %117 = getelementptr float, ptr addrspace(1) %4, i64 %116, !dbg !45
  %118 = sext i32 %115 to i64, !dbg !45
  %119 = getelementptr float, ptr addrspace(1) %4, i64 %118, !dbg !45
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %117, i1 %44) #4, !dbg !46
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 %45) #4, !dbg !46
  %122 = getelementptr float, ptr addrspace(1) %5, i64 %116, !dbg !47
  %123 = getelementptr float, ptr addrspace(1) %5, i64 %118, !dbg !47
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %122, i1 %44) #4, !dbg !48
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !48
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !48
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !48
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !48
  %129 = bitcast i32 %125 to float, !dbg !48
  %130 = bitcast i32 %126 to float, !dbg !48
  %131 = bitcast i32 %127 to float, !dbg !48
  %132 = bitcast i32 %128 to float, !dbg !48
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 %45) #4, !dbg !48
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !48
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !48
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !48
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !48
  %138 = bitcast i32 %134 to float, !dbg !48
  %139 = bitcast i32 %135 to float, !dbg !48
  %140 = bitcast i32 %136 to float, !dbg !48
  %141 = bitcast i32 %137 to float, !dbg !48
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float 9.600000e+01) #4, !dbg !49
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float 9.600000e+01) #4, !dbg !49
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float 9.600000e+01) #4, !dbg !49
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float 9.600000e+01) #4, !dbg !49
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float 9.600000e+01) #4, !dbg !49
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 9.600000e+01) #4, !dbg !49
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 9.600000e+01) #4, !dbg !49
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float 9.600000e+01) #4, !dbg !49
  %150 = fadd float %142, 0x3EB0C6F7A0000000, !dbg !50
  %151 = fadd float %143, 0x3EB0C6F7A0000000, !dbg !50
  %152 = fadd float %144, 0x3EB0C6F7A0000000, !dbg !50
  %153 = fadd float %145, 0x3EB0C6F7A0000000, !dbg !50
  %154 = fadd float %146, 0x3EB0C6F7A0000000, !dbg !50
  %155 = fadd float %147, 0x3EB0C6F7A0000000, !dbg !50
  %156 = fadd float %148, 0x3EB0C6F7A0000000, !dbg !50
  %157 = fadd float %149, 0x3EB0C6F7A0000000, !dbg !50
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i = icmp eq i32 %158, 0, !dbg !51
  br i1 %.not.i, label %161, label %159, !dbg !51

159:                                              ; preds = %9
  %160 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %150), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

161:                                              ; preds = %9
  %162 = tail call float @llvm.nvvm.rsqrt.approx.f(float %150), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

__nv_rsqrtf.exit:                                 ; preds = %159, %161
  %.0.i = phi float [ %160, %159 ], [ %162, %161 ], !dbg !51
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i16 = icmp eq i32 %163, 0, !dbg !51
  br i1 %.not.i16, label %166, label %164, !dbg !51

164:                                              ; preds = %__nv_rsqrtf.exit
  %165 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %151), !dbg !51
  br label %__nv_rsqrtf.exit18, !dbg !51

166:                                              ; preds = %__nv_rsqrtf.exit
  %167 = tail call float @llvm.nvvm.rsqrt.approx.f(float %151), !dbg !51
  br label %__nv_rsqrtf.exit18, !dbg !51

__nv_rsqrtf.exit18:                               ; preds = %164, %166
  %.0.i17 = phi float [ %165, %164 ], [ %167, %166 ], !dbg !51
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i19 = icmp eq i32 %168, 0, !dbg !51
  br i1 %.not.i19, label %171, label %169, !dbg !51

169:                                              ; preds = %__nv_rsqrtf.exit18
  %170 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %152), !dbg !51
  br label %__nv_rsqrtf.exit21, !dbg !51

171:                                              ; preds = %__nv_rsqrtf.exit18
  %172 = tail call float @llvm.nvvm.rsqrt.approx.f(float %152), !dbg !51
  br label %__nv_rsqrtf.exit21, !dbg !51

__nv_rsqrtf.exit21:                               ; preds = %169, %171
  %.0.i20 = phi float [ %170, %169 ], [ %172, %171 ], !dbg !51
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i22 = icmp eq i32 %173, 0, !dbg !51
  br i1 %.not.i22, label %176, label %174, !dbg !51

174:                                              ; preds = %__nv_rsqrtf.exit21
  %175 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %153), !dbg !51
  br label %__nv_rsqrtf.exit24, !dbg !51

176:                                              ; preds = %__nv_rsqrtf.exit21
  %177 = tail call float @llvm.nvvm.rsqrt.approx.f(float %153), !dbg !51
  br label %__nv_rsqrtf.exit24, !dbg !51

__nv_rsqrtf.exit24:                               ; preds = %174, %176
  %.0.i23 = phi float [ %175, %174 ], [ %177, %176 ], !dbg !51
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i25 = icmp eq i32 %178, 0, !dbg !51
  br i1 %.not.i25, label %181, label %179, !dbg !51

179:                                              ; preds = %__nv_rsqrtf.exit24
  %180 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %154), !dbg !51
  br label %__nv_rsqrtf.exit27, !dbg !51

181:                                              ; preds = %__nv_rsqrtf.exit24
  %182 = tail call float @llvm.nvvm.rsqrt.approx.f(float %154), !dbg !51
  br label %__nv_rsqrtf.exit27, !dbg !51

__nv_rsqrtf.exit27:                               ; preds = %179, %181
  %.0.i26 = phi float [ %180, %179 ], [ %182, %181 ], !dbg !51
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i28 = icmp eq i32 %183, 0, !dbg !51
  br i1 %.not.i28, label %186, label %184, !dbg !51

184:                                              ; preds = %__nv_rsqrtf.exit27
  %185 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %155), !dbg !51
  br label %__nv_rsqrtf.exit30, !dbg !51

186:                                              ; preds = %__nv_rsqrtf.exit27
  %187 = tail call float @llvm.nvvm.rsqrt.approx.f(float %155), !dbg !51
  br label %__nv_rsqrtf.exit30, !dbg !51

__nv_rsqrtf.exit30:                               ; preds = %184, %186
  %.0.i29 = phi float [ %185, %184 ], [ %187, %186 ], !dbg !51
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i31 = icmp eq i32 %188, 0, !dbg !51
  br i1 %.not.i31, label %191, label %189, !dbg !51

189:                                              ; preds = %__nv_rsqrtf.exit30
  %190 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %156), !dbg !51
  br label %__nv_rsqrtf.exit33, !dbg !51

191:                                              ; preds = %__nv_rsqrtf.exit30
  %192 = tail call float @llvm.nvvm.rsqrt.approx.f(float %156), !dbg !51
  br label %__nv_rsqrtf.exit33, !dbg !51

__nv_rsqrtf.exit33:                               ; preds = %189, %191
  %.0.i32 = phi float [ %190, %189 ], [ %192, %191 ], !dbg !51
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i34 = icmp eq i32 %193, 0, !dbg !51
  br i1 %.not.i34, label %196, label %194, !dbg !51

194:                                              ; preds = %__nv_rsqrtf.exit33
  %195 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %157), !dbg !51
  br label %__nv_rsqrtf.exit36, !dbg !51

196:                                              ; preds = %__nv_rsqrtf.exit33
  %197 = tail call float @llvm.nvvm.rsqrt.approx.f(float %157), !dbg !51
  br label %__nv_rsqrtf.exit36, !dbg !51

__nv_rsqrtf.exit36:                               ; preds = %194, %196
  %.0.i35 = phi float [ %195, %194 ], [ %197, %196 ], !dbg !51
  %198 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !28
  %199 = bitcast i32 %198 to float, !dbg !28
  %200 = bitcast i32 %59 to float, !dbg !30
  %201 = fadd float %199, %200, !dbg !52
  %202 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !34
  %203 = bitcast i32 %202 to float, !dbg !34
  %204 = bitcast i32 %111 to float, !dbg !42
  %205 = fadd float %203, %204, !dbg !53
  %206 = fadd float %201, %205, !dbg !54
  %207 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !46
  %208 = bitcast i32 %207 to float, !dbg !46
  %209 = fsub float %206, %208, !dbg !55
  %210 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !28
  %211 = bitcast i32 %210 to float, !dbg !28
  %212 = fadd float %211, %200, !dbg !52
  %213 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !34
  %214 = bitcast i32 %213 to float, !dbg !34
  %215 = bitcast i32 %110 to float, !dbg !42
  %216 = fadd float %214, %215, !dbg !53
  %217 = fadd float %212, %216, !dbg !54
  %218 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !46
  %219 = bitcast i32 %218 to float, !dbg !46
  %220 = fsub float %217, %219, !dbg !55
  %221 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !28
  %222 = bitcast i32 %221 to float, !dbg !28
  %223 = fadd float %222, %200, !dbg !52
  %224 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !34
  %225 = bitcast i32 %224 to float, !dbg !34
  %226 = bitcast i32 %109 to float, !dbg !42
  %227 = fadd float %225, %226, !dbg !53
  %228 = fadd float %223, %227, !dbg !54
  %229 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !46
  %230 = bitcast i32 %229 to float, !dbg !46
  %231 = fsub float %228, %230, !dbg !55
  %232 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !28
  %233 = bitcast i32 %232 to float, !dbg !28
  %234 = fadd float %233, %200, !dbg !52
  %235 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !34
  %236 = bitcast i32 %235 to float, !dbg !34
  %237 = bitcast i32 %108 to float, !dbg !42
  %238 = fadd float %236, %237, !dbg !53
  %239 = fadd float %234, %238, !dbg !54
  %240 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !46
  %241 = bitcast i32 %240 to float, !dbg !46
  %242 = fsub float %239, %241, !dbg !55
  %243 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !28
  %244 = bitcast i32 %243 to float, !dbg !28
  %245 = bitcast i32 %55 to float, !dbg !30
  %246 = fadd float %244, %245, !dbg !52
  %247 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !34
  %248 = bitcast i32 %247 to float, !dbg !34
  %249 = bitcast i32 %107 to float, !dbg !42
  %250 = fadd float %248, %249, !dbg !53
  %251 = fadd float %246, %250, !dbg !54
  %252 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !46
  %253 = bitcast i32 %252 to float, !dbg !46
  %254 = fsub float %251, %253, !dbg !55
  %255 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !28
  %256 = bitcast i32 %255 to float, !dbg !28
  %257 = fadd float %256, %245, !dbg !52
  %258 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !34
  %259 = bitcast i32 %258 to float, !dbg !34
  %260 = bitcast i32 %106 to float, !dbg !42
  %261 = fadd float %259, %260, !dbg !53
  %262 = fadd float %257, %261, !dbg !54
  %263 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !46
  %264 = bitcast i32 %263 to float, !dbg !46
  %265 = fsub float %262, %264, !dbg !55
  %266 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !28
  %267 = bitcast i32 %266 to float, !dbg !28
  %268 = fadd float %267, %245, !dbg !52
  %269 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !34
  %270 = bitcast i32 %269 to float, !dbg !34
  %271 = bitcast i32 %105 to float, !dbg !42
  %272 = fadd float %270, %271, !dbg !53
  %273 = fadd float %268, %272, !dbg !54
  %274 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !46
  %275 = bitcast i32 %274 to float, !dbg !46
  %276 = fsub float %273, %275, !dbg !55
  %277 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !28
  %278 = bitcast i32 %277 to float, !dbg !28
  %279 = fadd float %278, %245, !dbg !52
  %280 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !34
  %281 = bitcast i32 %280 to float, !dbg !34
  %282 = bitcast i32 %104 to float, !dbg !42
  %283 = fadd float %281, %282, !dbg !53
  %284 = fadd float %279, %283, !dbg !54
  %285 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !46
  %286 = bitcast i32 %285 to float, !dbg !46
  %287 = fsub float %284, %286, !dbg !55
  %288 = and i32 %12, 127, !dbg !17
  %289 = or disjoint i32 %288, %19, !dbg !18
  %290 = or disjoint i32 %289, 128, !dbg !18
  %291 = icmp slt i32 %290, 256, !dbg !19
  %292 = icmp slt i32 %11, 384, !dbg !14
  %293 = and i1 %292, %291, !dbg !27
  %294 = icmp slt i32 %289, 256, !dbg !19
  %295 = and i1 %292, %294, !dbg !27
  %.frozen47 = freeze i32 %11, !dbg !20
  %296 = sdiv i32 %.frozen47, 96, !dbg !20
  %297 = mul i32 %296, 96, !dbg !21
  %.decomposed48 = sub i32 %.frozen47, %297, !dbg !21
  %298 = fmul float %287, %.0.i, !dbg !56
  %299 = fmul float %276, %.0.i17, !dbg !56
  %300 = fmul float %265, %.0.i20, !dbg !56
  %301 = fmul float %254, %.0.i23, !dbg !56
  %302 = fmul float %242, %.0.i26, !dbg !56
  %303 = fmul float %231, %.0.i29, !dbg !56
  %304 = fmul float %220, %.0.i32, !dbg !56
  %305 = fmul float %209, %.0.i35, !dbg !56
  %306 = mul i32 %289, 96, !dbg !57
  %307 = mul i32 %290, 96, !dbg !57
  %308 = mul i32 %296, 24576, !dbg !58
  %309 = add i32 %308, %.decomposed48, !dbg !59
  %310 = add i32 %309, %306, !dbg !60
  %311 = add i32 %309, %307, !dbg !60
  %312 = sext i32 %310 to i64, !dbg !61
  %313 = getelementptr float, ptr addrspace(1) %6, i64 %312, !dbg !61
  %314 = sext i32 %311 to i64, !dbg !61
  %315 = getelementptr float, ptr addrspace(1) %6, i64 %314, !dbg !61
  %316 = shl i32 %12, 4, !dbg !62
  %317 = and i32 %316, 1008, !dbg !62
  %318 = or disjoint i32 %317, %.lobit, !dbg !62
  %319 = and i32 %20, 508, !dbg !62
  %320 = getelementptr float, ptr addrspace(3) @global_smem, i32 %317, !dbg !62
  %321 = getelementptr float, ptr addrspace(3) %320, i32 %318, !dbg !62
  %322 = bitcast float %298 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %322, i1 true) #4, !dbg !62
  %323 = or disjoint i32 %318, 4, !dbg !62
  %324 = or disjoint i32 %317, 4, !dbg !62
  %325 = getelementptr float, ptr addrspace(3) @global_smem, i32 %324, !dbg !62
  %326 = getelementptr float, ptr addrspace(3) %325, i32 %323, !dbg !62
  %327 = bitcast float %299 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %327, i1 true) #4, !dbg !62
  %328 = or disjoint i32 %318, 8, !dbg !62
  %329 = or disjoint i32 %317, 8, !dbg !62
  %330 = getelementptr float, ptr addrspace(3) @global_smem, i32 %329, !dbg !62
  %331 = getelementptr float, ptr addrspace(3) %330, i32 %328, !dbg !62
  %332 = bitcast float %300 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %332, i1 true) #4, !dbg !62
  %333 = or disjoint i32 %318, 12, !dbg !62
  %334 = or disjoint i32 %317, 12, !dbg !62
  %335 = getelementptr float, ptr addrspace(3) @global_smem, i32 %334, !dbg !62
  %336 = getelementptr float, ptr addrspace(3) %335, i32 %333, !dbg !62
  %337 = bitcast float %301 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %337, i1 true) #4, !dbg !62
  %338 = or disjoint i32 %318, 2, !dbg !62
  %339 = getelementptr float, ptr addrspace(3) %320, i32 %338, !dbg !62
  %340 = bitcast float %302 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %340, i1 true) #4, !dbg !62
  %341 = or disjoint i32 %318, 6, !dbg !62
  %342 = getelementptr float, ptr addrspace(3) %325, i32 %341, !dbg !62
  %343 = bitcast float %303 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %342, <1 x i32> %343, i1 true) #4, !dbg !62
  %344 = or disjoint i32 %318, 10, !dbg !62
  %345 = getelementptr float, ptr addrspace(3) %330, i32 %344, !dbg !62
  %346 = bitcast float %304 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %346, i1 true) #4, !dbg !62
  %347 = or disjoint i32 %318, 14, !dbg !62
  %348 = getelementptr float, ptr addrspace(3) %335, i32 %347, !dbg !62
  %349 = bitcast float %305 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %348, <1 x i32> %349, i1 true) #4, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %.idx = shl nuw nsw i32 %319, 3, !dbg !62
  %350 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !62
  %351 = shl nuw nsw i32 %319, 1, !dbg !62
  %352 = or disjoint i32 %351, 1024, !dbg !62
  %353 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %352, !dbg !62
  %354 = load <4 x i32>, ptr addrspace(3) %353, align 16, !dbg !62
  %.extract = load i32, ptr addrspace(3) %350, align 16, !dbg !62
  %355 = getelementptr inbounds i8, ptr addrspace(3) %350, i32 4, !dbg !62
  %.extract9 = load i32, ptr addrspace(3) %355, align 4, !dbg !62
  %356 = getelementptr inbounds i8, ptr addrspace(3) %350, i32 8, !dbg !62
  %.extract10 = load i32, ptr addrspace(3) %356, align 8, !dbg !62
  %357 = getelementptr inbounds i8, ptr addrspace(3) %350, i32 12, !dbg !62
  %.extract11 = load i32, ptr addrspace(3) %357, align 4, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %313, i1 %295) #4, !dbg !62
  %.extract12 = extractelement <4 x i32> %354, i64 0, !dbg !62
  %.extract13 = extractelement <4 x i32> %354, i64 1, !dbg !62
  %.extract14 = extractelement <4 x i32> %354, i64 2, !dbg !62
  %.extract15 = extractelement <4 x i32> %354, i64 3, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %315, i1 %293) #4, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqagfqrxmk4oz574kcj6lbqhuvtghy34uofns6i45r76zc37svnb.py", directory: "inductor_cache/qa")
!4 = !{ptr @triton_poi_fused_add_native_layer_norm_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_layer_norm_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_layer_norm_6", linkageName: "triton_poi_fused_add_native_layer_norm_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 52, scope: !7)
!28 = !DILocation(line: 34, column: 44, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 36, column: 39, scope: !7)
!32 = !DILocation(line: 36, column: 35, scope: !7)
!33 = !DILocation(line: 36, column: 30, scope: !7)
!34 = !DILocation(line: 36, column: 44, scope: !7)
!35 = !DILocation(line: 37, column: 39, scope: !7)
!36 = !DILocation(line: 37, column: 34, scope: !7)
!37 = !DILocation(line: 37, column: 48, scope: !7)
!38 = !DILocation(line: 37, column: 45, scope: !7)
!39 = !DILocation(line: 37, column: 60, scope: !7)
!40 = !DILocation(line: 37, column: 55, scope: !7)
!41 = !DILocation(line: 37, column: 30, scope: !7)
!42 = !DILocation(line: 37, column: 66, scope: !7)
!43 = !DILocation(line: 38, column: 39, scope: !7)
!44 = !DILocation(line: 38, column: 35, scope: !7)
!45 = !DILocation(line: 38, column: 30, scope: !7)
!46 = !DILocation(line: 38, column: 44, scope: !7)
!47 = !DILocation(line: 39, column: 30, scope: !7)
!48 = !DILocation(line: 39, column: 44, scope: !7)
!49 = !DILocation(line: 45, column: 19, scope: !7)
!50 = !DILocation(line: 47, column: 20, scope: !7)
!51 = !DILocation(line: 48, column: 28, scope: !7)
!52 = !DILocation(line: 40, column: 18, scope: !7)
!53 = !DILocation(line: 41, column: 18, scope: !7)
!54 = !DILocation(line: 42, column: 18, scope: !7)
!55 = !DILocation(line: 43, column: 18, scope: !7)
!56 = !DILocation(line: 49, column: 19, scope: !7)
!57 = !DILocation(line: 50, column: 33, scope: !7)
!58 = !DILocation(line: 50, column: 44, scope: !7)
!59 = !DILocation(line: 50, column: 30, scope: !7)
!60 = !DILocation(line: 50, column: 38, scope: !7)
!61 = !DILocation(line: 50, column: 25, scope: !7)
!62 = !DILocation(line: 50, column: 56, scope: !7)
!63 = !DILocation(line: 50, column: 4, scope: !7)
