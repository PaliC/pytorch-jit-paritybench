; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 12, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %17 = shl i32 %16, 5, !dbg !15
  %18 = lshr i32 %12, 2, !dbg !16
  %19 = and i32 %18, 31, !dbg !16
  %20 = or disjoint i32 %17, %19, !dbg !17
  %21 = icmp slt i32 %20, 32, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %22 = sdiv i32 %.frozen, 512, !dbg !19
  %23 = mul i32 %22, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %23, !dbg !20
  %24 = shl i32 %20, 9, !dbg !21
  %25 = add i32 %24, %.decomposed, !dbg !22
  %26 = shl i32 %22, 14, !dbg !23
  %27 = add i32 %25, %26, !dbg !24
  %28 = sext i32 %27 to i64, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !25
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %21) #4, !dbg !26
  %31 = sext i32 %.decomposed to i64, !dbg !27
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !27
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #4, !dbg !28
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !29
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #4, !dbg !30
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !30
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !30
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !30
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !30
  %40 = bitcast i32 %36 to float, !dbg !30
  %41 = bitcast i32 %37 to float, !dbg !30
  %42 = bitcast i32 %38 to float, !dbg !30
  %43 = bitcast i32 %39 to float, !dbg !30
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !31
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #4, !dbg !32
  %46 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !33
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #4, !dbg !34
  %48 = fadd float %40, 0x3EE4F8B580000000, !dbg !35
  %49 = fadd float %41, 0x3EE4F8B580000000, !dbg !35
  %50 = fadd float %42, 0x3EE4F8B580000000, !dbg !35
  %51 = fadd float %43, 0x3EE4F8B580000000, !dbg !35
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %52, 0, !dbg !36
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %53, 0, !dbg !36
  br i1 %.not.i, label %59, label %54, !dbg !36

54:                                               ; preds = %9
  br i1 %.not1.i, label %57, label %55, !dbg !36

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

59:                                               ; preds = %9
  br i1 %.not1.i, label %62, label %60, !dbg !36

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %55, %57, %60, %62
  %.0.i = phi float [ %56, %55 ], [ %58, %57 ], [ %61, %60 ], [ %63, %62 ], !dbg !36
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i3 = icmp eq i32 %64, 0, !dbg !36
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i6 = icmp eq i32 %65, 0, !dbg !36
  br i1 %.not.i3, label %71, label %66, !dbg !36

66:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %69, label %67, !dbg !36

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %74, label %72, !dbg !36

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

__nv_sqrtf.exit7:                                 ; preds = %67, %69, %72, %74
  %.0.i5 = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !36
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i8 = icmp eq i32 %76, 0, !dbg !36
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i11 = icmp eq i32 %77, 0, !dbg !36
  br i1 %.not.i8, label %83, label %78, !dbg !36

78:                                               ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %81, label %79, !dbg !36

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

83:                                               ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %86, label %84, !dbg !36

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

__nv_sqrtf.exit12:                                ; preds = %79, %81, %84, %86
  %.0.i10 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !36
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i13 = icmp eq i32 %88, 0, !dbg !36
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i16 = icmp eq i32 %89, 0, !dbg !36
  br i1 %.not.i13, label %95, label %90, !dbg !36

90:                                               ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %93, label %91, !dbg !36

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

95:                                               ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %98, label %96, !dbg !36

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

__nv_sqrtf.exit17:                                ; preds = %91, %93, %96, %98
  %.0.i15 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !36
  %100 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !26
  %101 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !28
  %102 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !26
  %103 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !28
  %104 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !26
  %105 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !28
  %106 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !26
  %107 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !34
  %109 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !34
  %110 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !34
  %111 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !34
  %112 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !32
  %113 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !32
  %114 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !32
  %115 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !32
  %116 = and i32 %13, 28, !dbg !16
  %117 = or disjoint i32 %17, %116, !dbg !17
  %118 = icmp slt i32 %117, 32, !dbg !18
  %119 = lshr i32 %12, 3, !dbg !12
  %120 = and i32 %119, 15, !dbg !12
  %121 = or disjoint i32 %11, %120, !dbg !13
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !37
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !37
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !37
  %126 = shl i32 %121, 5, !dbg !38
  %127 = add i32 %117, %126, !dbg !39
  %128 = sext i32 %127 to i64, !dbg !40
  %129 = getelementptr float, ptr addrspace(1) %5, i64 %128, !dbg !40
  %130 = shl i32 %12, 7, !dbg !41
  %131 = and i32 %130, 384, !dbg !41
  %132 = or disjoint i32 %131, %19, !dbg !41
  %133 = and i32 %13, 508, !dbg !41
  %134 = lshr exact i32 %131, 3, !dbg !41
  %135 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %134, !dbg !41
  %136 = getelementptr float, ptr addrspace(3) %135, i32 %132, !dbg !41
  %137 = or disjoint i32 %132, 32, !dbg !41
  %138 = lshr i32 %137, 5, !dbg !41
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i32 %138, !dbg !41
  %140 = getelementptr float, ptr addrspace(3) %139, i32 %137, !dbg !41
  %141 = or disjoint i32 %132, 64, !dbg !41
  %142 = lshr i32 %141, 5, !dbg !41
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !41
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %141, !dbg !41
  %145 = or disjoint i32 %132, 96, !dbg !41
  %146 = lshr i32 %145, 5, !dbg !41
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %146, !dbg !41
  %148 = getelementptr float, ptr addrspace(3) %147, i32 %145, !dbg !41
  %149 = lshr i32 %133, 5, !dbg !41
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %149, !dbg !41
  %151 = getelementptr inbounds float, ptr addrspace(3) %150, i32 %133, !dbg !41
  %152 = or disjoint i32 %133, 1, !dbg !41
  %153 = getelementptr inbounds float, ptr addrspace(3) %150, i32 %152, !dbg !41
  %154 = or disjoint i32 %133, 2, !dbg !41
  %155 = getelementptr inbounds float, ptr addrspace(3) %150, i32 %154, !dbg !41
  %156 = or disjoint i32 %133, 3, !dbg !41
  %157 = getelementptr inbounds float, ptr addrspace(3) %150, i32 %156, !dbg !41
  %158 = getelementptr i1, ptr addrspace(1) %6, i64 %28, !dbg !42
  %159 = insertelement <4 x i32> poison, i32 %106, i64 0, !dbg !26
  %160 = insertelement <4 x i32> %159, i32 %104, i64 1, !dbg !26
  %161 = insertelement <4 x i32> %160, i32 %102, i64 2, !dbg !26
  %162 = insertelement <4 x i32> %161, i32 %100, i64 3, !dbg !26
  %163 = bitcast <4 x i32> %162 to <4 x float>, !dbg !26
  %164 = insertelement <4 x i32> poison, i32 %107, i64 0, !dbg !28
  %165 = insertelement <4 x i32> %164, i32 %105, i64 1, !dbg !28
  %166 = insertelement <4 x i32> %165, i32 %103, i64 2, !dbg !28
  %167 = insertelement <4 x i32> %166, i32 %101, i64 3, !dbg !28
  %168 = bitcast <4 x i32> %167 to <4 x float>, !dbg !28
  %169 = fsub <4 x float> %163, %168, !dbg !43
  %170 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !34
  %171 = insertelement <4 x i32> %170, i32 %110, i64 1, !dbg !34
  %172 = insertelement <4 x i32> %171, i32 %109, i64 2, !dbg !34
  %173 = insertelement <4 x i32> %172, i32 %108, i64 3, !dbg !34
  %174 = bitcast <4 x i32> %173 to <4 x float>, !dbg !34
  %175 = insertelement <4 x i32> poison, i32 %115, i64 0, !dbg !32
  %176 = insertelement <4 x i32> %175, i32 %114, i64 1, !dbg !32
  %177 = insertelement <4 x i32> %176, i32 %113, i64 2, !dbg !32
  %178 = insertelement <4 x i32> %177, i32 %112, i64 3, !dbg !32
  %179 = bitcast <4 x i32> %178 to <4 x float>, !dbg !32
  %180 = insertelement <4 x float> poison, float %122, i64 0, !dbg !44
  %181 = insertelement <4 x float> %180, float %123, i64 1, !dbg !44
  %182 = insertelement <4 x float> %181, float %124, i64 2, !dbg !44
  %183 = insertelement <4 x float> %182, float %125, i64 3, !dbg !44
  %184 = fmul <4 x float> %169, %183, !dbg !44
  %185 = fmul <4 x float> %184, %179, !dbg !45
  %186 = fadd <4 x float> %185, %174, !dbg !46
  %187 = fcmp olt <4 x float> %186, zeroinitializer, !dbg !47
  %188 = select <4 x i1> %187, <4 x float> zeroinitializer, <4 x float> %186, !dbg !51
  %189 = fcmp ole <4 x float> %188, zeroinitializer, !dbg !52
  %190 = extractelement <4 x float> %188, i64 0, !dbg !41
  %191 = bitcast float %190 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %191, i1 true) #4, !dbg !41
  %192 = extractelement <4 x float> %188, i64 1, !dbg !41
  %193 = bitcast float %192 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %193, i1 true) #4, !dbg !41
  %194 = extractelement <4 x float> %188, i64 2, !dbg !41
  %195 = bitcast float %194 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %195, i1 true) #4, !dbg !41
  %196 = extractelement <4 x float> %188, i64 3, !dbg !41
  %197 = bitcast float %196 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %197, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %198 = load i32, ptr addrspace(3) %151, align 4, !dbg !41
  %199 = load i32, ptr addrspace(3) %153, align 4, !dbg !41
  %200 = load i32, ptr addrspace(3) %155, align 4, !dbg !41
  %201 = load i32, ptr addrspace(3) %157, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %198, i32 %199, i32 %200, i32 %201, ptr addrspace(1) %129, i1 %118) #4, !dbg !41
  %202 = zext <4 x i1> %189 to <4 x i8>, !dbg !53
  %203 = bitcast <4 x i8> %202 to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %203, ptr addrspace(1) %158, i1 %21) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cufujjxrbpnmdonxyikuonyixtkapicuqgm6ymufpneajk3ahccc.py", directory: "inductor_cache/uf")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_26", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 50, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 52, column: 33, scope: !7)
!39 = !DILocation(line: 52, column: 30, scope: !7)
!40 = !DILocation(line: 52, column: 25, scope: !7)
!41 = !DILocation(line: 52, column: 45, scope: !7)
!42 = !DILocation(line: 53, column: 25, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 45, column: 19, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 49, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 51, column: 21, scope: !7)
!53 = !DILocation(line: 53, column: 57, scope: !7)
!54 = !DILocation(line: 53, column: 4, scope: !7)
