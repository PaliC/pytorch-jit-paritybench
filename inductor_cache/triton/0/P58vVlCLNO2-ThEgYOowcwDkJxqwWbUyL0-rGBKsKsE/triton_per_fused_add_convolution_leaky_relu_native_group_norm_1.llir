; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_convolution_leaky_relu_native_group_norm_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, i32 %25, i32 %26) local_unnamed_addr !dbg !7 {
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %29 = icmp slt i32 %28, 4, !dbg !11
  %30 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %31 = and i32 %30, 31, !dbg !12
  %32 = lshr i32 %30, 5, !dbg !12
  %33 = and i32 %30, 63, !dbg !12
  %34 = lshr i32 %33, 4, !dbg !13
  %35 = shl i32 %28, 6, !dbg !14
  %36 = or disjoint i32 %35, %33, !dbg !15
  %37 = sext i32 %36 to i64, !dbg !16
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !16
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %29, i32 0, i1 %29) #5, !dbg !17
  %40 = bitcast i32 %39 to float, !dbg !17
  %41 = zext nneg i32 %34 to i64, !dbg !18
  %42 = getelementptr float, ptr addrspace(1) %9, i64 %41, !dbg !18
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #5, !dbg !19
  %44 = bitcast i32 %43 to float, !dbg !19
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !20
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %29, i32 0, i1 %29) #5, !dbg !21
  %47 = bitcast i32 %46 to float, !dbg !21
  %48 = getelementptr float, ptr addrspace(1) %10, i64 %41, !dbg !22
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !23
  %50 = bitcast i32 %49 to float, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !24
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %29, i32 0, i1 %29) #5, !dbg !25
  %53 = bitcast i32 %52 to float, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %11, i64 %41, !dbg !26
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #5, !dbg !27
  %56 = bitcast i32 %55 to float, !dbg !27
  %57 = getelementptr float, ptr addrspace(1) %6, i64 %37, !dbg !28
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %29, i32 0, i1 %29) #5, !dbg !29
  %59 = bitcast i32 %58 to float, !dbg !29
  %60 = getelementptr float, ptr addrspace(1) %12, i64 %41, !dbg !30
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #5, !dbg !31
  %62 = bitcast i32 %61 to float, !dbg !31
  %63 = getelementptr float, ptr addrspace(1) %13, i64 %41, !dbg !32
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #5, !dbg !33
  %65 = getelementptr float, ptr addrspace(1) %14, i64 %41, !dbg !34
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #5, !dbg !35
  %67 = getelementptr float, ptr addrspace(1) %15, i64 %41, !dbg !36
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #5, !dbg !37
  %69 = getelementptr float, ptr addrspace(1) %16, i64 %41, !dbg !38
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #5, !dbg !39
  %71 = getelementptr float, ptr addrspace(1) %17, i64 %41, !dbg !40
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #5, !dbg !41
  %73 = getelementptr float, ptr addrspace(1) %18, i64 %41, !dbg !42
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #5, !dbg !43
  %75 = getelementptr float, ptr addrspace(1) %19, i64 %41, !dbg !44
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #5, !dbg !45
  %77 = getelementptr float, ptr addrspace(1) %20, i64 %41, !dbg !46
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #5, !dbg !47
  %79 = fadd float %40, %44, !dbg !48
  %80 = select i1 %29, float %79, float 0.000000e+00, !dbg !49
  %81 = bitcast float %80 to i32, !dbg !50
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 16, i32 31), !dbg !50
  %83 = bitcast i32 %82 to float, !dbg !50
  %84 = fadd float %80, %83, !dbg !54
  %85 = bitcast float %84 to i32, !dbg !50
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 8, i32 31), !dbg !50
  %87 = bitcast i32 %86 to float, !dbg !50
  %88 = fadd float %84, %87, !dbg !54
  %89 = bitcast float %88 to i32, !dbg !50
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 4, i32 31), !dbg !50
  %91 = bitcast i32 %90 to float, !dbg !50
  %92 = fadd float %88, %91, !dbg !54
  %93 = bitcast float %92 to i32, !dbg !50
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 2, i32 31), !dbg !50
  %95 = bitcast i32 %94 to float, !dbg !50
  %96 = fadd float %92, %95, !dbg !54
  %97 = bitcast float %96 to i32, !dbg !50
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !50
  %99 = bitcast i32 %98 to float, !dbg !50
  %100 = fadd float %96, %99, !dbg !54
  %101 = icmp eq i32 %31, 0, !dbg !50
  %102 = and i32 %32, 1, !dbg !50
  %103 = zext nneg i32 %102 to i64, !dbg !50
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i64 %103, !dbg !50
  %105 = bitcast float %100 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 %101) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %106 = icmp slt i32 %30, 2, !dbg !50
  %107 = sext i32 %30 to i64, !dbg !50
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i64 %107, !dbg !50
  %109 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %108, i1 %106) #5, !dbg !50
  %110 = bitcast i32 %109 to float, !dbg !50
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 1, i32 31), !dbg !50
  %112 = bitcast i32 %111 to float, !dbg !50
  %113 = fadd float %110, %112, !dbg !54
  %114 = and i32 %30, 1, !dbg !50
  %115 = icmp eq i32 %114, 0, !dbg !50
  %116 = and i1 %106, %115, !dbg !50
  %117 = bitcast float %113 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %117, i1 %116) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %118 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !50
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float 6.400000e+01) #5, !dbg !56
  %120 = fsub float %79, %119, !dbg !57
  %121 = fmul float %120, %120, !dbg !58
  %122 = select i1 %29, float %121, float 0.000000e+00, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %123 = bitcast float %122 to i32, !dbg !60
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 16, i32 31), !dbg !60
  %125 = bitcast i32 %124 to float, !dbg !60
  %126 = fadd float %122, %125, !dbg !62
  %127 = bitcast float %126 to i32, !dbg !60
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 8, i32 31), !dbg !60
  %129 = bitcast i32 %128 to float, !dbg !60
  %130 = fadd float %126, %129, !dbg !62
  %131 = bitcast float %130 to i32, !dbg !60
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 4, i32 31), !dbg !60
  %133 = bitcast i32 %132 to float, !dbg !60
  %134 = fadd float %130, %133, !dbg !62
  %135 = bitcast float %134 to i32, !dbg !60
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 2, i32 31), !dbg !60
  %137 = bitcast i32 %136 to float, !dbg !60
  %138 = fadd float %134, %137, !dbg !62
  %139 = bitcast float %138 to i32, !dbg !60
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !60
  %141 = bitcast i32 %140 to float, !dbg !60
  %142 = fadd float %138, %141, !dbg !62
  %143 = bitcast float %142 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %143, i1 %101) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %144 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %108, i1 %106) #5, !dbg !60
  %145 = bitcast i32 %144 to float, !dbg !60
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 1, i32 31), !dbg !60
  %147 = bitcast i32 %146 to float, !dbg !60
  %148 = fadd float %145, %147, !dbg !62
  %149 = bitcast float %148 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %149, i1 %116) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %150 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !60
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float 6.400000e+01) #5, !dbg !63
  %152 = fadd float %151, 0x3EE4F8B580000000, !dbg !64
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !65
  %.not.i = icmp eq i32 %153, 0, !dbg !65
  br i1 %.not.i, label %156, label %154, !dbg !65

154:                                              ; preds = %27
  %155 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %152), !dbg !65
  br label %__nv_rsqrtf.exit, !dbg !65

156:                                              ; preds = %27
  %157 = tail call float @llvm.nvvm.rsqrt.approx.f(float %152), !dbg !65
  br label %__nv_rsqrtf.exit, !dbg !65

__nv_rsqrtf.exit:                                 ; preds = %154, %156
  %.0.i = phi float [ %155, %154 ], [ %157, %156 ], !dbg !65
  %158 = fadd float %47, %50, !dbg !66
  %159 = select i1 %29, float %158, float 0.000000e+00, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %160 = bitcast float %159 to i32, !dbg !68
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 16, i32 31), !dbg !68
  %162 = bitcast i32 %161 to float, !dbg !68
  %163 = fadd float %159, %162, !dbg !70
  %164 = bitcast float %163 to i32, !dbg !68
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 8, i32 31), !dbg !68
  %166 = bitcast i32 %165 to float, !dbg !68
  %167 = fadd float %163, %166, !dbg !70
  %168 = bitcast float %167 to i32, !dbg !68
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 4, i32 31), !dbg !68
  %170 = bitcast i32 %169 to float, !dbg !68
  %171 = fadd float %167, %170, !dbg !70
  %172 = bitcast float %171 to i32, !dbg !68
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 2, i32 31), !dbg !68
  %174 = bitcast i32 %173 to float, !dbg !68
  %175 = fadd float %171, %174, !dbg !70
  %176 = bitcast float %175 to i32, !dbg !68
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 1, i32 31), !dbg !68
  %178 = bitcast i32 %177 to float, !dbg !68
  %179 = fadd float %175, %178, !dbg !70
  %180 = bitcast float %179 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %180, i1 %101) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %181 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %108, i1 %106) #5, !dbg !68
  %182 = bitcast i32 %181 to float, !dbg !68
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 1, i32 31), !dbg !68
  %184 = bitcast i32 %183 to float, !dbg !68
  %185 = fadd float %182, %184, !dbg !70
  %186 = bitcast float %185 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %186, i1 %116) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %187 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !68
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %187, float 6.400000e+01) #5, !dbg !71
  %189 = fsub float %158, %188, !dbg !72
  %190 = fmul float %189, %189, !dbg !73
  %191 = select i1 %29, float %190, float 0.000000e+00, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %192 = bitcast float %191 to i32, !dbg !75
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 16, i32 31), !dbg !75
  %194 = bitcast i32 %193 to float, !dbg !75
  %195 = fadd float %191, %194, !dbg !77
  %196 = bitcast float %195 to i32, !dbg !75
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 8, i32 31), !dbg !75
  %198 = bitcast i32 %197 to float, !dbg !75
  %199 = fadd float %195, %198, !dbg !77
  %200 = bitcast float %199 to i32, !dbg !75
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 4, i32 31), !dbg !75
  %202 = bitcast i32 %201 to float, !dbg !75
  %203 = fadd float %199, %202, !dbg !77
  %204 = bitcast float %203 to i32, !dbg !75
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 2, i32 31), !dbg !75
  %206 = bitcast i32 %205 to float, !dbg !75
  %207 = fadd float %203, %206, !dbg !77
  %208 = bitcast float %207 to i32, !dbg !75
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 1, i32 31), !dbg !75
  %210 = bitcast i32 %209 to float, !dbg !75
  %211 = fadd float %207, %210, !dbg !77
  %212 = bitcast float %211 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %212, i1 %101) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %213 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %108, i1 %106) #5, !dbg !75
  %214 = bitcast i32 %213 to float, !dbg !75
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 1, i32 31), !dbg !75
  %216 = bitcast i32 %215 to float, !dbg !75
  %217 = fadd float %214, %216, !dbg !77
  %218 = bitcast float %217 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %218, i1 %116) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %219 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !75
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %219, float 6.400000e+01) #5, !dbg !78
  %221 = fadd float %220, 0x3EE4F8B580000000, !dbg !79
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !80
  %.not.i1 = icmp eq i32 %222, 0, !dbg !80
  br i1 %.not.i1, label %225, label %223, !dbg !80

223:                                              ; preds = %__nv_rsqrtf.exit
  %224 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %221), !dbg !80
  br label %__nv_rsqrtf.exit3, !dbg !80

225:                                              ; preds = %__nv_rsqrtf.exit
  %226 = tail call float @llvm.nvvm.rsqrt.approx.f(float %221), !dbg !80
  br label %__nv_rsqrtf.exit3, !dbg !80

__nv_rsqrtf.exit3:                                ; preds = %223, %225
  %.0.i2 = phi float [ %224, %223 ], [ %226, %225 ], !dbg !80
  %227 = fadd float %53, %56, !dbg !81
  %228 = select i1 %29, float %227, float 0.000000e+00, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %229 = bitcast float %228 to i32, !dbg !83
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 16, i32 31), !dbg !83
  %231 = bitcast i32 %230 to float, !dbg !83
  %232 = fadd float %228, %231, !dbg !85
  %233 = bitcast float %232 to i32, !dbg !83
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 8, i32 31), !dbg !83
  %235 = bitcast i32 %234 to float, !dbg !83
  %236 = fadd float %232, %235, !dbg !85
  %237 = bitcast float %236 to i32, !dbg !83
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 4, i32 31), !dbg !83
  %239 = bitcast i32 %238 to float, !dbg !83
  %240 = fadd float %236, %239, !dbg !85
  %241 = bitcast float %240 to i32, !dbg !83
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 2, i32 31), !dbg !83
  %243 = bitcast i32 %242 to float, !dbg !83
  %244 = fadd float %240, %243, !dbg !85
  %245 = bitcast float %244 to i32, !dbg !83
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 1, i32 31), !dbg !83
  %247 = bitcast i32 %246 to float, !dbg !83
  %248 = fadd float %244, %247, !dbg !85
  %249 = bitcast float %248 to <1 x i32>, !dbg !83
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %249, i1 %101) #5, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %250 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %108, i1 %106) #5, !dbg !83
  %251 = bitcast i32 %250 to float, !dbg !83
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 1, i32 31), !dbg !83
  %253 = bitcast i32 %252 to float, !dbg !83
  %254 = fadd float %251, %253, !dbg !85
  %255 = bitcast float %254 to <1 x i32>, !dbg !83
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %255, i1 %116) #5, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %256 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !83
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %256, float 6.400000e+01) #5, !dbg !86
  %258 = fsub float %227, %257, !dbg !87
  %259 = fmul float %258, %258, !dbg !88
  %260 = select i1 %29, float %259, float 0.000000e+00, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  %261 = bitcast float %260 to i32, !dbg !90
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 16, i32 31), !dbg !90
  %263 = bitcast i32 %262 to float, !dbg !90
  %264 = fadd float %260, %263, !dbg !92
  %265 = bitcast float %264 to i32, !dbg !90
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 8, i32 31), !dbg !90
  %267 = bitcast i32 %266 to float, !dbg !90
  %268 = fadd float %264, %267, !dbg !92
  %269 = bitcast float %268 to i32, !dbg !90
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 4, i32 31), !dbg !90
  %271 = bitcast i32 %270 to float, !dbg !90
  %272 = fadd float %268, %271, !dbg !92
  %273 = bitcast float %272 to i32, !dbg !90
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 2, i32 31), !dbg !90
  %275 = bitcast i32 %274 to float, !dbg !90
  %276 = fadd float %272, %275, !dbg !92
  %277 = bitcast float %276 to i32, !dbg !90
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 1, i32 31), !dbg !90
  %279 = bitcast i32 %278 to float, !dbg !90
  %280 = fadd float %276, %279, !dbg !92
  %281 = bitcast float %280 to <1 x i32>, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %281, i1 %101) #5, !dbg !90
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  %282 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %108, i1 %106) #5, !dbg !90
  %283 = bitcast i32 %282 to float, !dbg !90
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 1, i32 31), !dbg !90
  %285 = bitcast i32 %284 to float, !dbg !90
  %286 = fadd float %283, %285, !dbg !92
  %287 = bitcast float %286 to <1 x i32>, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %287, i1 %116) #5, !dbg !90
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  %288 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !90
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %288, float 6.400000e+01) #5, !dbg !93
  %290 = fadd float %289, 0x3EE4F8B580000000, !dbg !94
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %.not.i4 = icmp eq i32 %291, 0, !dbg !95
  br i1 %.not.i4, label %294, label %292, !dbg !95

292:                                              ; preds = %__nv_rsqrtf.exit3
  %293 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %290), !dbg !95
  br label %__nv_rsqrtf.exit6, !dbg !95

294:                                              ; preds = %__nv_rsqrtf.exit3
  %295 = tail call float @llvm.nvvm.rsqrt.approx.f(float %290), !dbg !95
  br label %__nv_rsqrtf.exit6, !dbg !95

__nv_rsqrtf.exit6:                                ; preds = %292, %294
  %.0.i5 = phi float [ %293, %292 ], [ %295, %294 ], !dbg !95
  %296 = fadd float %59, %62, !dbg !96
  %297 = select i1 %29, float %296, float 0.000000e+00, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %298 = bitcast float %297 to i32, !dbg !98
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 16, i32 31), !dbg !98
  %300 = bitcast i32 %299 to float, !dbg !98
  %301 = fadd float %297, %300, !dbg !100
  %302 = bitcast float %301 to i32, !dbg !98
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 8, i32 31), !dbg !98
  %304 = bitcast i32 %303 to float, !dbg !98
  %305 = fadd float %301, %304, !dbg !100
  %306 = bitcast float %305 to i32, !dbg !98
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 4, i32 31), !dbg !98
  %308 = bitcast i32 %307 to float, !dbg !98
  %309 = fadd float %305, %308, !dbg !100
  %310 = bitcast float %309 to i32, !dbg !98
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 2, i32 31), !dbg !98
  %312 = bitcast i32 %311 to float, !dbg !98
  %313 = fadd float %309, %312, !dbg !100
  %314 = bitcast float %313 to i32, !dbg !98
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 1, i32 31), !dbg !98
  %316 = bitcast i32 %315 to float, !dbg !98
  %317 = fadd float %313, %316, !dbg !100
  %318 = bitcast float %317 to <1 x i32>, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %318, i1 %101) #5, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %319 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %108, i1 %106) #5, !dbg !98
  %320 = bitcast i32 %319 to float, !dbg !98
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 1, i32 31), !dbg !98
  %322 = bitcast i32 %321 to float, !dbg !98
  %323 = fadd float %320, %322, !dbg !100
  %324 = bitcast float %323 to <1 x i32>, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %324, i1 %116) #5, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %325 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !98
  %326 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %325, float 6.400000e+01) #5, !dbg !101
  %327 = fsub float %296, %326, !dbg !102
  %328 = fmul float %327, %327, !dbg !103
  %329 = select i1 %29, float %328, float 0.000000e+00, !dbg !104
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %330 = bitcast float %329 to i32, !dbg !105
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 16, i32 31), !dbg !105
  %332 = bitcast i32 %331 to float, !dbg !105
  %333 = fadd float %329, %332, !dbg !107
  %334 = bitcast float %333 to i32, !dbg !105
  %335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 8, i32 31), !dbg !105
  %336 = bitcast i32 %335 to float, !dbg !105
  %337 = fadd float %333, %336, !dbg !107
  %338 = bitcast float %337 to i32, !dbg !105
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 4, i32 31), !dbg !105
  %340 = bitcast i32 %339 to float, !dbg !105
  %341 = fadd float %337, %340, !dbg !107
  %342 = bitcast float %341 to i32, !dbg !105
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 2, i32 31), !dbg !105
  %344 = bitcast i32 %343 to float, !dbg !105
  %345 = fadd float %341, %344, !dbg !107
  %346 = bitcast float %345 to i32, !dbg !105
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 1, i32 31), !dbg !105
  %348 = bitcast i32 %347 to float, !dbg !105
  %349 = fadd float %345, %348, !dbg !107
  %350 = bitcast float %349 to <1 x i32>, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %350, i1 %101) #5, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %351 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %108, i1 %106) #5, !dbg !105
  %352 = bitcast i32 %351 to float, !dbg !105
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 1, i32 31), !dbg !105
  %354 = bitcast i32 %353 to float, !dbg !105
  %355 = fadd float %352, %354, !dbg !107
  %356 = bitcast float %355 to <1 x i32>, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %356, i1 %116) #5, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %357 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !105
  %358 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %357, float 6.400000e+01) #5, !dbg !108
  %359 = fadd float %358, 0x3EE4F8B580000000, !dbg !109
  %360 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not.i7 = icmp eq i32 %360, 0, !dbg !110
  br i1 %.not.i7, label %363, label %361, !dbg !110

361:                                              ; preds = %__nv_rsqrtf.exit6
  %362 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %359), !dbg !110
  br label %__nv_rsqrtf.exit9, !dbg !110

363:                                              ; preds = %__nv_rsqrtf.exit6
  %364 = tail call float @llvm.nvvm.rsqrt.approx.f(float %359), !dbg !110
  br label %__nv_rsqrtf.exit9, !dbg !110

__nv_rsqrtf.exit9:                                ; preds = %361, %363
  %.0.i8 = phi float [ %362, %361 ], [ %364, %363 ], !dbg !110
  %365 = insertelement <4 x i32> poison, i32 %78, i64 0, !dbg !47
  %366 = insertelement <4 x i32> %365, i32 %74, i64 1, !dbg !47
  %367 = insertelement <4 x i32> %366, i32 %70, i64 2, !dbg !47
  %368 = insertelement <4 x i32> %367, i32 %66, i64 3, !dbg !47
  %369 = bitcast <4 x i32> %368 to <4 x float>, !dbg !47
  %370 = insertelement <4 x i32> poison, i32 %76, i64 0, !dbg !45
  %371 = insertelement <4 x i32> %370, i32 %72, i64 1, !dbg !45
  %372 = insertelement <4 x i32> %371, i32 %68, i64 2, !dbg !45
  %373 = insertelement <4 x i32> %372, i32 %64, i64 3, !dbg !45
  %374 = bitcast <4 x i32> %373 to <4 x float>, !dbg !45
  %375 = insertelement <4 x float> poison, float %189, i64 0, !dbg !111
  %376 = insertelement <4 x float> %375, float %327, i64 1, !dbg !111
  %377 = insertelement <4 x float> %376, float %258, i64 2, !dbg !111
  %378 = insertelement <4 x float> %377, float %120, i64 3, !dbg !111
  %379 = insertelement <4 x float> poison, float %.0.i2, i64 0, !dbg !111
  %380 = insertelement <4 x float> %379, float %.0.i8, i64 1, !dbg !111
  %381 = insertelement <4 x float> %380, float %.0.i5, i64 2, !dbg !111
  %382 = insertelement <4 x float> %381, float %.0.i, i64 3, !dbg !111
  %383 = fmul <4 x float> %378, %382, !dbg !111
  %384 = fmul <4 x float> %383, %374, !dbg !112
  %385 = fadd <4 x float> %384, %369, !dbg !113
  %386 = extractelement <4 x float> %385, i64 3, !dbg !114
  %387 = fmul float %386, 0x3FC99999A0000000, !dbg !115
  %388 = fcmp ogt <4 x float> %385, zeroinitializer, !dbg !116
  %389 = extractelement <4 x i1> %388, i64 3, !dbg !114
  %390 = select i1 %389, float %386, float %387, !dbg !114
  %391 = fadd float %390, 0.000000e+00, !dbg !117
  %392 = extractelement <4 x float> %385, i64 2, !dbg !118
  %393 = fmul float %392, 0x3FC99999A0000000, !dbg !119
  %394 = extractelement <4 x i1> %388, i64 2, !dbg !118
  %395 = select i1 %394, float %392, float %393, !dbg !118
  %396 = fadd float %391, %395, !dbg !120
  %397 = extractelement <4 x float> %385, i64 1, !dbg !121
  %398 = fmul float %397, 0x3FC99999A0000000, !dbg !122
  %399 = extractelement <4 x i1> %388, i64 1, !dbg !121
  %400 = select i1 %399, float %397, float %398, !dbg !121
  %401 = fadd float %396, %400, !dbg !123
  %402 = extractelement <4 x float> %385, i64 0, !dbg !124
  %403 = fmul float %402, 0x3FC99999A0000000, !dbg !125
  %404 = extractelement <4 x i1> %388, i64 0, !dbg !124
  %405 = select i1 %404, float %402, float %403, !dbg !124
  %406 = fadd float %405, %401, !dbg !126
  %407 = bitcast float %79 to i32, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %407, ptr addrspace(1) %38, i1 %29) #5, !dbg !127
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %408 = sext i32 %28 to i64, !dbg !129
  %409 = getelementptr float, ptr addrspace(1) %1, i64 %408, !dbg !129
  %410 = icmp eq i32 %33, 0, !dbg !130
  %411 = bitcast float %.0.i to i32, !dbg !130
  %412 = and i1 %410, %29, !dbg !130
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %411, ptr addrspace(1) %409, i1 %412) #5, !dbg !130
  %413 = bitcast float %158 to i32, !dbg !131
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %413, ptr addrspace(1) %45, i1 %29) #5, !dbg !131
  tail call void @llvm.nvvm.barrier0(), !dbg !132
  %414 = getelementptr float, ptr addrspace(1) %3, i64 %408, !dbg !133
  %415 = bitcast float %.0.i2 to i32, !dbg !134
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %415, ptr addrspace(1) %414, i1 %412) #5, !dbg !134
  %416 = bitcast float %227 to i32, !dbg !135
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %416, ptr addrspace(1) %51, i1 %29) #5, !dbg !135
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %417 = getelementptr float, ptr addrspace(1) %5, i64 %408, !dbg !137
  %418 = bitcast float %.0.i5 to i32, !dbg !138
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %418, ptr addrspace(1) %417, i1 %412) #5, !dbg !138
  %419 = bitcast float %296 to i32, !dbg !139
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %419, ptr addrspace(1) %57, i1 %29) #5, !dbg !139
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %420 = getelementptr float, ptr addrspace(1) %7, i64 %408, !dbg !141
  %421 = bitcast float %.0.i8 to i32, !dbg !142
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %421, ptr addrspace(1) %420, i1 %412) #5, !dbg !142
  %422 = getelementptr float, ptr addrspace(1) %8, i64 %37, !dbg !143
  %423 = bitcast float %406 to i32, !dbg !144
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %423, ptr addrspace(1) %422, i1 %29) #5, !dbg !144
  %424 = getelementptr float, ptr addrspace(1) %21, i64 %408, !dbg !145
  %425 = bitcast float %119 to i32, !dbg !146
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %425, ptr addrspace(1) %424, i1 %412) #5, !dbg !146
  %426 = getelementptr float, ptr addrspace(1) %22, i64 %408, !dbg !147
  %427 = bitcast float %188 to i32, !dbg !148
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %427, ptr addrspace(1) %426, i1 %412) #5, !dbg !148
  %428 = getelementptr float, ptr addrspace(1) %23, i64 %408, !dbg !149
  %429 = bitcast float %257 to i32, !dbg !150
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %429, ptr addrspace(1) %428, i1 %412) #5, !dbg !150
  %430 = getelementptr float, ptr addrspace(1) %24, i64 %408, !dbg !151
  %431 = bitcast float %326 to i32, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %431, ptr addrspace(1) %430, i1 %412) #5, !dbg !152
  ret void, !dbg !153
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctx2t37l5irgr3xfsxi2rnba62ipmddtjmrwhec3yhfv7nhdws2a.py", directory: "inductor_cache/tx")
!4 = !{ptr @triton_per_fused_add_convolution_leaky_relu_native_group_norm_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_convolution_leaky_relu_native_group_norm_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_convolution_leaky_relu_native_group_norm_1", linkageName: "triton_per_fused_add_convolution_leaky_relu_native_group_norm_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 42, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 47, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 34, column: 48, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 35, scope: !7)
!25 = !DILocation(line: 36, column: 48, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 36, scope: !7)
!28 = !DILocation(line: 38, column: 35, scope: !7)
!29 = !DILocation(line: 38, column: 48, scope: !7)
!30 = !DILocation(line: 39, column: 31, scope: !7)
!31 = !DILocation(line: 39, column: 36, scope: !7)
!32 = !DILocation(line: 40, column: 31, scope: !7)
!33 = !DILocation(line: 40, column: 36, scope: !7)
!34 = !DILocation(line: 41, column: 31, scope: !7)
!35 = !DILocation(line: 41, column: 36, scope: !7)
!36 = !DILocation(line: 42, column: 31, scope: !7)
!37 = !DILocation(line: 42, column: 36, scope: !7)
!38 = !DILocation(line: 43, column: 31, scope: !7)
!39 = !DILocation(line: 43, column: 36, scope: !7)
!40 = !DILocation(line: 44, column: 31, scope: !7)
!41 = !DILocation(line: 44, column: 36, scope: !7)
!42 = !DILocation(line: 45, column: 32, scope: !7)
!43 = !DILocation(line: 45, column: 37, scope: !7)
!44 = !DILocation(line: 46, column: 33, scope: !7)
!45 = !DILocation(line: 46, column: 38, scope: !7)
!46 = !DILocation(line: 47, column: 33, scope: !7)
!47 = !DILocation(line: 47, column: 38, scope: !7)
!48 = !DILocation(line: 48, column: 18, scope: !7)
!49 = !DILocation(line: 52, column: 33, scope: !7)
!50 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!53 = !DILocation(line: 53, column: 24, scope: !7)
!54 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !53)
!55 = distinct !DILexicalBlockFile(scope: !51, file: !52, discriminator: 0)
!56 = !DILocation(line: 56, column: 19, scope: !7)
!57 = !DILocation(line: 57, column: 19, scope: !7)
!58 = !DILocation(line: 58, column: 20, scope: !7)
!59 = !DILocation(line: 60, column: 35, scope: !7)
!60 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !61)
!61 = !DILocation(line: 61, column: 26, scope: !7)
!62 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !61)
!63 = !DILocation(line: 63, column: 20, scope: !7)
!64 = !DILocation(line: 65, column: 20, scope: !7)
!65 = !DILocation(line: 66, column: 28, scope: !7)
!66 = !DILocation(line: 67, column: 20, scope: !7)
!67 = !DILocation(line: 71, column: 35, scope: !7)
!68 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !69)
!69 = !DILocation(line: 72, column: 26, scope: !7)
!70 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !69)
!71 = !DILocation(line: 73, column: 20, scope: !7)
!72 = !DILocation(line: 74, column: 20, scope: !7)
!73 = !DILocation(line: 75, column: 20, scope: !7)
!74 = !DILocation(line: 77, column: 35, scope: !7)
!75 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !76)
!76 = !DILocation(line: 78, column: 26, scope: !7)
!77 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !76)
!78 = !DILocation(line: 79, column: 20, scope: !7)
!79 = !DILocation(line: 80, column: 20, scope: !7)
!80 = !DILocation(line: 81, column: 28, scope: !7)
!81 = !DILocation(line: 82, column: 20, scope: !7)
!82 = !DILocation(line: 86, column: 35, scope: !7)
!83 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !84)
!84 = !DILocation(line: 87, column: 26, scope: !7)
!85 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !84)
!86 = !DILocation(line: 88, column: 20, scope: !7)
!87 = !DILocation(line: 89, column: 20, scope: !7)
!88 = !DILocation(line: 90, column: 20, scope: !7)
!89 = !DILocation(line: 92, column: 35, scope: !7)
!90 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !91)
!91 = !DILocation(line: 93, column: 26, scope: !7)
!92 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !91)
!93 = !DILocation(line: 94, column: 20, scope: !7)
!94 = !DILocation(line: 95, column: 20, scope: !7)
!95 = !DILocation(line: 96, column: 28, scope: !7)
!96 = !DILocation(line: 97, column: 20, scope: !7)
!97 = !DILocation(line: 101, column: 35, scope: !7)
!98 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !99)
!99 = !DILocation(line: 102, column: 26, scope: !7)
!100 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !99)
!101 = !DILocation(line: 103, column: 20, scope: !7)
!102 = !DILocation(line: 104, column: 20, scope: !7)
!103 = !DILocation(line: 105, column: 20, scope: !7)
!104 = !DILocation(line: 107, column: 35, scope: !7)
!105 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !106)
!106 = !DILocation(line: 108, column: 26, scope: !7)
!107 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !106)
!108 = !DILocation(line: 109, column: 20, scope: !7)
!109 = !DILocation(line: 110, column: 20, scope: !7)
!110 = !DILocation(line: 111, column: 28, scope: !7)
!111 = !DILocation(line: 125, column: 22, scope: !7)
!112 = !DILocation(line: 126, column: 22, scope: !7)
!113 = !DILocation(line: 127, column: 22, scope: !7)
!114 = !DILocation(line: 132, column: 37, scope: !7)
!115 = !DILocation(line: 131, column: 21, scope: !7)
!116 = !DILocation(line: 142, column: 22, scope: !7)
!117 = !DILocation(line: 133, column: 22, scope: !7)
!118 = !DILocation(line: 136, column: 37, scope: !7)
!119 = !DILocation(line: 135, column: 21, scope: !7)
!120 = !DILocation(line: 137, column: 22, scope: !7)
!121 = !DILocation(line: 140, column: 38, scope: !7)
!122 = !DILocation(line: 139, column: 22, scope: !7)
!123 = !DILocation(line: 141, column: 22, scope: !7)
!124 = !DILocation(line: 144, column: 38, scope: !7)
!125 = !DILocation(line: 143, column: 22, scope: !7)
!126 = !DILocation(line: 145, column: 22, scope: !7)
!127 = !DILocation(line: 146, column: 47, scope: !7)
!128 = !DILocation(line: 147, column: 4, scope: !7)
!129 = !DILocation(line: 148, column: 28, scope: !7)
!130 = !DILocation(line: 148, column: 40, scope: !7)
!131 = !DILocation(line: 149, column: 48, scope: !7)
!132 = !DILocation(line: 150, column: 4, scope: !7)
!133 = !DILocation(line: 151, column: 28, scope: !7)
!134 = !DILocation(line: 151, column: 40, scope: !7)
!135 = !DILocation(line: 152, column: 48, scope: !7)
!136 = !DILocation(line: 153, column: 4, scope: !7)
!137 = !DILocation(line: 154, column: 28, scope: !7)
!138 = !DILocation(line: 154, column: 40, scope: !7)
!139 = !DILocation(line: 155, column: 48, scope: !7)
!140 = !DILocation(line: 156, column: 4, scope: !7)
!141 = !DILocation(line: 157, column: 28, scope: !7)
!142 = !DILocation(line: 157, column: 40, scope: !7)
!143 = !DILocation(line: 158, column: 28, scope: !7)
!144 = !DILocation(line: 158, column: 49, scope: !7)
!145 = !DILocation(line: 159, column: 25, scope: !7)
!146 = !DILocation(line: 159, column: 37, scope: !7)
!147 = !DILocation(line: 160, column: 25, scope: !7)
!148 = !DILocation(line: 160, column: 37, scope: !7)
!149 = !DILocation(line: 161, column: 25, scope: !7)
!150 = !DILocation(line: 161, column: 37, scope: !7)
!151 = !DILocation(line: 162, column: 25, scope: !7)
!152 = !DILocation(line: 162, column: 37, scope: !7)
!153 = !DILocation(line: 162, column: 4, scope: !7)
