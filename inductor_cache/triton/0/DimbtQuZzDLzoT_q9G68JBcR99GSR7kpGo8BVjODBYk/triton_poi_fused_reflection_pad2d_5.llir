; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_reflection_pad2d_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = srem i32 %13, 256, !dbg !14
  %18 = srem i32 %14, 256, !dbg !14
  %19 = srem i32 %15, 256, !dbg !14
  %20 = srem i32 %16, 256, !dbg !14
  %21 = sdiv i32 %13, 9216, !dbg !15
  %22 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !16
  %23 = shufflevector <2 x i32> %22, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !16
  %24 = sdiv <2 x i32> %23, <i32 1536, i32 256>, !dbg !16
  %25 = srem <2 x i32> %24, splat (i32 6), !dbg !17
  %26 = add nsw <2 x i32> %25, splat (i32 -1), !dbg !18
  %27 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %26, i1 true), !dbg !19
  %28 = add nsw <2 x i32> %27, splat (i32 -3), !dbg !20
  %29 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %28, i1 true), !dbg !21
  %30 = mul nsw <2 x i32> %29, <i32 -1024, i32 -256>, !dbg !22
  %31 = shl nsw i32 %21, 12, !dbg !23
  %32 = or disjoint i32 %31, 3840, !dbg !24
  %33 = add nsw i32 %32, %17, !dbg !25
  %34 = extractelement <2 x i32> %30, i64 0, !dbg !26
  %35 = add i32 %33, %34, !dbg !26
  %36 = extractelement <2 x i32> %30, i64 1, !dbg !27
  %37 = add i32 %35, %36, !dbg !27
  %38 = add nsw i32 %32, %18, !dbg !25
  %39 = add i32 %38, %34, !dbg !26
  %40 = add i32 %39, %36, !dbg !27
  %41 = add nsw i32 %32, %19, !dbg !25
  %42 = add i32 %41, %34, !dbg !26
  %43 = add i32 %42, %36, !dbg !27
  %44 = add nsw i32 %32, %20, !dbg !25
  %45 = add i32 %44, %34, !dbg !26
  %46 = add i32 %45, %36, !dbg !27
  %47 = sext i32 %37 to i64, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !28
  %49 = sext i32 %40 to i64, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !28
  %51 = sext i32 %43 to i64, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !28
  %53 = sext i32 %46 to i64, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !28
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #2, !dbg !29
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #2, !dbg !29
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #2, !dbg !29
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #2, !dbg !29
  %59 = shl nsw i32 %21, 8, !dbg !30
  %60 = add nsw i32 %59, %17, !dbg !31
  %61 = sext i32 %60 to i64, !dbg !32
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !32
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #2, !dbg !33
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !33
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !33
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !33
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !33
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !34
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #2, !dbg !35
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !35
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !35
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !35
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !35
  %74 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !36
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 true) #2, !dbg !37
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !37
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !37
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !37
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !37
  %80 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !38
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 true) #2, !dbg !39
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !39
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !39
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !39
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !39
  %86 = insertelement <4 x i32> poison, i32 %58, i64 0, !dbg !29
  %87 = insertelement <4 x i32> %86, i32 %57, i64 1, !dbg !29
  %88 = insertelement <4 x i32> %87, i32 %56, i64 2, !dbg !29
  %89 = insertelement <4 x i32> %88, i32 %55, i64 3, !dbg !29
  %90 = bitcast <4 x i32> %89 to <4 x float>, !dbg !29
  %91 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !33
  %92 = insertelement <4 x i32> %91, i32 %66, i64 1, !dbg !33
  %93 = insertelement <4 x i32> %92, i32 %65, i64 2, !dbg !33
  %94 = insertelement <4 x i32> %93, i32 %64, i64 3, !dbg !33
  %95 = bitcast <4 x i32> %94 to <4 x float>, !dbg !33
  %96 = insertelement <4 x i32> poison, i32 %73, i64 0, !dbg !35
  %97 = insertelement <4 x i32> %96, i32 %72, i64 1, !dbg !35
  %98 = insertelement <4 x i32> %97, i32 %71, i64 2, !dbg !35
  %99 = insertelement <4 x i32> %98, i32 %70, i64 3, !dbg !35
  %100 = bitcast <4 x i32> %99 to <4 x float>, !dbg !35
  %101 = insertelement <4 x i32> poison, i32 %79, i64 0, !dbg !37
  %102 = insertelement <4 x i32> %101, i32 %78, i64 1, !dbg !37
  %103 = insertelement <4 x i32> %102, i32 %77, i64 2, !dbg !37
  %104 = insertelement <4 x i32> %103, i32 %76, i64 3, !dbg !37
  %105 = bitcast <4 x i32> %104 to <4 x float>, !dbg !37
  %106 = insertelement <4 x i32> poison, i32 %85, i64 0, !dbg !39
  %107 = insertelement <4 x i32> %106, i32 %84, i64 1, !dbg !39
  %108 = insertelement <4 x i32> %107, i32 %83, i64 2, !dbg !39
  %109 = insertelement <4 x i32> %108, i32 %82, i64 3, !dbg !39
  %110 = bitcast <4 x i32> %109 to <4 x float>, !dbg !39
  %111 = fsub <4 x float> %90, %95, !dbg !40
  %112 = fmul <4 x float> %111, %100, !dbg !41
  %113 = fmul <4 x float> %112, %105, !dbg !42
  %114 = fadd <4 x float> %113, %110, !dbg !43
  %115 = fcmp olt <4 x float> %114, zeroinitializer, !dbg !44
  %116 = extractelement <4 x i1> %115, i64 3, !dbg !48
  %117 = extractelement <4 x i1> %115, i64 2, !dbg !48
  %118 = extractelement <4 x i1> %115, i64 1, !dbg !48
  %119 = extractelement <4 x i1> %115, i64 0, !dbg !48
  %120 = sext i32 %13 to i64, !dbg !49
  %121 = getelementptr float, ptr addrspace(1) %5, i64 %120, !dbg !49
  %bc = bitcast <4 x float> %114 to <4 x i32>, !dbg !50
  %122 = extractelement <4 x i32> %bc, i64 3, !dbg !50
  %123 = select i1 %116, i32 0, i32 %122, !dbg !48
  %bc1 = bitcast <4 x float> %114 to <4 x i32>, !dbg !50
  %124 = extractelement <4 x i32> %bc1, i64 2, !dbg !50
  %125 = select i1 %117, i32 0, i32 %124, !dbg !48
  %bc2 = bitcast <4 x float> %114 to <4 x i32>, !dbg !50
  %126 = extractelement <4 x i32> %bc2, i64 1, !dbg !50
  %127 = select i1 %118, i32 0, i32 %126, !dbg !48
  %bc3 = bitcast <4 x float> %114 to <4 x i32>, !dbg !50
  %128 = extractelement <4 x i32> %bc3, i64 0, !dbg !50
  %129 = select i1 %119, i32 0, i32 %128, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %123, i32 %125, i32 %127, i32 %129, ptr addrspace(1) %121, i1 true) #2, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i32> @llvm.abs.v2i32(<2 x i32>, i1 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuqvud2ameajmyqjspb33zd74huhoahfl3d6lnlhz7jhiuv32ar2.py", directory: "inductor_cache/uq")
!4 = !{ptr @triton_poi_fused_reflection_pad2d_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_reflection_pad2d_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_reflection_pad2d_5", linkageName: "triton_poi_fused_reflection_pad2d_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 29, scope: !7)
!18 = !DILocation(line: 29, column: 89, scope: !7)
!19 = !DILocation(line: 29, column: 82, scope: !7)
!20 = !DILocation(line: 29, column: 70, scope: !7)
!21 = !DILocation(line: 29, column: 63, scope: !7)
!22 = !DILocation(line: 29, column: 51, scope: !7)
!23 = !DILocation(line: 29, column: 156, scope: !7)
!24 = !DILocation(line: 29, column: 37, scope: !7)
!25 = !DILocation(line: 29, column: 43, scope: !7)
!26 = !DILocation(line: 29, column: 98, scope: !7)
!27 = !DILocation(line: 29, column: 151, scope: !7)
!28 = !DILocation(line: 29, column: 30, scope: !7)
!29 = !DILocation(line: 29, column: 161, scope: !7)
!30 = !DILocation(line: 30, column: 39, scope: !7)
!31 = !DILocation(line: 30, column: 35, scope: !7)
!32 = !DILocation(line: 30, column: 30, scope: !7)
!33 = !DILocation(line: 30, column: 44, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 44, scope: !7)
!36 = !DILocation(line: 32, column: 30, scope: !7)
!37 = !DILocation(line: 32, column: 44, scope: !7)
!38 = !DILocation(line: 33, column: 30, scope: !7)
!39 = !DILocation(line: 33, column: 44, scope: !7)
!40 = !DILocation(line: 34, column: 18, scope: !7)
!41 = !DILocation(line: 35, column: 18, scope: !7)
!42 = !DILocation(line: 36, column: 18, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 39, column: 41, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 40, column: 25, scope: !7)
!50 = !DILocation(line: 40, column: 37, scope: !7)
!51 = !DILocation(line: 40, column: 4, scope: !7)
