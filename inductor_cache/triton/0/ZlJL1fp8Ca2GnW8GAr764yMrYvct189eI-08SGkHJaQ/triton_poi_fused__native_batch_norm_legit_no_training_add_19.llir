; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %16 = or disjoint i32 %14, 2, !dbg !13
  %17 = or disjoint i32 %14, 3, !dbg !13
  %18 = or disjoint i32 %14, 512, !dbg !13
  %19 = or disjoint i32 %14, 513, !dbg !13
  %20 = or disjoint i32 %14, 514, !dbg !13
  %21 = or disjoint i32 %14, 515, !dbg !13
  %22 = icmp slt i32 %14, 165888, !dbg !14
  %23 = icmp slt i32 %18, 165888, !dbg !14
  %24 = sdiv i32 %14, 81, !dbg !15
  %25 = sdiv i32 %15, 81, !dbg !15
  %26 = sdiv i32 %16, 81, !dbg !15
  %27 = sdiv i32 %17, 81, !dbg !15
  %28 = sdiv i32 %18, 81, !dbg !15
  %29 = sdiv i32 %19, 81, !dbg !15
  %30 = sdiv i32 %20, 81, !dbg !15
  %31 = sdiv i32 %21, 81, !dbg !15
  %32 = srem i32 %24, 512, !dbg !16
  %33 = srem i32 %25, 512, !dbg !16
  %34 = srem i32 %26, 512, !dbg !16
  %35 = srem i32 %27, 512, !dbg !16
  %36 = srem i32 %28, 512, !dbg !16
  %37 = srem i32 %29, 512, !dbg !16
  %38 = srem i32 %30, 512, !dbg !16
  %39 = srem i32 %31, 512, !dbg !16
  %40 = sext i32 %14 to i64, !dbg !17
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !17
  %42 = sext i32 %18 to i64, !dbg !17
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !17
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %22) #3, !dbg !18
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %23) #3, !dbg !18
  %46 = sext i32 %32 to i64, !dbg !19
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !19
  %48 = sext i32 %33 to i64, !dbg !19
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !19
  %50 = sext i32 %34 to i64, !dbg !19
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !19
  %52 = sext i32 %35 to i64, !dbg !19
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !19
  %54 = sext i32 %36 to i64, !dbg !19
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !19
  %56 = sext i32 %37 to i64, !dbg !19
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !19
  %58 = sext i32 %38 to i64, !dbg !19
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !19
  %60 = sext i32 %39 to i64, !dbg !19
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !19
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %22) #3, !dbg !20
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %22) #3, !dbg !20
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %22) #3, !dbg !20
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %22) #3, !dbg !20
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %23) #3, !dbg !20
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %23) #3, !dbg !20
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %23) #3, !dbg !20
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %23) #3, !dbg !20
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !21
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !21
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !21
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !21
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !21
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !21
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !21
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !21
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %22) #3, !dbg !22
  %79 = bitcast i32 %78 to float, !dbg !22
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %22) #3, !dbg !22
  %81 = bitcast i32 %80 to float, !dbg !22
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %22) #3, !dbg !22
  %83 = bitcast i32 %82 to float, !dbg !22
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %22) #3, !dbg !22
  %85 = bitcast i32 %84 to float, !dbg !22
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %23) #3, !dbg !22
  %87 = bitcast i32 %86 to float, !dbg !22
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %23) #3, !dbg !22
  %89 = bitcast i32 %88 to float, !dbg !22
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %23) #3, !dbg !22
  %91 = bitcast i32 %90 to float, !dbg !22
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %23) #3, !dbg !22
  %93 = bitcast i32 %92 to float, !dbg !22
  %94 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !23
  %95 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !23
  %96 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !23
  %97 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !23
  %98 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !23
  %99 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !23
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !23
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !23
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %22) #3, !dbg !24
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %22) #3, !dbg !24
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %22) #3, !dbg !24
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %22) #3, !dbg !24
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %23) #3, !dbg !24
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %23) #3, !dbg !24
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %23) #3, !dbg !24
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %23) #3, !dbg !24
  %110 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !25
  %111 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !25
  %112 = getelementptr float, ptr addrspace(1) %4, i64 %50, !dbg !25
  %113 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !25
  %114 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !25
  %115 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !25
  %116 = getelementptr float, ptr addrspace(1) %4, i64 %58, !dbg !25
  %117 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !25
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %22) #3, !dbg !26
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %22) #3, !dbg !26
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %22) #3, !dbg !26
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %22) #3, !dbg !26
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %23) #3, !dbg !26
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %23) #3, !dbg !26
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %23) #3, !dbg !26
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %23) #3, !dbg !26
  %126 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !27
  %127 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !27
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %126, i1 %22) #3, !dbg !28
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %127, i1 %23) #3, !dbg !28
  %130 = fadd float %79, 0x3EE4F8B580000000, !dbg !29
  %131 = fadd float %81, 0x3EE4F8B580000000, !dbg !29
  %132 = fadd float %83, 0x3EE4F8B580000000, !dbg !29
  %133 = fadd float %85, 0x3EE4F8B580000000, !dbg !29
  %134 = fadd float %87, 0x3EE4F8B580000000, !dbg !29
  %135 = fadd float %89, 0x3EE4F8B580000000, !dbg !29
  %136 = fadd float %91, 0x3EE4F8B580000000, !dbg !29
  %137 = fadd float %93, 0x3EE4F8B580000000, !dbg !29
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %138, 0, !dbg !30
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %139, 0, !dbg !30
  br i1 %.not.i, label %145, label %140, !dbg !30

140:                                              ; preds = %8
  br i1 %.not1.i, label %143, label %141, !dbg !30

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

145:                                              ; preds = %8
  br i1 %.not1.i, label %148, label %146, !dbg !30

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %141, %143, %146, %148
  %.0.i = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !30
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %150, 0, !dbg !30
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %151, 0, !dbg !30
  br i1 %.not.i1, label %157, label %152, !dbg !30

152:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %155, label %153, !dbg !30

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

157:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %160, label %158, !dbg !30

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %153, %155, %158, %160
  %.0.i3 = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !30
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %162, 0, !dbg !30
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %163, 0, !dbg !30
  br i1 %.not.i6, label %169, label %164, !dbg !30

164:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %167, label %165, !dbg !30

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

169:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %172, label %170, !dbg !30

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %165, %167, %170, %172
  %.0.i8 = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !30
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %174, 0, !dbg !30
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %175, 0, !dbg !30
  br i1 %.not.i11, label %181, label %176, !dbg !30

176:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %179, label %177, !dbg !30

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %133) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %133) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

181:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %184, label %182, !dbg !30

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.f(float %133) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.f(float %133) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %177, %179, %182, %184
  %.0.i13 = phi float [ %178, %177 ], [ %180, %179 ], [ %183, %182 ], [ %185, %184 ], !dbg !30
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i16 = icmp eq i32 %186, 0, !dbg !30
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i19 = icmp eq i32 %187, 0, !dbg !30
  br i1 %.not.i16, label %193, label %188, !dbg !30

188:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %191, label %189, !dbg !30

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %134) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %134) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

193:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %196, label %194, !dbg !30

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.f(float %134) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.f(float %134) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

__nv_sqrtf.exit20:                                ; preds = %189, %191, %194, %196
  %.0.i18 = phi float [ %190, %189 ], [ %192, %191 ], [ %195, %194 ], [ %197, %196 ], !dbg !30
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i21 = icmp eq i32 %198, 0, !dbg !30
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i24 = icmp eq i32 %199, 0, !dbg !30
  br i1 %.not.i21, label %205, label %200, !dbg !30

200:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %203, label %201, !dbg !30

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

205:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %208, label %206, !dbg !30

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

__nv_sqrtf.exit25:                                ; preds = %201, %203, %206, %208
  %.0.i23 = phi float [ %202, %201 ], [ %204, %203 ], [ %207, %206 ], [ %209, %208 ], !dbg !30
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i26 = icmp eq i32 %210, 0, !dbg !30
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i29 = icmp eq i32 %211, 0, !dbg !30
  br i1 %.not.i26, label %217, label %212, !dbg !30

212:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %215, label %213, !dbg !30

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %136) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %136) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

217:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %220, label %218, !dbg !30

218:                                              ; preds = %217
  %219 = tail call float @llvm.nvvm.sqrt.rn.f(float %136) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

220:                                              ; preds = %217
  %221 = tail call float @llvm.nvvm.sqrt.approx.f(float %136) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

__nv_sqrtf.exit30:                                ; preds = %213, %215, %218, %220
  %.0.i28 = phi float [ %214, %213 ], [ %216, %215 ], [ %219, %218 ], [ %221, %220 ], !dbg !30
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i31 = icmp eq i32 %222, 0, !dbg !30
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i34 = icmp eq i32 %223, 0, !dbg !30
  br i1 %.not.i31, label %229, label %224, !dbg !30

224:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %227, label %225, !dbg !30

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

229:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %232, label %230, !dbg !30

230:                                              ; preds = %229
  %231 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

232:                                              ; preds = %229
  %233 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

__nv_sqrtf.exit35:                                ; preds = %225, %227, %230, %232
  %.0.i33 = phi float [ %226, %225 ], [ %228, %227 ], [ %231, %230 ], [ %233, %232 ], !dbg !30
  %234 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !18
  %235 = bitcast i32 %234 to float, !dbg !18
  %236 = bitcast i32 %69 to float, !dbg !20
  %237 = fsub float %235, %236, !dbg !31
  %238 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !18
  %239 = bitcast i32 %238 to float, !dbg !18
  %240 = bitcast i32 %68 to float, !dbg !20
  %241 = fsub float %239, %240, !dbg !31
  %242 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !18
  %243 = bitcast i32 %242 to float, !dbg !18
  %244 = bitcast i32 %67 to float, !dbg !20
  %245 = fsub float %243, %244, !dbg !31
  %246 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !18
  %247 = bitcast i32 %246 to float, !dbg !18
  %248 = bitcast i32 %66 to float, !dbg !20
  %249 = fsub float %247, %248, !dbg !31
  %250 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !18
  %251 = bitcast i32 %250 to float, !dbg !18
  %252 = bitcast i32 %65 to float, !dbg !20
  %253 = fsub float %251, %252, !dbg !31
  %254 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !18
  %255 = bitcast i32 %254 to float, !dbg !18
  %256 = bitcast i32 %64 to float, !dbg !20
  %257 = fsub float %255, %256, !dbg !31
  %258 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !18
  %259 = bitcast i32 %258 to float, !dbg !18
  %260 = bitcast i32 %63 to float, !dbg !20
  %261 = fsub float %259, %260, !dbg !31
  %262 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !18
  %263 = bitcast i32 %262 to float, !dbg !18
  %264 = bitcast i32 %62 to float, !dbg !20
  %265 = fsub float %263, %264, !dbg !31
  %266 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !28
  %267 = bitcast i32 %266 to float, !dbg !28
  %268 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !28
  %269 = bitcast i32 %268 to float, !dbg !28
  %270 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !28
  %271 = bitcast i32 %270 to float, !dbg !28
  %272 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !28
  %273 = bitcast i32 %272 to float, !dbg !28
  %274 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !28
  %275 = bitcast i32 %274 to float, !dbg !28
  %276 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !28
  %277 = bitcast i32 %276 to float, !dbg !28
  %278 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !28
  %279 = bitcast i32 %278 to float, !dbg !28
  %280 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !28
  %281 = bitcast i32 %280 to float, !dbg !28
  %282 = bitcast i32 %125 to float, !dbg !26
  %283 = bitcast i32 %124 to float, !dbg !26
  %284 = bitcast i32 %123 to float, !dbg !26
  %285 = bitcast i32 %122 to float, !dbg !26
  %286 = bitcast i32 %121 to float, !dbg !26
  %287 = bitcast i32 %120 to float, !dbg !26
  %288 = bitcast i32 %119 to float, !dbg !26
  %289 = bitcast i32 %118 to float, !dbg !26
  %290 = bitcast i32 %109 to float, !dbg !24
  %291 = bitcast i32 %108 to float, !dbg !24
  %292 = bitcast i32 %107 to float, !dbg !24
  %293 = bitcast i32 %106 to float, !dbg !24
  %294 = bitcast i32 %105 to float, !dbg !24
  %295 = bitcast i32 %104 to float, !dbg !24
  %296 = bitcast i32 %103 to float, !dbg !24
  %297 = bitcast i32 %102 to float, !dbg !24
  %298 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !32
  %300 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !32
  %301 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !32
  %302 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !32
  %303 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !32
  %304 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !32
  %305 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !32
  %306 = fmul float %265, %298, !dbg !33
  %307 = fmul float %261, %299, !dbg !33
  %308 = fmul float %257, %300, !dbg !33
  %309 = fmul float %253, %301, !dbg !33
  %310 = fmul float %249, %302, !dbg !33
  %311 = fmul float %245, %303, !dbg !33
  %312 = fmul float %241, %304, !dbg !33
  %313 = fmul float %237, %305, !dbg !33
  %314 = fmul float %306, %297, !dbg !34
  %315 = fmul float %307, %296, !dbg !34
  %316 = fmul float %308, %295, !dbg !34
  %317 = fmul float %309, %294, !dbg !34
  %318 = fmul float %310, %293, !dbg !34
  %319 = fmul float %311, %292, !dbg !34
  %320 = fmul float %312, %291, !dbg !34
  %321 = fmul float %313, %290, !dbg !34
  %322 = fadd float %314, %289, !dbg !35
  %323 = fadd float %315, %288, !dbg !35
  %324 = fadd float %316, %287, !dbg !35
  %325 = fadd float %317, %286, !dbg !35
  %326 = fadd float %318, %285, !dbg !35
  %327 = fadd float %319, %284, !dbg !35
  %328 = fadd float %320, %283, !dbg !35
  %329 = fadd float %321, %282, !dbg !35
  %330 = fadd float %322, %281, !dbg !36
  %331 = fadd float %323, %279, !dbg !36
  %332 = fadd float %324, %277, !dbg !36
  %333 = fadd float %325, %275, !dbg !36
  %334 = fadd float %326, %273, !dbg !36
  %335 = fadd float %327, %271, !dbg !36
  %336 = fadd float %328, %269, !dbg !36
  %337 = fadd float %329, %267, !dbg !36
  %338 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !37
  %339 = getelementptr float, ptr addrspace(1) %6, i64 %42, !dbg !37
  %340 = bitcast float %330 to i32, !dbg !38
  %341 = bitcast float %331 to i32, !dbg !38
  %342 = bitcast float %332 to i32, !dbg !38
  %343 = bitcast float %333 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %340, i32 %341, i32 %342, i32 %343, ptr addrspace(1) %338, i1 %22) #3, !dbg !38
  %344 = bitcast float %334 to i32, !dbg !38
  %345 = bitcast float %335 to i32, !dbg !38
  %346 = bitcast float %336 to i32, !dbg !38
  %347 = bitcast float %337 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %344, i32 %345, i32 %346, i32 %347, ptr addrspace(1) %339, i1 %23) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxhyfmnus5r3k62wjaleibcu6y2nfaw42oxpk62soq25evppzwow.py", directory: "inductor_cache/xh")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_19", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 26, scope: !7)
!31 = !DILocation(line: 32, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 19, scope: !7)
!34 = !DILocation(line: 41, column: 20, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 43, column: 20, scope: !7)
!37 = !DILocation(line: 44, column: 25, scope: !7)
!38 = !DILocation(line: 44, column: 37, scope: !7)
!39 = !DILocation(line: 44, column: 4, scope: !7)
