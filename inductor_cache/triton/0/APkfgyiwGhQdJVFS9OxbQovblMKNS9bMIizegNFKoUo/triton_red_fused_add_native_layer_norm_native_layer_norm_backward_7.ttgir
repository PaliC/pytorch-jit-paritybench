#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 2], order = [0, 1]}>
#loc = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":19:0)
#loc1 = loc(unknown)
#loc44 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":49:41)
#loc80 = loc(callsite(#loc1 at #loc44))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_7(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x8xf32, #blocked> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x8xf32, #blocked1> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<144> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<144> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<128> : tensor<1x8xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<128> : tensor<1x8xi32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<36> : tensor<1x8xi32, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<4608> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_9 = arith.constant dense<128> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<0.000000e+00> : tensor<1x8xf32, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<1.000000e+00> : tensor<64x8xf32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<7.812500e-03> : tensor<64x1xf32, #blocked1> loc(#loc1)
    %cst_13 = arith.constant dense<9.99999974E-6> : tensor<64x1xf32, #blocked1> loc(#loc1)
    %cst_14 = arith.constant dense<1.280000e+02> : tensor<64x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<64x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<64x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_2 : tensor<64x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_3 : tensor<64x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc7)
    %14 = tt.expand_dims %12 {axis = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc7)
    %15 = tt.expand_dims %13 {axis = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x8xi32, #blocked1> loc(#loc7)
    %16 = arith.remsi %9, %cst_4 : tensor<64x1xi32, #blocked1> loc(#loc8)
    %17 = arith.divsi %9, %cst_4 : tensor<64x1xi32, #blocked1> loc(#loc9)
    %18 = tt.broadcast %17 : tensor<64x1xi32, #blocked1> -> tensor<64x8xi32, #blocked1> loc(#loc10)
    %19 = arith.muli %16, %cst_8 : tensor<64x1xi32, #blocked1> loc(#loc11)
    %20 = tt.broadcast %19 : tensor<64x1xi32, #blocked1> -> tensor<64x8xi32, #blocked1> loc(#loc12)
    %21 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>, #blocked1> loc(#loc13)
    %22 = tt.broadcast %10 : tensor<64x1xi1, #blocked> -> tensor<64x8xi1, #blocked> loc(#loc14)
    %23 = tt.broadcast %11 : tensor<64x1xi1, #blocked1> -> tensor<64x8xi1, #blocked1> loc(#loc14)
    %24 = arith.muli %8, %cst_9 : tensor<64x1xi32, #blocked> loc(#loc15)
    %25 = tt.broadcast %24 : tensor<64x1xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc16)
    %26 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>, #blocked> loc(#loc17)
    %27 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc18)
    %28:3 = scf.for %arg8 = %c0_i32 to %c128_i32 step %c8_i32 iter_args(%arg9 = %cst, %arg10 = %cst, %arg11 = %cst) -> (tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked>)  : i32 {
      %46 = tt.splat %arg8 : i32 -> tensor<1x8xi32, #blocked> loc(#loc20)
      %47 = tt.splat %arg8 : i32 -> tensor<1x8xi32, #blocked1> loc(#loc20)
      %48 = arith.addi %46, %14 : tensor<1x8xi32, #blocked> loc(#loc20)
      %49 = arith.addi %47, %15 : tensor<1x8xi32, #blocked1> loc(#loc20)
      %50 = arith.cmpi slt, %48, %cst_5 : tensor<1x8xi32, #blocked> loc(#loc21)
      %51 = arith.cmpi slt, %49, %cst_6 : tensor<1x8xi32, #blocked1> loc(#loc21)
      %52 = arith.muli %49, %cst_7 : tensor<1x8xi32, #blocked1> loc(#loc22)
      %53 = tt.broadcast %52 : tensor<1x8xi32, #blocked1> -> tensor<64x8xi32, #blocked1> loc(#loc10)
      %54 = arith.addi %18, %53 : tensor<64x8xi32, #blocked1> loc(#loc10)
      %55 = arith.addi %54, %20 : tensor<64x8xi32, #blocked1> loc(#loc12)
      %56 = tt.addptr %21, %55 : tensor<64x8x!tt.ptr<f32>, #blocked1>, tensor<64x8xi32, #blocked1> loc(#loc13)
      %57 = tt.broadcast %50 : tensor<1x8xi1, #blocked> -> tensor<64x8xi1, #blocked> loc(#loc14)
      %58 = tt.broadcast %51 : tensor<1x8xi1, #blocked1> -> tensor<64x8xi1, #blocked1> loc(#loc14)
      %59 = arith.andi %57, %22 : tensor<64x8xi1, #blocked> loc(#loc14)
      %60 = arith.andi %58, %23 : tensor<64x8xi1, #blocked1> loc(#loc14)
      %61 = tt.load %56, %60, %cst_1 evictionPolicy = evict_last : tensor<64x8x!tt.ptr<f32>, #blocked1> loc(#loc23)
      %62 = triton_gpu.convert_layout %61 : tensor<64x8xf32, #blocked1> -> tensor<64x8xf32, #blocked> loc(#loc23)
      %63 = tt.broadcast %48 : tensor<1x8xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc16)
      %64 = arith.addi %63, %25 : tensor<64x8xi32, #blocked> loc(#loc16)
      %65 = tt.addptr %26, %64 : tensor<64x8x!tt.ptr<f32>, #blocked>, tensor<64x8xi32, #blocked> loc(#loc17)
      %66 = tt.load %65, %59, %cst evictionPolicy = evict_first : tensor<64x8x!tt.ptr<f32>, #blocked> loc(#loc24)
      %67 = tt.addptr %27, %48 : tensor<1x8x!tt.ptr<f32>, #blocked>, tensor<1x8xi32, #blocked> loc(#loc18)
      %68 = tt.load %67, %50, %cst_10 evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc25)
      %69 = tt.broadcast %68 : tensor<1x8xf32, #blocked> -> tensor<64x8xf32, #blocked> loc(#loc26)
      %70 = arith.addf %66, %69 : tensor<64x8xf32, #blocked> loc(#loc26)
      %71 = arith.addf %62, %70 : tensor<64x8xf32, #blocked> loc(#loc27)
      %72 = arith.cmpi eq, %arg8, %c0_i32 : i32 loc(#loc28)
      %73:3 = scf.if %72 -> (tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked>) {
        scf.yield %cst, %71, %cst_11 : tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked> loc(#loc71)
      } else {
        %77 = arith.subf %71, %arg9 : tensor<64x8xf32, #blocked> loc(#loc72)
        %78 = arith.addf %arg11, %cst_11 : tensor<64x8xf32, #blocked> loc(#loc73)
        %79 = arith.divf %77, %78 : tensor<64x8xf32, #blocked> loc(#loc74)
        %80 = arith.addf %arg9, %79 : tensor<64x8xf32, #blocked> loc(#loc75)
        %81 = arith.subf %71, %80 : tensor<64x8xf32, #blocked> loc(#loc76)
        %82 = arith.mulf %77, %81 : tensor<64x8xf32, #blocked> loc(#loc77)
        %83 = arith.addf %arg10, %82 : tensor<64x8xf32, #blocked> loc(#loc78)
        scf.yield %83, %80, %78 : tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked> loc(#loc78)
      } loc(#loc70)
      %74 = arith.select %59, %73#1, %arg9 : tensor<64x8xi1, #blocked>, tensor<64x8xf32, #blocked> loc(#loc39)
      %75 = arith.select %59, %73#0, %arg10 : tensor<64x8xi1, #blocked>, tensor<64x8xf32, #blocked> loc(#loc40)
      %76 = arith.select %59, %73#2, %arg11 : tensor<64x8xi1, #blocked>, tensor<64x8xf32, #blocked> loc(#loc41)
      scf.yield %74, %75, %76 : tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked> loc(#loc42)
    } loc(#loc19)
    %29:3 = "tt.reduce"(%28#0, %28#1, %28#2) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc44)), %arg9: f32 loc(callsite(#loc1 at #loc44)), %arg10: f32 loc(callsite(#loc1 at #loc44)), %arg11: f32 loc(callsite(#loc1 at #loc44)), %arg12: f32 loc(callsite(#loc1 at #loc44)), %arg13: f32 loc(callsite(#loc1 at #loc44))):
      %46 = arith.subf %arg11, %arg8 : f32 loc(#loc93)
      %47 = arith.addf %arg10, %arg13 : f32 loc(#loc94)
      %48 = arith.cmpf oeq, %47, %cst_0 : f32 loc(#loc95)
      %49 = arith.divf %arg13, %47 : f32 loc(#loc96)
      %50 = arith.select %48, %cst_0, %49 : f32 loc(#loc97)
      %51 = arith.mulf %46, %50 : f32 loc(#loc98)
      %52 = arith.addf %arg8, %51 : f32 loc(#loc99)
      %53 = arith.addf %arg9, %arg12 : f32 loc(#loc100)
      %54 = arith.mulf %46, %46 : f32 loc(#loc101)
      %55 = arith.mulf %54, %arg10 : f32 loc(#loc102)
      %56 = arith.mulf %55, %50 : f32 loc(#loc103)
      %57 = arith.addf %53, %56 : f32 loc(#loc104)
      tt.reduce.return %52, %57, %47 : f32, f32, f32 loc(#loc79)
    }) : (tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked>) -> (tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc79)
    %30 = triton_gpu.convert_layout %29#0 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc57)
    %31 = tt.expand_dims %30 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xf32, #blocked1> loc(#loc57)
    %32 = triton_gpu.convert_layout %29#1 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc58)
    %33 = tt.expand_dims %32 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xf32, #blocked1> loc(#loc58)
    %34 = triton_gpu.convert_layout %29#1 {fastmath = #arith.fastmath<none>} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc59)
    %35 = tt.expand_dims %34 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xf32, #blocked1> loc(#loc58)
    %36 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc60)
    %37 = tt.addptr %36, %9 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc60)
    tt.store %37, %31, %11 : tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc61)
    %38 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc62)
    %39 = tt.addptr %38, %9 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc62)
    tt.store %39, %33, %11 : tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc63)
    %40 = arith.divf %35, %cst_14 : tensor<64x1xf32, #blocked1> loc(#loc64)
    %41 = arith.addf %40, %cst_13 : tensor<64x1xf32, #blocked1> loc(#loc65)
    %42 = tt.extern_elementwise %41 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<64x1xf32, #blocked1>) -> tensor<64x1xf32, #blocked1> loc(#loc66)
    %43 = arith.mulf %42, %cst_12 : tensor<64x1xf32, #blocked1> loc(#loc59)
    %44 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc67)
    %45 = tt.addptr %44, %9 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc67)
    tt.store %45, %43, %11 : tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc68)
    tt.return loc(#loc69)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":22:28)
#loc3 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":22:33)
#loc4 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":23:44)
#loc5 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":23:23)
#loc6 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":24:21)
#loc7 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":25:33)
#loc8 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":26:19)
#loc9 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":27:19)
#loc10 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":36:39)
#loc11 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":36:52)
#loc12 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":36:47)
#loc13 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":36:34)
#loc14 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":36:65)
#loc15 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":37:43)
#loc16 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":37:39)
#loc17 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":37:34)
#loc18 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":38:34)
#loc19 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":32:36)
#loc20 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":33:27)
#loc21 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":34:25)
#loc22 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":36:42)
#loc23 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":36:57)
#loc24 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":37:48)
#loc25 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":38:39)
#loc26 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":39:22)
#loc27 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":40:22)
#loc28 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":43:62)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":178:7)
#loc30 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":43:51)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":181:31)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":183:24)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":184:30)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:34)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:26)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:39)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:31)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:22)
#loc39 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":45:60)
#loc40 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":46:56)
#loc41 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":47:64)
#loc42 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":47:8)
#loc43 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc45 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc46 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc47 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc48 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc49 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc50 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc51 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc52 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc53 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc54 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc55 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc56 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc57 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":51:20)
#loc58 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":52:20)
#loc59 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":62:20)
#loc60 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":54:25)
#loc61 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":54:36)
#loc62 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":55:25)
#loc63 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":55:36)
#loc64 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":57:19)
#loc65 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":59:20)
#loc66 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":60:28)
#loc67 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":63:25)
#loc68 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":63:37)
#loc69 = loc("inductor_cache/oc/coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py":63:4)
#loc70 = loc(callsite(#loc29 at #loc30))
#loc71 = loc(callsite(#loc31 at #loc30))
#loc72 = loc(callsite(#loc32 at #loc30))
#loc73 = loc(callsite(#loc33 at #loc30))
#loc74 = loc(callsite(#loc34 at #loc30))
#loc75 = loc(callsite(#loc35 at #loc30))
#loc76 = loc(callsite(#loc36 at #loc30))
#loc77 = loc(callsite(#loc37 at #loc30))
#loc78 = loc(callsite(#loc38 at #loc30))
#loc79 = loc(callsite(#loc43 at #loc44))
#loc81 = loc(callsite(#loc45 at #loc43))
#loc82 = loc(callsite(#loc46 at #loc43))
#loc83 = loc(callsite(#loc47 at #loc43))
#loc84 = loc(callsite(#loc48 at #loc43))
#loc85 = loc(callsite(#loc49 at #loc43))
#loc86 = loc(callsite(#loc50 at #loc43))
#loc87 = loc(callsite(#loc51 at #loc43))
#loc88 = loc(callsite(#loc52 at #loc43))
#loc89 = loc(callsite(#loc53 at #loc43))
#loc90 = loc(callsite(#loc54 at #loc43))
#loc91 = loc(callsite(#loc55 at #loc43))
#loc92 = loc(callsite(#loc56 at #loc43))
#loc93 = loc(callsite(#loc81 at #loc44))
#loc94 = loc(callsite(#loc82 at #loc44))
#loc95 = loc(callsite(#loc83 at #loc44))
#loc96 = loc(callsite(#loc84 at #loc44))
#loc97 = loc(callsite(#loc85 at #loc44))
#loc98 = loc(callsite(#loc86 at #loc44))
#loc99 = loc(callsite(#loc87 at #loc44))
#loc100 = loc(callsite(#loc88 at #loc44))
#loc101 = loc(callsite(#loc89 at #loc44))
#loc102 = loc(callsite(#loc90 at #loc44))
#loc103 = loc(callsite(#loc91 at #loc44))
#loc104 = loc(callsite(#loc92 at #loc44))
