; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 64, !dbg !12
  %13 = lshr i32 %11, 1, !dbg !12
  %14 = and i32 %13, 63, !dbg !12
  %15 = and i32 %11, 63, !dbg !12
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = or disjoint i32 %10, %15, !dbg !13
  %18 = icmp slt i32 %16, 144, !dbg !14
  %19 = icmp slt i32 %17, 144, !dbg !14
  %20 = shl i32 %11, 2, !dbg !15
  %21 = and i32 %20, 4, !dbg !15
  %.lobit = lshr exact i32 %12, 6, !dbg !15
  %.frozen = freeze i32 %17, !dbg !16
  %22 = sdiv i32 %.frozen, 4, !dbg !16
  %23 = mul i32 %22, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %24 = mul nsw i32 %.decomposed, 4608, !dbg !18
  %25 = shl i32 %16, 7, !dbg !19
  %26 = add nsw i32 %24, %22
  %27 = shl i32 %11, 3
  %28 = and i32 %27, 504
  %29 = or disjoint i32 %28, %.lobit
  %30 = and i32 %20, 252
  %31 = shl nuw nsw i32 %12, 2
  %32 = or disjoint i32 %30, %31
  %33 = lshr exact i32 %28, 1
  %34 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %33
  %35 = getelementptr inbounds float, ptr addrspace(3) %34, i32 %29
  %36 = or disjoint i32 %29, 2
  %37 = getelementptr inbounds float, ptr addrspace(3) %34, i32 %36
  %38 = or disjoint i32 %29, 4
  %39 = getelementptr inbounds float, ptr addrspace(3) %34, i32 %38
  %40 = or disjoint i32 %29, 6
  %41 = getelementptr inbounds float, ptr addrspace(3) %34, i32 %40
  %42 = lshr exact i32 %32, 1
  %43 = and i32 %42, 252
  %44 = getelementptr float, ptr addrspace(3) @global_smem, i32 %43
  %45 = getelementptr float, ptr addrspace(3) %44, i32 %32
  %46 = zext nneg i32 %21 to i64, !dbg !20
  %47 = sext i32 %25 to i64, !dbg !20
  %invariant.op = add nsw i32 %26, 72, !dbg !20
  %invariant.op60 = add nsw i32 %26, 144, !dbg !20
  %invariant.op62 = add nsw i32 %26, 216, !dbg !20
  %invariant.gep = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !20
  %48 = insertelement <4 x i1> poison, i1 %18, i64 0, !dbg !21
  %49 = shufflevector <4 x i1> %48, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !21
  br label %50, !dbg !20

50:                                               ; preds = %8, %._crit_edge
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %8 ], [ %167, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %8 ], [ %168, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %8 ], [ %169, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %8 ], [ %170, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %8 ], [ %163, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %8 ], [ %164, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %8 ], [ %165, %._crit_edge ]
  %58 = phi float [ 0.000000e+00, %8 ], [ %166, %._crit_edge ]
  %59 = phi <4 x float> [ zeroinitializer, %8 ], [ %162, %._crit_edge ]
  %60 = or disjoint i64 %indvars.iv, %46, !dbg !22
  %61 = trunc i64 %indvars.iv to i32, !dbg !23
  %62 = or disjoint i32 %.lobit, %61, !dbg !23
  %63 = mul i32 %62, 36, !dbg !23
  %64 = add i32 %26, %63, !dbg !23
  %65 = trunc i64 %indvars.iv to i32, !dbg !23
  %66 = or disjoint i32 %.lobit, %65, !dbg !23
  %67 = mul i32 %66, 36, !dbg !23
  %.reass = add i32 %67, %invariant.op
  %68 = trunc i64 %indvars.iv to i32, !dbg !23
  %69 = or disjoint i32 %.lobit, %68, !dbg !23
  %70 = mul i32 %69, 36, !dbg !23
  %.reass61 = add i32 %70, %invariant.op60
  %71 = trunc i64 %indvars.iv to i32, !dbg !23
  %72 = or disjoint i32 %.lobit, %71, !dbg !23
  %73 = mul i32 %72, 36, !dbg !23
  %.reass63 = add i32 %73, %invariant.op62
  %74 = sext i32 %64 to i64, !dbg !24
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !24
  %76 = sext i32 %.reass to i64, !dbg !24
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !24
  %78 = sext i32 %.reass61 to i64, !dbg !24
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !24
  %80 = sext i32 %.reass63 to i64, !dbg !24
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !24
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %19, i32 0, i1 %19) #5, !dbg !25
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %19, i32 0, i1 %19) #5, !dbg !25
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %19, i32 0, i1 %19) #5, !dbg !25
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %19, i32 0, i1 %19) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %86 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %35, <1 x i32> %86, i1 true) #5, !dbg !25
  %87 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %37, <1 x i32> %87, i1 true) #5, !dbg !25
  %88 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %88, i1 true) #5, !dbg !25
  %89 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %89, i1 true) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %60, !dbg !26
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !27
  %91 = load <4 x float>, ptr addrspace(3) %45, align 16, !dbg !25
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !28
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !28
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !28
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !28
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !28
  %97 = insertelement <4 x i32> poison, i32 %93, i64 0, !dbg !28
  %98 = insertelement <4 x i32> %97, i32 %94, i64 1, !dbg !28
  %99 = insertelement <4 x i32> %98, i32 %95, i64 2, !dbg !28
  %100 = insertelement <4 x i32> %99, i32 %96, i64 3, !dbg !28
  %101 = bitcast <4 x i32> %100 to <4 x float>, !dbg !28
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %90, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !29
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !29
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !29
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !29
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !29
  %107 = insertelement <4 x i32> poison, i32 %103, i64 0, !dbg !29
  %108 = insertelement <4 x i32> %107, i32 %104, i64 1, !dbg !29
  %109 = insertelement <4 x i32> %108, i32 %105, i64 2, !dbg !29
  %110 = insertelement <4 x i32> %109, i32 %106, i64 3, !dbg !29
  %111 = bitcast <4 x i32> %110 to <4 x float>, !dbg !29
  %112 = fadd <4 x float> %101, %111, !dbg !30
  %113 = fadd <4 x float> %91, %112, !dbg !31
  %114 = icmp eq i64 %indvars.iv, 0, !dbg !32
  br i1 %114, label %._crit_edge, label %115, !dbg !33

115:                                              ; preds = %50
  %116 = fsub <4 x float> %113, %59, !dbg !37
  %117 = extractelement <4 x float> %116, i64 0, !dbg !37
  %118 = fsub <4 x float> %113, %59, !dbg !37
  %119 = extractelement <4 x float> %118, i64 1, !dbg !37
  %120 = fsub <4 x float> %113, %59, !dbg !37
  %121 = extractelement <4 x float> %120, i64 2, !dbg !37
  %122 = fsub <4 x float> %113, %59, !dbg !37
  %123 = extractelement <4 x float> %122, i64 3, !dbg !37
  %124 = fadd float %51, 1.000000e+00, !dbg !38
  %125 = fadd float %52, 1.000000e+00, !dbg !38
  %126 = fadd float %53, 1.000000e+00, !dbg !38
  %127 = fadd float %54, 1.000000e+00, !dbg !38
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %124) #5, !dbg !39
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %125) #5, !dbg !39
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %126) #5, !dbg !39
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float %127) #5, !dbg !39
  %132 = insertelement <4 x float> poison, float %128, i64 0, !dbg !40
  %133 = insertelement <4 x float> %132, float %129, i64 1, !dbg !40
  %134 = insertelement <4 x float> %133, float %130, i64 2, !dbg !40
  %135 = insertelement <4 x float> %134, float %131, i64 3, !dbg !40
  %136 = fadd <4 x float> %59, %135, !dbg !40
  %137 = fsub <4 x float> %113, %136, !dbg !41
  %138 = fsub <4 x float> %113, %136, !dbg !41
  %139 = fsub <4 x float> %113, %136, !dbg !41
  %140 = fsub <4 x float> %113, %136, !dbg !41
  %141 = fmul <4 x float> %116, %137, !dbg !42
  %142 = extractelement <4 x float> %141, i64 0, !dbg !42
  %143 = fmul <4 x float> %118, %138, !dbg !42
  %144 = extractelement <4 x float> %143, i64 1, !dbg !42
  %145 = fmul <4 x float> %120, %139, !dbg !42
  %146 = extractelement <4 x float> %145, i64 2, !dbg !42
  %147 = fmul <4 x float> %122, %140, !dbg !42
  %148 = extractelement <4 x float> %147, i64 3, !dbg !42
  %149 = fadd float %55, %142, !dbg !43
  %150 = fadd float %56, %144, !dbg !43
  %151 = fadd float %57, %146, !dbg !43
  %152 = fadd float %58, %148, !dbg !43
  br label %._crit_edge, !dbg !33

._crit_edge:                                      ; preds = %50, %115
  %153 = phi float [ %149, %115 ], [ 0.000000e+00, %50 ], !dbg !36
  %154 = phi float [ %150, %115 ], [ 0.000000e+00, %50 ], !dbg !36
  %155 = phi float [ %151, %115 ], [ 0.000000e+00, %50 ], !dbg !36
  %156 = phi float [ %152, %115 ], [ 0.000000e+00, %50 ], !dbg !36
  %157 = phi float [ %124, %115 ], [ 1.000000e+00, %50 ], !dbg !36
  %158 = phi float [ %125, %115 ], [ 1.000000e+00, %50 ], !dbg !36
  %159 = phi float [ %126, %115 ], [ 1.000000e+00, %50 ], !dbg !36
  %160 = phi float [ %127, %115 ], [ 1.000000e+00, %50 ], !dbg !36
  %161 = phi <4 x float> [ %136, %115 ], [ %113, %50 ]
  %162 = select <4 x i1> %49, <4 x float> %161, <4 x float> %59, !dbg !21
  %163 = select i1 %18, float %153, float %55, !dbg !44
  %164 = select i1 %18, float %154, float %56, !dbg !44
  %165 = select i1 %18, float %155, float %57, !dbg !44
  %166 = select i1 %18, float %156, float %58, !dbg !44
  %167 = select i1 %18, float %157, float %51, !dbg !45
  %168 = select i1 %18, float %158, float %52, !dbg !45
  %169 = select i1 %18, float %159, float %53, !dbg !45
  %170 = select i1 %18, float %160, float %54, !dbg !45
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !20
  %171 = icmp samesign ult i64 %indvars.iv, 120, !dbg !20
  br i1 %171, label %50, label %172, !dbg !20

172:                                              ; preds = %._crit_edge
  %173 = extractelement <4 x float> %162, i64 0, !dbg !46
  %174 = extractelement <4 x float> %162, i64 1, !dbg !46
  %175 = fsub float %174, %173, !dbg !46
  %176 = fadd float %167, %168, !dbg !49
  %177 = fcmp oeq float %176, 0.000000e+00, !dbg !50
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %168, float %176) #5, !dbg !51
  %179 = select i1 %177, float 0.000000e+00, float %178, !dbg !52
  %180 = fmul float %175, %179, !dbg !53
  %181 = fadd float %173, %180, !dbg !54
  %182 = fadd float %163, %164, !dbg !55
  %183 = fmul float %175, %175, !dbg !56
  %184 = fmul float %183, %167, !dbg !57
  %185 = fmul float %184, %179, !dbg !58
  %186 = fadd float %182, %185, !dbg !59
  %187 = extractelement <4 x float> %162, i64 2, !dbg !46
  %188 = fsub float %187, %181, !dbg !46
  %189 = fadd float %169, %176, !dbg !49
  %190 = fcmp oeq float %189, 0.000000e+00, !dbg !50
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float %189) #5, !dbg !51
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !52
  %193 = fmul float %192, %188, !dbg !53
  %194 = fadd float %181, %193, !dbg !54
  %195 = fadd float %165, %186, !dbg !55
  %196 = fmul float %188, %188, !dbg !56
  %197 = fmul float %176, %196, !dbg !57
  %198 = fmul float %192, %197, !dbg !58
  %199 = fadd float %195, %198, !dbg !59
  %200 = extractelement <4 x float> %162, i64 3, !dbg !46
  %201 = fsub float %200, %194, !dbg !46
  %202 = fadd float %170, %189, !dbg !49
  %203 = fcmp oeq float %202, 0.000000e+00, !dbg !50
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %170, float %202) #5, !dbg !51
  %205 = select i1 %203, float 0.000000e+00, float %204, !dbg !52
  %206 = fmul float %205, %201, !dbg !53
  %207 = fadd float %194, %206, !dbg !54
  %208 = fadd float %166, %199, !dbg !55
  %209 = fmul float %201, %201, !dbg !56
  %210 = fmul float %189, %209, !dbg !57
  %211 = fmul float %205, %210, !dbg !58
  %212 = fadd float %208, %211, !dbg !59
  %213 = bitcast float %207 to i32, !dbg !60
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 1, i32 31), !dbg !60
  %215 = bitcast i32 %214 to float, !dbg !60
  %216 = bitcast float %212 to i32, !dbg !60
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 1, i32 31), !dbg !60
  %218 = bitcast i32 %217 to float, !dbg !60
  %219 = bitcast float %202 to i32, !dbg !60
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 1, i32 31), !dbg !60
  %221 = bitcast i32 %220 to float, !dbg !60
  %222 = fsub float %215, %207, !dbg !46
  %223 = fadd float %202, %221, !dbg !49
  %224 = fcmp oeq float %223, 0.000000e+00, !dbg !50
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %221, float %223) #5, !dbg !51
  %226 = select i1 %224, float 0.000000e+00, float %225, !dbg !52
  %227 = fmul float %226, %222, !dbg !53
  %228 = fadd float %207, %227, !dbg !54
  %229 = fadd float %212, %218, !dbg !55
  %230 = fmul float %222, %222, !dbg !56
  %231 = fmul float %202, %230, !dbg !57
  %232 = fmul float %226, %231, !dbg !58
  %233 = fadd float %229, %232, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %234 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !61
  %235 = bitcast float %228 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %236 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !61
  %237 = load i32, ptr addrspace(3) %236, align 4, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %238 = bitcast float %233 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %238, i1 true) #5, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %239 = load i32, ptr addrspace(3) %236, align 4, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %238, i1 true) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %240 = load float, ptr addrspace(3) %236, align 4, !dbg !63
  %241 = sext i32 %17 to i64, !dbg !64
  %242 = getelementptr float, ptr addrspace(1) %3, i64 %241, !dbg !64
  %243 = icmp eq i32 %12, 0, !dbg !65
  %244 = and i1 %243, %19, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %237, ptr addrspace(1) %242, i1 %244) #5, !dbg !65
  %245 = getelementptr float, ptr addrspace(1) %4, i64 %241, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %239, ptr addrspace(1) %245, i1 %244) #5, !dbg !67
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %240, float 1.280000e+02) #5, !dbg !68
  %247 = fadd float %246, 0x3EE4F8B580000000, !dbg !69
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !70
  %.not.i = icmp eq i32 %248, 0, !dbg !70
  br i1 %.not.i, label %251, label %249, !dbg !70

249:                                              ; preds = %172
  %250 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %247), !dbg !70
  br label %__nv_rsqrtf.exit, !dbg !70

251:                                              ; preds = %172
  %252 = tail call float @llvm.nvvm.rsqrt.approx.f(float %247), !dbg !70
  br label %__nv_rsqrtf.exit, !dbg !70

__nv_rsqrtf.exit:                                 ; preds = %249, %251
  %.0.i = phi float [ %250, %249 ], [ %252, %251 ], !dbg !70
  %253 = fmul float %.0.i, 7.812500e-03, !dbg !63
  %254 = getelementptr float, ptr addrspace(1) %5, i64 %241, !dbg !71
  %255 = bitcast float %253 to i32, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %255, ptr addrspace(1) %254, i1 %244) #5, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coccbcyamyg66u6dgjnz3zyre63bma7ihima5z3yuynmmle2xb5z.py", directory: "inductor_cache/oc")
!4 = !{ptr @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_7, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_native_layer_norm_native_layer_norm_backward_7", linkageName: "triton_red_fused_add_native_layer_norm_native_layer_norm_backward_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 36, column: 52, scope: !7)
!19 = !DILocation(line: 37, column: 43, scope: !7)
!20 = !DILocation(line: 32, column: 36, scope: !7)
!21 = !DILocation(line: 45, column: 60, scope: !7)
!22 = !DILocation(line: 33, column: 27, scope: !7)
!23 = !DILocation(line: 36, column: 47, scope: !7)
!24 = !DILocation(line: 36, column: 34, scope: !7)
!25 = !DILocation(line: 36, column: 57, scope: !7)
!26 = !DILocation(line: 37, column: 34, scope: !7)
!27 = !DILocation(line: 38, column: 34, scope: !7)
!28 = !DILocation(line: 37, column: 48, scope: !7)
!29 = !DILocation(line: 38, column: 39, scope: !7)
!30 = !DILocation(line: 39, column: 22, scope: !7)
!31 = !DILocation(line: 40, column: 22, scope: !7)
!32 = !DILocation(line: 43, column: 62, scope: !7)
!33 = !DILocation(line: 178, column: 7, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 43, column: 51, scope: !7)
!37 = !DILocation(line: 183, column: 24, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 184, column: 30, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 185, column: 34, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 185, column: 26, scope: !34, inlinedAt: !36)
!41 = !DILocation(line: 186, column: 39, scope: !34, inlinedAt: !36)
!42 = !DILocation(line: 186, column: 31, scope: !34, inlinedAt: !36)
!43 = !DILocation(line: 186, column: 22, scope: !34, inlinedAt: !36)
!44 = !DILocation(line: 46, column: 56, scope: !7)
!45 = !DILocation(line: 47, column: 64, scope: !7)
!46 = !DILocation(line: 192, column: 21, scope: !47, inlinedAt: !48)
!47 = distinct !DILexicalBlockFile(scope: !34, file: !35, discriminator: 0)
!48 = !DILocation(line: 49, column: 41, scope: !7)
!49 = !DILocation(line: 193, column: 28, scope: !47, inlinedAt: !48)
!50 = !DILocation(line: 194, column: 39, scope: !47, inlinedAt: !48)
!51 = !DILocation(line: 194, column: 60, scope: !47, inlinedAt: !48)
!52 = !DILocation(line: 194, column: 49, scope: !47, inlinedAt: !48)
!53 = !DILocation(line: 196, column: 25, scope: !47, inlinedAt: !48)
!54 = !DILocation(line: 196, column: 17, scope: !47, inlinedAt: !48)
!55 = !DILocation(line: 197, column: 15, scope: !47, inlinedAt: !48)
!56 = !DILocation(line: 197, column: 30, scope: !47, inlinedAt: !48)
!57 = !DILocation(line: 197, column: 38, scope: !47, inlinedAt: !48)
!58 = !DILocation(line: 197, column: 49, scope: !47, inlinedAt: !48)
!59 = !DILocation(line: 197, column: 22, scope: !47, inlinedAt: !48)
!60 = !DILocation(line: 204, column: 46, scope: !34, inlinedAt: !48)
!61 = !DILocation(line: 51, column: 20, scope: !7)
!62 = !DILocation(line: 52, column: 20, scope: !7)
!63 = !DILocation(line: 62, column: 20, scope: !7)
!64 = !DILocation(line: 54, column: 25, scope: !7)
!65 = !DILocation(line: 54, column: 36, scope: !7)
!66 = !DILocation(line: 55, column: 25, scope: !7)
!67 = !DILocation(line: 55, column: 36, scope: !7)
!68 = !DILocation(line: 57, column: 19, scope: !7)
!69 = !DILocation(line: 59, column: 20, scope: !7)
!70 = !DILocation(line: 60, column: 28, scope: !7)
!71 = !DILocation(line: 63, column: 25, scope: !7)
!72 = !DILocation(line: 63, column: 37, scope: !7)
!73 = !DILocation(line: 63, column: 4, scope: !7)
