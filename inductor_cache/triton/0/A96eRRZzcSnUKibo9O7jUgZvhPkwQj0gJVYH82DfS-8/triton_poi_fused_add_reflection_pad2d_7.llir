; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_reflection_pad2d_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 1, !dbg !13
  %14 = or disjoint i32 %12, 2, !dbg !13
  %15 = or disjoint i32 %12, 3, !dbg !13
  %16 = or disjoint i32 %12, 512, !dbg !13
  %17 = or disjoint i32 %12, 513, !dbg !13
  %18 = or disjoint i32 %12, 514, !dbg !13
  %19 = or disjoint i32 %12, 515, !dbg !13
  %20 = icmp slt i32 %12, 1115136, !dbg !14
  %21 = icmp slt i32 %16, 1115136, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %22 = sdiv i32 %.frozen, 66, !dbg !15
  %23 = mul i32 %22, 66, !dbg !16
  %.decomposed = sub i32 %.frozen, %23, !dbg !16
  %24 = srem i32 %13, 66, !dbg !16
  %.frozen36 = freeze i32 %14, !dbg !15
  %25 = sdiv i32 %.frozen36, 66, !dbg !15
  %26 = mul i32 %25, 66, !dbg !16
  %.decomposed37 = sub i32 %.frozen36, %26, !dbg !16
  %27 = srem i32 %15, 66, !dbg !16
  %.frozen38 = freeze i32 %16, !dbg !15
  %28 = sdiv i32 %.frozen38, 66, !dbg !15
  %29 = mul i32 %28, 66, !dbg !16
  %.decomposed39 = sub i32 %.frozen38, %29, !dbg !16
  %30 = srem i32 %17, 66, !dbg !16
  %.frozen40 = freeze i32 %18, !dbg !15
  %31 = sdiv i32 %.frozen40, 66, !dbg !15
  %32 = mul i32 %31, 66, !dbg !16
  %.decomposed41 = sub i32 %.frozen40, %32, !dbg !16
  %33 = srem i32 %19, 66, !dbg !16
  %34 = srem i32 %22, 66, !dbg !17
  %35 = srem i32 %25, 66, !dbg !17
  %36 = srem i32 %28, 66, !dbg !17
  %37 = srem i32 %31, 66, !dbg !17
  %38 = sdiv i32 %12, 4356, !dbg !18
  %39 = sdiv i32 %16, 4356, !dbg !18
  %40 = add nsw i32 %.decomposed, -1, !dbg !19
  %41 = add nsw i32 %24, -1, !dbg !19
  %42 = add nsw i32 %.decomposed37, -1, !dbg !19
  %43 = add nsw i32 %27, -1, !dbg !19
  %44 = add nsw i32 %.decomposed39, -1, !dbg !19
  %45 = add nsw i32 %30, -1, !dbg !19
  %46 = add nsw i32 %.decomposed41, -1, !dbg !19
  %47 = add nsw i32 %33, -1, !dbg !19
  %48 = tail call i32 @llvm.abs.i32(i32 %40, i1 true), !dbg !20
  %49 = tail call i32 @llvm.abs.i32(i32 %41, i1 true), !dbg !20
  %50 = tail call i32 @llvm.abs.i32(i32 %42, i1 true), !dbg !20
  %51 = tail call i32 @llvm.abs.i32(i32 %43, i1 true), !dbg !20
  %52 = tail call i32 @llvm.abs.i32(i32 %44, i1 true), !dbg !20
  %53 = tail call i32 @llvm.abs.i32(i32 %45, i1 true), !dbg !20
  %54 = tail call i32 @llvm.abs.i32(i32 %46, i1 true), !dbg !20
  %55 = tail call i32 @llvm.abs.i32(i32 %47, i1 true), !dbg !20
  %56 = add nsw i32 %48, -63, !dbg !21
  %57 = add nsw i32 %49, -63, !dbg !21
  %58 = add nsw i32 %50, -63, !dbg !21
  %59 = add nsw i32 %51, -63, !dbg !21
  %60 = add nsw i32 %52, -63, !dbg !21
  %61 = add nsw i32 %53, -63, !dbg !21
  %62 = add nsw i32 %54, -63, !dbg !21
  %63 = add nsw i32 %55, -63, !dbg !21
  %64 = tail call i32 @llvm.abs.i32(i32 %56, i1 true), !dbg !22
  %65 = tail call i32 @llvm.abs.i32(i32 %57, i1 true), !dbg !22
  %66 = tail call i32 @llvm.abs.i32(i32 %58, i1 true), !dbg !22
  %67 = tail call i32 @llvm.abs.i32(i32 %59, i1 true), !dbg !22
  %68 = tail call i32 @llvm.abs.i32(i32 %60, i1 true), !dbg !22
  %69 = tail call i32 @llvm.abs.i32(i32 %61, i1 true), !dbg !22
  %70 = tail call i32 @llvm.abs.i32(i32 %62, i1 true), !dbg !22
  %71 = tail call i32 @llvm.abs.i32(i32 %63, i1 true), !dbg !22
  %72 = add nsw i32 %34, -1, !dbg !23
  %73 = add nsw i32 %35, -1, !dbg !23
  %74 = add nsw i32 %36, -1, !dbg !23
  %75 = add nsw i32 %37, -1, !dbg !23
  %76 = tail call i32 @llvm.abs.i32(i32 %72, i1 true), !dbg !24
  %77 = tail call i32 @llvm.abs.i32(i32 %73, i1 true), !dbg !24
  %78 = tail call i32 @llvm.abs.i32(i32 %74, i1 true), !dbg !24
  %79 = tail call i32 @llvm.abs.i32(i32 %75, i1 true), !dbg !24
  %80 = add nsw i32 %76, -63, !dbg !25
  %81 = add nsw i32 %77, -63, !dbg !25
  %82 = add nsw i32 %78, -63, !dbg !25
  %83 = add nsw i32 %79, -63, !dbg !25
  %84 = tail call i32 @llvm.abs.i32(i32 %80, i1 true), !dbg !26
  %85 = tail call i32 @llvm.abs.i32(i32 %81, i1 true), !dbg !26
  %86 = tail call i32 @llvm.abs.i32(i32 %82, i1 true), !dbg !26
  %87 = tail call i32 @llvm.abs.i32(i32 %83, i1 true), !dbg !26
  %88 = mul nsw i32 %84, -64, !dbg !27
  %89 = mul nsw i32 %85, -64, !dbg !27
  %90 = mul nsw i32 %86, -64, !dbg !27
  %91 = mul nsw i32 %87, -64, !dbg !27
  %92 = shl nsw i32 %38, 12, !dbg !28
  %93 = shl nsw i32 %39, 12, !dbg !28
  %reass.sub = or disjoint i32 %92, 4095, !dbg !29
  %94 = sub nuw i32 %reass.sub, %64, !dbg !29
  %95 = add i32 %94, %88, !dbg !30
  %96 = sub nuw i32 %reass.sub, %65, !dbg !29
  %97 = add i32 %96, %88, !dbg !30
  %98 = sub nuw i32 %reass.sub, %66, !dbg !29
  %99 = add i32 %98, %89, !dbg !30
  %100 = sub nuw i32 %reass.sub, %67, !dbg !29
  %101 = add i32 %100, %89, !dbg !30
  %reass.sub4 = or disjoint i32 %93, 4095, !dbg !29
  %102 = sub nuw i32 %reass.sub4, %68, !dbg !29
  %103 = add i32 %102, %90, !dbg !30
  %104 = sub nuw i32 %reass.sub4, %69, !dbg !29
  %105 = add i32 %104, %90, !dbg !30
  %106 = sub nuw i32 %reass.sub4, %70, !dbg !29
  %107 = add i32 %106, %91, !dbg !30
  %108 = sub nuw i32 %reass.sub4, %71, !dbg !29
  %109 = add i32 %108, %91, !dbg !30
  %110 = sext i32 %95 to i64, !dbg !31
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !31
  %112 = sext i32 %97 to i64, !dbg !31
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !31
  %114 = sext i32 %99 to i64, !dbg !31
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !31
  %116 = sext i32 %101 to i64, !dbg !31
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !31
  %118 = sext i32 %103 to i64, !dbg !31
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !31
  %120 = sext i32 %105 to i64, !dbg !31
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !31
  %122 = sext i32 %107 to i64, !dbg !31
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !31
  %124 = sext i32 %109 to i64, !dbg !31
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !31
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %20) #3, !dbg !32
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %20) #3, !dbg !32
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %20) #3, !dbg !32
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %20) #3, !dbg !32
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %21) #3, !dbg !32
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %21) #3, !dbg !32
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %21) #3, !dbg !32
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %21) #3, !dbg !32
  %134 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !33
  %135 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !33
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !33
  %137 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !33
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !33
  %139 = getelementptr float, ptr addrspace(1) %1, i64 %120, !dbg !33
  %140 = getelementptr float, ptr addrspace(1) %1, i64 %122, !dbg !33
  %141 = getelementptr float, ptr addrspace(1) %1, i64 %124, !dbg !33
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %20) #3, !dbg !34
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %20) #3, !dbg !34
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %20) #3, !dbg !34
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %20) #3, !dbg !34
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %21) #3, !dbg !34
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %21) #3, !dbg !34
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %21) #3, !dbg !34
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %21) #3, !dbg !34
  %150 = sext i32 %38 to i64, !dbg !35
  %151 = getelementptr float, ptr addrspace(1) %2, i64 %150, !dbg !35
  %152 = sext i32 %39 to i64, !dbg !35
  %153 = getelementptr float, ptr addrspace(1) %2, i64 %152, !dbg !35
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %20) #3, !dbg !36
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %20) #3, !dbg !36
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %20) #3, !dbg !36
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %20) #3, !dbg !36
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %21) #3, !dbg !36
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %21) #3, !dbg !36
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %21) #3, !dbg !36
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %21) #3, !dbg !36
  %162 = getelementptr float, ptr addrspace(1) %3, i64 %150, !dbg !37
  %163 = getelementptr float, ptr addrspace(1) %3, i64 %152, !dbg !37
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %20) #3, !dbg !38
  %165 = bitcast i32 %164 to float, !dbg !38
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %20) #3, !dbg !38
  %167 = bitcast i32 %166 to float, !dbg !38
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %20) #3, !dbg !38
  %169 = bitcast i32 %168 to float, !dbg !38
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %20) #3, !dbg !38
  %171 = bitcast i32 %170 to float, !dbg !38
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %21) #3, !dbg !38
  %173 = bitcast i32 %172 to float, !dbg !38
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %21) #3, !dbg !38
  %175 = bitcast i32 %174 to float, !dbg !38
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %21) #3, !dbg !38
  %177 = bitcast i32 %176 to float, !dbg !38
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %21) #3, !dbg !38
  %179 = bitcast i32 %178 to float, !dbg !38
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float 4.096000e+03) #3, !dbg !39
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %167, float 4.096000e+03) #3, !dbg !39
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float 4.096000e+03) #3, !dbg !39
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %171, float 4.096000e+03) #3, !dbg !39
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float 4.096000e+03) #3, !dbg !39
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float 4.096000e+03) #3, !dbg !39
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float 4.096000e+03) #3, !dbg !39
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float 4.096000e+03) #3, !dbg !39
  %188 = fadd float %180, 0x3EE4F8B580000000, !dbg !40
  %189 = fadd float %181, 0x3EE4F8B580000000, !dbg !40
  %190 = fadd float %182, 0x3EE4F8B580000000, !dbg !40
  %191 = fadd float %183, 0x3EE4F8B580000000, !dbg !40
  %192 = fadd float %184, 0x3EE4F8B580000000, !dbg !40
  %193 = fadd float %185, 0x3EE4F8B580000000, !dbg !40
  %194 = fadd float %186, 0x3EE4F8B580000000, !dbg !40
  %195 = fadd float %187, 0x3EE4F8B580000000, !dbg !40
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %196, 0, !dbg !41
  br i1 %.not.i, label %199, label %197, !dbg !41

197:                                              ; preds = %6
  %198 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %188), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

199:                                              ; preds = %6
  %200 = tail call float @llvm.nvvm.rsqrt.approx.f(float %188), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %197, %199
  %.0.i = phi float [ %198, %197 ], [ %200, %199 ], !dbg !41
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i8 = icmp eq i32 %201, 0, !dbg !41
  br i1 %.not.i8, label %204, label %202, !dbg !41

202:                                              ; preds = %__nv_rsqrtf.exit
  %203 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %189), !dbg !41
  br label %__nv_rsqrtf.exit10, !dbg !41

204:                                              ; preds = %__nv_rsqrtf.exit
  %205 = tail call float @llvm.nvvm.rsqrt.approx.f(float %189), !dbg !41
  br label %__nv_rsqrtf.exit10, !dbg !41

__nv_rsqrtf.exit10:                               ; preds = %202, %204
  %.0.i9 = phi float [ %203, %202 ], [ %205, %204 ], !dbg !41
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i11 = icmp eq i32 %206, 0, !dbg !41
  br i1 %.not.i11, label %209, label %207, !dbg !41

207:                                              ; preds = %__nv_rsqrtf.exit10
  %208 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %190), !dbg !41
  br label %__nv_rsqrtf.exit13, !dbg !41

209:                                              ; preds = %__nv_rsqrtf.exit10
  %210 = tail call float @llvm.nvvm.rsqrt.approx.f(float %190), !dbg !41
  br label %__nv_rsqrtf.exit13, !dbg !41

__nv_rsqrtf.exit13:                               ; preds = %207, %209
  %.0.i12 = phi float [ %208, %207 ], [ %210, %209 ], !dbg !41
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i14 = icmp eq i32 %211, 0, !dbg !41
  br i1 %.not.i14, label %214, label %212, !dbg !41

212:                                              ; preds = %__nv_rsqrtf.exit13
  %213 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %191), !dbg !41
  br label %__nv_rsqrtf.exit16, !dbg !41

214:                                              ; preds = %__nv_rsqrtf.exit13
  %215 = tail call float @llvm.nvvm.rsqrt.approx.f(float %191), !dbg !41
  br label %__nv_rsqrtf.exit16, !dbg !41

__nv_rsqrtf.exit16:                               ; preds = %212, %214
  %.0.i15 = phi float [ %213, %212 ], [ %215, %214 ], !dbg !41
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i17 = icmp eq i32 %216, 0, !dbg !41
  br i1 %.not.i17, label %219, label %217, !dbg !41

217:                                              ; preds = %__nv_rsqrtf.exit16
  %218 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %192), !dbg !41
  br label %__nv_rsqrtf.exit19, !dbg !41

219:                                              ; preds = %__nv_rsqrtf.exit16
  %220 = tail call float @llvm.nvvm.rsqrt.approx.f(float %192), !dbg !41
  br label %__nv_rsqrtf.exit19, !dbg !41

__nv_rsqrtf.exit19:                               ; preds = %217, %219
  %.0.i18 = phi float [ %218, %217 ], [ %220, %219 ], !dbg !41
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i20 = icmp eq i32 %221, 0, !dbg !41
  br i1 %.not.i20, label %224, label %222, !dbg !41

222:                                              ; preds = %__nv_rsqrtf.exit19
  %223 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %193), !dbg !41
  br label %__nv_rsqrtf.exit22, !dbg !41

224:                                              ; preds = %__nv_rsqrtf.exit19
  %225 = tail call float @llvm.nvvm.rsqrt.approx.f(float %193), !dbg !41
  br label %__nv_rsqrtf.exit22, !dbg !41

__nv_rsqrtf.exit22:                               ; preds = %222, %224
  %.0.i21 = phi float [ %223, %222 ], [ %225, %224 ], !dbg !41
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i23 = icmp eq i32 %226, 0, !dbg !41
  br i1 %.not.i23, label %229, label %227, !dbg !41

227:                                              ; preds = %__nv_rsqrtf.exit22
  %228 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %194), !dbg !41
  br label %__nv_rsqrtf.exit25, !dbg !41

229:                                              ; preds = %__nv_rsqrtf.exit22
  %230 = tail call float @llvm.nvvm.rsqrt.approx.f(float %194), !dbg !41
  br label %__nv_rsqrtf.exit25, !dbg !41

__nv_rsqrtf.exit25:                               ; preds = %227, %229
  %.0.i24 = phi float [ %228, %227 ], [ %230, %229 ], !dbg !41
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i26 = icmp eq i32 %231, 0, !dbg !41
  br i1 %.not.i26, label %234, label %232, !dbg !41

232:                                              ; preds = %__nv_rsqrtf.exit25
  %233 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %195), !dbg !41
  br label %__nv_rsqrtf.exit28, !dbg !41

234:                                              ; preds = %__nv_rsqrtf.exit25
  %235 = tail call float @llvm.nvvm.rsqrt.approx.f(float %195), !dbg !41
  br label %__nv_rsqrtf.exit28, !dbg !41

__nv_rsqrtf.exit28:                               ; preds = %232, %234
  %.0.i27 = phi float [ %233, %232 ], [ %235, %234 ], !dbg !41
  %236 = bitcast i32 %149 to float, !dbg !34
  %237 = bitcast i32 %161 to float, !dbg !36
  %238 = fsub float %236, %237, !dbg !42
  %239 = bitcast i32 %148 to float, !dbg !34
  %240 = bitcast i32 %160 to float, !dbg !36
  %241 = fsub float %239, %240, !dbg !42
  %242 = bitcast i32 %147 to float, !dbg !34
  %243 = bitcast i32 %159 to float, !dbg !36
  %244 = fsub float %242, %243, !dbg !42
  %245 = bitcast i32 %146 to float, !dbg !34
  %246 = bitcast i32 %158 to float, !dbg !36
  %247 = fsub float %245, %246, !dbg !42
  %248 = bitcast i32 %145 to float, !dbg !34
  %249 = bitcast i32 %157 to float, !dbg !36
  %250 = fsub float %248, %249, !dbg !42
  %251 = bitcast i32 %144 to float, !dbg !34
  %252 = bitcast i32 %156 to float, !dbg !36
  %253 = fsub float %251, %252, !dbg !42
  %254 = bitcast i32 %143 to float, !dbg !34
  %255 = bitcast i32 %155 to float, !dbg !36
  %256 = fsub float %254, %255, !dbg !42
  %257 = bitcast i32 %142 to float, !dbg !34
  %258 = bitcast i32 %154 to float, !dbg !36
  %259 = fsub float %257, %258, !dbg !42
  %260 = bitcast i32 %133 to float, !dbg !32
  %261 = bitcast i32 %132 to float, !dbg !32
  %262 = bitcast i32 %131 to float, !dbg !32
  %263 = bitcast i32 %130 to float, !dbg !32
  %264 = bitcast i32 %129 to float, !dbg !32
  %265 = bitcast i32 %128 to float, !dbg !32
  %266 = bitcast i32 %127 to float, !dbg !32
  %267 = bitcast i32 %126 to float, !dbg !32
  %268 = fmul float %259, %.0.i, !dbg !43
  %269 = fmul float %256, %.0.i9, !dbg !43
  %270 = fmul float %253, %.0.i12, !dbg !43
  %271 = fmul float %250, %.0.i15, !dbg !43
  %272 = fmul float %247, %.0.i18, !dbg !43
  %273 = fmul float %244, %.0.i21, !dbg !43
  %274 = fmul float %241, %.0.i24, !dbg !43
  %275 = fmul float %238, %.0.i27, !dbg !43
  %276 = fadd float %268, %267, !dbg !44
  %277 = fadd float %269, %266, !dbg !44
  %278 = fadd float %270, %265, !dbg !44
  %279 = fadd float %271, %264, !dbg !44
  %280 = fadd float %272, %263, !dbg !44
  %281 = fadd float %273, %262, !dbg !44
  %282 = fadd float %274, %261, !dbg !44
  %283 = fadd float %275, %260, !dbg !44
  %284 = sext i32 %12 to i64, !dbg !45
  %285 = getelementptr float, ptr addrspace(1) %4, i64 %284, !dbg !45
  %286 = sext i32 %16 to i64, !dbg !45
  %287 = getelementptr float, ptr addrspace(1) %4, i64 %286, !dbg !45
  %288 = bitcast float %276 to i32, !dbg !46
  %289 = bitcast float %277 to i32, !dbg !46
  %290 = bitcast float %278 to i32, !dbg !46
  %291 = bitcast float %279 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %288, i32 %289, i32 %290, i32 %291, ptr addrspace(1) %285, i1 %20) #3, !dbg !46
  %292 = bitcast float %280 to i32, !dbg !46
  %293 = bitcast float %281 to i32, !dbg !46
  %294 = bitcast float %282 to i32, !dbg !46
  %295 = bitcast float %283 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %292, i32 %293, i32 %294, i32 %295, ptr addrspace(1) %287, i1 %21) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csxzielijpamyijeorbwsxuy6wn6elavaiusnkibk6hmnojfvfm6.py", directory: "inductor_cache/sx")
!4 = !{ptr @triton_poi_fused_add_reflection_pad2d_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_reflection_pad2d_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_reflection_pad2d_7", linkageName: "triton_poi_fused_add_reflection_pad2d_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 27, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 82, scope: !7)
!20 = !DILocation(line: 28, column: 75, scope: !7)
!21 = !DILocation(line: 28, column: 63, scope: !7)
!22 = !DILocation(line: 28, column: 55, scope: !7)
!23 = !DILocation(line: 28, column: 136, scope: !7)
!24 = !DILocation(line: 28, column: 129, scope: !7)
!25 = !DILocation(line: 28, column: 117, scope: !7)
!26 = !DILocation(line: 28, column: 109, scope: !7)
!27 = !DILocation(line: 28, column: 97, scope: !7)
!28 = !DILocation(line: 28, column: 149, scope: !7)
!29 = !DILocation(line: 28, column: 91, scope: !7)
!30 = !DILocation(line: 28, column: 144, scope: !7)
!31 = !DILocation(line: 28, column: 30, scope: !7)
!32 = !DILocation(line: 28, column: 154, scope: !7)
!33 = !DILocation(line: 29, column: 30, scope: !7)
!34 = !DILocation(line: 29, column: 154, scope: !7)
!35 = !DILocation(line: 30, column: 30, scope: !7)
!36 = !DILocation(line: 30, column: 35, scope: !7)
!37 = !DILocation(line: 31, column: 30, scope: !7)
!38 = !DILocation(line: 31, column: 35, scope: !7)
!39 = !DILocation(line: 34, column: 18, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 37, column: 27, scope: !7)
!42 = !DILocation(line: 32, column: 18, scope: !7)
!43 = !DILocation(line: 38, column: 19, scope: !7)
!44 = !DILocation(line: 39, column: 19, scope: !7)
!45 = !DILocation(line: 40, column: 25, scope: !7)
!46 = !DILocation(line: 40, column: 37, scope: !7)
!47 = !DILocation(line: 40, column: 4, scope: !7)
