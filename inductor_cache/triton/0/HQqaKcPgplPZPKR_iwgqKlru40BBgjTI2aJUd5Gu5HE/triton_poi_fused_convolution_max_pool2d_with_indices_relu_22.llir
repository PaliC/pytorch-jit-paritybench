; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_max_pool2d_with_indices_relu_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 12, !dbg !12
  %12 = and i32 %10, 60, !dbg !12
  %13 = lshr i32 %9, 2, !dbg !12
  %14 = and i32 %13, 31, !dbg !12
  %15 = or disjoint i32 %14, 32, !dbg !12
  %16 = or disjoint i32 %8, %12, !dbg !13
  %17 = or disjoint i32 %8, %14, !dbg !13
  %18 = or disjoint i32 %8, %15, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %20 = shl i32 %19, 4, !dbg !15
  %21 = lshr i32 %9, 4, !dbg !16
  %22 = and i32 %21, 7, !dbg !16
  %23 = or disjoint i32 %20, %22, !dbg !17
  %24 = or disjoint i32 %23, 8, !dbg !17
  %25 = or disjoint i32 %20, %11, !dbg !17
  %26 = icmp slt i32 %23, 16, !dbg !18
  %27 = icmp slt i32 %24, 16, !dbg !18
  %28 = icmp slt i32 %25, 16, !dbg !18
  %.frozen = freeze i32 %16, !dbg !19
  %29 = sdiv i32 %.frozen, 512, !dbg !19
  %30 = mul i32 %29, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %30, !dbg !20
  %31 = shl i32 %23, 9, !dbg !21
  %32 = shl i32 %24, 9, !dbg !21
  %33 = shl i32 %29, 13, !dbg !22
  %34 = add i32 %33, %.decomposed, !dbg !23
  %35 = add i32 %34, %31, !dbg !24
  %36 = add i32 %34, %32, !dbg !24
  %37 = sext i32 %35 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = sext i32 %36 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %26) #2, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !26
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %27) #2, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !26
  %51 = sext i32 %.decomposed to i64, !dbg !27
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !27
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #2, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !28
  %58 = insertelement <8 x i32> poison, i32 %50, i64 0, !dbg !26
  %59 = insertelement <8 x i32> %58, i32 %49, i64 1, !dbg !26
  %60 = insertelement <8 x i32> %59, i32 %48, i64 2, !dbg !26
  %61 = insertelement <8 x i32> %60, i32 %47, i64 3, !dbg !26
  %62 = insertelement <8 x i32> %61, i32 %45, i64 4, !dbg !26
  %63 = insertelement <8 x i32> %62, i32 %44, i64 5, !dbg !26
  %64 = insertelement <8 x i32> %63, i32 %43, i64 6, !dbg !26
  %65 = insertelement <8 x i32> %64, i32 %42, i64 7, !dbg !26
  %66 = bitcast <8 x i32> %65 to <8 x float>, !dbg !26
  %67 = insertelement <4 x i32> poison, i32 %57, i64 0, !dbg !28
  %68 = insertelement <4 x i32> %67, i32 %56, i64 1, !dbg !28
  %69 = insertelement <4 x i32> %68, i32 %55, i64 2, !dbg !28
  %70 = insertelement <4 x i32> %69, i32 %54, i64 3, !dbg !28
  %71 = bitcast <4 x i32> %70 to <4 x float>, !dbg !28
  %72 = shufflevector <4 x float> %71, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %73 = fadd <8 x float> %72, %66, !dbg !29
  %74 = fcmp olt <8 x float> %73, zeroinitializer, !dbg !30
  %75 = extractelement <8 x i1> %74, i64 7, !dbg !34
  %76 = extractelement <8 x float> %73, i64 7, !dbg !34
  %77 = select i1 %75, float 0.000000e+00, float %76, !dbg !34
  %78 = extractelement <8 x i1> %74, i64 6, !dbg !34
  %79 = extractelement <8 x float> %73, i64 6, !dbg !34
  %80 = select i1 %78, float 0.000000e+00, float %79, !dbg !34
  %81 = extractelement <8 x i1> %74, i64 5, !dbg !34
  %82 = extractelement <8 x float> %73, i64 5, !dbg !34
  %83 = select i1 %81, float 0.000000e+00, float %82, !dbg !34
  %84 = extractelement <8 x i1> %74, i64 4, !dbg !34
  %85 = extractelement <8 x float> %73, i64 4, !dbg !34
  %86 = select i1 %84, float 0.000000e+00, float %85, !dbg !34
  %87 = extractelement <8 x i1> %74, i64 3, !dbg !34
  %88 = extractelement <8 x float> %73, i64 3, !dbg !34
  %89 = select i1 %87, float 0.000000e+00, float %88, !dbg !34
  %90 = extractelement <8 x i1> %74, i64 2, !dbg !34
  %91 = extractelement <8 x float> %73, i64 2, !dbg !34
  %92 = select i1 %90, float 0.000000e+00, float %91, !dbg !34
  %93 = extractelement <8 x i1> %74, i64 1, !dbg !34
  %94 = extractelement <8 x float> %73, i64 1, !dbg !34
  %95 = select i1 %93, float 0.000000e+00, float %94, !dbg !34
  %96 = extractelement <8 x i1> %74, i64 0, !dbg !34
  %97 = extractelement <8 x float> %73, i64 0, !dbg !34
  %98 = select i1 %96, float 0.000000e+00, float %97, !dbg !34
  %99 = shl i32 %17, 4, !dbg !35
  %100 = shl i32 %18, 4, !dbg !35
  %101 = add i32 %25, %99, !dbg !36
  %102 = add i32 %25, %100, !dbg !36
  %103 = sext i32 %101 to i64, !dbg !37
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !37
  %105 = sext i32 %102 to i64, !dbg !37
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !37
  %107 = shl i32 %9, 6, !dbg !38
  %108 = and i32 %107, 960, !dbg !38
  %109 = or disjoint i32 %108, %22, !dbg !38
  %110 = and i32 %10, 508, !dbg !38
  %111 = lshr exact i32 %108, 2, !dbg !38
  %112 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %111, !dbg !38
  %113 = getelementptr float, ptr addrspace(3) %112, i32 %109, !dbg !38
  %114 = bitcast float %77 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !38
  %115 = or disjoint i32 %109, 16, !dbg !38
  %116 = lshr i32 %115, 4, !dbg !38
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !38
  %118 = getelementptr float, ptr addrspace(3) %117, i32 %115, !dbg !38
  %119 = bitcast float %80 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !38
  %120 = or disjoint i32 %109, 32, !dbg !38
  %121 = lshr i32 %120, 4, !dbg !38
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %121, !dbg !38
  %123 = getelementptr float, ptr addrspace(3) %122, i32 %120, !dbg !38
  %124 = bitcast float %83 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #2, !dbg !38
  %125 = or disjoint i32 %109, 48, !dbg !38
  %126 = lshr i32 %125, 4, !dbg !38
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %126, !dbg !38
  %128 = getelementptr float, ptr addrspace(3) %127, i32 %125, !dbg !38
  %129 = bitcast float %86 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #2, !dbg !38
  %130 = or disjoint i32 %109, 8, !dbg !38
  %131 = getelementptr float, ptr addrspace(3) %112, i32 %130, !dbg !38
  %132 = bitcast float %89 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !38
  %133 = or disjoint i32 %109, 24, !dbg !38
  %134 = lshr i32 %133, 4, !dbg !38
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %134, !dbg !38
  %136 = getelementptr float, ptr addrspace(3) %135, i32 %133, !dbg !38
  %137 = bitcast float %92 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #2, !dbg !38
  %138 = or disjoint i32 %109, 40, !dbg !38
  %139 = lshr i32 %138, 4, !dbg !38
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !38
  %141 = getelementptr float, ptr addrspace(3) %140, i32 %138, !dbg !38
  %142 = bitcast float %95 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !38
  %143 = or disjoint i32 %109, 56, !dbg !38
  %144 = lshr i32 %143, 4, !dbg !38
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !38
  %146 = getelementptr float, ptr addrspace(3) %145, i32 %143, !dbg !38
  %147 = bitcast float %98 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %148 = lshr i32 %110, 4, !dbg !38
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %148, !dbg !38
  %150 = getelementptr inbounds float, ptr addrspace(3) %149, i32 %110, !dbg !38
  %151 = load i32, ptr addrspace(3) %150, align 4, !dbg !38
  %152 = or disjoint i32 %110, 1, !dbg !38
  %153 = getelementptr inbounds float, ptr addrspace(3) %149, i32 %152, !dbg !38
  %154 = load i32, ptr addrspace(3) %153, align 4, !dbg !38
  %155 = or disjoint i32 %110, 2, !dbg !38
  %156 = getelementptr inbounds float, ptr addrspace(3) %149, i32 %155, !dbg !38
  %157 = load i32, ptr addrspace(3) %156, align 4, !dbg !38
  %158 = or disjoint i32 %110, 3, !dbg !38
  %159 = getelementptr inbounds float, ptr addrspace(3) %149, i32 %158, !dbg !38
  %160 = load i32, ptr addrspace(3) %159, align 4, !dbg !38
  %161 = or disjoint i32 %110, 512, !dbg !38
  %162 = lshr i32 %161, 4, !dbg !38
  %163 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %162, !dbg !38
  %164 = getelementptr inbounds float, ptr addrspace(3) %163, i32 %161, !dbg !38
  %165 = load i32, ptr addrspace(3) %164, align 4, !dbg !38
  %166 = or disjoint i32 %110, 513, !dbg !38
  %167 = lshr i32 %166, 4, !dbg !38
  %168 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %167, !dbg !38
  %169 = getelementptr inbounds float, ptr addrspace(3) %168, i32 %166, !dbg !38
  %170 = load i32, ptr addrspace(3) %169, align 4, !dbg !38
  %171 = or disjoint i32 %110, 514, !dbg !38
  %172 = lshr i32 %171, 4, !dbg !38
  %173 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %172, !dbg !38
  %174 = getelementptr inbounds float, ptr addrspace(3) %173, i32 %171, !dbg !38
  %175 = load i32, ptr addrspace(3) %174, align 4, !dbg !38
  %176 = or disjoint i32 %110, 515, !dbg !38
  %177 = lshr i32 %176, 4, !dbg !38
  %178 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %177, !dbg !38
  %179 = getelementptr inbounds float, ptr addrspace(3) %178, i32 %176, !dbg !38
  %180 = load i32, ptr addrspace(3) %179, align 4, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %151, i32 %154, i32 %157, i32 %160, ptr addrspace(1) %104, i1 %28) #2, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %165, i32 %170, i32 %175, i32 %180, ptr addrspace(1) %106, i1 %28) #2, !dbg !38
  %181 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !39
  %182 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !39
  %183 = bitcast float %77 to i32, !dbg !40
  %184 = bitcast float %80 to i32, !dbg !40
  %185 = bitcast float %83 to i32, !dbg !40
  %186 = bitcast float %86 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %183, i32 %184, i32 %185, i32 %186, ptr addrspace(1) %181, i1 %26) #2, !dbg !40
  %187 = bitcast float %89 to i32, !dbg !40
  %188 = bitcast float %92 to i32, !dbg !40
  %189 = bitcast float %95 to i32, !dbg !40
  %190 = bitcast float %98 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %187, i32 %188, i32 %189, i32 %190, ptr addrspace(1) %182, i1 %27) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c56xjqzxoahixihhnbmrbi5nqpu76e36xmnzpa6apvueu7dgukmm.py", directory: "inductor_cache/56")
!4 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_relu_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_relu_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_max_pool2d_with_indices_relu_22", linkageName: "triton_poi_fused_convolution_max_pool2d_with_indices_relu_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 36, column: 40, scope: !7)
!34 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 37, column: 33, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 25, scope: !7)
!38 = !DILocation(line: 37, column: 44, scope: !7)
!39 = !DILocation(line: 38, column: 25, scope: !7)
!40 = !DILocation(line: 38, column: 55, scope: !7)
!41 = !DILocation(line: 38, column: 4, scope: !7)
