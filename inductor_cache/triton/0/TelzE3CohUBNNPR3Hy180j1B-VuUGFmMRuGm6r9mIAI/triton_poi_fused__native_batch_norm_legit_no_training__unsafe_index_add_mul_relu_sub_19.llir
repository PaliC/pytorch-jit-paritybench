; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, i32 %22) local_unnamed_addr !dbg !7 {
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %25 = shl i32 %24, 8, !dbg !11
  %26 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %27 = shl i32 %26, 1, !dbg !12
  %28 = and i32 %27, 254, !dbg !12
  %29 = or disjoint i32 %25, %28, !dbg !13
  %30 = sdiv i32 %29, 256, !dbg !14
  %31 = srem i32 %30, 4, !dbg !15
  %.frozen = freeze i32 %29, !dbg !16
  %32 = sdiv i32 %.frozen, 16, !dbg !16
  %33 = srem i32 %32, 16, !dbg !17
  %34 = mul i32 %32, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %34, !dbg !18
  %35 = sext i32 %29 to i64, !dbg !19
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !19
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !20
  %38 = sext i32 %31 to i64, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !21
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !23
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !24
  %44 = bitcast i32 %43 to float, !dbg !24
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !24
  %46 = bitcast i32 %45 to float, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !25
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !26
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !27
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !28
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !28
  %53 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !29
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !30
  %55 = sext i32 %33 to i64, !dbg !31
  %56 = getelementptr i64, ptr addrspace(1) %7, i64 %55, !dbg !31
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !32
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !32
  %59 = sext i32 %.decomposed to i64, !dbg !33
  %60 = getelementptr i64, ptr addrspace(1) %8, i64 %59, !dbg !33
  %61 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !34
  %62 = getelementptr i64, ptr addrspace(1) %10, i64 %59, !dbg !35
  %63 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !36
  %64 = getelementptr float, ptr addrspace(1) %11, i64 %59, !dbg !37
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !38
  %66 = getelementptr i64, ptr addrspace(1) %12, i64 %55, !dbg !39
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !40
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !40
  %69 = getelementptr float, ptr addrspace(1) %13, i64 %55, !dbg !41
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !42
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !42
  %72 = getelementptr i64, ptr addrspace(1) %14, i64 %55, !dbg !43
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !44
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !44
  %75 = getelementptr i64, ptr addrspace(1) %15, i64 %59, !dbg !45
  %76 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !46
  %77 = getelementptr i64, ptr addrspace(1) %17, i64 %59, !dbg !47
  %78 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !48
  %79 = getelementptr float, ptr addrspace(1) %18, i64 %59, !dbg !49
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !50
  %81 = getelementptr i64, ptr addrspace(1) %19, i64 %55, !dbg !51
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !52
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !52
  %84 = getelementptr float, ptr addrspace(1) %20, i64 %55, !dbg !53
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !54
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !54
  %87 = fadd float %44, 0x3EE4F8B580000000, !dbg !55
  %88 = fadd float %46, 0x3EE4F8B580000000, !dbg !55
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i = icmp eq i32 %89, 0, !dbg !56
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i = icmp eq i32 %90, 0, !dbg !56
  br i1 %.not.i, label %96, label %91, !dbg !56

91:                                               ; preds = %23
  br i1 %.not1.i, label %94, label %92, !dbg !56

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

96:                                               ; preds = %23
  br i1 %.not1.i, label %99, label %97, !dbg !56

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

__nv_sqrtf.exit:                                  ; preds = %92, %94, %97, %99
  %.0.i = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !56
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i1 = icmp eq i32 %101, 0, !dbg !56
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i4 = icmp eq i32 %102, 0, !dbg !56
  br i1 %.not.i1, label %108, label %103, !dbg !56

103:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %106, label %104, !dbg !56

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !56
  br label %__nv_sqrtf.exit5, !dbg !56

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !56
  br label %__nv_sqrtf.exit5, !dbg !56

108:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %111, label %109, !dbg !56

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !56
  br label %__nv_sqrtf.exit5, !dbg !56

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !56
  br label %__nv_sqrtf.exit5, !dbg !56

__nv_sqrtf.exit5:                                 ; preds = %104, %106, %109, %111
  %.0.i3 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !56
  %113 = extractvalue { i32, i32 } %37, 1, !dbg !20
  %114 = bitcast i32 %113 to float, !dbg !20
  %115 = bitcast i32 %41 to float, !dbg !22
  %116 = fsub float %114, %115, !dbg !57
  %117 = extractvalue { i32, i32 } %37, 0, !dbg !20
  %118 = bitcast i32 %117 to float, !dbg !20
  %119 = bitcast i32 %40 to float, !dbg !22
  %120 = fsub float %118, %119, !dbg !57
  %121 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !42
  %122 = insertelement <2 x i32> %121, i32 %86, i64 1, !dbg !42
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !42
  %124 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !42
  %125 = insertelement <2 x i32> %124, i32 %85, i64 1, !dbg !42
  %126 = bitcast <2 x i32> %125 to <2 x float>, !dbg !42
  %127 = extractvalue { i32, i32 } %80, 1, !dbg !50
  %128 = extractvalue { i32, i32 } %80, 0, !dbg !50
  %129 = extractvalue { i64, i64 } %78, 1, !dbg !48
  %130 = extractvalue { i64, i64 } %78, 0, !dbg !48
  %131 = extractvalue { i64, i64 } %76, 1, !dbg !46
  %132 = extractvalue { i64, i64 } %76, 0, !dbg !46
  %133 = extractvalue { i32, i32 } %65, 1, !dbg !38
  %134 = extractvalue { i32, i32 } %65, 0, !dbg !38
  %135 = extractvalue { i64, i64 } %63, 1, !dbg !36
  %136 = extractvalue { i64, i64 } %63, 0, !dbg !36
  %137 = extractvalue { i64, i64 } %61, 1, !dbg !34
  %138 = extractvalue { i64, i64 } %61, 0, !dbg !34
  %139 = extractvalue { i32, i32 } %54, 1, !dbg !30
  %140 = bitcast i32 %139 to float, !dbg !30
  %141 = extractvalue { i32, i32 } %54, 0, !dbg !30
  %142 = bitcast i32 %141 to float, !dbg !30
  %143 = bitcast i32 %52 to float, !dbg !28
  %144 = bitcast i32 %51 to float, !dbg !28
  %145 = bitcast i32 %49 to float, !dbg !26
  %146 = bitcast i32 %48 to float, !dbg !26
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !58
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !58
  %149 = fmul float %120, %147, !dbg !59
  %150 = fmul float %116, %148, !dbg !59
  %151 = fmul float %149, %146, !dbg !60
  %152 = fmul float %150, %145, !dbg !60
  %153 = fadd float %151, %144, !dbg !61
  %154 = fadd float %152, %143, !dbg !61
  %155 = fadd float %153, %142, !dbg !62
  %156 = fadd float %154, %140, !dbg !62
  %157 = fcmp olt float %155, 0.000000e+00, !dbg !63
  %158 = fcmp olt float %156, 0.000000e+00, !dbg !63
  %159 = select i1 %157, float 0.000000e+00, float %155, !dbg !67
  %160 = select i1 %158, float 0.000000e+00, float %156, !dbg !67
  %161 = lshr i64 %57, 60, !dbg !68
  %162 = and i64 %161, 8, !dbg !68
  %163 = add i64 %162, %57, !dbg !68
  %164 = lshr i64 %138, 60, !dbg !69
  %165 = and i64 %164, 8, !dbg !69
  %166 = lshr i64 %137, 60, !dbg !69
  %167 = and i64 %166, 8, !dbg !69
  %168 = shl i64 %163, 3, !dbg !70
  %169 = shl nsw i32 %30, 6, !dbg !71
  %170 = sext i32 %169 to i64, !dbg !72
  %171 = getelementptr float, ptr addrspace(1) %9, i64 %138, !dbg !73
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %165, !dbg !73
  %173 = getelementptr float, ptr addrspace(1) %172, i64 %168, !dbg !73
  %174 = getelementptr float, ptr addrspace(1) %173, i64 %170, !dbg !73
  %175 = getelementptr float, ptr addrspace(1) %9, i64 %137, !dbg !73
  %176 = getelementptr float, ptr addrspace(1) %175, i64 %167, !dbg !73
  %177 = getelementptr float, ptr addrspace(1) %176, i64 %168, !dbg !73
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %170, !dbg !73
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 true) #3, !dbg !74
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 true) #3, !dbg !74
  %181 = lshr i64 %136, 60, !dbg !75
  %182 = and i64 %181, 8, !dbg !75
  %183 = lshr i64 %135, 60, !dbg !75
  %184 = and i64 %183, 8, !dbg !75
  %185 = getelementptr float, ptr addrspace(1) %9, i64 %136, !dbg !76
  %186 = getelementptr float, ptr addrspace(1) %185, i64 %182, !dbg !76
  %187 = getelementptr float, ptr addrspace(1) %186, i64 %168, !dbg !76
  %188 = getelementptr float, ptr addrspace(1) %187, i64 %170, !dbg !76
  %189 = getelementptr float, ptr addrspace(1) %9, i64 %135, !dbg !76
  %190 = getelementptr float, ptr addrspace(1) %189, i64 %184, !dbg !76
  %191 = getelementptr float, ptr addrspace(1) %190, i64 %168, !dbg !76
  %192 = getelementptr float, ptr addrspace(1) %191, i64 %170, !dbg !76
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 true) #3, !dbg !77
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 true) #3, !dbg !77
  %195 = lshr i64 %67, 60, !dbg !78
  %196 = and i64 %195, 8, !dbg !78
  %197 = add i64 %196, %67, !dbg !78
  %198 = shl i64 %197, 3, !dbg !79
  %199 = getelementptr float, ptr addrspace(1) %172, i64 %198, !dbg !80
  %200 = getelementptr float, ptr addrspace(1) %199, i64 %170, !dbg !80
  %201 = getelementptr float, ptr addrspace(1) %176, i64 %198, !dbg !80
  %202 = getelementptr float, ptr addrspace(1) %201, i64 %170, !dbg !80
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 true) #3, !dbg !81
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 true) #3, !dbg !81
  %205 = getelementptr float, ptr addrspace(1) %186, i64 %198, !dbg !82
  %206 = getelementptr float, ptr addrspace(1) %205, i64 %170, !dbg !82
  %207 = getelementptr float, ptr addrspace(1) %190, i64 %198, !dbg !82
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %170, !dbg !82
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 true) #3, !dbg !83
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 true) #3, !dbg !83
  %211 = lshr i64 %73, 61, !dbg !84
  %212 = and i64 %211, 4, !dbg !84
  %213 = add i64 %212, %73, !dbg !84
  %214 = lshr i64 %132, 61, !dbg !85
  %215 = and i64 %214, 4, !dbg !85
  %216 = lshr i64 %131, 61, !dbg !85
  %217 = and i64 %216, 4, !dbg !85
  %218 = shl i64 %213, 2, !dbg !86
  %219 = shl nsw i32 %30, 4, !dbg !87
  %220 = sext i32 %219 to i64, !dbg !88
  %221 = getelementptr float, ptr addrspace(1) %16, i64 %132, !dbg !89
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %215, !dbg !89
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %218, !dbg !89
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %220, !dbg !89
  %225 = getelementptr float, ptr addrspace(1) %16, i64 %131, !dbg !89
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %217, !dbg !89
  %227 = getelementptr float, ptr addrspace(1) %226, i64 %218, !dbg !89
  %228 = getelementptr float, ptr addrspace(1) %227, i64 %220, !dbg !89
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 true) #3, !dbg !90
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 true) #3, !dbg !90
  %231 = lshr i64 %130, 61, !dbg !91
  %232 = and i64 %231, 4, !dbg !91
  %233 = lshr i64 %129, 61, !dbg !91
  %234 = and i64 %233, 4, !dbg !91
  %235 = getelementptr float, ptr addrspace(1) %16, i64 %130, !dbg !92
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %232, !dbg !92
  %237 = getelementptr float, ptr addrspace(1) %236, i64 %218, !dbg !92
  %238 = getelementptr float, ptr addrspace(1) %237, i64 %220, !dbg !92
  %239 = getelementptr float, ptr addrspace(1) %16, i64 %129, !dbg !92
  %240 = getelementptr float, ptr addrspace(1) %239, i64 %234, !dbg !92
  %241 = getelementptr float, ptr addrspace(1) %240, i64 %218, !dbg !92
  %242 = getelementptr float, ptr addrspace(1) %241, i64 %220, !dbg !92
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 true) #3, !dbg !93
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 true) #3, !dbg !93
  %245 = lshr i64 %82, 61, !dbg !94
  %246 = and i64 %245, 4, !dbg !94
  %247 = add i64 %246, %82, !dbg !94
  %248 = shl i64 %247, 2, !dbg !95
  %249 = getelementptr float, ptr addrspace(1) %222, i64 %248, !dbg !96
  %250 = getelementptr float, ptr addrspace(1) %249, i64 %220, !dbg !96
  %251 = getelementptr float, ptr addrspace(1) %226, i64 %248, !dbg !96
  %252 = getelementptr float, ptr addrspace(1) %251, i64 %220, !dbg !96
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %250, i1 true) #3, !dbg !97
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 true) #3, !dbg !97
  %255 = getelementptr float, ptr addrspace(1) %236, i64 %248, !dbg !98
  %256 = getelementptr float, ptr addrspace(1) %255, i64 %220, !dbg !98
  %257 = getelementptr float, ptr addrspace(1) %240, i64 %248, !dbg !98
  %258 = getelementptr float, ptr addrspace(1) %257, i64 %220, !dbg !98
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 true) #3, !dbg !99
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %258, i1 true) #3, !dbg !99
  %261 = insertelement <2 x i32> poison, i32 %134, i64 0, !dbg !38
  %262 = insertelement <2 x i32> %261, i32 %128, i64 1, !dbg !38
  %263 = bitcast <2 x i32> %262 to <2 x float>, !dbg !38
  %264 = insertelement <2 x i32> poison, i32 %179, i64 0, !dbg !74
  %265 = insertelement <2 x i32> %264, i32 %229, i64 1, !dbg !74
  %266 = bitcast <2 x i32> %265 to <2 x float>, !dbg !74
  %267 = insertelement <2 x i32> poison, i32 %193, i64 0, !dbg !77
  %268 = insertelement <2 x i32> %267, i32 %243, i64 1, !dbg !77
  %269 = bitcast <2 x i32> %268 to <2 x float>, !dbg !77
  %270 = fsub <2 x float> %269, %266, !dbg !100
  %271 = fmul <2 x float> %270, %263, !dbg !101
  %272 = fadd <2 x float> %271, %266, !dbg !102
  %273 = insertelement <2 x i32> poison, i32 %203, i64 0, !dbg !81
  %274 = insertelement <2 x i32> %273, i32 %253, i64 1, !dbg !81
  %275 = bitcast <2 x i32> %274 to <2 x float>, !dbg !81
  %276 = insertelement <2 x i32> poison, i32 %209, i64 0, !dbg !83
  %277 = insertelement <2 x i32> %276, i32 %259, i64 1, !dbg !83
  %278 = bitcast <2 x i32> %277 to <2 x float>, !dbg !83
  %279 = fsub <2 x float> %278, %275, !dbg !103
  %280 = fmul <2 x float> %279, %263, !dbg !104
  %281 = fadd <2 x float> %280, %275, !dbg !105
  %282 = fsub <2 x float> %281, %272, !dbg !106
  %283 = fmul <2 x float> %282, %126, !dbg !107
  %284 = fadd <2 x float> %272, %283, !dbg !108
  %285 = extractelement <2 x float> %284, i64 0, !dbg !109
  %286 = fadd float %159, %285, !dbg !109
  %287 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !38
  %288 = insertelement <2 x i32> %287, i32 %127, i64 1, !dbg !38
  %289 = bitcast <2 x i32> %288 to <2 x float>, !dbg !38
  %290 = insertelement <2 x i32> poison, i32 %180, i64 0, !dbg !74
  %291 = insertelement <2 x i32> %290, i32 %230, i64 1, !dbg !74
  %292 = bitcast <2 x i32> %291 to <2 x float>, !dbg !74
  %293 = insertelement <2 x i32> poison, i32 %194, i64 0, !dbg !77
  %294 = insertelement <2 x i32> %293, i32 %244, i64 1, !dbg !77
  %295 = bitcast <2 x i32> %294 to <2 x float>, !dbg !77
  %296 = fsub <2 x float> %295, %292, !dbg !100
  %297 = fmul <2 x float> %296, %289, !dbg !101
  %298 = fadd <2 x float> %297, %292, !dbg !102
  %299 = insertelement <2 x i32> poison, i32 %204, i64 0, !dbg !81
  %300 = insertelement <2 x i32> %299, i32 %254, i64 1, !dbg !81
  %301 = bitcast <2 x i32> %300 to <2 x float>, !dbg !81
  %302 = insertelement <2 x i32> poison, i32 %210, i64 0, !dbg !83
  %303 = insertelement <2 x i32> %302, i32 %260, i64 1, !dbg !83
  %304 = bitcast <2 x i32> %303 to <2 x float>, !dbg !83
  %305 = fsub <2 x float> %304, %301, !dbg !103
  %306 = fmul <2 x float> %305, %289, !dbg !104
  %307 = fadd <2 x float> %306, %301, !dbg !105
  %308 = fsub <2 x float> %307, %298, !dbg !106
  %309 = fmul <2 x float> %308, %123, !dbg !107
  %310 = fadd <2 x float> %298, %309, !dbg !108
  %311 = extractelement <2 x float> %310, i64 0, !dbg !109
  %312 = fadd float %160, %311, !dbg !109
  %313 = extractelement <2 x float> %284, i64 1, !dbg !110
  %314 = fadd float %286, %313, !dbg !110
  %315 = extractelement <2 x float> %310, i64 1, !dbg !110
  %316 = fadd float %312, %315, !dbg !110
  %317 = fcmp olt float %314, 0.000000e+00, !dbg !111
  %318 = fcmp olt float %316, 0.000000e+00, !dbg !111
  %319 = select i1 %317, float 0.000000e+00, float %314, !dbg !113
  %320 = select i1 %318, float 0.000000e+00, float %316, !dbg !113
  %321 = getelementptr float, ptr addrspace(1) %21, i64 %35, !dbg !114
  %322 = bitcast float %159 to i32, !dbg !115
  %323 = bitcast float %160 to i32, !dbg !115
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %322, i32 %323, ptr addrspace(1) %321, i1 true) #3, !dbg !115
  %324 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !116
  %325 = bitcast float %319 to i32, !dbg !117
  %326 = bitcast float %320 to i32, !dbg !117
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %325, i32 %326, ptr addrspace(1) %324, i1 true) #3, !dbg !117
  ret void, !dbg !118
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chu5qexfywxp23amcnlptldolpcydjzacikdtg2lecumzj3z7yid.py", directory: "inductor_cache/hu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_19", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 42, column: 32, scope: !7)
!46 = !DILocation(line: 42, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 32, scope: !7)
!48 = !DILocation(line: 43, column: 37, scope: !7)
!49 = !DILocation(line: 44, column: 32, scope: !7)
!50 = !DILocation(line: 44, column: 37, scope: !7)
!51 = !DILocation(line: 45, column: 32, scope: !7)
!52 = !DILocation(line: 45, column: 37, scope: !7)
!53 = !DILocation(line: 46, column: 32, scope: !7)
!54 = !DILocation(line: 46, column: 37, scope: !7)
!55 = !DILocation(line: 49, column: 18, scope: !7)
!56 = !DILocation(line: 50, column: 26, scope: !7)
!57 = !DILocation(line: 47, column: 18, scope: !7)
!58 = !DILocation(line: 52, column: 18, scope: !7)
!59 = !DILocation(line: 55, column: 19, scope: !7)
!60 = !DILocation(line: 56, column: 20, scope: !7)
!61 = !DILocation(line: 57, column: 20, scope: !7)
!62 = !DILocation(line: 58, column: 20, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !66)
!64 = distinct !DILexicalBlockFile(scope: !7, file: !65, discriminator: 0)
!65 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!66 = !DILocation(line: 60, column: 42, scope: !7)
!67 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !66)
!68 = !DILocation(line: 64, column: 35, scope: !7)
!69 = !DILocation(line: 67, column: 35, scope: !7)
!70 = !DILocation(line: 68, column: 41, scope: !7)
!71 = !DILocation(line: 68, column: 52, scope: !7)
!72 = !DILocation(line: 68, column: 49, scope: !7)
!73 = !DILocation(line: 68, column: 31, scope: !7)
!74 = !DILocation(line: 68, column: 57, scope: !7)
!75 = !DILocation(line: 71, column: 35, scope: !7)
!76 = !DILocation(line: 72, column: 31, scope: !7)
!77 = !DILocation(line: 72, column: 57, scope: !7)
!78 = !DILocation(line: 78, column: 35, scope: !7)
!79 = !DILocation(line: 79, column: 41, scope: !7)
!80 = !DILocation(line: 79, column: 31, scope: !7)
!81 = !DILocation(line: 79, column: 57, scope: !7)
!82 = !DILocation(line: 80, column: 31, scope: !7)
!83 = !DILocation(line: 80, column: 57, scope: !7)
!84 = !DILocation(line: 91, column: 35, scope: !7)
!85 = !DILocation(line: 94, column: 35, scope: !7)
!86 = !DILocation(line: 95, column: 42, scope: !7)
!87 = !DILocation(line: 95, column: 53, scope: !7)
!88 = !DILocation(line: 95, column: 50, scope: !7)
!89 = !DILocation(line: 95, column: 32, scope: !7)
!90 = !DILocation(line: 95, column: 58, scope: !7)
!91 = !DILocation(line: 98, column: 35, scope: !7)
!92 = !DILocation(line: 99, column: 32, scope: !7)
!93 = !DILocation(line: 99, column: 58, scope: !7)
!94 = !DILocation(line: 105, column: 35, scope: !7)
!95 = !DILocation(line: 106, column: 42, scope: !7)
!96 = !DILocation(line: 106, column: 32, scope: !7)
!97 = !DILocation(line: 106, column: 58, scope: !7)
!98 = !DILocation(line: 107, column: 32, scope: !7)
!99 = !DILocation(line: 107, column: 58, scope: !7)
!100 = !DILocation(line: 73, column: 20, scope: !7)
!101 = !DILocation(line: 74, column: 20, scope: !7)
!102 = !DILocation(line: 75, column: 20, scope: !7)
!103 = !DILocation(line: 81, column: 20, scope: !7)
!104 = !DILocation(line: 82, column: 20, scope: !7)
!105 = !DILocation(line: 83, column: 20, scope: !7)
!106 = !DILocation(line: 84, column: 20, scope: !7)
!107 = !DILocation(line: 85, column: 20, scope: !7)
!108 = !DILocation(line: 86, column: 20, scope: !7)
!109 = !DILocation(line: 87, column: 20, scope: !7)
!110 = !DILocation(line: 114, column: 20, scope: !7)
!111 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !112)
!112 = !DILocation(line: 115, column: 42, scope: !7)
!113 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !112)
!114 = !DILocation(line: 116, column: 25, scope: !7)
!115 = !DILocation(line: 116, column: 37, scope: !7)
!116 = !DILocation(line: 117, column: 28, scope: !7)
!117 = !DILocation(line: 117, column: 40, scope: !7)
!118 = !DILocation(line: 117, column: 4, scope: !7)
