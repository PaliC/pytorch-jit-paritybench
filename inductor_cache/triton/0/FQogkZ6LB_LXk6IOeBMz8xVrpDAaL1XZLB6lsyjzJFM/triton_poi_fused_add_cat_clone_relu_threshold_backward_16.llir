; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_cat_clone_relu_threshold_backward_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %17 = shl i32 %16, 7, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = lshr i32 %18, 1, !dbg !12
  %20 = and i32 %19, 7, !dbg !12
  %21 = and i32 %18, 16, !dbg !12
  %22 = lshr exact i32 %21, 1, !dbg !12
  %23 = and i32 %18, 32, !dbg !12
  %24 = lshr exact i32 %23, 1, !dbg !12
  %25 = and i32 %18, 64, !dbg !12
  %26 = lshr exact i32 %25, 1, !dbg !12
  %27 = or disjoint i32 %22, %20, !dbg !12
  %28 = or disjoint i32 %27, %24, !dbg !12
  %29 = or disjoint i32 %28, %26, !dbg !12
  %30 = and i32 %18, 1, !dbg !12
  %31 = shl i32 %18, 3, !dbg !12
  %32 = and i32 %31, 120, !dbg !12
  %33 = or disjoint i32 %17, %29, !dbg !13
  %34 = or i32 %33, 64, !dbg !13
  %35 = or disjoint i32 %17, %32, !dbg !13
  %36 = or disjoint i32 %35, 4, !dbg !13
  %37 = icmp slt i32 %33, 128, !dbg !14
  %38 = icmp slt i32 %34, 128, !dbg !14
  %39 = icmp slt i32 %35, 128, !dbg !14
  %40 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %41 = shl i32 %40, 3, !dbg !16
  %42 = shl nuw nsw i32 %30, 2, !dbg !17
  %.lobit1 = lshr exact i32 %21, 4, !dbg !17
  %43 = lshr exact i32 %23, 4, !dbg !17
  %44 = or disjoint i32 %.lobit1, %43, !dbg !17
  %45 = lshr exact i32 %25, 4, !dbg !17
  %46 = or disjoint i32 %44, %45, !dbg !17
  %47 = or disjoint i32 %41, %42, !dbg !18
  %48 = or disjoint i32 %46, %41, !dbg !18
  %49 = icmp slt i32 %47, 1024, !dbg !19
  %50 = icmp slt i32 %48, 1024, !dbg !19
  %.frozen = freeze i32 %35, !dbg !20
  %51 = sdiv i32 %.frozen, 32, !dbg !20
  %52 = mul i32 %51, 32, !dbg !21
  %.decomposed = sub i32 %.frozen, %52, !dbg !21
  %53 = srem i32 %36, 32, !dbg !21
  %54 = shl i32 %33, 10, !dbg !22
  %55 = shl i32 %34, 10, !dbg !22
  %56 = add i32 %47, %54, !dbg !23
  %57 = add i32 %47, %55, !dbg !23
  %58 = sext i32 %56 to i64, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %10, i64 %58, !dbg !24
  %60 = sext i32 %57 to i64, !dbg !24
  %61 = getelementptr float, ptr addrspace(1) %10, i64 %60, !dbg !24
  %62 = and i1 %37, %49, !dbg !25
  %63 = and i1 %38, %49, !dbg !25
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %62) #4, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !26
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %63) #4, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !26
  %74 = shl nuw nsw i32 %30, 9, !dbg !26
  %75 = or disjoint i32 %74, %20, !dbg !26
  %76 = or disjoint i32 %75, %22, !dbg !26
  %77 = or disjoint i32 %76, %24, !dbg !26
  %78 = or disjoint i32 %77, %26, !dbg !26
  %79 = and i32 %31, 1016, !dbg !26
  %.idx = shl nuw nsw i32 %30, 7, !dbg !26
  %80 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !26
  %81 = getelementptr float, ptr addrspace(3) %80, i32 %78, !dbg !26
  %82 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #4, !dbg !26
  %83 = or disjoint i32 %78, 128, !dbg !26
  %84 = lshr i32 %83, 4, !dbg !26
  %85 = and i32 %84, 268435448, !dbg !26
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !26
  %87 = getelementptr float, ptr addrspace(3) %86, i32 %83, !dbg !26
  %88 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #4, !dbg !26
  %89 = or disjoint i32 %78, 256, !dbg !26
  %90 = lshr i32 %89, 4, !dbg !26
  %91 = and i32 %90, 268435448, !dbg !26
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i32 %91, !dbg !26
  %93 = getelementptr float, ptr addrspace(3) %92, i32 %89, !dbg !26
  %94 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #4, !dbg !26
  %95 = or disjoint i32 %78, 384, !dbg !26
  %96 = lshr i32 %95, 4, !dbg !26
  %97 = and i32 %96, 268435448, !dbg !26
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97, !dbg !26
  %99 = getelementptr float, ptr addrspace(3) %98, i32 %95, !dbg !26
  %100 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 true) #4, !dbg !26
  %101 = or disjoint i32 %78, 64, !dbg !26
  %102 = getelementptr float, ptr addrspace(3) %80, i32 %101, !dbg !26
  %103 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #4, !dbg !26
  %104 = or disjoint i32 %78, 192, !dbg !26
  %105 = lshr i32 %104, 4, !dbg !26
  %106 = and i32 %105, 268435448, !dbg !26
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !26
  %108 = getelementptr float, ptr addrspace(3) %107, i32 %104, !dbg !26
  %109 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #4, !dbg !26
  %110 = or disjoint i32 %78, 320, !dbg !26
  %111 = lshr i32 %110, 4, !dbg !26
  %112 = and i32 %111, 268435448, !dbg !26
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !26
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %110, !dbg !26
  %115 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #4, !dbg !26
  %116 = or disjoint i32 %78, 448, !dbg !26
  %117 = lshr i32 %116, 4, !dbg !26
  %118 = and i32 %117, 268435448, !dbg !26
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !26
  %120 = getelementptr float, ptr addrspace(3) %119, i32 %116, !dbg !26
  %121 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %122 = lshr i32 %31, 4, !dbg !26
  %123 = and i32 %122, 56, !dbg !26
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %123, !dbg !26
  %125 = getelementptr inbounds float, ptr addrspace(3) %124, i32 %79, !dbg !26
  %126 = load <4 x float>, ptr addrspace(3) %125, align 16, !dbg !26
  %127 = getelementptr inbounds i8, ptr addrspace(3) %125, i32 16, !dbg !26
  %128 = load <4 x float>, ptr addrspace(3) %127, align 16, !dbg !26
  %129 = icmp slt i32 %.decomposed, 16, !dbg !27
  %130 = shl i32 %48, 4, !dbg !28
  %131 = shl i32 %51, 14, !dbg !29
  %132 = add i32 %130, %131, !dbg !30
  %133 = add i32 %132, %.decomposed, !dbg !31
  %134 = add i32 %132, %53, !dbg !31
  %135 = sext i32 %133 to i64, !dbg !32
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !32
  %137 = sext i32 %134 to i64, !dbg !32
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !32
  %139 = and i1 %129, %50, !dbg !33
  %140 = and i1 %39, %139, !dbg !34
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %136, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #4, !dbg !35
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %138, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #4, !dbg !35
  %143 = sext i32 %.decomposed to i64, !dbg !36
  %144 = getelementptr float, ptr addrspace(1) %1, i64 %143, !dbg !36
  %145 = sext i32 %53 to i64, !dbg !36
  %146 = getelementptr float, ptr addrspace(1) %1, i64 %145, !dbg !36
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %144, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #4, !dbg !37
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %146, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #4, !dbg !37
  %149 = getelementptr float, ptr addrspace(1) %2, i64 %143, !dbg !38
  %150 = getelementptr float, ptr addrspace(1) %2, i64 %145, !dbg !38
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %149, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #4, !dbg !39
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !39
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !39
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !39
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !39
  %156 = bitcast i32 %152 to float, !dbg !39
  %157 = bitcast i32 %153 to float, !dbg !39
  %158 = bitcast i32 %154 to float, !dbg !39
  %159 = bitcast i32 %155 to float, !dbg !39
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %150, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #4, !dbg !39
  %161 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !39
  %162 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !39
  %163 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !39
  %164 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !39
  %165 = bitcast i32 %161 to float, !dbg !39
  %166 = bitcast i32 %162 to float, !dbg !39
  %167 = bitcast i32 %163 to float, !dbg !39
  %168 = bitcast i32 %164 to float, !dbg !39
  %169 = fadd float %156, 0x3EE4F8B580000000, !dbg !40
  %170 = fadd float %157, 0x3EE4F8B580000000, !dbg !40
  %171 = fadd float %158, 0x3EE4F8B580000000, !dbg !40
  %172 = fadd float %159, 0x3EE4F8B580000000, !dbg !40
  %173 = fadd float %165, 0x3EE4F8B580000000, !dbg !40
  %174 = fadd float %166, 0x3EE4F8B580000000, !dbg !40
  %175 = fadd float %167, 0x3EE4F8B580000000, !dbg !40
  %176 = fadd float %168, 0x3EE4F8B580000000, !dbg !40
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i = icmp eq i32 %177, 0, !dbg !41
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i = icmp eq i32 %178, 0, !dbg !41
  br i1 %.not.i, label %184, label %179, !dbg !41

179:                                              ; preds = %15
  br i1 %.not1.i, label %182, label %180, !dbg !41

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %169) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %169) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

184:                                              ; preds = %15
  br i1 %.not1.i, label %187, label %185, !dbg !41

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.f(float %169) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.f(float %169) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %180, %182, %185, %187
  %.0.i = phi float [ %181, %180 ], [ %183, %182 ], [ %186, %185 ], [ %188, %187 ], !dbg !41
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i11 = icmp eq i32 %189, 0, !dbg !41
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i14 = icmp eq i32 %190, 0, !dbg !41
  br i1 %.not.i11, label %196, label %191, !dbg !41

191:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %194, label %192, !dbg !41

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %170) #4, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %170) #4, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

196:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %199, label %197, !dbg !41

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.f(float %170) #4, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.f(float %170) #4, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

__nv_sqrtf.exit15:                                ; preds = %192, %194, %197, %199
  %.0.i13 = phi float [ %193, %192 ], [ %195, %194 ], [ %198, %197 ], [ %200, %199 ], !dbg !41
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i16 = icmp eq i32 %201, 0, !dbg !41
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i19 = icmp eq i32 %202, 0, !dbg !41
  br i1 %.not.i16, label %208, label %203, !dbg !41

203:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %206, label %204, !dbg !41

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %171) #4, !dbg !41
  br label %__nv_sqrtf.exit20, !dbg !41

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %171) #4, !dbg !41
  br label %__nv_sqrtf.exit20, !dbg !41

208:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %211, label %209, !dbg !41

209:                                              ; preds = %208
  %210 = tail call float @llvm.nvvm.sqrt.rn.f(float %171) #4, !dbg !41
  br label %__nv_sqrtf.exit20, !dbg !41

211:                                              ; preds = %208
  %212 = tail call float @llvm.nvvm.sqrt.approx.f(float %171) #4, !dbg !41
  br label %__nv_sqrtf.exit20, !dbg !41

__nv_sqrtf.exit20:                                ; preds = %204, %206, %209, %211
  %.0.i18 = phi float [ %205, %204 ], [ %207, %206 ], [ %210, %209 ], [ %212, %211 ], !dbg !41
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i21 = icmp eq i32 %213, 0, !dbg !41
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i24 = icmp eq i32 %214, 0, !dbg !41
  br i1 %.not.i21, label %220, label %215, !dbg !41

215:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %218, label %216, !dbg !41

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %172) #4, !dbg !41
  br label %__nv_sqrtf.exit25, !dbg !41

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %172) #4, !dbg !41
  br label %__nv_sqrtf.exit25, !dbg !41

220:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %223, label %221, !dbg !41

221:                                              ; preds = %220
  %222 = tail call float @llvm.nvvm.sqrt.rn.f(float %172) #4, !dbg !41
  br label %__nv_sqrtf.exit25, !dbg !41

223:                                              ; preds = %220
  %224 = tail call float @llvm.nvvm.sqrt.approx.f(float %172) #4, !dbg !41
  br label %__nv_sqrtf.exit25, !dbg !41

__nv_sqrtf.exit25:                                ; preds = %216, %218, %221, %223
  %.0.i23 = phi float [ %217, %216 ], [ %219, %218 ], [ %222, %221 ], [ %224, %223 ], !dbg !41
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i26 = icmp eq i32 %225, 0, !dbg !41
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i29 = icmp eq i32 %226, 0, !dbg !41
  br i1 %.not.i26, label %232, label %227, !dbg !41

227:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %230, label %228, !dbg !41

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %173) #4, !dbg !41
  br label %__nv_sqrtf.exit30, !dbg !41

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %173) #4, !dbg !41
  br label %__nv_sqrtf.exit30, !dbg !41

232:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %235, label %233, !dbg !41

233:                                              ; preds = %232
  %234 = tail call float @llvm.nvvm.sqrt.rn.f(float %173) #4, !dbg !41
  br label %__nv_sqrtf.exit30, !dbg !41

235:                                              ; preds = %232
  %236 = tail call float @llvm.nvvm.sqrt.approx.f(float %173) #4, !dbg !41
  br label %__nv_sqrtf.exit30, !dbg !41

__nv_sqrtf.exit30:                                ; preds = %228, %230, %233, %235
  %.0.i28 = phi float [ %229, %228 ], [ %231, %230 ], [ %234, %233 ], [ %236, %235 ], !dbg !41
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i31 = icmp eq i32 %237, 0, !dbg !41
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i34 = icmp eq i32 %238, 0, !dbg !41
  br i1 %.not.i31, label %244, label %239, !dbg !41

239:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %242, label %240, !dbg !41

240:                                              ; preds = %239
  %241 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %174) #4, !dbg !41
  br label %__nv_sqrtf.exit35, !dbg !41

242:                                              ; preds = %239
  %243 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %174) #4, !dbg !41
  br label %__nv_sqrtf.exit35, !dbg !41

244:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %247, label %245, !dbg !41

245:                                              ; preds = %244
  %246 = tail call float @llvm.nvvm.sqrt.rn.f(float %174) #4, !dbg !41
  br label %__nv_sqrtf.exit35, !dbg !41

247:                                              ; preds = %244
  %248 = tail call float @llvm.nvvm.sqrt.approx.f(float %174) #4, !dbg !41
  br label %__nv_sqrtf.exit35, !dbg !41

__nv_sqrtf.exit35:                                ; preds = %240, %242, %245, %247
  %.0.i33 = phi float [ %241, %240 ], [ %243, %242 ], [ %246, %245 ], [ %248, %247 ], !dbg !41
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i36 = icmp eq i32 %249, 0, !dbg !41
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i39 = icmp eq i32 %250, 0, !dbg !41
  br i1 %.not.i36, label %256, label %251, !dbg !41

251:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %254, label %252, !dbg !41

252:                                              ; preds = %251
  %253 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %175) #4, !dbg !41
  br label %__nv_sqrtf.exit40, !dbg !41

254:                                              ; preds = %251
  %255 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %175) #4, !dbg !41
  br label %__nv_sqrtf.exit40, !dbg !41

256:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %259, label %257, !dbg !41

257:                                              ; preds = %256
  %258 = tail call float @llvm.nvvm.sqrt.rn.f(float %175) #4, !dbg !41
  br label %__nv_sqrtf.exit40, !dbg !41

259:                                              ; preds = %256
  %260 = tail call float @llvm.nvvm.sqrt.approx.f(float %175) #4, !dbg !41
  br label %__nv_sqrtf.exit40, !dbg !41

__nv_sqrtf.exit40:                                ; preds = %252, %254, %257, %259
  %.0.i38 = phi float [ %253, %252 ], [ %255, %254 ], [ %258, %257 ], [ %260, %259 ], !dbg !41
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i41 = icmp eq i32 %261, 0, !dbg !41
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i44 = icmp eq i32 %262, 0, !dbg !41
  br i1 %.not.i41, label %268, label %263, !dbg !41

263:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %266, label %264, !dbg !41

264:                                              ; preds = %263
  %265 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %176) #4, !dbg !41
  br label %__nv_sqrtf.exit45, !dbg !41

266:                                              ; preds = %263
  %267 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %176) #4, !dbg !41
  br label %__nv_sqrtf.exit45, !dbg !41

268:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %271, label %269, !dbg !41

269:                                              ; preds = %268
  %270 = tail call float @llvm.nvvm.sqrt.rn.f(float %176) #4, !dbg !41
  br label %__nv_sqrtf.exit45, !dbg !41

271:                                              ; preds = %268
  %272 = tail call float @llvm.nvvm.sqrt.approx.f(float %176) #4, !dbg !41
  br label %__nv_sqrtf.exit45, !dbg !41

__nv_sqrtf.exit45:                                ; preds = %264, %266, %269, %271
  %.0.i43 = phi float [ %265, %264 ], [ %267, %266 ], [ %270, %269 ], [ %272, %271 ], !dbg !41
  %273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !42
  %274 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !42
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #4, !dbg !42
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #4, !dbg !42
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #4, !dbg !42
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #4, !dbg !42
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #4, !dbg !42
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #4, !dbg !42
  %281 = getelementptr float, ptr addrspace(1) %3, i64 %143, !dbg !43
  %282 = getelementptr float, ptr addrspace(1) %3, i64 %145, !dbg !43
  %283 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %281, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #4, !dbg !44
  %284 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %282, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #4, !dbg !44
  %285 = getelementptr float, ptr addrspace(1) %4, i64 %143, !dbg !45
  %286 = getelementptr float, ptr addrspace(1) %4, i64 %145, !dbg !45
  %287 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %285, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #4, !dbg !46
  %288 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %286, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #4, !dbg !46
  %289 = icmp sgt i32 %.decomposed, 15, !dbg !47
  %290 = add nsw i32 %.decomposed, -16, !dbg !48
  %291 = add nsw i32 %53, -16, !dbg !48
  %292 = add i32 %132, %290, !dbg !49
  %293 = add i32 %132, %291, !dbg !49
  %294 = sext i32 %292 to i64, !dbg !50
  %295 = getelementptr float, ptr addrspace(1) %5, i64 %294, !dbg !50
  %296 = sext i32 %293 to i64, !dbg !50
  %297 = getelementptr float, ptr addrspace(1) %5, i64 %296, !dbg !50
  %298 = and i1 %289, %50, !dbg !51
  %299 = and i1 %39, %298, !dbg !52
  %300 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %295, i1 %299, i32 0, i1 %299, i32 0, i1 %299, i32 0, i1 %299, i32 0, i1 %299) #4, !dbg !53
  %301 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %297, i1 %299, i32 0, i1 %299, i32 0, i1 %299, i32 0, i1 %299, i32 0, i1 %299) #4, !dbg !53
  %302 = sext i32 %290 to i64, !dbg !54
  %303 = getelementptr float, ptr addrspace(1) %6, i64 %302, !dbg !54
  %304 = sext i32 %291 to i64, !dbg !54
  %305 = getelementptr float, ptr addrspace(1) %6, i64 %304, !dbg !54
  %306 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %303, i1 %299, i32 0, i1 %299, i32 0, i1 %299, i32 0, i1 %299, i32 0, i1 %299) #4, !dbg !55
  %307 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %305, i1 %299, i32 0, i1 %299, i32 0, i1 %299, i32 0, i1 %299, i32 0, i1 %299) #4, !dbg !55
  %308 = getelementptr float, ptr addrspace(1) %7, i64 %302, !dbg !56
  %309 = getelementptr float, ptr addrspace(1) %7, i64 %304, !dbg !56
  %310 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %308, i1 %299, i32 0, i1 %299, i32 0, i1 %299, i32 0, i1 %299, i32 0, i1 %299) #4, !dbg !57
  %311 = extractvalue { i32, i32, i32, i32 } %310, 0, !dbg !57
  %312 = extractvalue { i32, i32, i32, i32 } %310, 1, !dbg !57
  %313 = extractvalue { i32, i32, i32, i32 } %310, 2, !dbg !57
  %314 = extractvalue { i32, i32, i32, i32 } %310, 3, !dbg !57
  %315 = bitcast i32 %311 to float, !dbg !57
  %316 = bitcast i32 %312 to float, !dbg !57
  %317 = bitcast i32 %313 to float, !dbg !57
  %318 = bitcast i32 %314 to float, !dbg !57
  %319 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %309, i1 %299, i32 0, i1 %299, i32 0, i1 %299, i32 0, i1 %299, i32 0, i1 %299) #4, !dbg !57
  %320 = extractvalue { i32, i32, i32, i32 } %319, 0, !dbg !57
  %321 = extractvalue { i32, i32, i32, i32 } %319, 1, !dbg !57
  %322 = extractvalue { i32, i32, i32, i32 } %319, 2, !dbg !57
  %323 = extractvalue { i32, i32, i32, i32 } %319, 3, !dbg !57
  %324 = bitcast i32 %320 to float, !dbg !57
  %325 = bitcast i32 %321 to float, !dbg !57
  %326 = bitcast i32 %322 to float, !dbg !57
  %327 = bitcast i32 %323 to float, !dbg !57
  %328 = fadd float %315, 0x3EE4F8B580000000, !dbg !58
  %329 = fadd float %316, 0x3EE4F8B580000000, !dbg !58
  %330 = fadd float %317, 0x3EE4F8B580000000, !dbg !58
  %331 = fadd float %318, 0x3EE4F8B580000000, !dbg !58
  %332 = fadd float %324, 0x3EE4F8B580000000, !dbg !58
  %333 = fadd float %325, 0x3EE4F8B580000000, !dbg !58
  %334 = fadd float %326, 0x3EE4F8B580000000, !dbg !58
  %335 = fadd float %327, 0x3EE4F8B580000000, !dbg !58
  %336 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i46 = icmp eq i32 %336, 0, !dbg !59
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i49 = icmp eq i32 %337, 0, !dbg !59
  br i1 %.not.i46, label %343, label %338, !dbg !59

338:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %341, label %339, !dbg !59

339:                                              ; preds = %338
  %340 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %328) #4, !dbg !59
  br label %__nv_sqrtf.exit50, !dbg !59

341:                                              ; preds = %338
  %342 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %328) #4, !dbg !59
  br label %__nv_sqrtf.exit50, !dbg !59

343:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %346, label %344, !dbg !59

344:                                              ; preds = %343
  %345 = tail call float @llvm.nvvm.sqrt.rn.f(float %328) #4, !dbg !59
  br label %__nv_sqrtf.exit50, !dbg !59

346:                                              ; preds = %343
  %347 = tail call float @llvm.nvvm.sqrt.approx.f(float %328) #4, !dbg !59
  br label %__nv_sqrtf.exit50, !dbg !59

__nv_sqrtf.exit50:                                ; preds = %339, %341, %344, %346
  %.0.i48 = phi float [ %340, %339 ], [ %342, %341 ], [ %345, %344 ], [ %347, %346 ], !dbg !59
  %348 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i51 = icmp eq i32 %348, 0, !dbg !59
  %349 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i54 = icmp eq i32 %349, 0, !dbg !59
  br i1 %.not.i51, label %355, label %350, !dbg !59

350:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %353, label %351, !dbg !59

351:                                              ; preds = %350
  %352 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %329) #4, !dbg !59
  br label %__nv_sqrtf.exit55, !dbg !59

353:                                              ; preds = %350
  %354 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %329) #4, !dbg !59
  br label %__nv_sqrtf.exit55, !dbg !59

355:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %358, label %356, !dbg !59

356:                                              ; preds = %355
  %357 = tail call float @llvm.nvvm.sqrt.rn.f(float %329) #4, !dbg !59
  br label %__nv_sqrtf.exit55, !dbg !59

358:                                              ; preds = %355
  %359 = tail call float @llvm.nvvm.sqrt.approx.f(float %329) #4, !dbg !59
  br label %__nv_sqrtf.exit55, !dbg !59

__nv_sqrtf.exit55:                                ; preds = %351, %353, %356, %358
  %.0.i53 = phi float [ %352, %351 ], [ %354, %353 ], [ %357, %356 ], [ %359, %358 ], !dbg !59
  %360 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i56 = icmp eq i32 %360, 0, !dbg !59
  %361 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i59 = icmp eq i32 %361, 0, !dbg !59
  br i1 %.not.i56, label %367, label %362, !dbg !59

362:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %365, label %363, !dbg !59

363:                                              ; preds = %362
  %364 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %330) #4, !dbg !59
  br label %__nv_sqrtf.exit60, !dbg !59

365:                                              ; preds = %362
  %366 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %330) #4, !dbg !59
  br label %__nv_sqrtf.exit60, !dbg !59

367:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %370, label %368, !dbg !59

368:                                              ; preds = %367
  %369 = tail call float @llvm.nvvm.sqrt.rn.f(float %330) #4, !dbg !59
  br label %__nv_sqrtf.exit60, !dbg !59

370:                                              ; preds = %367
  %371 = tail call float @llvm.nvvm.sqrt.approx.f(float %330) #4, !dbg !59
  br label %__nv_sqrtf.exit60, !dbg !59

__nv_sqrtf.exit60:                                ; preds = %363, %365, %368, %370
  %.0.i58 = phi float [ %364, %363 ], [ %366, %365 ], [ %369, %368 ], [ %371, %370 ], !dbg !59
  %372 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i61 = icmp eq i32 %372, 0, !dbg !59
  %373 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i64 = icmp eq i32 %373, 0, !dbg !59
  br i1 %.not.i61, label %379, label %374, !dbg !59

374:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %377, label %375, !dbg !59

375:                                              ; preds = %374
  %376 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %331) #4, !dbg !59
  br label %__nv_sqrtf.exit65, !dbg !59

377:                                              ; preds = %374
  %378 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %331) #4, !dbg !59
  br label %__nv_sqrtf.exit65, !dbg !59

379:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %382, label %380, !dbg !59

380:                                              ; preds = %379
  %381 = tail call float @llvm.nvvm.sqrt.rn.f(float %331) #4, !dbg !59
  br label %__nv_sqrtf.exit65, !dbg !59

382:                                              ; preds = %379
  %383 = tail call float @llvm.nvvm.sqrt.approx.f(float %331) #4, !dbg !59
  br label %__nv_sqrtf.exit65, !dbg !59

__nv_sqrtf.exit65:                                ; preds = %375, %377, %380, %382
  %.0.i63 = phi float [ %376, %375 ], [ %378, %377 ], [ %381, %380 ], [ %383, %382 ], !dbg !59
  %384 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i66 = icmp eq i32 %384, 0, !dbg !59
  %385 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i69 = icmp eq i32 %385, 0, !dbg !59
  br i1 %.not.i66, label %391, label %386, !dbg !59

386:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %389, label %387, !dbg !59

387:                                              ; preds = %386
  %388 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %332) #4, !dbg !59
  br label %__nv_sqrtf.exit70, !dbg !59

389:                                              ; preds = %386
  %390 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %332) #4, !dbg !59
  br label %__nv_sqrtf.exit70, !dbg !59

391:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %394, label %392, !dbg !59

392:                                              ; preds = %391
  %393 = tail call float @llvm.nvvm.sqrt.rn.f(float %332) #4, !dbg !59
  br label %__nv_sqrtf.exit70, !dbg !59

394:                                              ; preds = %391
  %395 = tail call float @llvm.nvvm.sqrt.approx.f(float %332) #4, !dbg !59
  br label %__nv_sqrtf.exit70, !dbg !59

__nv_sqrtf.exit70:                                ; preds = %387, %389, %392, %394
  %.0.i68 = phi float [ %388, %387 ], [ %390, %389 ], [ %393, %392 ], [ %395, %394 ], !dbg !59
  %396 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i71 = icmp eq i32 %396, 0, !dbg !59
  %397 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i74 = icmp eq i32 %397, 0, !dbg !59
  br i1 %.not.i71, label %403, label %398, !dbg !59

398:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %401, label %399, !dbg !59

399:                                              ; preds = %398
  %400 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %333) #4, !dbg !59
  br label %__nv_sqrtf.exit75, !dbg !59

401:                                              ; preds = %398
  %402 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %333) #4, !dbg !59
  br label %__nv_sqrtf.exit75, !dbg !59

403:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %406, label %404, !dbg !59

404:                                              ; preds = %403
  %405 = tail call float @llvm.nvvm.sqrt.rn.f(float %333) #4, !dbg !59
  br label %__nv_sqrtf.exit75, !dbg !59

406:                                              ; preds = %403
  %407 = tail call float @llvm.nvvm.sqrt.approx.f(float %333) #4, !dbg !59
  br label %__nv_sqrtf.exit75, !dbg !59

__nv_sqrtf.exit75:                                ; preds = %399, %401, %404, %406
  %.0.i73 = phi float [ %400, %399 ], [ %402, %401 ], [ %405, %404 ], [ %407, %406 ], !dbg !59
  %408 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i76 = icmp eq i32 %408, 0, !dbg !59
  %409 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i79 = icmp eq i32 %409, 0, !dbg !59
  br i1 %.not.i76, label %415, label %410, !dbg !59

410:                                              ; preds = %__nv_sqrtf.exit75
  br i1 %.not1.i79, label %413, label %411, !dbg !59

411:                                              ; preds = %410
  %412 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %334) #4, !dbg !59
  br label %__nv_sqrtf.exit80, !dbg !59

413:                                              ; preds = %410
  %414 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %334) #4, !dbg !59
  br label %__nv_sqrtf.exit80, !dbg !59

415:                                              ; preds = %__nv_sqrtf.exit75
  br i1 %.not1.i79, label %418, label %416, !dbg !59

416:                                              ; preds = %415
  %417 = tail call float @llvm.nvvm.sqrt.rn.f(float %334) #4, !dbg !59
  br label %__nv_sqrtf.exit80, !dbg !59

418:                                              ; preds = %415
  %419 = tail call float @llvm.nvvm.sqrt.approx.f(float %334) #4, !dbg !59
  br label %__nv_sqrtf.exit80, !dbg !59

__nv_sqrtf.exit80:                                ; preds = %411, %413, %416, %418
  %.0.i78 = phi float [ %412, %411 ], [ %414, %413 ], [ %417, %416 ], [ %419, %418 ], !dbg !59
  %420 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i81 = icmp eq i32 %420, 0, !dbg !59
  %421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i84 = icmp eq i32 %421, 0, !dbg !59
  br i1 %.not.i81, label %427, label %422, !dbg !59

422:                                              ; preds = %__nv_sqrtf.exit80
  br i1 %.not1.i84, label %425, label %423, !dbg !59

423:                                              ; preds = %422
  %424 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %335) #4, !dbg !59
  br label %__nv_sqrtf.exit85, !dbg !59

425:                                              ; preds = %422
  %426 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %335) #4, !dbg !59
  br label %__nv_sqrtf.exit85, !dbg !59

427:                                              ; preds = %__nv_sqrtf.exit80
  br i1 %.not1.i84, label %430, label %428, !dbg !59

428:                                              ; preds = %427
  %429 = tail call float @llvm.nvvm.sqrt.rn.f(float %335) #4, !dbg !59
  br label %__nv_sqrtf.exit85, !dbg !59

430:                                              ; preds = %427
  %431 = tail call float @llvm.nvvm.sqrt.approx.f(float %335) #4, !dbg !59
  br label %__nv_sqrtf.exit85, !dbg !59

__nv_sqrtf.exit85:                                ; preds = %423, %425, %428, %430
  %.0.i83 = phi float [ %424, %423 ], [ %426, %425 ], [ %429, %428 ], [ %431, %430 ], !dbg !59
  %432 = extractvalue { i32, i32, i32, i32 } %301, 3, !dbg !53
  %433 = extractvalue { i32, i32, i32, i32 } %307, 3, !dbg !55
  %434 = extractvalue { i32, i32, i32, i32 } %301, 2, !dbg !53
  %435 = extractvalue { i32, i32, i32, i32 } %307, 2, !dbg !55
  %436 = extractvalue { i32, i32, i32, i32 } %301, 1, !dbg !53
  %437 = extractvalue { i32, i32, i32, i32 } %307, 1, !dbg !55
  %438 = extractvalue { i32, i32, i32, i32 } %301, 0, !dbg !53
  %439 = extractvalue { i32, i32, i32, i32 } %307, 0, !dbg !55
  %440 = insertelement <4 x i32> poison, i32 %438, i64 0, !dbg !53
  %441 = insertelement <4 x i32> %440, i32 %436, i64 1, !dbg !53
  %442 = insertelement <4 x i32> %441, i32 %434, i64 2, !dbg !53
  %443 = insertelement <4 x i32> %442, i32 %432, i64 3, !dbg !53
  %444 = bitcast <4 x i32> %443 to <4 x float>, !dbg !53
  %445 = insertelement <4 x i32> poison, i32 %439, i64 0, !dbg !55
  %446 = insertelement <4 x i32> %445, i32 %437, i64 1, !dbg !55
  %447 = insertelement <4 x i32> %446, i32 %435, i64 2, !dbg !55
  %448 = insertelement <4 x i32> %447, i32 %433, i64 3, !dbg !55
  %449 = bitcast <4 x i32> %448 to <4 x float>, !dbg !55
  %450 = fsub <4 x float> %444, %449, !dbg !60
  %451 = extractvalue { i32, i32, i32, i32 } %300, 3, !dbg !53
  %452 = extractvalue { i32, i32, i32, i32 } %306, 3, !dbg !55
  %453 = extractvalue { i32, i32, i32, i32 } %300, 2, !dbg !53
  %454 = extractvalue { i32, i32, i32, i32 } %306, 2, !dbg !55
  %455 = extractvalue { i32, i32, i32, i32 } %300, 1, !dbg !53
  %456 = extractvalue { i32, i32, i32, i32 } %306, 1, !dbg !55
  %457 = extractvalue { i32, i32, i32, i32 } %300, 0, !dbg !53
  %458 = extractvalue { i32, i32, i32, i32 } %306, 0, !dbg !55
  %459 = insertelement <4 x i32> poison, i32 %457, i64 0, !dbg !53
  %460 = insertelement <4 x i32> %459, i32 %455, i64 1, !dbg !53
  %461 = insertelement <4 x i32> %460, i32 %453, i64 2, !dbg !53
  %462 = insertelement <4 x i32> %461, i32 %451, i64 3, !dbg !53
  %463 = bitcast <4 x i32> %462 to <4 x float>, !dbg !53
  %464 = insertelement <4 x i32> poison, i32 %458, i64 0, !dbg !55
  %465 = insertelement <4 x i32> %464, i32 %456, i64 1, !dbg !55
  %466 = insertelement <4 x i32> %465, i32 %454, i64 2, !dbg !55
  %467 = insertelement <4 x i32> %466, i32 %452, i64 3, !dbg !55
  %468 = bitcast <4 x i32> %467 to <4 x float>, !dbg !55
  %469 = fsub <4 x float> %463, %468, !dbg !60
  %470 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !35
  %471 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !37
  %472 = extractvalue { i32, i32, i32, i32 } %284, 3, !dbg !44
  %473 = extractvalue { i32, i32, i32, i32 } %288, 3, !dbg !46
  %474 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !35
  %475 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !37
  %476 = extractvalue { i32, i32, i32, i32 } %284, 2, !dbg !44
  %477 = extractvalue { i32, i32, i32, i32 } %288, 2, !dbg !46
  %478 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !35
  %479 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !37
  %480 = extractvalue { i32, i32, i32, i32 } %284, 1, !dbg !44
  %481 = extractvalue { i32, i32, i32, i32 } %288, 1, !dbg !46
  %482 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !35
  %483 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !37
  %484 = insertelement <4 x i32> poison, i32 %482, i64 0, !dbg !35
  %485 = insertelement <4 x i32> %484, i32 %478, i64 1, !dbg !35
  %486 = insertelement <4 x i32> %485, i32 %474, i64 2, !dbg !35
  %487 = insertelement <4 x i32> %486, i32 %470, i64 3, !dbg !35
  %488 = bitcast <4 x i32> %487 to <4 x float>, !dbg !35
  %489 = insertelement <4 x i32> poison, i32 %483, i64 0, !dbg !37
  %490 = insertelement <4 x i32> %489, i32 %479, i64 1, !dbg !37
  %491 = insertelement <4 x i32> %490, i32 %475, i64 2, !dbg !37
  %492 = insertelement <4 x i32> %491, i32 %471, i64 3, !dbg !37
  %493 = bitcast <4 x i32> %492 to <4 x float>, !dbg !37
  %494 = fsub <4 x float> %488, %493, !dbg !61
  %495 = extractvalue { i32, i32, i32, i32 } %284, 0, !dbg !44
  %496 = extractvalue { i32, i32, i32, i32 } %288, 0, !dbg !46
  %497 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !35
  %498 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !37
  %499 = extractvalue { i32, i32, i32, i32 } %283, 3, !dbg !44
  %500 = extractvalue { i32, i32, i32, i32 } %287, 3, !dbg !46
  %501 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !35
  %502 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !37
  %503 = extractvalue { i32, i32, i32, i32 } %283, 2, !dbg !44
  %504 = extractvalue { i32, i32, i32, i32 } %287, 2, !dbg !46
  %505 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !35
  %506 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !37
  %507 = extractvalue { i32, i32, i32, i32 } %283, 1, !dbg !44
  %508 = extractvalue { i32, i32, i32, i32 } %287, 1, !dbg !46
  %509 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !35
  %510 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !37
  %511 = insertelement <4 x i32> poison, i32 %509, i64 0, !dbg !35
  %512 = insertelement <4 x i32> %511, i32 %505, i64 1, !dbg !35
  %513 = insertelement <4 x i32> %512, i32 %501, i64 2, !dbg !35
  %514 = insertelement <4 x i32> %513, i32 %497, i64 3, !dbg !35
  %515 = bitcast <4 x i32> %514 to <4 x float>, !dbg !35
  %516 = insertelement <4 x i32> poison, i32 %510, i64 0, !dbg !37
  %517 = insertelement <4 x i32> %516, i32 %506, i64 1, !dbg !37
  %518 = insertelement <4 x i32> %517, i32 %502, i64 2, !dbg !37
  %519 = insertelement <4 x i32> %518, i32 %498, i64 3, !dbg !37
  %520 = bitcast <4 x i32> %519 to <4 x float>, !dbg !37
  %521 = fsub <4 x float> %515, %520, !dbg !61
  %522 = extractvalue { i32, i32, i32, i32 } %283, 0, !dbg !44
  %523 = extractvalue { i32, i32, i32, i32 } %287, 0, !dbg !46
  %524 = and i1 %39, %50, !dbg !25
  %525 = sdiv i32 %34, 16, !dbg !62
  %526 = sdiv i32 %33, 16, !dbg !62
  %527 = srem i32 %526, 2, !dbg !63
  %528 = sdiv i32 %34, 32, !dbg !20
  %529 = sdiv i32 %33, 32, !dbg !20
  %530 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #4, !dbg !64
  %531 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #4, !dbg !64
  %532 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #4, !dbg !64
  %533 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #4, !dbg !64
  %534 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #4, !dbg !64
  %535 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #4, !dbg !64
  %536 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i78) #4, !dbg !64
  %537 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i83) #4, !dbg !64
  %538 = getelementptr float, ptr addrspace(1) %8, i64 %302, !dbg !65
  %539 = getelementptr float, ptr addrspace(1) %8, i64 %304, !dbg !65
  %540 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %538, i1 %299, i32 0, i1 %299, i32 0, i1 %299, i32 0, i1 %299, i32 0, i1 %299) #4, !dbg !66
  %541 = extractvalue { i32, i32, i32, i32 } %540, 0, !dbg !66
  %542 = extractvalue { i32, i32, i32, i32 } %540, 1, !dbg !66
  %543 = extractvalue { i32, i32, i32, i32 } %540, 2, !dbg !66
  %544 = extractvalue { i32, i32, i32, i32 } %540, 3, !dbg !66
  %545 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %539, i1 %299, i32 0, i1 %299, i32 0, i1 %299, i32 0, i1 %299, i32 0, i1 %299) #4, !dbg !66
  %546 = extractvalue { i32, i32, i32, i32 } %545, 0, !dbg !66
  %547 = extractvalue { i32, i32, i32, i32 } %545, 1, !dbg !66
  %548 = extractvalue { i32, i32, i32, i32 } %545, 2, !dbg !66
  %549 = extractvalue { i32, i32, i32, i32 } %545, 3, !dbg !66
  %550 = getelementptr float, ptr addrspace(1) %9, i64 %302, !dbg !67
  %551 = getelementptr float, ptr addrspace(1) %9, i64 %304, !dbg !67
  %552 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %550, i1 %299, i32 0, i1 %299, i32 0, i1 %299, i32 0, i1 %299, i32 0, i1 %299) #4, !dbg !68
  %553 = extractvalue { i32, i32, i32, i32 } %552, 0, !dbg !68
  %554 = extractvalue { i32, i32, i32, i32 } %552, 1, !dbg !68
  %555 = extractvalue { i32, i32, i32, i32 } %552, 2, !dbg !68
  %556 = extractvalue { i32, i32, i32, i32 } %552, 3, !dbg !68
  %557 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %551, i1 %299, i32 0, i1 %299, i32 0, i1 %299, i32 0, i1 %299, i32 0, i1 %299) #4, !dbg !68
  %558 = extractvalue { i32, i32, i32, i32 } %557, 0, !dbg !68
  %559 = extractvalue { i32, i32, i32, i32 } %557, 1, !dbg !68
  %560 = extractvalue { i32, i32, i32, i32 } %557, 2, !dbg !68
  %561 = extractvalue { i32, i32, i32, i32 } %557, 3, !dbg !68
  %562 = shl nsw i32 %527, 10, !dbg !69
  %563 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !70
  %564 = insertelement <2 x i32> %563, i32 %525, i64 1, !dbg !70
  %565 = srem <2 x i32> %564, <i32 16, i32 2>, !dbg !70
  %566 = shl nsw <2 x i32> %565, <i32 11, i32 10>, !dbg !71
  %567 = shl i32 %529, 15, !dbg !72
  %568 = shl i32 %528, 15, !dbg !72
  %569 = shl i32 %51, 15, !dbg !72
  %570 = extractelement <2 x i32> %566, i64 0, !dbg !73
  %571 = add i32 %570, %47, !dbg !73
  %572 = add i32 %571, %567, !dbg !74
  %573 = add i32 %572, %562, !dbg !75
  %574 = add i32 %568, %570, !dbg !73
  %575 = extractelement <2 x i32> %566, i64 1, !dbg !74
  %576 = add i32 %574, %575, !dbg !74
  %577 = add i32 %576, %47, !dbg !75
  %578 = sext i32 %573 to i64, !dbg !76
  %579 = getelementptr float, ptr addrspace(1) %11, i64 %578, !dbg !76
  %580 = sext i32 %577 to i64, !dbg !76
  %581 = getelementptr float, ptr addrspace(1) %11, i64 %580, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %582 = shl i32 %18, 6, !dbg !77
  %583 = and i32 %582, 960, !dbg !77
  %584 = or disjoint i32 %583, %.lobit1, !dbg !77
  %585 = or disjoint i32 %584, %43, !dbg !77
  %586 = or disjoint i32 %585, %45, !dbg !77
  %587 = shl i32 %18, 2, !dbg !77
  %588 = and i32 %587, 508, !dbg !77
  %589 = lshr exact i32 %583, 1, !dbg !77
  %590 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %589, !dbg !77
  %591 = getelementptr inbounds float, ptr addrspace(3) %590, i32 %586, !dbg !77
  %592 = or disjoint i32 %586, 8, !dbg !77
  %593 = lshr i32 %592, 3, !dbg !77
  %594 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %593, !dbg !77
  %595 = getelementptr inbounds float, ptr addrspace(3) %594, i32 %592, !dbg !77
  %596 = or disjoint i32 %586, 16, !dbg !77
  %597 = lshr i32 %596, 3, !dbg !77
  %598 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %597, !dbg !77
  %599 = getelementptr inbounds float, ptr addrspace(3) %598, i32 %596, !dbg !77
  %600 = or disjoint i32 %586, 24, !dbg !77
  %601 = lshr i32 %600, 3, !dbg !77
  %602 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %601, !dbg !77
  %603 = getelementptr inbounds float, ptr addrspace(3) %602, i32 %600, !dbg !77
  %604 = or disjoint i32 %586, 32, !dbg !77
  %605 = lshr i32 %604, 3, !dbg !77
  %606 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %605, !dbg !77
  %607 = getelementptr inbounds float, ptr addrspace(3) %606, i32 %604, !dbg !77
  %608 = or disjoint i32 %586, 40, !dbg !77
  %609 = lshr i32 %608, 3, !dbg !77
  %610 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %609, !dbg !77
  %611 = getelementptr inbounds float, ptr addrspace(3) %610, i32 %608, !dbg !77
  %612 = or disjoint i32 %586, 48, !dbg !77
  %613 = lshr i32 %612, 3, !dbg !77
  %614 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %613, !dbg !77
  %615 = getelementptr inbounds float, ptr addrspace(3) %614, i32 %612, !dbg !77
  %616 = or disjoint i32 %586, 56, !dbg !77
  %617 = lshr i32 %616, 3, !dbg !77
  %618 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %617, !dbg !77
  %619 = getelementptr inbounds float, ptr addrspace(3) %618, i32 %616, !dbg !77
  %620 = lshr i32 %588, 3, !dbg !77
  %621 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %620, !dbg !77
  %622 = getelementptr inbounds float, ptr addrspace(3) %621, i32 %588, !dbg !77
  %623 = or disjoint i32 %588, 1, !dbg !77
  %624 = getelementptr inbounds float, ptr addrspace(3) %621, i32 %623, !dbg !77
  %625 = or disjoint i32 %588, 2, !dbg !77
  %626 = getelementptr inbounds float, ptr addrspace(3) %621, i32 %625, !dbg !77
  %627 = or disjoint i32 %588, 3, !dbg !77
  %628 = getelementptr inbounds float, ptr addrspace(3) %621, i32 %627, !dbg !77
  %629 = or disjoint i32 %588, 512, !dbg !77
  %630 = lshr i32 %629, 3, !dbg !77
  %631 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %630, !dbg !77
  %632 = getelementptr inbounds float, ptr addrspace(3) %631, i32 %629, !dbg !77
  %633 = or disjoint i32 %588, 513, !dbg !77
  %634 = lshr i32 %633, 3, !dbg !77
  %635 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %634, !dbg !77
  %636 = getelementptr inbounds float, ptr addrspace(3) %635, i32 %633, !dbg !77
  %637 = or disjoint i32 %588, 514, !dbg !77
  %638 = lshr i32 %637, 3, !dbg !77
  %639 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %638, !dbg !77
  %640 = getelementptr inbounds float, ptr addrspace(3) %639, i32 %637, !dbg !77
  %641 = or disjoint i32 %588, 515, !dbg !77
  %642 = lshr i32 %641, 3, !dbg !77
  %643 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %642, !dbg !77
  %644 = getelementptr inbounds float, ptr addrspace(3) %643, i32 %641, !dbg !77
  %645 = shl i32 %48, 5, !dbg !78
  %646 = add i32 %645, %.decomposed, !dbg !79
  %647 = add i32 %646, %569, !dbg !80
  %648 = sext i32 %647 to i64, !dbg !81
  %649 = getelementptr i1, ptr addrspace(1) %12, i64 %648, !dbg !81
  %650 = insertelement <4 x float> poison, float %273, i64 0, !dbg !82
  %651 = insertelement <4 x float> %650, float %274, i64 1, !dbg !82
  %652 = insertelement <4 x float> %651, float %275, i64 2, !dbg !82
  %653 = insertelement <4 x float> %652, float %276, i64 3, !dbg !82
  %654 = fmul <4 x float> %521, %653, !dbg !82
  %655 = insertelement <4 x i32> poison, i32 %522, i64 0, !dbg !44
  %656 = insertelement <4 x i32> %655, i32 %507, i64 1, !dbg !44
  %657 = insertelement <4 x i32> %656, i32 %503, i64 2, !dbg !44
  %658 = insertelement <4 x i32> %657, i32 %499, i64 3, !dbg !44
  %659 = bitcast <4 x i32> %658 to <4 x float>, !dbg !44
  %660 = fmul <4 x float> %654, %659, !dbg !83
  %661 = insertelement <4 x i32> poison, i32 %523, i64 0, !dbg !46
  %662 = insertelement <4 x i32> %661, i32 %508, i64 1, !dbg !46
  %663 = insertelement <4 x i32> %662, i32 %504, i64 2, !dbg !46
  %664 = insertelement <4 x i32> %663, i32 %500, i64 3, !dbg !46
  %665 = bitcast <4 x i32> %664 to <4 x float>, !dbg !46
  %666 = fadd <4 x float> %660, %665, !dbg !84
  %667 = fcmp olt <4 x float> %666, zeroinitializer, !dbg !85
  %668 = select <4 x i1> %667, <4 x float> zeroinitializer, <4 x float> %666, !dbg !89
  %669 = insertelement <4 x float> poison, float %530, i64 0, !dbg !90
  %670 = insertelement <4 x float> %669, float %531, i64 1, !dbg !90
  %671 = insertelement <4 x float> %670, float %532, i64 2, !dbg !90
  %672 = insertelement <4 x float> %671, float %533, i64 3, !dbg !90
  %673 = fmul <4 x float> %469, %672, !dbg !90
  %674 = insertelement <4 x i32> poison, i32 %541, i64 0, !dbg !66
  %675 = insertelement <4 x i32> %674, i32 %542, i64 1, !dbg !66
  %676 = insertelement <4 x i32> %675, i32 %543, i64 2, !dbg !66
  %677 = insertelement <4 x i32> %676, i32 %544, i64 3, !dbg !66
  %678 = bitcast <4 x i32> %677 to <4 x float>, !dbg !66
  %679 = fmul <4 x float> %673, %678, !dbg !91
  %680 = insertelement <4 x i32> poison, i32 %553, i64 0, !dbg !68
  %681 = insertelement <4 x i32> %680, i32 %554, i64 1, !dbg !68
  %682 = insertelement <4 x i32> %681, i32 %555, i64 2, !dbg !68
  %683 = insertelement <4 x i32> %682, i32 %556, i64 3, !dbg !68
  %684 = bitcast <4 x i32> %683 to <4 x float>, !dbg !68
  %685 = fadd <4 x float> %679, %684, !dbg !92
  %686 = fcmp olt <4 x float> %685, zeroinitializer, !dbg !93
  %687 = select <4 x i1> %686, <4 x float> zeroinitializer, <4 x float> %685, !dbg !95
  %688 = insertelement <4 x i1> poison, i1 %129, i64 0, !dbg !96
  %689 = shufflevector <4 x i1> %688, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !96
  %690 = select <4 x i1> %689, <4 x float> %668, <4 x float> %687, !dbg !96
  %691 = fadd <4 x float> %126, %690, !dbg !97
  %692 = fcmp olt <4 x float> %691, zeroinitializer, !dbg !98
  %693 = select <4 x i1> %692, <4 x float> zeroinitializer, <4 x float> %691, !dbg !100
  %694 = fcmp ole <4 x float> %693, zeroinitializer, !dbg !101
  %695 = extractelement <4 x float> %693, i64 0, !dbg !77
  %696 = bitcast float %695 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %591, <1 x i32> %696, i1 true) #4, !dbg !77
  %697 = extractelement <4 x float> %693, i64 1, !dbg !77
  %698 = bitcast float %697 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %595, <1 x i32> %698, i1 true) #4, !dbg !77
  %699 = extractelement <4 x float> %693, i64 2, !dbg !77
  %700 = bitcast float %699 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %599, <1 x i32> %700, i1 true) #4, !dbg !77
  %701 = extractelement <4 x float> %693, i64 3, !dbg !77
  %702 = bitcast float %701 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %603, <1 x i32> %702, i1 true) #4, !dbg !77
  %703 = insertelement <4 x float> poison, float %277, i64 0, !dbg !82
  %704 = insertelement <4 x float> %703, float %278, i64 1, !dbg !82
  %705 = insertelement <4 x float> %704, float %279, i64 2, !dbg !82
  %706 = insertelement <4 x float> %705, float %280, i64 3, !dbg !82
  %707 = fmul <4 x float> %494, %706, !dbg !82
  %708 = insertelement <4 x i32> poison, i32 %495, i64 0, !dbg !44
  %709 = insertelement <4 x i32> %708, i32 %480, i64 1, !dbg !44
  %710 = insertelement <4 x i32> %709, i32 %476, i64 2, !dbg !44
  %711 = insertelement <4 x i32> %710, i32 %472, i64 3, !dbg !44
  %712 = bitcast <4 x i32> %711 to <4 x float>, !dbg !44
  %713 = fmul <4 x float> %707, %712, !dbg !83
  %714 = insertelement <4 x i32> poison, i32 %496, i64 0, !dbg !46
  %715 = insertelement <4 x i32> %714, i32 %481, i64 1, !dbg !46
  %716 = insertelement <4 x i32> %715, i32 %477, i64 2, !dbg !46
  %717 = insertelement <4 x i32> %716, i32 %473, i64 3, !dbg !46
  %718 = bitcast <4 x i32> %717 to <4 x float>, !dbg !46
  %719 = fadd <4 x float> %713, %718, !dbg !84
  %720 = fcmp olt <4 x float> %719, zeroinitializer, !dbg !85
  %721 = select <4 x i1> %720, <4 x float> zeroinitializer, <4 x float> %719, !dbg !89
  %722 = insertelement <4 x float> poison, float %534, i64 0, !dbg !90
  %723 = insertelement <4 x float> %722, float %535, i64 1, !dbg !90
  %724 = insertelement <4 x float> %723, float %536, i64 2, !dbg !90
  %725 = insertelement <4 x float> %724, float %537, i64 3, !dbg !90
  %726 = fmul <4 x float> %450, %725, !dbg !90
  %727 = insertelement <4 x i32> poison, i32 %546, i64 0, !dbg !66
  %728 = insertelement <4 x i32> %727, i32 %547, i64 1, !dbg !66
  %729 = insertelement <4 x i32> %728, i32 %548, i64 2, !dbg !66
  %730 = insertelement <4 x i32> %729, i32 %549, i64 3, !dbg !66
  %731 = bitcast <4 x i32> %730 to <4 x float>, !dbg !66
  %732 = fmul <4 x float> %726, %731, !dbg !91
  %733 = insertelement <4 x i32> poison, i32 %558, i64 0, !dbg !68
  %734 = insertelement <4 x i32> %733, i32 %559, i64 1, !dbg !68
  %735 = insertelement <4 x i32> %734, i32 %560, i64 2, !dbg !68
  %736 = insertelement <4 x i32> %735, i32 %561, i64 3, !dbg !68
  %737 = bitcast <4 x i32> %736 to <4 x float>, !dbg !68
  %738 = fadd <4 x float> %732, %737, !dbg !92
  %739 = fcmp olt <4 x float> %738, zeroinitializer, !dbg !93
  %740 = select <4 x i1> %739, <4 x float> zeroinitializer, <4 x float> %738, !dbg !95
  %741 = select <4 x i1> %689, <4 x float> %721, <4 x float> %740, !dbg !96
  %742 = fadd <4 x float> %128, %741, !dbg !97
  %743 = fcmp olt <4 x float> %742, zeroinitializer, !dbg !98
  %744 = select <4 x i1> %743, <4 x float> zeroinitializer, <4 x float> %742, !dbg !100
  %745 = fcmp ole <4 x float> %744, zeroinitializer, !dbg !101
  %746 = extractelement <4 x float> %744, i64 0, !dbg !77
  %747 = bitcast float %746 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %607, <1 x i32> %747, i1 true) #4, !dbg !77
  %748 = extractelement <4 x float> %744, i64 1, !dbg !77
  %749 = bitcast float %748 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %611, <1 x i32> %749, i1 true) #4, !dbg !77
  %750 = extractelement <4 x float> %744, i64 2, !dbg !77
  %751 = bitcast float %750 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %615, <1 x i32> %751, i1 true) #4, !dbg !77
  %752 = extractelement <4 x float> %744, i64 3, !dbg !77
  %753 = bitcast float %752 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %619, <1 x i32> %753, i1 true) #4, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %754 = load i32, ptr addrspace(3) %622, align 4, !dbg !77
  %755 = load i32, ptr addrspace(3) %624, align 4, !dbg !77
  %756 = load i32, ptr addrspace(3) %626, align 4, !dbg !77
  %757 = load i32, ptr addrspace(3) %628, align 4, !dbg !77
  %758 = load i32, ptr addrspace(3) %632, align 4, !dbg !77
  %759 = load i32, ptr addrspace(3) %636, align 4, !dbg !77
  %760 = load i32, ptr addrspace(3) %640, align 4, !dbg !77
  %761 = load i32, ptr addrspace(3) %644, align 4, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %754, i32 %755, i32 %756, i32 %757, ptr addrspace(1) %579, i1 %62) #4, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %758, i32 %759, i32 %760, i32 %761, ptr addrspace(1) %581, i1 %63) #4, !dbg !77
  %762 = zext <4 x i1> %694 to <4 x i8>, !dbg !102
  %763 = bitcast <4 x i8> %762 to i32, !dbg !102
  %764 = zext <4 x i1> %745 to <4 x i8>, !dbg !102
  %765 = bitcast <4 x i8> %764 to i32, !dbg !102
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %763, i32 %765, ptr addrspace(1) %649, i1 %524) #4, !dbg !102
  ret void, !dbg !103
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py", directory: "inductor_cache/zx")
!4 = !{ptr @triton_poi_fused_add_cat_clone_relu_threshold_backward_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_cat_clone_relu_threshold_backward_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_cat_clone_relu_threshold_backward_16", linkageName: "triton_poi_fused_add_cat_clone_relu_threshold_backward_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 42, scope: !7)
!23 = !DILocation(line: 34, column: 37, scope: !7)
!24 = !DILocation(line: 34, column: 32, scope: !7)
!25 = !DILocation(line: 34, column: 55, scope: !7)
!26 = !DILocation(line: 34, column: 47, scope: !7)
!27 = !DILocation(line: 39, column: 18, scope: !7)
!28 = !DILocation(line: 40, column: 33, scope: !7)
!29 = !DILocation(line: 40, column: 44, scope: !7)
!30 = !DILocation(line: 40, column: 38, scope: !7)
!31 = !DILocation(line: 40, column: 50, scope: !7)
!32 = !DILocation(line: 40, column: 30, scope: !7)
!33 = !DILocation(line: 40, column: 63, scope: !7)
!34 = !DILocation(line: 40, column: 71, scope: !7)
!35 = !DILocation(line: 40, column: 56, scope: !7)
!36 = !DILocation(line: 41, column: 30, scope: !7)
!37 = !DILocation(line: 41, column: 70, scope: !7)
!38 = !DILocation(line: 43, column: 30, scope: !7)
!39 = !DILocation(line: 43, column: 70, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 27, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 31, scope: !7)
!44 = !DILocation(line: 52, column: 71, scope: !7)
!45 = !DILocation(line: 54, column: 31, scope: !7)
!46 = !DILocation(line: 54, column: 71, scope: !7)
!47 = !DILocation(line: 60, column: 20, scope: !7)
!48 = !DILocation(line: 63, column: 59, scope: !7)
!49 = !DILocation(line: 63, column: 51, scope: !7)
!50 = !DILocation(line: 63, column: 31, scope: !7)
!51 = !DILocation(line: 63, column: 73, scope: !7)
!52 = !DILocation(line: 63, column: 81, scope: !7)
!53 = !DILocation(line: 63, column: 65, scope: !7)
!54 = !DILocation(line: 64, column: 31, scope: !7)
!55 = !DILocation(line: 64, column: 79, scope: !7)
!56 = !DILocation(line: 66, column: 31, scope: !7)
!57 = !DILocation(line: 66, column: 79, scope: !7)
!58 = !DILocation(line: 68, column: 20, scope: !7)
!59 = !DILocation(line: 69, column: 27, scope: !7)
!60 = !DILocation(line: 65, column: 20, scope: !7)
!61 = !DILocation(line: 42, column: 18, scope: !7)
!62 = !DILocation(line: 33, column: 21, scope: !7)
!63 = !DILocation(line: 33, column: 27, scope: !7)
!64 = !DILocation(line: 71, column: 20, scope: !7)
!65 = !DILocation(line: 75, column: 31, scope: !7)
!66 = !DILocation(line: 75, column: 79, scope: !7)
!67 = !DILocation(line: 77, column: 31, scope: !7)
!68 = !DILocation(line: 77, column: 79, scope: !7)
!69 = !DILocation(line: 89, column: 35, scope: !7)
!70 = !DILocation(line: 32, column: 19, scope: !7)
!71 = !DILocation(line: 89, column: 45, scope: !7)
!72 = !DILocation(line: 89, column: 56, scope: !7)
!73 = !DILocation(line: 89, column: 30, scope: !7)
!74 = !DILocation(line: 89, column: 40, scope: !7)
!75 = !DILocation(line: 89, column: 50, scope: !7)
!76 = !DILocation(line: 89, column: 25, scope: !7)
!77 = !DILocation(line: 89, column: 68, scope: !7)
!78 = !DILocation(line: 90, column: 33, scope: !7)
!79 = !DILocation(line: 90, column: 30, scope: !7)
!80 = !DILocation(line: 90, column: 38, scope: !7)
!81 = !DILocation(line: 90, column: 25, scope: !7)
!82 = !DILocation(line: 51, column: 19, scope: !7)
!83 = !DILocation(line: 53, column: 20, scope: !7)
!84 = !DILocation(line: 55, column: 20, scope: !7)
!85 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlockFile(scope: !7, file: !87, discriminator: 0)
!87 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!88 = !DILocation(line: 57, column: 42, scope: !7)
!89 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !88)
!90 = !DILocation(line: 74, column: 20, scope: !7)
!91 = !DILocation(line: 76, column: 20, scope: !7)
!92 = !DILocation(line: 78, column: 20, scope: !7)
!93 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !94)
!94 = !DILocation(line: 80, column: 42, scope: !7)
!95 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !94)
!96 = !DILocation(line: 0, scope: !7)
!97 = !DILocation(line: 84, column: 20, scope: !7)
!98 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !99)
!99 = !DILocation(line: 86, column: 42, scope: !7)
!100 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !99)
!101 = !DILocation(line: 88, column: 21, scope: !7)
!102 = !DILocation(line: 90, column: 56, scope: !7)
!103 = !DILocation(line: 90, column: 4, scope: !7)
