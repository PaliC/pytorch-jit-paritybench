#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_cat_clone_relu_threshold_backward_16(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":19:0), %arg10: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":19:0), %arg11: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":19:0), %arg12: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":19:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":19:0), %arg14: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<8x128xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<9.99999974E-6> : tensor<8x128xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<8x128xf32, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<128> : tensor<1x128xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<128> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<1024> : tensor<8x1xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<1024> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<32> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<32> : tensor<1x128xi32, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<16> : tensor<1x128xi32, #blocked1> loc(#loc1)
    %cst_9 = arith.constant dense<2> : tensor<1x128xi32, #blocked1> loc(#loc1)
    %cst_10 = arith.constant dense<1024> : tensor<1x128xi32, #blocked1> loc(#loc1)
    %cst_11 = arith.constant dense<16> : tensor<1x128xi64, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<16> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<16384> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_14 = arith.constant dense<-16> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_15 = arith.constant dense<2048> : tensor<1x128xi32, #blocked1> loc(#loc1)
    %cst_16 = arith.constant dense<32768> : tensor<1x128xi32, #blocked1> loc(#loc1)
    %cst_17 = arith.constant dense<32768> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_18 = arith.constant dense<32> : tensor<8x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x128xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<1x128xi32, #blocked1> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<1x128xi32, #blocked> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<1x128xi32, #blocked1> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<1x128xi32, #blocked> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_2 : tensor<1x128xi32, #blocked1> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_3 : tensor<1x128xi32, #blocked> loc(#loc6)
    %12 = tt.get_program_id x : i32 loc(#loc7)
    %13 = arith.muli %12, %c8_i32 : i32 loc(#loc8)
    %14 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc9)
    %15 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc9)
    %16 = tt.expand_dims %14 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xi32, #blocked1> loc(#loc9)
    %17 = tt.expand_dims %15 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc9)
    %18 = tt.splat %13 : i32 -> tensor<8x1xi32, #blocked1> loc(#loc10)
    %19 = tt.splat %13 : i32 -> tensor<8x1xi32, #blocked> loc(#loc10)
    %20 = arith.addi %18, %16 : tensor<8x1xi32, #blocked1> loc(#loc10)
    %21 = arith.addi %19, %17 : tensor<8x1xi32, #blocked> loc(#loc10)
    %22 = arith.cmpi slt, %20, %cst_4 : tensor<8x1xi32, #blocked1> loc(#loc11)
    %23 = arith.cmpi slt, %21, %cst_5 : tensor<8x1xi32, #blocked> loc(#loc11)
    %24 = arith.remsi %9, %cst_6 : tensor<1x128xi32, #blocked> loc(#loc12)
    %25 = arith.divsi %9, %cst_6 : tensor<1x128xi32, #blocked> loc(#loc13)
    %26 = arith.divsi %8, %cst_7 : tensor<1x128xi32, #blocked1> loc(#loc13)
    %27 = arith.remsi %8, %cst_8 : tensor<1x128xi32, #blocked1> loc(#loc14)
    %28 = arith.divsi %8, %cst_8 : tensor<1x128xi32, #blocked1> loc(#loc15)
    %29 = arith.remsi %28, %cst_9 : tensor<1x128xi32, #blocked1> loc(#loc16)
    %30 = arith.muli %8, %cst_10 : tensor<1x128xi32, #blocked1> loc(#loc17)
    %31 = tt.broadcast %20 : tensor<8x1xi32, #blocked1> -> tensor<8x128xi32, #blocked1> loc(#loc18)
    %32 = tt.broadcast %30 : tensor<1x128xi32, #blocked1> -> tensor<8x128xi32, #blocked1> loc(#loc18)
    %33 = arith.addi %31, %32 : tensor<8x128xi32, #blocked1> loc(#loc18)
    %34 = tt.splat %arg10 : !tt.ptr<f32> -> tensor<8x128x!tt.ptr<f32>, #blocked1> loc(#loc19)
    %35 = tt.addptr %34, %33 : tensor<8x128x!tt.ptr<f32>, #blocked1>, tensor<8x128xi32, #blocked1> loc(#loc19)
    %36 = tt.broadcast %22 : tensor<8x1xi1, #blocked1> -> tensor<8x128xi1, #blocked1> loc(#loc20)
    %37 = tt.broadcast %23 : tensor<8x1xi1, #blocked> -> tensor<8x128xi1, #blocked> loc(#loc20)
    %38 = tt.broadcast %10 : tensor<1x128xi1, #blocked1> -> tensor<8x128xi1, #blocked1> loc(#loc20)
    %39 = tt.broadcast %11 : tensor<1x128xi1, #blocked> -> tensor<8x128xi1, #blocked> loc(#loc20)
    %40 = arith.andi %36, %38 : tensor<8x128xi1, #blocked1> loc(#loc20)
    %41 = arith.andi %37, %39 : tensor<8x128xi1, #blocked> loc(#loc20)
    %42 = tt.load %35, %40 evictionPolicy = evict_last : tensor<8x128x!tt.ptr<f32>, #blocked1> loc(#loc21)
    %43 = triton_gpu.convert_layout %42 : tensor<8x128xf32, #blocked1> -> tensor<8x128xf32, #blocked> loc(#loc21)
    %44 = arith.extsi %24 : tensor<1x128xi32, #blocked> to tensor<1x128xi64, #blocked> loc(#loc22)
    %45 = arith.cmpi slt, %44, %cst_11 : tensor<1x128xi64, #blocked> loc(#loc22)
    %46 = arith.muli %21, %cst_12 : tensor<8x1xi32, #blocked> loc(#loc23)
    %47 = arith.muli %25, %cst_13 : tensor<1x128xi32, #blocked> loc(#loc24)
    %48 = tt.broadcast %46 : tensor<8x1xi32, #blocked> -> tensor<8x128xi32, #blocked> loc(#loc25)
    %49 = tt.broadcast %47 : tensor<1x128xi32, #blocked> -> tensor<8x128xi32, #blocked> loc(#loc25)
    %50 = arith.addi %48, %49 : tensor<8x128xi32, #blocked> loc(#loc25)
    %51 = tt.broadcast %24 : tensor<1x128xi32, #blocked> -> tensor<8x128xi32, #blocked> loc(#loc26)
    %52 = arith.addi %50, %51 : tensor<8x128xi32, #blocked> loc(#loc26)
    %53 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc27)
    %54 = tt.addptr %53, %52 : tensor<8x128x!tt.ptr<f32>, #blocked>, tensor<8x128xi32, #blocked> loc(#loc27)
    %55 = tt.broadcast %45 : tensor<1x128xi1, #blocked> -> tensor<8x128xi1, #blocked> loc(#loc28)
    %56 = arith.andi %55, %37 : tensor<8x128xi1, #blocked> loc(#loc28)
    %57 = arith.andi %56, %39 : tensor<8x128xi1, #blocked> loc(#loc29)
    %58 = tt.load %54, %57, %cst evictionPolicy = evict_last : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc30)
    %59 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc31)
    %60 = tt.addptr %59, %24 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc31)
    %61 = tt.broadcast %60 : tensor<1x128x!tt.ptr<f32>, #blocked> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc31)
    %62 = tt.load %61, %57, %cst evictionPolicy = evict_last : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc32)
    %63 = arith.subf %58, %62 : tensor<8x128xf32, #blocked> loc(#loc33)
    %64 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc34)
    %65 = tt.addptr %64, %24 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc34)
    %66 = tt.broadcast %65 : tensor<1x128x!tt.ptr<f32>, #blocked> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc34)
    %67 = tt.load %66, %57, %cst evictionPolicy = evict_last : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc35)
    %68 = arith.addf %67, %cst_0 : tensor<8x128xf32, #blocked> loc(#loc36)
    %69 = tt.extern_elementwise %68 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<8x128xf32, #blocked>) -> tensor<8x128xf32, #blocked> loc(#loc37)
    %70 = arith.divf %cst_1, %69 : tensor<8x128xf32, #blocked> loc(#loc38)
    %71 = arith.mulf %63, %70 : tensor<8x128xf32, #blocked> loc(#loc39)
    %72 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc40)
    %73 = tt.addptr %72, %24 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc40)
    %74 = tt.broadcast %73 : tensor<1x128x!tt.ptr<f32>, #blocked> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc40)
    %75 = tt.load %74, %57, %cst evictionPolicy = evict_last : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc41)
    %76 = arith.mulf %71, %75 : tensor<8x128xf32, #blocked> loc(#loc42)
    %77 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc43)
    %78 = tt.addptr %77, %24 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc43)
    %79 = tt.broadcast %78 : tensor<1x128x!tt.ptr<f32>, #blocked> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc43)
    %80 = tt.load %79, %57, %cst evictionPolicy = evict_last : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc44)
    %81 = arith.addf %76, %80 : tensor<8x128xf32, #blocked> loc(#loc45)
    %82 = arith.cmpf ogt, %cst, %81 : tensor<8x128xf32, #blocked> loc(#loc92)
    %83 = arith.select %82, %cst, %81 : tensor<8x128xi1, #blocked>, tensor<8x128xf32, #blocked> loc(#loc93)
    %84 = arith.cmpi sge, %44, %cst_11 : tensor<1x128xi64, #blocked> loc(#loc49)
    %85 = arith.addi %24, %cst_14 : tensor<1x128xi32, #blocked> loc(#loc50)
    %86 = tt.broadcast %85 : tensor<1x128xi32, #blocked> -> tensor<8x128xi32, #blocked> loc(#loc51)
    %87 = arith.addi %50, %86 : tensor<8x128xi32, #blocked> loc(#loc51)
    %88 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc52)
    %89 = tt.addptr %88, %87 : tensor<8x128x!tt.ptr<f32>, #blocked>, tensor<8x128xi32, #blocked> loc(#loc52)
    %90 = tt.broadcast %84 : tensor<1x128xi1, #blocked> -> tensor<8x128xi1, #blocked> loc(#loc53)
    %91 = arith.andi %90, %37 : tensor<8x128xi1, #blocked> loc(#loc53)
    %92 = arith.andi %91, %39 : tensor<8x128xi1, #blocked> loc(#loc54)
    %93 = tt.load %89, %92, %cst evictionPolicy = evict_last : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc55)
    %94 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc56)
    %95 = tt.addptr %94, %85 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc56)
    %96 = tt.broadcast %95 : tensor<1x128x!tt.ptr<f32>, #blocked> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc56)
    %97 = tt.load %96, %92, %cst evictionPolicy = evict_last : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc57)
    %98 = arith.subf %93, %97 : tensor<8x128xf32, #blocked> loc(#loc58)
    %99 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc59)
    %100 = tt.addptr %99, %85 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc59)
    %101 = tt.broadcast %100 : tensor<1x128x!tt.ptr<f32>, #blocked> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc59)
    %102 = tt.load %101, %92, %cst evictionPolicy = evict_last : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc60)
    %103 = arith.addf %102, %cst_0 : tensor<8x128xf32, #blocked> loc(#loc61)
    %104 = tt.extern_elementwise %103 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<8x128xf32, #blocked>) -> tensor<8x128xf32, #blocked> loc(#loc62)
    %105 = arith.divf %cst_1, %104 : tensor<8x128xf32, #blocked> loc(#loc63)
    %106 = arith.mulf %98, %105 : tensor<8x128xf32, #blocked> loc(#loc64)
    %107 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc65)
    %108 = tt.addptr %107, %85 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc65)
    %109 = tt.broadcast %108 : tensor<1x128x!tt.ptr<f32>, #blocked> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc65)
    %110 = tt.load %109, %92, %cst evictionPolicy = evict_last : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc66)
    %111 = arith.mulf %106, %110 : tensor<8x128xf32, #blocked> loc(#loc67)
    %112 = tt.splat %arg9 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc68)
    %113 = tt.addptr %112, %85 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc68)
    %114 = tt.broadcast %113 : tensor<1x128x!tt.ptr<f32>, #blocked> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc68)
    %115 = tt.load %114, %92, %cst evictionPolicy = evict_last : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc69)
    %116 = arith.addf %111, %115 : tensor<8x128xf32, #blocked> loc(#loc70)
    %117 = arith.cmpf ogt, %cst, %116 : tensor<8x128xf32, #blocked> loc(#loc94)
    %118 = arith.select %117, %cst, %116 : tensor<8x128xi1, #blocked>, tensor<8x128xf32, #blocked> loc(#loc95)
    %119 = arith.select %90, %118, %cst : tensor<8x128xi1, #blocked>, tensor<8x128xf32, #blocked> loc(#loc72)
    %120 = arith.select %55, %83, %119 : tensor<8x128xi1, #blocked>, tensor<8x128xf32, #blocked> loc(#loc96)
    %121 = arith.addf %120, %43 : tensor<8x128xf32, #blocked> loc(#loc75)
    %122 = arith.cmpf ogt, %cst, %121 : tensor<8x128xf32, #blocked> loc(#loc97)
    %123 = arith.select %122, %cst, %121 : tensor<8x128xi1, #blocked>, tensor<8x128xf32, #blocked> loc(#loc98)
    %124 = arith.cmpf ole, %123, %cst : tensor<8x128xf32, #blocked> loc(#loc77)
    %125 = arith.muli %29, %cst_10 : tensor<1x128xi32, #blocked1> loc(#loc78)
    %126 = tt.broadcast %125 : tensor<1x128xi32, #blocked1> -> tensor<8x128xi32, #blocked1> loc(#loc79)
    %127 = arith.addi %31, %126 : tensor<8x128xi32, #blocked1> loc(#loc79)
    %128 = arith.muli %27, %cst_15 : tensor<1x128xi32, #blocked1> loc(#loc80)
    %129 = tt.broadcast %128 : tensor<1x128xi32, #blocked1> -> tensor<8x128xi32, #blocked1> loc(#loc81)
    %130 = arith.addi %127, %129 : tensor<8x128xi32, #blocked1> loc(#loc81)
    %131 = arith.muli %26, %cst_16 : tensor<1x128xi32, #blocked1> loc(#loc82)
    %132 = arith.muli %25, %cst_17 : tensor<1x128xi32, #blocked> loc(#loc82)
    %133 = tt.broadcast %131 : tensor<1x128xi32, #blocked1> -> tensor<8x128xi32, #blocked1> loc(#loc83)
    %134 = tt.broadcast %132 : tensor<1x128xi32, #blocked> -> tensor<8x128xi32, #blocked> loc(#loc83)
    %135 = arith.addi %130, %133 : tensor<8x128xi32, #blocked1> loc(#loc83)
    %136 = tt.splat %arg11 : !tt.ptr<f32> -> tensor<8x128x!tt.ptr<f32>, #blocked1> loc(#loc84)
    %137 = tt.addptr %136, %135 : tensor<8x128x!tt.ptr<f32>, #blocked1>, tensor<8x128xi32, #blocked1> loc(#loc84)
    %138 = triton_gpu.convert_layout %123 : tensor<8x128xf32, #blocked> -> tensor<8x128xf32, #blocked1> loc(#loc85)
    tt.store %137, %138, %40 : tensor<8x128x!tt.ptr<f32>, #blocked1> loc(#loc85)
    %139 = arith.muli %21, %cst_18 : tensor<8x1xi32, #blocked> loc(#loc86)
    %140 = tt.broadcast %139 : tensor<8x1xi32, #blocked> -> tensor<8x128xi32, #blocked> loc(#loc87)
    %141 = arith.addi %51, %140 : tensor<8x128xi32, #blocked> loc(#loc87)
    %142 = arith.addi %141, %134 : tensor<8x128xi32, #blocked> loc(#loc88)
    %143 = tt.splat %arg12 : !tt.ptr<i1> -> tensor<8x128x!tt.ptr<i1>, #blocked> loc(#loc89)
    %144 = tt.addptr %143, %142 : tensor<8x128x!tt.ptr<i1>, #blocked>, tensor<8x128xi32, #blocked> loc(#loc89)
    %145 = tt.bitcast %144 : tensor<8x128x!tt.ptr<i1>, #blocked> -> tensor<8x128x!tt.ptr<i8>, #blocked> loc(#loc90)
    %146 = arith.extui %124 : tensor<8x128xi1, #blocked> to tensor<8x128xi8, #blocked> loc(#loc90)
    tt.store %145, %146, %41 : tensor<8x128x!tt.ptr<i8>, #blocked> loc(#loc90)
    tt.return loc(#loc91)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":22:28)
#loc3 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":22:33)
#loc4 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":23:44)
#loc5 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":23:23)
#loc6 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":24:21)
#loc7 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":25:28)
#loc8 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":25:33)
#loc9 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":26:44)
#loc10 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":26:23)
#loc11 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":27:21)
#loc12 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":28:19)
#loc13 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":30:19)
#loc14 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":32:19)
#loc15 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":33:21)
#loc16 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":33:27)
#loc17 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":34:42)
#loc18 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":34:37)
#loc19 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":34:32)
#loc20 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":34:55)
#loc21 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":34:47)
#loc22 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":39:18)
#loc23 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":40:33)
#loc24 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":40:44)
#loc25 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":40:38)
#loc26 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":40:50)
#loc27 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":40:30)
#loc28 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":40:63)
#loc29 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":40:71)
#loc30 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":40:56)
#loc31 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":41:30)
#loc32 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":41:70)
#loc33 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":42:18)
#loc34 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":43:30)
#loc35 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":43:70)
#loc36 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":45:19)
#loc37 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":46:27)
#loc38 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":48:20)
#loc39 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":51:19)
#loc40 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":52:31)
#loc41 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":52:71)
#loc42 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":53:20)
#loc43 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":54:31)
#loc44 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":54:71)
#loc45 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":55:20)
#loc46 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc47 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":57:42)
#loc48 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc49 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":60:20)
#loc50 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":63:59)
#loc51 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":63:51)
#loc52 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":63:31)
#loc53 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":63:73)
#loc54 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":63:81)
#loc55 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":63:65)
#loc56 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":64:31)
#loc57 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":64:79)
#loc58 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":65:20)
#loc59 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":66:31)
#loc60 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":66:79)
#loc61 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":68:20)
#loc62 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":69:27)
#loc63 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":71:20)
#loc64 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":74:20)
#loc65 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":75:31)
#loc66 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":75:79)
#loc67 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":76:20)
#loc68 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":77:31)
#loc69 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":77:79)
#loc70 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":78:20)
#loc71 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":80:42)
#loc72 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":82:35)
#loc73 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":83:34)
#loc74 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":59:34)
#loc75 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":84:20)
#loc76 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":86:42)
#loc77 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":88:21)
#loc78 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":89:35)
#loc79 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":89:30)
#loc80 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":89:45)
#loc81 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":89:40)
#loc82 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":89:56)
#loc83 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":89:50)
#loc84 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":89:25)
#loc85 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":89:68)
#loc86 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":90:33)
#loc87 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":90:30)
#loc88 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":90:38)
#loc89 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":90:25)
#loc90 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":90:56)
#loc91 = loc("inductor_cache/zx/czxsxi5yz4juabzew255jqk57cnbpzjurfuvslbkklfg23a57tfp.py":90:4)
#loc92 = loc(callsite(#loc46 at #loc47))
#loc93 = loc(callsite(#loc48 at #loc47))
#loc94 = loc(callsite(#loc46 at #loc71))
#loc95 = loc(callsite(#loc48 at #loc71))
#loc96 = loc(fused[#loc73, #loc74])
#loc97 = loc(callsite(#loc46 at #loc76))
#loc98 = loc(callsite(#loc48 at #loc76))
