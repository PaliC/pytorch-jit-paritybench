; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_native_group_norm_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = icmp slt i32 %9, 256, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = lshr i32 %11, 5, !dbg !12
  %.frozen = freeze i32 %9, !dbg !13
  %14 = sdiv i32 %.frozen, 64, !dbg !13
  %15 = mul i32 %14, 64, !dbg !14
  %.decomposed = sub i32 %.frozen, %15, !dbg !14
  %16 = shl i32 %11, 6, !dbg !15
  %17 = and i32 %16, 4032, !dbg !15
  %18 = add nsw i32 %.decomposed, %17, !dbg !16
  %19 = shl i32 %14, 12, !dbg !17
  %20 = add i32 %18, %19, !dbg !18
  %21 = sext i32 %20 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %10, i32 0, i1 %10) #3, !dbg !20
  %24 = bitcast i32 %23 to float, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !21
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 %10, i32 0, i1 %10) #3, !dbg !22
  %27 = bitcast i32 %26 to float, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !23
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %10, i32 0, i1 %10) #3, !dbg !24
  %30 = bitcast i32 %29 to float, !dbg !24
  %31 = select i1 %10, float %24, float 0.000000e+00, !dbg !25
  %32 = select i1 %10, float %27, float 0.000000e+00, !dbg !26
  %33 = select i1 %10, float %30, float 0.000000e+00, !dbg !27
  %34 = bitcast float %31 to i32, !dbg !28
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 16, i32 31), !dbg !28
  %36 = bitcast i32 %35 to float, !dbg !28
  %37 = bitcast float %32 to i32, !dbg !28
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 16, i32 31), !dbg !28
  %39 = bitcast i32 %38 to float, !dbg !28
  %40 = bitcast float %33 to i32, !dbg !28
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 16, i32 31), !dbg !28
  %42 = bitcast i32 %41 to float, !dbg !28
  %43 = fsub float %36, %31, !dbg !32
  %44 = fadd float %33, %42, !dbg !34
  %45 = fcmp oeq float %44, 0.000000e+00, !dbg !35
  %46 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float %44) #3, !dbg !36
  %47 = select i1 %45, float 0.000000e+00, float %46, !dbg !37
  %48 = fmul float %43, %47, !dbg !38
  %49 = fadd float %31, %48, !dbg !39
  %50 = fadd float %32, %39, !dbg !40
  %51 = fmul float %43, %43, !dbg !41
  %52 = fmul float %33, %51, !dbg !42
  %53 = fmul float %52, %47, !dbg !43
  %54 = fadd float %50, %53, !dbg !44
  %55 = bitcast float %49 to i32, !dbg !28
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 8, i32 31), !dbg !28
  %57 = bitcast i32 %56 to float, !dbg !28
  %58 = bitcast float %54 to i32, !dbg !28
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 8, i32 31), !dbg !28
  %60 = bitcast i32 %59 to float, !dbg !28
  %61 = bitcast float %44 to i32, !dbg !28
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 8, i32 31), !dbg !28
  %63 = bitcast i32 %62 to float, !dbg !28
  %64 = fsub float %57, %49, !dbg !32
  %65 = fadd float %44, %63, !dbg !34
  %66 = fcmp oeq float %65, 0.000000e+00, !dbg !35
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float %65) #3, !dbg !36
  %68 = select i1 %66, float 0.000000e+00, float %67, !dbg !37
  %69 = fmul float %64, %68, !dbg !38
  %70 = fadd float %49, %69, !dbg !39
  %71 = fadd float %54, %60, !dbg !40
  %72 = fmul float %64, %64, !dbg !41
  %73 = fmul float %44, %72, !dbg !42
  %74 = fmul float %68, %73, !dbg !43
  %75 = fadd float %71, %74, !dbg !44
  %76 = bitcast float %70 to i32, !dbg !28
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 4, i32 31), !dbg !28
  %78 = bitcast i32 %77 to float, !dbg !28
  %79 = bitcast float %75 to i32, !dbg !28
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 4, i32 31), !dbg !28
  %81 = bitcast i32 %80 to float, !dbg !28
  %82 = bitcast float %65 to i32, !dbg !28
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 4, i32 31), !dbg !28
  %84 = bitcast i32 %83 to float, !dbg !28
  %85 = fsub float %78, %70, !dbg !32
  %86 = fadd float %65, %84, !dbg !34
  %87 = fcmp oeq float %86, 0.000000e+00, !dbg !35
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float %86) #3, !dbg !36
  %89 = select i1 %87, float 0.000000e+00, float %88, !dbg !37
  %90 = fmul float %85, %89, !dbg !38
  %91 = fadd float %70, %90, !dbg !39
  %92 = fadd float %75, %81, !dbg !40
  %93 = fmul float %85, %85, !dbg !41
  %94 = fmul float %65, %93, !dbg !42
  %95 = fmul float %89, %94, !dbg !43
  %96 = fadd float %92, %95, !dbg !44
  %97 = bitcast float %91 to i32, !dbg !28
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 2, i32 31), !dbg !28
  %99 = bitcast i32 %98 to float, !dbg !28
  %100 = bitcast float %96 to i32, !dbg !28
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 2, i32 31), !dbg !28
  %102 = bitcast i32 %101 to float, !dbg !28
  %103 = bitcast float %86 to i32, !dbg !28
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 2, i32 31), !dbg !28
  %105 = bitcast i32 %104 to float, !dbg !28
  %106 = fsub float %99, %91, !dbg !32
  %107 = fadd float %86, %105, !dbg !34
  %108 = fcmp oeq float %107, 0.000000e+00, !dbg !35
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %107) #3, !dbg !36
  %110 = select i1 %108, float 0.000000e+00, float %109, !dbg !37
  %111 = fmul float %106, %110, !dbg !38
  %112 = fadd float %91, %111, !dbg !39
  %113 = fadd float %96, %102, !dbg !40
  %114 = fmul float %106, %106, !dbg !41
  %115 = fmul float %86, %114, !dbg !42
  %116 = fmul float %110, %115, !dbg !43
  %117 = fadd float %113, %116, !dbg !44
  %118 = bitcast float %112 to i32, !dbg !28
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !28
  %120 = bitcast i32 %119 to float, !dbg !28
  %121 = bitcast float %117 to i32, !dbg !28
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 1, i32 31), !dbg !28
  %123 = bitcast i32 %122 to float, !dbg !28
  %124 = bitcast float %107 to i32, !dbg !28
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 1, i32 31), !dbg !28
  %126 = bitcast i32 %125 to float, !dbg !28
  %127 = fsub float %120, %112, !dbg !32
  %128 = fadd float %107, %126, !dbg !34
  %129 = fcmp oeq float %128, 0.000000e+00, !dbg !35
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float %128) #3, !dbg !36
  %131 = select i1 %129, float 0.000000e+00, float %130, !dbg !37
  %132 = fmul float %127, %131, !dbg !38
  %133 = fadd float %112, %132, !dbg !39
  %134 = fadd float %117, %123, !dbg !40
  %135 = fmul float %127, %127, !dbg !41
  %136 = fmul float %107, %135, !dbg !42
  %137 = fmul float %131, %136, !dbg !43
  %138 = fadd float %134, %137, !dbg !44
  %139 = icmp eq i32 %12, 0, !dbg !28
  %140 = and i32 %13, 1, !dbg !28
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %140, !dbg !28
  %142 = bitcast float %133 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 %139) #3, !dbg !28
  %143 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8), i32 %140, !dbg !28
  %144 = bitcast float %138 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 %139) #3, !dbg !28
  %145 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %140, !dbg !28
  %146 = bitcast float %128 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 %139) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %147 = icmp slt i32 %11, 2, !dbg !28
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !28
  %149 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %148, i1 %147) #3, !dbg !28
  %150 = bitcast i32 %149 to float, !dbg !28
  %151 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8), i32 %11, !dbg !28
  %152 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %151, i1 %147) #3, !dbg !28
  %153 = bitcast i32 %152 to float, !dbg !28
  %154 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %11, !dbg !28
  %155 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %154, i1 %147) #3, !dbg !28
  %156 = bitcast i32 %155 to float, !dbg !28
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 1, i32 31), !dbg !28
  %158 = bitcast i32 %157 to float, !dbg !28
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 1, i32 31), !dbg !28
  %160 = bitcast i32 %159 to float, !dbg !28
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 1, i32 31), !dbg !28
  %162 = bitcast i32 %161 to float, !dbg !28
  %163 = fsub float %158, %150, !dbg !32
  %164 = fadd float %156, %162, !dbg !34
  %165 = fcmp oeq float %164, 0.000000e+00, !dbg !35
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float %164) #3, !dbg !36
  %167 = select i1 %165, float 0.000000e+00, float %166, !dbg !37
  %168 = fmul float %163, %167, !dbg !38
  %169 = fadd float %168, %150, !dbg !39
  %170 = fadd float %153, %160, !dbg !40
  %171 = fmul float %163, %163, !dbg !41
  %172 = fmul float %171, %156, !dbg !42
  %173 = fmul float %172, %167, !dbg !43
  %174 = fadd float %170, %173, !dbg !44
  %175 = and i32 %11, 1, !dbg !28
  %176 = icmp eq i32 %175, 0, !dbg !28
  %177 = and i1 %147, %176, !dbg !28
  %178 = bitcast float %169 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %178, i1 %177) #3, !dbg !28
  %179 = bitcast float %174 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %179, i1 %177) #3, !dbg !28
  %180 = bitcast float %164 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %180, i1 %177) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %181 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %182 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8), align 8, !dbg !28
  %183 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !28
  %184 = sext i32 %9 to i64, !dbg !45
  %185 = getelementptr float, ptr addrspace(1) %3, i64 %184, !dbg !45
  %urem = and i32 %11, 63, !dbg !46
  %186 = icmp eq i32 %urem, 0, !dbg !46
  %187 = and i1 %186, %10, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %181, ptr addrspace(1) %185, i1 %187) #3, !dbg !46
  %188 = getelementptr float, ptr addrspace(1) %4, i64 %184, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %182, ptr addrspace(1) %188, i1 %187) #3, !dbg !48
  %189 = getelementptr float, ptr addrspace(1) %5, i64 %184, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %183, ptr addrspace(1) %189, i1 %187) #3, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cabyc2q3cbaianihsuagy3gki75plxphce35web7phajsj7b3xyn.py", directory: "inductor_cache/ab")
!4 = !{ptr @triton_per_fused_native_group_norm_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_5, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_5", linkageName: "triton_per_fused_native_group_norm_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 30, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 38, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 48, scope: !7)
!18 = !DILocation(line: 33, column: 43, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 53, scope: !7)
!21 = !DILocation(line: 34, column: 30, scope: !7)
!22 = !DILocation(line: 34, column: 53, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 53, scope: !7)
!25 = !DILocation(line: 39, column: 33, scope: !7)
!26 = !DILocation(line: 40, column: 33, scope: !7)
!27 = !DILocation(line: 41, column: 33, scope: !7)
!28 = !DILocation(line: 204, column: 46, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 42, column: 67, scope: !7)
!32 = !DILocation(line: 192, column: 21, scope: !33, inlinedAt: !31)
!33 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!34 = !DILocation(line: 193, column: 28, scope: !33, inlinedAt: !31)
!35 = !DILocation(line: 194, column: 39, scope: !33, inlinedAt: !31)
!36 = !DILocation(line: 194, column: 60, scope: !33, inlinedAt: !31)
!37 = !DILocation(line: 194, column: 49, scope: !33, inlinedAt: !31)
!38 = !DILocation(line: 196, column: 25, scope: !33, inlinedAt: !31)
!39 = !DILocation(line: 196, column: 17, scope: !33, inlinedAt: !31)
!40 = !DILocation(line: 197, column: 15, scope: !33, inlinedAt: !31)
!41 = !DILocation(line: 197, column: 30, scope: !33, inlinedAt: !31)
!42 = !DILocation(line: 197, column: 38, scope: !33, inlinedAt: !31)
!43 = !DILocation(line: 197, column: 49, scope: !33, inlinedAt: !31)
!44 = !DILocation(line: 197, column: 22, scope: !33, inlinedAt: !31)
!45 = !DILocation(line: 46, column: 25, scope: !7)
!46 = !DILocation(line: 46, column: 37, scope: !7)
!47 = !DILocation(line: 47, column: 25, scope: !7)
!48 = !DILocation(line: 47, column: 37, scope: !7)
!49 = !DILocation(line: 48, column: 25, scope: !7)
!50 = !DILocation(line: 48, column: 37, scope: !7)
!51 = !DILocation(line: 48, column: 4, scope: !7)
