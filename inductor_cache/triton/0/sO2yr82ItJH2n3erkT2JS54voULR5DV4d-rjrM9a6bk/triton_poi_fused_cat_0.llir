; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 1024, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %13 = sdiv i32 %.frozen, 16, !dbg !15
  %14 = srem i32 %13, 16, !dbg !16
  %15 = mul i32 %13, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %15, !dbg !17
  %.frozen1 = freeze i32 %11, !dbg !18
  %16 = sdiv i32 %.frozen1, 256, !dbg !18
  %17 = icmp slt i32 %14, 4, !dbg !19
  %18 = mul i32 %16, 256, !dbg !20
  %srem.decomposed = sub i32 %.frozen1, %18, !dbg !20
  %19 = shl nsw i32 %16, 6, !dbg !21
  %20 = add nsw i32 %19, %srem.decomposed, !dbg !22
  %21 = sext i32 %20 to i64, !dbg !23
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !23
  %23 = and i1 %12, %17, !dbg !24
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #1, !dbg !25
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !25
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !25
  %27 = bitcast i32 %25 to float, !dbg !25
  %28 = bitcast i32 %26 to float, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !26
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #1, !dbg !27
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !27
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !27
  %33 = bitcast i32 %31 to float, !dbg !27
  %34 = bitcast i32 %32 to float, !dbg !27
  %35 = fsub float %27, %33, !dbg !28
  %36 = fsub float %28, %34, !dbg !28
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !29
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #1, !dbg !30
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !30
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !30
  %41 = bitcast i32 %39 to float, !dbg !30
  %42 = bitcast i32 %40 to float, !dbg !30
  %43 = fsub float %35, %41, !dbg !31
  %44 = fsub float %36, %42, !dbg !31
  %45 = and i32 %14, -4, !dbg !32
  %46 = icmp eq i32 %45, 4, !dbg !32
  %47 = shl nsw i32 %14, 4, !dbg !33
  %48 = add nsw i32 %19, %.decomposed, !dbg !33
  %49 = add nsw i32 %48, -64, !dbg !34
  %50 = add nsw i32 %49, %47, !dbg !35
  %51 = sext i32 %50 to i64, !dbg !36
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !36
  %53 = and i1 %12, %46, !dbg !37
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %52, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #1, !dbg !38
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !38
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !38
  %57 = bitcast i32 %55 to float, !dbg !38
  %58 = bitcast i32 %56 to float, !dbg !38
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !39
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %59, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #1, !dbg !40
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !40
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !40
  %63 = bitcast i32 %61 to float, !dbg !40
  %64 = bitcast i32 %62 to float, !dbg !40
  %65 = fsub float %57, %63, !dbg !41
  %66 = fsub float %58, %64, !dbg !41
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !42
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %67, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #1, !dbg !43
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !43
  %70 = extractvalue { i32, i32 } %68, 1, !dbg !43
  %71 = bitcast i32 %69 to float, !dbg !43
  %72 = bitcast i32 %70 to float, !dbg !43
  %73 = fadd float %65, %71, !dbg !44
  %74 = fadd float %66, %72, !dbg !44
  %75 = icmp eq i32 %45, 8, !dbg !45
  %76 = add nsw i32 %48, -128, !dbg !46
  %77 = add nsw i32 %76, %47, !dbg !47
  %78 = sext i32 %77 to i64, !dbg !48
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !48
  %80 = and i1 %12, %75, !dbg !49
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %79, i1 %80, i32 0, i1 %80, i32 0, i1 %80) #1, !dbg !50
  %82 = extractvalue { i32, i32 } %81, 0, !dbg !50
  %83 = extractvalue { i32, i32 } %81, 1, !dbg !50
  %84 = bitcast i32 %82 to float, !dbg !50
  %85 = bitcast i32 %83 to float, !dbg !50
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !51
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %86, i1 %80, i32 0, i1 %80, i32 0, i1 %80) #1, !dbg !52
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !52
  %89 = extractvalue { i32, i32 } %87, 1, !dbg !52
  %90 = bitcast i32 %88 to float, !dbg !52
  %91 = bitcast i32 %89 to float, !dbg !52
  %92 = fadd float %84, %90, !dbg !53
  %93 = fadd float %85, %91, !dbg !53
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %78, !dbg !54
  %95 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %94, i1 %80, i32 0, i1 %80, i32 0, i1 %80) #1, !dbg !55
  %96 = extractvalue { i32, i32 } %95, 0, !dbg !55
  %97 = extractvalue { i32, i32 } %95, 1, !dbg !55
  %98 = bitcast i32 %96 to float, !dbg !55
  %99 = bitcast i32 %97 to float, !dbg !55
  %100 = fsub float %92, %98, !dbg !56
  %101 = fsub float %93, %99, !dbg !56
  %102 = icmp sgt i32 %14, 11, !dbg !57
  %103 = add nsw i32 %48, -192, !dbg !58
  %104 = add nsw i32 %103, %47, !dbg !59
  %105 = sext i32 %104 to i64, !dbg !60
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !60
  %107 = and i1 %12, %102, !dbg !61
  %108 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %106, i1 %107, i32 0, i1 %107, i32 0, i1 %107) #1, !dbg !62
  %109 = extractvalue { i32, i32 } %108, 0, !dbg !62
  %110 = extractvalue { i32, i32 } %108, 1, !dbg !62
  %111 = bitcast i32 %109 to float, !dbg !62
  %112 = bitcast i32 %110 to float, !dbg !62
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !63
  %114 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %113, i1 %107, i32 0, i1 %107, i32 0, i1 %107) #1, !dbg !64
  %115 = extractvalue { i32, i32 } %114, 0, !dbg !64
  %116 = extractvalue { i32, i32 } %114, 1, !dbg !64
  %117 = bitcast i32 %115 to float, !dbg !64
  %118 = bitcast i32 %116 to float, !dbg !64
  %119 = fadd float %111, %117, !dbg !65
  %120 = fadd float %112, %118, !dbg !65
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !66
  %122 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %121, i1 %107, i32 0, i1 %107, i32 0, i1 %107) #1, !dbg !67
  %123 = extractvalue { i32, i32 } %122, 0, !dbg !67
  %124 = extractvalue { i32, i32 } %122, 1, !dbg !67
  %125 = bitcast i32 %123 to float, !dbg !67
  %126 = bitcast i32 %124 to float, !dbg !67
  %127 = fadd float %119, %125, !dbg !68
  %128 = fadd float %120, %126, !dbg !68
  %129 = select i1 %102, float %127, float 0.000000e+00, !dbg !69
  %130 = select i1 %102, float %128, float 0.000000e+00, !dbg !69
  %131 = select i1 %75, float %100, float %129, !dbg !70
  %132 = select i1 %75, float %101, float %130, !dbg !70
  %133 = select i1 %46, float %73, float %131, !dbg !70
  %134 = select i1 %46, float %74, float %132, !dbg !70
  %135 = select i1 %17, float %43, float %133, !dbg !70
  %136 = select i1 %17, float %44, float %134, !dbg !70
  %137 = sext i32 %11 to i64, !dbg !71
  %138 = getelementptr float, ptr addrspace(1) %3, i64 %137, !dbg !71
  %139 = bitcast float %135 to i32, !dbg !72
  %140 = bitcast float %136 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %139, i32 %140, ptr addrspace(1) %138, i1 %12) #1, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c67imslvsv35yb4tcfef22w6asufjgq7snufhjya63q752kzwlas.py", directory: "inductor_cache/67")
!4 = !{ptr @triton_poi_fused_cat_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_0", linkageName: "triton_poi_fused_cat_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 48, scope: !7)
!22 = !DILocation(line: 33, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 60, scope: !7)
!25 = !DILocation(line: 33, column: 53, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 53, scope: !7)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 38, column: 54, scope: !7)
!31 = !DILocation(line: 40, column: 19, scope: !7)
!32 = !DILocation(line: 46, column: 20, scope: !7)
!33 = !DILocation(line: 47, column: 40, scope: !7)
!34 = !DILocation(line: 47, column: 36, scope: !7)
!35 = !DILocation(line: 47, column: 53, scope: !7)
!36 = !DILocation(line: 47, column: 31, scope: !7)
!37 = !DILocation(line: 47, column: 69, scope: !7)
!38 = !DILocation(line: 47, column: 61, scope: !7)
!39 = !DILocation(line: 48, column: 31, scope: !7)
!40 = !DILocation(line: 48, column: 61, scope: !7)
!41 = !DILocation(line: 51, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 31, scope: !7)
!43 = !DILocation(line: 52, column: 61, scope: !7)
!44 = !DILocation(line: 55, column: 20, scope: !7)
!45 = !DILocation(line: 61, column: 20, scope: !7)
!46 = !DILocation(line: 62, column: 36, scope: !7)
!47 = !DILocation(line: 62, column: 53, scope: !7)
!48 = !DILocation(line: 62, column: 31, scope: !7)
!49 = !DILocation(line: 62, column: 69, scope: !7)
!50 = !DILocation(line: 62, column: 61, scope: !7)
!51 = !DILocation(line: 63, column: 31, scope: !7)
!52 = !DILocation(line: 63, column: 61, scope: !7)
!53 = !DILocation(line: 66, column: 20, scope: !7)
!54 = !DILocation(line: 67, column: 31, scope: !7)
!55 = !DILocation(line: 67, column: 61, scope: !7)
!56 = !DILocation(line: 70, column: 20, scope: !7)
!57 = !DILocation(line: 73, column: 20, scope: !7)
!58 = !DILocation(line: 76, column: 36, scope: !7)
!59 = !DILocation(line: 76, column: 54, scope: !7)
!60 = !DILocation(line: 76, column: 31, scope: !7)
!61 = !DILocation(line: 76, column: 70, scope: !7)
!62 = !DILocation(line: 76, column: 62, scope: !7)
!63 = !DILocation(line: 77, column: 31, scope: !7)
!64 = !DILocation(line: 77, column: 62, scope: !7)
!65 = !DILocation(line: 80, column: 20, scope: !7)
!66 = !DILocation(line: 81, column: 31, scope: !7)
!67 = !DILocation(line: 81, column: 62, scope: !7)
!68 = !DILocation(line: 83, column: 20, scope: !7)
!69 = !DILocation(line: 85, column: 35, scope: !7)
!70 = !DILocation(line: 0, scope: !7)
!71 = !DILocation(line: 89, column: 25, scope: !7)
!72 = !DILocation(line: 89, column: 37, scope: !7)
!73 = !DILocation(line: 89, column: 4, scope: !7)
