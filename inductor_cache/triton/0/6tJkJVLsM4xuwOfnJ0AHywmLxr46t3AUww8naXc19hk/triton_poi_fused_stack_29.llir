; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_stack_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 2, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %18 = sdiv i32 %.frozen, 8, !dbg !14
  %19 = srem i32 %18, 8, !dbg !15
  %20 = mul i32 %18, 8, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = srem i32 %17, 8, !dbg !16
  %22 = sdiv i32 %16, 64, !dbg !17
  %23 = srem i32 %22, 256, !dbg !18
  %24 = icmp slt i32 %19, 4, !dbg !19
  %25 = shl nsw i32 %19, 2, !dbg !20
  %26 = shl nsw i32 %22, 4, !dbg !21
  %.lhs.trunc7 = trunc nsw i32 %.decomposed to i8, !dbg !22
  %27 = ashr exact i8 %.lhs.trunc7, 1, !dbg !22
  %.sext8 = sext i8 %27 to i32, !dbg !22
  %.lhs.trunc11 = trunc nsw i32 %21 to i8, !dbg !22
  %28 = ashr exact i8 %.lhs.trunc11, 1, !dbg !22
  %.sext12 = sext i8 %28 to i32, !dbg !22
  %29 = add nsw i32 %26, %.sext8, !dbg !23
  %30 = add nsw i32 %29, %25, !dbg !24
  %31 = add nsw i32 %26, %.sext12, !dbg !23
  %32 = add nsw i32 %31, %25, !dbg !24
  %33 = sext i32 %30 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !25
  %35 = sext i32 %32 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %24, i32 0, i1 %24) #1, !dbg !26
  %38 = bitcast i32 %37 to float, !dbg !26
  %39 = sext i32 %23 to i64, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !27
  %41 = add nsw i32 %29, -16, !dbg !28
  %42 = add nsw i32 %41, %25, !dbg !29
  %43 = add nsw i32 %31, -16, !dbg !28
  %44 = add nsw i32 %43, %25, !dbg !29
  %45 = sext i32 %42 to i64, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !30
  %47 = sext i32 %44 to i64, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !31
  %50 = icmp sgt i32 %19, 3, !dbg !32
  %51 = add nsw i32 %19, -4, !dbg !33
  %52 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !13
  %53 = shufflevector <2 x i32> %52, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !13
  %54 = or disjoint <2 x i32> %53, <i32 3, i32 1>, !dbg !13
  %55 = srem <2 x i32> %54, splat (i32 8), !dbg !16
  %56 = trunc nsw <2 x i32> %55 to <2 x i8>, !dbg !34
  %57 = srem <2 x i8> %56, splat (i8 2), !dbg !34
  %58 = sext <2 x i8> %57 to <2 x i32>, !dbg !34
  %59 = shl nsw <2 x i32> %58, splat (i32 2), !dbg !35
  %60 = shufflevector <2 x i32> %59, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !35
  %61 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !36
  %62 = insertelement <4 x i32> %61, i32 %19, i64 1, !dbg !36
  %63 = shufflevector <4 x i32> %62, <4 x i32> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !36
  %64 = add nsw <4 x i32> %63, %60, !dbg !36
  %65 = icmp slt <4 x i32> %64, splat (i32 4), !dbg !37
  %66 = extractelement <4 x i1> %65, i64 3, !dbg !38
  %67 = and i1 %24, %66, !dbg !38
  %68 = extractelement <4 x i1> %65, i64 2, !dbg !38
  %69 = and i1 %24, %68, !dbg !38
  %70 = extractelement <4 x i32> %64, i64 3, !dbg !20
  %71 = shl nsw i32 %70, 2, !dbg !20
  %72 = extractelement <4 x i32> %64, i64 2, !dbg !20
  %73 = shl nsw i32 %72, 2, !dbg !20
  %74 = extractelement <2 x i8> %56, i64 1, !dbg !22
  %75 = sdiv i8 %74, 2, !dbg !22
  %.sext10 = sext i8 %75 to i32, !dbg !22
  %76 = extractelement <2 x i8> %56, i64 0, !dbg !22
  %77 = sdiv i8 %76, 2, !dbg !22
  %.sext14 = sext i8 %77 to i32, !dbg !22
  %78 = add nsw i32 %26, %.sext10, !dbg !23
  %79 = add nsw i32 %78, %71, !dbg !24
  %80 = add nsw i32 %26, %.sext14, !dbg !23
  %81 = add nsw i32 %80, %73, !dbg !24
  %82 = sext i32 %79 to i64, !dbg !25
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !25
  %84 = sext i32 %81 to i64, !dbg !25
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !25
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %67, i32 0, i1 %67) #1, !dbg !26
  %87 = bitcast i32 %86 to float, !dbg !26
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %24, i32 0, i1 %24) #1, !dbg !26
  %89 = bitcast i32 %88 to float, !dbg !26
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %69, i32 0, i1 %69) #1, !dbg !26
  %91 = bitcast i32 %90 to float, !dbg !26
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %24, i32 0, i1 %24) #1, !dbg !39
  %93 = bitcast i32 %92 to float, !dbg !39
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %67, i32 0, i1 %67) #1, !dbg !39
  %95 = bitcast i32 %94 to float, !dbg !39
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %24, i32 0, i1 %24) #1, !dbg !39
  %97 = bitcast i32 %96 to float, !dbg !39
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %69, i32 0, i1 %69) #1, !dbg !39
  %99 = bitcast i32 %98 to float, !dbg !39
  %100 = fadd float %38, %93, !dbg !40
  %101 = fadd float %87, %95, !dbg !40
  %102 = fadd float %89, %97, !dbg !40
  %103 = fadd float %91, %99, !dbg !40
  %104 = select i1 %67, float %101, float 0.000000e+00, !dbg !41
  %105 = select i1 %69, float %103, float 0.000000e+00, !dbg !41
  %106 = icmp sgt i32 %70, 3, !dbg !42
  %107 = icmp sgt i32 %72, 3, !dbg !42
  %108 = and i1 %24, %106, !dbg !43
  %109 = and i1 %24, %107, !dbg !43
  %110 = extractelement <2 x i32> %59, i64 1, !dbg !44
  %111 = add nsw i32 %110, -4, !dbg !44
  %112 = extractelement <2 x i32> %59, i64 0, !dbg !44
  %113 = add nsw i32 %112, -4, !dbg !44
  %114 = add nsw i32 %19, %111, !dbg !45
  %115 = add nsw i32 %19, %113, !dbg !45
  %116 = shl nsw i32 %114, 2, !dbg !46
  %117 = shl nsw i32 %115, 2, !dbg !46
  %118 = add nsw i32 %78, %116, !dbg !29
  %119 = add nsw i32 %80, %117, !dbg !29
  %120 = sext i32 %118 to i64, !dbg !30
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %120, !dbg !30
  %122 = sext i32 %119 to i64, !dbg !30
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %122, !dbg !30
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 false, i32 0, i1 false) #1, !dbg !47
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %108, i32 0, i1 %108) #1, !dbg !47
  %126 = bitcast i32 %125 to float, !dbg !47
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 false, i32 0, i1 false) #1, !dbg !47
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %109, i32 0, i1 %109) #1, !dbg !47
  %129 = bitcast i32 %128 to float, !dbg !47
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 false, i32 0, i1 false) #1, !dbg !48
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %108, i32 0, i1 %108) #1, !dbg !48
  %132 = bitcast i32 %131 to float, !dbg !48
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 false, i32 0, i1 false) #1, !dbg !48
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %109, i32 0, i1 %109) #1, !dbg !48
  %135 = bitcast i32 %134 to float, !dbg !48
  %136 = fadd float %126, %132, !dbg !49
  %137 = fadd float %129, %135, !dbg !49
  %138 = select i1 %108, float %136, float 0.000000e+00, !dbg !50
  %139 = select i1 %109, float %137, float 0.000000e+00, !dbg !50
  %140 = select i1 %66, float %104, float %138, !dbg !51
  %141 = select i1 %68, float %105, float %139, !dbg !51
  %142 = extractelement <4 x i1> %65, i64 1, !dbg !52
  %143 = and i1 %50, %142, !dbg !52
  %144 = extractelement <4 x i1> %65, i64 0, !dbg !52
  %145 = and i1 %50, %144, !dbg !52
  %146 = shl nsw i32 %51, 2, !dbg !53
  %147 = extractelement <4 x i32> %64, i64 1, !dbg !53
  %148 = shl nsw i32 %147, 2, !dbg !53
  %149 = extractelement <4 x i32> %64, i64 0, !dbg !53
  %150 = shl nsw i32 %149, 2, !dbg !53
  %151 = add nsw i32 %29, %146, !dbg !54
  %152 = add nsw i32 %78, %148, !dbg !54
  %153 = add nsw i32 %31, %146, !dbg !54
  %154 = add nsw i32 %80, %150, !dbg !54
  %155 = sext i32 %151 to i64, !dbg !55
  %156 = getelementptr float, ptr addrspace(1) %4, i64 %155, !dbg !55
  %157 = sext i32 %152 to i64, !dbg !55
  %158 = getelementptr float, ptr addrspace(1) %4, i64 %157, !dbg !55
  %159 = sext i32 %153 to i64, !dbg !55
  %160 = getelementptr float, ptr addrspace(1) %4, i64 %159, !dbg !55
  %161 = sext i32 %154 to i64, !dbg !55
  %162 = getelementptr float, ptr addrspace(1) %4, i64 %161, !dbg !55
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %50, i32 0, i1 %50) #1, !dbg !56
  %164 = bitcast i32 %163 to float, !dbg !56
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 %143, i32 0, i1 %143) #1, !dbg !56
  %166 = bitcast i32 %165 to float, !dbg !56
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %50, i32 0, i1 %50) #1, !dbg !56
  %168 = bitcast i32 %167 to float, !dbg !56
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %145, i32 0, i1 %145) #1, !dbg !56
  %170 = bitcast i32 %169 to float, !dbg !56
  %171 = getelementptr float, ptr addrspace(1) %5, i64 %39, !dbg !57
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %50, i32 0, i1 %50) #1, !dbg !58
  %173 = bitcast i32 %172 to float, !dbg !58
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %143, i32 0, i1 %143) #1, !dbg !58
  %175 = bitcast i32 %174 to float, !dbg !58
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %50, i32 0, i1 %50) #1, !dbg !58
  %177 = bitcast i32 %176 to float, !dbg !58
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %145, i32 0, i1 %145) #1, !dbg !58
  %179 = bitcast i32 %178 to float, !dbg !58
  %180 = fadd float %164, %173, !dbg !59
  %181 = fadd float %166, %175, !dbg !59
  %182 = fadd float %168, %177, !dbg !59
  %183 = fadd float %170, %179, !dbg !59
  %184 = select i1 %143, float %181, float 0.000000e+00, !dbg !60
  %185 = select i1 %145, float %183, float 0.000000e+00, !dbg !60
  %186 = icmp sgt i32 %147, 3, !dbg !61
  %187 = icmp sgt i32 %149, 3, !dbg !61
  %188 = and i1 %50, %186, !dbg !62
  %189 = and i1 %50, %187, !dbg !62
  %190 = add nsw i32 %51, %111, !dbg !63
  %191 = add nsw i32 %51, %113, !dbg !63
  %192 = shl nsw i32 %190, 2, !dbg !64
  %193 = shl nsw i32 %191, 2, !dbg !64
  %194 = add nsw i32 %29, -32, !dbg !65
  %195 = add nsw i32 %194, %25, !dbg !66
  %196 = add nsw i32 %78, %192, !dbg !66
  %197 = add nsw i32 %31, -32, !dbg !65
  %198 = add nsw i32 %197, %25, !dbg !66
  %199 = add nsw i32 %80, %193, !dbg !66
  %200 = sext i32 %195 to i64, !dbg !67
  %201 = getelementptr float, ptr addrspace(1) %6, i64 %200, !dbg !67
  %202 = sext i32 %196 to i64, !dbg !67
  %203 = getelementptr float, ptr addrspace(1) %6, i64 %202, !dbg !67
  %204 = sext i32 %198 to i64, !dbg !67
  %205 = getelementptr float, ptr addrspace(1) %6, i64 %204, !dbg !67
  %206 = sext i32 %199 to i64, !dbg !67
  %207 = getelementptr float, ptr addrspace(1) %6, i64 %206, !dbg !67
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %201, i1 false, i32 0, i1 false) #1, !dbg !68
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %203, i1 %188, i32 0, i1 %188) #1, !dbg !68
  %210 = bitcast i32 %209 to float, !dbg !68
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %205, i1 false, i32 0, i1 false) #1, !dbg !68
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %189, i32 0, i1 %189) #1, !dbg !68
  %213 = bitcast i32 %212 to float, !dbg !68
  %214 = getelementptr float, ptr addrspace(1) %7, i64 %39, !dbg !69
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 false, i32 0, i1 false) #1, !dbg !70
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 %188, i32 0, i1 %188) #1, !dbg !70
  %217 = bitcast i32 %216 to float, !dbg !70
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 false, i32 0, i1 false) #1, !dbg !70
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 %189, i32 0, i1 %189) #1, !dbg !70
  %220 = bitcast i32 %219 to float, !dbg !70
  %221 = fadd float %210, %217, !dbg !71
  %222 = fadd float %213, %220, !dbg !71
  %223 = select i1 %188, float %221, float 0.000000e+00, !dbg !72
  %224 = select i1 %189, float %222, float 0.000000e+00, !dbg !72
  %225 = select i1 %142, float %184, float %223, !dbg !73
  %226 = select i1 %144, float %185, float %224, !dbg !73
  %227 = select i1 %24, float %100, float %180, !dbg !74
  %228 = select i1 %24, float %140, float %225, !dbg !74
  %229 = select i1 %24, float %102, float %182, !dbg !74
  %230 = select i1 %24, float %141, float %226, !dbg !74
  %231 = sext i32 %16 to i64, !dbg !75
  %232 = getelementptr float, ptr addrspace(1) %8, i64 %231, !dbg !75
  %233 = bitcast float %227 to i32, !dbg !76
  %234 = bitcast float %228 to i32, !dbg !76
  %235 = bitcast float %229 to i32, !dbg !76
  %236 = bitcast float %230 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %233, i32 %234, i32 %235, i32 %236, ptr addrspace(1) %232, i1 true) #1, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2vwrpxvmeac6ezmoqzrivjahm3bsn53rqqb4v4l2yu5zsfikopq.py", directory: "inductor_cache/2v")
!4 = !{ptr @triton_poi_fused_stack_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_stack_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_stack_29", linkageName: "triton_poi_fused_stack_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 33, column: 18, scope: !7)
!20 = !DILocation(line: 40, column: 34, scope: !7)
!21 = !DILocation(line: 40, column: 60, scope: !7)
!22 = !DILocation(line: 40, column: 72, scope: !7)
!23 = !DILocation(line: 40, column: 57, scope: !7)
!24 = !DILocation(line: 40, column: 66, scope: !7)
!25 = !DILocation(line: 40, column: 31, scope: !7)
!26 = !DILocation(line: 40, column: 77, scope: !7)
!27 = !DILocation(line: 41, column: 31, scope: !7)
!28 = !DILocation(line: 49, column: 64, scope: !7)
!29 = !DILocation(line: 49, column: 73, scope: !7)
!30 = !DILocation(line: 49, column: 31, scope: !7)
!31 = !DILocation(line: 50, column: 31, scope: !7)
!32 = !DILocation(line: 57, column: 20, scope: !7)
!33 = !DILocation(line: 60, column: 35, scope: !7)
!34 = !DILocation(line: 34, column: 20, scope: !7)
!35 = !DILocation(line: 34, column: 15, scope: !7)
!36 = !DILocation(line: 60, column: 28, scope: !7)
!37 = !DILocation(line: 64, column: 20, scope: !7)
!38 = !DILocation(line: 39, column: 19, scope: !7)
!39 = !DILocation(line: 41, column: 36, scope: !7)
!40 = !DILocation(line: 42, column: 20, scope: !7)
!41 = !DILocation(line: 44, column: 35, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 41, scope: !7)
!45 = !DILocation(line: 49, column: 57, scope: !7)
!46 = !DILocation(line: 49, column: 34, scope: !7)
!47 = !DILocation(line: 49, column: 84, scope: !7)
!48 = !DILocation(line: 50, column: 36, scope: !7)
!49 = !DILocation(line: 51, column: 20, scope: !7)
!50 = !DILocation(line: 53, column: 35, scope: !7)
!51 = !DILocation(line: 54, column: 34, scope: !7)
!52 = !DILocation(line: 65, column: 20, scope: !7)
!53 = !DILocation(line: 66, column: 34, scope: !7)
!54 = !DILocation(line: 66, column: 73, scope: !7)
!55 = !DILocation(line: 66, column: 31, scope: !7)
!56 = !DILocation(line: 66, column: 84, scope: !7)
!57 = !DILocation(line: 67, column: 31, scope: !7)
!58 = !DILocation(line: 67, column: 36, scope: !7)
!59 = !DILocation(line: 68, column: 20, scope: !7)
!60 = !DILocation(line: 70, column: 35, scope: !7)
!61 = !DILocation(line: 71, column: 21, scope: !7)
!62 = !DILocation(line: 74, column: 20, scope: !7)
!63 = !DILocation(line: 75, column: 57, scope: !7)
!64 = !DILocation(line: 75, column: 34, scope: !7)
!65 = !DILocation(line: 75, column: 71, scope: !7)
!66 = !DILocation(line: 75, column: 80, scope: !7)
!67 = !DILocation(line: 75, column: 31, scope: !7)
!68 = !DILocation(line: 75, column: 91, scope: !7)
!69 = !DILocation(line: 76, column: 31, scope: !7)
!70 = !DILocation(line: 76, column: 36, scope: !7)
!71 = !DILocation(line: 77, column: 20, scope: !7)
!72 = !DILocation(line: 79, column: 35, scope: !7)
!73 = !DILocation(line: 80, column: 35, scope: !7)
!74 = !DILocation(line: 0, scope: !7)
!75 = !DILocation(line: 84, column: 25, scope: !7)
!76 = !DILocation(line: 84, column: 37, scope: !7)
!77 = !DILocation(line: 84, column: 4, scope: !7)
