; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 3, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = shl i32 %11, 2, !dbg !12
  %16 = and i32 %15, 28, !dbg !12
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = or disjoint i32 %10, %14, !dbg !13
  %19 = or disjoint i32 %10, %16, !dbg !13
  %20 = icmp slt i32 %17, 384, !dbg !14
  %21 = icmp slt i32 %18, 384, !dbg !14
  %22 = icmp slt i32 %19, 384, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %24 = shl i32 %23, 5, !dbg !16
  %25 = or disjoint i32 %24, %16, !dbg !17
  %26 = or disjoint i32 %25, 1, !dbg !17
  %27 = or disjoint i32 %25, 2, !dbg !17
  %28 = or disjoint i32 %25, 3, !dbg !17
  %29 = or disjoint i32 %24, %13, !dbg !17
  %30 = or disjoint i32 %24, %14, !dbg !17
  %31 = icmp slt i32 %25, 256, !dbg !18
  %32 = icmp slt i32 %29, 256, !dbg !18
  %33 = icmp slt i32 %30, 256, !dbg !18
  %34 = srem i32 %18, 96, !dbg !19
  %.frozen = freeze i32 %19, !dbg !20
  %35 = sdiv i32 %.frozen, 96, !dbg !20
  %36 = mul i32 %35, 96, !dbg !19
  %.decomposed = sub i32 %.frozen, %36, !dbg !19
  %.frozen30 = freeze i32 %25, !dbg !21
  %37 = sdiv i32 %.frozen30, 16, !dbg !21
  %38 = mul i32 %37, 16, !dbg !22
  %.decomposed31 = sub i32 %.frozen30, %38, !dbg !22
  %39 = srem i32 %26, 16, !dbg !22
  %40 = srem i32 %27, 16, !dbg !22
  %41 = srem i32 %28, 16, !dbg !22
  %.frozen32 = freeze i32 %29, !dbg !21
  %42 = sdiv i32 %.frozen32, 16, !dbg !21
  %43 = mul i32 %42, 16, !dbg !22
  %.decomposed33 = sub i32 %.frozen32, %43, !dbg !22
  %.frozen34 = freeze i32 %30, !dbg !21
  %44 = sdiv i32 %.frozen34, 16, !dbg !21
  %45 = mul i32 %44, 16, !dbg !22
  %.decomposed35 = sub i32 %.frozen34, %45, !dbg !22
  %46 = shl i32 %17, 8, !dbg !23
  %47 = shl i32 %18, 8, !dbg !23
  %48 = add i32 %25, %46, !dbg !24
  %49 = add i32 %25, %47, !dbg !24
  %50 = sext i32 %48 to i64, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !25
  %52 = sext i32 %49 to i64, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !25
  %54 = and i1 %20, %31, !dbg !26
  %55 = and i1 %21, %31, !dbg !26
  %56 = and i1 %22, %32, !dbg !26
  %57 = and i1 %22, %33, !dbg !26
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %54) #3, !dbg !27
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !27
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !27
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !27
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !27
  %63 = bitcast i32 %59 to float, !dbg !27
  %64 = bitcast i32 %60 to float, !dbg !27
  %65 = bitcast i32 %61 to float, !dbg !27
  %66 = bitcast i32 %62 to float, !dbg !27
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %55) #3, !dbg !27
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !27
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !27
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !27
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !27
  %72 = bitcast i32 %68 to float, !dbg !27
  %73 = bitcast i32 %69 to float, !dbg !27
  %74 = bitcast i32 %70 to float, !dbg !27
  %75 = bitcast i32 %71 to float, !dbg !27
  %76 = sext i32 %34 to i64, !dbg !28
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !28
  %78 = shl nsw i32 %34, 8, !dbg !29
  %79 = add i32 %78, %25, !dbg !30
  %80 = sext i32 %79 to i64, !dbg !31
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !31
  %82 = srem i32 %42, 8, !dbg !32
  %83 = srem i32 %44, 8, !dbg !32
  %84 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !32
  %85 = insertelement <2 x i32> %84, i32 %17, i64 1, !dbg !32
  %86 = srem <2 x i32> %85, <i32 8, i32 96>, !dbg !32
  %87 = extractelement <2 x i32> %86, i64 1, !dbg !29
  %88 = sext i32 %87 to i64, !dbg !28
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !28
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %20) #3, !dbg !33
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %20) #3, !dbg !33
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %20) #3, !dbg !33
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %20) #3, !dbg !33
  %94 = bitcast i32 %93 to float, !dbg !33
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %21) #3, !dbg !33
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %21) #3, !dbg !33
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %21) #3, !dbg !33
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %21) #3, !dbg !33
  %99 = bitcast i32 %98 to float, !dbg !33
  %100 = shl nsw i32 %87, 8, !dbg !29
  %101 = add i32 %100, %25, !dbg !30
  %102 = sext i32 %101 to i64, !dbg !31
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !31
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 %54) #3, !dbg !34
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !34
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !34
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !34
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !34
  %109 = bitcast i32 %105 to float, !dbg !34
  %110 = bitcast i32 %106 to float, !dbg !34
  %111 = bitcast i32 %107 to float, !dbg !34
  %112 = bitcast i32 %108 to float, !dbg !34
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %55) #3, !dbg !34
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !34
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !34
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !34
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !34
  %118 = bitcast i32 %114 to float, !dbg !34
  %119 = bitcast i32 %115 to float, !dbg !34
  %120 = bitcast i32 %116 to float, !dbg !34
  %121 = bitcast i32 %117 to float, !dbg !34
  %122 = shl nsw <2 x i32> %86, <i32 3, i32 6>, !dbg !35
  %123 = shl nsw i32 %34, 6, !dbg !36
  %124 = extractelement <2 x i32> %122, i64 0, !dbg !37
  %125 = extractelement <2 x i32> %122, i64 1, !dbg !37
  %126 = add nsw i32 %124, %125, !dbg !37
  %127 = add nsw i32 %124, %123, !dbg !37
  %.lhs.trunc = trunc nsw i32 %.decomposed31 to i8, !dbg !38
  %128 = srem i8 %.lhs.trunc, 8, !dbg !38
  %.sext = sext i8 %128 to i32, !dbg !38
  %.lhs.trunc15 = trunc nsw i32 %39 to i8, !dbg !38
  %129 = srem i8 %.lhs.trunc15, 8, !dbg !38
  %.sext16 = sext i8 %129 to i32, !dbg !38
  %.lhs.trunc17 = trunc nsw i32 %40 to i8, !dbg !38
  %130 = srem i8 %.lhs.trunc17, 8, !dbg !38
  %.sext18 = sext i8 %130 to i32, !dbg !38
  %.lhs.trunc19 = trunc nsw i32 %41 to i8, !dbg !38
  %131 = srem i8 %.lhs.trunc19, 8, !dbg !38
  %.sext20 = sext i8 %131 to i32, !dbg !38
  %.lhs.trunc21 = trunc nsw i32 %.decomposed33 to i8, !dbg !38
  %132 = sdiv i8 %.lhs.trunc21, 8, !dbg !39
  %133 = mul i8 %132, 8, !dbg !38
  %.decomposed36 = sub i8 %.lhs.trunc21, %133, !dbg !38
  %.lhs.trunc23 = trunc nsw i32 %.decomposed35 to i8, !dbg !38
  %134 = sdiv i8 %.lhs.trunc23, 8, !dbg !39
  %135 = mul i8 %134, 8, !dbg !38
  %.decomposed37 = sub i8 %.lhs.trunc23, %135, !dbg !38
  %136 = add nsw i32 %126, %.sext, !dbg !40
  %137 = add nsw i32 %126, %.sext16, !dbg !40
  %138 = add nsw i32 %126, %.sext18, !dbg !40
  %139 = add nsw i32 %126, %.sext20, !dbg !40
  %140 = add nsw i32 %127, %.sext, !dbg !40
  %141 = add nsw i32 %127, %.sext16, !dbg !40
  %142 = add nsw i32 %127, %.sext18, !dbg !40
  %143 = add nsw i32 %127, %.sext20, !dbg !40
  %144 = sext i32 %136 to i64, !dbg !41
  %145 = getelementptr float, ptr addrspace(1) %3, i64 %144, !dbg !41
  %146 = sext i32 %137 to i64, !dbg !41
  %147 = getelementptr float, ptr addrspace(1) %3, i64 %146, !dbg !41
  %148 = sext i32 %138 to i64, !dbg !41
  %149 = getelementptr float, ptr addrspace(1) %3, i64 %148, !dbg !41
  %150 = sext i32 %139 to i64, !dbg !41
  %151 = getelementptr float, ptr addrspace(1) %3, i64 %150, !dbg !41
  %152 = sext i32 %140 to i64, !dbg !41
  %153 = getelementptr float, ptr addrspace(1) %3, i64 %152, !dbg !41
  %154 = sext i32 %141 to i64, !dbg !41
  %155 = getelementptr float, ptr addrspace(1) %3, i64 %154, !dbg !41
  %156 = sext i32 %142 to i64, !dbg !41
  %157 = getelementptr float, ptr addrspace(1) %3, i64 %156, !dbg !41
  %158 = sext i32 %143 to i64, !dbg !41
  %159 = getelementptr float, ptr addrspace(1) %3, i64 %158, !dbg !41
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %54) #3, !dbg !42
  %161 = bitcast i32 %160 to float, !dbg !42
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %54) #3, !dbg !42
  %163 = bitcast i32 %162 to float, !dbg !42
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %54) #3, !dbg !42
  %165 = bitcast i32 %164 to float, !dbg !42
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %54) #3, !dbg !42
  %167 = bitcast i32 %166 to float, !dbg !42
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %55) #3, !dbg !42
  %169 = bitcast i32 %168 to float, !dbg !42
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %55) #3, !dbg !42
  %171 = bitcast i32 %170 to float, !dbg !42
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %55) #3, !dbg !42
  %173 = bitcast i32 %172 to float, !dbg !42
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 %55) #3, !dbg !42
  %175 = bitcast i32 %174 to float, !dbg !42
  %176 = insertelement <2 x i8> poison, i8 %.decomposed36, i64 0, !dbg !38
  %177 = insertelement <2 x i8> %176, i8 %132, i64 1, !dbg !38
  %178 = insertelement <2 x i8> poison, i8 %.decomposed37, i64 0, !dbg !38
  %179 = insertelement <2 x i8> %178, i8 %134, i64 1, !dbg !38
  %180 = sdiv i32 %29, 128, !dbg !43
  %181 = sdiv i32 %30, 128, !dbg !43
  %182 = insertelement <4 x i32> poison, i32 %180, i64 0, !dbg !44
  %183 = insertelement <4 x i32> %182, i32 %82, i64 1, !dbg !44
  %184 = sext <2 x i8> %177 to <2 x i32>, !dbg !44
  %185 = shufflevector <2 x i32> %184, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !44
  %186 = shufflevector <4 x i32> %183, <4 x i32> %185, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !44
  %187 = mul <4 x i32> %186, <i32 12288, i32 768, i32 96, i32 6144>, !dbg !44
  %188 = insertelement <4 x i32> poison, i32 %181, i64 0, !dbg !44
  %189 = insertelement <4 x i32> %188, i32 %83, i64 1, !dbg !44
  %190 = sext <2 x i8> %179 to <2 x i32>, !dbg !44
  %191 = shufflevector <2 x i32> %190, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !44
  %192 = shufflevector <4 x i32> %189, <4 x i32> %191, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !44
  %193 = mul <4 x i32> %192, <i32 12288, i32 768, i32 96, i32 6144>, !dbg !44
  %194 = mul i32 %35, 24576, !dbg !45
  %195 = add i32 %194, %.decomposed, !dbg !46
  %196 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %187), !dbg !47
  %op.rdx = add i32 %196, %195, !dbg !48
  %197 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %193), !dbg !47
  %op.rdx29 = add i32 %197, %195, !dbg !48
  %198 = sext i32 %op.rdx to i64, !dbg !49
  %199 = getelementptr float, ptr addrspace(1) %4, i64 %198, !dbg !49
  %200 = sext i32 %op.rdx29 to i64, !dbg !49
  %201 = getelementptr float, ptr addrspace(1) %4, i64 %200, !dbg !49
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %199, i1 %56) #3, !dbg !50
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !50
  %204 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !50
  %205 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !50
  %206 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !50
  %207 = bitcast i32 %203 to float, !dbg !50
  %208 = bitcast i32 %204 to float, !dbg !50
  %209 = bitcast i32 %205 to float, !dbg !50
  %210 = bitcast i32 %206 to float, !dbg !50
  %211 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %201, i1 %57) #3, !dbg !50
  %212 = extractvalue { i32, i32, i32, i32 } %211, 0, !dbg !50
  %213 = extractvalue { i32, i32, i32, i32 } %211, 1, !dbg !50
  %214 = extractvalue { i32, i32, i32, i32 } %211, 2, !dbg !50
  %215 = extractvalue { i32, i32, i32, i32 } %211, 3, !dbg !50
  %216 = bitcast i32 %212 to float, !dbg !50
  %217 = bitcast i32 %213 to float, !dbg !50
  %218 = bitcast i32 %214 to float, !dbg !50
  %219 = bitcast i32 %215 to float, !dbg !50
  %220 = sext i32 %.decomposed to i64, !dbg !51
  %221 = getelementptr float, ptr addrspace(1) %5, i64 %220, !dbg !51
  %222 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %221, i1 %22) #3, !dbg !52
  %223 = extractvalue { i32, i32, i32, i32 } %222, 0, !dbg !52
  %224 = extractvalue { i32, i32, i32, i32 } %222, 1, !dbg !52
  %225 = extractvalue { i32, i32, i32, i32 } %222, 2, !dbg !52
  %226 = extractvalue { i32, i32, i32, i32 } %222, 3, !dbg !52
  %227 = bitcast i32 %223 to float, !dbg !52
  %228 = bitcast i32 %224 to float, !dbg !52
  %229 = bitcast i32 %225 to float, !dbg !52
  %230 = bitcast i32 %226 to float, !dbg !52
  %231 = fadd float %63, %94, !dbg !53
  %232 = fadd float %64, %94, !dbg !53
  %233 = fadd float %65, %94, !dbg !53
  %234 = fadd float %66, %94, !dbg !53
  %235 = fadd float %72, %99, !dbg !53
  %236 = fadd float %73, %99, !dbg !53
  %237 = fadd float %74, %99, !dbg !53
  %238 = fadd float %75, %99, !dbg !53
  %239 = fadd float %109, %161, !dbg !54
  %240 = fadd float %110, %163, !dbg !54
  %241 = fadd float %111, %165, !dbg !54
  %242 = fadd float %112, %167, !dbg !54
  %243 = fadd float %118, %169, !dbg !54
  %244 = fadd float %119, %171, !dbg !54
  %245 = fadd float %120, %173, !dbg !54
  %246 = fadd float %121, %175, !dbg !54
  %247 = fadd float %231, %239, !dbg !55
  %248 = fadd float %232, %240, !dbg !55
  %249 = fadd float %233, %241, !dbg !55
  %250 = fadd float %234, %242, !dbg !55
  %251 = fadd float %235, %243, !dbg !55
  %252 = fadd float %236, %244, !dbg !55
  %253 = fadd float %237, %245, !dbg !55
  %254 = fadd float %238, %246, !dbg !55
  %255 = shl i32 %11, 7, !dbg !55
  %256 = and i32 %255, 896, !dbg !55
  %257 = or disjoint i32 %256, %13, !dbg !55
  %258 = and i32 %15, 508, !dbg !55
  %259 = lshr exact i32 %256, 1, !dbg !55
  %260 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %259, !dbg !55
  %261 = getelementptr float, ptr addrspace(3) %260, i32 %257, !dbg !55
  %262 = bitcast float %247 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #3, !dbg !55
  %263 = or disjoint i32 %257, 32, !dbg !55
  %264 = lshr i32 %263, 5, !dbg !55
  %.idx = shl nuw nsw i32 %264, 4, !dbg !55
  %265 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !55
  %266 = getelementptr float, ptr addrspace(3) %265, i32 %263, !dbg !55
  %267 = bitcast float %248 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #3, !dbg !55
  %268 = or disjoint i32 %257, 64, !dbg !55
  %269 = lshr i32 %268, 5, !dbg !55
  %.idx1 = shl nuw nsw i32 %269, 4, !dbg !55
  %270 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !55
  %271 = getelementptr float, ptr addrspace(3) %270, i32 %268, !dbg !55
  %272 = bitcast float %249 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #3, !dbg !55
  %273 = or disjoint i32 %257, 96, !dbg !55
  %274 = lshr i32 %273, 5, !dbg !55
  %.idx2 = shl nuw nsw i32 %274, 4, !dbg !55
  %275 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !55
  %276 = getelementptr float, ptr addrspace(3) %275, i32 %273, !dbg !55
  %277 = bitcast float %250 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #3, !dbg !55
  %278 = or disjoint i32 %257, 16, !dbg !55
  %279 = getelementptr float, ptr addrspace(3) %260, i32 %278, !dbg !55
  %280 = bitcast float %251 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #3, !dbg !55
  %281 = or disjoint i32 %257, 48, !dbg !55
  %282 = lshr i32 %281, 5, !dbg !55
  %.idx3 = shl nuw nsw i32 %282, 4, !dbg !55
  %283 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !55
  %284 = getelementptr float, ptr addrspace(3) %283, i32 %281, !dbg !55
  %285 = bitcast float %252 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 true) #3, !dbg !55
  %286 = or disjoint i32 %257, 80, !dbg !55
  %287 = lshr i32 %286, 5, !dbg !55
  %.idx4 = shl nuw nsw i32 %287, 4, !dbg !55
  %288 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !55
  %289 = getelementptr float, ptr addrspace(3) %288, i32 %286, !dbg !55
  %290 = bitcast float %253 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %290, i1 true) #3, !dbg !55
  %291 = or disjoint i32 %257, 112, !dbg !55
  %292 = lshr i32 %291, 5, !dbg !55
  %.idx5 = shl nuw nsw i32 %292, 4, !dbg !55
  %293 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !55
  %294 = getelementptr float, ptr addrspace(3) %293, i32 %291, !dbg !55
  %295 = bitcast float %254 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #3, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %296 = lshr i32 %258, 5, !dbg !55
  %297 = and i32 %11, 127, !dbg !55
  %298 = add nuw nsw i32 %296, %297, !dbg !55
  %.idx6 = shl nuw nsw i32 %298, 4, !dbg !55
  %299 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !55
  %300 = load float, ptr addrspace(3) %299, align 16, !dbg !55
  %301 = getelementptr inbounds i8, ptr addrspace(3) %299, i32 4, !dbg !55
  %302 = load float, ptr addrspace(3) %301, align 4, !dbg !55
  %303 = getelementptr inbounds i8, ptr addrspace(3) %299, i32 8, !dbg !55
  %304 = load float, ptr addrspace(3) %303, align 8, !dbg !55
  %305 = getelementptr inbounds i8, ptr addrspace(3) %299, i32 12, !dbg !55
  %306 = load float, ptr addrspace(3) %305, align 4, !dbg !55
  %307 = or disjoint i32 %258, 512, !dbg !55
  %308 = lshr i32 %307, 5, !dbg !55
  %.idx10 = shl nuw nsw i32 %308, 4, !dbg !55
  %309 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !55
  %310 = getelementptr inbounds float, ptr addrspace(3) %309, i32 %307, !dbg !55
  %311 = load float, ptr addrspace(3) %310, align 16, !dbg !55
  %312 = getelementptr inbounds i8, ptr addrspace(3) %310, i32 4, !dbg !55
  %313 = load float, ptr addrspace(3) %312, align 4, !dbg !55
  %314 = getelementptr inbounds i8, ptr addrspace(3) %310, i32 8, !dbg !55
  %315 = load float, ptr addrspace(3) %314, align 8, !dbg !55
  %316 = getelementptr inbounds i8, ptr addrspace(3) %310, i32 12, !dbg !55
  %317 = load float, ptr addrspace(3) %316, align 4, !dbg !55
  %318 = fadd float %207, %227, !dbg !56
  %319 = fadd float %208, %228, !dbg !56
  %320 = fadd float %209, %229, !dbg !56
  %321 = fadd float %210, %230, !dbg !56
  %322 = fadd float %216, %227, !dbg !56
  %323 = fadd float %217, %228, !dbg !56
  %324 = fadd float %218, %229, !dbg !56
  %325 = fadd float %219, %230, !dbg !56
  %326 = fadd float %318, %300, !dbg !57
  %327 = fadd float %319, %302, !dbg !57
  %328 = fadd float %320, %304, !dbg !57
  %329 = fadd float %321, %306, !dbg !57
  %330 = fadd float %322, %311, !dbg !57
  %331 = fadd float %323, %313, !dbg !57
  %332 = fadd float %324, %315, !dbg !57
  %333 = fadd float %325, %317, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %334 = lshr exact i32 %256, 3, !dbg !59
  %335 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %334, !dbg !59
  %336 = getelementptr float, ptr addrspace(3) %335, i32 %257, !dbg !59
  %337 = bitcast float %326 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %337, i1 true) #3, !dbg !59
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i32 %264, !dbg !59
  %339 = getelementptr float, ptr addrspace(3) %338, i32 %263, !dbg !59
  %340 = bitcast float %327 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %340, i1 true) #3, !dbg !59
  %341 = getelementptr float, ptr addrspace(3) @global_smem, i32 %269, !dbg !59
  %342 = getelementptr float, ptr addrspace(3) %341, i32 %268, !dbg !59
  %343 = bitcast float %328 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %342, <1 x i32> %343, i1 true) #3, !dbg !59
  %344 = getelementptr float, ptr addrspace(3) @global_smem, i32 %274, !dbg !59
  %345 = getelementptr float, ptr addrspace(3) %344, i32 %273, !dbg !59
  %346 = bitcast float %329 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %346, i1 true) #3, !dbg !59
  %347 = getelementptr float, ptr addrspace(3) %335, i32 %278, !dbg !59
  %348 = bitcast float %330 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, <1 x i32> %348, i1 true) #3, !dbg !59
  %349 = getelementptr float, ptr addrspace(3) @global_smem, i32 %282, !dbg !59
  %350 = getelementptr float, ptr addrspace(3) %349, i32 %281, !dbg !59
  %351 = bitcast float %331 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %351, i1 true) #3, !dbg !59
  %352 = getelementptr float, ptr addrspace(3) @global_smem, i32 %287, !dbg !59
  %353 = getelementptr float, ptr addrspace(3) %352, i32 %286, !dbg !59
  %354 = bitcast float %332 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %353, <1 x i32> %354, i1 true) #3, !dbg !59
  %355 = getelementptr float, ptr addrspace(3) @global_smem, i32 %292, !dbg !59
  %356 = getelementptr float, ptr addrspace(3) %355, i32 %291, !dbg !59
  %357 = bitcast float %333 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, <1 x i32> %357, i1 true) #3, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %358 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %296, !dbg !59
  %359 = getelementptr inbounds float, ptr addrspace(3) %358, i32 %258, !dbg !59
  %360 = load i32, ptr addrspace(3) %359, align 4, !dbg !59
  %361 = or disjoint i32 %258, 1, !dbg !59
  %362 = getelementptr inbounds float, ptr addrspace(3) %358, i32 %361, !dbg !59
  %363 = load i32, ptr addrspace(3) %362, align 4, !dbg !59
  %364 = or disjoint i32 %258, 2, !dbg !59
  %365 = getelementptr inbounds float, ptr addrspace(3) %358, i32 %364, !dbg !59
  %366 = load i32, ptr addrspace(3) %365, align 4, !dbg !59
  %367 = or disjoint i32 %258, 3, !dbg !59
  %368 = getelementptr inbounds float, ptr addrspace(3) %358, i32 %367, !dbg !59
  %369 = load i32, ptr addrspace(3) %368, align 4, !dbg !59
  %370 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %308, !dbg !59
  %371 = getelementptr inbounds float, ptr addrspace(3) %370, i32 %307, !dbg !59
  %372 = load i32, ptr addrspace(3) %371, align 4, !dbg !59
  %373 = or disjoint i32 %258, 513, !dbg !59
  %374 = lshr i32 %373, 5, !dbg !59
  %375 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %374, !dbg !59
  %376 = getelementptr inbounds float, ptr addrspace(3) %375, i32 %373, !dbg !59
  %377 = load i32, ptr addrspace(3) %376, align 4, !dbg !59
  %378 = or disjoint i32 %258, 514, !dbg !59
  %379 = lshr i32 %378, 5, !dbg !59
  %380 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %379, !dbg !59
  %381 = getelementptr inbounds float, ptr addrspace(3) %380, i32 %378, !dbg !59
  %382 = load i32, ptr addrspace(3) %381, align 4, !dbg !59
  %383 = or disjoint i32 %258, 515, !dbg !59
  %384 = lshr i32 %383, 5, !dbg !59
  %385 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %384, !dbg !59
  %386 = getelementptr inbounds float, ptr addrspace(3) %385, i32 %383, !dbg !59
  %387 = load i32, ptr addrspace(3) %386, align 4, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %360, i32 %363, i32 %366, i32 %369, ptr addrspace(1) %51, i1 %54) #3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %372, i32 %377, i32 %382, i32 %387, ptr addrspace(1) %53, i1 %55) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2saqzgkixge2ceyzt36gpl54middaeipgy6tvhhngrgdks4pnis.py", directory: "inductor_cache/2s")
!4 = !{ptr @triton_poi_fused_add_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_8", linkageName: "triton_poi_fused_add_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 43, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 34, scope: !7)
!26 = !DILocation(line: 34, column: 56, scope: !7)
!27 = !DILocation(line: 34, column: 48, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 39, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 36, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 39, scope: !7)
!33 = !DILocation(line: 35, column: 35, scope: !7)
!34 = !DILocation(line: 36, column: 44, scope: !7)
!35 = !DILocation(line: 37, column: 34, scope: !7)
!36 = !DILocation(line: 37, column: 48, scope: !7)
!37 = !DILocation(line: 37, column: 45, scope: !7)
!38 = !DILocation(line: 37, column: 60, scope: !7)
!39 = !DILocation(line: 38, column: 80, scope: !7)
!40 = !DILocation(line: 37, column: 55, scope: !7)
!41 = !DILocation(line: 37, column: 30, scope: !7)
!42 = !DILocation(line: 37, column: 66, scope: !7)
!43 = !DILocation(line: 38, column: 98, scope: !7)
!44 = !DILocation(line: 38, column: 92, scope: !7)
!45 = !DILocation(line: 38, column: 109, scope: !7)
!46 = !DILocation(line: 38, column: 35, scope: !7)
!47 = !DILocation(line: 38, column: 103, scope: !7)
!48 = !DILocation(line: 38, column: 51, scope: !7)
!49 = !DILocation(line: 38, column: 30, scope: !7)
!50 = !DILocation(line: 38, column: 114, scope: !7)
!51 = !DILocation(line: 39, column: 30, scope: !7)
!52 = !DILocation(line: 39, column: 35, scope: !7)
!53 = !DILocation(line: 40, column: 18, scope: !7)
!54 = !DILocation(line: 41, column: 18, scope: !7)
!55 = !DILocation(line: 42, column: 18, scope: !7)
!56 = !DILocation(line: 43, column: 18, scope: !7)
!57 = !DILocation(line: 44, column: 19, scope: !7)
!58 = !DILocation(line: 45, column: 4, scope: !7)
!59 = !DILocation(line: 46, column: 49, scope: !7)
!60 = !DILocation(line: 46, column: 4, scope: !7)
