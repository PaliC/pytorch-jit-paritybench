; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_5(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = srem i32 %9, 128, !dbg !14
  %11 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !15
  %12 = shufflevector <2 x i32> %11, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !15
  %13 = sdiv <2 x i32> %12, <i32 128, i32 512>, !dbg !15
  %14 = srem <2 x i32> %13, splat (i32 4), !dbg !16
  %15 = extractelement <2 x i32> %14, i64 1, !dbg !17
  %16 = icmp sgt i32 %15, 0, !dbg !18
  %17 = shl nsw <2 x i32> %14, splat (i32 1), !dbg !19
  %18 = extractelement <2 x i32> %14, i64 0, !dbg !20
  %19 = icmp sgt i32 %18, 0, !dbg !21
  %20 = and i1 %16, %19, !dbg !22
  %21 = shl nsw i32 %18, 8, !dbg !23
  %22 = extractelement <2 x i32> %13, i64 1, !dbg !24
  %23 = shl i32 %22, 11, !dbg !24
  %24 = add i32 %23, %10, !dbg !25
  %25 = add i32 %24, -1152, !dbg !26
  %26 = add i32 %25, %21, !dbg !27
  %27 = sext i32 %26 to i64, !dbg !28
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !28
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %28, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #1, !dbg !29
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !29
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !29
  %32 = bitcast i32 %30 to float, !dbg !29
  %33 = bitcast i32 %31 to float, !dbg !29
  %34 = icmp sgt i32 %18, -1, !dbg !30
  %35 = and i1 %16, %34, !dbg !31
  %36 = add i32 %24, -1024, !dbg !32
  %37 = add i32 %36, %21, !dbg !33
  %38 = sext i32 %37 to i64, !dbg !34
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !34
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #1, !dbg !35
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !35
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !35
  %43 = bitcast i32 %41 to float, !dbg !35
  %44 = bitcast i32 %42 to float, !dbg !35
  %45 = fadd float %32, %43, !dbg !36
  %46 = fadd float %33, %44, !dbg !36
  %47 = add i32 %24, -896, !dbg !37
  %48 = add i32 %47, %21, !dbg !38
  %49 = sext i32 %48 to i64, !dbg !39
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !39
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %50, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #1, !dbg !40
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !40
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !40
  %54 = bitcast i32 %52 to float, !dbg !40
  %55 = bitcast i32 %53 to float, !dbg !40
  %56 = fadd float %45, %54, !dbg !41
  %57 = fadd float %46, %55, !dbg !41
  %58 = icmp sgt i32 %15, -1, !dbg !42
  %59 = and i1 %58, %19, !dbg !43
  %60 = add i32 %24, -128, !dbg !44
  %61 = add i32 %60, %21, !dbg !45
  %62 = sext i32 %61 to i64, !dbg !46
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !46
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %63, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #1, !dbg !47
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !47
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !47
  %67 = bitcast i32 %65 to float, !dbg !47
  %68 = bitcast i32 %66 to float, !dbg !47
  %69 = fadd float %56, %67, !dbg !48
  %70 = fadd float %57, %68, !dbg !48
  %71 = or i32 %15, %18, !dbg !17
  %72 = icmp sgt i32 %71, -1, !dbg !17
  %73 = add i32 %24, %21, !dbg !49
  %74 = sext i32 %73 to i64, !dbg !50
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !50
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %75, i1 %72, i32 0, i1 %72, i32 0, i1 %72) #1, !dbg !51
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !51
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !51
  %79 = bitcast i32 %77 to float, !dbg !51
  %80 = bitcast i32 %78 to float, !dbg !51
  %81 = fadd float %69, %79, !dbg !52
  %82 = fadd float %70, %80, !dbg !52
  %83 = add i32 %24, 128, !dbg !53
  %84 = add i32 %83, %21, !dbg !54
  %85 = sext i32 %84 to i64, !dbg !55
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !55
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %86, i1 %72, i32 0, i1 %72, i32 0, i1 %72) #1, !dbg !56
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !56
  %89 = extractvalue { i32, i32 } %87, 1, !dbg !56
  %90 = bitcast i32 %88 to float, !dbg !56
  %91 = bitcast i32 %89 to float, !dbg !56
  %92 = fadd float %81, %90, !dbg !57
  %93 = fadd float %82, %91, !dbg !57
  %94 = add i32 %24, 896, !dbg !58
  %95 = add i32 %94, %21, !dbg !59
  %96 = sext i32 %95 to i64, !dbg !60
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !60
  %98 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %97, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #1, !dbg !61
  %99 = extractvalue { i32, i32 } %98, 0, !dbg !61
  %100 = extractvalue { i32, i32 } %98, 1, !dbg !61
  %101 = bitcast i32 %99 to float, !dbg !61
  %102 = bitcast i32 %100 to float, !dbg !61
  %103 = fadd float %92, %101, !dbg !62
  %104 = fadd float %93, %102, !dbg !62
  %105 = add i32 %24, 1024, !dbg !63
  %106 = add i32 %105, %21, !dbg !64
  %107 = sext i32 %106 to i64, !dbg !65
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !65
  %109 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %108, i1 %72, i32 0, i1 %72, i32 0, i1 %72) #1, !dbg !66
  %110 = extractvalue { i32, i32 } %109, 0, !dbg !66
  %111 = extractvalue { i32, i32 } %109, 1, !dbg !66
  %112 = bitcast i32 %110 to float, !dbg !66
  %113 = bitcast i32 %111 to float, !dbg !66
  %114 = fadd float %103, %112, !dbg !67
  %115 = fadd float %104, %113, !dbg !67
  %116 = add i32 %24, 1152, !dbg !68
  %117 = add i32 %116, %21, !dbg !69
  %118 = sext i32 %117 to i64, !dbg !70
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !70
  %120 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %119, i1 %72, i32 0, i1 %72, i32 0, i1 %72) #1, !dbg !71
  %121 = extractvalue { i32, i32 } %120, 0, !dbg !71
  %122 = extractvalue { i32, i32 } %120, 1, !dbg !71
  %123 = bitcast i32 %121 to float, !dbg !71
  %124 = bitcast i32 %122 to float, !dbg !71
  %125 = fadd float %114, %123, !dbg !72
  %126 = fadd float %115, %124, !dbg !72
  %127 = mul nsw i32 %18, -2, !dbg !73
  %128 = mul nsw i32 %15, -2, !dbg !74
  %129 = add nsw <2 x i32> %17, splat (i32 2), !dbg !75
  %130 = extractelement <2 x i32> %129, i64 0, !dbg !76
  %131 = mul nsw i32 %130, %128, !dbg !77
  %132 = shl nsw i32 %18, 2, !dbg !20
  %133 = mul nsw i32 %132, %15, !dbg !78
  %reass.add = add nsw i32 %130, %127
  %134 = extractelement <2 x i32> %129, i64 1, !dbg !79
  %reass.mul = mul nsw i32 %reass.add, %134
  %135 = or disjoint i32 %127, 1, !dbg !80
  %136 = add nsw i32 %135, %128, !dbg !81
  %137 = add nsw i32 %136, %133, !dbg !82
  %138 = add nsw i32 %137, %130, !dbg !76
  %139 = add nsw i32 %138, %134, !dbg !79
  %140 = add i32 %139, %131, !dbg !83
  %141 = add i32 %140, %reass.mul, !dbg !84
  %142 = sitofp i32 %141 to float, !dbg !85
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %142) #1, !dbg !85
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float %142) #1, !dbg !85
  %145 = sext i32 %9 to i64, !dbg !86
  %146 = getelementptr float, ptr addrspace(1) %1, i64 %145, !dbg !86
  %147 = bitcast float %143 to i32, !dbg !87
  %148 = bitcast float %144 to i32, !dbg !87
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %147, i32 %148, ptr addrspace(1) %146, i1 true) #1, !dbg !87
  ret void, !dbg !88
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwe2evxtxuagjv2fuyz5gmyivaseqnj77rc3vglukukxg34sudvu.py", directory: "inductor_cache/we")
!4 = !{ptr @triton_poi_fused_avg_pool2d_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_5", linkageName: "triton_poi_fused_avg_pool2d_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 62, column: 20, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 35, column: 20, scope: !7)
!20 = !DILocation(line: 81, column: 316, scope: !7)
!21 = !DILocation(line: 36, column: 19, scope: !7)
!22 = !DILocation(line: 39, column: 19, scope: !7)
!23 = !DILocation(line: 40, column: 50, scope: !7)
!24 = !DILocation(line: 40, column: 60, scope: !7)
!25 = !DILocation(line: 40, column: 41, scope: !7)
!26 = !DILocation(line: 40, column: 46, scope: !7)
!27 = !DILocation(line: 40, column: 55, scope: !7)
!28 = !DILocation(line: 40, column: 31, scope: !7)
!29 = !DILocation(line: 40, column: 65, scope: !7)
!30 = !DILocation(line: 42, column: 21, scope: !7)
!31 = !DILocation(line: 45, column: 19, scope: !7)
!32 = !DILocation(line: 46, column: 46, scope: !7)
!33 = !DILocation(line: 46, column: 55, scope: !7)
!34 = !DILocation(line: 46, column: 31, scope: !7)
!35 = !DILocation(line: 46, column: 65, scope: !7)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 53, column: 45, scope: !7)
!38 = !DILocation(line: 53, column: 54, scope: !7)
!39 = !DILocation(line: 53, column: 31, scope: !7)
!40 = !DILocation(line: 53, column: 64, scope: !7)
!41 = !DILocation(line: 54, column: 20, scope: !7)
!42 = !DILocation(line: 56, column: 21, scope: !7)
!43 = !DILocation(line: 59, column: 20, scope: !7)
!44 = !DILocation(line: 60, column: 45, scope: !7)
!45 = !DILocation(line: 60, column: 54, scope: !7)
!46 = !DILocation(line: 60, column: 31, scope: !7)
!47 = !DILocation(line: 60, column: 64, scope: !7)
!48 = !DILocation(line: 61, column: 20, scope: !7)
!49 = !DILocation(line: 63, column: 45, scope: !7)
!50 = !DILocation(line: 63, column: 31, scope: !7)
!51 = !DILocation(line: 63, column: 55, scope: !7)
!52 = !DILocation(line: 64, column: 20, scope: !7)
!53 = !DILocation(line: 66, column: 42, scope: !7)
!54 = !DILocation(line: 66, column: 51, scope: !7)
!55 = !DILocation(line: 66, column: 31, scope: !7)
!56 = !DILocation(line: 66, column: 61, scope: !7)
!57 = !DILocation(line: 67, column: 20, scope: !7)
!58 = !DILocation(line: 73, column: 42, scope: !7)
!59 = !DILocation(line: 73, column: 51, scope: !7)
!60 = !DILocation(line: 73, column: 31, scope: !7)
!61 = !DILocation(line: 73, column: 61, scope: !7)
!62 = !DILocation(line: 74, column: 20, scope: !7)
!63 = !DILocation(line: 76, column: 43, scope: !7)
!64 = !DILocation(line: 76, column: 52, scope: !7)
!65 = !DILocation(line: 76, column: 31, scope: !7)
!66 = !DILocation(line: 76, column: 62, scope: !7)
!67 = !DILocation(line: 77, column: 20, scope: !7)
!68 = !DILocation(line: 79, column: 43, scope: !7)
!69 = !DILocation(line: 79, column: 52, scope: !7)
!70 = !DILocation(line: 79, column: 31, scope: !7)
!71 = !DILocation(line: 79, column: 62, scope: !7)
!72 = !DILocation(line: 80, column: 20, scope: !7)
!73 = !DILocation(line: 81, column: 22, scope: !7)
!74 = !DILocation(line: 81, column: 34, scope: !7)
!75 = !DILocation(line: 81, column: 60, scope: !7)
!76 = !DILocation(line: 81, column: 241, scope: !7)
!77 = !DILocation(line: 81, column: 250, scope: !7)
!78 = !DILocation(line: 81, column: 319, scope: !7)
!79 = !DILocation(line: 81, column: 314, scope: !7)
!80 = !DILocation(line: 81, column: 29, scope: !7)
!81 = !DILocation(line: 81, column: 40, scope: !7)
!82 = !DILocation(line: 81, column: 167, scope: !7)
!83 = !DILocation(line: 81, column: 325, scope: !7)
!84 = !DILocation(line: 81, column: 389, scope: !7)
!85 = !DILocation(line: 82, column: 20, scope: !7)
!86 = !DILocation(line: 83, column: 25, scope: !7)
!87 = !DILocation(line: 83, column: 37, scope: !7)
!88 = !DILocation(line: 83, column: 4, scope: !7)
