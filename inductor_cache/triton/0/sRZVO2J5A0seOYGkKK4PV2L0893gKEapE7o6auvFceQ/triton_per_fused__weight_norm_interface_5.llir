; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_5(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %6 = icmp slt i32 %5, 16, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = lshr i32 %7, 5, !dbg !12
  %10 = shl i32 %7, 1, !dbg !12
  %11 = and i32 %10, 126, !dbg !12
  %12 = or disjoint i32 %11, 128, !dbg !12
  %13 = icmp samesign ult i32 %12, 150, !dbg !13
  %14 = mul i32 %5, 150, !dbg !14
  %15 = add i32 %14, %11, !dbg !15
  %16 = add i32 %14, %12, !dbg !15
  %17 = sext i32 %15 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !16
  %19 = sext i32 %16 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !16
  %21 = and i1 %13, %6, !dbg !17
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %18, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #5, !dbg !18
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !18
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !18
  %25 = bitcast i32 %23 to float, !dbg !18
  %26 = bitcast i32 %24 to float, !dbg !18
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %20, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !18
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !18
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !18
  %30 = bitcast i32 %28 to float, !dbg !18
  %31 = bitcast i32 %29 to float, !dbg !18
  %32 = fmul float %25, %25, !dbg !19
  %33 = fmul float %26, %26, !dbg !19
  %34 = fmul float %30, %30, !dbg !19
  %35 = fmul float %31, %31, !dbg !19
  %36 = select i1 %21, float %34, float 0.000000e+00, !dbg !20
  %37 = select i1 %21, float %35, float 0.000000e+00, !dbg !20
  %38 = fadd float %32, %33, !dbg !21
  %39 = select i1 %6, float %38, float 0.000000e+00, !dbg !21
  %40 = fadd float %39, %36, !dbg !21
  %41 = fadd float %37, %40, !dbg !21
  %42 = bitcast float %41 to i32, !dbg !26
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 16, i32 31), !dbg !26
  %44 = bitcast i32 %43 to float, !dbg !26
  %45 = fadd float %41, %44, !dbg !21
  %46 = bitcast float %45 to i32, !dbg !26
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 8, i32 31), !dbg !26
  %48 = bitcast i32 %47 to float, !dbg !26
  %49 = fadd float %45, %48, !dbg !21
  %50 = bitcast float %49 to i32, !dbg !26
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 4, i32 31), !dbg !26
  %52 = bitcast i32 %51 to float, !dbg !26
  %53 = fadd float %49, %52, !dbg !21
  %54 = bitcast float %53 to i32, !dbg !26
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 2, i32 31), !dbg !26
  %56 = bitcast i32 %55 to float, !dbg !26
  %57 = fadd float %53, %56, !dbg !21
  %58 = bitcast float %57 to i32, !dbg !26
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !26
  %60 = bitcast i32 %59 to float, !dbg !26
  %61 = fadd float %57, %60, !dbg !21
  %62 = icmp eq i32 %8, 0, !dbg !26
  %63 = and i32 %9, 1, !dbg !26
  %64 = zext nneg i32 %63 to i64, !dbg !26
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i64 %64, !dbg !26
  %66 = bitcast float %61 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 %62) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %67 = icmp slt i32 %7, 2, !dbg !26
  %68 = sext i32 %7 to i64, !dbg !26
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i64 %68, !dbg !26
  %70 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %69, i1 %67) #5, !dbg !26
  %71 = bitcast i32 %70 to float, !dbg !26
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !26
  %73 = bitcast i32 %72 to float, !dbg !26
  %74 = fadd float %71, %73, !dbg !21
  %75 = and i32 %7, 1, !dbg !26
  %76 = icmp eq i32 %75, 0, !dbg !26
  %77 = and i1 %67, %76, !dbg !26
  %78 = bitcast float %74 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %78, i1 %77) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %79 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !26
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !27
  %.not.i = icmp eq i32 %80, 0, !dbg !27
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !27
  %.not1.i = icmp eq i32 %81, 0, !dbg !27
  br i1 %.not.i, label %87, label %82, !dbg !27

82:                                               ; preds = %4
  br i1 %.not1.i, label %85, label %83, !dbg !27

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

87:                                               ; preds = %4
  br i1 %.not1.i, label %90, label %88, !dbg !27

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

__nv_sqrtf.exit:                                  ; preds = %83, %85, %88, %90
  %.0.i = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %92 = sext i32 %5 to i64, !dbg !29
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !29
  %urem = and i32 %7, 63, !dbg !30
  %94 = icmp eq i32 %urem, 0, !dbg !30
  %95 = bitcast float %.0.i to i32, !dbg !30
  %96 = and i1 %94, %6, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %95, ptr addrspace(1) %93, i1 %96) #5, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py", directory: "inductor_cache/j7")
!4 = !{ptr @triton_per_fused__weight_norm_interface_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_5, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_5", linkageName: "triton_per_fused__weight_norm_interface_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 28, column: 21, scope: !7)
!14 = !DILocation(line: 31, column: 39, scope: !7)
!15 = !DILocation(line: 31, column: 35, scope: !7)
!16 = !DILocation(line: 31, column: 30, scope: !7)
!17 = !DILocation(line: 31, column: 52, scope: !7)
!18 = !DILocation(line: 31, column: 44, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 34, column: 41, scope: !7)
!21 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 35, column: 24, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !25)
!27 = !DILocation(line: 36, column: 26, scope: !7)
!28 = !DILocation(line: 37, column: 4, scope: !7)
!29 = !DILocation(line: 38, column: 28, scope: !7)
!30 = !DILocation(line: 38, column: 39, scope: !7)
!31 = !DILocation(line: 38, column: 4, scope: !7)
