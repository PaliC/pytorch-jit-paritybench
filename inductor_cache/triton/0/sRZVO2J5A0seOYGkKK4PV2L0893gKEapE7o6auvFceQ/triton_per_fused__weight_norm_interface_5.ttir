#loc = loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":19:0)
#loc1 = loc(unknown)
#loc15 = loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":35:24)
#loc24 = loc(callsite(#loc1 at #loc15))
module {
  tt.func public @triton_per_fused__weight_norm_interface_5(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":19:0), %arg3: i32 loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":19:0)) attributes {noinline = false} {
    %c150_i32 = arith.constant 150 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<1x256xf32> loc(#loc1)
    %cst_0 = arith.constant dense<150> : tensor<1x256xi32> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i1 -> tensor<1x1xi1> loc(#loc3)
    %3 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc4)
    %4 = tt.expand_dims %3 {axis = 0 : i32} : tensor<256xi32> -> tensor<1x256xi32> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_0 : tensor<1x256xi32> loc(#loc6)
    %6 = arith.muli %0, %c150_i32 : i32 loc(#loc7)
    %7 = tt.splat %6 : i32 -> tensor<1x256xi32> loc(#loc8)
    %8 = arith.addi %4, %7 : tensor<1x256xi32> loc(#loc8)
    %9 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>> loc(#loc9)
    %10 = tt.addptr %9, %8 : tensor<1x256x!tt.ptr<f32>>, tensor<1x256xi32> loc(#loc9)
    %11 = tt.splat %1 : i1 -> tensor<1x256xi1> loc(#loc10)
    %12 = arith.andi %5, %11 : tensor<1x256xi1> loc(#loc10)
    %13 = tt.load %10, %12, %cst : tensor<1x256x!tt.ptr<f32>> loc(#loc11)
    %14 = arith.mulf %13, %13 : tensor<1x256xf32> loc(#loc12)
    %15 = arith.select %12, %14, %cst : tensor<1x256xi1>, tensor<1x256xf32> loc(#loc13)
    %16 = "tt.reduce"(%15) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc15)), %arg5: f32 loc(callsite(#loc1 at #loc15))):
      %21 = arith.addf %arg4, %arg5 : f32 loc(#loc26)
      tt.reduce.return %21 : f32 loc(#loc23)
    }) : (tensor<1x256xf32>) -> tensor<1xf32> loc(#loc23)
    %17 = tt.expand_dims %16 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc17)
    %18 = tt.extern_elementwise %17 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32> loc(#loc18)
    gpu.barrier loc(#loc19)
    %19 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc20)
    %20 = tt.splat %19 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc20)
    tt.store %20, %18, %2 : tensor<1x1x!tt.ptr<f32>> loc(#loc21)
    tt.return loc(#loc22)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":23:28)
#loc3 = loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":25:21)
#loc4 = loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":26:26)
#loc5 = loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":26:34)
#loc6 = loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":28:21)
#loc7 = loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":31:39)
#loc8 = loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":31:35)
#loc9 = loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":31:30)
#loc10 = loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":31:52)
#loc11 = loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":31:44)
#loc12 = loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":32:18)
#loc13 = loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":34:41)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc17 = loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":35:27)
#loc18 = loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":36:26)
#loc19 = loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":37:4)
#loc20 = loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":38:28)
#loc21 = loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":38:39)
#loc22 = loc("inductor_cache/j7/cj76lvvsl3s34bt4dpwdhchzgdclvn3axvvw7copx5c6s5xnyfau.py":38:4)
#loc23 = loc(callsite(#loc14 at #loc15))
#loc25 = loc(callsite(#loc16 at #loc14))
#loc26 = loc(callsite(#loc25 at #loc15))
