; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_63(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = and i32 %13, 127, !dbg !12
  %17 = or disjoint i32 %16, 128, !dbg !12
  %18 = or disjoint i32 %12, %15, !dbg !13
  %19 = or disjoint i32 %12, %16, !dbg !13
  %20 = or disjoint i32 %12, %17, !dbg !13
  %21 = icmp slt i32 %18, 832, !dbg !14
  %22 = icmp slt i32 %19, 832, !dbg !14
  %23 = icmp slt i32 %20, 832, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %25 = icmp slt i32 %24, 4, !dbg !16
  %.frozen = freeze i32 %18, !dbg !17
  %26 = sdiv i32 %.frozen, 208, !dbg !17
  %27 = mul i32 %26, 208, !dbg !18
  %.decomposed = sub i32 %.frozen, %27, !dbg !18
  %.frozen10 = freeze i32 %19, !dbg !17
  %28 = sdiv i32 %.frozen10, 208, !dbg !17
  %29 = mul i32 %28, 208, !dbg !18
  %.decomposed11 = sub i32 %.frozen10, %29, !dbg !18
  %.frozen12 = freeze i32 %20, !dbg !17
  %30 = sdiv i32 %.frozen12, 208, !dbg !17
  %31 = mul i32 %30, 208, !dbg !18
  %.decomposed13 = sub i32 %.frozen12, %31, !dbg !18
  %32 = mul i32 %24, 208, !dbg !19
  %33 = add i32 %.decomposed, %32, !dbg !20
  %34 = mul i32 %26, 832, !dbg !21
  %35 = add i32 %33, %34, !dbg !22
  %36 = sext i32 %35 to i64, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = and i1 %25, %21, !dbg !24
  %39 = and i1 %25, %22, !dbg !24
  %40 = and i1 %25, %23, !dbg !24
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %38) #4, !dbg !25
  %42 = sext i32 %.decomposed to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !26
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %21) #4, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !28
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %21) #4, !dbg !29
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !29
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !29
  %49 = bitcast i32 %47 to float, !dbg !29
  %50 = bitcast i32 %48 to float, !dbg !29
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !30
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %21) #4, !dbg !31
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !32
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 %21) #4, !dbg !33
  %55 = add i32 %24, 1664, !dbg !34
  %56 = shl nsw i32 %.decomposed11, 2, !dbg !35
  %57 = shl nsw i32 %.decomposed13, 2, !dbg !35
  %58 = add i32 %56, %55, !dbg !36
  %59 = add i32 %57, %55, !dbg !36
  %60 = mul i32 %28, 3328, !dbg !37
  %61 = mul i32 %30, 3328, !dbg !37
  %62 = add i32 %58, %60, !dbg !38
  %63 = add i32 %59, %61, !dbg !38
  %64 = sext i32 %62 to i64, !dbg !39
  %65 = getelementptr float, ptr addrspace(1) %5, i64 %64, !dbg !39
  %66 = sext i32 %63 to i64, !dbg !39
  %67 = getelementptr float, ptr addrspace(1) %5, i64 %66, !dbg !39
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %39) #4, !dbg !40
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %40) #4, !dbg !40
  %70 = fadd float %49, 0x3EE4F8B580000000, !dbg !41
  %71 = fadd float %50, 0x3EE4F8B580000000, !dbg !41
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i = icmp eq i32 %72, 0, !dbg !42
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i = icmp eq i32 %73, 0, !dbg !42
  br i1 %.not.i, label %79, label %74, !dbg !42

74:                                               ; preds = %10
  br i1 %.not1.i, label %77, label %75, !dbg !42

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

79:                                               ; preds = %10
  br i1 %.not1.i, label %82, label %80, !dbg !42

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %75, %77, %80, %82
  %.0.i = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !42
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i5 = icmp eq i32 %84, 0, !dbg !42
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i8 = icmp eq i32 %85, 0, !dbg !42
  br i1 %.not.i5, label %91, label %86, !dbg !42

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %89, label %87, !dbg !42

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !42
  br label %__nv_sqrtf.exit9, !dbg !42

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !42
  br label %__nv_sqrtf.exit9, !dbg !42

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %94, label %92, !dbg !42

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !42
  br label %__nv_sqrtf.exit9, !dbg !42

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !42
  br label %__nv_sqrtf.exit9, !dbg !42

__nv_sqrtf.exit9:                                 ; preds = %87, %89, %92, %94
  %.0.i7 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !42
  %96 = extractvalue { i32, i32 } %41, 1, !dbg !25
  %97 = bitcast i32 %96 to float, !dbg !25
  %98 = extractvalue { i32, i32 } %44, 1, !dbg !27
  %99 = bitcast i32 %98 to float, !dbg !27
  %100 = fsub float %97, %99, !dbg !43
  %101 = extractvalue { i32, i32 } %41, 0, !dbg !25
  %102 = bitcast i32 %101 to float, !dbg !25
  %103 = extractvalue { i32, i32 } %44, 0, !dbg !27
  %104 = bitcast i32 %103 to float, !dbg !27
  %105 = fsub float %102, %104, !dbg !43
  %106 = bitcast i32 %69 to float, !dbg !40
  %107 = bitcast i32 %68 to float, !dbg !40
  %108 = extractvalue { i32, i32 } %54, 1, !dbg !33
  %109 = bitcast i32 %108 to float, !dbg !33
  %110 = extractvalue { i32, i32 } %54, 0, !dbg !33
  %111 = bitcast i32 %110 to float, !dbg !33
  %112 = extractvalue { i32, i32 } %52, 1, !dbg !31
  %113 = bitcast i32 %112 to float, !dbg !31
  %114 = extractvalue { i32, i32 } %52, 0, !dbg !31
  %115 = bitcast i32 %114 to float, !dbg !31
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !44
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #4, !dbg !44
  %118 = fmul float %105, %116, !dbg !45
  %119 = fmul float %100, %117, !dbg !45
  %120 = fmul float %118, %115, !dbg !46
  %121 = fmul float %119, %113, !dbg !46
  %122 = fadd float %120, %111, !dbg !47
  %123 = fadd float %121, %109, !dbg !47
  %124 = fcmp olt float %122, 0.000000e+00, !dbg !48
  %125 = fcmp olt float %123, 0.000000e+00, !dbg !48
  %126 = select i1 %124, float 0.000000e+00, float %122, !dbg !52
  %127 = select i1 %125, float 0.000000e+00, float %123, !dbg !52
  %.idx = shl nuw nsw i32 %15, 3, !dbg !52
  %128 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !52
  %129 = bitcast float %126 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #4, !dbg !52
  %130 = shl nuw nsw i32 %15, 1, !dbg !52
  %131 = or disjoint i32 %130, 2, !dbg !52
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %131, !dbg !52
  %133 = bitcast float %127 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %.idx1 = shl nuw nsw i32 %16, 3, !dbg !52
  %134 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !52
  %135 = load float, ptr addrspace(3) %134, align 8, !dbg !52
  %.idx2 = shl nuw nsw i32 %17, 3, !dbg !52
  %136 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !52
  %137 = load float, ptr addrspace(3) %136, align 8, !dbg !52
  %138 = fadd float %135, %107, !dbg !53
  %139 = fadd float %137, %106, !dbg !53
  %140 = add i32 %56, %24, !dbg !54
  %141 = add i32 %57, %24, !dbg !54
  %142 = mul i32 %28, 1664, !dbg !55
  %143 = mul i32 %30, 1664, !dbg !55
  %144 = add i32 %140, %142, !dbg !56
  %145 = add i32 %141, %143, !dbg !56
  %146 = sext i32 %144 to i64, !dbg !57
  %147 = getelementptr float, ptr addrspace(1) %6, i64 %146, !dbg !57
  %148 = sext i32 %145 to i64, !dbg !57
  %149 = getelementptr float, ptr addrspace(1) %6, i64 %148, !dbg !57
  %150 = bitcast float %135 to i32, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %150, ptr addrspace(1) %147, i1 %39) #4, !dbg !58
  %151 = bitcast float %137 to i32, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %149, i1 %40) #4, !dbg !58
  %152 = getelementptr float, ptr addrspace(1) %7, i64 %36, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !60
  %154 = bitcast float %138 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #4, !dbg !60
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !60
  %156 = bitcast float %139 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #4, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %157 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !60
  %.extract = load i32, ptr addrspace(3) %157, align 8, !dbg !60
  %158 = getelementptr inbounds i8, ptr addrspace(3) %157, i32 4, !dbg !60
  %.extract4 = load i32, ptr addrspace(3) %158, align 4, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract4, ptr addrspace(1) %152, i1 %38) #4, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckx4somylglthd6gee3aeip3astmgdi57uztyf665y2wbaxle7qs.py", directory: "inductor_cache/kx")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_63, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_63, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_63", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_63", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 39, scope: !7)
!20 = !DILocation(line: 31, column: 35, scope: !7)
!21 = !DILocation(line: 31, column: 48, scope: !7)
!22 = !DILocation(line: 31, column: 44, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 61, scope: !7)
!25 = !DILocation(line: 31, column: 53, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 38, scope: !7)
!35 = !DILocation(line: 36, column: 45, scope: !7)
!36 = !DILocation(line: 36, column: 43, scope: !7)
!37 = !DILocation(line: 36, column: 55, scope: !7)
!38 = !DILocation(line: 36, column: 50, scope: !7)
!39 = !DILocation(line: 36, column: 31, scope: !7)
!40 = !DILocation(line: 36, column: 60, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 40, column: 26, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 42, column: 18, scope: !7)
!45 = !DILocation(line: 45, column: 19, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 47, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 49, column: 42, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 50, column: 20, scope: !7)
!54 = !DILocation(line: 51, column: 30, scope: !7)
!55 = !DILocation(line: 51, column: 42, scope: !7)
!56 = !DILocation(line: 51, column: 37, scope: !7)
!57 = !DILocation(line: 51, column: 25, scope: !7)
!58 = !DILocation(line: 51, column: 54, scope: !7)
!59 = !DILocation(line: 52, column: 25, scope: !7)
!60 = !DILocation(line: 52, column: 55, scope: !7)
!61 = !DILocation(line: 52, column: 4, scope: !7)
