; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_96(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 7, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = and i32 %18, 127, !dbg !12
  %20 = or disjoint i32 %17, %19, !dbg !13
  %21 = icmp slt i32 %20, 13824, !dbg !14
  %.frozen = freeze i32 %20, !dbg !15
  %22 = sdiv i32 %.frozen, 4, !dbg !15
  %23 = srem i32 %22, 864, !dbg !16
  %24 = mul i32 %22, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %24, !dbg !17
  %.frozen7 = freeze i32 %20, !dbg !18
  %25 = sdiv i32 %.frozen7, 3456, !dbg !18
  %26 = sext i32 %23 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %8, i64 %26, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %21) #3, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %9, i64 %26, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %21) #3, !dbg !22
  %31 = bitcast i32 %30 to float, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %10, i64 %26, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %21) #3, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %11, i64 %26, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %21) #3, !dbg !26
  %36 = icmp slt i32 %23, 640, !dbg !27
  %37 = mul i32 %25, 3456, !dbg !28
  %srem.decomposed = sub i32 %.frozen7, %37, !dbg !28
  %38 = mul nsw i32 %25, 2560, !dbg !29
  %39 = add nsw i32 %38, %srem.decomposed, !dbg !30
  %40 = sext i32 %39 to i64, !dbg !31
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !31
  %42 = and i1 %21, %36, !dbg !32
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %42, i32 0, i1 %42) #3, !dbg !33
  %44 = and i32 %23, -32, !dbg !34
  %45 = icmp eq i32 %44, 640, !dbg !34
  %46 = shl nsw i32 %23, 2, !dbg !35
  %47 = shl nsw i32 %25, 7, !dbg !36
  %48 = add nsw i32 %47, %.decomposed, !dbg !35
  %49 = add nsw i32 %48, -2560, !dbg !37
  %50 = add nsw i32 %49, %46, !dbg !38
  %51 = sext i32 %50 to i64, !dbg !39
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !39
  %53 = and i1 %21, %45, !dbg !40
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %53, i32 0, i1 %53) #3, !dbg !41
  %55 = icmp eq i32 %44, 672, !dbg !42
  %56 = add nsw i32 %48, -2688, !dbg !43
  %57 = add nsw i32 %56, %46, !dbg !44
  %58 = sext i32 %57 to i64, !dbg !45
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !45
  %60 = and i1 %21, %55, !dbg !46
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %60, i32 0, i1 %60) #3, !dbg !47
  %62 = icmp eq i32 %44, 704, !dbg !48
  %63 = add nsw i32 %48, -2816, !dbg !49
  %64 = add nsw i32 %63, %46, !dbg !50
  %65 = sext i32 %64 to i64, !dbg !51
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %65, !dbg !51
  %67 = and i1 %21, %62, !dbg !52
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %67, i32 0, i1 %67) #3, !dbg !53
  %69 = icmp eq i32 %44, 736, !dbg !54
  %70 = add nsw i32 %48, -2944, !dbg !55
  %71 = add nsw i32 %70, %46, !dbg !56
  %72 = sext i32 %71 to i64, !dbg !57
  %73 = getelementptr float, ptr addrspace(1) %4, i64 %72, !dbg !57
  %74 = and i1 %21, %69, !dbg !58
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %74, i32 0, i1 %74) #3, !dbg !59
  %76 = icmp eq i32 %44, 768, !dbg !60
  %77 = add nsw i32 %48, -3072, !dbg !61
  %78 = add nsw i32 %77, %46, !dbg !62
  %79 = sext i32 %78 to i64, !dbg !63
  %80 = getelementptr float, ptr addrspace(1) %5, i64 %79, !dbg !63
  %81 = and i1 %21, %76, !dbg !64
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %81, i32 0, i1 %81) #3, !dbg !65
  %83 = icmp eq i32 %44, 800, !dbg !66
  %84 = add nsw i32 %48, -3200, !dbg !67
  %85 = add nsw i32 %84, %46, !dbg !68
  %86 = sext i32 %85 to i64, !dbg !69
  %87 = getelementptr float, ptr addrspace(1) %6, i64 %86, !dbg !69
  %88 = and i1 %21, %83, !dbg !70
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %88, i32 0, i1 %88) #3, !dbg !71
  %90 = icmp sgt i32 %23, 831, !dbg !72
  %91 = add nsw i32 %48, -3328, !dbg !73
  %92 = add nsw i32 %91, %46, !dbg !74
  %93 = sext i32 %92 to i64, !dbg !75
  %94 = getelementptr float, ptr addrspace(1) %7, i64 %93, !dbg !75
  %95 = and i1 %21, %90, !dbg !76
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %95, i32 0, i1 %95) #3, !dbg !77
  %97 = fadd float %31, 0x3EE4F8B580000000, !dbg !78
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i = icmp eq i32 %98, 0, !dbg !79
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i = icmp eq i32 %99, 0, !dbg !79
  br i1 %.not.i, label %105, label %100, !dbg !79

100:                                              ; preds = %15
  br i1 %.not1.i, label %103, label %101, !dbg !79

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #3, !dbg !79
  br label %__nv_sqrtf.exit, !dbg !79

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #3, !dbg !79
  br label %__nv_sqrtf.exit, !dbg !79

105:                                              ; preds = %15
  br i1 %.not1.i, label %108, label %106, !dbg !79

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #3, !dbg !79
  br label %__nv_sqrtf.exit, !dbg !79

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #3, !dbg !79
  br label %__nv_sqrtf.exit, !dbg !79

__nv_sqrtf.exit:                                  ; preds = %101, %103, %106, %108
  %.0.i = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !79
  %.v = select i1 %83, i32 %89, i32 %96, !dbg !80
  %.v1 = select i1 %76, i32 %82, i32 %.v, !dbg !81
  %.v2 = select i1 %69, i32 %75, i32 %.v1, !dbg !82
  %.v3 = select i1 %62, i32 %68, i32 %.v2, !dbg !83
  %.v4 = select i1 %55, i32 %61, i32 %.v3, !dbg !84
  %.v5 = select i1 %45, i32 %54, i32 %.v4, !dbg !85
  %.v6 = select i1 %36, i32 %43, i32 %.v5, !dbg !86
  %110 = bitcast i32 %.v6 to float, !dbg !86
  %111 = bitcast i32 %28 to float, !dbg !20
  %112 = fsub float %110, %111, !dbg !87
  %113 = bitcast i32 %35 to float, !dbg !26
  %114 = bitcast i32 %33 to float, !dbg !24
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !88
  %116 = fmul float %112, %115, !dbg !89
  %117 = fmul float %116, %114, !dbg !90
  %118 = fadd float %117, %113, !dbg !91
  %119 = fcmp olt float %118, 0.000000e+00, !dbg !92
  %120 = select i1 %119, float 0.000000e+00, float %118, !dbg !96
  %121 = sext i32 %20 to i64, !dbg !97
  %122 = getelementptr float, ptr addrspace(1) %12, i64 %121, !dbg !97
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %.v6, ptr addrspace(1) %122, i1 %21) #3, !dbg !98
  %123 = getelementptr float, ptr addrspace(1) %13, i64 %121, !dbg !99
  %124 = bitcast float %120 to i32, !dbg !100
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %123, i1 %21) #3, !dbg !100
  ret void, !dbg !101
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7rmcjopowfjlkvuryxxyp3cipyk32r6fwlqgem4qm7hculr6dqr.py", directory: "inductor_cache/7r")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_96, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_96, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_96", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_96", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 32, scope: !7)
!24 = !DILocation(line: 30, column: 37, scope: !7)
!25 = !DILocation(line: 31, column: 32, scope: !7)
!26 = !DILocation(line: 31, column: 37, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 35, scope: !7)
!29 = !DILocation(line: 37, column: 49, scope: !7)
!30 = !DILocation(line: 37, column: 44, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 61, scope: !7)
!33 = !DILocation(line: 37, column: 54, scope: !7)
!34 = !DILocation(line: 41, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 39, scope: !7)
!36 = !DILocation(line: 42, column: 58, scope: !7)
!37 = !DILocation(line: 42, column: 36, scope: !7)
!38 = !DILocation(line: 42, column: 54, scope: !7)
!39 = !DILocation(line: 42, column: 31, scope: !7)
!40 = !DILocation(line: 42, column: 70, scope: !7)
!41 = !DILocation(line: 42, column: 63, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 36, scope: !7)
!44 = !DILocation(line: 47, column: 54, scope: !7)
!45 = !DILocation(line: 47, column: 31, scope: !7)
!46 = !DILocation(line: 47, column: 71, scope: !7)
!47 = !DILocation(line: 47, column: 63, scope: !7)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 52, column: 36, scope: !7)
!50 = !DILocation(line: 52, column: 54, scope: !7)
!51 = !DILocation(line: 52, column: 31, scope: !7)
!52 = !DILocation(line: 52, column: 71, scope: !7)
!53 = !DILocation(line: 52, column: 63, scope: !7)
!54 = !DILocation(line: 56, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 36, scope: !7)
!56 = !DILocation(line: 57, column: 54, scope: !7)
!57 = !DILocation(line: 57, column: 31, scope: !7)
!58 = !DILocation(line: 57, column: 71, scope: !7)
!59 = !DILocation(line: 57, column: 63, scope: !7)
!60 = !DILocation(line: 61, column: 20, scope: !7)
!61 = !DILocation(line: 62, column: 36, scope: !7)
!62 = !DILocation(line: 62, column: 54, scope: !7)
!63 = !DILocation(line: 62, column: 31, scope: !7)
!64 = !DILocation(line: 62, column: 71, scope: !7)
!65 = !DILocation(line: 62, column: 63, scope: !7)
!66 = !DILocation(line: 66, column: 20, scope: !7)
!67 = !DILocation(line: 67, column: 36, scope: !7)
!68 = !DILocation(line: 67, column: 54, scope: !7)
!69 = !DILocation(line: 67, column: 31, scope: !7)
!70 = !DILocation(line: 67, column: 71, scope: !7)
!71 = !DILocation(line: 67, column: 63, scope: !7)
!72 = !DILocation(line: 68, column: 20, scope: !7)
!73 = !DILocation(line: 71, column: 36, scope: !7)
!74 = !DILocation(line: 71, column: 54, scope: !7)
!75 = !DILocation(line: 71, column: 31, scope: !7)
!76 = !DILocation(line: 71, column: 71, scope: !7)
!77 = !DILocation(line: 71, column: 63, scope: !7)
!78 = !DILocation(line: 81, column: 20, scope: !7)
!79 = !DILocation(line: 82, column: 27, scope: !7)
!80 = !DILocation(line: 72, column: 35, scope: !7)
!81 = !DILocation(line: 73, column: 35, scope: !7)
!82 = !DILocation(line: 74, column: 35, scope: !7)
!83 = !DILocation(line: 75, column: 35, scope: !7)
!84 = !DILocation(line: 76, column: 35, scope: !7)
!85 = !DILocation(line: 77, column: 34, scope: !7)
!86 = !DILocation(line: 78, column: 33, scope: !7)
!87 = !DILocation(line: 79, column: 20, scope: !7)
!88 = !DILocation(line: 84, column: 20, scope: !7)
!89 = !DILocation(line: 87, column: 20, scope: !7)
!90 = !DILocation(line: 88, column: 20, scope: !7)
!91 = !DILocation(line: 89, column: 20, scope: !7)
!92 = !DILocation(line: 118, column: 15, scope: !93, inlinedAt: !95)
!93 = distinct !DILexicalBlockFile(scope: !7, file: !94, discriminator: 0)
!94 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!95 = !DILocation(line: 91, column: 42, scope: !7)
!96 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !95)
!97 = !DILocation(line: 92, column: 25, scope: !7)
!98 = !DILocation(line: 92, column: 37, scope: !7)
!99 = !DILocation(line: 93, column: 25, scope: !7)
!100 = !DILocation(line: 93, column: 37, scope: !7)
!101 = !DILocation(line: 93, column: 4, scope: !7)
