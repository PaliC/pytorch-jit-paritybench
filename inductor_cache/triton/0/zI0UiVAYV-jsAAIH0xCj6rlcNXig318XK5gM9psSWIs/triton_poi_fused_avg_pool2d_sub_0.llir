; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 256, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %12 = sdiv i32 %.frozen, 4, !dbg !15
  %13 = mul i32 %12, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = sext i32 %9 to i64, !dbg !17
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !17
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 %11) #1, !dbg !18
  %17 = extractvalue { i32, i32 } %16, 0, !dbg !18
  %18 = extractvalue { i32, i32 } %16, 1, !dbg !18
  %19 = bitcast i32 %17 to float, !dbg !18
  %20 = bitcast i32 %18 to float, !dbg !18
  %21 = add nsw i32 %.decomposed, -1, !dbg !19
  %22 = icmp sgt i32 %.decomposed, 0, !dbg !20
  %23 = add i32 %9, -5, !dbg !21
  %24 = add i32 %9, -4, !dbg !21
  %25 = sext i32 %23 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !22
  %27 = sext i32 %24 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !22
  %29 = icmp sgt i32 %.decomposed, -1, !dbg !23
  %30 = icmp ult i32 %.decomposed, 4, !dbg !24
  %31 = add i32 %9, -3, !dbg !25
  %32 = add i32 %9, -2, !dbg !25
  %33 = sext i32 %31 to i64, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !26
  %35 = sext i32 %32 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !26
  %37 = add i32 %9, -1, !dbg !27
  %38 = sext i32 %37 to i64, !dbg !28
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !28
  %40 = sext i32 %10 to i64, !dbg !28
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !28
  %42 = getelementptr i8, ptr addrspace(1) %41, i64 -4, !dbg !28
  %43 = add i32 %9, 2, !dbg !29
  %44 = sext i32 %43 to i64, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !30
  %46 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !31
  %47 = insertelement <2 x i32> %46, i32 %10, i64 1, !dbg !31
  %48 = srem <2 x i32> %47, splat (i32 4), !dbg !31
  %49 = extractelement <2 x i32> %48, i64 0, !dbg !32
  %50 = add nsw i32 %49, -1, !dbg !33
  %51 = icmp sgt i32 %49, 0, !dbg !34
  %52 = extractelement <2 x i32> %48, i64 1, !dbg !35
  %53 = add nsw i32 %52, -1, !dbg !19
  %54 = icmp sgt i32 %52, 0, !dbg !20
  %55 = and i1 %22, %51, !dbg !36
  %56 = and i1 %54, %51, !dbg !36
  %57 = and i1 %11, %55, !dbg !37
  %58 = and i1 %11, %56, !dbg !37
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %57, i32 0, i1 %57) #1, !dbg !38
  %60 = bitcast i32 %59 to float, !dbg !38
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %58, i32 0, i1 %58) #1, !dbg !38
  %62 = bitcast i32 %61 to float, !dbg !38
  %63 = and i1 %29, %51, !dbg !39
  %64 = and i1 %11, %63, !dbg !40
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %28, i1 %64, i32 0, i1 %64, i32 0, i1 %64) #1, !dbg !41
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !41
  %67 = extractvalue { i32, i32 } %65, 1, !dbg !41
  %68 = bitcast i32 %66 to float, !dbg !41
  %69 = bitcast i32 %67 to float, !dbg !41
  %70 = fadd float %60, %68, !dbg !42
  %71 = fadd float %62, %69, !dbg !42
  %72 = add nsw <2 x i32> %48, splat (i32 1), !dbg !43
  %73 = extractelement <2 x i32> %72, i64 1, !dbg !44
  %74 = icmp ult i32 %73, 4, !dbg !24
  %75 = and i1 %30, %51, !dbg !45
  %76 = and i1 %74, %51, !dbg !45
  %77 = and i1 %11, %75, !dbg !46
  %78 = and i1 %11, %76, !dbg !46
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %77, i32 0, i1 %77) #1, !dbg !47
  %80 = bitcast i32 %79 to float, !dbg !47
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %78, i32 0, i1 %78) #1, !dbg !47
  %82 = bitcast i32 %81 to float, !dbg !47
  %83 = fadd float %70, %80, !dbg !48
  %84 = fadd float %71, %82, !dbg !48
  %85 = icmp sgt i32 %49, -1, !dbg !49
  %86 = and i1 %22, %85, !dbg !50
  %87 = and i1 %54, %85, !dbg !50
  %88 = and i1 %11, %86, !dbg !51
  %89 = and i1 %11, %87, !dbg !51
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %88, i32 0, i1 %88) #1, !dbg !52
  %91 = bitcast i32 %90 to float, !dbg !52
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %89, i32 0, i1 %89) #1, !dbg !52
  %93 = bitcast i32 %92 to float, !dbg !52
  %94 = fadd float %83, %91, !dbg !53
  %95 = fadd float %84, %93, !dbg !53
  %96 = or i32 %49, %.decomposed, !dbg !54
  %97 = icmp sgt i32 %96, -1, !dbg !54
  %98 = and i1 %11, %97, !dbg !55
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %15, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #1, !dbg !56
  %100 = extractvalue { i32, i32 } %99, 0, !dbg !56
  %101 = extractvalue { i32, i32 } %99, 1, !dbg !56
  %102 = bitcast i32 %100 to float, !dbg !56
  %103 = bitcast i32 %101 to float, !dbg !56
  %104 = fadd float %94, %102, !dbg !57
  %105 = fadd float %95, %103, !dbg !57
  %106 = and i1 %30, %85, !dbg !58
  %107 = and i1 %74, %85, !dbg !58
  %108 = and i1 %11, %106, !dbg !59
  %109 = and i1 %11, %107, !dbg !59
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %108, i32 0, i1 %108) #1, !dbg !60
  %111 = bitcast i32 %110 to float, !dbg !60
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %109, i32 0, i1 %109) #1, !dbg !60
  %113 = bitcast i32 %112 to float, !dbg !60
  %114 = fadd float %104, %111, !dbg !61
  %115 = fadd float %105, %113, !dbg !61
  %116 = extractelement <2 x i32> %72, i64 0, !dbg !44
  %117 = icmp ult i32 %116, 4, !dbg !43
  %118 = and i1 %22, %117, !dbg !62
  %119 = and i1 %54, %117, !dbg !62
  %120 = add i32 %9, 3, !dbg !63
  %121 = add i32 %9, 4, !dbg !63
  %122 = sext i32 %120 to i64, !dbg !64
  %123 = getelementptr float, ptr addrspace(1) %1, i64 %122, !dbg !64
  %124 = sext i32 %121 to i64, !dbg !64
  %125 = getelementptr float, ptr addrspace(1) %1, i64 %124, !dbg !64
  %126 = and i1 %11, %118, !dbg !65
  %127 = and i1 %11, %119, !dbg !65
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %126, i32 0, i1 %126) #1, !dbg !66
  %129 = bitcast i32 %128 to float, !dbg !66
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %127, i32 0, i1 %127) #1, !dbg !66
  %131 = bitcast i32 %130 to float, !dbg !66
  %132 = fadd float %114, %129, !dbg !67
  %133 = fadd float %115, %131, !dbg !67
  %134 = and i1 %29, %117, !dbg !68
  %135 = and i1 %11, %134, !dbg !69
  %136 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %125, i1 %135, i32 0, i1 %135, i32 0, i1 %135) #1, !dbg !70
  %137 = extractvalue { i32, i32 } %136, 0, !dbg !70
  %138 = extractvalue { i32, i32 } %136, 1, !dbg !70
  %139 = bitcast i32 %137 to float, !dbg !70
  %140 = bitcast i32 %138 to float, !dbg !70
  %141 = fadd float %132, %139, !dbg !71
  %142 = fadd float %133, %140, !dbg !71
  %143 = or i32 %116, %.decomposed, !dbg !44
  %144 = icmp ult i32 %143, 4, !dbg !44
  %145 = or i32 %116, %73, !dbg !44
  %146 = icmp ult i32 %145, 4, !dbg !44
  %147 = add i32 %9, 5, !dbg !72
  %148 = add i32 %9, 6, !dbg !72
  %149 = sext i32 %147 to i64, !dbg !73
  %150 = getelementptr float, ptr addrspace(1) %1, i64 %149, !dbg !73
  %151 = sext i32 %148 to i64, !dbg !73
  %152 = getelementptr float, ptr addrspace(1) %1, i64 %151, !dbg !73
  %153 = and i1 %11, %144, !dbg !74
  %154 = and i1 %11, %146, !dbg !74
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %150, i1 %153, i32 0, i1 %153) #1, !dbg !75
  %156 = bitcast i32 %155 to float, !dbg !75
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %152, i1 %154, i32 0, i1 %154) #1, !dbg !75
  %158 = bitcast i32 %157 to float, !dbg !75
  %159 = fadd float %141, %156, !dbg !76
  %160 = fadd float %142, %158, !dbg !76
  %161 = icmp sgt i32 %.decomposed, 1, !dbg !35
  %162 = icmp sgt i32 %52, 1, !dbg !35
  %163 = select i1 %161, i32 %21, i32 0, !dbg !77
  %164 = select i1 %162, i32 %53, i32 0, !dbg !77
  %165 = icmp sgt i32 %49, 1, !dbg !78
  %166 = select i1 %165, i32 %50, i32 0, !dbg !79
  %167 = add nsw i32 %.decomposed, 2, !dbg !80
  %168 = add nsw i32 %52, 2, !dbg !80
  %169 = select i1 %161, i32 4, i32 0, !dbg !81
  %170 = icmp slt i32 %.decomposed, 2, !dbg !82
  %171 = select i1 %170, i32 %167, i32 0, !dbg !83
  %172 = select i1 %170, i32 %168, i32 0, !dbg !83
  %173 = add nsw i32 %169, %171, !dbg !84
  %174 = add nsw i32 %169, %172, !dbg !84
  %175 = add nsw i32 %49, 2, !dbg !85
  %176 = select i1 %165, i32 4, i32 0, !dbg !86
  %177 = icmp slt i32 %49, 2, !dbg !32
  %178 = select i1 %177, i32 %175, i32 0, !dbg !87
  %179 = add nsw i32 %176, %178, !dbg !88
  %reass.add = sub nsw i32 %179, %166
  %reass.mul = mul nsw i32 %reass.add, %173
  %reass.add4 = sub nsw i32 %166, %179
  %reass.mul5 = mul nsw i32 %reass.add4, %163
  %180 = add nsw i32 %reass.mul5, %reass.mul, !dbg !89
  %reass.mul3 = mul nsw i32 %reass.add, %174
  %reass.mul7 = mul nsw i32 %reass.add4, %164
  %181 = add nsw i32 %reass.mul7, %reass.mul3, !dbg !89
  %182 = sitofp i32 %180 to float, !dbg !90
  %183 = sitofp i32 %181 to float, !dbg !90
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float %182) #1, !dbg !90
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float %183) #1, !dbg !90
  %186 = fsub float %184, %19, !dbg !91
  %187 = fsub float %185, %20, !dbg !91
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !92
  %189 = bitcast float %186 to i32, !dbg !93
  %190 = bitcast float %187 to i32, !dbg !93
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %189, i32 %190, ptr addrspace(1) %188, i1 %11) #1, !dbg !93
  ret void, !dbg !94
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ce2hldbnnskyxi4kzi32cpmhai2mchkrodywpvwsyvy6rvn3pz4w.py", directory: "inductor_cache/e2")
!4 = !{ptr @triton_poi_fused_avg_pool2d_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_sub_0", linkageName: "triton_poi_fused_avg_pool2d_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 31, scope: !7)
!18 = !DILocation(line: 27, column: 36, scope: !7)
!19 = !DILocation(line: 34, column: 18, scope: !7)
!20 = !DILocation(line: 35, column: 19, scope: !7)
!21 = !DILocation(line: 39, column: 38, scope: !7)
!22 = !DILocation(line: 39, column: 31, scope: !7)
!23 = !DILocation(line: 41, column: 21, scope: !7)
!24 = !DILocation(line: 50, column: 20, scope: !7)
!25 = !DILocation(line: 52, column: 38, scope: !7)
!26 = !DILocation(line: 52, column: 31, scope: !7)
!27 = !DILocation(line: 59, column: 38, scope: !7)
!28 = !DILocation(line: 59, column: 31, scope: !7)
!29 = !DILocation(line: 65, column: 35, scope: !7)
!30 = !DILocation(line: 65, column: 31, scope: !7)
!31 = !DILocation(line: 24, column: 26, scope: !7)
!32 = !DILocation(line: 80, column: 251, scope: !7)
!33 = !DILocation(line: 28, column: 18, scope: !7)
!34 = !DILocation(line: 30, column: 19, scope: !7)
!35 = !DILocation(line: 80, column: 72, scope: !7)
!36 = !DILocation(line: 38, column: 19, scope: !7)
!37 = !DILocation(line: 39, column: 51, scope: !7)
!38 = !DILocation(line: 39, column: 43, scope: !7)
!39 = !DILocation(line: 44, column: 19, scope: !7)
!40 = !DILocation(line: 45, column: 51, scope: !7)
!41 = !DILocation(line: 45, column: 43, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 70, column: 20, scope: !7)
!44 = !DILocation(line: 77, column: 20, scope: !7)
!45 = !DILocation(line: 51, column: 19, scope: !7)
!46 = !DILocation(line: 52, column: 51, scope: !7)
!47 = !DILocation(line: 52, column: 43, scope: !7)
!48 = !DILocation(line: 53, column: 20, scope: !7)
!49 = !DILocation(line: 55, column: 21, scope: !7)
!50 = !DILocation(line: 58, column: 20, scope: !7)
!51 = !DILocation(line: 59, column: 51, scope: !7)
!52 = !DILocation(line: 59, column: 43, scope: !7)
!53 = !DILocation(line: 60, column: 20, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 44, scope: !7)
!56 = !DILocation(line: 62, column: 36, scope: !7)
!57 = !DILocation(line: 63, column: 20, scope: !7)
!58 = !DILocation(line: 64, column: 20, scope: !7)
!59 = !DILocation(line: 65, column: 48, scope: !7)
!60 = !DILocation(line: 65, column: 40, scope: !7)
!61 = !DILocation(line: 66, column: 20, scope: !7)
!62 = !DILocation(line: 71, column: 20, scope: !7)
!63 = !DILocation(line: 72, column: 35, scope: !7)
!64 = !DILocation(line: 72, column: 31, scope: !7)
!65 = !DILocation(line: 72, column: 48, scope: !7)
!66 = !DILocation(line: 72, column: 40, scope: !7)
!67 = !DILocation(line: 73, column: 20, scope: !7)
!68 = !DILocation(line: 74, column: 20, scope: !7)
!69 = !DILocation(line: 75, column: 48, scope: !7)
!70 = !DILocation(line: 75, column: 40, scope: !7)
!71 = !DILocation(line: 76, column: 20, scope: !7)
!72 = !DILocation(line: 78, column: 35, scope: !7)
!73 = !DILocation(line: 78, column: 31, scope: !7)
!74 = !DILocation(line: 78, column: 48, scope: !7)
!75 = !DILocation(line: 78, column: 40, scope: !7)
!76 = !DILocation(line: 79, column: 20, scope: !7)
!77 = !DILocation(line: 80, column: 57, scope: !7)
!78 = !DILocation(line: 80, column: 137, scope: !7)
!79 = !DILocation(line: 80, column: 122, scope: !7)
!80 = !DILocation(line: 80, column: 164, scope: !7)
!81 = !DILocation(line: 80, column: 152, scope: !7)
!82 = !DILocation(line: 80, column: 195, scope: !7)
!83 = !DILocation(line: 80, column: 183, scope: !7)
!84 = !DILocation(line: 80, column: 171, scope: !7)
!85 = !DILocation(line: 80, column: 220, scope: !7)
!86 = !DILocation(line: 80, column: 208, scope: !7)
!87 = !DILocation(line: 80, column: 239, scope: !7)
!88 = !DILocation(line: 80, column: 227, scope: !7)
!89 = !DILocation(line: 80, column: 389, scope: !7)
!90 = !DILocation(line: 81, column: 20, scope: !7)
!91 = !DILocation(line: 82, column: 20, scope: !7)
!92 = !DILocation(line: 83, column: 28, scope: !7)
!93 = !DILocation(line: 83, column: 40, scope: !7)
!94 = !DILocation(line: 83, column: 4, scope: !7)
