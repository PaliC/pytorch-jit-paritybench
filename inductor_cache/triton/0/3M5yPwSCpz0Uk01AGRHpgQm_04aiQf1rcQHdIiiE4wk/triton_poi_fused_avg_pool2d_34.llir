; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_34(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = srem i32 %9, 2048, !dbg !14
  %12 = srem i32 %10, 2048, !dbg !14
  %13 = sdiv i32 %9, 32768, !dbg !15
  %14 = sdiv i32 %10, 32768, !dbg !15
  %15 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !16
  %16 = shufflevector <2 x i32> %15, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !16
  %17 = sdiv <2 x i32> %16, <i32 2048, i32 8192>, !dbg !16
  %18 = srem <2 x i32> %17, splat (i32 4), !dbg !17
  %19 = mul nsw <2 x i32> %18, <i32 4096, i32 36864>, !dbg !18
  %20 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !16
  %21 = shufflevector <2 x i32> %20, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !16
  %22 = sdiv <2 x i32> %21, <i32 2048, i32 8192>, !dbg !16
  %23 = srem <2 x i32> %22, splat (i32 4), !dbg !17
  %24 = mul nsw <2 x i32> %23, <i32 4096, i32 36864>, !dbg !18
  %25 = mul i32 %13, 165888, !dbg !19
  %26 = mul i32 %14, 165888, !dbg !19
  %27 = add i32 %25, %11, !dbg !20
  %28 = extractelement <2 x i32> %19, i64 0, !dbg !21
  %29 = add i32 %27, %28, !dbg !22
  %30 = extractelement <2 x i32> %19, i64 1, !dbg !23
  %31 = add i32 %29, %30, !dbg !24
  %32 = add i32 %26, %12, !dbg !20
  %33 = extractelement <2 x i32> %24, i64 0, !dbg !21
  %34 = add i32 %32, %33, !dbg !22
  %35 = extractelement <2 x i32> %24, i64 1, !dbg !23
  %36 = add i32 %34, %35, !dbg !24
  %37 = sext i32 %31 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = sext i32 %36 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !26
  %46 = bitcast i32 %42 to float, !dbg !26
  %47 = bitcast i32 %43 to float, !dbg !26
  %48 = bitcast i32 %44 to float, !dbg !26
  %49 = bitcast i32 %45 to float, !dbg !26
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %55 = bitcast i32 %51 to float, !dbg !26
  %56 = bitcast i32 %52 to float, !dbg !26
  %57 = bitcast i32 %53 to float, !dbg !26
  %58 = bitcast i32 %54 to float, !dbg !26
  %59 = add i32 %27, 2048, !dbg !27
  %60 = add i32 %59, %28, !dbg !28
  %61 = add i32 %60, %30, !dbg !29
  %62 = add i32 %32, 2048, !dbg !27
  %63 = add i32 %62, %33, !dbg !28
  %64 = add i32 %63, %35, !dbg !29
  %65 = sext i32 %61 to i64, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !30
  %67 = sext i32 %64 to i64, !dbg !30
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !30
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !31
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !31
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !31
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !31
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !31
  %74 = bitcast i32 %70 to float, !dbg !31
  %75 = bitcast i32 %71 to float, !dbg !31
  %76 = bitcast i32 %72 to float, !dbg !31
  %77 = bitcast i32 %73 to float, !dbg !31
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #1, !dbg !31
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !31
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !31
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !31
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !31
  %83 = bitcast i32 %79 to float, !dbg !31
  %84 = bitcast i32 %80 to float, !dbg !31
  %85 = bitcast i32 %81 to float, !dbg !31
  %86 = bitcast i32 %82 to float, !dbg !31
  %87 = add i32 %27, 18432, !dbg !32
  %88 = add i32 %87, %28, !dbg !33
  %89 = add i32 %88, %30, !dbg !34
  %90 = add i32 %32, 18432, !dbg !32
  %91 = add i32 %90, %33, !dbg !33
  %92 = add i32 %91, %35, !dbg !34
  %93 = sext i32 %89 to i64, !dbg !35
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !35
  %95 = sext i32 %92 to i64, !dbg !35
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !35
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !36
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !36
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !36
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !36
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !36
  %102 = bitcast i32 %98 to float, !dbg !36
  %103 = bitcast i32 %99 to float, !dbg !36
  %104 = bitcast i32 %100 to float, !dbg !36
  %105 = bitcast i32 %101 to float, !dbg !36
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !36
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !36
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !36
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !36
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !36
  %111 = bitcast i32 %107 to float, !dbg !36
  %112 = bitcast i32 %108 to float, !dbg !36
  %113 = bitcast i32 %109 to float, !dbg !36
  %114 = bitcast i32 %110 to float, !dbg !36
  %115 = add i32 %27, 20480, !dbg !37
  %116 = add i32 %115, %28, !dbg !21
  %117 = add i32 %116, %30, !dbg !23
  %118 = add i32 %32, 20480, !dbg !37
  %119 = add i32 %118, %33, !dbg !21
  %120 = add i32 %119, %35, !dbg !23
  %121 = sext i32 %117 to i64, !dbg !38
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !38
  %123 = sext i32 %120 to i64, !dbg !38
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !38
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %122, i1 true) #1, !dbg !39
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !39
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !39
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !39
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !39
  %130 = bitcast i32 %126 to float, !dbg !39
  %131 = bitcast i32 %127 to float, !dbg !39
  %132 = bitcast i32 %128 to float, !dbg !39
  %133 = bitcast i32 %129 to float, !dbg !39
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %124, i1 true) #1, !dbg !39
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !39
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !39
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !39
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !39
  %139 = bitcast i32 %135 to float, !dbg !39
  %140 = bitcast i32 %136 to float, !dbg !39
  %141 = bitcast i32 %137 to float, !dbg !39
  %142 = bitcast i32 %138 to float, !dbg !39
  %143 = fadd float %46, %74, !dbg !40
  %144 = fadd float %47, %75, !dbg !40
  %145 = fadd float %48, %76, !dbg !40
  %146 = fadd float %49, %77, !dbg !40
  %147 = fadd float %55, %83, !dbg !40
  %148 = fadd float %56, %84, !dbg !40
  %149 = fadd float %57, %85, !dbg !40
  %150 = fadd float %58, %86, !dbg !40
  %151 = fadd float %143, %102, !dbg !41
  %152 = fadd float %144, %103, !dbg !41
  %153 = fadd float %145, %104, !dbg !41
  %154 = fadd float %146, %105, !dbg !41
  %155 = fadd float %147, %111, !dbg !41
  %156 = fadd float %148, %112, !dbg !41
  %157 = fadd float %149, %113, !dbg !41
  %158 = fadd float %150, %114, !dbg !41
  %159 = fadd float %151, %130, !dbg !42
  %160 = fadd float %152, %131, !dbg !42
  %161 = fadd float %153, %132, !dbg !42
  %162 = fadd float %154, %133, !dbg !42
  %163 = fadd float %155, %139, !dbg !42
  %164 = fadd float %156, %140, !dbg !42
  %165 = fadd float %157, %141, !dbg !42
  %166 = fadd float %158, %142, !dbg !42
  %167 = fmul float %159, 2.500000e-01, !dbg !43
  %168 = fmul float %160, 2.500000e-01, !dbg !43
  %169 = fmul float %161, 2.500000e-01, !dbg !43
  %170 = fmul float %162, 2.500000e-01, !dbg !43
  %171 = fmul float %163, 2.500000e-01, !dbg !43
  %172 = fmul float %164, 2.500000e-01, !dbg !43
  %173 = fmul float %165, 2.500000e-01, !dbg !43
  %174 = fmul float %166, 2.500000e-01, !dbg !43
  %175 = sext i32 %9 to i64, !dbg !44
  %176 = getelementptr float, ptr addrspace(1) %1, i64 %175, !dbg !44
  %177 = sext i32 %10 to i64, !dbg !44
  %178 = getelementptr float, ptr addrspace(1) %1, i64 %177, !dbg !44
  %179 = bitcast float %167 to i32, !dbg !45
  %180 = bitcast float %168 to i32, !dbg !45
  %181 = bitcast float %169 to i32, !dbg !45
  %182 = bitcast float %170 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %179, i32 %180, i32 %181, i32 %182, ptr addrspace(1) %176, i1 true) #1, !dbg !45
  %183 = bitcast float %171 to i32, !dbg !45
  %184 = bitcast float %172 to i32, !dbg !45
  %185 = bitcast float %173 to i32, !dbg !45
  %186 = bitcast float %174 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %183, i32 %184, i32 %185, i32 %186, ptr addrspace(1) %178, i1 true) #1, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clcrt6oqkhrneutnyhvirsa6j6vmgnbtd3uy4nrmwch7cfihoweb.py", directory: "inductor_cache/lc")
!4 = !{ptr @triton_poi_fused_avg_pool2d_34, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_34, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_34", linkageName: "triton_poi_fused_avg_pool2d_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 29, scope: !7)
!18 = !DILocation(line: 29, column: 40, scope: !7)
!19 = !DILocation(line: 29, column: 63, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 53, scope: !7)
!22 = !DILocation(line: 29, column: 45, scope: !7)
!23 = !DILocation(line: 32, column: 64, scope: !7)
!24 = !DILocation(line: 29, column: 56, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 68, scope: !7)
!27 = !DILocation(line: 30, column: 42, scope: !7)
!28 = !DILocation(line: 30, column: 52, scope: !7)
!29 = !DILocation(line: 30, column: 63, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 75, scope: !7)
!32 = !DILocation(line: 31, column: 43, scope: !7)
!33 = !DILocation(line: 31, column: 53, scope: !7)
!34 = !DILocation(line: 31, column: 64, scope: !7)
!35 = !DILocation(line: 31, column: 30, scope: !7)
!36 = !DILocation(line: 31, column: 76, scope: !7)
!37 = !DILocation(line: 32, column: 43, scope: !7)
!38 = !DILocation(line: 32, column: 30, scope: !7)
!39 = !DILocation(line: 32, column: 76, scope: !7)
!40 = !DILocation(line: 33, column: 18, scope: !7)
!41 = !DILocation(line: 34, column: 18, scope: !7)
!42 = !DILocation(line: 35, column: 18, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 38, column: 25, scope: !7)
!45 = !DILocation(line: 38, column: 36, scope: !7)
!46 = !DILocation(line: 38, column: 4, scope: !7)
