; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_mul_sum_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 510, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = srem i32 %10, 512, !dbg !14
  %12 = sdiv i32 %10, 32768, !dbg !15
  %13 = sext i32 %10 to i64, !dbg !16
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !16
  %15 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %14, i1 true) #1, !dbg !17
  %16 = extractvalue { i32, i32 } %15, 0, !dbg !17
  %17 = extractvalue { i32, i32 } %15, 1, !dbg !17
  %18 = bitcast i32 %16 to float, !dbg !17
  %19 = bitcast i32 %17 to float, !dbg !17
  %20 = shl nsw i32 %12, 9, !dbg !18
  %21 = add nsw i32 %20, %11, !dbg !19
  %22 = sext i32 %21 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !20
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !21
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !21
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !21
  %27 = bitcast i32 %25 to float, !dbg !21
  %28 = bitcast i32 %26 to float, !dbg !21
  %29 = getelementptr i8, ptr addrspace(1) %23, i64 8192, !dbg !22
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !23
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !23
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !23
  %33 = bitcast i32 %31 to float, !dbg !23
  %34 = bitcast i32 %32 to float, !dbg !23
  %35 = add i32 %10, 131072, !dbg !24
  %36 = sext i32 %35 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !26
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !26
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !26
  %41 = bitcast i32 %39 to float, !dbg !26
  %42 = bitcast i32 %40 to float, !dbg !26
  %43 = fcmp ogt float %27, %33, !dbg !27
  %44 = fcmp ogt float %28, %34, !dbg !27
  %45 = fcmp uno float %27, 0.000000e+00, !dbg !31
  %46 = fcmp uno float %28, 0.000000e+00, !dbg !31
  %47 = or i1 %45, %43, !dbg !32
  %48 = or i1 %46, %44, !dbg !32
  %49 = select i1 %47, float %27, float %33, !dbg !33
  %50 = select i1 %48, float %28, float %34, !dbg !33
  %51 = fsub float %27, %49, !dbg !34
  %52 = fsub float %28, %50, !dbg !34
  %53 = fmul float %51, 0x3FF7154760000000, !dbg !35
  %54 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %53) #1, !dbg !35
  %55 = fmul float %52, 0x3FF7154760000000, !dbg !35
  %56 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %55) #1, !dbg !35
  %57 = fsub float %33, %49, !dbg !36
  %58 = fsub float %34, %50, !dbg !36
  %59 = fmul float %57, 0x3FF7154760000000, !dbg !37
  %60 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %59) #1, !dbg !37
  %61 = fmul float %58, 0x3FF7154760000000, !dbg !37
  %62 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %61) #1, !dbg !37
  %63 = fadd float %54, %60, !dbg !38
  %64 = fadd float %56, %62, !dbg !38
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float %63) #1, !dbg !39
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float %64) #1, !dbg !39
  %67 = fmul float %65, %18, !dbg !40
  %68 = fmul float %66, %19, !dbg !40
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float %63) #1, !dbg !41
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float %64) #1, !dbg !41
  %71 = fmul float %69, %41, !dbg !42
  %72 = fmul float %70, %42, !dbg !42
  %73 = fadd float %67, %71, !dbg !43
  %74 = fadd float %68, %72, !dbg !43
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !44
  %76 = bitcast float %73 to i32, !dbg !45
  %77 = bitcast float %74 to i32, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %76, i32 %77, ptr addrspace(1) %75, i1 true) #1, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ca5k224fxpqewp3y5nvugpe2zxx3zral3eqlbvwzmdxqshcg57nq.py", directory: "inductor_cache/a5")
!4 = !{ptr @triton_poi_fused__softmax_mul_sum_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_mul_sum_29, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_mul_sum_29", linkageName: "triton_poi_fused__softmax_mul_sum_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 51, scope: !7)
!24 = !DILocation(line: 30, column: 40, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 45, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 31, column: 40, scope: !7)
!31 = !DILocation(line: 120, column: 21, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 120, column: 16, scope: !28, inlinedAt: !30)
!33 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!34 = !DILocation(line: 32, column: 18, scope: !7)
!35 = !DILocation(line: 33, column: 23, scope: !7)
!36 = !DILocation(line: 34, column: 18, scope: !7)
!37 = !DILocation(line: 35, column: 23, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 19, scope: !7)
!41 = !DILocation(line: 39, column: 19, scope: !7)
!42 = !DILocation(line: 40, column: 20, scope: !7)
!43 = !DILocation(line: 41, column: 20, scope: !7)
!44 = !DILocation(line: 42, column: 25, scope: !7)
!45 = !DILocation(line: 42, column: 37, scope: !7)
!46 = !DILocation(line: 42, column: 4, scope: !7)
