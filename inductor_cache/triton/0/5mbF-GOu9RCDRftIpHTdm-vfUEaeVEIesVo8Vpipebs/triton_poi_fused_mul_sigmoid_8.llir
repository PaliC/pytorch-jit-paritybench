; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_mul_sigmoid_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit18 = lshr i32 %8, 6, !dbg !12
  %9 = and i32 %.lobit18, 3, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 12, !dbg !12
  %12 = or disjoint i32 %7, %9, !dbg !13
  %13 = or disjoint i32 %12, 4, !dbg !13
  %14 = or disjoint i32 %12, 8, !dbg !13
  %15 = or disjoint i32 %12, 12, !dbg !13
  %16 = or disjoint i32 %7, %11, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %18 = shl i32 %17, 8, !dbg !15
  %19 = and i32 %10, 252, !dbg !16
  %20 = lshr i32 %8, 2, !dbg !16
  %21 = and i32 %20, 15, !dbg !16
  %22 = lshr i32 %8, 2, !dbg !16
  %23 = and i32 %22, 16, !dbg !16
  %24 = lshr i32 %8, 2, !dbg !16
  %25 = and i32 %24, 32, !dbg !16
  %26 = or disjoint i32 %23, %21, !dbg !16
  %27 = or disjoint i32 %26, %25, !dbg !16
  %28 = or disjoint i32 %27, 64, !dbg !16
  %29 = or disjoint i32 %27, 128, !dbg !16
  %30 = or disjoint i32 %27, 192, !dbg !16
  %31 = or disjoint i32 %18, %19, !dbg !17
  %32 = or disjoint i32 %18, %27, !dbg !17
  %33 = or disjoint i32 %18, %28, !dbg !17
  %34 = or disjoint i32 %18, %29, !dbg !17
  %35 = or disjoint i32 %18, %30, !dbg !17
  %36 = sdiv i32 %12, 512, !dbg !18
  %37 = sdiv i32 %13, 512, !dbg !18
  %38 = sdiv i32 %14, 512, !dbg !18
  %39 = sdiv i32 %15, 512, !dbg !18
  %.frozen = freeze i32 %16, !dbg !18
  %40 = sdiv i32 %.frozen, 512, !dbg !18
  %41 = mul i32 %40, 512, !dbg !19
  %.decomposed = sub i32 %.frozen, %41, !dbg !19
  %42 = shl i32 %36, 12, !dbg !20
  %43 = shl i32 %37, 12, !dbg !20
  %44 = shl i32 %38, 12, !dbg !20
  %45 = shl i32 %39, 12, !dbg !20
  %46 = add i32 %42, %31, !dbg !21
  %47 = add i32 %31, %43, !dbg !21
  %48 = add i32 %31, %44, !dbg !21
  %49 = add i32 %31, %45, !dbg !21
  %50 = sext i32 %46 to i64, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !22
  %52 = sext i32 %47 to i64, !dbg !22
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !22
  %54 = sext i32 %48 to i64, !dbg !22
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !22
  %56 = sext i32 %49 to i64, !dbg !22
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !22
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #2, !dbg !23
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !23
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !23
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !23
  %63 = bitcast i32 %59 to float, !dbg !23
  %64 = bitcast i32 %60 to float, !dbg !23
  %65 = bitcast i32 %61 to float, !dbg !23
  %66 = bitcast i32 %62 to float, !dbg !23
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #2, !dbg !23
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !23
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !23
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !23
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !23
  %72 = bitcast i32 %68 to float, !dbg !23
  %73 = bitcast i32 %69 to float, !dbg !23
  %74 = bitcast i32 %70 to float, !dbg !23
  %75 = bitcast i32 %71 to float, !dbg !23
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #2, !dbg !23
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !23
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !23
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !23
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !23
  %81 = bitcast i32 %77 to float, !dbg !23
  %82 = bitcast i32 %78 to float, !dbg !23
  %83 = bitcast i32 %79 to float, !dbg !23
  %84 = bitcast i32 %80 to float, !dbg !23
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #2, !dbg !23
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !23
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !23
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !23
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !23
  %90 = bitcast i32 %86 to float, !dbg !23
  %91 = bitcast i32 %87 to float, !dbg !23
  %92 = bitcast i32 %88 to float, !dbg !23
  %93 = bitcast i32 %89 to float, !dbg !23
  %94 = shl i32 %32, 9, !dbg !24
  %95 = shl i32 %33, 9, !dbg !24
  %96 = shl i32 %34, 9, !dbg !24
  %97 = shl i32 %35, 9, !dbg !24
  %98 = shl i32 %40, 21, !dbg !25
  %99 = add i32 %98, %.decomposed, !dbg !26
  %100 = add i32 %99, %94, !dbg !27
  %101 = add i32 %99, %95, !dbg !27
  %102 = add i32 %99, %96, !dbg !27
  %103 = add i32 %99, %97, !dbg !27
  %104 = sext i32 %100 to i64, !dbg !28
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !28
  %106 = sext i32 %101 to i64, !dbg !28
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !28
  %108 = sext i32 %102 to i64, !dbg !28
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !28
  %110 = sext i32 %103 to i64, !dbg !28
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !28
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 true) #2, !dbg !29
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !29
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !29
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !29
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !29
  %117 = bitcast i32 %113 to float, !dbg !29
  %118 = bitcast i32 %114 to float, !dbg !29
  %119 = bitcast i32 %115 to float, !dbg !29
  %120 = bitcast i32 %116 to float, !dbg !29
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 true) #2, !dbg !29
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !29
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !29
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !29
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !29
  %126 = bitcast i32 %122 to float, !dbg !29
  %127 = bitcast i32 %123 to float, !dbg !29
  %128 = bitcast i32 %124 to float, !dbg !29
  %129 = bitcast i32 %125 to float, !dbg !29
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 true) #2, !dbg !29
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !29
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !29
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !29
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !29
  %135 = bitcast i32 %131 to float, !dbg !29
  %136 = bitcast i32 %132 to float, !dbg !29
  %137 = bitcast i32 %133 to float, !dbg !29
  %138 = bitcast i32 %134 to float, !dbg !29
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 true) #2, !dbg !29
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !29
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !29
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !29
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !29
  %144 = bitcast i32 %140 to float, !dbg !29
  %145 = bitcast i32 %141 to float, !dbg !29
  %146 = bitcast i32 %142 to float, !dbg !29
  %147 = bitcast i32 %143 to float, !dbg !29
  %148 = fsub float 0.000000e+00, %63, !dbg !30
  %149 = fsub float 0.000000e+00, %64, !dbg !30
  %150 = fsub float 0.000000e+00, %65, !dbg !30
  %151 = fsub float 0.000000e+00, %66, !dbg !30
  %152 = fsub float 0.000000e+00, %72, !dbg !30
  %153 = fsub float 0.000000e+00, %73, !dbg !30
  %154 = fsub float 0.000000e+00, %74, !dbg !30
  %155 = fsub float 0.000000e+00, %75, !dbg !30
  %156 = fsub float 0.000000e+00, %81, !dbg !30
  %157 = fsub float 0.000000e+00, %82, !dbg !30
  %158 = fsub float 0.000000e+00, %83, !dbg !30
  %159 = fsub float 0.000000e+00, %84, !dbg !30
  %160 = fsub float 0.000000e+00, %90, !dbg !30
  %161 = fsub float 0.000000e+00, %91, !dbg !30
  %162 = fsub float 0.000000e+00, %92, !dbg !30
  %163 = fsub float 0.000000e+00, %93, !dbg !30
  %164 = fmul float %148, 0x3FF7154760000000, !dbg !34
  %165 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %164) #2, !dbg !34
  %166 = fmul float %149, 0x3FF7154760000000, !dbg !34
  %167 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %166) #2, !dbg !34
  %168 = fmul float %150, 0x3FF7154760000000, !dbg !34
  %169 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %168) #2, !dbg !34
  %170 = fmul float %151, 0x3FF7154760000000, !dbg !34
  %171 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %170) #2, !dbg !34
  %172 = fmul float %152, 0x3FF7154760000000, !dbg !34
  %173 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %172) #2, !dbg !34
  %174 = fmul float %153, 0x3FF7154760000000, !dbg !34
  %175 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %174) #2, !dbg !34
  %176 = fmul float %154, 0x3FF7154760000000, !dbg !34
  %177 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %176) #2, !dbg !34
  %178 = fmul float %155, 0x3FF7154760000000, !dbg !34
  %179 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %178) #2, !dbg !34
  %180 = fmul float %156, 0x3FF7154760000000, !dbg !34
  %181 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %180) #2, !dbg !34
  %182 = fmul float %157, 0x3FF7154760000000, !dbg !34
  %183 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %182) #2, !dbg !34
  %184 = fmul float %158, 0x3FF7154760000000, !dbg !34
  %185 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %184) #2, !dbg !34
  %186 = fmul float %159, 0x3FF7154760000000, !dbg !34
  %187 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %186) #2, !dbg !34
  %188 = fmul float %160, 0x3FF7154760000000, !dbg !34
  %189 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %188) #2, !dbg !34
  %190 = fmul float %161, 0x3FF7154760000000, !dbg !34
  %191 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %190) #2, !dbg !34
  %192 = fmul float %162, 0x3FF7154760000000, !dbg !34
  %193 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %192) #2, !dbg !34
  %194 = fmul float %163, 0x3FF7154760000000, !dbg !34
  %195 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %194) #2, !dbg !34
  %196 = fadd float %165, 1.000000e+00, !dbg !35
  %197 = fadd float %167, 1.000000e+00, !dbg !35
  %198 = fadd float %169, 1.000000e+00, !dbg !35
  %199 = fadd float %171, 1.000000e+00, !dbg !35
  %200 = fadd float %173, 1.000000e+00, !dbg !35
  %201 = fadd float %175, 1.000000e+00, !dbg !35
  %202 = fadd float %177, 1.000000e+00, !dbg !35
  %203 = fadd float %179, 1.000000e+00, !dbg !35
  %204 = fadd float %181, 1.000000e+00, !dbg !35
  %205 = fadd float %183, 1.000000e+00, !dbg !35
  %206 = fadd float %185, 1.000000e+00, !dbg !35
  %207 = fadd float %187, 1.000000e+00, !dbg !35
  %208 = fadd float %189, 1.000000e+00, !dbg !35
  %209 = fadd float %191, 1.000000e+00, !dbg !35
  %210 = fadd float %193, 1.000000e+00, !dbg !35
  %211 = fadd float %195, 1.000000e+00, !dbg !35
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %196) #2, !dbg !36
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %197) #2, !dbg !36
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %198) #2, !dbg !36
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %199) #2, !dbg !36
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %200) #2, !dbg !36
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %201) #2, !dbg !36
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %202) #2, !dbg !36
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %203) #2, !dbg !36
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %204) #2, !dbg !36
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %205) #2, !dbg !36
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %206) #2, !dbg !36
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %207) #2, !dbg !36
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %208) #2, !dbg !36
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %209) #2, !dbg !36
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %210) #2, !dbg !36
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %211) #2, !dbg !36
  %228 = shl i32 %8, 6, !dbg !36
  %229 = and i32 %228, 4032, !dbg !36
  %230 = or disjoint i32 %9, %229, !dbg !36
  %231 = and i32 %10, 1020, !dbg !36
  %232 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %229, !dbg !36
  %233 = getelementptr inbounds float, ptr addrspace(3) %232, i32 %230, !dbg !36
  %234 = bitcast float %212 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #2, !dbg !36
  %235 = or disjoint i32 %230, 16, !dbg !36
  %236 = lshr i32 %235, 2, !dbg !36
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %236, !dbg !36
  %238 = getelementptr inbounds float, ptr addrspace(3) %237, i32 %235, !dbg !36
  %239 = bitcast float %213 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #2, !dbg !36
  %240 = or disjoint i32 %230, 32, !dbg !36
  %241 = lshr i32 %240, 2, !dbg !36
  %242 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %241, !dbg !36
  %243 = getelementptr inbounds float, ptr addrspace(3) %242, i32 %240, !dbg !36
  %244 = bitcast float %214 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 true) #2, !dbg !36
  %245 = or disjoint i32 %230, 48, !dbg !36
  %246 = lshr i32 %245, 2, !dbg !36
  %247 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %246, !dbg !36
  %248 = getelementptr inbounds float, ptr addrspace(3) %247, i32 %245, !dbg !36
  %249 = bitcast float %215 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 true) #2, !dbg !36
  %250 = or disjoint i32 %230, 4, !dbg !36
  %251 = getelementptr inbounds float, ptr addrspace(3) %232, i32 %250, !dbg !36
  %252 = bitcast float %216 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %252, i1 true) #2, !dbg !36
  %253 = or disjoint i32 %230, 20, !dbg !36
  %254 = lshr i32 %253, 2, !dbg !36
  %255 = and i32 %254, 1012, !dbg !36
  %256 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %255, !dbg !36
  %257 = getelementptr inbounds float, ptr addrspace(3) %256, i32 %253, !dbg !36
  %258 = bitcast float %217 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %258, i1 true) #2, !dbg !36
  %259 = or disjoint i32 %230, 36, !dbg !36
  %260 = lshr i32 %259, 2, !dbg !36
  %261 = and i32 %260, 1016, !dbg !36
  %262 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %261, !dbg !36
  %263 = getelementptr inbounds float, ptr addrspace(3) %262, i32 %259, !dbg !36
  %264 = bitcast float %218 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #2, !dbg !36
  %265 = or disjoint i32 %230, 52, !dbg !36
  %266 = lshr i32 %265, 2, !dbg !36
  %267 = and i32 %266, 1020, !dbg !36
  %268 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %267, !dbg !36
  %269 = getelementptr inbounds float, ptr addrspace(3) %268, i32 %265, !dbg !36
  %270 = bitcast float %219 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #2, !dbg !36
  %271 = or disjoint i32 %230, 8, !dbg !36
  %272 = getelementptr inbounds float, ptr addrspace(3) %232, i32 %271, !dbg !36
  %273 = bitcast float %220 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %273, i1 true) #2, !dbg !36
  %274 = or disjoint i32 %230, 24, !dbg !36
  %275 = lshr i32 %274, 2, !dbg !36
  %276 = and i32 %275, 1012, !dbg !36
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %276, !dbg !36
  %278 = getelementptr inbounds float, ptr addrspace(3) %277, i32 %274, !dbg !36
  %279 = bitcast float %221 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 true) #2, !dbg !36
  %280 = or disjoint i32 %230, 40, !dbg !36
  %281 = lshr i32 %280, 2, !dbg !36
  %282 = and i32 %281, 1016, !dbg !36
  %283 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %282, !dbg !36
  %284 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %280, !dbg !36
  %285 = bitcast float %222 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 true) #2, !dbg !36
  %286 = or disjoint i32 %230, 56, !dbg !36
  %287 = lshr i32 %286, 2, !dbg !36
  %288 = and i32 %287, 1020, !dbg !36
  %289 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %288, !dbg !36
  %290 = getelementptr inbounds float, ptr addrspace(3) %289, i32 %286, !dbg !36
  %291 = bitcast float %223 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 true) #2, !dbg !36
  %292 = or disjoint i32 %230, 12, !dbg !36
  %293 = getelementptr inbounds float, ptr addrspace(3) %232, i32 %292, !dbg !36
  %294 = bitcast float %224 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %294, i1 true) #2, !dbg !36
  %295 = or disjoint i32 %230, 28, !dbg !36
  %296 = lshr i32 %295, 2, !dbg !36
  %297 = and i32 %296, 1012, !dbg !36
  %298 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %297, !dbg !36
  %299 = getelementptr inbounds float, ptr addrspace(3) %298, i32 %295, !dbg !36
  %300 = bitcast float %225 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %300, i1 true) #2, !dbg !36
  %301 = or disjoint i32 %230, 44, !dbg !36
  %302 = lshr i32 %301, 2, !dbg !36
  %303 = and i32 %302, 1016, !dbg !36
  %304 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %303, !dbg !36
  %305 = getelementptr inbounds float, ptr addrspace(3) %304, i32 %301, !dbg !36
  %306 = bitcast float %226 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %306, i1 true) #2, !dbg !36
  %307 = or disjoint i32 %230, 60, !dbg !36
  %308 = lshr i32 %307, 2, !dbg !36
  %309 = and i32 %308, 1020, !dbg !36
  %310 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %309, !dbg !36
  %311 = getelementptr inbounds float, ptr addrspace(3) %310, i32 %307, !dbg !36
  %312 = bitcast float %227 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %313 = and i32 %8, 252, !dbg !36
  %314 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %313, !dbg !36
  %315 = getelementptr inbounds float, ptr addrspace(3) %314, i32 %231, !dbg !36
  %316 = load float, ptr addrspace(3) %315, align 16, !dbg !36
  %317 = getelementptr inbounds i8, ptr addrspace(3) %315, i32 4, !dbg !36
  %318 = load float, ptr addrspace(3) %317, align 4, !dbg !36
  %319 = getelementptr inbounds i8, ptr addrspace(3) %315, i32 8, !dbg !36
  %320 = load float, ptr addrspace(3) %319, align 8, !dbg !36
  %321 = getelementptr inbounds i8, ptr addrspace(3) %315, i32 12, !dbg !36
  %322 = load float, ptr addrspace(3) %321, align 4, !dbg !36
  %323 = or disjoint i32 %231, 1024, !dbg !36
  %324 = lshr exact i32 %323, 2, !dbg !36
  %325 = and i32 %324, 508, !dbg !36
  %326 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %325, !dbg !36
  %327 = getelementptr inbounds float, ptr addrspace(3) %326, i32 %323, !dbg !36
  %328 = load float, ptr addrspace(3) %327, align 16, !dbg !36
  %329 = getelementptr inbounds i8, ptr addrspace(3) %327, i32 4, !dbg !36
  %330 = load float, ptr addrspace(3) %329, align 4, !dbg !36
  %331 = getelementptr inbounds i8, ptr addrspace(3) %327, i32 8, !dbg !36
  %332 = load float, ptr addrspace(3) %331, align 8, !dbg !36
  %333 = getelementptr inbounds i8, ptr addrspace(3) %327, i32 12, !dbg !36
  %334 = load float, ptr addrspace(3) %333, align 4, !dbg !36
  %335 = or disjoint i32 %231, 2048, !dbg !36
  %336 = lshr exact i32 %335, 2, !dbg !36
  %337 = and i32 %336, 764, !dbg !36
  %338 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %337, !dbg !36
  %339 = getelementptr inbounds float, ptr addrspace(3) %338, i32 %335, !dbg !36
  %340 = load float, ptr addrspace(3) %339, align 16, !dbg !36
  %341 = getelementptr inbounds i8, ptr addrspace(3) %339, i32 4, !dbg !36
  %342 = load float, ptr addrspace(3) %341, align 4, !dbg !36
  %343 = getelementptr inbounds i8, ptr addrspace(3) %339, i32 8, !dbg !36
  %344 = load float, ptr addrspace(3) %343, align 8, !dbg !36
  %345 = getelementptr inbounds i8, ptr addrspace(3) %339, i32 12, !dbg !36
  %346 = load float, ptr addrspace(3) %345, align 4, !dbg !36
  %347 = or disjoint i32 %231, 3072, !dbg !36
  %348 = lshr exact i32 %347, 2, !dbg !36
  %349 = and i32 %348, 1020, !dbg !36
  %350 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %349, !dbg !36
  %351 = getelementptr inbounds float, ptr addrspace(3) %350, i32 %347, !dbg !36
  %352 = load float, ptr addrspace(3) %351, align 16, !dbg !36
  %353 = getelementptr inbounds i8, ptr addrspace(3) %351, i32 4, !dbg !36
  %354 = load float, ptr addrspace(3) %353, align 4, !dbg !36
  %355 = getelementptr inbounds i8, ptr addrspace(3) %351, i32 8, !dbg !36
  %356 = load float, ptr addrspace(3) %355, align 8, !dbg !36
  %357 = getelementptr inbounds i8, ptr addrspace(3) %351, i32 12, !dbg !36
  %358 = load float, ptr addrspace(3) %357, align 4, !dbg !36
  %359 = fmul float %316, %117, !dbg !37
  %360 = fmul float %318, %118, !dbg !37
  %361 = fmul float %320, %119, !dbg !37
  %362 = fmul float %322, %120, !dbg !37
  %363 = fmul float %328, %126, !dbg !37
  %364 = fmul float %330, %127, !dbg !37
  %365 = fmul float %332, %128, !dbg !37
  %366 = fmul float %334, %129, !dbg !37
  %367 = fmul float %340, %135, !dbg !37
  %368 = fmul float %342, %136, !dbg !37
  %369 = fmul float %344, %137, !dbg !37
  %370 = fmul float %346, %138, !dbg !37
  %371 = fmul float %352, %144, !dbg !37
  %372 = fmul float %354, %145, !dbg !37
  %373 = fmul float %356, %146, !dbg !37
  %374 = fmul float %358, %147, !dbg !37
  %375 = shl i32 %12, 12, !dbg !38
  %376 = shl i32 %13, 12, !dbg !38
  %377 = shl i32 %14, 12, !dbg !38
  %378 = shl i32 %15, 12, !dbg !38
  %379 = add i32 %31, %375, !dbg !39
  %380 = add i32 %31, %376, !dbg !39
  %381 = add i32 %31, %377, !dbg !39
  %382 = add i32 %31, %378, !dbg !39
  %383 = sext i32 %379 to i64, !dbg !40
  %384 = getelementptr float, ptr addrspace(1) %2, i64 %383, !dbg !40
  %385 = sext i32 %380 to i64, !dbg !40
  %386 = getelementptr float, ptr addrspace(1) %2, i64 %385, !dbg !40
  %387 = sext i32 %381 to i64, !dbg !40
  %388 = getelementptr float, ptr addrspace(1) %2, i64 %387, !dbg !40
  %389 = sext i32 %382 to i64, !dbg !40
  %390 = getelementptr float, ptr addrspace(1) %2, i64 %389, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %391 = shl i32 %8, 10, !dbg !41
  %392 = and i32 %391, 3072, !dbg !41
  %393 = or disjoint i32 %27, %392, !dbg !41
  %394 = lshr exact i32 %392, 6, !dbg !41
  %395 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %394, !dbg !41
  %396 = getelementptr float, ptr addrspace(3) %395, i32 %393, !dbg !41
  %397 = bitcast float %359 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %396, <1 x i32> %397, i1 true) #2, !dbg !41
  %398 = or disjoint i32 %393, 256, !dbg !41
  %399 = lshr i32 %398, 8, !dbg !41
  %400 = getelementptr float, ptr addrspace(3) @global_smem, i32 %399, !dbg !41
  %401 = getelementptr float, ptr addrspace(3) %400, i32 %398, !dbg !41
  %402 = bitcast float %360 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %401, <1 x i32> %402, i1 true) #2, !dbg !41
  %403 = or disjoint i32 %393, 512, !dbg !41
  %404 = lshr i32 %403, 8, !dbg !41
  %405 = getelementptr float, ptr addrspace(3) @global_smem, i32 %404, !dbg !41
  %406 = getelementptr float, ptr addrspace(3) %405, i32 %403, !dbg !41
  %407 = bitcast float %361 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %406, <1 x i32> %407, i1 true) #2, !dbg !41
  %408 = or disjoint i32 %393, 768, !dbg !41
  %409 = lshr i32 %408, 8, !dbg !41
  %410 = getelementptr float, ptr addrspace(3) @global_smem, i32 %409, !dbg !41
  %411 = getelementptr float, ptr addrspace(3) %410, i32 %408, !dbg !41
  %412 = bitcast float %362 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %412, i1 true) #2, !dbg !41
  %413 = or disjoint i32 %393, 64, !dbg !41
  %414 = getelementptr float, ptr addrspace(3) %395, i32 %413, !dbg !41
  %415 = bitcast float %363 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %415, i1 true) #2, !dbg !41
  %416 = or disjoint i32 %393, 320, !dbg !41
  %417 = lshr i32 %416, 8, !dbg !41
  %418 = getelementptr float, ptr addrspace(3) @global_smem, i32 %417, !dbg !41
  %419 = getelementptr float, ptr addrspace(3) %418, i32 %416, !dbg !41
  %420 = bitcast float %364 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %419, <1 x i32> %420, i1 true) #2, !dbg !41
  %421 = or disjoint i32 %393, 576, !dbg !41
  %422 = lshr i32 %421, 8, !dbg !41
  %423 = getelementptr float, ptr addrspace(3) @global_smem, i32 %422, !dbg !41
  %424 = getelementptr float, ptr addrspace(3) %423, i32 %421, !dbg !41
  %425 = bitcast float %365 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %424, <1 x i32> %425, i1 true) #2, !dbg !41
  %426 = or disjoint i32 %393, 832, !dbg !41
  %427 = lshr i32 %426, 8, !dbg !41
  %428 = getelementptr float, ptr addrspace(3) @global_smem, i32 %427, !dbg !41
  %429 = getelementptr float, ptr addrspace(3) %428, i32 %426, !dbg !41
  %430 = bitcast float %366 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %429, <1 x i32> %430, i1 true) #2, !dbg !41
  %431 = or disjoint i32 %393, 128, !dbg !41
  %432 = getelementptr float, ptr addrspace(3) %395, i32 %431, !dbg !41
  %433 = bitcast float %367 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %432, <1 x i32> %433, i1 true) #2, !dbg !41
  %434 = or disjoint i32 %393, 384, !dbg !41
  %435 = lshr i32 %434, 8, !dbg !41
  %436 = getelementptr float, ptr addrspace(3) @global_smem, i32 %435, !dbg !41
  %437 = getelementptr float, ptr addrspace(3) %436, i32 %434, !dbg !41
  %438 = bitcast float %368 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %438, i1 true) #2, !dbg !41
  %439 = or disjoint i32 %393, 640, !dbg !41
  %440 = lshr i32 %439, 8, !dbg !41
  %441 = getelementptr float, ptr addrspace(3) @global_smem, i32 %440, !dbg !41
  %442 = getelementptr float, ptr addrspace(3) %441, i32 %439, !dbg !41
  %443 = bitcast float %369 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %443, i1 true) #2, !dbg !41
  %444 = or disjoint i32 %393, 896, !dbg !41
  %445 = lshr i32 %444, 8, !dbg !41
  %446 = getelementptr float, ptr addrspace(3) @global_smem, i32 %445, !dbg !41
  %447 = getelementptr float, ptr addrspace(3) %446, i32 %444, !dbg !41
  %448 = bitcast float %370 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, <1 x i32> %448, i1 true) #2, !dbg !41
  %449 = or disjoint i32 %393, 192, !dbg !41
  %450 = getelementptr float, ptr addrspace(3) %395, i32 %449, !dbg !41
  %451 = bitcast float %371 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %450, <1 x i32> %451, i1 true) #2, !dbg !41
  %452 = or disjoint i32 %393, 448, !dbg !41
  %453 = lshr i32 %452, 8, !dbg !41
  %454 = getelementptr float, ptr addrspace(3) @global_smem, i32 %453, !dbg !41
  %455 = getelementptr float, ptr addrspace(3) %454, i32 %452, !dbg !41
  %456 = bitcast float %372 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %455, <1 x i32> %456, i1 true) #2, !dbg !41
  %457 = or disjoint i32 %393, 704, !dbg !41
  %458 = lshr i32 %457, 8, !dbg !41
  %459 = getelementptr float, ptr addrspace(3) @global_smem, i32 %458, !dbg !41
  %460 = getelementptr float, ptr addrspace(3) %459, i32 %457, !dbg !41
  %461 = bitcast float %373 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %460, <1 x i32> %461, i1 true) #2, !dbg !41
  %462 = or disjoint i32 %393, 960, !dbg !41
  %463 = lshr i32 %462, 8, !dbg !41
  %464 = getelementptr float, ptr addrspace(3) @global_smem, i32 %463, !dbg !41
  %465 = getelementptr float, ptr addrspace(3) %464, i32 %462, !dbg !41
  %466 = bitcast float %374 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %465, <1 x i32> %466, i1 true) #2, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %467 = lshr i32 %231, 8, !dbg !41
  %468 = or disjoint i32 %467, %231, !dbg !41
  %469 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %468, !dbg !41
  %470 = load i32, ptr addrspace(3) %469, align 4, !dbg !41
  %471 = or disjoint i32 %231, 1, !dbg !41
  %472 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %467, !dbg !41
  %473 = getelementptr inbounds float, ptr addrspace(3) %472, i32 %471, !dbg !41
  %474 = load i32, ptr addrspace(3) %473, align 4, !dbg !41
  %475 = or disjoint i32 %231, 2, !dbg !41
  %476 = getelementptr inbounds float, ptr addrspace(3) %472, i32 %475, !dbg !41
  %477 = load i32, ptr addrspace(3) %476, align 4, !dbg !41
  %478 = or disjoint i32 %231, 3, !dbg !41
  %479 = getelementptr inbounds float, ptr addrspace(3) %472, i32 %478, !dbg !41
  %480 = load i32, ptr addrspace(3) %479, align 4, !dbg !41
  %481 = lshr i32 %323, 8, !dbg !41
  %482 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %481, !dbg !41
  %483 = getelementptr inbounds float, ptr addrspace(3) %482, i32 %323, !dbg !41
  %484 = load i32, ptr addrspace(3) %483, align 4, !dbg !41
  %485 = or disjoint i32 %231, 1025, !dbg !41
  %486 = lshr i32 %485, 8, !dbg !41
  %487 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %486, !dbg !41
  %488 = getelementptr inbounds float, ptr addrspace(3) %487, i32 %485, !dbg !41
  %489 = load i32, ptr addrspace(3) %488, align 4, !dbg !41
  %490 = or disjoint i32 %231, 1026, !dbg !41
  %491 = lshr i32 %490, 8, !dbg !41
  %492 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %491, !dbg !41
  %493 = getelementptr inbounds float, ptr addrspace(3) %492, i32 %490, !dbg !41
  %494 = load i32, ptr addrspace(3) %493, align 4, !dbg !41
  %495 = or disjoint i32 %231, 1027, !dbg !41
  %496 = lshr i32 %495, 8, !dbg !41
  %497 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %496, !dbg !41
  %498 = getelementptr inbounds float, ptr addrspace(3) %497, i32 %495, !dbg !41
  %499 = load i32, ptr addrspace(3) %498, align 4, !dbg !41
  %500 = lshr i32 %335, 8, !dbg !41
  %501 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %500, !dbg !41
  %502 = getelementptr inbounds float, ptr addrspace(3) %501, i32 %335, !dbg !41
  %503 = load i32, ptr addrspace(3) %502, align 4, !dbg !41
  %504 = or disjoint i32 %231, 2049, !dbg !41
  %505 = lshr i32 %504, 8, !dbg !41
  %506 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %505, !dbg !41
  %507 = getelementptr inbounds float, ptr addrspace(3) %506, i32 %504, !dbg !41
  %508 = load i32, ptr addrspace(3) %507, align 4, !dbg !41
  %509 = or disjoint i32 %231, 2050, !dbg !41
  %510 = lshr i32 %509, 8, !dbg !41
  %511 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %510, !dbg !41
  %512 = getelementptr inbounds float, ptr addrspace(3) %511, i32 %509, !dbg !41
  %513 = load i32, ptr addrspace(3) %512, align 4, !dbg !41
  %514 = or disjoint i32 %231, 2051, !dbg !41
  %515 = lshr i32 %514, 8, !dbg !41
  %516 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %515, !dbg !41
  %517 = getelementptr inbounds float, ptr addrspace(3) %516, i32 %514, !dbg !41
  %518 = load i32, ptr addrspace(3) %517, align 4, !dbg !41
  %519 = lshr i32 %347, 8, !dbg !41
  %520 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %519, !dbg !41
  %521 = getelementptr inbounds float, ptr addrspace(3) %520, i32 %347, !dbg !41
  %522 = load i32, ptr addrspace(3) %521, align 4, !dbg !41
  %523 = or disjoint i32 %231, 3073, !dbg !41
  %524 = lshr i32 %523, 8, !dbg !41
  %525 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %524, !dbg !41
  %526 = getelementptr inbounds float, ptr addrspace(3) %525, i32 %523, !dbg !41
  %527 = load i32, ptr addrspace(3) %526, align 4, !dbg !41
  %528 = or disjoint i32 %231, 3074, !dbg !41
  %529 = lshr i32 %528, 8, !dbg !41
  %530 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %529, !dbg !41
  %531 = getelementptr inbounds float, ptr addrspace(3) %530, i32 %528, !dbg !41
  %532 = load i32, ptr addrspace(3) %531, align 4, !dbg !41
  %533 = or disjoint i32 %231, 3075, !dbg !41
  %534 = lshr i32 %533, 8, !dbg !41
  %535 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %534, !dbg !41
  %536 = getelementptr inbounds float, ptr addrspace(3) %535, i32 %533, !dbg !41
  %537 = load i32, ptr addrspace(3) %536, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %470, i32 %474, i32 %477, i32 %480, ptr addrspace(1) %384, i1 true) #2, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %484, i32 %489, i32 %494, i32 %499, ptr addrspace(1) %386, i1 true) #2, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %503, i32 %508, i32 %513, i32 %518, ptr addrspace(1) %388, i1 true) #2, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %522, i32 %527, i32 %532, i32 %537, ptr addrspace(1) %390, i1 true) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py", directory: "inductor_cache/av")
!4 = !{ptr @triton_poi_fused_mul_sigmoid_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_sigmoid_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_sigmoid_8", linkageName: "triton_poi_fused_mul_sigmoid_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 33, column: 39, scope: !7)
!25 = !DILocation(line: 33, column: 52, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 44, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 57, scope: !7)
!30 = !DILocation(line: 47, column: 30, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 34, column: 22, scope: !7)
!34 = !DILocation(line: 47, column: 29, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 47, column: 20, scope: !31, inlinedAt: !33)
!36 = !DILocation(line: 47, column: 16, scope: !31, inlinedAt: !33)
!37 = !DILocation(line: 35, column: 18, scope: !7)
!38 = !DILocation(line: 36, column: 35, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 25, scope: !7)
!41 = !DILocation(line: 36, column: 46, scope: !7)
!42 = !DILocation(line: 36, column: 4, scope: !7)
