; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 6, !dbg !12
  %11 = and i32 %10, 3, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = or disjoint i32 %14, 8, !dbg !13
  %17 = or disjoint i32 %14, 12, !dbg !13
  %18 = or disjoint i32 %8, %13, !dbg !13
  %19 = icmp slt i32 %14, 16, !dbg !14
  %20 = icmp slt i32 %15, 16, !dbg !14
  %21 = icmp slt i32 %16, 16, !dbg !14
  %22 = icmp slt i32 %17, 16, !dbg !14
  %23 = icmp slt i32 %18, 16, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %25 = shl i32 %24, 8, !dbg !16
  %26 = and i32 %12, 252, !dbg !17
  %27 = lshr i32 %9, 2, !dbg !17
  %28 = and i32 %27, 63, !dbg !17
  %29 = and i32 %9, 255, !dbg !17
  %30 = or disjoint i32 %25, %26, !dbg !18
  %31 = or disjoint i32 %25, %28, !dbg !18
  %32 = or disjoint i32 %31, 64, !dbg !18
  %33 = or disjoint i32 %31, 128, !dbg !18
  %34 = or disjoint i32 %31, 192, !dbg !18
  %35 = or disjoint i32 %25, %29, !dbg !18
  %36 = icmp slt i32 %30, 768, !dbg !19
  %37 = icmp slt i32 %31, 768, !dbg !19
  %38 = icmp slt i32 %32, 768, !dbg !19
  %39 = icmp slt i32 %33, 768, !dbg !19
  %40 = icmp slt i32 %34, 768, !dbg !19
  %41 = icmp slt i32 %35, 768, !dbg !19
  %42 = ashr exact i32 %18, 2, !dbg !20
  %43 = mul i32 %14, 768, !dbg !21
  %44 = mul i32 %15, 768, !dbg !21
  %45 = mul i32 %16, 768, !dbg !21
  %46 = mul i32 %17, 768, !dbg !21
  %47 = add i32 %30, %43, !dbg !22
  %48 = add i32 %30, %44, !dbg !22
  %49 = add i32 %30, %45, !dbg !22
  %50 = add i32 %30, %46, !dbg !22
  %51 = sext i32 %47 to i64, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !23
  %53 = sext i32 %48 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = sext i32 %49 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !23
  %57 = sext i32 %50 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = and i1 %19, %36, !dbg !24
  %60 = and i1 %20, %36, !dbg !24
  %61 = and i1 %21, %36, !dbg !24
  %62 = and i1 %22, %36, !dbg !24
  %63 = and i1 %23, %37, !dbg !24
  %64 = and i1 %38, %23, !dbg !24
  %65 = and i1 %39, %23, !dbg !24
  %66 = and i1 %40, %23, !dbg !24
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %59) #2, !dbg !25
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !25
  %72 = bitcast i32 %68 to float, !dbg !25
  %73 = bitcast i32 %69 to float, !dbg !25
  %74 = bitcast i32 %70 to float, !dbg !25
  %75 = bitcast i32 %71 to float, !dbg !25
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %60) #2, !dbg !25
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !25
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !25
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !25
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !25
  %81 = bitcast i32 %77 to float, !dbg !25
  %82 = bitcast i32 %78 to float, !dbg !25
  %83 = bitcast i32 %79 to float, !dbg !25
  %84 = bitcast i32 %80 to float, !dbg !25
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %61) #2, !dbg !25
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !25
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !25
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !25
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !25
  %90 = bitcast i32 %86 to float, !dbg !25
  %91 = bitcast i32 %87 to float, !dbg !25
  %92 = bitcast i32 %88 to float, !dbg !25
  %93 = bitcast i32 %89 to float, !dbg !25
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %62) #2, !dbg !25
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !25
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !25
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !25
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !25
  %99 = bitcast i32 %95 to float, !dbg !25
  %100 = bitcast i32 %96 to float, !dbg !25
  %101 = bitcast i32 %97 to float, !dbg !25
  %102 = bitcast i32 %98 to float, !dbg !25
  %103 = sext i32 %35 to i64, !dbg !26
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !26
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %41) #2, !dbg !27
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !28
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !28
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !28
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !28
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %59) #2, !dbg !29
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !29
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !29
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !29
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !29
  %115 = bitcast i32 %111 to float, !dbg !29
  %116 = bitcast i32 %112 to float, !dbg !29
  %117 = bitcast i32 %113 to float, !dbg !29
  %118 = bitcast i32 %114 to float, !dbg !29
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 %60) #2, !dbg !29
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !29
  %121 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !29
  %122 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !29
  %123 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !29
  %124 = bitcast i32 %120 to float, !dbg !29
  %125 = bitcast i32 %121 to float, !dbg !29
  %126 = bitcast i32 %122 to float, !dbg !29
  %127 = bitcast i32 %123 to float, !dbg !29
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 %61) #2, !dbg !29
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !29
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !29
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !29
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !29
  %133 = bitcast i32 %129 to float, !dbg !29
  %134 = bitcast i32 %130 to float, !dbg !29
  %135 = bitcast i32 %131 to float, !dbg !29
  %136 = bitcast i32 %132 to float, !dbg !29
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 %62) #2, !dbg !29
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !29
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !29
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !29
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !29
  %142 = bitcast i32 %138 to float, !dbg !29
  %143 = bitcast i32 %139 to float, !dbg !29
  %144 = bitcast i32 %140 to float, !dbg !29
  %145 = bitcast i32 %141 to float, !dbg !29
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %29, !dbg !30
  %147 = insertelement <1 x i32> poison, i32 %105, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %26, !dbg !30
  %149 = load float, ptr addrspace(3) %148, align 16, !dbg !30
  %150 = or disjoint i32 %26, 1, !dbg !30
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %150, !dbg !30
  %152 = load float, ptr addrspace(3) %151, align 4, !dbg !30
  %153 = or disjoint i32 %26, 2, !dbg !30
  %154 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %153, !dbg !30
  %155 = load float, ptr addrspace(3) %154, align 8, !dbg !30
  %156 = or disjoint i32 %26, 3, !dbg !30
  %157 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %156, !dbg !30
  %158 = load float, ptr addrspace(3) %157, align 4, !dbg !30
  %159 = fmul float %149, %115, !dbg !30
  %160 = fmul float %152, %116, !dbg !30
  %161 = fmul float %155, %117, !dbg !30
  %162 = fmul float %158, %118, !dbg !30
  %163 = fmul float %149, %124, !dbg !30
  %164 = fmul float %152, %125, !dbg !30
  %165 = fmul float %155, %126, !dbg !30
  %166 = fmul float %158, %127, !dbg !30
  %167 = fmul float %149, %133, !dbg !30
  %168 = fmul float %152, %134, !dbg !30
  %169 = fmul float %155, %135, !dbg !30
  %170 = fmul float %158, %136, !dbg !30
  %171 = fmul float %149, %142, !dbg !30
  %172 = fmul float %152, %143, !dbg !30
  %173 = fmul float %155, %144, !dbg !30
  %174 = fmul float %158, %145, !dbg !30
  %175 = fadd float %159, %72, !dbg !31
  %176 = fadd float %160, %73, !dbg !31
  %177 = fadd float %161, %74, !dbg !31
  %178 = fadd float %162, %75, !dbg !31
  %179 = fadd float %163, %81, !dbg !31
  %180 = fadd float %164, %82, !dbg !31
  %181 = fadd float %165, %83, !dbg !31
  %182 = fadd float %166, %84, !dbg !31
  %183 = fadd float %167, %90, !dbg !31
  %184 = fadd float %168, %91, !dbg !31
  %185 = fadd float %169, %92, !dbg !31
  %186 = fadd float %170, %93, !dbg !31
  %187 = fadd float %171, %99, !dbg !31
  %188 = fadd float %172, %100, !dbg !31
  %189 = fadd float %173, %101, !dbg !31
  %190 = fadd float %174, %102, !dbg !31
  %191 = shl i32 %31, 2, !dbg !32
  %192 = shl i32 %32, 2, !dbg !32
  %193 = shl i32 %33, 2, !dbg !32
  %194 = shl i32 %34, 2, !dbg !32
  %195 = mul i32 %42, 3072, !dbg !33
  %196 = add i32 %191, %195, !dbg !34
  %197 = add i32 %195, %192, !dbg !34
  %198 = add i32 %195, %193, !dbg !34
  %199 = add i32 %195, %194, !dbg !34
  %200 = sext i32 %196 to i64, !dbg !35
  %201 = getelementptr float, ptr addrspace(1) %3, i64 %200, !dbg !35
  %202 = sext i32 %197 to i64, !dbg !35
  %203 = getelementptr float, ptr addrspace(1) %3, i64 %202, !dbg !35
  %204 = sext i32 %198 to i64, !dbg !35
  %205 = getelementptr float, ptr addrspace(1) %3, i64 %204, !dbg !35
  %206 = sext i32 %199 to i64, !dbg !35
  %207 = getelementptr float, ptr addrspace(1) %3, i64 %206, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %208 = shl i32 %9, 6, !dbg !36
  %209 = and i32 %208, 4032, !dbg !36
  %210 = or disjoint i32 %209, %11, !dbg !36
  %211 = and i32 %12, 1020, !dbg !36
  %212 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %209, !dbg !36
  %213 = getelementptr float, ptr addrspace(3) %212, i32 %210, !dbg !36
  %214 = bitcast float %175 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %214, i1 true) #2, !dbg !36
  %215 = or disjoint i32 %210, 16, !dbg !36
  %216 = lshr i32 %215, 2, !dbg !36
  %217 = getelementptr float, ptr addrspace(3) @global_smem, i32 %216, !dbg !36
  %218 = getelementptr float, ptr addrspace(3) %217, i32 %215, !dbg !36
  %219 = bitcast float %176 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #2, !dbg !36
  %220 = or disjoint i32 %210, 32, !dbg !36
  %221 = lshr i32 %220, 2, !dbg !36
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i32 %221, !dbg !36
  %223 = getelementptr float, ptr addrspace(3) %222, i32 %220, !dbg !36
  %224 = bitcast float %177 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #2, !dbg !36
  %225 = or disjoint i32 %210, 48, !dbg !36
  %226 = lshr i32 %225, 2, !dbg !36
  %227 = getelementptr float, ptr addrspace(3) @global_smem, i32 %226, !dbg !36
  %228 = getelementptr float, ptr addrspace(3) %227, i32 %225, !dbg !36
  %229 = bitcast float %178 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #2, !dbg !36
  %230 = or disjoint i32 %210, 4, !dbg !36
  %231 = getelementptr float, ptr addrspace(3) %212, i32 %230, !dbg !36
  %232 = bitcast float %179 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 true) #2, !dbg !36
  %233 = or disjoint i32 %210, 20, !dbg !36
  %234 = lshr i32 %233, 2, !dbg !36
  %235 = and i32 %234, 1012, !dbg !36
  %236 = getelementptr float, ptr addrspace(3) @global_smem, i32 %235, !dbg !36
  %237 = getelementptr float, ptr addrspace(3) %236, i32 %233, !dbg !36
  %238 = bitcast float %180 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %238, i1 true) #2, !dbg !36
  %239 = or disjoint i32 %210, 36, !dbg !36
  %240 = lshr i32 %239, 2, !dbg !36
  %241 = and i32 %240, 1016, !dbg !36
  %242 = getelementptr float, ptr addrspace(3) @global_smem, i32 %241, !dbg !36
  %243 = getelementptr float, ptr addrspace(3) %242, i32 %239, !dbg !36
  %244 = bitcast float %181 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 true) #2, !dbg !36
  %245 = or disjoint i32 %210, 52, !dbg !36
  %246 = lshr i32 %245, 2, !dbg !36
  %247 = and i32 %246, 1020, !dbg !36
  %248 = getelementptr float, ptr addrspace(3) @global_smem, i32 %247, !dbg !36
  %249 = getelementptr float, ptr addrspace(3) %248, i32 %245, !dbg !36
  %250 = bitcast float %182 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %250, i1 true) #2, !dbg !36
  %251 = or disjoint i32 %210, 8, !dbg !36
  %252 = getelementptr float, ptr addrspace(3) %212, i32 %251, !dbg !36
  %253 = bitcast float %183 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #2, !dbg !36
  %254 = or disjoint i32 %210, 24, !dbg !36
  %255 = lshr i32 %254, 2, !dbg !36
  %256 = and i32 %255, 1012, !dbg !36
  %257 = getelementptr float, ptr addrspace(3) @global_smem, i32 %256, !dbg !36
  %258 = getelementptr float, ptr addrspace(3) %257, i32 %254, !dbg !36
  %259 = bitcast float %184 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #2, !dbg !36
  %260 = or disjoint i32 %210, 40, !dbg !36
  %261 = lshr i32 %260, 2, !dbg !36
  %262 = and i32 %261, 1016, !dbg !36
  %263 = getelementptr float, ptr addrspace(3) @global_smem, i32 %262, !dbg !36
  %264 = getelementptr float, ptr addrspace(3) %263, i32 %260, !dbg !36
  %265 = bitcast float %185 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #2, !dbg !36
  %266 = or disjoint i32 %210, 56, !dbg !36
  %267 = lshr i32 %266, 2, !dbg !36
  %268 = and i32 %267, 1020, !dbg !36
  %269 = getelementptr float, ptr addrspace(3) @global_smem, i32 %268, !dbg !36
  %270 = getelementptr float, ptr addrspace(3) %269, i32 %266, !dbg !36
  %271 = bitcast float %186 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %271, i1 true) #2, !dbg !36
  %272 = or disjoint i32 %210, 12, !dbg !36
  %273 = getelementptr float, ptr addrspace(3) %212, i32 %272, !dbg !36
  %274 = bitcast float %187 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #2, !dbg !36
  %275 = or disjoint i32 %210, 28, !dbg !36
  %276 = lshr i32 %275, 2, !dbg !36
  %277 = and i32 %276, 1012, !dbg !36
  %278 = getelementptr float, ptr addrspace(3) @global_smem, i32 %277, !dbg !36
  %279 = getelementptr float, ptr addrspace(3) %278, i32 %275, !dbg !36
  %280 = bitcast float %188 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #2, !dbg !36
  %281 = or disjoint i32 %210, 44, !dbg !36
  %282 = lshr i32 %281, 2, !dbg !36
  %283 = and i32 %282, 1016, !dbg !36
  %284 = getelementptr float, ptr addrspace(3) @global_smem, i32 %283, !dbg !36
  %285 = getelementptr float, ptr addrspace(3) %284, i32 %281, !dbg !36
  %286 = bitcast float %189 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 true) #2, !dbg !36
  %287 = or disjoint i32 %210, 60, !dbg !36
  %288 = lshr i32 %287, 2, !dbg !36
  %289 = and i32 %288, 1020, !dbg !36
  %290 = getelementptr float, ptr addrspace(3) @global_smem, i32 %289, !dbg !36
  %291 = getelementptr float, ptr addrspace(3) %290, i32 %287, !dbg !36
  %292 = bitcast float %190 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %292, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %293 = and i32 %9, 252, !dbg !36
  %294 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %293, !dbg !36
  %295 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %211, !dbg !36
  %296 = or disjoint i32 %211, 1024, !dbg !36
  %297 = lshr exact i32 %296, 2, !dbg !36
  %298 = and i32 %297, 508, !dbg !36
  %299 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %298, !dbg !36
  %300 = getelementptr inbounds float, ptr addrspace(3) %299, i32 %296, !dbg !36
  %301 = load <4 x i32>, ptr addrspace(3) %300, align 16, !dbg !36
  %302 = or disjoint i32 %211, 2048, !dbg !36
  %303 = lshr exact i32 %302, 2, !dbg !36
  %304 = and i32 %303, 764, !dbg !36
  %305 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %304, !dbg !36
  %306 = getelementptr inbounds float, ptr addrspace(3) %305, i32 %302, !dbg !36
  %307 = load <4 x i32>, ptr addrspace(3) %306, align 16, !dbg !36
  %308 = or disjoint i32 %211, 3072, !dbg !36
  %309 = lshr exact i32 %308, 2, !dbg !36
  %310 = and i32 %309, 1020, !dbg !36
  %311 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %310, !dbg !36
  %312 = getelementptr inbounds float, ptr addrspace(3) %311, i32 %308, !dbg !36
  %313 = load <4 x i32>, ptr addrspace(3) %312, align 16, !dbg !36
  %.extract = load i32, ptr addrspace(3) %295, align 16, !dbg !36
  %314 = getelementptr inbounds i8, ptr addrspace(3) %295, i32 4, !dbg !36
  %.extract20 = load i32, ptr addrspace(3) %314, align 4, !dbg !36
  %315 = getelementptr inbounds i8, ptr addrspace(3) %295, i32 8, !dbg !36
  %.extract21 = load i32, ptr addrspace(3) %315, align 8, !dbg !36
  %316 = getelementptr inbounds i8, ptr addrspace(3) %295, i32 12, !dbg !36
  %.extract22 = load i32, ptr addrspace(3) %316, align 4, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %201, i1 %63) #2, !dbg !36
  %.extract23 = extractelement <4 x i32> %301, i64 0, !dbg !36
  %.extract24 = extractelement <4 x i32> %301, i64 1, !dbg !36
  %.extract25 = extractelement <4 x i32> %301, i64 2, !dbg !36
  %.extract26 = extractelement <4 x i32> %301, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %203, i1 %64) #2, !dbg !36
  %.extract27 = extractelement <4 x i32> %307, i64 0, !dbg !36
  %.extract28 = extractelement <4 x i32> %307, i64 1, !dbg !36
  %.extract29 = extractelement <4 x i32> %307, i64 2, !dbg !36
  %.extract30 = extractelement <4 x i32> %307, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %205, i1 %65) #2, !dbg !36
  %.extract31 = extractelement <4 x i32> %313, i64 0, !dbg !36
  %.extract32 = extractelement <4 x i32> %313, i64 1, !dbg !36
  %.extract33 = extractelement <4 x i32> %313, i64 2, !dbg !36
  %.extract34 = extractelement <4 x i32> %313, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %207, i1 %66) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2udsxmfbwm4iqkhqh6pgd7x5kny6p7pfq4ak6yycakcc7ay434i.py", directory: "inductor_cache/2u")
!4 = !{ptr @triton_poi_fused_add_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_35, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_35", linkageName: "triton_poi_fused_add_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 52, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 44, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 32, scope: !7)
!33 = !DILocation(line: 37, column: 42, scope: !7)
!34 = !DILocation(line: 37, column: 37, scope: !7)
!35 = !DILocation(line: 37, column: 25, scope: !7)
!36 = !DILocation(line: 37, column: 53, scope: !7)
!37 = !DILocation(line: 37, column: 4, scope: !7)
