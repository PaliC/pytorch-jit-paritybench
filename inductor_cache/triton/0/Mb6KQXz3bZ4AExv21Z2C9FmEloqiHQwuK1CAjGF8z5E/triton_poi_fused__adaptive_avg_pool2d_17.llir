; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_17(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %14 = or disjoint i32 %9, 513, !dbg !13
  %15 = or disjoint i32 %9, 514, !dbg !13
  %16 = or disjoint i32 %9, 515, !dbg !13
  %17 = icmp slt i32 %9, 100352, !dbg !14
  %18 = icmp slt i32 %13, 100352, !dbg !14
  %19 = sdiv i32 %9, 7, !dbg !15
  %20 = sdiv i32 %10, 7, !dbg !15
  %21 = sdiv i32 %11, 7, !dbg !15
  %22 = sdiv i32 %12, 7, !dbg !15
  %23 = sdiv i32 %13, 7, !dbg !15
  %24 = sdiv i32 %14, 7, !dbg !15
  %25 = sdiv i32 %15, 7, !dbg !15
  %26 = sdiv i32 %16, 7, !dbg !15
  %27 = sdiv i32 %9, 49, !dbg !16
  %28 = sdiv i32 %10, 49, !dbg !16
  %29 = sdiv i32 %11, 49, !dbg !16
  %30 = sdiv i32 %12, 49, !dbg !16
  %31 = sdiv i32 %13, 49, !dbg !16
  %32 = sdiv i32 %14, 49, !dbg !16
  %33 = sdiv i32 %15, 49, !dbg !16
  %34 = sdiv i32 %16, 49, !dbg !16
  %35 = srem i32 %27, 512, !dbg !17
  %36 = srem i32 %28, 512, !dbg !17
  %37 = srem i32 %29, 512, !dbg !17
  %38 = srem i32 %30, 512, !dbg !17
  %39 = srem i32 %31, 512, !dbg !17
  %40 = srem i32 %32, 512, !dbg !17
  %41 = srem i32 %33, 512, !dbg !17
  %42 = srem i32 %34, 512, !dbg !17
  %43 = sdiv i32 %9, 25088, !dbg !18
  %44 = sdiv i32 %13, 25088, !dbg !18
  %45 = shl nsw i32 %43, 11, !dbg !19
  %46 = shl nsw i32 %44, 11, !dbg !19
  %47 = add nsw i32 %45, %35, !dbg !20
  %48 = add nsw i32 %46, %39, !dbg !20
  %49 = add nsw i32 %46, %40, !dbg !20
  %50 = add nsw i32 %46, %41, !dbg !20
  %51 = add nsw i32 %46, %42, !dbg !20
  %52 = or disjoint i32 %45, 512, !dbg !21
  %53 = add nsw i32 %52, %35, !dbg !22
  %54 = or disjoint i32 %46, 512, !dbg !21
  %55 = add nsw i32 %54, %39, !dbg !22
  %56 = add nsw i32 %54, %40, !dbg !22
  %57 = add nsw i32 %54, %41, !dbg !22
  %58 = add nsw i32 %54, %42, !dbg !22
  %59 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !23
  %60 = insertelement <2 x i32> %59, i32 %19, i64 1, !dbg !23
  %61 = srem <2 x i32> %60, splat (i32 7), !dbg !23
  %62 = trunc nsw <2 x i32> %61 to <2 x i8>, !dbg !24
  %63 = shl nsw <2 x i8> %62, splat (i8 1), !dbg !24
  %64 = sdiv <2 x i8> %63, splat (i8 7), !dbg !24
  %65 = add nsw <2 x i8> %63, splat (i8 8), !dbg !25
  %66 = sdiv <2 x i8> %65, splat (i8 7), !dbg !25
  %67 = sext <2 x i8> %64 to <2 x i32>, !dbg !24
  %68 = icmp slt <2 x i8> %64, %66, !dbg !26
  %69 = extractelement <2 x i1> %68, i64 0, !dbg !27
  %70 = extractelement <2 x i1> %68, i64 1, !dbg !27
  %71 = and i1 %69, %70, !dbg !27
  %72 = shl nsw <2 x i32> %67, <i32 9, i32 10>, !dbg !28
  %73 = extractelement <2 x i32> %72, i64 0, !dbg !29
  %74 = add nsw i32 %47, %73, !dbg !30
  %75 = extractelement <2 x i32> %72, i64 1, !dbg !31
  %76 = add nsw i32 %74, %75, !dbg !32
  %77 = sext i32 %76 to i64, !dbg !33
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !33
  %79 = and i1 %17, %71, !dbg !34
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %79, i32 0, i1 %79) #1, !dbg !35
  %81 = bitcast i32 %80 to float, !dbg !35
  %82 = add nsw <2 x i32> %67, splat (i32 1), !dbg !36
  %83 = zext <2 x i8> %66 to <2 x i32>, !dbg !37
  %84 = icmp samesign ult <2 x i32> %82, %83, !dbg !37
  %85 = extractelement <2 x i1> %84, i64 0, !dbg !38
  %86 = and i1 %70, %85, !dbg !39
  %87 = add nsw i32 %53, %73, !dbg !40
  %88 = add nsw i32 %87, %75, !dbg !41
  %89 = sext i32 %88 to i64, !dbg !42
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !42
  %91 = and i1 %17, %86, !dbg !43
  %92 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !23
  %93 = insertelement <2 x i32> %92, i32 %20, i64 1, !dbg !23
  %94 = srem <2 x i32> %93, splat (i32 7), !dbg !23
  %95 = trunc nsw <2 x i32> %94 to <2 x i8>, !dbg !24
  %96 = shl nsw <2 x i8> %95, splat (i8 1), !dbg !24
  %97 = sdiv <2 x i8> %96, splat (i8 7), !dbg !24
  %98 = add nsw <2 x i8> %96, splat (i8 8), !dbg !25
  %99 = sdiv <2 x i8> %98, splat (i8 7), !dbg !25
  %100 = sext <2 x i8> %97 to <2 x i32>, !dbg !24
  %101 = icmp slt <2 x i8> %97, %99, !dbg !26
  %102 = extractelement <2 x i1> %101, i64 0, !dbg !27
  %103 = extractelement <2 x i1> %101, i64 1, !dbg !27
  %104 = and i1 %102, %103, !dbg !27
  %105 = extractelement <2 x i32> %100, i64 0, !dbg !28
  %106 = shl nsw i32 %105, 9, !dbg !28
  %107 = add nsw i32 %106, %36, !dbg !20
  %108 = extractelement <2 x i32> %100, i64 1, !dbg !44
  %109 = shl nsw i32 %108, 10, !dbg !44
  %110 = add nsw i32 %107, %109, !dbg !30
  %111 = add nsw i32 %110, %45, !dbg !32
  %112 = sext i32 %111 to i64, !dbg !33
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !33
  %114 = and i1 %104, %17, !dbg !34
  %115 = add nsw <2 x i32> %100, splat (i32 1), !dbg !36
  %116 = zext <2 x i8> %99 to <2 x i32>, !dbg !37
  %117 = icmp samesign ult <2 x i32> %115, %116, !dbg !37
  %118 = extractelement <2 x i1> %117, i64 0, !dbg !38
  %119 = and i1 %103, %118, !dbg !39
  %120 = add nsw i32 %107, 512, !dbg !22
  %121 = add nsw i32 %120, %109, !dbg !40
  %122 = add nsw i32 %121, %45, !dbg !41
  %123 = sext i32 %122 to i64, !dbg !42
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !42
  %125 = and i1 %119, %17, !dbg !43
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %114, i32 0, i1 %114) #1, !dbg !35
  %127 = bitcast i32 %126 to float, !dbg !35
  %128 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !23
  %129 = insertelement <2 x i32> %128, i32 %21, i64 1, !dbg !23
  %130 = srem <2 x i32> %129, splat (i32 7), !dbg !23
  %131 = trunc nsw <2 x i32> %130 to <2 x i8>, !dbg !24
  %132 = shl nsw <2 x i8> %131, splat (i8 1), !dbg !24
  %133 = sdiv <2 x i8> %132, splat (i8 7), !dbg !24
  %134 = add nsw <2 x i8> %132, splat (i8 8), !dbg !25
  %135 = sdiv <2 x i8> %134, splat (i8 7), !dbg !25
  %136 = sext <2 x i8> %133 to <2 x i32>, !dbg !24
  %137 = icmp slt <2 x i8> %133, %135, !dbg !26
  %138 = extractelement <2 x i1> %137, i64 0, !dbg !27
  %139 = extractelement <2 x i1> %137, i64 1, !dbg !27
  %140 = and i1 %138, %139, !dbg !27
  %141 = extractelement <2 x i32> %136, i64 0, !dbg !28
  %142 = shl nsw i32 %141, 9, !dbg !28
  %143 = add nsw i32 %142, %37, !dbg !20
  %144 = extractelement <2 x i32> %136, i64 1, !dbg !44
  %145 = shl nsw i32 %144, 10, !dbg !44
  %146 = add nsw i32 %143, %145, !dbg !30
  %147 = add nsw i32 %146, %45, !dbg !32
  %148 = sext i32 %147 to i64, !dbg !33
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !33
  %150 = and i1 %140, %17, !dbg !34
  %151 = add nsw <2 x i32> %136, splat (i32 1), !dbg !36
  %152 = zext <2 x i8> %135 to <2 x i32>, !dbg !37
  %153 = icmp samesign ult <2 x i32> %151, %152, !dbg !37
  %154 = extractelement <2 x i1> %153, i64 0, !dbg !38
  %155 = and i1 %139, %154, !dbg !39
  %156 = add nsw i32 %143, 512, !dbg !22
  %157 = add nsw i32 %156, %145, !dbg !40
  %158 = add nsw i32 %157, %45, !dbg !41
  %159 = sext i32 %158 to i64, !dbg !42
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !42
  %161 = and i1 %155, %17, !dbg !43
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %150, i32 0, i1 %150) #1, !dbg !35
  %163 = bitcast i32 %162 to float, !dbg !35
  %164 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !23
  %165 = insertelement <2 x i32> %164, i32 %22, i64 1, !dbg !23
  %166 = srem <2 x i32> %165, splat (i32 7), !dbg !23
  %167 = trunc nsw <2 x i32> %166 to <2 x i8>, !dbg !24
  %168 = shl nsw <2 x i8> %167, splat (i8 1), !dbg !24
  %169 = sdiv <2 x i8> %168, splat (i8 7), !dbg !24
  %170 = add nsw <2 x i8> %168, splat (i8 8), !dbg !25
  %171 = sdiv <2 x i8> %170, splat (i8 7), !dbg !25
  %172 = sext <2 x i8> %169 to <2 x i32>, !dbg !24
  %173 = icmp slt <2 x i8> %169, %171, !dbg !26
  %174 = extractelement <2 x i1> %173, i64 0, !dbg !27
  %175 = extractelement <2 x i1> %173, i64 1, !dbg !27
  %176 = and i1 %174, %175, !dbg !27
  %177 = extractelement <2 x i32> %172, i64 0, !dbg !28
  %178 = shl nsw i32 %177, 9, !dbg !28
  %179 = add nsw i32 %178, %38, !dbg !20
  %180 = extractelement <2 x i32> %172, i64 1, !dbg !44
  %181 = shl nsw i32 %180, 10, !dbg !44
  %182 = add nsw i32 %179, %181, !dbg !30
  %183 = add nsw i32 %182, %45, !dbg !32
  %184 = sext i32 %183 to i64, !dbg !33
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !33
  %186 = and i1 %176, %17, !dbg !34
  %187 = add nsw <2 x i32> %172, splat (i32 1), !dbg !36
  %188 = zext <2 x i8> %171 to <2 x i32>, !dbg !37
  %189 = icmp samesign ult <2 x i32> %187, %188, !dbg !37
  %190 = extractelement <2 x i1> %189, i64 0, !dbg !38
  %191 = and i1 %175, %190, !dbg !39
  %192 = add nsw i32 %179, 512, !dbg !22
  %193 = add nsw i32 %192, %181, !dbg !40
  %194 = add nsw i32 %193, %45, !dbg !41
  %195 = sext i32 %194 to i64, !dbg !42
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %195, !dbg !42
  %197 = and i1 %191, %17, !dbg !43
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %186, i32 0, i1 %186) #1, !dbg !35
  %199 = bitcast i32 %198 to float, !dbg !35
  %200 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !23
  %201 = insertelement <2 x i32> %200, i32 %23, i64 1, !dbg !23
  %202 = srem <2 x i32> %201, splat (i32 7), !dbg !23
  %203 = trunc nsw <2 x i32> %202 to <2 x i8>, !dbg !24
  %204 = shl nsw <2 x i8> %203, splat (i8 1), !dbg !24
  %205 = sdiv <2 x i8> %204, splat (i8 7), !dbg !24
  %206 = add nsw <2 x i8> %204, splat (i8 8), !dbg !25
  %207 = sdiv <2 x i8> %206, splat (i8 7), !dbg !25
  %208 = sext <2 x i8> %205 to <2 x i32>, !dbg !24
  %209 = icmp slt <2 x i8> %205, %207, !dbg !26
  %210 = extractelement <2 x i1> %209, i64 0, !dbg !27
  %211 = extractelement <2 x i1> %209, i64 1, !dbg !27
  %212 = and i1 %210, %211, !dbg !27
  %213 = shl nsw <2 x i32> %208, <i32 9, i32 10>, !dbg !28
  %214 = extractelement <2 x i32> %213, i64 0, !dbg !29
  %215 = add nsw i32 %48, %214, !dbg !30
  %216 = extractelement <2 x i32> %213, i64 1, !dbg !31
  %217 = add nsw i32 %215, %216, !dbg !32
  %218 = sext i32 %217 to i64, !dbg !33
  %219 = getelementptr float, ptr addrspace(1) %0, i64 %218, !dbg !33
  %220 = and i1 %18, %212, !dbg !34
  %221 = add nsw <2 x i32> %208, splat (i32 1), !dbg !36
  %222 = zext <2 x i8> %207 to <2 x i32>, !dbg !37
  %223 = icmp samesign ult <2 x i32> %221, %222, !dbg !37
  %224 = extractelement <2 x i1> %223, i64 0, !dbg !38
  %225 = and i1 %211, %224, !dbg !39
  %226 = add nsw i32 %55, %214, !dbg !40
  %227 = add nsw i32 %226, %216, !dbg !41
  %228 = sext i32 %227 to i64, !dbg !42
  %229 = getelementptr float, ptr addrspace(1) %0, i64 %228, !dbg !42
  %230 = and i1 %18, %225, !dbg !43
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %219, i1 %220, i32 0, i1 %220) #1, !dbg !35
  %232 = bitcast i32 %231 to float, !dbg !35
  %233 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !23
  %234 = insertelement <2 x i32> %233, i32 %24, i64 1, !dbg !23
  %235 = srem <2 x i32> %234, splat (i32 7), !dbg !23
  %236 = trunc nsw <2 x i32> %235 to <2 x i8>, !dbg !24
  %237 = shl nsw <2 x i8> %236, splat (i8 1), !dbg !24
  %238 = sdiv <2 x i8> %237, splat (i8 7), !dbg !24
  %239 = add nsw <2 x i8> %237, splat (i8 8), !dbg !25
  %240 = sdiv <2 x i8> %239, splat (i8 7), !dbg !25
  %241 = sext <2 x i8> %238 to <2 x i32>, !dbg !24
  %242 = icmp slt <2 x i8> %238, %240, !dbg !26
  %243 = extractelement <2 x i1> %242, i64 0, !dbg !27
  %244 = extractelement <2 x i1> %242, i64 1, !dbg !27
  %245 = and i1 %243, %244, !dbg !27
  %246 = shl nsw <2 x i32> %241, <i32 9, i32 10>, !dbg !28
  %247 = extractelement <2 x i32> %246, i64 0, !dbg !29
  %248 = add nsw i32 %49, %247, !dbg !30
  %249 = extractelement <2 x i32> %246, i64 1, !dbg !31
  %250 = add nsw i32 %248, %249, !dbg !32
  %251 = sext i32 %250 to i64, !dbg !33
  %252 = getelementptr float, ptr addrspace(1) %0, i64 %251, !dbg !33
  %253 = and i1 %18, %245, !dbg !34
  %254 = add nsw <2 x i32> %241, splat (i32 1), !dbg !36
  %255 = zext <2 x i8> %240 to <2 x i32>, !dbg !37
  %256 = icmp samesign ult <2 x i32> %254, %255, !dbg !37
  %257 = extractelement <2 x i1> %256, i64 0, !dbg !38
  %258 = and i1 %244, %257, !dbg !39
  %259 = add nsw i32 %56, %247, !dbg !40
  %260 = add nsw i32 %259, %249, !dbg !41
  %261 = sext i32 %260 to i64, !dbg !42
  %262 = getelementptr float, ptr addrspace(1) %0, i64 %261, !dbg !42
  %263 = and i1 %18, %258, !dbg !43
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %252, i1 %253, i32 0, i1 %253) #1, !dbg !35
  %265 = bitcast i32 %264 to float, !dbg !35
  %266 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !23
  %267 = insertelement <2 x i32> %266, i32 %25, i64 1, !dbg !23
  %268 = srem <2 x i32> %267, splat (i32 7), !dbg !23
  %269 = trunc nsw <2 x i32> %268 to <2 x i8>, !dbg !24
  %270 = shl nsw <2 x i8> %269, splat (i8 1), !dbg !24
  %271 = sdiv <2 x i8> %270, splat (i8 7), !dbg !24
  %272 = add nsw <2 x i8> %270, splat (i8 8), !dbg !25
  %273 = sdiv <2 x i8> %272, splat (i8 7), !dbg !25
  %274 = sext <2 x i8> %271 to <2 x i32>, !dbg !24
  %275 = icmp slt <2 x i8> %271, %273, !dbg !26
  %276 = extractelement <2 x i1> %275, i64 0, !dbg !27
  %277 = extractelement <2 x i1> %275, i64 1, !dbg !27
  %278 = and i1 %276, %277, !dbg !27
  %279 = shl nsw <2 x i32> %274, <i32 9, i32 10>, !dbg !28
  %280 = extractelement <2 x i32> %279, i64 0, !dbg !29
  %281 = add nsw i32 %50, %280, !dbg !30
  %282 = extractelement <2 x i32> %279, i64 1, !dbg !31
  %283 = add nsw i32 %281, %282, !dbg !32
  %284 = sext i32 %283 to i64, !dbg !33
  %285 = getelementptr float, ptr addrspace(1) %0, i64 %284, !dbg !33
  %286 = and i1 %18, %278, !dbg !34
  %287 = add nsw <2 x i32> %274, splat (i32 1), !dbg !36
  %288 = zext <2 x i8> %273 to <2 x i32>, !dbg !37
  %289 = icmp samesign ult <2 x i32> %287, %288, !dbg !37
  %290 = extractelement <2 x i1> %289, i64 0, !dbg !38
  %291 = and i1 %277, %290, !dbg !39
  %292 = add nsw i32 %57, %280, !dbg !40
  %293 = add nsw i32 %292, %282, !dbg !41
  %294 = sext i32 %293 to i64, !dbg !42
  %295 = getelementptr float, ptr addrspace(1) %0, i64 %294, !dbg !42
  %296 = and i1 %18, %291, !dbg !43
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %285, i1 %286, i32 0, i1 %286) #1, !dbg !35
  %298 = bitcast i32 %297 to float, !dbg !35
  %299 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !23
  %300 = insertelement <2 x i32> %299, i32 %26, i64 1, !dbg !23
  %301 = srem <2 x i32> %300, splat (i32 7), !dbg !23
  %302 = trunc nsw <2 x i32> %301 to <2 x i8>, !dbg !24
  %303 = shl nsw <2 x i8> %302, splat (i8 1), !dbg !24
  %304 = sdiv <2 x i8> %303, splat (i8 7), !dbg !24
  %305 = add nsw <2 x i8> %303, splat (i8 8), !dbg !25
  %306 = sdiv <2 x i8> %305, splat (i8 7), !dbg !25
  %307 = sext <2 x i8> %304 to <2 x i32>, !dbg !24
  %308 = icmp slt <2 x i8> %304, %306, !dbg !26
  %309 = extractelement <2 x i1> %308, i64 0, !dbg !27
  %310 = extractelement <2 x i1> %308, i64 1, !dbg !27
  %311 = and i1 %309, %310, !dbg !27
  %312 = shl nsw <2 x i32> %307, <i32 9, i32 10>, !dbg !28
  %313 = extractelement <2 x i32> %312, i64 0, !dbg !29
  %314 = add nsw i32 %51, %313, !dbg !30
  %315 = extractelement <2 x i32> %312, i64 1, !dbg !31
  %316 = add nsw i32 %314, %315, !dbg !32
  %317 = sext i32 %316 to i64, !dbg !33
  %318 = getelementptr float, ptr addrspace(1) %0, i64 %317, !dbg !33
  %319 = and i1 %18, %311, !dbg !34
  %320 = add nsw <2 x i32> %307, splat (i32 1), !dbg !36
  %321 = zext <2 x i8> %306 to <2 x i32>, !dbg !37
  %322 = icmp samesign ult <2 x i32> %320, %321, !dbg !37
  %323 = extractelement <2 x i1> %322, i64 0, !dbg !38
  %324 = and i1 %310, %323, !dbg !39
  %325 = add nsw i32 %58, %313, !dbg !40
  %326 = add nsw i32 %325, %315, !dbg !41
  %327 = sext i32 %326 to i64, !dbg !42
  %328 = getelementptr float, ptr addrspace(1) %0, i64 %327, !dbg !42
  %329 = and i1 %18, %324, !dbg !43
  %330 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %318, i1 %319, i32 0, i1 %319) #1, !dbg !35
  %331 = bitcast i32 %330 to float, !dbg !35
  %332 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %91, i32 0, i1 %91) #1, !dbg !45
  %333 = bitcast i32 %332 to float, !dbg !45
  %334 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %125, i32 0, i1 %125) #1, !dbg !45
  %335 = bitcast i32 %334 to float, !dbg !45
  %336 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %161, i32 0, i1 %161) #1, !dbg !45
  %337 = bitcast i32 %336 to float, !dbg !45
  %338 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %196, i1 %197, i32 0, i1 %197) #1, !dbg !45
  %339 = bitcast i32 %338 to float, !dbg !45
  %340 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %229, i1 %230, i32 0, i1 %230) #1, !dbg !45
  %341 = bitcast i32 %340 to float, !dbg !45
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %262, i1 %263, i32 0, i1 %263) #1, !dbg !45
  %343 = bitcast i32 %342 to float, !dbg !45
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %295, i1 %296, i32 0, i1 %296) #1, !dbg !45
  %345 = bitcast i32 %344 to float, !dbg !45
  %346 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %328, i1 %329, i32 0, i1 %329) #1, !dbg !45
  %347 = bitcast i32 %346 to float, !dbg !45
  %348 = fadd float %81, %333, !dbg !46
  %349 = fadd float %127, %335, !dbg !46
  %350 = fadd float %163, %337, !dbg !46
  %351 = fadd float %199, %339, !dbg !46
  %352 = fadd float %232, %341, !dbg !46
  %353 = fadd float %265, %343, !dbg !46
  %354 = fadd float %298, %345, !dbg !46
  %355 = fadd float %331, %347, !dbg !46
  %356 = extractelement <2 x i1> %84, i64 1, !dbg !38
  %357 = and i1 %69, %356, !dbg !47
  %358 = extractelement <2 x i1> %117, i64 1, !dbg !38
  %359 = and i1 %102, %358, !dbg !47
  %360 = extractelement <2 x i1> %153, i64 1, !dbg !38
  %361 = and i1 %138, %360, !dbg !47
  %362 = extractelement <2 x i1> %189, i64 1, !dbg !38
  %363 = and i1 %174, %362, !dbg !47
  %364 = extractelement <2 x i1> %223, i64 1, !dbg !38
  %365 = and i1 %210, %364, !dbg !47
  %366 = extractelement <2 x i1> %256, i64 1, !dbg !38
  %367 = and i1 %243, %366, !dbg !47
  %368 = extractelement <2 x i1> %289, i64 1, !dbg !38
  %369 = and i1 %276, %368, !dbg !47
  %370 = extractelement <2 x i1> %322, i64 1, !dbg !38
  %371 = and i1 %309, %370, !dbg !47
  %372 = or disjoint i32 %45, 1024, !dbg !48
  %373 = add nsw i32 %372, %35, !dbg !49
  %374 = add nsw i32 %373, %73, !dbg !50
  %375 = add nsw i32 %374, %75, !dbg !51
  %376 = add nsw i32 %107, 1024, !dbg !49
  %377 = add nsw i32 %376, %109, !dbg !50
  %378 = add nsw i32 %377, %45, !dbg !51
  %379 = add nsw i32 %143, 1024, !dbg !49
  %380 = add nsw i32 %379, %145, !dbg !50
  %381 = add nsw i32 %380, %45, !dbg !51
  %382 = add nsw i32 %179, 1024, !dbg !49
  %383 = add nsw i32 %382, %181, !dbg !50
  %384 = add nsw i32 %383, %45, !dbg !51
  %385 = or disjoint i32 %46, 1024, !dbg !48
  %386 = add nsw i32 %385, %39, !dbg !49
  %387 = add nsw i32 %386, %214, !dbg !50
  %388 = add nsw i32 %387, %216, !dbg !51
  %389 = add nsw i32 %385, %40, !dbg !49
  %390 = add nsw i32 %389, %247, !dbg !50
  %391 = add nsw i32 %390, %249, !dbg !51
  %392 = add nsw i32 %385, %41, !dbg !49
  %393 = add nsw i32 %392, %280, !dbg !50
  %394 = add nsw i32 %393, %282, !dbg !51
  %395 = add nsw i32 %385, %42, !dbg !49
  %396 = add nsw i32 %395, %313, !dbg !50
  %397 = add nsw i32 %396, %315, !dbg !51
  %398 = sext i32 %375 to i64, !dbg !52
  %399 = getelementptr float, ptr addrspace(1) %0, i64 %398, !dbg !52
  %400 = sext i32 %378 to i64, !dbg !52
  %401 = getelementptr float, ptr addrspace(1) %0, i64 %400, !dbg !52
  %402 = sext i32 %381 to i64, !dbg !52
  %403 = getelementptr float, ptr addrspace(1) %0, i64 %402, !dbg !52
  %404 = sext i32 %384 to i64, !dbg !52
  %405 = getelementptr float, ptr addrspace(1) %0, i64 %404, !dbg !52
  %406 = sext i32 %388 to i64, !dbg !52
  %407 = getelementptr float, ptr addrspace(1) %0, i64 %406, !dbg !52
  %408 = sext i32 %391 to i64, !dbg !52
  %409 = getelementptr float, ptr addrspace(1) %0, i64 %408, !dbg !52
  %410 = sext i32 %394 to i64, !dbg !52
  %411 = getelementptr float, ptr addrspace(1) %0, i64 %410, !dbg !52
  %412 = sext i32 %397 to i64, !dbg !52
  %413 = getelementptr float, ptr addrspace(1) %0, i64 %412, !dbg !52
  %414 = and i1 %17, %357, !dbg !53
  %415 = and i1 %359, %17, !dbg !53
  %416 = and i1 %361, %17, !dbg !53
  %417 = and i1 %363, %17, !dbg !53
  %418 = and i1 %18, %365, !dbg !53
  %419 = and i1 %18, %367, !dbg !53
  %420 = and i1 %18, %369, !dbg !53
  %421 = and i1 %18, %371, !dbg !53
  %422 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %399, i1 %414, i32 0, i1 %414) #1, !dbg !54
  %423 = bitcast i32 %422 to float, !dbg !54
  %424 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %401, i1 %415, i32 0, i1 %415) #1, !dbg !54
  %425 = bitcast i32 %424 to float, !dbg !54
  %426 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %403, i1 %416, i32 0, i1 %416) #1, !dbg !54
  %427 = bitcast i32 %426 to float, !dbg !54
  %428 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %405, i1 %417, i32 0, i1 %417) #1, !dbg !54
  %429 = bitcast i32 %428 to float, !dbg !54
  %430 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %407, i1 %418, i32 0, i1 %418) #1, !dbg !54
  %431 = bitcast i32 %430 to float, !dbg !54
  %432 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %409, i1 %419, i32 0, i1 %419) #1, !dbg !54
  %433 = bitcast i32 %432 to float, !dbg !54
  %434 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %411, i1 %420, i32 0, i1 %420) #1, !dbg !54
  %435 = bitcast i32 %434 to float, !dbg !54
  %436 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %413, i1 %421, i32 0, i1 %421) #1, !dbg !54
  %437 = bitcast i32 %436 to float, !dbg !54
  %438 = fadd float %348, %423, !dbg !55
  %439 = fadd float %349, %425, !dbg !55
  %440 = fadd float %350, %427, !dbg !55
  %441 = fadd float %351, %429, !dbg !55
  %442 = fadd float %352, %431, !dbg !55
  %443 = fadd float %353, %433, !dbg !55
  %444 = fadd float %354, %435, !dbg !55
  %445 = fadd float %355, %437, !dbg !55
  %446 = and i1 %85, %356, !dbg !38
  %447 = and i1 %118, %358, !dbg !38
  %448 = and i1 %154, %360, !dbg !38
  %449 = and i1 %190, %362, !dbg !38
  %450 = and i1 %224, %364, !dbg !38
  %451 = and i1 %257, %366, !dbg !38
  %452 = and i1 %290, %368, !dbg !38
  %453 = and i1 %323, %370, !dbg !38
  %454 = or disjoint i32 %45, 1536, !dbg !56
  %455 = add nsw i32 %454, %35, !dbg !57
  %456 = add nsw i32 %455, %73, !dbg !29
  %457 = add nsw i32 %456, %75, !dbg !31
  %458 = add nsw i32 %107, 1536, !dbg !57
  %459 = add nsw i32 %458, %109, !dbg !29
  %460 = add nsw i32 %459, %45, !dbg !31
  %461 = add nsw i32 %143, 1536, !dbg !57
  %462 = add nsw i32 %461, %145, !dbg !29
  %463 = add nsw i32 %462, %45, !dbg !31
  %464 = add nsw i32 %179, 1536, !dbg !57
  %465 = add nsw i32 %464, %181, !dbg !29
  %466 = add nsw i32 %465, %45, !dbg !31
  %467 = or disjoint i32 %46, 1536, !dbg !56
  %468 = add nsw i32 %467, %39, !dbg !57
  %469 = add nsw i32 %468, %214, !dbg !29
  %470 = add nsw i32 %469, %216, !dbg !31
  %471 = add nsw i32 %467, %40, !dbg !57
  %472 = add nsw i32 %471, %247, !dbg !29
  %473 = add nsw i32 %472, %249, !dbg !31
  %474 = add nsw i32 %467, %41, !dbg !57
  %475 = add nsw i32 %474, %280, !dbg !29
  %476 = add nsw i32 %475, %282, !dbg !31
  %477 = add nsw i32 %467, %42, !dbg !57
  %478 = add nsw i32 %477, %313, !dbg !29
  %479 = add nsw i32 %478, %315, !dbg !31
  %480 = sext i32 %457 to i64, !dbg !58
  %481 = getelementptr float, ptr addrspace(1) %0, i64 %480, !dbg !58
  %482 = sext i32 %460 to i64, !dbg !58
  %483 = getelementptr float, ptr addrspace(1) %0, i64 %482, !dbg !58
  %484 = sext i32 %463 to i64, !dbg !58
  %485 = getelementptr float, ptr addrspace(1) %0, i64 %484, !dbg !58
  %486 = sext i32 %466 to i64, !dbg !58
  %487 = getelementptr float, ptr addrspace(1) %0, i64 %486, !dbg !58
  %488 = sext i32 %470 to i64, !dbg !58
  %489 = getelementptr float, ptr addrspace(1) %0, i64 %488, !dbg !58
  %490 = sext i32 %473 to i64, !dbg !58
  %491 = getelementptr float, ptr addrspace(1) %0, i64 %490, !dbg !58
  %492 = sext i32 %476 to i64, !dbg !58
  %493 = getelementptr float, ptr addrspace(1) %0, i64 %492, !dbg !58
  %494 = sext i32 %479 to i64, !dbg !58
  %495 = getelementptr float, ptr addrspace(1) %0, i64 %494, !dbg !58
  %496 = and i1 %17, %446, !dbg !59
  %497 = and i1 %447, %17, !dbg !59
  %498 = and i1 %448, %17, !dbg !59
  %499 = and i1 %449, %17, !dbg !59
  %500 = and i1 %18, %450, !dbg !59
  %501 = and i1 %18, %451, !dbg !59
  %502 = and i1 %18, %452, !dbg !59
  %503 = and i1 %18, %453, !dbg !59
  %504 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %481, i1 %496, i32 0, i1 %496) #1, !dbg !60
  %505 = bitcast i32 %504 to float, !dbg !60
  %506 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %483, i1 %497, i32 0, i1 %497) #1, !dbg !60
  %507 = bitcast i32 %506 to float, !dbg !60
  %508 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %485, i1 %498, i32 0, i1 %498) #1, !dbg !60
  %509 = bitcast i32 %508 to float, !dbg !60
  %510 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %487, i1 %499, i32 0, i1 %499) #1, !dbg !60
  %511 = bitcast i32 %510 to float, !dbg !60
  %512 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %489, i1 %500, i32 0, i1 %500) #1, !dbg !60
  %513 = bitcast i32 %512 to float, !dbg !60
  %514 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %491, i1 %501, i32 0, i1 %501) #1, !dbg !60
  %515 = bitcast i32 %514 to float, !dbg !60
  %516 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %493, i1 %502, i32 0, i1 %502) #1, !dbg !60
  %517 = bitcast i32 %516 to float, !dbg !60
  %518 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %495, i1 %503, i32 0, i1 %503) #1, !dbg !60
  %519 = bitcast i32 %518 to float, !dbg !60
  %520 = fadd float %438, %505, !dbg !61
  %521 = fadd float %439, %507, !dbg !61
  %522 = fadd float %440, %509, !dbg !61
  %523 = fadd float %441, %511, !dbg !61
  %524 = fadd float %442, %513, !dbg !61
  %525 = fadd float %443, %515, !dbg !61
  %526 = fadd float %444, %517, !dbg !61
  %527 = fadd float %445, %519, !dbg !61
  %528 = select i1 %71, float 1.000000e+00, float 0.000000e+00, !dbg !62
  %529 = select i1 %104, float 1.000000e+00, float 0.000000e+00, !dbg !62
  %530 = select i1 %140, float 1.000000e+00, float 0.000000e+00, !dbg !62
  %531 = select i1 %176, float 1.000000e+00, float 0.000000e+00, !dbg !62
  %532 = select i1 %212, float 1.000000e+00, float 0.000000e+00, !dbg !62
  %533 = select i1 %245, float 1.000000e+00, float 0.000000e+00, !dbg !62
  %534 = select i1 %278, float 1.000000e+00, float 0.000000e+00, !dbg !62
  %535 = select i1 %311, float 1.000000e+00, float 0.000000e+00, !dbg !62
  %536 = select i1 %86, float 1.000000e+00, float 0.000000e+00, !dbg !63
  %537 = select i1 %119, float 1.000000e+00, float 0.000000e+00, !dbg !63
  %538 = select i1 %155, float 1.000000e+00, float 0.000000e+00, !dbg !63
  %539 = select i1 %191, float 1.000000e+00, float 0.000000e+00, !dbg !63
  %540 = select i1 %225, float 1.000000e+00, float 0.000000e+00, !dbg !63
  %541 = select i1 %258, float 1.000000e+00, float 0.000000e+00, !dbg !63
  %542 = select i1 %291, float 1.000000e+00, float 0.000000e+00, !dbg !63
  %543 = select i1 %324, float 1.000000e+00, float 0.000000e+00, !dbg !63
  %544 = fadd float %536, %528, !dbg !64
  %545 = fadd float %537, %529, !dbg !64
  %546 = fadd float %538, %530, !dbg !64
  %547 = fadd float %539, %531, !dbg !64
  %548 = fadd float %540, %532, !dbg !64
  %549 = fadd float %541, %533, !dbg !64
  %550 = fadd float %542, %534, !dbg !64
  %551 = fadd float %543, %535, !dbg !64
  %552 = select i1 %357, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %553 = select i1 %359, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %554 = select i1 %361, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %555 = select i1 %363, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %556 = select i1 %365, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %557 = select i1 %367, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %558 = select i1 %369, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %559 = select i1 %371, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %560 = fadd float %552, %544, !dbg !66
  %561 = fadd float %553, %545, !dbg !66
  %562 = fadd float %554, %546, !dbg !66
  %563 = fadd float %555, %547, !dbg !66
  %564 = fadd float %556, %548, !dbg !66
  %565 = fadd float %557, %549, !dbg !66
  %566 = fadd float %558, %550, !dbg !66
  %567 = fadd float %559, %551, !dbg !66
  %568 = select i1 %446, float 1.000000e+00, float 0.000000e+00, !dbg !67
  %569 = select i1 %447, float 1.000000e+00, float 0.000000e+00, !dbg !67
  %570 = select i1 %448, float 1.000000e+00, float 0.000000e+00, !dbg !67
  %571 = select i1 %449, float 1.000000e+00, float 0.000000e+00, !dbg !67
  %572 = select i1 %450, float 1.000000e+00, float 0.000000e+00, !dbg !67
  %573 = select i1 %451, float 1.000000e+00, float 0.000000e+00, !dbg !67
  %574 = select i1 %452, float 1.000000e+00, float 0.000000e+00, !dbg !67
  %575 = select i1 %453, float 1.000000e+00, float 0.000000e+00, !dbg !67
  %576 = fadd float %568, %560, !dbg !68
  %577 = fadd float %569, %561, !dbg !68
  %578 = fadd float %570, %562, !dbg !68
  %579 = fadd float %571, %563, !dbg !68
  %580 = fadd float %572, %564, !dbg !68
  %581 = fadd float %573, %565, !dbg !68
  %582 = fadd float %574, %566, !dbg !68
  %583 = fadd float %575, %567, !dbg !68
  %584 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %520, float %576) #1, !dbg !69
  %585 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %521, float %577) #1, !dbg !69
  %586 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %522, float %578) #1, !dbg !69
  %587 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %523, float %579) #1, !dbg !69
  %588 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %524, float %580) #1, !dbg !69
  %589 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %525, float %581) #1, !dbg !69
  %590 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %526, float %582) #1, !dbg !69
  %591 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %527, float %583) #1, !dbg !69
  %592 = sext i32 %9 to i64, !dbg !70
  %593 = getelementptr float, ptr addrspace(1) %1, i64 %592, !dbg !70
  %594 = sext i32 %13 to i64, !dbg !70
  %595 = getelementptr float, ptr addrspace(1) %1, i64 %594, !dbg !70
  %596 = bitcast float %584 to i32, !dbg !71
  %597 = bitcast float %585 to i32, !dbg !71
  %598 = bitcast float %586 to i32, !dbg !71
  %599 = bitcast float %587 to i32, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %596, i32 %597, i32 %598, i32 %599, ptr addrspace(1) %593, i1 %17) #1, !dbg !71
  %600 = bitcast float %588 to i32, !dbg !71
  %601 = bitcast float %589 to i32, !dbg !71
  %602 = bitcast float %590 to i32, !dbg !71
  %603 = bitcast float %591 to i32, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %600, i32 %601, i32 %602, i32 %603, ptr addrspace(1) %595, i1 %18) #1, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chgkzflrhipm44lhja4hca3jrlcveutdcnb6npsm4qawqceu4fmn.py", directory: "inductor_cache/hg")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_17", linkageName: "triton_poi_fused__adaptive_avg_pool2d_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 36, column: 81, scope: !7)
!20 = !DILocation(line: 36, column: 35, scope: !7)
!21 = !DILocation(line: 40, column: 37, scope: !7)
!22 = !DILocation(line: 40, column: 42, scope: !7)
!23 = !DILocation(line: 25, column: 19, scope: !7)
!24 = !DILocation(line: 32, column: 21, scope: !7)
!25 = !DILocation(line: 33, column: 25, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 35, column: 18, scope: !7)
!28 = !DILocation(line: 36, column: 40, scope: !7)
!29 = !DILocation(line: 48, column: 63, scope: !7)
!30 = !DILocation(line: 36, column: 55, scope: !7)
!31 = !DILocation(line: 48, column: 84, scope: !7)
!32 = !DILocation(line: 36, column: 76, scope: !7)
!33 = !DILocation(line: 36, column: 30, scope: !7)
!34 = !DILocation(line: 36, column: 93, scope: !7)
!35 = !DILocation(line: 36, column: 86, scope: !7)
!36 = !DILocation(line: 37, column: 16, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 39, column: 19, scope: !7)
!40 = !DILocation(line: 40, column: 62, scope: !7)
!41 = !DILocation(line: 40, column: 83, scope: !7)
!42 = !DILocation(line: 40, column: 31, scope: !7)
!43 = !DILocation(line: 40, column: 101, scope: !7)
!44 = !DILocation(line: 36, column: 61, scope: !7)
!45 = !DILocation(line: 40, column: 93, scope: !7)
!46 = !DILocation(line: 41, column: 20, scope: !7)
!47 = !DILocation(line: 44, column: 20, scope: !7)
!48 = !DILocation(line: 45, column: 38, scope: !7)
!49 = !DILocation(line: 45, column: 43, scope: !7)
!50 = !DILocation(line: 45, column: 63, scope: !7)
!51 = !DILocation(line: 45, column: 84, scope: !7)
!52 = !DILocation(line: 45, column: 31, scope: !7)
!53 = !DILocation(line: 45, column: 102, scope: !7)
!54 = !DILocation(line: 45, column: 94, scope: !7)
!55 = !DILocation(line: 46, column: 20, scope: !7)
!56 = !DILocation(line: 48, column: 38, scope: !7)
!57 = !DILocation(line: 48, column: 43, scope: !7)
!58 = !DILocation(line: 48, column: 31, scope: !7)
!59 = !DILocation(line: 48, column: 102, scope: !7)
!60 = !DILocation(line: 48, column: 94, scope: !7)
!61 = !DILocation(line: 49, column: 20, scope: !7)
!62 = !DILocation(line: 52, column: 34, scope: !7)
!63 = !DILocation(line: 55, column: 35, scope: !7)
!64 = !DILocation(line: 56, column: 20, scope: !7)
!65 = !DILocation(line: 59, column: 35, scope: !7)
!66 = !DILocation(line: 60, column: 20, scope: !7)
!67 = !DILocation(line: 63, column: 35, scope: !7)
!68 = !DILocation(line: 64, column: 20, scope: !7)
!69 = !DILocation(line: 65, column: 20, scope: !7)
!70 = !DILocation(line: 66, column: 25, scope: !7)
!71 = !DILocation(line: 66, column: 37, scope: !7)
!72 = !DILocation(line: 66, column: 4, scope: !7)
