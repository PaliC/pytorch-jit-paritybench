; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_convolution_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 3, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = and i32 %11, 7, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = icmp slt i32 %15, 16, !dbg !14
  %17 = shl i32 %11, 1, !dbg !15
  %18 = and i32 %17, 14, !dbg !15
  %19 = srem i32 %15, 4, !dbg !16
  %20 = shl i32 %15, 4, !dbg !17
  %21 = or disjoint i32 %20, %18, !dbg !18
  %22 = sext i32 %21 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !19
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !20
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !20
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !20
  %27 = bitcast i32 %25 to float, !dbg !20
  %28 = bitcast i32 %26 to float, !dbg !20
  %29 = sext i32 %19 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %16) #5, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %16) #5, !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #5, !dbg !23
  %35 = bitcast i32 %34 to float, !dbg !23
  %36 = fadd float %27, %33, !dbg !24
  %37 = fadd float %28, %33, !dbg !24
  %38 = fcmp ogt float %36, 0.000000e+00, !dbg !25
  %39 = fcmp ogt float %37, 0.000000e+00, !dbg !25
  %40 = fmul float %36, %35, !dbg !26
  %41 = fmul float %37, %35, !dbg !26
  %42 = select i1 %38, float %36, float %40, !dbg !27
  %43 = select i1 %39, float %37, float %41, !dbg !27
  %44 = fadd float %42, %43, !dbg !28
  %45 = select i1 %16, float %44, float 0.000000e+00, !dbg !28
  %46 = bitcast float %45 to i32, !dbg !33
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 4, i32 31), !dbg !33
  %48 = bitcast i32 %47 to float, !dbg !33
  %49 = fadd float %45, %48, !dbg !28
  %50 = bitcast float %49 to i32, !dbg !33
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 2, i32 31), !dbg !33
  %52 = bitcast i32 %51 to float, !dbg !33
  %53 = fadd float %49, %52, !dbg !28
  %54 = bitcast float %53 to i32, !dbg !33
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 1, i32 31), !dbg !33
  %56 = bitcast i32 %55 to float, !dbg !33
  %57 = fadd float %53, %56, !dbg !28
  %58 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !34
  %59 = bitcast float %57 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %59, i1 true) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %60 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !34
  %61 = load float, ptr addrspace(3) %60, align 4, !dbg !34
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float 1.600000e+01) #5, !dbg !34
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float 1.600000e+01) #5, !dbg !34
  %64 = fsub float %42, %63, !dbg !35
  %65 = fsub float %43, %63, !dbg !35
  %66 = fmul float %64, %64, !dbg !36
  %67 = fmul float %65, %65, !dbg !36
  %68 = fadd float %66, %67, !dbg !37
  %69 = select i1 %16, float %68, float 0.000000e+00, !dbg !37
  %70 = bitcast float %69 to i32, !dbg !39
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 4, i32 31), !dbg !39
  %72 = bitcast i32 %71 to float, !dbg !39
  %73 = fadd float %69, %72, !dbg !37
  %74 = bitcast float %73 to i32, !dbg !39
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 2, i32 31), !dbg !39
  %76 = bitcast i32 %75 to float, !dbg !39
  %77 = fadd float %73, %76, !dbg !37
  %78 = bitcast float %77 to i32, !dbg !39
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 1, i32 31), !dbg !39
  %80 = bitcast i32 %79 to float, !dbg !39
  %81 = fadd float %77, %80, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %82 = bitcast float %81 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %82, i1 true) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %83 = load float, ptr addrspace(3) %60, align 4, !dbg !40
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float 1.600000e+01) #5, !dbg !41
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %81, float 1.600000e+01) #5, !dbg !41
  %86 = fadd float %84, 0x3EE4F8B580000000, !dbg !42
  %87 = fadd float %85, 0x3EE4F8B580000000, !dbg !42
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %88, 0, !dbg !40
  br i1 %.not.i, label %91, label %89, !dbg !40

89:                                               ; preds = %8
  %90 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %86), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

91:                                               ; preds = %8
  %92 = tail call float @llvm.nvvm.rsqrt.approx.f(float %86), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %89, %91
  %.0.i = phi float [ %90, %89 ], [ %92, %91 ], !dbg !40
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i4 = icmp eq i32 %94, 0, !dbg !40
  br i1 %.not.i4, label %97, label %95, !dbg !40

95:                                               ; preds = %__nv_rsqrtf.exit
  %96 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %87), !dbg !40
  br label %__nv_rsqrtf.exit6, !dbg !40

97:                                               ; preds = %__nv_rsqrtf.exit
  %98 = tail call float @llvm.nvvm.rsqrt.approx.f(float %87), !dbg !40
  br label %__nv_rsqrtf.exit6, !dbg !40

__nv_rsqrtf.exit6:                                ; preds = %95, %97
  %.0.i5 = phi float [ %96, %95 ], [ %98, %97 ], !dbg !40
  %99 = or disjoint i32 %10, %14, !dbg !13
  %100 = icmp slt i32 %99, 16, !dbg !14
  %101 = fmul float %64, %.0.i5, !dbg !43
  %102 = fmul float %65, %.0.i5, !dbg !43
  %103 = bitcast float %36 to i32, !dbg !44
  %104 = bitcast float %37 to i32, !dbg !44
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %103, i32 %104, ptr addrspace(1) %23, i1 %16) #5, !dbg !44
  %105 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !45
  %106 = bitcast float %101 to i32, !dbg !46
  %107 = bitcast float %102 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %106, i32 %107, ptr addrspace(1) %105, i1 %16) #5, !dbg !46
  %108 = sext i32 %99 to i64, !dbg !47
  %109 = getelementptr float, ptr addrspace(1) %5, i64 %108, !dbg !47
  %110 = and i32 %11, 56, !dbg !48
  %111 = icmp eq i32 %110, 0, !dbg !48
  %112 = bitcast float %.0.i to i32, !dbg !48
  %113 = and i1 %111, %100, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %112, ptr addrspace(1) %109, i1 %113) #5, !dbg !48
  %114 = getelementptr float, ptr addrspace(1) %3, i64 %108, !dbg !49
  %115 = bitcast float %62 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %115, ptr addrspace(1) %114, i1 %113) #5, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6lwvhljscjri63nwgvqb2n4xegmr7fl57azlox76lqlpajmh5cf.py", directory: "inductor_cache/6l")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_convolution_1", linkageName: "triton_per_fused__native_batch_norm_legit_convolution_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 42, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 34, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 19, scope: !7)
!24 = !DILocation(line: 36, column: 18, scope: !7)
!25 = !DILocation(line: 38, column: 18, scope: !7)
!26 = !DILocation(line: 39, column: 18, scope: !7)
!27 = !DILocation(line: 40, column: 32, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!32 = !DILocation(line: 45, column: 26, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 48, column: 20, scope: !7)
!35 = !DILocation(line: 49, column: 19, scope: !7)
!36 = !DILocation(line: 50, column: 20, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !38)
!38 = !DILocation(line: 53, column: 26, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !38)
!40 = !DILocation(line: 59, column: 28, scope: !7)
!41 = !DILocation(line: 56, column: 20, scope: !7)
!42 = !DILocation(line: 58, column: 20, scope: !7)
!43 = !DILocation(line: 60, column: 20, scope: !7)
!44 = !DILocation(line: 61, column: 47, scope: !7)
!45 = !DILocation(line: 62, column: 25, scope: !7)
!46 = !DILocation(line: 62, column: 45, scope: !7)
!47 = !DILocation(line: 63, column: 25, scope: !7)
!48 = !DILocation(line: 63, column: 37, scope: !7)
!49 = !DILocation(line: 64, column: 25, scope: !7)
!50 = !DILocation(line: 64, column: 37, scope: !7)
!51 = !DILocation(line: 64, column: 4, scope: !7)
