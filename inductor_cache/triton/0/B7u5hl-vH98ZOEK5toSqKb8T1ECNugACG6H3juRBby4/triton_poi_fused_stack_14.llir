; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_stack_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 510, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = sdiv i32 %13, 65536, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %15 = sdiv i32 %.frozen, 256, !dbg !15
  %16 = mul i32 %15, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = srem i32 %15, 256, !dbg !17
  %18 = icmp slt i32 %13, 262144, !dbg !18
  %19 = shl nsw i32 %17, 9, !dbg !19
  %20 = shl i32 %14, 17, !dbg !20
  %21 = add i32 %19, %20, !dbg !21
  %22 = add i32 %21, %.decomposed, !dbg !22
  %23 = sext i32 %22 to i64, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !23
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !24
  %26 = sext i32 %.decomposed to i64, !dbg !25
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !25
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %27, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !27
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !28
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !28
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !28
  %33 = bitcast i32 %31 to float, !dbg !28
  %34 = bitcast i32 %32 to float, !dbg !28
  %35 = fadd float %33, 0x3EE4F8B580000000, !dbg !29
  %36 = fadd float %34, 0x3EE4F8B580000000, !dbg !29
  %37 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %37, 0, !dbg !30
  %38 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %38, 0, !dbg !30
  br i1 %.not.i, label %44, label %39, !dbg !30

39:                                               ; preds = %7
  br i1 %.not1.i, label %42, label %40, !dbg !30

40:                                               ; preds = %39
  %41 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %35) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

42:                                               ; preds = %39
  %43 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %35) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

44:                                               ; preds = %7
  br i1 %.not1.i, label %47, label %45, !dbg !30

45:                                               ; preds = %44
  %46 = tail call float @llvm.nvvm.sqrt.rn.f(float %35) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

47:                                               ; preds = %44
  %48 = tail call float @llvm.nvvm.sqrt.approx.f(float %35) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %40, %42, %45, %47
  %.0.i = phi float [ %41, %40 ], [ %43, %42 ], [ %46, %45 ], [ %48, %47 ], !dbg !30
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %49, 0, !dbg !30
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %50, 0, !dbg !30
  br i1 %.not.i1, label %56, label %51, !dbg !30

51:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %54, label %52, !dbg !30

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %36) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %36) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

56:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %59, label %57, !dbg !30

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.f(float %36) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.f(float %36) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %52, %54, %57, %59
  %.0.i3 = phi float [ %53, %52 ], [ %55, %54 ], [ %58, %57 ], [ %60, %59 ], !dbg !30
  %61 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !32
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %63, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !33
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !34
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %65, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !35
  %67 = icmp sgt i32 %13, 262143, !dbg !36
  %68 = add nsw i32 %.decomposed, 256, !dbg !37
  %69 = add i32 %20, -524288, !dbg !38
  %70 = add i32 %69, %68, !dbg !39
  %71 = add i32 %70, %19, !dbg !40
  %72 = sext i32 %71 to i64, !dbg !41
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !41
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %73, i1 %67, i32 0, i1 %67, i32 0, i1 %67) #3, !dbg !42
  %75 = zext nneg i32 %68 to i64, !dbg !43
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !43
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %76, i1 %67, i32 0, i1 %67, i32 0, i1 %67) #3, !dbg !44
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !45
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %78, i1 %67, i32 0, i1 %67, i32 0, i1 %67) #3, !dbg !46
  %80 = extractvalue { i32, i32 } %79, 0, !dbg !46
  %81 = extractvalue { i32, i32 } %79, 1, !dbg !46
  %82 = bitcast i32 %80 to float, !dbg !46
  %83 = bitcast i32 %81 to float, !dbg !46
  %84 = fadd float %82, 0x3EE4F8B580000000, !dbg !47
  %85 = fadd float %83, 0x3EE4F8B580000000, !dbg !47
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i6 = icmp eq i32 %86, 0, !dbg !48
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i9 = icmp eq i32 %87, 0, !dbg !48
  br i1 %.not.i6, label %93, label %88, !dbg !48

88:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %91, label %89, !dbg !48

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !48
  br label %__nv_sqrtf.exit10, !dbg !48

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !48
  br label %__nv_sqrtf.exit10, !dbg !48

93:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %96, label %94, !dbg !48

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !48
  br label %__nv_sqrtf.exit10, !dbg !48

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !48
  br label %__nv_sqrtf.exit10, !dbg !48

__nv_sqrtf.exit10:                                ; preds = %89, %91, %94, %96
  %.0.i8 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !48
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i11 = icmp eq i32 %98, 0, !dbg !48
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i14 = icmp eq i32 %99, 0, !dbg !48
  br i1 %.not.i11, label %105, label %100, !dbg !48

100:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %103, label %101, !dbg !48

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !48
  br label %__nv_sqrtf.exit15, !dbg !48

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !48
  br label %__nv_sqrtf.exit15, !dbg !48

105:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %108, label %106, !dbg !48

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !48
  br label %__nv_sqrtf.exit15, !dbg !48

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !48
  br label %__nv_sqrtf.exit15, !dbg !48

__nv_sqrtf.exit15:                                ; preds = %101, %103, %106, %108
  %.0.i13 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !48
  %110 = extractvalue { i32, i32 } %74, 1, !dbg !42
  %111 = extractvalue { i32, i32 } %77, 1, !dbg !44
  %112 = extractvalue { i32, i32 } %74, 0, !dbg !42
  %113 = extractvalue { i32, i32 } %77, 0, !dbg !44
  %114 = extractvalue { i32, i32 } %25, 1, !dbg !24
  %115 = extractvalue { i32, i32 } %28, 1, !dbg !26
  %116 = extractvalue { i32, i32 } %64, 1, !dbg !33
  %117 = extractvalue { i32, i32 } %66, 1, !dbg !35
  %118 = extractvalue { i32, i32 } %25, 0, !dbg !24
  %119 = extractvalue { i32, i32 } %28, 0, !dbg !26
  %120 = extractvalue { i32, i32 } %64, 0, !dbg !33
  %121 = extractvalue { i32, i32 } %66, 0, !dbg !35
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !49
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !49
  %124 = getelementptr float, ptr addrspace(1) %3, i64 %75, !dbg !50
  %125 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %124, i1 %67, i32 0, i1 %67, i32 0, i1 %67) #3, !dbg !51
  %126 = extractvalue { i32, i32 } %125, 0, !dbg !51
  %127 = extractvalue { i32, i32 } %125, 1, !dbg !51
  %128 = getelementptr float, ptr addrspace(1) %4, i64 %75, !dbg !52
  %129 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %128, i1 %67, i32 0, i1 %67, i32 0, i1 %67) #3, !dbg !53
  %130 = extractvalue { i32, i32 } %129, 0, !dbg !53
  %131 = extractvalue { i32, i32 } %129, 1, !dbg !53
  %132 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !42
  %133 = insertelement <4 x i32> %132, i32 %112, i64 1, !dbg !42
  %134 = insertelement <4 x i32> %133, i32 %118, i64 2, !dbg !42
  %135 = insertelement <4 x i32> %134, i32 %114, i64 3, !dbg !42
  %136 = bitcast <4 x i32> %135 to <4 x float>, !dbg !42
  %137 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !44
  %138 = insertelement <4 x i32> %137, i32 %113, i64 1, !dbg !44
  %139 = insertelement <4 x i32> %138, i32 %119, i64 2, !dbg !44
  %140 = insertelement <4 x i32> %139, i32 %115, i64 3, !dbg !44
  %141 = bitcast <4 x i32> %140 to <4 x float>, !dbg !44
  %142 = fsub <4 x float> %136, %141, !dbg !54
  %143 = insertelement <4 x float> poison, float %123, i64 0, !dbg !55
  %144 = insertelement <4 x float> %143, float %122, i64 1, !dbg !55
  %145 = insertelement <4 x float> %144, float %61, i64 2, !dbg !55
  %146 = insertelement <4 x float> %145, float %62, i64 3, !dbg !55
  %147 = fmul <4 x float> %142, %146, !dbg !55
  %148 = insertelement <4 x i32> poison, i32 %127, i64 0, !dbg !51
  %149 = insertelement <4 x i32> %148, i32 %126, i64 1, !dbg !51
  %150 = insertelement <4 x i32> %149, i32 %120, i64 2, !dbg !51
  %151 = insertelement <4 x i32> %150, i32 %116, i64 3, !dbg !51
  %152 = bitcast <4 x i32> %151 to <4 x float>, !dbg !51
  %153 = fmul <4 x float> %147, %152, !dbg !56
  %154 = insertelement <4 x i32> poison, i32 %131, i64 0, !dbg !53
  %155 = insertelement <4 x i32> %154, i32 %130, i64 1, !dbg !53
  %156 = insertelement <4 x i32> %155, i32 %121, i64 2, !dbg !53
  %157 = insertelement <4 x i32> %156, i32 %117, i64 3, !dbg !53
  %158 = bitcast <4 x i32> %157 to <4 x float>, !dbg !53
  %159 = fadd <4 x float> %153, %158, !dbg !57
  %160 = fcmp olt <4 x float> %159, zeroinitializer, !dbg !58
  %161 = extractelement <4 x i1> %160, i64 3, !dbg !62
  %162 = extractelement <4 x float> %159, i64 3, !dbg !62
  %163 = select i1 %161, float 0.000000e+00, float %162, !dbg !62
  %164 = extractelement <4 x i1> %160, i64 2, !dbg !62
  %165 = extractelement <4 x float> %159, i64 2, !dbg !62
  %166 = select i1 %164, float 0.000000e+00, float %165, !dbg !62
  %167 = extractelement <4 x i1> %160, i64 1, !dbg !64
  %168 = extractelement <4 x float> %159, i64 1, !dbg !64
  %169 = select i1 %167, float 0.000000e+00, float %168, !dbg !64
  %170 = extractelement <4 x i1> %160, i64 0, !dbg !64
  %171 = extractelement <4 x float> %159, i64 0, !dbg !64
  %172 = select i1 %170, float 0.000000e+00, float %171, !dbg !64
  %173 = select i1 %18, float %166, float %169, !dbg !65
  %174 = select i1 %18, float %163, float %172, !dbg !65
  %175 = sext i32 %13 to i64, !dbg !66
  %176 = getelementptr float, ptr addrspace(1) %5, i64 %175, !dbg !66
  %177 = bitcast float %173 to i32, !dbg !67
  %178 = bitcast float %174 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %177, i32 %178, ptr addrspace(1) %176, i1 true) #3, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbxfo4uibkqwcdqwfym2zr4t4cxxuajleytlmmvy6dhi6sbd4wjf.py", directory: "inductor_cache/bx")
!4 = !{ptr @triton_poi_fused_stack_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_stack_14, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_stack_14", linkageName: "triton_poi_fused_stack_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 28, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 39, scope: !7)
!20 = !DILocation(line: 33, column: 52, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 44, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 58, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 39, column: 27, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 45, column: 31, scope: !7)
!33 = !DILocation(line: 45, column: 36, scope: !7)
!34 = !DILocation(line: 47, column: 31, scope: !7)
!35 = !DILocation(line: 47, column: 36, scope: !7)
!36 = !DILocation(line: 53, column: 20, scope: !7)
!37 = !DILocation(line: 56, column: 37, scope: !7)
!38 = !DILocation(line: 56, column: 42, scope: !7)
!39 = !DILocation(line: 56, column: 59, scope: !7)
!40 = !DILocation(line: 56, column: 51, scope: !7)
!41 = !DILocation(line: 56, column: 31, scope: !7)
!42 = !DILocation(line: 56, column: 72, scope: !7)
!43 = !DILocation(line: 57, column: 31, scope: !7)
!44 = !DILocation(line: 57, column: 42, scope: !7)
!45 = !DILocation(line: 59, column: 31, scope: !7)
!46 = !DILocation(line: 59, column: 42, scope: !7)
!47 = !DILocation(line: 61, column: 20, scope: !7)
!48 = !DILocation(line: 62, column: 27, scope: !7)
!49 = !DILocation(line: 64, column: 20, scope: !7)
!50 = !DILocation(line: 68, column: 31, scope: !7)
!51 = !DILocation(line: 68, column: 42, scope: !7)
!52 = !DILocation(line: 70, column: 31, scope: !7)
!53 = !DILocation(line: 70, column: 42, scope: !7)
!54 = !DILocation(line: 58, column: 20, scope: !7)
!55 = !DILocation(line: 67, column: 20, scope: !7)
!56 = !DILocation(line: 69, column: 20, scope: !7)
!57 = !DILocation(line: 71, column: 20, scope: !7)
!58 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !61)
!59 = distinct !DILexicalBlockFile(scope: !7, file: !60, discriminator: 0)
!60 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!61 = !DILocation(line: 73, column: 42, scope: !7)
!62 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !63)
!63 = !DILocation(line: 50, column: 42, scope: !7)
!64 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !61)
!65 = !DILocation(line: 0, scope: !7)
!66 = !DILocation(line: 77, column: 25, scope: !7)
!67 = !DILocation(line: 77, column: 37, scope: !7)
!68 = !DILocation(line: 77, column: 4, scope: !7)
