; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_41(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, i32 %17) local_unnamed_addr !dbg !7 {
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %20 = shl i32 %19, 8, !dbg !11
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %22 = shl i32 %21, 1, !dbg !12
  %23 = and i32 %22, 254, !dbg !12
  %24 = or disjoint i32 %20, %23, !dbg !13
  %25 = sdiv i32 %24, 16, !dbg !14
  %26 = srem i32 %25, 64, !dbg !15
  %27 = sext i32 %24 to i64, !dbg !16
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !16
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !17
  %30 = sext i32 %26 to i64, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !18
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !21
  %36 = bitcast i32 %35 to float, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !21
  %38 = bitcast i32 %37 to float, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !22
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !26
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !27
  %47 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !28
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !29
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !29
  %50 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !30
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !31
  %52 = bitcast i32 %51 to float, !dbg !31
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !31
  %54 = bitcast i32 %53 to float, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !32
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !33
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !33
  %58 = getelementptr float, ptr addrspace(1) %9, i64 %30, !dbg !34
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !35
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !35
  %61 = getelementptr float, ptr addrspace(1) %10, i64 %30, !dbg !36
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !37
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !37
  %64 = getelementptr float, ptr addrspace(1) %11, i64 %27, !dbg !38
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !39
  %66 = getelementptr float, ptr addrspace(1) %12, i64 %30, !dbg !40
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !41
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !41
  %69 = getelementptr float, ptr addrspace(1) %13, i64 %27, !dbg !42
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !43
  %71 = fadd float %36, 0x3EE4F8B580000000, !dbg !44
  %72 = fadd float %38, 0x3EE4F8B580000000, !dbg !44
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i = icmp eq i32 %73, 0, !dbg !45
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i = icmp eq i32 %74, 0, !dbg !45
  br i1 %.not.i, label %80, label %75, !dbg !45

75:                                               ; preds = %18
  br i1 %.not1.i, label %78, label %76, !dbg !45

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

80:                                               ; preds = %18
  br i1 %.not1.i, label %83, label %81, !dbg !45

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %76, %78, %81, %83
  %.0.i = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !45
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i1 = icmp eq i32 %85, 0, !dbg !45
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i4 = icmp eq i32 %86, 0, !dbg !45
  br i1 %.not.i1, label %92, label %87, !dbg !45

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %90, label %88, !dbg !45

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %95, label %93, !dbg !45

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

__nv_sqrtf.exit5:                                 ; preds = %88, %90, %93, %95
  %.0.i3 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !45
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !46
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !46
  %99 = fadd float %52, 0x3EE4F8B580000000, !dbg !47
  %100 = fadd float %54, 0x3EE4F8B580000000, !dbg !47
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i6 = icmp eq i32 %101, 0, !dbg !48
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i9 = icmp eq i32 %102, 0, !dbg !48
  br i1 %.not.i6, label %108, label %103, !dbg !48

103:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %106, label %104, !dbg !48

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !48
  br label %__nv_sqrtf.exit10, !dbg !48

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !48
  br label %__nv_sqrtf.exit10, !dbg !48

108:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %111, label %109, !dbg !48

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !48
  br label %__nv_sqrtf.exit10, !dbg !48

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !48
  br label %__nv_sqrtf.exit10, !dbg !48

__nv_sqrtf.exit10:                                ; preds = %104, %106, %109, %111
  %.0.i8 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !48
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i11 = icmp eq i32 %113, 0, !dbg !48
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i14 = icmp eq i32 %114, 0, !dbg !48
  br i1 %.not.i11, label %120, label %115, !dbg !48

115:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %118, label %116, !dbg !48

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !48
  br label %__nv_sqrtf.exit15, !dbg !48

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !48
  br label %__nv_sqrtf.exit15, !dbg !48

120:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %123, label %121, !dbg !48

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !48
  br label %__nv_sqrtf.exit15, !dbg !48

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !48
  br label %__nv_sqrtf.exit15, !dbg !48

__nv_sqrtf.exit15:                                ; preds = %116, %118, %121, %123
  %.0.i13 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !48
  %125 = extractvalue { i32, i32 } %46, 1, !dbg !27
  %126 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !19
  %127 = insertelement <2 x i32> %126, i32 %49, i64 1, !dbg !19
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !19
  %129 = extractvalue { i32, i32 } %46, 0, !dbg !27
  %130 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !19
  %131 = insertelement <2 x i32> %130, i32 %48, i64 1, !dbg !19
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !19
  %133 = extractvalue { i32, i32 } %29, 1, !dbg !17
  %134 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !23
  %135 = insertelement <2 x i32> %134, i32 %57, i64 1, !dbg !23
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !23
  %137 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !25
  %138 = insertelement <2 x i32> %137, i32 %60, i64 1, !dbg !25
  %139 = bitcast <2 x i32> %138 to <2 x float>, !dbg !25
  %140 = extractvalue { i32, i32 } %29, 0, !dbg !17
  %141 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !23
  %142 = insertelement <2 x i32> %141, i32 %56, i64 1, !dbg !23
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !23
  %144 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !25
  %145 = insertelement <2 x i32> %144, i32 %59, i64 1, !dbg !25
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !25
  %147 = extractvalue { i32, i32 } %70, 1, !dbg !43
  %148 = extractvalue { i32, i32 } %70, 0, !dbg !43
  %149 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !37
  %150 = insertelement <2 x i32> %149, i32 %68, i64 1, !dbg !37
  %151 = bitcast <2 x i32> %150 to <2 x float>, !dbg !37
  %152 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !37
  %153 = insertelement <2 x i32> %152, i32 %67, i64 1, !dbg !37
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !37
  %155 = extractvalue { i32, i32 } %65, 1, !dbg !39
  %156 = extractvalue { i32, i32 } %65, 0, !dbg !39
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !49
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !49
  %159 = insertelement <2 x i32> poison, i32 %140, i64 0, !dbg !17
  %160 = insertelement <2 x i32> %159, i32 %129, i64 1, !dbg !17
  %161 = bitcast <2 x i32> %160 to <2 x float>, !dbg !17
  %162 = fsub <2 x float> %161, %132, !dbg !50
  %163 = insertelement <2 x i32> poison, i32 %156, i64 0, !dbg !39
  %164 = insertelement <2 x i32> %163, i32 %148, i64 1, !dbg !39
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !39
  %166 = insertelement <2 x float> poison, float %97, i64 0, !dbg !51
  %167 = insertelement <2 x float> %166, float %157, i64 1, !dbg !51
  %168 = fmul <2 x float> %162, %167, !dbg !51
  %169 = fmul <2 x float> %168, %143, !dbg !52
  %170 = fadd <2 x float> %169, %146, !dbg !53
  %171 = fcmp ogt <2 x float> %170, zeroinitializer, !dbg !54
  %172 = fmul <2 x float> %170, %154, !dbg !55
  %173 = select <2 x i1> %171, <2 x float> %170, <2 x float> %172, !dbg !56
  %174 = fadd <2 x float> %173, %165, !dbg !57
  %175 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !17
  %176 = insertelement <2 x i32> %175, i32 %125, i64 1, !dbg !17
  %177 = bitcast <2 x i32> %176 to <2 x float>, !dbg !17
  %178 = fsub <2 x float> %177, %128, !dbg !50
  %179 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !39
  %180 = insertelement <2 x i32> %179, i32 %147, i64 1, !dbg !39
  %181 = bitcast <2 x i32> %180 to <2 x float>, !dbg !39
  %182 = insertelement <2 x float> poison, float %98, i64 0, !dbg !51
  %183 = insertelement <2 x float> %182, float %158, i64 1, !dbg !51
  %184 = fmul <2 x float> %178, %183, !dbg !51
  %185 = fmul <2 x float> %184, %136, !dbg !52
  %186 = fadd <2 x float> %185, %139, !dbg !53
  %187 = fcmp ogt <2 x float> %186, zeroinitializer, !dbg !54
  %188 = fmul <2 x float> %186, %151, !dbg !55
  %189 = select <2 x i1> %187, <2 x float> %186, <2 x float> %188, !dbg !56
  %190 = fadd <2 x float> %189, %181, !dbg !57
  %shift = shufflevector <2 x float> %174, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !58
  %191 = fadd <2 x float> %174, %shift, !dbg !58
  %shift16 = shufflevector <2 x float> %190, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !58
  %192 = fadd <2 x float> %190, %shift16, !dbg !58
  %193 = getelementptr float, ptr addrspace(1) %14, i64 %27, !dbg !59
  %bc = bitcast <2 x float> %170 to <2 x i32>, !dbg !60
  %194 = extractelement <2 x i32> %bc, i64 0, !dbg !60
  %bc17 = bitcast <2 x float> %186 to <2 x i32>, !dbg !60
  %195 = extractelement <2 x i32> %bc17, i64 0, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %194, i32 %195, ptr addrspace(1) %193, i1 true) #3, !dbg !60
  %196 = getelementptr float, ptr addrspace(1) %15, i64 %27, !dbg !61
  %bc18 = bitcast <2 x float> %170 to <2 x i32>, !dbg !62
  %197 = extractelement <2 x i32> %bc18, i64 1, !dbg !62
  %bc19 = bitcast <2 x float> %186 to <2 x i32>, !dbg !62
  %198 = extractelement <2 x i32> %bc19, i64 1, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %197, i32 %198, ptr addrspace(1) %196, i1 true) #3, !dbg !62
  %199 = getelementptr float, ptr addrspace(1) %16, i64 %27, !dbg !63
  %bc20 = bitcast <2 x float> %191 to <2 x i32>, !dbg !64
  %200 = extractelement <2 x i32> %bc20, i64 0, !dbg !64
  %bc21 = bitcast <2 x float> %192 to <2 x i32>, !dbg !64
  %201 = extractelement <2 x i32> %bc21, i64 0, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %200, i32 %201, ptr addrspace(1) %199, i1 true) #3, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxg7yiaft6fj2tktxpi2v5ih4aw6bunfeegmoi3lnbtug46dtfsf.py", directory: "inductor_cache/xg")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_41, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_41, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_41", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_41", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 32, scope: !7)
!37 = !DILocation(line: 36, column: 37, scope: !7)
!38 = !DILocation(line: 37, column: 32, scope: !7)
!39 = !DILocation(line: 37, column: 37, scope: !7)
!40 = !DILocation(line: 38, column: 32, scope: !7)
!41 = !DILocation(line: 38, column: 37, scope: !7)
!42 = !DILocation(line: 39, column: 32, scope: !7)
!43 = !DILocation(line: 39, column: 37, scope: !7)
!44 = !DILocation(line: 42, column: 18, scope: !7)
!45 = !DILocation(line: 43, column: 26, scope: !7)
!46 = !DILocation(line: 45, column: 18, scope: !7)
!47 = !DILocation(line: 52, column: 20, scope: !7)
!48 = !DILocation(line: 53, column: 27, scope: !7)
!49 = !DILocation(line: 54, column: 19, scope: !7)
!50 = !DILocation(line: 40, column: 18, scope: !7)
!51 = !DILocation(line: 48, column: 19, scope: !7)
!52 = !DILocation(line: 49, column: 20, scope: !7)
!53 = !DILocation(line: 50, column: 20, scope: !7)
!54 = !DILocation(line: 60, column: 20, scope: !7)
!55 = !DILocation(line: 61, column: 20, scope: !7)
!56 = !DILocation(line: 62, column: 35, scope: !7)
!57 = !DILocation(line: 63, column: 20, scope: !7)
!58 = !DILocation(line: 68, column: 20, scope: !7)
!59 = !DILocation(line: 69, column: 25, scope: !7)
!60 = !DILocation(line: 69, column: 37, scope: !7)
!61 = !DILocation(line: 70, column: 25, scope: !7)
!62 = !DILocation(line: 70, column: 37, scope: !7)
!63 = !DILocation(line: 71, column: 25, scope: !7)
!64 = !DILocation(line: 71, column: 37, scope: !7)
!65 = !DILocation(line: 71, column: 4, scope: !7)
