; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_7 = internal constant [8 x i8] c"unknown\00"
@assertFile_7 = internal constant [74 x i8] c"inductor_cache/bg/cbgpj6gdmdxonyndx2gg6smoifzo4c24xla4psoi25r77pa7wwdc.py\00"
@assertMessage_7 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp93 < 4\00"
@assertFunc_6 = internal constant [8 x i8] c"unknown\00"
@assertFile_6 = internal constant [74 x i8] c"inductor_cache/bg/cbgpj6gdmdxonyndx2gg6smoifzo4c24xla4psoi25r77pa7wwdc.py\00"
@assertMessage_6 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp88 < 4\00"
@assertFunc_5 = internal constant [8 x i8] c"unknown\00"
@assertFile_5 = internal constant [74 x i8] c"inductor_cache/bg/cbgpj6gdmdxonyndx2gg6smoifzo4c24xla4psoi25r77pa7wwdc.py\00"
@assertMessage_5 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp76 < 4\00"
@assertFunc_4 = internal constant [8 x i8] c"unknown\00"
@assertFile_4 = internal constant [74 x i8] c"inductor_cache/bg/cbgpj6gdmdxonyndx2gg6smoifzo4c24xla4psoi25r77pa7wwdc.py\00"
@assertMessage_4 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp71 < 4\00"
@assertFunc_3 = internal constant [8 x i8] c"unknown\00"
@assertFile_3 = internal constant [74 x i8] c"inductor_cache/bg/cbgpj6gdmdxonyndx2gg6smoifzo4c24xla4psoi25r77pa7wwdc.py\00"
@assertMessage_3 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp55 < 4\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/bg/cbgpj6gdmdxonyndx2gg6smoifzo4c24xla4psoi25r77pa7wwdc.py\00"
@assertMessage_2 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp49 < 4\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/bg/cbgpj6gdmdxonyndx2gg6smoifzo4c24xla4psoi25r77pa7wwdc.py\00"
@assertMessage_1 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp31 < 4\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/bg/cbgpj6gdmdxonyndx2gg6smoifzo4c24xla4psoi25r77pa7wwdc.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp25 < 4\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_grid_sampler_2d_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !11 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %6 = shl i32 %5, 9, !dbg !13
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %8 = shl i32 %7, 1, !dbg !14
  %9 = and i32 %8, 510, !dbg !14
  %10 = or disjoint i32 %6, %9, !dbg !15
  %11 = or disjoint i32 %10, 1, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %12 = sdiv i32 %.frozen, 50176, !dbg !16
  %13 = mul i32 %12, 50176, !dbg !17
  %.decomposed = sub i32 %.frozen, %13, !dbg !17
  %14 = srem i32 %11, 50176, !dbg !17
  %15 = sdiv i32 %10, 200704, !dbg !18
  %16 = shl nsw i32 %.decomposed, 1, !dbg !19
  %17 = shl nsw i32 %14, 1, !dbg !19
  %18 = mul nsw i32 %15, 100352, !dbg !20
  %19 = add nsw i32 %16, %18, !dbg !21
  %20 = add nsw i32 %18, %17, !dbg !21
  %21 = sext i32 %19 to i64, !dbg !22
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !22
  %23 = sext i32 %20 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !22
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #4, !dbg !23
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #4, !dbg !23
  %27 = or disjoint i32 %16, 1, !dbg !24
  %28 = or disjoint i32 %17, 1, !dbg !24
  %29 = add nsw i32 %27, %18, !dbg !25
  %30 = add nsw i32 %28, %18, !dbg !25
  %31 = sext i32 %29 to i64, !dbg !26
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !26
  %33 = sext i32 %30 to i64, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !26
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #4, !dbg !27
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #4, !dbg !27
  %37 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %38 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %40 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !27
  %41 = insertelement <2 x i32> %40, i32 %25, i64 1, !dbg !27
  %42 = bitcast <2 x i32> %41 to <2 x float>, !dbg !27
  %43 = fmul <2 x float> %42, splat (float 2.000000e+00), !dbg !30
  %44 = fadd <2 x float> %43, splat (float 1.500000e+00), !dbg !31
  %45 = extractelement <2 x float> %44, i64 1, !dbg !31
  %46 = tail call float @llvm.nvvm.floor.ftz.f(float %45), !dbg !28
  %47 = tail call float @llvm.nvvm.floor.f(float %45), !dbg !28
  %48 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !29
  %49 = insertelement <2 x i32> %48, i32 %37, i64 1, !dbg !29
  %50 = icmp eq <2 x i32> %49, zeroinitializer, !dbg !29
  %51 = extractelement <2 x float> %44, i64 0, !dbg !29
  %52 = tail call float @llvm.nvvm.floor.ftz.f(float %51), !dbg !29
  %53 = tail call float @llvm.nvvm.floor.f(float %51), !dbg !29
  %54 = insertelement <2 x float> poison, float %53, i64 0, !dbg !29
  %55 = insertelement <2 x float> %54, float %47, i64 1, !dbg !29
  %56 = insertelement <2 x float> poison, float %52, i64 0, !dbg !29
  %57 = insertelement <2 x float> %56, float %46, i64 1, !dbg !29
  %58 = select <2 x i1> %50, <2 x float> %55, <2 x float> %57, !dbg !29
  %59 = extractelement <2 x float> %58, i64 1, !dbg !29
  %60 = fcmp oge float %59, 0.000000e+00, !dbg !32
  %61 = fcmp olt float %59, 4.000000e+00, !dbg !33
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %63 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !27
  %64 = insertelement <2 x i32> %63, i32 %26, i64 1, !dbg !27
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !27
  %66 = fmul <2 x float> %65, splat (float 2.000000e+00), !dbg !30
  %67 = fadd <2 x float> %66, splat (float 1.500000e+00), !dbg !31
  %68 = extractelement <2 x float> %67, i64 1, !dbg !31
  %69 = tail call float @llvm.nvvm.floor.ftz.f(float %68), !dbg !28
  %70 = tail call float @llvm.nvvm.floor.f(float %68), !dbg !28
  %71 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !29
  %72 = insertelement <2 x i32> %71, i32 %38, i64 1, !dbg !29
  %73 = icmp eq <2 x i32> %72, zeroinitializer, !dbg !29
  %74 = extractelement <2 x float> %67, i64 0, !dbg !29
  %75 = tail call float @llvm.nvvm.floor.ftz.f(float %74), !dbg !29
  %76 = tail call float @llvm.nvvm.floor.f(float %74), !dbg !29
  %77 = insertelement <2 x float> poison, float %76, i64 0, !dbg !29
  %78 = insertelement <2 x float> %77, float %70, i64 1, !dbg !29
  %79 = insertelement <2 x float> poison, float %75, i64 0, !dbg !29
  %80 = insertelement <2 x float> %79, float %69, i64 1, !dbg !29
  %81 = select <2 x i1> %73, <2 x float> %78, <2 x float> %80, !dbg !29
  %82 = extractelement <2 x float> %81, i64 1, !dbg !29
  %83 = fcmp oge float %82, 0.000000e+00, !dbg !32
  %84 = fcmp olt float %82, 4.000000e+00, !dbg !33
  %85 = extractelement <2 x float> %58, i64 0, !dbg !34
  %86 = fcmp oge float %85, 0.000000e+00, !dbg !34
  %87 = extractelement <2 x float> %81, i64 0, !dbg !34
  %88 = fcmp oge float %87, 0.000000e+00, !dbg !34
  %89 = fcmp olt float %85, 4.000000e+00, !dbg !35
  %90 = fcmp olt float %87, 4.000000e+00, !dbg !35
  %91 = and i1 %86, %89, !dbg !36
  %92 = and i1 %88, %90, !dbg !36
  %93 = and i1 %61, %91, !dbg !37
  %94 = and i1 %84, %92, !dbg !37
  %95 = and i1 %60, %93, !dbg !38
  %96 = and i1 %83, %94, !dbg !38
  %97 = fptosi float %85 to i64, !dbg !39
  %98 = fptosi float %87 to i64, !dbg !39
  %99 = select i1 %95, i64 %97, i64 0, !dbg !40
  %100 = select i1 %96, i64 %98, i64 0, !dbg !40
  %101 = lshr i64 %99, 61, !dbg !41
  %102 = and i64 %101, 4, !dbg !41
  %103 = add i64 %102, %99, !dbg !41
  %104 = lshr i64 %100, 61, !dbg !41
  %105 = and i64 %104, 4, !dbg !41
  %106 = add i64 %105, %100, !dbg !41
  %107 = or i64 %106, %103, !dbg !42
  %.not = icmp ult i64 %107, 4, !dbg !42
  br i1 %.not, label %109, label %108, !dbg !42

108:                                              ; preds = %4
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 54, ptr nonnull @assertFunc_0, i64 1), !dbg !42
  unreachable, !dbg !42

109:                                              ; preds = %4
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %110 = fptosi float %59 to i64, !dbg !43
  %111 = fptosi float %82 to i64, !dbg !43
  %112 = select i1 %95, i64 %110, i64 0, !dbg !44
  %113 = select i1 %96, i64 %111, i64 0, !dbg !44
  %114 = lshr i64 %112, 61, !dbg !45
  %115 = and i64 %114, 4, !dbg !45
  %116 = add i64 %115, %112, !dbg !45
  %117 = lshr i64 %113, 61, !dbg !45
  %118 = and i64 %117, 4, !dbg !45
  %119 = add i64 %118, %113, !dbg !45
  %120 = or i64 %119, %116, !dbg !46
  %.not1 = icmp ult i64 %120, 4, !dbg !46
  br i1 %.not1, label %122, label %121, !dbg !46

121:                                              ; preds = %109
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 60, ptr nonnull @assertFunc_1, i64 1), !dbg !46
  unreachable, !dbg !46

122:                                              ; preds = %109
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %123 = shl nuw nsw i64 %103, 2, !dbg !47
  %124 = shl nuw nsw i64 %106, 2, !dbg !47
  %125 = or disjoint i64 %123, %116, !dbg !48
  %126 = or disjoint i64 %124, %119, !dbg !48
  %127 = shl nsw i32 %12, 4, !dbg !49
  %128 = sext i32 %127 to i64, !dbg !50
  %129 = or disjoint i64 %125, %128, !dbg !50
  %130 = or disjoint i64 %126, %128, !dbg !50
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %129, !dbg !51
  %132 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !51
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 true) #4, !dbg !52
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #4, !dbg !52
  %135 = fadd float %59, 1.000000e+00, !dbg !53
  %136 = fadd float %82, 1.000000e+00, !dbg !53
  %137 = fadd float %85, 1.000000e+00, !dbg !54
  %138 = fadd float %87, 1.000000e+00, !dbg !54
  %139 = fcmp oge float %135, 0.000000e+00, !dbg !55
  %140 = fcmp oge float %136, 0.000000e+00, !dbg !55
  %141 = fcmp olt float %135, 4.000000e+00, !dbg !56
  %142 = fcmp olt float %136, 4.000000e+00, !dbg !56
  %143 = and i1 %141, %91, !dbg !57
  %144 = and i1 %142, %92, !dbg !57
  %145 = and i1 %139, %143, !dbg !58
  %146 = and i1 %140, %144, !dbg !58
  %147 = select i1 %145, i64 %97, i64 0, !dbg !59
  %148 = select i1 %146, i64 %98, i64 0, !dbg !59
  %149 = lshr i64 %147, 61, !dbg !60
  %150 = and i64 %149, 4, !dbg !60
  %151 = add i64 %150, %147, !dbg !60
  %152 = lshr i64 %148, 61, !dbg !60
  %153 = and i64 %152, 4, !dbg !60
  %154 = add i64 %153, %148, !dbg !60
  %155 = or i64 %154, %151, !dbg !61
  %.not2 = icmp ult i64 %155, 4, !dbg !61
  br i1 %.not2, label %157, label %156, !dbg !61

156:                                              ; preds = %122
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 78, ptr nonnull @assertFunc_2, i64 1), !dbg !61
  unreachable, !dbg !61

157:                                              ; preds = %122
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %158 = fptosi float %135 to i64, !dbg !62
  %159 = fptosi float %136 to i64, !dbg !62
  %160 = select i1 %145, i64 %158, i64 0, !dbg !63
  %161 = select i1 %146, i64 %159, i64 0, !dbg !63
  %162 = lshr i64 %160, 61, !dbg !64
  %163 = and i64 %162, 4, !dbg !64
  %164 = add i64 %163, %160, !dbg !64
  %165 = lshr i64 %161, 61, !dbg !64
  %166 = and i64 %165, 4, !dbg !64
  %167 = add i64 %166, %161, !dbg !64
  %168 = or i64 %167, %164, !dbg !65
  %.not3 = icmp ult i64 %168, 4, !dbg !65
  br i1 %.not3, label %170, label %169, !dbg !65

169:                                              ; preds = %157
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 84, ptr nonnull @assertFunc_3, i64 1), !dbg !65
  unreachable, !dbg !65

170:                                              ; preds = %157
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %171 = shl nuw nsw i64 %151, 2, !dbg !66
  %172 = shl nuw nsw i64 %154, 2, !dbg !66
  %173 = or disjoint i64 %171, %164, !dbg !67
  %174 = or disjoint i64 %172, %167, !dbg !67
  %175 = or disjoint i64 %173, %128, !dbg !68
  %176 = or disjoint i64 %174, %128, !dbg !68
  %177 = getelementptr float, ptr addrspace(1) %2, i64 %175, !dbg !69
  %178 = getelementptr float, ptr addrspace(1) %2, i64 %176, !dbg !69
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 true) #4, !dbg !70
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 true) #4, !dbg !70
  %181 = fcmp oge float %137, 0.000000e+00, !dbg !71
  %182 = fcmp oge float %138, 0.000000e+00, !dbg !71
  %183 = fcmp olt float %137, 4.000000e+00, !dbg !72
  %184 = fcmp olt float %138, 4.000000e+00, !dbg !72
  %185 = and i1 %181, %183, !dbg !73
  %186 = and i1 %182, %184, !dbg !73
  %187 = and i1 %61, %185, !dbg !74
  %188 = and i1 %84, %186, !dbg !74
  %189 = and i1 %60, %187, !dbg !75
  %190 = and i1 %83, %188, !dbg !75
  %191 = fptosi float %137 to i64, !dbg !76
  %192 = fptosi float %138 to i64, !dbg !76
  %193 = select i1 %189, i64 %191, i64 0, !dbg !77
  %194 = select i1 %190, i64 %192, i64 0, !dbg !77
  %195 = lshr i64 %193, 61, !dbg !78
  %196 = and i64 %195, 4, !dbg !78
  %197 = add i64 %196, %193, !dbg !78
  %198 = lshr i64 %194, 61, !dbg !78
  %199 = and i64 %198, 4, !dbg !78
  %200 = add i64 %199, %194, !dbg !78
  %201 = or i64 %200, %197, !dbg !79
  %.not4 = icmp ult i64 %201, 4, !dbg !79
  br i1 %.not4, label %203, label %202, !dbg !79

202:                                              ; preds = %170
  tail call void @__assertfail(ptr nonnull @assertMessage_4, ptr nonnull @assertFile_4, i32 100, ptr nonnull @assertFunc_4, i64 1), !dbg !79
  unreachable, !dbg !79

203:                                              ; preds = %170
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %204 = select i1 %189, i64 %110, i64 0, !dbg !80
  %205 = select i1 %190, i64 %111, i64 0, !dbg !80
  %206 = lshr i64 %204, 61, !dbg !81
  %207 = and i64 %206, 4, !dbg !81
  %208 = add i64 %207, %204, !dbg !81
  %209 = lshr i64 %205, 61, !dbg !81
  %210 = and i64 %209, 4, !dbg !81
  %211 = add i64 %210, %205, !dbg !81
  %212 = or i64 %211, %208, !dbg !82
  %.not5 = icmp ult i64 %212, 4, !dbg !82
  br i1 %.not5, label %214, label %213, !dbg !82

213:                                              ; preds = %203
  tail call void @__assertfail(ptr nonnull @assertMessage_5, ptr nonnull @assertFile_5, i32 105, ptr nonnull @assertFunc_5, i64 1), !dbg !82
  unreachable, !dbg !82

214:                                              ; preds = %203
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %215 = shl nuw nsw i64 %197, 2, !dbg !83
  %216 = shl nuw nsw i64 %200, 2, !dbg !83
  %217 = or disjoint i64 %215, %208, !dbg !84
  %218 = or disjoint i64 %216, %211, !dbg !84
  %219 = or disjoint i64 %217, %128, !dbg !85
  %220 = or disjoint i64 %218, %128, !dbg !85
  %221 = getelementptr float, ptr addrspace(1) %2, i64 %219, !dbg !86
  %222 = getelementptr float, ptr addrspace(1) %2, i64 %220, !dbg !86
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %221, i1 true) #4, !dbg !87
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %222, i1 true) #4, !dbg !87
  %225 = and i1 %141, %185, !dbg !88
  %226 = and i1 %142, %186, !dbg !88
  %227 = and i1 %139, %225, !dbg !89
  %228 = and i1 %140, %226, !dbg !89
  %229 = select i1 %227, i64 %191, i64 0, !dbg !90
  %230 = select i1 %228, i64 %192, i64 0, !dbg !90
  %231 = lshr i64 %229, 61, !dbg !91
  %232 = and i64 %231, 4, !dbg !91
  %233 = add i64 %232, %229, !dbg !91
  %234 = lshr i64 %230, 61, !dbg !91
  %235 = and i64 %234, 4, !dbg !91
  %236 = add i64 %235, %230, !dbg !91
  %237 = or i64 %236, %233, !dbg !92
  %.not6 = icmp ult i64 %237, 4, !dbg !92
  br i1 %.not6, label %239, label %238, !dbg !92

238:                                              ; preds = %214
  tail call void @__assertfail(ptr nonnull @assertMessage_6, ptr nonnull @assertFile_6, i32 117, ptr nonnull @assertFunc_6, i64 1), !dbg !92
  unreachable, !dbg !92

239:                                              ; preds = %214
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %240 = select i1 %227, i64 %158, i64 0, !dbg !93
  %241 = select i1 %228, i64 %159, i64 0, !dbg !93
  %242 = lshr i64 %240, 61, !dbg !94
  %243 = and i64 %242, 4, !dbg !94
  %244 = add i64 %243, %240, !dbg !94
  %245 = lshr i64 %241, 61, !dbg !94
  %246 = and i64 %245, 4, !dbg !94
  %247 = add i64 %246, %241, !dbg !94
  %248 = or i64 %247, %244, !dbg !95
  %.not7 = icmp ult i64 %248, 4, !dbg !95
  br i1 %.not7, label %250, label %249, !dbg !95

249:                                              ; preds = %239
  tail call void @__assertfail(ptr nonnull @assertMessage_7, ptr nonnull @assertFile_7, i32 122, ptr nonnull @assertFunc_7, i64 1), !dbg !95
  unreachable, !dbg !95

250:                                              ; preds = %239
  %251 = fsub float %136, %68, !dbg !96
  %252 = fsub <2 x float> %67, %81, !dbg !97
  %253 = fsub float %135, %45, !dbg !96
  %254 = fsub <2 x float> %44, %58, !dbg !97
  %255 = bitcast i32 %180 to float, !dbg !70
  %256 = fsub float %68, %82, !dbg !98
  %257 = fsub float %138, %74, !dbg !99
  %258 = fmul float %256, %257, !dbg !100
  %259 = select i1 %146, float %258, float 0.000000e+00, !dbg !101
  %260 = fmul float %259, %255, !dbg !102
  %261 = bitcast i32 %179 to float, !dbg !70
  %262 = fsub float %45, %59, !dbg !98
  %263 = fsub float %137, %51, !dbg !99
  %264 = fmul float %262, %263, !dbg !100
  %265 = select i1 %145, float %264, float 0.000000e+00, !dbg !101
  %266 = fmul float %265, %261, !dbg !102
  %267 = bitcast i32 %134 to float, !dbg !52
  %268 = fmul float %251, %257, !dbg !103
  %269 = select i1 %96, float %268, float 0.000000e+00, !dbg !104
  %270 = fmul float %269, %267, !dbg !105
  %271 = bitcast i32 %133 to float, !dbg !52
  %272 = fmul float %253, %263, !dbg !103
  %273 = select i1 %95, float %272, float 0.000000e+00, !dbg !104
  %274 = fmul float %273, %271, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %275 = shl nuw nsw i64 %233, 2, !dbg !106
  %276 = shl nuw nsw i64 %236, 2, !dbg !106
  %277 = or disjoint i64 %275, %244, !dbg !107
  %278 = or disjoint i64 %276, %247, !dbg !107
  %279 = or disjoint i64 %277, %128, !dbg !108
  %280 = or disjoint i64 %278, %128, !dbg !108
  %281 = getelementptr float, ptr addrspace(1) %2, i64 %279, !dbg !109
  %282 = getelementptr float, ptr addrspace(1) %2, i64 %280, !dbg !109
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %281, i1 true) #4, !dbg !110
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %282, i1 true) #4, !dbg !110
  %285 = insertelement <2 x i32> poison, i32 %223, i64 0, !dbg !87
  %286 = insertelement <2 x i32> %285, i32 %283, i64 1, !dbg !87
  %287 = bitcast <2 x i32> %286 to <2 x float>, !dbg !87
  %288 = shufflevector <2 x float> %254, <2 x float> poison, <2 x i32> <i32 poison, i32 0>, !dbg !111
  %289 = insertelement <2 x float> %288, float %253, i64 0, !dbg !111
  %290 = fmul <2 x float> %254, %289, !dbg !111
  %291 = insertelement <2 x i1> poison, i1 %189, i64 0, !dbg !112
  %292 = insertelement <2 x i1> %291, i1 %227, i64 1, !dbg !112
  %293 = select <2 x i1> %292, <2 x float> %290, <2 x float> zeroinitializer, !dbg !112
  %294 = fmul <2 x float> %293, %287, !dbg !113
  %295 = insertelement <2 x i32> poison, i32 %224, i64 0, !dbg !87
  %296 = insertelement <2 x i32> %295, i32 %284, i64 1, !dbg !87
  %297 = bitcast <2 x i32> %296 to <2 x float>, !dbg !87
  %298 = shufflevector <2 x float> %252, <2 x float> poison, <2 x i32> <i32 poison, i32 0>, !dbg !111
  %299 = insertelement <2 x float> %298, float %251, i64 0, !dbg !111
  %300 = fmul <2 x float> %252, %299, !dbg !111
  %301 = insertelement <2 x i1> poison, i1 %190, i64 0, !dbg !112
  %302 = insertelement <2 x i1> %301, i1 %228, i64 1, !dbg !112
  %303 = select <2 x i1> %302, <2 x float> %300, <2 x float> zeroinitializer, !dbg !112
  %304 = fmul <2 x float> %303, %297, !dbg !113
  %305 = fadd float %274, %266, !dbg !114
  %306 = fadd float %270, %260, !dbg !114
  %307 = extractelement <2 x float> %294, i64 0, !dbg !115
  %308 = fadd float %305, %307, !dbg !115
  %309 = extractelement <2 x float> %304, i64 0, !dbg !115
  %310 = fadd float %306, %309, !dbg !115
  %311 = extractelement <2 x float> %294, i64 1, !dbg !116
  %312 = fadd float %308, %311, !dbg !116
  %313 = extractelement <2 x float> %304, i64 1, !dbg !116
  %314 = fadd float %310, %313, !dbg !116
  %315 = sext i32 %10 to i64, !dbg !117
  %316 = getelementptr float, ptr addrspace(1) %0, i64 %315, !dbg !117
  %317 = bitcast float %312 to i32, !dbg !118
  %318 = bitcast float %314 to i32, !dbg !118
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %317, i32 %318, ptr addrspace(1) %316, i1 true) #4, !dbg !118
  ret void, !dbg !119
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #1

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbgpj6gdmdxonyndx2gg6smoifzo4c24xla4psoi25r77pa7wwdc.py", directory: "inductor_cache/bg")
!4 = !{ptr @triton_poi_fused_grid_sampler_2d_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_grid_sampler_2d_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_grid_sampler_2d_1", linkageName: "triton_poi_fused_grid_sampler_2d_1", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 26, column: 19, scope: !11)
!17 = !DILocation(line: 24, column: 19, scope: !11)
!18 = !DILocation(line: 25, column: 19, scope: !11)
!19 = !DILocation(line: 28, column: 32, scope: !11)
!20 = !DILocation(line: 28, column: 44, scope: !11)
!21 = !DILocation(line: 28, column: 37, scope: !11)
!22 = !DILocation(line: 28, column: 30, scope: !11)
!23 = !DILocation(line: 28, column: 49, scope: !11)
!24 = !DILocation(line: 29, column: 35, scope: !11)
!25 = !DILocation(line: 29, column: 42, scope: !11)
!26 = !DILocation(line: 29, column: 31, scope: !11)
!27 = !DILocation(line: 29, column: 54, scope: !11)
!28 = !DILocation(line: 34, column: 27, scope: !11)
!29 = !DILocation(line: 41, column: 28, scope: !11)
!30 = !DILocation(line: 39, column: 20, scope: !11)
!31 = !DILocation(line: 40, column: 20, scope: !11)
!32 = !DILocation(line: 36, column: 19, scope: !11)
!33 = !DILocation(line: 38, column: 18, scope: !11)
!34 = !DILocation(line: 42, column: 21, scope: !11)
!35 = !DILocation(line: 43, column: 20, scope: !11)
!36 = !DILocation(line: 44, column: 20, scope: !11)
!37 = !DILocation(line: 45, column: 19, scope: !11)
!38 = !DILocation(line: 46, column: 19, scope: !11)
!39 = !DILocation(line: 47, column: 21, scope: !11)
!40 = !DILocation(line: 49, column: 35, scope: !11)
!41 = !DILocation(line: 53, column: 35, scope: !11)
!42 = !DILocation(line: 54, column: 49, scope: !11)
!43 = !DILocation(line: 55, column: 20, scope: !11)
!44 = !DILocation(line: 56, column: 35, scope: !11)
!45 = !DILocation(line: 59, column: 35, scope: !11)
!46 = !DILocation(line: 60, column: 49, scope: !11)
!47 = !DILocation(line: 61, column: 41, scope: !11)
!48 = !DILocation(line: 61, column: 39, scope: !11)
!49 = !DILocation(line: 61, column: 52, scope: !11)
!50 = !DILocation(line: 61, column: 49, scope: !11)
!51 = !DILocation(line: 61, column: 31, scope: !11)
!52 = !DILocation(line: 61, column: 57, scope: !11)
!53 = !DILocation(line: 63, column: 19, scope: !11)
!54 = !DILocation(line: 65, column: 20, scope: !11)
!55 = !DILocation(line: 70, column: 21, scope: !11)
!56 = !DILocation(line: 71, column: 20, scope: !11)
!57 = !DILocation(line: 72, column: 20, scope: !11)
!58 = !DILocation(line: 73, column: 20, scope: !11)
!59 = !DILocation(line: 74, column: 35, scope: !11)
!60 = !DILocation(line: 77, column: 35, scope: !11)
!61 = !DILocation(line: 78, column: 49, scope: !11)
!62 = !DILocation(line: 79, column: 21, scope: !11)
!63 = !DILocation(line: 80, column: 35, scope: !11)
!64 = !DILocation(line: 83, column: 35, scope: !11)
!65 = !DILocation(line: 84, column: 49, scope: !11)
!66 = !DILocation(line: 85, column: 41, scope: !11)
!67 = !DILocation(line: 85, column: 39, scope: !11)
!68 = !DILocation(line: 85, column: 49, scope: !11)
!69 = !DILocation(line: 85, column: 31, scope: !11)
!70 = !DILocation(line: 85, column: 57, scope: !11)
!71 = !DILocation(line: 90, column: 21, scope: !11)
!72 = !DILocation(line: 91, column: 20, scope: !11)
!73 = !DILocation(line: 92, column: 20, scope: !11)
!74 = !DILocation(line: 93, column: 19, scope: !11)
!75 = !DILocation(line: 94, column: 19, scope: !11)
!76 = !DILocation(line: 95, column: 21, scope: !11)
!77 = !DILocation(line: 96, column: 35, scope: !11)
!78 = !DILocation(line: 99, column: 35, scope: !11)
!79 = !DILocation(line: 100, column: 49, scope: !11)
!80 = !DILocation(line: 101, column: 35, scope: !11)
!81 = !DILocation(line: 104, column: 35, scope: !11)
!82 = !DILocation(line: 105, column: 49, scope: !11)
!83 = !DILocation(line: 106, column: 41, scope: !11)
!84 = !DILocation(line: 106, column: 39, scope: !11)
!85 = !DILocation(line: 106, column: 49, scope: !11)
!86 = !DILocation(line: 106, column: 31, scope: !11)
!87 = !DILocation(line: 106, column: 57, scope: !11)
!88 = !DILocation(line: 111, column: 20, scope: !11)
!89 = !DILocation(line: 112, column: 20, scope: !11)
!90 = !DILocation(line: 113, column: 35, scope: !11)
!91 = !DILocation(line: 116, column: 35, scope: !11)
!92 = !DILocation(line: 117, column: 49, scope: !11)
!93 = !DILocation(line: 118, column: 35, scope: !11)
!94 = !DILocation(line: 121, column: 35, scope: !11)
!95 = !DILocation(line: 122, column: 49, scope: !11)
!96 = !DILocation(line: 64, column: 20, scope: !11)
!97 = !DILocation(line: 107, column: 20, scope: !11)
!98 = !DILocation(line: 86, column: 19, scope: !11)
!99 = !DILocation(line: 66, column: 20, scope: !11)
!100 = !DILocation(line: 87, column: 20, scope: !11)
!101 = !DILocation(line: 88, column: 35, scope: !11)
!102 = !DILocation(line: 89, column: 20, scope: !11)
!103 = !DILocation(line: 67, column: 20, scope: !11)
!104 = !DILocation(line: 68, column: 35, scope: !11)
!105 = !DILocation(line: 69, column: 20, scope: !11)
!106 = !DILocation(line: 123, column: 41, scope: !11)
!107 = !DILocation(line: 123, column: 39, scope: !11)
!108 = !DILocation(line: 123, column: 49, scope: !11)
!109 = !DILocation(line: 123, column: 31, scope: !11)
!110 = !DILocation(line: 123, column: 57, scope: !11)
!111 = !DILocation(line: 108, column: 20, scope: !11)
!112 = !DILocation(line: 109, column: 35, scope: !11)
!113 = !DILocation(line: 110, column: 20, scope: !11)
!114 = !DILocation(line: 127, column: 20, scope: !11)
!115 = !DILocation(line: 128, column: 21, scope: !11)
!116 = !DILocation(line: 129, column: 22, scope: !11)
!117 = !DILocation(line: 130, column: 28, scope: !11)
!118 = !DILocation(line: 130, column: 41, scope: !11)
!119 = !DILocation(line: 130, column: 4, scope: !11)
