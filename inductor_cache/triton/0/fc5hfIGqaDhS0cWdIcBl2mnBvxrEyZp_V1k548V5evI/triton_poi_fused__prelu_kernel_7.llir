; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__prelu_kernel_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %12 = srem i32 %10, 48, !dbg !14
  %13 = srem i32 %11, 48, !dbg !14
  %14 = sext i32 %10 to i64, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !15
  %16 = sext i32 %11 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #1, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !16
  %23 = bitcast i32 %19 to float, !dbg !16
  %24 = bitcast i32 %20 to float, !dbg !16
  %25 = bitcast i32 %21 to float, !dbg !16
  %26 = bitcast i32 %22 to float, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #1, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !16
  %32 = bitcast i32 %28 to float, !dbg !16
  %33 = bitcast i32 %29 to float, !dbg !16
  %34 = bitcast i32 %30 to float, !dbg !16
  %35 = bitcast i32 %31 to float, !dbg !16
  %36 = sext i32 %12 to i64, !dbg !17
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !17
  %38 = sext i32 %13 to i64, !dbg !17
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !17
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !18
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !18
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !18
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !18
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !18
  %45 = bitcast i32 %41 to float, !dbg !18
  %46 = bitcast i32 %42 to float, !dbg !18
  %47 = bitcast i32 %43 to float, !dbg !18
  %48 = bitcast i32 %44 to float, !dbg !18
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !18
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !18
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !18
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !18
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !18
  %54 = bitcast i32 %50 to float, !dbg !18
  %55 = bitcast i32 %51 to float, !dbg !18
  %56 = bitcast i32 %52 to float, !dbg !18
  %57 = bitcast i32 %53 to float, !dbg !18
  %58 = fcmp ogt float %23, 0.000000e+00, !dbg !19
  %59 = fcmp ogt float %24, 0.000000e+00, !dbg !19
  %60 = fcmp ogt float %25, 0.000000e+00, !dbg !19
  %61 = fcmp ogt float %26, 0.000000e+00, !dbg !19
  %62 = fcmp ogt float %32, 0.000000e+00, !dbg !19
  %63 = fcmp ogt float %33, 0.000000e+00, !dbg !19
  %64 = fcmp ogt float %34, 0.000000e+00, !dbg !19
  %65 = fcmp ogt float %35, 0.000000e+00, !dbg !19
  %66 = fmul float %23, %45, !dbg !20
  %67 = fmul float %24, %46, !dbg !20
  %68 = fmul float %25, %47, !dbg !20
  %69 = fmul float %26, %48, !dbg !20
  %70 = fmul float %32, %54, !dbg !20
  %71 = fmul float %33, %55, !dbg !20
  %72 = fmul float %34, %56, !dbg !20
  %73 = fmul float %35, %57, !dbg !20
  %74 = select i1 %58, float %23, float %66, !dbg !21
  %75 = select i1 %59, float %24, float %67, !dbg !21
  %76 = select i1 %60, float %25, float %68, !dbg !21
  %77 = select i1 %61, float %26, float %69, !dbg !21
  %78 = select i1 %62, float %32, float %70, !dbg !21
  %79 = select i1 %63, float %33, float %71, !dbg !21
  %80 = select i1 %64, float %34, float %72, !dbg !21
  %81 = select i1 %65, float %35, float %73, !dbg !21
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !22
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !22
  %84 = bitcast float %74 to i32, !dbg !23
  %85 = bitcast float %75 to i32, !dbg !23
  %86 = bitcast float %76 to i32, !dbg !23
  %87 = bitcast float %77 to i32, !dbg !23
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %84, i32 %85, i32 %86, i32 %87, ptr addrspace(1) %82, i1 true) #1, !dbg !23
  %88 = bitcast float %78 to i32, !dbg !23
  %89 = bitcast float %79 to i32, !dbg !23
  %90 = bitcast float %80 to i32, !dbg !23
  %91 = bitcast float %81 to i32, !dbg !23
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %88, i32 %89, i32 %90, i32 %91, ptr addrspace(1) %83, i1 true) #1, !dbg !23
  ret void, !dbg !24
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxakrskfxgoahx67mclwkxss3vrovg4ozb4u5c5podmt26nd5gaa.py", directory: "inductor_cache/xa")
!4 = !{ptr @triton_poi_fused__prelu_kernel_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__prelu_kernel_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__prelu_kernel_7", linkageName: "triton_poi_fused__prelu_kernel_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 29, column: 18, scope: !7)
!20 = !DILocation(line: 30, column: 18, scope: !7)
!21 = !DILocation(line: 31, column: 32, scope: !7)
!22 = !DILocation(line: 32, column: 25, scope: !7)
!23 = !DILocation(line: 32, column: 36, scope: !7)
!24 = !DILocation(line: 32, column: 4, scope: !7)
