; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_reflection_pad2d_rsub_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = icmp slt i32 %10, 256, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %12 = sdiv i32 %.frozen, 4, !dbg !15
  %13 = mul i32 %12, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = srem i32 %12, 4, !dbg !17
  %.frozen1 = freeze i32 %10, !dbg !18
  %15 = sdiv i32 %.frozen1, 16, !dbg !18
  %16 = mul nsw i32 %14, 6, !dbg !19
  %17 = mul i32 %15, 36, !dbg !20
  %18 = add i32 %17, %.decomposed, !dbg !21
  %19 = add i32 %18, %16, !dbg !22
  %20 = sext i32 %19 to i64, !dbg !23
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !23
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %11) #1, !dbg !24
  %23 = bitcast i32 %22 to float, !dbg !24
  %24 = add i32 %18, 1, !dbg !25
  %25 = add i32 %24, %16, !dbg !26
  %26 = sext i32 %25 to i64, !dbg !27
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !27
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %11) #1, !dbg !28
  %29 = bitcast i32 %28 to float, !dbg !28
  %30 = add i32 %18, 2, !dbg !29
  %31 = add i32 %30, %16, !dbg !30
  %32 = sext i32 %31 to i64, !dbg !31
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !31
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %11) #1, !dbg !32
  %35 = bitcast i32 %34 to float, !dbg !32
  %36 = add i32 %18, 6, !dbg !33
  %37 = add i32 %36, %16, !dbg !34
  %38 = sext i32 %37 to i64, !dbg !35
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !35
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %11) #1, !dbg !36
  %41 = bitcast i32 %40 to float, !dbg !36
  %42 = add i32 %18, 7, !dbg !37
  %43 = add i32 %42, %16, !dbg !38
  %44 = sext i32 %43 to i64, !dbg !39
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !39
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %11) #1, !dbg !40
  %47 = bitcast i32 %46 to float, !dbg !40
  %48 = add i32 %18, 8, !dbg !41
  %49 = add i32 %48, %16, !dbg !42
  %50 = sext i32 %49 to i64, !dbg !43
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !43
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %11) #1, !dbg !44
  %53 = bitcast i32 %52 to float, !dbg !44
  %54 = add i32 %18, 12, !dbg !45
  %55 = add i32 %54, %16, !dbg !46
  %56 = sext i32 %55 to i64, !dbg !47
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !47
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %11) #1, !dbg !48
  %59 = bitcast i32 %58 to float, !dbg !48
  %60 = add i32 %18, 13, !dbg !49
  %61 = add i32 %60, %16, !dbg !50
  %62 = sext i32 %61 to i64, !dbg !51
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !51
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %11) #1, !dbg !52
  %65 = bitcast i32 %64 to float, !dbg !52
  %66 = add i32 %18, 14, !dbg !53
  %67 = add i32 %66, %16, !dbg !54
  %68 = sext i32 %67 to i64, !dbg !55
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !55
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %11) #1, !dbg !56
  %71 = bitcast i32 %70 to float, !dbg !56
  %72 = add nsw i32 %.decomposed, -1, !dbg !57
  %73 = tail call i32 @llvm.abs.i32(i32 %72, i1 true), !dbg !58
  %74 = add nsw i32 %73, -3, !dbg !59
  %75 = tail call i32 @llvm.abs.i32(i32 %74, i1 true), !dbg !60
  %76 = sub nuw nsw i32 15, %75, !dbg !61
  %77 = add nsw i32 %14, -1, !dbg !62
  %78 = tail call i32 @llvm.abs.i32(i32 %77, i1 true), !dbg !63
  %79 = add nsw i32 %78, -3, !dbg !64
  %80 = tail call i32 @llvm.abs.i32(i32 %79, i1 true), !dbg !65
  %81 = mul nsw i32 %80, -4, !dbg !66
  %82 = shl nsw i32 %15, 4, !dbg !67
  %83 = or disjoint i32 %76, %82, !dbg !68
  %84 = add i32 %83, %81, !dbg !69
  %85 = sext i32 %84 to i64, !dbg !70
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !70
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %11) #1, !dbg !71
  %88 = add nsw i32 %.decomposed, 12, !dbg !72
  %89 = add i32 %81, %82, !dbg !73
  %90 = add i32 %89, %88, !dbg !74
  %91 = sext i32 %90 to i64, !dbg !75
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !75
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %11) #1, !dbg !76
  %94 = add nsw i32 %.decomposed, -2, !dbg !77
  %95 = tail call i32 @llvm.abs.i32(i32 %94, i1 true), !dbg !78
  %96 = sub nuw nsw i32 15, %95, !dbg !79
  %97 = or disjoint i32 %96, %82, !dbg !80
  %98 = add i32 %97, %81, !dbg !81
  %99 = sext i32 %98 to i64, !dbg !82
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !82
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %11) #1, !dbg !83
  %.neg = shl nsw i32 %14, 2, !dbg !84
  %102 = add nsw i32 %.neg, -12, !dbg !84
  %103 = add i32 %83, %102, !dbg !85
  %104 = sext i32 %103 to i64, !dbg !86
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !86
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %11) #1, !dbg !87
  %107 = mul i32 %15, 16, !dbg !88
  %srem.decomposed = sub i32 %.frozen1, %107, !dbg !88
  %108 = add i32 %82, %srem.decomposed, !dbg !89
  %109 = sext i32 %108 to i64, !dbg !90
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !90
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %11) #1, !dbg !91
  %112 = add i32 %97, %102, !dbg !92
  %113 = sext i32 %112 to i64, !dbg !93
  %114 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !93
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %11) #1, !dbg !94
  %116 = add nsw i32 %14, -2, !dbg !95
  %117 = tail call i32 @llvm.abs.i32(i32 %116, i1 true), !dbg !96
  %118 = mul nsw i32 %117, -4, !dbg !97
  %119 = add i32 %118, %82, !dbg !98
  %120 = add i32 %119, %76, !dbg !99
  %121 = sext i32 %120 to i64, !dbg !100
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !100
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %11) #1, !dbg !101
  %124 = add i32 %119, %88, !dbg !102
  %125 = sext i32 %124 to i64, !dbg !103
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %125, !dbg !103
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %11) #1, !dbg !104
  %128 = add i32 %97, %118, !dbg !105
  %129 = sext i32 %128 to i64, !dbg !106
  %130 = getelementptr float, ptr addrspace(1) %2, i64 %129, !dbg !106
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %11) #1, !dbg !107
  %132 = getelementptr float, ptr addrspace(1) %3, i64 %85, !dbg !108
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %11) #1, !dbg !109
  %134 = getelementptr float, ptr addrspace(1) %3, i64 %91, !dbg !110
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %11) #1, !dbg !111
  %136 = getelementptr float, ptr addrspace(1) %3, i64 %99, !dbg !112
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %11) #1, !dbg !113
  %138 = getelementptr float, ptr addrspace(1) %3, i64 %104, !dbg !114
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %11) #1, !dbg !115
  %140 = getelementptr float, ptr addrspace(1) %3, i64 %109, !dbg !116
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %11) #1, !dbg !117
  %142 = getelementptr float, ptr addrspace(1) %3, i64 %113, !dbg !118
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %11) #1, !dbg !119
  %144 = getelementptr float, ptr addrspace(1) %3, i64 %121, !dbg !120
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %11) #1, !dbg !121
  %146 = getelementptr float, ptr addrspace(1) %3, i64 %125, !dbg !122
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %11) #1, !dbg !123
  %148 = getelementptr float, ptr addrspace(1) %3, i64 %129, !dbg !124
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %11) #1, !dbg !125
  %150 = fadd float %23, %29, !dbg !126
  %151 = fadd float %150, %35, !dbg !127
  %152 = fadd float %151, %41, !dbg !128
  %153 = fadd float %152, %47, !dbg !129
  %154 = fadd float %153, %53, !dbg !130
  %155 = fadd float %154, %59, !dbg !131
  %156 = fadd float %155, %65, !dbg !132
  %157 = fadd float %156, %71, !dbg !133
  %158 = fmul float %157, 0x3FBC71C720000000, !dbg !134
  %159 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !71
  %160 = insertelement <2 x i32> %159, i32 %133, i64 1, !dbg !71
  %161 = bitcast <2 x i32> %160 to <2 x float>, !dbg !71
  %162 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !76
  %163 = insertelement <2 x i32> %162, i32 %135, i64 1, !dbg !76
  %164 = bitcast <2 x i32> %163 to <2 x float>, !dbg !76
  %165 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !83
  %166 = insertelement <2 x i32> %165, i32 %137, i64 1, !dbg !83
  %167 = bitcast <2 x i32> %166 to <2 x float>, !dbg !83
  %168 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !87
  %169 = insertelement <2 x i32> %168, i32 %139, i64 1, !dbg !87
  %170 = bitcast <2 x i32> %169 to <2 x float>, !dbg !87
  %171 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !91
  %172 = insertelement <2 x i32> %171, i32 %141, i64 1, !dbg !91
  %173 = bitcast <2 x i32> %172 to <2 x float>, !dbg !91
  %174 = insertelement <2 x i32> poison, i32 %115, i64 0, !dbg !94
  %175 = insertelement <2 x i32> %174, i32 %143, i64 1, !dbg !94
  %176 = bitcast <2 x i32> %175 to <2 x float>, !dbg !94
  %177 = insertelement <2 x i32> poison, i32 %123, i64 0, !dbg !101
  %178 = insertelement <2 x i32> %177, i32 %145, i64 1, !dbg !101
  %179 = bitcast <2 x i32> %178 to <2 x float>, !dbg !101
  %180 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !104
  %181 = insertelement <2 x i32> %180, i32 %147, i64 1, !dbg !104
  %182 = bitcast <2 x i32> %181 to <2 x float>, !dbg !104
  %183 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !107
  %184 = insertelement <2 x i32> %183, i32 %149, i64 1, !dbg !107
  %185 = bitcast <2 x i32> %184 to <2 x float>, !dbg !107
  %186 = fadd <2 x float> %161, %164, !dbg !135
  %187 = fadd <2 x float> %186, %167, !dbg !136
  %188 = fadd <2 x float> %187, %170, !dbg !137
  %189 = fadd <2 x float> %188, %173, !dbg !138
  %190 = fadd <2 x float> %189, %176, !dbg !139
  %191 = fadd <2 x float> %190, %179, !dbg !140
  %192 = fadd <2 x float> %191, %182, !dbg !141
  %193 = fadd <2 x float> %192, %185, !dbg !142
  %194 = fmul <2 x float> %193, splat (float 0x3FBC71C720000000), !dbg !143
  %195 = fmul <2 x float> %161, %161, !dbg !144
  %196 = fmul <2 x float> %164, %164, !dbg !145
  %197 = fadd <2 x float> %195, %196, !dbg !146
  %198 = fmul <2 x float> %167, %167, !dbg !147
  %199 = fadd <2 x float> %198, %197, !dbg !148
  %200 = fmul <2 x float> %170, %170, !dbg !149
  %201 = fadd <2 x float> %200, %199, !dbg !150
  %202 = fmul <2 x float> %173, %173, !dbg !151
  %203 = fadd <2 x float> %202, %201, !dbg !152
  %204 = fmul <2 x float> %176, %176, !dbg !153
  %205 = fadd <2 x float> %204, %203, !dbg !154
  %206 = fmul <2 x float> %179, %179, !dbg !155
  %207 = fadd <2 x float> %206, %205, !dbg !156
  %208 = fmul <2 x float> %182, %182, !dbg !157
  %209 = fadd <2 x float> %208, %207, !dbg !158
  %210 = fmul <2 x float> %185, %185, !dbg !159
  %211 = fadd <2 x float> %210, %209, !dbg !160
  %212 = fmul <2 x float> %211, splat (float 0x3FBC71C720000000), !dbg !161
  %213 = extractelement <2 x float> %194, i64 0, !dbg !162
  %214 = fmul float %213, 2.000000e+00, !dbg !163
  %215 = extractelement <2 x float> %194, i64 1, !dbg !162
  %216 = fmul float %214, %215, !dbg !164
  %217 = fadd float %216, 0x3F1A36E2E0000000, !dbg !165
  %218 = fmul float %213, %215, !dbg !162
  %219 = fsub float %158, %218, !dbg !166
  %220 = fmul float %219, 2.000000e+00, !dbg !167
  %221 = fadd float %220, 0x3F4D7DBF40000000, !dbg !168
  %222 = fmul float %217, %221, !dbg !169
  %223 = fmul <2 x float> %194, %194, !dbg !170
  %224 = fsub <2 x float> %212, %223, !dbg !171
  %225 = shufflevector <2 x float> %223, <2 x float> %224, <2 x i32> <i32 0, i32 2>, !dbg !172
  %226 = shufflevector <2 x float> %223, <2 x float> %224, <2 x i32> <i32 1, i32 3>, !dbg !172
  %227 = fadd <2 x float> %225, %226, !dbg !172
  %228 = fadd <2 x float> %227, <float 0x3F1A36E2E0000000, float 0x3F4D7DBF40000000>, !dbg !173
  %shift = shufflevector <2 x float> %228, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !174
  %229 = fmul <2 x float> %228, %shift, !dbg !174
  %230 = extractelement <2 x float> %229, i64 0, !dbg !174
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %222, float %230) #1, !dbg !175
  %232 = fsub float 1.000000e+00, %231, !dbg !176
  %233 = fmul float %232, 5.000000e-01, !dbg !177
  %.inv = fcmp ole float %233, 0.000000e+00, !dbg !178
  %234 = select i1 %.inv, float 0.000000e+00, float %233, !dbg !178
  %235 = fcmp olt float %234, 1.000000e+00, !dbg !182
  %236 = fcmp uno float %234, 0.000000e+00, !dbg !184
  %237 = or i1 %235, %236, !dbg !185
  %238 = sext i32 %10 to i64, !dbg !186
  %239 = getelementptr float, ptr addrspace(1) %0, i64 %238, !dbg !186
  %240 = bitcast float %234 to i32, !dbg !187
  %241 = select i1 %237, i32 %240, i32 1065353216, !dbg !188
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %241, ptr addrspace(1) %239, i1 %11) #1, !dbg !187
  ret void, !dbg !189
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2cx6m6xlmyqioemzympxtsutt5ayqupefunxwn2bg5u6w6yftrk.py", directory: "inductor_cache/2c")
!4 = !{ptr @triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_reflection_pad2d_rsub_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_reflection_pad2d_rsub_sub_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_reflection_pad2d_rsub_sub_1", linkageName: "triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_reflection_pad2d_rsub_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 26, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 37, scope: !7)
!20 = !DILocation(line: 28, column: 45, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 28, column: 42, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 50, scope: !7)
!25 = !DILocation(line: 29, column: 39, scope: !7)
!26 = !DILocation(line: 29, column: 46, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 54, scope: !7)
!29 = !DILocation(line: 30, column: 39, scope: !7)
!30 = !DILocation(line: 30, column: 46, scope: !7)
!31 = !DILocation(line: 30, column: 30, scope: !7)
!32 = !DILocation(line: 30, column: 54, scope: !7)
!33 = !DILocation(line: 31, column: 39, scope: !7)
!34 = !DILocation(line: 31, column: 46, scope: !7)
!35 = !DILocation(line: 31, column: 30, scope: !7)
!36 = !DILocation(line: 31, column: 54, scope: !7)
!37 = !DILocation(line: 32, column: 39, scope: !7)
!38 = !DILocation(line: 32, column: 46, scope: !7)
!39 = !DILocation(line: 32, column: 30, scope: !7)
!40 = !DILocation(line: 32, column: 54, scope: !7)
!41 = !DILocation(line: 33, column: 39, scope: !7)
!42 = !DILocation(line: 33, column: 46, scope: !7)
!43 = !DILocation(line: 33, column: 30, scope: !7)
!44 = !DILocation(line: 33, column: 54, scope: !7)
!45 = !DILocation(line: 34, column: 41, scope: !7)
!46 = !DILocation(line: 34, column: 48, scope: !7)
!47 = !DILocation(line: 34, column: 31, scope: !7)
!48 = !DILocation(line: 34, column: 56, scope: !7)
!49 = !DILocation(line: 35, column: 41, scope: !7)
!50 = !DILocation(line: 35, column: 48, scope: !7)
!51 = !DILocation(line: 35, column: 31, scope: !7)
!52 = !DILocation(line: 35, column: 56, scope: !7)
!53 = !DILocation(line: 36, column: 41, scope: !7)
!54 = !DILocation(line: 36, column: 48, scope: !7)
!55 = !DILocation(line: 36, column: 31, scope: !7)
!56 = !DILocation(line: 36, column: 56, scope: !7)
!57 = !DILocation(line: 37, column: 80, scope: !7)
!58 = !DILocation(line: 37, column: 73, scope: !7)
!59 = !DILocation(line: 37, column: 61, scope: !7)
!60 = !DILocation(line: 37, column: 54, scope: !7)
!61 = !DILocation(line: 37, column: 37, scope: !7)
!62 = !DILocation(line: 37, column: 132, scope: !7)
!63 = !DILocation(line: 37, column: 125, scope: !7)
!64 = !DILocation(line: 37, column: 113, scope: !7)
!65 = !DILocation(line: 37, column: 106, scope: !7)
!66 = !DILocation(line: 37, column: 94, scope: !7)
!67 = !DILocation(line: 37, column: 143, scope: !7)
!68 = !DILocation(line: 37, column: 89, scope: !7)
!69 = !DILocation(line: 37, column: 140, scope: !7)
!70 = !DILocation(line: 37, column: 31, scope: !7)
!71 = !DILocation(line: 37, column: 148, scope: !7)
!72 = !DILocation(line: 38, column: 37, scope: !7)
!73 = !DILocation(line: 38, column: 69, scope: !7)
!74 = !DILocation(line: 38, column: 120, scope: !7)
!75 = !DILocation(line: 38, column: 31, scope: !7)
!76 = !DILocation(line: 38, column: 128, scope: !7)
!77 = !DILocation(line: 39, column: 61, scope: !7)
!78 = !DILocation(line: 39, column: 54, scope: !7)
!79 = !DILocation(line: 39, column: 37, scope: !7)
!80 = !DILocation(line: 39, column: 69, scope: !7)
!81 = !DILocation(line: 39, column: 120, scope: !7)
!82 = !DILocation(line: 39, column: 31, scope: !7)
!83 = !DILocation(line: 39, column: 128, scope: !7)
!84 = !DILocation(line: 40, column: 94, scope: !7)
!85 = !DILocation(line: 40, column: 120, scope: !7)
!86 = !DILocation(line: 40, column: 31, scope: !7)
!87 = !DILocation(line: 40, column: 128, scope: !7)
!88 = !DILocation(line: 41, column: 69, scope: !7)
!89 = !DILocation(line: 41, column: 100, scope: !7)
!90 = !DILocation(line: 41, column: 31, scope: !7)
!91 = !DILocation(line: 41, column: 108, scope: !7)
!92 = !DILocation(line: 42, column: 100, scope: !7)
!93 = !DILocation(line: 42, column: 31, scope: !7)
!94 = !DILocation(line: 42, column: 108, scope: !7)
!95 = !DILocation(line: 43, column: 113, scope: !7)
!96 = !DILocation(line: 43, column: 106, scope: !7)
!97 = !DILocation(line: 43, column: 94, scope: !7)
!98 = !DILocation(line: 43, column: 89, scope: !7)
!99 = !DILocation(line: 43, column: 120, scope: !7)
!100 = !DILocation(line: 43, column: 31, scope: !7)
!101 = !DILocation(line: 43, column: 128, scope: !7)
!102 = !DILocation(line: 44, column: 100, scope: !7)
!103 = !DILocation(line: 44, column: 31, scope: !7)
!104 = !DILocation(line: 44, column: 108, scope: !7)
!105 = !DILocation(line: 45, column: 100, scope: !7)
!106 = !DILocation(line: 45, column: 31, scope: !7)
!107 = !DILocation(line: 45, column: 108, scope: !7)
!108 = !DILocation(line: 46, column: 31, scope: !7)
!109 = !DILocation(line: 46, column: 148, scope: !7)
!110 = !DILocation(line: 47, column: 31, scope: !7)
!111 = !DILocation(line: 47, column: 128, scope: !7)
!112 = !DILocation(line: 48, column: 31, scope: !7)
!113 = !DILocation(line: 48, column: 128, scope: !7)
!114 = !DILocation(line: 49, column: 31, scope: !7)
!115 = !DILocation(line: 49, column: 128, scope: !7)
!116 = !DILocation(line: 50, column: 31, scope: !7)
!117 = !DILocation(line: 50, column: 108, scope: !7)
!118 = !DILocation(line: 51, column: 31, scope: !7)
!119 = !DILocation(line: 51, column: 108, scope: !7)
!120 = !DILocation(line: 52, column: 31, scope: !7)
!121 = !DILocation(line: 52, column: 128, scope: !7)
!122 = !DILocation(line: 53, column: 31, scope: !7)
!123 = !DILocation(line: 53, column: 108, scope: !7)
!124 = !DILocation(line: 54, column: 31, scope: !7)
!125 = !DILocation(line: 54, column: 108, scope: !7)
!126 = !DILocation(line: 55, column: 18, scope: !7)
!127 = !DILocation(line: 56, column: 18, scope: !7)
!128 = !DILocation(line: 57, column: 18, scope: !7)
!129 = !DILocation(line: 58, column: 18, scope: !7)
!130 = !DILocation(line: 59, column: 19, scope: !7)
!131 = !DILocation(line: 60, column: 20, scope: !7)
!132 = !DILocation(line: 61, column: 20, scope: !7)
!133 = !DILocation(line: 62, column: 20, scope: !7)
!134 = !DILocation(line: 64, column: 20, scope: !7)
!135 = !DILocation(line: 65, column: 20, scope: !7)
!136 = !DILocation(line: 66, column: 20, scope: !7)
!137 = !DILocation(line: 67, column: 20, scope: !7)
!138 = !DILocation(line: 68, column: 20, scope: !7)
!139 = !DILocation(line: 69, column: 20, scope: !7)
!140 = !DILocation(line: 70, column: 20, scope: !7)
!141 = !DILocation(line: 71, column: 20, scope: !7)
!142 = !DILocation(line: 72, column: 20, scope: !7)
!143 = !DILocation(line: 73, column: 20, scope: !7)
!144 = !DILocation(line: 74, column: 20, scope: !7)
!145 = !DILocation(line: 75, column: 20, scope: !7)
!146 = !DILocation(line: 76, column: 20, scope: !7)
!147 = !DILocation(line: 77, column: 20, scope: !7)
!148 = !DILocation(line: 78, column: 20, scope: !7)
!149 = !DILocation(line: 79, column: 20, scope: !7)
!150 = !DILocation(line: 80, column: 20, scope: !7)
!151 = !DILocation(line: 81, column: 20, scope: !7)
!152 = !DILocation(line: 82, column: 20, scope: !7)
!153 = !DILocation(line: 83, column: 20, scope: !7)
!154 = !DILocation(line: 84, column: 20, scope: !7)
!155 = !DILocation(line: 85, column: 20, scope: !7)
!156 = !DILocation(line: 86, column: 20, scope: !7)
!157 = !DILocation(line: 87, column: 20, scope: !7)
!158 = !DILocation(line: 88, column: 20, scope: !7)
!159 = !DILocation(line: 89, column: 20, scope: !7)
!160 = !DILocation(line: 90, column: 20, scope: !7)
!161 = !DILocation(line: 91, column: 20, scope: !7)
!162 = !DILocation(line: 124, column: 20, scope: !7)
!163 = !DILocation(line: 120, column: 20, scope: !7)
!164 = !DILocation(line: 121, column: 20, scope: !7)
!165 = !DILocation(line: 123, column: 20, scope: !7)
!166 = !DILocation(line: 125, column: 20, scope: !7)
!167 = !DILocation(line: 126, column: 20, scope: !7)
!168 = !DILocation(line: 128, column: 21, scope: !7)
!169 = !DILocation(line: 129, column: 21, scope: !7)
!170 = !DILocation(line: 130, column: 21, scope: !7)
!171 = !DILocation(line: 134, column: 21, scope: !7)
!172 = !DILocation(line: 132, column: 22, scope: !7)
!173 = !DILocation(line: 133, column: 22, scope: !7)
!174 = !DILocation(line: 138, column: 22, scope: !7)
!175 = !DILocation(line: 139, column: 22, scope: !7)
!176 = !DILocation(line: 141, column: 22, scope: !7)
!177 = !DILocation(line: 143, column: 22, scope: !7)
!178 = !DILocation(line: 121, column: 29, scope: !179, inlinedAt: !181)
!179 = distinct !DILexicalBlockFile(scope: !7, file: !180, discriminator: 0)
!180 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!181 = !DILocation(line: 145, column: 44, scope: !7)
!182 = !DILocation(line: 110, column: 15, scope: !179, inlinedAt: !183)
!183 = !DILocation(line: 146, column: 44, scope: !7)
!184 = !DILocation(line: 112, column: 21, scope: !179, inlinedAt: !183)
!185 = !DILocation(line: 112, column: 16, scope: !179, inlinedAt: !183)
!186 = !DILocation(line: 147, column: 28, scope: !7)
!187 = !DILocation(line: 147, column: 41, scope: !7)
!188 = !DILocation(line: 113, column: 29, scope: !179, inlinedAt: !183)
!189 = !DILocation(line: 147, column: 4, scope: !7)
