; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_cat_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = and i32 %8, 31, !dbg !11
  %10 = lshr i32 %8, 5, !dbg !11
  %11 = shl i32 %8, 2, !dbg !11
  %12 = and i32 %11, 252, !dbg !11
  %13 = shl i32 %7, 8, !dbg !12
  %14 = or disjoint i32 %13, %12, !dbg !13
  %15 = sext i32 %14 to i64, !dbg !14
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !14
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #5, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !15
  %22 = bitcast i32 %18 to float, !dbg !15
  %23 = bitcast i32 %19 to float, !dbg !15
  %24 = bitcast i32 %20 to float, !dbg !15
  %25 = bitcast i32 %21 to float, !dbg !15
  %26 = fadd float %22, %23, !dbg !16
  %27 = fadd float %26, %24, !dbg !16
  %28 = fadd float %27, %25, !dbg !16
  %29 = bitcast float %28 to i32, !dbg !21
  %30 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %29, i32 16, i32 31), !dbg !21
  %31 = bitcast i32 %30 to float, !dbg !21
  %32 = fadd float %28, %31, !dbg !16
  %33 = bitcast float %32 to i32, !dbg !21
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 8, i32 31), !dbg !21
  %35 = bitcast i32 %34 to float, !dbg !21
  %36 = fadd float %32, %35, !dbg !16
  %37 = bitcast float %36 to i32, !dbg !21
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 4, i32 31), !dbg !21
  %39 = bitcast i32 %38 to float, !dbg !21
  %40 = fadd float %36, %39, !dbg !16
  %41 = bitcast float %40 to i32, !dbg !21
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 2, i32 31), !dbg !21
  %43 = bitcast i32 %42 to float, !dbg !21
  %44 = fadd float %40, %43, !dbg !16
  %45 = bitcast float %44 to i32, !dbg !21
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 1, i32 31), !dbg !21
  %47 = bitcast i32 %46 to float, !dbg !21
  %48 = fadd float %44, %47, !dbg !16
  %49 = icmp eq i32 %9, 0, !dbg !21
  %50 = and i32 %10, 1, !dbg !21
  %51 = getelementptr float, ptr addrspace(3) @global_smem, i32 %50, !dbg !21
  %52 = bitcast float %48 to <1 x i32>, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %52, i1 %49) #5, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %53 = icmp slt i32 %8, 2, !dbg !21
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !21
  %55 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %54, i1 %53) #5, !dbg !21
  %56 = bitcast i32 %55 to float, !dbg !21
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 1, i32 31), !dbg !21
  %58 = bitcast i32 %57 to float, !dbg !21
  %59 = fadd float %56, %58, !dbg !16
  %60 = and i32 %8, 1, !dbg !21
  %61 = icmp eq i32 %60, 0, !dbg !21
  %62 = and i1 %53, %61, !dbg !21
  %63 = bitcast float %59 to <1 x i32>, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %63, i1 %62) #5, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %64 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !21
  %65 = fadd float %64, 0.000000e+00, !dbg !22
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float 2.560000e+02) #5, !dbg !26
  %67 = fsub float %22, %66, !dbg !27
  %68 = fsub float %23, %66, !dbg !27
  %69 = fsub float %24, %66, !dbg !27
  %70 = fsub float %25, %66, !dbg !27
  %71 = fmul float %67, %67, !dbg !28
  %72 = fmul float %68, %68, !dbg !28
  %73 = fmul float %69, %69, !dbg !28
  %74 = fmul float %70, %70, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %75 = fadd float %71, %72, !dbg !31
  %76 = fadd float %73, %75, !dbg !31
  %77 = fadd float %74, %76, !dbg !31
  %78 = bitcast float %77 to i32, !dbg !29
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 16, i32 31), !dbg !29
  %80 = bitcast i32 %79 to float, !dbg !29
  %81 = fadd float %77, %80, !dbg !31
  %82 = bitcast float %81 to i32, !dbg !29
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 8, i32 31), !dbg !29
  %84 = bitcast i32 %83 to float, !dbg !29
  %85 = fadd float %81, %84, !dbg !31
  %86 = bitcast float %85 to i32, !dbg !29
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 4, i32 31), !dbg !29
  %88 = bitcast i32 %87 to float, !dbg !29
  %89 = fadd float %85, %88, !dbg !31
  %90 = bitcast float %89 to i32, !dbg !29
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 2, i32 31), !dbg !29
  %92 = bitcast i32 %91 to float, !dbg !29
  %93 = fadd float %89, %92, !dbg !31
  %94 = bitcast float %93 to i32, !dbg !29
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !29
  %96 = bitcast i32 %95 to float, !dbg !29
  %97 = fadd float %93, %96, !dbg !31
  %98 = bitcast float %97 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %98, i1 %49) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %99 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %54, i1 %53) #5, !dbg !29
  %100 = bitcast i32 %99 to float, !dbg !29
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !29
  %102 = bitcast i32 %101 to float, !dbg !29
  %103 = fadd float %100, %102, !dbg !31
  %104 = bitcast float %103 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %104, i1 %62) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %105 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %106 = fadd float %105, 0.000000e+00, !dbg !32
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float 2.560000e+02) #5, !dbg !34
  %108 = fadd float %107, 0x3EE4F8B580000000, !dbg !35
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %109, 0, !dbg !36
  br i1 %.not.i, label %112, label %110, !dbg !36

110:                                              ; preds = %6
  %111 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %108), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

112:                                              ; preds = %6
  %113 = tail call float @llvm.nvvm.rsqrt.approx.f(float %108), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %110, %112
  %.0.i = phi float [ %111, %110 ], [ %113, %112 ], !dbg !36
  %.frozen = freeze i32 %7, !dbg !37
  %114 = sdiv i32 %.frozen, 128, !dbg !37
  %115 = mul i32 %114, 128, !dbg !38
  %.decomposed = sub i32 %.frozen, %115, !dbg !38
  %116 = fmul float %67, %.0.i, !dbg !39
  %117 = fmul float %68, %.0.i, !dbg !39
  %118 = fmul float %69, %.0.i, !dbg !39
  %119 = fmul float %70, %.0.i, !dbg !39
  %120 = fcmp ogt float %116, 0.000000e+00, !dbg !40
  %121 = fcmp ogt float %117, 0.000000e+00, !dbg !40
  %122 = fcmp ogt float %118, 0.000000e+00, !dbg !40
  %123 = fcmp ogt float %119, 0.000000e+00, !dbg !40
  %124 = fmul float %116, 0x3FC99999A0000000, !dbg !41
  %125 = fmul float %117, 0x3FC99999A0000000, !dbg !41
  %126 = fmul float %118, 0x3FC99999A0000000, !dbg !41
  %127 = fmul float %119, 0x3FC99999A0000000, !dbg !41
  %128 = select i1 %120, float %116, float %124, !dbg !42
  %129 = select i1 %121, float %117, float %125, !dbg !42
  %130 = select i1 %122, float %118, float %126, !dbg !42
  %131 = select i1 %123, float %119, float %127, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %132 = sext i32 %7 to i64, !dbg !44
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !44
  %urem = and i32 %8, 63, !dbg !45
  %134 = icmp eq i32 %urem, 0, !dbg !45
  %135 = bitcast float %.0.i to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %133, i1 %134) #5, !dbg !45
  %136 = shl nsw i32 %.decomposed, 8, !dbg !46
  %137 = or disjoint i32 %136, %12, !dbg !47
  %138 = shl i32 %114, 16, !dbg !48
  %139 = add i32 %137, %138, !dbg !49
  %140 = sext i32 %139 to i64, !dbg !50
  %141 = getelementptr float, ptr addrspace(1) %3, i64 %140, !dbg !50
  %142 = bitcast float %128 to i32, !dbg !51
  %143 = bitcast float %129 to i32, !dbg !51
  %144 = bitcast float %130 to i32, !dbg !51
  %145 = bitcast float %131 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %142, i32 %143, i32 %144, i32 %145, ptr addrspace(1) %141, i1 true) #5, !dbg !51
  %146 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !52
  %147 = bitcast float %66 to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %146, i1 %134) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnrzwxxf4hsxyxsqmj7ueigf7ntn3dovz5lyc76xlsvh4ds6lucx.py", directory: "inductor_cache/nr")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_cat_14, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_cat_14, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_cat_14", linkageName: "triton_per_fused__native_batch_norm_legit_cat_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 34, column: 39, scope: !7)
!13 = !DILocation(line: 34, column: 35, scope: !7)
!14 = !DILocation(line: 34, column: 30, scope: !7)
!15 = !DILocation(line: 34, column: 44, scope: !7)
!16 = !DILocation(line: 256, column: 15, scope: !17, inlinedAt: !20)
!17 = distinct !DILexicalBlockFile(scope: !19, file: !18, discriminator: 0)
!18 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!19 = distinct !DILexicalBlockFile(scope: !7, file: !18, discriminator: 0)
!20 = !DILocation(line: 37, column: 57, scope: !7)
!21 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !20)
!22 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 37, column: 44, scope: !7)
!26 = !DILocation(line: 40, column: 18, scope: !7)
!27 = !DILocation(line: 41, column: 18, scope: !7)
!28 = !DILocation(line: 42, column: 19, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !30)
!30 = !DILocation(line: 44, column: 59, scope: !7)
!31 = !DILocation(line: 256, column: 15, scope: !17, inlinedAt: !30)
!32 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !33)
!33 = !DILocation(line: 44, column: 45, scope: !7)
!34 = !DILocation(line: 46, column: 20, scope: !7)
!35 = !DILocation(line: 48, column: 20, scope: !7)
!36 = !DILocation(line: 49, column: 28, scope: !7)
!37 = !DILocation(line: 33, column: 19, scope: !7)
!38 = !DILocation(line: 32, column: 19, scope: !7)
!39 = !DILocation(line: 51, column: 20, scope: !7)
!40 = !DILocation(line: 53, column: 20, scope: !7)
!41 = !DILocation(line: 55, column: 20, scope: !7)
!42 = !DILocation(line: 56, column: 35, scope: !7)
!43 = !DILocation(line: 57, column: 4, scope: !7)
!44 = !DILocation(line: 58, column: 28, scope: !7)
!45 = !DILocation(line: 58, column: 40, scope: !7)
!46 = !DILocation(line: 59, column: 34, scope: !7)
!47 = !DILocation(line: 59, column: 30, scope: !7)
!48 = !DILocation(line: 59, column: 45, scope: !7)
!49 = !DILocation(line: 59, column: 39, scope: !7)
!50 = !DILocation(line: 59, column: 25, scope: !7)
!51 = !DILocation(line: 59, column: 57, scope: !7)
!52 = !DILocation(line: 60, column: 25, scope: !7)
!53 = !DILocation(line: 60, column: 36, scope: !7)
!54 = !DILocation(line: 60, column: 4, scope: !7)
