#loc = loc("inductor_cache/5t/c5tiftk2t6mu2urfige3icddmkmqfftk6fsgwhgm5u3yddg3yh74.py":19:0)
module {
  tt.func public @triton_poi_fused_convolution_sigmoid_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5t/c5tiftk2t6mu2urfige3icddmkmqfftk6fsgwhgm5u3yddg3yh74.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5t/c5tiftk2t6mu2urfige3icddmkmqfftk6fsgwhgm5u3yddg3yh74.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/5t/c5tiftk2t6mu2urfige3icddmkmqfftk6fsgwhgm5u3yddg3yh74.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256xf32> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<256xf32> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<1024> : tensor<256xi32> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_1 : tensor<256xi32> loc(#loc6)
    %6 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc7)
    %7 = tt.addptr %6, %4 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc7)
    %8 = tt.load %7, %5 : tensor<256x!tt.ptr<f32>> loc(#loc8)
    %9 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc9)
    %10 = tt.load %9 : !tt.ptr<f32> loc(#loc10)
    %11 = tt.splat %10 : f32 -> tensor<256xf32> loc(#loc11)
    %12 = arith.addf %8, %11 : tensor<256xf32> loc(#loc12)
    %13 = arith.subf %cst, %12 : tensor<256xf32> loc(#loc20)
    %14 = math.exp %13 : tensor<256xf32> loc(#loc21)
    %15 = arith.addf %14, %cst_0 : tensor<256xf32> loc(#loc22)
    %16 = arith.divf %cst_0, %15 : tensor<256xf32> loc(#loc23)
    tt.store %7, %16, %5 : tensor<256x!tt.ptr<f32>> loc(#loc18)
    tt.return loc(#loc19)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/5t/c5tiftk2t6mu2urfige3icddmkmqfftk6fsgwhgm5u3yddg3yh74.py":21:28)
#loc3 = loc("inductor_cache/5t/c5tiftk2t6mu2urfige3icddmkmqfftk6fsgwhgm5u3yddg3yh74.py":21:33)
#loc4 = loc("inductor_cache/5t/c5tiftk2t6mu2urfige3icddmkmqfftk6fsgwhgm5u3yddg3yh74.py":22:36)
#loc5 = loc("inductor_cache/5t/c5tiftk2t6mu2urfige3icddmkmqfftk6fsgwhgm5u3yddg3yh74.py":22:23)
#loc6 = loc("inductor_cache/5t/c5tiftk2t6mu2urfige3icddmkmqfftk6fsgwhgm5u3yddg3yh74.py":23:21)
#loc7 = loc("inductor_cache/5t/c5tiftk2t6mu2urfige3icddmkmqfftk6fsgwhgm5u3yddg3yh74.py":25:34)
#loc8 = loc("inductor_cache/5t/c5tiftk2t6mu2urfige3icddmkmqfftk6fsgwhgm5u3yddg3yh74.py":25:39)
#loc9 = loc("inductor_cache/5t/c5tiftk2t6mu2urfige3icddmkmqfftk6fsgwhgm5u3yddg3yh74.py":26:30)
#loc10 = loc("inductor_cache/5t/c5tiftk2t6mu2urfige3icddmkmqfftk6fsgwhgm5u3yddg3yh74.py":26:19)
#loc11 = loc("inductor_cache/5t/c5tiftk2t6mu2urfige3icddmkmqfftk6fsgwhgm5u3yddg3yh74.py":27:33)
#loc12 = loc("inductor_cache/5t/c5tiftk2t6mu2urfige3icddmkmqfftk6fsgwhgm5u3yddg3yh74.py":28:18)
#loc13 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc14 = loc("inductor_cache/5t/c5tiftk2t6mu2urfige3icddmkmqfftk6fsgwhgm5u3yddg3yh74.py":29:22)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc18 = loc("inductor_cache/5t/c5tiftk2t6mu2urfige3icddmkmqfftk6fsgwhgm5u3yddg3yh74.py":30:39)
#loc19 = loc("inductor_cache/5t/c5tiftk2t6mu2urfige3icddmkmqfftk6fsgwhgm5u3yddg3yh74.py":30:4)
#loc20 = loc(callsite(#loc13 at #loc14))
#loc21 = loc(callsite(#loc15 at #loc14))
#loc22 = loc(callsite(#loc16 at #loc14))
#loc23 = loc(callsite(#loc17 at #loc14))
