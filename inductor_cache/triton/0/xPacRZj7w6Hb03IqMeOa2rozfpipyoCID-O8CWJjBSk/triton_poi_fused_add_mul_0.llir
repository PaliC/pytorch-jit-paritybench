; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_mul_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 62, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %12 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #1, !dbg !15
  %13 = bitcast i32 %12 to float, !dbg !15
  %14 = sext i32 %10 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !16
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 %11) #1, !dbg !17
  %17 = extractvalue { i32, i32 } %16, 0, !dbg !17
  %18 = extractvalue { i32, i32 } %16, 1, !dbg !17
  %19 = bitcast i32 %17 to float, !dbg !17
  %20 = bitcast i32 %18 to float, !dbg !17
  %21 = getelementptr i8, ptr addrspace(1) %1, i64 4, !dbg !18
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !19
  %23 = bitcast i32 %22 to float, !dbg !19
  %24 = add i32 %10, 64, !dbg !20
  %25 = sext i32 %24 to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !21
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %11) #1, !dbg !22
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !22
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !22
  %30 = bitcast i32 %28 to float, !dbg !22
  %31 = bitcast i32 %29 to float, !dbg !22
  %32 = getelementptr i8, ptr addrspace(1) %1, i64 8, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !24
  %34 = bitcast i32 %33 to float, !dbg !24
  %35 = add i32 %10, 128, !dbg !25
  %36 = sext i32 %35 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !26
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %11) #1, !dbg !27
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !27
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !27
  %41 = bitcast i32 %39 to float, !dbg !27
  %42 = bitcast i32 %40 to float, !dbg !27
  %43 = getelementptr i8, ptr addrspace(1) %1, i64 12, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !29
  %45 = bitcast i32 %44 to float, !dbg !29
  %46 = add i32 %10, 192, !dbg !30
  %47 = sext i32 %46 to i64, !dbg !31
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !31
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %11) #1, !dbg !32
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !32
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !32
  %52 = bitcast i32 %50 to float, !dbg !32
  %53 = bitcast i32 %51 to float, !dbg !32
  %54 = getelementptr i8, ptr addrspace(1) %1, i64 16, !dbg !33
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !34
  %56 = bitcast i32 %55 to float, !dbg !34
  %57 = add i32 %10, 256, !dbg !35
  %58 = sext i32 %57 to i64, !dbg !36
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !36
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 %11) #1, !dbg !37
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !37
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !37
  %63 = bitcast i32 %61 to float, !dbg !37
  %64 = bitcast i32 %62 to float, !dbg !37
  %65 = getelementptr i8, ptr addrspace(1) %1, i64 20, !dbg !38
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !39
  %67 = bitcast i32 %66 to float, !dbg !39
  %68 = add i32 %10, 320, !dbg !40
  %69 = sext i32 %68 to i64, !dbg !41
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !41
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %70, i1 %11) #1, !dbg !42
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !42
  %73 = extractvalue { i32, i32 } %71, 1, !dbg !42
  %74 = bitcast i32 %72 to float, !dbg !42
  %75 = bitcast i32 %73 to float, !dbg !42
  %76 = fmul float %13, %19, !dbg !43
  %77 = fmul float %13, %20, !dbg !43
  %78 = fmul float %23, %30, !dbg !44
  %79 = fmul float %23, %31, !dbg !44
  %80 = fadd float %76, %78, !dbg !45
  %81 = fadd float %77, %79, !dbg !45
  %82 = fmul float %34, %41, !dbg !46
  %83 = fmul float %34, %42, !dbg !46
  %84 = fadd float %80, %82, !dbg !47
  %85 = fadd float %81, %83, !dbg !47
  %86 = fmul float %45, %52, !dbg !48
  %87 = fmul float %45, %53, !dbg !48
  %88 = fadd float %84, %86, !dbg !49
  %89 = fadd float %85, %87, !dbg !49
  %90 = fmul float %56, %63, !dbg !50
  %91 = fmul float %56, %64, !dbg !50
  %92 = fadd float %88, %90, !dbg !51
  %93 = fadd float %89, %91, !dbg !51
  %94 = fmul float %67, %74, !dbg !52
  %95 = fmul float %67, %75, !dbg !52
  %96 = fadd float %92, %94, !dbg !53
  %97 = fadd float %93, %95, !dbg !53
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !54
  %99 = bitcast float %96 to i32, !dbg !55
  %100 = bitcast float %97 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %99, i32 %100, ptr addrspace(1) %98, i1 %11) #1, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c24jvlhd54cansafjpv2vq4noyzsorv73ev6cqcmtia6gbr4keij.py", directory: "inductor_cache/24")
!4 = !{ptr @triton_poi_fused_add_mul_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_0", linkageName: "triton_poi_fused_add_mul_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 40, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 19, scope: !7)
!25 = !DILocation(line: 33, column: 37, scope: !7)
!26 = !DILocation(line: 33, column: 31, scope: !7)
!27 = !DILocation(line: 33, column: 42, scope: !7)
!28 = !DILocation(line: 34, column: 31, scope: !7)
!29 = !DILocation(line: 34, column: 20, scope: !7)
!30 = !DILocation(line: 36, column: 37, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 42, scope: !7)
!33 = !DILocation(line: 37, column: 31, scope: !7)
!34 = !DILocation(line: 37, column: 20, scope: !7)
!35 = !DILocation(line: 39, column: 37, scope: !7)
!36 = !DILocation(line: 39, column: 31, scope: !7)
!37 = !DILocation(line: 39, column: 42, scope: !7)
!38 = !DILocation(line: 40, column: 31, scope: !7)
!39 = !DILocation(line: 40, column: 20, scope: !7)
!40 = !DILocation(line: 42, column: 37, scope: !7)
!41 = !DILocation(line: 42, column: 31, scope: !7)
!42 = !DILocation(line: 42, column: 42, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 44, column: 18, scope: !7)
!45 = !DILocation(line: 45, column: 18, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 47, column: 19, scope: !7)
!48 = !DILocation(line: 48, column: 20, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 50, column: 20, scope: !7)
!51 = !DILocation(line: 51, column: 20, scope: !7)
!52 = !DILocation(line: 52, column: 20, scope: !7)
!53 = !DILocation(line: 53, column: 20, scope: !7)
!54 = !DILocation(line: 54, column: 28, scope: !7)
!55 = !DILocation(line: 54, column: 40, scope: !7)
!56 = !DILocation(line: 54, column: 4, scope: !7)
