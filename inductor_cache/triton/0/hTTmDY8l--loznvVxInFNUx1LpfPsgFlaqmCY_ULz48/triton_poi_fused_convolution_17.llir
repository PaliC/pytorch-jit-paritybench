; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 2, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !12
  %9 = shl i32 %8, 8, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = and i32 %10, 127, !dbg !14
  %12 = or disjoint i32 %9, %11, !dbg !15
  %13 = or disjoint i32 %12, 128, !dbg !15
  %14 = icmp slt i32 %12, 225, !dbg !16
  %15 = icmp slt i32 %13, 225, !dbg !16
  %.frozen = freeze i32 %7, !dbg !17
  %16 = sdiv i32 %.frozen, 256, !dbg !17
  %17 = mul i32 %16, 256, !dbg !18
  %.decomposed = sub i32 %.frozen, %17, !dbg !18
  %18 = shl i32 %12, 8, !dbg !19
  %19 = shl i32 %13, 8, !dbg !19
  %20 = mul i32 %16, 57600, !dbg !20
  %21 = add i32 %20, %.decomposed, !dbg !21
  %22 = add i32 %21, %18, !dbg !22
  %23 = add i32 %21, %19, !dbg !22
  %24 = sext i32 %22 to i64, !dbg !23
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !23
  %26 = sext i32 %23 to i64, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !23
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 %14) #1, !dbg !24
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !24
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !24
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !24
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !24
  %33 = bitcast i32 %29 to float, !dbg !24
  %34 = bitcast i32 %30 to float, !dbg !24
  %35 = bitcast i32 %31 to float, !dbg !24
  %36 = bitcast i32 %32 to float, !dbg !24
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %15) #1, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !24
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !24
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !24
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !24
  %42 = bitcast i32 %38 to float, !dbg !24
  %43 = bitcast i32 %39 to float, !dbg !24
  %44 = bitcast i32 %40 to float, !dbg !24
  %45 = bitcast i32 %41 to float, !dbg !24
  %46 = sext i32 %.decomposed to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !25
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !26
  %53 = bitcast i32 %49 to float, !dbg !26
  %54 = bitcast i32 %50 to float, !dbg !26
  %55 = bitcast i32 %51 to float, !dbg !26
  %56 = bitcast i32 %52 to float, !dbg !26
  %57 = fadd float %33, %53, !dbg !27
  %58 = fadd float %34, %54, !dbg !27
  %59 = fadd float %35, %55, !dbg !27
  %60 = fadd float %36, %56, !dbg !27
  %61 = fadd float %42, %53, !dbg !27
  %62 = fadd float %43, %54, !dbg !27
  %63 = fadd float %44, %55, !dbg !27
  %64 = fadd float %45, %56, !dbg !27
  %65 = mul i32 %6, 900, !dbg !28
  %66 = add i32 %65, 225, !dbg !28
  %67 = add i32 %65, 450, !dbg !28
  %68 = add i32 %65, 675, !dbg !28
  %69 = add i32 %12, %65, !dbg !29
  %70 = add i32 %65, %13, !dbg !29
  %71 = add i32 %12, %66, !dbg !29
  %72 = add i32 %66, %13, !dbg !29
  %73 = add i32 %12, %67, !dbg !29
  %74 = add i32 %67, %13, !dbg !29
  %75 = add i32 %12, %68, !dbg !29
  %76 = add i32 %68, %13, !dbg !29
  %77 = sext i32 %69 to i64, !dbg !30
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !30
  %79 = sext i32 %70 to i64, !dbg !30
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !30
  %81 = sext i32 %71 to i64, !dbg !30
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !30
  %83 = sext i32 %72 to i64, !dbg !30
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !30
  %85 = sext i32 %73 to i64, !dbg !30
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !30
  %87 = sext i32 %74 to i64, !dbg !30
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !30
  %89 = sext i32 %75 to i64, !dbg !30
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !30
  %91 = sext i32 %76 to i64, !dbg !30
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !30
  %93 = bitcast float %57 to i32, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %93, ptr addrspace(1) %78, i1 %14) #1, !dbg !31
  %94 = bitcast float %61 to i32, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %94, ptr addrspace(1) %80, i1 %15) #1, !dbg !31
  %95 = bitcast float %58 to i32, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %95, ptr addrspace(1) %82, i1 %14) #1, !dbg !31
  %96 = bitcast float %62 to i32, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %96, ptr addrspace(1) %84, i1 %15) #1, !dbg !31
  %97 = bitcast float %59 to i32, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %97, ptr addrspace(1) %86, i1 %14) #1, !dbg !31
  %98 = bitcast float %63 to i32, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %98, ptr addrspace(1) %88, i1 %15) #1, !dbg !31
  %99 = bitcast float %60 to i32, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %99, ptr addrspace(1) %90, i1 %14) #1, !dbg !31
  %100 = bitcast float %64 to i32, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %100, ptr addrspace(1) %92, i1 %15) #1, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfmhlmc52zyib5iy2h7jceimss3u6ptx7tbrr26x3xtts5aapym7.py", directory: "inductor_cache/fm")
!4 = !{ptr @triton_poi_fused_convolution_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_17", linkageName: "triton_poi_fused_convolution_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 50, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 55, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 34, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 25, scope: !7)
!31 = !DILocation(line: 35, column: 45, scope: !7)
!32 = !DILocation(line: 35, column: 4, scope: !7)
