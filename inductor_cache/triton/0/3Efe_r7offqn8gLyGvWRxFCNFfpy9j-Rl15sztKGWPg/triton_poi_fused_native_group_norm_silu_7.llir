; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_native_group_norm_silu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = sdiv i32 %13, 1024, !dbg !14
  %16 = sdiv i32 %14, 1024, !dbg !14
  %17 = srem i32 %15, 128, !dbg !15
  %18 = srem i32 %16, 128, !dbg !15
  %19 = sext i32 %13 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !16
  %21 = sext i32 %14 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #1, !dbg !17
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !17
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !17
  %28 = bitcast i32 %24 to float, !dbg !17
  %29 = bitcast i32 %25 to float, !dbg !17
  %30 = bitcast i32 %26 to float, !dbg !17
  %31 = bitcast i32 %27 to float, !dbg !17
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !17
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !17
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !17
  %37 = bitcast i32 %33 to float, !dbg !17
  %38 = bitcast i32 %34 to float, !dbg !17
  %39 = bitcast i32 %35 to float, !dbg !17
  %40 = bitcast i32 %36 to float, !dbg !17
  %41 = sdiv i32 %13, 4096, !dbg !18
  %42 = sdiv i32 %14, 4096, !dbg !18
  %43 = sext i32 %41 to i64, !dbg !19
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !19
  %45 = sext i32 %42 to i64, !dbg !19
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !19
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !20
  %48 = bitcast i32 %47 to float, !dbg !20
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !20
  %50 = bitcast i32 %49 to float, !dbg !20
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !20
  %52 = bitcast i32 %51 to float, !dbg !20
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !20
  %54 = bitcast i32 %53 to float, !dbg !20
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !20
  %56 = bitcast i32 %55 to float, !dbg !20
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !20
  %58 = bitcast i32 %57 to float, !dbg !20
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !20
  %60 = bitcast i32 %59 to float, !dbg !20
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !20
  %62 = bitcast i32 %61 to float, !dbg !20
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !21
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !21
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !22
  %66 = bitcast i32 %65 to float, !dbg !22
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !22
  %68 = bitcast i32 %67 to float, !dbg !22
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !22
  %70 = bitcast i32 %69 to float, !dbg !22
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !22
  %72 = bitcast i32 %71 to float, !dbg !22
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !22
  %74 = bitcast i32 %73 to float, !dbg !22
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !22
  %76 = bitcast i32 %75 to float, !dbg !22
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !22
  %78 = bitcast i32 %77 to float, !dbg !22
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !22
  %80 = bitcast i32 %79 to float, !dbg !22
  %81 = sext i32 %17 to i64, !dbg !23
  %82 = getelementptr float, ptr addrspace(1) %4, i64 %81, !dbg !23
  %83 = sext i32 %18 to i64, !dbg !23
  %84 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !23
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !24
  %86 = bitcast i32 %85 to float, !dbg !24
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !24
  %88 = bitcast i32 %87 to float, !dbg !24
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !24
  %90 = bitcast i32 %89 to float, !dbg !24
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !24
  %92 = bitcast i32 %91 to float, !dbg !24
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !24
  %94 = bitcast i32 %93 to float, !dbg !24
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !24
  %96 = bitcast i32 %95 to float, !dbg !24
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !24
  %98 = bitcast i32 %97 to float, !dbg !24
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !24
  %100 = bitcast i32 %99 to float, !dbg !24
  %101 = getelementptr float, ptr addrspace(1) %5, i64 %81, !dbg !25
  %102 = getelementptr float, ptr addrspace(1) %5, i64 %83, !dbg !25
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #1, !dbg !26
  %104 = bitcast i32 %103 to float, !dbg !26
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #1, !dbg !26
  %106 = bitcast i32 %105 to float, !dbg !26
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #1, !dbg !26
  %108 = bitcast i32 %107 to float, !dbg !26
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #1, !dbg !26
  %110 = bitcast i32 %109 to float, !dbg !26
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !26
  %112 = bitcast i32 %111 to float, !dbg !26
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !26
  %114 = bitcast i32 %113 to float, !dbg !26
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !26
  %116 = bitcast i32 %115 to float, !dbg !26
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !26
  %118 = bitcast i32 %117 to float, !dbg !26
  %119 = fsub float %28, %48, !dbg !27
  %120 = fsub float %29, %50, !dbg !27
  %121 = fsub float %30, %52, !dbg !27
  %122 = fsub float %31, %54, !dbg !27
  %123 = fsub float %37, %56, !dbg !27
  %124 = fsub float %38, %58, !dbg !27
  %125 = fsub float %39, %60, !dbg !27
  %126 = fsub float %40, %62, !dbg !27
  %127 = fmul float %119, %66, !dbg !28
  %128 = fmul float %120, %68, !dbg !28
  %129 = fmul float %121, %70, !dbg !28
  %130 = fmul float %122, %72, !dbg !28
  %131 = fmul float %123, %74, !dbg !28
  %132 = fmul float %124, %76, !dbg !28
  %133 = fmul float %125, %78, !dbg !28
  %134 = fmul float %126, %80, !dbg !28
  %135 = fmul float %127, %86, !dbg !29
  %136 = fmul float %128, %88, !dbg !29
  %137 = fmul float %129, %90, !dbg !29
  %138 = fmul float %130, %92, !dbg !29
  %139 = fmul float %131, %94, !dbg !29
  %140 = fmul float %132, %96, !dbg !29
  %141 = fmul float %133, %98, !dbg !29
  %142 = fmul float %134, %100, !dbg !29
  %143 = fadd float %135, %104, !dbg !30
  %144 = fadd float %136, %106, !dbg !30
  %145 = fadd float %137, %108, !dbg !30
  %146 = fadd float %138, %110, !dbg !30
  %147 = fadd float %139, %112, !dbg !30
  %148 = fadd float %140, %114, !dbg !30
  %149 = fadd float %141, %116, !dbg !30
  %150 = fadd float %142, %118, !dbg !30
  %151 = fsub float 0.000000e+00, %143, !dbg !31
  %152 = fsub float 0.000000e+00, %144, !dbg !31
  %153 = fsub float 0.000000e+00, %145, !dbg !31
  %154 = fsub float 0.000000e+00, %146, !dbg !31
  %155 = fsub float 0.000000e+00, %147, !dbg !31
  %156 = fsub float 0.000000e+00, %148, !dbg !31
  %157 = fsub float 0.000000e+00, %149, !dbg !31
  %158 = fsub float 0.000000e+00, %150, !dbg !31
  %159 = fmul float %151, 0x3FF7154760000000, !dbg !35
  %160 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %159) #1, !dbg !35
  %161 = fmul float %152, 0x3FF7154760000000, !dbg !35
  %162 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %161) #1, !dbg !35
  %163 = fmul float %153, 0x3FF7154760000000, !dbg !35
  %164 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %163) #1, !dbg !35
  %165 = fmul float %154, 0x3FF7154760000000, !dbg !35
  %166 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %165) #1, !dbg !35
  %167 = fmul float %155, 0x3FF7154760000000, !dbg !35
  %168 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %167) #1, !dbg !35
  %169 = fmul float %156, 0x3FF7154760000000, !dbg !35
  %170 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %169) #1, !dbg !35
  %171 = fmul float %157, 0x3FF7154760000000, !dbg !35
  %172 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %171) #1, !dbg !35
  %173 = fmul float %158, 0x3FF7154760000000, !dbg !35
  %174 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %173) #1, !dbg !35
  %175 = fadd float %160, 1.000000e+00, !dbg !36
  %176 = fadd float %162, 1.000000e+00, !dbg !36
  %177 = fadd float %164, 1.000000e+00, !dbg !36
  %178 = fadd float %166, 1.000000e+00, !dbg !36
  %179 = fadd float %168, 1.000000e+00, !dbg !36
  %180 = fadd float %170, 1.000000e+00, !dbg !36
  %181 = fadd float %172, 1.000000e+00, !dbg !36
  %182 = fadd float %174, 1.000000e+00, !dbg !36
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %175) #1, !dbg !37
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %176) #1, !dbg !37
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %177) #1, !dbg !37
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %178) #1, !dbg !37
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %179) #1, !dbg !37
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %180) #1, !dbg !37
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %181) #1, !dbg !37
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %182) #1, !dbg !37
  %191 = fmul float %143, %183, !dbg !38
  %192 = fmul float %144, %184, !dbg !38
  %193 = fmul float %145, %185, !dbg !38
  %194 = fmul float %146, %186, !dbg !38
  %195 = fmul float %147, %187, !dbg !38
  %196 = fmul float %148, %188, !dbg !38
  %197 = fmul float %149, %189, !dbg !38
  %198 = fmul float %150, %190, !dbg !38
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !39
  %200 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !39
  %201 = bitcast float %191 to i32, !dbg !40
  %202 = bitcast float %192 to i32, !dbg !40
  %203 = bitcast float %193 to i32, !dbg !40
  %204 = bitcast float %194 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %201, i32 %202, i32 %203, i32 %204, ptr addrspace(1) %199, i1 true) #1, !dbg !40
  %205 = bitcast float %195 to i32, !dbg !40
  %206 = bitcast float %196 to i32, !dbg !40
  %207 = bitcast float %197 to i32, !dbg !40
  %208 = bitcast float %198 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %205, i32 %206, i32 %207, i32 %208, ptr addrspace(1) %200, i1 true) #1, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clva2qvditcz6ysicq46uj3uwhqvkf6u2cbo7cddohd3pekpteau.py", directory: "inductor_cache/lv")
!4 = !{ptr @triton_poi_fused_native_group_norm_silu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_group_norm_silu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_group_norm_silu_7", linkageName: "triton_poi_fused_native_group_norm_silu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 29, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 36, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 40, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 40, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 18, scope: !7)
!28 = !DILocation(line: 33, column: 18, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 47, column: 30, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 36, column: 22, scope: !7)
!35 = !DILocation(line: 47, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 47, column: 20, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 47, column: 16, scope: !32, inlinedAt: !34)
!38 = !DILocation(line: 37, column: 19, scope: !7)
!39 = !DILocation(line: 38, column: 28, scope: !7)
!40 = !DILocation(line: 38, column: 40, scope: !7)
!41 = !DILocation(line: 38, column: 4, scope: !7)
