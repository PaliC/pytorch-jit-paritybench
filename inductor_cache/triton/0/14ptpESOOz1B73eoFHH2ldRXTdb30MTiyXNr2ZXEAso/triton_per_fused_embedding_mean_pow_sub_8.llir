; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py\00"
@assertMessage_0 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp4 < 1024\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused_embedding_mean_pow_sub_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !11 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %9 = icmp slt i32 %8, 512, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = and i32 %10, 63, !dbg !14
  %12 = or disjoint i32 %11, 64, !dbg !14
  %13 = shl i32 %10, 1, !dbg !14
  %14 = and i32 %13, 62, !dbg !14
  %15 = and i32 %13, 126, !dbg !14
  %.frozen = freeze i32 %8, !dbg !15
  %16 = sdiv i32 %.frozen, 64, !dbg !15
  %17 = mul i32 %16, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = shl i32 %8, 1, !dbg !17
  %19 = or disjoint i32 %18, 1, !dbg !18
  %20 = sext i32 %18 to i64, !dbg !19
  %21 = getelementptr i64, ptr addrspace(1) %0, i64 %20, !dbg !19
  %22 = sext i32 %19 to i64, !dbg !19
  %23 = getelementptr i64, ptr addrspace(1) %0, i64 %22, !dbg !19
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %21, i1 %9, i1 %9) #4, !dbg !20
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %23, i1 %9, i1 %9) #4, !dbg !20
  %26 = shl nsw i32 %.decomposed, 7, !dbg !21
  %27 = or disjoint i32 %26, %11, !dbg !22
  %28 = or disjoint i32 %26, %12, !dbg !22
  %29 = shl i32 %16, 13, !dbg !23
  %30 = add i32 %27, %29, !dbg !24
  %31 = add i32 %28, %29, !dbg !24
  %32 = sdiv i32 %30, 1024, !dbg !25
  %33 = sdiv i32 %31, 1024, !dbg !25
  %34 = srem i32 %32, 16, !dbg !26
  %35 = srem i32 %33, 16, !dbg !26
  %36 = shl nsw i32 %34, 4, !dbg !27
  %37 = shl nsw i32 %35, 4, !dbg !27
  %38 = shl nuw nsw i32 %11, 8, !dbg !28
  %39 = sdiv i32 %30, 16384, !dbg !29
  %40 = sdiv i32 %31, 16384, !dbg !29
  %41 = shl nsw i32 %39, 14, !dbg !30
  %42 = shl nsw i32 %40, 14, !dbg !30
  %43 = sdiv i32 %27, 64, !dbg !31
  %44 = sdiv i32 %28, 64, !dbg !31
  %45 = srem i32 %43, 16, !dbg !32
  %46 = srem i32 %44, 16, !dbg !32
  %47 = add nsw i32 %45, %38, !dbg !33
  %48 = add i32 %47, %41, !dbg !34
  %49 = add i32 %48, %36, !dbg !35
  %50 = add nsw i32 %46, %38, !dbg !33
  %51 = add i32 %50, %42, !dbg !34
  %52 = add i32 %51, %37, !dbg !35
  %53 = sext i32 %49 to i64, !dbg !36
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !36
  %55 = sext i32 %52 to i64, !dbg !36
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !36
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %9, i32 0, i1 %9) #4, !dbg !37
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %9, i32 0, i1 %9) #4, !dbg !37
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !37
  %60 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #4, !dbg !37
  %61 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !37
  %62 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 true) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %63 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !37
  %64 = load <2 x float>, ptr addrspace(3) %63, align 8, !dbg !37
  %65 = zext nneg i32 %14 to i64, !dbg !38
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %65, !dbg !38
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #4, !dbg !39
  %68 = insertelement <2 x i64> poison, i64 %25, i64 0, !dbg !40
  %69 = insertelement <2 x i64> %68, i64 %24, i64 1, !dbg !40
  %70 = lshr <2 x i64> %69, splat (i64 53), !dbg !40
  %71 = and <2 x i64> %70, splat (i64 1024), !dbg !40
  %72 = add <2 x i64> %71, %69, !dbg !40
  %73 = extractelement <2 x i64> %72, i64 0, !dbg !41
  %74 = extractelement <2 x i64> %72, i64 1, !dbg !41
  %75 = or i64 %73, %74, !dbg !41
  %76 = icmp ugt i64 %75, 1023, !dbg !41
  %.demorgan.not = and i1 %9, %76, !dbg !41
  br i1 %.demorgan.not, label %77, label %78, !dbg !41

77:                                               ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !41
  unreachable, !dbg !41

78:                                               ; preds = %7
  %79 = extractvalue { i32, i32 } %67, 1, !dbg !39
  %80 = bitcast i32 %79 to float, !dbg !39
  %81 = extractvalue { i32, i32 } %67, 0, !dbg !39
  %82 = bitcast i32 %81 to float, !dbg !39
  %83 = extractelement <2 x float> %64, i64 1, !dbg !37
  %84 = extractelement <2 x float> %64, i64 0, !dbg !37
  %85 = lshr i32 %10, 5, !dbg !14
  %86 = and i32 %10, 31, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %87 = shl nuw nsw i32 %11, 10, !dbg !42
  %88 = zext nneg i32 %87 to i64, !dbg !43
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !44
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %88, !dbg !44
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !44
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %88, !dbg !44
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %9, i32 0, i1 %9) #4, !dbg !45
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %9, i32 0, i1 %9) #4, !dbg !45
  %95 = fadd float %84, %82, !dbg !46
  %96 = fadd float %83, %80, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %.idx = shl nuw nsw i32 %15, 3, !dbg !46
  %97 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !46
  %98 = bitcast float %95 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #4, !dbg !46
  %99 = shl nuw nsw i32 %15, 1, !dbg !46
  %100 = or disjoint i32 %99, 2, !dbg !46
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %100, !dbg !46
  %102 = bitcast float %96 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %.idx3 = shl nuw nsw i32 %11, 3, !dbg !46
  %103 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !46
  %104 = load float, ptr addrspace(3) %103, align 8, !dbg !46
  %.idx4 = shl nuw nsw i32 %12, 3, !dbg !46
  %105 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !46
  %106 = load float, ptr addrspace(3) %105, align 8, !dbg !46
  %107 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !45
  %108 = insertelement <2 x i32> %107, i32 %94, i64 1, !dbg !45
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !45
  %110 = insertelement <2 x float> poison, float %104, i64 0, !dbg !47
  %111 = insertelement <2 x float> %110, float %106, i64 1, !dbg !47
  %112 = fsub <2 x float> %109, %111, !dbg !47
  %113 = fmul <2 x float> %112, %112, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %shift = shufflevector <2 x float> %113, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %114 = fadd <2 x float> %113, %shift, !dbg !53
  %115 = extractelement <2 x float> %114, i64 0, !dbg !53
  %116 = select i1 %9, float %115, float 0.000000e+00, !dbg !53
  %117 = bitcast float %116 to i32, !dbg !49
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 16, i32 31), !dbg !49
  %119 = bitcast i32 %118 to float, !dbg !49
  %120 = fadd float %116, %119, !dbg !53
  %121 = bitcast float %120 to i32, !dbg !49
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 8, i32 31), !dbg !49
  %123 = bitcast i32 %122 to float, !dbg !49
  %124 = fadd float %120, %123, !dbg !53
  %125 = bitcast float %124 to i32, !dbg !49
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 4, i32 31), !dbg !49
  %127 = bitcast i32 %126 to float, !dbg !49
  %128 = fadd float %124, %127, !dbg !53
  %129 = bitcast float %128 to i32, !dbg !49
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 2, i32 31), !dbg !49
  %131 = bitcast i32 %130 to float, !dbg !49
  %132 = fadd float %128, %131, !dbg !53
  %133 = bitcast float %132 to i32, !dbg !49
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 1, i32 31), !dbg !49
  %135 = bitcast i32 %134 to float, !dbg !49
  %136 = fadd float %132, %135, !dbg !53
  %137 = icmp eq i32 %86, 0, !dbg !49
  %138 = and i32 %85, 1, !dbg !49
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i32 %138, !dbg !49
  %140 = bitcast float %136 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 %137) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %141 = icmp slt i32 %10, 2, !dbg !49
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !49
  %143 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %142, i1 %141) #4, !dbg !49
  %144 = bitcast i32 %143 to float, !dbg !49
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !49
  %146 = bitcast i32 %145 to float, !dbg !49
  %147 = fadd float %144, %146, !dbg !53
  %148 = and i32 %10, 1, !dbg !49
  %149 = icmp eq i32 %148, 0, !dbg !49
  %150 = and i1 %141, %149, !dbg !49
  %151 = bitcast float %147 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %151, i1 %150) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %152 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !49
  %153 = sext i32 %8 to i64, !dbg !55
  %154 = getelementptr float, ptr addrspace(1) %4, i64 %153, !dbg !55
  %155 = icmp eq i32 %11, 0, !dbg !56
  %156 = and i1 %155, %9, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %154, i1 %156) #4, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py", directory: "inductor_cache/63")
!4 = !{ptr @triton_per_fused_embedding_mean_pow_sub_8, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_embedding_mean_pow_sub_8, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused_embedding_mean_pow_sub_8", linkageName: "triton_per_fused_embedding_mean_pow_sub_8", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 23, column: 28, scope: !11)
!13 = !DILocation(line: 25, column: 21, scope: !11)
!14 = !DILocation(line: 26, column: 34, scope: !11)
!15 = !DILocation(line: 32, column: 19, scope: !11)
!16 = !DILocation(line: 31, column: 19, scope: !11)
!17 = !DILocation(line: 33, column: 32, scope: !11)
!18 = !DILocation(line: 33, column: 38, scope: !11)
!19 = !DILocation(line: 33, column: 30, scope: !11)
!20 = !DILocation(line: 33, column: 50, scope: !11)
!21 = !DILocation(line: 34, column: 46, scope: !11)
!22 = !DILocation(line: 34, column: 42, scope: !11)
!23 = !DILocation(line: 34, column: 56, scope: !11)
!24 = !DILocation(line: 34, column: 51, scope: !11)
!25 = !DILocation(line: 34, column: 63, scope: !11)
!26 = !DILocation(line: 34, column: 71, scope: !11)
!27 = !DILocation(line: 34, column: 35, scope: !11)
!28 = !DILocation(line: 34, column: 84, scope: !11)
!29 = !DILocation(line: 34, column: 130, scope: !11)
!30 = !DILocation(line: 34, column: 103, scope: !11)
!31 = !DILocation(line: 34, column: 159, scope: !11)
!32 = !DILocation(line: 34, column: 165, scope: !11)
!33 = !DILocation(line: 34, column: 78, scope: !11)
!34 = !DILocation(line: 34, column: 96, scope: !11)
!35 = !DILocation(line: 34, column: 141, scope: !11)
!36 = !DILocation(line: 34, column: 30, scope: !11)
!37 = !DILocation(line: 34, column: 172, scope: !11)
!38 = !DILocation(line: 35, column: 31, scope: !11)
!39 = !DILocation(line: 35, column: 42, scope: !11)
!40 = !DILocation(line: 39, column: 32, scope: !11)
!41 = !DILocation(line: 40, column: 63, scope: !11)
!42 = !DILocation(line: 41, column: 44, scope: !11)
!43 = !DILocation(line: 41, column: 37, scope: !11)
!44 = !DILocation(line: 41, column: 30, scope: !11)
!45 = !DILocation(line: 41, column: 56, scope: !11)
!46 = !DILocation(line: 42, column: 18, scope: !11)
!47 = !DILocation(line: 43, column: 19, scope: !11)
!48 = !DILocation(line: 44, column: 20, scope: !11)
!49 = !DILocation(line: 267, column: 36, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !11, file: !51, discriminator: 0)
!51 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!52 = !DILocation(line: 47, column: 26, scope: !11)
!53 = !DILocation(line: 256, column: 15, scope: !54, inlinedAt: !52)
!54 = distinct !DILexicalBlockFile(scope: !50, file: !51, discriminator: 0)
!55 = !DILocation(line: 48, column: 25, scope: !11)
!56 = !DILocation(line: 48, column: 37, scope: !11)
!57 = !DILocation(line: 48, column: 4, scope: !11)
