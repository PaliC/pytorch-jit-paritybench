#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#loc = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":19:0)
#loc1 = loc(unknown)
#loc50 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":47:26)
#loc58 = loc(callsite(#loc1 at #loc50))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_embedding_mean_pow_sub_8(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x128xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<1x128xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1024> : tensor<1x128xi64, #blocked> loc(#loc1)
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c8192_i32 = arith.constant 8192 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<64> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<64> : tensor<1x128xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<1024> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<16> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<256> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<16384> : tensor<1x128xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c512_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x128xi32, #blocked1> loc(#loc4)
    %6 = arith.remsi %0, %c64_i32 : i32 loc(#loc5)
    %7 = arith.divsi %0, %c64_i32 : i32 loc(#loc6)
    %8 = arith.muli %0, %c2_i32 : i32 loc(#loc7)
    %9 = arith.divsi %4, %cst_2 : tensor<1x128xi32, #blocked> loc(#loc8)
    %10 = tt.splat %8 : i32 -> tensor<1x128xi32, #blocked> loc(#loc9)
    %11 = arith.addi %10, %9 : tensor<1x128xi32, #blocked> loc(#loc9)
    %12 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<1x128x!tt.ptr<i64>, #blocked> loc(#loc10)
    %13 = tt.addptr %12, %11 : tensor<1x128x!tt.ptr<i64>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc10)
    %14 = tt.splat %1 : i1 -> tensor<1x128xi1, #blocked> loc(#loc11)
    %15 = tt.load %13, %14, %cst_0 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<i64>, #blocked> loc(#loc11)
    %16 = arith.muli %6, %c128_i32 : i32 loc(#loc12)
    %17 = tt.splat %16 : i32 -> tensor<1x128xi32, #blocked> loc(#loc13)
    %18 = arith.addi %4, %17 : tensor<1x128xi32, #blocked> loc(#loc13)
    %19 = arith.muli %7, %c8192_i32 : i32 loc(#loc14)
    %20 = tt.splat %19 : i32 -> tensor<1x128xi32, #blocked> loc(#loc15)
    %21 = arith.addi %18, %20 : tensor<1x128xi32, #blocked> loc(#loc15)
    %22 = arith.divsi %21, %cst_4 : tensor<1x128xi32, #blocked> loc(#loc16)
    %23 = arith.remsi %22, %cst_5 : tensor<1x128xi32, #blocked> loc(#loc17)
    %24 = arith.muli %23, %cst_5 : tensor<1x128xi32, #blocked> loc(#loc18)
    %25 = arith.remsi %4, %cst_2 : tensor<1x128xi32, #blocked> loc(#loc19)
    %26 = arith.remsi %5, %cst_3 : tensor<1x128xi32, #blocked1> loc(#loc19)
    %27 = arith.muli %25, %cst_6 : tensor<1x128xi32, #blocked> loc(#loc20)
    %28 = arith.addi %24, %27 : tensor<1x128xi32, #blocked> loc(#loc21)
    %29 = arith.divsi %21, %cst_7 : tensor<1x128xi32, #blocked> loc(#loc22)
    %30 = arith.muli %29, %cst_7 : tensor<1x128xi32, #blocked> loc(#loc23)
    %31 = arith.addi %28, %30 : tensor<1x128xi32, #blocked> loc(#loc24)
    %32 = arith.divsi %18, %cst_2 : tensor<1x128xi32, #blocked> loc(#loc25)
    %33 = arith.remsi %32, %cst_5 : tensor<1x128xi32, #blocked> loc(#loc26)
    %34 = arith.addi %31, %33 : tensor<1x128xi32, #blocked> loc(#loc27)
    %35 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc28)
    %36 = tt.addptr %35, %34 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc28)
    %37 = tt.load %36, %14, %cst evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc29)
    %38 = triton_gpu.convert_layout %37 : tensor<1x128xf32, #blocked> -> tensor<1x128xf32, #blocked1> loc(#loc29)
    %39 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked1> loc(#loc30)
    %40 = tt.addptr %39, %26 : tensor<1x128x!tt.ptr<f32>, #blocked1>, tensor<1x128xi32, #blocked1> loc(#loc30)
    %41 = tt.load %40 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked1> loc(#loc31)
    %42 = arith.addi %15, %cst_1 : tensor<1x128xi64, #blocked> loc(#loc32)
    %43 = arith.cmpi slt, %15, %cst_0 : tensor<1x128xi64, #blocked> loc(#loc33)
    %44 = arith.select %43, %42, %15 : tensor<1x128xi1, #blocked>, tensor<1x128xi64, #blocked> loc(#loc34)
    %45 = arith.cmpi sge, %44, %cst_0 : tensor<1x128xi64, #blocked> loc(#loc35)
    %46 = arith.cmpi slt, %44, %cst_1 : tensor<1x128xi64, #blocked> loc(#loc36)
    %47 = arith.andi %45, %46 : tensor<1x128xi1, #blocked> loc(#loc37)
    %48 = arith.cmpi sge, %0, %c512_i32 : i32 loc(#loc56)
    %49 = tt.splat %48 : i1 -> tensor<1x128xi1, #blocked> loc(#loc39)
    %50 = arith.ori %47, %49 : tensor<1x128xi1, #blocked> loc(#loc39)
    tt.assert %50, "index out of bounds: 0 <= tmp4 < 1024" : tensor<1x128xi1, #blocked> loc(#loc40)
    %51 = arith.muli %25, %cst_4 : tensor<1x128xi32, #blocked> loc(#loc41)
    %52 = arith.extsi %51 : tensor<1x128xi32, #blocked> to tensor<1x128xi64, #blocked> loc(#loc42)
    %53 = arith.addi %44, %52 : tensor<1x128xi64, #blocked> loc(#loc42)
    %54 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc43)
    %55 = tt.addptr %54, %53 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi64, #blocked> loc(#loc43)
    %56 = tt.load %55, %14, %cst evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc44)
    %57 = arith.addf %38, %41 : tensor<1x128xf32, #blocked1> loc(#loc45)
    %58 = triton_gpu.convert_layout %57 {fastmath = #arith.fastmath<none>} : tensor<1x128xf32, #blocked1> -> tensor<1x128xf32, #blocked> loc(#loc45)
    %59 = arith.subf %56, %58 : tensor<1x128xf32, #blocked> loc(#loc46)
    %60 = arith.mulf %59, %59 : tensor<1x128xf32, #blocked> loc(#loc47)
    %61 = arith.select %14, %60, %cst : tensor<1x128xi1, #blocked>, tensor<1x128xf32, #blocked> loc(#loc48)
    %62 = "tt.reduce"(%61) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc50)), %arg8: f32 loc(callsite(#loc1 at #loc50))):
      %67 = arith.addf %arg7, %arg8 : f32 loc(#loc60)
      tt.reduce.return %67 : f32 loc(#loc57)
    }) : (tensor<1x128xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc57)
    %63 = tt.expand_dims %62 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc52)
    %64 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc53)
    %65 = tt.splat %64 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc54)
    %66 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc54)
    tt.store %65, %63, %66 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc54)
    tt.return loc(#loc55)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":23:28)
#loc3 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":25:21)
#loc4 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":26:34)
#loc5 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":31:19)
#loc6 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":32:19)
#loc7 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":33:32)
#loc8 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":33:44)
#loc9 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":33:38)
#loc10 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":33:30)
#loc11 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":33:50)
#loc12 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:46)
#loc13 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:42)
#loc14 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:56)
#loc15 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:51)
#loc16 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:63)
#loc17 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:71)
#loc18 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:35)
#loc19 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:89)
#loc20 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:84)
#loc21 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:78)
#loc22 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:130)
#loc23 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:103)
#loc24 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:96)
#loc25 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:159)
#loc26 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:165)
#loc27 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:141)
#loc28 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:30)
#loc29 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":34:172)
#loc30 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":35:31)
#loc31 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":35:42)
#loc32 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":37:18)
#loc33 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":38:18)
#loc34 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":39:32)
#loc35 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":40:28)
#loc36 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":40:44)
#loc37 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":40:37)
#loc38 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":40:55)
#loc39 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":40:53)
#loc40 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":40:63)
#loc41 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":41:44)
#loc42 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":41:37)
#loc43 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":41:30)
#loc44 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":41:56)
#loc45 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":42:18)
#loc46 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":43:19)
#loc47 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":44:20)
#loc48 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":46:35)
#loc49 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc51 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc52 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":47:29)
#loc53 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":48:25)
#loc54 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":48:37)
#loc55 = loc("inductor_cache/63/c63jcau3m6rvfq72k5hm2y4o2x6by6ysam6yib7ladgcl53ht3ec.py":48:4)
#loc56 = loc(fused[#loc38, #loc3])
#loc57 = loc(callsite(#loc49 at #loc50))
#loc59 = loc(callsite(#loc51 at #loc49))
#loc60 = loc(callsite(#loc59 at #loc50))
