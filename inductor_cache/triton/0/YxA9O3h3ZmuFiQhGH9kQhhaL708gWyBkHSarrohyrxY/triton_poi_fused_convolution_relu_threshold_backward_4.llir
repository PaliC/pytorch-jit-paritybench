; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_threshold_backward_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 4, !dbg !12
  %11 = and i32 %10, 1008, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 1020, !dbg !12
  %14 = and i32 %9, 255, !dbg !12
  %15 = or disjoint i32 %14, 256, !dbg !12
  %16 = or disjoint i32 %14, 512, !dbg !12
  %17 = or disjoint i32 %14, 768, !dbg !12
  %18 = or disjoint i32 %8, %11, !dbg !13
  %19 = or disjoint i32 %18, 4, !dbg !13
  %20 = or disjoint i32 %18, 8, !dbg !13
  %21 = or disjoint i32 %18, 12, !dbg !13
  %22 = or disjoint i32 %8, %13, !dbg !13
  %23 = or disjoint i32 %8, %14, !dbg !13
  %24 = or disjoint i32 %8, %15, !dbg !13
  %25 = or disjoint i32 %8, %16, !dbg !13
  %26 = or disjoint i32 %8, %17, !dbg !13
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %28 = shl i32 %27, 2, !dbg !15
  %29 = lshr i32 %9, 6, !dbg !16
  %30 = and i32 %29, 3, !dbg !16
  %31 = or disjoint i32 %28, %30, !dbg !17
  %32 = icmp slt i32 %31, 4, !dbg !18
  %33 = icmp slt i32 %28, 4, !dbg !18
  %.frozen = freeze i32 %18, !dbg !19
  %34 = sdiv i32 %.frozen, 256, !dbg !19
  %35 = mul i32 %34, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %35, !dbg !20
  %36 = srem i32 %19, 256, !dbg !20
  %37 = srem i32 %20, 256, !dbg !20
  %38 = srem i32 %21, 256, !dbg !20
  %39 = srem i32 %22, 256, !dbg !20
  %40 = shl i32 %31, 8, !dbg !21
  %41 = shl i32 %34, 10, !dbg !22
  %42 = add i32 %41, %40, !dbg !23
  %43 = add i32 %42, %.decomposed, !dbg !24
  %44 = add i32 %42, %36, !dbg !24
  %45 = add i32 %42, %37, !dbg !24
  %46 = add i32 %42, %38, !dbg !24
  %47 = sext i32 %43 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !25
  %49 = sext i32 %44 to i64, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !25
  %51 = sext i32 %45 to i64, !dbg !25
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !25
  %53 = sext i32 %46 to i64, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !25
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %32) #2, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %32) #2, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %32) #2, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %32) #2, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !26
  %75 = shl i32 %9, 6, !dbg !26
  %76 = and i32 %75, 4032, !dbg !26
  %77 = or disjoint i32 %76, %30, !dbg !26
  %78 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %76, !dbg !26
  %79 = getelementptr float, ptr addrspace(3) %78, i32 %77, !dbg !26
  %80 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #2, !dbg !26
  %81 = or disjoint i32 %77, 4, !dbg !26
  %82 = lshr i32 %81, 2, !dbg !26
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i32 %82, !dbg !26
  %84 = getelementptr float, ptr addrspace(3) %83, i32 %81, !dbg !26
  %85 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 true) #2, !dbg !26
  %86 = or disjoint i32 %77, 8, !dbg !26
  %87 = lshr i32 %86, 2, !dbg !26
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i32 %87, !dbg !26
  %89 = getelementptr float, ptr addrspace(3) %88, i32 %86, !dbg !26
  %90 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #2, !dbg !26
  %91 = or disjoint i32 %77, 12, !dbg !26
  %92 = lshr i32 %91, 2, !dbg !26
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i32 %92, !dbg !26
  %94 = getelementptr float, ptr addrspace(3) %93, i32 %91, !dbg !26
  %95 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #2, !dbg !26
  %96 = or disjoint i32 %77, 16, !dbg !26
  %97 = lshr i32 %96, 2, !dbg !26
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97, !dbg !26
  %99 = getelementptr float, ptr addrspace(3) %98, i32 %96, !dbg !26
  %100 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 true) #2, !dbg !26
  %101 = or disjoint i32 %77, 20, !dbg !26
  %102 = lshr i32 %101, 2, !dbg !26
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !26
  %104 = getelementptr float, ptr addrspace(3) %103, i32 %101, !dbg !26
  %105 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #2, !dbg !26
  %106 = or disjoint i32 %77, 24, !dbg !26
  %107 = lshr i32 %106, 2, !dbg !26
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !26
  %109 = getelementptr float, ptr addrspace(3) %108, i32 %106, !dbg !26
  %110 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #2, !dbg !26
  %111 = or disjoint i32 %77, 28, !dbg !26
  %112 = lshr i32 %111, 2, !dbg !26
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !26
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %111, !dbg !26
  %115 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #2, !dbg !26
  %116 = or disjoint i32 %77, 32, !dbg !26
  %117 = lshr i32 %116, 2, !dbg !26
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !26
  %119 = getelementptr float, ptr addrspace(3) %118, i32 %116, !dbg !26
  %120 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !26
  %121 = or disjoint i32 %77, 36, !dbg !26
  %122 = lshr i32 %121, 2, !dbg !26
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i32 %122, !dbg !26
  %124 = getelementptr float, ptr addrspace(3) %123, i32 %121, !dbg !26
  %125 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #2, !dbg !26
  %126 = or disjoint i32 %77, 40, !dbg !26
  %127 = lshr i32 %126, 2, !dbg !26
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %127, !dbg !26
  %129 = getelementptr float, ptr addrspace(3) %128, i32 %126, !dbg !26
  %130 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #2, !dbg !26
  %131 = or disjoint i32 %77, 44, !dbg !26
  %132 = lshr i32 %131, 2, !dbg !26
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i32 %132, !dbg !26
  %134 = getelementptr float, ptr addrspace(3) %133, i32 %131, !dbg !26
  %135 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #2, !dbg !26
  %136 = or disjoint i32 %77, 48, !dbg !26
  %137 = lshr i32 %136, 2, !dbg !26
  %138 = getelementptr float, ptr addrspace(3) @global_smem, i32 %137, !dbg !26
  %139 = getelementptr float, ptr addrspace(3) %138, i32 %136, !dbg !26
  %140 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !26
  %141 = or disjoint i32 %77, 52, !dbg !26
  %142 = lshr i32 %141, 2, !dbg !26
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !26
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %141, !dbg !26
  %145 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !26
  %146 = or disjoint i32 %77, 56, !dbg !26
  %147 = lshr i32 %146, 2, !dbg !26
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !26
  %149 = getelementptr float, ptr addrspace(3) %148, i32 %146, !dbg !26
  %150 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #2, !dbg !26
  %151 = or disjoint i32 %77, 60, !dbg !26
  %152 = lshr i32 %151, 2, !dbg !26
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !26
  %154 = getelementptr float, ptr addrspace(3) %153, i32 %151, !dbg !26
  %155 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %156 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %13, !dbg !26
  %157 = getelementptr inbounds float, ptr addrspace(3) %156, i32 %13, !dbg !26
  %158 = or disjoint i32 %13, 1024, !dbg !26
  %159 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %158, !dbg !26
  %160 = getelementptr inbounds float, ptr addrspace(3) %159, i32 %158, !dbg !26
  %161 = load float, ptr addrspace(3) %160, align 4, !dbg !26
  %162 = or disjoint i32 %13, 1025, !dbg !26
  %163 = lshr i32 %162, 2, !dbg !26
  %164 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %163, !dbg !26
  %165 = getelementptr inbounds float, ptr addrspace(3) %164, i32 %162, !dbg !26
  %166 = load float, ptr addrspace(3) %165, align 4, !dbg !26
  %167 = or disjoint i32 %13, 1026, !dbg !26
  %168 = lshr i32 %167, 2, !dbg !26
  %169 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %168, !dbg !26
  %170 = getelementptr inbounds float, ptr addrspace(3) %169, i32 %167, !dbg !26
  %171 = load float, ptr addrspace(3) %170, align 4, !dbg !26
  %172 = or disjoint i32 %13, 1027, !dbg !26
  %173 = lshr i32 %172, 2, !dbg !26
  %174 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %173, !dbg !26
  %175 = getelementptr inbounds float, ptr addrspace(3) %174, i32 %172, !dbg !26
  %176 = load float, ptr addrspace(3) %175, align 4, !dbg !26
  %177 = or disjoint i32 %13, 2048, !dbg !26
  %178 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %177, !dbg !26
  %179 = getelementptr inbounds float, ptr addrspace(3) %178, i32 %177, !dbg !26
  %180 = load float, ptr addrspace(3) %179, align 4, !dbg !26
  %181 = or disjoint i32 %13, 2049, !dbg !26
  %182 = lshr i32 %181, 2, !dbg !26
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %182, !dbg !26
  %184 = getelementptr inbounds float, ptr addrspace(3) %183, i32 %181, !dbg !26
  %185 = load float, ptr addrspace(3) %184, align 4, !dbg !26
  %186 = or disjoint i32 %13, 2050, !dbg !26
  %187 = lshr i32 %186, 2, !dbg !26
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %187, !dbg !26
  %189 = getelementptr inbounds float, ptr addrspace(3) %188, i32 %186, !dbg !26
  %190 = load float, ptr addrspace(3) %189, align 4, !dbg !26
  %191 = or disjoint i32 %13, 2051, !dbg !26
  %192 = lshr i32 %191, 2, !dbg !26
  %193 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %192, !dbg !26
  %194 = getelementptr inbounds float, ptr addrspace(3) %193, i32 %191, !dbg !26
  %195 = load float, ptr addrspace(3) %194, align 4, !dbg !26
  %196 = or disjoint i32 %13, 3072, !dbg !26
  %197 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %196, !dbg !26
  %198 = getelementptr inbounds float, ptr addrspace(3) %197, i32 %196, !dbg !26
  %199 = load float, ptr addrspace(3) %198, align 4, !dbg !26
  %200 = or disjoint i32 %13, 3073, !dbg !26
  %201 = lshr i32 %200, 2, !dbg !26
  %202 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %201, !dbg !26
  %203 = getelementptr inbounds float, ptr addrspace(3) %202, i32 %200, !dbg !26
  %204 = load float, ptr addrspace(3) %203, align 4, !dbg !26
  %205 = or disjoint i32 %13, 3074, !dbg !26
  %206 = lshr i32 %205, 2, !dbg !26
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %206, !dbg !26
  %208 = getelementptr inbounds float, ptr addrspace(3) %207, i32 %205, !dbg !26
  %209 = load float, ptr addrspace(3) %208, align 4, !dbg !26
  %210 = or disjoint i32 %13, 3075, !dbg !26
  %211 = lshr i32 %210, 2, !dbg !26
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %211, !dbg !26
  %213 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %210, !dbg !26
  %214 = load float, ptr addrspace(3) %213, align 4, !dbg !26
  %215 = and i32 %10, 4080, !dbg !26
  %216 = lshr i32 %10, 6, !dbg !26
  %217 = and i32 %216, 48, !dbg !26
  %218 = add nuw nsw i32 %217, %215, !dbg !26
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %218, !dbg !26
  %220 = getelementptr inbounds i8, ptr addrspace(3) %219, i32 16, !dbg !26
  %221 = getelementptr inbounds i8, ptr addrspace(3) %219, i32 32, !dbg !26
  %222 = getelementptr inbounds i8, ptr addrspace(3) %219, i32 48, !dbg !26
  %223 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !26
  %224 = add nuw nsw i32 %13, 1040, !dbg !26
  %225 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %224, !dbg !26
  %226 = add nuw nsw i32 %13, 2080, !dbg !26
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !26
  %228 = add nuw nsw i32 %13, 3120, !dbg !26
  %229 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %228, !dbg !26
  %230 = sext i32 %39 to i64, !dbg !27
  %231 = getelementptr float, ptr addrspace(1) %1, i64 %230, !dbg !27
  %.idx = shl nuw nsw i32 %13, 3, !dbg !28
  %232 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !28
  %233 = shl nuw nsw i32 %13, 3, !dbg !28
  %.idx17 = or disjoint i32 %233, 8, !dbg !28
  %234 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx17, !dbg !28
  %235 = shl nuw nsw i32 %13, 3, !dbg !28
  %.idx18 = or disjoint i32 %235, 16, !dbg !28
  %236 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx18, !dbg !28
  %237 = shl nuw nsw i32 %13, 3, !dbg !28
  %.idx19 = or disjoint i32 %237, 24, !dbg !28
  %238 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx19, !dbg !28
  %.idx20 = shl nuw nsw i32 %14, 3, !dbg !28
  %239 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx20, !dbg !28
  %.idx21 = shl nuw nsw i32 %15, 3, !dbg !28
  %240 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx21, !dbg !28
  %.idx22 = shl nuw nsw i32 %16, 3, !dbg !28
  %241 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx22, !dbg !28
  %.idx23 = shl nuw nsw i32 %17, 3, !dbg !28
  %242 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx23, !dbg !28
  %243 = load <4 x float>, ptr addrspace(3) %157, align 4, !dbg !26
  %244 = shufflevector <4 x float> %243, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %219, i32 %56, i32 %57, i32 %58, i32 %59, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %220, i32 %61, i32 %62, i32 %63, i32 %64, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %221, i32 %66, i32 %67, i32 %68, i32 %69, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %222, i32 %71, i32 %72, i32 %73, i32 %74, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %245 = load <4 x float>, ptr addrspace(3) %223, align 16, !dbg !26
  %246 = shufflevector <4 x float> %245, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !26
  %247 = load <4 x float>, ptr addrspace(3) %225, align 16, !dbg !26
  %248 = shufflevector <4 x float> %247, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !26
  %249 = load <4 x float>, ptr addrspace(3) %227, align 16, !dbg !26
  %250 = shufflevector <4 x float> %249, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !26
  %251 = load <4 x float>, ptr addrspace(3) %229, align 16, !dbg !26
  %252 = shufflevector <4 x float> %251, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !26
  %253 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %231, i1 true) #2, !dbg !32
  %254 = extractvalue { i32, i32, i32, i32 } %253, 0, !dbg !32
  %255 = extractvalue { i32, i32, i32, i32 } %253, 1, !dbg !32
  %256 = extractvalue { i32, i32, i32, i32 } %253, 2, !dbg !32
  %257 = extractvalue { i32, i32, i32, i32 } %253, 3, !dbg !32
  %258 = insertelement <4 x i32> poison, i32 %257, i64 0, !dbg !32
  %259 = insertelement <4 x i32> %258, i32 %256, i64 1, !dbg !32
  %260 = insertelement <4 x i32> %259, i32 %255, i64 2, !dbg !32
  %261 = insertelement <4 x i32> %260, i32 %254, i64 3, !dbg !32
  %262 = bitcast <4 x i32> %261 to <4 x float>, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %263 = insertelement <1 x i32> poison, i32 %254, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %263, i1 true) #2, !dbg !28
  %264 = insertelement <1 x i32> poison, i32 %255, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %264, i1 true) #2, !dbg !28
  %265 = insertelement <1 x i32> poison, i32 %256, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %265, i1 true) #2, !dbg !28
  %266 = insertelement <1 x i32> poison, i32 %257, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %266, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %267 = load float, ptr addrspace(3) %239, align 8, !dbg !28
  %268 = load float, ptr addrspace(3) %240, align 8, !dbg !28
  %269 = load float, ptr addrspace(3) %241, align 8, !dbg !28
  %270 = load float, ptr addrspace(3) %242, align 8, !dbg !28
  %271 = insertelement <32 x float> poison, float %214, i64 16, !dbg !33
  %272 = insertelement <32 x float> %271, float %209, i64 17, !dbg !33
  %273 = insertelement <32 x float> %272, float %204, i64 18, !dbg !33
  %274 = insertelement <32 x float> %273, float %199, i64 19, !dbg !33
  %275 = insertelement <32 x float> %274, float %195, i64 20, !dbg !33
  %276 = insertelement <32 x float> %275, float %190, i64 21, !dbg !33
  %277 = insertelement <32 x float> %276, float %185, i64 22, !dbg !33
  %278 = insertelement <32 x float> %277, float %180, i64 23, !dbg !33
  %279 = insertelement <32 x float> %278, float %176, i64 24, !dbg !33
  %280 = insertelement <32 x float> %279, float %171, i64 25, !dbg !33
  %281 = insertelement <32 x float> %280, float %166, i64 26, !dbg !33
  %282 = insertelement <32 x float> %281, float %161, i64 27, !dbg !33
  %283 = shufflevector <4 x float> %252, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %284 = shufflevector <32 x float> %283, <32 x float> %282, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %285 = shufflevector <4 x float> %250, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %286 = shufflevector <32 x float> %284, <32 x float> %285, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 32, i32 33, i32 34, i32 35, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %287 = shufflevector <4 x float> %248, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %288 = shufflevector <32 x float> %286, <32 x float> %287, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 32, i32 33, i32 34, i32 35, i32 poison, i32 poison, i32 poison, i32 poison, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %289 = shufflevector <4 x float> %246, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %290 = shufflevector <32 x float> %288, <32 x float> %289, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 32, i32 33, i32 34, i32 35, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %291 = shufflevector <4 x float> %244, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %292 = shufflevector <32 x float> %290, <32 x float> %291, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 32, i32 33, i32 34, i32 35>, !dbg !33
  %293 = insertelement <8 x float> poison, float %270, i64 4, !dbg !33
  %294 = insertelement <8 x float> %293, float %269, i64 5, !dbg !33
  %295 = insertelement <8 x float> %294, float %268, i64 6, !dbg !33
  %296 = insertelement <8 x float> %295, float %267, i64 7, !dbg !33
  %297 = shufflevector <4 x float> %262, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %298 = shufflevector <8 x float> %297, <8 x float> %296, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !33
  %299 = shufflevector <8 x float> %298, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 4, i32 4, i32 4, i32 4, i32 5, i32 5, i32 5, i32 5, i32 6, i32 6, i32 6, i32 6, i32 7, i32 7, i32 7, i32 7>, !dbg !33
  %300 = fadd <32 x float> %292, %299, !dbg !33
  %301 = fcmp olt <32 x float> %300, zeroinitializer, !dbg !34
  %302 = extractelement <32 x i1> %301, i64 31, !dbg !28
  %303 = extractelement <32 x i1> %301, i64 30, !dbg !28
  %304 = extractelement <32 x i1> %301, i64 29, !dbg !28
  %305 = extractelement <32 x i1> %301, i64 28, !dbg !28
  %306 = extractelement <32 x i1> %301, i64 27, !dbg !28
  %307 = extractelement <32 x i1> %301, i64 26, !dbg !28
  %308 = extractelement <32 x i1> %301, i64 25, !dbg !28
  %309 = extractelement <32 x i1> %301, i64 24, !dbg !28
  %310 = extractelement <32 x i1> %301, i64 23, !dbg !28
  %311 = extractelement <32 x i1> %301, i64 22, !dbg !28
  %312 = extractelement <32 x i1> %301, i64 21, !dbg !28
  %313 = extractelement <32 x i1> %301, i64 20, !dbg !28
  %314 = extractelement <32 x i1> %301, i64 19, !dbg !28
  %315 = extractelement <32 x i1> %301, i64 18, !dbg !28
  %316 = extractelement <32 x i1> %301, i64 17, !dbg !28
  %317 = extractelement <32 x i1> %301, i64 16, !dbg !28
  %318 = shufflevector <32 x i1> %301, <32 x i1> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !28
  %319 = shufflevector <32 x float> %300, <32 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !28
  %320 = fcmp ole <16 x float> %319, zeroinitializer, !dbg !35
  %321 = select <16 x i1> %318, <16 x i1> splat (i1 true), <16 x i1> %320, !dbg !28
  %322 = add i32 %23, %27, !dbg !36
  %323 = shl i32 %322, 2, !dbg !36
  %324 = add i32 %24, %27, !dbg !36
  %325 = shl i32 %324, 2, !dbg !36
  %326 = add i32 %25, %27, !dbg !36
  %327 = shl i32 %326, 2, !dbg !36
  %328 = add i32 %26, %27, !dbg !36
  %329 = shl i32 %328, 2, !dbg !36
  %330 = sext i32 %323 to i64, !dbg !37
  %331 = getelementptr float, ptr addrspace(1) %2, i64 %330, !dbg !37
  %332 = sext i32 %325 to i64, !dbg !37
  %333 = getelementptr float, ptr addrspace(1) %2, i64 %332, !dbg !37
  %334 = sext i32 %327 to i64, !dbg !37
  %335 = getelementptr float, ptr addrspace(1) %2, i64 %334, !dbg !37
  %336 = sext i32 %329 to i64, !dbg !37
  %337 = getelementptr float, ptr addrspace(1) %2, i64 %336, !dbg !37
  %bc = bitcast <32 x float> %300 to <32 x i32>, !dbg !38
  %338 = extractelement <32 x i32> %bc, i64 31, !dbg !38
  %339 = select i1 %302, i32 0, i32 %338, !dbg !28
  %bc32 = bitcast <32 x float> %300 to <32 x i32>, !dbg !38
  %340 = extractelement <32 x i32> %bc32, i64 30, !dbg !38
  %341 = select i1 %303, i32 0, i32 %340, !dbg !28
  %bc33 = bitcast <32 x float> %300 to <32 x i32>, !dbg !38
  %342 = extractelement <32 x i32> %bc33, i64 29, !dbg !38
  %343 = select i1 %304, i32 0, i32 %342, !dbg !28
  %bc34 = bitcast <32 x float> %300 to <32 x i32>, !dbg !38
  %344 = extractelement <32 x i32> %bc34, i64 28, !dbg !38
  %345 = select i1 %305, i32 0, i32 %344, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %339, i32 %341, i32 %343, i32 %345, ptr addrspace(1) %331, i1 %33) #2, !dbg !38
  %bc35 = bitcast <32 x float> %300 to <32 x i32>, !dbg !38
  %346 = extractelement <32 x i32> %bc35, i64 27, !dbg !38
  %347 = select i1 %306, i32 0, i32 %346, !dbg !28
  %bc36 = bitcast <32 x float> %300 to <32 x i32>, !dbg !38
  %348 = extractelement <32 x i32> %bc36, i64 26, !dbg !38
  %349 = select i1 %307, i32 0, i32 %348, !dbg !28
  %bc37 = bitcast <32 x float> %300 to <32 x i32>, !dbg !38
  %350 = extractelement <32 x i32> %bc37, i64 25, !dbg !38
  %351 = select i1 %308, i32 0, i32 %350, !dbg !28
  %bc38 = bitcast <32 x float> %300 to <32 x i32>, !dbg !38
  %352 = extractelement <32 x i32> %bc38, i64 24, !dbg !38
  %353 = select i1 %309, i32 0, i32 %352, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %347, i32 %349, i32 %351, i32 %353, ptr addrspace(1) %333, i1 %33) #2, !dbg !38
  %bc39 = bitcast <32 x float> %300 to <32 x i32>, !dbg !38
  %354 = extractelement <32 x i32> %bc39, i64 23, !dbg !38
  %355 = select i1 %310, i32 0, i32 %354, !dbg !28
  %bc40 = bitcast <32 x float> %300 to <32 x i32>, !dbg !38
  %356 = extractelement <32 x i32> %bc40, i64 22, !dbg !38
  %357 = select i1 %311, i32 0, i32 %356, !dbg !28
  %bc41 = bitcast <32 x float> %300 to <32 x i32>, !dbg !38
  %358 = extractelement <32 x i32> %bc41, i64 21, !dbg !38
  %359 = select i1 %312, i32 0, i32 %358, !dbg !28
  %bc42 = bitcast <32 x float> %300 to <32 x i32>, !dbg !38
  %360 = extractelement <32 x i32> %bc42, i64 20, !dbg !38
  %361 = select i1 %313, i32 0, i32 %360, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %355, i32 %357, i32 %359, i32 %361, ptr addrspace(1) %335, i1 %33) #2, !dbg !38
  %bc43 = bitcast <32 x float> %300 to <32 x i32>, !dbg !38
  %362 = extractelement <32 x i32> %bc43, i64 19, !dbg !38
  %363 = select i1 %314, i32 0, i32 %362, !dbg !28
  %bc44 = bitcast <32 x float> %300 to <32 x i32>, !dbg !38
  %364 = extractelement <32 x i32> %bc44, i64 18, !dbg !38
  %365 = select i1 %315, i32 0, i32 %364, !dbg !28
  %bc45 = bitcast <32 x float> %300 to <32 x i32>, !dbg !38
  %366 = extractelement <32 x i32> %bc45, i64 17, !dbg !38
  %367 = select i1 %316, i32 0, i32 %366, !dbg !28
  %bc46 = bitcast <32 x float> %300 to <32 x i32>, !dbg !38
  %368 = extractelement <32 x i32> %bc46, i64 16, !dbg !38
  %369 = select i1 %317, i32 0, i32 %368, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %363, i32 %365, i32 %367, i32 %369, ptr addrspace(1) %337, i1 %33) #2, !dbg !38
  %370 = getelementptr i1, ptr addrspace(1) %3, i64 %47, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %371 = extractelement <16 x i1> %321, i64 15, !dbg !40
  %372 = zext i1 %371 to i8, !dbg !40
  %373 = extractelement <16 x i1> %321, i64 14, !dbg !40
  %374 = zext i1 %373 to i8, !dbg !40
  %375 = extractelement <16 x i1> %321, i64 13, !dbg !40
  %376 = zext i1 %375 to i8, !dbg !40
  %377 = extractelement <16 x i1> %321, i64 12, !dbg !40
  %378 = zext i1 %377 to i8, !dbg !40
  %379 = extractelement <16 x i1> %321, i64 11, !dbg !40
  %380 = zext i1 %379 to i8, !dbg !40
  %381 = extractelement <16 x i1> %321, i64 10, !dbg !40
  %382 = zext i1 %381 to i8, !dbg !40
  %383 = extractelement <16 x i1> %321, i64 9, !dbg !40
  %384 = zext i1 %383 to i8, !dbg !40
  %385 = extractelement <16 x i1> %321, i64 8, !dbg !40
  %386 = zext i1 %385 to i8, !dbg !40
  %387 = extractelement <16 x i1> %321, i64 7, !dbg !40
  %388 = zext i1 %387 to i8, !dbg !40
  %389 = extractelement <16 x i1> %321, i64 6, !dbg !40
  %390 = zext i1 %389 to i8, !dbg !40
  %391 = extractelement <16 x i1> %321, i64 5, !dbg !40
  %392 = zext i1 %391 to i8, !dbg !40
  %393 = extractelement <16 x i1> %321, i64 4, !dbg !40
  %394 = zext i1 %393 to i8, !dbg !40
  %395 = extractelement <16 x i1> %321, i64 3, !dbg !40
  %396 = zext i1 %395 to i8, !dbg !40
  %397 = extractelement <16 x i1> %321, i64 2, !dbg !40
  %398 = zext i1 %397 to i8, !dbg !40
  %399 = extractelement <16 x i1> %321, i64 1, !dbg !40
  %400 = zext i1 %399 to i8, !dbg !40
  %401 = extractelement <16 x i1> %321, i64 0, !dbg !40
  %402 = zext i1 %401 to i8, !dbg !40
  tail call void asm sideeffect "@$5 st.shared.v4.b8 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %156, i8 %372, i8 %374, i8 %376, i8 %378, i1 true) #2, !dbg !40
  %403 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %224, !dbg !40
  tail call void asm sideeffect "@$5 st.shared.v4.b8 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %403, i8 %380, i8 %382, i8 %384, i8 %386, i1 true) #2, !dbg !40
  %404 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %226, !dbg !40
  tail call void asm sideeffect "@$5 st.shared.v4.b8 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %404, i8 %388, i8 %390, i8 %392, i8 %394, i1 true) #2, !dbg !40
  %405 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %228, !dbg !40
  tail call void asm sideeffect "@$5 st.shared.v4.b8 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %405, i8 %396, i8 %398, i8 %400, i8 %402, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %406 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %218, !dbg !40
  %407 = load <4 x i32>, ptr addrspace(3) %406, align 16, !dbg !40
  %408 = bitcast <4 x i32> %407 to <128 x i1>, !dbg !40
  %409 = extractelement <128 x i1> %408, i64 24, !dbg !40
  %410 = extractelement <128 x i1> %408, i64 56, !dbg !40
  %411 = extractelement <128 x i1> %408, i64 88, !dbg !40
  %412 = extractelement <128 x i1> %408, i64 120, !dbg !40
  %413 = bitcast <4 x i32> %407 to <16 x i8>, !dbg !40
  %414 = extractelement <16 x i8> %413, i64 0, !dbg !40
  %415 = and i8 %414, 1, !dbg !40
  %416 = shufflevector <16 x i8> %413, <16 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !40
  %417 = and <2 x i8> %416, splat (i8 1), !dbg !40
  %418 = zext i1 %409 to i8, !dbg !40
  %419 = extractelement <16 x i8> %413, i64 4, !dbg !40
  %420 = and i8 %419, 1, !dbg !40
  %421 = shufflevector <16 x i8> %413, <16 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !40
  %422 = and <2 x i8> %421, splat (i8 1), !dbg !40
  %423 = zext i1 %410 to i8, !dbg !40
  %424 = extractelement <16 x i8> %413, i64 8, !dbg !40
  %425 = and i8 %424, 1, !dbg !40
  %426 = shufflevector <16 x i8> %413, <16 x i8> poison, <2 x i32> <i32 9, i32 10>, !dbg !40
  %427 = and <2 x i8> %426, splat (i8 1), !dbg !40
  %428 = zext i1 %411 to i8, !dbg !40
  %429 = extractelement <16 x i8> %413, i64 12, !dbg !40
  %430 = and i8 %429, 1, !dbg !40
  %431 = shufflevector <16 x i8> %413, <16 x i8> poison, <2 x i32> <i32 13, i32 14>, !dbg !40
  %432 = and <2 x i8> %431, splat (i8 1), !dbg !40
  %433 = zext i1 %412 to i8, !dbg !40
  %434 = insertelement <4 x i8> poison, i8 %415, i64 0, !dbg !40
  %435 = shufflevector <2 x i8> %417, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !40
  %436 = shufflevector <4 x i8> %434, <4 x i8> %435, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !40
  %437 = insertelement <4 x i8> %436, i8 %418, i64 3, !dbg !40
  %438 = bitcast <4 x i8> %437 to i32, !dbg !40
  %439 = insertelement <4 x i8> poison, i8 %420, i64 0, !dbg !40
  %440 = shufflevector <2 x i8> %422, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !40
  %441 = shufflevector <4 x i8> %439, <4 x i8> %440, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !40
  %442 = insertelement <4 x i8> %441, i8 %423, i64 3, !dbg !40
  %443 = bitcast <4 x i8> %442 to i32, !dbg !40
  %444 = insertelement <4 x i8> poison, i8 %425, i64 0, !dbg !40
  %445 = shufflevector <2 x i8> %427, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !40
  %446 = shufflevector <4 x i8> %444, <4 x i8> %445, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !40
  %447 = insertelement <4 x i8> %446, i8 %428, i64 3, !dbg !40
  %448 = bitcast <4 x i8> %447 to i32, !dbg !40
  %449 = insertelement <4 x i8> poison, i8 %430, i64 0, !dbg !40
  %450 = shufflevector <2 x i8> %432, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !40
  %451 = shufflevector <4 x i8> %449, <4 x i8> %450, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !40
  %452 = insertelement <4 x i8> %451, i8 %433, i64 3, !dbg !40
  %453 = bitcast <4 x i8> %452 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %438, i32 %443, i32 %448, i32 %453, ptr addrspace(1) %370, i1 %32) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cc2m47gtodaqeyrlconk5kgyif3d22bqw5iwzplmrzlejf32csuv.py", directory: "inductor_cache/c2")
!4 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_threshold_backward_4", linkageName: "triton_poi_fused_convolution_relu_threshold_backward_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 36, column: 40, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 18, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 38, column: 19, scope: !7)
!36 = !DILocation(line: 39, column: 30, scope: !7)
!37 = !DILocation(line: 39, column: 25, scope: !7)
!38 = !DILocation(line: 39, column: 43, scope: !7)
!39 = !DILocation(line: 40, column: 25, scope: !7)
!40 = !DILocation(line: 40, column: 55, scope: !7)
!41 = !DILocation(line: 40, column: 4, scope: !7)
