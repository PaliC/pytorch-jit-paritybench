#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 4], order = [0, 1]}>
#loc = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":19:0)
#loc1 = loc(unknown)
#loc40 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":49:41)
#loc94 = loc(callsite(#loc1 at #loc40))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_convolution_native_layer_norm_22(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3.840000e+02> : tensor<64x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<384> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<16> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<64> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<64> : tensor<64x1xi32, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_5 = arith.constant dense<384> : tensor<1x4xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<64x4xf32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<0.000000e+00> : tensor<1x4xf32, #blocked> loc(#loc1)
    %cst_8 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_9 = arith.constant dense<1.000000e+00> : tensor<64x4xf32, #blocked> loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c384_i32 = arith.constant 384 : i32 loc(#loc1)
    %cst_10 = arith.constant dense<9.99999997E-7> : tensor<64x1xf32, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<9.99999997E-7> : tensor<64x1xf32, #blocked1> loc(#loc1)
    %cst_12 = arith.constant dense<3.840000e+02> : tensor<64x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<64x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<64x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_4 : tensor<64x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_3 : tensor<64x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x4xi32, #blocked> loc(#loc7)
    %14 = arith.remsi %9, %cst_2 : tensor<64x1xi32, #blocked1> loc(#loc8)
    %15 = arith.divsi %9, %cst_2 : tensor<64x1xi32, #blocked1> loc(#loc9)
    %16 = arith.remsi %15, %cst_2 : tensor<64x1xi32, #blocked1> loc(#loc10)
    %17 = arith.divsi %9, %cst_1 : tensor<64x1xi32, #blocked1> loc(#loc11)
    %18 = arith.muli %8, %cst_0 : tensor<64x1xi32, #blocked> loc(#loc12)
    %19 = tt.broadcast %18 : tensor<64x1xi32, #blocked> -> tensor<64x4xi32, #blocked> loc(#loc13)
    %20 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x4x!tt.ptr<f32>, #blocked> loc(#loc14)
    %21 = tt.broadcast %10 : tensor<64x1xi1, #blocked> -> tensor<64x4xi1, #blocked> loc(#loc15)
    %22 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x4x!tt.ptr<f32>, #blocked> loc(#loc16)
    %23:3 = scf.for %arg9 = %c0_i32 to %c384_i32 step %c4_i32 iter_args(%arg10 = %cst_6, %arg11 = %cst_6, %arg12 = %cst_6) -> (tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>)  : i32 {
      %50 = tt.splat %arg9 : i32 -> tensor<1x4xi32, #blocked> loc(#loc18)
      %51 = arith.addi %50, %13 : tensor<1x4xi32, #blocked> loc(#loc18)
      %52 = arith.cmpi slt, %51, %cst_5 : tensor<1x4xi32, #blocked> loc(#loc19)
      %53 = tt.broadcast %51 : tensor<1x4xi32, #blocked> -> tensor<64x4xi32, #blocked> loc(#loc13)
      %54 = arith.addi %53, %19 : tensor<64x4xi32, #blocked> loc(#loc13)
      %55 = tt.addptr %20, %54 : tensor<64x4x!tt.ptr<f32>, #blocked>, tensor<64x4xi32, #blocked> loc(#loc14)
      %56 = tt.broadcast %52 : tensor<1x4xi1, #blocked> -> tensor<64x4xi1, #blocked> loc(#loc15)
      %57 = arith.andi %56, %21 : tensor<64x4xi1, #blocked> loc(#loc15)
      %58 = tt.load %55, %57, %cst_6 evictionPolicy = evict_first : tensor<64x4x!tt.ptr<f32>, #blocked> loc(#loc20)
      %59 = tt.addptr %22, %51 : tensor<1x4x!tt.ptr<f32>, #blocked>, tensor<1x4xi32, #blocked> loc(#loc16)
      %60 = tt.load %59, %52, %cst_7 evictionPolicy = evict_last : tensor<1x4x!tt.ptr<f32>, #blocked> loc(#loc21)
      %61 = tt.broadcast %60 : tensor<1x4xf32, #blocked> -> tensor<64x4xf32, #blocked> loc(#loc22)
      %62 = arith.addf %58, %61 : tensor<64x4xf32, #blocked> loc(#loc22)
      %63 = arith.cmpi eq, %arg9, %c0_i32 : i32 loc(#loc23)
      %64:3 = scf.if %63 -> (tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>) {
        scf.yield %cst_6, %62, %cst_9 : tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked> loc(#loc85)
      } else {
        %68 = arith.subf %62, %arg10 : tensor<64x4xf32, #blocked> loc(#loc86)
        %69 = arith.addf %arg12, %cst_9 : tensor<64x4xf32, #blocked> loc(#loc87)
        %70 = arith.divf %68, %69 : tensor<64x4xf32, #blocked> loc(#loc88)
        %71 = arith.addf %arg10, %70 : tensor<64x4xf32, #blocked> loc(#loc89)
        %72 = arith.subf %62, %71 : tensor<64x4xf32, #blocked> loc(#loc90)
        %73 = arith.mulf %68, %72 : tensor<64x4xf32, #blocked> loc(#loc91)
        %74 = arith.addf %arg11, %73 : tensor<64x4xf32, #blocked> loc(#loc92)
        scf.yield %74, %71, %69 : tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked> loc(#loc92)
      } loc(#loc84)
      %65 = arith.select %57, %64#1, %arg10 : tensor<64x4xi1, #blocked>, tensor<64x4xf32, #blocked> loc(#loc34)
      %66 = arith.select %57, %64#0, %arg11 : tensor<64x4xi1, #blocked>, tensor<64x4xf32, #blocked> loc(#loc35)
      %67 = arith.select %57, %64#2, %arg12 : tensor<64x4xi1, #blocked>, tensor<64x4xf32, #blocked> loc(#loc36)
      tt.store %55, %62, %57 : tensor<64x4x!tt.ptr<f32>, #blocked> loc(#loc37)
      scf.yield %65, %66, %67 : tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked> loc(#loc38)
    } loc(#loc17)
    %24:3 = "tt.reduce"(%23#0, %23#1, %23#2) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc40)), %arg10: f32 loc(callsite(#loc1 at #loc40)), %arg11: f32 loc(callsite(#loc1 at #loc40)), %arg12: f32 loc(callsite(#loc1 at #loc40)), %arg13: f32 loc(callsite(#loc1 at #loc40)), %arg14: f32 loc(callsite(#loc1 at #loc40))):
      %50 = arith.subf %arg12, %arg9 : f32 loc(#loc107)
      %51 = arith.addf %arg11, %arg14 : f32 loc(#loc108)
      %52 = arith.cmpf oeq, %51, %cst_8 : f32 loc(#loc109)
      %53 = arith.divf %arg14, %51 : f32 loc(#loc110)
      %54 = arith.select %52, %cst_8, %53 : f32 loc(#loc111)
      %55 = arith.mulf %50, %54 : f32 loc(#loc112)
      %56 = arith.addf %arg9, %55 : f32 loc(#loc113)
      %57 = arith.addf %arg10, %arg13 : f32 loc(#loc114)
      %58 = arith.mulf %50, %50 : f32 loc(#loc115)
      %59 = arith.mulf %58, %arg11 : f32 loc(#loc116)
      %60 = arith.mulf %59, %54 : f32 loc(#loc117)
      %61 = arith.addf %57, %60 : f32 loc(#loc118)
      tt.reduce.return %56, %61, %51 : f32, f32, f32 loc(#loc93)
    }) : (tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>) -> (tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc93)
    %25 = triton_gpu.convert_layout %24#0 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc53)
    %26 = tt.expand_dims %25 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xf32, #blocked1> loc(#loc53)
    %27 = tt.expand_dims %24#0 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xf32, #blocked> loc(#loc53)
    %28 = triton_gpu.convert_layout %24#1 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc54)
    %29 = tt.expand_dims %28 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xf32, #blocked1> loc(#loc55)
    %30 = tt.expand_dims %24#1 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xf32, #blocked> loc(#loc55)
    %31 = arith.muli %14, %cst_2 : tensor<64x1xi32, #blocked1> loc(#loc56)
    %32 = arith.addi %16, %31 : tensor<64x1xi32, #blocked1> loc(#loc57)
    %33 = arith.muli %17, %cst_1 : tensor<64x1xi32, #blocked1> loc(#loc58)
    %34 = arith.addi %32, %33 : tensor<64x1xi32, #blocked1> loc(#loc59)
    %35 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc60)
    %36 = tt.addptr %35, %34 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc60)
    tt.store %36, %26, %11 : tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc61)
    %37 = arith.divf %29, %cst_12 : tensor<64x1xf32, #blocked1> loc(#loc62)
    %38 = arith.divf %30, %cst : tensor<64x1xf32, #blocked> loc(#loc62)
    %39 = arith.addf %37, %cst_11 : tensor<64x1xf32, #blocked1> loc(#loc63)
    %40 = arith.addf %38, %cst_10 : tensor<64x1xf32, #blocked> loc(#loc63)
    %41 = tt.extern_elementwise %39 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<64x1xf32, #blocked1>) -> tensor<64x1xf32, #blocked1> loc(#loc54)
    %42 = tt.extern_elementwise %40 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<64x1xf32, #blocked>) -> tensor<64x1xf32, #blocked> loc(#loc54)
    %43 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc64)
    %44 = tt.addptr %43, %34 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc64)
    tt.store %44, %41, %11 : tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc65)
    %45 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x4x!tt.ptr<f32>, #blocked> loc(#loc66)
    %46 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x4x!tt.ptr<f32>, #blocked> loc(#loc67)
    %47 = tt.broadcast %27 : tensor<64x1xf32, #blocked> -> tensor<64x4xf32, #blocked> loc(#loc68)
    %48 = tt.broadcast %42 : tensor<64x1xf32, #blocked> -> tensor<64x4xf32, #blocked> loc(#loc69)
    %49 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<64x4x!tt.ptr<f32>, #blocked> loc(#loc70)
    scf.for %arg9 = %c0_i32 to %c384_i32 step %c4_i32  : i32 {
      %50 = tt.splat %arg9 : i32 -> tensor<1x4xi32, #blocked> loc(#loc72)
      %51 = arith.addi %50, %13 : tensor<1x4xi32, #blocked> loc(#loc72)
      %52 = arith.cmpi slt, %51, %cst_5 : tensor<1x4xi32, #blocked> loc(#loc73)
      %53 = tt.broadcast %51 : tensor<1x4xi32, #blocked> -> tensor<64x4xi32, #blocked> loc(#loc74)
      %54 = arith.addi %53, %19 : tensor<64x4xi32, #blocked> loc(#loc74)
      %55 = tt.addptr %20, %54 : tensor<64x4x!tt.ptr<f32>, #blocked>, tensor<64x4xi32, #blocked> loc(#loc75)
      %56 = tt.broadcast %52 : tensor<1x4xi1, #blocked> -> tensor<64x4xi1, #blocked> loc(#loc76)
      %57 = arith.andi %56, %21 : tensor<64x4xi1, #blocked> loc(#loc76)
      %58 = tt.load %55, %57, %cst_6 evictionPolicy = evict_first : tensor<64x4x!tt.ptr<f32>, #blocked> loc(#loc77)
      %59 = tt.addptr %45, %51 : tensor<1x4x!tt.ptr<f32>, #blocked>, tensor<1x4xi32, #blocked> loc(#loc66)
      %60 = tt.load %59, %52, %cst_7 evictionPolicy = evict_last : tensor<1x4x!tt.ptr<f32>, #blocked> loc(#loc78)
      %61 = tt.addptr %46, %51 : tensor<1x4x!tt.ptr<f32>, #blocked>, tensor<1x4xi32, #blocked> loc(#loc67)
      %62 = tt.load %61, %52, %cst_7 evictionPolicy = evict_last : tensor<1x4x!tt.ptr<f32>, #blocked> loc(#loc79)
      %63 = arith.subf %58, %47 : tensor<64x4xf32, #blocked> loc(#loc68)
      %64 = arith.mulf %63, %48 : tensor<64x4xf32, #blocked> loc(#loc69)
      %65 = tt.broadcast %60 : tensor<1x4xf32, #blocked> -> tensor<64x4xf32, #blocked> loc(#loc80)
      %66 = arith.mulf %64, %65 : tensor<64x4xf32, #blocked> loc(#loc80)
      %67 = tt.broadcast %62 : tensor<1x4xf32, #blocked> -> tensor<64x4xf32, #blocked> loc(#loc81)
      %68 = arith.addf %66, %67 : tensor<64x4xf32, #blocked> loc(#loc81)
      %69 = tt.addptr %49, %54 : tensor<64x4x!tt.ptr<f32>, #blocked>, tensor<64x4xi32, #blocked> loc(#loc70)
      tt.store %69, %68, %57 : tensor<64x4x!tt.ptr<f32>, #blocked> loc(#loc82)
    } loc(#loc71)
    tt.return loc(#loc83)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":22:28)
#loc3 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":22:33)
#loc4 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":23:44)
#loc5 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":23:23)
#loc6 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":24:21)
#loc7 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":25:33)
#loc8 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":30:19)
#loc9 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":31:21)
#loc10 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":31:26)
#loc11 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":32:19)
#loc12 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":37:47)
#loc13 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":37:43)
#loc14 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":37:38)
#loc15 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":37:60)
#loc16 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":38:34)
#loc17 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":33:36)
#loc18 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":34:27)
#loc19 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":35:25)
#loc20 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":37:52)
#loc21 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":38:39)
#loc22 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":39:22)
#loc23 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":42:62)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":178:7)
#loc25 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":42:51)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":181:31)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":183:24)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":184:30)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:34)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:26)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:39)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:31)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:22)
#loc34 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":44:60)
#loc35 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":45:56)
#loc36 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":46:64)
#loc37 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":47:52)
#loc38 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":47:8)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc43 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc44 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc45 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc46 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc47 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc48 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc49 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc50 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc51 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc52 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc53 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":51:20)
#loc54 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":59:28)
#loc55 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":52:20)
#loc56 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":54:32)
#loc57 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":54:30)
#loc58 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":54:40)
#loc59 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":54:37)
#loc60 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":54:25)
#loc61 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":54:51)
#loc62 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":56:18)
#loc63 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":58:19)
#loc64 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":60:25)
#loc65 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":60:52)
#loc66 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":66:35)
#loc67 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":67:35)
#loc68 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":68:24)
#loc69 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":69:24)
#loc70 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":72:29)
#loc71 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":61:36)
#loc72 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":62:27)
#loc73 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":63:25)
#loc74 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":65:44)
#loc75 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":65:39)
#loc76 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":65:61)
#loc77 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":65:53)
#loc78 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":66:40)
#loc79 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":67:40)
#loc80 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":70:24)
#loc81 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":71:24)
#loc82 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":72:50)
#loc83 = loc("inductor_cache/fk/cfktqll3xgqsoy5nlgmxiysluienzf2avpo3ogmt36hsx7xc5hqw.py":61:4)
#loc84 = loc(callsite(#loc24 at #loc25))
#loc85 = loc(callsite(#loc26 at #loc25))
#loc86 = loc(callsite(#loc27 at #loc25))
#loc87 = loc(callsite(#loc28 at #loc25))
#loc88 = loc(callsite(#loc29 at #loc25))
#loc89 = loc(callsite(#loc30 at #loc25))
#loc90 = loc(callsite(#loc31 at #loc25))
#loc91 = loc(callsite(#loc32 at #loc25))
#loc92 = loc(callsite(#loc33 at #loc25))
#loc93 = loc(callsite(#loc39 at #loc40))
#loc95 = loc(callsite(#loc41 at #loc39))
#loc96 = loc(callsite(#loc42 at #loc39))
#loc97 = loc(callsite(#loc43 at #loc39))
#loc98 = loc(callsite(#loc44 at #loc39))
#loc99 = loc(callsite(#loc45 at #loc39))
#loc100 = loc(callsite(#loc46 at #loc39))
#loc101 = loc(callsite(#loc47 at #loc39))
#loc102 = loc(callsite(#loc48 at #loc39))
#loc103 = loc(callsite(#loc49 at #loc39))
#loc104 = loc(callsite(#loc50 at #loc39))
#loc105 = loc(callsite(#loc51 at #loc39))
#loc106 = loc(callsite(#loc52 at #loc39))
#loc107 = loc(callsite(#loc95 at #loc40))
#loc108 = loc(callsite(#loc96 at #loc40))
#loc109 = loc(callsite(#loc97 at #loc40))
#loc110 = loc(callsite(#loc98 at #loc40))
#loc111 = loc(callsite(#loc99 at #loc40))
#loc112 = loc(callsite(#loc100 at #loc40))
#loc113 = loc(callsite(#loc101 at #loc40))
#loc114 = loc(callsite(#loc102 at #loc40))
#loc115 = loc(callsite(#loc103 at #loc40))
#loc116 = loc(callsite(#loc104 at #loc40))
#loc117 = loc(callsite(#loc105 at #loc40))
#loc118 = loc(callsite(#loc106 at #loc40))
