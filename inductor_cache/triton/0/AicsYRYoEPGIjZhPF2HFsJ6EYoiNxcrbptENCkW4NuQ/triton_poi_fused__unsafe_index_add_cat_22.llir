; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_cat_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 2, !dbg !13
  %14 = icmp slt i32 %12, 33792, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %15 = sdiv i32 %.frozen, 8, !dbg !15
  %16 = srem i32 %15, 8, !dbg !16
  %17 = mul i32 %15, 8, !dbg !17
  %.decomposed = sub i32 %.frozen, %17, !dbg !17
  %18 = srem i32 %13, 8, !dbg !17
  %.frozen4 = freeze i32 %12, !dbg !18
  %19 = sdiv i32 %.frozen4, 64, !dbg !18
  %20 = srem i32 %19, 132, !dbg !19
  %.frozen6 = freeze i32 %12, !dbg !20
  %21 = sdiv i32 %.frozen6, 8448, !dbg !20
  %22 = mul i32 %19, 64, !dbg !21
  %.decomposed5 = sub i32 %.frozen4, %22, !dbg !21
  %23 = sext i32 %16 to i64, !dbg !22
  %24 = getelementptr i64, ptr addrspace(1) %0, i64 %23, !dbg !22
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 %14) #1, !dbg !23
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 %14) #1, !dbg !23
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 %14) #1, !dbg !23
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 %14) #1, !dbg !23
  %29 = sext i32 %.decomposed to i64, !dbg !24
  %30 = getelementptr i64, ptr addrspace(1) %0, i64 %29, !dbg !24
  %31 = sext i32 %18 to i64, !dbg !24
  %32 = getelementptr i64, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %30, i1 %14) #1, !dbg !25
  %34 = extractvalue { i64, i64 } %33, 0, !dbg !25
  %35 = extractvalue { i64, i64 } %33, 1, !dbg !25
  %36 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %32, i1 %14) #1, !dbg !25
  %37 = extractvalue { i64, i64 } %36, 0, !dbg !25
  %38 = extractvalue { i64, i64 } %36, 1, !dbg !25
  %39 = lshr i64 %25, 61, !dbg !26
  %40 = and i64 %39, 4, !dbg !26
  %41 = add i64 %40, %25, !dbg !26
  %42 = lshr i64 %34, 61, !dbg !27
  %43 = and i64 %42, 4, !dbg !27
  %44 = lshr i64 %35, 61, !dbg !27
  %45 = and i64 %44, 4, !dbg !27
  %46 = lshr i64 %37, 61, !dbg !27
  %47 = and i64 %46, 4, !dbg !27
  %48 = lshr i64 %38, 61, !dbg !27
  %49 = and i64 %48, 4, !dbg !27
  %50 = shl i64 %41, 2, !dbg !28
  %51 = shl nsw i32 %19, 4, !dbg !29
  %52 = sext i32 %51 to i64, !dbg !30
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %53, i64 %43, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %54, i64 %50, !dbg !31
  %56 = getelementptr float, ptr addrspace(1) %55, i64 %52, !dbg !31
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !31
  %58 = getelementptr float, ptr addrspace(1) %57, i64 %45, !dbg !31
  %59 = getelementptr float, ptr addrspace(1) %58, i64 %50, !dbg !31
  %60 = getelementptr float, ptr addrspace(1) %59, i64 %52, !dbg !31
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !31
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %47, !dbg !31
  %63 = getelementptr float, ptr addrspace(1) %62, i64 %50, !dbg !31
  %64 = getelementptr float, ptr addrspace(1) %63, i64 %52, !dbg !31
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !31
  %66 = getelementptr float, ptr addrspace(1) %65, i64 %49, !dbg !31
  %67 = getelementptr float, ptr addrspace(1) %66, i64 %50, !dbg !31
  %68 = getelementptr float, ptr addrspace(1) %67, i64 %52, !dbg !31
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %14) #1, !dbg !32
  %70 = bitcast i32 %69 to float, !dbg !32
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %14) #1, !dbg !32
  %72 = bitcast i32 %71 to float, !dbg !32
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %14) #1, !dbg !32
  %74 = bitcast i32 %73 to float, !dbg !32
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %14) #1, !dbg !32
  %76 = bitcast i32 %75 to float, !dbg !32
  %77 = icmp slt i32 %20, 96, !dbg !33
  %78 = mul i32 %21, 8448, !dbg !34
  %srem.decomposed = sub i32 %.frozen6, %78, !dbg !34
  %79 = mul nsw i32 %21, 6144, !dbg !35
  %80 = add nsw i32 %79, %srem.decomposed, !dbg !36
  %81 = sext i32 %80 to i64, !dbg !37
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !37
  %83 = and i1 %14, %77, !dbg !38
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 %83, i32 0, i1 %83, i32 0, i1 %83, i32 0, i1 %83, i32 0, i1 %83) #1, !dbg !39
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !39
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !39
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !39
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !39
  %89 = icmp sgt i32 %20, 95, !dbg !40
  %90 = shl nsw i32 %20, 6, !dbg !41
  %91 = mul nsw i32 %21, 2304, !dbg !42
  %92 = add nsw i32 %.decomposed5, -6144, !dbg !41
  %93 = add nsw i32 %92, %91, !dbg !43
  %94 = add nsw i32 %93, %90, !dbg !44
  %95 = sext i32 %94 to i64, !dbg !45
  %96 = getelementptr float, ptr addrspace(1) %3, i64 %95, !dbg !45
  %97 = and i1 %14, %89, !dbg !46
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %96, i1 %97, i32 0, i1 %97, i32 0, i1 %97, i32 0, i1 %97, i32 0, i1 %97) #1, !dbg !47
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !47
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !47
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !47
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !47
  %.v = select i1 %77, i32 %85, i32 %99, !dbg !48
  %103 = bitcast i32 %.v to float, !dbg !48
  %.v1 = select i1 %77, i32 %86, i32 %100, !dbg !48
  %104 = bitcast i32 %.v1 to float, !dbg !48
  %.v2 = select i1 %77, i32 %87, i32 %101, !dbg !48
  %105 = bitcast i32 %.v2 to float, !dbg !48
  %.v3 = select i1 %77, i32 %88, i32 %102, !dbg !48
  %106 = bitcast i32 %.v3 to float, !dbg !48
  %107 = fadd float %70, %103, !dbg !49
  %108 = fadd float %72, %104, !dbg !49
  %109 = fadd float %74, %105, !dbg !49
  %110 = fadd float %76, %106, !dbg !49
  %111 = sext i32 %12 to i64, !dbg !50
  %112 = getelementptr float, ptr addrspace(1) %4, i64 %111, !dbg !50
  %113 = bitcast float %107 to i32, !dbg !51
  %114 = bitcast float %108 to i32, !dbg !51
  %115 = bitcast float %109 to i32, !dbg !51
  %116 = bitcast float %110 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %113, i32 %114, i32 %115, i32 %116, ptr addrspace(1) %112, i1 %14) #1, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctpkr4aklheogd7tcdqxohd43p3ebbd7ctw6btiiqie3wyvhmn4p.py", directory: "inductor_cache/tp")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_cat_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_cat_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_cat_22", linkageName: "triton_poi_fused__unsafe_index_add_cat_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 27, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 32, scope: !7)
!27 = !DILocation(line: 39, column: 32, scope: !7)
!28 = !DILocation(line: 40, column: 39, scope: !7)
!29 = !DILocation(line: 40, column: 49, scope: !7)
!30 = !DILocation(line: 40, column: 46, scope: !7)
!31 = !DILocation(line: 40, column: 30, scope: !7)
!32 = !DILocation(line: 40, column: 54, scope: !7)
!33 = !DILocation(line: 45, column: 20, scope: !7)
!34 = !DILocation(line: 46, column: 36, scope: !7)
!35 = !DILocation(line: 46, column: 51, scope: !7)
!36 = !DILocation(line: 46, column: 46, scope: !7)
!37 = !DILocation(line: 46, column: 31, scope: !7)
!38 = !DILocation(line: 46, column: 64, scope: !7)
!39 = !DILocation(line: 46, column: 56, scope: !7)
!40 = !DILocation(line: 47, column: 21, scope: !7)
!41 = !DILocation(line: 50, column: 40, scope: !7)
!42 = !DILocation(line: 50, column: 59, scope: !7)
!43 = !DILocation(line: 50, column: 36, scope: !7)
!44 = !DILocation(line: 50, column: 54, scope: !7)
!45 = !DILocation(line: 50, column: 31, scope: !7)
!46 = !DILocation(line: 50, column: 72, scope: !7)
!47 = !DILocation(line: 50, column: 64, scope: !7)
!48 = !DILocation(line: 51, column: 35, scope: !7)
!49 = !DILocation(line: 52, column: 19, scope: !7)
!50 = !DILocation(line: 53, column: 25, scope: !7)
!51 = !DILocation(line: 53, column: 37, scope: !7)
!52 = !DILocation(line: 53, column: 4, scope: !7)
