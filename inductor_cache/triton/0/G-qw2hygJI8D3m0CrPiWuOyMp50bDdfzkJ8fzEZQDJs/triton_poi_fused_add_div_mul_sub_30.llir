; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_div_mul_sub_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = and i32 %11, 127, !dbg !12
  %15 = or disjoint i32 %14, 128, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %10, %14, !dbg !13
  %18 = or disjoint i32 %10, %15, !dbg !13
  %19 = icmp slt i32 %16, 1536, !dbg !14
  %20 = icmp slt i32 %17, 1536, !dbg !14
  %21 = icmp slt i32 %18, 1536, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %23 = icmp slt i32 %22, 16, !dbg !16
  %.frozen = freeze i32 %16, !dbg !17
  %24 = sdiv i32 %.frozen, 384, !dbg !17
  %25 = mul i32 %24, 384, !dbg !18
  %.decomposed = sub i32 %.frozen, %25, !dbg !18
  %26 = sdiv i32 %17, 384, !dbg !17
  %27 = sdiv i32 %18, 384, !dbg !17
  %28 = sext i32 %.decomposed to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !19
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %19) #2, !dbg !20
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !20
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !20
  %.idx = shl nuw nsw i32 %13, 3, !dbg !20
  %33 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !20
  %34 = insertelement <1 x i32> poison, i32 %31, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %33, <1 x i32> %34, i1 true) #2, !dbg !20
  %35 = shl nuw nsw i32 %13, 1, !dbg !20
  %36 = or disjoint i32 %35, 2, !dbg !20
  %37 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %36, !dbg !20
  %38 = insertelement <1 x i32> poison, i32 %32, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %37, <1 x i32> %38, i1 true) #2, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %.idx1 = shl nuw nsw i32 %14, 3, !dbg !20
  %39 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !20
  %40 = load float, ptr addrspace(3) %39, align 8, !dbg !20
  %.idx2 = shl nuw nsw i32 %15, 3, !dbg !20
  %41 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !20
  %42 = load float, ptr addrspace(3) %41, align 8, !dbg !20
  %43 = shl i32 %17, 4, !dbg !21
  %44 = shl i32 %18, 4, !dbg !21
  %45 = add i32 %43, %22, !dbg !22
  %46 = add i32 %44, %22, !dbg !22
  %47 = sext i32 %45 to i64, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !23
  %49 = sext i32 %46 to i64, !dbg !23
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !23
  %51 = and i1 %23, %20, !dbg !24
  %52 = and i1 %23, %21, !dbg !24
  %53 = and i1 %23, %19, !dbg !24
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %51) #2, !dbg !25
  %55 = bitcast i32 %54 to float, !dbg !25
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %52) #2, !dbg !25
  %57 = bitcast i32 %56 to float, !dbg !25
  %58 = shl nsw i32 %26, 4, !dbg !26
  %59 = shl nsw i32 %27, 4, !dbg !26
  %60 = add i32 %58, %22, !dbg !27
  %61 = add i32 %59, %22, !dbg !27
  %62 = sext i32 %60 to i64, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !28
  %64 = sext i32 %61 to i64, !dbg !28
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !28
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %51) #2, !dbg !29
  %67 = bitcast i32 %66 to float, !dbg !29
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %52) #2, !dbg !29
  %69 = bitcast i32 %68 to float, !dbg !29
  %70 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !30
  %71 = getelementptr float, ptr addrspace(1) %3, i64 %64, !dbg !30
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %51) #2, !dbg !31
  %73 = bitcast i32 %72 to float, !dbg !31
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %52) #2, !dbg !31
  %75 = bitcast i32 %74 to float, !dbg !31
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !32
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %76, i1 %19) #2, !dbg !33
  %78 = extractvalue { i32, i32 } %77, 0, !dbg !33
  %79 = extractvalue { i32, i32 } %77, 1, !dbg !33
  %80 = bitcast i32 %78 to float, !dbg !33
  %81 = bitcast i32 %79 to float, !dbg !33
  %82 = fsub float %55, %67, !dbg !34
  %83 = fsub float %57, %69, !dbg !34
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float %73) #2, !dbg !35
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float %75) #2, !dbg !35
  %86 = fmul float %40, %84, !dbg !36
  %87 = fmul float %42, %85, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !36
  %89 = bitcast float %86 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #2, !dbg !36
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !36
  %91 = bitcast float %87 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !36
  %93 = load float, ptr addrspace(3) %92, align 8, !dbg !36
  %94 = getelementptr inbounds i8, ptr addrspace(3) %92, i32 4, !dbg !36
  %95 = load float, ptr addrspace(3) %94, align 4, !dbg !36
  %96 = fadd float %93, %80, !dbg !37
  %97 = fadd float %95, %81, !dbg !37
  %98 = mul i32 %22, 384, !dbg !38
  %99 = add i32 %.decomposed, %98, !dbg !39
  %100 = mul i32 %24, 6144, !dbg !40
  %101 = add i32 %99, %100, !dbg !41
  %102 = sext i32 %101 to i64, !dbg !42
  %103 = getelementptr float, ptr addrspace(1) %5, i64 %102, !dbg !42
  %104 = bitcast float %96 to i32, !dbg !43
  %105 = bitcast float %97 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %104, i32 %105, ptr addrspace(1) %103, i1 %53) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvyithxfccjcivacam5aovzjfak26scmtvqt7lqmxqylruxdyrzk.py", directory: "inductor_cache/vy")
!4 = !{ptr @triton_poi_fused_add_div_mul_sub_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mul_sub_30, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mul_sub_30", linkageName: "triton_poi_fused_add_div_mul_sub_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 38, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 51, scope: !7)
!25 = !DILocation(line: 33, column: 43, scope: !7)
!26 = !DILocation(line: 34, column: 38, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 43, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 43, scope: !7)
!32 = !DILocation(line: 36, column: 30, scope: !7)
!33 = !DILocation(line: 36, column: 35, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 34, scope: !7)
!39 = !DILocation(line: 41, column: 30, scope: !7)
!40 = !DILocation(line: 41, column: 44, scope: !7)
!41 = !DILocation(line: 41, column: 39, scope: !7)
!42 = !DILocation(line: 41, column: 25, scope: !7)
!43 = !DILocation(line: 41, column: 55, scope: !7)
!44 = !DILocation(line: 41, column: 4, scope: !7)
