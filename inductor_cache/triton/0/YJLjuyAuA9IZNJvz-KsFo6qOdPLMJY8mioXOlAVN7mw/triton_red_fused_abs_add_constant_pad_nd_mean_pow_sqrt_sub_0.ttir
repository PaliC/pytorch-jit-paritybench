#loc = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":19:0)
#loc1 = loc(unknown)
#loc65 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":69:27)
#loc72 = loc(callsite(#loc1 at #loc65))
module {
  tt.func public @triton_red_fused_abs_add_constant_pad_nd_mean_pow_sqrt_sub_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":19:0), %arg7: i32 loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":19:0)) attributes {noinline = false} {
    %c7936_i32 = arith.constant 7936 : i32 loc(#loc1)
    %c36_i32 = arith.constant 36 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c8192_i32 = arith.constant 8192 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<9.99999974E-5> : tensor<1x2048xf32> loc(#loc1)
    %cst_0 = arith.constant dense<3968> : tensor<1x2048xi32> loc(#loc1)
    %cst_1 = arith.constant dense<-64> : tensor<1x2048xi32> loc(#loc1)
    %cst_2 = arith.constant dense<62> : tensor<1x2048xi32> loc(#loc1)
    %cst_3 = arith.constant dense<62> : tensor<1x2048xi64> loc(#loc1)
    %cst_4 = arith.constant dense<0> : tensor<1x2048xi64> loc(#loc1)
    %cst_5 = arith.constant dense<-1> : tensor<1x2048xi32> loc(#loc1)
    %cst_6 = arith.constant dense<4096> : tensor<1x2048xi32> loc(#loc1)
    %cst_7 = arith.constant dense<64> : tensor<1x2048xi32> loc(#loc1)
    %cst_8 = arith.constant dense<8192> : tensor<1x2048xi32> loc(#loc1)
    %cst_9 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c36_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i1 -> tensor<1x1xi1> loc(#loc3)
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32> loc(#loc4)
    %4 = tt.expand_dims %3 {axis = 0 : i32} : tensor<2048xi32> -> tensor<1x2048xi32> loc(#loc5)
    %5 = arith.muli %0, %c7936_i32 : i32 loc(#loc6)
    %6 = tt.splat %5 : i32 -> tensor<1x2048xi32> loc(#loc7)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc8)
    %8 = tt.splat %1 : i1 -> tensor<1x2048xi1> loc(#loc9)
    %9 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc10)
    %10 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc11)
    %11 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc12)
    %12 = arith.muli %0, %c8192_i32 : i32 loc(#loc13)
    %13 = tt.splat %12 : i32 -> tensor<1x2048xi32> loc(#loc14)
    %14 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc15)
    %15 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc16)
    %16 = scf.for %arg9 = %c0_i32 to %c8192_i32 step %c2048_i32 iter_args(%arg10 = %cst_9) -> (tensor<1x2048xf32>)  : i32 {
      %21 = tt.splat %arg9 : i32 -> tensor<1x2048xi32> loc(#loc18)
      %22 = arith.addi %21, %4 : tensor<1x2048xi32> loc(#loc18)
      %23 = arith.cmpi slt, %22, %cst_8 : tensor<1x2048xi32> loc(#loc19)
      %24 = arith.remsi %22, %cst_7 : tensor<1x2048xi32> loc(#loc20)
      %25 = arith.divsi %22, %cst_7 : tensor<1x2048xi32> loc(#loc21)
      %26 = arith.remsi %25, %cst_7 : tensor<1x2048xi32> loc(#loc22)
      %27 = arith.divsi %22, %cst_6 : tensor<1x2048xi32> loc(#loc23)
      %28 = arith.remsi %22, %cst_6 : tensor<1x2048xi32> loc(#loc24)
      %29 = arith.addi %24, %cst_5 : tensor<1x2048xi32> loc(#loc25)
      %30 = arith.extsi %29 : tensor<1x2048xi32> to tensor<1x2048xi64> loc(#loc26)
      %31 = arith.cmpi sge, %30, %cst_4 : tensor<1x2048xi64> loc(#loc26)
      %32 = arith.cmpi slt, %30, %cst_3 : tensor<1x2048xi64> loc(#loc27)
      %33 = arith.andi %31, %32 : tensor<1x2048xi1> loc(#loc28)
      %34 = arith.muli %25, %cst_2 : tensor<1x2048xi32> loc(#loc29)
      %35 = arith.addi %29, %34 : tensor<1x2048xi32> loc(#loc30)
      %36 = arith.addi %35, %6 : tensor<1x2048xi32> loc(#loc7)
      %37 = tt.addptr %7, %36 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc8)
      %38 = arith.andi %23, %33 : tensor<1x2048xi1> loc(#loc31)
      %39 = arith.andi %38, %8 : tensor<1x2048xi1> loc(#loc9)
      %40 = tt.load %37, %39, %cst_9 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>> loc(#loc32)
      %41 = arith.mulf %40, %40 : tensor<1x2048xf32> loc(#loc33)
      %42 = arith.addi %26, %cst_5 : tensor<1x2048xi32> loc(#loc34)
      %43 = arith.extsi %42 : tensor<1x2048xi32> to tensor<1x2048xi64> loc(#loc35)
      %44 = arith.cmpi sge, %43, %cst_4 : tensor<1x2048xi64> loc(#loc35)
      %45 = arith.cmpi slt, %43, %cst_3 : tensor<1x2048xi64> loc(#loc36)
      %46 = arith.andi %44, %45 : tensor<1x2048xi1> loc(#loc37)
      %47 = arith.addi %28, %cst_1 : tensor<1x2048xi32> loc(#loc38)
      %48 = arith.muli %27, %cst_0 : tensor<1x2048xi32> loc(#loc39)
      %49 = arith.addi %47, %48 : tensor<1x2048xi32> loc(#loc40)
      %50 = arith.addi %49, %6 : tensor<1x2048xi32> loc(#loc41)
      %51 = tt.addptr %9, %50 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc10)
      %52 = arith.andi %23, %46 : tensor<1x2048xi1> loc(#loc42)
      %53 = arith.andi %52, %8 : tensor<1x2048xi1> loc(#loc43)
      %54 = tt.load %51, %53, %cst_9 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>> loc(#loc44)
      %55 = arith.mulf %54, %54 : tensor<1x2048xf32> loc(#loc45)
      %56 = arith.addf %41, %55 : tensor<1x2048xf32> loc(#loc46)
      %57 = arith.addf %56, %cst : tensor<1x2048xf32> loc(#loc47)
      %58 = tt.extern_elementwise %57 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x2048xf32>) -> tensor<1x2048xf32> loc(#loc48)
      %59 = tt.addptr %10, %36 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc11)
      %60 = tt.load %59, %39, %cst_9 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>> loc(#loc49)
      %61 = arith.mulf %60, %60 : tensor<1x2048xf32> loc(#loc50)
      %62 = tt.addptr %11, %50 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc12)
      %63 = tt.load %62, %53, %cst_9 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>> loc(#loc51)
      %64 = arith.mulf %63, %63 : tensor<1x2048xf32> loc(#loc52)
      %65 = arith.addf %61, %64 : tensor<1x2048xf32> loc(#loc53)
      %66 = arith.addf %65, %cst : tensor<1x2048xf32> loc(#loc54)
      %67 = tt.extern_elementwise %66 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x2048xf32>) -> tensor<1x2048xf32> loc(#loc55)
      %68 = arith.subf %58, %67 : tensor<1x2048xf32> loc(#loc56)
      %69 = math.absf %68 : tensor<1x2048xf32> loc(#loc57)
      %70 = arith.addf %arg10, %69 : tensor<1x2048xf32> loc(#loc58)
      %71 = arith.andi %23, %8 : tensor<1x2048xi1> loc(#loc59)
      %72 = arith.select %71, %70, %arg10 : tensor<1x2048xi1>, tensor<1x2048xf32> loc(#loc60)
      %73 = arith.addi %22, %13 : tensor<1x2048xi32> loc(#loc14)
      %74 = tt.addptr %14, %73 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc15)
      tt.store %74, %58, %71 : tensor<1x2048x!tt.ptr<f32>> loc(#loc61)
      %75 = tt.addptr %15, %73 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc16)
      tt.store %75, %67, %71 : tensor<1x2048x!tt.ptr<f32>> loc(#loc62)
      scf.yield %72 : tensor<1x2048xf32> loc(#loc63)
    } loc(#loc17)
    %17 = "tt.reduce"(%16) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc65)), %arg10: f32 loc(callsite(#loc1 at #loc65))):
      %21 = arith.addf %arg9, %arg10 : f32 loc(#loc74)
      tt.reduce.return %21 : f32 loc(#loc71)
    }) : (tensor<1x2048xf32>) -> tensor<1xf32> loc(#loc71)
    %18 = tt.expand_dims %17 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc67)
    %19 = tt.addptr %arg6, %0 : !tt.ptr<f32>, i32 loc(#loc68)
    %20 = tt.splat %19 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc68)
    tt.store %20, %18, %2 : tensor<1x1x!tt.ptr<f32>> loc(#loc69)
    tt.return loc(#loc70)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":22:28)
#loc3 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":24:21)
#loc4 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":25:25)
#loc5 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":25:33)
#loc6 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":43:59)
#loc7 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":43:54)
#loc8 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":43:34)
#loc9 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":43:79)
#loc10 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":49:35)
#loc11 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":55:35)
#loc12 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":57:35)
#loc13 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":67:39)
#loc14 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":67:34)
#loc15 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":67:29)
#loc16 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":68:29)
#loc17 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":28:36)
#loc18 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":29:27)
#loc19 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":30:25)
#loc20 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":31:23)
#loc21 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":32:23)
#loc22 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":33:31)
#loc23 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":34:23)
#loc24 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":35:23)
#loc25 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":37:22)
#loc26 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":39:23)
#loc27 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":41:22)
#loc28 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":42:22)
#loc29 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":43:49)
#loc30 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":43:46)
#loc31 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":43:72)
#loc32 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":43:64)
#loc33 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":44:22)
#loc34 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":45:22)
#loc35 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":46:23)
#loc36 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":47:23)
#loc37 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":48:23)
#loc38 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":49:43)
#loc39 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":49:53)
#loc40 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":49:48)
#loc41 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":49:58)
#loc42 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":49:76)
#loc43 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":49:84)
#loc44 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":49:68)
#loc45 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":50:24)
#loc46 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":51:23)
#loc47 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":53:24)
#loc48 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":54:31)
#loc49 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":55:65)
#loc50 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":56:24)
#loc51 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":57:68)
#loc52 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":58:24)
#loc53 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":59:24)
#loc54 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":60:24)
#loc55 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":61:31)
#loc56 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":62:24)
#loc57 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":63:28)
#loc58 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":65:25)
#loc59 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":66:34)
#loc60 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":66:48)
#loc61 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":67:51)
#loc62 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":68:51)
#loc63 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":68:8)
#loc64 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc66 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc67 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":69:30)
#loc68 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":70:25)
#loc69 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":70:37)
#loc70 = loc("inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py":70:4)
#loc71 = loc(callsite(#loc64 at #loc65))
#loc73 = loc(callsite(#loc66 at #loc64))
#loc74 = loc(callsite(#loc73 at #loc65))
