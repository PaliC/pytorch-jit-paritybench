; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused_abs_add_constant_pad_nd_mean_pow_sqrt_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !10
  %11 = icmp slt i32 %10, 36, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 2044, !dbg !12
  %15 = mul i32 %10, 7936, !dbg !13
  %16 = shl i32 %10, 13, !dbg !14
  %17 = and i32 %13, 60
  %18 = add nsw i32 %17, -1
  %19 = icmp ult i32 %18, 62
  %20 = icmp ne i32 %17, 60
  %21 = add i32 %15, %18
  %22 = or disjoint i32 %15, %17
  %23 = or disjoint i32 %22, 1
  %24 = or disjoint i32 %22, 2
  %25 = and i1 %19, %11
  %26 = and i1 %20, %11
  %27 = add i32 %15, -64
  %28 = zext nneg i32 %14 to i64, !dbg !15
  %29 = sext i32 %16 to i64, !dbg !15
  %30 = insertelement <4 x i1> poison, i1 %11, i64 0, !dbg !16
  %31 = shufflevector <4 x i1> %30, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !16
  br label %32, !dbg !15

32:                                               ; preds = %9, %__nv_sqrtf.exit35
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %__nv_sqrtf.exit35 ]
  %33 = phi <4 x float> [ zeroinitializer, %9 ], [ %242, %__nv_sqrtf.exit35 ]
  %34 = or disjoint i64 %indvars.iv, %28, !dbg !17
  %35 = lshr i64 %34, 6, !dbg !18
  %36 = trunc nuw nsw i64 %35 to i32, !dbg !19
  %37 = and i32 %36, 63, !dbg !19
  %38 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !20
  %39 = lshr i32 %38, 12, !dbg !20
  %40 = trunc nuw nsw i64 %34 to i32, !dbg !21
  %41 = and i32 %40, 4092, !dbg !21
  %42 = trunc i64 %35 to i32, !dbg !22
  %43 = mul i32 %42, 62, !dbg !22
  %44 = add i32 %21, %43, !dbg !22
  %45 = add i32 %22, %43, !dbg !22
  %46 = add i32 %23, %43, !dbg !22
  %47 = add i32 %24, %43, !dbg !22
  %48 = sext i32 %44 to i64, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !23
  %50 = sext i32 %45 to i64, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !23
  %52 = sext i32 %46 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !23
  %54 = sext i32 %47 to i64, !dbg !23
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !23
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %25, i32 0, i1 %25) #6, !dbg !24
  %57 = bitcast i32 %56 to float, !dbg !24
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %11, i32 0, i1 %11) #6, !dbg !24
  %59 = bitcast i32 %58 to float, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %11, i32 0, i1 %11) #6, !dbg !24
  %61 = bitcast i32 %60 to float, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %26, i32 0, i1 %26) #6, !dbg !24
  %63 = bitcast i32 %62 to float, !dbg !24
  %64 = fmul float %57, %57, !dbg !25
  %65 = fmul float %59, %59, !dbg !25
  %66 = fmul float %61, %61, !dbg !25
  %67 = fmul float %63, %63, !dbg !25
  %68 = add nsw i32 %37, -1, !dbg !26
  %69 = icmp ult i32 %68, 62, !dbg !26
  %70 = mul nuw nsw i32 %39, 3968, !dbg !27
  %71 = add i32 %27, %41, !dbg !28
  %72 = add i32 %71, %70, !dbg !29
  %73 = sext i32 %72 to i64, !dbg !30
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !30
  %75 = and i1 %11, %69, !dbg !31
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %74, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #6, !dbg !32
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !32
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !32
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !32
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !32
  %81 = bitcast i32 %77 to float, !dbg !32
  %82 = bitcast i32 %78 to float, !dbg !32
  %83 = bitcast i32 %79 to float, !dbg !32
  %84 = bitcast i32 %80 to float, !dbg !32
  %85 = fmul float %81, %81, !dbg !33
  %86 = fmul float %82, %82, !dbg !33
  %87 = fmul float %83, %83, !dbg !33
  %88 = fmul float %84, %84, !dbg !33
  %89 = fadd float %64, %85, !dbg !34
  %90 = fadd float %65, %86, !dbg !34
  %91 = fadd float %66, %87, !dbg !34
  %92 = fadd float %67, %88, !dbg !34
  %93 = fadd float %89, 0x3F1A36E2E0000000, !dbg !35
  %94 = fadd float %90, 0x3F1A36E2E0000000, !dbg !35
  %95 = fadd float %91, 0x3F1A36E2E0000000, !dbg !35
  %96 = fadd float %92, 0x3F1A36E2E0000000, !dbg !35
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !36
  %.not.i = icmp eq i32 %97, 0, !dbg !36
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !36
  %.not1.i = icmp eq i32 %98, 0, !dbg !36
  br i1 %.not.i, label %104, label %99, !dbg !36

99:                                               ; preds = %32
  br i1 %.not1.i, label %102, label %100, !dbg !36

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #6, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #6, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

104:                                              ; preds = %32
  br i1 %.not1.i, label %107, label %105, !dbg !36

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #6, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #6, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %100, %102, %105, %107
  %.0.i = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !36
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !36
  %.not.i1 = icmp eq i32 %109, 0, !dbg !36
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !36
  %.not1.i4 = icmp eq i32 %110, 0, !dbg !36
  br i1 %.not.i1, label %116, label %111, !dbg !36

111:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %114, label %112, !dbg !36

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #6, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #6, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

116:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %119, label %117, !dbg !36

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #6, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #6, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %112, %114, %117, %119
  %.0.i3 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !36
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !36
  %.not.i6 = icmp eq i32 %121, 0, !dbg !36
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !36
  %.not1.i9 = icmp eq i32 %122, 0, !dbg !36
  br i1 %.not.i6, label %128, label %123, !dbg !36

123:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %126, label %124, !dbg !36

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #6, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #6, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

128:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %131, label %129, !dbg !36

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #6, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #6, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

__nv_sqrtf.exit10:                                ; preds = %124, %126, %129, %131
  %.0.i8 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !36
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !36
  %.not.i11 = icmp eq i32 %133, 0, !dbg !36
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !36
  %.not1.i14 = icmp eq i32 %134, 0, !dbg !36
  br i1 %.not.i11, label %140, label %135, !dbg !36

135:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %138, label %136, !dbg !36

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #6, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #6, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

140:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %143, label %141, !dbg !36

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #6, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #6, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

__nv_sqrtf.exit15:                                ; preds = %136, %138, %141, %143
  %.0.i13 = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !36
  %145 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !37
  %146 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !37
  %147 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !37
  %148 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !37
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %25, i32 0, i1 %25) #6, !dbg !38
  %150 = bitcast i32 %149 to float, !dbg !38
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %11, i32 0, i1 %11) #6, !dbg !38
  %152 = bitcast i32 %151 to float, !dbg !38
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %11, i32 0, i1 %11) #6, !dbg !38
  %154 = bitcast i32 %153 to float, !dbg !38
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %26, i32 0, i1 %26) #6, !dbg !38
  %156 = bitcast i32 %155 to float, !dbg !38
  %157 = fmul float %150, %150, !dbg !39
  %158 = fmul float %152, %152, !dbg !39
  %159 = fmul float %154, %154, !dbg !39
  %160 = fmul float %156, %156, !dbg !39
  %161 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !40
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %161, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #6, !dbg !41
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !41
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !41
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !41
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !41
  %167 = bitcast i32 %163 to float, !dbg !41
  %168 = bitcast i32 %164 to float, !dbg !41
  %169 = bitcast i32 %165 to float, !dbg !41
  %170 = bitcast i32 %166 to float, !dbg !41
  %171 = fmul float %167, %167, !dbg !42
  %172 = fmul float %168, %168, !dbg !42
  %173 = fmul float %169, %169, !dbg !42
  %174 = fmul float %170, %170, !dbg !42
  %175 = fadd float %157, %171, !dbg !43
  %176 = fadd float %158, %172, !dbg !43
  %177 = fadd float %159, %173, !dbg !43
  %178 = fadd float %160, %174, !dbg !43
  %179 = fadd float %175, 0x3F1A36E2E0000000, !dbg !44
  %180 = fadd float %176, 0x3F1A36E2E0000000, !dbg !44
  %181 = fadd float %177, 0x3F1A36E2E0000000, !dbg !44
  %182 = fadd float %178, 0x3F1A36E2E0000000, !dbg !44
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %.not.i16 = icmp eq i32 %183, 0, !dbg !45
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !45
  %.not1.i19 = icmp eq i32 %184, 0, !dbg !45
  br i1 %.not.i16, label %190, label %185, !dbg !45

185:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %188, label %186, !dbg !45

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %179) #6, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %179) #6, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

190:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %193, label %191, !dbg !45

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.f(float %179) #6, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.f(float %179) #6, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

__nv_sqrtf.exit20:                                ; preds = %186, %188, %191, %193
  %.0.i18 = phi float [ %187, %186 ], [ %189, %188 ], [ %192, %191 ], [ %194, %193 ], !dbg !45
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %.not.i21 = icmp eq i32 %195, 0, !dbg !45
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !45
  %.not1.i24 = icmp eq i32 %196, 0, !dbg !45
  br i1 %.not.i21, label %202, label %197, !dbg !45

197:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %200, label %198, !dbg !45

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %180) #6, !dbg !45
  br label %__nv_sqrtf.exit25, !dbg !45

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %180) #6, !dbg !45
  br label %__nv_sqrtf.exit25, !dbg !45

202:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %205, label %203, !dbg !45

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.f(float %180) #6, !dbg !45
  br label %__nv_sqrtf.exit25, !dbg !45

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.f(float %180) #6, !dbg !45
  br label %__nv_sqrtf.exit25, !dbg !45

__nv_sqrtf.exit25:                                ; preds = %198, %200, %203, %205
  %.0.i23 = phi float [ %199, %198 ], [ %201, %200 ], [ %204, %203 ], [ %206, %205 ], !dbg !45
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %.not.i26 = icmp eq i32 %207, 0, !dbg !45
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !45
  %.not1.i29 = icmp eq i32 %208, 0, !dbg !45
  br i1 %.not.i26, label %214, label %209, !dbg !45

209:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %212, label %210, !dbg !45

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %181) #6, !dbg !45
  br label %__nv_sqrtf.exit30, !dbg !45

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %181) #6, !dbg !45
  br label %__nv_sqrtf.exit30, !dbg !45

214:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %217, label %215, !dbg !45

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.f(float %181) #6, !dbg !45
  br label %__nv_sqrtf.exit30, !dbg !45

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.f(float %181) #6, !dbg !45
  br label %__nv_sqrtf.exit30, !dbg !45

__nv_sqrtf.exit30:                                ; preds = %210, %212, %215, %217
  %.0.i28 = phi float [ %211, %210 ], [ %213, %212 ], [ %216, %215 ], [ %218, %217 ], !dbg !45
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !45
  %.not.i31 = icmp eq i32 %219, 0, !dbg !45
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !45
  %.not1.i34 = icmp eq i32 %220, 0, !dbg !45
  br i1 %.not.i31, label %226, label %221, !dbg !45

221:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %224, label %222, !dbg !45

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %182) #6, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %182) #6, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

226:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %229, label %227, !dbg !45

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.f(float %182) #6, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.f(float %182) #6, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

__nv_sqrtf.exit35:                                ; preds = %222, %224, %227, %229
  %.0.i33 = phi float [ %223, %222 ], [ %225, %224 ], [ %228, %227 ], [ %230, %229 ], !dbg !45
  %231 = insertelement <4 x float> poison, float %.0.i, i64 0, !dbg !46
  %232 = insertelement <4 x float> %231, float %.0.i3, i64 1, !dbg !46
  %233 = insertelement <4 x float> %232, float %.0.i8, i64 2, !dbg !46
  %234 = insertelement <4 x float> %233, float %.0.i13, i64 3, !dbg !46
  %235 = insertelement <4 x float> poison, float %.0.i18, i64 0, !dbg !46
  %236 = insertelement <4 x float> %235, float %.0.i23, i64 1, !dbg !46
  %237 = insertelement <4 x float> %236, float %.0.i28, i64 2, !dbg !46
  %238 = insertelement <4 x float> %237, float %.0.i33, i64 3, !dbg !46
  %239 = fsub <4 x float> %234, %238, !dbg !46
  %240 = tail call <4 x float> @llvm.fabs.v4f32(<4 x float> %239), !dbg !47
  %241 = fadd <4 x float> %33, %240, !dbg !48
  %242 = select <4 x i1> %31, <4 x float> %241, <4 x float> %33, !dbg !16
  %243 = add nuw nsw i64 %34, %29, !dbg !49
  %244 = getelementptr float, ptr addrspace(1) %4, i64 %243, !dbg !50
  %245 = bitcast float %.0.i to i32, !dbg !51
  %246 = bitcast float %.0.i3 to i32, !dbg !51
  %247 = bitcast float %.0.i8 to i32, !dbg !51
  %248 = bitcast float %.0.i13 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %245, i32 %246, i32 %247, i32 %248, ptr addrspace(1) %244, i1 %11) #6, !dbg !51
  %249 = getelementptr float, ptr addrspace(1) %5, i64 %243, !dbg !52
  %250 = bitcast float %.0.i18 to i32, !dbg !53
  %251 = bitcast float %.0.i23 to i32, !dbg !53
  %252 = bitcast float %.0.i28 to i32, !dbg !53
  %253 = bitcast float %.0.i33 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %250, i32 %251, i32 %252, i32 %253, ptr addrspace(1) %249, i1 %11) #6, !dbg !53
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !15
  %254 = icmp samesign ult i64 %indvars.iv, 6144, !dbg !15
  br i1 %254, label %32, label %255, !dbg !15

255:                                              ; preds = %__nv_sqrtf.exit35
  %256 = lshr i32 %12, 5, !dbg !12
  %257 = and i32 %12, 31, !dbg !12
  %shift = shufflevector <4 x float> %242, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !54
  %258 = fadd <4 x float> %242, %shift, !dbg !54
  %shift45 = shufflevector <4 x float> %242, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !54
  %259 = fadd <4 x float> %shift45, %258, !dbg !54
  %shift46 = shufflevector <4 x float> %242, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !54
  %260 = fadd <4 x float> %shift46, %259, !dbg !54
  %261 = extractelement <4 x float> %260, i64 0, !dbg !54
  %262 = bitcast float %261 to i32, !dbg !59
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 16, i32 31), !dbg !59
  %264 = bitcast i32 %263 to float, !dbg !59
  %265 = fadd float %261, %264, !dbg !54
  %266 = bitcast float %265 to i32, !dbg !59
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 8, i32 31), !dbg !59
  %268 = bitcast i32 %267 to float, !dbg !59
  %269 = fadd float %265, %268, !dbg !54
  %270 = bitcast float %269 to i32, !dbg !59
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 4, i32 31), !dbg !59
  %272 = bitcast i32 %271 to float, !dbg !59
  %273 = fadd float %269, %272, !dbg !54
  %274 = bitcast float %273 to i32, !dbg !59
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 2, i32 31), !dbg !59
  %276 = bitcast i32 %275 to float, !dbg !59
  %277 = fadd float %273, %276, !dbg !54
  %278 = bitcast float %277 to i32, !dbg !59
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 1, i32 31), !dbg !59
  %280 = bitcast i32 %279 to float, !dbg !59
  %281 = fadd float %277, %280, !dbg !54
  %282 = icmp eq i32 %257, 0, !dbg !59
  %283 = and i32 %256, 15, !dbg !59
  %284 = zext nneg i32 %283 to i64, !dbg !59
  %285 = getelementptr float, ptr addrspace(3) @global_smem, i64 %284, !dbg !59
  %286 = bitcast float %281 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 %282) #6, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %287 = icmp slt i32 %12, 16, !dbg !59
  %288 = sext i32 %12 to i64, !dbg !59
  %289 = getelementptr float, ptr addrspace(3) @global_smem, i64 %288, !dbg !59
  %290 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %289, i1 %287) #6, !dbg !59
  %291 = bitcast i32 %290 to float, !dbg !59
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 8, i32 31), !dbg !59
  %293 = bitcast i32 %292 to float, !dbg !59
  %294 = fadd float %291, %293, !dbg !54
  %295 = bitcast float %294 to i32, !dbg !59
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 4, i32 31), !dbg !59
  %297 = bitcast i32 %296 to float, !dbg !59
  %298 = fadd float %294, %297, !dbg !54
  %299 = bitcast float %298 to i32, !dbg !59
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 2, i32 31), !dbg !59
  %301 = bitcast i32 %300 to float, !dbg !59
  %302 = fadd float %298, %301, !dbg !54
  %303 = bitcast float %302 to i32, !dbg !59
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 1, i32 31), !dbg !59
  %305 = bitcast i32 %304 to float, !dbg !59
  %306 = fadd float %302, %305, !dbg !54
  %307 = and i32 %12, 15, !dbg !59
  %308 = icmp eq i32 %307, 0, !dbg !59
  %309 = and i1 %287, %308, !dbg !59
  %310 = bitcast float %306 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %310, i1 %309) #6, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %311 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !59
  %312 = sext i32 %10 to i64, !dbg !60
  %313 = getelementptr float, ptr addrspace(1) %6, i64 %312, !dbg !60
  %urem = and i32 %12, 511, !dbg !61
  %314 = icmp eq i32 %urem, 0, !dbg !61
  %315 = and i1 %314, %11, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %311, ptr addrspace(1) %313, i1 %315) #6, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py", directory: "inductor_cache/s7")
!4 = !{ptr @triton_red_fused_abs_add_constant_pad_nd_mean_pow_sqrt_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_abs_add_constant_pad_nd_mean_pow_sqrt_sub_0, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_abs_add_constant_pad_nd_mean_pow_sqrt_sub_0", linkageName: "triton_red_fused_abs_add_constant_pad_nd_mean_pow_sqrt_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 43, column: 59, scope: !7)
!14 = !DILocation(line: 67, column: 39, scope: !7)
!15 = !DILocation(line: 28, column: 36, scope: !7)
!16 = !DILocation(line: 66, column: 48, scope: !7)
!17 = !DILocation(line: 29, column: 27, scope: !7)
!18 = !DILocation(line: 32, column: 23, scope: !7)
!19 = !DILocation(line: 33, column: 31, scope: !7)
!20 = !DILocation(line: 34, column: 23, scope: !7)
!21 = !DILocation(line: 35, column: 23, scope: !7)
!22 = !DILocation(line: 43, column: 54, scope: !7)
!23 = !DILocation(line: 43, column: 34, scope: !7)
!24 = !DILocation(line: 43, column: 64, scope: !7)
!25 = !DILocation(line: 44, column: 22, scope: !7)
!26 = !DILocation(line: 48, column: 23, scope: !7)
!27 = !DILocation(line: 49, column: 53, scope: !7)
!28 = !DILocation(line: 49, column: 48, scope: !7)
!29 = !DILocation(line: 49, column: 58, scope: !7)
!30 = !DILocation(line: 49, column: 35, scope: !7)
!31 = !DILocation(line: 49, column: 84, scope: !7)
!32 = !DILocation(line: 49, column: 68, scope: !7)
!33 = !DILocation(line: 50, column: 24, scope: !7)
!34 = !DILocation(line: 51, column: 23, scope: !7)
!35 = !DILocation(line: 53, column: 24, scope: !7)
!36 = !DILocation(line: 54, column: 31, scope: !7)
!37 = !DILocation(line: 55, column: 35, scope: !7)
!38 = !DILocation(line: 55, column: 65, scope: !7)
!39 = !DILocation(line: 56, column: 24, scope: !7)
!40 = !DILocation(line: 57, column: 35, scope: !7)
!41 = !DILocation(line: 57, column: 68, scope: !7)
!42 = !DILocation(line: 58, column: 24, scope: !7)
!43 = !DILocation(line: 59, column: 24, scope: !7)
!44 = !DILocation(line: 60, column: 24, scope: !7)
!45 = !DILocation(line: 61, column: 31, scope: !7)
!46 = !DILocation(line: 62, column: 24, scope: !7)
!47 = !DILocation(line: 63, column: 28, scope: !7)
!48 = !DILocation(line: 65, column: 25, scope: !7)
!49 = !DILocation(line: 67, column: 34, scope: !7)
!50 = !DILocation(line: 67, column: 29, scope: !7)
!51 = !DILocation(line: 67, column: 51, scope: !7)
!52 = !DILocation(line: 68, column: 29, scope: !7)
!53 = !DILocation(line: 68, column: 51, scope: !7)
!54 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !58)
!55 = distinct !DILexicalBlockFile(scope: !57, file: !56, discriminator: 0)
!56 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!57 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!58 = !DILocation(line: 69, column: 27, scope: !7)
!59 = !DILocation(line: 267, column: 36, scope: !57, inlinedAt: !58)
!60 = !DILocation(line: 70, column: 25, scope: !7)
!61 = !DILocation(line: 70, column: 37, scope: !7)
!62 = !DILocation(line: 70, column: 4, scope: !7)
