; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_group_norm_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 128, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = lshr i32 %9, 5, !dbg !12
  %12 = and i32 %9, 511, !dbg !12
  %13 = or disjoint i32 %12, 512, !dbg !12
  %14 = or disjoint i32 %12, 1024, !dbg !12
  %15 = or disjoint i32 %12, 1536, !dbg !12
  %16 = shl i32 %9, 2, !dbg !12
  %17 = and i32 %16, 2044, !dbg !12
  %18 = srem i32 %7, 32, !dbg !13
  %19 = lshr i32 %12, 8, !dbg !14
  %20 = lshr i32 %13, 8, !dbg !14
  %21 = lshr i32 %14, 8, !dbg !14
  %22 = lshr i32 %15, 8, !dbg !14
  %23 = shl i32 %7, 11, !dbg !15
  %24 = or disjoint i32 %23, %17, !dbg !16
  %25 = sext i32 %24 to i64, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !17
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !18
  %32 = shl nuw nsw i32 %17, 1, !dbg !18
  %33 = zext nneg i32 %32 to i64, !dbg !18
  %34 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %33, !dbg !18
  %35 = insertelement <1 x i32> poison, i32 %28, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %34, <1 x i32> %35, i1 true) #5, !dbg !18
  %36 = or disjoint i32 %32, 2, !dbg !18
  %37 = zext nneg i32 %36 to i64, !dbg !18
  %38 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %37, !dbg !18
  %39 = insertelement <1 x i32> poison, i32 %29, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %39, i1 true) #5, !dbg !18
  %40 = or disjoint i32 %32, 4, !dbg !18
  %41 = zext nneg i32 %40 to i64, !dbg !18
  %42 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %41, !dbg !18
  %43 = insertelement <1 x i32> poison, i32 %30, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %43, i1 true) #5, !dbg !18
  %44 = or disjoint i32 %32, 6, !dbg !18
  %45 = zext nneg i32 %44 to i64, !dbg !18
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %45, !dbg !18
  %47 = insertelement <1 x i32> poison, i32 %31, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %47, i1 true) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %48 = shl nuw nsw i32 %12, 1, !dbg !18
  %49 = zext nneg i32 %48 to i64, !dbg !18
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %49, !dbg !18
  %51 = load float, ptr addrspace(3) %50, align 8, !dbg !18
  %52 = shl nuw nsw i32 %13, 1, !dbg !18
  %53 = zext nneg i32 %52 to i64, !dbg !18
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %53, !dbg !18
  %55 = load float, ptr addrspace(3) %54, align 8, !dbg !18
  %56 = shl nuw nsw i32 %14, 1, !dbg !18
  %57 = zext nneg i32 %56 to i64, !dbg !18
  %58 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %57, !dbg !18
  %59 = load float, ptr addrspace(3) %58, align 8, !dbg !18
  %60 = shl nuw nsw i32 %15, 1, !dbg !18
  %61 = zext nneg i32 %60 to i64, !dbg !18
  %62 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %61, !dbg !18
  %63 = load float, ptr addrspace(3) %62, align 8, !dbg !18
  %64 = shl nsw i32 %18, 3, !dbg !19
  %65 = or disjoint i32 %64, %19, !dbg !20
  %66 = or disjoint i32 %64, %20, !dbg !20
  %67 = or disjoint i32 %64, %21, !dbg !20
  %68 = or disjoint i32 %64, %22, !dbg !20
  %69 = sext i32 %65 to i64, !dbg !21
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !21
  %71 = sext i32 %66 to i64, !dbg !21
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !21
  %73 = sext i32 %67 to i64, !dbg !21
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %73, !dbg !21
  %75 = sext i32 %68 to i64, !dbg !21
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !21
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %8, i32 0, i1 %8) #5, !dbg !22
  %78 = bitcast i32 %77 to float, !dbg !22
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %8, i32 0, i1 %8) #5, !dbg !22
  %80 = bitcast i32 %79 to float, !dbg !22
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %8, i32 0, i1 %8) #5, !dbg !22
  %82 = bitcast i32 %81 to float, !dbg !22
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %8, i32 0, i1 %8) #5, !dbg !22
  %84 = bitcast i32 %83 to float, !dbg !22
  %85 = fadd float %51, %78, !dbg !23
  %86 = fadd float %55, %80, !dbg !23
  %87 = fadd float %59, %82, !dbg !23
  %88 = fadd float %63, %84, !dbg !23
  %89 = select i1 %8, float %85, float 0.000000e+00, !dbg !24
  %90 = select i1 %8, float %86, float 0.000000e+00, !dbg !24
  %91 = select i1 %8, float %87, float 0.000000e+00, !dbg !24
  %92 = select i1 %8, float %88, float 0.000000e+00, !dbg !24
  %93 = select i1 %8, float 1.000000e+00, float 0.000000e+00, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %94 = zext nneg i32 %12 to i64, !dbg !26
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %94, !dbg !26
  %96 = bitcast float %85 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #5, !dbg !26
  %97 = zext nneg i32 %13 to i64, !dbg !26
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %97, !dbg !26
  %99 = bitcast float %86 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #5, !dbg !26
  %100 = zext nneg i32 %14 to i64, !dbg !26
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %100, !dbg !26
  %102 = bitcast float %87 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #5, !dbg !26
  %103 = zext nneg i32 %15 to i64, !dbg !26
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %103, !dbg !26
  %105 = bitcast float %88 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %106 = zext nneg i32 %17 to i64, !dbg !26
  %107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %106, !dbg !26
  %.extract = load i32, ptr addrspace(3) %107, align 16, !dbg !26
  %108 = getelementptr inbounds i8, ptr addrspace(3) %107, i64 4, !dbg !26
  %.extract4 = load i32, ptr addrspace(3) %108, align 4, !dbg !26
  %109 = getelementptr inbounds i8, ptr addrspace(3) %107, i64 8, !dbg !26
  %.extract5 = load i32, ptr addrspace(3) %109, align 8, !dbg !26
  %110 = getelementptr inbounds i8, ptr addrspace(3) %107, i64 12, !dbg !26
  %.extract6 = load i32, ptr addrspace(3) %110, align 4, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %26, i1 %8) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %111 = fsub float %90, %89, !dbg !31
  %112 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !33
  %113 = fcmp oeq float %112, 0.000000e+00, !dbg !34
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float %112) #5, !dbg !35
  %115 = select i1 %113, float 0.000000e+00, float %114, !dbg !36
  %116 = fmul float %111, %115, !dbg !37
  %117 = fadd float %89, %116, !dbg !38
  %118 = fmul float %111, %111, !dbg !39
  %119 = fmul float %93, %118, !dbg !40
  %120 = fmul float %119, %115, !dbg !41
  %121 = fadd float %120, 0.000000e+00, !dbg !42
  %122 = fsub float %91, %117, !dbg !31
  %123 = select i1 %8, float 3.000000e+00, float 0.000000e+00, !dbg !33
  %124 = fcmp oeq float %123, 0.000000e+00, !dbg !34
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float %123) #5, !dbg !35
  %126 = select i1 %124, float 0.000000e+00, float %125, !dbg !36
  %127 = fmul float %126, %122, !dbg !37
  %128 = fadd float %117, %127, !dbg !38
  %129 = fmul float %122, %122, !dbg !39
  %130 = fmul float %112, %129, !dbg !40
  %131 = fmul float %126, %130, !dbg !41
  %132 = fadd float %121, %131, !dbg !42
  %133 = fsub float %92, %128, !dbg !31
  %134 = select i1 %8, float 4.000000e+00, float 0.000000e+00, !dbg !33
  %135 = fcmp oeq float %134, 0.000000e+00, !dbg !34
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float %134) #5, !dbg !35
  %137 = select i1 %135, float 0.000000e+00, float %136, !dbg !36
  %138 = fmul float %137, %133, !dbg !37
  %139 = fadd float %128, %138, !dbg !38
  %140 = fmul float %133, %133, !dbg !39
  %141 = fmul float %123, %140, !dbg !40
  %142 = fmul float %137, %141, !dbg !41
  %143 = fadd float %132, %142, !dbg !42
  %144 = bitcast float %139 to i32, !dbg !27
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 16, i32 31), !dbg !27
  %146 = bitcast i32 %145 to float, !dbg !27
  %147 = bitcast float %143 to i32, !dbg !27
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 16, i32 31), !dbg !27
  %149 = bitcast i32 %148 to float, !dbg !27
  %150 = bitcast float %134 to i32, !dbg !27
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 16, i32 31), !dbg !27
  %152 = bitcast i32 %151 to float, !dbg !27
  %153 = fsub float %146, %139, !dbg !31
  %154 = fadd float %134, %152, !dbg !33
  %155 = fcmp oeq float %154, 0.000000e+00, !dbg !34
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float %154) #5, !dbg !35
  %157 = select i1 %155, float 0.000000e+00, float %156, !dbg !36
  %158 = fmul float %157, %153, !dbg !37
  %159 = fadd float %139, %158, !dbg !38
  %160 = fadd float %143, %149, !dbg !43
  %161 = fmul float %153, %153, !dbg !39
  %162 = fmul float %134, %161, !dbg !40
  %163 = fmul float %157, %162, !dbg !41
  %164 = fadd float %160, %163, !dbg !42
  %165 = bitcast float %159 to i32, !dbg !27
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 8, i32 31), !dbg !27
  %167 = bitcast i32 %166 to float, !dbg !27
  %168 = bitcast float %164 to i32, !dbg !27
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 8, i32 31), !dbg !27
  %170 = bitcast i32 %169 to float, !dbg !27
  %171 = bitcast float %154 to i32, !dbg !27
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 8, i32 31), !dbg !27
  %173 = bitcast i32 %172 to float, !dbg !27
  %174 = fsub float %167, %159, !dbg !31
  %175 = fadd float %154, %173, !dbg !33
  %176 = fcmp oeq float %175, 0.000000e+00, !dbg !34
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float %175) #5, !dbg !35
  %178 = select i1 %176, float 0.000000e+00, float %177, !dbg !36
  %179 = fmul float %174, %178, !dbg !37
  %180 = fadd float %159, %179, !dbg !38
  %181 = fadd float %164, %170, !dbg !43
  %182 = fmul float %174, %174, !dbg !39
  %183 = fmul float %154, %182, !dbg !40
  %184 = fmul float %178, %183, !dbg !41
  %185 = fadd float %181, %184, !dbg !42
  %186 = bitcast float %180 to i32, !dbg !27
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 4, i32 31), !dbg !27
  %188 = bitcast i32 %187 to float, !dbg !27
  %189 = bitcast float %185 to i32, !dbg !27
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 4, i32 31), !dbg !27
  %191 = bitcast i32 %190 to float, !dbg !27
  %192 = bitcast float %175 to i32, !dbg !27
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 4, i32 31), !dbg !27
  %194 = bitcast i32 %193 to float, !dbg !27
  %195 = fsub float %188, %180, !dbg !31
  %196 = fadd float %175, %194, !dbg !33
  %197 = fcmp oeq float %196, 0.000000e+00, !dbg !34
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %196) #5, !dbg !35
  %199 = select i1 %197, float 0.000000e+00, float %198, !dbg !36
  %200 = fmul float %195, %199, !dbg !37
  %201 = fadd float %180, %200, !dbg !38
  %202 = fadd float %185, %191, !dbg !43
  %203 = fmul float %195, %195, !dbg !39
  %204 = fmul float %175, %203, !dbg !40
  %205 = fmul float %199, %204, !dbg !41
  %206 = fadd float %202, %205, !dbg !42
  %207 = bitcast float %201 to i32, !dbg !27
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 2, i32 31), !dbg !27
  %209 = bitcast i32 %208 to float, !dbg !27
  %210 = bitcast float %206 to i32, !dbg !27
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 2, i32 31), !dbg !27
  %212 = bitcast i32 %211 to float, !dbg !27
  %213 = bitcast float %196 to i32, !dbg !27
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 2, i32 31), !dbg !27
  %215 = bitcast i32 %214 to float, !dbg !27
  %216 = fsub float %209, %201, !dbg !31
  %217 = fadd float %196, %215, !dbg !33
  %218 = fcmp oeq float %217, 0.000000e+00, !dbg !34
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %215, float %217) #5, !dbg !35
  %220 = select i1 %218, float 0.000000e+00, float %219, !dbg !36
  %221 = fmul float %216, %220, !dbg !37
  %222 = fadd float %201, %221, !dbg !38
  %223 = fadd float %206, %212, !dbg !43
  %224 = fmul float %216, %216, !dbg !39
  %225 = fmul float %196, %224, !dbg !40
  %226 = fmul float %220, %225, !dbg !41
  %227 = fadd float %223, %226, !dbg !42
  %228 = bitcast float %222 to i32, !dbg !27
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !27
  %230 = bitcast i32 %229 to float, !dbg !27
  %231 = bitcast float %227 to i32, !dbg !27
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 1, i32 31), !dbg !27
  %233 = bitcast i32 %232 to float, !dbg !27
  %234 = bitcast float %217 to i32, !dbg !27
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 1, i32 31), !dbg !27
  %236 = bitcast i32 %235 to float, !dbg !27
  %237 = fsub float %230, %222, !dbg !31
  %238 = fadd float %217, %236, !dbg !33
  %239 = fcmp oeq float %238, 0.000000e+00, !dbg !34
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %236, float %238) #5, !dbg !35
  %241 = select i1 %239, float 0.000000e+00, float %240, !dbg !36
  %242 = fmul float %237, %241, !dbg !37
  %243 = fadd float %222, %242, !dbg !38
  %244 = fadd float %227, %233, !dbg !43
  %245 = fmul float %237, %237, !dbg !39
  %246 = fmul float %217, %245, !dbg !40
  %247 = fmul float %241, %246, !dbg !41
  %248 = fadd float %244, %247, !dbg !42
  %249 = icmp eq i32 %10, 0, !dbg !27
  %250 = and i32 %11, 15, !dbg !27
  %251 = zext nneg i32 %250 to i64, !dbg !27
  %252 = getelementptr float, ptr addrspace(3) @global_smem, i64 %251, !dbg !27
  %253 = bitcast float %243 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 %249) #5, !dbg !27
  %254 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %251, !dbg !27
  %255 = bitcast float %248 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 %249) #5, !dbg !27
  %256 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %251, !dbg !27
  %257 = bitcast float %238 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %257, i1 %249) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %258 = icmp slt i32 %9, 16, !dbg !27
  %259 = sext i32 %9 to i64, !dbg !27
  %260 = getelementptr float, ptr addrspace(3) @global_smem, i64 %259, !dbg !27
  %261 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %260, i1 %258) #5, !dbg !27
  %262 = bitcast i32 %261 to float, !dbg !27
  %263 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %259, !dbg !27
  %264 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %263, i1 %258) #5, !dbg !27
  %265 = bitcast i32 %264 to float, !dbg !27
  %266 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %259, !dbg !27
  %267 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %266, i1 %258) #5, !dbg !27
  %268 = bitcast i32 %267 to float, !dbg !27
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 8, i32 31), !dbg !27
  %270 = bitcast i32 %269 to float, !dbg !27
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 8, i32 31), !dbg !27
  %272 = bitcast i32 %271 to float, !dbg !27
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 8, i32 31), !dbg !27
  %274 = bitcast i32 %273 to float, !dbg !27
  %275 = fsub float %270, %262, !dbg !31
  %276 = fadd float %268, %274, !dbg !33
  %277 = fcmp oeq float %276, 0.000000e+00, !dbg !34
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %274, float %276) #5, !dbg !35
  %279 = select i1 %277, float 0.000000e+00, float %278, !dbg !36
  %280 = fmul float %275, %279, !dbg !37
  %281 = fadd float %280, %262, !dbg !38
  %282 = fadd float %265, %272, !dbg !43
  %283 = fmul float %275, %275, !dbg !39
  %284 = fmul float %283, %268, !dbg !40
  %285 = fmul float %284, %279, !dbg !41
  %286 = fadd float %282, %285, !dbg !42
  %287 = bitcast float %281 to i32, !dbg !27
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 4, i32 31), !dbg !27
  %289 = bitcast i32 %288 to float, !dbg !27
  %290 = bitcast float %286 to i32, !dbg !27
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 4, i32 31), !dbg !27
  %292 = bitcast i32 %291 to float, !dbg !27
  %293 = bitcast float %276 to i32, !dbg !27
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 4, i32 31), !dbg !27
  %295 = bitcast i32 %294 to float, !dbg !27
  %296 = fsub float %289, %281, !dbg !31
  %297 = fadd float %276, %295, !dbg !33
  %298 = fcmp oeq float %297, 0.000000e+00, !dbg !34
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %295, float %297) #5, !dbg !35
  %300 = select i1 %298, float 0.000000e+00, float %299, !dbg !36
  %301 = fmul float %296, %300, !dbg !37
  %302 = fadd float %281, %301, !dbg !38
  %303 = fadd float %286, %292, !dbg !43
  %304 = fmul float %296, %296, !dbg !39
  %305 = fmul float %276, %304, !dbg !40
  %306 = fmul float %300, %305, !dbg !41
  %307 = fadd float %303, %306, !dbg !42
  %308 = bitcast float %302 to i32, !dbg !27
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 2, i32 31), !dbg !27
  %310 = bitcast i32 %309 to float, !dbg !27
  %311 = bitcast float %307 to i32, !dbg !27
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 2, i32 31), !dbg !27
  %313 = bitcast i32 %312 to float, !dbg !27
  %314 = bitcast float %297 to i32, !dbg !27
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 2, i32 31), !dbg !27
  %316 = bitcast i32 %315 to float, !dbg !27
  %317 = fsub float %310, %302, !dbg !31
  %318 = fadd float %297, %316, !dbg !33
  %319 = fcmp oeq float %318, 0.000000e+00, !dbg !34
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %316, float %318) #5, !dbg !35
  %321 = select i1 %319, float 0.000000e+00, float %320, !dbg !36
  %322 = fmul float %317, %321, !dbg !37
  %323 = fadd float %302, %322, !dbg !38
  %324 = fadd float %307, %313, !dbg !43
  %325 = fmul float %317, %317, !dbg !39
  %326 = fmul float %297, %325, !dbg !40
  %327 = fmul float %321, %326, !dbg !41
  %328 = fadd float %324, %327, !dbg !42
  %329 = bitcast float %323 to i32, !dbg !27
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 1, i32 31), !dbg !27
  %331 = bitcast i32 %330 to float, !dbg !27
  %332 = bitcast float %328 to i32, !dbg !27
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 1, i32 31), !dbg !27
  %334 = bitcast i32 %333 to float, !dbg !27
  %335 = bitcast float %318 to i32, !dbg !27
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 1, i32 31), !dbg !27
  %337 = bitcast i32 %336 to float, !dbg !27
  %338 = fsub float %331, %323, !dbg !31
  %339 = fadd float %318, %337, !dbg !33
  %340 = fcmp oeq float %339, 0.000000e+00, !dbg !34
  %341 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %337, float %339) #5, !dbg !35
  %342 = select i1 %340, float 0.000000e+00, float %341, !dbg !36
  %343 = fmul float %338, %342, !dbg !37
  %344 = fadd float %323, %343, !dbg !38
  %345 = fadd float %328, %334, !dbg !43
  %346 = fmul float %338, %338, !dbg !39
  %347 = fmul float %318, %346, !dbg !40
  %348 = fmul float %342, %347, !dbg !41
  %349 = fadd float %345, %348, !dbg !42
  %350 = and i32 %9, 15, !dbg !27
  %351 = icmp eq i32 %350, 0, !dbg !27
  %352 = and i1 %258, %351, !dbg !27
  %353 = bitcast float %344 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %353, i1 %352) #5, !dbg !27
  %354 = bitcast float %349 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %354, i1 %352) #5, !dbg !27
  %355 = bitcast float %339 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %355, i1 %352) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %356 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %357 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !27
  %358 = sext i32 %7 to i64, !dbg !44
  %359 = getelementptr float, ptr addrspace(1) %3, i64 %358, !dbg !44
  %360 = icmp eq i32 %12, 0, !dbg !45
  %361 = and i1 %360, %8, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %356, ptr addrspace(1) %359, i1 %361) #5, !dbg !45
  %362 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %357, float 2.048000e+03) #5, !dbg !46
  %363 = fadd float %362, 0x3EE4F8B580000000, !dbg !47
  %364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not.i = icmp eq i32 %364, 0, !dbg !48
  br i1 %.not.i, label %367, label %365, !dbg !48

365:                                              ; preds = %6
  %366 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %363), !dbg !48
  br label %__nv_rsqrtf.exit, !dbg !48

367:                                              ; preds = %6
  %368 = tail call float @llvm.nvvm.rsqrt.approx.f(float %363), !dbg !48
  br label %__nv_rsqrtf.exit, !dbg !48

__nv_rsqrtf.exit:                                 ; preds = %365, %367
  %.0.i = phi float [ %366, %365 ], [ %368, %367 ], !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %369 = getelementptr float, ptr addrspace(1) %1, i64 %358, !dbg !50
  %370 = bitcast float %.0.i to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %370, ptr addrspace(1) %369, i1 %361) #5, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbxupx5wq7ma55hhr5fg6fdofnsdzwh3tf6g7ptayeqysozzgiyn.py", directory: "inductor_cache/bx")
!4 = !{ptr @triton_red_fused_convolution_native_group_norm_13, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_group_norm_13, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_group_norm_13", linkageName: "triton_red_fused_convolution_native_group_norm_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 35, column: 23, scope: !7)
!15 = !DILocation(line: 36, column: 48, scope: !7)
!16 = !DILocation(line: 36, column: 43, scope: !7)
!17 = !DILocation(line: 36, column: 38, scope: !7)
!18 = !DILocation(line: 36, column: 53, scope: !7)
!19 = !DILocation(line: 37, column: 41, scope: !7)
!20 = !DILocation(line: 37, column: 39, scope: !7)
!21 = !DILocation(line: 37, column: 34, scope: !7)
!22 = !DILocation(line: 37, column: 46, scope: !7)
!23 = !DILocation(line: 38, column: 22, scope: !7)
!24 = !DILocation(line: 43, column: 60, scope: !7)
!25 = !DILocation(line: 45, column: 64, scope: !7)
!26 = !DILocation(line: 46, column: 53, scope: !7)
!27 = !DILocation(line: 204, column: 46, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 48, column: 41, scope: !7)
!31 = !DILocation(line: 192, column: 21, scope: !32, inlinedAt: !30)
!32 = distinct !DILexicalBlockFile(scope: !28, file: !29, discriminator: 0)
!33 = !DILocation(line: 193, column: 28, scope: !32, inlinedAt: !30)
!34 = !DILocation(line: 194, column: 39, scope: !32, inlinedAt: !30)
!35 = !DILocation(line: 194, column: 60, scope: !32, inlinedAt: !30)
!36 = !DILocation(line: 194, column: 49, scope: !32, inlinedAt: !30)
!37 = !DILocation(line: 196, column: 25, scope: !32, inlinedAt: !30)
!38 = !DILocation(line: 196, column: 17, scope: !32, inlinedAt: !30)
!39 = !DILocation(line: 197, column: 30, scope: !32, inlinedAt: !30)
!40 = !DILocation(line: 197, column: 38, scope: !32, inlinedAt: !30)
!41 = !DILocation(line: 197, column: 49, scope: !32, inlinedAt: !30)
!42 = !DILocation(line: 197, column: 22, scope: !32, inlinedAt: !30)
!43 = !DILocation(line: 197, column: 15, scope: !32, inlinedAt: !30)
!44 = !DILocation(line: 53, column: 25, scope: !7)
!45 = !DILocation(line: 53, column: 36, scope: !7)
!46 = !DILocation(line: 55, column: 18, scope: !7)
!47 = !DILocation(line: 57, column: 19, scope: !7)
!48 = !DILocation(line: 58, column: 28, scope: !7)
!49 = !DILocation(line: 59, column: 4, scope: !7)
!50 = !DILocation(line: 60, column: 28, scope: !7)
!51 = !DILocation(line: 60, column: 40, scope: !7)
!52 = !DILocation(line: 60, column: 4, scope: !7)
