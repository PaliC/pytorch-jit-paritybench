; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_view_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 3, !dbg !12
  %14 = and i32 %13, 1016, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %18 = icmp slt i32 %17, 3025, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %19 = sdiv i32 %.frozen, 256, !dbg !16
  %20 = mul i32 %19, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = srem i32 %16, 256, !dbg !17
  %22 = shl i32 %17, 8, !dbg !18
  %23 = mul i32 %19, 774400, !dbg !19
  %24 = add i32 %23, %22, !dbg !20
  %25 = add i32 %24, %.decomposed, !dbg !21
  %26 = add i32 %24, %21, !dbg !21
  %27 = sext i32 %25 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = sext i32 %26 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %18) #4, !dbg !23
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %18) #4, !dbg !23
  %33 = sext i32 %.decomposed to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !24
  %35 = sext i32 %21 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !24
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #4, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !26
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !27
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !27
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !27
  %46 = bitcast i32 %42 to float, !dbg !27
  %47 = bitcast i32 %43 to float, !dbg !27
  %48 = bitcast i32 %44 to float, !dbg !27
  %49 = bitcast i32 %45 to float, !dbg !27
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #4, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !27
  %55 = bitcast i32 %51 to float, !dbg !27
  %56 = bitcast i32 %52 to float, !dbg !27
  %57 = bitcast i32 %53 to float, !dbg !27
  %58 = bitcast i32 %54 to float, !dbg !27
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !28
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !28
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #4, !dbg !29
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !29
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !30
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !30
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #4, !dbg !31
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #4, !dbg !31
  %67 = fadd float %46, 0x3EE4F8B580000000, !dbg !32
  %68 = fadd float %47, 0x3EE4F8B580000000, !dbg !32
  %69 = fadd float %48, 0x3EE4F8B580000000, !dbg !32
  %70 = fadd float %49, 0x3EE4F8B580000000, !dbg !32
  %71 = fadd float %55, 0x3EE4F8B580000000, !dbg !32
  %72 = fadd float %56, 0x3EE4F8B580000000, !dbg !32
  %73 = fadd float %57, 0x3EE4F8B580000000, !dbg !32
  %74 = fadd float %58, 0x3EE4F8B580000000, !dbg !32
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %75, 0, !dbg !33
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %76, 0, !dbg !33
  br i1 %.not.i, label %82, label %77, !dbg !33

77:                                               ; preds = %9
  br i1 %.not1.i, label %80, label %78, !dbg !33

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

82:                                               ; preds = %9
  br i1 %.not1.i, label %85, label %83, !dbg !33

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %78, %80, %83, %85
  %.0.i = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !33
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i15 = icmp eq i32 %87, 0, !dbg !33
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i18 = icmp eq i32 %88, 0, !dbg !33
  br i1 %.not.i15, label %94, label %89, !dbg !33

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %92, label %90, !dbg !33

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %97, label %95, !dbg !33

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

__nv_sqrtf.exit19:                                ; preds = %90, %92, %95, %97
  %.0.i17 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !33
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i20 = icmp eq i32 %99, 0, !dbg !33
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i23 = icmp eq i32 %100, 0, !dbg !33
  br i1 %.not.i20, label %106, label %101, !dbg !33

101:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %104, label %102, !dbg !33

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

106:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %109, label %107, !dbg !33

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

__nv_sqrtf.exit24:                                ; preds = %102, %104, %107, %109
  %.0.i22 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !33
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i25 = icmp eq i32 %111, 0, !dbg !33
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i28 = icmp eq i32 %112, 0, !dbg !33
  br i1 %.not.i25, label %118, label %113, !dbg !33

113:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %116, label %114, !dbg !33

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

118:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %121, label %119, !dbg !33

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

__nv_sqrtf.exit29:                                ; preds = %114, %116, %119, %121
  %.0.i27 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !33
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i30 = icmp eq i32 %123, 0, !dbg !33
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i33 = icmp eq i32 %124, 0, !dbg !33
  br i1 %.not.i30, label %130, label %125, !dbg !33

125:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %128, label %126, !dbg !33

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

130:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %133, label %131, !dbg !33

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit34, !dbg !33

__nv_sqrtf.exit34:                                ; preds = %126, %128, %131, %133
  %.0.i32 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !33
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i35 = icmp eq i32 %135, 0, !dbg !33
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i38 = icmp eq i32 %136, 0, !dbg !33
  br i1 %.not.i35, label %142, label %137, !dbg !33

137:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %140, label %138, !dbg !33

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

142:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %145, label %143, !dbg !33

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit39, !dbg !33

__nv_sqrtf.exit39:                                ; preds = %138, %140, %143, %145
  %.0.i37 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !33
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i40 = icmp eq i32 %147, 0, !dbg !33
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i43 = icmp eq i32 %148, 0, !dbg !33
  br i1 %.not.i40, label %154, label %149, !dbg !33

149:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %152, label %150, !dbg !33

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit44, !dbg !33

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit44, !dbg !33

154:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %157, label %155, !dbg !33

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit44, !dbg !33

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit44, !dbg !33

__nv_sqrtf.exit44:                                ; preds = %150, %152, %155, %157
  %.0.i42 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !33
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i45 = icmp eq i32 %159, 0, !dbg !33
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i48 = icmp eq i32 %160, 0, !dbg !33
  br i1 %.not.i45, label %166, label %161, !dbg !33

161:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %164, label %162, !dbg !33

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit49, !dbg !33

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit49, !dbg !33

166:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %169, label %167, !dbg !33

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit49, !dbg !33

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit49, !dbg !33

__nv_sqrtf.exit49:                                ; preds = %162, %164, %167, %169
  %.0.i47 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !33
  %171 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !23
  %172 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !25
  %173 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !23
  %174 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !25
  %175 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !23
  %176 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !25
  %177 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !23
  %178 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !25
  %179 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !23
  %180 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %181 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !23
  %182 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %183 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !23
  %184 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %185 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !23
  %186 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %187 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !31
  %188 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !31
  %189 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !31
  %190 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !31
  %191 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !31
  %192 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !31
  %193 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !31
  %194 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !31
  %195 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !29
  %196 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !29
  %197 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !29
  %198 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !29
  %199 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !29
  %200 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !29
  %201 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !29
  %202 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !29
  %203 = shl i32 %12, 2, !dbg !12
  %204 = and i32 %203, 508, !dbg !12
  %205 = or disjoint i32 %204, 512, !dbg !12
  %206 = or disjoint i32 %11, %205, !dbg !13
  %207 = or disjoint i32 %11, %204, !dbg !13
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !34
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !34
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !34
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !34
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !34
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !34
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !34
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #4, !dbg !34
  %216 = shl i32 %17, 10, !dbg !35
  %217 = add i32 %207, %216, !dbg !36
  %218 = add i32 %206, %216, !dbg !36
  %219 = sext i32 %217 to i64, !dbg !37
  %220 = getelementptr float, ptr addrspace(1) %5, i64 %219, !dbg !37
  %221 = sext i32 %218 to i64, !dbg !37
  %222 = getelementptr float, ptr addrspace(1) %5, i64 %221, !dbg !37
  %223 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !38
  %224 = getelementptr inbounds i8, ptr addrspace(3) %223, i32 16, !dbg !38
  %225 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %204, !dbg !38
  %226 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %205, !dbg !38
  %227 = getelementptr inbounds i8, ptr addrspace(3) %225, i32 4, !dbg !38
  %228 = getelementptr inbounds i8, ptr addrspace(3) %225, i32 8, !dbg !38
  %229 = getelementptr inbounds i8, ptr addrspace(3) %225, i32 12, !dbg !38
  %230 = getelementptr i1, ptr addrspace(1) %6, i64 %27, !dbg !39
  %231 = insertelement <4 x i32> poison, i32 %185, i64 0, !dbg !23
  %232 = insertelement <4 x i32> %231, i32 %183, i64 1, !dbg !23
  %233 = insertelement <4 x i32> %232, i32 %181, i64 2, !dbg !23
  %234 = insertelement <4 x i32> %233, i32 %179, i64 3, !dbg !23
  %235 = bitcast <4 x i32> %234 to <4 x float>, !dbg !23
  %236 = insertelement <4 x i32> poison, i32 %186, i64 0, !dbg !25
  %237 = insertelement <4 x i32> %236, i32 %184, i64 1, !dbg !25
  %238 = insertelement <4 x i32> %237, i32 %182, i64 2, !dbg !25
  %239 = insertelement <4 x i32> %238, i32 %180, i64 3, !dbg !25
  %240 = bitcast <4 x i32> %239 to <4 x float>, !dbg !25
  %241 = fsub <4 x float> %235, %240, !dbg !40
  %242 = insertelement <4 x i32> poison, i32 %194, i64 0, !dbg !31
  %243 = insertelement <4 x i32> %242, i32 %193, i64 1, !dbg !31
  %244 = insertelement <4 x i32> %243, i32 %192, i64 2, !dbg !31
  %245 = insertelement <4 x i32> %244, i32 %191, i64 3, !dbg !31
  %246 = bitcast <4 x i32> %245 to <4 x float>, !dbg !31
  %247 = insertelement <4 x i32> poison, i32 %202, i64 0, !dbg !29
  %248 = insertelement <4 x i32> %247, i32 %201, i64 1, !dbg !29
  %249 = insertelement <4 x i32> %248, i32 %200, i64 2, !dbg !29
  %250 = insertelement <4 x i32> %249, i32 %199, i64 3, !dbg !29
  %251 = bitcast <4 x i32> %250 to <4 x float>, !dbg !29
  %252 = insertelement <4 x float> poison, float %208, i64 0, !dbg !41
  %253 = insertelement <4 x float> %252, float %209, i64 1, !dbg !41
  %254 = insertelement <4 x float> %253, float %210, i64 2, !dbg !41
  %255 = insertelement <4 x float> %254, float %211, i64 3, !dbg !41
  %256 = fmul <4 x float> %241, %255, !dbg !41
  %257 = fmul <4 x float> %256, %251, !dbg !42
  %258 = fadd <4 x float> %257, %246, !dbg !43
  %259 = fcmp olt <4 x float> %258, zeroinitializer, !dbg !44
  %260 = select <4 x i1> %259, <4 x float> zeroinitializer, <4 x float> %258, !dbg !48
  %261 = fcmp ole <4 x float> %260, zeroinitializer, !dbg !49
  %bc = bitcast <4 x float> %260 to <4 x i32>, !dbg !38
  %262 = extractelement <4 x i32> %bc, i64 0, !dbg !38
  %bc50 = bitcast <4 x float> %260 to <4 x i32>, !dbg !38
  %263 = extractelement <4 x i32> %bc50, i64 1, !dbg !38
  %bc51 = bitcast <4 x float> %260 to <4 x i32>, !dbg !38
  %264 = extractelement <4 x i32> %bc51, i64 2, !dbg !38
  %bc52 = bitcast <4 x float> %260 to <4 x i32>, !dbg !38
  %265 = extractelement <4 x i32> %bc52, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %223, i32 %262, i32 %263, i32 %264, i32 %265, i1 true) #4, !dbg !38
  %266 = insertelement <4 x i32> poison, i32 %177, i64 0, !dbg !23
  %267 = insertelement <4 x i32> %266, i32 %175, i64 1, !dbg !23
  %268 = insertelement <4 x i32> %267, i32 %173, i64 2, !dbg !23
  %269 = insertelement <4 x i32> %268, i32 %171, i64 3, !dbg !23
  %270 = bitcast <4 x i32> %269 to <4 x float>, !dbg !23
  %271 = insertelement <4 x i32> poison, i32 %178, i64 0, !dbg !25
  %272 = insertelement <4 x i32> %271, i32 %176, i64 1, !dbg !25
  %273 = insertelement <4 x i32> %272, i32 %174, i64 2, !dbg !25
  %274 = insertelement <4 x i32> %273, i32 %172, i64 3, !dbg !25
  %275 = bitcast <4 x i32> %274 to <4 x float>, !dbg !25
  %276 = fsub <4 x float> %270, %275, !dbg !40
  %277 = insertelement <4 x i32> poison, i32 %190, i64 0, !dbg !31
  %278 = insertelement <4 x i32> %277, i32 %189, i64 1, !dbg !31
  %279 = insertelement <4 x i32> %278, i32 %188, i64 2, !dbg !31
  %280 = insertelement <4 x i32> %279, i32 %187, i64 3, !dbg !31
  %281 = bitcast <4 x i32> %280 to <4 x float>, !dbg !31
  %282 = insertelement <4 x i32> poison, i32 %198, i64 0, !dbg !29
  %283 = insertelement <4 x i32> %282, i32 %197, i64 1, !dbg !29
  %284 = insertelement <4 x i32> %283, i32 %196, i64 2, !dbg !29
  %285 = insertelement <4 x i32> %284, i32 %195, i64 3, !dbg !29
  %286 = bitcast <4 x i32> %285 to <4 x float>, !dbg !29
  %287 = insertelement <4 x float> poison, float %212, i64 0, !dbg !41
  %288 = insertelement <4 x float> %287, float %213, i64 1, !dbg !41
  %289 = insertelement <4 x float> %288, float %214, i64 2, !dbg !41
  %290 = insertelement <4 x float> %289, float %215, i64 3, !dbg !41
  %291 = fmul <4 x float> %276, %290, !dbg !41
  %292 = fmul <4 x float> %291, %286, !dbg !42
  %293 = fadd <4 x float> %292, %281, !dbg !43
  %294 = fcmp olt <4 x float> %293, zeroinitializer, !dbg !44
  %295 = select <4 x i1> %294, <4 x float> zeroinitializer, <4 x float> %293, !dbg !48
  %296 = fcmp ole <4 x float> %295, zeroinitializer, !dbg !49
  %bc53 = bitcast <4 x float> %295 to <4 x i32>, !dbg !38
  %297 = extractelement <4 x i32> %bc53, i64 0, !dbg !38
  %bc54 = bitcast <4 x float> %295 to <4 x i32>, !dbg !38
  %298 = extractelement <4 x i32> %bc54, i64 1, !dbg !38
  %bc55 = bitcast <4 x float> %295 to <4 x i32>, !dbg !38
  %299 = extractelement <4 x i32> %bc55, i64 2, !dbg !38
  %bc56 = bitcast <4 x float> %295 to <4 x i32>, !dbg !38
  %300 = extractelement <4 x i32> %bc56, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %224, i32 %297, i32 %298, i32 %299, i32 %300, i1 true) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %301 = load <4 x i32>, ptr addrspace(3) %226, align 16, !dbg !38
  %.extract = load i32, ptr addrspace(3) %225, align 16, !dbg !38
  %.extract8 = load i32, ptr addrspace(3) %227, align 4, !dbg !38
  %.extract9 = load i32, ptr addrspace(3) %228, align 8, !dbg !38
  %.extract10 = load i32, ptr addrspace(3) %229, align 4, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %220, i1 %18) #4, !dbg !38
  %.extract11 = extractelement <4 x i32> %301, i64 0, !dbg !38
  %.extract12 = extractelement <4 x i32> %301, i64 1, !dbg !38
  %.extract13 = extractelement <4 x i32> %301, i64 2, !dbg !38
  %.extract14 = extractelement <4 x i32> %301, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %222, i1 %18) #4, !dbg !38
  %302 = zext <4 x i1> %261 to <4 x i8>, !dbg !50
  %303 = bitcast <4 x i8> %302 to i32, !dbg !50
  %304 = zext <4 x i1> %296 to <4 x i8>, !dbg !50
  %305 = bitcast <4 x i8> %304 to i32, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %303, i32 %305, ptr addrspace(1) %230, i1 %18) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c77w36caunqyqol6hb7es2bxubqmzufm37d3wl6z5kfecycgwt4w.py", directory: "inductor_cache/77")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_view_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_view_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_view_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_view_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 51, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 56, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 26, scope: !7)
!34 = !DILocation(line: 42, column: 18, scope: !7)
!35 = !DILocation(line: 52, column: 35, scope: !7)
!36 = !DILocation(line: 52, column: 30, scope: !7)
!37 = !DILocation(line: 52, column: 25, scope: !7)
!38 = !DILocation(line: 52, column: 47, scope: !7)
!39 = !DILocation(line: 53, column: 25, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 51, column: 21, scope: !7)
!50 = !DILocation(line: 53, column: 58, scope: !7)
!51 = !DILocation(line: 53, column: 4, scope: !7)
