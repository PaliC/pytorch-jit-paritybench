; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_native_group_norm_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = srem i32 %13, 64, !dbg !14
  %18 = srem i32 %14, 64, !dbg !14
  %19 = srem i32 %15, 64, !dbg !14
  %20 = srem i32 %16, 64, !dbg !14
  %21 = sdiv i32 %13, 16384, !dbg !15
  %22 = sext i32 %13 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !17
  %25 = shl nsw i32 %21, 5, !dbg !18
  %.lhs.trunc = trunc nsw i32 %17 to i8, !dbg !19
  %26 = ashr exact i8 %.lhs.trunc, 1, !dbg !19
  %.sext = sext i8 %26 to i32, !dbg !19
  %.lhs.trunc10 = trunc nsw i32 %18 to i8, !dbg !19
  %27 = sdiv i8 %.lhs.trunc10, 2, !dbg !19
  %.sext11 = sext i8 %27 to i32, !dbg !19
  %.lhs.trunc12 = trunc nsw i32 %19 to i8, !dbg !19
  %28 = ashr exact i8 %.lhs.trunc12, 1, !dbg !19
  %.sext13 = sext i8 %28 to i32, !dbg !19
  %.lhs.trunc14 = trunc nsw i32 %20 to i8, !dbg !19
  %29 = sdiv i8 %.lhs.trunc14, 2, !dbg !19
  %.sext15 = sext i8 %29 to i32, !dbg !19
  %30 = add nsw i32 %25, %.sext, !dbg !20
  %31 = add nsw i32 %25, %.sext11, !dbg !20
  %32 = add nsw i32 %25, %.sext13, !dbg !20
  %33 = add nsw i32 %25, %.sext15, !dbg !20
  %34 = sext i32 %30 to i64, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !21
  %36 = sext i32 %31 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !21
  %38 = sext i32 %32 to i64, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !21
  %40 = sext i32 %33 to i64, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !22
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !23
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !23
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !24
  %51 = bitcast i32 %50 to float, !dbg !24
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !24
  %53 = bitcast i32 %52 to float, !dbg !24
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !24
  %55 = bitcast i32 %54 to float, !dbg !24
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !24
  %57 = bitcast i32 %56 to float, !dbg !24
  %58 = sext i32 %17 to i64, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !25
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %58, !dbg !27
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !28
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float 5.120000e+02) #3, !dbg !29
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float 5.120000e+02) #3, !dbg !29
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float 5.120000e+02) #3, !dbg !29
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float 5.120000e+02) #3, !dbg !29
  %67 = fadd float %63, 0x3EE4F8B580000000, !dbg !30
  %68 = fadd float %64, 0x3EE4F8B580000000, !dbg !30
  %69 = fadd float %65, 0x3EE4F8B580000000, !dbg !30
  %70 = fadd float %66, 0x3EE4F8B580000000, !dbg !30
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %71, 0, !dbg !31
  br i1 %.not.i, label %74, label %72, !dbg !31

72:                                               ; preds = %7
  %73 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %67), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

74:                                               ; preds = %7
  %75 = tail call float @llvm.nvvm.rsqrt.approx.f(float %67), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

__nv_rsqrtf.exit:                                 ; preds = %72, %74
  %.0.i = phi float [ %73, %72 ], [ %75, %74 ], !dbg !31
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %76, 0, !dbg !31
  br i1 %.not.i1, label %79, label %77, !dbg !31

77:                                               ; preds = %__nv_rsqrtf.exit
  %78 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %68), !dbg !31
  br label %__nv_rsqrtf.exit3, !dbg !31

79:                                               ; preds = %__nv_rsqrtf.exit
  %80 = tail call float @llvm.nvvm.rsqrt.approx.f(float %68), !dbg !31
  br label %__nv_rsqrtf.exit3, !dbg !31

__nv_rsqrtf.exit3:                                ; preds = %77, %79
  %.0.i2 = phi float [ %78, %77 ], [ %80, %79 ], !dbg !31
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i4 = icmp eq i32 %81, 0, !dbg !31
  br i1 %.not.i4, label %84, label %82, !dbg !31

82:                                               ; preds = %__nv_rsqrtf.exit3
  %83 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %69), !dbg !31
  br label %__nv_rsqrtf.exit6, !dbg !31

84:                                               ; preds = %__nv_rsqrtf.exit3
  %85 = tail call float @llvm.nvvm.rsqrt.approx.f(float %69), !dbg !31
  br label %__nv_rsqrtf.exit6, !dbg !31

__nv_rsqrtf.exit6:                                ; preds = %82, %84
  %.0.i5 = phi float [ %83, %82 ], [ %85, %84 ], !dbg !31
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i7 = icmp eq i32 %86, 0, !dbg !31
  br i1 %.not.i7, label %89, label %87, !dbg !31

87:                                               ; preds = %__nv_rsqrtf.exit6
  %88 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %70), !dbg !31
  br label %__nv_rsqrtf.exit9, !dbg !31

89:                                               ; preds = %__nv_rsqrtf.exit6
  %90 = tail call float @llvm.nvvm.rsqrt.approx.f(float %70), !dbg !31
  br label %__nv_rsqrtf.exit9, !dbg !31

__nv_rsqrtf.exit9:                                ; preds = %87, %89
  %.0.i8 = phi float [ %88, %87 ], [ %90, %89 ], !dbg !31
  %91 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %92 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !22
  %93 = insertelement <4 x i32> %92, i32 %44, i64 1, !dbg !22
  %94 = insertelement <4 x i32> %93, i32 %43, i64 2, !dbg !22
  %95 = insertelement <4 x i32> %94, i32 %42, i64 3, !dbg !22
  %96 = bitcast <4 x i32> %95 to <4 x float>, !dbg !22
  %97 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %98 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %99 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %100 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %101 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %102 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %103 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %104 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %105 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %106 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %107 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %108 = insertelement <4 x i32> poison, i32 %91, i64 0, !dbg !17
  %109 = insertelement <4 x i32> %108, i32 %97, i64 1, !dbg !17
  %110 = insertelement <4 x i32> %109, i32 %98, i64 2, !dbg !17
  %111 = insertelement <4 x i32> %110, i32 %99, i64 3, !dbg !17
  %112 = bitcast <4 x i32> %111 to <4 x float>, !dbg !17
  %113 = fsub <4 x float> %112, %96, !dbg !32
  %114 = insertelement <4 x i32> poison, i32 %100, i64 0, !dbg !28
  %115 = insertelement <4 x i32> %114, i32 %101, i64 1, !dbg !28
  %116 = insertelement <4 x i32> %115, i32 %102, i64 2, !dbg !28
  %117 = insertelement <4 x i32> %116, i32 %103, i64 3, !dbg !28
  %118 = bitcast <4 x i32> %117 to <4 x float>, !dbg !28
  %119 = insertelement <4 x i32> poison, i32 %104, i64 0, !dbg !26
  %120 = insertelement <4 x i32> %119, i32 %105, i64 1, !dbg !26
  %121 = insertelement <4 x i32> %120, i32 %106, i64 2, !dbg !26
  %122 = insertelement <4 x i32> %121, i32 %107, i64 3, !dbg !26
  %123 = bitcast <4 x i32> %122 to <4 x float>, !dbg !26
  %124 = insertelement <4 x float> poison, float %.0.i8, i64 0, !dbg !33
  %125 = insertelement <4 x float> %124, float %.0.i5, i64 1, !dbg !33
  %126 = insertelement <4 x float> %125, float %.0.i2, i64 2, !dbg !33
  %127 = insertelement <4 x float> %126, float %.0.i, i64 3, !dbg !33
  %128 = fmul <4 x float> %113, %127, !dbg !33
  %129 = fmul <4 x float> %128, %123, !dbg !34
  %130 = fadd <4 x float> %129, %118, !dbg !35
  %131 = fcmp olt <4 x float> %130, zeroinitializer, !dbg !36
  %132 = extractelement <4 x i1> %131, i64 3, !dbg !40
  %133 = extractelement <4 x i1> %131, i64 2, !dbg !40
  %134 = extractelement <4 x i1> %131, i64 1, !dbg !40
  %135 = extractelement <4 x i1> %131, i64 0, !dbg !40
  %136 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !41
  %bc = bitcast <4 x float> %130 to <4 x i32>, !dbg !42
  %137 = extractelement <4 x i32> %bc, i64 3, !dbg !42
  %138 = select i1 %132, i32 0, i32 %137, !dbg !40
  %bc16 = bitcast <4 x float> %130 to <4 x i32>, !dbg !42
  %139 = extractelement <4 x i32> %bc16, i64 2, !dbg !42
  %140 = select i1 %133, i32 0, i32 %139, !dbg !40
  %bc17 = bitcast <4 x float> %130 to <4 x i32>, !dbg !42
  %141 = extractelement <4 x i32> %bc17, i64 1, !dbg !42
  %142 = select i1 %134, i32 0, i32 %141, !dbg !40
  %bc18 = bitcast <4 x float> %130 to <4 x i32>, !dbg !42
  %143 = extractelement <4 x i32> %bc18, i64 0, !dbg !42
  %144 = select i1 %135, i32 0, i32 %143, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %138, i32 %140, i32 %142, i32 %144, ptr addrspace(1) %136, i1 true) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cf5nj7hivfaducvqu2jwshkimxsfe2xvvu4mjfds22esu2mrxmgi.py", directory: "inductor_cache/f5")
!4 = !{ptr @triton_poi_fused_native_group_norm_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_group_norm_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_group_norm_relu_10", linkageName: "triton_poi_fused_native_group_norm_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 33, scope: !7)
!19 = !DILocation(line: 28, column: 45, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 50, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 50, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 27, scope: !7)
!32 = !DILocation(line: 32, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 19, scope: !7)
!35 = !DILocation(line: 40, column: 20, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 42, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 43, column: 25, scope: !7)
!42 = !DILocation(line: 43, column: 37, scope: !7)
!43 = !DILocation(line: 43, column: 4, scope: !7)
