; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_143(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %16 = shl i32 %15, 10, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #1, !dbg !13
  %21 = bitcast i32 %20 to float, !dbg !13
  %22 = or disjoint i32 %16, %19, !dbg !14
  %23 = or disjoint i32 %22, 512, !dbg !14
  %24 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !15
  %25 = insertelement <2 x i32> %24, i32 %22, i64 1, !dbg !15
  %26 = sdiv <2 x i32> %25, splat (i32 4096), !dbg !15
  %27 = srem <2 x i32> %26, splat (i32 6), !dbg !16
  %28 = shufflevector <2 x i32> %27, <2 x i32> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !16
  %29 = srem i32 %22, 4096, !dbg !17
  %30 = srem i32 %23, 4096, !dbg !17
  %31 = sdiv i32 %22, 24576, !dbg !18
  %32 = sdiv i32 %23, 24576, !dbg !18
  %33 = extractelement <2 x i32> %27, i64 1, !dbg !19
  %34 = icmp slt i32 %33, 1, !dbg !20
  %35 = extractelement <2 x i32> %27, i64 0, !dbg !19
  %36 = icmp slt i32 %35, 1, !dbg !20
  %37 = shl nsw i32 %31, 12, !dbg !21
  %38 = shl nsw i32 %32, 12, !dbg !21
  %39 = add nsw i32 %37, %29, !dbg !22
  %40 = add nsw i32 %38, %30, !dbg !22
  %41 = sext i32 %39 to i64, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !23
  %43 = sext i32 %40 to i64, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !23
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #1, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = bitcast i32 %47 to float, !dbg !24
  %52 = bitcast i32 %48 to float, !dbg !24
  %53 = bitcast i32 %49 to float, !dbg !24
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #1, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !24
  %59 = bitcast i32 %55 to float, !dbg !24
  %60 = bitcast i32 %56 to float, !dbg !24
  %61 = bitcast i32 %57 to float, !dbg !24
  %62 = bitcast i32 %58 to float, !dbg !24
  %63 = fadd float %21, %50, !dbg !25
  %64 = fadd float %21, %51, !dbg !25
  %65 = fadd float %21, %52, !dbg !25
  %66 = fadd float %21, %53, !dbg !25
  %67 = fadd float %21, %59, !dbg !25
  %68 = fadd float %21, %60, !dbg !25
  %69 = fadd float %21, %61, !dbg !25
  %70 = fadd float %21, %62, !dbg !25
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !26
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !26
  %73 = icmp eq <8 x i32> %28, <i32 4, i32 4, i32 3, i32 3, i32 2, i32 2, i32 1, i32 1>, !dbg !27
  %74 = extractelement <8 x i1> %73, i64 7, !dbg !28
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %71, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #1, !dbg !28
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !28
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !28
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !28
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !28
  %80 = bitcast i32 %76 to float, !dbg !28
  %81 = bitcast i32 %77 to float, !dbg !28
  %82 = bitcast i32 %78 to float, !dbg !28
  %83 = bitcast i32 %79 to float, !dbg !28
  %84 = extractelement <8 x i1> %73, i64 6, !dbg !28
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %72, i1 %84, i32 0, i1 %84, i32 0, i1 %84, i32 0, i1 %84, i32 0, i1 %84) #1, !dbg !28
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !28
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !28
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !28
  %90 = bitcast i32 %86 to float, !dbg !28
  %91 = bitcast i32 %87 to float, !dbg !28
  %92 = bitcast i32 %88 to float, !dbg !28
  %93 = bitcast i32 %89 to float, !dbg !28
  %94 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !29
  %95 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !29
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %94, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #1, !dbg !30
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !30
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !30
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !30
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !30
  %101 = bitcast i32 %97 to float, !dbg !30
  %102 = bitcast i32 %98 to float, !dbg !30
  %103 = bitcast i32 %99 to float, !dbg !30
  %104 = bitcast i32 %100 to float, !dbg !30
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %95, i1 %84, i32 0, i1 %84, i32 0, i1 %84, i32 0, i1 %84, i32 0, i1 %84) #1, !dbg !30
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !30
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !30
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !30
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !30
  %110 = bitcast i32 %106 to float, !dbg !30
  %111 = bitcast i32 %107 to float, !dbg !30
  %112 = bitcast i32 %108 to float, !dbg !30
  %113 = bitcast i32 %109 to float, !dbg !30
  %114 = fadd float %80, %101, !dbg !31
  %115 = fadd float %81, %102, !dbg !31
  %116 = fadd float %82, %103, !dbg !31
  %117 = fadd float %83, %104, !dbg !31
  %118 = fadd float %90, %110, !dbg !31
  %119 = fadd float %91, %111, !dbg !31
  %120 = fadd float %92, %112, !dbg !31
  %121 = fadd float %93, %113, !dbg !31
  %122 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !32
  %123 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !32
  %124 = extractelement <8 x i1> %73, i64 5, !dbg !33
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %122, i1 %124, i32 0, i1 %124, i32 0, i1 %124, i32 0, i1 %124, i32 0, i1 %124) #1, !dbg !33
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !33
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !33
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !33
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !33
  %130 = bitcast i32 %126 to float, !dbg !33
  %131 = bitcast i32 %127 to float, !dbg !33
  %132 = bitcast i32 %128 to float, !dbg !33
  %133 = bitcast i32 %129 to float, !dbg !33
  %134 = extractelement <8 x i1> %73, i64 4, !dbg !33
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %123, i1 %134, i32 0, i1 %134, i32 0, i1 %134, i32 0, i1 %134, i32 0, i1 %134) #1, !dbg !33
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !33
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !33
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !33
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !33
  %140 = bitcast i32 %136 to float, !dbg !33
  %141 = bitcast i32 %137 to float, !dbg !33
  %142 = bitcast i32 %138 to float, !dbg !33
  %143 = bitcast i32 %139 to float, !dbg !33
  %144 = getelementptr float, ptr addrspace(1) %5, i64 %41, !dbg !34
  %145 = getelementptr float, ptr addrspace(1) %5, i64 %43, !dbg !34
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %144, i1 %124, i32 0, i1 %124, i32 0, i1 %124, i32 0, i1 %124, i32 0, i1 %124) #1, !dbg !35
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !35
  %148 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !35
  %149 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !35
  %150 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !35
  %151 = bitcast i32 %147 to float, !dbg !35
  %152 = bitcast i32 %148 to float, !dbg !35
  %153 = bitcast i32 %149 to float, !dbg !35
  %154 = bitcast i32 %150 to float, !dbg !35
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %145, i1 %134, i32 0, i1 %134, i32 0, i1 %134, i32 0, i1 %134, i32 0, i1 %134) #1, !dbg !35
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !35
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !35
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !35
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !35
  %160 = bitcast i32 %156 to float, !dbg !35
  %161 = bitcast i32 %157 to float, !dbg !35
  %162 = bitcast i32 %158 to float, !dbg !35
  %163 = bitcast i32 %159 to float, !dbg !35
  %164 = fadd float %130, %151, !dbg !36
  %165 = fadd float %131, %152, !dbg !36
  %166 = fadd float %132, %153, !dbg !36
  %167 = fadd float %133, %154, !dbg !36
  %168 = fadd float %140, %160, !dbg !36
  %169 = fadd float %141, %161, !dbg !36
  %170 = fadd float %142, %162, !dbg !36
  %171 = fadd float %143, %163, !dbg !36
  %172 = getelementptr float, ptr addrspace(1) %6, i64 %41, !dbg !37
  %173 = getelementptr float, ptr addrspace(1) %6, i64 %43, !dbg !37
  %174 = extractelement <8 x i1> %73, i64 3, !dbg !38
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %172, i1 %174, i32 0, i1 %174, i32 0, i1 %174, i32 0, i1 %174, i32 0, i1 %174) #1, !dbg !38
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !38
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !38
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !38
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !38
  %180 = bitcast i32 %176 to float, !dbg !38
  %181 = bitcast i32 %177 to float, !dbg !38
  %182 = bitcast i32 %178 to float, !dbg !38
  %183 = bitcast i32 %179 to float, !dbg !38
  %184 = extractelement <8 x i1> %73, i64 2, !dbg !38
  %185 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %173, i1 %184, i32 0, i1 %184, i32 0, i1 %184, i32 0, i1 %184, i32 0, i1 %184) #1, !dbg !38
  %186 = extractvalue { i32, i32, i32, i32 } %185, 0, !dbg !38
  %187 = extractvalue { i32, i32, i32, i32 } %185, 1, !dbg !38
  %188 = extractvalue { i32, i32, i32, i32 } %185, 2, !dbg !38
  %189 = extractvalue { i32, i32, i32, i32 } %185, 3, !dbg !38
  %190 = bitcast i32 %186 to float, !dbg !38
  %191 = bitcast i32 %187 to float, !dbg !38
  %192 = bitcast i32 %188 to float, !dbg !38
  %193 = bitcast i32 %189 to float, !dbg !38
  %194 = getelementptr float, ptr addrspace(1) %7, i64 %41, !dbg !39
  %195 = getelementptr float, ptr addrspace(1) %7, i64 %43, !dbg !39
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %194, i1 %174, i32 0, i1 %174, i32 0, i1 %174, i32 0, i1 %174, i32 0, i1 %174) #1, !dbg !40
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !40
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !40
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !40
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !40
  %201 = bitcast i32 %197 to float, !dbg !40
  %202 = bitcast i32 %198 to float, !dbg !40
  %203 = bitcast i32 %199 to float, !dbg !40
  %204 = bitcast i32 %200 to float, !dbg !40
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %195, i1 %184, i32 0, i1 %184, i32 0, i1 %184, i32 0, i1 %184, i32 0, i1 %184) #1, !dbg !40
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !40
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !40
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !40
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !40
  %210 = bitcast i32 %206 to float, !dbg !40
  %211 = bitcast i32 %207 to float, !dbg !40
  %212 = bitcast i32 %208 to float, !dbg !40
  %213 = bitcast i32 %209 to float, !dbg !40
  %214 = fadd float %180, %201, !dbg !41
  %215 = fadd float %181, %202, !dbg !41
  %216 = fadd float %182, %203, !dbg !41
  %217 = fadd float %183, %204, !dbg !41
  %218 = fadd float %190, %210, !dbg !41
  %219 = fadd float %191, %211, !dbg !41
  %220 = fadd float %192, %212, !dbg !41
  %221 = fadd float %193, %213, !dbg !41
  %222 = getelementptr float, ptr addrspace(1) %8, i64 %41, !dbg !42
  %223 = getelementptr float, ptr addrspace(1) %8, i64 %43, !dbg !42
  %224 = extractelement <8 x i1> %73, i64 1, !dbg !43
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %222, i1 %224, i32 0, i1 %224, i32 0, i1 %224, i32 0, i1 %224, i32 0, i1 %224) #1, !dbg !43
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !43
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !43
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !43
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !43
  %230 = bitcast i32 %226 to float, !dbg !43
  %231 = bitcast i32 %227 to float, !dbg !43
  %232 = bitcast i32 %228 to float, !dbg !43
  %233 = bitcast i32 %229 to float, !dbg !43
  %234 = extractelement <8 x i1> %73, i64 0, !dbg !43
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %223, i1 %234, i32 0, i1 %234, i32 0, i1 %234, i32 0, i1 %234, i32 0, i1 %234) #1, !dbg !43
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !43
  %237 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !43
  %238 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !43
  %239 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !43
  %240 = bitcast i32 %236 to float, !dbg !43
  %241 = bitcast i32 %237 to float, !dbg !43
  %242 = bitcast i32 %238 to float, !dbg !43
  %243 = bitcast i32 %239 to float, !dbg !43
  %244 = getelementptr float, ptr addrspace(1) %9, i64 %41, !dbg !44
  %245 = getelementptr float, ptr addrspace(1) %9, i64 %43, !dbg !44
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %244, i1 %224, i32 0, i1 %224, i32 0, i1 %224, i32 0, i1 %224, i32 0, i1 %224) #1, !dbg !45
  %247 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !45
  %248 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !45
  %249 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !45
  %250 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !45
  %251 = bitcast i32 %247 to float, !dbg !45
  %252 = bitcast i32 %248 to float, !dbg !45
  %253 = bitcast i32 %249 to float, !dbg !45
  %254 = bitcast i32 %250 to float, !dbg !45
  %255 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %245, i1 %234, i32 0, i1 %234, i32 0, i1 %234, i32 0, i1 %234, i32 0, i1 %234) #1, !dbg !45
  %256 = extractvalue { i32, i32, i32, i32 } %255, 0, !dbg !45
  %257 = extractvalue { i32, i32, i32, i32 } %255, 1, !dbg !45
  %258 = extractvalue { i32, i32, i32, i32 } %255, 2, !dbg !45
  %259 = extractvalue { i32, i32, i32, i32 } %255, 3, !dbg !45
  %260 = bitcast i32 %256 to float, !dbg !45
  %261 = bitcast i32 %257 to float, !dbg !45
  %262 = bitcast i32 %258 to float, !dbg !45
  %263 = bitcast i32 %259 to float, !dbg !45
  %264 = fadd float %230, %251, !dbg !46
  %265 = fadd float %231, %252, !dbg !46
  %266 = fadd float %232, %253, !dbg !46
  %267 = fadd float %233, %254, !dbg !46
  %268 = fadd float %240, %260, !dbg !46
  %269 = fadd float %241, %261, !dbg !46
  %270 = fadd float %242, %262, !dbg !46
  %271 = fadd float %243, %263, !dbg !46
  %272 = icmp sgt i32 %33, 4, !dbg !19
  %273 = icmp sgt i32 %35, 4, !dbg !19
  %274 = getelementptr float, ptr addrspace(1) %10, i64 %41, !dbg !47
  %275 = getelementptr float, ptr addrspace(1) %10, i64 %43, !dbg !47
  %276 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %274, i1 %272, i32 0, i1 %272, i32 0, i1 %272, i32 0, i1 %272, i32 0, i1 %272) #1, !dbg !48
  %277 = extractvalue { i32, i32, i32, i32 } %276, 0, !dbg !48
  %278 = extractvalue { i32, i32, i32, i32 } %276, 1, !dbg !48
  %279 = extractvalue { i32, i32, i32, i32 } %276, 2, !dbg !48
  %280 = extractvalue { i32, i32, i32, i32 } %276, 3, !dbg !48
  %281 = bitcast i32 %277 to float, !dbg !48
  %282 = bitcast i32 %278 to float, !dbg !48
  %283 = bitcast i32 %279 to float, !dbg !48
  %284 = bitcast i32 %280 to float, !dbg !48
  %285 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %275, i1 %273, i32 0, i1 %273, i32 0, i1 %273, i32 0, i1 %273, i32 0, i1 %273) #1, !dbg !48
  %286 = extractvalue { i32, i32, i32, i32 } %285, 0, !dbg !48
  %287 = extractvalue { i32, i32, i32, i32 } %285, 1, !dbg !48
  %288 = extractvalue { i32, i32, i32, i32 } %285, 2, !dbg !48
  %289 = extractvalue { i32, i32, i32, i32 } %285, 3, !dbg !48
  %290 = bitcast i32 %286 to float, !dbg !48
  %291 = bitcast i32 %287 to float, !dbg !48
  %292 = bitcast i32 %288 to float, !dbg !48
  %293 = bitcast i32 %289 to float, !dbg !48
  %294 = getelementptr float, ptr addrspace(1) %11, i64 %41, !dbg !49
  %295 = getelementptr float, ptr addrspace(1) %11, i64 %43, !dbg !49
  %296 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %294, i1 %272, i32 0, i1 %272, i32 0, i1 %272, i32 0, i1 %272, i32 0, i1 %272) #1, !dbg !50
  %297 = extractvalue { i32, i32, i32, i32 } %296, 0, !dbg !50
  %298 = extractvalue { i32, i32, i32, i32 } %296, 1, !dbg !50
  %299 = extractvalue { i32, i32, i32, i32 } %296, 2, !dbg !50
  %300 = extractvalue { i32, i32, i32, i32 } %296, 3, !dbg !50
  %301 = bitcast i32 %297 to float, !dbg !50
  %302 = bitcast i32 %298 to float, !dbg !50
  %303 = bitcast i32 %299 to float, !dbg !50
  %304 = bitcast i32 %300 to float, !dbg !50
  %305 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %295, i1 %273, i32 0, i1 %273, i32 0, i1 %273, i32 0, i1 %273, i32 0, i1 %273) #1, !dbg !50
  %306 = extractvalue { i32, i32, i32, i32 } %305, 0, !dbg !50
  %307 = extractvalue { i32, i32, i32, i32 } %305, 1, !dbg !50
  %308 = extractvalue { i32, i32, i32, i32 } %305, 2, !dbg !50
  %309 = extractvalue { i32, i32, i32, i32 } %305, 3, !dbg !50
  %310 = bitcast i32 %306 to float, !dbg !50
  %311 = bitcast i32 %307 to float, !dbg !50
  %312 = bitcast i32 %308 to float, !dbg !50
  %313 = bitcast i32 %309 to float, !dbg !50
  %314 = fadd float %281, %301, !dbg !51
  %315 = fadd float %282, %302, !dbg !51
  %316 = fadd float %283, %303, !dbg !51
  %317 = fadd float %284, %304, !dbg !51
  %318 = fadd float %290, %310, !dbg !51
  %319 = fadd float %291, %311, !dbg !51
  %320 = fadd float %292, %312, !dbg !51
  %321 = fadd float %293, %313, !dbg !51
  %322 = select i1 %272, float %314, float 0.000000e+00, !dbg !52
  %323 = select i1 %272, float %315, float 0.000000e+00, !dbg !52
  %324 = select i1 %272, float %316, float 0.000000e+00, !dbg !52
  %325 = select i1 %272, float %317, float 0.000000e+00, !dbg !52
  %326 = select i1 %273, float %318, float 0.000000e+00, !dbg !52
  %327 = select i1 %273, float %319, float 0.000000e+00, !dbg !52
  %328 = select i1 %273, float %320, float 0.000000e+00, !dbg !52
  %329 = select i1 %273, float %321, float 0.000000e+00, !dbg !52
  %330 = select i1 %224, float %264, float %322, !dbg !53
  %331 = select i1 %224, float %265, float %323, !dbg !53
  %332 = select i1 %224, float %266, float %324, !dbg !53
  %333 = select i1 %224, float %267, float %325, !dbg !53
  %334 = select i1 %234, float %268, float %326, !dbg !53
  %335 = select i1 %234, float %269, float %327, !dbg !53
  %336 = select i1 %234, float %270, float %328, !dbg !53
  %337 = select i1 %234, float %271, float %329, !dbg !53
  %338 = select i1 %174, float %214, float %330, !dbg !53
  %339 = select i1 %174, float %215, float %331, !dbg !53
  %340 = select i1 %174, float %216, float %332, !dbg !53
  %341 = select i1 %174, float %217, float %333, !dbg !53
  %342 = select i1 %184, float %218, float %334, !dbg !53
  %343 = select i1 %184, float %219, float %335, !dbg !53
  %344 = select i1 %184, float %220, float %336, !dbg !53
  %345 = select i1 %184, float %221, float %337, !dbg !53
  %346 = select i1 %124, float %164, float %338, !dbg !53
  %347 = select i1 %124, float %165, float %339, !dbg !53
  %348 = select i1 %124, float %166, float %340, !dbg !53
  %349 = select i1 %124, float %167, float %341, !dbg !53
  %350 = select i1 %134, float %168, float %342, !dbg !53
  %351 = select i1 %134, float %169, float %343, !dbg !53
  %352 = select i1 %134, float %170, float %344, !dbg !53
  %353 = select i1 %134, float %171, float %345, !dbg !53
  %354 = select i1 %74, float %114, float %346, !dbg !53
  %355 = select i1 %74, float %115, float %347, !dbg !53
  %356 = select i1 %74, float %116, float %348, !dbg !53
  %357 = select i1 %74, float %117, float %349, !dbg !53
  %358 = select i1 %84, float %118, float %350, !dbg !53
  %359 = select i1 %84, float %119, float %351, !dbg !53
  %360 = select i1 %84, float %120, float %352, !dbg !53
  %361 = select i1 %84, float %121, float %353, !dbg !53
  %362 = select i1 %34, float %63, float %354, !dbg !53
  %363 = select i1 %34, float %64, float %355, !dbg !53
  %364 = select i1 %34, float %65, float %356, !dbg !53
  %365 = select i1 %34, float %66, float %357, !dbg !53
  %366 = select i1 %36, float %67, float %358, !dbg !53
  %367 = select i1 %36, float %68, float %359, !dbg !53
  %368 = select i1 %36, float %69, float %360, !dbg !53
  %369 = select i1 %36, float %70, float %361, !dbg !53
  %370 = sext i32 %22 to i64, !dbg !54
  %371 = getelementptr float, ptr addrspace(1) %12, i64 %370, !dbg !54
  %372 = sext i32 %23 to i64, !dbg !54
  %373 = getelementptr float, ptr addrspace(1) %12, i64 %372, !dbg !54
  %374 = bitcast float %362 to i32, !dbg !55
  %375 = bitcast float %363 to i32, !dbg !55
  %376 = bitcast float %364 to i32, !dbg !55
  %377 = bitcast float %365 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %374, i32 %375, i32 %376, i32 %377, ptr addrspace(1) %371, i1 true) #1, !dbg !55
  %378 = bitcast float %366 to i32, !dbg !55
  %379 = bitcast float %367 to i32, !dbg !55
  %380 = bitcast float %368 to i32, !dbg !55
  %381 = bitcast float %369 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %378, i32 %379, i32 %380, i32 %381, ptr addrspace(1) %373, i1 true) #1, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czmn6ukgqexhvpesia2wbhwypul5uhsnm5mucipdtos56jy5nxpm.py", directory: "inductor_cache/zm")
!4 = !{ptr @triton_poi_fused_cat_143, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_143, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_143", linkageName: "triton_poi_fused_cat_143", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 28, column: 19, scope: !7)
!14 = !DILocation(line: 22, column: 23, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 29, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 75, column: 20, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 40, scope: !7)
!22 = !DILocation(line: 35, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 45, scope: !7)
!25 = !DILocation(line: 36, column: 18, scope: !7)
!26 = !DILocation(line: 43, column: 31, scope: !7)
!27 = !DILocation(line: 69, column: 20, scope: !7)
!28 = !DILocation(line: 43, column: 46, scope: !7)
!29 = !DILocation(line: 44, column: 31, scope: !7)
!30 = !DILocation(line: 44, column: 46, scope: !7)
!31 = !DILocation(line: 45, column: 20, scope: !7)
!32 = !DILocation(line: 52, column: 31, scope: !7)
!33 = !DILocation(line: 52, column: 46, scope: !7)
!34 = !DILocation(line: 53, column: 31, scope: !7)
!35 = !DILocation(line: 53, column: 46, scope: !7)
!36 = !DILocation(line: 54, column: 20, scope: !7)
!37 = !DILocation(line: 61, column: 31, scope: !7)
!38 = !DILocation(line: 61, column: 46, scope: !7)
!39 = !DILocation(line: 62, column: 31, scope: !7)
!40 = !DILocation(line: 62, column: 46, scope: !7)
!41 = !DILocation(line: 63, column: 20, scope: !7)
!42 = !DILocation(line: 70, column: 31, scope: !7)
!43 = !DILocation(line: 70, column: 46, scope: !7)
!44 = !DILocation(line: 71, column: 31, scope: !7)
!45 = !DILocation(line: 71, column: 46, scope: !7)
!46 = !DILocation(line: 72, column: 20, scope: !7)
!47 = !DILocation(line: 78, column: 32, scope: !7)
!48 = !DILocation(line: 78, column: 47, scope: !7)
!49 = !DILocation(line: 79, column: 32, scope: !7)
!50 = !DILocation(line: 79, column: 47, scope: !7)
!51 = !DILocation(line: 80, column: 20, scope: !7)
!52 = !DILocation(line: 82, column: 35, scope: !7)
!53 = !DILocation(line: 0, scope: !7)
!54 = !DILocation(line: 88, column: 25, scope: !7)
!55 = !DILocation(line: 88, column: 37, scope: !7)
!56 = !DILocation(line: 88, column: 4, scope: !7)
