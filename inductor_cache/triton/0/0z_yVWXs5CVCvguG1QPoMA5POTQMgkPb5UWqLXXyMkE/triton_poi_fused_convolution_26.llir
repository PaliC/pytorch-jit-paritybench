; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %.lobit1 = lshr i32 %8, 6, !dbg !12
  %11 = and i32 %.lobit1, 3, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = icmp slt i32 %12, 16, !dbg !14
  %18 = icmp slt i32 %13, 16, !dbg !14
  %19 = icmp slt i32 %14, 16, !dbg !14
  %20 = icmp slt i32 %15, 16, !dbg !14
  %21 = icmp slt i32 %16, 16, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %23 = shl i32 %22, 8, !dbg !16
  %24 = lshr i32 %8, 2, !dbg !17
  %25 = and i32 %24, 63, !dbg !17
  %26 = and i32 %9, 252, !dbg !17
  %27 = or disjoint i32 %23, %25, !dbg !18
  %28 = or disjoint i32 %27, 64, !dbg !18
  %29 = or disjoint i32 %27, 128, !dbg !18
  %30 = or disjoint i32 %27, 192, !dbg !18
  %31 = or disjoint i32 %23, %26, !dbg !18
  %32 = icmp slt i32 %27, 256, !dbg !19
  %33 = icmp slt i32 %28, 256, !dbg !19
  %34 = icmp slt i32 %29, 256, !dbg !19
  %35 = icmp slt i32 %30, 256, !dbg !19
  %36 = icmp slt i32 %31, 256, !dbg !19
  %37 = shl i32 %27, 2, !dbg !20
  %38 = shl i32 %28, 2, !dbg !20
  %39 = shl i32 %29, 2, !dbg !20
  %40 = shl i32 %30, 2, !dbg !20
  %41 = shl i32 %12, 8, !dbg !21
  %42 = add i32 %37, %41, !dbg !22
  %43 = add i32 %41, %38, !dbg !22
  %44 = add i32 %41, %39, !dbg !22
  %45 = add i32 %41, %40, !dbg !22
  %46 = sext i32 %42 to i64, !dbg !23
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !23
  %48 = sext i32 %43 to i64, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !23
  %50 = sext i32 %44 to i64, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !23
  %52 = sext i32 %45 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !23
  %54 = and i1 %17, %32, !dbg !24
  %55 = and i1 %33, %17, !dbg !24
  %56 = and i1 %34, %17, !dbg !24
  %57 = and i1 %35, %17, !dbg !24
  %58 = and i1 %18, %36, !dbg !24
  %59 = and i1 %19, %36, !dbg !24
  %60 = and i1 %20, %36, !dbg !24
  %61 = and i1 %21, %36, !dbg !24
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %54) #2, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !25
  %67 = bitcast i32 %63 to float, !dbg !25
  %68 = bitcast i32 %64 to float, !dbg !25
  %69 = bitcast i32 %65 to float, !dbg !25
  %70 = bitcast i32 %66 to float, !dbg !25
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %55) #2, !dbg !25
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !25
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !25
  %76 = bitcast i32 %72 to float, !dbg !25
  %77 = bitcast i32 %73 to float, !dbg !25
  %78 = bitcast i32 %74 to float, !dbg !25
  %79 = bitcast i32 %75 to float, !dbg !25
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %56) #2, !dbg !25
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !25
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !25
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !25
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !25
  %85 = bitcast i32 %81 to float, !dbg !25
  %86 = bitcast i32 %82 to float, !dbg !25
  %87 = bitcast i32 %83 to float, !dbg !25
  %88 = bitcast i32 %84 to float, !dbg !25
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %57) #2, !dbg !25
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !25
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !25
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !25
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !25
  %94 = bitcast i32 %90 to float, !dbg !25
  %95 = bitcast i32 %91 to float, !dbg !25
  %96 = bitcast i32 %92 to float, !dbg !25
  %97 = bitcast i32 %93 to float, !dbg !25
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1, i1 %17) #2, !dbg !26
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !26
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !26
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !26
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !26
  %103 = bitcast i32 %99 to float, !dbg !26
  %104 = bitcast i32 %100 to float, !dbg !26
  %105 = bitcast i32 %101 to float, !dbg !26
  %106 = bitcast i32 %102 to float, !dbg !26
  %107 = fadd float %67, %103, !dbg !27
  %108 = fadd float %68, %104, !dbg !27
  %109 = fadd float %69, %105, !dbg !27
  %110 = fadd float %70, %106, !dbg !27
  %111 = fadd float %76, %103, !dbg !27
  %112 = fadd float %77, %104, !dbg !27
  %113 = fadd float %78, %105, !dbg !27
  %114 = fadd float %79, %106, !dbg !27
  %115 = fadd float %85, %103, !dbg !27
  %116 = fadd float %86, %104, !dbg !27
  %117 = fadd float %87, %105, !dbg !27
  %118 = fadd float %88, %106, !dbg !27
  %119 = fadd float %94, %103, !dbg !27
  %120 = fadd float %95, %104, !dbg !27
  %121 = fadd float %96, %105, !dbg !27
  %122 = fadd float %97, %106, !dbg !27
  %123 = shl i32 %13, 8, !dbg !28
  %124 = shl i32 %14, 8, !dbg !28
  %125 = shl i32 %15, 8, !dbg !28
  %126 = shl i32 %16, 8, !dbg !28
  %127 = add i32 %31, %123, !dbg !29
  %128 = add i32 %31, %124, !dbg !29
  %129 = add i32 %31, %125, !dbg !29
  %130 = add i32 %31, %126, !dbg !29
  %131 = sext i32 %127 to i64, !dbg !30
  %132 = getelementptr float, ptr addrspace(1) %2, i64 %131, !dbg !30
  %133 = sext i32 %128 to i64, !dbg !30
  %134 = getelementptr float, ptr addrspace(1) %2, i64 %133, !dbg !30
  %135 = sext i32 %129 to i64, !dbg !30
  %136 = getelementptr float, ptr addrspace(1) %2, i64 %135, !dbg !30
  %137 = sext i32 %130 to i64, !dbg !30
  %138 = getelementptr float, ptr addrspace(1) %2, i64 %137, !dbg !30
  %139 = shl i32 %8, 10, !dbg !31
  %140 = and i32 %139, 3072, !dbg !31
  %141 = or disjoint i32 %140, %25, !dbg !31
  %142 = and i32 %9, 1020, !dbg !31
  %143 = lshr exact i32 %140, 6, !dbg !31
  %144 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %143, !dbg !31
  %145 = getelementptr float, ptr addrspace(3) %144, i32 %141, !dbg !31
  %146 = bitcast float %107 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #2, !dbg !31
  %147 = or disjoint i32 %141, 256, !dbg !31
  %148 = lshr i32 %147, 8, !dbg !31
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !31
  %150 = getelementptr float, ptr addrspace(3) %149, i32 %147, !dbg !31
  %151 = bitcast float %108 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #2, !dbg !31
  %152 = or disjoint i32 %141, 512, !dbg !31
  %153 = lshr i32 %152, 8, !dbg !31
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !31
  %155 = getelementptr float, ptr addrspace(3) %154, i32 %152, !dbg !31
  %156 = bitcast float %109 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #2, !dbg !31
  %157 = or disjoint i32 %141, 768, !dbg !31
  %158 = lshr i32 %157, 8, !dbg !31
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i32 %158, !dbg !31
  %160 = getelementptr float, ptr addrspace(3) %159, i32 %157, !dbg !31
  %161 = bitcast float %110 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %161, i1 true) #2, !dbg !31
  %162 = or disjoint i32 %141, 64, !dbg !31
  %163 = getelementptr float, ptr addrspace(3) %144, i32 %162, !dbg !31
  %164 = bitcast float %111 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #2, !dbg !31
  %165 = or disjoint i32 %141, 320, !dbg !31
  %166 = lshr i32 %165, 8, !dbg !31
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i32 %166, !dbg !31
  %168 = getelementptr float, ptr addrspace(3) %167, i32 %165, !dbg !31
  %169 = bitcast float %112 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %169, i1 true) #2, !dbg !31
  %170 = or disjoint i32 %141, 576, !dbg !31
  %171 = lshr i32 %170, 8, !dbg !31
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %171, !dbg !31
  %173 = getelementptr float, ptr addrspace(3) %172, i32 %170, !dbg !31
  %174 = bitcast float %113 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #2, !dbg !31
  %175 = or disjoint i32 %141, 832, !dbg !31
  %176 = lshr i32 %175, 8, !dbg !31
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i32 %176, !dbg !31
  %178 = getelementptr float, ptr addrspace(3) %177, i32 %175, !dbg !31
  %179 = bitcast float %114 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %179, i1 true) #2, !dbg !31
  %180 = or disjoint i32 %141, 128, !dbg !31
  %181 = getelementptr float, ptr addrspace(3) %144, i32 %180, !dbg !31
  %182 = bitcast float %115 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 true) #2, !dbg !31
  %183 = or disjoint i32 %141, 384, !dbg !31
  %184 = lshr i32 %183, 8, !dbg !31
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %184, !dbg !31
  %186 = getelementptr float, ptr addrspace(3) %185, i32 %183, !dbg !31
  %187 = bitcast float %116 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %187, i1 true) #2, !dbg !31
  %188 = or disjoint i32 %141, 640, !dbg !31
  %189 = lshr i32 %188, 8, !dbg !31
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i32 %189, !dbg !31
  %191 = getelementptr float, ptr addrspace(3) %190, i32 %188, !dbg !31
  %192 = bitcast float %117 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 true) #2, !dbg !31
  %193 = or disjoint i32 %141, 896, !dbg !31
  %194 = lshr i32 %193, 8, !dbg !31
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i32 %194, !dbg !31
  %196 = getelementptr float, ptr addrspace(3) %195, i32 %193, !dbg !31
  %197 = bitcast float %118 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %197, i1 true) #2, !dbg !31
  %198 = or disjoint i32 %141, 192, !dbg !31
  %199 = getelementptr float, ptr addrspace(3) %144, i32 %198, !dbg !31
  %200 = bitcast float %119 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %200, i1 true) #2, !dbg !31
  %201 = or disjoint i32 %141, 448, !dbg !31
  %202 = lshr i32 %201, 8, !dbg !31
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i32 %202, !dbg !31
  %204 = getelementptr float, ptr addrspace(3) %203, i32 %201, !dbg !31
  %205 = bitcast float %120 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %205, i1 true) #2, !dbg !31
  %206 = or disjoint i32 %141, 704, !dbg !31
  %207 = lshr i32 %206, 8, !dbg !31
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i32 %207, !dbg !31
  %209 = getelementptr float, ptr addrspace(3) %208, i32 %206, !dbg !31
  %210 = bitcast float %121 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #2, !dbg !31
  %211 = or disjoint i32 %141, 960, !dbg !31
  %212 = lshr i32 %211, 8, !dbg !31
  %213 = getelementptr float, ptr addrspace(3) @global_smem, i32 %212, !dbg !31
  %214 = getelementptr float, ptr addrspace(3) %213, i32 %211, !dbg !31
  %215 = bitcast float %122 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %216 = lshr i32 %142, 8, !dbg !31
  %217 = or disjoint i32 %216, %142, !dbg !31
  %218 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %217, !dbg !31
  %219 = load i32, ptr addrspace(3) %218, align 4, !dbg !31
  %220 = or disjoint i32 %142, 1, !dbg !31
  %221 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %216, !dbg !31
  %222 = getelementptr inbounds float, ptr addrspace(3) %221, i32 %220, !dbg !31
  %223 = load i32, ptr addrspace(3) %222, align 4, !dbg !31
  %224 = or disjoint i32 %142, 2, !dbg !31
  %225 = getelementptr inbounds float, ptr addrspace(3) %221, i32 %224, !dbg !31
  %226 = load i32, ptr addrspace(3) %225, align 4, !dbg !31
  %227 = or disjoint i32 %142, 3, !dbg !31
  %228 = getelementptr inbounds float, ptr addrspace(3) %221, i32 %227, !dbg !31
  %229 = load i32, ptr addrspace(3) %228, align 4, !dbg !31
  %230 = or disjoint i32 %142, 1024, !dbg !31
  %231 = lshr i32 %230, 8, !dbg !31
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %231, !dbg !31
  %233 = getelementptr inbounds float, ptr addrspace(3) %232, i32 %230, !dbg !31
  %234 = load i32, ptr addrspace(3) %233, align 4, !dbg !31
  %235 = or disjoint i32 %142, 1025, !dbg !31
  %236 = lshr i32 %235, 8, !dbg !31
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %236, !dbg !31
  %238 = getelementptr inbounds float, ptr addrspace(3) %237, i32 %235, !dbg !31
  %239 = load i32, ptr addrspace(3) %238, align 4, !dbg !31
  %240 = or disjoint i32 %142, 1026, !dbg !31
  %241 = lshr i32 %240, 8, !dbg !31
  %242 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %241, !dbg !31
  %243 = getelementptr inbounds float, ptr addrspace(3) %242, i32 %240, !dbg !31
  %244 = load i32, ptr addrspace(3) %243, align 4, !dbg !31
  %245 = or disjoint i32 %142, 1027, !dbg !31
  %246 = lshr i32 %245, 8, !dbg !31
  %247 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %246, !dbg !31
  %248 = getelementptr inbounds float, ptr addrspace(3) %247, i32 %245, !dbg !31
  %249 = load i32, ptr addrspace(3) %248, align 4, !dbg !31
  %250 = or disjoint i32 %142, 2048, !dbg !31
  %251 = lshr i32 %250, 8, !dbg !31
  %252 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %251, !dbg !31
  %253 = getelementptr inbounds float, ptr addrspace(3) %252, i32 %250, !dbg !31
  %254 = load i32, ptr addrspace(3) %253, align 4, !dbg !31
  %255 = or disjoint i32 %142, 2049, !dbg !31
  %256 = lshr i32 %255, 8, !dbg !31
  %257 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %256, !dbg !31
  %258 = getelementptr inbounds float, ptr addrspace(3) %257, i32 %255, !dbg !31
  %259 = load i32, ptr addrspace(3) %258, align 4, !dbg !31
  %260 = or disjoint i32 %142, 2050, !dbg !31
  %261 = lshr i32 %260, 8, !dbg !31
  %262 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %261, !dbg !31
  %263 = getelementptr inbounds float, ptr addrspace(3) %262, i32 %260, !dbg !31
  %264 = load i32, ptr addrspace(3) %263, align 4, !dbg !31
  %265 = or disjoint i32 %142, 2051, !dbg !31
  %266 = lshr i32 %265, 8, !dbg !31
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %266, !dbg !31
  %268 = getelementptr inbounds float, ptr addrspace(3) %267, i32 %265, !dbg !31
  %269 = load i32, ptr addrspace(3) %268, align 4, !dbg !31
  %270 = or disjoint i32 %142, 3072, !dbg !31
  %271 = lshr i32 %270, 8, !dbg !31
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %271, !dbg !31
  %273 = getelementptr inbounds float, ptr addrspace(3) %272, i32 %270, !dbg !31
  %274 = load i32, ptr addrspace(3) %273, align 4, !dbg !31
  %275 = or disjoint i32 %142, 3073, !dbg !31
  %276 = lshr i32 %275, 8, !dbg !31
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %276, !dbg !31
  %278 = getelementptr inbounds float, ptr addrspace(3) %277, i32 %275, !dbg !31
  %279 = load i32, ptr addrspace(3) %278, align 4, !dbg !31
  %280 = or disjoint i32 %142, 3074, !dbg !31
  %281 = lshr i32 %280, 8, !dbg !31
  %282 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %281, !dbg !31
  %283 = getelementptr inbounds float, ptr addrspace(3) %282, i32 %280, !dbg !31
  %284 = load i32, ptr addrspace(3) %283, align 4, !dbg !31
  %285 = or disjoint i32 %142, 3075, !dbg !31
  %286 = lshr i32 %285, 8, !dbg !31
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %286, !dbg !31
  %288 = getelementptr inbounds float, ptr addrspace(3) %287, i32 %285, !dbg !31
  %289 = load i32, ptr addrspace(3) %288, align 4, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %219, i32 %223, i32 %226, i32 %229, ptr addrspace(1) %132, i1 %58) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %234, i32 %239, i32 %244, i32 %249, ptr addrspace(1) %134, i1 %59) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %254, i32 %259, i32 %264, i32 %269, ptr addrspace(1) %136, i1 %60) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %274, i32 %279, i32 %284, i32 %289, ptr addrspace(1) %138, i1 %61) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crestrhg7b5umv67kggcv76fsbhfplx73iyqwlgr2kir4pkwih27.py", directory: "inductor_cache/re")
!4 = !{ptr @triton_poi_fused_convolution_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_26, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_26", linkageName: "triton_poi_fused_convolution_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 37, scope: !7)
!21 = !DILocation(line: 32, column: 47, scope: !7)
!22 = !DILocation(line: 32, column: 42, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 60, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 34, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 25, scope: !7)
!31 = !DILocation(line: 35, column: 45, scope: !7)
!32 = !DILocation(line: 35, column: 4, scope: !7)
