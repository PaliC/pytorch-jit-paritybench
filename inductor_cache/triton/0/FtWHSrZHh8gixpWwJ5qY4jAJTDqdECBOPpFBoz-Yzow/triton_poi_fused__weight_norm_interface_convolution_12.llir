; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__weight_norm_interface_convolution_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %.lobit1 = lshr i32 %10, 5, !dbg !12
  %13 = and i32 %.lobit1, 3, !dbg !12
  %14 = or disjoint i32 %13, 4, !dbg !12
  %15 = or disjoint i32 %13, 8, !dbg !12
  %16 = or disjoint i32 %13, 12, !dbg !12
  %17 = or disjoint i32 %9, %12, !dbg !13
  %18 = or disjoint i32 %9, %13, !dbg !13
  %19 = or disjoint i32 %9, %14, !dbg !13
  %20 = or disjoint i32 %9, %15, !dbg !13
  %21 = or disjoint i32 %9, %16, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %23 = shl i32 %22, 5, !dbg !15
  %24 = lshr i32 %10, 2, !dbg !16
  %25 = and i32 %24, 31, !dbg !16
  %26 = and i32 %10, 31, !dbg !16
  %27 = or disjoint i32 %23, %25, !dbg !17
  %28 = or disjoint i32 %23, %26, !dbg !17
  %29 = icmp slt i32 %27, 25, !dbg !18
  %30 = icmp slt i32 %28, 25, !dbg !18
  %.frozen = freeze i32 %17, !dbg !19
  %31 = sdiv i32 %.frozen, 32, !dbg !19
  %32 = mul i32 %31, 32, !dbg !20
  %.decomposed = sub i32 %.frozen, %32, !dbg !20
  %33 = shl i32 %27, 5, !dbg !21
  %34 = add i32 %33, %.decomposed, !dbg !22
  %35 = mul i32 %31, 800, !dbg !23
  %36 = add i32 %34, %35, !dbg !24
  %37 = sext i32 %36 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %29) #2, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !26
  %44 = bitcast i32 %40 to float, !dbg !26
  %45 = bitcast i32 %41 to float, !dbg !26
  %46 = bitcast i32 %42 to float, !dbg !26
  %47 = bitcast i32 %43 to float, !dbg !26
  %48 = sext i32 %31 to i64, !dbg !27
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !27
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #2, !dbg !28
  %51 = bitcast i32 %50 to float, !dbg !28
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #2, !dbg !28
  %53 = bitcast i32 %52 to float, !dbg !28
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #2, !dbg !28
  %55 = bitcast i32 %54 to float, !dbg !28
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #2, !dbg !28
  %57 = bitcast i32 %56 to float, !dbg !28
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !29
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #2, !dbg !30
  %60 = bitcast i32 %59 to float, !dbg !30
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #2, !dbg !30
  %62 = bitcast i32 %61 to float, !dbg !30
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #2, !dbg !30
  %64 = bitcast i32 %63 to float, !dbg !30
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #2, !dbg !30
  %66 = bitcast i32 %65 to float, !dbg !30
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float %60) #2, !dbg !31
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float %62) #2, !dbg !31
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float %64) #2, !dbg !31
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float %66) #2, !dbg !31
  %71 = fmul float %67, %44, !dbg !32
  %72 = fmul float %68, %45, !dbg !32
  %73 = fmul float %69, %46, !dbg !32
  %74 = fmul float %70, %47, !dbg !32
  %75 = mul i32 %18, 25, !dbg !33
  %76 = mul i32 %19, 25, !dbg !33
  %77 = mul i32 %20, 25, !dbg !33
  %78 = mul i32 %21, 25, !dbg !33
  %79 = add i32 %28, %75, !dbg !34
  %80 = add i32 %28, %76, !dbg !34
  %81 = add i32 %28, %77, !dbg !34
  %82 = add i32 %28, %78, !dbg !34
  %83 = sext i32 %79 to i64, !dbg !35
  %84 = getelementptr float, ptr addrspace(1) %3, i64 %83, !dbg !35
  %85 = sext i32 %80 to i64, !dbg !35
  %86 = getelementptr float, ptr addrspace(1) %3, i64 %85, !dbg !35
  %87 = sext i32 %81 to i64, !dbg !35
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %87, !dbg !35
  %89 = sext i32 %82 to i64, !dbg !35
  %90 = getelementptr float, ptr addrspace(1) %3, i64 %89, !dbg !35
  %91 = shl i32 %10, 7, !dbg !36
  %92 = and i32 %91, 384, !dbg !36
  %93 = or disjoint i32 %92, %25, !dbg !36
  %94 = and i32 %10, 127, !dbg !36
  %95 = lshr exact i32 %92, 3, !dbg !36
  %96 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %95, !dbg !36
  %97 = getelementptr float, ptr addrspace(3) %96, i32 %93, !dbg !36
  %98 = bitcast float %71 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #2, !dbg !36
  %99 = or disjoint i32 %93, 32, !dbg !36
  %100 = lshr i32 %99, 5, !dbg !36
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !36
  %102 = getelementptr float, ptr addrspace(3) %101, i32 %99, !dbg !36
  %103 = bitcast float %72 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !36
  %104 = or disjoint i32 %93, 64, !dbg !36
  %105 = lshr i32 %104, 5, !dbg !36
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !36
  %107 = getelementptr float, ptr addrspace(3) %106, i32 %104, !dbg !36
  %108 = bitcast float %73 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #2, !dbg !36
  %109 = or disjoint i32 %93, 96, !dbg !36
  %110 = lshr i32 %109, 5, !dbg !36
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !36
  %112 = getelementptr float, ptr addrspace(3) %111, i32 %109, !dbg !36
  %113 = bitcast float %74 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %114 = lshr i32 %94, 5, !dbg !36
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %114, !dbg !36
  %116 = getelementptr inbounds float, ptr addrspace(3) %115, i32 %94, !dbg !36
  %117 = load i32, ptr addrspace(3) %116, align 4, !dbg !36
  %118 = or disjoint i32 %94, 128, !dbg !36
  %119 = lshr i32 %118, 5, !dbg !36
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %119, !dbg !36
  %121 = getelementptr inbounds float, ptr addrspace(3) %120, i32 %118, !dbg !36
  %122 = load i32, ptr addrspace(3) %121, align 4, !dbg !36
  %123 = or disjoint i32 %94, 256, !dbg !36
  %124 = lshr i32 %123, 5, !dbg !36
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %124, !dbg !36
  %126 = getelementptr inbounds float, ptr addrspace(3) %125, i32 %123, !dbg !36
  %127 = load i32, ptr addrspace(3) %126, align 4, !dbg !36
  %128 = or disjoint i32 %94, 384, !dbg !36
  %129 = lshr i32 %128, 5, !dbg !36
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %129, !dbg !36
  %131 = getelementptr inbounds float, ptr addrspace(3) %130, i32 %128, !dbg !36
  %132 = load i32, ptr addrspace(3) %131, align 4, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %117, ptr addrspace(1) %84, i1 %30) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %122, ptr addrspace(1) %86, i1 %30) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %127, ptr addrspace(1) %88, i1 %30) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %132, ptr addrspace(1) %90, i1 %30) #2, !dbg !36
  %133 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !37
  %134 = bitcast float %71 to i32, !dbg !38
  %135 = bitcast float %72 to i32, !dbg !38
  %136 = bitcast float %73 to i32, !dbg !38
  %137 = bitcast float %74 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %134, i32 %135, i32 %136, i32 %137, ptr addrspace(1) %133, i1 %29) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvabjcmx2fnyssnrkwoxdno5qyrldudxdrc2j65lfoqt7yxr6vyy.py", directory: "inductor_cache/va")
!4 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__weight_norm_interface_convolution_12", linkageName: "triton_poi_fused__weight_norm_interface_convolution_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 47, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 52, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 33, scope: !7)
!34 = !DILocation(line: 37, column: 30, scope: !7)
!35 = !DILocation(line: 37, column: 25, scope: !7)
!36 = !DILocation(line: 37, column: 44, scope: !7)
!37 = !DILocation(line: 38, column: 25, scope: !7)
!38 = !DILocation(line: 38, column: 53, scope: !7)
!39 = !DILocation(line: 38, column: 4, scope: !7)
