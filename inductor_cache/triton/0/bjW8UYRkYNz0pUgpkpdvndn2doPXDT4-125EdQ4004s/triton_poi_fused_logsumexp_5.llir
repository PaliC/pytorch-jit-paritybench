; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_logsumexp_5(ptr addrspace(1) %0, ptr addrspace(1) %1) local_unnamed_addr !dbg !7 {
  %3 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %0, i1 true) #3, !dbg !10
  %4 = bitcast i64 %3 to double, !dbg !10
  %5 = getelementptr i8, ptr addrspace(1) %0, i64 8, !dbg !11
  %6 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %5, i1 true) #3, !dbg !12
  %7 = bitcast i64 %6 to double, !dbg !12
  %8 = getelementptr i8, ptr addrspace(1) %0, i64 16, !dbg !13
  %9 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %8, i1 true) #3, !dbg !14
  %10 = bitcast i64 %9 to double, !dbg !14
  %11 = getelementptr i8, ptr addrspace(1) %0, i64 24, !dbg !15
  %12 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %11, i1 true) #3, !dbg !16
  %13 = bitcast i64 %12 to double, !dbg !16
  %14 = fcmp ogt double %4, %7, !dbg !17
  %15 = fcmp uno double %4, 0.000000e+00, !dbg !21
  %16 = or i1 %15, %14, !dbg !22
  %17 = select i1 %16, double %4, double %7, !dbg !23
  %18 = fcmp ogt double %17, %10, !dbg !24
  %19 = fcmp uno double %17, 0.000000e+00, !dbg !26
  %20 = or i1 %18, %19, !dbg !27
  %21 = select i1 %20, double %17, double %10, !dbg !28
  %22 = fcmp ogt double %21, %13, !dbg !29
  %23 = fcmp uno double %21, 0.000000e+00, !dbg !31
  %24 = or i1 %22, %23, !dbg !32
  %25 = select i1 %24, double %21, double %13, !dbg !33
  %26 = tail call double @llvm.fabs.f64(double %25), !dbg !34
  %27 = fcmp oeq double %26, 0x7FF0000000000000, !dbg !35
  %28 = select i1 %27, double 0.000000e+00, double %25, !dbg !36
  %29 = fsub double %4, %28, !dbg !37
  %30 = tail call double @llvm.nvvm.fma.rn.d(double %29, double 0x3FF71547652B82FE, double 0x4338000000000000) #3, !dbg !38
  %31 = tail call i32 @llvm.nvvm.d2i.lo(double %30) #3, !dbg !38
  %32 = tail call double @llvm.nvvm.add.rn.d(double %30, double 0xC338000000000000) #3, !dbg !38
  %33 = tail call double @llvm.nvvm.fma.rn.d(double %32, double 0xBFE62E42FEFA39EF, double %29) #3, !dbg !38
  %34 = tail call double @llvm.nvvm.fma.rn.d(double %32, double 0xBC7ABC9E3B39803F, double %33) #3, !dbg !38
  %35 = tail call double @llvm.nvvm.fma.rn.d(double 0x3E5ADE1569CE2BDF, double %34, double 0x3E928AF3FCA213EA) #3, !dbg !38
  %36 = tail call double @llvm.nvvm.fma.rn.d(double %35, double %34, double 0x3EC71DEE62401315) #3, !dbg !38
  %37 = tail call double @llvm.nvvm.fma.rn.d(double %36, double %34, double 0x3EFA01997C89EB71) #3, !dbg !38
  %38 = tail call double @llvm.nvvm.fma.rn.d(double %37, double %34, double 0x3F2A01A014761F65) #3, !dbg !38
  %39 = tail call double @llvm.nvvm.fma.rn.d(double %38, double %34, double 0x3F56C16C1852B7AF) #3, !dbg !38
  %40 = tail call double @llvm.nvvm.fma.rn.d(double %39, double %34, double 0x3F81111111122322) #3, !dbg !38
  %41 = tail call double @llvm.nvvm.fma.rn.d(double %40, double %34, double 0x3FA55555555502A1) #3, !dbg !38
  %42 = tail call double @llvm.nvvm.fma.rn.d(double %41, double %34, double 0x3FC5555555555511) #3, !dbg !38
  %43 = tail call double @llvm.nvvm.fma.rn.d(double %42, double %34, double 0x3FE000000000000B) #3, !dbg !38
  %44 = tail call double @llvm.nvvm.fma.rn.d(double %43, double %34, double 1.000000e+00) #3, !dbg !38
  %45 = tail call double @llvm.nvvm.fma.rn.d(double %44, double %34, double 1.000000e+00) #3, !dbg !38
  %46 = tail call i32 @llvm.nvvm.d2i.lo(double %45) #3, !dbg !38
  %47 = tail call i32 @llvm.nvvm.d2i.hi(double %45) #3, !dbg !38
  %48 = shl i32 %31, 20, !dbg !38
  %49 = add i32 %47, %48, !dbg !38
  %50 = tail call double @llvm.nvvm.lohi.i2d(i32 %46, i32 %49) #3, !dbg !38
  %51 = tail call i32 @llvm.nvvm.d2i.hi(double %29) #3, !dbg !38
  %52 = bitcast i32 %51 to float, !dbg !38
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i = icmp eq i32 %53, 0, !dbg !38
  %54 = tail call float @llvm.nvvm.fabs.ftz.f(float %52) #3, !dbg !38
  %55 = tail call float @llvm.nvvm.fabs.f(float %52) #3, !dbg !38
  %.01.i = select i1 %.not.i, float %55, float %54, !dbg !38
  %56 = fcmp olt float %.01.i, 0x4010C46560000000, !dbg !38
  br i1 %56, label %__nv_exp.exit, label %__internal_fast_icmp_abs_lt.exit.i, !dbg !38

__internal_fast_icmp_abs_lt.exit.i:               ; preds = %2
  %57 = fcmp olt double %29, 0.000000e+00, !dbg !38
  %58 = fadd double %29, 0x7FF0000000000000, !dbg !38
  %z.0.i = select i1 %57, double 0.000000e+00, double %58, !dbg !38
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not1.i = icmp eq i32 %59, 0, !dbg !38
  %.0.i1 = select i1 %.not1.i, float %55, float %54, !dbg !38
  %60 = fcmp olt float %.0.i1, 0x4010E90000000000, !dbg !38
  br i1 %60, label %61, label %__nv_exp.exit, !dbg !38

61:                                               ; preds = %__internal_fast_icmp_abs_lt.exit.i
  %62 = sdiv i32 %31, 2, !dbg !38
  %63 = shl i32 %62, 20, !dbg !38
  %64 = add i32 %47, %63, !dbg !38
  %65 = tail call double @llvm.nvvm.lohi.i2d(i32 %46, i32 %64) #3, !dbg !38
  %66 = sub nsw i32 %31, %62, !dbg !38
  %67 = shl i32 %66, 20, !dbg !38
  %68 = add nsw i32 %67, 1072693248, !dbg !38
  %69 = tail call double @llvm.nvvm.lohi.i2d(i32 0, i32 %68) #3, !dbg !38
  %70 = fmul double %69, %65, !dbg !38
  br label %__nv_exp.exit, !dbg !38

__nv_exp.exit:                                    ; preds = %2, %__internal_fast_icmp_abs_lt.exit.i, %61
  %z.2.i = phi double [ %50, %2 ], [ %70, %61 ], [ %z.0.i, %__internal_fast_icmp_abs_lt.exit.i ], !dbg !38
  %71 = fsub double %7, %28, !dbg !39
  %72 = tail call double @llvm.nvvm.fma.rn.d(double %71, double 0x3FF71547652B82FE, double 0x4338000000000000) #3, !dbg !40
  %73 = tail call i32 @llvm.nvvm.d2i.lo(double %72) #3, !dbg !40
  %74 = tail call double @llvm.nvvm.add.rn.d(double %72, double 0xC338000000000000) #3, !dbg !40
  %75 = tail call double @llvm.nvvm.fma.rn.d(double %74, double 0xBFE62E42FEFA39EF, double %71) #3, !dbg !40
  %76 = tail call double @llvm.nvvm.fma.rn.d(double %74, double 0xBC7ABC9E3B39803F, double %75) #3, !dbg !40
  %77 = tail call double @llvm.nvvm.fma.rn.d(double 0x3E5ADE1569CE2BDF, double %76, double 0x3E928AF3FCA213EA) #3, !dbg !40
  %78 = tail call double @llvm.nvvm.fma.rn.d(double %77, double %76, double 0x3EC71DEE62401315) #3, !dbg !40
  %79 = tail call double @llvm.nvvm.fma.rn.d(double %78, double %76, double 0x3EFA01997C89EB71) #3, !dbg !40
  %80 = tail call double @llvm.nvvm.fma.rn.d(double %79, double %76, double 0x3F2A01A014761F65) #3, !dbg !40
  %81 = tail call double @llvm.nvvm.fma.rn.d(double %80, double %76, double 0x3F56C16C1852B7AF) #3, !dbg !40
  %82 = tail call double @llvm.nvvm.fma.rn.d(double %81, double %76, double 0x3F81111111122322) #3, !dbg !40
  %83 = tail call double @llvm.nvvm.fma.rn.d(double %82, double %76, double 0x3FA55555555502A1) #3, !dbg !40
  %84 = tail call double @llvm.nvvm.fma.rn.d(double %83, double %76, double 0x3FC5555555555511) #3, !dbg !40
  %85 = tail call double @llvm.nvvm.fma.rn.d(double %84, double %76, double 0x3FE000000000000B) #3, !dbg !40
  %86 = tail call double @llvm.nvvm.fma.rn.d(double %85, double %76, double 1.000000e+00) #3, !dbg !40
  %87 = tail call double @llvm.nvvm.fma.rn.d(double %86, double %76, double 1.000000e+00) #3, !dbg !40
  %88 = tail call i32 @llvm.nvvm.d2i.lo(double %87) #3, !dbg !40
  %89 = tail call i32 @llvm.nvvm.d2i.hi(double %87) #3, !dbg !40
  %90 = shl i32 %73, 20, !dbg !40
  %91 = add i32 %89, %90, !dbg !40
  %92 = tail call double @llvm.nvvm.lohi.i2d(i32 %88, i32 %91) #3, !dbg !40
  %93 = tail call i32 @llvm.nvvm.d2i.hi(double %71) #3, !dbg !40
  %94 = bitcast i32 %93 to float, !dbg !40
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i2 = icmp eq i32 %95, 0, !dbg !40
  %96 = tail call float @llvm.nvvm.fabs.ftz.f(float %94) #3, !dbg !40
  %97 = tail call float @llvm.nvvm.fabs.f(float %94) #3, !dbg !40
  %.01.i3 = select i1 %.not.i2, float %97, float %96, !dbg !40
  %98 = fcmp olt float %.01.i3, 0x4010C46560000000, !dbg !40
  br i1 %98, label %__nv_exp.exit9, label %__internal_fast_icmp_abs_lt.exit.i4, !dbg !40

__internal_fast_icmp_abs_lt.exit.i4:              ; preds = %__nv_exp.exit
  %99 = fcmp olt double %71, 0.000000e+00, !dbg !40
  %100 = fadd double %71, 0x7FF0000000000000, !dbg !40
  %z.0.i5 = select i1 %99, double 0.000000e+00, double %100, !dbg !40
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not1.i6 = icmp eq i32 %101, 0, !dbg !40
  %.0.i7 = select i1 %.not1.i6, float %97, float %96, !dbg !40
  %102 = fcmp olt float %.0.i7, 0x4010E90000000000, !dbg !40
  br i1 %102, label %103, label %__nv_exp.exit9, !dbg !40

103:                                              ; preds = %__internal_fast_icmp_abs_lt.exit.i4
  %104 = sdiv i32 %73, 2, !dbg !40
  %105 = shl i32 %104, 20, !dbg !40
  %106 = add i32 %89, %105, !dbg !40
  %107 = tail call double @llvm.nvvm.lohi.i2d(i32 %88, i32 %106) #3, !dbg !40
  %108 = sub nsw i32 %73, %104, !dbg !40
  %109 = shl i32 %108, 20, !dbg !40
  %110 = add nsw i32 %109, 1072693248, !dbg !40
  %111 = tail call double @llvm.nvvm.lohi.i2d(i32 0, i32 %110) #3, !dbg !40
  %112 = fmul double %111, %107, !dbg !40
  br label %__nv_exp.exit9, !dbg !40

__nv_exp.exit9:                                   ; preds = %__nv_exp.exit, %__internal_fast_icmp_abs_lt.exit.i4, %103
  %z.2.i8 = phi double [ %92, %__nv_exp.exit ], [ %112, %103 ], [ %z.0.i5, %__internal_fast_icmp_abs_lt.exit.i4 ], !dbg !40
  %113 = fadd double %z.2.i, %z.2.i8, !dbg !41
  %114 = fsub double %10, %28, !dbg !42
  %115 = tail call double @llvm.nvvm.fma.rn.d(double %114, double 0x3FF71547652B82FE, double 0x4338000000000000) #3, !dbg !43
  %116 = tail call i32 @llvm.nvvm.d2i.lo(double %115) #3, !dbg !43
  %117 = tail call double @llvm.nvvm.add.rn.d(double %115, double 0xC338000000000000) #3, !dbg !43
  %118 = tail call double @llvm.nvvm.fma.rn.d(double %117, double 0xBFE62E42FEFA39EF, double %114) #3, !dbg !43
  %119 = tail call double @llvm.nvvm.fma.rn.d(double %117, double 0xBC7ABC9E3B39803F, double %118) #3, !dbg !43
  %120 = tail call double @llvm.nvvm.fma.rn.d(double 0x3E5ADE1569CE2BDF, double %119, double 0x3E928AF3FCA213EA) #3, !dbg !43
  %121 = tail call double @llvm.nvvm.fma.rn.d(double %120, double %119, double 0x3EC71DEE62401315) #3, !dbg !43
  %122 = tail call double @llvm.nvvm.fma.rn.d(double %121, double %119, double 0x3EFA01997C89EB71) #3, !dbg !43
  %123 = tail call double @llvm.nvvm.fma.rn.d(double %122, double %119, double 0x3F2A01A014761F65) #3, !dbg !43
  %124 = tail call double @llvm.nvvm.fma.rn.d(double %123, double %119, double 0x3F56C16C1852B7AF) #3, !dbg !43
  %125 = tail call double @llvm.nvvm.fma.rn.d(double %124, double %119, double 0x3F81111111122322) #3, !dbg !43
  %126 = tail call double @llvm.nvvm.fma.rn.d(double %125, double %119, double 0x3FA55555555502A1) #3, !dbg !43
  %127 = tail call double @llvm.nvvm.fma.rn.d(double %126, double %119, double 0x3FC5555555555511) #3, !dbg !43
  %128 = tail call double @llvm.nvvm.fma.rn.d(double %127, double %119, double 0x3FE000000000000B) #3, !dbg !43
  %129 = tail call double @llvm.nvvm.fma.rn.d(double %128, double %119, double 1.000000e+00) #3, !dbg !43
  %130 = tail call double @llvm.nvvm.fma.rn.d(double %129, double %119, double 1.000000e+00) #3, !dbg !43
  %131 = tail call i32 @llvm.nvvm.d2i.lo(double %130) #3, !dbg !43
  %132 = tail call i32 @llvm.nvvm.d2i.hi(double %130) #3, !dbg !43
  %133 = shl i32 %116, 20, !dbg !43
  %134 = add i32 %132, %133, !dbg !43
  %135 = tail call double @llvm.nvvm.lohi.i2d(i32 %131, i32 %134) #3, !dbg !43
  %136 = tail call i32 @llvm.nvvm.d2i.hi(double %114) #3, !dbg !43
  %137 = bitcast i32 %136 to float, !dbg !43
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i10 = icmp eq i32 %138, 0, !dbg !43
  %139 = tail call float @llvm.nvvm.fabs.ftz.f(float %137) #3, !dbg !43
  %140 = tail call float @llvm.nvvm.fabs.f(float %137) #3, !dbg !43
  %.01.i11 = select i1 %.not.i10, float %140, float %139, !dbg !43
  %141 = fcmp olt float %.01.i11, 0x4010C46560000000, !dbg !43
  br i1 %141, label %__nv_exp.exit17, label %__internal_fast_icmp_abs_lt.exit.i12, !dbg !43

__internal_fast_icmp_abs_lt.exit.i12:             ; preds = %__nv_exp.exit9
  %142 = fcmp olt double %114, 0.000000e+00, !dbg !43
  %143 = fadd double %114, 0x7FF0000000000000, !dbg !43
  %z.0.i13 = select i1 %142, double 0.000000e+00, double %143, !dbg !43
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not1.i14 = icmp eq i32 %144, 0, !dbg !43
  %.0.i15 = select i1 %.not1.i14, float %140, float %139, !dbg !43
  %145 = fcmp olt float %.0.i15, 0x4010E90000000000, !dbg !43
  br i1 %145, label %146, label %__nv_exp.exit17, !dbg !43

146:                                              ; preds = %__internal_fast_icmp_abs_lt.exit.i12
  %147 = sdiv i32 %116, 2, !dbg !43
  %148 = shl i32 %147, 20, !dbg !43
  %149 = add i32 %132, %148, !dbg !43
  %150 = tail call double @llvm.nvvm.lohi.i2d(i32 %131, i32 %149) #3, !dbg !43
  %151 = sub nsw i32 %116, %147, !dbg !43
  %152 = shl i32 %151, 20, !dbg !43
  %153 = add nsw i32 %152, 1072693248, !dbg !43
  %154 = tail call double @llvm.nvvm.lohi.i2d(i32 0, i32 %153) #3, !dbg !43
  %155 = fmul double %154, %150, !dbg !43
  br label %__nv_exp.exit17, !dbg !43

__nv_exp.exit17:                                  ; preds = %__nv_exp.exit9, %__internal_fast_icmp_abs_lt.exit.i12, %146
  %z.2.i16 = phi double [ %135, %__nv_exp.exit9 ], [ %155, %146 ], [ %z.0.i13, %__internal_fast_icmp_abs_lt.exit.i12 ], !dbg !43
  %156 = fadd double %113, %z.2.i16, !dbg !44
  %157 = fsub double %13, %28, !dbg !45
  %158 = tail call double @llvm.nvvm.fma.rn.d(double %157, double 0x3FF71547652B82FE, double 0x4338000000000000) #3, !dbg !46
  %159 = tail call i32 @llvm.nvvm.d2i.lo(double %158) #3, !dbg !46
  %160 = tail call double @llvm.nvvm.add.rn.d(double %158, double 0xC338000000000000) #3, !dbg !46
  %161 = tail call double @llvm.nvvm.fma.rn.d(double %160, double 0xBFE62E42FEFA39EF, double %157) #3, !dbg !46
  %162 = tail call double @llvm.nvvm.fma.rn.d(double %160, double 0xBC7ABC9E3B39803F, double %161) #3, !dbg !46
  %163 = tail call double @llvm.nvvm.fma.rn.d(double 0x3E5ADE1569CE2BDF, double %162, double 0x3E928AF3FCA213EA) #3, !dbg !46
  %164 = tail call double @llvm.nvvm.fma.rn.d(double %163, double %162, double 0x3EC71DEE62401315) #3, !dbg !46
  %165 = tail call double @llvm.nvvm.fma.rn.d(double %164, double %162, double 0x3EFA01997C89EB71) #3, !dbg !46
  %166 = tail call double @llvm.nvvm.fma.rn.d(double %165, double %162, double 0x3F2A01A014761F65) #3, !dbg !46
  %167 = tail call double @llvm.nvvm.fma.rn.d(double %166, double %162, double 0x3F56C16C1852B7AF) #3, !dbg !46
  %168 = tail call double @llvm.nvvm.fma.rn.d(double %167, double %162, double 0x3F81111111122322) #3, !dbg !46
  %169 = tail call double @llvm.nvvm.fma.rn.d(double %168, double %162, double 0x3FA55555555502A1) #3, !dbg !46
  %170 = tail call double @llvm.nvvm.fma.rn.d(double %169, double %162, double 0x3FC5555555555511) #3, !dbg !46
  %171 = tail call double @llvm.nvvm.fma.rn.d(double %170, double %162, double 0x3FE000000000000B) #3, !dbg !46
  %172 = tail call double @llvm.nvvm.fma.rn.d(double %171, double %162, double 1.000000e+00) #3, !dbg !46
  %173 = tail call double @llvm.nvvm.fma.rn.d(double %172, double %162, double 1.000000e+00) #3, !dbg !46
  %174 = tail call i32 @llvm.nvvm.d2i.lo(double %173) #3, !dbg !46
  %175 = tail call i32 @llvm.nvvm.d2i.hi(double %173) #3, !dbg !46
  %176 = shl i32 %159, 20, !dbg !46
  %177 = add i32 %175, %176, !dbg !46
  %178 = tail call double @llvm.nvvm.lohi.i2d(i32 %174, i32 %177) #3, !dbg !46
  %179 = tail call i32 @llvm.nvvm.d2i.hi(double %157) #3, !dbg !46
  %180 = bitcast i32 %179 to float, !dbg !46
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i18 = icmp eq i32 %181, 0, !dbg !46
  %182 = tail call float @llvm.nvvm.fabs.ftz.f(float %180) #3, !dbg !46
  %183 = tail call float @llvm.nvvm.fabs.f(float %180) #3, !dbg !46
  %.01.i19 = select i1 %.not.i18, float %183, float %182, !dbg !46
  %184 = fcmp olt float %.01.i19, 0x4010C46560000000, !dbg !46
  br i1 %184, label %__nv_exp.exit25, label %__internal_fast_icmp_abs_lt.exit.i20, !dbg !46

__internal_fast_icmp_abs_lt.exit.i20:             ; preds = %__nv_exp.exit17
  %185 = fcmp olt double %157, 0.000000e+00, !dbg !46
  %186 = fadd double %157, 0x7FF0000000000000, !dbg !46
  %z.0.i21 = select i1 %185, double 0.000000e+00, double %186, !dbg !46
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not1.i22 = icmp eq i32 %187, 0, !dbg !46
  %.0.i23 = select i1 %.not1.i22, float %183, float %182, !dbg !46
  %188 = fcmp olt float %.0.i23, 0x4010E90000000000, !dbg !46
  br i1 %188, label %189, label %__nv_exp.exit25, !dbg !46

189:                                              ; preds = %__internal_fast_icmp_abs_lt.exit.i20
  %190 = sdiv i32 %159, 2, !dbg !46
  %191 = shl i32 %190, 20, !dbg !46
  %192 = add i32 %175, %191, !dbg !46
  %193 = tail call double @llvm.nvvm.lohi.i2d(i32 %174, i32 %192) #3, !dbg !46
  %194 = sub nsw i32 %159, %190, !dbg !46
  %195 = shl i32 %194, 20, !dbg !46
  %196 = add nsw i32 %195, 1072693248, !dbg !46
  %197 = tail call double @llvm.nvvm.lohi.i2d(i32 0, i32 %196) #3, !dbg !46
  %198 = fmul double %197, %193, !dbg !46
  br label %__nv_exp.exit25, !dbg !46

__nv_exp.exit25:                                  ; preds = %__nv_exp.exit17, %__internal_fast_icmp_abs_lt.exit.i20, %189
  %z.2.i24 = phi double [ %178, %__nv_exp.exit17 ], [ %198, %189 ], [ %z.0.i21, %__internal_fast_icmp_abs_lt.exit.i20 ], !dbg !46
  %199 = fadd double %156, %z.2.i24, !dbg !47
  %200 = tail call i32 @llvm.nvvm.d2i.hi(double %199) #3, !dbg !48
  %201 = tail call i32 @llvm.nvvm.d2i.lo(double %199) #3, !dbg !48
  %202 = icmp slt i32 %200, 1048576, !dbg !48
  br i1 %202, label %203, label %207, !dbg !48

203:                                              ; preds = %__nv_exp.exit25
  %204 = fmul double %199, 0x4350000000000000, !dbg !48
  %205 = tail call i32 @llvm.nvvm.d2i.hi(double %204) #3, !dbg !48
  %206 = tail call i32 @llvm.nvvm.d2i.lo(double %204) #3, !dbg !48
  br label %207, !dbg !48

207:                                              ; preds = %203, %__nv_exp.exit25
  %.0.i = phi double [ %204, %203 ], [ %199, %__nv_exp.exit25 ], !dbg !48
  %ihi.0.i = phi i32 [ %205, %203 ], [ %200, %__nv_exp.exit25 ], !dbg !48
  %ilo.0.i = phi i32 [ %206, %203 ], [ %201, %__nv_exp.exit25 ], !dbg !48
  %e.0.i = phi i32 [ -1077, %203 ], [ -1023, %__nv_exp.exit25 ], !dbg !48
  %208 = add i32 %ihi.0.i, -1, !dbg !48
  %or.cond.i = icmp ult i32 %208, 2146435071, !dbg !48
  br i1 %or.cond.i, label %209, label %258, !dbg !48

209:                                              ; preds = %207
  %210 = lshr i32 %ihi.0.i, 20, !dbg !48
  %211 = add nsw i32 %e.0.i, %210, !dbg !48
  %212 = and i32 %ihi.0.i, 1048575, !dbg !48
  %213 = or disjoint i32 %212, 1072693248, !dbg !48
  %214 = tail call double @llvm.nvvm.lohi.i2d(i32 %ilo.0.i, i32 %213) #3, !dbg !48
  %215 = icmp samesign ugt i32 %213, 1073127582, !dbg !48
  br i1 %215, label %216, label %222, !dbg !48

216:                                              ; preds = %209
  %217 = tail call i32 @llvm.nvvm.d2i.lo(double %214) #3, !dbg !48
  %218 = tail call i32 @llvm.nvvm.d2i.hi(double %214) #3, !dbg !48
  %219 = add i32 %218, -1048576, !dbg !48
  %220 = tail call double @llvm.nvvm.lohi.i2d(i32 %217, i32 %219) #3, !dbg !48
  %221 = add nsw i32 %211, 1, !dbg !48
  br label %222, !dbg !48

222:                                              ; preds = %216, %209
  %m.0.i = phi double [ %220, %216 ], [ %214, %209 ], !dbg !48
  %e.1.i = phi i32 [ %221, %216 ], [ %211, %209 ], !dbg !48
  %223 = fadd double %m.0.i, -1.000000e+00, !dbg !48
  %224 = fadd double %m.0.i, 1.000000e+00, !dbg !48
  %225 = tail call double @llvm.nvvm.rcp.approx.ftz.d(double %224) #3, !dbg !48
  %226 = fneg double %224, !dbg !48
  %227 = tail call double @llvm.nvvm.fma.rn.d(double %226, double %225, double 1.000000e+00) #3, !dbg !48
  %228 = tail call double @llvm.nvvm.fma.rn.d(double %227, double %227, double %227) #3, !dbg !48
  %229 = tail call double @llvm.nvvm.fma.rn.d(double %228, double %225, double %225) #3, !dbg !48
  %230 = fmul double %223, %229, !dbg !48
  %231 = fadd double %230, %230, !dbg !48
  %232 = fmul double %231, %231, !dbg !48
  %233 = tail call double @llvm.nvvm.fma.rn.d(double 0x3EB1380B3AE80F1E, double %232, double 0x3ED0EE258B7A8B04) #3, !dbg !48
  %234 = tail call double @llvm.nvvm.fma.rn.d(double %233, double %232, double 0x3EF3B2669F02676F) #3, !dbg !48
  %235 = tail call double @llvm.nvvm.fma.rn.d(double %234, double %232, double 0x3F1745CBA9AB0956) #3, !dbg !48
  %236 = tail call double @llvm.nvvm.fma.rn.d(double %235, double %232, double 0x3F3C71C72D1B5154) #3, !dbg !48
  %237 = tail call double @llvm.nvvm.fma.rn.d(double %236, double %232, double 0x3F624924923BE72D) #3, !dbg !48
  %238 = tail call double @llvm.nvvm.fma.rn.d(double %237, double %232, double 0x3F8999999999A3C4) #3, !dbg !48
  %239 = tail call double @llvm.nvvm.fma.rn.d(double %238, double %232, double 0x3FB5555555555554) #3, !dbg !48
  %240 = fsub double %223, %231, !dbg !48
  %241 = fmul double %240, 2.000000e+00, !dbg !48
  %242 = fneg double %231, !dbg !48
  %243 = tail call double @llvm.nvvm.fma.rn.d(double %242, double %223, double %241) #3, !dbg !48
  %244 = fmul double %229, %243, !dbg !48
  %245 = fmul double %232, %239, !dbg !48
  %246 = tail call double @llvm.nvvm.fma.rn.d(double %245, double %231, double %244) #3, !dbg !48
  %247 = xor i32 %e.1.i, -2147483648, !dbg !48
  %248 = tail call double @llvm.nvvm.lohi.i2d(i32 %247, i32 1127219200) #3, !dbg !48
  %249 = tail call double @llvm.nvvm.lohi.i2d(i32 -2147483648, i32 1127219200) #3, !dbg !48
  %250 = fsub double %248, %249, !dbg !48
  %251 = tail call double @llvm.nvvm.fma.rn.d(double %250, double 0x3FE62E42FEFA39EF, double %231) #3, !dbg !48
  %252 = fneg double %250, !dbg !48
  %253 = tail call double @llvm.nvvm.fma.rn.d(double %252, double 0x3FE62E42FEFA39EF, double %251) #3, !dbg !48
  %254 = fsub double %253, %231, !dbg !48
  %255 = fsub double %246, %254, !dbg !48
  %256 = tail call double @llvm.nvvm.fma.rn.d(double %250, double 0x3C7ABC9E3B39803F, double %255) #3, !dbg !48
  %257 = fadd double %251, %256, !dbg !48
  br label %__nv_log.exit, !dbg !48

258:                                              ; preds = %207
  %259 = tail call double @llvm.nvvm.fma.rn.d(double %.0.i, double 0x7FF0000000000000, double 0x7FF0000000000000) #3, !dbg !48
  %260 = tail call i32 @llvm.nvvm.d2i.hi(double %.0.i) #3, !dbg !48
  %261 = and i32 %260, 2147483647, !dbg !48
  %262 = icmp eq i32 %261, 0, !dbg !48
  %q.0.i = select i1 %262, double 0xFFF0000000000000, double %259, !dbg !48
  br label %__nv_log.exit, !dbg !48

__nv_log.exit:                                    ; preds = %222, %258
  %q.1.i = phi double [ %257, %222 ], [ %q.0.i, %258 ], !dbg !48
  %263 = fadd double %28, %q.1.i, !dbg !49
  %264 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !50
  %265 = and i32 %264, 31, !dbg !50
  %266 = icmp eq i32 %265, 0, !dbg !50
  %267 = bitcast double %263 to i64, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %267, ptr addrspace(1) %1, i1 %266) #3, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fabs.f64(double) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.d2i.hi(double) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.d2i.lo(double) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.nvvm.lohi.i2d(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare double @llvm.nvvm.rcp.approx.ftz.d(double) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.nvvm.fma.rn.d(double, double, double) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.nvvm.add.rn.d(double, double) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cy4r77bepx4czusl3tehhb6il3xr36xqndgdoeghckx2ksnxe4lw.py", directory: "inductor_cache/y4")
!4 = !{ptr @triton_poi_fused_logsumexp_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_logsumexp_5, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_logsumexp_5", linkageName: "triton_poi_fused_logsumexp_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 19, scope: !7)
!11 = !DILocation(line: 26, column: 30, scope: !7)
!12 = !DILocation(line: 26, column: 19, scope: !7)
!13 = !DILocation(line: 28, column: 30, scope: !7)
!14 = !DILocation(line: 28, column: 19, scope: !7)
!15 = !DILocation(line: 30, column: 30, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 118, column: 15, scope: !18, inlinedAt: !20)
!18 = distinct !DILexicalBlockFile(scope: !7, file: !19, discriminator: 0)
!19 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 120, column: 21, scope: !18, inlinedAt: !20)
!22 = !DILocation(line: 120, column: 16, scope: !18, inlinedAt: !20)
!23 = !DILocation(line: 121, column: 29, scope: !18, inlinedAt: !20)
!24 = !DILocation(line: 118, column: 15, scope: !18, inlinedAt: !25)
!25 = !DILocation(line: 33, column: 40, scope: !7)
!26 = !DILocation(line: 120, column: 21, scope: !18, inlinedAt: !25)
!27 = !DILocation(line: 120, column: 16, scope: !18, inlinedAt: !25)
!28 = !DILocation(line: 121, column: 29, scope: !18, inlinedAt: !25)
!29 = !DILocation(line: 118, column: 15, scope: !18, inlinedAt: !30)
!30 = !DILocation(line: 34, column: 41, scope: !7)
!31 = !DILocation(line: 120, column: 21, scope: !18, inlinedAt: !30)
!32 = !DILocation(line: 120, column: 16, scope: !18, inlinedAt: !30)
!33 = !DILocation(line: 121, column: 29, scope: !18, inlinedAt: !30)
!34 = !DILocation(line: 35, column: 24, scope: !7)
!35 = !DILocation(line: 37, column: 21, scope: !7)
!36 = !DILocation(line: 39, column: 35, scope: !7)
!37 = !DILocation(line: 40, column: 19, scope: !7)
!38 = !DILocation(line: 41, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 19, scope: !7)
!40 = !DILocation(line: 43, column: 26, scope: !7)
!41 = !DILocation(line: 44, column: 20, scope: !7)
!42 = !DILocation(line: 45, column: 19, scope: !7)
!43 = !DILocation(line: 46, column: 26, scope: !7)
!44 = !DILocation(line: 47, column: 20, scope: !7)
!45 = !DILocation(line: 48, column: 19, scope: !7)
!46 = !DILocation(line: 49, column: 26, scope: !7)
!47 = !DILocation(line: 50, column: 20, scope: !7)
!48 = !DILocation(line: 51, column: 26, scope: !7)
!49 = !DILocation(line: 52, column: 20, scope: !7)
!50 = !DILocation(line: 53, column: 65, scope: !7)
!51 = !DILocation(line: 53, column: 4, scope: !7)
