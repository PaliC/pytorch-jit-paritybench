; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %12, 128, !dbg !12
  %14 = or disjoint i32 %12, 256, !dbg !12
  %15 = or disjoint i32 %12, 384, !dbg !12
  %16 = or disjoint i32 %10, %12, !dbg !13
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = or disjoint i32 %10, %14, !dbg !13
  %19 = or disjoint i32 %10, %15, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %21 = icmp slt i32 %20, 64, !dbg !15
  %22 = shl i32 %16, 6, !dbg !16
  %23 = shl i32 %17, 6, !dbg !16
  %24 = shl i32 %18, 6, !dbg !16
  %25 = shl i32 %19, 6, !dbg !16
  %26 = add i32 %22, %20, !dbg !17
  %27 = add i32 %23, %20, !dbg !17
  %28 = add i32 %24, %20, !dbg !17
  %29 = add i32 %25, %20, !dbg !17
  %30 = sext i32 %26 to i64, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !18
  %32 = sext i32 %27 to i64, !dbg !18
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !18
  %34 = sext i32 %28 to i64, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !18
  %36 = sext i32 %29 to i64, !dbg !18
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !18
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %21) #4, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %21) #4, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %21) #4, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %21) #4, !dbg !19
  %42 = sext i32 %20 to i64, !dbg !20
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !20
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %21) #4, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %21) #4, !dbg !23
  %47 = bitcast i32 %46 to float, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !24
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %21) #4, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !26
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %21) #4, !dbg !27
  %52 = fadd float %47, 0x3EE4F8B580000000, !dbg !28
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i = icmp eq i32 %53, 0, !dbg !29
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i = icmp eq i32 %54, 0, !dbg !29
  br i1 %.not.i, label %60, label %55, !dbg !29

55:                                               ; preds = %8
  br i1 %.not1.i, label %58, label %56, !dbg !29

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

60:                                               ; preds = %8
  br i1 %.not1.i, label %63, label %61, !dbg !29

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %56, %58, %61, %63
  %.0.i = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !29
  %65 = insertelement <4 x i32> poison, i32 %41, i64 0, !dbg !19
  %66 = insertelement <4 x i32> %65, i32 %40, i64 1, !dbg !19
  %67 = insertelement <4 x i32> %66, i32 %39, i64 2, !dbg !19
  %68 = insertelement <4 x i32> %67, i32 %38, i64 3, !dbg !19
  %69 = bitcast <4 x i32> %68 to <4 x float>, !dbg !19
  %70 = shl i32 %11, 2, !dbg !12
  %71 = and i32 %70, 508, !dbg !12
  %72 = or disjoint i32 %10, %71, !dbg !13
  %.frozen = freeze i32 %72, !dbg !30
  %73 = sdiv i32 %.frozen, 256, !dbg !30
  %74 = mul i32 %73, 256, !dbg !31
  %.decomposed = sub i32 %.frozen, %74, !dbg !31
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !32
  %76 = insertelement <4 x i32> poison, i32 %44, i64 0, !dbg !33
  %77 = bitcast <4 x i32> %76 to <4 x float>, !dbg !33
  %78 = shufflevector <4 x float> %77, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !33
  %79 = fsub <4 x float> %69, %78, !dbg !33
  %80 = insertelement <4 x float> poison, float %75, i64 0, !dbg !34
  %81 = shufflevector <4 x float> %80, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !34
  %82 = fmul <4 x float> %79, %81, !dbg !34
  %83 = insertelement <4 x i32> poison, i32 %49, i64 0, !dbg !35
  %84 = bitcast <4 x i32> %83 to <4 x float>, !dbg !35
  %85 = shufflevector <4 x float> %84, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !35
  %86 = fmul <4 x float> %82, %85, !dbg !35
  %87 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !36
  %88 = bitcast <4 x i32> %87 to <4 x float>, !dbg !36
  %89 = shufflevector <4 x float> %88, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !36
  %90 = fadd <4 x float> %86, %89, !dbg !36
  %91 = fcmp ogt <4 x float> %90, zeroinitializer, !dbg !37
  %92 = extractelement <4 x float> %90, i64 3, !dbg !38
  %93 = fmul float %92, 0x3FB99999A0000000, !dbg !39
  %94 = extractelement <4 x float> %90, i64 2, !dbg !38
  %95 = fmul float %94, 0x3FB99999A0000000, !dbg !39
  %96 = extractelement <4 x float> %90, i64 1, !dbg !38
  %97 = fmul float %96, 0x3FB99999A0000000, !dbg !39
  %98 = extractelement <4 x float> %90, i64 0, !dbg !38
  %99 = fmul float %98, 0x3FB99999A0000000, !dbg !39
  %100 = extractelement <4 x i1> %91, i64 3, !dbg !38
  %101 = select i1 %100, float %92, float %93, !dbg !38
  %102 = extractelement <4 x i1> %91, i64 2, !dbg !38
  %103 = select i1 %102, float %94, float %95, !dbg !38
  %104 = extractelement <4 x i1> %91, i64 1, !dbg !38
  %105 = select i1 %104, float %96, float %97, !dbg !38
  %106 = extractelement <4 x i1> %91, i64 0, !dbg !38
  %107 = select i1 %106, float %98, float %99, !dbg !38
  %108 = shl i32 %20, 8, !dbg !40
  %109 = add i32 %.decomposed, %108, !dbg !41
  %110 = shl i32 %73, 14, !dbg !42
  %111 = add i32 %109, %110, !dbg !43
  %112 = sext i32 %111 to i64, !dbg !44
  %113 = getelementptr float, ptr addrspace(1) %5, i64 %112, !dbg !44
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !45
  %115 = bitcast float %101 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #4, !dbg !45
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !45
  %117 = bitcast float %103 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #4, !dbg !45
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !45
  %119 = bitcast float %105 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #4, !dbg !45
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !45
  %121 = bitcast float %107 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %71, !dbg !45
  %.extract = load i32, ptr addrspace(3) %122, align 16, !dbg !45
  %123 = getelementptr inbounds i8, ptr addrspace(3) %122, i32 4, !dbg !45
  %.extract4 = load i32, ptr addrspace(3) %123, align 4, !dbg !45
  %124 = getelementptr inbounds i8, ptr addrspace(3) %122, i32 8, !dbg !45
  %.extract5 = load i32, ptr addrspace(3) %124, align 8, !dbg !45
  %125 = getelementptr inbounds i8, ptr addrspace(3) %122, i32 12, !dbg !45
  %.extract6 = load i32, ptr addrspace(3) %125, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %113, i1 %21) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coiqsjkr3vv6zlidd3p4joffdnxcfoqpuqfnkfkao4nilx26n7dy.py", directory: "inductor_cache/oi")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 32, column: 38, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 43, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 31, scope: !7)
!25 = !DILocation(line: 35, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 40, column: 26, scope: !7)
!30 = !DILocation(line: 31, column: 19, scope: !7)
!31 = !DILocation(line: 30, column: 19, scope: !7)
!32 = !DILocation(line: 42, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 18, scope: !7)
!34 = !DILocation(line: 45, column: 19, scope: !7)
!35 = !DILocation(line: 46, column: 20, scope: !7)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 49, column: 20, scope: !7)
!38 = !DILocation(line: 52, column: 35, scope: !7)
!39 = !DILocation(line: 51, column: 20, scope: !7)
!40 = !DILocation(line: 53, column: 34, scope: !7)
!41 = !DILocation(line: 53, column: 30, scope: !7)
!42 = !DILocation(line: 53, column: 45, scope: !7)
!43 = !DILocation(line: 53, column: 39, scope: !7)
!44 = !DILocation(line: 53, column: 25, scope: !7)
!45 = !DILocation(line: 53, column: 57, scope: !7)
!46 = !DILocation(line: 53, column: 4, scope: !7)
