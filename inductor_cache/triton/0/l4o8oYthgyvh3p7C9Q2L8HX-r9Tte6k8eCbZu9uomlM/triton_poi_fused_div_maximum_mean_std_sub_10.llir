; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_div_maximum_mean_std_sub_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %8, 6, !dbg !12
  %9 = and i32 %.lobit1, 3, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = or disjoint i32 %10, 4, !dbg !13
  %12 = or disjoint i32 %10, 8, !dbg !13
  %13 = or disjoint i32 %10, 12, !dbg !13
  %14 = icmp slt i32 %10, 12, !dbg !14
  %15 = icmp slt i32 %11, 12, !dbg !14
  %16 = icmp slt i32 %12, 12, !dbg !14
  %17 = icmp slt i32 %7, 0, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %19 = shl i32 %18, 8, !dbg !16
  %20 = shl i32 %8, 2, !dbg !17
  %21 = and i32 %20, 252, !dbg !17
  %22 = or disjoint i32 %19, %21, !dbg !18
  %23 = sdiv i32 %10, 3, !dbg !19
  %24 = sdiv i32 %11, 3, !dbg !19
  %25 = sdiv i32 %12, 3, !dbg !19
  %26 = sdiv i32 %13, 3, !dbg !19
  %27 = shl i32 %10, 12, !dbg !20
  %28 = shl i32 %11, 12, !dbg !20
  %29 = shl i32 %12, 12, !dbg !20
  %30 = shl i32 %13, 12, !dbg !20
  %31 = add i32 %22, %27, !dbg !21
  %32 = add i32 %22, %28, !dbg !21
  %33 = add i32 %22, %29, !dbg !21
  %34 = add i32 %22, %30, !dbg !21
  %35 = sext i32 %31 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !22
  %37 = sext i32 %32 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !22
  %39 = sext i32 %33 to i64, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !22
  %41 = sext i32 %34 to i64, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !22
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %14) #4, !dbg !23
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %15) #4, !dbg !23
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %16) #4, !dbg !23
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %17) #4, !dbg !23
  %47 = sext i32 %23 to i64, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !24
  %49 = sext i32 %24 to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !24
  %51 = sext i32 %25 to i64, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !24
  %53 = sext i32 %26 to i64, !dbg !24
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !24
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %14) #4, !dbg !25
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %14) #4, !dbg !25
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %14) #4, !dbg !25
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %14) #4, !dbg !25
  %59 = bitcast i32 %58 to float, !dbg !25
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %15) #4, !dbg !25
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %15) #4, !dbg !25
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %15) #4, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %15) #4, !dbg !25
  %64 = bitcast i32 %63 to float, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %16) #4, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %16) #4, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %16) #4, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %16) #4, !dbg !25
  %69 = bitcast i32 %68 to float, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %17) #4, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %17) #4, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %17) #4, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %17) #4, !dbg !25
  %74 = bitcast i32 %73 to float, !dbg !25
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !26
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !26
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !26
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %14) #4, !dbg !27
  %80 = bitcast i32 %79 to float, !dbg !27
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %14) #4, !dbg !27
  %82 = bitcast i32 %81 to float, !dbg !27
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %14) #4, !dbg !27
  %84 = bitcast i32 %83 to float, !dbg !27
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %14) #4, !dbg !27
  %86 = bitcast i32 %85 to float, !dbg !27
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %15) #4, !dbg !27
  %88 = bitcast i32 %87 to float, !dbg !27
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %15) #4, !dbg !27
  %90 = bitcast i32 %89 to float, !dbg !27
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %15) #4, !dbg !27
  %92 = bitcast i32 %91 to float, !dbg !27
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %15) #4, !dbg !27
  %94 = bitcast i32 %93 to float, !dbg !27
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %16) #4, !dbg !27
  %96 = bitcast i32 %95 to float, !dbg !27
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %16) #4, !dbg !27
  %98 = bitcast i32 %97 to float, !dbg !27
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %16) #4, !dbg !27
  %100 = bitcast i32 %99 to float, !dbg !27
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %16) #4, !dbg !27
  %102 = bitcast i32 %101 to float, !dbg !27
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %17) #4, !dbg !27
  %104 = bitcast i32 %103 to float, !dbg !27
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %17) #4, !dbg !27
  %106 = bitcast i32 %105 to float, !dbg !27
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %17) #4, !dbg !27
  %108 = bitcast i32 %107 to float, !dbg !27
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %17) #4, !dbg !27
  %110 = bitcast i32 %109 to float, !dbg !27
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float 1.228800e+04) #4, !dbg !28
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float 1.228800e+04) #4, !dbg !28
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float 1.228800e+04) #4, !dbg !28
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float 1.228800e+04) #4, !dbg !28
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 1.228700e+04) #4, !dbg !29
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float 1.228700e+04) #4, !dbg !29
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float 1.228700e+04) #4, !dbg !29
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 1.228700e+04) #4, !dbg !29
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float 1.228700e+04) #4, !dbg !29
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float 1.228700e+04) #4, !dbg !29
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float 1.228700e+04) #4, !dbg !29
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float 1.228700e+04) #4, !dbg !29
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 1.228700e+04) #4, !dbg !29
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float 1.228700e+04) #4, !dbg !29
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float 1.228700e+04) #4, !dbg !29
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float 1.228700e+04) #4, !dbg !29
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float 1.228700e+04) #4, !dbg !29
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float 1.228700e+04) #4, !dbg !29
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float 1.228700e+04) #4, !dbg !29
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float 1.228700e+04) #4, !dbg !29
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i12 = icmp eq i32 %137, 0, !dbg !30
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i15 = icmp eq i32 %138, 0, !dbg !30
  br i1 %.not.i12, label %144, label %139, !dbg !30

139:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %142, label %140, !dbg !30

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #4, !dbg !30
  br label %__nv_sqrtf.exit16, !dbg !30

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #4, !dbg !30
  br label %__nv_sqrtf.exit16, !dbg !30

144:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %147, label %145, !dbg !30

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #4, !dbg !30
  br label %__nv_sqrtf.exit16, !dbg !30

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #4, !dbg !30
  br label %__nv_sqrtf.exit16, !dbg !30

__nv_sqrtf.exit16:                                ; preds = %140, %142, %145, %147
  %.0.i14 = phi float [ %141, %140 ], [ %143, %142 ], [ %146, %145 ], [ %148, %147 ], !dbg !30
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i32 = icmp eq i32 %155, 0, !dbg !30
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i35 = icmp eq i32 %156, 0, !dbg !30
  br i1 %.not.i32, label %162, label %157, !dbg !30

157:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i35, label %160, label %158, !dbg !30

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #4, !dbg !30
  br label %__nv_sqrtf.exit36, !dbg !30

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #4, !dbg !30
  br label %__nv_sqrtf.exit36, !dbg !30

162:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i35, label %165, label %163, !dbg !30

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #4, !dbg !30
  br label %__nv_sqrtf.exit36, !dbg !30

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #4, !dbg !30
  br label %__nv_sqrtf.exit36, !dbg !30

__nv_sqrtf.exit36:                                ; preds = %158, %160, %163, %165
  %.0.i34 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !30
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i52 = icmp eq i32 %173, 0, !dbg !30
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i55 = icmp eq i32 %174, 0, !dbg !30
  br i1 %.not.i52, label %180, label %175, !dbg !30

175:                                              ; preds = %__nv_sqrtf.exit36
  br i1 %.not1.i55, label %178, label %176, !dbg !30

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #4, !dbg !30
  br label %__nv_sqrtf.exit56, !dbg !30

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #4, !dbg !30
  br label %__nv_sqrtf.exit56, !dbg !30

180:                                              ; preds = %__nv_sqrtf.exit36
  br i1 %.not1.i55, label %183, label %181, !dbg !30

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #4, !dbg !30
  br label %__nv_sqrtf.exit56, !dbg !30

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #4, !dbg !30
  br label %__nv_sqrtf.exit56, !dbg !30

__nv_sqrtf.exit56:                                ; preds = %176, %178, %181, %183
  %.0.i54 = phi float [ %177, %176 ], [ %179, %178 ], [ %182, %181 ], [ %184, %183 ], !dbg !30
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i72 = icmp eq i32 %191, 0, !dbg !30
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i75 = icmp eq i32 %192, 0, !dbg !30
  br i1 %.not.i72, label %198, label %193, !dbg !30

193:                                              ; preds = %__nv_sqrtf.exit56
  br i1 %.not1.i75, label %196, label %194, !dbg !30

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #4, !dbg !30
  br label %__nv_sqrtf.exit76, !dbg !30

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #4, !dbg !30
  br label %__nv_sqrtf.exit76, !dbg !30

198:                                              ; preds = %__nv_sqrtf.exit56
  br i1 %.not1.i75, label %201, label %199, !dbg !30

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #4, !dbg !30
  br label %__nv_sqrtf.exit76, !dbg !30

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #4, !dbg !30
  br label %__nv_sqrtf.exit76, !dbg !30

__nv_sqrtf.exit76:                                ; preds = %194, %196, %199, %201
  %.0.i74 = phi float [ %195, %194 ], [ %197, %196 ], [ %200, %199 ], [ %202, %201 ], !dbg !30
  %203 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !23
  %204 = bitcast i32 %203 to float, !dbg !23
  %205 = fsub float %204, %114, !dbg !31
  %206 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !23
  %207 = bitcast i32 %206 to float, !dbg !23
  %208 = fsub float %207, %114, !dbg !31
  %209 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !23
  %210 = bitcast i32 %209 to float, !dbg !23
  %211 = fsub float %210, %114, !dbg !31
  %212 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !23
  %213 = bitcast i32 %212 to float, !dbg !23
  %214 = fsub float %213, %114, !dbg !31
  %215 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !23
  %216 = bitcast i32 %215 to float, !dbg !23
  %217 = fsub float %216, %113, !dbg !31
  %218 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !23
  %219 = bitcast i32 %218 to float, !dbg !23
  %220 = fsub float %219, %113, !dbg !31
  %221 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !23
  %222 = bitcast i32 %221 to float, !dbg !23
  %223 = fsub float %222, %113, !dbg !31
  %224 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !23
  %225 = bitcast i32 %224 to float, !dbg !23
  %226 = fsub float %225, %113, !dbg !31
  %227 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !23
  %228 = bitcast i32 %227 to float, !dbg !23
  %229 = fsub float %228, %112, !dbg !31
  %230 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !23
  %231 = bitcast i32 %230 to float, !dbg !23
  %232 = fsub float %231, %112, !dbg !31
  %233 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !23
  %234 = bitcast i32 %233 to float, !dbg !23
  %235 = fsub float %234, %112, !dbg !31
  %236 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !23
  %237 = bitcast i32 %236 to float, !dbg !23
  %238 = fsub float %237, %112, !dbg !31
  %239 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !23
  %240 = bitcast i32 %239 to float, !dbg !23
  %241 = fsub float %240, %111, !dbg !31
  %242 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !23
  %243 = bitcast i32 %242 to float, !dbg !23
  %244 = fsub float %243, %111, !dbg !31
  %245 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !23
  %246 = bitcast i32 %245 to float, !dbg !23
  %247 = fsub float %246, %111, !dbg !31
  %248 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !23
  %249 = bitcast i32 %248 to float, !dbg !23
  %250 = fsub float %249, %111, !dbg !31
  %251 = or disjoint i32 %7, 15, !dbg !13
  %.frozen = freeze i32 %251, !dbg !19
  %252 = sdiv i32 %.frozen, 3, !dbg !19
  %253 = mul i32 %252, 3, !dbg !32
  %.decomposed = sub i32 %.frozen, %253, !dbg !32
  %254 = or disjoint i32 %7, 14, !dbg !13
  %.frozen77 = freeze i32 %254, !dbg !19
  %255 = sdiv i32 %.frozen77, 3, !dbg !19
  %256 = mul i32 %255, 3, !dbg !32
  %.decomposed78 = sub i32 %.frozen77, %256, !dbg !32
  %257 = or disjoint i32 %7, 13, !dbg !13
  %.frozen79 = freeze i32 %257, !dbg !19
  %258 = sdiv i32 %.frozen79, 3, !dbg !19
  %259 = mul i32 %258, 3, !dbg !32
  %.decomposed80 = sub i32 %.frozen79, %259, !dbg !32
  %260 = or disjoint i32 %7, 12, !dbg !13
  %.frozen81 = freeze i32 %260, !dbg !19
  %261 = sdiv i32 %.frozen81, 3, !dbg !19
  %262 = mul i32 %261, 3, !dbg !32
  %.decomposed82 = sub i32 %.frozen81, %262, !dbg !32
  %263 = or disjoint i32 %7, 11, !dbg !13
  %.frozen83 = freeze i32 %263, !dbg !19
  %264 = sdiv i32 %.frozen83, 3, !dbg !19
  %265 = mul i32 %264, 3, !dbg !32
  %.decomposed84 = sub i32 %.frozen83, %265, !dbg !32
  %266 = or disjoint i32 %7, 10, !dbg !13
  %.frozen85 = freeze i32 %266, !dbg !19
  %267 = sdiv i32 %.frozen85, 3, !dbg !19
  %268 = mul i32 %267, 3, !dbg !32
  %.decomposed86 = sub i32 %.frozen85, %268, !dbg !32
  %269 = or disjoint i32 %7, 9, !dbg !13
  %.frozen87 = freeze i32 %269, !dbg !19
  %270 = sdiv i32 %.frozen87, 3, !dbg !19
  %271 = mul i32 %270, 3, !dbg !32
  %.decomposed88 = sub i32 %.frozen87, %271, !dbg !32
  %272 = or disjoint i32 %7, 8, !dbg !13
  %.frozen89 = freeze i32 %272, !dbg !19
  %273 = sdiv i32 %.frozen89, 3, !dbg !19
  %274 = mul i32 %273, 3, !dbg !32
  %.decomposed90 = sub i32 %.frozen89, %274, !dbg !32
  %275 = or disjoint i32 %7, 7, !dbg !13
  %.frozen91 = freeze i32 %275, !dbg !19
  %276 = sdiv i32 %.frozen91, 3, !dbg !19
  %277 = mul i32 %276, 3, !dbg !32
  %.decomposed92 = sub i32 %.frozen91, %277, !dbg !32
  %278 = or disjoint i32 %7, 6, !dbg !13
  %.frozen93 = freeze i32 %278, !dbg !19
  %279 = sdiv i32 %.frozen93, 3, !dbg !19
  %280 = mul i32 %279, 3, !dbg !32
  %.decomposed94 = sub i32 %.frozen93, %280, !dbg !32
  %281 = or disjoint i32 %7, 5, !dbg !13
  %.frozen95 = freeze i32 %281, !dbg !19
  %282 = sdiv i32 %.frozen95, 3, !dbg !19
  %283 = mul i32 %282, 3, !dbg !32
  %.decomposed96 = sub i32 %.frozen95, %283, !dbg !32
  %284 = or disjoint i32 %7, 4, !dbg !13
  %.frozen97 = freeze i32 %284, !dbg !19
  %285 = sdiv i32 %.frozen97, 3, !dbg !19
  %286 = mul i32 %285, 3, !dbg !32
  %.decomposed98 = sub i32 %.frozen97, %286, !dbg !32
  %287 = or disjoint i32 %7, 3, !dbg !13
  %.frozen99 = freeze i32 %287, !dbg !19
  %288 = sdiv i32 %.frozen99, 3, !dbg !19
  %289 = mul i32 %288, 3, !dbg !32
  %.decomposed100 = sub i32 %.frozen99, %289, !dbg !32
  %290 = or disjoint i32 %7, 2, !dbg !13
  %.frozen101 = freeze i32 %290, !dbg !19
  %291 = sdiv i32 %.frozen101, 3, !dbg !19
  %292 = mul i32 %291, 3, !dbg !32
  %.decomposed102 = sub i32 %.frozen101, %292, !dbg !32
  %293 = or disjoint i32 %7, 1, !dbg !13
  %.frozen103 = freeze i32 %293, !dbg !19
  %294 = sdiv i32 %.frozen103, 3, !dbg !19
  %295 = mul i32 %294, 3, !dbg !32
  %.decomposed104 = sub i32 %.frozen103, %295, !dbg !32
  %.frozen105 = freeze i32 %7, !dbg !19
  %296 = sdiv i32 %.frozen105, 3, !dbg !19
  %297 = mul i32 %296, 3, !dbg !32
  %.decomposed106 = sub i32 %.frozen105, %297, !dbg !32
  %298 = and i32 %8, 255, !dbg !17
  %299 = or disjoint i32 %19, %298, !dbg !18
  %300 = icmp slt i32 %263, 12, !dbg !14
  %301 = icmp slt i32 %266, 12, !dbg !14
  %302 = icmp slt i32 %269, 12, !dbg !14
  %303 = icmp slt i32 %272, 12, !dbg !14
  %304 = icmp slt i32 %275, 12, !dbg !14
  %305 = icmp slt i32 %278, 12, !dbg !14
  %306 = icmp slt i32 %281, 12, !dbg !14
  %307 = icmp slt i32 %284, 12, !dbg !14
  %308 = icmp slt i32 %287, 12, !dbg !14
  %309 = icmp slt i32 %290, 12, !dbg !14
  %310 = icmp slt i32 %293, 12, !dbg !14
  %311 = icmp slt i32 %7, 12, !dbg !14
  %312 = fcmp ogt float %.0.i14, 0x3F8279A740000000, !dbg !33
  %313 = fcmp ogt float %.0.i34, 0x3F8279A740000000, !dbg !33
  %314 = fcmp ogt float %.0.i54, 0x3F8279A740000000, !dbg !33
  %315 = fcmp ogt float %.0.i74, 0x3F8279A740000000, !dbg !33
  %316 = fcmp uno float %.0.i14, 0.000000e+00, !dbg !37
  %317 = fcmp uno float %.0.i34, 0.000000e+00, !dbg !37
  %318 = fcmp uno float %.0.i54, 0.000000e+00, !dbg !37
  %319 = fcmp uno float %.0.i74, 0.000000e+00, !dbg !37
  %320 = or i1 %312, %316, !dbg !38
  %321 = or i1 %313, %317, !dbg !38
  %322 = or i1 %314, %318, !dbg !38
  %323 = or i1 %315, %319, !dbg !38
  %324 = select i1 %320, float %.0.i14, float 0x3F8279A740000000, !dbg !39
  %325 = select i1 %321, float %.0.i34, float 0x3F8279A740000000, !dbg !39
  %326 = select i1 %322, float %.0.i54, float 0x3F8279A740000000, !dbg !39
  %327 = select i1 %323, float %.0.i74, float 0x3F8279A740000000, !dbg !39
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %250, float %324) #4, !dbg !40
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %247, float %324) #4, !dbg !40
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %244, float %324) #4, !dbg !40
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %241, float %324) #4, !dbg !40
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float %325) #4, !dbg !40
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %235, float %325) #4, !dbg !40
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %232, float %325) #4, !dbg !40
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %229, float %325) #4, !dbg !40
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float %326) #4, !dbg !40
  %337 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %223, float %326) #4, !dbg !40
  %338 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %220, float %326) #4, !dbg !40
  %339 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %217, float %326) #4, !dbg !40
  %340 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %214, float %327) #4, !dbg !40
  %341 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float %327) #4, !dbg !40
  %342 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float %327) #4, !dbg !40
  %343 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %205, float %327) #4, !dbg !40
  %344 = mul i32 %299, 3, !dbg !41
  %345 = add i32 %344, %.decomposed104, !dbg !42
  %346 = add i32 %344, %.decomposed102, !dbg !42
  %347 = add i32 %344, %.decomposed100, !dbg !42
  %348 = add i32 %344, %.decomposed98, !dbg !42
  %349 = add i32 %344, %.decomposed96, !dbg !42
  %350 = add i32 %344, %.decomposed94, !dbg !42
  %351 = add i32 %344, %.decomposed92, !dbg !42
  %352 = add i32 %344, %.decomposed90, !dbg !42
  %353 = add i32 %344, %.decomposed88, !dbg !42
  %354 = add i32 %344, %.decomposed86, !dbg !42
  %355 = add i32 %344, %.decomposed84, !dbg !42
  %356 = add i32 %344, %.decomposed82, !dbg !42
  %357 = add i32 %344, %.decomposed80, !dbg !42
  %358 = add i32 %344, %.decomposed78, !dbg !42
  %359 = add i32 %344, %.decomposed, !dbg !42
  %360 = mul i32 %296, 12288, !dbg !43
  %361 = mul i32 %294, 12288, !dbg !43
  %362 = mul i32 %291, 12288, !dbg !43
  %363 = mul i32 %288, 12288, !dbg !43
  %364 = mul i32 %285, 12288, !dbg !43
  %365 = mul i32 %282, 12288, !dbg !43
  %366 = mul i32 %279, 12288, !dbg !43
  %367 = mul i32 %276, 12288, !dbg !43
  %368 = mul i32 %273, 12288, !dbg !43
  %369 = mul i32 %270, 12288, !dbg !43
  %370 = mul i32 %267, 12288, !dbg !43
  %371 = mul i32 %264, 12288, !dbg !43
  %372 = mul i32 %261, 12288, !dbg !43
  %373 = mul i32 %258, 12288, !dbg !43
  %374 = mul i32 %255, 12288, !dbg !43
  %375 = mul i32 %252, 12288, !dbg !43
  %376 = add i32 %360, %.decomposed106, !dbg !42
  %377 = add i32 %376, %344, !dbg !44
  %378 = add i32 %345, %361, !dbg !44
  %379 = add i32 %346, %362, !dbg !44
  %380 = add i32 %347, %363, !dbg !44
  %381 = add i32 %348, %364, !dbg !44
  %382 = add i32 %349, %365, !dbg !44
  %383 = add i32 %350, %366, !dbg !44
  %384 = add i32 %351, %367, !dbg !44
  %385 = add i32 %352, %368, !dbg !44
  %386 = add i32 %353, %369, !dbg !44
  %387 = add i32 %354, %370, !dbg !44
  %388 = add i32 %355, %371, !dbg !44
  %389 = add i32 %356, %372, !dbg !44
  %390 = add i32 %357, %373, !dbg !44
  %391 = add i32 %358, %374, !dbg !44
  %392 = add i32 %359, %375, !dbg !44
  %393 = sext i32 %377 to i64, !dbg !45
  %394 = getelementptr float, ptr addrspace(1) %3, i64 %393, !dbg !45
  %395 = sext i32 %378 to i64, !dbg !45
  %396 = getelementptr float, ptr addrspace(1) %3, i64 %395, !dbg !45
  %397 = sext i32 %379 to i64, !dbg !45
  %398 = getelementptr float, ptr addrspace(1) %3, i64 %397, !dbg !45
  %399 = sext i32 %380 to i64, !dbg !45
  %400 = getelementptr float, ptr addrspace(1) %3, i64 %399, !dbg !45
  %401 = sext i32 %381 to i64, !dbg !45
  %402 = getelementptr float, ptr addrspace(1) %3, i64 %401, !dbg !45
  %403 = sext i32 %382 to i64, !dbg !45
  %404 = getelementptr float, ptr addrspace(1) %3, i64 %403, !dbg !45
  %405 = sext i32 %383 to i64, !dbg !45
  %406 = getelementptr float, ptr addrspace(1) %3, i64 %405, !dbg !45
  %407 = sext i32 %384 to i64, !dbg !45
  %408 = getelementptr float, ptr addrspace(1) %3, i64 %407, !dbg !45
  %409 = sext i32 %385 to i64, !dbg !45
  %410 = getelementptr float, ptr addrspace(1) %3, i64 %409, !dbg !45
  %411 = sext i32 %386 to i64, !dbg !45
  %412 = getelementptr float, ptr addrspace(1) %3, i64 %411, !dbg !45
  %413 = sext i32 %387 to i64, !dbg !45
  %414 = getelementptr float, ptr addrspace(1) %3, i64 %413, !dbg !45
  %415 = sext i32 %388 to i64, !dbg !45
  %416 = getelementptr float, ptr addrspace(1) %3, i64 %415, !dbg !45
  %417 = sext i32 %389 to i64, !dbg !45
  %418 = getelementptr float, ptr addrspace(1) %3, i64 %417, !dbg !45
  %419 = sext i32 %390 to i64, !dbg !45
  %420 = getelementptr float, ptr addrspace(1) %3, i64 %419, !dbg !45
  %421 = sext i32 %391 to i64, !dbg !45
  %422 = getelementptr float, ptr addrspace(1) %3, i64 %421, !dbg !45
  %423 = sext i32 %392 to i64, !dbg !45
  %424 = getelementptr float, ptr addrspace(1) %3, i64 %423, !dbg !45
  %425 = and i32 %20, 768, !dbg !46
  %426 = and i32 %20, 1020, !dbg !46
  %427 = lshr exact i32 %425, 8, !dbg !46
  %428 = or disjoint i32 %427, %426, !dbg !46
  %429 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %428, !dbg !46
  %430 = bitcast float %328 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %429, <1 x i32> %430, i1 true) #4, !dbg !46
  %431 = or disjoint i32 %426, 1, !dbg !46
  %432 = lshr exact i32 %425, 6, !dbg !46
  %433 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %432, !dbg !46
  %434 = getelementptr inbounds float, ptr addrspace(3) %433, i32 %431, !dbg !46
  %435 = bitcast float %329 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %434, <1 x i32> %435, i1 true) #4, !dbg !46
  %436 = or disjoint i32 %426, 2, !dbg !46
  %437 = getelementptr inbounds float, ptr addrspace(3) %433, i32 %436, !dbg !46
  %438 = bitcast float %330 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %438, i1 true) #4, !dbg !46
  %439 = or disjoint i32 %426, 3, !dbg !46
  %440 = getelementptr inbounds float, ptr addrspace(3) %433, i32 %439, !dbg !46
  %441 = bitcast float %331 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %441, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %442 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %298, !dbg !46
  %443 = load i32, ptr addrspace(3) %442, align 4, !dbg !46
  %444 = getelementptr inbounds i8, ptr addrspace(3) %442, i32 1028, !dbg !46
  %445 = load i32, ptr addrspace(3) %444, align 4, !dbg !46
  %446 = getelementptr inbounds i8, ptr addrspace(3) %442, i32 2056, !dbg !46
  %447 = load i32, ptr addrspace(3) %446, align 4, !dbg !46
  %448 = getelementptr inbounds i8, ptr addrspace(3) %442, i32 3084, !dbg !46
  %449 = load i32, ptr addrspace(3) %448, align 4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %450 = bitcast float %332 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %429, <1 x i32> %450, i1 true) #4, !dbg !46
  %451 = bitcast float %333 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %434, <1 x i32> %451, i1 true) #4, !dbg !46
  %452 = bitcast float %334 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %452, i1 true) #4, !dbg !46
  %453 = bitcast float %335 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %453, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %454 = load i32, ptr addrspace(3) %442, align 4, !dbg !46
  %455 = load i32, ptr addrspace(3) %444, align 4, !dbg !46
  %456 = load i32, ptr addrspace(3) %446, align 4, !dbg !46
  %457 = load i32, ptr addrspace(3) %448, align 4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %458 = bitcast float %336 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %429, <1 x i32> %458, i1 true) #4, !dbg !46
  %459 = bitcast float %337 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %434, <1 x i32> %459, i1 true) #4, !dbg !46
  %460 = bitcast float %338 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %460, i1 true) #4, !dbg !46
  %461 = bitcast float %339 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %461, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %462 = load i32, ptr addrspace(3) %442, align 4, !dbg !46
  %463 = load i32, ptr addrspace(3) %444, align 4, !dbg !46
  %464 = load i32, ptr addrspace(3) %446, align 4, !dbg !46
  %465 = load i32, ptr addrspace(3) %448, align 4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %466 = bitcast float %340 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %429, <1 x i32> %466, i1 true) #4, !dbg !46
  %467 = bitcast float %341 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %434, <1 x i32> %467, i1 true) #4, !dbg !46
  %468 = bitcast float %342 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %468, i1 true) #4, !dbg !46
  %469 = bitcast float %343 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %469, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %470 = load i32, ptr addrspace(3) %442, align 4, !dbg !46
  %471 = load i32, ptr addrspace(3) %444, align 4, !dbg !46
  %472 = load i32, ptr addrspace(3) %446, align 4, !dbg !46
  %473 = load i32, ptr addrspace(3) %448, align 4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %443, ptr addrspace(1) %394, i1 %311) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %445, ptr addrspace(1) %396, i1 %310) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %447, ptr addrspace(1) %398, i1 %309) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %449, ptr addrspace(1) %400, i1 %308) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %454, ptr addrspace(1) %402, i1 %307) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %455, ptr addrspace(1) %404, i1 %306) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %456, ptr addrspace(1) %406, i1 %305) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %457, ptr addrspace(1) %408, i1 %304) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %462, ptr addrspace(1) %410, i1 %303) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %463, ptr addrspace(1) %412, i1 %302) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %464, ptr addrspace(1) %414, i1 %301) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %465, ptr addrspace(1) %416, i1 %300) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %470, ptr addrspace(1) %418, i1 %17) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %471, ptr addrspace(1) %420, i1 %17) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %472, ptr addrspace(1) %422, i1 %17) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %473, ptr addrspace(1) %424, i1 %17) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czburxbxpl4x2h3i7nb2t3dkbaio57k3476gzlfal5idesiyomos.py", directory: "inductor_cache/zb")
!4 = !{ptr @triton_poi_fused_div_maximum_mean_std_sub_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_maximum_mean_std_sub_10, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_maximum_mean_std_sub_10", linkageName: "triton_poi_fused_div_maximum_mean_std_sub_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 39, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 26, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 31, column: 19, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 42, column: 41, scope: !7)
!37 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 43, column: 19, scope: !7)
!41 = !DILocation(line: 44, column: 32, scope: !7)
!42 = !DILocation(line: 44, column: 30, scope: !7)
!43 = !DILocation(line: 44, column: 43, scope: !7)
!44 = !DILocation(line: 44, column: 37, scope: !7)
!45 = !DILocation(line: 44, column: 25, scope: !7)
!46 = !DILocation(line: 44, column: 55, scope: !7)
!47 = !DILocation(line: 44, column: 4, scope: !7)
