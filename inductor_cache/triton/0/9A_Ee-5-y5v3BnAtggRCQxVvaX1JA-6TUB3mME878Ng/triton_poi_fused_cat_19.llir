; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %15 = sdiv i32 %.frozen, 3072, !dbg !14
  %16 = mul i32 %15, 3072, !dbg !15
  %.decomposed = sub i32 %.frozen, %16, !dbg !15
  %17 = icmp slt i32 %.decomposed, 768, !dbg !16
  %18 = mul i32 %15, 13056, !dbg !17
  %19 = add i32 %18, %.decomposed, !dbg !18
  %20 = sext i32 %19 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !19
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #1, !dbg !20
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !20
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !20
  %25 = bitcast i32 %23 to float, !dbg !20
  %26 = bitcast i32 %24 to float, !dbg !20
  %27 = sext i32 %.decomposed to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !21
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %28, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #1, !dbg !22
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !22
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !22
  %32 = bitcast i32 %30 to float, !dbg !22
  %33 = bitcast i32 %31 to float, !dbg !22
  %34 = fmul float %25, %32, !dbg !23
  %35 = fmul float %26, %33, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !24
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #1, !dbg !25
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !25
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !25
  %40 = bitcast i32 %38 to float, !dbg !25
  %41 = bitcast i32 %39 to float, !dbg !25
  %42 = fadd float %34, %40, !dbg !26
  %43 = fadd float %35, %41, !dbg !26
  %44 = add nsw i32 %.decomposed, -768, !dbg !27
  %45 = icmp ult i32 %44, 768, !dbg !27
  %46 = add i32 %18, %44, !dbg !28
  %47 = sext i32 %46 to i64, !dbg !29
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !29
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %48, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #1, !dbg !30
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !30
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !30
  %52 = bitcast i32 %50 to float, !dbg !30
  %53 = bitcast i32 %51 to float, !dbg !30
  %54 = sext i32 %44 to i64, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !31
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %55, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #1, !dbg !32
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !32
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !32
  %59 = bitcast i32 %57 to float, !dbg !32
  %60 = bitcast i32 %58 to float, !dbg !32
  %61 = fmul float %52, %59, !dbg !33
  %62 = fmul float %53, %60, !dbg !33
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !34
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %63, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #1, !dbg !35
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !35
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !35
  %67 = bitcast i32 %65 to float, !dbg !35
  %68 = bitcast i32 %66 to float, !dbg !35
  %69 = fadd float %61, %67, !dbg !36
  %70 = fadd float %62, %68, !dbg !36
  %71 = add nsw i32 %.decomposed, -1536, !dbg !37
  %72 = icmp ult i32 %71, 768, !dbg !37
  %73 = add i32 %18, %71, !dbg !38
  %74 = sext i32 %73 to i64, !dbg !39
  %75 = getelementptr float, ptr addrspace(1) %4, i64 %74, !dbg !39
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %75, i1 %72, i32 0, i1 %72, i32 0, i1 %72) #1, !dbg !40
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !40
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !40
  %79 = bitcast i32 %77 to float, !dbg !40
  %80 = bitcast i32 %78 to float, !dbg !40
  %81 = sext i32 %71 to i64, !dbg !41
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !41
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %82, i1 %72, i32 0, i1 %72, i32 0, i1 %72) #1, !dbg !42
  %84 = extractvalue { i32, i32 } %83, 0, !dbg !42
  %85 = extractvalue { i32, i32 } %83, 1, !dbg !42
  %86 = bitcast i32 %84 to float, !dbg !42
  %87 = bitcast i32 %85 to float, !dbg !42
  %88 = fmul float %79, %86, !dbg !43
  %89 = fmul float %80, %87, !dbg !43
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !44
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %90, i1 %72, i32 0, i1 %72, i32 0, i1 %72) #1, !dbg !45
  %92 = extractvalue { i32, i32 } %91, 0, !dbg !45
  %93 = extractvalue { i32, i32 } %91, 1, !dbg !45
  %94 = bitcast i32 %92 to float, !dbg !45
  %95 = bitcast i32 %93 to float, !dbg !45
  %96 = fadd float %88, %94, !dbg !46
  %97 = fadd float %89, %95, !dbg !46
  %98 = icmp sgt i32 %.decomposed, 2303, !dbg !47
  %99 = add nsw i32 %.decomposed, -2304, !dbg !48
  %100 = add i32 %18, %99, !dbg !49
  %101 = sext i32 %100 to i64, !dbg !50
  %102 = getelementptr float, ptr addrspace(1) %5, i64 %101, !dbg !50
  %103 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %102, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #1, !dbg !51
  %104 = extractvalue { i32, i32 } %103, 0, !dbg !51
  %105 = extractvalue { i32, i32 } %103, 1, !dbg !51
  %106 = bitcast i32 %104 to float, !dbg !51
  %107 = bitcast i32 %105 to float, !dbg !51
  %108 = sext i32 %99 to i64, !dbg !52
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !52
  %110 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %109, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #1, !dbg !53
  %111 = extractvalue { i32, i32 } %110, 0, !dbg !53
  %112 = extractvalue { i32, i32 } %110, 1, !dbg !53
  %113 = bitcast i32 %111 to float, !dbg !53
  %114 = bitcast i32 %112 to float, !dbg !53
  %115 = fmul float %106, %113, !dbg !54
  %116 = fmul float %107, %114, !dbg !54
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !55
  %118 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %117, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #1, !dbg !56
  %119 = extractvalue { i32, i32 } %118, 0, !dbg !56
  %120 = extractvalue { i32, i32 } %118, 1, !dbg !56
  %121 = bitcast i32 %119 to float, !dbg !56
  %122 = bitcast i32 %120 to float, !dbg !56
  %123 = fadd float %115, %121, !dbg !57
  %124 = fadd float %116, %122, !dbg !57
  %125 = select i1 %98, float %123, float 0.000000e+00, !dbg !58
  %126 = select i1 %98, float %124, float 0.000000e+00, !dbg !58
  %127 = select i1 %72, float %96, float %125, !dbg !59
  %128 = select i1 %72, float %97, float %126, !dbg !59
  %129 = select i1 %45, float %69, float %127, !dbg !59
  %130 = select i1 %45, float %70, float %128, !dbg !59
  %131 = select i1 %17, float %42, float %129, !dbg !59
  %132 = select i1 %17, float %43, float %130, !dbg !59
  %133 = sext i32 %14 to i64, !dbg !60
  %134 = getelementptr float, ptr addrspace(1) %6, i64 %133, !dbg !60
  %135 = bitcast float %131 to i32, !dbg !61
  %136 = bitcast float %132 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %135, i32 %136, ptr addrspace(1) %134, i1 true) #1, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvsizdsv5kgpb6367xx3d7tmtkuhtodbv26bul7l4ma54yxpvpy6.py", directory: "inductor_cache/vs")
!4 = !{ptr @triton_poi_fused_cat_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_19", linkageName: "triton_poi_fused_cat_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 36, scope: !7)
!18 = !DILocation(line: 32, column: 42, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 48, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 18, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 42, column: 20, scope: !7)
!28 = !DILocation(line: 43, column: 43, scope: !7)
!29 = !DILocation(line: 43, column: 31, scope: !7)
!30 = !DILocation(line: 43, column: 58, scope: !7)
!31 = !DILocation(line: 44, column: 31, scope: !7)
!32 = !DILocation(line: 44, column: 45, scope: !7)
!33 = !DILocation(line: 45, column: 20, scope: !7)
!34 = !DILocation(line: 46, column: 31, scope: !7)
!35 = !DILocation(line: 46, column: 45, scope: !7)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 53, column: 20, scope: !7)
!38 = !DILocation(line: 54, column: 43, scope: !7)
!39 = !DILocation(line: 54, column: 31, scope: !7)
!40 = !DILocation(line: 54, column: 59, scope: !7)
!41 = !DILocation(line: 55, column: 31, scope: !7)
!42 = !DILocation(line: 55, column: 46, scope: !7)
!43 = !DILocation(line: 56, column: 20, scope: !7)
!44 = !DILocation(line: 57, column: 31, scope: !7)
!45 = !DILocation(line: 57, column: 46, scope: !7)
!46 = !DILocation(line: 58, column: 20, scope: !7)
!47 = !DILocation(line: 61, column: 20, scope: !7)
!48 = !DILocation(line: 64, column: 53, scope: !7)
!49 = !DILocation(line: 64, column: 43, scope: !7)
!50 = !DILocation(line: 64, column: 31, scope: !7)
!51 = !DILocation(line: 64, column: 59, scope: !7)
!52 = !DILocation(line: 65, column: 31, scope: !7)
!53 = !DILocation(line: 65, column: 46, scope: !7)
!54 = !DILocation(line: 66, column: 20, scope: !7)
!55 = !DILocation(line: 67, column: 31, scope: !7)
!56 = !DILocation(line: 67, column: 46, scope: !7)
!57 = !DILocation(line: 68, column: 20, scope: !7)
!58 = !DILocation(line: 70, column: 35, scope: !7)
!59 = !DILocation(line: 0, scope: !7)
!60 = !DILocation(line: 74, column: 25, scope: !7)
!61 = !DILocation(line: 74, column: 37, scope: !7)
!62 = !DILocation(line: 74, column: 4, scope: !7)
