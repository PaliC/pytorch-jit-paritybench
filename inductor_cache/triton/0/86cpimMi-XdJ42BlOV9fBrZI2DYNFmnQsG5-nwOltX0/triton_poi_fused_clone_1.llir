; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 252, !dbg !12
  %10 = and i32 %7, 127, !dbg !12
  %11 = or disjoint i32 %10, 128, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %10, !dbg !13
  %14 = or disjoint i32 %6, %11, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %16 = shl i32 %15, 2, !dbg !15
  %17 = lshr i32 %7, 6, !dbg !16
  %.lobit = and i32 %17, 1, !dbg !16
  %18 = or disjoint i32 %16, %.lobit, !dbg !17
  %19 = or disjoint i32 %18, 2, !dbg !17
  %20 = icmp slt i32 %18, 4, !dbg !18
  %21 = icmp slt i32 %19, 4, !dbg !18
  %22 = icmp slt i32 %16, 4, !dbg !18
  %.frozen = freeze i32 %12, !dbg !19
  %23 = sdiv i32 %.frozen, 4096, !dbg !19
  %24 = mul i32 %23, 4096, !dbg !20
  %.decomposed = sub i32 %.frozen, %24, !dbg !20
  %25 = shl i32 %18, 12, !dbg !21
  %26 = shl i32 %19, 12, !dbg !21
  %27 = shl i32 %23, 14, !dbg !22
  %28 = add i32 %27, %.decomposed, !dbg !23
  %29 = add i32 %28, %25, !dbg !24
  %30 = add i32 %28, %26, !dbg !24
  %31 = sext i32 %29 to i64, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !25
  %33 = sext i32 %30 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !25
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %20) #2, !dbg !26
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !26
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !26
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !26
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !26
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %21) #2, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !26
  %45 = add i32 %13, %15, !dbg !27
  %46 = shl i32 %45, 2, !dbg !27
  %47 = add i32 %14, %15, !dbg !27
  %48 = shl i32 %47, 2, !dbg !27
  %49 = sext i32 %46 to i64, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !28
  %51 = sext i32 %48 to i64, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !28
  %53 = shl i32 %7, 4, !dbg !29
  %54 = and i32 %53, 1008, !dbg !29
  %55 = or disjoint i32 %54, %.lobit, !dbg !29
  %56 = and i32 %8, 508, !dbg !29
  %57 = lshr exact i32 %54, 2, !dbg !29
  %58 = add nuw nsw i32 %57, %55, !dbg !29
  %59 = zext nneg i32 %58 to i64, !dbg !29
  %60 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %59, !dbg !29
  %61 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 true) #2, !dbg !29
  %62 = or disjoint i32 %55, 4, !dbg !29
  %63 = lshr i32 %62, 2, !dbg !29
  %64 = add nuw nsw i32 %63, %62, !dbg !29
  %65 = zext nneg i32 %64 to i64, !dbg !29
  %66 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %65, !dbg !29
  %67 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #2, !dbg !29
  %68 = or disjoint i32 %55, 8, !dbg !29
  %69 = lshr i32 %68, 2, !dbg !29
  %70 = add nuw nsw i32 %69, %68, !dbg !29
  %71 = zext nneg i32 %70 to i64, !dbg !29
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %71, !dbg !29
  %73 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #2, !dbg !29
  %74 = or disjoint i32 %55, 12, !dbg !29
  %75 = lshr i32 %74, 2, !dbg !29
  %76 = add nuw nsw i32 %75, %74, !dbg !29
  %77 = zext nneg i32 %76 to i64, !dbg !29
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %77, !dbg !29
  %79 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #2, !dbg !29
  %80 = or disjoint i32 %55, 2, !dbg !29
  %81 = add nuw nsw i32 %80, %57, !dbg !29
  %82 = zext nneg i32 %81 to i64, !dbg !29
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %82, !dbg !29
  %84 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #2, !dbg !29
  %85 = or disjoint i32 %55, 6, !dbg !29
  %86 = lshr i32 %85, 2, !dbg !29
  %87 = add nuw nsw i32 %86, %85, !dbg !29
  %88 = zext nneg i32 %87 to i64, !dbg !29
  %89 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %88, !dbg !29
  %90 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #2, !dbg !29
  %91 = or disjoint i32 %55, 10, !dbg !29
  %92 = lshr i32 %91, 2, !dbg !29
  %93 = add nuw nsw i32 %92, %91, !dbg !29
  %94 = zext nneg i32 %93 to i64, !dbg !29
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %94, !dbg !29
  %96 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !29
  %97 = or disjoint i32 %55, 14, !dbg !29
  %98 = lshr i32 %97, 2, !dbg !29
  %99 = add nuw nsw i32 %98, %97, !dbg !29
  %100 = zext nneg i32 %99 to i64, !dbg !29
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %100, !dbg !29
  %102 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %103 = lshr exact i32 %56, 2, !dbg !29
  %104 = add nuw nsw i32 %103, %56, !dbg !29
  %105 = zext nneg i32 %104 to i64, !dbg !29
  %106 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %105, !dbg !29
  %107 = load i32, ptr addrspace(3) %106, align 4, !dbg !29
  %108 = or disjoint i32 %56, 1, !dbg !29
  %109 = add nuw nsw i32 %108, %103, !dbg !29
  %110 = zext nneg i32 %109 to i64, !dbg !29
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %110, !dbg !29
  %112 = load i32, ptr addrspace(3) %111, align 4, !dbg !29
  %113 = or disjoint i32 %56, 2, !dbg !29
  %114 = add nuw nsw i32 %113, %103, !dbg !29
  %115 = zext nneg i32 %114 to i64, !dbg !29
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %115, !dbg !29
  %117 = load i32, ptr addrspace(3) %116, align 4, !dbg !29
  %118 = or disjoint i32 %56, 3, !dbg !29
  %119 = add nuw nsw i32 %118, %103, !dbg !29
  %120 = zext nneg i32 %119 to i64, !dbg !29
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %120, !dbg !29
  %122 = load i32, ptr addrspace(3) %121, align 4, !dbg !29
  %123 = or disjoint i32 %56, 512, !dbg !29
  %124 = lshr exact i32 %123, 2, !dbg !29
  %125 = add nuw nsw i32 %124, %123, !dbg !29
  %126 = zext nneg i32 %125 to i64, !dbg !29
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %126, !dbg !29
  %128 = load i32, ptr addrspace(3) %127, align 4, !dbg !29
  %129 = or disjoint i32 %56, 513, !dbg !29
  %130 = lshr i32 %129, 2, !dbg !29
  %131 = add nuw nsw i32 %130, %129, !dbg !29
  %132 = zext nneg i32 %131 to i64, !dbg !29
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %132, !dbg !29
  %134 = load i32, ptr addrspace(3) %133, align 4, !dbg !29
  %135 = or disjoint i32 %56, 514, !dbg !29
  %136 = lshr i32 %135, 2, !dbg !29
  %137 = add nuw nsw i32 %136, %135, !dbg !29
  %138 = zext nneg i32 %137 to i64, !dbg !29
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %138, !dbg !29
  %140 = load i32, ptr addrspace(3) %139, align 4, !dbg !29
  %141 = or disjoint i32 %56, 515, !dbg !29
  %142 = lshr i32 %141, 2, !dbg !29
  %143 = add nuw nsw i32 %142, %141, !dbg !29
  %144 = zext nneg i32 %143 to i64, !dbg !29
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %144, !dbg !29
  %146 = load i32, ptr addrspace(3) %145, align 4, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %107, i32 %112, i32 %117, i32 %122, ptr addrspace(1) %50, i1 %22) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %128, i32 %134, i32 %140, i32 %146, ptr addrspace(1) %52, i1 %22) #2, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjgkdcwneywz5fycyvpcljvz6jvbsoxzmlkttmktnhsaizhlbl24.py", directory: "inductor_cache/jg")
!4 = !{ptr @triton_poi_fused_clone_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_1", linkageName: "triton_poi_fused_clone_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 56, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 25, scope: !7)
!29 = !DILocation(line: 33, column: 43, scope: !7)
!30 = !DILocation(line: 33, column: 4, scope: !7)
