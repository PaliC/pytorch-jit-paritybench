; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__softmax_6(ptr addrspace(1) %0, i32 %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %6 = and i32 %5, 31, !dbg !11
  %7 = lshr i32 %5, 5, !dbg !11
  %8 = shl i32 %5, 2, !dbg !11
  %9 = and i32 %8, 252, !dbg !11
  %10 = shl i32 %4, 8, !dbg !12
  %11 = or disjoint i32 %10, %9, !dbg !13
  %12 = sext i32 %11 to i64, !dbg !14
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !14
  %14 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %13, i1 true) #3, !dbg !15
  %15 = extractvalue { i32, i32, i32, i32 } %14, 0, !dbg !15
  %16 = extractvalue { i32, i32, i32, i32 } %14, 1, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %14, 2, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %14, 3, !dbg !15
  %19 = bitcast i32 %15 to float, !dbg !15
  %20 = bitcast i32 %16 to float, !dbg !15
  %21 = bitcast i32 %17 to float, !dbg !15
  %22 = bitcast i32 %18 to float, !dbg !15
  %23 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %19, float 4.096000e+03) #3, !dbg !16
  %24 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %20, float 4.096000e+03) #3, !dbg !16
  %25 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %21, float 4.096000e+03) #3, !dbg !16
  %26 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %22, float 4.096000e+03) #3, !dbg !16
  %27 = fcmp ogt float %23, %24, !dbg !17
  %28 = fcmp uno float %23, 0.000000e+00, !dbg !22
  %29 = or i1 %28, %27, !dbg !23
  %30 = select i1 %29, float %23, float %24, !dbg !24
  %31 = fcmp ogt float %30, %25, !dbg !17
  %32 = fcmp uno float %30, 0.000000e+00, !dbg !22
  %33 = or i1 %31, %32, !dbg !23
  %34 = select i1 %33, float %30, float %25, !dbg !24
  %35 = fcmp ogt float %34, %26, !dbg !17
  %36 = fcmp uno float %34, 0.000000e+00, !dbg !22
  %37 = or i1 %35, %36, !dbg !23
  %38 = select i1 %37, float %34, float %26, !dbg !24
  %39 = bitcast float %38 to i32, !dbg !25
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 16, i32 31), !dbg !25
  %41 = bitcast i32 %40 to float, !dbg !25
  %42 = fcmp ogt float %38, %41, !dbg !17
  %43 = fcmp uno float %38, 0.000000e+00, !dbg !22
  %44 = or i1 %42, %43, !dbg !23
  %45 = select i1 %44, float %38, float %41, !dbg !24
  %46 = bitcast float %45 to i32, !dbg !25
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 8, i32 31), !dbg !25
  %48 = bitcast i32 %47 to float, !dbg !25
  %49 = fcmp ogt float %45, %48, !dbg !17
  %50 = fcmp uno float %45, 0.000000e+00, !dbg !22
  %51 = or i1 %49, %50, !dbg !23
  %52 = select i1 %51, float %45, float %48, !dbg !24
  %53 = bitcast float %52 to i32, !dbg !25
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 4, i32 31), !dbg !25
  %55 = bitcast i32 %54 to float, !dbg !25
  %56 = fcmp ogt float %52, %55, !dbg !17
  %57 = fcmp uno float %52, 0.000000e+00, !dbg !22
  %58 = or i1 %56, %57, !dbg !23
  %59 = select i1 %58, float %52, float %55, !dbg !24
  %60 = bitcast float %59 to i32, !dbg !25
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 2, i32 31), !dbg !25
  %62 = bitcast i32 %61 to float, !dbg !25
  %63 = fcmp ogt float %59, %62, !dbg !17
  %64 = fcmp uno float %59, 0.000000e+00, !dbg !22
  %65 = or i1 %63, %64, !dbg !23
  %66 = select i1 %65, float %59, float %62, !dbg !24
  %67 = bitcast float %66 to i32, !dbg !25
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 1, i32 31), !dbg !25
  %69 = bitcast i32 %68 to float, !dbg !25
  %70 = fcmp ogt float %66, %69, !dbg !17
  %71 = fcmp uno float %66, 0.000000e+00, !dbg !22
  %72 = or i1 %70, %71, !dbg !23
  %73 = icmp eq i32 %6, 0, !dbg !25
  %74 = and i32 %7, 1, !dbg !25
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !25
  %76 = select i1 %72, i32 %67, i32 %68, !dbg !24
  %77 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %77, i1 %73) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %78 = icmp slt i32 %5, 2, !dbg !25
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %5, !dbg !25
  %80 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %79, i1 %78) #3, !dbg !25
  %81 = bitcast i32 %80 to float, !dbg !25
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !25
  %83 = bitcast i32 %82 to float, !dbg !25
  %84 = fcmp ogt float %81, %83, !dbg !17
  %85 = fcmp uno float %81, 0.000000e+00, !dbg !22
  %86 = or i1 %85, %84, !dbg !23
  %87 = and i32 %5, 1, !dbg !25
  %88 = icmp eq i32 %87, 0, !dbg !25
  %89 = and i1 %78, %88, !dbg !25
  %90 = select i1 %86, i32 %80, i32 %82, !dbg !24
  %91 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %91, i1 %89) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %92 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !25
  %93 = fadd float %92, 0.000000e+00, !dbg !26
  %94 = fsub float %23, %93, !dbg !28
  %95 = fsub float %24, %93, !dbg !28
  %96 = fsub float %25, %93, !dbg !28
  %97 = fsub float %26, %93, !dbg !28
  %98 = fmul float %94, 0x3FF7154760000000, !dbg !29
  %99 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %98) #3, !dbg !29
  %100 = fmul float %95, 0x3FF7154760000000, !dbg !29
  %101 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %100) #3, !dbg !29
  %102 = fmul float %96, 0x3FF7154760000000, !dbg !29
  %103 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %102) #3, !dbg !29
  %104 = fmul float %97, 0x3FF7154760000000, !dbg !29
  %105 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %104) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %106 = fadd float %99, %101, !dbg !34
  %107 = fadd float %106, %103, !dbg !34
  %108 = fadd float %107, %105, !dbg !34
  %109 = bitcast float %108 to i32, !dbg !30
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 16, i32 31), !dbg !30
  %111 = bitcast i32 %110 to float, !dbg !30
  %112 = fadd float %108, %111, !dbg !34
  %113 = bitcast float %112 to i32, !dbg !30
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 8, i32 31), !dbg !30
  %115 = bitcast i32 %114 to float, !dbg !30
  %116 = fadd float %112, %115, !dbg !34
  %117 = bitcast float %116 to i32, !dbg !30
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 4, i32 31), !dbg !30
  %119 = bitcast i32 %118 to float, !dbg !30
  %120 = fadd float %116, %119, !dbg !34
  %121 = bitcast float %120 to i32, !dbg !30
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 2, i32 31), !dbg !30
  %123 = bitcast i32 %122 to float, !dbg !30
  %124 = fadd float %120, %123, !dbg !34
  %125 = bitcast float %124 to i32, !dbg !30
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 1, i32 31), !dbg !30
  %127 = bitcast i32 %126 to float, !dbg !30
  %128 = fadd float %124, %127, !dbg !34
  %129 = bitcast float %128 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %129, i1 %73) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %130 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %79, i1 %78) #3, !dbg !30
  %131 = bitcast i32 %130 to float, !dbg !30
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 1, i32 31), !dbg !30
  %133 = bitcast i32 %132 to float, !dbg !30
  %134 = fadd float %131, %133, !dbg !34
  %135 = bitcast float %134 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %135, i1 %89) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %136 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !30
  %137 = fadd float %136, 0.000000e+00, !dbg !36
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float %137) #3, !dbg !38
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float %137) #3, !dbg !38
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %137) #3, !dbg !38
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %137) #3, !dbg !38
  %142 = bitcast float %138 to i32, !dbg !39
  %143 = bitcast float %139 to i32, !dbg !39
  %144 = bitcast float %140 to i32, !dbg !39
  %145 = bitcast float %141 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %142, i32 %143, i32 %144, i32 %145, ptr addrspace(1) %13, i1 true) #3, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgpjhkncq5wkx4x5xxxiqqac26zosppkxp32agp7fnelsftbzbnl.py", directory: "inductor_cache/gp")
!4 = !{ptr @triton_per_fused__softmax_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_6, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_6", linkageName: "triton_per_fused__softmax_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 43, scope: !7)
!13 = !DILocation(line: 32, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 34, scope: !7)
!15 = !DILocation(line: 32, column: 48, scope: !7)
!16 = !DILocation(line: 34, column: 18, scope: !7)
!17 = !DILocation(line: 118, column: 15, scope: !18, inlinedAt: !21)
!18 = distinct !DILexicalBlockFile(scope: !20, file: !19, discriminator: 0)
!19 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!20 = distinct !DILexicalBlockFile(scope: !7, file: !19, discriminator: 0)
!21 = !DILocation(line: 36, column: 70, scope: !7)
!22 = !DILocation(line: 120, column: 21, scope: !18, inlinedAt: !21)
!23 = !DILocation(line: 120, column: 16, scope: !18, inlinedAt: !21)
!24 = !DILocation(line: 121, column: 29, scope: !18, inlinedAt: !21)
!25 = !DILocation(line: 131, column: 29, scope: !20, inlinedAt: !21)
!26 = !DILocation(line: 73, column: 15, scope: !20, inlinedAt: !27)
!27 = !DILocation(line: 36, column: 44, scope: !7)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 38, column: 23, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 40, column: 58, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !33)
!35 = distinct !DILexicalBlockFile(scope: !31, file: !32, discriminator: 0)
!36 = !DILocation(line: 73, column: 15, scope: !20, inlinedAt: !37)
!37 = !DILocation(line: 40, column: 45, scope: !7)
!38 = !DILocation(line: 41, column: 19, scope: !7)
!39 = !DILocation(line: 42, column: 49, scope: !7)
!40 = !DILocation(line: 42, column: 4, scope: !7)
