; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_layer_norm_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 24, !dbg !12
  %13 = shl i32 %11, 2, !dbg !12
  %14 = and i32 %13, 28, !dbg !12
  %15 = lshr i32 %11, 5, !dbg !12
  %16 = lshr i32 %11, 3, !dbg !12
  %17 = and i32 %16, 31, !dbg !12
  %18 = and i32 %11, 31, !dbg !12
  %19 = or disjoint i32 %10, %14, !dbg !13
  %20 = icmp slt i32 %19, 256, !dbg !14
  %.frozen = freeze i32 %19, !dbg !15
  %21 = sdiv i32 %.frozen, 64, !dbg !15
  %22 = mul i32 %21, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %22, !dbg !16
  %23 = shl nuw nsw i32 %17, 6, !dbg !17
  %24 = add nsw i32 %.decomposed, %23, !dbg !18
  %25 = shl i32 %21, 11, !dbg !19
  %26 = add i32 %24, %25, !dbg !20
  %27 = sext i32 %26 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !21
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !22
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !22
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !22
  %34 = bitcast i32 %30 to float, !dbg !22
  %35 = bitcast i32 %31 to float, !dbg !22
  %36 = bitcast i32 %32 to float, !dbg !22
  %37 = bitcast i32 %33 to float, !dbg !22
  %38 = zext nneg i32 %17 to i64, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !25
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #5, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #5, !dbg !26
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #5, !dbg !26
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #5, !dbg !26
  %49 = select i1 %20, float %34, float 0.000000e+00, !dbg !27
  %50 = select i1 %20, float %35, float 0.000000e+00, !dbg !27
  %51 = select i1 %20, float %36, float 0.000000e+00, !dbg !27
  %52 = select i1 %20, float %37, float 0.000000e+00, !dbg !27
  %53 = bitcast float %49 to i32, !dbg !28
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 16, i32 31), !dbg !28
  %55 = bitcast i32 %54 to float, !dbg !28
  %56 = fadd float %49, %55, !dbg !32
  %57 = bitcast float %56 to i32, !dbg !28
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 8, i32 31), !dbg !28
  %59 = bitcast i32 %58 to float, !dbg !28
  %60 = fadd float %56, %59, !dbg !32
  %61 = bitcast float %50 to i32, !dbg !28
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 16, i32 31), !dbg !28
  %63 = bitcast i32 %62 to float, !dbg !28
  %64 = fadd float %50, %63, !dbg !32
  %65 = bitcast float %64 to i32, !dbg !28
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 8, i32 31), !dbg !28
  %67 = bitcast i32 %66 to float, !dbg !28
  %68 = fadd float %64, %67, !dbg !32
  %69 = bitcast float %51 to i32, !dbg !28
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 16, i32 31), !dbg !28
  %71 = bitcast i32 %70 to float, !dbg !28
  %72 = fadd float %51, %71, !dbg !32
  %73 = bitcast float %72 to i32, !dbg !28
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 8, i32 31), !dbg !28
  %75 = bitcast i32 %74 to float, !dbg !28
  %76 = fadd float %72, %75, !dbg !32
  %77 = bitcast float %52 to i32, !dbg !28
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 16, i32 31), !dbg !28
  %79 = bitcast i32 %78 to float, !dbg !28
  %80 = fadd float %52, %79, !dbg !32
  %81 = bitcast float %80 to i32, !dbg !28
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 8, i32 31), !dbg !28
  %83 = bitcast i32 %82 to float, !dbg !28
  %84 = fadd float %80, %83, !dbg !32
  %85 = icmp eq i32 %12, 0, !dbg !28
  %86 = and i32 %15, 7, !dbg !28
  %87 = shl nuw nsw i32 %14, 3, !dbg !28
  %88 = or disjoint i32 %87, %86, !dbg !28
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %88, !dbg !28
  %90 = bitcast float %60 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 %85) #5, !dbg !28
  %91 = or disjoint i32 %87, 8, !dbg !28
  %92 = or disjoint i32 %91, %86, !dbg !28
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i32 %92, !dbg !28
  %94 = bitcast float %68 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 %85) #5, !dbg !28
  %95 = or disjoint i32 %87, 16, !dbg !28
  %96 = or disjoint i32 %95, %86, !dbg !28
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i32 %96, !dbg !28
  %98 = bitcast float %76 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 %85) #5, !dbg !28
  %99 = or disjoint i32 %87, 24, !dbg !28
  %100 = or disjoint i32 %99, %86, !dbg !28
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !28
  %102 = bitcast float %84 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 %85) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %103 = icmp slt i32 %11, 256, !dbg !28
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !28
  %105 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %104, i1 %103) #5, !dbg !28
  %106 = bitcast i32 %105 to float, !dbg !28
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 4, i32 31), !dbg !28
  %108 = bitcast i32 %107 to float, !dbg !28
  %109 = fadd float %106, %108, !dbg !32
  %110 = bitcast float %109 to i32, !dbg !28
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 2, i32 31), !dbg !28
  %112 = bitcast i32 %111 to float, !dbg !28
  %113 = fadd float %109, %112, !dbg !32
  %114 = bitcast float %113 to i32, !dbg !28
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !28
  %116 = bitcast i32 %115 to float, !dbg !28
  %117 = fadd float %113, %116, !dbg !32
  %118 = and i32 %11, 7, !dbg !28
  %119 = icmp eq i32 %118, 0, !dbg !28
  %120 = and i1 %103, %119, !dbg !28
  %121 = bitcast float %117 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %121, i1 %120) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %87, !dbg !28
  %123 = load float, ptr addrspace(3) %122, align 16, !dbg !28
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %91, !dbg !28
  %125 = load float, ptr addrspace(3) %124, align 16, !dbg !28
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %95, !dbg !28
  %127 = load float, ptr addrspace(3) %126, align 16, !dbg !28
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !28
  %129 = load float, ptr addrspace(3) %128, align 16, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !34
  %131 = bitcast float %123 to i32, !dbg !34
  %132 = bitcast float %125 to i32, !dbg !34
  %133 = bitcast float %127 to i32, !dbg !34
  %134 = bitcast float %129 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %130, i32 %131, i32 %132, i32 %133, i32 %134, i1 true) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !34
  %136 = load float, ptr addrspace(3) %135, align 4, !dbg !34
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float 3.200000e+01) #5, !dbg !34
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float 3.200000e+01) #5, !dbg !34
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float 3.200000e+01) #5, !dbg !34
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float 3.200000e+01) #5, !dbg !34
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float 3.200000e+01) #5, !dbg !34
  %142 = fsub float %34, %138, !dbg !35
  %143 = fsub float %35, %139, !dbg !35
  %144 = fsub float %36, %140, !dbg !35
  %145 = fsub float %37, %141, !dbg !35
  %146 = fmul float %142, %142, !dbg !36
  %147 = fmul float %143, %143, !dbg !36
  %148 = fmul float %144, %144, !dbg !36
  %149 = fmul float %145, %145, !dbg !36
  %150 = select i1 %20, float %146, float 0.000000e+00, !dbg !37
  %151 = select i1 %20, float %147, float 0.000000e+00, !dbg !37
  %152 = select i1 %20, float %148, float 0.000000e+00, !dbg !37
  %153 = select i1 %20, float %149, float 0.000000e+00, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %154 = bitcast float %150 to i32, !dbg !38
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 16, i32 31), !dbg !38
  %156 = bitcast i32 %155 to float, !dbg !38
  %157 = fadd float %150, %156, !dbg !40
  %158 = bitcast float %157 to i32, !dbg !38
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 8, i32 31), !dbg !38
  %160 = bitcast i32 %159 to float, !dbg !38
  %161 = fadd float %157, %160, !dbg !40
  %162 = bitcast float %151 to i32, !dbg !38
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 16, i32 31), !dbg !38
  %164 = bitcast i32 %163 to float, !dbg !38
  %165 = fadd float %151, %164, !dbg !40
  %166 = bitcast float %165 to i32, !dbg !38
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 8, i32 31), !dbg !38
  %168 = bitcast i32 %167 to float, !dbg !38
  %169 = fadd float %165, %168, !dbg !40
  %170 = bitcast float %152 to i32, !dbg !38
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 16, i32 31), !dbg !38
  %172 = bitcast i32 %171 to float, !dbg !38
  %173 = fadd float %152, %172, !dbg !40
  %174 = bitcast float %173 to i32, !dbg !38
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 8, i32 31), !dbg !38
  %176 = bitcast i32 %175 to float, !dbg !38
  %177 = fadd float %173, %176, !dbg !40
  %178 = bitcast float %153 to i32, !dbg !38
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 16, i32 31), !dbg !38
  %180 = bitcast i32 %179 to float, !dbg !38
  %181 = fadd float %153, %180, !dbg !40
  %182 = bitcast float %181 to i32, !dbg !38
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 8, i32 31), !dbg !38
  %184 = bitcast i32 %183 to float, !dbg !38
  %185 = fadd float %181, %184, !dbg !40
  %186 = bitcast float %161 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %186, i1 %85) #5, !dbg !38
  %187 = bitcast float %169 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %187, i1 %85) #5, !dbg !38
  %188 = bitcast float %177 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %188, i1 %85) #5, !dbg !38
  %189 = bitcast float %185 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %189, i1 %85) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %190 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %104, i1 %103) #5, !dbg !38
  %191 = bitcast i32 %190 to float, !dbg !38
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 4, i32 31), !dbg !38
  %193 = bitcast i32 %192 to float, !dbg !38
  %194 = fadd float %191, %193, !dbg !40
  %195 = bitcast float %194 to i32, !dbg !38
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 2, i32 31), !dbg !38
  %197 = bitcast i32 %196 to float, !dbg !38
  %198 = fadd float %194, %197, !dbg !40
  %199 = bitcast float %198 to i32, !dbg !38
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 1, i32 31), !dbg !38
  %201 = bitcast i32 %200 to float, !dbg !38
  %202 = fadd float %198, %201, !dbg !40
  %203 = bitcast float %202 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %203, i1 %120) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %204 = load float, ptr addrspace(3) %122, align 16, !dbg !38
  %205 = load float, ptr addrspace(3) %124, align 16, !dbg !38
  %206 = load float, ptr addrspace(3) %126, align 16, !dbg !38
  %207 = load float, ptr addrspace(3) %128, align 16, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %208 = bitcast float %204 to i32, !dbg !41
  %209 = bitcast float %205 to i32, !dbg !41
  %210 = bitcast float %206 to i32, !dbg !41
  %211 = bitcast float %207 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %130, i32 %208, i32 %209, i32 %210, i32 %211, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %212 = load float, ptr addrspace(3) %135, align 4, !dbg !41
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %212, float 3.200000e+01) #5, !dbg !42
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %204, float 3.200000e+01) #5, !dbg !42
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %205, float 3.200000e+01) #5, !dbg !42
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float 3.200000e+01) #5, !dbg !42
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %207, float 3.200000e+01) #5, !dbg !42
  %218 = fadd float %213, 0x3EE4F8B580000000, !dbg !43
  %219 = fadd float %214, 0x3EE4F8B580000000, !dbg !43
  %220 = fadd float %215, 0x3EE4F8B580000000, !dbg !43
  %221 = fadd float %216, 0x3EE4F8B580000000, !dbg !43
  %222 = fadd float %217, 0x3EE4F8B580000000, !dbg !43
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %223, 0, !dbg !41
  br i1 %.not.i, label %226, label %224, !dbg !41

224:                                              ; preds = %8
  %225 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %218), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

226:                                              ; preds = %8
  %227 = tail call float @llvm.nvvm.rsqrt.approx.f(float %218), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %224, %226
  %.0.i = phi float [ %225, %224 ], [ %227, %226 ], !dbg !41
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i8 = icmp eq i32 %228, 0, !dbg !41
  br i1 %.not.i8, label %231, label %229, !dbg !41

229:                                              ; preds = %__nv_rsqrtf.exit
  %230 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %219), !dbg !41
  br label %__nv_rsqrtf.exit10, !dbg !41

231:                                              ; preds = %__nv_rsqrtf.exit
  %232 = tail call float @llvm.nvvm.rsqrt.approx.f(float %219), !dbg !41
  br label %__nv_rsqrtf.exit10, !dbg !41

__nv_rsqrtf.exit10:                               ; preds = %229, %231
  %.0.i9 = phi float [ %230, %229 ], [ %232, %231 ], !dbg !41
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i11 = icmp eq i32 %233, 0, !dbg !41
  br i1 %.not.i11, label %236, label %234, !dbg !41

234:                                              ; preds = %__nv_rsqrtf.exit10
  %235 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %220), !dbg !41
  br label %__nv_rsqrtf.exit13, !dbg !41

236:                                              ; preds = %__nv_rsqrtf.exit10
  %237 = tail call float @llvm.nvvm.rsqrt.approx.f(float %220), !dbg !41
  br label %__nv_rsqrtf.exit13, !dbg !41

__nv_rsqrtf.exit13:                               ; preds = %234, %236
  %.0.i12 = phi float [ %235, %234 ], [ %237, %236 ], !dbg !41
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i14 = icmp eq i32 %238, 0, !dbg !41
  br i1 %.not.i14, label %241, label %239, !dbg !41

239:                                              ; preds = %__nv_rsqrtf.exit13
  %240 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %221), !dbg !41
  br label %__nv_rsqrtf.exit16, !dbg !41

241:                                              ; preds = %__nv_rsqrtf.exit13
  %242 = tail call float @llvm.nvvm.rsqrt.approx.f(float %221), !dbg !41
  br label %__nv_rsqrtf.exit16, !dbg !41

__nv_rsqrtf.exit16:                               ; preds = %239, %241
  %.0.i15 = phi float [ %240, %239 ], [ %242, %241 ], !dbg !41
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i17 = icmp eq i32 %243, 0, !dbg !41
  br i1 %.not.i17, label %246, label %244, !dbg !41

244:                                              ; preds = %__nv_rsqrtf.exit16
  %245 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %222), !dbg !41
  br label %__nv_rsqrtf.exit19, !dbg !41

246:                                              ; preds = %__nv_rsqrtf.exit16
  %247 = tail call float @llvm.nvvm.rsqrt.approx.f(float %222), !dbg !41
  br label %__nv_rsqrtf.exit19, !dbg !41

__nv_rsqrtf.exit19:                               ; preds = %244, %246
  %.0.i18 = phi float [ %245, %244 ], [ %247, %246 ], !dbg !41
  %248 = bitcast i32 %48 to float, !dbg !26
  %249 = bitcast i32 %43 to float, !dbg !24
  %250 = or disjoint i32 %10, %17, !dbg !13
  %251 = icmp slt i32 %250, 256, !dbg !14
  %252 = or disjoint i32 %10, %18, !dbg !13
  %253 = icmp slt i32 %252, 256, !dbg !14
  %254 = fmul float %142, %.0.i9, !dbg !44
  %255 = fmul float %143, %.0.i12, !dbg !44
  %256 = fmul float %144, %.0.i15, !dbg !44
  %257 = fmul float %145, %.0.i18, !dbg !44
  %258 = fmul float %254, %249, !dbg !45
  %259 = fmul float %255, %249, !dbg !45
  %260 = fmul float %256, %249, !dbg !45
  %261 = fmul float %257, %249, !dbg !45
  %262 = fadd float %258, %248, !dbg !46
  %263 = fadd float %259, %248, !dbg !46
  %264 = fadd float %260, %248, !dbg !46
  %265 = fadd float %261, %248, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %266 = sext i32 %252 to i64, !dbg !48
  %267 = getelementptr float, ptr addrspace(1) %0, i64 %266, !dbg !48
  %268 = icmp eq i32 %86, 0, !dbg !49
  %269 = bitcast float %.0.i to i32, !dbg !49
  %270 = and i1 %268, %253, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %269, ptr addrspace(1) %267, i1 %270) #5, !dbg !49
  %271 = shl i32 %250, 5, !dbg !50
  %272 = or disjoint i32 %271, %14, !dbg !51
  %273 = sext i32 %272 to i64, !dbg !52
  %274 = getelementptr float, ptr addrspace(1) %5, i64 %273, !dbg !52
  %275 = shl i32 %11, 7, !dbg !53
  %276 = and i32 %275, 896, !dbg !53
  %277 = or disjoint i32 %276, %17, !dbg !53
  %278 = and i32 %13, 1020, !dbg !53
  %279 = lshr exact i32 %276, 1, !dbg !53
  %280 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %279, !dbg !53
  %281 = getelementptr float, ptr addrspace(3) %280, i32 %277, !dbg !53
  %282 = bitcast float %262 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #5, !dbg !53
  %283 = or disjoint i32 %277, 32, !dbg !53
  %284 = lshr i32 %283, 3, !dbg !53
  %285 = and i32 %284, 116, !dbg !53
  %286 = getelementptr float, ptr addrspace(3) @global_smem, i32 %285, !dbg !53
  %287 = getelementptr float, ptr addrspace(3) %286, i32 %283, !dbg !53
  %288 = bitcast float %263 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %288, i1 true) #5, !dbg !53
  %289 = or disjoint i32 %277, 64, !dbg !53
  %290 = lshr i32 %289, 3, !dbg !53
  %291 = and i32 %290, 120, !dbg !53
  %292 = getelementptr float, ptr addrspace(3) @global_smem, i32 %291, !dbg !53
  %293 = getelementptr float, ptr addrspace(3) %292, i32 %289, !dbg !53
  %294 = bitcast float %264 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %294, i1 true) #5, !dbg !53
  %295 = or disjoint i32 %277, 96, !dbg !53
  %296 = lshr i32 %295, 3, !dbg !53
  %297 = and i32 %296, 124, !dbg !53
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i32 %297, !dbg !53
  %299 = getelementptr float, ptr addrspace(3) %298, i32 %295, !dbg !53
  %300 = bitcast float %265 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %300, i1 true) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %301 = lshr i32 %13, 3, !dbg !53
  %302 = and i32 %301, 124, !dbg !53
  %303 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %302, !dbg !53
  %304 = getelementptr inbounds float, ptr addrspace(3) %303, i32 %278, !dbg !53
  %.extract = load i32, ptr addrspace(3) %304, align 16, !dbg !53
  %305 = getelementptr inbounds i8, ptr addrspace(3) %304, i32 4, !dbg !53
  %.extract5 = load i32, ptr addrspace(3) %305, align 4, !dbg !53
  %306 = getelementptr inbounds i8, ptr addrspace(3) %304, i32 8, !dbg !53
  %.extract6 = load i32, ptr addrspace(3) %306, align 8, !dbg !53
  %307 = getelementptr inbounds i8, ptr addrspace(3) %304, i32 12, !dbg !53
  %.extract7 = load i32, ptr addrspace(3) %307, align 4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract5, i32 %.extract6, i32 %.extract7, ptr addrspace(1) %274, i1 %251) #5, !dbg !53
  %308 = getelementptr float, ptr addrspace(1) %4, i64 %266, !dbg !54
  %309 = bitcast float %137 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %309, ptr addrspace(1) %308, i1 %270) #5, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvsc36iptsv2cfg5djtaknliti74ddda4nwuwx446wlek6af2hpp.py", directory: "inductor_cache/vs")
!4 = !{ptr @triton_per_fused_native_layer_norm_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_layer_norm_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_layer_norm_2", linkageName: "triton_per_fused_native_layer_norm_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 38, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 48, scope: !7)
!20 = !DILocation(line: 33, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 53, scope: !7)
!23 = !DILocation(line: 34, column: 31, scope: !7)
!24 = !DILocation(line: 34, column: 36, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 39, column: 33, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = !DILocation(line: 40, column: 24, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !31)
!33 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!34 = !DILocation(line: 43, column: 19, scope: !7)
!35 = !DILocation(line: 44, column: 19, scope: !7)
!36 = !DILocation(line: 45, column: 20, scope: !7)
!37 = !DILocation(line: 47, column: 35, scope: !7)
!38 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !39)
!39 = !DILocation(line: 48, column: 26, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !39)
!41 = !DILocation(line: 53, column: 28, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 55, column: 20, scope: !7)
!45 = !DILocation(line: 56, column: 20, scope: !7)
!46 = !DILocation(line: 57, column: 20, scope: !7)
!47 = !DILocation(line: 58, column: 4, scope: !7)
!48 = !DILocation(line: 59, column: 28, scope: !7)
!49 = !DILocation(line: 59, column: 40, scope: !7)
!50 = !DILocation(line: 60, column: 33, scope: !7)
!51 = !DILocation(line: 60, column: 30, scope: !7)
!52 = !DILocation(line: 60, column: 25, scope: !7)
!53 = !DILocation(line: 60, column: 45, scope: !7)
!54 = !DILocation(line: 61, column: 25, scope: !7)
!55 = !DILocation(line: 61, column: 37, scope: !7)
!56 = !DILocation(line: 61, column: 4, scope: !7)
