; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_abs_add_div_log_lt_mul_sub_sum_where_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 6, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 16, !dbg !14
  %13 = and i32 %8, 60, !dbg !15
  %.frozen = freeze i32 %11, !dbg !16
  %14 = sdiv i32 %.frozen, 4, !dbg !16
  %15 = mul i32 %14, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %15, !dbg !17
  %16 = add nsw i32 %.decomposed, %13, !dbg !18
  %17 = shl i32 %14, 6, !dbg !19
  %18 = add i32 %16, %17, !dbg !20
  %19 = sext i32 %18 to i64, !dbg !21
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !21
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %20, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #4, !dbg !22
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !22
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !22
  %24 = bitcast i32 %22 to float, !dbg !22
  %25 = bitcast i32 %23 to float, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !23
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #4, !dbg !24
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !24
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !24
  %30 = bitcast i32 %28 to float, !dbg !24
  %31 = bitcast i32 %29 to float, !dbg !24
  %32 = fsub float %24, %30, !dbg !25
  %33 = fsub float %25, %31, !dbg !25
  %34 = tail call float @llvm.fabs.f32(float %32), !dbg !26
  %35 = tail call float @llvm.fabs.f32(float %33), !dbg !26
  %36 = fmul float %34, 2.000000e+00, !dbg !27
  %37 = fmul float %35, 2.000000e+00, !dbg !27
  %38 = fadd float %36, 1.000000e+00, !dbg !28
  %39 = fadd float %37, 1.000000e+00, !dbg !28
  %40 = fcmp olt float %38, 0x3810000000000000, !dbg !29
  %41 = fmul float %38, 0x4160000000000000, !dbg !29
  %.02.i = select i1 %40, float %41, float %38, !dbg !29
  %i.i.0.i = select i1 %40, float -2.300000e+01, float 0.000000e+00, !dbg !29
  %42 = bitcast float %.02.i to i32, !dbg !29
  %43 = add i32 %42, -1059760811, !dbg !29
  %44 = and i32 %43, -8388608, !dbg !29
  %45 = sub i32 %42, %44, !dbg !29
  %46 = bitcast i32 %45 to float, !dbg !29
  %47 = sitofp i32 %44 to float, !dbg !29
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i = icmp eq i32 %48, 0, !dbg !29
  %49 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %47, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !29
  %50 = tail call float @llvm.nvvm.fma.rn.f(float %47, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !29
  %.08.i = select i1 %.not.i, float %50, float %49, !dbg !29
  %51 = fadd float %46, -1.000000e+00, !dbg !29
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not1.i = icmp eq i32 %52, 0, !dbg !29
  %53 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %51, float 0x3FC2073EC0000000) #4, !dbg !29
  %54 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %51, float 0x3FC2073EC0000000) #4, !dbg !29
  %.010.i = select i1 %.not1.i, float %54, float %53, !dbg !29
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not2.i = icmp eq i32 %55, 0, !dbg !29
  %56 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %51, float 0xBFBF19B980000000) #4, !dbg !29
  %57 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %51, float 0xBFBF19B980000000) #4, !dbg !29
  %.011.i = select i1 %.not2.i, float %57, float %56, !dbg !29
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not3.i = icmp eq i32 %58, 0, !dbg !29
  %59 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %51, float 0x3FC1E52AA0000000) #4, !dbg !29
  %60 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %51, float 0x3FC1E52AA0000000) #4, !dbg !29
  %.012.i = select i1 %.not3.i, float %60, float %59, !dbg !29
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not4.i = icmp eq i32 %61, 0, !dbg !29
  %62 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %51, float 0xBFC55B1720000000) #4, !dbg !29
  %63 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %51, float 0xBFC55B1720000000) #4, !dbg !29
  %.09.i = select i1 %.not4.i, float %63, float %62, !dbg !29
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not5.i = icmp eq i32 %64, 0, !dbg !29
  %65 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %51, float 0x3FC99DA160000000) #4, !dbg !29
  %66 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %51, float 0x3FC99DA160000000) #4, !dbg !29
  %.05.i = select i1 %.not5.i, float %66, float %65, !dbg !29
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not6.i = icmp eq i32 %67, 0, !dbg !29
  %68 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %51, float 0xBFCFFFE440000000) #4, !dbg !29
  %69 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %51, float 0xBFCFFFE440000000) #4, !dbg !29
  %.01.i = select i1 %.not6.i, float %69, float %68, !dbg !29
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not7.i = icmp eq i32 %70, 0, !dbg !29
  %71 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %51, float 0x3FD5554F00000000) #4, !dbg !29
  %72 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %51, float 0x3FD5554F00000000) #4, !dbg !29
  %.0.i = select i1 %.not7.i, float %72, float %71, !dbg !29
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not8.i = icmp eq i32 %73, 0, !dbg !29
  %74 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %51, float -5.000000e-01) #4, !dbg !29
  %75 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %51, float -5.000000e-01) #4, !dbg !29
  %.07.i = select i1 %.not8.i, float %75, float %74, !dbg !29
  %76 = fmul float %51, %.07.i, !dbg !29
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not9.i = icmp eq i32 %77, 0, !dbg !29
  %78 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %76, float %51, float %51) #4, !dbg !29
  %79 = tail call float @llvm.nvvm.fma.rn.f(float %76, float %51, float %51) #4, !dbg !29
  %.06.i = select i1 %.not9.i, float %79, float %78, !dbg !29
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not10.i = icmp eq i32 %80, 0, !dbg !29
  %81 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !29
  %82 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !29
  %.04.i = select i1 %.not10.i, float %82, float %81, !dbg !29
  %83 = icmp ugt i32 %42, 2139095039, !dbg !29
  br i1 %83, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !29

__nv_fmaf_rn.exit.i.i:                            ; preds = %5
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not11.i = icmp eq i32 %84, 0, !dbg !29
  %85 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !29
  %86 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !29
  %.03.i = select i1 %.not11.i, float %86, float %85, !dbg !29
  br label %__nv_logf.exit, !dbg !29

__nv_logf.exit:                                   ; preds = %5, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %5 ], !dbg !29
  %87 = fcmp olt float %39, 0x3810000000000000, !dbg !29
  %88 = fmul float %39, 0x4160000000000000, !dbg !29
  %.02.i1 = select i1 %87, float %88, float %39, !dbg !29
  %i.i.0.i2 = select i1 %87, float -2.300000e+01, float 0.000000e+00, !dbg !29
  %89 = bitcast float %.02.i1 to i32, !dbg !29
  %90 = add i32 %89, -1059760811, !dbg !29
  %91 = and i32 %90, -8388608, !dbg !29
  %92 = sub i32 %89, %91, !dbg !29
  %93 = bitcast i32 %92 to float, !dbg !29
  %94 = sitofp i32 %91 to float, !dbg !29
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i3 = icmp eq i32 %95, 0, !dbg !29
  %96 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %94, float 0x3E80000000000000, float %i.i.0.i2) #4, !dbg !29
  %97 = tail call float @llvm.nvvm.fma.rn.f(float %94, float 0x3E80000000000000, float %i.i.0.i2) #4, !dbg !29
  %.08.i4 = select i1 %.not.i3, float %97, float %96, !dbg !29
  %98 = fadd float %93, -1.000000e+00, !dbg !29
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not1.i5 = icmp eq i32 %99, 0, !dbg !29
  %100 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %98, float 0x3FC2073EC0000000) #4, !dbg !29
  %101 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %98, float 0x3FC2073EC0000000) #4, !dbg !29
  %.010.i6 = select i1 %.not1.i5, float %101, float %100, !dbg !29
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not2.i7 = icmp eq i32 %102, 0, !dbg !29
  %103 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i6, float %98, float 0xBFBF19B980000000) #4, !dbg !29
  %104 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i6, float %98, float 0xBFBF19B980000000) #4, !dbg !29
  %.011.i8 = select i1 %.not2.i7, float %104, float %103, !dbg !29
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not3.i9 = icmp eq i32 %105, 0, !dbg !29
  %106 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i8, float %98, float 0x3FC1E52AA0000000) #4, !dbg !29
  %107 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i8, float %98, float 0x3FC1E52AA0000000) #4, !dbg !29
  %.012.i10 = select i1 %.not3.i9, float %107, float %106, !dbg !29
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not4.i11 = icmp eq i32 %108, 0, !dbg !29
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i10, float %98, float 0xBFC55B1720000000) #4, !dbg !29
  %110 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i10, float %98, float 0xBFC55B1720000000) #4, !dbg !29
  %.09.i12 = select i1 %.not4.i11, float %110, float %109, !dbg !29
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not5.i13 = icmp eq i32 %111, 0, !dbg !29
  %112 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i12, float %98, float 0x3FC99DA160000000) #4, !dbg !29
  %113 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i12, float %98, float 0x3FC99DA160000000) #4, !dbg !29
  %.05.i14 = select i1 %.not5.i13, float %113, float %112, !dbg !29
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not6.i15 = icmp eq i32 %114, 0, !dbg !29
  %115 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i14, float %98, float 0xBFCFFFE440000000) #4, !dbg !29
  %116 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i14, float %98, float 0xBFCFFFE440000000) #4, !dbg !29
  %.01.i16 = select i1 %.not6.i15, float %116, float %115, !dbg !29
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not7.i17 = icmp eq i32 %117, 0, !dbg !29
  %118 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i16, float %98, float 0x3FD5554F00000000) #4, !dbg !29
  %119 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i16, float %98, float 0x3FD5554F00000000) #4, !dbg !29
  %.0.i18 = select i1 %.not7.i17, float %119, float %118, !dbg !29
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not8.i19 = icmp eq i32 %120, 0, !dbg !29
  %121 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i18, float %98, float -5.000000e-01) #4, !dbg !29
  %122 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i18, float %98, float -5.000000e-01) #4, !dbg !29
  %.07.i20 = select i1 %.not8.i19, float %122, float %121, !dbg !29
  %123 = fmul float %98, %.07.i20, !dbg !29
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not9.i21 = icmp eq i32 %124, 0, !dbg !29
  %125 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %123, float %98, float %98) #4, !dbg !29
  %126 = tail call float @llvm.nvvm.fma.rn.f(float %123, float %98, float %98) #4, !dbg !29
  %.06.i22 = select i1 %.not9.i21, float %126, float %125, !dbg !29
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not10.i23 = icmp eq i32 %127, 0, !dbg !29
  %128 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i4, float 0x3FE62E4300000000, float %.06.i22) #4, !dbg !29
  %129 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i4, float 0x3FE62E4300000000, float %.06.i22) #4, !dbg !29
  %.04.i24 = select i1 %.not10.i23, float %129, float %128, !dbg !29
  %130 = icmp ugt i32 %89, 2139095039, !dbg !29
  br i1 %130, label %__nv_fmaf_rn.exit.i.i27, label %__nv_logf.exit30, !dbg !29

__nv_fmaf_rn.exit.i.i27:                          ; preds = %__nv_logf.exit
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not11.i28 = icmp eq i32 %131, 0, !dbg !29
  %132 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i1, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !29
  %133 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i1, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !29
  %.03.i29 = select i1 %.not11.i28, float %133, float %132, !dbg !29
  br label %__nv_logf.exit30, !dbg !29

__nv_logf.exit30:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i27
  %r.i.0.i25 = phi float [ %.03.i29, %__nv_fmaf_rn.exit.i.i27 ], [ %.04.i24, %__nv_logf.exit ], !dbg !29
  %134 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !29
  %135 = fcmp olt float %35, 2.000000e+00, !dbg !30
  %136 = fcmp olt float %34, 2.000000e+00, !dbg !30
  %137 = lshr i32 %8, 5, !dbg !15
  %138 = and i32 %8, 7, !dbg !12
  %139 = or disjoint i32 %7, %138, !dbg !13
  %140 = icmp slt i32 %139, 16, !dbg !14
  %141 = and i32 %8, 31, !dbg !12
  %142 = fcmp oeq float %.02.i1, 0.000000e+00, !dbg !29
  %143 = fmul float %r.i.0.i, 2.000000e+01, !dbg !31
  %144 = fmul float %r.i.0.i25, 2.000000e+01, !dbg !31
  %145 = fadd float %143, 0xC03E305280000000, !dbg !32
  %146 = select i1 %134, float 0xFFF0000000000000, float %145, !dbg !29
  %147 = fadd float %144, 0xC03E305280000000, !dbg !32
  %148 = select i1 %142, float 0xFFF0000000000000, float %147, !dbg !29
  %149 = select i1 %136, float %34, float %146, !dbg !33
  %150 = select i1 %135, float %35, float %148, !dbg !33
  %151 = select i1 %12, float %149, float 0.000000e+00, !dbg !34
  %152 = select i1 %12, float %150, float 0.000000e+00, !dbg !34
  %153 = bitcast float %151 to i32, !dbg !35
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 16, i32 31), !dbg !35
  %155 = bitcast i32 %154 to float, !dbg !35
  %156 = fadd float %151, %155, !dbg !39
  %157 = bitcast float %156 to i32, !dbg !35
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 8, i32 31), !dbg !35
  %159 = bitcast i32 %158 to float, !dbg !35
  %160 = fadd float %156, %159, !dbg !39
  %161 = bitcast float %160 to i32, !dbg !35
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 4, i32 31), !dbg !35
  %163 = bitcast i32 %162 to float, !dbg !35
  %164 = fadd float %160, %163, !dbg !39
  %165 = bitcast float %152 to i32, !dbg !35
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 16, i32 31), !dbg !35
  %167 = bitcast i32 %166 to float, !dbg !35
  %168 = fadd float %152, %167, !dbg !39
  %169 = bitcast float %168 to i32, !dbg !35
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 8, i32 31), !dbg !35
  %171 = bitcast i32 %170 to float, !dbg !35
  %172 = fadd float %168, %171, !dbg !39
  %173 = bitcast float %172 to i32, !dbg !35
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 4, i32 31), !dbg !35
  %175 = bitcast i32 %174 to float, !dbg !35
  %176 = fadd float %172, %175, !dbg !39
  %177 = icmp samesign ult i32 %141, 4, !dbg !35
  %178 = and i32 %137, 1, !dbg !35
  %179 = shl nuw nsw i32 %10, 1, !dbg !35
  %180 = or disjoint i32 %179, %178, !dbg !35
  %181 = getelementptr float, ptr addrspace(3) @global_smem, i32 %180, !dbg !35
  %182 = bitcast float %164 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 %177) #4, !dbg !35
  %183 = or disjoint i32 %179, 2, !dbg !35
  %184 = or disjoint i32 %183, %178, !dbg !35
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %184, !dbg !35
  %186 = bitcast float %176 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 %177) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %187 = icmp slt i32 %8, 16, !dbg !35
  %188 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !35
  %189 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %188, i1 %187) #4, !dbg !35
  %190 = bitcast i32 %189 to float, !dbg !35
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 1, i32 31), !dbg !35
  %192 = bitcast i32 %191 to float, !dbg !35
  %193 = fadd float %190, %192, !dbg !39
  %194 = and i32 %8, 1, !dbg !35
  %195 = icmp eq i32 %194, 0, !dbg !35
  %196 = and i1 %187, %195, !dbg !35
  %197 = bitcast float %193 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %197, i1 %196) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i32 %179, !dbg !35
  %199 = load i32, ptr addrspace(3) %198, align 16, !dbg !35
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i32 %183, !dbg !35
  %201 = load i32, ptr addrspace(3) %200, align 8, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %202 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !41
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %202, i32 %199, i32 %201, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %203 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %138, !dbg !41
  %204 = load i32, ptr addrspace(3) %203, align 4, !dbg !41
  %205 = sext i32 %139 to i64, !dbg !42
  %206 = getelementptr float, ptr addrspace(1) %2, i64 %205, !dbg !42
  %207 = lshr i32 %141, 3, !dbg !43
  %208 = shl nuw nsw i32 %178, 2, !dbg !43
  %209 = or disjoint i32 %208, %207, !dbg !43
  %210 = icmp eq i32 %209, 0, !dbg !43
  %211 = and i1 %210, %140, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %204, ptr addrspace(1) %206, i1 %211) #4, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c54ynhviqydbvwazjatdbntkjd2gky6r2inzemlybbz5scd534he.py", directory: "inductor_cache/54")
!4 = !{ptr @triton_per_fused_abs_add_div_log_lt_mul_sub_sum_where_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_add_div_log_lt_mul_sub_sum_where_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_add_div_log_lt_mul_sub_sum_where_0", linkageName: "triton_per_fused_abs_add_div_log_lt_mul_sub_sum_where_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 42, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 50, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 50, scope: !7)
!25 = !DILocation(line: 35, column: 18, scope: !7)
!26 = !DILocation(line: 36, column: 23, scope: !7)
!27 = !DILocation(line: 39, column: 18, scope: !7)
!28 = !DILocation(line: 41, column: 18, scope: !7)
!29 = !DILocation(line: 42, column: 23, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 44, column: 19, scope: !7)
!32 = !DILocation(line: 46, column: 20, scope: !7)
!33 = !DILocation(line: 47, column: 33, scope: !7)
!34 = !DILocation(line: 49, column: 35, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!38 = !DILocation(line: 50, column: 26, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !38)
!40 = distinct !DILexicalBlockFile(scope: !36, file: !37, discriminator: 0)
!41 = !DILocation(line: 50, column: 29, scope: !7)
!42 = !DILocation(line: 51, column: 25, scope: !7)
!43 = !DILocation(line: 51, column: 37, scope: !7)
!44 = !DILocation(line: 51, column: 4, scope: !7)
