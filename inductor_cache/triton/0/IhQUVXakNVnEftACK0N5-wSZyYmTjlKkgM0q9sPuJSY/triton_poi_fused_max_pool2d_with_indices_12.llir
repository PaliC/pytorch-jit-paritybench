; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 1, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = lshr i32 %8, 2, !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = or disjoint i32 %14, 32, !dbg !13
  %16 = icmp slt i32 %13, 36, !dbg !14
  %17 = icmp slt i32 %14, 36, !dbg !14
  %18 = icmp slt i32 %15, 36, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 2, !dbg !16
  %21 = shl i32 %8, 1, !dbg !17
  %22 = and i32 %21, 2, !dbg !17
  %23 = and i32 %8, 3, !dbg !17
  %24 = or disjoint i32 %20, %22, !dbg !18
  %25 = or disjoint i32 %20, %23, !dbg !18
  %26 = icmp slt i32 %24, 128, !dbg !19
  %27 = icmp slt i32 %25, 128, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %28 = sdiv i32 %.frozen, 3, !dbg !20
  %29 = mul i32 %28, 3, !dbg !21
  %.decomposed = sub i32 %.frozen, %29, !dbg !21
  %.frozen5 = freeze i32 %14, !dbg !22
  %30 = sdiv i32 %.frozen5, 9, !dbg !22
  %.frozen7 = freeze i32 %15, !dbg !22
  %31 = sdiv i32 %.frozen7, 9, !dbg !22
  %32 = mul i32 %30, 9, !dbg !23
  %.decomposed6 = sub i32 %.frozen5, %32, !dbg !23
  %33 = mul i32 %31, 9, !dbg !23
  %.decomposed8 = sub i32 %.frozen7, %33, !dbg !23
  %34 = shl nsw i32 %.decomposed, 8, !dbg !24
  %35 = add i32 %34, %24, !dbg !25
  %36 = mul i32 %28, 1536, !dbg !26
  %37 = add i32 %35, %36, !dbg !27
  %38 = sext i32 %37 to i64, !dbg !28
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !28
  %40 = and i1 %16, %26, !dbg !29
  %41 = and i1 %17, %27, !dbg !29
  %42 = and i1 %18, %27, !dbg !29
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 %40) #2, !dbg !30
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !30
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !30
  %46 = add i32 %35, 128, !dbg !31
  %47 = add i32 %46, %36, !dbg !32
  %48 = sext i32 %47 to i64, !dbg !33
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !33
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %40) #2, !dbg !34
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !34
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !34
  %53 = add i32 %35, 768, !dbg !35
  %54 = add i32 %53, %36, !dbg !36
  %55 = sext i32 %54 to i64, !dbg !37
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !37
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %40) #2, !dbg !38
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !38
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !38
  %60 = add i32 %35, 896, !dbg !39
  %61 = add i32 %60, %36, !dbg !40
  %62 = sext i32 %61 to i64, !dbg !41
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !41
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %63, i1 %40) #2, !dbg !42
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !42
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !42
  %67 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !30
  %68 = insertelement <2 x i32> %67, i32 %45, i64 1, !dbg !30
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !30
  %70 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !34
  %71 = insertelement <2 x i32> %70, i32 %52, i64 1, !dbg !34
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !34
  %73 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !38
  %74 = insertelement <2 x i32> %73, i32 %59, i64 1, !dbg !38
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !38
  %76 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !42
  %77 = insertelement <2 x i32> %76, i32 %66, i64 1, !dbg !42
  %78 = bitcast <2 x i32> %77 to <2 x float>, !dbg !42
  %79 = fcmp ogt <2 x float> %72, %69, !dbg !43
  %80 = zext <2 x i1> %79 to <2 x i8>, !dbg !44
  %81 = fcmp uno <2 x float> %72, zeroinitializer, !dbg !45
  %82 = or <2 x i1> %79, %81, !dbg !49
  %.v = select <2 x i1> %82, <2 x i32> %71, <2 x i32> %68, !dbg !50
  %83 = bitcast <2 x i32> %.v to <2 x float>, !dbg !50
  %84 = fcmp olt <2 x float> %83, %75, !dbg !51
  %85 = select <2 x i1> %84, <2 x i8> splat (i8 2), <2 x i8> %80, !dbg !52
  %86 = fcmp uno <2 x float> %75, zeroinitializer, !dbg !53
  %87 = or <2 x i1> %86, %84, !dbg !55
  %.v4 = select <2 x i1> %87, <2 x i32> %74, <2 x i32> %.v, !dbg !56
  %88 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !56
  %89 = fcmp olt <2 x float> %88, %78, !dbg !57
  %90 = select <2 x i1> %89, <2 x i8> splat (i8 3), <2 x i8> %85, !dbg !58
  %91 = bitcast i32 %65 to float, !dbg !59
  %92 = fcmp uno float %91, 0.000000e+00, !dbg !59
  %93 = bitcast i32 %66 to float, !dbg !59
  %94 = fcmp uno float %93, 0.000000e+00, !dbg !59
  %95 = extractelement <2 x i1> %89, i64 0, !dbg !61
  %96 = or i1 %92, %95, !dbg !61
  %97 = extractelement <2 x i1> %89, i64 1, !dbg !61
  %98 = or i1 %94, %97, !dbg !61
  %99 = shl i32 %13, 7, !dbg !62
  %100 = add i32 %24, %99, !dbg !63
  %101 = sext i32 %100 to i64, !dbg !64
  %102 = getelementptr i8, ptr addrspace(1) %1, i64 %101, !dbg !64
  %103 = bitcast <2 x i8> %90 to i16, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %103, ptr addrspace(1) %102, i1 %40) #2, !dbg !65
  %104 = mul i32 %25, 9, !dbg !66
  %105 = add i32 %104, %.decomposed6, !dbg !67
  %106 = mul i32 %30, 1152, !dbg !68
  %107 = mul i32 %31, 1152, !dbg !68
  %108 = add i32 %105, %106, !dbg !69
  %109 = add i32 %107, %.decomposed8, !dbg !67
  %110 = add i32 %109, %104, !dbg !69
  %111 = sext i32 %108 to i64, !dbg !70
  %112 = getelementptr float, ptr addrspace(1) %2, i64 %111, !dbg !70
  %113 = sext i32 %110 to i64, !dbg !70
  %114 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !70
  %115 = and i32 %21, 252, !dbg !71
  %116 = and i32 %21, 254, !dbg !71
  %117 = and i32 %8, 127, !dbg !71
  %118 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %115, !dbg !71
  %119 = getelementptr inbounds float, ptr addrspace(3) %118, i32 %116, !dbg !71
  %120 = extractelement <2 x i32> %.v4, i64 0, !dbg !71
  %121 = select i1 %96, i32 %65, i32 %120, !dbg !72
  %122 = insertelement <1 x i32> poison, i32 %121, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %122, i1 true) #2, !dbg !71
  %123 = or disjoint i32 %116, 1, !dbg !71
  %124 = getelementptr inbounds float, ptr addrspace(3) %118, i32 %123, !dbg !71
  %125 = extractelement <2 x i32> %.v4, i64 1, !dbg !71
  %126 = select i1 %98, i32 %66, i32 %125, !dbg !72
  %127 = insertelement <1 x i32> poison, i32 %126, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %127, i1 true) #2, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %128 = lshr i32 %117, 2, !dbg !71
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %128, !dbg !71
  %130 = getelementptr inbounds float, ptr addrspace(3) %129, i32 %117, !dbg !71
  %131 = load i32, ptr addrspace(3) %130, align 4, !dbg !71
  %132 = or disjoint i32 %117, 128, !dbg !71
  %133 = lshr i32 %132, 2, !dbg !71
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %133, !dbg !71
  %135 = getelementptr inbounds float, ptr addrspace(3) %134, i32 %132, !dbg !71
  %136 = load i32, ptr addrspace(3) %135, align 4, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %112, i1 %41) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %114, i1 %42) #2, !dbg !71
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cftthd4rqqr7v6ca72235iex7rj2otvgg3uag4y4rpfyrh3g33m6.py", directory: "inductor_cache/ft")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_12", linkageName: "triton_poi_fused_max_pool2d_with_indices_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 49, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 62, scope: !7)
!30 = !DILocation(line: 34, column: 54, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 50, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 60, scope: !7)
!35 = !DILocation(line: 36, column: 41, scope: !7)
!36 = !DILocation(line: 36, column: 50, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 60, scope: !7)
!39 = !DILocation(line: 37, column: 42, scope: !7)
!40 = !DILocation(line: 37, column: 51, scope: !7)
!41 = !DILocation(line: 37, column: 31, scope: !7)
!42 = !DILocation(line: 37, column: 61, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 42, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 43, column: 18, scope: !7)
!52 = !DILocation(line: 45, column: 33, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !54)
!54 = !DILocation(line: 46, column: 41, scope: !7)
!55 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !54)
!56 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !54)
!57 = !DILocation(line: 47, column: 20, scope: !7)
!58 = !DILocation(line: 49, column: 35, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !60)
!60 = !DILocation(line: 50, column: 42, scope: !7)
!61 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !60)
!62 = !DILocation(line: 51, column: 34, scope: !7)
!63 = !DILocation(line: 51, column: 30, scope: !7)
!64 = !DILocation(line: 51, column: 25, scope: !7)
!65 = !DILocation(line: 51, column: 46, scope: !7)
!66 = !DILocation(line: 52, column: 32, scope: !7)
!67 = !DILocation(line: 52, column: 30, scope: !7)
!68 = !DILocation(line: 52, column: 42, scope: !7)
!69 = !DILocation(line: 52, column: 37, scope: !7)
!70 = !DILocation(line: 52, column: 25, scope: !7)
!71 = !DILocation(line: 52, column: 54, scope: !7)
!72 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !60)
!73 = !DILocation(line: 52, column: 4, scope: !7)
