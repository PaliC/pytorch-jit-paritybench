; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 510, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %.frozen = freeze i32 %18, !dbg !14
  %19 = sdiv i32 %.frozen, 4096, !dbg !14
  %20 = srem i32 %19, 72, !dbg !15
  %21 = mul i32 %19, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %.frozen13 = freeze i32 %18, !dbg !17
  %22 = sdiv i32 %.frozen13, 294912, !dbg !17
  %23 = sext i32 %20 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !21
  %29 = bitcast i32 %28 to float, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !21
  %31 = bitcast i32 %30 to float, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %7, i64 %23, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !25
  %38 = icmp slt i32 %20, 24, !dbg !26
  %39 = mul i32 %22, 294912, !dbg !27
  %srem.decomposed = sub i32 %.frozen13, %39, !dbg !27
  %40 = mul nsw i32 %22, 98304, !dbg !28
  %41 = add nsw i32 %40, %srem.decomposed, !dbg !29
  %42 = sext i32 %41 to i64, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !30
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #3, !dbg !31
  %45 = add nsw i32 %20, -24, !dbg !32
  %46 = icmp ult i32 %45, 12, !dbg !32
  %47 = shl nsw i32 %20, 12, !dbg !33
  %48 = mul nsw i32 %22, 49152, !dbg !34
  %49 = add nsw i32 %48, %.decomposed, !dbg !33
  %50 = add nsw i32 %49, -98304, !dbg !35
  %51 = add nsw i32 %50, %47, !dbg !36
  %52 = sext i32 %51 to i64, !dbg !37
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !37
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %53, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #3, !dbg !38
  %55 = add nsw i32 %20, -36, !dbg !39
  %56 = icmp ult i32 %55, 12, !dbg !39
  %57 = add nsw i32 %49, -147456, !dbg !40
  %58 = add nsw i32 %57, %47, !dbg !41
  %59 = sext i32 %58 to i64, !dbg !42
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !42
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #3, !dbg !43
  %62 = add nsw i32 %20, -48, !dbg !44
  %63 = icmp ult i32 %62, 12, !dbg !44
  %64 = add nsw i32 %49, -196608, !dbg !45
  %65 = add nsw i32 %64, %47, !dbg !46
  %66 = sext i32 %65 to i64, !dbg !47
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %66, !dbg !47
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %67, i1 %63, i32 0, i1 %63, i32 0, i1 %63) #3, !dbg !48
  %69 = icmp sgt i32 %20, 59, !dbg !49
  %70 = add nsw i32 %49, -245760, !dbg !50
  %71 = add nsw i32 %70, %47, !dbg !51
  %72 = sext i32 %71 to i64, !dbg !52
  %73 = getelementptr float, ptr addrspace(1) %4, i64 %72, !dbg !52
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %73, i1 %69, i32 0, i1 %69, i32 0, i1 %69) #3, !dbg !53
  %75 = fadd float %29, 0x3EE4F8B580000000, !dbg !54
  %76 = fadd float %31, 0x3EE4F8B580000000, !dbg !54
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i = icmp eq i32 %77, 0, !dbg !55
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i = icmp eq i32 %78, 0, !dbg !55
  br i1 %.not.i, label %84, label %79, !dbg !55

79:                                               ; preds = %12
  br i1 %.not1.i, label %82, label %80, !dbg !55

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

84:                                               ; preds = %12
  br i1 %.not1.i, label %87, label %85, !dbg !55

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

__nv_sqrtf.exit:                                  ; preds = %80, %82, %85, %87
  %.0.i = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !55
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i8 = icmp eq i32 %89, 0, !dbg !55
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i11 = icmp eq i32 %90, 0, !dbg !55
  br i1 %.not.i8, label %96, label %91, !dbg !55

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %94, label %92, !dbg !55

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !55
  br label %__nv_sqrtf.exit12, !dbg !55

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !55
  br label %__nv_sqrtf.exit12, !dbg !55

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %99, label %97, !dbg !55

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !55
  br label %__nv_sqrtf.exit12, !dbg !55

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !55
  br label %__nv_sqrtf.exit12, !dbg !55

__nv_sqrtf.exit12:                                ; preds = %92, %94, %97, %99
  %.0.i10 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !55
  %101 = extractvalue { i32, i32 } %44, 1, !dbg !31
  %102 = extractvalue { i32, i32 } %54, 1, !dbg !38
  %103 = extractvalue { i32, i32 } %61, 1, !dbg !43
  %104 = extractvalue { i32, i32 } %68, 1, !dbg !48
  %105 = extractvalue { i32, i32 } %74, 1, !dbg !53
  %.v1 = select i1 %63, i32 %104, i32 %105, !dbg !56
  %.v3 = select i1 %56, i32 %103, i32 %.v1, !dbg !57
  %.v5 = select i1 %46, i32 %102, i32 %.v3, !dbg !58
  %.v7 = select i1 %38, i32 %101, i32 %.v5, !dbg !59
  %106 = bitcast i32 %.v7 to float, !dbg !59
  %107 = bitcast i32 %26 to float, !dbg !19
  %108 = fsub float %106, %107, !dbg !60
  %109 = extractvalue { i32, i32 } %44, 0, !dbg !31
  %110 = extractvalue { i32, i32 } %54, 0, !dbg !38
  %111 = extractvalue { i32, i32 } %61, 0, !dbg !43
  %112 = extractvalue { i32, i32 } %68, 0, !dbg !48
  %113 = extractvalue { i32, i32 } %74, 0, !dbg !53
  %.v = select i1 %63, i32 %112, i32 %113, !dbg !56
  %.v2 = select i1 %56, i32 %111, i32 %.v, !dbg !57
  %.v4 = select i1 %46, i32 %110, i32 %.v2, !dbg !58
  %.v6 = select i1 %38, i32 %109, i32 %.v4, !dbg !59
  %114 = bitcast i32 %.v6 to float, !dbg !59
  %115 = bitcast i32 %25 to float, !dbg !19
  %116 = fsub float %114, %115, !dbg !60
  %117 = bitcast i32 %37 to float, !dbg !25
  %118 = bitcast i32 %36 to float, !dbg !25
  %119 = bitcast i32 %34 to float, !dbg !23
  %120 = bitcast i32 %33 to float, !dbg !23
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !61
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !61
  %123 = fmul float %116, %121, !dbg !62
  %124 = fmul float %108, %122, !dbg !62
  %125 = fmul float %123, %120, !dbg !63
  %126 = fmul float %124, %119, !dbg !63
  %127 = fadd float %125, %118, !dbg !64
  %128 = fadd float %126, %117, !dbg !64
  %129 = fcmp olt float %127, 0.000000e+00, !dbg !65
  %130 = fcmp olt float %128, 0.000000e+00, !dbg !65
  %131 = select i1 %129, float 0.000000e+00, float %127, !dbg !69
  %132 = select i1 %130, float 0.000000e+00, float %128, !dbg !69
  %133 = sext i32 %18 to i64, !dbg !70
  %134 = getelementptr float, ptr addrspace(1) %9, i64 %133, !dbg !70
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v6, i32 %.v7, ptr addrspace(1) %134, i1 true) #3, !dbg !71
  %135 = getelementptr float, ptr addrspace(1) %10, i64 %133, !dbg !72
  %136 = bitcast float %131 to i32, !dbg !73
  %137 = bitcast float %132 to i32, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %136, i32 %137, ptr addrspace(1) %135, i1 true) #3, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c33splvc6jihmtkroqjhsalbqrouvgf7unrpkt2gt3ergv6uo2rx.py", directory: "inductor_cache/33")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 53, scope: !7)
!29 = !DILocation(line: 37, column: 47, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 58, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 42, scope: !7)
!34 = !DILocation(line: 42, column: 62, scope: !7)
!35 = !DILocation(line: 42, column: 36, scope: !7)
!36 = !DILocation(line: 42, column: 56, scope: !7)
!37 = !DILocation(line: 42, column: 31, scope: !7)
!38 = !DILocation(line: 42, column: 67, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 36, scope: !7)
!41 = !DILocation(line: 47, column: 56, scope: !7)
!42 = !DILocation(line: 47, column: 31, scope: !7)
!43 = !DILocation(line: 47, column: 67, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 36, scope: !7)
!46 = !DILocation(line: 52, column: 56, scope: !7)
!47 = !DILocation(line: 52, column: 31, scope: !7)
!48 = !DILocation(line: 52, column: 67, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 56, column: 36, scope: !7)
!51 = !DILocation(line: 56, column: 56, scope: !7)
!52 = !DILocation(line: 56, column: 31, scope: !7)
!53 = !DILocation(line: 56, column: 67, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 27, scope: !7)
!56 = !DILocation(line: 57, column: 35, scope: !7)
!57 = !DILocation(line: 58, column: 35, scope: !7)
!58 = !DILocation(line: 59, column: 34, scope: !7)
!59 = !DILocation(line: 60, column: 33, scope: !7)
!60 = !DILocation(line: 61, column: 20, scope: !7)
!61 = !DILocation(line: 66, column: 20, scope: !7)
!62 = !DILocation(line: 69, column: 20, scope: !7)
!63 = !DILocation(line: 70, column: 20, scope: !7)
!64 = !DILocation(line: 71, column: 20, scope: !7)
!65 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !68)
!66 = distinct !DILexicalBlockFile(scope: !7, file: !67, discriminator: 0)
!67 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!68 = !DILocation(line: 73, column: 42, scope: !7)
!69 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !68)
!70 = !DILocation(line: 74, column: 25, scope: !7)
!71 = !DILocation(line: 74, column: 37, scope: !7)
!72 = !DILocation(line: 75, column: 25, scope: !7)
!73 = !DILocation(line: 75, column: 37, scope: !7)
!74 = !DILocation(line: 75, column: 4, scope: !7)
