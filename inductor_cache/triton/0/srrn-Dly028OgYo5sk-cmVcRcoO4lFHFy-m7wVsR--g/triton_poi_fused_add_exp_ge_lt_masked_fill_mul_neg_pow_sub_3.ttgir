#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_exp_ge_lt_masked_fill_mul_neg_pow_sub_3(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":19:0), %arg5: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":19:0), %arg6: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant 1.000000e+00 : f32 loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<128xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<256> : tensor<128xi32, #blocked> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<128xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<128xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_3 : tensor<128xi32, #blocked> loc(#loc6)
    %6 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.addptr %6, %4 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc7)
    %8 = tt.load %7, %5 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc9)
    %10 = tt.load %9 : !tt.ptr<f32> loc(#loc10)
    %11 = tt.splat %10 : f32 -> tensor<128xf32, #blocked> loc(#loc11)
    %12 = tt.addptr %arg2, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc12)
    %13 = tt.load %12 : !tt.ptr<f32> loc(#loc13)
    %14 = tt.splat %13 : f32 -> tensor<128xf32, #blocked> loc(#loc14)
    %15 = tt.addptr %arg3, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc15)
    %16 = tt.load %15 : !tt.ptr<f32> loc(#loc16)
    %17 = tt.addptr %arg4, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc17)
    %18 = tt.load %17 : !tt.ptr<f32> loc(#loc18)
    %19 = arith.cmpf olt, %8, %11 : tensor<128xf32, #blocked> loc(#loc19)
    %20 = arith.cmpf oge, %8, %11 : tensor<128xf32, #blocked> loc(#loc20)
    %21 = arith.subf %cst_0, %16 : f32 loc(#loc21)
    %22 = tt.splat %21 : f32 -> tensor<128xf32, #blocked> loc(#loc21)
    %23 = arith.subf %8, %11 : tensor<128xf32, #blocked> loc(#loc22)
    %24 = arith.mulf %23, %23 : tensor<128xf32, #blocked> loc(#loc23)
    %25 = arith.mulf %22, %24 : tensor<128xf32, #blocked> loc(#loc24)
    %26 = math.exp %25 : tensor<128xf32, #blocked> loc(#loc25)
    %27 = arith.mulf %14, %26 : tensor<128xf32, #blocked> loc(#loc26)
    %28 = arith.select %20, %cst_2, %27 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc27)
    %29 = arith.subf %13, %cst : f32 loc(#loc28)
    %30 = tt.splat %29 : f32 -> tensor<128xf32, #blocked> loc(#loc28)
    %31 = arith.subf %cst_0, %18 : f32 loc(#loc29)
    %32 = tt.splat %31 : f32 -> tensor<128xf32, #blocked> loc(#loc29)
    %33 = arith.mulf %32, %24 : tensor<128xf32, #blocked> loc(#loc30)
    %34 = math.exp %33 : tensor<128xf32, #blocked> loc(#loc31)
    %35 = arith.mulf %30, %34 : tensor<128xf32, #blocked> loc(#loc32)
    %36 = arith.addf %35, %cst_1 : tensor<128xf32, #blocked> loc(#loc33)
    %37 = arith.select %19, %cst_2, %36 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc34)
    %38 = arith.addf %28, %37 : tensor<128xf32, #blocked> loc(#loc35)
    %39 = tt.splat %arg5 : !tt.ptr<i1> -> tensor<128x!tt.ptr<i1>, #blocked> loc(#loc36)
    %40 = tt.addptr %39, %4 : tensor<128x!tt.ptr<i1>, #blocked>, tensor<128xi32, #blocked> loc(#loc36)
    %41 = tt.bitcast %40 : tensor<128x!tt.ptr<i1>, #blocked> -> tensor<128x!tt.ptr<i8>, #blocked> loc(#loc37)
    %42 = arith.extui %19 : tensor<128xi1, #blocked> to tensor<128xi8, #blocked> loc(#loc37)
    tt.store %41, %42, %5 : tensor<128x!tt.ptr<i8>, #blocked> loc(#loc37)
    %43 = tt.splat %arg6 : !tt.ptr<i1> -> tensor<128x!tt.ptr<i1>, #blocked> loc(#loc38)
    %44 = tt.addptr %43, %4 : tensor<128x!tt.ptr<i1>, #blocked>, tensor<128xi32, #blocked> loc(#loc38)
    %45 = tt.bitcast %44 : tensor<128x!tt.ptr<i1>, #blocked> -> tensor<128x!tt.ptr<i8>, #blocked> loc(#loc39)
    %46 = arith.extui %20 : tensor<128xi1, #blocked> to tensor<128xi8, #blocked> loc(#loc39)
    tt.store %45, %46, %5 : tensor<128x!tt.ptr<i8>, #blocked> loc(#loc39)
    %47 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc40)
    %48 = tt.addptr %47, %4 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc40)
    tt.store %48, %38, %5 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc41)
    tt.return loc(#loc42)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":21:28)
#loc3 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":21:33)
#loc4 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":22:36)
#loc5 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":22:23)
#loc6 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":23:21)
#loc7 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":25:30)
#loc8 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":25:35)
#loc9 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":26:30)
#loc10 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":26:19)
#loc11 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":27:33)
#loc12 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":28:30)
#loc13 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":28:19)
#loc14 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":29:33)
#loc15 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":30:30)
#loc16 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":30:19)
#loc17 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":32:31)
#loc18 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":32:20)
#loc19 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":34:18)
#loc20 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":35:19)
#loc21 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":36:12)
#loc22 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":37:19)
#loc23 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":38:20)
#loc24 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":39:19)
#loc25 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":40:24)
#loc26 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":41:19)
#loc27 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":43:34)
#loc28 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":45:19)
#loc29 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":46:13)
#loc30 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":47:20)
#loc31 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":48:24)
#loc32 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":49:20)
#loc33 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":50:20)
#loc34 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":51:34)
#loc35 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":52:20)
#loc36 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":53:25)
#loc37 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":53:36)
#loc38 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":54:25)
#loc39 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":54:36)
#loc40 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":55:25)
#loc41 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":55:37)
#loc42 = loc("inductor_cache/kg/ckgs4brcu5b5tny5qkv7wwo5rcscscqwf3shg5rywo45v3hjqxkv.py":55:4)
