; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = or disjoint i32 %10, 32, !dbg !12
  %12 = shl i32 %8, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %14 = and i32 %12, 60, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %11, !dbg !13
  %17 = or disjoint i32 %7, %14, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = shl i32 %18, 4, !dbg !15
  %20 = lshr i32 %8, 4, !dbg !16
  %21 = and i32 %20, 7, !dbg !16
  %22 = or disjoint i32 %19, %13, !dbg !17
  %23 = or disjoint i32 %19, %21, !dbg !17
  %24 = or disjoint i32 %23, 8, !dbg !17
  %25 = icmp slt i32 %22, 16, !dbg !18
  %26 = icmp slt i32 %23, 16, !dbg !18
  %27 = icmp slt i32 %24, 16, !dbg !18
  %.frozen = freeze i32 %17, !dbg !19
  %28 = sdiv i32 %.frozen, 512, !dbg !19
  %29 = mul i32 %28, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %30 = sext i32 %22 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !21
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %25) #2, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !22
  %37 = bitcast i32 %33 to float, !dbg !22
  %38 = bitcast i32 %34 to float, !dbg !22
  %39 = bitcast i32 %35 to float, !dbg !22
  %40 = bitcast i32 %36 to float, !dbg !22
  %41 = shl i32 %15, 4, !dbg !23
  %42 = shl i32 %16, 4, !dbg !23
  %43 = add i32 %22, %41, !dbg !24
  %44 = add i32 %22, %42, !dbg !24
  %45 = sext i32 %43 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !25
  %47 = sext i32 %44 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !25
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %25) #2, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !26
  %54 = bitcast i32 %50 to float, !dbg !26
  %55 = bitcast i32 %51 to float, !dbg !26
  %56 = bitcast i32 %52 to float, !dbg !26
  %57 = bitcast i32 %53 to float, !dbg !26
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %25) #2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !26
  %63 = bitcast i32 %59 to float, !dbg !26
  %64 = bitcast i32 %60 to float, !dbg !26
  %65 = bitcast i32 %61 to float, !dbg !26
  %66 = bitcast i32 %62 to float, !dbg !26
  %67 = fsub float %37, %54, !dbg !27
  %68 = fsub float %38, %55, !dbg !27
  %69 = fsub float %39, %56, !dbg !27
  %70 = fsub float %40, %57, !dbg !27
  %71 = fsub float %37, %63, !dbg !27
  %72 = fsub float %38, %64, !dbg !27
  %73 = fsub float %39, %65, !dbg !27
  %74 = fsub float %40, %66, !dbg !27
  %75 = shl i32 %23, 9, !dbg !28
  %76 = shl i32 %24, 9, !dbg !28
  %77 = shl i32 %28, 13, !dbg !29
  %78 = add i32 %77, %.decomposed, !dbg !30
  %79 = add i32 %78, %75, !dbg !31
  %80 = add i32 %78, %76, !dbg !31
  %81 = sext i32 %79 to i64, !dbg !32
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !32
  %83 = sext i32 %80 to i64, !dbg !32
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !32
  %85 = shl i32 %8, 8, !dbg !33
  %86 = and i32 %85, 768, !dbg !33
  %87 = or disjoint i32 %86, %10, !dbg !33
  %88 = and i32 %12, 508, !dbg !33
  %89 = lshr exact i32 %86, 2, !dbg !33
  %90 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %89, !dbg !33
  %91 = getelementptr float, ptr addrspace(3) %90, i32 %87, !dbg !33
  %92 = bitcast float %67 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #2, !dbg !33
  %93 = or disjoint i32 %87, 64, !dbg !33
  %94 = lshr i32 %93, 4, !dbg !33
  %95 = and i32 %94, 52, !dbg !33
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i32 %95, !dbg !33
  %97 = getelementptr float, ptr addrspace(3) %96, i32 %93, !dbg !33
  %98 = bitcast float %68 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #2, !dbg !33
  %99 = or disjoint i32 %87, 128, !dbg !33
  %100 = lshr i32 %99, 4, !dbg !33
  %101 = and i32 %100, 56, !dbg !33
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !33
  %103 = getelementptr float, ptr addrspace(3) %102, i32 %99, !dbg !33
  %104 = bitcast float %69 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #2, !dbg !33
  %105 = or disjoint i32 %87, 192, !dbg !33
  %106 = lshr i32 %105, 4, !dbg !33
  %107 = and i32 %106, 60, !dbg !33
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !33
  %109 = getelementptr float, ptr addrspace(3) %108, i32 %105, !dbg !33
  %110 = bitcast float %70 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #2, !dbg !33
  %111 = or disjoint i32 %87, 32, !dbg !33
  %112 = getelementptr float, ptr addrspace(3) %90, i32 %111, !dbg !33
  %113 = bitcast float %71 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !33
  %114 = or disjoint i32 %87, 96, !dbg !33
  %115 = lshr i32 %114, 4, !dbg !33
  %116 = and i32 %115, 52, !dbg !33
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !33
  %118 = getelementptr float, ptr addrspace(3) %117, i32 %114, !dbg !33
  %119 = bitcast float %72 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !33
  %120 = or disjoint i32 %87, 160, !dbg !33
  %121 = lshr i32 %120, 4, !dbg !33
  %122 = and i32 %121, 56, !dbg !33
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i32 %122, !dbg !33
  %124 = getelementptr float, ptr addrspace(3) %123, i32 %120, !dbg !33
  %125 = bitcast float %73 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #2, !dbg !33
  %126 = or disjoint i32 %87, 224, !dbg !33
  %127 = lshr i32 %126, 4, !dbg !33
  %128 = and i32 %127, 60, !dbg !33
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %128, !dbg !33
  %130 = getelementptr float, ptr addrspace(3) %129, i32 %126, !dbg !33
  %131 = bitcast float %74 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %132 = lshr i32 %12, 4, !dbg !33
  %133 = and i32 %132, 28, !dbg !33
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %133, !dbg !33
  %135 = getelementptr inbounds float, ptr addrspace(3) %134, i32 %88, !dbg !33
  %136 = or disjoint i32 %88, 512, !dbg !33
  %137 = lshr i32 %136, 4, !dbg !33
  %138 = and i32 %137, 60, !dbg !33
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %138, !dbg !33
  %140 = getelementptr inbounds float, ptr addrspace(3) %139, i32 %136, !dbg !33
  %141 = load <4 x i32>, ptr addrspace(3) %140, align 16, !dbg !33
  %.extract = load i32, ptr addrspace(3) %135, align 16, !dbg !33
  %142 = getelementptr inbounds i8, ptr addrspace(3) %135, i32 4, !dbg !33
  %.extract10 = load i32, ptr addrspace(3) %142, align 4, !dbg !33
  %143 = getelementptr inbounds i8, ptr addrspace(3) %135, i32 8, !dbg !33
  %.extract11 = load i32, ptr addrspace(3) %143, align 8, !dbg !33
  %144 = getelementptr inbounds i8, ptr addrspace(3) %135, i32 12, !dbg !33
  %.extract12 = load i32, ptr addrspace(3) %144, align 4, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %82, i1 %26) #2, !dbg !33
  %.extract13 = extractelement <4 x i32> %141, i64 0, !dbg !33
  %.extract14 = extractelement <4 x i32> %141, i64 1, !dbg !33
  %.extract15 = extractelement <4 x i32> %141, i64 2, !dbg !33
  %.extract16 = extractelement <4 x i32> %141, i64 3, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %84, i1 %27) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czz3kp3ztzll43mcs43gwaez7clhemo2m3ub7bhxijsw5rsq3d4p.py", directory: "inductor_cache/zz")
!4 = !{ptr @triton_poi_fused_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_sub_0", linkageName: "triton_poi_fused_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 38, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 43, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 34, scope: !7)
!29 = !DILocation(line: 35, column: 44, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 39, scope: !7)
!32 = !DILocation(line: 35, column: 25, scope: !7)
!33 = !DILocation(line: 35, column: 55, scope: !7)
!34 = !DILocation(line: 35, column: 4, scope: !7)
