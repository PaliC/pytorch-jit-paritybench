; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, i32 %24) local_unnamed_addr !dbg !7 {
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %27 = shl i32 %26, 8, !dbg !11
  %28 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %29 = shl i32 %28, 1, !dbg !12
  %30 = and i32 %29, 254, !dbg !12
  %31 = or disjoint i32 %27, %30, !dbg !13
  %32 = or disjoint i32 %31, 1, !dbg !13
  %.frozen = freeze i32 %31, !dbg !14
  %33 = sdiv i32 %.frozen, 4, !dbg !14
  %34 = mul i32 %33, 4, !dbg !15
  %.decomposed = sub i32 %.frozen, %34, !dbg !15
  %35 = srem i32 %32, 4, !dbg !15
  %36 = sdiv i32 %31, 16, !dbg !16
  %37 = srem i32 %36, 256, !dbg !17
  %38 = shl nsw i32 %.decomposed, 1, !dbg !18
  %39 = shl nsw i32 %35, 1, !dbg !18
  %40 = shl i32 %33, 4, !dbg !19
  %41 = add i32 %38, %40, !dbg !20
  %42 = add i32 %40, %39, !dbg !20
  %43 = sext i32 %41 to i64, !dbg !21
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !21
  %45 = sext i32 %42 to i64, !dbg !21
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !21
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !22
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !22
  %49 = or disjoint i32 %41, 1, !dbg !23
  %50 = or disjoint i32 %42, 1, !dbg !23
  %51 = sext i32 %49 to i64, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !24
  %53 = sext i32 %50 to i64, !dbg !24
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !24
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !25
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !25
  %57 = add i32 %41, 8, !dbg !26
  %58 = add i32 %42, 8, !dbg !26
  %59 = sext i32 %57 to i64, !dbg !27
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !27
  %61 = sext i32 %58 to i64, !dbg !27
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !27
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !28
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !28
  %65 = add i32 %41, 9, !dbg !29
  %66 = add i32 %42, 9, !dbg !29
  %67 = sext i32 %65 to i64, !dbg !30
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !30
  %69 = sext i32 %66 to i64, !dbg !30
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !30
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !31
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !31
  %73 = sext i32 %37 to i64, !dbg !32
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !32
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !33
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !33
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %73, !dbg !34
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !35
  %79 = bitcast i32 %78 to float, !dbg !35
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !35
  %81 = bitcast i32 %80 to float, !dbg !35
  %82 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !36
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !37
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !37
  %85 = getelementptr float, ptr addrspace(1) %4, i64 %73, !dbg !38
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !39
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !39
  %88 = fadd float %79, 0x3EE4F8B580000000, !dbg !40
  %89 = fadd float %81, 0x3EE4F8B580000000, !dbg !40
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %90, 0, !dbg !41
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i = icmp eq i32 %91, 0, !dbg !41
  br i1 %.not.i, label %97, label %92, !dbg !41

92:                                               ; preds = %25
  br i1 %.not1.i, label %95, label %93, !dbg !41

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

97:                                               ; preds = %25
  br i1 %.not1.i, label %100, label %98, !dbg !41

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %93, %95, %98, %100
  %.0.i = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !41
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %102, 0, !dbg !41
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i4 = icmp eq i32 %103, 0, !dbg !41
  br i1 %.not.i1, label %109, label %104, !dbg !41

104:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %107, label %105, !dbg !41

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

109:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %112, label %110, !dbg !41

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %105, %107, %110, %112
  %.0.i3 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !41
  %114 = bitcast i32 %56 to float, !dbg !25
  %115 = bitcast i32 %48 to float, !dbg !22
  %116 = fadd float %115, %114, !dbg !42
  %117 = bitcast i32 %64 to float, !dbg !28
  %118 = fadd float %116, %117, !dbg !43
  %119 = bitcast i32 %72 to float, !dbg !31
  %120 = fadd float %118, %119, !dbg !44
  %121 = fmul float %120, 2.500000e-01, !dbg !45
  %122 = bitcast i32 %76 to float, !dbg !33
  %123 = fsub float %121, %122, !dbg !46
  %124 = bitcast i32 %55 to float, !dbg !25
  %125 = bitcast i32 %47 to float, !dbg !22
  %126 = fadd float %125, %124, !dbg !42
  %127 = bitcast i32 %63 to float, !dbg !28
  %128 = fadd float %126, %127, !dbg !43
  %129 = bitcast i32 %71 to float, !dbg !31
  %130 = fadd float %128, %129, !dbg !44
  %131 = fmul float %130, 2.500000e-01, !dbg !45
  %132 = bitcast i32 %75 to float, !dbg !33
  %133 = fsub float %131, %132, !dbg !46
  %134 = bitcast i32 %87 to float, !dbg !39
  %135 = bitcast i32 %86 to float, !dbg !39
  %136 = bitcast i32 %84 to float, !dbg !37
  %137 = bitcast i32 %83 to float, !dbg !37
  %.frozen6 = freeze i32 %31, !dbg !47
  %138 = sdiv i32 %.frozen6, 4096, !dbg !47
  %139 = mul i32 %138, 4096, !dbg !48
  %.decomposed7 = sub i32 %.frozen6, %139, !dbg !48
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !49
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !49
  %142 = fmul float %133, %140, !dbg !50
  %143 = fmul float %123, %141, !dbg !50
  %144 = fmul float %142, %137, !dbg !51
  %145 = fmul float %143, %136, !dbg !51
  %146 = fadd float %144, %135, !dbg !52
  %147 = fadd float %145, %134, !dbg !52
  %148 = fcmp olt float %146, 0.000000e+00, !dbg !53
  %149 = fcmp olt float %147, 0.000000e+00, !dbg !53
  %150 = select i1 %148, float 0.000000e+00, float %146, !dbg !57
  %151 = select i1 %149, float 0.000000e+00, float %147, !dbg !57
  %152 = sext i32 %31 to i64, !dbg !58
  %153 = getelementptr float, ptr addrspace(1) %5, i64 %152, !dbg !58
  %154 = bitcast float %131 to i32, !dbg !59
  %155 = bitcast float %121 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %153, i1 true) #3, !dbg !59
  %156 = getelementptr float, ptr addrspace(1) %6, i64 %152, !dbg !60
  %157 = bitcast float %150 to i32, !dbg !61
  %158 = bitcast float %151 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %157, i32 %158, ptr addrspace(1) %156, i1 true) #3, !dbg !61
  %159 = shl i32 %138, 13, !dbg !62
  %160 = add i32 %159, %.decomposed7, !dbg !63
  %161 = sext i32 %160 to i64, !dbg !64
  %162 = getelementptr float, ptr addrspace(1) %7, i64 %161, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %162, i1 true) #3, !dbg !65
  %163 = mul i32 %138, 8704, !dbg !66
  %164 = add i32 %163, %.decomposed7, !dbg !67
  %165 = sext i32 %164 to i64, !dbg !68
  %166 = getelementptr float, ptr addrspace(1) %8, i64 %165, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %166, i1 true) #3, !dbg !69
  %167 = mul i32 %138, 9216, !dbg !70
  %168 = add i32 %167, %.decomposed7, !dbg !71
  %169 = sext i32 %168 to i64, !dbg !72
  %170 = getelementptr float, ptr addrspace(1) %9, i64 %169, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %170, i1 true) #3, !dbg !73
  %171 = mul i32 %138, 9728, !dbg !74
  %172 = add i32 %171, %.decomposed7, !dbg !75
  %173 = sext i32 %172 to i64, !dbg !76
  %174 = getelementptr float, ptr addrspace(1) %10, i64 %173, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %174, i1 true) #3, !dbg !77
  %175 = mul i32 %138, 10240, !dbg !78
  %176 = add i32 %175, %.decomposed7, !dbg !79
  %177 = sext i32 %176 to i64, !dbg !80
  %178 = getelementptr float, ptr addrspace(1) %11, i64 %177, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %178, i1 true) #3, !dbg !81
  %179 = mul i32 %138, 10752, !dbg !82
  %180 = add i32 %179, %.decomposed7, !dbg !83
  %181 = sext i32 %180 to i64, !dbg !84
  %182 = getelementptr float, ptr addrspace(1) %12, i64 %181, !dbg !84
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %182, i1 true) #3, !dbg !85
  %183 = mul i32 %138, 11264, !dbg !86
  %184 = add i32 %183, %.decomposed7, !dbg !87
  %185 = sext i32 %184 to i64, !dbg !88
  %186 = getelementptr float, ptr addrspace(1) %13, i64 %185, !dbg !88
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %186, i1 true) #3, !dbg !89
  %187 = mul i32 %138, 11776, !dbg !90
  %188 = add i32 %187, %.decomposed7, !dbg !91
  %189 = sext i32 %188 to i64, !dbg !92
  %190 = getelementptr float, ptr addrspace(1) %14, i64 %189, !dbg !92
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %190, i1 true) #3, !dbg !93
  %191 = mul i32 %138, 12288, !dbg !94
  %192 = add i32 %191, %.decomposed7, !dbg !95
  %193 = sext i32 %192 to i64, !dbg !96
  %194 = getelementptr float, ptr addrspace(1) %15, i64 %193, !dbg !96
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %194, i1 true) #3, !dbg !97
  %195 = mul i32 %138, 12800, !dbg !98
  %196 = add i32 %195, %.decomposed7, !dbg !99
  %197 = sext i32 %196 to i64, !dbg !100
  %198 = getelementptr float, ptr addrspace(1) %16, i64 %197, !dbg !100
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %198, i1 true) #3, !dbg !101
  %199 = mul i32 %138, 13312, !dbg !102
  %200 = add i32 %199, %.decomposed7, !dbg !103
  %201 = sext i32 %200 to i64, !dbg !104
  %202 = getelementptr float, ptr addrspace(1) %17, i64 %201, !dbg !104
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %202, i1 true) #3, !dbg !105
  %203 = mul i32 %138, 13824, !dbg !106
  %204 = add i32 %203, %.decomposed7, !dbg !107
  %205 = sext i32 %204 to i64, !dbg !108
  %206 = getelementptr float, ptr addrspace(1) %18, i64 %205, !dbg !108
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %206, i1 true) #3, !dbg !109
  %207 = mul i32 %138, 14336, !dbg !110
  %208 = add i32 %207, %.decomposed7, !dbg !111
  %209 = sext i32 %208 to i64, !dbg !112
  %210 = getelementptr float, ptr addrspace(1) %19, i64 %209, !dbg !112
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %210, i1 true) #3, !dbg !113
  %211 = mul i32 %138, 14848, !dbg !114
  %212 = add i32 %211, %.decomposed7, !dbg !115
  %213 = sext i32 %212 to i64, !dbg !116
  %214 = getelementptr float, ptr addrspace(1) %20, i64 %213, !dbg !116
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %214, i1 true) #3, !dbg !117
  %215 = mul i32 %138, 15360, !dbg !118
  %216 = add i32 %215, %.decomposed7, !dbg !119
  %217 = sext i32 %216 to i64, !dbg !120
  %218 = getelementptr float, ptr addrspace(1) %21, i64 %217, !dbg !120
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %218, i1 true) #3, !dbg !121
  %219 = mul i32 %138, 15872, !dbg !122
  %220 = add i32 %219, %.decomposed7, !dbg !123
  %221 = sext i32 %220 to i64, !dbg !124
  %222 = getelementptr float, ptr addrspace(1) %22, i64 %221, !dbg !124
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %222, i1 true) #3, !dbg !125
  %223 = shl i32 %138, 14, !dbg !126
  %224 = add i32 %223, %.decomposed7, !dbg !127
  %225 = sext i32 %224 to i64, !dbg !128
  %226 = getelementptr float, ptr addrspace(1) %23, i64 %225, !dbg !128
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %226, i1 true) #3, !dbg !129
  ret void, !dbg !130
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5mdwo3jnqz6uqv3fa2ica5qnfzf4j7knljh6ot23nhawa7bsooq.py", directory: "inductor_cache/5m")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_29", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 27, column: 27, scope: !7)
!18 = !DILocation(line: 30, column: 32, scope: !7)
!19 = !DILocation(line: 30, column: 40, scope: !7)
!20 = !DILocation(line: 30, column: 37, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 45, scope: !7)
!23 = !DILocation(line: 31, column: 41, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 49, scope: !7)
!26 = !DILocation(line: 32, column: 41, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 49, scope: !7)
!29 = !DILocation(line: 33, column: 41, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 49, scope: !7)
!32 = !DILocation(line: 34, column: 30, scope: !7)
!33 = !DILocation(line: 34, column: 35, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 36, scope: !7)
!40 = !DILocation(line: 45, column: 20, scope: !7)
!41 = !DILocation(line: 46, column: 27, scope: !7)
!42 = !DILocation(line: 38, column: 18, scope: !7)
!43 = !DILocation(line: 39, column: 18, scope: !7)
!44 = !DILocation(line: 40, column: 18, scope: !7)
!45 = !DILocation(line: 42, column: 18, scope: !7)
!46 = !DILocation(line: 43, column: 19, scope: !7)
!47 = !DILocation(line: 28, column: 19, scope: !7)
!48 = !DILocation(line: 29, column: 19, scope: !7)
!49 = !DILocation(line: 48, column: 20, scope: !7)
!50 = !DILocation(line: 51, column: 20, scope: !7)
!51 = !DILocation(line: 52, column: 20, scope: !7)
!52 = !DILocation(line: 53, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 55, column: 42, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!58 = !DILocation(line: 56, column: 25, scope: !7)
!59 = !DILocation(line: 56, column: 36, scope: !7)
!60 = !DILocation(line: 57, column: 25, scope: !7)
!61 = !DILocation(line: 57, column: 37, scope: !7)
!62 = !DILocation(line: 58, column: 35, scope: !7)
!63 = !DILocation(line: 58, column: 30, scope: !7)
!64 = !DILocation(line: 58, column: 25, scope: !7)
!65 = !DILocation(line: 58, column: 46, scope: !7)
!66 = !DILocation(line: 59, column: 35, scope: !7)
!67 = !DILocation(line: 59, column: 30, scope: !7)
!68 = !DILocation(line: 59, column: 25, scope: !7)
!69 = !DILocation(line: 59, column: 46, scope: !7)
!70 = !DILocation(line: 60, column: 35, scope: !7)
!71 = !DILocation(line: 60, column: 30, scope: !7)
!72 = !DILocation(line: 60, column: 25, scope: !7)
!73 = !DILocation(line: 60, column: 46, scope: !7)
!74 = !DILocation(line: 61, column: 35, scope: !7)
!75 = !DILocation(line: 61, column: 30, scope: !7)
!76 = !DILocation(line: 61, column: 25, scope: !7)
!77 = !DILocation(line: 61, column: 46, scope: !7)
!78 = !DILocation(line: 62, column: 36, scope: !7)
!79 = !DILocation(line: 62, column: 30, scope: !7)
!80 = !DILocation(line: 62, column: 25, scope: !7)
!81 = !DILocation(line: 62, column: 47, scope: !7)
!82 = !DILocation(line: 63, column: 36, scope: !7)
!83 = !DILocation(line: 63, column: 30, scope: !7)
!84 = !DILocation(line: 63, column: 25, scope: !7)
!85 = !DILocation(line: 63, column: 47, scope: !7)
!86 = !DILocation(line: 64, column: 36, scope: !7)
!87 = !DILocation(line: 64, column: 30, scope: !7)
!88 = !DILocation(line: 64, column: 25, scope: !7)
!89 = !DILocation(line: 64, column: 47, scope: !7)
!90 = !DILocation(line: 65, column: 36, scope: !7)
!91 = !DILocation(line: 65, column: 30, scope: !7)
!92 = !DILocation(line: 65, column: 25, scope: !7)
!93 = !DILocation(line: 65, column: 47, scope: !7)
!94 = !DILocation(line: 66, column: 37, scope: !7)
!95 = !DILocation(line: 66, column: 31, scope: !7)
!96 = !DILocation(line: 66, column: 26, scope: !7)
!97 = !DILocation(line: 66, column: 48, scope: !7)
!98 = !DILocation(line: 67, column: 37, scope: !7)
!99 = !DILocation(line: 67, column: 31, scope: !7)
!100 = !DILocation(line: 67, column: 26, scope: !7)
!101 = !DILocation(line: 67, column: 48, scope: !7)
!102 = !DILocation(line: 68, column: 37, scope: !7)
!103 = !DILocation(line: 68, column: 31, scope: !7)
!104 = !DILocation(line: 68, column: 26, scope: !7)
!105 = !DILocation(line: 68, column: 48, scope: !7)
!106 = !DILocation(line: 69, column: 37, scope: !7)
!107 = !DILocation(line: 69, column: 31, scope: !7)
!108 = !DILocation(line: 69, column: 26, scope: !7)
!109 = !DILocation(line: 69, column: 48, scope: !7)
!110 = !DILocation(line: 70, column: 37, scope: !7)
!111 = !DILocation(line: 70, column: 31, scope: !7)
!112 = !DILocation(line: 70, column: 26, scope: !7)
!113 = !DILocation(line: 70, column: 48, scope: !7)
!114 = !DILocation(line: 71, column: 37, scope: !7)
!115 = !DILocation(line: 71, column: 31, scope: !7)
!116 = !DILocation(line: 71, column: 26, scope: !7)
!117 = !DILocation(line: 71, column: 48, scope: !7)
!118 = !DILocation(line: 72, column: 37, scope: !7)
!119 = !DILocation(line: 72, column: 31, scope: !7)
!120 = !DILocation(line: 72, column: 26, scope: !7)
!121 = !DILocation(line: 72, column: 48, scope: !7)
!122 = !DILocation(line: 73, column: 37, scope: !7)
!123 = !DILocation(line: 73, column: 31, scope: !7)
!124 = !DILocation(line: 73, column: 26, scope: !7)
!125 = !DILocation(line: 73, column: 48, scope: !7)
!126 = !DILocation(line: 74, column: 37, scope: !7)
!127 = !DILocation(line: 74, column: 31, scope: !7)
!128 = !DILocation(line: 74, column: 26, scope: !7)
!129 = !DILocation(line: 74, column: 48, scope: !7)
!130 = !DILocation(line: 74, column: 4, scope: !7)
