; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_native_group_norm_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 2, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = and i32 %9, 3, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 4, !dbg !14
  %14 = lshr i32 %9, 5, !dbg !15
  %15 = lshr i32 %9, 2, !dbg !15
  %16 = lshr i32 %9, 4, !dbg !15
  %17 = and i32 %16, 1, !dbg !15
  %18 = and i32 %15, 16, !dbg !15
  %.lobit = shl nuw nsw i32 %15, 1, !dbg !16
  %19 = and i32 %.lobit, 2, !dbg !16
  %20 = lshr i32 %9, 3, !dbg !17
  %21 = and i32 %20, 4, !dbg !17
  %22 = and i32 %9, 8, !dbg !18
  %23 = or disjoint i32 %21, %22, !dbg !19
  %24 = or disjoint i32 %23, %19, !dbg !20
  %25 = shl i32 %12, 7, !dbg !21
  %26 = or disjoint i32 %18, %17, !dbg !22
  %27 = or disjoint i32 %26, %24, !dbg !22
  %28 = or disjoint i32 %27, %25, !dbg !22
  %29 = or disjoint i32 %28, 32, !dbg !22
  %30 = or disjoint i32 %28, 64, !dbg !22
  %31 = or disjoint i32 %28, 96, !dbg !22
  %32 = sext i32 %28 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !23
  %34 = sext i32 %29 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = sext i32 %30 to i64, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = sext i32 %31 to i64, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %13, i32 0, i1 %13) #5, !dbg !24
  %41 = bitcast i32 %40 to float, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %13, i32 0, i1 %13) #5, !dbg !24
  %43 = bitcast i32 %42 to float, !dbg !24
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %13, i32 0, i1 %13) #5, !dbg !24
  %45 = bitcast i32 %44 to float, !dbg !24
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %13, i32 0, i1 %13) #5, !dbg !24
  %47 = bitcast i32 %46 to float, !dbg !24
  %48 = select i1 %13, float %41, float 0.000000e+00, !dbg !25
  %49 = select i1 %13, float %43, float 0.000000e+00, !dbg !25
  %50 = select i1 %13, float %45, float 0.000000e+00, !dbg !25
  %51 = select i1 %13, float %47, float 0.000000e+00, !dbg !25
  %52 = select i1 %13, float 1.000000e+00, float 0.000000e+00, !dbg !26
  %53 = fsub float %49, %48, !dbg !27
  %54 = select i1 %13, float 2.000000e+00, float 0.000000e+00, !dbg !32
  %55 = fcmp oeq float %54, 0.000000e+00, !dbg !33
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float %54) #5, !dbg !34
  %57 = select i1 %55, float 0.000000e+00, float %56, !dbg !35
  %58 = fmul float %53, %57, !dbg !36
  %59 = fadd float %48, %58, !dbg !37
  %60 = fmul float %53, %53, !dbg !38
  %61 = fmul float %52, %60, !dbg !39
  %62 = fmul float %57, %61, !dbg !40
  %63 = fadd float %62, 0.000000e+00, !dbg !41
  %64 = fsub float %50, %59, !dbg !27
  %65 = select i1 %13, float 3.000000e+00, float 0.000000e+00, !dbg !32
  %66 = fcmp oeq float %65, 0.000000e+00, !dbg !33
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float %65) #5, !dbg !34
  %68 = select i1 %66, float 0.000000e+00, float %67, !dbg !35
  %69 = fmul float %68, %64, !dbg !36
  %70 = fadd float %59, %69, !dbg !37
  %71 = fmul float %64, %64, !dbg !38
  %72 = fmul float %54, %71, !dbg !39
  %73 = fmul float %68, %72, !dbg !40
  %74 = fadd float %63, %73, !dbg !41
  %75 = fsub float %51, %70, !dbg !27
  %76 = select i1 %13, float 4.000000e+00, float 0.000000e+00, !dbg !32
  %77 = fcmp oeq float %76, 0.000000e+00, !dbg !33
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float %76) #5, !dbg !34
  %79 = select i1 %77, float 0.000000e+00, float %78, !dbg !35
  %80 = fmul float %79, %75, !dbg !36
  %81 = fadd float %70, %80, !dbg !37
  %82 = fmul float %75, %75, !dbg !38
  %83 = fmul float %65, %82, !dbg !39
  %84 = fmul float %79, %83, !dbg !40
  %85 = fadd float %74, %84, !dbg !41
  %86 = bitcast float %81 to i32, !dbg !42
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 16, i32 31), !dbg !42
  %88 = bitcast i32 %87 to float, !dbg !42
  %89 = bitcast float %85 to i32, !dbg !42
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 16, i32 31), !dbg !42
  %91 = bitcast i32 %90 to float, !dbg !42
  %92 = bitcast float %76 to i32, !dbg !42
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 16, i32 31), !dbg !42
  %94 = bitcast i32 %93 to float, !dbg !42
  %95 = fsub float %88, %81, !dbg !27
  %96 = fadd float %76, %94, !dbg !32
  %97 = fcmp oeq float %96, 0.000000e+00, !dbg !33
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float %96) #5, !dbg !34
  %99 = select i1 %97, float 0.000000e+00, float %98, !dbg !35
  %100 = fmul float %99, %95, !dbg !36
  %101 = fadd float %81, %100, !dbg !37
  %102 = fadd float %85, %91, !dbg !43
  %103 = fmul float %95, %95, !dbg !38
  %104 = fmul float %76, %103, !dbg !39
  %105 = fmul float %99, %104, !dbg !40
  %106 = fadd float %102, %105, !dbg !41
  %107 = bitcast float %101 to i32, !dbg !42
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 8, i32 31), !dbg !42
  %109 = bitcast i32 %108 to float, !dbg !42
  %110 = bitcast float %106 to i32, !dbg !42
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 8, i32 31), !dbg !42
  %112 = bitcast i32 %111 to float, !dbg !42
  %113 = bitcast float %96 to i32, !dbg !42
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 8, i32 31), !dbg !42
  %115 = bitcast i32 %114 to float, !dbg !42
  %116 = fsub float %109, %101, !dbg !27
  %117 = fadd float %96, %115, !dbg !32
  %118 = fcmp oeq float %117, 0.000000e+00, !dbg !33
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float %117) #5, !dbg !34
  %120 = select i1 %118, float 0.000000e+00, float %119, !dbg !35
  %121 = fmul float %116, %120, !dbg !36
  %122 = fadd float %101, %121, !dbg !37
  %123 = fadd float %106, %112, !dbg !43
  %124 = fmul float %116, %116, !dbg !38
  %125 = fmul float %96, %124, !dbg !39
  %126 = fmul float %120, %125, !dbg !40
  %127 = fadd float %123, %126, !dbg !41
  %128 = bitcast float %122 to i32, !dbg !42
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 4, i32 31), !dbg !42
  %130 = bitcast i32 %129 to float, !dbg !42
  %131 = bitcast float %127 to i32, !dbg !42
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 4, i32 31), !dbg !42
  %133 = bitcast i32 %132 to float, !dbg !42
  %134 = bitcast float %117 to i32, !dbg !42
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 4, i32 31), !dbg !42
  %136 = bitcast i32 %135 to float, !dbg !42
  %137 = fsub float %130, %122, !dbg !27
  %138 = fadd float %117, %136, !dbg !32
  %139 = fcmp oeq float %138, 0.000000e+00, !dbg !33
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float %138) #5, !dbg !34
  %141 = select i1 %139, float 0.000000e+00, float %140, !dbg !35
  %142 = fmul float %137, %141, !dbg !36
  %143 = fadd float %122, %142, !dbg !37
  %144 = fadd float %127, %133, !dbg !43
  %145 = fmul float %137, %137, !dbg !38
  %146 = fmul float %117, %145, !dbg !39
  %147 = fmul float %141, %146, !dbg !40
  %148 = fadd float %144, %147, !dbg !41
  %149 = lshr i32 %10, 2, !dbg !42
  %150 = icmp samesign ult i32 %10, 4, !dbg !42
  %151 = and i32 %14, 3, !dbg !42
  %152 = shl nuw nsw i32 %11, 2, !dbg !42
  %153 = or disjoint i32 %152, %151, !dbg !42
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !42
  %155 = bitcast float %143 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 %150) #5, !dbg !42
  %156 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %153, !dbg !42
  %157 = bitcast float %148 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 %150) #5, !dbg !42
  %158 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %153, !dbg !42
  %159 = bitcast float %138 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 %150) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %160 = icmp slt i32 %9, 16, !dbg !42
  %161 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !42
  %162 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %161, i1 %160) #5, !dbg !42
  %163 = bitcast i32 %162 to float, !dbg !42
  %164 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %9, !dbg !42
  %165 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %164, i1 %160) #5, !dbg !42
  %166 = bitcast i32 %165 to float, !dbg !42
  %167 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %9, !dbg !42
  %168 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %167, i1 %160) #5, !dbg !42
  %169 = bitcast i32 %168 to float, !dbg !42
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 2, i32 31), !dbg !42
  %171 = bitcast i32 %170 to float, !dbg !42
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 2, i32 31), !dbg !42
  %173 = bitcast i32 %172 to float, !dbg !42
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 2, i32 31), !dbg !42
  %175 = bitcast i32 %174 to float, !dbg !42
  %176 = fsub float %171, %163, !dbg !27
  %177 = fadd float %169, %175, !dbg !32
  %178 = fcmp oeq float %177, 0.000000e+00, !dbg !33
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float %177) #5, !dbg !34
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !35
  %181 = fmul float %176, %180, !dbg !36
  %182 = fadd float %181, %163, !dbg !37
  %183 = fadd float %166, %173, !dbg !43
  %184 = fmul float %176, %176, !dbg !38
  %185 = fmul float %184, %169, !dbg !39
  %186 = fmul float %185, %180, !dbg !40
  %187 = fadd float %183, %186, !dbg !41
  %188 = bitcast float %182 to i32, !dbg !42
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 1, i32 31), !dbg !42
  %190 = bitcast i32 %189 to float, !dbg !42
  %191 = bitcast float %187 to i32, !dbg !42
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 1, i32 31), !dbg !42
  %193 = bitcast i32 %192 to float, !dbg !42
  %194 = bitcast float %177 to i32, !dbg !42
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 1, i32 31), !dbg !42
  %196 = bitcast i32 %195 to float, !dbg !42
  %197 = fsub float %190, %182, !dbg !27
  %198 = fadd float %177, %196, !dbg !32
  %199 = fcmp oeq float %198, 0.000000e+00, !dbg !33
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %196, float %198) #5, !dbg !34
  %201 = select i1 %199, float 0.000000e+00, float %200, !dbg !35
  %202 = fmul float %197, %201, !dbg !36
  %203 = fadd float %182, %202, !dbg !37
  %204 = fadd float %187, %193, !dbg !43
  %205 = fmul float %197, %197, !dbg !38
  %206 = fmul float %177, %205, !dbg !39
  %207 = fmul float %201, %206, !dbg !40
  %208 = fadd float %204, %207, !dbg !41
  %209 = icmp eq i32 %11, 0, !dbg !42
  %210 = and i1 %160, %209, !dbg !42
  %211 = bitcast float %203 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %211, i1 %210) #5, !dbg !42
  %212 = bitcast float %208 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %212, i1 %210) #5, !dbg !42
  %213 = bitcast float %198 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %213, i1 %210) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !42
  %215 = load i32, ptr addrspace(3) %214, align 16, !dbg !42
  %216 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %152, !dbg !42
  %217 = load float, ptr addrspace(3) %216, align 16, !dbg !42
  %218 = sext i32 %12 to i64, !dbg !44
  %219 = getelementptr float, ptr addrspace(1) %1, i64 %218, !dbg !44
  %220 = shl nuw nsw i32 %151, 3, !dbg !45
  %221 = or disjoint i32 %220, %149, !dbg !45
  %222 = icmp eq i32 %221, 0, !dbg !45
  %223 = and i1 %222, %13, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %215, ptr addrspace(1) %219, i1 %223) #5, !dbg !45
  %224 = getelementptr float, ptr addrspace(1) %2, i64 %218, !dbg !46
  %225 = bitcast float %217 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %225, ptr addrspace(1) %224, i1 %223) #5, !dbg !47
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %217, float 1.280000e+02) #5, !dbg !48
  %227 = fadd float %226, 0x3EE4F8B580000000, !dbg !49
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i = icmp eq i32 %228, 0, !dbg !50
  br i1 %.not.i, label %231, label %229, !dbg !50

229:                                              ; preds = %6
  %230 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %227), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

231:                                              ; preds = %6
  %232 = tail call float @llvm.nvvm.rsqrt.approx.f(float %227), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

__nv_rsqrtf.exit:                                 ; preds = %229, %231
  %.0.i = phi float [ %230, %229 ], [ %232, %231 ], !dbg !50
  %233 = getelementptr float, ptr addrspace(1) %3, i64 %218, !dbg !51
  %234 = bitcast float %.0.i to i32, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %234, ptr addrspace(1) %233, i1 %223) #5, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr36sfypyfk7yrlvtwy5gtewmuznx2we75eglbvxnixhy5sbl3jp.py", directory: "inductor_cache/r3")
!4 = !{ptr @triton_red_fused_native_group_norm_1, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_native_group_norm_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_native_group_norm_1", linkageName: "triton_red_fused_native_group_norm_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 35, column: 38, scope: !7)
!17 = !DILocation(line: 35, column: 66, scope: !7)
!18 = !DILocation(line: 35, column: 74, scope: !7)
!19 = !DILocation(line: 35, column: 57, scope: !7)
!20 = !DILocation(line: 35, column: 71, scope: !7)
!21 = !DILocation(line: 35, column: 105, scope: !7)
!22 = !DILocation(line: 35, column: 112, scope: !7)
!23 = !DILocation(line: 35, column: 34, scope: !7)
!24 = !DILocation(line: 35, column: 130, scope: !7)
!25 = !DILocation(line: 40, column: 60, scope: !7)
!26 = !DILocation(line: 42, column: 64, scope: !7)
!27 = !DILocation(line: 192, column: 21, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!31 = !DILocation(line: 44, column: 41, scope: !7)
!32 = !DILocation(line: 193, column: 28, scope: !28, inlinedAt: !31)
!33 = !DILocation(line: 194, column: 39, scope: !28, inlinedAt: !31)
!34 = !DILocation(line: 194, column: 60, scope: !28, inlinedAt: !31)
!35 = !DILocation(line: 194, column: 49, scope: !28, inlinedAt: !31)
!36 = !DILocation(line: 196, column: 25, scope: !28, inlinedAt: !31)
!37 = !DILocation(line: 196, column: 17, scope: !28, inlinedAt: !31)
!38 = !DILocation(line: 197, column: 30, scope: !28, inlinedAt: !31)
!39 = !DILocation(line: 197, column: 38, scope: !28, inlinedAt: !31)
!40 = !DILocation(line: 197, column: 49, scope: !28, inlinedAt: !31)
!41 = !DILocation(line: 197, column: 22, scope: !28, inlinedAt: !31)
!42 = !DILocation(line: 204, column: 46, scope: !30, inlinedAt: !31)
!43 = !DILocation(line: 197, column: 15, scope: !28, inlinedAt: !31)
!44 = !DILocation(line: 49, column: 25, scope: !7)
!45 = !DILocation(line: 49, column: 36, scope: !7)
!46 = !DILocation(line: 50, column: 25, scope: !7)
!47 = !DILocation(line: 50, column: 36, scope: !7)
!48 = !DILocation(line: 52, column: 18, scope: !7)
!49 = !DILocation(line: 54, column: 18, scope: !7)
!50 = !DILocation(line: 55, column: 27, scope: !7)
!51 = !DILocation(line: 56, column: 25, scope: !7)
!52 = !DILocation(line: 56, column: 36, scope: !7)
!53 = !DILocation(line: 56, column: 4, scope: !7)
