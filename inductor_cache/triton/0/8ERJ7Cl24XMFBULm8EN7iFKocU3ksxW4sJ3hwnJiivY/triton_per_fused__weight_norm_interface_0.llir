; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = lshr i32 %9, 5, !dbg !12
  %12 = and i32 %9, 63, !dbg !12
  %13 = shl i32 %7, 6, !dbg !13
  %14 = or disjoint i32 %13, %12, !dbg !14
  %15 = sext i32 %14 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !15
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 %8, i32 0, i1 %8) #5, !dbg !16
  %18 = bitcast i32 %17 to float, !dbg !16
  %19 = sext i32 %7 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !17
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %8) #5, !dbg !18
  %22 = fmul float %18, %18, !dbg !19
  %23 = select i1 %8, float %22, float 0.000000e+00, !dbg !20
  %24 = bitcast float %23 to i32, !dbg !21
  %25 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %24, i32 16, i32 31), !dbg !21
  %26 = bitcast i32 %25 to float, !dbg !21
  %27 = fadd float %23, %26, !dbg !25
  %28 = bitcast float %27 to i32, !dbg !21
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 8, i32 31), !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = fadd float %27, %30, !dbg !25
  %32 = bitcast float %31 to i32, !dbg !21
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 4, i32 31), !dbg !21
  %34 = bitcast i32 %33 to float, !dbg !21
  %35 = fadd float %31, %34, !dbg !25
  %36 = bitcast float %35 to i32, !dbg !21
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 2, i32 31), !dbg !21
  %38 = bitcast i32 %37 to float, !dbg !21
  %39 = fadd float %35, %38, !dbg !25
  %40 = bitcast float %39 to i32, !dbg !21
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 1, i32 31), !dbg !21
  %42 = bitcast i32 %41 to float, !dbg !21
  %43 = fadd float %39, %42, !dbg !25
  %44 = icmp eq i32 %10, 0, !dbg !21
  %45 = and i32 %11, 1, !dbg !21
  %46 = zext nneg i32 %45 to i64, !dbg !21
  %47 = getelementptr float, ptr addrspace(3) @global_smem, i64 %46, !dbg !21
  %48 = bitcast float %43 to <1 x i32>, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %48, i1 %44) #5, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %49 = icmp slt i32 %9, 2, !dbg !21
  %50 = sext i32 %9 to i64, !dbg !21
  %51 = getelementptr float, ptr addrspace(3) @global_smem, i64 %50, !dbg !21
  %52 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %51, i1 %49) #5, !dbg !21
  %53 = bitcast i32 %52 to float, !dbg !21
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 1, i32 31), !dbg !21
  %55 = bitcast i32 %54 to float, !dbg !21
  %56 = fadd float %53, %55, !dbg !25
  %57 = and i32 %9, 1, !dbg !21
  %58 = icmp eq i32 %57, 0, !dbg !21
  %59 = and i1 %49, %58, !dbg !21
  %60 = bitcast float %56 to <1 x i32>, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %60, i1 %59) #5, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %61 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !21
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !27
  %.not.i = icmp eq i32 %62, 0, !dbg !27
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !27
  %.not1.i = icmp eq i32 %63, 0, !dbg !27
  br i1 %.not.i, label %69, label %64, !dbg !27

64:                                               ; preds = %6
  br i1 %.not1.i, label %67, label %65, !dbg !27

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

69:                                               ; preds = %6
  br i1 %.not1.i, label %72, label %70, !dbg !27

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !27
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !27
  %.not.i1 = icmp eq i32 %74, 0, !dbg !27
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !27
  %.not1.i4 = icmp eq i32 %75, 0, !dbg !27
  br i1 %.not.i1, label %81, label %76, !dbg !27

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !27

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #5, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #5, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %84, label %82, !dbg !27

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #5, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #5, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

__nv_sqrtf.exit5:                                 ; preds = %77, %79, %82, %84
  %.0.i3 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !27
  %86 = bitcast i32 %21 to float, !dbg !18
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %.0.i3) #5, !dbg !28
  %88 = fmul float %87, %18, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !31
  %90 = icmp eq i32 %12, 0, !dbg !32
  %91 = bitcast float %.0.i to i32, !dbg !32
  %92 = and i1 %90, %8, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %91, ptr addrspace(1) %89, i1 %92) #5, !dbg !32
  %93 = getelementptr float, ptr addrspace(1) %3, i64 %15, !dbg !33
  %94 = bitcast float %88 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %94, ptr addrspace(1) %93, i1 %8) #5, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyy7y4xbdsigie2ahqjcqv7afvgkj2egm6okstz2nuqobcjclnfj.py", directory: "inductor_cache/yy")
!4 = !{ptr @triton_per_fused__weight_norm_interface_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_0", linkageName: "triton_per_fused__weight_norm_interface_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 32, column: 30, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 18, scope: !7)
!20 = !DILocation(line: 35, column: 33, scope: !7)
!21 = !DILocation(line: 267, column: 36, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = !DILocation(line: 36, column: 24, scope: !7)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !24)
!26 = distinct !DILexicalBlockFile(scope: !22, file: !23, discriminator: 0)
!27 = !DILocation(line: 37, column: 26, scope: !7)
!28 = !DILocation(line: 38, column: 18, scope: !7)
!29 = !DILocation(line: 39, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 4, scope: !7)
!31 = !DILocation(line: 41, column: 28, scope: !7)
!32 = !DILocation(line: 41, column: 39, scope: !7)
!33 = !DILocation(line: 42, column: 25, scope: !7)
!34 = !DILocation(line: 42, column: 44, scope: !7)
!35 = !DILocation(line: 42, column: 4, scope: !7)
