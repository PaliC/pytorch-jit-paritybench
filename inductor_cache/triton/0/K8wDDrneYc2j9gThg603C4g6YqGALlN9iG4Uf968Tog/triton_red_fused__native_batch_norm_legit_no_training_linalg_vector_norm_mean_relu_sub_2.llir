; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = and i32 %7, 31, !dbg !11
  %9 = lshr i32 %7, 5, !dbg !11
  %10 = shl i32 %7, 2, !dbg !11
  %11 = and i32 %10, 252, !dbg !11
  %12 = and i32 %7, 63, !dbg !11
  %13 = or disjoint i32 %12, 64, !dbg !11
  %14 = or disjoint i32 %12, 128, !dbg !11
  %15 = or disjoint i32 %12, 192, !dbg !11
  %.frozen = freeze i32 %6, !dbg !12
  %16 = sdiv i32 %.frozen, 4096, !dbg !12
  %17 = mul i32 %16, 4096, !dbg !13
  %.decomposed = sub i32 %.frozen, %17, !dbg !13
  %18 = shl nuw nsw i32 %12, 12, !dbg !14
  %19 = shl nuw nsw i32 %13, 12, !dbg !14
  %20 = shl nuw nsw i32 %14, 12, !dbg !14
  %21 = shl nuw nsw i32 %15, 12, !dbg !14
  %22 = shl i32 %16, 20, !dbg !15
  %23 = add i32 %22, %.decomposed, !dbg !16
  %24 = add i32 %23, %18, !dbg !17
  %25 = add i32 %23, %19, !dbg !17
  %26 = add i32 %23, %20, !dbg !17
  %27 = add i32 %23, %21, !dbg !17
  %28 = sext i32 %24 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !18
  %30 = sext i32 %25 to i64, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !18
  %32 = sext i32 %26 to i64, !dbg !18
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !18
  %34 = sext i32 %27 to i64, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !18
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 true, i32 0, i1 true) #3, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 true, i32 0, i1 true) #3, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 true, i32 0, i1 true) #3, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 true, i32 0, i1 true) #3, !dbg !19
  %40 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !19
  %41 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %41, i1 true) #3, !dbg !19
  %42 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !19
  %43 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %43, i1 true) #3, !dbg !19
  %44 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !19
  %45 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %44, <1 x i32> %45, i1 true) #3, !dbg !19
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !19
  %47 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %47, i1 true) #3, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !19
  %49 = getelementptr inbounds i8, ptr addrspace(3) %48, i32 8, !dbg !19
  %50 = shl nsw i32 %16, 8, !dbg !20
  %51 = or disjoint i32 %50, %11, !dbg !21
  %52 = sext i32 %51 to i64, !dbg !22
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !22
  %54 = load <2 x float>, ptr addrspace(3) %49, align 8, !dbg !19
  %55 = load <2 x float>, ptr addrspace(3) %48, align 16, !dbg !19
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !23
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !23
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !23
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !23
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !23
  %61 = bitcast i32 %57 to float, !dbg !23
  %62 = bitcast i32 %58 to float, !dbg !23
  %63 = bitcast i32 %59 to float, !dbg !23
  %64 = bitcast i32 %60 to float, !dbg !23
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float 4.096000e+03) #3, !dbg !24
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float 4.096000e+03) #3, !dbg !24
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float 4.096000e+03) #3, !dbg !24
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float 4.096000e+03) #3, !dbg !24
  %69 = insertelement <2 x float> poison, float %65, i64 0, !dbg !25
  %70 = insertelement <2 x float> %69, float %66, i64 1, !dbg !25
  %71 = fsub <2 x float> %55, %70, !dbg !25
  %72 = insertelement <2 x float> poison, float %67, i64 0, !dbg !25
  %73 = insertelement <2 x float> %72, float %68, i64 1, !dbg !25
  %74 = fsub <2 x float> %54, %73, !dbg !25
  %75 = fmul <2 x float> %71, %71, !dbg !26
  %76 = fmul <2 x float> %74, %74, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %shift = shufflevector <2 x float> %75, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !31
  %77 = fadd <2 x float> %75, %shift, !dbg !31
  %78 = fadd <2 x float> %77, %76, !dbg !31
  %shift4 = shufflevector <2 x float> %76, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !31
  %79 = fadd <2 x float> %78, %shift4, !dbg !31
  %80 = extractelement <2 x float> %79, i64 0, !dbg !31
  %81 = bitcast float %80 to i32, !dbg !27
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 16, i32 31), !dbg !27
  %83 = bitcast i32 %82 to float, !dbg !27
  %84 = fadd float %80, %83, !dbg !31
  %85 = bitcast float %84 to i32, !dbg !27
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 8, i32 31), !dbg !27
  %87 = bitcast i32 %86 to float, !dbg !27
  %88 = fadd float %84, %87, !dbg !31
  %89 = bitcast float %88 to i32, !dbg !27
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 4, i32 31), !dbg !27
  %91 = bitcast i32 %90 to float, !dbg !27
  %92 = fadd float %88, %91, !dbg !31
  %93 = bitcast float %92 to i32, !dbg !27
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 2, i32 31), !dbg !27
  %95 = bitcast i32 %94 to float, !dbg !27
  %96 = fadd float %92, %95, !dbg !31
  %97 = bitcast float %96 to i32, !dbg !27
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !27
  %99 = bitcast i32 %98 to float, !dbg !27
  %100 = fadd float %96, %99, !dbg !31
  %101 = icmp eq i32 %8, 0, !dbg !27
  %102 = and i32 %9, 1, !dbg !27
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !27
  %104 = bitcast float %100 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 %101) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %105 = icmp slt i32 %7, 2, !dbg !27
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !27
  %107 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %106, i1 %105) #3, !dbg !27
  %108 = bitcast i32 %107 to float, !dbg !27
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 1, i32 31), !dbg !27
  %110 = bitcast i32 %109 to float, !dbg !27
  %111 = fadd float %108, %110, !dbg !31
  %112 = and i32 %7, 1, !dbg !27
  %113 = icmp eq i32 %112, 0, !dbg !27
  %114 = and i1 %105, %113, !dbg !27
  %115 = bitcast float %111 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %115, i1 %114) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %116 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %117 = sext i32 %6 to i64, !dbg !33
  %118 = getelementptr float, ptr addrspace(1) %2, i64 %117, !dbg !33
  %119 = icmp eq i32 %12, 0, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %116, ptr addrspace(1) %118, i1 %119) #3, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py", directory: "inductor_cache/y5")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2", linkageName: "triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 33, scope: !7)
!12 = !DILocation(line: 27, column: 19, scope: !7)
!13 = !DILocation(line: 26, column: 19, scope: !7)
!14 = !DILocation(line: 34, column: 44, scope: !7)
!15 = !DILocation(line: 34, column: 57, scope: !7)
!16 = !DILocation(line: 34, column: 39, scope: !7)
!17 = !DILocation(line: 34, column: 49, scope: !7)
!18 = !DILocation(line: 34, column: 34, scope: !7)
!19 = !DILocation(line: 34, column: 62, scope: !7)
!20 = !DILocation(line: 35, column: 43, scope: !7)
!21 = !DILocation(line: 35, column: 39, scope: !7)
!22 = !DILocation(line: 35, column: 34, scope: !7)
!23 = !DILocation(line: 35, column: 48, scope: !7)
!24 = !DILocation(line: 37, column: 22, scope: !7)
!25 = !DILocation(line: 38, column: 22, scope: !7)
!26 = !DILocation(line: 39, column: 22, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = !DILocation(line: 43, column: 25, scope: !7)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !30)
!32 = distinct !DILexicalBlockFile(scope: !28, file: !29, discriminator: 0)
!33 = !DILocation(line: 44, column: 25, scope: !7)
!34 = !DILocation(line: 44, column: 36, scope: !7)
!35 = !DILocation(line: 44, column: 4, scope: !7)
