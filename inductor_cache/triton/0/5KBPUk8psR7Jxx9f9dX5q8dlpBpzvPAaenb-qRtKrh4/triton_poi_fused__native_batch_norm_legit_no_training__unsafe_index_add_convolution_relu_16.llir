; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, i32 %20) local_unnamed_addr !dbg !7 {
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %23 = shl i32 %22, 8, !dbg !11
  %24 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %25 = shl i32 %24, 1, !dbg !12
  %26 = and i32 %25, 254, !dbg !12
  %27 = or disjoint i32 %23, %26, !dbg !13
  %28 = sdiv i32 %27, 256, !dbg !14
  %29 = srem i32 %28, 16, !dbg !15
  %.frozen = freeze i32 %27, !dbg !16
  %30 = sdiv i32 %.frozen, 16, !dbg !16
  %31 = srem i32 %30, 16, !dbg !17
  %32 = mul i32 %30, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %32, !dbg !18
  %33 = sext i32 %27 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !19
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !20
  %36 = sext i32 %29 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !21
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !26
  %45 = bitcast i32 %44 to float, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !26
  %47 = bitcast i32 %46 to float, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !27
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !29
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !30
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !30
  %54 = sext i32 %31 to i64, !dbg !31
  %55 = getelementptr i64, ptr addrspace(1) %6, i64 %54, !dbg !31
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !32
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !32
  %58 = sext i32 %.decomposed to i64, !dbg !33
  %59 = getelementptr i64, ptr addrspace(1) %6, i64 %58, !dbg !33
  %60 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !34
  %61 = extractvalue { i64, i64 } %60, 0, !dbg !34
  %62 = extractvalue { i64, i64 } %60, 1, !dbg !34
  %63 = getelementptr float, ptr addrspace(1) %8, i64 %36, !dbg !35
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !36
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !36
  %66 = getelementptr float, ptr addrspace(1) %9, i64 %36, !dbg !37
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !38
  %68 = bitcast i32 %67 to float, !dbg !38
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !38
  %70 = bitcast i32 %69 to float, !dbg !38
  %71 = getelementptr float, ptr addrspace(1) %10, i64 %36, !dbg !39
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !40
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !40
  %74 = getelementptr float, ptr addrspace(1) %11, i64 %36, !dbg !41
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !42
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !42
  %77 = getelementptr i64, ptr addrspace(1) %12, i64 %54, !dbg !43
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !44
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !44
  %80 = getelementptr i64, ptr addrspace(1) %12, i64 %58, !dbg !45
  %81 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !46
  %82 = extractvalue { i64, i64 } %81, 0, !dbg !46
  %83 = extractvalue { i64, i64 } %81, 1, !dbg !46
  %84 = getelementptr float, ptr addrspace(1) %14, i64 %36, !dbg !47
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !48
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !48
  %87 = getelementptr float, ptr addrspace(1) %15, i64 %36, !dbg !49
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !50
  %89 = bitcast i32 %88 to float, !dbg !50
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !50
  %91 = bitcast i32 %90 to float, !dbg !50
  %92 = getelementptr float, ptr addrspace(1) %16, i64 %36, !dbg !51
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !52
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !52
  %95 = getelementptr float, ptr addrspace(1) %17, i64 %36, !dbg !53
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !54
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !54
  %98 = fadd float %45, 0x3EE4F8B580000000, !dbg !55
  %99 = fadd float %47, 0x3EE4F8B580000000, !dbg !55
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i = icmp eq i32 %100, 0, !dbg !56
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i = icmp eq i32 %101, 0, !dbg !56
  br i1 %.not.i, label %107, label %102, !dbg !56

102:                                              ; preds = %21
  br i1 %.not1.i, label %105, label %103, !dbg !56

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

107:                                              ; preds = %21
  br i1 %.not1.i, label %110, label %108, !dbg !56

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

__nv_sqrtf.exit:                                  ; preds = %103, %105, %108, %110
  %.0.i = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !56
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i1 = icmp eq i32 %112, 0, !dbg !56
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i4 = icmp eq i32 %113, 0, !dbg !56
  br i1 %.not.i1, label %119, label %114, !dbg !56

114:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %117, label %115, !dbg !56

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !56
  br label %__nv_sqrtf.exit5, !dbg !56

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !56
  br label %__nv_sqrtf.exit5, !dbg !56

119:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %122, label %120, !dbg !56

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !56
  br label %__nv_sqrtf.exit5, !dbg !56

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !56
  br label %__nv_sqrtf.exit5, !dbg !56

__nv_sqrtf.exit5:                                 ; preds = %115, %117, %120, %122
  %.0.i3 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !56
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !57
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !57
  %126 = lshr i64 %56, 60, !dbg !58
  %127 = and i64 %126, 8, !dbg !58
  %128 = add i64 %127, %56, !dbg !58
  %129 = lshr i64 %61, 60, !dbg !59
  %130 = and i64 %129, 8, !dbg !59
  %131 = lshr i64 %62, 60, !dbg !59
  %132 = and i64 %131, 8, !dbg !59
  %133 = shl i64 %128, 3, !dbg !60
  %134 = shl nsw i32 %28, 6, !dbg !61
  %135 = sext i32 %134 to i64, !dbg !62
  %136 = getelementptr float, ptr addrspace(1) %7, i64 %61, !dbg !63
  %137 = getelementptr float, ptr addrspace(1) %136, i64 %130, !dbg !63
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %133, !dbg !63
  %139 = getelementptr float, ptr addrspace(1) %138, i64 %135, !dbg !63
  %140 = getelementptr float, ptr addrspace(1) %7, i64 %62, !dbg !63
  %141 = getelementptr float, ptr addrspace(1) %140, i64 %132, !dbg !63
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %133, !dbg !63
  %143 = getelementptr float, ptr addrspace(1) %142, i64 %135, !dbg !63
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 true) #3, !dbg !64
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 true) #3, !dbg !64
  %146 = fadd float %68, 0x3EE4F8B580000000, !dbg !65
  %147 = fadd float %70, 0x3EE4F8B580000000, !dbg !65
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i6 = icmp eq i32 %148, 0, !dbg !66
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i9 = icmp eq i32 %149, 0, !dbg !66
  br i1 %.not.i6, label %155, label %150, !dbg !66

150:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %153, label %151, !dbg !66

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %146) #3, !dbg !66
  br label %__nv_sqrtf.exit10, !dbg !66

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %146) #3, !dbg !66
  br label %__nv_sqrtf.exit10, !dbg !66

155:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %158, label %156, !dbg !66

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %146) #3, !dbg !66
  br label %__nv_sqrtf.exit10, !dbg !66

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %146) #3, !dbg !66
  br label %__nv_sqrtf.exit10, !dbg !66

__nv_sqrtf.exit10:                                ; preds = %151, %153, %156, %158
  %.0.i8 = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !66
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i11 = icmp eq i32 %160, 0, !dbg !66
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i14 = icmp eq i32 %161, 0, !dbg !66
  br i1 %.not.i11, label %167, label %162, !dbg !66

162:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %165, label %163, !dbg !66

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %147) #3, !dbg !66
  br label %__nv_sqrtf.exit15, !dbg !66

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %147) #3, !dbg !66
  br label %__nv_sqrtf.exit15, !dbg !66

167:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %170, label %168, !dbg !66

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %147) #3, !dbg !66
  br label %__nv_sqrtf.exit15, !dbg !66

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %147) #3, !dbg !66
  br label %__nv_sqrtf.exit15, !dbg !66

__nv_sqrtf.exit15:                                ; preds = %163, %165, %168, %170
  %.0.i13 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !66
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !67
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !67
  %174 = lshr i64 %78, 61, !dbg !68
  %175 = and i64 %174, 4, !dbg !68
  %176 = add i64 %175, %78, !dbg !68
  %177 = lshr i64 %82, 61, !dbg !69
  %178 = and i64 %177, 4, !dbg !69
  %179 = lshr i64 %83, 61, !dbg !69
  %180 = and i64 %179, 4, !dbg !69
  %181 = shl i64 %176, 2, !dbg !70
  %182 = shl nsw i32 %28, 4, !dbg !71
  %183 = sext i32 %182 to i64, !dbg !72
  %184 = getelementptr float, ptr addrspace(1) %13, i64 %82, !dbg !73
  %185 = getelementptr float, ptr addrspace(1) %184, i64 %178, !dbg !73
  %186 = getelementptr float, ptr addrspace(1) %185, i64 %181, !dbg !73
  %187 = getelementptr float, ptr addrspace(1) %186, i64 %183, !dbg !73
  %188 = getelementptr float, ptr addrspace(1) %13, i64 %83, !dbg !73
  %189 = getelementptr float, ptr addrspace(1) %188, i64 %180, !dbg !73
  %190 = getelementptr float, ptr addrspace(1) %189, i64 %181, !dbg !73
  %191 = getelementptr float, ptr addrspace(1) %190, i64 %183, !dbg !73
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 true) #3, !dbg !74
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 true) #3, !dbg !74
  %194 = fadd float %89, 0x3EE4F8B580000000, !dbg !75
  %195 = fadd float %91, 0x3EE4F8B580000000, !dbg !75
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i16 = icmp eq i32 %196, 0, !dbg !76
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i19 = icmp eq i32 %197, 0, !dbg !76
  br i1 %.not.i16, label %203, label %198, !dbg !76

198:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %201, label %199, !dbg !76

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %194) #3, !dbg !76
  br label %__nv_sqrtf.exit20, !dbg !76

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %194) #3, !dbg !76
  br label %__nv_sqrtf.exit20, !dbg !76

203:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %206, label %204, !dbg !76

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.f(float %194) #3, !dbg !76
  br label %__nv_sqrtf.exit20, !dbg !76

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.f(float %194) #3, !dbg !76
  br label %__nv_sqrtf.exit20, !dbg !76

__nv_sqrtf.exit20:                                ; preds = %199, %201, %204, %206
  %.0.i18 = phi float [ %200, %199 ], [ %202, %201 ], [ %205, %204 ], [ %207, %206 ], !dbg !76
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i21 = icmp eq i32 %208, 0, !dbg !76
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i24 = icmp eq i32 %209, 0, !dbg !76
  br i1 %.not.i21, label %215, label %210, !dbg !76

210:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %213, label %211, !dbg !76

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %195) #3, !dbg !76
  br label %__nv_sqrtf.exit25, !dbg !76

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %195) #3, !dbg !76
  br label %__nv_sqrtf.exit25, !dbg !76

215:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %218, label %216, !dbg !76

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.f(float %195) #3, !dbg !76
  br label %__nv_sqrtf.exit25, !dbg !76

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.f(float %195) #3, !dbg !76
  br label %__nv_sqrtf.exit25, !dbg !76

__nv_sqrtf.exit25:                                ; preds = %211, %213, %216, %218
  %.0.i23 = phi float [ %212, %211 ], [ %214, %213 ], [ %217, %216 ], [ %219, %218 ], !dbg !76
  %220 = insertelement <2 x i32> poison, i32 %145, i64 0, !dbg !64
  %221 = insertelement <2 x i32> %220, i32 %193, i64 1, !dbg !64
  %222 = bitcast <2 x i32> %221 to <2 x float>, !dbg !64
  %223 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !36
  %224 = insertelement <2 x i32> %223, i32 %86, i64 1, !dbg !36
  %225 = bitcast <2 x i32> %224 to <2 x float>, !dbg !36
  %226 = insertelement <2 x i32> poison, i32 %144, i64 0, !dbg !64
  %227 = insertelement <2 x i32> %226, i32 %192, i64 1, !dbg !64
  %228 = bitcast <2 x i32> %227 to <2 x float>, !dbg !64
  %229 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !36
  %230 = insertelement <2 x i32> %229, i32 %85, i64 1, !dbg !36
  %231 = bitcast <2 x i32> %230 to <2 x float>, !dbg !36
  %232 = extractvalue { i32, i32 } %35, 1, !dbg !20
  %233 = bitcast i32 %232 to float, !dbg !20
  %234 = bitcast i32 %39 to float, !dbg !22
  %235 = fadd float %233, %234, !dbg !77
  %236 = bitcast i32 %42 to float, !dbg !24
  %237 = fsub float %235, %236, !dbg !78
  %238 = fmul float %237, %125, !dbg !79
  %239 = bitcast i32 %50 to float, !dbg !28
  %240 = fmul float %238, %239, !dbg !80
  %241 = bitcast i32 %53 to float, !dbg !30
  %242 = fadd float %240, %241, !dbg !81
  %243 = fcmp olt float %242, 0.000000e+00, !dbg !82
  %244 = select i1 %243, float 0.000000e+00, float %242, !dbg !86
  %245 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !40
  %246 = insertelement <2 x i32> %245, i32 %94, i64 1, !dbg !40
  %247 = bitcast <2 x i32> %246 to <2 x float>, !dbg !40
  %248 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !42
  %249 = insertelement <2 x i32> %248, i32 %97, i64 1, !dbg !42
  %250 = bitcast <2 x i32> %249 to <2 x float>, !dbg !42
  %251 = extractvalue { i32, i32 } %35, 0, !dbg !20
  %252 = bitcast i32 %251 to float, !dbg !20
  %253 = bitcast i32 %38 to float, !dbg !22
  %254 = fadd float %252, %253, !dbg !77
  %255 = bitcast i32 %41 to float, !dbg !24
  %256 = fsub float %254, %255, !dbg !78
  %257 = fmul float %256, %124, !dbg !79
  %258 = bitcast i32 %49 to float, !dbg !28
  %259 = fmul float %257, %258, !dbg !80
  %260 = bitcast i32 %52 to float, !dbg !30
  %261 = fadd float %259, %260, !dbg !81
  %262 = fcmp olt float %261, 0.000000e+00, !dbg !82
  %263 = select i1 %262, float 0.000000e+00, float %261, !dbg !86
  %264 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !40
  %265 = insertelement <2 x i32> %264, i32 %93, i64 1, !dbg !40
  %266 = bitcast <2 x i32> %265 to <2 x float>, !dbg !40
  %267 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !42
  %268 = insertelement <2 x i32> %267, i32 %96, i64 1, !dbg !42
  %269 = bitcast <2 x i32> %268 to <2 x float>, !dbg !42
  %270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !87
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !87
  %272 = fsub <2 x float> %228, %231, !dbg !88
  %273 = insertelement <2 x float> poison, float %172, i64 0, !dbg !89
  %274 = insertelement <2 x float> %273, float %270, i64 1, !dbg !89
  %275 = fmul <2 x float> %272, %274, !dbg !89
  %276 = fmul <2 x float> %275, %266, !dbg !90
  %277 = fadd <2 x float> %276, %269, !dbg !91
  %278 = extractelement <2 x float> %277, i64 0, !dbg !92
  %279 = fadd float %263, %278, !dbg !92
  %280 = fsub <2 x float> %222, %225, !dbg !88
  %281 = insertelement <2 x float> poison, float %173, i64 0, !dbg !89
  %282 = insertelement <2 x float> %281, float %271, i64 1, !dbg !89
  %283 = fmul <2 x float> %280, %282, !dbg !89
  %284 = fmul <2 x float> %283, %247, !dbg !90
  %285 = fadd <2 x float> %284, %250, !dbg !91
  %286 = extractelement <2 x float> %285, i64 0, !dbg !92
  %287 = fadd float %244, %286, !dbg !92
  %288 = extractelement <2 x float> %277, i64 1, !dbg !93
  %289 = fadd float %279, %288, !dbg !93
  %290 = extractelement <2 x float> %285, i64 1, !dbg !93
  %291 = fadd float %287, %290, !dbg !93
  %292 = bitcast float %254 to i32, !dbg !94
  %293 = bitcast float %235 to i32, !dbg !94
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %292, i32 %293, ptr addrspace(1) %34, i1 true) #3, !dbg !94
  %294 = getelementptr float, ptr addrspace(1) %18, i64 %33, !dbg !95
  %295 = bitcast float %263 to i32, !dbg !96
  %296 = bitcast float %244 to i32, !dbg !96
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %295, i32 %296, ptr addrspace(1) %294, i1 true) #3, !dbg !96
  %297 = getelementptr float, ptr addrspace(1) %19, i64 %33, !dbg !97
  %298 = bitcast float %289 to i32, !dbg !98
  %299 = bitcast float %291 to i32, !dbg !98
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %298, i32 %299, ptr addrspace(1) %297, i1 true) #3, !dbg !98
  ret void, !dbg !99
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3rczbs3bcd6sjijajphyczp5mz6guckwyvs7qyzqjorlwc2pjes.py", directory: "inductor_cache/3r")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_16", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 34, scope: !7)
!20 = !DILocation(line: 29, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 31, scope: !7)
!40 = !DILocation(line: 39, column: 36, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 42, column: 32, scope: !7)
!46 = !DILocation(line: 42, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 32, scope: !7)
!48 = !DILocation(line: 43, column: 37, scope: !7)
!49 = !DILocation(line: 44, column: 32, scope: !7)
!50 = !DILocation(line: 44, column: 37, scope: !7)
!51 = !DILocation(line: 45, column: 32, scope: !7)
!52 = !DILocation(line: 45, column: 37, scope: !7)
!53 = !DILocation(line: 46, column: 32, scope: !7)
!54 = !DILocation(line: 46, column: 37, scope: !7)
!55 = !DILocation(line: 50, column: 18, scope: !7)
!56 = !DILocation(line: 51, column: 26, scope: !7)
!57 = !DILocation(line: 53, column: 19, scope: !7)
!58 = !DILocation(line: 64, column: 35, scope: !7)
!59 = !DILocation(line: 67, column: 35, scope: !7)
!60 = !DILocation(line: 68, column: 41, scope: !7)
!61 = !DILocation(line: 68, column: 52, scope: !7)
!62 = !DILocation(line: 68, column: 49, scope: !7)
!63 = !DILocation(line: 68, column: 31, scope: !7)
!64 = !DILocation(line: 68, column: 57, scope: !7)
!65 = !DILocation(line: 70, column: 20, scope: !7)
!66 = !DILocation(line: 71, column: 27, scope: !7)
!67 = !DILocation(line: 72, column: 19, scope: !7)
!68 = !DILocation(line: 81, column: 35, scope: !7)
!69 = !DILocation(line: 84, column: 35, scope: !7)
!70 = !DILocation(line: 85, column: 42, scope: !7)
!71 = !DILocation(line: 85, column: 53, scope: !7)
!72 = !DILocation(line: 85, column: 50, scope: !7)
!73 = !DILocation(line: 85, column: 32, scope: !7)
!74 = !DILocation(line: 85, column: 58, scope: !7)
!75 = !DILocation(line: 87, column: 20, scope: !7)
!76 = !DILocation(line: 88, column: 27, scope: !7)
!77 = !DILocation(line: 47, column: 18, scope: !7)
!78 = !DILocation(line: 48, column: 18, scope: !7)
!79 = !DILocation(line: 56, column: 19, scope: !7)
!80 = !DILocation(line: 57, column: 20, scope: !7)
!81 = !DILocation(line: 58, column: 20, scope: !7)
!82 = !DILocation(line: 118, column: 15, scope: !83, inlinedAt: !85)
!83 = distinct !DILexicalBlockFile(scope: !7, file: !84, discriminator: 0)
!84 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!85 = !DILocation(line: 60, column: 42, scope: !7)
!86 = !DILocation(line: 121, column: 29, scope: !83, inlinedAt: !85)
!87 = !DILocation(line: 89, column: 19, scope: !7)
!88 = !DILocation(line: 69, column: 20, scope: !7)
!89 = !DILocation(line: 74, column: 20, scope: !7)
!90 = !DILocation(line: 75, column: 20, scope: !7)
!91 = !DILocation(line: 76, column: 20, scope: !7)
!92 = !DILocation(line: 77, column: 20, scope: !7)
!93 = !DILocation(line: 94, column: 20, scope: !7)
!94 = !DILocation(line: 95, column: 39, scope: !7)
!95 = !DILocation(line: 96, column: 25, scope: !7)
!96 = !DILocation(line: 96, column: 37, scope: !7)
!97 = !DILocation(line: 97, column: 25, scope: !7)
!98 = !DILocation(line: 97, column: 37, scope: !7)
!99 = !DILocation(line: 97, column: 4, scope: !7)
