; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 9, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = sdiv i32 %20, 64, !dbg !14
  %22 = srem i32 %21, 256, !dbg !15
  %23 = sext i32 %20 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !16
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !17
  %26 = sext i32 %22 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !18
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !20
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !24
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !26
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !27
  %46 = bitcast i32 %45 to float, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !27
  %48 = bitcast i32 %47 to float, !dbg !27
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !27
  %50 = bitcast i32 %49 to float, !dbg !27
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !27
  %52 = bitcast i32 %51 to float, !dbg !27
  %53 = getelementptr float, ptr addrspace(1) %7, i64 %26, !dbg !28
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !29
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !29
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !29
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !29
  %58 = getelementptr float, ptr addrspace(1) %8, i64 %26, !dbg !30
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !31
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !31
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !31
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !31
  %63 = getelementptr float, ptr addrspace(1) %9, i64 %26, !dbg !32
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !33
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !33
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !33
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !33
  %68 = getelementptr float, ptr addrspace(1) %10, i64 %26, !dbg !34
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !35
  %70 = bitcast i32 %69 to float, !dbg !35
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !35
  %72 = bitcast i32 %71 to float, !dbg !35
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !35
  %74 = bitcast i32 %73 to float, !dbg !35
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !35
  %76 = bitcast i32 %75 to float, !dbg !35
  %77 = getelementptr float, ptr addrspace(1) %11, i64 %26, !dbg !36
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !37
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !37
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !37
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !37
  %82 = getelementptr float, ptr addrspace(1) %12, i64 %26, !dbg !38
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !39
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !39
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !39
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !39
  %87 = fadd float %46, 0x3EE4F8B580000000, !dbg !40
  %88 = fadd float %48, 0x3EE4F8B580000000, !dbg !40
  %89 = fadd float %50, 0x3EE4F8B580000000, !dbg !40
  %90 = fadd float %52, 0x3EE4F8B580000000, !dbg !40
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %91, 0, !dbg !41
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i = icmp eq i32 %92, 0, !dbg !41
  br i1 %.not.i, label %98, label %93, !dbg !41

93:                                               ; preds = %14
  br i1 %.not1.i, label %96, label %94, !dbg !41

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

98:                                               ; preds = %14
  br i1 %.not1.i, label %101, label %99, !dbg !41

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %94, %96, %99, %101
  %.0.i = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !41
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %103, 0, !dbg !41
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i4 = icmp eq i32 %104, 0, !dbg !41
  br i1 %.not.i1, label %110, label %105, !dbg !41

105:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %108, label %106, !dbg !41

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

110:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %113, label %111, !dbg !41

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %106, %108, %111, %113
  %.0.i3 = phi float [ %107, %106 ], [ %109, %108 ], [ %112, %111 ], [ %114, %113 ], !dbg !41
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i6 = icmp eq i32 %115, 0, !dbg !41
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i9 = icmp eq i32 %116, 0, !dbg !41
  br i1 %.not.i6, label %122, label %117, !dbg !41

117:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %120, label %118, !dbg !41

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

122:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %125, label %123, !dbg !41

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

__nv_sqrtf.exit10:                                ; preds = %118, %120, %123, %125
  %.0.i8 = phi float [ %119, %118 ], [ %121, %120 ], [ %124, %123 ], [ %126, %125 ], !dbg !41
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i11 = icmp eq i32 %127, 0, !dbg !41
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i14 = icmp eq i32 %128, 0, !dbg !41
  br i1 %.not.i11, label %134, label %129, !dbg !41

129:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %132, label %130, !dbg !41

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

134:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %137, label %135, !dbg !41

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

__nv_sqrtf.exit15:                                ; preds = %130, %132, %135, %137
  %.0.i13 = phi float [ %131, %130 ], [ %133, %132 ], [ %136, %135 ], [ %138, %137 ], !dbg !41
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !42
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !42
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !42
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !42
  %143 = fadd float %70, 0x3EE4F8B580000000, !dbg !43
  %144 = fadd float %72, 0x3EE4F8B580000000, !dbg !43
  %145 = fadd float %74, 0x3EE4F8B580000000, !dbg !43
  %146 = fadd float %76, 0x3EE4F8B580000000, !dbg !43
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i16 = icmp eq i32 %147, 0, !dbg !44
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i19 = icmp eq i32 %148, 0, !dbg !44
  br i1 %.not.i16, label %154, label %149, !dbg !44

149:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %152, label %150, !dbg !44

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %143) #3, !dbg !44
  br label %__nv_sqrtf.exit20, !dbg !44

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %143) #3, !dbg !44
  br label %__nv_sqrtf.exit20, !dbg !44

154:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %157, label %155, !dbg !44

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %143) #3, !dbg !44
  br label %__nv_sqrtf.exit20, !dbg !44

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %143) #3, !dbg !44
  br label %__nv_sqrtf.exit20, !dbg !44

__nv_sqrtf.exit20:                                ; preds = %150, %152, %155, %157
  %.0.i18 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !44
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i21 = icmp eq i32 %159, 0, !dbg !44
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i24 = icmp eq i32 %160, 0, !dbg !44
  br i1 %.not.i21, label %166, label %161, !dbg !44

161:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %164, label %162, !dbg !44

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %144) #3, !dbg !44
  br label %__nv_sqrtf.exit25, !dbg !44

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %144) #3, !dbg !44
  br label %__nv_sqrtf.exit25, !dbg !44

166:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %169, label %167, !dbg !44

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %144) #3, !dbg !44
  br label %__nv_sqrtf.exit25, !dbg !44

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %144) #3, !dbg !44
  br label %__nv_sqrtf.exit25, !dbg !44

__nv_sqrtf.exit25:                                ; preds = %162, %164, %167, %169
  %.0.i23 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !44
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i26 = icmp eq i32 %171, 0, !dbg !44
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i29 = icmp eq i32 %172, 0, !dbg !44
  br i1 %.not.i26, label %178, label %173, !dbg !44

173:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %176, label %174, !dbg !44

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %145) #3, !dbg !44
  br label %__nv_sqrtf.exit30, !dbg !44

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %145) #3, !dbg !44
  br label %__nv_sqrtf.exit30, !dbg !44

178:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %181, label %179, !dbg !44

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.f(float %145) #3, !dbg !44
  br label %__nv_sqrtf.exit30, !dbg !44

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.f(float %145) #3, !dbg !44
  br label %__nv_sqrtf.exit30, !dbg !44

__nv_sqrtf.exit30:                                ; preds = %174, %176, %179, %181
  %.0.i28 = phi float [ %175, %174 ], [ %177, %176 ], [ %180, %179 ], [ %182, %181 ], !dbg !44
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i31 = icmp eq i32 %183, 0, !dbg !44
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i34 = icmp eq i32 %184, 0, !dbg !44
  br i1 %.not.i31, label %190, label %185, !dbg !44

185:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %188, label %186, !dbg !44

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %146) #3, !dbg !44
  br label %__nv_sqrtf.exit35, !dbg !44

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %146) #3, !dbg !44
  br label %__nv_sqrtf.exit35, !dbg !44

190:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %193, label %191, !dbg !44

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.f(float %146) #3, !dbg !44
  br label %__nv_sqrtf.exit35, !dbg !44

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.f(float %146) #3, !dbg !44
  br label %__nv_sqrtf.exit35, !dbg !44

__nv_sqrtf.exit35:                                ; preds = %186, %188, %191, %193
  %.0.i33 = phi float [ %187, %186 ], [ %189, %188 ], [ %192, %191 ], [ %194, %193 ], !dbg !44
  %195 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !21
  %196 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !19
  %197 = insertelement <2 x i32> %196, i32 %38, i64 1, !dbg !19
  %198 = bitcast <2 x i32> %197 to <2 x float>, !dbg !19
  %199 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !25
  %200 = insertelement <2 x i32> %199, i32 %67, i64 1, !dbg !25
  %201 = bitcast <2 x i32> %200 to <2 x float>, !dbg !25
  %202 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !21
  %203 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !19
  %204 = insertelement <2 x i32> %203, i32 %37, i64 1, !dbg !19
  %205 = bitcast <2 x i32> %204 to <2 x float>, !dbg !19
  %206 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !25
  %207 = insertelement <2 x i32> %206, i32 %66, i64 1, !dbg !25
  %208 = bitcast <2 x i32> %207 to <2 x float>, !dbg !25
  %209 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !21
  %210 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !19
  %211 = insertelement <2 x i32> %210, i32 %36, i64 1, !dbg !19
  %212 = bitcast <2 x i32> %211 to <2 x float>, !dbg !19
  %213 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !25
  %214 = insertelement <2 x i32> %213, i32 %65, i64 1, !dbg !25
  %215 = bitcast <2 x i32> %214 to <2 x float>, !dbg !25
  %216 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !21
  %217 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !19
  %218 = insertelement <2 x i32> %217, i32 %35, i64 1, !dbg !19
  %219 = bitcast <2 x i32> %218 to <2 x float>, !dbg !19
  %220 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !25
  %221 = insertelement <2 x i32> %220, i32 %64, i64 1, !dbg !25
  %222 = bitcast <2 x i32> %221 to <2 x float>, !dbg !25
  %223 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !17
  %224 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !29
  %225 = insertelement <2 x i32> %224, i32 %81, i64 1, !dbg !29
  %226 = bitcast <2 x i32> %225 to <2 x float>, !dbg !29
  %227 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !31
  %228 = insertelement <2 x i32> %227, i32 %86, i64 1, !dbg !31
  %229 = bitcast <2 x i32> %228 to <2 x float>, !dbg !31
  %230 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !17
  %231 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !29
  %232 = insertelement <2 x i32> %231, i32 %80, i64 1, !dbg !29
  %233 = bitcast <2 x i32> %232 to <2 x float>, !dbg !29
  %234 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !31
  %235 = insertelement <2 x i32> %234, i32 %85, i64 1, !dbg !31
  %236 = bitcast <2 x i32> %235 to <2 x float>, !dbg !31
  %237 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !17
  %238 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !29
  %239 = insertelement <2 x i32> %238, i32 %79, i64 1, !dbg !29
  %240 = bitcast <2 x i32> %239 to <2 x float>, !dbg !29
  %241 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !31
  %242 = insertelement <2 x i32> %241, i32 %84, i64 1, !dbg !31
  %243 = bitcast <2 x i32> %242 to <2 x float>, !dbg !31
  %244 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !17
  %245 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !29
  %246 = insertelement <2 x i32> %245, i32 %78, i64 1, !dbg !29
  %247 = bitcast <2 x i32> %246 to <2 x float>, !dbg !29
  %248 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !31
  %249 = insertelement <2 x i32> %248, i32 %83, i64 1, !dbg !31
  %250 = bitcast <2 x i32> %249 to <2 x float>, !dbg !31
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !45
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !45
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !45
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !45
  %255 = insertelement <2 x i32> poison, i32 %244, i64 0, !dbg !17
  %256 = insertelement <2 x i32> %255, i32 %216, i64 1, !dbg !17
  %257 = bitcast <2 x i32> %256 to <2 x float>, !dbg !17
  %258 = fadd <2 x float> %257, %219, !dbg !46
  %259 = fsub <2 x float> %258, %222, !dbg !47
  %260 = insertelement <2 x float> poison, float %139, i64 0, !dbg !48
  %261 = insertelement <2 x float> %260, float %251, i64 1, !dbg !48
  %262 = fmul <2 x float> %259, %261, !dbg !48
  %263 = fmul <2 x float> %262, %247, !dbg !49
  %264 = fadd <2 x float> %263, %250, !dbg !50
  %265 = insertelement <2 x i32> poison, i32 %237, i64 0, !dbg !17
  %266 = insertelement <2 x i32> %265, i32 %209, i64 1, !dbg !17
  %267 = bitcast <2 x i32> %266 to <2 x float>, !dbg !17
  %268 = fadd <2 x float> %267, %212, !dbg !46
  %269 = fsub <2 x float> %268, %215, !dbg !47
  %270 = insertelement <2 x float> poison, float %140, i64 0, !dbg !48
  %271 = insertelement <2 x float> %270, float %252, i64 1, !dbg !48
  %272 = fmul <2 x float> %269, %271, !dbg !48
  %273 = fmul <2 x float> %272, %240, !dbg !49
  %274 = fadd <2 x float> %273, %243, !dbg !50
  %275 = insertelement <2 x i32> poison, i32 %230, i64 0, !dbg !17
  %276 = insertelement <2 x i32> %275, i32 %202, i64 1, !dbg !17
  %277 = bitcast <2 x i32> %276 to <2 x float>, !dbg !17
  %278 = fadd <2 x float> %277, %205, !dbg !46
  %279 = fsub <2 x float> %278, %208, !dbg !47
  %280 = insertelement <2 x float> poison, float %141, i64 0, !dbg !48
  %281 = insertelement <2 x float> %280, float %253, i64 1, !dbg !48
  %282 = fmul <2 x float> %279, %281, !dbg !48
  %283 = fmul <2 x float> %282, %233, !dbg !49
  %284 = fadd <2 x float> %283, %236, !dbg !50
  %285 = insertelement <2 x i32> poison, i32 %223, i64 0, !dbg !17
  %286 = insertelement <2 x i32> %285, i32 %195, i64 1, !dbg !17
  %287 = bitcast <2 x i32> %286 to <2 x float>, !dbg !17
  %288 = fadd <2 x float> %287, %198, !dbg !46
  %289 = fsub <2 x float> %288, %201, !dbg !47
  %290 = insertelement <2 x float> poison, float %142, i64 0, !dbg !48
  %291 = insertelement <2 x float> %290, float %254, i64 1, !dbg !48
  %292 = fmul <2 x float> %289, %291, !dbg !48
  %293 = fmul <2 x float> %292, %226, !dbg !49
  %294 = fadd <2 x float> %293, %229, !dbg !50
  %shift = shufflevector <2 x float> %264, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %295 = fadd <2 x float> %264, %shift, !dbg !51
  %296 = extractelement <2 x float> %295, i64 0, !dbg !51
  %shift36 = shufflevector <2 x float> %274, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %297 = fadd <2 x float> %274, %shift36, !dbg !51
  %298 = extractelement <2 x float> %297, i64 0, !dbg !51
  %shift37 = shufflevector <2 x float> %284, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %299 = fadd <2 x float> %284, %shift37, !dbg !51
  %300 = extractelement <2 x float> %299, i64 0, !dbg !51
  %shift38 = shufflevector <2 x float> %294, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %301 = fadd <2 x float> %294, %shift38, !dbg !51
  %302 = extractelement <2 x float> %301, i64 0, !dbg !51
  %303 = fcmp olt float %296, 0.000000e+00, !dbg !52
  %304 = fcmp olt float %298, 0.000000e+00, !dbg !52
  %305 = fcmp olt float %300, 0.000000e+00, !dbg !52
  %306 = fcmp olt float %302, 0.000000e+00, !dbg !52
  %307 = select i1 %303, float 0.000000e+00, float %296, !dbg !56
  %308 = select i1 %304, float 0.000000e+00, float %298, !dbg !56
  %309 = select i1 %305, float 0.000000e+00, float %300, !dbg !56
  %310 = select i1 %306, float 0.000000e+00, float %302, !dbg !56
  %bc = bitcast <2 x float> %258 to <2 x i32>, !dbg !57
  %311 = extractelement <2 x i32> %bc, i64 0, !dbg !57
  %bc39 = bitcast <2 x float> %268 to <2 x i32>, !dbg !57
  %312 = extractelement <2 x i32> %bc39, i64 0, !dbg !57
  %bc40 = bitcast <2 x float> %278 to <2 x i32>, !dbg !57
  %313 = extractelement <2 x i32> %bc40, i64 0, !dbg !57
  %bc41 = bitcast <2 x float> %288 to <2 x i32>, !dbg !57
  %314 = extractelement <2 x i32> %bc41, i64 0, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %311, i32 %312, i32 %313, i32 %314, ptr addrspace(1) %24, i1 true) #3, !dbg !57
  %bc42 = bitcast <2 x float> %258 to <2 x i32>, !dbg !58
  %315 = extractelement <2 x i32> %bc42, i64 1, !dbg !58
  %bc43 = bitcast <2 x float> %268 to <2 x i32>, !dbg !58
  %316 = extractelement <2 x i32> %bc43, i64 1, !dbg !58
  %bc44 = bitcast <2 x float> %278 to <2 x i32>, !dbg !58
  %317 = extractelement <2 x i32> %bc44, i64 1, !dbg !58
  %bc45 = bitcast <2 x float> %288 to <2 x i32>, !dbg !58
  %318 = extractelement <2 x i32> %bc45, i64 1, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %315, i32 %316, i32 %317, i32 %318, ptr addrspace(1) %32, i1 true) #3, !dbg !58
  %319 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !59
  %320 = bitcast float %307 to i32, !dbg !60
  %321 = bitcast float %308 to i32, !dbg !60
  %322 = bitcast float %309 to i32, !dbg !60
  %323 = bitcast float %310 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %320, i32 %321, i32 %322, i32 %323, ptr addrspace(1) %319, i1 true) #3, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cisgychasy5ryrynbjml3jcl6ewgmxzdxqe5aeqvr5bxyvt2wcao.py", directory: "inductor_cache/is")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 39, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 36, scope: !7)
!40 = !DILocation(line: 42, column: 19, scope: !7)
!41 = !DILocation(line: 43, column: 27, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 27, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 38, column: 18, scope: !7)
!47 = !DILocation(line: 40, column: 18, scope: !7)
!48 = !DILocation(line: 48, column: 19, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 50, column: 20, scope: !7)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!55 = !DILocation(line: 61, column: 42, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !55)
!57 = !DILocation(line: 62, column: 39, scope: !7)
!58 = !DILocation(line: 63, column: 39, scope: !7)
!59 = !DILocation(line: 64, column: 28, scope: !7)
!60 = !DILocation(line: 64, column: 40, scope: !7)
!61 = !DILocation(line: 64, column: 4, scope: !7)
