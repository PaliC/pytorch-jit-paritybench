; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %13 = shl i32 %12, 4, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 14, !dbg !12
  %17 = lshr i32 %14, 3, !dbg !12
  %18 = and i32 %17, 15, !dbg !12
  %19 = or disjoint i32 %13, %16, !dbg !13
  %20 = or disjoint i32 %13, %18, !dbg !13
  %21 = icmp slt i32 %19, 512, !dbg !14
  %22 = icmp slt i32 %20, 512, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %24 = shl i32 %23, 4, !dbg !16
  %25 = or disjoint i32 %24, %18, !dbg !17
  %26 = or disjoint i32 %24, %16, !dbg !17
  %27 = icmp slt i32 %25, 16, !dbg !18
  %28 = icmp slt i32 %26, 16, !dbg !18
  %.frozen = freeze i32 %19, !dbg !19
  %29 = sdiv i32 %.frozen, 128, !dbg !19
  %30 = mul i32 %29, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %30, !dbg !20
  %31 = shl i32 %25, 7, !dbg !21
  %32 = add i32 %31, %.decomposed, !dbg !22
  %33 = shl i32 %29, 11, !dbg !23
  %34 = add i32 %32, %33, !dbg !24
  %35 = sext i32 %34 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = and i1 %21, %27, !dbg !26
  %38 = and i1 %22, %28, !dbg !26
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %37) #4, !dbg !27
  %40 = sext i32 %.decomposed to i64, !dbg !28
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !28
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %21) #4, !dbg !29
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !30
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %21) #4, !dbg !31
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !31
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !31
  %47 = bitcast i32 %45 to float, !dbg !31
  %48 = bitcast i32 %46 to float, !dbg !31
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !32
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %21) #4, !dbg !33
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !34
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %21) #4, !dbg !35
  %53 = shl i32 %20, 4, !dbg !36
  %54 = add i32 %26, %53, !dbg !37
  %55 = sext i32 %54 to i64, !dbg !38
  %56 = getelementptr float, ptr addrspace(1) %5, i64 %55, !dbg !38
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %38) #4, !dbg !39
  %58 = fadd float %47, 0x3EE4F8B580000000, !dbg !40
  %59 = fadd float %48, 0x3EE4F8B580000000, !dbg !40
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i = icmp eq i32 %60, 0, !dbg !41
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i = icmp eq i32 %61, 0, !dbg !41
  br i1 %.not.i, label %67, label %62, !dbg !41

62:                                               ; preds = %11
  br i1 %.not1.i, label %65, label %63, !dbg !41

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

67:                                               ; preds = %11
  br i1 %.not1.i, label %70, label %68, !dbg !41

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %63, %65, %68, %70
  %.0.i = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !41
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i4 = icmp eq i32 %72, 0, !dbg !41
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i7 = icmp eq i32 %73, 0, !dbg !41
  br i1 %.not.i4, label %79, label %74, !dbg !41

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %77, label %75, !dbg !41

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !41
  br label %__nv_sqrtf.exit8, !dbg !41

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !41
  br label %__nv_sqrtf.exit8, !dbg !41

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %82, label %80, !dbg !41

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !41
  br label %__nv_sqrtf.exit8, !dbg !41

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !41
  br label %__nv_sqrtf.exit8, !dbg !41

__nv_sqrtf.exit8:                                 ; preds = %75, %77, %80, %82
  %.0.i6 = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !41
  %84 = extractvalue { i32, i32 } %39, 1, !dbg !27
  %85 = extractvalue { i32, i32 } %42, 1, !dbg !29
  %86 = extractvalue { i32, i32 } %39, 0, !dbg !27
  %87 = extractvalue { i32, i32 } %42, 0, !dbg !29
  %88 = extractvalue { i32, i32 } %57, 1, !dbg !39
  %89 = bitcast i32 %88 to float, !dbg !39
  %90 = extractvalue { i32, i32 } %57, 0, !dbg !39
  %91 = bitcast i32 %90 to float, !dbg !39
  %92 = extractvalue { i32, i32 } %52, 1, !dbg !35
  %93 = extractvalue { i32, i32 } %52, 0, !dbg !35
  %94 = extractvalue { i32, i32 } %50, 1, !dbg !33
  %95 = extractvalue { i32, i32 } %50, 0, !dbg !33
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !42
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !42
  %98 = shl i32 %14, 5, !dbg !43
  %99 = and i32 %98, 224, !dbg !43
  %100 = or disjoint i32 %99, %18, !dbg !43
  %101 = and i32 %15, 254, !dbg !43
  %102 = lshr exact i32 %99, 2, !dbg !43
  %103 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %102, !dbg !43
  %104 = getelementptr float, ptr addrspace(3) %103, i32 %100, !dbg !43
  %105 = or disjoint i32 %100, 16, !dbg !43
  %106 = lshr i32 %105, 4, !dbg !43
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !43
  %108 = getelementptr float, ptr addrspace(3) %107, i32 %105, !dbg !43
  %109 = lshr i32 %101, 4, !dbg !43
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %109, !dbg !43
  %111 = getelementptr inbounds float, ptr addrspace(3) %110, i32 %101, !dbg !43
  %112 = or disjoint i32 %101, 1, !dbg !43
  %113 = getelementptr inbounds float, ptr addrspace(3) %110, i32 %112, !dbg !43
  %114 = getelementptr float, ptr addrspace(1) %6, i64 %55, !dbg !47
  %115 = getelementptr float, ptr addrspace(1) %7, i64 %35, !dbg !48
  %116 = lshr exact i32 %99, 1, !dbg !49
  %117 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %116, !dbg !49
  %118 = getelementptr float, ptr addrspace(3) %117, i32 %100, !dbg !49
  %.idx = shl nuw nsw i32 %106, 3, !dbg !49
  %119 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !49
  %120 = getelementptr float, ptr addrspace(3) %119, i32 %105, !dbg !49
  %121 = and i32 %14, 127, !dbg !49
  %122 = add nuw nsw i32 %109, %121, !dbg !49
  %.idx1 = shl nuw nsw i32 %122, 3, !dbg !49
  %123 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !49
  %124 = getelementptr inbounds i8, ptr addrspace(3) %123, i32 4, !dbg !49
  %125 = getelementptr i1, ptr addrspace(1) %8, i64 %35, !dbg !50
  %126 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !27
  %127 = insertelement <2 x i32> %126, i32 %84, i64 1, !dbg !27
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !27
  %129 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !29
  %130 = insertelement <2 x i32> %129, i32 %85, i64 1, !dbg !29
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !29
  %132 = fsub <2 x float> %128, %131, !dbg !51
  %133 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !35
  %134 = insertelement <2 x i32> %133, i32 %92, i64 1, !dbg !35
  %135 = bitcast <2 x i32> %134 to <2 x float>, !dbg !35
  %136 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !33
  %137 = insertelement <2 x i32> %136, i32 %94, i64 1, !dbg !33
  %138 = bitcast <2 x i32> %137 to <2 x float>, !dbg !33
  %139 = insertelement <2 x float> poison, float %96, i64 0, !dbg !52
  %140 = insertelement <2 x float> %139, float %97, i64 1, !dbg !52
  %141 = fmul <2 x float> %132, %140, !dbg !52
  %142 = fmul <2 x float> %141, %138, !dbg !53
  %143 = fadd <2 x float> %142, %135, !dbg !54
  %144 = fcmp olt <2 x float> %143, zeroinitializer, !dbg !55
  %145 = select <2 x i1> %144, <2 x float> zeroinitializer, <2 x float> %143, !dbg !43
  %146 = extractelement <2 x float> %145, i64 0, !dbg !43
  %147 = bitcast float %146 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %147, i1 true) #4, !dbg !43
  %148 = extractelement <2 x float> %145, i64 1, !dbg !43
  %149 = bitcast float %148 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %149, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %150 = load float, ptr addrspace(3) %111, align 4, !dbg !43
  %151 = load float, ptr addrspace(3) %113, align 4, !dbg !43
  %152 = fadd float %150, %91, !dbg !56
  %153 = fadd float %151, %89, !dbg !56
  %154 = fcmp ole <2 x float> %145, zeroinitializer, !dbg !57
  %155 = bitcast float %150 to i32, !dbg !58
  %156 = bitcast float %151 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %155, i32 %156, ptr addrspace(1) %114, i1 %38) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %157 = bitcast float %152 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %157, i1 true) #4, !dbg !49
  %158 = bitcast float %153 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %158, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %.extract = load i32, ptr addrspace(3) %123, align 8, !dbg !49
  %.extract3 = load i32, ptr addrspace(3) %124, align 4, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract3, ptr addrspace(1) %115, i1 %37) #4, !dbg !49
  %159 = zext <2 x i1> %154 to <2 x i8>, !dbg !59
  %160 = bitcast <2 x i8> %159 to i16, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %160, ptr addrspace(1) %125, i1 %37) #4, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr3wh7jwrrgf2e26oaawrjabuarzfl3bjeiohmmeb5ipye3bk55o.py", directory: "inductor_cache/r3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 62, scope: !7)
!27 = !DILocation(line: 32, column: 54, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 39, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 44, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 26, scope: !7)
!42 = !DILocation(line: 43, column: 18, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 50, column: 42, scope: !7)
!47 = !DILocation(line: 54, column: 25, scope: !7)
!48 = !DILocation(line: 55, column: 25, scope: !7)
!49 = !DILocation(line: 55, column: 56, scope: !7)
!50 = !DILocation(line: 56, column: 25, scope: !7)
!51 = !DILocation(line: 38, column: 18, scope: !7)
!52 = !DILocation(line: 46, column: 19, scope: !7)
!53 = !DILocation(line: 47, column: 20, scope: !7)
!54 = !DILocation(line: 48, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!56 = !DILocation(line: 51, column: 20, scope: !7)
!57 = !DILocation(line: 53, column: 21, scope: !7)
!58 = !DILocation(line: 54, column: 45, scope: !7)
!59 = !DILocation(line: 56, column: 56, scope: !7)
!60 = !DILocation(line: 56, column: 4, scope: !7)
