; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_avg_pool2d_24(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 4, !dbg !12
  %9 = and i32 %8, 7, !dbg !12
  %10 = or disjoint i32 %9, 8, !dbg !12
  %11 = shl i32 %7, 2, !dbg !12
  %12 = and i32 %11, 60, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %10, !dbg !13
  %15 = or disjoint i32 %13, 16, !dbg !13
  %16 = or disjoint i32 %13, 24, !dbg !13
  %17 = or disjoint i32 %13, 32, !dbg !13
  %18 = or disjoint i32 %13, 40, !dbg !13
  %19 = or disjoint i32 %13, 48, !dbg !13
  %20 = or disjoint i32 %13, 56, !dbg !13
  %21 = or disjoint i32 %6, %12, !dbg !13
  %22 = icmp slt i32 %13, 256, !dbg !14
  %23 = icmp slt i32 %14, 256, !dbg !14
  %24 = icmp slt i32 %15, 256, !dbg !14
  %25 = icmp slt i32 %16, 256, !dbg !14
  %26 = icmp slt i32 %17, 256, !dbg !14
  %27 = icmp slt i32 %18, 256, !dbg !14
  %28 = icmp slt i32 %19, 256, !dbg !14
  %29 = icmp slt i32 %20, 256, !dbg !14
  %30 = icmp slt i32 %21, 256, !dbg !14
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %32 = shl i32 %31, 4, !dbg !16
  %33 = and i32 %7, 15, !dbg !17
  %34 = or disjoint i32 %32, %33, !dbg !18
  %35 = or disjoint i32 %32, %9, !dbg !18
  %36 = or disjoint i32 %32, %10, !dbg !18
  %37 = icmp slt i32 %34, 16, !dbg !19
  %38 = icmp slt i32 %35, 16, !dbg !19
  %39 = icmp slt i32 %36, 16, !dbg !19
  %.frozen = freeze i32 %34, !dbg !20
  %40 = sdiv i32 %.frozen, 4, !dbg !20
  %41 = mul i32 %40, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %41, !dbg !21
  %.frozen16 = freeze i32 %21, !dbg !22
  %42 = sdiv i32 %.frozen16, 64, !dbg !22
  %43 = mul i32 %42, 64, !dbg !23
  %.decomposed17 = sub i32 %.frozen16, %43, !dbg !23
  %44 = shl nsw i32 %.decomposed, 2, !dbg !24
  %45 = shl i32 %40, 6, !dbg !25
  %46 = add i32 %44, %45, !dbg !26
  %47 = shl i32 %13, 8, !dbg !27
  %48 = shl i32 %14, 8, !dbg !27
  %49 = shl i32 %15, 8, !dbg !27
  %50 = shl i32 %16, 8, !dbg !27
  %51 = shl i32 %17, 8, !dbg !27
  %52 = shl i32 %18, 8, !dbg !27
  %53 = shl i32 %19, 8, !dbg !27
  %54 = shl i32 %20, 8, !dbg !27
  %55 = add i32 %46, %47, !dbg !28
  %56 = add i32 %46, %48, !dbg !28
  %57 = add i32 %46, %49, !dbg !28
  %58 = add i32 %46, %50, !dbg !28
  %59 = add i32 %46, %51, !dbg !28
  %60 = add i32 %46, %52, !dbg !28
  %61 = add i32 %46, %53, !dbg !28
  %62 = add i32 %46, %54, !dbg !28
  %63 = sext i32 %55 to i64, !dbg !29
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !29
  %65 = sext i32 %56 to i64, !dbg !29
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !29
  %67 = sext i32 %57 to i64, !dbg !29
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !29
  %69 = sext i32 %58 to i64, !dbg !29
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !29
  %71 = sext i32 %59 to i64, !dbg !29
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !29
  %73 = sext i32 %60 to i64, !dbg !29
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !29
  %75 = sext i32 %61 to i64, !dbg !29
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !29
  %77 = sext i32 %62 to i64, !dbg !29
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !29
  %79 = and i1 %22, %37, !dbg !30
  %80 = and i1 %23, %37, !dbg !30
  %81 = and i1 %24, %37, !dbg !30
  %82 = and i1 %25, %37, !dbg !30
  %83 = and i1 %26, %37, !dbg !30
  %84 = and i1 %27, %37, !dbg !30
  %85 = and i1 %28, %37, !dbg !30
  %86 = and i1 %29, %37, !dbg !30
  %87 = and i1 %30, %38, !dbg !30
  %88 = and i1 %30, %39, !dbg !30
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %79) #2, !dbg !31
  %90 = bitcast i32 %89 to float, !dbg !31
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %80) #2, !dbg !31
  %92 = bitcast i32 %91 to float, !dbg !31
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %81) #2, !dbg !31
  %94 = bitcast i32 %93 to float, !dbg !31
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %82) #2, !dbg !31
  %96 = bitcast i32 %95 to float, !dbg !31
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %83) #2, !dbg !31
  %98 = bitcast i32 %97 to float, !dbg !31
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %84) #2, !dbg !31
  %100 = bitcast i32 %99 to float, !dbg !31
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %85) #2, !dbg !31
  %102 = bitcast i32 %101 to float, !dbg !31
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %86) #2, !dbg !31
  %104 = bitcast i32 %103 to float, !dbg !31
  %105 = or disjoint i32 %44, 1, !dbg !32
  %106 = add i32 %105, %45, !dbg !33
  %107 = add i32 %106, %47, !dbg !34
  %108 = add i32 %106, %48, !dbg !34
  %109 = add i32 %106, %49, !dbg !34
  %110 = add i32 %106, %50, !dbg !34
  %111 = add i32 %106, %51, !dbg !34
  %112 = add i32 %106, %52, !dbg !34
  %113 = add i32 %106, %53, !dbg !34
  %114 = add i32 %106, %54, !dbg !34
  %115 = sext i32 %107 to i64, !dbg !35
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !35
  %117 = sext i32 %108 to i64, !dbg !35
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !35
  %119 = sext i32 %109 to i64, !dbg !35
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !35
  %121 = sext i32 %110 to i64, !dbg !35
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !35
  %123 = sext i32 %111 to i64, !dbg !35
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !35
  %125 = sext i32 %112 to i64, !dbg !35
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !35
  %127 = sext i32 %113 to i64, !dbg !35
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !35
  %129 = sext i32 %114 to i64, !dbg !35
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !35
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %79) #2, !dbg !36
  %132 = bitcast i32 %131 to float, !dbg !36
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %80) #2, !dbg !36
  %134 = bitcast i32 %133 to float, !dbg !36
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %81) #2, !dbg !36
  %136 = bitcast i32 %135 to float, !dbg !36
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %82) #2, !dbg !36
  %138 = bitcast i32 %137 to float, !dbg !36
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %83) #2, !dbg !36
  %140 = bitcast i32 %139 to float, !dbg !36
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %84) #2, !dbg !36
  %142 = bitcast i32 %141 to float, !dbg !36
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %85) #2, !dbg !36
  %144 = bitcast i32 %143 to float, !dbg !36
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %86) #2, !dbg !36
  %146 = bitcast i32 %145 to float, !dbg !36
  %147 = or disjoint i32 %44, 2, !dbg !37
  %148 = add i32 %147, %45, !dbg !38
  %149 = add i32 %148, %47, !dbg !39
  %150 = add i32 %148, %48, !dbg !39
  %151 = add i32 %148, %49, !dbg !39
  %152 = add i32 %148, %50, !dbg !39
  %153 = add i32 %148, %51, !dbg !39
  %154 = add i32 %148, %52, !dbg !39
  %155 = add i32 %148, %53, !dbg !39
  %156 = add i32 %148, %54, !dbg !39
  %157 = sext i32 %149 to i64, !dbg !40
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !40
  %159 = sext i32 %150 to i64, !dbg !40
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !40
  %161 = sext i32 %151 to i64, !dbg !40
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !40
  %163 = sext i32 %152 to i64, !dbg !40
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !40
  %165 = sext i32 %153 to i64, !dbg !40
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !40
  %167 = sext i32 %154 to i64, !dbg !40
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !40
  %169 = sext i32 %155 to i64, !dbg !40
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !40
  %171 = sext i32 %156 to i64, !dbg !40
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !40
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %79) #2, !dbg !41
  %174 = bitcast i32 %173 to float, !dbg !41
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %80) #2, !dbg !41
  %176 = bitcast i32 %175 to float, !dbg !41
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %81) #2, !dbg !41
  %178 = bitcast i32 %177 to float, !dbg !41
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %82) #2, !dbg !41
  %180 = bitcast i32 %179 to float, !dbg !41
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %83) #2, !dbg !41
  %182 = bitcast i32 %181 to float, !dbg !41
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %84) #2, !dbg !41
  %184 = bitcast i32 %183 to float, !dbg !41
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %85) #2, !dbg !41
  %186 = bitcast i32 %185 to float, !dbg !41
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %86) #2, !dbg !41
  %188 = bitcast i32 %187 to float, !dbg !41
  %189 = or disjoint i32 %44, 3, !dbg !42
  %190 = add i32 %189, %45, !dbg !43
  %191 = add i32 %190, %47, !dbg !44
  %192 = add i32 %190, %48, !dbg !44
  %193 = add i32 %190, %49, !dbg !44
  %194 = add i32 %190, %50, !dbg !44
  %195 = add i32 %190, %51, !dbg !44
  %196 = add i32 %190, %52, !dbg !44
  %197 = add i32 %190, %53, !dbg !44
  %198 = add i32 %190, %54, !dbg !44
  %199 = sext i32 %191 to i64, !dbg !45
  %200 = getelementptr float, ptr addrspace(1) %0, i64 %199, !dbg !45
  %201 = sext i32 %192 to i64, !dbg !45
  %202 = getelementptr float, ptr addrspace(1) %0, i64 %201, !dbg !45
  %203 = sext i32 %193 to i64, !dbg !45
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !45
  %205 = sext i32 %194 to i64, !dbg !45
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !45
  %207 = sext i32 %195 to i64, !dbg !45
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !45
  %209 = sext i32 %196 to i64, !dbg !45
  %210 = getelementptr float, ptr addrspace(1) %0, i64 %209, !dbg !45
  %211 = sext i32 %197 to i64, !dbg !45
  %212 = getelementptr float, ptr addrspace(1) %0, i64 %211, !dbg !45
  %213 = sext i32 %198 to i64, !dbg !45
  %214 = getelementptr float, ptr addrspace(1) %0, i64 %213, !dbg !45
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 %79) #2, !dbg !46
  %216 = bitcast i32 %215 to float, !dbg !46
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 %80) #2, !dbg !46
  %218 = bitcast i32 %217 to float, !dbg !46
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 %81) #2, !dbg !46
  %220 = bitcast i32 %219 to float, !dbg !46
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 %82) #2, !dbg !46
  %222 = bitcast i32 %221 to float, !dbg !46
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 %83) #2, !dbg !46
  %224 = bitcast i32 %223 to float, !dbg !46
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %210, i1 %84) #2, !dbg !46
  %226 = bitcast i32 %225 to float, !dbg !46
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %212, i1 %85) #2, !dbg !46
  %228 = bitcast i32 %227 to float, !dbg !46
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %214, i1 %86) #2, !dbg !46
  %230 = bitcast i32 %229 to float, !dbg !46
  %231 = add i32 %46, 16, !dbg !47
  %232 = add i32 %231, %47, !dbg !48
  %233 = add i32 %231, %48, !dbg !48
  %234 = add i32 %231, %49, !dbg !48
  %235 = add i32 %231, %50, !dbg !48
  %236 = add i32 %231, %51, !dbg !48
  %237 = add i32 %231, %52, !dbg !48
  %238 = add i32 %231, %53, !dbg !48
  %239 = add i32 %231, %54, !dbg !48
  %240 = sext i32 %232 to i64, !dbg !49
  %241 = getelementptr float, ptr addrspace(1) %0, i64 %240, !dbg !49
  %242 = sext i32 %233 to i64, !dbg !49
  %243 = getelementptr float, ptr addrspace(1) %0, i64 %242, !dbg !49
  %244 = sext i32 %234 to i64, !dbg !49
  %245 = getelementptr float, ptr addrspace(1) %0, i64 %244, !dbg !49
  %246 = sext i32 %235 to i64, !dbg !49
  %247 = getelementptr float, ptr addrspace(1) %0, i64 %246, !dbg !49
  %248 = sext i32 %236 to i64, !dbg !49
  %249 = getelementptr float, ptr addrspace(1) %0, i64 %248, !dbg !49
  %250 = sext i32 %237 to i64, !dbg !49
  %251 = getelementptr float, ptr addrspace(1) %0, i64 %250, !dbg !49
  %252 = sext i32 %238 to i64, !dbg !49
  %253 = getelementptr float, ptr addrspace(1) %0, i64 %252, !dbg !49
  %254 = sext i32 %239 to i64, !dbg !49
  %255 = getelementptr float, ptr addrspace(1) %0, i64 %254, !dbg !49
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 %79) #2, !dbg !50
  %257 = bitcast i32 %256 to float, !dbg !50
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %243, i1 %80) #2, !dbg !50
  %259 = bitcast i32 %258 to float, !dbg !50
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %81) #2, !dbg !50
  %261 = bitcast i32 %260 to float, !dbg !50
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %247, i1 %82) #2, !dbg !50
  %263 = bitcast i32 %262 to float, !dbg !50
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %249, i1 %83) #2, !dbg !50
  %265 = bitcast i32 %264 to float, !dbg !50
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %251, i1 %84) #2, !dbg !50
  %267 = bitcast i32 %266 to float, !dbg !50
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %253, i1 %85) #2, !dbg !50
  %269 = bitcast i32 %268 to float, !dbg !50
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %255, i1 %86) #2, !dbg !50
  %271 = bitcast i32 %270 to float, !dbg !50
  %272 = add i32 %46, 17, !dbg !51
  %273 = add i32 %272, %47, !dbg !52
  %274 = add i32 %272, %48, !dbg !52
  %275 = add i32 %272, %49, !dbg !52
  %276 = add i32 %272, %50, !dbg !52
  %277 = add i32 %272, %51, !dbg !52
  %278 = add i32 %272, %52, !dbg !52
  %279 = add i32 %272, %53, !dbg !52
  %280 = add i32 %272, %54, !dbg !52
  %281 = sext i32 %273 to i64, !dbg !53
  %282 = getelementptr float, ptr addrspace(1) %0, i64 %281, !dbg !53
  %283 = sext i32 %274 to i64, !dbg !53
  %284 = getelementptr float, ptr addrspace(1) %0, i64 %283, !dbg !53
  %285 = sext i32 %275 to i64, !dbg !53
  %286 = getelementptr float, ptr addrspace(1) %0, i64 %285, !dbg !53
  %287 = sext i32 %276 to i64, !dbg !53
  %288 = getelementptr float, ptr addrspace(1) %0, i64 %287, !dbg !53
  %289 = sext i32 %277 to i64, !dbg !53
  %290 = getelementptr float, ptr addrspace(1) %0, i64 %289, !dbg !53
  %291 = sext i32 %278 to i64, !dbg !53
  %292 = getelementptr float, ptr addrspace(1) %0, i64 %291, !dbg !53
  %293 = sext i32 %279 to i64, !dbg !53
  %294 = getelementptr float, ptr addrspace(1) %0, i64 %293, !dbg !53
  %295 = sext i32 %280 to i64, !dbg !53
  %296 = getelementptr float, ptr addrspace(1) %0, i64 %295, !dbg !53
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %282, i1 %79) #2, !dbg !54
  %298 = bitcast i32 %297 to float, !dbg !54
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %284, i1 %80) #2, !dbg !54
  %300 = bitcast i32 %299 to float, !dbg !54
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %286, i1 %81) #2, !dbg !54
  %302 = bitcast i32 %301 to float, !dbg !54
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %288, i1 %82) #2, !dbg !54
  %304 = bitcast i32 %303 to float, !dbg !54
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %290, i1 %83) #2, !dbg !54
  %306 = bitcast i32 %305 to float, !dbg !54
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %292, i1 %84) #2, !dbg !54
  %308 = bitcast i32 %307 to float, !dbg !54
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 %85) #2, !dbg !54
  %310 = bitcast i32 %309 to float, !dbg !54
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %296, i1 %86) #2, !dbg !54
  %312 = bitcast i32 %311 to float, !dbg !54
  %313 = add i32 %46, 18, !dbg !55
  %314 = add i32 %313, %47, !dbg !56
  %315 = add i32 %313, %48, !dbg !56
  %316 = add i32 %313, %49, !dbg !56
  %317 = add i32 %313, %50, !dbg !56
  %318 = add i32 %313, %51, !dbg !56
  %319 = add i32 %313, %52, !dbg !56
  %320 = add i32 %313, %53, !dbg !56
  %321 = add i32 %313, %54, !dbg !56
  %322 = sext i32 %314 to i64, !dbg !57
  %323 = getelementptr float, ptr addrspace(1) %0, i64 %322, !dbg !57
  %324 = sext i32 %315 to i64, !dbg !57
  %325 = getelementptr float, ptr addrspace(1) %0, i64 %324, !dbg !57
  %326 = sext i32 %316 to i64, !dbg !57
  %327 = getelementptr float, ptr addrspace(1) %0, i64 %326, !dbg !57
  %328 = sext i32 %317 to i64, !dbg !57
  %329 = getelementptr float, ptr addrspace(1) %0, i64 %328, !dbg !57
  %330 = sext i32 %318 to i64, !dbg !57
  %331 = getelementptr float, ptr addrspace(1) %0, i64 %330, !dbg !57
  %332 = sext i32 %319 to i64, !dbg !57
  %333 = getelementptr float, ptr addrspace(1) %0, i64 %332, !dbg !57
  %334 = sext i32 %320 to i64, !dbg !57
  %335 = getelementptr float, ptr addrspace(1) %0, i64 %334, !dbg !57
  %336 = sext i32 %321 to i64, !dbg !57
  %337 = getelementptr float, ptr addrspace(1) %0, i64 %336, !dbg !57
  %338 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %323, i1 %79) #2, !dbg !58
  %339 = bitcast i32 %338 to float, !dbg !58
  %340 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %325, i1 %80) #2, !dbg !58
  %341 = bitcast i32 %340 to float, !dbg !58
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %327, i1 %81) #2, !dbg !58
  %343 = bitcast i32 %342 to float, !dbg !58
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %329, i1 %82) #2, !dbg !58
  %345 = bitcast i32 %344 to float, !dbg !58
  %346 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %331, i1 %83) #2, !dbg !58
  %347 = bitcast i32 %346 to float, !dbg !58
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %333, i1 %84) #2, !dbg !58
  %349 = bitcast i32 %348 to float, !dbg !58
  %350 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %335, i1 %85) #2, !dbg !58
  %351 = bitcast i32 %350 to float, !dbg !58
  %352 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %337, i1 %86) #2, !dbg !58
  %353 = bitcast i32 %352 to float, !dbg !58
  %354 = add i32 %46, 19, !dbg !59
  %355 = add i32 %354, %47, !dbg !60
  %356 = add i32 %354, %48, !dbg !60
  %357 = add i32 %354, %49, !dbg !60
  %358 = add i32 %354, %50, !dbg !60
  %359 = add i32 %354, %51, !dbg !60
  %360 = add i32 %354, %52, !dbg !60
  %361 = add i32 %354, %53, !dbg !60
  %362 = add i32 %354, %54, !dbg !60
  %363 = sext i32 %355 to i64, !dbg !61
  %364 = getelementptr float, ptr addrspace(1) %0, i64 %363, !dbg !61
  %365 = sext i32 %356 to i64, !dbg !61
  %366 = getelementptr float, ptr addrspace(1) %0, i64 %365, !dbg !61
  %367 = sext i32 %357 to i64, !dbg !61
  %368 = getelementptr float, ptr addrspace(1) %0, i64 %367, !dbg !61
  %369 = sext i32 %358 to i64, !dbg !61
  %370 = getelementptr float, ptr addrspace(1) %0, i64 %369, !dbg !61
  %371 = sext i32 %359 to i64, !dbg !61
  %372 = getelementptr float, ptr addrspace(1) %0, i64 %371, !dbg !61
  %373 = sext i32 %360 to i64, !dbg !61
  %374 = getelementptr float, ptr addrspace(1) %0, i64 %373, !dbg !61
  %375 = sext i32 %361 to i64, !dbg !61
  %376 = getelementptr float, ptr addrspace(1) %0, i64 %375, !dbg !61
  %377 = sext i32 %362 to i64, !dbg !61
  %378 = getelementptr float, ptr addrspace(1) %0, i64 %377, !dbg !61
  %379 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %364, i1 %79) #2, !dbg !62
  %380 = bitcast i32 %379 to float, !dbg !62
  %381 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %366, i1 %80) #2, !dbg !62
  %382 = bitcast i32 %381 to float, !dbg !62
  %383 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %368, i1 %81) #2, !dbg !62
  %384 = bitcast i32 %383 to float, !dbg !62
  %385 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %370, i1 %82) #2, !dbg !62
  %386 = bitcast i32 %385 to float, !dbg !62
  %387 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %372, i1 %83) #2, !dbg !62
  %388 = bitcast i32 %387 to float, !dbg !62
  %389 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %374, i1 %84) #2, !dbg !62
  %390 = bitcast i32 %389 to float, !dbg !62
  %391 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %376, i1 %85) #2, !dbg !62
  %392 = bitcast i32 %391 to float, !dbg !62
  %393 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %378, i1 %86) #2, !dbg !62
  %394 = bitcast i32 %393 to float, !dbg !62
  %395 = add i32 %46, 32, !dbg !63
  %396 = add i32 %395, %47, !dbg !64
  %397 = add i32 %395, %48, !dbg !64
  %398 = add i32 %395, %49, !dbg !64
  %399 = add i32 %395, %50, !dbg !64
  %400 = add i32 %395, %51, !dbg !64
  %401 = add i32 %395, %52, !dbg !64
  %402 = add i32 %395, %53, !dbg !64
  %403 = add i32 %395, %54, !dbg !64
  %404 = sext i32 %396 to i64, !dbg !65
  %405 = getelementptr float, ptr addrspace(1) %0, i64 %404, !dbg !65
  %406 = sext i32 %397 to i64, !dbg !65
  %407 = getelementptr float, ptr addrspace(1) %0, i64 %406, !dbg !65
  %408 = sext i32 %398 to i64, !dbg !65
  %409 = getelementptr float, ptr addrspace(1) %0, i64 %408, !dbg !65
  %410 = sext i32 %399 to i64, !dbg !65
  %411 = getelementptr float, ptr addrspace(1) %0, i64 %410, !dbg !65
  %412 = sext i32 %400 to i64, !dbg !65
  %413 = getelementptr float, ptr addrspace(1) %0, i64 %412, !dbg !65
  %414 = sext i32 %401 to i64, !dbg !65
  %415 = getelementptr float, ptr addrspace(1) %0, i64 %414, !dbg !65
  %416 = sext i32 %402 to i64, !dbg !65
  %417 = getelementptr float, ptr addrspace(1) %0, i64 %416, !dbg !65
  %418 = sext i32 %403 to i64, !dbg !65
  %419 = getelementptr float, ptr addrspace(1) %0, i64 %418, !dbg !65
  %420 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %405, i1 %79) #2, !dbg !66
  %421 = bitcast i32 %420 to float, !dbg !66
  %422 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %407, i1 %80) #2, !dbg !66
  %423 = bitcast i32 %422 to float, !dbg !66
  %424 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %409, i1 %81) #2, !dbg !66
  %425 = bitcast i32 %424 to float, !dbg !66
  %426 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %411, i1 %82) #2, !dbg !66
  %427 = bitcast i32 %426 to float, !dbg !66
  %428 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %413, i1 %83) #2, !dbg !66
  %429 = bitcast i32 %428 to float, !dbg !66
  %430 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %415, i1 %84) #2, !dbg !66
  %431 = bitcast i32 %430 to float, !dbg !66
  %432 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %417, i1 %85) #2, !dbg !66
  %433 = bitcast i32 %432 to float, !dbg !66
  %434 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %419, i1 %86) #2, !dbg !66
  %435 = bitcast i32 %434 to float, !dbg !66
  %436 = add i32 %46, 33, !dbg !67
  %437 = add i32 %436, %47, !dbg !68
  %438 = add i32 %436, %48, !dbg !68
  %439 = add i32 %436, %49, !dbg !68
  %440 = add i32 %436, %50, !dbg !68
  %441 = add i32 %436, %51, !dbg !68
  %442 = add i32 %436, %52, !dbg !68
  %443 = add i32 %436, %53, !dbg !68
  %444 = add i32 %436, %54, !dbg !68
  %445 = sext i32 %437 to i64, !dbg !69
  %446 = getelementptr float, ptr addrspace(1) %0, i64 %445, !dbg !69
  %447 = sext i32 %438 to i64, !dbg !69
  %448 = getelementptr float, ptr addrspace(1) %0, i64 %447, !dbg !69
  %449 = sext i32 %439 to i64, !dbg !69
  %450 = getelementptr float, ptr addrspace(1) %0, i64 %449, !dbg !69
  %451 = sext i32 %440 to i64, !dbg !69
  %452 = getelementptr float, ptr addrspace(1) %0, i64 %451, !dbg !69
  %453 = sext i32 %441 to i64, !dbg !69
  %454 = getelementptr float, ptr addrspace(1) %0, i64 %453, !dbg !69
  %455 = sext i32 %442 to i64, !dbg !69
  %456 = getelementptr float, ptr addrspace(1) %0, i64 %455, !dbg !69
  %457 = sext i32 %443 to i64, !dbg !69
  %458 = getelementptr float, ptr addrspace(1) %0, i64 %457, !dbg !69
  %459 = sext i32 %444 to i64, !dbg !69
  %460 = getelementptr float, ptr addrspace(1) %0, i64 %459, !dbg !69
  %461 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %446, i1 %79) #2, !dbg !70
  %462 = bitcast i32 %461 to float, !dbg !70
  %463 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %448, i1 %80) #2, !dbg !70
  %464 = bitcast i32 %463 to float, !dbg !70
  %465 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %450, i1 %81) #2, !dbg !70
  %466 = bitcast i32 %465 to float, !dbg !70
  %467 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %452, i1 %82) #2, !dbg !70
  %468 = bitcast i32 %467 to float, !dbg !70
  %469 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %454, i1 %83) #2, !dbg !70
  %470 = bitcast i32 %469 to float, !dbg !70
  %471 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %456, i1 %84) #2, !dbg !70
  %472 = bitcast i32 %471 to float, !dbg !70
  %473 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %458, i1 %85) #2, !dbg !70
  %474 = bitcast i32 %473 to float, !dbg !70
  %475 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %460, i1 %86) #2, !dbg !70
  %476 = bitcast i32 %475 to float, !dbg !70
  %477 = add i32 %46, 34, !dbg !71
  %478 = add i32 %477, %47, !dbg !72
  %479 = add i32 %477, %48, !dbg !72
  %480 = add i32 %477, %49, !dbg !72
  %481 = add i32 %477, %50, !dbg !72
  %482 = add i32 %477, %51, !dbg !72
  %483 = add i32 %477, %52, !dbg !72
  %484 = add i32 %477, %53, !dbg !72
  %485 = add i32 %477, %54, !dbg !72
  %486 = sext i32 %478 to i64, !dbg !73
  %487 = getelementptr float, ptr addrspace(1) %0, i64 %486, !dbg !73
  %488 = sext i32 %479 to i64, !dbg !73
  %489 = getelementptr float, ptr addrspace(1) %0, i64 %488, !dbg !73
  %490 = sext i32 %480 to i64, !dbg !73
  %491 = getelementptr float, ptr addrspace(1) %0, i64 %490, !dbg !73
  %492 = sext i32 %481 to i64, !dbg !73
  %493 = getelementptr float, ptr addrspace(1) %0, i64 %492, !dbg !73
  %494 = sext i32 %482 to i64, !dbg !73
  %495 = getelementptr float, ptr addrspace(1) %0, i64 %494, !dbg !73
  %496 = sext i32 %483 to i64, !dbg !73
  %497 = getelementptr float, ptr addrspace(1) %0, i64 %496, !dbg !73
  %498 = sext i32 %484 to i64, !dbg !73
  %499 = getelementptr float, ptr addrspace(1) %0, i64 %498, !dbg !73
  %500 = sext i32 %485 to i64, !dbg !73
  %501 = getelementptr float, ptr addrspace(1) %0, i64 %500, !dbg !73
  %502 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %487, i1 %79) #2, !dbg !74
  %503 = bitcast i32 %502 to float, !dbg !74
  %504 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %489, i1 %80) #2, !dbg !74
  %505 = bitcast i32 %504 to float, !dbg !74
  %506 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %491, i1 %81) #2, !dbg !74
  %507 = bitcast i32 %506 to float, !dbg !74
  %508 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %493, i1 %82) #2, !dbg !74
  %509 = bitcast i32 %508 to float, !dbg !74
  %510 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %495, i1 %83) #2, !dbg !74
  %511 = bitcast i32 %510 to float, !dbg !74
  %512 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %497, i1 %84) #2, !dbg !74
  %513 = bitcast i32 %512 to float, !dbg !74
  %514 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %499, i1 %85) #2, !dbg !74
  %515 = bitcast i32 %514 to float, !dbg !74
  %516 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %501, i1 %86) #2, !dbg !74
  %517 = bitcast i32 %516 to float, !dbg !74
  %518 = add i32 %46, 35, !dbg !75
  %519 = add i32 %518, %47, !dbg !76
  %520 = add i32 %518, %48, !dbg !76
  %521 = add i32 %518, %49, !dbg !76
  %522 = add i32 %518, %50, !dbg !76
  %523 = add i32 %518, %51, !dbg !76
  %524 = add i32 %518, %52, !dbg !76
  %525 = add i32 %518, %53, !dbg !76
  %526 = add i32 %518, %54, !dbg !76
  %527 = sext i32 %519 to i64, !dbg !77
  %528 = getelementptr float, ptr addrspace(1) %0, i64 %527, !dbg !77
  %529 = sext i32 %520 to i64, !dbg !77
  %530 = getelementptr float, ptr addrspace(1) %0, i64 %529, !dbg !77
  %531 = sext i32 %521 to i64, !dbg !77
  %532 = getelementptr float, ptr addrspace(1) %0, i64 %531, !dbg !77
  %533 = sext i32 %522 to i64, !dbg !77
  %534 = getelementptr float, ptr addrspace(1) %0, i64 %533, !dbg !77
  %535 = sext i32 %523 to i64, !dbg !77
  %536 = getelementptr float, ptr addrspace(1) %0, i64 %535, !dbg !77
  %537 = sext i32 %524 to i64, !dbg !77
  %538 = getelementptr float, ptr addrspace(1) %0, i64 %537, !dbg !77
  %539 = sext i32 %525 to i64, !dbg !77
  %540 = getelementptr float, ptr addrspace(1) %0, i64 %539, !dbg !77
  %541 = sext i32 %526 to i64, !dbg !77
  %542 = getelementptr float, ptr addrspace(1) %0, i64 %541, !dbg !77
  %543 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %528, i1 %79) #2, !dbg !78
  %544 = bitcast i32 %543 to float, !dbg !78
  %545 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %530, i1 %80) #2, !dbg !78
  %546 = bitcast i32 %545 to float, !dbg !78
  %547 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %532, i1 %81) #2, !dbg !78
  %548 = bitcast i32 %547 to float, !dbg !78
  %549 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %534, i1 %82) #2, !dbg !78
  %550 = bitcast i32 %549 to float, !dbg !78
  %551 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %536, i1 %83) #2, !dbg !78
  %552 = bitcast i32 %551 to float, !dbg !78
  %553 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %538, i1 %84) #2, !dbg !78
  %554 = bitcast i32 %553 to float, !dbg !78
  %555 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %540, i1 %85) #2, !dbg !78
  %556 = bitcast i32 %555 to float, !dbg !78
  %557 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %542, i1 %86) #2, !dbg !78
  %558 = bitcast i32 %557 to float, !dbg !78
  %559 = add i32 %46, 48, !dbg !79
  %560 = add i32 %559, %47, !dbg !80
  %561 = add i32 %559, %48, !dbg !80
  %562 = add i32 %559, %49, !dbg !80
  %563 = add i32 %559, %50, !dbg !80
  %564 = add i32 %559, %51, !dbg !80
  %565 = add i32 %559, %52, !dbg !80
  %566 = add i32 %559, %53, !dbg !80
  %567 = add i32 %559, %54, !dbg !80
  %568 = sext i32 %560 to i64, !dbg !81
  %569 = getelementptr float, ptr addrspace(1) %0, i64 %568, !dbg !81
  %570 = sext i32 %561 to i64, !dbg !81
  %571 = getelementptr float, ptr addrspace(1) %0, i64 %570, !dbg !81
  %572 = sext i32 %562 to i64, !dbg !81
  %573 = getelementptr float, ptr addrspace(1) %0, i64 %572, !dbg !81
  %574 = sext i32 %563 to i64, !dbg !81
  %575 = getelementptr float, ptr addrspace(1) %0, i64 %574, !dbg !81
  %576 = sext i32 %564 to i64, !dbg !81
  %577 = getelementptr float, ptr addrspace(1) %0, i64 %576, !dbg !81
  %578 = sext i32 %565 to i64, !dbg !81
  %579 = getelementptr float, ptr addrspace(1) %0, i64 %578, !dbg !81
  %580 = sext i32 %566 to i64, !dbg !81
  %581 = getelementptr float, ptr addrspace(1) %0, i64 %580, !dbg !81
  %582 = sext i32 %567 to i64, !dbg !81
  %583 = getelementptr float, ptr addrspace(1) %0, i64 %582, !dbg !81
  %584 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %569, i1 %79) #2, !dbg !82
  %585 = bitcast i32 %584 to float, !dbg !82
  %586 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %571, i1 %80) #2, !dbg !82
  %587 = bitcast i32 %586 to float, !dbg !82
  %588 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %573, i1 %81) #2, !dbg !82
  %589 = bitcast i32 %588 to float, !dbg !82
  %590 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %575, i1 %82) #2, !dbg !82
  %591 = bitcast i32 %590 to float, !dbg !82
  %592 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %577, i1 %83) #2, !dbg !82
  %593 = bitcast i32 %592 to float, !dbg !82
  %594 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %579, i1 %84) #2, !dbg !82
  %595 = bitcast i32 %594 to float, !dbg !82
  %596 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %581, i1 %85) #2, !dbg !82
  %597 = bitcast i32 %596 to float, !dbg !82
  %598 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %583, i1 %86) #2, !dbg !82
  %599 = bitcast i32 %598 to float, !dbg !82
  %600 = add i32 %46, 49, !dbg !83
  %601 = add i32 %600, %47, !dbg !84
  %602 = add i32 %600, %48, !dbg !84
  %603 = add i32 %600, %49, !dbg !84
  %604 = add i32 %600, %50, !dbg !84
  %605 = add i32 %600, %51, !dbg !84
  %606 = add i32 %600, %52, !dbg !84
  %607 = add i32 %600, %53, !dbg !84
  %608 = add i32 %600, %54, !dbg !84
  %609 = sext i32 %601 to i64, !dbg !85
  %610 = getelementptr float, ptr addrspace(1) %0, i64 %609, !dbg !85
  %611 = sext i32 %602 to i64, !dbg !85
  %612 = getelementptr float, ptr addrspace(1) %0, i64 %611, !dbg !85
  %613 = sext i32 %603 to i64, !dbg !85
  %614 = getelementptr float, ptr addrspace(1) %0, i64 %613, !dbg !85
  %615 = sext i32 %604 to i64, !dbg !85
  %616 = getelementptr float, ptr addrspace(1) %0, i64 %615, !dbg !85
  %617 = sext i32 %605 to i64, !dbg !85
  %618 = getelementptr float, ptr addrspace(1) %0, i64 %617, !dbg !85
  %619 = sext i32 %606 to i64, !dbg !85
  %620 = getelementptr float, ptr addrspace(1) %0, i64 %619, !dbg !85
  %621 = sext i32 %607 to i64, !dbg !85
  %622 = getelementptr float, ptr addrspace(1) %0, i64 %621, !dbg !85
  %623 = sext i32 %608 to i64, !dbg !85
  %624 = getelementptr float, ptr addrspace(1) %0, i64 %623, !dbg !85
  %625 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %610, i1 %79) #2, !dbg !86
  %626 = bitcast i32 %625 to float, !dbg !86
  %627 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %612, i1 %80) #2, !dbg !86
  %628 = bitcast i32 %627 to float, !dbg !86
  %629 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %614, i1 %81) #2, !dbg !86
  %630 = bitcast i32 %629 to float, !dbg !86
  %631 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %616, i1 %82) #2, !dbg !86
  %632 = bitcast i32 %631 to float, !dbg !86
  %633 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %618, i1 %83) #2, !dbg !86
  %634 = bitcast i32 %633 to float, !dbg !86
  %635 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %620, i1 %84) #2, !dbg !86
  %636 = bitcast i32 %635 to float, !dbg !86
  %637 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %622, i1 %85) #2, !dbg !86
  %638 = bitcast i32 %637 to float, !dbg !86
  %639 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %624, i1 %86) #2, !dbg !86
  %640 = bitcast i32 %639 to float, !dbg !86
  %641 = add i32 %46, 50, !dbg !87
  %642 = add i32 %641, %47, !dbg !88
  %643 = add i32 %641, %48, !dbg !88
  %644 = add i32 %641, %49, !dbg !88
  %645 = add i32 %641, %50, !dbg !88
  %646 = add i32 %641, %51, !dbg !88
  %647 = add i32 %641, %52, !dbg !88
  %648 = add i32 %641, %53, !dbg !88
  %649 = add i32 %641, %54, !dbg !88
  %650 = sext i32 %642 to i64, !dbg !89
  %651 = getelementptr float, ptr addrspace(1) %0, i64 %650, !dbg !89
  %652 = sext i32 %643 to i64, !dbg !89
  %653 = getelementptr float, ptr addrspace(1) %0, i64 %652, !dbg !89
  %654 = sext i32 %644 to i64, !dbg !89
  %655 = getelementptr float, ptr addrspace(1) %0, i64 %654, !dbg !89
  %656 = sext i32 %645 to i64, !dbg !89
  %657 = getelementptr float, ptr addrspace(1) %0, i64 %656, !dbg !89
  %658 = sext i32 %646 to i64, !dbg !89
  %659 = getelementptr float, ptr addrspace(1) %0, i64 %658, !dbg !89
  %660 = sext i32 %647 to i64, !dbg !89
  %661 = getelementptr float, ptr addrspace(1) %0, i64 %660, !dbg !89
  %662 = sext i32 %648 to i64, !dbg !89
  %663 = getelementptr float, ptr addrspace(1) %0, i64 %662, !dbg !89
  %664 = sext i32 %649 to i64, !dbg !89
  %665 = getelementptr float, ptr addrspace(1) %0, i64 %664, !dbg !89
  %666 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %651, i1 %79) #2, !dbg !90
  %667 = bitcast i32 %666 to float, !dbg !90
  %668 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %653, i1 %80) #2, !dbg !90
  %669 = bitcast i32 %668 to float, !dbg !90
  %670 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %655, i1 %81) #2, !dbg !90
  %671 = bitcast i32 %670 to float, !dbg !90
  %672 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %657, i1 %82) #2, !dbg !90
  %673 = bitcast i32 %672 to float, !dbg !90
  %674 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %659, i1 %83) #2, !dbg !90
  %675 = bitcast i32 %674 to float, !dbg !90
  %676 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %661, i1 %84) #2, !dbg !90
  %677 = bitcast i32 %676 to float, !dbg !90
  %678 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %663, i1 %85) #2, !dbg !90
  %679 = bitcast i32 %678 to float, !dbg !90
  %680 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %665, i1 %86) #2, !dbg !90
  %681 = bitcast i32 %680 to float, !dbg !90
  %682 = add i32 %46, 51, !dbg !91
  %683 = add i32 %682, %47, !dbg !92
  %684 = add i32 %682, %48, !dbg !92
  %685 = add i32 %682, %49, !dbg !92
  %686 = add i32 %682, %50, !dbg !92
  %687 = add i32 %682, %51, !dbg !92
  %688 = add i32 %682, %52, !dbg !92
  %689 = add i32 %682, %53, !dbg !92
  %690 = add i32 %682, %54, !dbg !92
  %691 = sext i32 %683 to i64, !dbg !93
  %692 = getelementptr float, ptr addrspace(1) %0, i64 %691, !dbg !93
  %693 = sext i32 %684 to i64, !dbg !93
  %694 = getelementptr float, ptr addrspace(1) %0, i64 %693, !dbg !93
  %695 = sext i32 %685 to i64, !dbg !93
  %696 = getelementptr float, ptr addrspace(1) %0, i64 %695, !dbg !93
  %697 = sext i32 %686 to i64, !dbg !93
  %698 = getelementptr float, ptr addrspace(1) %0, i64 %697, !dbg !93
  %699 = sext i32 %687 to i64, !dbg !93
  %700 = getelementptr float, ptr addrspace(1) %0, i64 %699, !dbg !93
  %701 = sext i32 %688 to i64, !dbg !93
  %702 = getelementptr float, ptr addrspace(1) %0, i64 %701, !dbg !93
  %703 = sext i32 %689 to i64, !dbg !93
  %704 = getelementptr float, ptr addrspace(1) %0, i64 %703, !dbg !93
  %705 = sext i32 %690 to i64, !dbg !93
  %706 = getelementptr float, ptr addrspace(1) %0, i64 %705, !dbg !93
  %707 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %692, i1 %79) #2, !dbg !94
  %708 = bitcast i32 %707 to float, !dbg !94
  %709 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %694, i1 %80) #2, !dbg !94
  %710 = bitcast i32 %709 to float, !dbg !94
  %711 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %696, i1 %81) #2, !dbg !94
  %712 = bitcast i32 %711 to float, !dbg !94
  %713 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %698, i1 %82) #2, !dbg !94
  %714 = bitcast i32 %713 to float, !dbg !94
  %715 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %700, i1 %83) #2, !dbg !94
  %716 = bitcast i32 %715 to float, !dbg !94
  %717 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %702, i1 %84) #2, !dbg !94
  %718 = bitcast i32 %717 to float, !dbg !94
  %719 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %704, i1 %85) #2, !dbg !94
  %720 = bitcast i32 %719 to float, !dbg !94
  %721 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %706, i1 %86) #2, !dbg !94
  %722 = bitcast i32 %721 to float, !dbg !94
  %723 = fadd float %90, %132, !dbg !95
  %724 = fadd float %92, %134, !dbg !95
  %725 = fadd float %94, %136, !dbg !95
  %726 = fadd float %96, %138, !dbg !95
  %727 = fadd float %98, %140, !dbg !95
  %728 = fadd float %100, %142, !dbg !95
  %729 = fadd float %102, %144, !dbg !95
  %730 = fadd float %104, %146, !dbg !95
  %731 = fadd float %723, %174, !dbg !96
  %732 = fadd float %724, %176, !dbg !96
  %733 = fadd float %725, %178, !dbg !96
  %734 = fadd float %726, %180, !dbg !96
  %735 = fadd float %727, %182, !dbg !96
  %736 = fadd float %728, %184, !dbg !96
  %737 = fadd float %729, %186, !dbg !96
  %738 = fadd float %730, %188, !dbg !96
  %739 = fadd float %731, %216, !dbg !97
  %740 = fadd float %732, %218, !dbg !97
  %741 = fadd float %733, %220, !dbg !97
  %742 = fadd float %734, %222, !dbg !97
  %743 = fadd float %735, %224, !dbg !97
  %744 = fadd float %736, %226, !dbg !97
  %745 = fadd float %737, %228, !dbg !97
  %746 = fadd float %738, %230, !dbg !97
  %747 = fadd float %739, %257, !dbg !98
  %748 = fadd float %740, %259, !dbg !98
  %749 = fadd float %741, %261, !dbg !98
  %750 = fadd float %742, %263, !dbg !98
  %751 = fadd float %743, %265, !dbg !98
  %752 = fadd float %744, %267, !dbg !98
  %753 = fadd float %745, %269, !dbg !98
  %754 = fadd float %746, %271, !dbg !98
  %755 = fadd float %747, %298, !dbg !99
  %756 = fadd float %748, %300, !dbg !99
  %757 = fadd float %749, %302, !dbg !99
  %758 = fadd float %750, %304, !dbg !99
  %759 = fadd float %751, %306, !dbg !99
  %760 = fadd float %752, %308, !dbg !99
  %761 = fadd float %753, %310, !dbg !99
  %762 = fadd float %754, %312, !dbg !99
  %763 = fadd float %755, %339, !dbg !100
  %764 = fadd float %756, %341, !dbg !100
  %765 = fadd float %757, %343, !dbg !100
  %766 = fadd float %758, %345, !dbg !100
  %767 = fadd float %759, %347, !dbg !100
  %768 = fadd float %760, %349, !dbg !100
  %769 = fadd float %761, %351, !dbg !100
  %770 = fadd float %762, %353, !dbg !100
  %771 = fadd float %763, %380, !dbg !101
  %772 = fadd float %764, %382, !dbg !101
  %773 = fadd float %765, %384, !dbg !101
  %774 = fadd float %766, %386, !dbg !101
  %775 = fadd float %767, %388, !dbg !101
  %776 = fadd float %768, %390, !dbg !101
  %777 = fadd float %769, %392, !dbg !101
  %778 = fadd float %770, %394, !dbg !101
  %779 = fadd float %771, %421, !dbg !102
  %780 = fadd float %772, %423, !dbg !102
  %781 = fadd float %773, %425, !dbg !102
  %782 = fadd float %774, %427, !dbg !102
  %783 = fadd float %775, %429, !dbg !102
  %784 = fadd float %776, %431, !dbg !102
  %785 = fadd float %777, %433, !dbg !102
  %786 = fadd float %778, %435, !dbg !102
  %787 = fadd float %779, %462, !dbg !103
  %788 = fadd float %780, %464, !dbg !103
  %789 = fadd float %781, %466, !dbg !103
  %790 = fadd float %782, %468, !dbg !103
  %791 = fadd float %783, %470, !dbg !103
  %792 = fadd float %784, %472, !dbg !103
  %793 = fadd float %785, %474, !dbg !103
  %794 = fadd float %786, %476, !dbg !103
  %795 = fadd float %787, %503, !dbg !104
  %796 = fadd float %788, %505, !dbg !104
  %797 = fadd float %789, %507, !dbg !104
  %798 = fadd float %790, %509, !dbg !104
  %799 = fadd float %791, %511, !dbg !104
  %800 = fadd float %792, %513, !dbg !104
  %801 = fadd float %793, %515, !dbg !104
  %802 = fadd float %794, %517, !dbg !104
  %803 = fadd float %795, %544, !dbg !105
  %804 = fadd float %796, %546, !dbg !105
  %805 = fadd float %797, %548, !dbg !105
  %806 = fadd float %798, %550, !dbg !105
  %807 = fadd float %799, %552, !dbg !105
  %808 = fadd float %800, %554, !dbg !105
  %809 = fadd float %801, %556, !dbg !105
  %810 = fadd float %802, %558, !dbg !105
  %811 = fadd float %803, %585, !dbg !106
  %812 = fadd float %804, %587, !dbg !106
  %813 = fadd float %805, %589, !dbg !106
  %814 = fadd float %806, %591, !dbg !106
  %815 = fadd float %807, %593, !dbg !106
  %816 = fadd float %808, %595, !dbg !106
  %817 = fadd float %809, %597, !dbg !106
  %818 = fadd float %810, %599, !dbg !106
  %819 = fadd float %811, %626, !dbg !107
  %820 = fadd float %812, %628, !dbg !107
  %821 = fadd float %813, %630, !dbg !107
  %822 = fadd float %814, %632, !dbg !107
  %823 = fadd float %815, %634, !dbg !107
  %824 = fadd float %816, %636, !dbg !107
  %825 = fadd float %817, %638, !dbg !107
  %826 = fadd float %818, %640, !dbg !107
  %827 = fadd float %819, %667, !dbg !108
  %828 = fadd float %820, %669, !dbg !108
  %829 = fadd float %821, %671, !dbg !108
  %830 = fadd float %822, %673, !dbg !108
  %831 = fadd float %823, %675, !dbg !108
  %832 = fadd float %824, %677, !dbg !108
  %833 = fadd float %825, %679, !dbg !108
  %834 = fadd float %826, %681, !dbg !108
  %835 = fadd float %827, %708, !dbg !109
  %836 = fadd float %828, %710, !dbg !109
  %837 = fadd float %829, %712, !dbg !109
  %838 = fadd float %830, %714, !dbg !109
  %839 = fadd float %831, %716, !dbg !109
  %840 = fadd float %832, %718, !dbg !109
  %841 = fadd float %833, %720, !dbg !109
  %842 = fadd float %834, %722, !dbg !109
  %843 = fmul float %835, 6.250000e-02, !dbg !110
  %844 = fmul float %836, 6.250000e-02, !dbg !110
  %845 = fmul float %837, 6.250000e-02, !dbg !110
  %846 = fmul float %838, 6.250000e-02, !dbg !110
  %847 = fmul float %839, 6.250000e-02, !dbg !110
  %848 = fmul float %840, 6.250000e-02, !dbg !110
  %849 = fmul float %841, 6.250000e-02, !dbg !110
  %850 = fmul float %842, 6.250000e-02, !dbg !110
  %851 = shl i32 %35, 6, !dbg !111
  %852 = shl i32 %36, 6, !dbg !111
  %853 = shl i32 %42, 10, !dbg !112
  %854 = add i32 %853, %.decomposed17, !dbg !113
  %855 = add i32 %854, %851, !dbg !114
  %856 = add i32 %854, %852, !dbg !114
  %857 = sext i32 %855 to i64, !dbg !115
  %858 = getelementptr float, ptr addrspace(1) %1, i64 %857, !dbg !115
  %859 = sext i32 %856 to i64, !dbg !115
  %860 = getelementptr float, ptr addrspace(1) %1, i64 %859, !dbg !115
  %861 = shl i32 %7, 6, !dbg !116
  %862 = and i32 %861, 960, !dbg !116
  %863 = or disjoint i32 %862, %9, !dbg !116
  %864 = and i32 %11, 508, !dbg !116
  %865 = lshr exact i32 %862, 4, !dbg !116
  %866 = add nuw nsw i32 %865, %863, !dbg !116
  %867 = zext nneg i32 %866 to i64, !dbg !116
  %868 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %867, !dbg !116
  %869 = bitcast float %843 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %868, <1 x i32> %869, i1 true) #2, !dbg !116
  %870 = or disjoint i32 %863, 8, !dbg !116
  %871 = add nuw nsw i32 %870, %865, !dbg !116
  %872 = zext nneg i32 %871 to i64, !dbg !116
  %873 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %872, !dbg !116
  %874 = bitcast float %844 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %873, <1 x i32> %874, i1 true) #2, !dbg !116
  %875 = or disjoint i32 %863, 16, !dbg !116
  %876 = add nuw nsw i32 %875, %865, !dbg !116
  %877 = zext nneg i32 %876 to i64, !dbg !116
  %878 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %877, !dbg !116
  %879 = bitcast float %845 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %878, <1 x i32> %879, i1 true) #2, !dbg !116
  %880 = or disjoint i32 %863, 24, !dbg !116
  %881 = add nuw nsw i32 %880, %865, !dbg !116
  %882 = zext nneg i32 %881 to i64, !dbg !116
  %883 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %882, !dbg !116
  %884 = bitcast float %846 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %883, <1 x i32> %884, i1 true) #2, !dbg !116
  %885 = or disjoint i32 %863, 32, !dbg !116
  %886 = add nuw nsw i32 %885, %865, !dbg !116
  %887 = zext nneg i32 %886 to i64, !dbg !116
  %888 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %887, !dbg !116
  %889 = bitcast float %847 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %888, <1 x i32> %889, i1 true) #2, !dbg !116
  %890 = or disjoint i32 %863, 40, !dbg !116
  %891 = add nuw nsw i32 %890, %865, !dbg !116
  %892 = zext nneg i32 %891 to i64, !dbg !116
  %893 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %892, !dbg !116
  %894 = bitcast float %848 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %893, <1 x i32> %894, i1 true) #2, !dbg !116
  %895 = or disjoint i32 %863, 48, !dbg !116
  %896 = add nuw nsw i32 %895, %865, !dbg !116
  %897 = zext nneg i32 %896 to i64, !dbg !116
  %898 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %897, !dbg !116
  %899 = bitcast float %849 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %898, <1 x i32> %899, i1 true) #2, !dbg !116
  %900 = or disjoint i32 %863, 56, !dbg !116
  %901 = add nuw nsw i32 %900, %865, !dbg !116
  %902 = zext nneg i32 %901 to i64, !dbg !116
  %903 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %902, !dbg !116
  %904 = bitcast float %850 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %903, <1 x i32> %904, i1 true) #2, !dbg !116
  tail call void @llvm.nvvm.barrier0(), !dbg !116
  %905 = lshr i32 %11, 4, !dbg !116
  %906 = and i32 %905, 28, !dbg !116
  %907 = add nuw nsw i32 %906, %864, !dbg !116
  %908 = zext nneg i32 %907 to i64, !dbg !116
  %909 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %908, !dbg !116
  %910 = or disjoint i32 %864, 512, !dbg !116
  %911 = lshr i32 %910, 4, !dbg !116
  %912 = and i32 %911, 60, !dbg !116
  %913 = add nuw nsw i32 %912, %910, !dbg !116
  %914 = zext nneg i32 %913 to i64, !dbg !116
  %915 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %914, !dbg !116
  %916 = load <4 x i32>, ptr addrspace(3) %915, align 16, !dbg !116
  %.extract = load i32, ptr addrspace(3) %909, align 16, !dbg !116
  %917 = getelementptr inbounds i8, ptr addrspace(3) %909, i64 4, !dbg !116
  %.extract9 = load i32, ptr addrspace(3) %917, align 4, !dbg !116
  %918 = getelementptr inbounds i8, ptr addrspace(3) %909, i64 8, !dbg !116
  %.extract10 = load i32, ptr addrspace(3) %918, align 8, !dbg !116
  %919 = getelementptr inbounds i8, ptr addrspace(3) %909, i64 12, !dbg !116
  %.extract11 = load i32, ptr addrspace(3) %919, align 4, !dbg !116
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %858, i1 %87) #2, !dbg !116
  %.extract12 = extractelement <4 x i32> %916, i64 0, !dbg !116
  %.extract13 = extractelement <4 x i32> %916, i64 1, !dbg !116
  %.extract14 = extractelement <4 x i32> %916, i64 2, !dbg !116
  %.extract15 = extractelement <4 x i32> %916, i64 3, !dbg !116
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %860, i1 %88) #2, !dbg !116
  ret void, !dbg !117
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chowzhhga6d4gm5mvxezhsgi4mrf4odc72al6zp46irtgpxpyyri.py", directory: "inductor_cache/ho")
!4 = !{ptr @triton_poi_fused_avg_pool2d_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_24", linkageName: "triton_poi_fused_avg_pool2d_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 32, scope: !7)
!25 = !DILocation(line: 34, column: 40, scope: !7)
!26 = !DILocation(line: 34, column: 37, scope: !7)
!27 = !DILocation(line: 34, column: 49, scope: !7)
!28 = !DILocation(line: 34, column: 45, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 62, scope: !7)
!31 = !DILocation(line: 34, column: 54, scope: !7)
!32 = !DILocation(line: 35, column: 34, scope: !7)
!33 = !DILocation(line: 35, column: 41, scope: !7)
!34 = !DILocation(line: 35, column: 49, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 58, scope: !7)
!37 = !DILocation(line: 36, column: 34, scope: !7)
!38 = !DILocation(line: 36, column: 41, scope: !7)
!39 = !DILocation(line: 36, column: 49, scope: !7)
!40 = !DILocation(line: 36, column: 30, scope: !7)
!41 = !DILocation(line: 36, column: 58, scope: !7)
!42 = !DILocation(line: 37, column: 34, scope: !7)
!43 = !DILocation(line: 37, column: 41, scope: !7)
!44 = !DILocation(line: 37, column: 49, scope: !7)
!45 = !DILocation(line: 37, column: 30, scope: !7)
!46 = !DILocation(line: 37, column: 58, scope: !7)
!47 = !DILocation(line: 38, column: 42, scope: !7)
!48 = !DILocation(line: 38, column: 50, scope: !7)
!49 = !DILocation(line: 38, column: 30, scope: !7)
!50 = !DILocation(line: 38, column: 59, scope: !7)
!51 = !DILocation(line: 39, column: 42, scope: !7)
!52 = !DILocation(line: 39, column: 50, scope: !7)
!53 = !DILocation(line: 39, column: 30, scope: !7)
!54 = !DILocation(line: 39, column: 59, scope: !7)
!55 = !DILocation(line: 40, column: 43, scope: !7)
!56 = !DILocation(line: 40, column: 51, scope: !7)
!57 = !DILocation(line: 40, column: 31, scope: !7)
!58 = !DILocation(line: 40, column: 60, scope: !7)
!59 = !DILocation(line: 41, column: 43, scope: !7)
!60 = !DILocation(line: 41, column: 51, scope: !7)
!61 = !DILocation(line: 41, column: 31, scope: !7)
!62 = !DILocation(line: 41, column: 60, scope: !7)
!63 = !DILocation(line: 42, column: 43, scope: !7)
!64 = !DILocation(line: 42, column: 51, scope: !7)
!65 = !DILocation(line: 42, column: 31, scope: !7)
!66 = !DILocation(line: 42, column: 60, scope: !7)
!67 = !DILocation(line: 43, column: 43, scope: !7)
!68 = !DILocation(line: 43, column: 51, scope: !7)
!69 = !DILocation(line: 43, column: 31, scope: !7)
!70 = !DILocation(line: 43, column: 60, scope: !7)
!71 = !DILocation(line: 44, column: 43, scope: !7)
!72 = !DILocation(line: 44, column: 51, scope: !7)
!73 = !DILocation(line: 44, column: 31, scope: !7)
!74 = !DILocation(line: 44, column: 60, scope: !7)
!75 = !DILocation(line: 45, column: 43, scope: !7)
!76 = !DILocation(line: 45, column: 51, scope: !7)
!77 = !DILocation(line: 45, column: 31, scope: !7)
!78 = !DILocation(line: 45, column: 60, scope: !7)
!79 = !DILocation(line: 46, column: 43, scope: !7)
!80 = !DILocation(line: 46, column: 51, scope: !7)
!81 = !DILocation(line: 46, column: 31, scope: !7)
!82 = !DILocation(line: 46, column: 60, scope: !7)
!83 = !DILocation(line: 47, column: 43, scope: !7)
!84 = !DILocation(line: 47, column: 51, scope: !7)
!85 = !DILocation(line: 47, column: 31, scope: !7)
!86 = !DILocation(line: 47, column: 60, scope: !7)
!87 = !DILocation(line: 48, column: 43, scope: !7)
!88 = !DILocation(line: 48, column: 51, scope: !7)
!89 = !DILocation(line: 48, column: 31, scope: !7)
!90 = !DILocation(line: 48, column: 60, scope: !7)
!91 = !DILocation(line: 49, column: 43, scope: !7)
!92 = !DILocation(line: 49, column: 51, scope: !7)
!93 = !DILocation(line: 49, column: 31, scope: !7)
!94 = !DILocation(line: 49, column: 60, scope: !7)
!95 = !DILocation(line: 50, column: 18, scope: !7)
!96 = !DILocation(line: 51, column: 18, scope: !7)
!97 = !DILocation(line: 52, column: 18, scope: !7)
!98 = !DILocation(line: 53, column: 18, scope: !7)
!99 = !DILocation(line: 54, column: 19, scope: !7)
!100 = !DILocation(line: 55, column: 20, scope: !7)
!101 = !DILocation(line: 56, column: 20, scope: !7)
!102 = !DILocation(line: 57, column: 20, scope: !7)
!103 = !DILocation(line: 58, column: 20, scope: !7)
!104 = !DILocation(line: 59, column: 20, scope: !7)
!105 = !DILocation(line: 60, column: 20, scope: !7)
!106 = !DILocation(line: 61, column: 20, scope: !7)
!107 = !DILocation(line: 62, column: 20, scope: !7)
!108 = !DILocation(line: 63, column: 20, scope: !7)
!109 = !DILocation(line: 64, column: 20, scope: !7)
!110 = !DILocation(line: 66, column: 20, scope: !7)
!111 = !DILocation(line: 67, column: 33, scope: !7)
!112 = !DILocation(line: 67, column: 43, scope: !7)
!113 = !DILocation(line: 67, column: 30, scope: !7)
!114 = !DILocation(line: 67, column: 38, scope: !7)
!115 = !DILocation(line: 67, column: 25, scope: !7)
!116 = !DILocation(line: 67, column: 55, scope: !7)
!117 = !DILocation(line: 67, column: 4, scope: !7)
