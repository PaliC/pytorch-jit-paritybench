; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_cat_convolution_51(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 3, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = and i32 %10, 7, !dbg !12
  %14 = or disjoint i32 %9, %12, !dbg !13
  %15 = icmp slt i32 %14, 256, !dbg !14
  %16 = shl i32 %10, 1, !dbg !15
  %17 = and i32 %16, 14, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %18 = sdiv i32 %.frozen, 64, !dbg !16
  %19 = mul i32 %18, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %20 = shl i32 %14, 4, !dbg !18
  %21 = or disjoint i32 %20, %17, !dbg !19
  %22 = sext i32 %21 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !20
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !21
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !21
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !21
  %27 = bitcast i32 %25 to float, !dbg !21
  %28 = bitcast i32 %26 to float, !dbg !21
  %29 = sext i32 %.decomposed to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %15) #5, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %15) #5, !dbg !23
  %33 = bitcast i32 %32 to float, !dbg !23
  %34 = fadd float %27, %33, !dbg !24
  %35 = fadd float %28, %33, !dbg !24
  %36 = fadd float %34, %35, !dbg !25
  %37 = select i1 %15, float %36, float 0.000000e+00, !dbg !25
  %38 = bitcast float %37 to i32, !dbg !30
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 4, i32 31), !dbg !30
  %40 = bitcast i32 %39 to float, !dbg !30
  %41 = fadd float %37, %40, !dbg !25
  %42 = bitcast float %41 to i32, !dbg !30
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 2, i32 31), !dbg !30
  %44 = bitcast i32 %43 to float, !dbg !30
  %45 = fadd float %41, %44, !dbg !25
  %46 = bitcast float %45 to i32, !dbg !30
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 1, i32 31), !dbg !30
  %48 = bitcast i32 %47 to float, !dbg !30
  %49 = fadd float %45, %48, !dbg !25
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %51 = bitcast float %49 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %51, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !31
  %53 = load float, ptr addrspace(3) %52, align 4, !dbg !31
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float 1.600000e+01) #5, !dbg !31
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float 1.600000e+01) #5, !dbg !31
  %56 = fsub float %34, %55, !dbg !32
  %57 = fsub float %35, %55, !dbg !32
  %58 = fmul float %56, %56, !dbg !33
  %59 = fmul float %57, %57, !dbg !33
  %60 = fadd float %58, %59, !dbg !34
  %61 = select i1 %15, float %60, float 0.000000e+00, !dbg !34
  %62 = bitcast float %61 to i32, !dbg !36
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 4, i32 31), !dbg !36
  %64 = bitcast i32 %63 to float, !dbg !36
  %65 = fadd float %61, %64, !dbg !34
  %66 = bitcast float %65 to i32, !dbg !36
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 2, i32 31), !dbg !36
  %68 = bitcast i32 %67 to float, !dbg !36
  %69 = fadd float %65, %68, !dbg !34
  %70 = bitcast float %69 to i32, !dbg !36
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !36
  %72 = bitcast i32 %71 to float, !dbg !36
  %73 = fadd float %69, %72, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %74 = bitcast float %73 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %74, i1 true) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %75 = load float, ptr addrspace(3) %52, align 4, !dbg !37
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float 1.600000e+01) #5, !dbg !38
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float 1.600000e+01) #5, !dbg !38
  %78 = fadd float %76, 0x3EE4F8B580000000, !dbg !39
  %79 = fadd float %77, 0x3EE4F8B580000000, !dbg !39
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %80, 0, !dbg !37
  br i1 %.not.i, label %83, label %81, !dbg !37

81:                                               ; preds = %7
  %82 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %78), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

83:                                               ; preds = %7
  %84 = tail call float @llvm.nvvm.rsqrt.approx.f(float %78), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %81, %83
  %.0.i = phi float [ %82, %81 ], [ %84, %83 ], !dbg !37
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i4 = icmp eq i32 %86, 0, !dbg !37
  br i1 %.not.i4, label %89, label %87, !dbg !37

87:                                               ; preds = %__nv_rsqrtf.exit
  %88 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %79), !dbg !37
  br label %__nv_rsqrtf.exit6, !dbg !37

89:                                               ; preds = %__nv_rsqrtf.exit
  %90 = tail call float @llvm.nvvm.rsqrt.approx.f(float %79), !dbg !37
  br label %__nv_rsqrtf.exit6, !dbg !37

__nv_rsqrtf.exit6:                                ; preds = %87, %89
  %.0.i5 = phi float [ %88, %87 ], [ %90, %89 ], !dbg !37
  %91 = or disjoint i32 %9, %13, !dbg !13
  %92 = icmp slt i32 %91, 256, !dbg !14
  %93 = fmul float %56, %.0.i5, !dbg !40
  %94 = fmul float %57, %.0.i5, !dbg !40
  %95 = fcmp olt float %93, 0.000000e+00, !dbg !41
  %96 = fcmp olt float %94, 0.000000e+00, !dbg !41
  %97 = select i1 %95, float 0.000000e+00, float %93, !dbg !45
  %98 = select i1 %96, float 0.000000e+00, float %94, !dbg !45
  %99 = bitcast float %34 to i32, !dbg !46
  %100 = bitcast float %35 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %99, i32 %100, ptr addrspace(1) %23, i1 %15) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %101 = sext i32 %91 to i64, !dbg !48
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !48
  %103 = and i32 %10, 56, !dbg !49
  %104 = icmp eq i32 %103, 0, !dbg !49
  %105 = bitcast float %.0.i to i32, !dbg !49
  %106 = and i1 %104, %92, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %105, ptr addrspace(1) %102, i1 %106) #5, !dbg !49
  %107 = shl nsw i32 %.decomposed, 4, !dbg !50
  %108 = or disjoint i32 %107, %17, !dbg !51
  %109 = mul i32 %18, 17408, !dbg !52
  %110 = add i32 %108, %109, !dbg !53
  %111 = sext i32 %110 to i64, !dbg !54
  %112 = getelementptr float, ptr addrspace(1) %4, i64 %111, !dbg !54
  %113 = bitcast float %97 to i32, !dbg !55
  %114 = bitcast float %98 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %113, i32 %114, ptr addrspace(1) %112, i1 %15) #5, !dbg !55
  %115 = getelementptr float, ptr addrspace(1) %3, i64 %101, !dbg !56
  %116 = bitcast float %54 to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %116, ptr addrspace(1) %115, i1 %106) #5, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py", directory: "inductor_cache/ef")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_cat_convolution_51, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_cat_convolution_51, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_cat_convolution_51", linkageName: "triton_per_fused__native_batch_norm_legit_cat_convolution_51", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 42, scope: !7)
!19 = !DILocation(line: 33, column: 39, scope: !7)
!20 = !DILocation(line: 33, column: 34, scope: !7)
!21 = !DILocation(line: 33, column: 47, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 18, scope: !7)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!29 = !DILocation(line: 40, column: 24, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 43, column: 19, scope: !7)
!32 = !DILocation(line: 44, column: 19, scope: !7)
!33 = !DILocation(line: 45, column: 20, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !35)
!35 = !DILocation(line: 48, column: 26, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !35)
!37 = !DILocation(line: 53, column: 28, scope: !7)
!38 = !DILocation(line: 50, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 20, scope: !7)
!40 = !DILocation(line: 55, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 57, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 58, column: 47, scope: !7)
!47 = !DILocation(line: 59, column: 4, scope: !7)
!48 = !DILocation(line: 60, column: 28, scope: !7)
!49 = !DILocation(line: 60, column: 40, scope: !7)
!50 = !DILocation(line: 61, column: 33, scope: !7)
!51 = !DILocation(line: 61, column: 30, scope: !7)
!52 = !DILocation(line: 61, column: 44, scope: !7)
!53 = !DILocation(line: 61, column: 38, scope: !7)
!54 = !DILocation(line: 61, column: 25, scope: !7)
!55 = !DILocation(line: 61, column: 56, scope: !7)
!56 = !DILocation(line: 62, column: 25, scope: !7)
!57 = !DILocation(line: 62, column: 37, scope: !7)
!58 = !DILocation(line: 62, column: 4, scope: !7)
