; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %14 = and i32 %12, 60, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %15, 32, !dbg !13
  %17 = or disjoint i32 %8, %14, !dbg !13
  %18 = icmp slt i32 %15, 512, !dbg !14
  %19 = icmp slt i32 %16, 512, !dbg !14
  %20 = icmp slt i32 %17, 512, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %22 = shl i32 %21, 4, !dbg !16
  %23 = lshr i32 %9, 4, !dbg !17
  %24 = and i32 %23, 7, !dbg !17
  %25 = or disjoint i32 %22, %24, !dbg !18
  %26 = or disjoint i32 %25, 8, !dbg !18
  %27 = or disjoint i32 %22, %13, !dbg !18
  %28 = icmp slt i32 %25, 16, !dbg !19
  %29 = icmp slt i32 %26, 16, !dbg !19
  %30 = icmp slt i32 %27, 16, !dbg !19
  %.frozen = freeze i32 %25, !dbg !20
  %31 = sdiv i32 %.frozen, 4, !dbg !20
  %32 = sdiv i32 %26, 4, !dbg !20
  %33 = mul i32 %31, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %33, !dbg !21
  %.frozen13 = freeze i32 %17, !dbg !22
  %34 = sdiv i32 %.frozen13, 128, !dbg !22
  %35 = mul i32 %34, 128, !dbg !23
  %.decomposed14 = sub i32 %.frozen13, %35, !dbg !23
  %36 = sext i32 %31 to i64, !dbg !24
  %37 = getelementptr i64, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = sext i32 %32 to i64, !dbg !24
  %39 = getelementptr i64, ptr addrspace(1) %0, i64 %38, !dbg !24
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %28) #2, !dbg !25
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %28) #2, !dbg !25
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %28) #2, !dbg !25
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %28) #2, !dbg !25
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %29) #2, !dbg !25
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %29) #2, !dbg !25
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %29) #2, !dbg !25
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %29) #2, !dbg !25
  %48 = sext i32 %.decomposed to i64, !dbg !26
  %49 = getelementptr i64, ptr addrspace(1) %0, i64 %48, !dbg !26
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 %28) #2, !dbg !27
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 %28) #2, !dbg !27
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 %28) #2, !dbg !27
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 %28) #2, !dbg !27
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 %29) #2, !dbg !27
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 %29) #2, !dbg !27
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 %29) #2, !dbg !27
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 %29) #2, !dbg !27
  %58 = shl i32 %15, 4, !dbg !28
  %59 = shl i32 %16, 4, !dbg !28
  %60 = add i32 %27, %58, !dbg !29
  %61 = add i32 %27, %59, !dbg !29
  %62 = sext i32 %60 to i64, !dbg !30
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !30
  %64 = sext i32 %61 to i64, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !30
  %66 = and i1 %18, %30, !dbg !31
  %67 = and i1 %19, %30, !dbg !31
  %68 = and i1 %20, %28, !dbg !31
  %69 = and i1 %29, %20, !dbg !31
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %66) #2, !dbg !32
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !32
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !32
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !32
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !32
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %67) #2, !dbg !32
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !32
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !32
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !32
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !32
  %80 = shl i32 %9, 8, !dbg !32
  %81 = and i32 %80, 768, !dbg !32
  %82 = or disjoint i32 %81, %11, !dbg !32
  %83 = and i32 %12, 508, !dbg !32
  %84 = lshr exact i32 %81, 4, !dbg !32
  %85 = add nuw nsw i32 %84, %82, !dbg !32
  %86 = zext nneg i32 %85 to i64, !dbg !32
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %86, !dbg !32
  %88 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !32
  %89 = or disjoint i32 %82, 64, !dbg !32
  %90 = lshr i32 %89, 4, !dbg !32
  %91 = and i32 %90, 52, !dbg !32
  %92 = add nuw nsw i32 %91, %89, !dbg !32
  %93 = zext nneg i32 %92 to i64, !dbg !32
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %93, !dbg !32
  %95 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #2, !dbg !32
  %96 = or disjoint i32 %82, 128, !dbg !32
  %97 = lshr i32 %96, 4, !dbg !32
  %98 = and i32 %97, 56, !dbg !32
  %99 = add nuw nsw i32 %98, %96, !dbg !32
  %100 = zext nneg i32 %99 to i64, !dbg !32
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %100, !dbg !32
  %102 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #2, !dbg !32
  %103 = or disjoint i32 %82, 192, !dbg !32
  %104 = lshr i32 %103, 4, !dbg !32
  %105 = and i32 %104, 60, !dbg !32
  %106 = add nuw nsw i32 %105, %103, !dbg !32
  %107 = zext nneg i32 %106 to i64, !dbg !32
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %107, !dbg !32
  %109 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !32
  %110 = or disjoint i32 %82, 32, !dbg !32
  %111 = add nuw nsw i32 %110, %84, !dbg !32
  %112 = zext nneg i32 %111 to i64, !dbg !32
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %112, !dbg !32
  %114 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !32
  %115 = or disjoint i32 %82, 96, !dbg !32
  %116 = lshr i32 %115, 4, !dbg !32
  %117 = and i32 %116, 52, !dbg !32
  %118 = add nuw nsw i32 %117, %115, !dbg !32
  %119 = zext nneg i32 %118 to i64, !dbg !32
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %119, !dbg !32
  %121 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #2, !dbg !32
  %122 = or disjoint i32 %82, 160, !dbg !32
  %123 = lshr i32 %122, 4, !dbg !32
  %124 = and i32 %123, 56, !dbg !32
  %125 = add nuw nsw i32 %124, %122, !dbg !32
  %126 = zext nneg i32 %125 to i64, !dbg !32
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %126, !dbg !32
  %128 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #2, !dbg !32
  %129 = or disjoint i32 %82, 224, !dbg !32
  %130 = lshr i32 %129, 4, !dbg !32
  %131 = and i32 %130, 60, !dbg !32
  %132 = add nuw nsw i32 %131, %129, !dbg !32
  %133 = zext nneg i32 %132 to i64, !dbg !32
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %133, !dbg !32
  %135 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %136 = lshr i32 %12, 4, !dbg !32
  %137 = and i32 %136, 28, !dbg !32
  %138 = add nuw nsw i32 %137, %83, !dbg !32
  %139 = zext nneg i32 %138 to i64, !dbg !32
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %139, !dbg !32
  %141 = load float, ptr addrspace(3) %140, align 16, !dbg !32
  %142 = getelementptr inbounds i8, ptr addrspace(3) %140, i64 4, !dbg !32
  %143 = load float, ptr addrspace(3) %142, align 4, !dbg !32
  %144 = getelementptr inbounds i8, ptr addrspace(3) %140, i64 8, !dbg !32
  %145 = load float, ptr addrspace(3) %144, align 8, !dbg !32
  %146 = getelementptr inbounds i8, ptr addrspace(3) %140, i64 12, !dbg !32
  %147 = load float, ptr addrspace(3) %146, align 4, !dbg !32
  %148 = or disjoint i32 %83, 512, !dbg !32
  %149 = lshr i32 %148, 4, !dbg !32
  %150 = and i32 %149, 60, !dbg !32
  %151 = add nuw nsw i32 %150, %148, !dbg !32
  %152 = zext nneg i32 %151 to i64, !dbg !32
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %152, !dbg !32
  %154 = load float, ptr addrspace(3) %153, align 16, !dbg !32
  %155 = getelementptr inbounds i8, ptr addrspace(3) %153, i64 4, !dbg !32
  %156 = load float, ptr addrspace(3) %155, align 4, !dbg !32
  %157 = getelementptr inbounds i8, ptr addrspace(3) %153, i64 8, !dbg !32
  %158 = load float, ptr addrspace(3) %157, align 8, !dbg !32
  %159 = getelementptr inbounds i8, ptr addrspace(3) %153, i64 12, !dbg !32
  %160 = load float, ptr addrspace(3) %159, align 4, !dbg !32
  %161 = lshr i64 %43, 57, !dbg !33
  %162 = and i64 %161, 64, !dbg !33
  %163 = add i64 %162, %43, !dbg !33
  %164 = lshr i64 %47, 57, !dbg !33
  %165 = and i64 %164, 64, !dbg !33
  %166 = add i64 %165, %47, !dbg !33
  %167 = lshr i64 %53, 57, !dbg !34
  %168 = and i64 %167, 64, !dbg !34
  %169 = add i64 %168, %53, !dbg !34
  %170 = lshr i64 %57, 57, !dbg !34
  %171 = and i64 %170, 64, !dbg !34
  %172 = add i64 %171, %57, !dbg !34
  %173 = sext i32 %.decomposed14 to i64, !dbg !35
  %174 = shl i32 %34, 19, !dbg !36
  %175 = sext i32 %174 to i64, !dbg !37
  %.idx = shl i64 %169, 9, !dbg !38
  %176 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !38
  %177 = getelementptr float, ptr addrspace(1) %176, i64 %173, !dbg !38
  %.idx10 = shl i64 %163, 15, !dbg !38
  %178 = getelementptr i8, ptr addrspace(1) %177, i64 %.idx10, !dbg !38
  %179 = getelementptr float, ptr addrspace(1) %178, i64 %175, !dbg !38
  %.idx11 = shl i64 %172, 9, !dbg !38
  %180 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx11, !dbg !38
  %181 = getelementptr float, ptr addrspace(1) %180, i64 %173, !dbg !38
  %.idx12 = shl i64 %166, 15, !dbg !38
  %182 = getelementptr i8, ptr addrspace(1) %181, i64 %.idx12, !dbg !38
  %183 = getelementptr float, ptr addrspace(1) %182, i64 %175, !dbg !38
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %179, i1 %68) #2, !dbg !39
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !39
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !39
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !39
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !39
  %189 = bitcast i32 %185 to float, !dbg !39
  %190 = bitcast i32 %186 to float, !dbg !39
  %191 = bitcast i32 %187 to float, !dbg !39
  %192 = bitcast i32 %188 to float, !dbg !39
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %183, i1 %69) #2, !dbg !39
  %194 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !39
  %195 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !39
  %196 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !39
  %197 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !39
  %198 = bitcast i32 %194 to float, !dbg !39
  %199 = bitcast i32 %195 to float, !dbg !39
  %200 = bitcast i32 %196 to float, !dbg !39
  %201 = bitcast i32 %197 to float, !dbg !39
  %202 = fadd float %141, %189, !dbg !40
  %203 = fadd float %143, %190, !dbg !40
  %204 = fadd float %145, %191, !dbg !40
  %205 = fadd float %147, %192, !dbg !40
  %206 = fadd float %154, %198, !dbg !40
  %207 = fadd float %156, %199, !dbg !40
  %208 = fadd float %158, %200, !dbg !40
  %209 = fadd float %160, %201, !dbg !40
  %210 = shl i32 %25, 7, !dbg !41
  %211 = shl i32 %26, 7, !dbg !41
  %212 = shl i32 %34, 11, !dbg !42
  %213 = add i32 %212, %.decomposed14, !dbg !43
  %214 = add i32 %213, %210, !dbg !44
  %215 = add i32 %213, %211, !dbg !44
  %216 = sext i32 %214 to i64, !dbg !45
  %217 = getelementptr float, ptr addrspace(1) %3, i64 %216, !dbg !45
  %218 = sext i32 %215 to i64, !dbg !45
  %219 = getelementptr float, ptr addrspace(1) %3, i64 %218, !dbg !45
  %220 = bitcast float %202 to i32, !dbg !46
  %221 = bitcast float %203 to i32, !dbg !46
  %222 = bitcast float %204 to i32, !dbg !46
  %223 = bitcast float %205 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %220, i32 %221, i32 %222, i32 %223, ptr addrspace(1) %217, i1 %68) #2, !dbg !46
  %224 = bitcast float %206 to i32, !dbg !46
  %225 = bitcast float %207 to i32, !dbg !46
  %226 = bitcast float %208 to i32, !dbg !46
  %227 = bitcast float %209 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %224, i32 %225, i32 %226, i32 %227, ptr addrspace(1) %219, i1 %69) #2, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv5lqiyv2o7e3u2pkp4yb7derdn4hbss36shhmvaympeuv4wlue5.py", directory: "inductor_cache/v5")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_4", linkageName: "triton_poi_fused__unsafe_index_add_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 30, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 39, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 52, scope: !7)
!32 = !DILocation(line: 36, column: 44, scope: !7)
!33 = !DILocation(line: 40, column: 32, scope: !7)
!34 = !DILocation(line: 43, column: 32, scope: !7)
!35 = !DILocation(line: 44, column: 35, scope: !7)
!36 = !DILocation(line: 44, column: 65, scope: !7)
!37 = !DILocation(line: 44, column: 58, scope: !7)
!38 = !DILocation(line: 44, column: 30, scope: !7)
!39 = !DILocation(line: 44, column: 70, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 34, scope: !7)
!42 = !DILocation(line: 46, column: 44, scope: !7)
!43 = !DILocation(line: 46, column: 30, scope: !7)
!44 = !DILocation(line: 46, column: 39, scope: !7)
!45 = !DILocation(line: 46, column: 25, scope: !7)
!46 = !DILocation(line: 46, column: 56, scope: !7)
!47 = !DILocation(line: 46, column: 4, scope: !7)
