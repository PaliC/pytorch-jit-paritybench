; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = and i32 %11, 252, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %14, 64, !dbg !13
  %16 = or disjoint i32 %14, 128, !dbg !13
  %17 = or disjoint i32 %14, 192, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = icmp slt i32 %14, 512, !dbg !14
  %20 = icmp slt i32 %15, 512, !dbg !14
  %21 = icmp slt i32 %16, 512, !dbg !14
  %22 = icmp slt i32 %17, 512, !dbg !14
  %23 = icmp slt i32 %18, 512, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %25 = shl i32 %24, 4, !dbg !16
  %.lobit12 = lshr i32 %8, 6, !dbg !17
  %26 = and i32 %.lobit12, 3, !dbg !17
  %27 = or disjoint i32 %25, %12, !dbg !18
  %28 = or disjoint i32 %25, %26, !dbg !18
  %29 = or disjoint i32 %28, 4, !dbg !18
  %30 = or disjoint i32 %28, 8, !dbg !18
  %31 = or disjoint i32 %28, 12, !dbg !18
  %32 = icmp slt i32 %27, 64, !dbg !19
  %33 = icmp slt i32 %28, 64, !dbg !19
  %34 = icmp slt i32 %29, 64, !dbg !19
  %35 = icmp slt i32 %30, 64, !dbg !19
  %36 = icmp slt i32 %31, 64, !dbg !19
  %.frozen = freeze i32 %18, !dbg !20
  %37 = sdiv i32 %.frozen, 128, !dbg !20
  %38 = mul i32 %37, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %38, !dbg !21
  %39 = shl i32 %14, 6, !dbg !22
  %40 = shl i32 %15, 6, !dbg !22
  %41 = shl i32 %16, 6, !dbg !22
  %42 = shl i32 %17, 6, !dbg !22
  %43 = add i32 %27, %39, !dbg !23
  %44 = add i32 %27, %40, !dbg !23
  %45 = add i32 %27, %41, !dbg !23
  %46 = add i32 %27, %42, !dbg !23
  %47 = sext i32 %43 to i64, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !24
  %49 = sext i32 %44 to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !24
  %51 = sext i32 %45 to i64, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !24
  %53 = sext i32 %46 to i64, !dbg !24
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !24
  %55 = and i1 %19, %32, !dbg !25
  %56 = and i1 %20, %32, !dbg !25
  %57 = and i1 %21, %32, !dbg !25
  %58 = and i1 %22, %32, !dbg !25
  %59 = and i1 %23, %33, !dbg !25
  %60 = and i1 %34, %23, !dbg !25
  %61 = and i1 %35, %23, !dbg !25
  %62 = and i1 %36, %23, !dbg !25
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %55) #2, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !26
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %56) #2, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !26
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %57) #2, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !26
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %58) #2, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !26
  %83 = shl i32 %28, 7, !dbg !27
  %84 = shl i32 %29, 7, !dbg !27
  %85 = shl i32 %30, 7, !dbg !27
  %86 = shl i32 %31, 7, !dbg !27
  %87 = shl i32 %37, 13, !dbg !28
  %88 = add i32 %87, %.decomposed, !dbg !29
  %89 = add i32 %88, %83, !dbg !30
  %90 = add i32 %88, %84, !dbg !30
  %91 = add i32 %88, %85, !dbg !30
  %92 = add i32 %88, %86, !dbg !30
  %93 = sext i32 %89 to i64, !dbg !31
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !31
  %95 = sext i32 %90 to i64, !dbg !31
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !31
  %97 = sext i32 %91 to i64, !dbg !31
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !31
  %99 = sext i32 %92 to i64, !dbg !31
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !31
  %101 = shl i32 %8, 10, !dbg !32
  %102 = and i32 %101, 3072, !dbg !32
  %103 = or disjoint i32 %102, %10, !dbg !32
  %104 = and i32 %11, 1020, !dbg !32
  %105 = lshr exact i32 %102, 4, !dbg !32
  %106 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %105, !dbg !32
  %107 = getelementptr float, ptr addrspace(3) %106, i32 %103, !dbg !32
  %108 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #2, !dbg !32
  %109 = or disjoint i32 %103, 256, !dbg !32
  %110 = lshr i32 %109, 6, !dbg !32
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !32
  %112 = getelementptr float, ptr addrspace(3) %111, i32 %109, !dbg !32
  %113 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !32
  %114 = or disjoint i32 %103, 512, !dbg !32
  %115 = lshr i32 %114, 6, !dbg !32
  %116 = getelementptr float, ptr addrspace(3) @global_smem, i32 %115, !dbg !32
  %117 = getelementptr float, ptr addrspace(3) %116, i32 %114, !dbg !32
  %118 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #2, !dbg !32
  %119 = or disjoint i32 %103, 768, !dbg !32
  %120 = lshr i32 %119, 6, !dbg !32
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %120, !dbg !32
  %122 = getelementptr float, ptr addrspace(3) %121, i32 %119, !dbg !32
  %123 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #2, !dbg !32
  %124 = or disjoint i32 %103, 64, !dbg !32
  %125 = getelementptr float, ptr addrspace(3) %106, i32 %124, !dbg !32
  %126 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !32
  %127 = or disjoint i32 %103, 320, !dbg !32
  %128 = lshr i32 %127, 6, !dbg !32
  %129 = and i32 %128, 52, !dbg !32
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i32 %129, !dbg !32
  %131 = getelementptr float, ptr addrspace(3) %130, i32 %127, !dbg !32
  %132 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !32
  %133 = or disjoint i32 %103, 576, !dbg !32
  %134 = lshr i32 %133, 6, !dbg !32
  %135 = and i32 %134, 56, !dbg !32
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !32
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %133, !dbg !32
  %138 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #2, !dbg !32
  %139 = or disjoint i32 %103, 832, !dbg !32
  %140 = lshr i32 %139, 6, !dbg !32
  %141 = and i32 %140, 60, !dbg !32
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %141, !dbg !32
  %143 = getelementptr float, ptr addrspace(3) %142, i32 %139, !dbg !32
  %144 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 true) #2, !dbg !32
  %145 = or disjoint i32 %103, 128, !dbg !32
  %146 = getelementptr float, ptr addrspace(3) %106, i32 %145, !dbg !32
  %147 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !32
  %148 = or disjoint i32 %103, 384, !dbg !32
  %149 = lshr i32 %148, 6, !dbg !32
  %150 = and i32 %149, 52, !dbg !32
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %150, !dbg !32
  %152 = getelementptr float, ptr addrspace(3) %151, i32 %148, !dbg !32
  %153 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !32
  %154 = or disjoint i32 %103, 640, !dbg !32
  %155 = lshr i32 %154, 6, !dbg !32
  %156 = and i32 %155, 56, !dbg !32
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !32
  %158 = getelementptr float, ptr addrspace(3) %157, i32 %154, !dbg !32
  %159 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #2, !dbg !32
  %160 = or disjoint i32 %103, 896, !dbg !32
  %161 = lshr i32 %160, 6, !dbg !32
  %162 = and i32 %161, 60, !dbg !32
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i32 %162, !dbg !32
  %164 = getelementptr float, ptr addrspace(3) %163, i32 %160, !dbg !32
  %165 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #2, !dbg !32
  %166 = or disjoint i32 %103, 192, !dbg !32
  %167 = getelementptr float, ptr addrspace(3) %106, i32 %166, !dbg !32
  %168 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %168, i1 true) #2, !dbg !32
  %169 = or disjoint i32 %103, 448, !dbg !32
  %170 = lshr i32 %169, 6, !dbg !32
  %171 = and i32 %170, 52, !dbg !32
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %171, !dbg !32
  %173 = getelementptr float, ptr addrspace(3) %172, i32 %169, !dbg !32
  %174 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #2, !dbg !32
  %175 = or disjoint i32 %103, 704, !dbg !32
  %176 = lshr i32 %175, 6, !dbg !32
  %177 = and i32 %176, 56, !dbg !32
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i32 %177, !dbg !32
  %179 = getelementptr float, ptr addrspace(3) %178, i32 %175, !dbg !32
  %180 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !32
  %181 = or disjoint i32 %103, 960, !dbg !32
  %182 = lshr i32 %181, 6, !dbg !32
  %183 = and i32 %182, 60, !dbg !32
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i32 %183, !dbg !32
  %185 = getelementptr float, ptr addrspace(3) %184, i32 %181, !dbg !32
  %186 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %187 = lshr i32 %11, 6, !dbg !32
  %188 = and i32 %187, 12, !dbg !32
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %188, !dbg !32
  %190 = getelementptr inbounds float, ptr addrspace(3) %189, i32 %104, !dbg !32
  %191 = or disjoint i32 %104, 1024, !dbg !32
  %192 = lshr i32 %191, 6, !dbg !32
  %193 = and i32 %192, 28, !dbg !32
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %193, !dbg !32
  %195 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %191, !dbg !32
  %196 = load <4 x i32>, ptr addrspace(3) %195, align 16, !dbg !32
  %197 = or disjoint i32 %104, 2048, !dbg !32
  %198 = lshr i32 %197, 6, !dbg !32
  %199 = and i32 %198, 44, !dbg !32
  %200 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %199, !dbg !32
  %201 = getelementptr inbounds float, ptr addrspace(3) %200, i32 %197, !dbg !32
  %202 = load <4 x i32>, ptr addrspace(3) %201, align 16, !dbg !32
  %203 = or disjoint i32 %104, 3072, !dbg !32
  %204 = lshr i32 %203, 6, !dbg !32
  %205 = and i32 %204, 60, !dbg !32
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %205, !dbg !32
  %207 = getelementptr inbounds float, ptr addrspace(3) %206, i32 %203, !dbg !32
  %208 = load <4 x i32>, ptr addrspace(3) %207, align 16, !dbg !32
  %.extract = load i32, ptr addrspace(3) %190, align 16, !dbg !32
  %209 = getelementptr inbounds i8, ptr addrspace(3) %190, i32 4, !dbg !32
  %.extract18 = load i32, ptr addrspace(3) %209, align 4, !dbg !32
  %210 = getelementptr inbounds i8, ptr addrspace(3) %190, i32 8, !dbg !32
  %.extract19 = load i32, ptr addrspace(3) %210, align 8, !dbg !32
  %211 = getelementptr inbounds i8, ptr addrspace(3) %190, i32 12, !dbg !32
  %.extract20 = load i32, ptr addrspace(3) %211, align 4, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %94, i1 %59) #2, !dbg !32
  %.extract21 = extractelement <4 x i32> %196, i64 0, !dbg !32
  %.extract22 = extractelement <4 x i32> %196, i64 1, !dbg !32
  %.extract23 = extractelement <4 x i32> %196, i64 2, !dbg !32
  %.extract24 = extractelement <4 x i32> %196, i64 3, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %96, i1 %60) #2, !dbg !32
  %.extract25 = extractelement <4 x i32> %202, i64 0, !dbg !32
  %.extract26 = extractelement <4 x i32> %202, i64 1, !dbg !32
  %.extract27 = extractelement <4 x i32> %202, i64 2, !dbg !32
  %.extract28 = extractelement <4 x i32> %202, i64 3, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %98, i1 %61) #2, !dbg !32
  %.extract29 = extractelement <4 x i32> %208, i64 0, !dbg !32
  %.extract30 = extractelement <4 x i32> %208, i64 1, !dbg !32
  %.extract31 = extractelement <4 x i32> %208, i64 2, !dbg !32
  %.extract32 = extractelement <4 x i32> %208, i64 3, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %100, i1 %62) #2, !dbg !32
  %212 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !33
  %213 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !33
  %214 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !33
  %215 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %212, i1 %59) #2, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %213, i1 %60) #2, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %214, i1 %61) #2, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %215, i1 %62) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvrj2vpz3voscnpl2pbh3or3mgfbk7sawkygltcb3pw7oond7kkg.py", directory: "inductor_cache/vr")
!4 = !{ptr @triton_poi_fused_convolution_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_18, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_18", linkageName: "triton_poi_fused_convolution_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 51, scope: !7)
!26 = !DILocation(line: 32, column: 43, scope: !7)
!27 = !DILocation(line: 33, column: 34, scope: !7)
!28 = !DILocation(line: 33, column: 44, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 39, scope: !7)
!31 = !DILocation(line: 33, column: 25, scope: !7)
!32 = !DILocation(line: 33, column: 55, scope: !7)
!33 = !DILocation(line: 34, column: 25, scope: !7)
!34 = !DILocation(line: 34, column: 55, scope: !7)
!35 = !DILocation(line: 34, column: 4, scope: !7)
