; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused__softmax_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %5 = shl i32 %4, 2, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 3, !dbg !12
  %8 = or disjoint i32 %5, %7, !dbg !13
  %9 = icmp slt i32 %8, 4, !dbg !14
  %10 = sext i32 %8 to i64, !dbg !15
  %11 = getelementptr double, ptr addrspace(1) %0, i64 %10, !dbg !15
  %12 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %11, i1 %9) #2, !dbg !16
  %13 = bitcast i64 %12 to double, !dbg !16
  %14 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %0, i1 true) #2, !dbg !17
  %15 = bitcast i64 %14 to double, !dbg !17
  %16 = getelementptr i8, ptr addrspace(1) %0, i64 8, !dbg !18
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 true) #2, !dbg !19
  %18 = bitcast i64 %17 to double, !dbg !19
  %19 = getelementptr i8, ptr addrspace(1) %0, i64 16, !dbg !20
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %19, i1 true) #2, !dbg !21
  %21 = bitcast i64 %20 to double, !dbg !21
  %22 = getelementptr i8, ptr addrspace(1) %0, i64 24, !dbg !22
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #2, !dbg !23
  %24 = bitcast i64 %23 to double, !dbg !23
  %25 = fcmp ogt double %15, %18, !dbg !24
  %26 = fcmp uno double %15, 0.000000e+00, !dbg !28
  %27 = or i1 %26, %25, !dbg !29
  %28 = select i1 %27, double %15, double %18, !dbg !30
  %29 = fcmp ogt double %28, %21, !dbg !31
  %30 = fcmp uno double %28, 0.000000e+00, !dbg !33
  %31 = or i1 %29, %30, !dbg !34
  %32 = select i1 %31, double %28, double %21, !dbg !35
  %33 = fcmp ogt double %32, %24, !dbg !36
  %34 = fcmp uno double %32, 0.000000e+00, !dbg !38
  %35 = or i1 %33, %34, !dbg !39
  %36 = select i1 %35, double %32, double %24, !dbg !40
  %37 = fsub double %13, %36, !dbg !41
  %38 = tail call double @llvm.nvvm.fma.rn.d(double %37, double 0x3FF71547652B82FE, double 0x4338000000000000) #2, !dbg !42
  %39 = tail call i32 @llvm.nvvm.d2i.lo(double %38) #2, !dbg !42
  %40 = tail call double @llvm.nvvm.add.rn.d(double %38, double 0xC338000000000000) #2, !dbg !42
  %41 = tail call double @llvm.nvvm.fma.rn.d(double %40, double 0xBFE62E42FEFA39EF, double %37) #2, !dbg !42
  %42 = tail call double @llvm.nvvm.fma.rn.d(double %40, double 0xBC7ABC9E3B39803F, double %41) #2, !dbg !42
  %43 = tail call double @llvm.nvvm.fma.rn.d(double 0x3E5ADE1569CE2BDF, double %42, double 0x3E928AF3FCA213EA) #2, !dbg !42
  %44 = tail call double @llvm.nvvm.fma.rn.d(double %43, double %42, double 0x3EC71DEE62401315) #2, !dbg !42
  %45 = tail call double @llvm.nvvm.fma.rn.d(double %44, double %42, double 0x3EFA01997C89EB71) #2, !dbg !42
  %46 = tail call double @llvm.nvvm.fma.rn.d(double %45, double %42, double 0x3F2A01A014761F65) #2, !dbg !42
  %47 = tail call double @llvm.nvvm.fma.rn.d(double %46, double %42, double 0x3F56C16C1852B7AF) #2, !dbg !42
  %48 = tail call double @llvm.nvvm.fma.rn.d(double %47, double %42, double 0x3F81111111122322) #2, !dbg !42
  %49 = tail call double @llvm.nvvm.fma.rn.d(double %48, double %42, double 0x3FA55555555502A1) #2, !dbg !42
  %50 = tail call double @llvm.nvvm.fma.rn.d(double %49, double %42, double 0x3FC5555555555511) #2, !dbg !42
  %51 = tail call double @llvm.nvvm.fma.rn.d(double %50, double %42, double 0x3FE000000000000B) #2, !dbg !42
  %52 = tail call double @llvm.nvvm.fma.rn.d(double %51, double %42, double 1.000000e+00) #2, !dbg !42
  %53 = tail call double @llvm.nvvm.fma.rn.d(double %52, double %42, double 1.000000e+00) #2, !dbg !42
  %54 = tail call i32 @llvm.nvvm.d2i.lo(double %53) #2, !dbg !42
  %55 = tail call i32 @llvm.nvvm.d2i.hi(double %53) #2, !dbg !42
  %56 = shl i32 %39, 20, !dbg !42
  %57 = add i32 %55, %56, !dbg !42
  %58 = tail call double @llvm.nvvm.lohi.i2d(i32 %54, i32 %57) #2, !dbg !42
  %59 = tail call i32 @llvm.nvvm.d2i.hi(double %37) #2, !dbg !42
  %60 = bitcast i32 %59 to float, !dbg !42
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !42
  %.not.i = icmp eq i32 %61, 0, !dbg !42
  %62 = tail call float @llvm.nvvm.fabs.ftz.f(float %60) #2, !dbg !42
  %63 = tail call float @llvm.nvvm.fabs.f(float %60) #2, !dbg !42
  %.01.i = select i1 %.not.i, float %63, float %62, !dbg !42
  %64 = fcmp olt float %.01.i, 0x4010C46560000000, !dbg !42
  br i1 %64, label %__nv_exp.exit, label %__internal_fast_icmp_abs_lt.exit.i, !dbg !42

__internal_fast_icmp_abs_lt.exit.i:               ; preds = %3
  %65 = fcmp olt double %37, 0.000000e+00, !dbg !42
  %66 = fadd double %37, 0x7FF0000000000000, !dbg !42
  %z.0.i = select i1 %65, double 0.000000e+00, double %66, !dbg !42
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !42
  %.not1.i = icmp eq i32 %67, 0, !dbg !42
  %.0.i = select i1 %.not1.i, float %63, float %62, !dbg !42
  %68 = fcmp olt float %.0.i, 0x4010E90000000000, !dbg !42
  br i1 %68, label %69, label %__nv_exp.exit, !dbg !42

69:                                               ; preds = %__internal_fast_icmp_abs_lt.exit.i
  %70 = sdiv i32 %39, 2, !dbg !42
  %71 = shl i32 %70, 20, !dbg !42
  %72 = add i32 %55, %71, !dbg !42
  %73 = tail call double @llvm.nvvm.lohi.i2d(i32 %54, i32 %72) #2, !dbg !42
  %74 = sub nsw i32 %39, %70, !dbg !42
  %75 = shl i32 %74, 20, !dbg !42
  %76 = add nsw i32 %75, 1072693248, !dbg !42
  %77 = tail call double @llvm.nvvm.lohi.i2d(i32 0, i32 %76) #2, !dbg !42
  %78 = fmul double %77, %73, !dbg !42
  br label %__nv_exp.exit, !dbg !42

__nv_exp.exit:                                    ; preds = %3, %__internal_fast_icmp_abs_lt.exit.i, %69
  %z.2.i = phi double [ %58, %3 ], [ %78, %69 ], [ %z.0.i, %__internal_fast_icmp_abs_lt.exit.i ], !dbg !42
  %79 = and i32 %6, 28, !dbg !12
  %80 = getelementptr double, ptr addrspace(1) %1, i64 %10, !dbg !43
  %81 = icmp eq i32 %79, 0, !dbg !44
  %82 = bitcast double %z.2.i to i64, !dbg !44
  %83 = and i1 %81, %9, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %82, ptr addrspace(1) %80, i1 %83) #2, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.nvvm.fma.rn.d(double, double, double) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.d2i.lo(double) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.nvvm.add.rn.d(double, double) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.d2i.hi(double) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.nvvm.lohi.i2d(i32, i32) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuwh6hcvj5nac35mr3yr53cozu5of4o3ljharncl6kqy5ob3d56m.py", directory: "inductor_cache/uw")
!4 = !{ptr @triton_poi_fused__softmax_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_0", linkageName: "triton_poi_fused__softmax_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 25, column: 35, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 30, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 34, column: 40, scope: !7)
!28 = !DILocation(line: 120, column: 21, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 120, column: 16, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !32)
!32 = !DILocation(line: 35, column: 40, scope: !7)
!33 = !DILocation(line: 120, column: 21, scope: !25, inlinedAt: !32)
!34 = !DILocation(line: 120, column: 16, scope: !25, inlinedAt: !32)
!35 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !32)
!36 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !37)
!37 = !DILocation(line: 36, column: 41, scope: !7)
!38 = !DILocation(line: 120, column: 21, scope: !25, inlinedAt: !37)
!39 = !DILocation(line: 120, column: 16, scope: !25, inlinedAt: !37)
!40 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !37)
!41 = !DILocation(line: 37, column: 19, scope: !7)
!42 = !DILocation(line: 38, column: 26, scope: !7)
!43 = !DILocation(line: 39, column: 25, scope: !7)
!44 = !DILocation(line: 39, column: 37, scope: !7)
!45 = !DILocation(line: 39, column: 4, scope: !7)
