; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_sum_37(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 124, !dbg !12
  %10 = lshr i32 %7, 5, !dbg !12
  %11 = and i32 %7, 127, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %14 = sdiv i32 %.frozen, 1024, !dbg !14
  %15 = mul i32 %14, 1024, !dbg !15
  %.decomposed = sub i32 %.frozen, %15, !dbg !15
  %16 = shl i32 %10, 10, !dbg !16
  %17 = and i32 %16, 7168, !dbg !16
  %18 = or disjoint i32 %17, 8192, !dbg !16
  %19 = shl i32 %14, 14, !dbg !17
  %20 = or disjoint i32 %19, %17, !dbg !18
  %21 = add i32 %20, %.decomposed, !dbg !19
  %22 = or disjoint i32 %19, %18, !dbg !18
  %23 = add nsw i32 %22, %.decomposed, !dbg !19
  %24 = sext i32 %21 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !20
  %26 = sext i32 %23 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !20
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !21
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !21
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !21
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !21
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !21
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !21
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !21
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !21
  %38 = add nsw i32 %.decomposed, 65536, !dbg !22
  %39 = add i32 %20, %38, !dbg !23
  %40 = add i32 %22, %38, !dbg !23
  %41 = sext i32 %39 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !24
  %43 = sext i32 %40 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !24
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !25
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !25
  %55 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !21
  %56 = insertelement <2 x i32> %55, i32 %34, i64 1, !dbg !21
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !21
  %58 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !25
  %59 = insertelement <2 x i32> %58, i32 %51, i64 1, !dbg !25
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !25
  %61 = fadd <2 x float> %57, %60, !dbg !26
  %62 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !21
  %63 = insertelement <2 x i32> %62, i32 %35, i64 1, !dbg !21
  %64 = bitcast <2 x i32> %63 to <2 x float>, !dbg !21
  %65 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !25
  %66 = insertelement <2 x i32> %65, i32 %52, i64 1, !dbg !25
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !25
  %68 = fadd <2 x float> %64, %67, !dbg !26
  %69 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !21
  %70 = insertelement <2 x i32> %69, i32 %36, i64 1, !dbg !21
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !21
  %72 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !25
  %73 = insertelement <2 x i32> %72, i32 %53, i64 1, !dbg !25
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !25
  %75 = fadd <2 x float> %71, %74, !dbg !26
  %76 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !21
  %77 = insertelement <2 x i32> %76, i32 %37, i64 1, !dbg !21
  %78 = bitcast <2 x i32> %77 to <2 x float>, !dbg !21
  %79 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !25
  %80 = insertelement <2 x i32> %79, i32 %54, i64 1, !dbg !25
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !25
  %82 = fadd <2 x float> %78, %81, !dbg !26
  %shift = shufflevector <2 x float> %61, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %83 = fadd <2 x float> %61, %shift, !dbg !27
  %84 = extractelement <2 x float> %83, i64 0, !dbg !27
  %shift1 = shufflevector <2 x float> %68, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %85 = fadd <2 x float> %68, %shift1, !dbg !27
  %86 = extractelement <2 x float> %85, i64 0, !dbg !27
  %shift2 = shufflevector <2 x float> %75, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %87 = fadd <2 x float> %75, %shift2, !dbg !27
  %88 = extractelement <2 x float> %87, i64 0, !dbg !27
  %shift3 = shufflevector <2 x float> %82, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %89 = fadd <2 x float> %82, %shift3, !dbg !27
  %90 = extractelement <2 x float> %89, i64 0, !dbg !27
  %91 = and i32 %10, 7, !dbg !32
  %92 = shl nuw nsw i32 %9, 3, !dbg !32
  %93 = or disjoint i32 %92, %91, !dbg !32
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !32
  %95 = bitcast float %84 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #3, !dbg !32
  %96 = or disjoint i32 %92, 8, !dbg !32
  %97 = or disjoint i32 %96, %91, !dbg !32
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97, !dbg !32
  %99 = bitcast float %86 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #3, !dbg !32
  %100 = or disjoint i32 %92, 16, !dbg !32
  %101 = or disjoint i32 %100, %91, !dbg !32
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !32
  %103 = bitcast float %88 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #3, !dbg !32
  %104 = or disjoint i32 %92, 24, !dbg !32
  %105 = or disjoint i32 %104, %91, !dbg !32
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !32
  %107 = bitcast float %90 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %108 = icmp slt i32 %7, 1024, !dbg !32
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !32
  %110 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %109, i1 %108) #3, !dbg !32
  %111 = bitcast i32 %110 to float, !dbg !32
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 4, i32 31), !dbg !32
  %113 = bitcast i32 %112 to float, !dbg !32
  %114 = fadd float %111, %113, !dbg !27
  %115 = bitcast float %114 to i32, !dbg !32
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 2, i32 31), !dbg !32
  %117 = bitcast i32 %116 to float, !dbg !32
  %118 = fadd float %114, %117, !dbg !27
  %119 = bitcast float %118 to i32, !dbg !32
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 1, i32 31), !dbg !32
  %121 = bitcast i32 %120 to float, !dbg !32
  %122 = fadd float %118, %121, !dbg !27
  %123 = and i32 %7, 7, !dbg !32
  %124 = icmp eq i32 %123, 0, !dbg !32
  %125 = and i1 %108, %124, !dbg !32
  %126 = bitcast float %122 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %126, i1 %125) #3, !dbg !32
  %127 = getelementptr i8, ptr addrspace(3) %109, i32 1024, !dbg !32
  %128 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %127, i1 %108) #3, !dbg !32
  %129 = bitcast i32 %128 to float, !dbg !32
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 4, i32 31), !dbg !32
  %131 = bitcast i32 %130 to float, !dbg !32
  %132 = fadd float %129, %131, !dbg !27
  %133 = bitcast float %132 to i32, !dbg !32
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 2, i32 31), !dbg !32
  %135 = bitcast i32 %134 to float, !dbg !32
  %136 = fadd float %132, %135, !dbg !27
  %137 = bitcast float %136 to i32, !dbg !32
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 1, i32 31), !dbg !32
  %139 = bitcast i32 %138 to float, !dbg !32
  %140 = fadd float %136, %139, !dbg !27
  %141 = bitcast float %140 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %141, i1 %125) #3, !dbg !32
  %142 = getelementptr i8, ptr addrspace(3) %109, i32 2048, !dbg !32
  %143 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %142, i1 %108) #3, !dbg !32
  %144 = bitcast i32 %143 to float, !dbg !32
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 4, i32 31), !dbg !32
  %146 = bitcast i32 %145 to float, !dbg !32
  %147 = fadd float %144, %146, !dbg !27
  %148 = bitcast float %147 to i32, !dbg !32
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 2, i32 31), !dbg !32
  %150 = bitcast i32 %149 to float, !dbg !32
  %151 = fadd float %147, %150, !dbg !27
  %152 = bitcast float %151 to i32, !dbg !32
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 1, i32 31), !dbg !32
  %154 = bitcast i32 %153 to float, !dbg !32
  %155 = fadd float %151, %154, !dbg !27
  %156 = bitcast float %155 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %156, i1 %125) #3, !dbg !32
  %157 = getelementptr i8, ptr addrspace(3) %109, i32 3072, !dbg !32
  %158 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %157, i1 %108) #3, !dbg !32
  %159 = bitcast i32 %158 to float, !dbg !32
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 4, i32 31), !dbg !32
  %161 = bitcast i32 %160 to float, !dbg !32
  %162 = fadd float %159, %161, !dbg !27
  %163 = bitcast float %162 to i32, !dbg !32
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 2, i32 31), !dbg !32
  %165 = bitcast i32 %164 to float, !dbg !32
  %166 = fadd float %162, %165, !dbg !27
  %167 = bitcast float %166 to i32, !dbg !32
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 1, i32 31), !dbg !32
  %169 = bitcast i32 %168 to float, !dbg !32
  %170 = fadd float %166, %169, !dbg !27
  %171 = bitcast float %170 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %171, i1 %125) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %92, !dbg !32
  %173 = load i32, ptr addrspace(3) %172, align 16, !dbg !32
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i32 %96, !dbg !32
  %175 = load i32, ptr addrspace(3) %174, align 16, !dbg !32
  %176 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !32
  %177 = load i32, ptr addrspace(3) %176, align 16, !dbg !32
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !32
  %179 = load i32, ptr addrspace(3) %178, align 16, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %180 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !33
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %180, i32 %173, i32 %175, i32 %177, i32 %179, i1 true) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %181 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !33
  %182 = load float, ptr addrspace(3) %181, align 4, !dbg !33
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %182, float 1.600000e+01) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %184 = sext i32 %13 to i64, !dbg !35
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !35
  %186 = and i32 %7, 128, !dbg !36
  %187 = icmp eq i32 %186, 0, !dbg !36
  %188 = bitcast float %183 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %188, ptr addrspace(1) %185, i1 %187) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvyfli6e4lgkjhtwxzzgcpqgar5mw7ysn2furiwxf6encv55ia55.py", directory: "inductor_cache/vy")
!4 = !{ptr @triton_per_fused_mean_sum_37, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_sum_37, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_sum_37", linkageName: "triton_per_fused_mean_sum_37", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 40, scope: !7)
!17 = !DILocation(line: 33, column: 51, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 56, scope: !7)
!22 = !DILocation(line: 34, column: 38, scope: !7)
!23 = !DILocation(line: 34, column: 53, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 64, scope: !7)
!26 = !DILocation(line: 35, column: 18, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!31 = !DILocation(line: 37, column: 24, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
!35 = !DILocation(line: 41, column: 28, scope: !7)
!36 = !DILocation(line: 41, column: 39, scope: !7)
!37 = !DILocation(line: 41, column: 4, scope: !7)
