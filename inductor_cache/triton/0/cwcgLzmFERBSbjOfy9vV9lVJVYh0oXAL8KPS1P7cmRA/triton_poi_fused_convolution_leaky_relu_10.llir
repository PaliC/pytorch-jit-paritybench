; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %.lobit3 = lshr i32 %9, 6, !dbg !12
  %12 = and i32 %.lobit3, 3, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = or disjoint i32 %14, 8, !dbg !13
  %17 = or disjoint i32 %14, 12, !dbg !13
  %18 = or disjoint i32 %14, 16, !dbg !13
  %19 = or disjoint i32 %14, 20, !dbg !13
  %20 = or disjoint i32 %14, 24, !dbg !13
  %21 = or disjoint i32 %14, 28, !dbg !13
  %22 = or disjoint i32 %14, 32, !dbg !13
  %23 = or disjoint i32 %14, 36, !dbg !13
  %24 = or disjoint i32 %14, 40, !dbg !13
  %25 = or disjoint i32 %14, 44, !dbg !13
  %26 = or disjoint i32 %14, 48, !dbg !13
  %27 = or disjoint i32 %14, 52, !dbg !13
  %28 = or disjoint i32 %14, 56, !dbg !13
  %29 = or disjoint i32 %14, 60, !dbg !13
  %30 = icmp slt i32 %13, 36, !dbg !14
  %31 = icmp slt i32 %14, 36, !dbg !14
  %32 = icmp slt i32 %15, 36, !dbg !14
  %33 = icmp slt i32 %16, 36, !dbg !14
  %34 = icmp slt i32 %17, 36, !dbg !14
  %35 = icmp slt i32 %18, 36, !dbg !14
  %36 = icmp slt i32 %19, 36, !dbg !14
  %37 = icmp slt i32 %20, 36, !dbg !14
  %38 = icmp slt i32 %21, 36, !dbg !14
  %39 = icmp slt i32 %22, 36, !dbg !14
  %40 = icmp slt i32 %8, 0, !dbg !14
  %41 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %42 = shl i32 %41, 6, !dbg !16
  %43 = shl i32 %9, 4, !dbg !17
  %44 = and i32 %43, 48, !dbg !17
  %45 = and i32 %9, 63, !dbg !17
  %46 = or disjoint i32 %42, %44, !dbg !18
  %47 = or disjoint i32 %46, 4, !dbg !18
  %48 = or disjoint i32 %46, 8, !dbg !18
  %49 = or disjoint i32 %46, 12, !dbg !18
  %50 = or disjoint i32 %42, %45, !dbg !18
  %51 = icmp slt i32 %46, 256, !dbg !19
  %52 = icmp slt i32 %50, 256, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %53 = sdiv i32 %.frozen, 9, !dbg !20
  %54 = mul i32 %53, 9, !dbg !21
  %.decomposed = sub i32 %.frozen, %54, !dbg !21
  %.frozen4 = freeze i32 %15, !dbg !20
  %55 = sdiv i32 %.frozen4, 9, !dbg !20
  %56 = mul i32 %55, 9, !dbg !21
  %.decomposed5 = sub i32 %.frozen4, %56, !dbg !21
  %.frozen6 = freeze i32 %16, !dbg !20
  %57 = sdiv i32 %.frozen6, 9, !dbg !20
  %58 = mul i32 %57, 9, !dbg !21
  %.decomposed7 = sub i32 %.frozen6, %58, !dbg !21
  %.frozen8 = freeze i32 %17, !dbg !20
  %59 = sdiv i32 %.frozen8, 9, !dbg !20
  %60 = mul i32 %59, 9, !dbg !21
  %.decomposed9 = sub i32 %.frozen8, %60, !dbg !21
  %.frozen10 = freeze i32 %18, !dbg !20
  %61 = sdiv i32 %.frozen10, 9, !dbg !20
  %62 = mul i32 %61, 9, !dbg !21
  %.decomposed11 = sub i32 %.frozen10, %62, !dbg !21
  %.frozen12 = freeze i32 %19, !dbg !20
  %63 = sdiv i32 %.frozen12, 9, !dbg !20
  %64 = mul i32 %63, 9, !dbg !21
  %.decomposed13 = sub i32 %.frozen12, %64, !dbg !21
  %.frozen14 = freeze i32 %20, !dbg !20
  %65 = sdiv i32 %.frozen14, 9, !dbg !20
  %66 = mul i32 %65, 9, !dbg !21
  %.decomposed15 = sub i32 %.frozen14, %66, !dbg !21
  %.frozen16 = freeze i32 %21, !dbg !20
  %67 = sdiv i32 %.frozen16, 9, !dbg !20
  %68 = mul i32 %67, 9, !dbg !21
  %.decomposed17 = sub i32 %.frozen16, %68, !dbg !21
  %.frozen18 = freeze i32 %22, !dbg !20
  %69 = sdiv i32 %.frozen18, 9, !dbg !20
  %70 = mul i32 %69, 9, !dbg !21
  %.decomposed19 = sub i32 %.frozen18, %70, !dbg !21
  %.frozen20 = freeze i32 %23, !dbg !20
  %71 = sdiv i32 %.frozen20, 9, !dbg !20
  %72 = mul i32 %71, 9, !dbg !21
  %.decomposed21 = sub i32 %.frozen20, %72, !dbg !21
  %.frozen22 = freeze i32 %24, !dbg !20
  %73 = sdiv i32 %.frozen22, 9, !dbg !20
  %74 = mul i32 %73, 9, !dbg !21
  %.decomposed23 = sub i32 %.frozen22, %74, !dbg !21
  %.frozen24 = freeze i32 %25, !dbg !20
  %75 = sdiv i32 %.frozen24, 9, !dbg !20
  %76 = mul i32 %75, 9, !dbg !21
  %.decomposed25 = sub i32 %.frozen24, %76, !dbg !21
  %.frozen26 = freeze i32 %26, !dbg !20
  %77 = sdiv i32 %.frozen26, 9, !dbg !20
  %78 = mul i32 %77, 9, !dbg !21
  %.decomposed27 = sub i32 %.frozen26, %78, !dbg !21
  %.frozen28 = freeze i32 %27, !dbg !20
  %79 = sdiv i32 %.frozen28, 9, !dbg !20
  %80 = mul i32 %79, 9, !dbg !21
  %.decomposed29 = sub i32 %.frozen28, %80, !dbg !21
  %.frozen30 = freeze i32 %28, !dbg !20
  %81 = sdiv i32 %.frozen30, 9, !dbg !20
  %82 = mul i32 %81, 9, !dbg !21
  %.decomposed31 = sub i32 %.frozen30, %82, !dbg !21
  %.frozen32 = freeze i32 %29, !dbg !20
  %83 = sdiv i32 %.frozen32, 9, !dbg !20
  %84 = mul i32 %83, 9, !dbg !21
  %.decomposed33 = sub i32 %.frozen32, %84, !dbg !21
  %85 = shl i32 %13, 8, !dbg !22
  %86 = add i32 %46, %85, !dbg !23
  %87 = add i32 %85, %47, !dbg !23
  %88 = add i32 %85, %48, !dbg !23
  %89 = add i32 %85, %49, !dbg !23
  %90 = sext i32 %86 to i64, !dbg !24
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !24
  %92 = sext i32 %87 to i64, !dbg !24
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !24
  %94 = sext i32 %88 to i64, !dbg !24
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !24
  %96 = sext i32 %89 to i64, !dbg !24
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !24
  %98 = and i1 %30, %51, !dbg !25
  %99 = and i1 %31, %52, !dbg !25
  %100 = and i1 %32, %52, !dbg !25
  %101 = and i1 %33, %52, !dbg !25
  %102 = and i1 %34, %52, !dbg !25
  %103 = and i1 %35, %52, !dbg !25
  %104 = and i1 %36, %52, !dbg !25
  %105 = and i1 %37, %52, !dbg !25
  %106 = and i1 %38, %52, !dbg !25
  %107 = and i1 %39, %52, !dbg !25
  %108 = and i1 %40, %52, !dbg !25
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %91, i1 %98) #2, !dbg !26
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !26
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !26
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !26
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !26
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %93, i1 %98) #2, !dbg !26
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !26
  %116 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !26
  %117 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !26
  %118 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !26
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %95, i1 %98) #2, !dbg !26
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !26
  %121 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !26
  %122 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !26
  %123 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !26
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 %98) #2, !dbg !26
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !26
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !26
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !26
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !26
  %129 = sext i32 %46 to i64, !dbg !27
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !27
  %131 = sext i32 %47 to i64, !dbg !27
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !27
  %133 = sext i32 %48 to i64, !dbg !27
  %134 = getelementptr float, ptr addrspace(1) %1, i64 %133, !dbg !27
  %135 = sext i32 %49 to i64, !dbg !27
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !27
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %130, i1 %51) #2, !dbg !28
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !28
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !28
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !28
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !28
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %132, i1 %51) #2, !dbg !28
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !28
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !28
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !28
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !28
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %134, i1 %51) #2, !dbg !28
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !28
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !28
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !28
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !28
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %136, i1 %51) #2, !dbg !28
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !28
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !28
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !28
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !28
  %157 = getelementptr i1, ptr addrspace(1) %2, i64 %90, !dbg !29
  %158 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !26
  %159 = insertelement <4 x i32> %158, i32 %111, i64 1, !dbg !26
  %160 = insertelement <4 x i32> %159, i32 %112, i64 2, !dbg !26
  %161 = insertelement <4 x i32> %160, i32 %113, i64 3, !dbg !26
  %162 = bitcast <4 x i32> %161 to <4 x float>, !dbg !26
  %163 = insertelement <4 x i32> poison, i32 %138, i64 0, !dbg !28
  %164 = insertelement <4 x i32> %163, i32 %139, i64 1, !dbg !28
  %165 = insertelement <4 x i32> %164, i32 %140, i64 2, !dbg !28
  %166 = insertelement <4 x i32> %165, i32 %141, i64 3, !dbg !28
  %167 = bitcast <4 x i32> %166 to <4 x float>, !dbg !28
  %168 = fadd <4 x float> %162, %167, !dbg !30
  %169 = fcmp ogt <4 x float> %168, zeroinitializer, !dbg !31
  %170 = extractelement <4 x float> %168, i64 0, !dbg !32
  %171 = fmul float %170, 0x3F847AE140000000, !dbg !33
  %172 = extractelement <4 x float> %168, i64 1, !dbg !32
  %173 = fmul float %172, 0x3F847AE140000000, !dbg !33
  %174 = extractelement <4 x float> %168, i64 2, !dbg !32
  %175 = fmul float %174, 0x3F847AE140000000, !dbg !33
  %176 = extractelement <4 x float> %168, i64 3, !dbg !32
  %177 = fmul float %176, 0x3F847AE140000000, !dbg !33
  %178 = extractelement <4 x i1> %169, i64 0, !dbg !32
  %179 = select i1 %178, float %170, float %171, !dbg !32
  %180 = extractelement <4 x i1> %169, i64 1, !dbg !32
  %181 = select i1 %180, float %172, float %173, !dbg !32
  %182 = extractelement <4 x i1> %169, i64 2, !dbg !32
  %183 = select i1 %182, float %174, float %175, !dbg !32
  %184 = extractelement <4 x i1> %169, i64 3, !dbg !32
  %185 = select i1 %184, float %176, float %177, !dbg !32
  %186 = insertelement <4 x i32> poison, i32 %115, i64 0, !dbg !26
  %187 = insertelement <4 x i32> %186, i32 %116, i64 1, !dbg !26
  %188 = insertelement <4 x i32> %187, i32 %117, i64 2, !dbg !26
  %189 = insertelement <4 x i32> %188, i32 %118, i64 3, !dbg !26
  %190 = bitcast <4 x i32> %189 to <4 x float>, !dbg !26
  %191 = insertelement <4 x i32> poison, i32 %143, i64 0, !dbg !28
  %192 = insertelement <4 x i32> %191, i32 %144, i64 1, !dbg !28
  %193 = insertelement <4 x i32> %192, i32 %145, i64 2, !dbg !28
  %194 = insertelement <4 x i32> %193, i32 %146, i64 3, !dbg !28
  %195 = bitcast <4 x i32> %194 to <4 x float>, !dbg !28
  %196 = fadd <4 x float> %190, %195, !dbg !30
  %197 = fcmp ogt <4 x float> %196, zeroinitializer, !dbg !31
  %198 = extractelement <4 x float> %196, i64 0, !dbg !32
  %199 = fmul float %198, 0x3F847AE140000000, !dbg !33
  %200 = extractelement <4 x float> %196, i64 1, !dbg !32
  %201 = fmul float %200, 0x3F847AE140000000, !dbg !33
  %202 = extractelement <4 x float> %196, i64 2, !dbg !32
  %203 = fmul float %202, 0x3F847AE140000000, !dbg !33
  %204 = extractelement <4 x float> %196, i64 3, !dbg !32
  %205 = fmul float %204, 0x3F847AE140000000, !dbg !33
  %206 = extractelement <4 x i1> %197, i64 0, !dbg !32
  %207 = select i1 %206, float %198, float %199, !dbg !32
  %208 = extractelement <4 x i1> %197, i64 1, !dbg !32
  %209 = select i1 %208, float %200, float %201, !dbg !32
  %210 = extractelement <4 x i1> %197, i64 2, !dbg !32
  %211 = select i1 %210, float %202, float %203, !dbg !32
  %212 = extractelement <4 x i1> %197, i64 3, !dbg !32
  %213 = select i1 %212, float %204, float %205, !dbg !32
  %214 = insertelement <4 x i32> poison, i32 %120, i64 0, !dbg !26
  %215 = insertelement <4 x i32> %214, i32 %121, i64 1, !dbg !26
  %216 = insertelement <4 x i32> %215, i32 %122, i64 2, !dbg !26
  %217 = insertelement <4 x i32> %216, i32 %123, i64 3, !dbg !26
  %218 = bitcast <4 x i32> %217 to <4 x float>, !dbg !26
  %219 = insertelement <4 x i32> poison, i32 %148, i64 0, !dbg !28
  %220 = insertelement <4 x i32> %219, i32 %149, i64 1, !dbg !28
  %221 = insertelement <4 x i32> %220, i32 %150, i64 2, !dbg !28
  %222 = insertelement <4 x i32> %221, i32 %151, i64 3, !dbg !28
  %223 = bitcast <4 x i32> %222 to <4 x float>, !dbg !28
  %224 = fadd <4 x float> %218, %223, !dbg !30
  %225 = fcmp ogt <4 x float> %224, zeroinitializer, !dbg !31
  %226 = extractelement <4 x float> %224, i64 0, !dbg !32
  %227 = fmul float %226, 0x3F847AE140000000, !dbg !33
  %228 = extractelement <4 x float> %224, i64 1, !dbg !32
  %229 = fmul float %228, 0x3F847AE140000000, !dbg !33
  %230 = extractelement <4 x float> %224, i64 2, !dbg !32
  %231 = fmul float %230, 0x3F847AE140000000, !dbg !33
  %232 = extractelement <4 x float> %224, i64 3, !dbg !32
  %233 = fmul float %232, 0x3F847AE140000000, !dbg !33
  %234 = extractelement <4 x i1> %225, i64 0, !dbg !32
  %235 = select i1 %234, float %226, float %227, !dbg !32
  %236 = extractelement <4 x i1> %225, i64 1, !dbg !32
  %237 = select i1 %236, float %228, float %229, !dbg !32
  %238 = extractelement <4 x i1> %225, i64 2, !dbg !32
  %239 = select i1 %238, float %230, float %231, !dbg !32
  %240 = extractelement <4 x i1> %225, i64 3, !dbg !32
  %241 = select i1 %240, float %232, float %233, !dbg !32
  %242 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !26
  %243 = insertelement <4 x i32> %242, i32 %126, i64 1, !dbg !26
  %244 = insertelement <4 x i32> %243, i32 %127, i64 2, !dbg !26
  %245 = insertelement <4 x i32> %244, i32 %128, i64 3, !dbg !26
  %246 = bitcast <4 x i32> %245 to <4 x float>, !dbg !26
  %247 = insertelement <4 x i32> poison, i32 %153, i64 0, !dbg !28
  %248 = insertelement <4 x i32> %247, i32 %154, i64 1, !dbg !28
  %249 = insertelement <4 x i32> %248, i32 %155, i64 2, !dbg !28
  %250 = insertelement <4 x i32> %249, i32 %156, i64 3, !dbg !28
  %251 = bitcast <4 x i32> %250 to <4 x float>, !dbg !28
  %252 = fadd <4 x float> %246, %251, !dbg !30
  %253 = fcmp ogt <4 x float> %252, zeroinitializer, !dbg !31
  %254 = extractelement <4 x float> %252, i64 0, !dbg !32
  %255 = fmul float %254, 0x3F847AE140000000, !dbg !33
  %256 = extractelement <4 x float> %252, i64 1, !dbg !32
  %257 = fmul float %256, 0x3F847AE140000000, !dbg !33
  %258 = extractelement <4 x float> %252, i64 2, !dbg !32
  %259 = fmul float %258, 0x3F847AE140000000, !dbg !33
  %260 = extractelement <4 x float> %252, i64 3, !dbg !32
  %261 = fmul float %260, 0x3F847AE140000000, !dbg !33
  %262 = extractelement <4 x i1> %253, i64 0, !dbg !32
  %263 = select i1 %262, float %254, float %255, !dbg !32
  %264 = extractelement <4 x i1> %253, i64 1, !dbg !32
  %265 = select i1 %264, float %256, float %257, !dbg !32
  %266 = extractelement <4 x i1> %253, i64 2, !dbg !32
  %267 = select i1 %266, float %258, float %259, !dbg !32
  %268 = extractelement <4 x i1> %253, i64 3, !dbg !32
  %269 = select i1 %268, float %260, float %261, !dbg !32
  %270 = zext <4 x i1> %169 to <4 x i8>, !dbg !34
  %271 = bitcast <4 x i8> %270 to i32, !dbg !34
  %272 = zext <4 x i1> %197 to <4 x i8>, !dbg !34
  %273 = bitcast <4 x i8> %272 to i32, !dbg !34
  %274 = zext <4 x i1> %225 to <4 x i8>, !dbg !34
  %275 = bitcast <4 x i8> %274 to i32, !dbg !34
  %276 = zext <4 x i1> %253 to <4 x i8>, !dbg !34
  %277 = bitcast <4 x i8> %276 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %271, i32 %273, i32 %275, i32 %277, ptr addrspace(1) %157, i1 %98) #2, !dbg !34
  %278 = mul i32 %50, 9, !dbg !35
  %279 = add i32 %278, %.decomposed, !dbg !36
  %280 = mul i32 %53, 2304, !dbg !37
  %281 = mul i32 %55, 2304, !dbg !37
  %282 = mul i32 %57, 2304, !dbg !37
  %283 = mul i32 %59, 2304, !dbg !37
  %284 = mul i32 %61, 2304, !dbg !37
  %285 = mul i32 %63, 2304, !dbg !37
  %286 = mul i32 %65, 2304, !dbg !37
  %287 = mul i32 %67, 2304, !dbg !37
  %288 = mul i32 %69, 2304, !dbg !37
  %289 = mul i32 %71, 2304, !dbg !37
  %290 = mul i32 %73, 2304, !dbg !37
  %291 = mul i32 %75, 2304, !dbg !37
  %292 = mul i32 %77, 2304, !dbg !37
  %293 = mul i32 %79, 2304, !dbg !37
  %294 = mul i32 %81, 2304, !dbg !37
  %295 = mul i32 %83, 2304, !dbg !37
  %296 = add i32 %279, %280, !dbg !38
  %297 = add i32 %281, %.decomposed5, !dbg !36
  %298 = add i32 %297, %278, !dbg !38
  %299 = add i32 %282, %.decomposed7, !dbg !36
  %300 = add i32 %299, %278, !dbg !38
  %301 = add i32 %283, %.decomposed9, !dbg !36
  %302 = add i32 %301, %278, !dbg !38
  %303 = add i32 %284, %.decomposed11, !dbg !36
  %304 = add i32 %303, %278, !dbg !38
  %305 = add i32 %285, %.decomposed13, !dbg !36
  %306 = add i32 %305, %278, !dbg !38
  %307 = add i32 %286, %.decomposed15, !dbg !36
  %308 = add i32 %307, %278, !dbg !38
  %309 = add i32 %287, %.decomposed17, !dbg !36
  %310 = add i32 %309, %278, !dbg !38
  %311 = add i32 %288, %.decomposed19, !dbg !36
  %312 = add i32 %311, %278, !dbg !38
  %313 = add i32 %289, %.decomposed21, !dbg !36
  %314 = add i32 %313, %278, !dbg !38
  %315 = add i32 %290, %.decomposed23, !dbg !36
  %316 = add i32 %315, %278, !dbg !38
  %317 = add i32 %291, %.decomposed25, !dbg !36
  %318 = add i32 %317, %278, !dbg !38
  %319 = add i32 %292, %.decomposed27, !dbg !36
  %320 = add i32 %319, %278, !dbg !38
  %321 = add i32 %293, %.decomposed29, !dbg !36
  %322 = add i32 %321, %278, !dbg !38
  %323 = add i32 %294, %.decomposed31, !dbg !36
  %324 = add i32 %323, %278, !dbg !38
  %325 = add i32 %295, %.decomposed33, !dbg !36
  %326 = add i32 %325, %278, !dbg !38
  %327 = sext i32 %296 to i64, !dbg !39
  %328 = getelementptr float, ptr addrspace(1) %3, i64 %327, !dbg !39
  %329 = sext i32 %298 to i64, !dbg !39
  %330 = getelementptr float, ptr addrspace(1) %3, i64 %329, !dbg !39
  %331 = sext i32 %300 to i64, !dbg !39
  %332 = getelementptr float, ptr addrspace(1) %3, i64 %331, !dbg !39
  %333 = sext i32 %302 to i64, !dbg !39
  %334 = getelementptr float, ptr addrspace(1) %3, i64 %333, !dbg !39
  %335 = sext i32 %304 to i64, !dbg !39
  %336 = getelementptr float, ptr addrspace(1) %3, i64 %335, !dbg !39
  %337 = sext i32 %306 to i64, !dbg !39
  %338 = getelementptr float, ptr addrspace(1) %3, i64 %337, !dbg !39
  %339 = sext i32 %308 to i64, !dbg !39
  %340 = getelementptr float, ptr addrspace(1) %3, i64 %339, !dbg !39
  %341 = sext i32 %310 to i64, !dbg !39
  %342 = getelementptr float, ptr addrspace(1) %3, i64 %341, !dbg !39
  %343 = sext i32 %312 to i64, !dbg !39
  %344 = getelementptr float, ptr addrspace(1) %3, i64 %343, !dbg !39
  %345 = sext i32 %314 to i64, !dbg !39
  %346 = getelementptr float, ptr addrspace(1) %3, i64 %345, !dbg !39
  %347 = sext i32 %316 to i64, !dbg !39
  %348 = getelementptr float, ptr addrspace(1) %3, i64 %347, !dbg !39
  %349 = sext i32 %318 to i64, !dbg !39
  %350 = getelementptr float, ptr addrspace(1) %3, i64 %349, !dbg !39
  %351 = sext i32 %320 to i64, !dbg !39
  %352 = getelementptr float, ptr addrspace(1) %3, i64 %351, !dbg !39
  %353 = sext i32 %322 to i64, !dbg !39
  %354 = getelementptr float, ptr addrspace(1) %3, i64 %353, !dbg !39
  %355 = sext i32 %324 to i64, !dbg !39
  %356 = getelementptr float, ptr addrspace(1) %3, i64 %355, !dbg !39
  %357 = sext i32 %326 to i64, !dbg !39
  %358 = getelementptr float, ptr addrspace(1) %3, i64 %357, !dbg !39
  %359 = and i32 %43, 4080, !dbg !40
  %360 = and i32 %9, 255, !dbg !40
  %361 = lshr i32 %359, 6, !dbg !40
  %362 = getelementptr float, ptr addrspace(3) @global_smem, i32 %361, !dbg !40
  %363 = getelementptr float, ptr addrspace(3) %362, i32 %359, !dbg !40
  %364 = bitcast float %179 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %363, <1 x i32> %364, i1 true) #2, !dbg !40
  %365 = or disjoint i32 %359, 1, !dbg !40
  %366 = getelementptr float, ptr addrspace(3) %362, i32 %365, !dbg !40
  %367 = bitcast float %181 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %366, <1 x i32> %367, i1 true) #2, !dbg !40
  %368 = or disjoint i32 %359, 2, !dbg !40
  %369 = getelementptr float, ptr addrspace(3) %362, i32 %368, !dbg !40
  %370 = bitcast float %183 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %369, <1 x i32> %370, i1 true) #2, !dbg !40
  %371 = or disjoint i32 %359, 3, !dbg !40
  %372 = getelementptr float, ptr addrspace(3) %362, i32 %371, !dbg !40
  %373 = bitcast float %185 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %372, <1 x i32> %373, i1 true) #2, !dbg !40
  %374 = or disjoint i32 %359, 4, !dbg !40
  %375 = getelementptr float, ptr addrspace(3) %362, i32 %374, !dbg !40
  %376 = bitcast float %207 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %375, <1 x i32> %376, i1 true) #2, !dbg !40
  %377 = or disjoint i32 %359, 5, !dbg !40
  %378 = getelementptr float, ptr addrspace(3) %362, i32 %377, !dbg !40
  %379 = bitcast float %209 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %378, <1 x i32> %379, i1 true) #2, !dbg !40
  %380 = or disjoint i32 %359, 6, !dbg !40
  %381 = getelementptr float, ptr addrspace(3) %362, i32 %380, !dbg !40
  %382 = bitcast float %211 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %382, i1 true) #2, !dbg !40
  %383 = or disjoint i32 %359, 7, !dbg !40
  %384 = getelementptr float, ptr addrspace(3) %362, i32 %383, !dbg !40
  %385 = bitcast float %213 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %385, i1 true) #2, !dbg !40
  %386 = or disjoint i32 %359, 8, !dbg !40
  %387 = getelementptr float, ptr addrspace(3) %362, i32 %386, !dbg !40
  %388 = bitcast float %235 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %387, <1 x i32> %388, i1 true) #2, !dbg !40
  %389 = or disjoint i32 %359, 9, !dbg !40
  %390 = getelementptr float, ptr addrspace(3) %362, i32 %389, !dbg !40
  %391 = bitcast float %237 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %390, <1 x i32> %391, i1 true) #2, !dbg !40
  %392 = or disjoint i32 %359, 10, !dbg !40
  %393 = getelementptr float, ptr addrspace(3) %362, i32 %392, !dbg !40
  %394 = bitcast float %239 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %393, <1 x i32> %394, i1 true) #2, !dbg !40
  %395 = or disjoint i32 %359, 11, !dbg !40
  %396 = getelementptr float, ptr addrspace(3) %362, i32 %395, !dbg !40
  %397 = bitcast float %241 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %396, <1 x i32> %397, i1 true) #2, !dbg !40
  %398 = or disjoint i32 %359, 12, !dbg !40
  %399 = getelementptr float, ptr addrspace(3) %362, i32 %398, !dbg !40
  %400 = bitcast float %263 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %399, <1 x i32> %400, i1 true) #2, !dbg !40
  %401 = or disjoint i32 %359, 13, !dbg !40
  %402 = getelementptr float, ptr addrspace(3) %362, i32 %401, !dbg !40
  %403 = bitcast float %265 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %402, <1 x i32> %403, i1 true) #2, !dbg !40
  %404 = or disjoint i32 %359, 14, !dbg !40
  %405 = getelementptr float, ptr addrspace(3) %362, i32 %404, !dbg !40
  %406 = bitcast float %267 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %405, <1 x i32> %406, i1 true) #2, !dbg !40
  %407 = or disjoint i32 %359, 15, !dbg !40
  %408 = getelementptr float, ptr addrspace(3) %362, i32 %407, !dbg !40
  %409 = bitcast float %269 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %408, <1 x i32> %409, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %410 = lshr i32 %360, 6, !dbg !40
  %411 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %410, !dbg !40
  %412 = getelementptr inbounds float, ptr addrspace(3) %411, i32 %360, !dbg !40
  %413 = load i32, ptr addrspace(3) %412, align 4, !dbg !40
  %414 = or disjoint i32 %360, 256, !dbg !40
  %415 = lshr i32 %414, 6, !dbg !40
  %416 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %415, !dbg !40
  %417 = getelementptr inbounds float, ptr addrspace(3) %416, i32 %414, !dbg !40
  %418 = load i32, ptr addrspace(3) %417, align 4, !dbg !40
  %419 = or disjoint i32 %360, 512, !dbg !40
  %420 = lshr i32 %419, 6, !dbg !40
  %421 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %420, !dbg !40
  %422 = getelementptr inbounds float, ptr addrspace(3) %421, i32 %419, !dbg !40
  %423 = load i32, ptr addrspace(3) %422, align 4, !dbg !40
  %424 = or disjoint i32 %360, 768, !dbg !40
  %425 = lshr i32 %424, 6, !dbg !40
  %426 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %425, !dbg !40
  %427 = getelementptr inbounds float, ptr addrspace(3) %426, i32 %424, !dbg !40
  %428 = load i32, ptr addrspace(3) %427, align 4, !dbg !40
  %429 = or disjoint i32 %360, 1024, !dbg !40
  %430 = lshr i32 %429, 6, !dbg !40
  %431 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %430, !dbg !40
  %432 = getelementptr inbounds float, ptr addrspace(3) %431, i32 %429, !dbg !40
  %433 = load i32, ptr addrspace(3) %432, align 4, !dbg !40
  %434 = or disjoint i32 %360, 1280, !dbg !40
  %435 = lshr i32 %434, 6, !dbg !40
  %436 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %435, !dbg !40
  %437 = getelementptr inbounds float, ptr addrspace(3) %436, i32 %434, !dbg !40
  %438 = load i32, ptr addrspace(3) %437, align 4, !dbg !40
  %439 = or disjoint i32 %360, 1536, !dbg !40
  %440 = lshr i32 %439, 6, !dbg !40
  %441 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %440, !dbg !40
  %442 = getelementptr inbounds float, ptr addrspace(3) %441, i32 %439, !dbg !40
  %443 = load i32, ptr addrspace(3) %442, align 4, !dbg !40
  %444 = or disjoint i32 %360, 1792, !dbg !40
  %445 = lshr i32 %444, 6, !dbg !40
  %446 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %445, !dbg !40
  %447 = getelementptr inbounds float, ptr addrspace(3) %446, i32 %444, !dbg !40
  %448 = load i32, ptr addrspace(3) %447, align 4, !dbg !40
  %449 = or disjoint i32 %360, 2048, !dbg !40
  %450 = lshr i32 %449, 6, !dbg !40
  %451 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %450, !dbg !40
  %452 = getelementptr inbounds float, ptr addrspace(3) %451, i32 %449, !dbg !40
  %453 = load i32, ptr addrspace(3) %452, align 4, !dbg !40
  %454 = or disjoint i32 %360, 2304, !dbg !40
  %455 = lshr i32 %454, 6, !dbg !40
  %456 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %455, !dbg !40
  %457 = getelementptr inbounds float, ptr addrspace(3) %456, i32 %454, !dbg !40
  %458 = load i32, ptr addrspace(3) %457, align 4, !dbg !40
  %459 = or disjoint i32 %360, 2560, !dbg !40
  %460 = lshr i32 %459, 6, !dbg !40
  %461 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %460, !dbg !40
  %462 = getelementptr inbounds float, ptr addrspace(3) %461, i32 %459, !dbg !40
  %463 = load i32, ptr addrspace(3) %462, align 4, !dbg !40
  %464 = or disjoint i32 %360, 2816, !dbg !40
  %465 = lshr i32 %464, 6, !dbg !40
  %466 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %465, !dbg !40
  %467 = getelementptr inbounds float, ptr addrspace(3) %466, i32 %464, !dbg !40
  %468 = load i32, ptr addrspace(3) %467, align 4, !dbg !40
  %469 = or disjoint i32 %360, 3072, !dbg !40
  %470 = lshr i32 %469, 6, !dbg !40
  %471 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %470, !dbg !40
  %472 = getelementptr inbounds float, ptr addrspace(3) %471, i32 %469, !dbg !40
  %473 = load i32, ptr addrspace(3) %472, align 4, !dbg !40
  %474 = or disjoint i32 %360, 3328, !dbg !40
  %475 = lshr i32 %474, 6, !dbg !40
  %476 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %475, !dbg !40
  %477 = getelementptr inbounds float, ptr addrspace(3) %476, i32 %474, !dbg !40
  %478 = load i32, ptr addrspace(3) %477, align 4, !dbg !40
  %479 = or disjoint i32 %360, 3584, !dbg !40
  %480 = lshr i32 %479, 6, !dbg !40
  %481 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %480, !dbg !40
  %482 = getelementptr inbounds float, ptr addrspace(3) %481, i32 %479, !dbg !40
  %483 = load i32, ptr addrspace(3) %482, align 4, !dbg !40
  %484 = or disjoint i32 %360, 3840, !dbg !40
  %485 = lshr i32 %484, 6, !dbg !40
  %486 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %485, !dbg !40
  %487 = getelementptr inbounds float, ptr addrspace(3) %486, i32 %484, !dbg !40
  %488 = load i32, ptr addrspace(3) %487, align 4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %413, ptr addrspace(1) %328, i1 %99) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %418, ptr addrspace(1) %330, i1 %100) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %423, ptr addrspace(1) %332, i1 %101) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %428, ptr addrspace(1) %334, i1 %102) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %433, ptr addrspace(1) %336, i1 %103) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %438, ptr addrspace(1) %338, i1 %104) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %443, ptr addrspace(1) %340, i1 %105) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %448, ptr addrspace(1) %342, i1 %106) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %453, ptr addrspace(1) %344, i1 %107) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %458, ptr addrspace(1) %346, i1 %108) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %463, ptr addrspace(1) %348, i1 %108) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %468, ptr addrspace(1) %350, i1 %108) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %473, ptr addrspace(1) %352, i1 %108) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %478, ptr addrspace(1) %354, i1 %108) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %483, ptr addrspace(1) %356, i1 %108) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %488, ptr addrspace(1) %358, i1 %108) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chl5tpewny5oofnkzkepn72of4kbpub3km7rdog2pscsj5zpcd2k.py", directory: "inductor_cache/hl")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_10, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_10", linkageName: "triton_poi_fused_convolution_leaky_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 40, column: 25, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 32, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 45, scope: !7)
!35 = !DILocation(line: 41, column: 32, scope: !7)
!36 = !DILocation(line: 41, column: 30, scope: !7)
!37 = !DILocation(line: 41, column: 42, scope: !7)
!38 = !DILocation(line: 41, column: 37, scope: !7)
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 41, column: 53, scope: !7)
!41 = !DILocation(line: 41, column: 4, scope: !7)
