; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 2, !dbg !12
  %14 = and i32 %13, 31, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = shl i32 %12, 2, !dbg !14
  %17 = and i32 %16, 12, !dbg !14
  %18 = srem i32 %15, 1024, !dbg !15
  %19 = shl i32 %15, 4, !dbg !16
  %20 = or disjoint i32 %19, %17, !dbg !17
  %21 = sext i32 %20 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !18
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !20
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !21
  %26 = sext i32 %18 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !22
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !23
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !23
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !25
  %37 = bitcast i32 %36 to float, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #5, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #5, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #5, !dbg !27
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #5, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #5, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #5, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #5, !dbg !29
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #5, !dbg !29
  %48 = fadd float %37, 0x3EE4F8B580000000, !dbg !30
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i13 = icmp eq i32 %55, 0, !dbg !31
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i16 = icmp eq i32 %56, 0, !dbg !31
  br i1 %.not.i13, label %62, label %57, !dbg !31

57:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %60, label %58, !dbg !31

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #5, !dbg !31
  br label %__nv_sqrtf.exit17, !dbg !31

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #5, !dbg !31
  br label %__nv_sqrtf.exit17, !dbg !31

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %65, label %63, !dbg !31

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #5, !dbg !31
  br label %__nv_sqrtf.exit17, !dbg !31

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #5, !dbg !31
  br label %__nv_sqrtf.exit17, !dbg !31

__nv_sqrtf.exit17:                                ; preds = %58, %60, %63, %65
  %.0.i15 = phi float [ %59, %58 ], [ %61, %60 ], [ %64, %63 ], [ %66, %65 ], !dbg !31
  %67 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !21
  %68 = bitcast i32 %67 to float, !dbg !21
  %69 = bitcast i32 %31 to float, !dbg !23
  %70 = fsub float %68, %69, !dbg !32
  %71 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !21
  %72 = bitcast i32 %71 to float, !dbg !21
  %73 = fsub float %72, %69, !dbg !32
  %74 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !21
  %75 = bitcast i32 %74 to float, !dbg !21
  %76 = fsub float %75, %69, !dbg !32
  %77 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !21
  %78 = bitcast i32 %77 to float, !dbg !21
  %79 = fsub float %78, %69, !dbg !32
  %80 = bitcast i32 %47 to float, !dbg !29
  %81 = bitcast i32 %42 to float, !dbg !27
  %82 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !19
  %83 = bitcast i32 %82 to float, !dbg !19
  %84 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !19
  %85 = bitcast i32 %84 to float, !dbg !19
  %86 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !19
  %87 = bitcast i32 %86 to float, !dbg !19
  %88 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !19
  %89 = bitcast i32 %88 to float, !dbg !19
  %90 = and i32 %12, 31, !dbg !12
  %91 = or disjoint i32 %11, %90, !dbg !13
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #5, !dbg !33
  %93 = fmul float %79, %92, !dbg !34
  %94 = fmul float %76, %92, !dbg !34
  %95 = fmul float %73, %92, !dbg !34
  %96 = fmul float %70, %92, !dbg !34
  %97 = fmul float %93, %81, !dbg !35
  %98 = fmul float %94, %81, !dbg !35
  %99 = fmul float %95, %81, !dbg !35
  %100 = fmul float %96, %81, !dbg !35
  %101 = fadd float %97, %80, !dbg !36
  %102 = fadd float %98, %80, !dbg !36
  %103 = fadd float %99, %80, !dbg !36
  %104 = fadd float %100, %80, !dbg !36
  %105 = fcmp olt float %101, 0.000000e+00, !dbg !37
  %106 = fcmp olt float %102, 0.000000e+00, !dbg !37
  %107 = fcmp olt float %103, 0.000000e+00, !dbg !37
  %108 = fcmp olt float %104, 0.000000e+00, !dbg !37
  %109 = select i1 %105, float 0.000000e+00, float %101, !dbg !41
  %110 = select i1 %106, float 0.000000e+00, float %102, !dbg !41
  %111 = select i1 %107, float 0.000000e+00, float %103, !dbg !41
  %112 = select i1 %108, float 0.000000e+00, float %104, !dbg !41
  %113 = fadd float %109, %89, !dbg !42
  %114 = fadd float %110, %87, !dbg !42
  %115 = fadd float %111, %85, !dbg !42
  %116 = fadd float %112, %83, !dbg !42
  %117 = fcmp olt float %113, 0.000000e+00, !dbg !43
  %118 = fcmp olt float %114, 0.000000e+00, !dbg !43
  %119 = fcmp olt float %115, 0.000000e+00, !dbg !43
  %120 = fcmp olt float %116, 0.000000e+00, !dbg !43
  %121 = select i1 %117, float 0.000000e+00, float %113, !dbg !45
  %122 = select i1 %118, float 0.000000e+00, float %114, !dbg !45
  %123 = select i1 %119, float 0.000000e+00, float %115, !dbg !45
  %124 = select i1 %120, float 0.000000e+00, float %116, !dbg !45
  %125 = fadd float %121, %122, !dbg !46
  %126 = fadd float %123, %125, !dbg !46
  %127 = fadd float %124, %126, !dbg !46
  %128 = bitcast float %127 to i32, !dbg !51
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 2, i32 31), !dbg !51
  %130 = bitcast i32 %129 to float, !dbg !51
  %131 = fadd float %127, %130, !dbg !46
  %132 = bitcast float %131 to i32, !dbg !51
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 1, i32 31), !dbg !51
  %134 = bitcast i32 %133 to float, !dbg !51
  %135 = fadd float %131, %134, !dbg !46
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !52
  %137 = bitcast float %135 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %90, !dbg !52
  %139 = load float, ptr addrspace(3) %138, align 4, !dbg !52
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 1.600000e+01) #5, !dbg !52
  %141 = getelementptr float, ptr addrspace(1) %7, i64 %21, !dbg !53
  %142 = bitcast float %121 to i32, !dbg !54
  %143 = bitcast float %122 to i32, !dbg !54
  %144 = bitcast float %123 to i32, !dbg !54
  %145 = bitcast float %124 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %142, i32 %143, i32 %144, i32 %145, ptr addrspace(1) %141, i1 true) #5, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %146 = sext i32 %91 to i64, !dbg !56
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !56
  %148 = and i32 %12, 96, !dbg !57
  %149 = icmp eq i32 %148, 0, !dbg !57
  %150 = bitcast float %140 to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %150, ptr addrspace(1) %147, i1 %149) #5, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py", directory: "inductor_cache/4d")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_23, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_23", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 32, column: 38, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 43, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 36, scope: !7)
!30 = !DILocation(line: 40, column: 18, scope: !7)
!31 = !DILocation(line: 41, column: 26, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 43, column: 18, scope: !7)
!34 = !DILocation(line: 46, column: 19, scope: !7)
!35 = !DILocation(line: 47, column: 20, scope: !7)
!36 = !DILocation(line: 48, column: 20, scope: !7)
!37 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 50, column: 42, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 51, column: 19, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !44)
!44 = !DILocation(line: 52, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !44)
!46 = !DILocation(line: 256, column: 15, scope: !47, inlinedAt: !50)
!47 = distinct !DILexicalBlockFile(scope: !49, file: !48, discriminator: 0)
!48 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!49 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!50 = !DILocation(line: 54, column: 26, scope: !7)
!51 = !DILocation(line: 267, column: 36, scope: !49, inlinedAt: !50)
!52 = !DILocation(line: 56, column: 20, scope: !7)
!53 = !DILocation(line: 57, column: 25, scope: !7)
!54 = !DILocation(line: 57, column: 45, scope: !7)
!55 = !DILocation(line: 58, column: 4, scope: !7)
!56 = !DILocation(line: 59, column: 28, scope: !7)
!57 = !DILocation(line: 59, column: 40, scope: !7)
!58 = !DILocation(line: 59, column: 4, scope: !7)
