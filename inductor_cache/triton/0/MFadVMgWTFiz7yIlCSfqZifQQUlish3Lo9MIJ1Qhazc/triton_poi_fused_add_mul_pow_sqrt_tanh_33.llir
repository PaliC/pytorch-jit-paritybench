; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_mul_pow_sqrt_tanh_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = icmp slt i32 %6, 8, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %9 = shl i32 %8, 9, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 2, !dbg !14
  %12 = and i32 %11, 508, !dbg !14
  %13 = or disjoint i32 %9, %12, !dbg !15
  %14 = icmp slt i32 %13, 6144, !dbg !16
  %15 = mul i32 %6, 6144, !dbg !17
  %16 = add i32 %13, %15, !dbg !18
  %17 = sext i32 %16 to i64, !dbg !19
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !19
  %19 = and i1 %7, %14, !dbg !20
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 %19) #4, !dbg !21
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !21
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !21
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !21
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !21
  %25 = bitcast i32 %21 to float, !dbg !21
  %26 = bitcast i32 %22 to float, !dbg !21
  %27 = bitcast i32 %23 to float, !dbg !21
  %28 = bitcast i32 %24 to float, !dbg !21
  %29 = fmul float %25, %25, !dbg !22
  %30 = fmul float %26, %26, !dbg !22
  %31 = fmul float %27, %27, !dbg !22
  %32 = fmul float %28, %28, !dbg !22
  %33 = fmul float %29, %25, !dbg !23
  %34 = fmul float %30, %26, !dbg !23
  %35 = fmul float %31, %27, !dbg !23
  %36 = fmul float %32, %28, !dbg !23
  %37 = fmul float %33, 0x3FA6E4E260000000, !dbg !24
  %38 = fmul float %34, 0x3FA6E4E260000000, !dbg !24
  %39 = fmul float %35, 0x3FA6E4E260000000, !dbg !24
  %40 = fmul float %36, 0x3FA6E4E260000000, !dbg !24
  %41 = fadd float %37, %25, !dbg !25
  %42 = fadd float %38, %26, !dbg !25
  %43 = fadd float %39, %27, !dbg !25
  %44 = fadd float %40, %28, !dbg !25
  %45 = fmul float %41, 0x3FE9884540000000, !dbg !26
  %46 = fmul float %42, 0x3FE9884540000000, !dbg !26
  %47 = fmul float %43, 0x3FE9884540000000, !dbg !26
  %48 = fmul float %44, 0x3FE9884540000000, !dbg !26
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i = icmp eq i32 %49, 0, !dbg !27
  %50 = tail call float @llvm.nvvm.fabs.ftz.f(float %45) #4, !dbg !27
  %51 = tail call float @llvm.nvvm.fabs.f(float %45) #4, !dbg !27
  %.01.i = select i1 %.not.i, float %51, float %50, !dbg !27
  %52 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !27
  br i1 %52, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !27

__internal_fmad.exit1.i:                          ; preds = %5
  %53 = fmul float %.01.i, 0x4007154760000000, !dbg !27
  %54 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %53) #4, !dbg !27
  %55 = fadd float %54, 1.000000e+00, !dbg !27
  %56 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %55) #5, !dbg !27, !srcloc !28
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not6.i = icmp eq i32 %57, 0, !dbg !27
  %58 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %56, float -2.000000e+00, float 1.000000e+00) #4, !dbg !27
  %59 = tail call float @llvm.nvvm.fma.rn.f(float %56, float -2.000000e+00, float 1.000000e+00) #4, !dbg !27
  %.03.i = select i1 %.not6.i, float %59, float %58, !dbg !27
  %60 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !27
  %s.0.i = select i1 %60, float 1.000000e+00, float %.03.i, !dbg !27
  %61 = bitcast float %s.0.i to i32, !dbg !27
  %62 = bitcast float %45 to i32, !dbg !27
  %63 = and i32 %62, -2147483648, !dbg !27
  %64 = or i32 %63, %61, !dbg !27
  %65 = bitcast i32 %64 to float, !dbg !27
  br label %__nv_tanhf.exit, !dbg !27

__internal_fmad.exit3.i:                          ; preds = %5
  %66 = fmul float %45, %45, !dbg !27
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not1.i = icmp eq i32 %67, 0, !dbg !27
  %68 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %66, float 0xBFAAC795C0000000) #4, !dbg !27
  %69 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %66, float 0xBFAAC795C0000000) #4, !dbg !27
  %.06.i = select i1 %.not1.i, float %69, float %68, !dbg !27
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not2.i = icmp eq i32 %70, 0, !dbg !27
  %71 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %66, float 0x3FC10B2820000000) #4, !dbg !27
  %72 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %66, float 0x3FC10B2820000000) #4, !dbg !27
  %.05.i = select i1 %.not2.i, float %72, float %71, !dbg !27
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not3.i = icmp eq i32 %73, 0, !dbg !27
  %74 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %66, float 0xBFD5553DA0000000) #4, !dbg !27
  %75 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %66, float 0xBFD5553DA0000000) #4, !dbg !27
  %.0.i = select i1 %.not3.i, float %75, float %74, !dbg !27
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not4.i = icmp eq i32 %76, 0, !dbg !27
  %77 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %66, float 0.000000e+00) #4, !dbg !27
  %78 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %66, float 0.000000e+00) #4, !dbg !27
  %.04.i = select i1 %.not4.i, float %78, float %77, !dbg !27
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not5.i = icmp eq i32 %79, 0, !dbg !27
  %80 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %45, float %45) #4, !dbg !27
  %81 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %45, float %45) #4, !dbg !27
  %.02.i = select i1 %.not5.i, float %81, float %80, !dbg !27
  br label %__nv_tanhf.exit, !dbg !27

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %65, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !27
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i1 = icmp eq i32 %82, 0, !dbg !27
  %83 = tail call float @llvm.nvvm.fabs.ftz.f(float %46) #4, !dbg !27
  %84 = tail call float @llvm.nvvm.fabs.f(float %46) #4, !dbg !27
  %.01.i2 = select i1 %.not.i1, float %84, float %83, !dbg !27
  %85 = fcmp ult float %.01.i2, 0x3FE3333340000000, !dbg !27
  br i1 %85, label %__internal_fmad.exit3.i8, label %__internal_fmad.exit1.i3, !dbg !27

__internal_fmad.exit1.i3:                         ; preds = %__nv_tanhf.exit
  %86 = fmul float %.01.i2, 0x4007154760000000, !dbg !27
  %87 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %86) #4, !dbg !27
  %88 = fadd float %87, 1.000000e+00, !dbg !27
  %89 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %88) #5, !dbg !27, !srcloc !28
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not6.i4 = icmp eq i32 %90, 0, !dbg !27
  %91 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %89, float -2.000000e+00, float 1.000000e+00) #4, !dbg !27
  %92 = tail call float @llvm.nvvm.fma.rn.f(float %89, float -2.000000e+00, float 1.000000e+00) #4, !dbg !27
  %.03.i5 = select i1 %.not6.i4, float %92, float %91, !dbg !27
  %93 = fcmp oge float %.01.i2, 0x4022059680000000, !dbg !27
  %s.0.i6 = select i1 %93, float 1.000000e+00, float %.03.i5, !dbg !27
  %94 = bitcast float %s.0.i6 to i32, !dbg !27
  %95 = bitcast float %46 to i32, !dbg !27
  %96 = and i32 %95, -2147483648, !dbg !27
  %97 = or i32 %96, %94, !dbg !27
  %98 = bitcast i32 %97 to float, !dbg !27
  br label %__nv_tanhf.exit19, !dbg !27

__internal_fmad.exit3.i8:                         ; preds = %__nv_tanhf.exit
  %99 = fmul float %46, %46, !dbg !27
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not1.i9 = icmp eq i32 %100, 0, !dbg !27
  %101 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %99, float 0xBFAAC795C0000000) #4, !dbg !27
  %102 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %99, float 0xBFAAC795C0000000) #4, !dbg !27
  %.06.i10 = select i1 %.not1.i9, float %102, float %101, !dbg !27
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not2.i11 = icmp eq i32 %103, 0, !dbg !27
  %104 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i10, float %99, float 0x3FC10B2820000000) #4, !dbg !27
  %105 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i10, float %99, float 0x3FC10B2820000000) #4, !dbg !27
  %.05.i12 = select i1 %.not2.i11, float %105, float %104, !dbg !27
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not3.i13 = icmp eq i32 %106, 0, !dbg !27
  %107 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i12, float %99, float 0xBFD5553DA0000000) #4, !dbg !27
  %108 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i12, float %99, float 0xBFD5553DA0000000) #4, !dbg !27
  %.0.i14 = select i1 %.not3.i13, float %108, float %107, !dbg !27
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not4.i15 = icmp eq i32 %109, 0, !dbg !27
  %110 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i14, float %99, float 0.000000e+00) #4, !dbg !27
  %111 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i14, float %99, float 0.000000e+00) #4, !dbg !27
  %.04.i16 = select i1 %.not4.i15, float %111, float %110, !dbg !27
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not5.i17 = icmp eq i32 %112, 0, !dbg !27
  %113 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i16, float %46, float %46) #4, !dbg !27
  %114 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i16, float %46, float %46) #4, !dbg !27
  %.02.i18 = select i1 %.not5.i17, float %114, float %113, !dbg !27
  br label %__nv_tanhf.exit19, !dbg !27

__nv_tanhf.exit19:                                ; preds = %__internal_fmad.exit1.i3, %__internal_fmad.exit3.i8
  %s.1.i7 = phi float [ %98, %__internal_fmad.exit1.i3 ], [ %.02.i18, %__internal_fmad.exit3.i8 ], !dbg !27
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i20 = icmp eq i32 %115, 0, !dbg !27
  %116 = tail call float @llvm.nvvm.fabs.ftz.f(float %47) #4, !dbg !27
  %117 = tail call float @llvm.nvvm.fabs.f(float %47) #4, !dbg !27
  %.01.i21 = select i1 %.not.i20, float %117, float %116, !dbg !27
  %118 = fcmp ult float %.01.i21, 0x3FE3333340000000, !dbg !27
  br i1 %118, label %__internal_fmad.exit3.i27, label %__internal_fmad.exit1.i22, !dbg !27

__internal_fmad.exit1.i22:                        ; preds = %__nv_tanhf.exit19
  %119 = fmul float %.01.i21, 0x4007154760000000, !dbg !27
  %120 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %119) #4, !dbg !27
  %121 = fadd float %120, 1.000000e+00, !dbg !27
  %122 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %121) #5, !dbg !27, !srcloc !28
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not6.i23 = icmp eq i32 %123, 0, !dbg !27
  %124 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %122, float -2.000000e+00, float 1.000000e+00) #4, !dbg !27
  %125 = tail call float @llvm.nvvm.fma.rn.f(float %122, float -2.000000e+00, float 1.000000e+00) #4, !dbg !27
  %.03.i24 = select i1 %.not6.i23, float %125, float %124, !dbg !27
  %126 = fcmp oge float %.01.i21, 0x4022059680000000, !dbg !27
  %s.0.i25 = select i1 %126, float 1.000000e+00, float %.03.i24, !dbg !27
  %127 = bitcast float %s.0.i25 to i32, !dbg !27
  %128 = bitcast float %47 to i32, !dbg !27
  %129 = and i32 %128, -2147483648, !dbg !27
  %130 = or i32 %129, %127, !dbg !27
  %131 = bitcast i32 %130 to float, !dbg !27
  br label %__nv_tanhf.exit38, !dbg !27

__internal_fmad.exit3.i27:                        ; preds = %__nv_tanhf.exit19
  %132 = fmul float %47, %47, !dbg !27
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not1.i28 = icmp eq i32 %133, 0, !dbg !27
  %134 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %132, float 0xBFAAC795C0000000) #4, !dbg !27
  %135 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %132, float 0xBFAAC795C0000000) #4, !dbg !27
  %.06.i29 = select i1 %.not1.i28, float %135, float %134, !dbg !27
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not2.i30 = icmp eq i32 %136, 0, !dbg !27
  %137 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i29, float %132, float 0x3FC10B2820000000) #4, !dbg !27
  %138 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i29, float %132, float 0x3FC10B2820000000) #4, !dbg !27
  %.05.i31 = select i1 %.not2.i30, float %138, float %137, !dbg !27
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not3.i32 = icmp eq i32 %139, 0, !dbg !27
  %140 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i31, float %132, float 0xBFD5553DA0000000) #4, !dbg !27
  %141 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i31, float %132, float 0xBFD5553DA0000000) #4, !dbg !27
  %.0.i33 = select i1 %.not3.i32, float %141, float %140, !dbg !27
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not4.i34 = icmp eq i32 %142, 0, !dbg !27
  %143 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i33, float %132, float 0.000000e+00) #4, !dbg !27
  %144 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i33, float %132, float 0.000000e+00) #4, !dbg !27
  %.04.i35 = select i1 %.not4.i34, float %144, float %143, !dbg !27
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not5.i36 = icmp eq i32 %145, 0, !dbg !27
  %146 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i35, float %47, float %47) #4, !dbg !27
  %147 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i35, float %47, float %47) #4, !dbg !27
  %.02.i37 = select i1 %.not5.i36, float %147, float %146, !dbg !27
  br label %__nv_tanhf.exit38, !dbg !27

__nv_tanhf.exit38:                                ; preds = %__internal_fmad.exit1.i22, %__internal_fmad.exit3.i27
  %s.1.i26 = phi float [ %131, %__internal_fmad.exit1.i22 ], [ %.02.i37, %__internal_fmad.exit3.i27 ], !dbg !27
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i39 = icmp eq i32 %148, 0, !dbg !27
  %149 = tail call float @llvm.nvvm.fabs.ftz.f(float %48) #4, !dbg !27
  %150 = tail call float @llvm.nvvm.fabs.f(float %48) #4, !dbg !27
  %.01.i40 = select i1 %.not.i39, float %150, float %149, !dbg !27
  %151 = fcmp ult float %.01.i40, 0x3FE3333340000000, !dbg !27
  br i1 %151, label %__internal_fmad.exit3.i46, label %__internal_fmad.exit1.i41, !dbg !27

__internal_fmad.exit1.i41:                        ; preds = %__nv_tanhf.exit38
  %152 = fmul float %.01.i40, 0x4007154760000000, !dbg !27
  %153 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %152) #4, !dbg !27
  %154 = fadd float %153, 1.000000e+00, !dbg !27
  %155 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %154) #5, !dbg !27, !srcloc !28
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not6.i42 = icmp eq i32 %156, 0, !dbg !27
  %157 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %155, float -2.000000e+00, float 1.000000e+00) #4, !dbg !27
  %158 = tail call float @llvm.nvvm.fma.rn.f(float %155, float -2.000000e+00, float 1.000000e+00) #4, !dbg !27
  %.03.i43 = select i1 %.not6.i42, float %158, float %157, !dbg !27
  %159 = fcmp oge float %.01.i40, 0x4022059680000000, !dbg !27
  %s.0.i44 = select i1 %159, float 1.000000e+00, float %.03.i43, !dbg !27
  %160 = bitcast float %s.0.i44 to i32, !dbg !27
  %161 = bitcast float %48 to i32, !dbg !27
  %162 = and i32 %161, -2147483648, !dbg !27
  %163 = or i32 %162, %160, !dbg !27
  %164 = bitcast i32 %163 to float, !dbg !27
  br label %__nv_tanhf.exit57, !dbg !27

__internal_fmad.exit3.i46:                        ; preds = %__nv_tanhf.exit38
  %165 = fmul float %48, %48, !dbg !27
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not1.i47 = icmp eq i32 %166, 0, !dbg !27
  %167 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %165, float 0xBFAAC795C0000000) #4, !dbg !27
  %168 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %165, float 0xBFAAC795C0000000) #4, !dbg !27
  %.06.i48 = select i1 %.not1.i47, float %168, float %167, !dbg !27
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not2.i49 = icmp eq i32 %169, 0, !dbg !27
  %170 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i48, float %165, float 0x3FC10B2820000000) #4, !dbg !27
  %171 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i48, float %165, float 0x3FC10B2820000000) #4, !dbg !27
  %.05.i50 = select i1 %.not2.i49, float %171, float %170, !dbg !27
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not3.i51 = icmp eq i32 %172, 0, !dbg !27
  %173 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i50, float %165, float 0xBFD5553DA0000000) #4, !dbg !27
  %174 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i50, float %165, float 0xBFD5553DA0000000) #4, !dbg !27
  %.0.i52 = select i1 %.not3.i51, float %174, float %173, !dbg !27
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not4.i53 = icmp eq i32 %175, 0, !dbg !27
  %176 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i52, float %165, float 0.000000e+00) #4, !dbg !27
  %177 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i52, float %165, float 0.000000e+00) #4, !dbg !27
  %.04.i54 = select i1 %.not4.i53, float %177, float %176, !dbg !27
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not5.i55 = icmp eq i32 %178, 0, !dbg !27
  %179 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i54, float %48, float %48) #4, !dbg !27
  %180 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i54, float %48, float %48) #4, !dbg !27
  %.02.i56 = select i1 %.not5.i55, float %180, float %179, !dbg !27
  br label %__nv_tanhf.exit57, !dbg !27

__nv_tanhf.exit57:                                ; preds = %__internal_fmad.exit1.i41, %__internal_fmad.exit3.i46
  %s.1.i45 = phi float [ %164, %__internal_fmad.exit1.i41 ], [ %.02.i56, %__internal_fmad.exit3.i46 ], !dbg !27
  %181 = and i32 %10, 127, !dbg !14
  %182 = or disjoint i32 %181, 384, !dbg !14
  %183 = or disjoint i32 %9, %182, !dbg !15
  %184 = icmp slt i32 %183, 6144, !dbg !16
  %185 = and i1 %7, %184, !dbg !20
  %186 = or disjoint i32 %181, 256, !dbg !14
  %187 = or disjoint i32 %9, %186, !dbg !15
  %188 = icmp slt i32 %187, 6144, !dbg !16
  %189 = and i1 %7, %188, !dbg !20
  %190 = or disjoint i32 %181, 128, !dbg !14
  %191 = or disjoint i32 %9, %190, !dbg !15
  %192 = icmp slt i32 %191, 6144, !dbg !16
  %193 = and i1 %7, %192, !dbg !20
  %194 = or disjoint i32 %9, %181, !dbg !15
  %195 = icmp slt i32 %194, 6144, !dbg !16
  %196 = and i1 %7, %195, !dbg !20
  %.frozen = freeze i32 %6, !dbg !29
  %197 = sdiv i32 %.frozen, 2, !dbg !29
  %198 = mul i32 %197, 2, !dbg !30
  %.decomposed = sub i32 %.frozen, %198, !dbg !30
  %199 = fmul float %25, 5.000000e-01, !dbg !31
  %200 = fmul float %26, 5.000000e-01, !dbg !31
  %201 = fmul float %27, 5.000000e-01, !dbg !31
  %202 = fmul float %28, 5.000000e-01, !dbg !31
  %203 = fadd float %s.1.i, 1.000000e+00, !dbg !32
  %204 = fadd float %s.1.i7, 1.000000e+00, !dbg !32
  %205 = fadd float %s.1.i26, 1.000000e+00, !dbg !32
  %206 = fadd float %s.1.i45, 1.000000e+00, !dbg !32
  %207 = fmul float %199, %203, !dbg !33
  %208 = fmul float %200, %204, !dbg !33
  %209 = fmul float %201, %205, !dbg !33
  %210 = fmul float %202, %206, !dbg !33
  %211 = shl i32 %194, 1, !dbg !34
  %212 = shl i32 %191, 1, !dbg !34
  %213 = shl i32 %187, 1, !dbg !34
  %214 = shl i32 %183, 1, !dbg !34
  %215 = mul i32 %197, 12288, !dbg !35
  %216 = add i32 %215, %.decomposed, !dbg !36
  %217 = add i32 %216, %211, !dbg !37
  %218 = add i32 %216, %212, !dbg !37
  %219 = add i32 %216, %213, !dbg !37
  %220 = add i32 %216, %214, !dbg !37
  %221 = sext i32 %217 to i64, !dbg !38
  %222 = getelementptr float, ptr addrspace(1) %1, i64 %221, !dbg !38
  %223 = sext i32 %218 to i64, !dbg !38
  %224 = getelementptr float, ptr addrspace(1) %1, i64 %223, !dbg !38
  %225 = sext i32 %219 to i64, !dbg !38
  %226 = getelementptr float, ptr addrspace(1) %1, i64 %225, !dbg !38
  %227 = sext i32 %220 to i64, !dbg !38
  %228 = getelementptr float, ptr addrspace(1) %1, i64 %227, !dbg !38
  %229 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !39
  %230 = bitcast float %s.1.i to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %230, i1 true) #4, !dbg !39
  %231 = or disjoint i32 %12, 1, !dbg !39
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %231, !dbg !39
  %233 = bitcast float %s.1.i7 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 true) #4, !dbg !39
  %234 = or disjoint i32 %12, 2, !dbg !39
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %234, !dbg !39
  %236 = bitcast float %s.1.i26 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #4, !dbg !39
  %237 = or disjoint i32 %12, 3, !dbg !39
  %238 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %237, !dbg !39
  %239 = bitcast float %s.1.i45 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %240 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %181, !dbg !39
  %241 = load i32, ptr addrspace(3) %240, align 4, !dbg !39
  %242 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %190, !dbg !39
  %243 = load i32, ptr addrspace(3) %242, align 4, !dbg !39
  %244 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %186, !dbg !39
  %245 = load i32, ptr addrspace(3) %244, align 4, !dbg !39
  %246 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %182, !dbg !39
  %247 = load i32, ptr addrspace(3) %246, align 4, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %241, ptr addrspace(1) %222, i1 %196) #4, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %243, ptr addrspace(1) %224, i1 %193) #4, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %245, ptr addrspace(1) %226, i1 %189) #4, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %247, ptr addrspace(1) %228, i1 %185) #4, !dbg !39
  %248 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !40
  %249 = bitcast float %207 to i32, !dbg !41
  %250 = bitcast float %208 to i32, !dbg !41
  %251 = bitcast float %209 to i32, !dbg !41
  %252 = bitcast float %210 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %249, i32 %250, i32 %251, i32 %252, ptr addrspace(1) %248, i1 %19) #4, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4nkrwp6be2ogbx5ka2eic3cwlkfflhxjrq47e3utyyelfokvjwu.py", directory: "inductor_cache/4n")
!4 = !{ptr @triton_poi_fused_add_mul_pow_sqrt_tanh_33, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_pow_sqrt_tanh_33, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_pow_sqrt_tanh_33", linkageName: "triton_poi_fused_add_mul_pow_sqrt_tanh_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 32, column: 40, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 53, scope: !7)
!21 = !DILocation(line: 32, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 18, scope: !7)
!23 = !DILocation(line: 34, column: 18, scope: !7)
!24 = !DILocation(line: 36, column: 18, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 39, column: 18, scope: !7)
!27 = !DILocation(line: 40, column: 26, scope: !7)
!28 = !{i32 21046}
!29 = !DILocation(line: 31, column: 19, scope: !7)
!30 = !DILocation(line: 30, column: 19, scope: !7)
!31 = !DILocation(line: 42, column: 19, scope: !7)
!32 = !DILocation(line: 44, column: 19, scope: !7)
!33 = !DILocation(line: 45, column: 20, scope: !7)
!34 = !DILocation(line: 46, column: 32, scope: !7)
!35 = !DILocation(line: 46, column: 43, scope: !7)
!36 = !DILocation(line: 46, column: 30, scope: !7)
!37 = !DILocation(line: 46, column: 37, scope: !7)
!38 = !DILocation(line: 46, column: 25, scope: !7)
!39 = !DILocation(line: 46, column: 54, scope: !7)
!40 = !DILocation(line: 47, column: 25, scope: !7)
!41 = !DILocation(line: 47, column: 47, scope: !7)
!42 = !DILocation(line: 47, column: 4, scope: !7)
