; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py\00"
@assertMessage_0 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp4 < 1024\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_embedding_mul_pow_sub_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !11 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !12
  %9 = shl i32 %8, 9, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 2, !dbg !14
  %12 = and i32 %11, 508, !dbg !14
  %13 = or disjoint i32 %12, 2, !dbg !14
  %14 = or disjoint i32 %9, %12, !dbg !15
  %15 = or disjoint i32 %9, %13, !dbg !15
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !16
  %17 = icmp slt i32 %16, 64, !dbg !17
  %.frozen = freeze i32 %14, !dbg !18
  %18 = sdiv i32 %.frozen, 256, !dbg !18
  %19 = mul i32 %18, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %19, !dbg !19
  %20 = sext i32 %14 to i64, !dbg !20
  %21 = getelementptr i64, ptr addrspace(1) %0, i64 %20, !dbg !20
  %22 = sext i32 %15 to i64, !dbg !20
  %23 = getelementptr i64, ptr addrspace(1) %0, i64 %22, !dbg !20
  %24 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %21, i1 true) #4, !dbg !21
  %25 = extractvalue { i64, i64 } %24, 0, !dbg !21
  %26 = extractvalue { i64, i64 } %24, 1, !dbg !21
  %27 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %23, i1 true) #4, !dbg !21
  %28 = extractvalue { i64, i64 } %27, 0, !dbg !21
  %29 = extractvalue { i64, i64 } %27, 1, !dbg !21
  %30 = shl i32 %16, 8, !dbg !22
  %31 = add i32 %.decomposed, %30, !dbg !23
  %32 = shl i32 %18, 14, !dbg !24
  %33 = add i32 %31, %32, !dbg !25
  %34 = sext i32 %33 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !26
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %17) #4, !dbg !27
  %37 = sext i32 %16 to i64, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !28
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %17) #4, !dbg !29
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %17) #4, !dbg !29
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %17) #4, !dbg !29
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %17) #4, !dbg !29
  %43 = insertelement <4 x i64> poison, i64 %25, i64 0, !dbg !30
  %44 = insertelement <4 x i64> %43, i64 %26, i64 1, !dbg !30
  %45 = insertelement <4 x i64> %44, i64 %28, i64 2, !dbg !30
  %46 = insertelement <4 x i64> %45, i64 %29, i64 3, !dbg !30
  %47 = lshr <4 x i64> %46, splat (i64 53), !dbg !30
  %48 = and <4 x i64> %47, splat (i64 1024), !dbg !30
  %49 = add <4 x i64> %48, %46, !dbg !30
  %50 = tail call i64 @llvm.vector.reduce.or.v4i64(<4 x i64> %49), !dbg !31
  %.not = icmp ult i64 %50, 1024, !dbg !31
  br i1 %.not, label %52, label %51, !dbg !31

51:                                               ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 39, ptr nonnull @assertFunc_0, i64 1), !dbg !31
  unreachable, !dbg !31

52:                                               ; preds = %7
  %53 = bitcast i32 %42 to float, !dbg !29
  %54 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !27
  %55 = bitcast i32 %54 to float, !dbg !27
  %56 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !27
  %57 = bitcast i32 %56 to float, !dbg !27
  %58 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !27
  %59 = bitcast i32 %58 to float, !dbg !27
  %60 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !27
  %61 = bitcast i32 %60 to float, !dbg !27
  %62 = and i32 %10, 127, !dbg !14
  %63 = or disjoint i32 %62, 384, !dbg !14
  %64 = or disjoint i32 %9, %63, !dbg !15
  %65 = or disjoint i32 %62, 256, !dbg !14
  %66 = or disjoint i32 %9, %65, !dbg !15
  %67 = or disjoint i32 %62, 128, !dbg !14
  %68 = or disjoint i32 %9, %67, !dbg !15
  %69 = or disjoint i32 %9, %62, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %70 = shl i32 %16, 10, !dbg !32
  %71 = sext i32 %70 to i64, !dbg !33
  %72 = extractelement <4 x i64> %49, i64 3, !dbg !33
  %73 = or disjoint i64 %72, %71, !dbg !33
  %74 = extractelement <4 x i64> %49, i64 0, !dbg !34
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !34
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %71, !dbg !34
  %77 = extractelement <4 x i64> %49, i64 1, !dbg !34
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !34
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %71, !dbg !34
  %80 = extractelement <4 x i64> %49, i64 2, !dbg !34
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !34
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %71, !dbg !34
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !34
  %84 = ptrtoint ptr addrspace(1) %76 to i64, !dbg !35
  %85 = ptrtoint ptr addrspace(1) %79 to i64, !dbg !35
  %86 = ptrtoint ptr addrspace(1) %82 to i64, !dbg !35
  %87 = ptrtoint ptr addrspace(1) %83 to i64, !dbg !35
  %88 = shl nuw nsw i32 %12, 1, !dbg !35
  %89 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %88, !dbg !35
  %90 = insertelement <1 x i64> poison, i64 %84, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %89, <1 x i64> %90, i1 true) #4, !dbg !35
  %91 = or disjoint i32 %88, 2, !dbg !35
  %92 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %91, !dbg !35
  %93 = insertelement <1 x i64> poison, i64 %85, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %92, <1 x i64> %93, i1 true) #4, !dbg !35
  %94 = shl nuw nsw i32 %13, 1, !dbg !35
  %95 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %94, !dbg !35
  %96 = insertelement <1 x i64> poison, i64 %86, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %95, <1 x i64> %96, i1 true) #4, !dbg !35
  %97 = or disjoint i32 %88, 6, !dbg !35
  %98 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %97, !dbg !35
  %99 = insertelement <1 x i64> poison, i64 %87, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %98, <1 x i64> %99, i1 true) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %100 = shl nuw nsw i32 %62, 1, !dbg !35
  %101 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %100, !dbg !35
  %102 = load i64, ptr addrspace(3) %101, align 16, !dbg !35
  %103 = shl nuw nsw i32 %67, 1, !dbg !35
  %104 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %103, !dbg !35
  %105 = load i64, ptr addrspace(3) %104, align 16, !dbg !35
  %106 = shl nuw nsw i32 %65, 1, !dbg !35
  %107 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %106, !dbg !35
  %108 = load i64, ptr addrspace(3) %107, align 16, !dbg !35
  %109 = shl nuw nsw i32 %63, 1, !dbg !35
  %110 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %109, !dbg !35
  %111 = load i64, ptr addrspace(3) %110, align 16, !dbg !35
  %112 = inttoptr i64 %102 to ptr addrspace(1), !dbg !35
  %113 = inttoptr i64 %105 to ptr addrspace(1), !dbg !35
  %114 = inttoptr i64 %108 to ptr addrspace(1), !dbg !35
  %115 = inttoptr i64 %111 to ptr addrspace(1), !dbg !35
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %17) #4, !dbg !35
  %117 = bitcast i32 %116 to float, !dbg !35
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %17) #4, !dbg !35
  %119 = bitcast i32 %118 to float, !dbg !35
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %17) #4, !dbg !35
  %121 = bitcast i32 %120 to float, !dbg !35
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %17) #4, !dbg !35
  %123 = bitcast i32 %122 to float, !dbg !35
  %124 = fadd float %61, %53, !dbg !36
  %125 = fadd float %59, %53, !dbg !36
  %126 = fadd float %57, %53, !dbg !36
  %127 = fadd float %55, %53, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %88, !dbg !36
  %129 = bitcast float %124 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #4, !dbg !36
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %91, !dbg !36
  %131 = bitcast float %125 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #4, !dbg !36
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %94, !dbg !36
  %133 = bitcast float %126 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #4, !dbg !36
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %97, !dbg !36
  %135 = bitcast float %127 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %100, !dbg !36
  %137 = load float, ptr addrspace(3) %136, align 8, !dbg !36
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %103, !dbg !36
  %139 = load float, ptr addrspace(3) %138, align 8, !dbg !36
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %106, !dbg !36
  %141 = load float, ptr addrspace(3) %140, align 8, !dbg !36
  %142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %109, !dbg !36
  %143 = load float, ptr addrspace(3) %142, align 8, !dbg !36
  %144 = fsub float %117, %137, !dbg !37
  %145 = fsub float %119, %139, !dbg !37
  %146 = fsub float %121, %141, !dbg !37
  %147 = fsub float %123, %143, !dbg !37
  %148 = fmul float %144, 2.000000e+00, !dbg !38
  %149 = fmul float %145, 2.000000e+00, !dbg !38
  %150 = fmul float %146, 2.000000e+00, !dbg !38
  %151 = fmul float %147, 2.000000e+00, !dbg !38
  %152 = shl i32 %69, 6, !dbg !39
  %153 = shl i32 %68, 6, !dbg !39
  %154 = shl i32 %66, 6, !dbg !39
  %155 = shl i32 %64, 6, !dbg !39
  %156 = add i32 %152, %16, !dbg !40
  %157 = add i32 %153, %16, !dbg !40
  %158 = add i32 %154, %16, !dbg !40
  %159 = add i32 %155, %16, !dbg !40
  %160 = sext i32 %156 to i64, !dbg !41
  %161 = getelementptr float, ptr addrspace(1) %4, i64 %160, !dbg !41
  %162 = sext i32 %157 to i64, !dbg !41
  %163 = getelementptr float, ptr addrspace(1) %4, i64 %162, !dbg !41
  %164 = sext i32 %158 to i64, !dbg !41
  %165 = getelementptr float, ptr addrspace(1) %4, i64 %164, !dbg !41
  %166 = sext i32 %159 to i64, !dbg !41
  %167 = getelementptr float, ptr addrspace(1) %4, i64 %166, !dbg !41
  %168 = bitcast float %148 to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %168, ptr addrspace(1) %161, i1 %17) #4, !dbg !42
  %169 = bitcast float %149 to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %169, ptr addrspace(1) %163, i1 %17) #4, !dbg !42
  %170 = bitcast float %150 to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %170, ptr addrspace(1) %165, i1 %17) #4, !dbg !42
  %171 = bitcast float %151 to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %171, ptr addrspace(1) %167, i1 %17) #4, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.or.v4i64(<4 x i64>) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py", directory: "inductor_cache/bh")
!4 = !{ptr @triton_poi_fused_embedding_mul_pow_sub_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_embedding_mul_pow_sub_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_embedding_mul_pow_sub_12", linkageName: "triton_poi_fused_embedding_mul_pow_sub_12", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 22, column: 28, scope: !11)
!13 = !DILocation(line: 22, column: 33, scope: !11)
!14 = !DILocation(line: 23, column: 44, scope: !11)
!15 = !DILocation(line: 23, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 28, scope: !11)
!17 = !DILocation(line: 27, column: 21, scope: !11)
!18 = !DILocation(line: 31, column: 19, scope: !11)
!19 = !DILocation(line: 30, column: 19, scope: !11)
!20 = !DILocation(line: 32, column: 30, scope: !11)
!21 = !DILocation(line: 32, column: 35, scope: !11)
!22 = !DILocation(line: 33, column: 39, scope: !11)
!23 = !DILocation(line: 33, column: 35, scope: !11)
!24 = !DILocation(line: 33, column: 50, scope: !11)
!25 = !DILocation(line: 33, column: 44, scope: !11)
!26 = !DILocation(line: 33, column: 30, scope: !11)
!27 = !DILocation(line: 33, column: 55, scope: !11)
!28 = !DILocation(line: 34, column: 30, scope: !11)
!29 = !DILocation(line: 34, column: 35, scope: !11)
!30 = !DILocation(line: 38, column: 32, scope: !11)
!31 = !DILocation(line: 39, column: 50, scope: !11)
!32 = !DILocation(line: 40, column: 42, scope: !11)
!33 = !DILocation(line: 40, column: 37, scope: !11)
!34 = !DILocation(line: 40, column: 30, scope: !11)
!35 = !DILocation(line: 40, column: 47, scope: !11)
!36 = !DILocation(line: 41, column: 18, scope: !11)
!37 = !DILocation(line: 42, column: 19, scope: !11)
!38 = !DILocation(line: 44, column: 20, scope: !11)
!39 = !DILocation(line: 45, column: 33, scope: !11)
!40 = !DILocation(line: 45, column: 30, scope: !11)
!41 = !DILocation(line: 45, column: 25, scope: !11)
!42 = !DILocation(line: 45, column: 45, scope: !11)
!43 = !DILocation(line: 45, column: 4, scope: !11)
