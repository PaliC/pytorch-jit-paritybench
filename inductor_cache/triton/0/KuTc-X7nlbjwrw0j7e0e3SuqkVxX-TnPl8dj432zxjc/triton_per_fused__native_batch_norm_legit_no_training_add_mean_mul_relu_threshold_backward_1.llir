; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_mean_mul_relu_threshold_backward_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %14 = icmp slt i32 %13, 16, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = srem i32 %13, 4, !dbg !13
  %18 = shl i32 %13, 4, !dbg !14
  %19 = or disjoint i32 %18, %16, !dbg !15
  %20 = sext i32 %19 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !16
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %14, i32 0, i1 %14) #5, !dbg !17
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %14, i32 0, i1 %14) #5, !dbg !17
  %24 = sext i32 %17 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %14) #5, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %14) #5, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %14) #5, !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %14) #5, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %14) #5, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %14) #5, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %14) #5, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %14) #5, !dbg !25
  %39 = sext i32 %13 to i64, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %6, i64 %39, !dbg !26
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %14) #5, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %7, i64 %20, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %14, i32 0, i1 %14) #5, !dbg !29
  %44 = fadd float %30, 0x3EE4F8B580000000, !dbg !30
  %45 = fadd float %32, 0x3EE4F8B580000000, !dbg !30
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i = icmp eq i32 %46, 0, !dbg !31
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i = icmp eq i32 %47, 0, !dbg !31
  br i1 %.not.i, label %53, label %48, !dbg !31

48:                                               ; preds = %12
  br i1 %.not1.i, label %51, label %49, !dbg !31

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

53:                                               ; preds = %12
  br i1 %.not1.i, label %56, label %54, !dbg !31

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %49, %51, %54, %56
  %.0.i = phi float [ %50, %49 ], [ %52, %51 ], [ %55, %54 ], [ %57, %56 ], !dbg !31
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i1 = icmp eq i32 %58, 0, !dbg !31
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i4 = icmp eq i32 %59, 0, !dbg !31
  br i1 %.not.i1, label %65, label %60, !dbg !31

60:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %63, label %61, !dbg !31

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #5, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #5, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

65:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %68, label %66, !dbg !31

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #5, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #5, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %61, %63, %66, %68
  %.0.i3 = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !31
  %70 = bitcast i32 %23 to float, !dbg !17
  %71 = bitcast i32 %27 to float, !dbg !19
  %72 = fsub float %70, %71, !dbg !32
  %73 = bitcast i32 %22 to float, !dbg !17
  %74 = bitcast i32 %26 to float, !dbg !19
  %75 = fsub float %73, %74, !dbg !32
  %76 = bitcast i32 %43 to float, !dbg !29
  %77 = bitcast i32 %41 to float, !dbg !27
  %78 = bitcast i32 %38 to float, !dbg !25
  %79 = bitcast i32 %37 to float, !dbg !25
  %80 = bitcast i32 %35 to float, !dbg !23
  %81 = bitcast i32 %34 to float, !dbg !23
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !33
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !33
  %84 = fmul float %75, %82, !dbg !34
  %85 = fmul float %72, %83, !dbg !34
  %86 = fmul float %84, %81, !dbg !35
  %87 = fmul float %85, %80, !dbg !35
  %88 = fadd float %86, %79, !dbg !36
  %89 = fadd float %87, %78, !dbg !36
  %90 = fsub float 0.000000e+00, %77, !dbg !37
  %91 = fmul float %90, 0x3FF7154760000000, !dbg !41
  %92 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %91) #5, !dbg !41
  %93 = fadd float %92, 1.000000e+00, !dbg !42
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %93) #5, !dbg !43
  %95 = fmul float %94, %89, !dbg !44
  %96 = fadd float %95, %76, !dbg !45
  %97 = fcmp olt float %96, 0.000000e+00, !dbg !46
  %98 = select i1 %97, float 0.000000e+00, float %96, !dbg !50
  %99 = fcmp ole float %98, 0.000000e+00, !dbg !51
  %100 = select i1 %14, float %88, float 0.000000e+00, !dbg !52
  %101 = bitcast float %100 to i32, !dbg !53
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 8, i32 31), !dbg !53
  %103 = bitcast i32 %102 to float, !dbg !53
  %104 = fadd float %100, %103, !dbg !55
  %105 = bitcast float %104 to i32, !dbg !53
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 4, i32 31), !dbg !53
  %107 = bitcast i32 %106 to float, !dbg !53
  %108 = fadd float %104, %107, !dbg !55
  %109 = bitcast float %108 to i32, !dbg !53
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 2, i32 31), !dbg !53
  %111 = bitcast i32 %110 to float, !dbg !53
  %112 = fadd float %108, %111, !dbg !55
  %113 = bitcast float %112 to i32, !dbg !53
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 1, i32 31), !dbg !53
  %115 = bitcast i32 %114 to float, !dbg !53
  %116 = fadd float %112, %115, !dbg !55
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float 1.600000e+01) #5, !dbg !57
  %118 = getelementptr float, ptr addrspace(1) %8, i64 %20, !dbg !58
  %119 = and i32 %15, 48, !dbg !59
  %120 = icmp eq i32 %119, 0, !dbg !59
  %121 = bitcast float %98 to i32, !dbg !59
  %122 = and i1 %120, %14, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %121, ptr addrspace(1) %118, i1 %122) #5, !dbg !59
  %123 = getelementptr i1, ptr addrspace(1) %9, i64 %20, !dbg !60
  %124 = zext i1 %99 to i8, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %124, ptr addrspace(1) %123, i1 %122) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !63
  %urem = and i32 %15, 63, !dbg !64
  %126 = icmp eq i32 %urem, 0, !dbg !64
  %127 = bitcast float %117 to i32, !dbg !64
  %128 = and i1 %126, %14, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %127, ptr addrspace(1) %125, i1 %128) #5, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgq5zvcvmyklbkxqrz7u4ii26xkwo52tlk7e32h3uqtj7hjgzcto.py", directory: "inductor_cache/gq")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_mul_relu_threshold_backward_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_mul_relu_threshold_backward_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_mul_relu_threshold_backward_1", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_mul_relu_threshold_backward_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 38, scope: !7)
!15 = !DILocation(line: 32, column: 35, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 36, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 44, scope: !7)
!30 = !DILocation(line: 41, column: 18, scope: !7)
!31 = !DILocation(line: 42, column: 26, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 44, column: 18, scope: !7)
!34 = !DILocation(line: 47, column: 19, scope: !7)
!35 = !DILocation(line: 48, column: 20, scope: !7)
!36 = !DILocation(line: 49, column: 20, scope: !7)
!37 = !DILocation(line: 47, column: 30, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!40 = !DILocation(line: 50, column: 23, scope: !7)
!41 = !DILocation(line: 47, column: 29, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 47, column: 20, scope: !38, inlinedAt: !40)
!43 = !DILocation(line: 47, column: 16, scope: !38, inlinedAt: !40)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 54, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 56, column: 21, scope: !7)
!52 = !DILocation(line: 58, column: 35, scope: !7)
!53 = !DILocation(line: 267, column: 36, scope: !38, inlinedAt: !54)
!54 = !DILocation(line: 59, column: 26, scope: !7)
!55 = !DILocation(line: 256, column: 15, scope: !56, inlinedAt: !54)
!56 = distinct !DILexicalBlockFile(scope: !38, file: !39, discriminator: 0)
!57 = !DILocation(line: 61, column: 20, scope: !7)
!58 = !DILocation(line: 62, column: 25, scope: !7)
!59 = !DILocation(line: 62, column: 45, scope: !7)
!60 = !DILocation(line: 63, column: 25, scope: !7)
!61 = !DILocation(line: 63, column: 45, scope: !7)
!62 = !DILocation(line: 64, column: 4, scope: !7)
!63 = !DILocation(line: 65, column: 28, scope: !7)
!64 = !DILocation(line: 65, column: 40, scope: !7)
!65 = !DILocation(line: 65, column: 4, scope: !7)
