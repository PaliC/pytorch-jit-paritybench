; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_native_group_norm_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 24, !dbg !12
  %13 = shl i32 %11, 2, !dbg !12
  %14 = and i32 %13, 28, !dbg !12
  %15 = and i32 %11, 31, !dbg !12
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = or disjoint i32 %10, %15, !dbg !13
  %18 = icmp slt i32 %16, 192, !dbg !14
  %19 = icmp slt i32 %17, 192, !dbg !14
  %20 = lshr i32 %11, 5, !dbg !15
  %21 = lshr i32 %11, 3, !dbg !15
  %22 = and i32 %21, 31, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %23 = sdiv i32 %.frozen, 48, !dbg !16
  %24 = mul i32 %23, 48, !dbg !17
  %.decomposed = sub i32 %.frozen, %24, !dbg !17
  %25 = mul nuw nsw i32 %22, 48, !dbg !18
  %26 = add nsw i32 %.decomposed, %25, !dbg !19
  %27 = mul i32 %23, 3072, !dbg !20
  %28 = add i32 %26, %27, !dbg !21
  %29 = add nsw i32 %26, 1536, !dbg !19
  %30 = add i32 %29, %27, !dbg !21
  %31 = sext i32 %28 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = sext i32 %30 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !22
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !23
  %40 = bitcast i32 %36 to float, !dbg !23
  %41 = bitcast i32 %37 to float, !dbg !23
  %42 = bitcast i32 %38 to float, !dbg !23
  %43 = bitcast i32 %39 to float, !dbg !23
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !23
  %49 = bitcast i32 %45 to float, !dbg !23
  %50 = bitcast i32 %46 to float, !dbg !23
  %51 = bitcast i32 %47 to float, !dbg !23
  %52 = bitcast i32 %48 to float, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !24
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !24
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !25
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !25
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !25
  %60 = bitcast i32 %56 to float, !dbg !25
  %61 = bitcast i32 %57 to float, !dbg !25
  %62 = bitcast i32 %58 to float, !dbg !25
  %63 = bitcast i32 %59 to float, !dbg !25
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !25
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !25
  %69 = bitcast i32 %65 to float, !dbg !25
  %70 = bitcast i32 %66 to float, !dbg !25
  %71 = bitcast i32 %67 to float, !dbg !25
  %72 = bitcast i32 %68 to float, !dbg !25
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !26
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !26
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !27
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !27
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !27
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !27
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !27
  %80 = bitcast i32 %76 to float, !dbg !27
  %81 = bitcast i32 %77 to float, !dbg !27
  %82 = bitcast i32 %78 to float, !dbg !27
  %83 = bitcast i32 %79 to float, !dbg !27
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %74, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !27
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !27
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !27
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !27
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !27
  %89 = bitcast i32 %85 to float, !dbg !27
  %90 = bitcast i32 %86 to float, !dbg !27
  %91 = bitcast i32 %87 to float, !dbg !27
  %92 = bitcast i32 %88 to float, !dbg !27
  %93 = select i1 %18, float %40, float 0.000000e+00, !dbg !28
  %94 = select i1 %18, float %41, float 0.000000e+00, !dbg !28
  %95 = select i1 %18, float %42, float 0.000000e+00, !dbg !28
  %96 = select i1 %18, float %43, float 0.000000e+00, !dbg !28
  %97 = select i1 %18, float %49, float 0.000000e+00, !dbg !28
  %98 = select i1 %18, float %50, float 0.000000e+00, !dbg !28
  %99 = select i1 %18, float %51, float 0.000000e+00, !dbg !28
  %100 = select i1 %18, float %52, float 0.000000e+00, !dbg !28
  %101 = select i1 %18, float %80, float 0.000000e+00, !dbg !29
  %102 = select i1 %18, float %81, float 0.000000e+00, !dbg !29
  %103 = select i1 %18, float %82, float 0.000000e+00, !dbg !29
  %104 = select i1 %18, float %83, float 0.000000e+00, !dbg !29
  %105 = select i1 %18, float %89, float 0.000000e+00, !dbg !29
  %106 = select i1 %18, float %90, float 0.000000e+00, !dbg !29
  %107 = select i1 %18, float %91, float 0.000000e+00, !dbg !29
  %108 = select i1 %18, float %92, float 0.000000e+00, !dbg !29
  %109 = fsub float %97, %93, !dbg !30
  %110 = fadd float %101, %105, !dbg !35
  %111 = fcmp oeq float %110, 0.000000e+00, !dbg !36
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %110) #3, !dbg !37
  %113 = select i1 %111, float 0.000000e+00, float %112, !dbg !38
  %114 = fmul float %109, %113, !dbg !39
  %115 = fadd float %93, %114, !dbg !40
  %116 = fadd float %60, %69, !dbg !41
  %117 = select i1 %18, float %116, float 0.000000e+00, !dbg !41
  %118 = fmul float %109, %109, !dbg !42
  %119 = fmul float %118, %101, !dbg !43
  %120 = fmul float %119, %113, !dbg !44
  %121 = fadd float %117, %120, !dbg !45
  %122 = fsub float %98, %94, !dbg !30
  %123 = fadd float %102, %106, !dbg !35
  %124 = fcmp oeq float %123, 0.000000e+00, !dbg !36
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %123) #3, !dbg !37
  %126 = select i1 %124, float 0.000000e+00, float %125, !dbg !38
  %127 = fmul float %122, %126, !dbg !39
  %128 = fadd float %94, %127, !dbg !40
  %129 = fadd float %61, %70, !dbg !41
  %130 = select i1 %18, float %129, float 0.000000e+00, !dbg !41
  %131 = fmul float %122, %122, !dbg !42
  %132 = fmul float %131, %102, !dbg !43
  %133 = fmul float %132, %126, !dbg !44
  %134 = fadd float %130, %133, !dbg !45
  %135 = fsub float %99, %95, !dbg !30
  %136 = fadd float %103, %107, !dbg !35
  %137 = fcmp oeq float %136, 0.000000e+00, !dbg !36
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %136) #3, !dbg !37
  %139 = select i1 %137, float 0.000000e+00, float %138, !dbg !38
  %140 = fmul float %135, %139, !dbg !39
  %141 = fadd float %95, %140, !dbg !40
  %142 = fadd float %62, %71, !dbg !41
  %143 = select i1 %18, float %142, float 0.000000e+00, !dbg !41
  %144 = fmul float %135, %135, !dbg !42
  %145 = fmul float %144, %103, !dbg !43
  %146 = fmul float %145, %139, !dbg !44
  %147 = fadd float %143, %146, !dbg !45
  %148 = fsub float %100, %96, !dbg !30
  %149 = fadd float %104, %108, !dbg !35
  %150 = fcmp oeq float %149, 0.000000e+00, !dbg !36
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float %149) #3, !dbg !37
  %152 = select i1 %150, float 0.000000e+00, float %151, !dbg !38
  %153 = fmul float %148, %152, !dbg !39
  %154 = fadd float %96, %153, !dbg !40
  %155 = fadd float %63, %72, !dbg !41
  %156 = select i1 %18, float %155, float 0.000000e+00, !dbg !41
  %157 = fmul float %148, %148, !dbg !42
  %158 = fmul float %157, %104, !dbg !43
  %159 = fmul float %158, %152, !dbg !44
  %160 = fadd float %156, %159, !dbg !45
  %161 = bitcast float %115 to i32, !dbg !46
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 16, i32 31), !dbg !46
  %163 = bitcast i32 %162 to float, !dbg !46
  %164 = bitcast float %121 to i32, !dbg !46
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 16, i32 31), !dbg !46
  %166 = bitcast i32 %165 to float, !dbg !46
  %167 = bitcast float %110 to i32, !dbg !46
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 16, i32 31), !dbg !46
  %169 = bitcast i32 %168 to float, !dbg !46
  %170 = fsub float %163, %115, !dbg !30
  %171 = fadd float %110, %169, !dbg !35
  %172 = fcmp oeq float %171, 0.000000e+00, !dbg !36
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float %171) #3, !dbg !37
  %174 = select i1 %172, float 0.000000e+00, float %173, !dbg !38
  %175 = fmul float %170, %174, !dbg !39
  %176 = fadd float %115, %175, !dbg !40
  %177 = fadd float %121, %166, !dbg !41
  %178 = fmul float %170, %170, !dbg !42
  %179 = fmul float %110, %178, !dbg !43
  %180 = fmul float %179, %174, !dbg !44
  %181 = fadd float %177, %180, !dbg !45
  %182 = bitcast float %176 to i32, !dbg !46
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 8, i32 31), !dbg !46
  %184 = bitcast i32 %183 to float, !dbg !46
  %185 = bitcast float %181 to i32, !dbg !46
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 8, i32 31), !dbg !46
  %187 = bitcast i32 %186 to float, !dbg !46
  %188 = bitcast float %171 to i32, !dbg !46
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 8, i32 31), !dbg !46
  %190 = bitcast i32 %189 to float, !dbg !46
  %191 = fsub float %184, %176, !dbg !30
  %192 = fadd float %171, %190, !dbg !35
  %193 = fcmp oeq float %192, 0.000000e+00, !dbg !36
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %190, float %192) #3, !dbg !37
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !38
  %196 = fmul float %191, %195, !dbg !39
  %197 = fadd float %176, %196, !dbg !40
  %198 = fadd float %181, %187, !dbg !41
  %199 = fmul float %191, %191, !dbg !42
  %200 = fmul float %171, %199, !dbg !43
  %201 = fmul float %195, %200, !dbg !44
  %202 = fadd float %198, %201, !dbg !45
  %203 = bitcast float %128 to i32, !dbg !46
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 16, i32 31), !dbg !46
  %205 = bitcast i32 %204 to float, !dbg !46
  %206 = bitcast float %134 to i32, !dbg !46
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 16, i32 31), !dbg !46
  %208 = bitcast i32 %207 to float, !dbg !46
  %209 = bitcast float %123 to i32, !dbg !46
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 16, i32 31), !dbg !46
  %211 = bitcast i32 %210 to float, !dbg !46
  %212 = fsub float %205, %128, !dbg !30
  %213 = fadd float %123, %211, !dbg !35
  %214 = fcmp oeq float %213, 0.000000e+00, !dbg !36
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float %213) #3, !dbg !37
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !38
  %217 = fmul float %212, %216, !dbg !39
  %218 = fadd float %128, %217, !dbg !40
  %219 = fadd float %134, %208, !dbg !41
  %220 = fmul float %212, %212, !dbg !42
  %221 = fmul float %123, %220, !dbg !43
  %222 = fmul float %221, %216, !dbg !44
  %223 = fadd float %219, %222, !dbg !45
  %224 = bitcast float %218 to i32, !dbg !46
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 8, i32 31), !dbg !46
  %226 = bitcast i32 %225 to float, !dbg !46
  %227 = bitcast float %223 to i32, !dbg !46
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 8, i32 31), !dbg !46
  %229 = bitcast i32 %228 to float, !dbg !46
  %230 = bitcast float %213 to i32, !dbg !46
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 8, i32 31), !dbg !46
  %232 = bitcast i32 %231 to float, !dbg !46
  %233 = fsub float %226, %218, !dbg !30
  %234 = fadd float %213, %232, !dbg !35
  %235 = fcmp oeq float %234, 0.000000e+00, !dbg !36
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %232, float %234) #3, !dbg !37
  %237 = select i1 %235, float 0.000000e+00, float %236, !dbg !38
  %238 = fmul float %233, %237, !dbg !39
  %239 = fadd float %218, %238, !dbg !40
  %240 = fadd float %223, %229, !dbg !41
  %241 = fmul float %233, %233, !dbg !42
  %242 = fmul float %213, %241, !dbg !43
  %243 = fmul float %237, %242, !dbg !44
  %244 = fadd float %240, %243, !dbg !45
  %245 = bitcast float %141 to i32, !dbg !46
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 16, i32 31), !dbg !46
  %247 = bitcast i32 %246 to float, !dbg !46
  %248 = bitcast float %147 to i32, !dbg !46
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 16, i32 31), !dbg !46
  %250 = bitcast i32 %249 to float, !dbg !46
  %251 = bitcast float %136 to i32, !dbg !46
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 16, i32 31), !dbg !46
  %253 = bitcast i32 %252 to float, !dbg !46
  %254 = fsub float %247, %141, !dbg !30
  %255 = fadd float %136, %253, !dbg !35
  %256 = fcmp oeq float %255, 0.000000e+00, !dbg !36
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %253, float %255) #3, !dbg !37
  %258 = select i1 %256, float 0.000000e+00, float %257, !dbg !38
  %259 = fmul float %254, %258, !dbg !39
  %260 = fadd float %141, %259, !dbg !40
  %261 = fadd float %147, %250, !dbg !41
  %262 = fmul float %254, %254, !dbg !42
  %263 = fmul float %136, %262, !dbg !43
  %264 = fmul float %263, %258, !dbg !44
  %265 = fadd float %261, %264, !dbg !45
  %266 = bitcast float %260 to i32, !dbg !46
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 8, i32 31), !dbg !46
  %268 = bitcast i32 %267 to float, !dbg !46
  %269 = bitcast float %265 to i32, !dbg !46
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 8, i32 31), !dbg !46
  %271 = bitcast i32 %270 to float, !dbg !46
  %272 = bitcast float %255 to i32, !dbg !46
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 8, i32 31), !dbg !46
  %274 = bitcast i32 %273 to float, !dbg !46
  %275 = fsub float %268, %260, !dbg !30
  %276 = fadd float %255, %274, !dbg !35
  %277 = fcmp oeq float %276, 0.000000e+00, !dbg !36
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %274, float %276) #3, !dbg !37
  %279 = select i1 %277, float 0.000000e+00, float %278, !dbg !38
  %280 = fmul float %275, %279, !dbg !39
  %281 = fadd float %260, %280, !dbg !40
  %282 = fadd float %265, %271, !dbg !41
  %283 = fmul float %275, %275, !dbg !42
  %284 = fmul float %255, %283, !dbg !43
  %285 = fmul float %279, %284, !dbg !44
  %286 = fadd float %282, %285, !dbg !45
  %287 = bitcast float %154 to i32, !dbg !46
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 16, i32 31), !dbg !46
  %289 = bitcast i32 %288 to float, !dbg !46
  %290 = bitcast float %160 to i32, !dbg !46
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 16, i32 31), !dbg !46
  %292 = bitcast i32 %291 to float, !dbg !46
  %293 = bitcast float %149 to i32, !dbg !46
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 16, i32 31), !dbg !46
  %295 = bitcast i32 %294 to float, !dbg !46
  %296 = fsub float %289, %154, !dbg !30
  %297 = fadd float %149, %295, !dbg !35
  %298 = fcmp oeq float %297, 0.000000e+00, !dbg !36
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %295, float %297) #3, !dbg !37
  %300 = select i1 %298, float 0.000000e+00, float %299, !dbg !38
  %301 = fmul float %296, %300, !dbg !39
  %302 = fadd float %154, %301, !dbg !40
  %303 = fadd float %160, %292, !dbg !41
  %304 = fmul float %296, %296, !dbg !42
  %305 = fmul float %149, %304, !dbg !43
  %306 = fmul float %305, %300, !dbg !44
  %307 = fadd float %303, %306, !dbg !45
  %308 = bitcast float %302 to i32, !dbg !46
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 8, i32 31), !dbg !46
  %310 = bitcast i32 %309 to float, !dbg !46
  %311 = bitcast float %307 to i32, !dbg !46
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 8, i32 31), !dbg !46
  %313 = bitcast i32 %312 to float, !dbg !46
  %314 = bitcast float %297 to i32, !dbg !46
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 8, i32 31), !dbg !46
  %316 = bitcast i32 %315 to float, !dbg !46
  %317 = fsub float %310, %302, !dbg !30
  %318 = fadd float %297, %316, !dbg !35
  %319 = fcmp oeq float %318, 0.000000e+00, !dbg !36
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %316, float %318) #3, !dbg !37
  %321 = select i1 %319, float 0.000000e+00, float %320, !dbg !38
  %322 = fmul float %317, %321, !dbg !39
  %323 = fadd float %302, %322, !dbg !40
  %324 = fadd float %307, %313, !dbg !41
  %325 = fmul float %317, %317, !dbg !42
  %326 = fmul float %297, %325, !dbg !43
  %327 = fmul float %321, %326, !dbg !44
  %328 = fadd float %324, %327, !dbg !45
  %329 = icmp eq i32 %12, 0, !dbg !46
  %330 = and i32 %20, 7, !dbg !46
  %331 = shl nuw nsw i32 %14, 3, !dbg !46
  %332 = or disjoint i32 %331, %330, !dbg !46
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i32 %332, !dbg !46
  %334 = bitcast float %197 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %334, i1 %329) #3, !dbg !46
  %335 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %332, !dbg !46
  %336 = bitcast float %202 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, <1 x i32> %336, i1 %329) #3, !dbg !46
  %337 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %332, !dbg !46
  %338 = bitcast float %192 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %338, i1 %329) #3, !dbg !46
  %339 = or disjoint i32 %331, 8, !dbg !46
  %340 = or disjoint i32 %339, %330, !dbg !46
  %341 = getelementptr float, ptr addrspace(3) @global_smem, i32 %340, !dbg !46
  %342 = bitcast float %239 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %341, <1 x i32> %342, i1 %329) #3, !dbg !46
  %343 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %340, !dbg !46
  %344 = bitcast float %244 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %343, <1 x i32> %344, i1 %329) #3, !dbg !46
  %345 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %340, !dbg !46
  %346 = bitcast float %234 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %346, i1 %329) #3, !dbg !46
  %347 = or disjoint i32 %331, 16, !dbg !46
  %348 = or disjoint i32 %347, %330, !dbg !46
  %349 = getelementptr float, ptr addrspace(3) @global_smem, i32 %348, !dbg !46
  %350 = bitcast float %281 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %349, <1 x i32> %350, i1 %329) #3, !dbg !46
  %351 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %348, !dbg !46
  %352 = bitcast float %286 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %351, <1 x i32> %352, i1 %329) #3, !dbg !46
  %353 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %348, !dbg !46
  %354 = bitcast float %276 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %353, <1 x i32> %354, i1 %329) #3, !dbg !46
  %355 = or disjoint i32 %331, 24, !dbg !46
  %356 = or disjoint i32 %355, %330, !dbg !46
  %357 = getelementptr float, ptr addrspace(3) @global_smem, i32 %356, !dbg !46
  %358 = bitcast float %323 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %357, <1 x i32> %358, i1 %329) #3, !dbg !46
  %359 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %356, !dbg !46
  %360 = bitcast float %328 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %359, <1 x i32> %360, i1 %329) #3, !dbg !46
  %361 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %356, !dbg !46
  %362 = bitcast float %318 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %361, <1 x i32> %362, i1 %329) #3, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %363 = icmp slt i32 %11, 256, !dbg !46
  %364 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !46
  %365 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %364, i1 %363) #3, !dbg !46
  %366 = bitcast i32 %365 to float, !dbg !46
  %367 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %11, !dbg !46
  %368 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %367, i1 %363) #3, !dbg !46
  %369 = bitcast i32 %368 to float, !dbg !46
  %370 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %11, !dbg !46
  %371 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %370, i1 %363) #3, !dbg !46
  %372 = bitcast i32 %371 to float, !dbg !46
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %365, i32 4, i32 31), !dbg !46
  %374 = bitcast i32 %373 to float, !dbg !46
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %368, i32 4, i32 31), !dbg !46
  %376 = bitcast i32 %375 to float, !dbg !46
  %377 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 4, i32 31), !dbg !46
  %378 = bitcast i32 %377 to float, !dbg !46
  %379 = fsub float %374, %366, !dbg !30
  %380 = fadd float %372, %378, !dbg !35
  %381 = fcmp oeq float %380, 0.000000e+00, !dbg !36
  %382 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %378, float %380) #3, !dbg !37
  %383 = select i1 %381, float 0.000000e+00, float %382, !dbg !38
  %384 = fmul float %379, %383, !dbg !39
  %385 = fadd float %384, %366, !dbg !40
  %386 = fadd float %369, %376, !dbg !41
  %387 = fmul float %379, %379, !dbg !42
  %388 = fmul float %387, %372, !dbg !43
  %389 = fmul float %388, %383, !dbg !44
  %390 = fadd float %386, %389, !dbg !45
  %391 = bitcast float %385 to i32, !dbg !46
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %391, i32 2, i32 31), !dbg !46
  %393 = bitcast i32 %392 to float, !dbg !46
  %394 = bitcast float %390 to i32, !dbg !46
  %395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %394, i32 2, i32 31), !dbg !46
  %396 = bitcast i32 %395 to float, !dbg !46
  %397 = bitcast float %380 to i32, !dbg !46
  %398 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %397, i32 2, i32 31), !dbg !46
  %399 = bitcast i32 %398 to float, !dbg !46
  %400 = fsub float %393, %385, !dbg !30
  %401 = fadd float %380, %399, !dbg !35
  %402 = fcmp oeq float %401, 0.000000e+00, !dbg !36
  %403 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %399, float %401) #3, !dbg !37
  %404 = select i1 %402, float 0.000000e+00, float %403, !dbg !38
  %405 = fmul float %400, %404, !dbg !39
  %406 = fadd float %385, %405, !dbg !40
  %407 = fadd float %390, %396, !dbg !41
  %408 = fmul float %400, %400, !dbg !42
  %409 = fmul float %380, %408, !dbg !43
  %410 = fmul float %404, %409, !dbg !44
  %411 = fadd float %407, %410, !dbg !45
  %412 = bitcast float %406 to i32, !dbg !46
  %413 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %412, i32 1, i32 31), !dbg !46
  %414 = bitcast i32 %413 to float, !dbg !46
  %415 = bitcast float %411 to i32, !dbg !46
  %416 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %415, i32 1, i32 31), !dbg !46
  %417 = bitcast i32 %416 to float, !dbg !46
  %418 = bitcast float %401 to i32, !dbg !46
  %419 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %418, i32 1, i32 31), !dbg !46
  %420 = bitcast i32 %419 to float, !dbg !46
  %421 = fsub float %414, %406, !dbg !30
  %422 = fadd float %401, %420, !dbg !35
  %423 = fcmp oeq float %422, 0.000000e+00, !dbg !36
  %424 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %420, float %422) #3, !dbg !37
  %425 = select i1 %423, float 0.000000e+00, float %424, !dbg !38
  %426 = fmul float %421, %425, !dbg !39
  %427 = fadd float %406, %426, !dbg !40
  %428 = fadd float %411, %417, !dbg !41
  %429 = fmul float %421, %421, !dbg !42
  %430 = fmul float %401, %429, !dbg !43
  %431 = fmul float %425, %430, !dbg !44
  %432 = fadd float %428, %431, !dbg !45
  %433 = and i32 %11, 7, !dbg !46
  %434 = icmp eq i32 %433, 0, !dbg !46
  %435 = and i1 %363, %434, !dbg !46
  %436 = bitcast float %427 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %364, <1 x i32> %436, i1 %435) #3, !dbg !46
  %437 = bitcast float %432 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %367, <1 x i32> %437, i1 %435) #3, !dbg !46
  %438 = bitcast float %422 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %370, <1 x i32> %438, i1 %435) #3, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %439 = getelementptr float, ptr addrspace(3) @global_smem, i32 %331, !dbg !46
  %440 = load i32, ptr addrspace(3) %439, align 16, !dbg !46
  %441 = getelementptr float, ptr addrspace(3) @global_smem, i32 %339, !dbg !46
  %442 = load i32, ptr addrspace(3) %441, align 16, !dbg !46
  %443 = getelementptr float, ptr addrspace(3) @global_smem, i32 %347, !dbg !46
  %444 = load i32, ptr addrspace(3) %443, align 16, !dbg !46
  %445 = getelementptr float, ptr addrspace(3) @global_smem, i32 %355, !dbg !46
  %446 = load i32, ptr addrspace(3) %445, align 16, !dbg !46
  %447 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %331, !dbg !46
  %448 = load i32, ptr addrspace(3) %447, align 16, !dbg !46
  %449 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %339, !dbg !46
  %450 = load i32, ptr addrspace(3) %449, align 16, !dbg !46
  %451 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %347, !dbg !46
  %452 = load i32, ptr addrspace(3) %451, align 16, !dbg !46
  %453 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %355, !dbg !46
  %454 = load i32, ptr addrspace(3) %453, align 16, !dbg !46
  %455 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %331, !dbg !46
  %456 = load i32, ptr addrspace(3) %455, align 16, !dbg !46
  %457 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %339, !dbg !46
  %458 = load i32, ptr addrspace(3) %457, align 16, !dbg !46
  %459 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %347, !dbg !46
  %460 = load i32, ptr addrspace(3) %459, align 16, !dbg !46
  %461 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %355, !dbg !46
  %462 = load i32, ptr addrspace(3) %461, align 16, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %463 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !47
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %463, i32 %440, i32 %442, i32 %444, i32 %446, i1 true) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %464 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !47
  %465 = load i32, ptr addrspace(3) %464, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %463, i32 %448, i32 %450, i32 %452, i32 %454, i1 true) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %466 = load i32, ptr addrspace(3) %464, align 4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %463, i32 %456, i32 %458, i32 %460, i32 %462, i1 true) #3, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %467 = load i32, ptr addrspace(3) %464, align 4, !dbg !49
  %468 = sext i32 %17 to i64, !dbg !50
  %469 = getelementptr float, ptr addrspace(1) %3, i64 %468, !dbg !50
  %470 = icmp eq i32 %330, 0, !dbg !51
  %471 = and i1 %470, %19, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %465, ptr addrspace(1) %469, i1 %471) #3, !dbg !51
  %472 = getelementptr float, ptr addrspace(1) %4, i64 %468, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %466, ptr addrspace(1) %472, i1 %471) #3, !dbg !53
  %473 = getelementptr float, ptr addrspace(1) %5, i64 %468, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %467, ptr addrspace(1) %473, i1 %471) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4ixtlfxbets2tw55dyul3t3vezk74w3mgpmmgdfkykt2ryuzbzu.py", directory: "inductor_cache/4i")
!4 = !{ptr @triton_per_fused_native_group_norm_21, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_21, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_21", linkageName: "triton_per_fused_native_group_norm_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 48, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 53, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 53, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 53, scope: !7)
!28 = !DILocation(line: 39, column: 33, scope: !7)
!29 = !DILocation(line: 41, column: 33, scope: !7)
!30 = !DILocation(line: 192, column: 21, scope: !31, inlinedAt: !34)
!31 = distinct !DILexicalBlockFile(scope: !33, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!34 = !DILocation(line: 42, column: 67, scope: !7)
!35 = !DILocation(line: 193, column: 28, scope: !31, inlinedAt: !34)
!36 = !DILocation(line: 194, column: 39, scope: !31, inlinedAt: !34)
!37 = !DILocation(line: 194, column: 60, scope: !31, inlinedAt: !34)
!38 = !DILocation(line: 194, column: 49, scope: !31, inlinedAt: !34)
!39 = !DILocation(line: 196, column: 25, scope: !31, inlinedAt: !34)
!40 = !DILocation(line: 196, column: 17, scope: !31, inlinedAt: !34)
!41 = !DILocation(line: 197, column: 15, scope: !31, inlinedAt: !34)
!42 = !DILocation(line: 197, column: 30, scope: !31, inlinedAt: !34)
!43 = !DILocation(line: 197, column: 38, scope: !31, inlinedAt: !34)
!44 = !DILocation(line: 197, column: 49, scope: !31, inlinedAt: !34)
!45 = !DILocation(line: 197, column: 22, scope: !31, inlinedAt: !34)
!46 = !DILocation(line: 204, column: 46, scope: !33, inlinedAt: !34)
!47 = !DILocation(line: 43, column: 18, scope: !7)
!48 = !DILocation(line: 44, column: 18, scope: !7)
!49 = !DILocation(line: 45, column: 18, scope: !7)
!50 = !DILocation(line: 46, column: 25, scope: !7)
!51 = !DILocation(line: 46, column: 37, scope: !7)
!52 = !DILocation(line: 47, column: 25, scope: !7)
!53 = !DILocation(line: 47, column: 37, scope: !7)
!54 = !DILocation(line: 48, column: 25, scope: !7)
!55 = !DILocation(line: 48, column: 37, scope: !7)
!56 = !DILocation(line: 48, column: 4, scope: !7)
