; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_div_mul_sub_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = and i32 %11, 127, !dbg !12
  %15 = or disjoint i32 %14, 128, !dbg !12
  %16 = or disjoint i32 %14, 256, !dbg !12
  %17 = or disjoint i32 %14, 384, !dbg !12
  %18 = or disjoint i32 %10, %13, !dbg !13
  %19 = or disjoint i32 %10, %14, !dbg !13
  %20 = or disjoint i32 %10, %15, !dbg !13
  %21 = or disjoint i32 %10, %16, !dbg !13
  %22 = or disjoint i32 %10, %17, !dbg !13
  %23 = icmp slt i32 %18, 768, !dbg !14
  %24 = icmp slt i32 %19, 768, !dbg !14
  %25 = icmp slt i32 %20, 768, !dbg !14
  %26 = icmp slt i32 %21, 768, !dbg !14
  %27 = icmp slt i32 %22, 768, !dbg !14
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %29 = icmp slt i32 %28, 64, !dbg !16
  %.frozen = freeze i32 %18, !dbg !17
  %30 = sdiv i32 %.frozen, 192, !dbg !17
  %31 = mul i32 %30, 192, !dbg !18
  %.decomposed = sub i32 %.frozen, %31, !dbg !18
  %32 = sdiv i32 %19, 192, !dbg !17
  %33 = sdiv i32 %20, 192, !dbg !17
  %34 = sdiv i32 %21, 192, !dbg !17
  %35 = sdiv i32 %22, 192, !dbg !17
  %36 = sext i32 %.decomposed to i64, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !19
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %23) #2, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !20
  %.idx = shl nuw nsw i32 %13, 3, !dbg !20
  %43 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !20
  %44 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %44, i1 true) #2, !dbg !20
  %45 = shl nuw nsw i32 %13, 1, !dbg !20
  %46 = or disjoint i32 %45, 2, !dbg !20
  %47 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %46, !dbg !20
  %48 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %48, i1 true) #2, !dbg !20
  %49 = or disjoint i32 %45, 4, !dbg !20
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %49, !dbg !20
  %51 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %51, i1 true) #2, !dbg !20
  %52 = or disjoint i32 %45, 6, !dbg !20
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %52, !dbg !20
  %54 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %54, i1 true) #2, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %.idx1 = shl nuw nsw i32 %14, 3, !dbg !20
  %55 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !20
  %56 = load float, ptr addrspace(3) %55, align 8, !dbg !20
  %.idx2 = shl nuw nsw i32 %15, 3, !dbg !20
  %57 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !20
  %58 = load float, ptr addrspace(3) %57, align 8, !dbg !20
  %.idx3 = shl nuw nsw i32 %16, 3, !dbg !20
  %59 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !20
  %60 = load float, ptr addrspace(3) %59, align 8, !dbg !20
  %.idx4 = shl nuw nsw i32 %17, 3, !dbg !20
  %61 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !20
  %62 = load float, ptr addrspace(3) %61, align 8, !dbg !20
  %63 = shl i32 %19, 6, !dbg !21
  %64 = shl i32 %20, 6, !dbg !21
  %65 = shl i32 %21, 6, !dbg !21
  %66 = shl i32 %22, 6, !dbg !21
  %67 = add i32 %63, %28, !dbg !22
  %68 = add i32 %64, %28, !dbg !22
  %69 = add i32 %65, %28, !dbg !22
  %70 = add i32 %66, %28, !dbg !22
  %71 = sext i32 %67 to i64, !dbg !23
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !23
  %73 = sext i32 %68 to i64, !dbg !23
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !23
  %75 = sext i32 %69 to i64, !dbg !23
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !23
  %77 = sext i32 %70 to i64, !dbg !23
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !23
  %79 = and i1 %29, %24, !dbg !24
  %80 = and i1 %29, %25, !dbg !24
  %81 = and i1 %29, %26, !dbg !24
  %82 = and i1 %29, %27, !dbg !24
  %83 = and i1 %29, %23, !dbg !24
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %79) #2, !dbg !25
  %85 = bitcast i32 %84 to float, !dbg !25
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %80) #2, !dbg !25
  %87 = bitcast i32 %86 to float, !dbg !25
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %81) #2, !dbg !25
  %89 = bitcast i32 %88 to float, !dbg !25
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %82) #2, !dbg !25
  %91 = bitcast i32 %90 to float, !dbg !25
  %92 = shl nsw i32 %32, 6, !dbg !26
  %93 = shl nsw i32 %33, 6, !dbg !26
  %94 = shl nsw i32 %34, 6, !dbg !26
  %95 = shl nsw i32 %35, 6, !dbg !26
  %96 = add i32 %92, %28, !dbg !27
  %97 = add i32 %93, %28, !dbg !27
  %98 = add i32 %94, %28, !dbg !27
  %99 = add i32 %95, %28, !dbg !27
  %100 = sext i32 %96 to i64, !dbg !28
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !28
  %102 = sext i32 %97 to i64, !dbg !28
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !28
  %104 = sext i32 %98 to i64, !dbg !28
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !28
  %106 = sext i32 %99 to i64, !dbg !28
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !28
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %79) #2, !dbg !29
  %109 = bitcast i32 %108 to float, !dbg !29
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %80) #2, !dbg !29
  %111 = bitcast i32 %110 to float, !dbg !29
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %81) #2, !dbg !29
  %113 = bitcast i32 %112 to float, !dbg !29
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %82) #2, !dbg !29
  %115 = bitcast i32 %114 to float, !dbg !29
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %100, !dbg !30
  %117 = getelementptr float, ptr addrspace(1) %3, i64 %102, !dbg !30
  %118 = getelementptr float, ptr addrspace(1) %3, i64 %104, !dbg !30
  %119 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !30
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %79) #2, !dbg !31
  %121 = bitcast i32 %120 to float, !dbg !31
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %80) #2, !dbg !31
  %123 = bitcast i32 %122 to float, !dbg !31
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %81) #2, !dbg !31
  %125 = bitcast i32 %124 to float, !dbg !31
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %82) #2, !dbg !31
  %127 = bitcast i32 %126 to float, !dbg !31
  %128 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !32
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %128, i1 %23) #2, !dbg !33
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !33
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !33
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !33
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !33
  %134 = bitcast i32 %130 to float, !dbg !33
  %135 = bitcast i32 %131 to float, !dbg !33
  %136 = bitcast i32 %132 to float, !dbg !33
  %137 = bitcast i32 %133 to float, !dbg !33
  %138 = fsub float %85, %109, !dbg !34
  %139 = fsub float %87, %111, !dbg !34
  %140 = fsub float %89, %113, !dbg !34
  %141 = fsub float %91, %115, !dbg !34
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float %121) #2, !dbg !35
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float %123) #2, !dbg !35
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float %125) #2, !dbg !35
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float %127) #2, !dbg !35
  %146 = fmul float %56, %142, !dbg !36
  %147 = fmul float %58, %143, !dbg !36
  %148 = fmul float %60, %144, !dbg !36
  %149 = fmul float %62, %145, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !36
  %151 = bitcast float %146 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #2, !dbg !36
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !36
  %153 = bitcast float %147 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !36
  %154 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !36
  %155 = bitcast float %148 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #2, !dbg !36
  %156 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !36
  %157 = bitcast float %149 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !36
  %159 = load float, ptr addrspace(3) %158, align 16, !dbg !36
  %160 = getelementptr inbounds i8, ptr addrspace(3) %158, i32 4, !dbg !36
  %161 = load float, ptr addrspace(3) %160, align 4, !dbg !36
  %162 = getelementptr inbounds i8, ptr addrspace(3) %158, i32 8, !dbg !36
  %163 = load float, ptr addrspace(3) %162, align 8, !dbg !36
  %164 = getelementptr inbounds i8, ptr addrspace(3) %158, i32 12, !dbg !36
  %165 = load float, ptr addrspace(3) %164, align 4, !dbg !36
  %166 = fadd float %159, %134, !dbg !37
  %167 = fadd float %161, %135, !dbg !37
  %168 = fadd float %163, %136, !dbg !37
  %169 = fadd float %165, %137, !dbg !37
  %170 = mul i32 %28, 192, !dbg !38
  %171 = add i32 %.decomposed, %170, !dbg !39
  %172 = mul i32 %30, 12288, !dbg !40
  %173 = add i32 %171, %172, !dbg !41
  %174 = sext i32 %173 to i64, !dbg !42
  %175 = getelementptr float, ptr addrspace(1) %5, i64 %174, !dbg !42
  %176 = bitcast float %166 to i32, !dbg !43
  %177 = bitcast float %167 to i32, !dbg !43
  %178 = bitcast float %168 to i32, !dbg !43
  %179 = bitcast float %169 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %176, i32 %177, i32 %178, i32 %179, ptr addrspace(1) %175, i1 %83) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czljpydhichoxdexmxala4vbl7kni7botlf6dwbzhy44njbbgmma.py", directory: "inductor_cache/zl")
!4 = !{ptr @triton_poi_fused_add_div_mul_sub_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mul_sub_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mul_sub_20", linkageName: "triton_poi_fused_add_div_mul_sub_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 38, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 51, scope: !7)
!25 = !DILocation(line: 33, column: 43, scope: !7)
!26 = !DILocation(line: 34, column: 38, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 43, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 43, scope: !7)
!32 = !DILocation(line: 36, column: 30, scope: !7)
!33 = !DILocation(line: 36, column: 35, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 34, scope: !7)
!39 = !DILocation(line: 41, column: 30, scope: !7)
!40 = !DILocation(line: 41, column: 45, scope: !7)
!41 = !DILocation(line: 41, column: 39, scope: !7)
!42 = !DILocation(line: 41, column: 25, scope: !7)
!43 = !DILocation(line: 41, column: 56, scope: !7)
!44 = !DILocation(line: 41, column: 4, scope: !7)
