; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_add_mul_pow_rsqrt_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %.fr = freeze i32 %7, !dbg !11
  %8 = shl i32 %.fr, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = and i32 %9, 63, !dbg !12
  %12 = lshr i32 %9, 2, !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = lshr i32 %9, 2, !dbg !12
  %15 = and i32 %14, 32, !dbg !12
  %16 = or disjoint i32 %13, %15, !dbg !12
  %17 = or disjoint i32 %8, %11, !dbg !13
  %18 = or disjoint i32 %16, %8, !dbg !13
  %19 = icmp slt i32 %17, 384, !dbg !14
  %20 = icmp slt i32 %18, 384, !dbg !14
  %21 = lshr i32 %9, 6, !dbg !15
  %22 = and i32 %21, 3, !dbg !15
  %23 = srem i32 %18, 96, !dbg !16
  %24 = mul nsw i32 %23, 864, !dbg !17
  %25 = srem i32 %17, 96, !dbg !18
  %26 = sub nsw i32 %17, %25, !dbg !18
  %27 = or disjoint i32 %24, %10
  %28 = shl i32 %9, 6
  %29 = and i32 %28, 192
  %.reass10 = or disjoint i32 %29, %13
  %30 = or disjoint i32 %.reass10, %15
  %31 = and i32 %9, 255
  %32 = lshr exact i32 %29, 4
  %33 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %32
  %34 = getelementptr float, ptr addrspace(3) %33, i32 %30
  %35 = lshr i32 %31, 6
  %36 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %35
  %37 = getelementptr inbounds float, ptr addrspace(3) %36, i32 %31
  %38 = sext i32 %27 to i64, !dbg !19
  %invariant.gep = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !19
  br label %39, !dbg !19

39:                                               ; preds = %6, %39
  %indvars.iv = phi i64 [ 0, %6 ], [ %indvars.iv.next, %39 ]
  %40 = phi float [ 0.000000e+00, %6 ], [ %56, %39 ]
  %41 = trunc i64 %indvars.iv to i32, !dbg !20
  %42 = or disjoint i32 %22, %41, !dbg !20
  %43 = udiv i32 %42, 9, !dbg !20
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !21
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %gep, i1 %20, i32 0, i1 %20) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %45 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %34, <1 x i32> %45, i1 true) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %46 = load float, ptr addrspace(3) %37, align 4, !dbg !22
  %47 = add i32 %43, %26, !dbg !23
  %48 = sext i32 %47 to i64, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !24
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %19, i32 0, i1 %19) #5, !dbg !25
  %51 = bitcast i32 %50 to float, !dbg !25
  %52 = fadd float %51, 1.000000e+00, !dbg !26
  %53 = fmul float %46, %52, !dbg !27
  %54 = fmul float %53, %53, !dbg !28
  %55 = fadd float %40, %54, !dbg !29
  %56 = select i1 %19, float %55, float %40, !dbg !30
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !19
  %57 = icmp samesign ult i64 %indvars.iv, 860, !dbg !19
  br i1 %57, label %39, label %58, !dbg !19

58:                                               ; preds = %39
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %59 = lshr i32 %9, 6, !dbg !31
  %60 = and i32 %59, 3, !dbg !31
  %61 = shl nuw nsw i32 %11, 2, !dbg !31
  %62 = or disjoint i32 %61, %60, !dbg !31
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i32 %62, !dbg !31
  %64 = bitcast float %56 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %65 = icmp slt i32 %9, 256, !dbg !31
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !31
  %67 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %66, i1 %65) #5, !dbg !31
  %68 = bitcast i32 %67 to float, !dbg !31
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 2, i32 31), !dbg !31
  %70 = bitcast i32 %69 to float, !dbg !31
  %71 = fadd float %68, %70, !dbg !35
  %72 = bitcast float %71 to i32, !dbg !31
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 1, i32 31), !dbg !31
  %74 = bitcast i32 %73 to float, !dbg !31
  %75 = fadd float %71, %74, !dbg !35
  %76 = icmp eq i32 %10, 0, !dbg !31
  %77 = and i1 %65, %76, !dbg !31
  %78 = bitcast float %75 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %78, i1 %77) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %61, !dbg !31
  %80 = load float, ptr addrspace(3) %79, align 16, !dbg !31
  %81 = fadd float %80, 0x3E45798EE0000000, !dbg !37
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i = icmp eq i32 %82, 0, !dbg !38
  br i1 %.not.i, label %85, label %83, !dbg !38

83:                                               ; preds = %58
  %84 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %81), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

85:                                               ; preds = %58
  %86 = tail call float @llvm.nvvm.rsqrt.approx.f(float %81), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %83, %85
  %.0.i = phi float [ %84, %83 ], [ %86, %85 ], !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %87 = sext i32 %17 to i64, !dbg !40
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !40
  %89 = icmp eq i32 %60, 0, !dbg !41
  %90 = bitcast float %.0.i to i32, !dbg !41
  %91 = and i1 %89, %19, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %90, ptr addrspace(1) %88, i1 %91) #5, !dbg !41
  %92 = mul i32 %18, 864, !dbg !42
  %93 = shl i32 %9, 2
  %94 = and i32 %93, 252
  %.reass = or disjoint i32 %94, %22
  %95 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %94
  %96 = getelementptr inbounds float, ptr addrspace(3) %95, i32 %.reass
  %97 = lshr i32 %31, 2
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %97
  %99 = getelementptr inbounds float, ptr addrspace(3) %98, i32 %31
  %100 = zext nneg i32 %10 to i64, !dbg !43
  %101 = sext i32 %24 to i64, !dbg !43
  %invariant.gep20 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !43
  br label %102, !dbg !43

102:                                              ; preds = %__nv_rsqrtf.exit, %102
  %indvars.iv18 = phi i64 [ 0, %__nv_rsqrtf.exit ], [ %indvars.iv.next19, %102 ]
  %103 = or disjoint i64 %indvars.iv18, %100, !dbg !44
  %104 = trunc i64 %indvars.iv18 to i32, !dbg !45
  %105 = or disjoint i32 %22, %104, !dbg !45
  %106 = udiv i32 %105, 9, !dbg !45
  %gep21 = getelementptr float, ptr addrspace(1) %invariant.gep20, i64 %103, !dbg !46
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %gep21, i1 %20, i32 0, i1 %20) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %108 = insertelement <1 x i32> poison, i32 %107, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %34, <1 x i32> %108, i1 true) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %109 = load float, ptr addrspace(3) %37, align 4, !dbg !47
  %110 = add i32 %106, %26, !dbg !48
  %111 = sext i32 %110 to i64, !dbg !49
  %112 = getelementptr float, ptr addrspace(1) %2, i64 %111, !dbg !49
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %19, i32 0, i1 %19) #5, !dbg !50
  %114 = bitcast i32 %113 to float, !dbg !50
  %115 = fadd float %114, 1.000000e+00, !dbg !51
  %116 = fmul float %109, %115, !dbg !52
  %117 = fmul float %.0.i, %116, !dbg !53
  %118 = trunc nuw nsw i64 %103 to i32, !dbg !54
  %119 = add i32 %92, %118, !dbg !54
  %120 = sext i32 %119 to i64, !dbg !55
  %121 = getelementptr float, ptr addrspace(1) %3, i64 %120, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %122 = bitcast float %117 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %122, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %123 = load i32, ptr addrspace(3) %99, align 4, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %121, i1 %20) #5, !dbg !56
  %indvars.iv.next19 = add nuw nsw i64 %indvars.iv18, 4, !dbg !43
  %124 = icmp samesign ult i64 %indvars.iv18, 860, !dbg !43
  br i1 %124, label %102, label %125, !dbg !43

125:                                              ; preds = %102
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py", directory: "inductor_cache/hk")
!4 = !{ptr @triton_red_fused_add_mul_pow_rsqrt_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_mul_pow_rsqrt_sum_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_mul_pow_rsqrt_sum_0", linkageName: "triton_red_fused_add_mul_pow_rsqrt_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 35, column: 43, scope: !7)
!18 = !DILocation(line: 36, column: 42, scope: !7)
!19 = !DILocation(line: 30, column: 36, scope: !7)
!20 = !DILocation(line: 34, column: 23, scope: !7)
!21 = !DILocation(line: 35, column: 34, scope: !7)
!22 = !DILocation(line: 35, column: 48, scope: !7)
!23 = !DILocation(line: 36, column: 39, scope: !7)
!24 = !DILocation(line: 36, column: 34, scope: !7)
!25 = !DILocation(line: 36, column: 47, scope: !7)
!26 = !DILocation(line: 38, column: 22, scope: !7)
!27 = !DILocation(line: 39, column: 22, scope: !7)
!28 = !DILocation(line: 40, column: 22, scope: !7)
!29 = !DILocation(line: 42, column: 23, scope: !7)
!30 = !DILocation(line: 43, column: 46, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 44, column: 25, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 46, column: 19, scope: !7)
!38 = !DILocation(line: 47, column: 28, scope: !7)
!39 = !DILocation(line: 48, column: 4, scope: !7)
!40 = !DILocation(line: 49, column: 28, scope: !7)
!41 = !DILocation(line: 49, column: 40, scope: !7)
!42 = !DILocation(line: 61, column: 38, scope: !7)
!43 = !DILocation(line: 50, column: 36, scope: !7)
!44 = !DILocation(line: 51, column: 27, scope: !7)
!45 = !DILocation(line: 54, column: 23, scope: !7)
!46 = !DILocation(line: 55, column: 35, scope: !7)
!47 = !DILocation(line: 55, column: 49, scope: !7)
!48 = !DILocation(line: 56, column: 40, scope: !7)
!49 = !DILocation(line: 56, column: 35, scope: !7)
!50 = !DILocation(line: 56, column: 48, scope: !7)
!51 = !DILocation(line: 58, column: 24, scope: !7)
!52 = !DILocation(line: 59, column: 24, scope: !7)
!53 = !DILocation(line: 60, column: 24, scope: !7)
!54 = !DILocation(line: 61, column: 34, scope: !7)
!55 = !DILocation(line: 61, column: 29, scope: !7)
!56 = !DILocation(line: 61, column: 50, scope: !7)
!57 = !DILocation(line: 50, column: 4, scope: !7)
