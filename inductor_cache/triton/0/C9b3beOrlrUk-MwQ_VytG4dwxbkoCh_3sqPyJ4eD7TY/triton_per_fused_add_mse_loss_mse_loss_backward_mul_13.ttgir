#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":19:0)
#loc1 = loc(unknown)
#loc13 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":40:25)
#loc30 = loc(callsite(#loc1 at #loc13))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_mse_loss_mse_loss_backward_mul_13(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.00999999977> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.250000e-01> : tensor<1x16xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<2.500000e-01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<0.00999999977> : tensor<1x16xf32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked1> loc(#loc1)
    %0 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc2)
    %1 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc2)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc2)
    %4 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc3)
    %5 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc3)
    %6 = tt.addptr %4, %2 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc3)
    %7 = tt.addptr %5, %3 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc3)
    %8 = tt.load %6 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc4)
    %9 = tt.load %7 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc4)
    %10 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc5)
    %11 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc5)
    %12 = tt.addptr %10, %2 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc5)
    %13 = tt.addptr %11, %3 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc5)
    %14 = tt.load %12 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc6)
    %15 = tt.load %13 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc6)
    %16 = arith.cmpf ogt, %14, %cst_5 : tensor<1x16xf32, #blocked1> loc(#loc7)
    %17 = arith.cmpf ogt, %15, %cst : tensor<1x16xf32, #blocked> loc(#loc7)
    %18 = arith.mulf %14, %cst_4 : tensor<1x16xf32, #blocked1> loc(#loc8)
    %19 = arith.mulf %15, %cst_0 : tensor<1x16xf32, #blocked> loc(#loc8)
    %20 = arith.select %16, %14, %18 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc9)
    %21 = arith.select %17, %15, %19 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc9)
    %22 = arith.subf %8, %20 : tensor<1x16xf32, #blocked1> loc(#loc10)
    %23 = arith.subf %9, %21 : tensor<1x16xf32, #blocked> loc(#loc10)
    %24 = arith.mulf %22, %22 : tensor<1x16xf32, #blocked1> loc(#loc11)
    %25 = "tt.reduce"(%24) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc13)), %arg7: f32 loc(callsite(#loc1 at #loc13))):
      %38 = arith.addf %arg6, %arg7 : f32 loc(#loc32)
      tt.reduce.return %38 : f32 loc(#loc29)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc29)
    %26 = tt.expand_dims %25 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc15)
    %27 = arith.addf %21, %23 : tensor<1x16xf32, #blocked> loc(#loc16)
    %28 = arith.mulf %23, %cst_1 : tensor<1x16xf32, #blocked> loc(#loc17)
    %29 = arith.divf %26, %cst_3 : tensor<1x1xf32, #blocked1> loc(#loc18)
    %30 = arith.mulf %29, %cst_2 : tensor<1x1xf32, #blocked1> loc(#loc19)
    %31 = arith.addf %30, %29 : tensor<1x1xf32, #blocked1> loc(#loc20)
    %32 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc21)
    %33 = tt.addptr %32, %3 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc21)
    tt.store %33, %27 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc22)
    %34 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc23)
    %35 = tt.addptr %34, %3 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc23)
    tt.store %35, %28 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc24)
    gpu.barrier loc(#loc25)
    %36 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc26)
    %37 = tt.splat %36 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc27)
    tt.store %37, %31 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc27)
    tt.return loc(#loc28)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":26:34)
#loc3 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":30:30)
#loc4 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":30:35)
#loc5 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":31:30)
#loc6 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":31:35)
#loc7 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":33:18)
#loc8 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":35:18)
#loc9 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":36:32)
#loc10 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":37:18)
#loc11 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":38:18)
#loc12 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":40:28)
#loc16 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":41:19)
#loc17 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":43:19)
#loc18 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":45:20)
#loc19 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":47:20)
#loc20 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":48:20)
#loc21 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":49:25)
#loc22 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":49:72)
#loc23 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":50:25)
#loc24 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":50:72)
#loc25 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":51:4)
#loc26 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":52:28)
#loc27 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":52:71)
#loc28 = loc("inductor_cache/3b/c3bbi5dz6cea5q2smeafkjghh6w7t3ms2x5nbq77bedz2rvxukj4.py":52:4)
#loc29 = loc(callsite(#loc12 at #loc13))
#loc31 = loc(callsite(#loc14 at #loc12))
#loc32 = loc(callsite(#loc31 at #loc13))
