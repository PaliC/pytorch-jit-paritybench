#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":19:0)
#loc1 = loc(unknown)
#loc27 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":47:59)
#loc35 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":55:59)
#loc53 = loc(callsite(#loc1 at #loc27))
#loc57 = loc(callsite(#loc1 at #loc35))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_12(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":19:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":19:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<512xf32, #blocked> loc(#loc1)
    %c384_i32 = arith.constant 384 : i32 loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_1 = arith.constant 3.840000e+02 : f32 loc(#loc1)
    %cst_2 = arith.constant 9.99999974E-6 : f32 loc(#loc1)
    %cst_3 = arith.constant 0.00260416674 : f32 loc(#loc1)
    %cst_4 = arith.constant dense<384> : tensor<512xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked> loc(#loc3)
    %2 = arith.cmpi slt, %1, %cst_4 : tensor<512xi32, #blocked> loc(#loc4)
    %3 = arith.muli %0, %c384_i32 : i32 loc(#loc5)
    %4 = tt.splat %3 : i32 -> tensor<512xi32, #blocked> loc(#loc6)
    %5 = arith.addi %1, %4 : tensor<512xi32, #blocked> loc(#loc6)
    %6 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.addptr %6, %5 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc7)
    %8 = tt.load %7, %2, %cst : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc9)
    %10 = tt.addptr %9, %5 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc9)
    %11 = tt.load %10, %2, %cst : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc10)
    %12 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc11)
    %13 = tt.addptr %12, %1 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc11)
    %14 = tt.load %13, %2, %cst evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc13)
    %16 = tt.addptr %15, %5 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc13)
    %17 = tt.load %16, %2, %cst : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc14)
    %18 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc15)
    %19 = tt.addptr %18, %1 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc15)
    %20 = tt.load %19, %2, %cst evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc16)
    %21 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc17)
    %22 = tt.addptr %21, %1 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc17)
    %23 = tt.load %22, %2, %cst evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc18)
    %24 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc19)
    %25 = tt.addptr %24, %1 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc19)
    %26 = tt.load %25, %2, %cst evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc20)
    %27 = arith.addf %11, %14 : tensor<512xf32, #blocked> loc(#loc21)
    %28 = arith.addf %8, %27 : tensor<512xf32, #blocked> loc(#loc22)
    %29 = arith.addf %17, %20 : tensor<512xf32, #blocked> loc(#loc23)
    %30 = arith.addf %28, %29 : tensor<512xf32, #blocked> loc(#loc24)
    %31 = arith.select %2, %30, %cst : tensor<512xi1, #blocked>, tensor<512xf32, #blocked> loc(#loc25)
    %32 = "tt.reduce"(%31) <{axis = 0 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc27)), %arg13: f32 loc(callsite(#loc1 at #loc27))):
      %56 = arith.addf %arg12, %arg13 : f32 loc(#loc59)
      tt.reduce.return %56 : f32 loc(#loc52)
    }) : (tensor<512xf32, #blocked>) -> f32 loc(#loc52)
    %33 = arith.addf %32, %cst_0 : f32 loc(#loc55)
    %34 = arith.divf %33, %cst_1 : f32 loc(#loc31)
    %35 = tt.splat %34 : f32 -> tensor<512xf32, #blocked> loc(#loc32)
    %36 = arith.subf %30, %35 : tensor<512xf32, #blocked> loc(#loc32)
    %37 = arith.mulf %36, %36 : tensor<512xf32, #blocked> loc(#loc33)
    %38 = arith.select %2, %37, %cst : tensor<512xi1, #blocked>, tensor<512xf32, #blocked> loc(#loc34)
    %39 = "tt.reduce"(%38) <{axis = 0 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc35)), %arg13: f32 loc(callsite(#loc1 at #loc35))):
      %56 = arith.addf %arg12, %arg13 : f32 loc(#loc60)
      tt.reduce.return %56 : f32 loc(#loc56)
    }) : (tensor<512xf32, #blocked>) -> f32 loc(#loc56)
    %40 = arith.addf %39, %cst_0 : f32 loc(#loc58)
    %41 = arith.divf %40, %cst_1 : f32 loc(#loc37)
    %42 = arith.addf %41, %cst_2 : f32 loc(#loc38)
    %43 = tt.extern_elementwise %42 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (f32) -> f32 loc(#loc39)
    %44 = tt.splat %43 : f32 -> tensor<512xf32, #blocked> loc(#loc40)
    %45 = arith.mulf %36, %44 : tensor<512xf32, #blocked> loc(#loc40)
    %46 = arith.mulf %45, %23 : tensor<512xf32, #blocked> loc(#loc41)
    %47 = arith.addf %46, %26 : tensor<512xf32, #blocked> loc(#loc42)
    %48 = arith.mulf %43, %cst_3 : f32 loc(#loc43)
    %49 = tt.splat %48 : f32 -> tensor<1xf32, #blocked1> loc(#loc43)
    tt.store %7, %30, %2 : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc44)
    %50 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc45)
    %51 = tt.addptr %50, %5 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc45)
    tt.store %51, %45, %2 : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc46)
    %52 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc47)
    %53 = tt.addptr %52, %5 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc47)
    tt.store %53, %47, %2 : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc48)
    %54 = tt.addptr %arg9, %0 : !tt.ptr<f32>, i32 loc(#loc49)
    %55 = tt.splat %54 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc49)
    tt.store %55, %49 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc50)
    tt.return loc(#loc51)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":24:28)
#loc3 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":27:26)
#loc4 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":29:21)
#loc5 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":32:43)
#loc6 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":32:39)
#loc7 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":32:34)
#loc8 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":32:48)
#loc9 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":33:30)
#loc10 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":33:44)
#loc11 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":34:30)
#loc12 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":34:35)
#loc13 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":35:30)
#loc14 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":35:44)
#loc15 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":36:30)
#loc16 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":36:35)
#loc17 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":37:31)
#loc18 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":37:36)
#loc19 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":38:31)
#loc20 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":38:36)
#loc21 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":39:18)
#loc22 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":40:18)
#loc23 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":41:18)
#loc24 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":42:18)
#loc25 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":46:35)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc30 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":47:45)
#loc31 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":50:20)
#loc32 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":51:19)
#loc33 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":52:20)
#loc34 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":54:35)
#loc36 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":55:45)
#loc37 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":58:20)
#loc38 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":60:20)
#loc39 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":61:28)
#loc40 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":62:20)
#loc41 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":63:20)
#loc42 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":64:20)
#loc43 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":66:20)
#loc44 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":67:48)
#loc45 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":68:25)
#loc46 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":68:46)
#loc47 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":69:25)
#loc48 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":69:46)
#loc49 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":70:25)
#loc50 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":70:37)
#loc51 = loc("inductor_cache/mj/cmjedu33wrfhcgxqsbuxso22l3bwrhyngpyx3jmmi7nhz5enqr2f.py":70:4)
#loc52 = loc(callsite(#loc26 at #loc27))
#loc54 = loc(callsite(#loc28 at #loc26))
#loc55 = loc(callsite(#loc29 at #loc30))
#loc56 = loc(callsite(#loc26 at #loc35))
#loc58 = loc(callsite(#loc29 at #loc36))
#loc59 = loc(callsite(#loc54 at #loc27))
#loc60 = loc(callsite(#loc54 at #loc35))
