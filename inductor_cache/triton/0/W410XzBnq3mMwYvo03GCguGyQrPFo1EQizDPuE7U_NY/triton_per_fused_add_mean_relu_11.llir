; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_mean_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = shl i32 %7, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = and i32 %7, 15, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 512, !dbg !14
  %15 = icmp slt i32 %13, 512, !dbg !14
  %16 = lshr i32 %7, 5, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %17 = sdiv i32 %.frozen, 128, !dbg !16
  %18 = mul i32 %17, 128, !dbg !17
  %.decomposed = sub i32 %.frozen, %18, !dbg !17
  %19 = shl i32 %7, 5, !dbg !18
  %20 = and i32 %19, 3968, !dbg !18
  %21 = add nsw i32 %.decomposed, %20, !dbg !19
  %22 = shl i32 %17, 12, !dbg !20
  %23 = add i32 %21, %22, !dbg !21
  %24 = sext i32 %23 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !22
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !23
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !23
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !23
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !23
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !23
  %31 = bitcast i32 %27 to float, !dbg !23
  %32 = bitcast i32 %28 to float, !dbg !23
  %33 = bitcast i32 %29 to float, !dbg !23
  %34 = bitcast i32 %30 to float, !dbg !23
  %35 = select i1 %14, float %31, float 0.000000e+00, !dbg !24
  %36 = select i1 %14, float %32, float 0.000000e+00, !dbg !24
  %37 = select i1 %14, float %33, float 0.000000e+00, !dbg !24
  %38 = select i1 %14, float %34, float 0.000000e+00, !dbg !24
  %39 = bitcast float %35 to i32, !dbg !25
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 16, i32 31), !dbg !25
  %41 = bitcast i32 %40 to float, !dbg !25
  %42 = fadd float %35, %41, !dbg !29
  %43 = bitcast float %42 to i32, !dbg !25
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 8, i32 31), !dbg !25
  %45 = bitcast i32 %44 to float, !dbg !25
  %46 = fadd float %42, %45, !dbg !29
  %47 = bitcast float %46 to i32, !dbg !25
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 4, i32 31), !dbg !25
  %49 = bitcast i32 %48 to float, !dbg !25
  %50 = fadd float %46, %49, !dbg !29
  %51 = bitcast float %36 to i32, !dbg !25
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 16, i32 31), !dbg !25
  %53 = bitcast i32 %52 to float, !dbg !25
  %54 = fadd float %36, %53, !dbg !29
  %55 = bitcast float %54 to i32, !dbg !25
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 8, i32 31), !dbg !25
  %57 = bitcast i32 %56 to float, !dbg !25
  %58 = fadd float %54, %57, !dbg !29
  %59 = bitcast float %58 to i32, !dbg !25
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 4, i32 31), !dbg !25
  %61 = bitcast i32 %60 to float, !dbg !25
  %62 = fadd float %58, %61, !dbg !29
  %63 = bitcast float %37 to i32, !dbg !25
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 16, i32 31), !dbg !25
  %65 = bitcast i32 %64 to float, !dbg !25
  %66 = fadd float %37, %65, !dbg !29
  %67 = bitcast float %66 to i32, !dbg !25
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 8, i32 31), !dbg !25
  %69 = bitcast i32 %68 to float, !dbg !25
  %70 = fadd float %66, %69, !dbg !29
  %71 = bitcast float %70 to i32, !dbg !25
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 4, i32 31), !dbg !25
  %73 = bitcast i32 %72 to float, !dbg !25
  %74 = fadd float %70, %73, !dbg !29
  %75 = bitcast float %38 to i32, !dbg !25
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 16, i32 31), !dbg !25
  %77 = bitcast i32 %76 to float, !dbg !25
  %78 = fadd float %38, %77, !dbg !29
  %79 = bitcast float %78 to i32, !dbg !25
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 8, i32 31), !dbg !25
  %81 = bitcast i32 %80 to float, !dbg !25
  %82 = fadd float %78, %81, !dbg !29
  %83 = bitcast float %82 to i32, !dbg !25
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 4, i32 31), !dbg !25
  %85 = bitcast i32 %84 to float, !dbg !25
  %86 = fadd float %82, %85, !dbg !29
  %87 = icmp samesign ult i32 %8, 4, !dbg !25
  %88 = and i32 %16, 3, !dbg !25
  %89 = shl nuw nsw i32 %10, 2, !dbg !25
  %90 = or disjoint i32 %89, %88, !dbg !25
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !25
  %92 = bitcast float %50 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 %87) #3, !dbg !25
  %93 = or disjoint i32 %89, 4, !dbg !25
  %94 = or disjoint i32 %93, %88, !dbg !25
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !25
  %96 = bitcast float %62 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 %87) #3, !dbg !25
  %97 = or disjoint i32 %89, 8, !dbg !25
  %98 = or disjoint i32 %97, %88, !dbg !25
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !25
  %100 = bitcast float %74 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 %87) #3, !dbg !25
  %101 = or disjoint i32 %89, 12, !dbg !25
  %102 = or disjoint i32 %101, %88, !dbg !25
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !25
  %104 = bitcast float %86 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 %87) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %105 = icmp slt i32 %7, 64, !dbg !25
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !25
  %107 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %106, i1 %105) #3, !dbg !25
  %108 = bitcast i32 %107 to float, !dbg !25
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 2, i32 31), !dbg !25
  %110 = bitcast i32 %109 to float, !dbg !25
  %111 = fadd float %108, %110, !dbg !29
  %112 = bitcast float %111 to i32, !dbg !25
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 1, i32 31), !dbg !25
  %114 = bitcast i32 %113 to float, !dbg !25
  %115 = fadd float %111, %114, !dbg !29
  %116 = and i32 %7, 3, !dbg !25
  %117 = icmp eq i32 %116, 0, !dbg !25
  %118 = and i1 %105, %117, !dbg !25
  %119 = bitcast float %115 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %119, i1 %118) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %89, !dbg !25
  %121 = load i32, ptr addrspace(3) %120, align 16, !dbg !25
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !25
  %123 = load i32, ptr addrspace(3) %122, align 16, !dbg !25
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97, !dbg !25
  %125 = load i32, ptr addrspace(3) %124, align 16, !dbg !25
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !25
  %127 = load i32, ptr addrspace(3) %126, align 16, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !31
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %128, i32 %121, i32 %123, i32 %125, i32 %127, i1 true) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %130 = load float, ptr addrspace(3) %129, align 4, !dbg !31
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float 4.096000e+03) #3, !dbg !35
  %132 = fcmp olt float %131, 0.000000e+00, !dbg !36
  %133 = select i1 %132, float 0.000000e+00, float %131, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %134 = sext i32 %13 to i64, !dbg !38
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !38
  %136 = lshr i32 %8, 4, !dbg !39
  %137 = shl nuw nsw i32 %88, 1, !dbg !39
  %138 = or disjoint i32 %137, %136, !dbg !39
  %139 = icmp eq i32 %138, 0, !dbg !39
  %140 = bitcast float %133 to i32, !dbg !39
  %141 = and i1 %139, %15, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %135, i1 %141) #3, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cl4c2s4ruj6sngsjigdyyl4y4ri7zev5arqdika3ikagpeflhkwd.py", directory: "inductor_cache/l4")
!4 = !{ptr @triton_per_fused_add_mean_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_relu_11", linkageName: "triton_per_fused_add_mean_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 49, scope: !7)
!21 = !DILocation(line: 33, column: 44, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 54, scope: !7)
!24 = !DILocation(line: 35, column: 33, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 40, column: 40, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 41, column: 4, scope: !7)
!38 = !DILocation(line: 42, column: 28, scope: !7)
!39 = !DILocation(line: 42, column: 39, scope: !7)
!40 = !DILocation(line: 42, column: 4, scope: !7)
