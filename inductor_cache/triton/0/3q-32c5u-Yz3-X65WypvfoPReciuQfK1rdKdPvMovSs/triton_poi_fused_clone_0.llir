; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 28, !dbg !12
  %10 = lshr i32 %7, 3, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %11, !dbg !13
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = icmp slt i32 %13, 256, !dbg !14
  %17 = icmp slt i32 %14, 256, !dbg !14
  %18 = icmp slt i32 %15, 256, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 5, !dbg !16
  %21 = or disjoint i32 %20, %11, !dbg !17
  %22 = or disjoint i32 %20, %12, !dbg !17
  %23 = or disjoint i32 %20, %9, !dbg !17
  %24 = icmp slt i32 %21, 256, !dbg !18
  %25 = icmp slt i32 %22, 256, !dbg !18
  %26 = icmp slt i32 %23, 256, !dbg !18
  %.frozen = freeze i32 %21, !dbg !19
  %27 = sdiv i32 %.frozen, 4, !dbg !19
  %28 = mul i32 %27, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %.frozen1 = freeze i32 %22, !dbg !19
  %29 = sdiv i32 %.frozen1, 4, !dbg !19
  %30 = mul i32 %29, 4, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %30, !dbg !20
  %.frozen3 = freeze i32 %13, !dbg !21
  %31 = sdiv i32 %.frozen3, 64, !dbg !21
  %32 = mul i32 %31, 64, !dbg !22
  %.decomposed4 = sub i32 %.frozen3, %32, !dbg !22
  %33 = shl i32 %27, 6, !dbg !23
  %34 = shl i32 %29, 6, !dbg !23
  %35 = shl nsw i32 %.decomposed, 12, !dbg !24
  %36 = shl nsw i32 %.decomposed2, 12, !dbg !24
  %37 = shl i32 %31, 14, !dbg !25
  %38 = add i32 %37, %.decomposed4, !dbg !26
  %39 = add i32 %38, %33, !dbg !27
  %40 = add i32 %39, %35, !dbg !28
  %41 = add i32 %38, %34, !dbg !27
  %42 = add i32 %41, %36, !dbg !28
  %43 = sext i32 %40 to i64, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !29
  %45 = sext i32 %42 to i64, !dbg !29
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !29
  %47 = and i1 %16, %24, !dbg !30
  %48 = and i1 %16, %25, !dbg !30
  %49 = and i1 %17, %26, !dbg !30
  %50 = and i1 %18, %26, !dbg !30
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %47) #2, !dbg !31
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !31
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !31
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !31
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !31
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %48) #2, !dbg !31
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !31
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !31
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !31
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !31
  %61 = shl i32 %14, 8, !dbg !32
  %62 = shl i32 %15, 8, !dbg !32
  %63 = add i32 %23, %61, !dbg !33
  %64 = add i32 %23, %62, !dbg !33
  %65 = sext i32 %63 to i64, !dbg !34
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !34
  %67 = sext i32 %64 to i64, !dbg !34
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !34
  %69 = shl i32 %7, 7, !dbg !35
  %70 = and i32 %69, 896, !dbg !35
  %71 = or disjoint i32 %70, %11, !dbg !35
  %72 = and i32 %8, 508, !dbg !35
  %73 = lshr exact i32 %70, 5, !dbg !35
  %74 = add nuw nsw i32 %73, %71, !dbg !35
  %75 = zext nneg i32 %74 to i64, !dbg !35
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %75, !dbg !35
  %77 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #2, !dbg !35
  %78 = or disjoint i32 %71, 32, !dbg !35
  %79 = lshr i32 %78, 5, !dbg !35
  %80 = add nuw nsw i32 %79, %78, !dbg !35
  %81 = zext nneg i32 %80 to i64, !dbg !35
  %82 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %81, !dbg !35
  %83 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #2, !dbg !35
  %84 = or disjoint i32 %71, 64, !dbg !35
  %85 = lshr i32 %84, 5, !dbg !35
  %86 = add nuw nsw i32 %85, %84, !dbg !35
  %87 = zext nneg i32 %86 to i64, !dbg !35
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %87, !dbg !35
  %89 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #2, !dbg !35
  %90 = or disjoint i32 %71, 96, !dbg !35
  %91 = lshr i32 %90, 5, !dbg !35
  %92 = add nuw nsw i32 %91, %90, !dbg !35
  %93 = zext nneg i32 %92 to i64, !dbg !35
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %93, !dbg !35
  %95 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #2, !dbg !35
  %96 = or disjoint i32 %71, 16, !dbg !35
  %97 = add nuw nsw i32 %96, %73, !dbg !35
  %98 = zext nneg i32 %97 to i64, !dbg !35
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %98, !dbg !35
  %100 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 true) #2, !dbg !35
  %101 = or disjoint i32 %71, 48, !dbg !35
  %102 = lshr i32 %101, 5, !dbg !35
  %103 = add nuw nsw i32 %102, %101, !dbg !35
  %104 = zext nneg i32 %103 to i64, !dbg !35
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %104, !dbg !35
  %106 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #2, !dbg !35
  %107 = or disjoint i32 %71, 80, !dbg !35
  %108 = lshr i32 %107, 5, !dbg !35
  %109 = add nuw nsw i32 %108, %107, !dbg !35
  %110 = zext nneg i32 %109 to i64, !dbg !35
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %110, !dbg !35
  %112 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #2, !dbg !35
  %113 = or disjoint i32 %71, 112, !dbg !35
  %114 = lshr i32 %113, 5, !dbg !35
  %115 = add nuw nsw i32 %114, %113, !dbg !35
  %116 = zext nneg i32 %115 to i64, !dbg !35
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %116, !dbg !35
  %118 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %119 = lshr i32 %72, 5, !dbg !35
  %120 = add nuw nsw i32 %119, %72, !dbg !35
  %121 = zext nneg i32 %120 to i64, !dbg !35
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %121, !dbg !35
  %123 = load i32, ptr addrspace(3) %122, align 4, !dbg !35
  %124 = or disjoint i32 %72, 1, !dbg !35
  %125 = add nuw nsw i32 %124, %119, !dbg !35
  %126 = zext nneg i32 %125 to i64, !dbg !35
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %126, !dbg !35
  %128 = load i32, ptr addrspace(3) %127, align 4, !dbg !35
  %129 = or disjoint i32 %72, 2, !dbg !35
  %130 = add nuw nsw i32 %129, %119, !dbg !35
  %131 = zext nneg i32 %130 to i64, !dbg !35
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %131, !dbg !35
  %133 = load i32, ptr addrspace(3) %132, align 4, !dbg !35
  %134 = or disjoint i32 %72, 3, !dbg !35
  %135 = add nuw nsw i32 %134, %119, !dbg !35
  %136 = zext nneg i32 %135 to i64, !dbg !35
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %136, !dbg !35
  %138 = load i32, ptr addrspace(3) %137, align 4, !dbg !35
  %139 = or disjoint i32 %72, 512, !dbg !35
  %140 = lshr i32 %139, 5, !dbg !35
  %141 = add nuw nsw i32 %140, %139, !dbg !35
  %142 = zext nneg i32 %141 to i64, !dbg !35
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %142, !dbg !35
  %144 = load i32, ptr addrspace(3) %143, align 4, !dbg !35
  %145 = or disjoint i32 %72, 513, !dbg !35
  %146 = lshr i32 %145, 5, !dbg !35
  %147 = add nuw nsw i32 %146, %145, !dbg !35
  %148 = zext nneg i32 %147 to i64, !dbg !35
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %148, !dbg !35
  %150 = load i32, ptr addrspace(3) %149, align 4, !dbg !35
  %151 = or disjoint i32 %72, 514, !dbg !35
  %152 = lshr i32 %151, 5, !dbg !35
  %153 = add nuw nsw i32 %152, %151, !dbg !35
  %154 = zext nneg i32 %153 to i64, !dbg !35
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %154, !dbg !35
  %156 = load i32, ptr addrspace(3) %155, align 4, !dbg !35
  %157 = or disjoint i32 %72, 515, !dbg !35
  %158 = lshr i32 %157, 5, !dbg !35
  %159 = add nuw nsw i32 %158, %157, !dbg !35
  %160 = zext nneg i32 %159 to i64, !dbg !35
  %161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %160, !dbg !35
  %162 = load i32, ptr addrspace(3) %161, align 4, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %123, i32 %128, i32 %133, i32 %138, ptr addrspace(1) %66, i1 %49) #2, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %144, i32 %150, i32 %156, i32 %162, ptr addrspace(1) %68, i1 %50) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs6vpnni2zgvussmd55pa4k7uc56bselhn3wzbkrkurfgq33y34h.py", directory: "inductor_cache/s6")
!4 = !{ptr @triton_poi_fused_clone_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_0", linkageName: "triton_poi_fused_clone_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 38, scope: !7)
!24 = !DILocation(line: 34, column: 48, scope: !7)
!25 = !DILocation(line: 34, column: 59, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 43, scope: !7)
!28 = !DILocation(line: 34, column: 53, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 72, scope: !7)
!31 = !DILocation(line: 34, column: 64, scope: !7)
!32 = !DILocation(line: 35, column: 34, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 25, scope: !7)
!35 = !DILocation(line: 35, column: 45, scope: !7)
!36 = !DILocation(line: 35, column: 4, scope: !7)
