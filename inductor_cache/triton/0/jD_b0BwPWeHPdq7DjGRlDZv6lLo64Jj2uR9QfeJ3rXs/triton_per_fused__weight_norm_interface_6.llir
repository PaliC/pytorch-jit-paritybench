; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 5, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %11, 8, !dbg !12
  %13 = or disjoint i32 %11, 16, !dbg !12
  %14 = or disjoint i32 %11, 24, !dbg !12
  %15 = and i32 %9, 31, !dbg !12
  %16 = or disjoint i32 %8, %11, !dbg !13
  %17 = or disjoint i32 %8, %12, !dbg !13
  %18 = or disjoint i32 %8, %13, !dbg !13
  %19 = or disjoint i32 %8, %14, !dbg !13
  %20 = icmp slt i32 %16, 32, !dbg !14
  %21 = icmp slt i32 %17, 32, !dbg !14
  %22 = icmp slt i32 %18, 32, !dbg !14
  %23 = icmp slt i32 %19, 32, !dbg !14
  %24 = shl i32 %9, 2, !dbg !15
  %25 = and i32 %24, 124, !dbg !15
  %26 = icmp samesign ult i32 %25, 96, !dbg !16
  %27 = mul i32 %16, 96, !dbg !17
  %28 = mul i32 %17, 96, !dbg !17
  %29 = mul i32 %18, 96, !dbg !17
  %30 = mul i32 %19, 96, !dbg !17
  %31 = add i32 %27, %25, !dbg !18
  %32 = add i32 %28, %25, !dbg !18
  %33 = add i32 %29, %25, !dbg !18
  %34 = add i32 %30, %25, !dbg !18
  %35 = sext i32 %31 to i64, !dbg !19
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !19
  %37 = sext i32 %32 to i64, !dbg !19
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !19
  %39 = sext i32 %33 to i64, !dbg !19
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !19
  %41 = sext i32 %34 to i64, !dbg !19
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !19
  %43 = and i1 %26, %20, !dbg !20
  %44 = and i1 %26, %21, !dbg !20
  %45 = and i1 %26, %22, !dbg !20
  %46 = and i1 %26, %23, !dbg !20
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %43, i32 0, i1 %43, i32 0, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #5, !dbg !21
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !21
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !21
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !21
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !21
  %52 = bitcast i32 %48 to float, !dbg !21
  %53 = bitcast i32 %49 to float, !dbg !21
  %54 = bitcast i32 %50 to float, !dbg !21
  %55 = bitcast i32 %51 to float, !dbg !21
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #5, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !21
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !21
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !21
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !21
  %61 = bitcast i32 %57 to float, !dbg !21
  %62 = bitcast i32 %58 to float, !dbg !21
  %63 = bitcast i32 %59 to float, !dbg !21
  %64 = bitcast i32 %60 to float, !dbg !21
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #5, !dbg !21
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !21
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !21
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !21
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !21
  %70 = bitcast i32 %66 to float, !dbg !21
  %71 = bitcast i32 %67 to float, !dbg !21
  %72 = bitcast i32 %68 to float, !dbg !21
  %73 = bitcast i32 %69 to float, !dbg !21
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #5, !dbg !21
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !21
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !21
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !21
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !21
  %79 = bitcast i32 %75 to float, !dbg !21
  %80 = bitcast i32 %76 to float, !dbg !21
  %81 = bitcast i32 %77 to float, !dbg !21
  %82 = bitcast i32 %78 to float, !dbg !21
  %83 = sext i32 %16 to i64, !dbg !22
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !22
  %85 = sext i32 %17 to i64, !dbg !22
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !22
  %87 = sext i32 %18 to i64, !dbg !22
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !22
  %89 = sext i32 %19 to i64, !dbg !22
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !22
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %20) #5, !dbg !23
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %20) #5, !dbg !23
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %20) #5, !dbg !23
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %20) #5, !dbg !23
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %21) #5, !dbg !23
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %21) #5, !dbg !23
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %21) #5, !dbg !23
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %21) #5, !dbg !23
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %22) #5, !dbg !23
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %22) #5, !dbg !23
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %22) #5, !dbg !23
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %22) #5, !dbg !23
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %23) #5, !dbg !23
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %23) #5, !dbg !23
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %23) #5, !dbg !23
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %23) #5, !dbg !23
  %107 = fmul float %52, %52, !dbg !24
  %108 = fmul float %53, %53, !dbg !24
  %109 = fmul float %54, %54, !dbg !24
  %110 = fmul float %55, %55, !dbg !24
  %111 = fmul float %61, %61, !dbg !24
  %112 = fmul float %62, %62, !dbg !24
  %113 = fmul float %63, %63, !dbg !24
  %114 = fmul float %64, %64, !dbg !24
  %115 = fmul float %70, %70, !dbg !24
  %116 = fmul float %71, %71, !dbg !24
  %117 = fmul float %72, %72, !dbg !24
  %118 = fmul float %73, %73, !dbg !24
  %119 = fmul float %79, %79, !dbg !24
  %120 = fmul float %80, %80, !dbg !24
  %121 = fmul float %81, %81, !dbg !24
  %122 = fmul float %82, %82, !dbg !24
  %123 = fadd float %107, %108, !dbg !25
  %124 = fadd float %109, %123, !dbg !25
  %125 = fadd float %110, %124, !dbg !25
  %126 = select i1 %43, float %125, float 0.000000e+00, !dbg !25
  %127 = fadd float %111, %112, !dbg !25
  %128 = fadd float %113, %127, !dbg !25
  %129 = fadd float %114, %128, !dbg !25
  %130 = select i1 %44, float %129, float 0.000000e+00, !dbg !25
  %131 = fadd float %115, %116, !dbg !25
  %132 = fadd float %117, %131, !dbg !25
  %133 = fadd float %118, %132, !dbg !25
  %134 = select i1 %45, float %133, float 0.000000e+00, !dbg !25
  %135 = fadd float %119, %120, !dbg !25
  %136 = fadd float %121, %135, !dbg !25
  %137 = fadd float %122, %136, !dbg !25
  %138 = select i1 %46, float %137, float 0.000000e+00, !dbg !25
  %139 = bitcast float %126 to i32, !dbg !30
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 16, i32 31), !dbg !30
  %141 = bitcast i32 %140 to float, !dbg !30
  %142 = fadd float %126, %141, !dbg !25
  %143 = bitcast float %142 to i32, !dbg !30
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 8, i32 31), !dbg !30
  %145 = bitcast i32 %144 to float, !dbg !30
  %146 = fadd float %142, %145, !dbg !25
  %147 = bitcast float %146 to i32, !dbg !30
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 4, i32 31), !dbg !30
  %149 = bitcast i32 %148 to float, !dbg !30
  %150 = fadd float %146, %149, !dbg !25
  %151 = bitcast float %150 to i32, !dbg !30
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 2, i32 31), !dbg !30
  %153 = bitcast i32 %152 to float, !dbg !30
  %154 = fadd float %150, %153, !dbg !25
  %155 = bitcast float %154 to i32, !dbg !30
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 1, i32 31), !dbg !30
  %157 = bitcast i32 %156 to float, !dbg !30
  %158 = fadd float %154, %157, !dbg !25
  %159 = bitcast float %130 to i32, !dbg !30
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 16, i32 31), !dbg !30
  %161 = bitcast i32 %160 to float, !dbg !30
  %162 = fadd float %130, %161, !dbg !25
  %163 = bitcast float %162 to i32, !dbg !30
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 8, i32 31), !dbg !30
  %165 = bitcast i32 %164 to float, !dbg !30
  %166 = fadd float %162, %165, !dbg !25
  %167 = bitcast float %166 to i32, !dbg !30
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 4, i32 31), !dbg !30
  %169 = bitcast i32 %168 to float, !dbg !30
  %170 = fadd float %166, %169, !dbg !25
  %171 = bitcast float %170 to i32, !dbg !30
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 2, i32 31), !dbg !30
  %173 = bitcast i32 %172 to float, !dbg !30
  %174 = fadd float %170, %173, !dbg !25
  %175 = bitcast float %174 to i32, !dbg !30
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 1, i32 31), !dbg !30
  %177 = bitcast i32 %176 to float, !dbg !30
  %178 = fadd float %174, %177, !dbg !25
  %179 = bitcast float %134 to i32, !dbg !30
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 16, i32 31), !dbg !30
  %181 = bitcast i32 %180 to float, !dbg !30
  %182 = fadd float %134, %181, !dbg !25
  %183 = bitcast float %182 to i32, !dbg !30
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 8, i32 31), !dbg !30
  %185 = bitcast i32 %184 to float, !dbg !30
  %186 = fadd float %182, %185, !dbg !25
  %187 = bitcast float %186 to i32, !dbg !30
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 4, i32 31), !dbg !30
  %189 = bitcast i32 %188 to float, !dbg !30
  %190 = fadd float %186, %189, !dbg !25
  %191 = bitcast float %190 to i32, !dbg !30
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 2, i32 31), !dbg !30
  %193 = bitcast i32 %192 to float, !dbg !30
  %194 = fadd float %190, %193, !dbg !25
  %195 = bitcast float %194 to i32, !dbg !30
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 1, i32 31), !dbg !30
  %197 = bitcast i32 %196 to float, !dbg !30
  %198 = fadd float %194, %197, !dbg !25
  %199 = bitcast float %138 to i32, !dbg !30
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 16, i32 31), !dbg !30
  %201 = bitcast i32 %200 to float, !dbg !30
  %202 = fadd float %138, %201, !dbg !25
  %203 = bitcast float %202 to i32, !dbg !30
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 8, i32 31), !dbg !30
  %205 = bitcast i32 %204 to float, !dbg !30
  %206 = fadd float %202, %205, !dbg !25
  %207 = bitcast float %206 to i32, !dbg !30
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 4, i32 31), !dbg !30
  %209 = bitcast i32 %208 to float, !dbg !30
  %210 = fadd float %206, %209, !dbg !25
  %211 = bitcast float %210 to i32, !dbg !30
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 2, i32 31), !dbg !30
  %213 = bitcast i32 %212 to float, !dbg !30
  %214 = fadd float %210, %213, !dbg !25
  %215 = bitcast float %214 to i32, !dbg !30
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 1, i32 31), !dbg !30
  %217 = bitcast i32 %216 to float, !dbg !30
  %218 = fadd float %214, %217, !dbg !25
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %220 = bitcast float %158 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 true) #5, !dbg !31
  %221 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %222 = bitcast float %178 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %222, i1 true) #5, !dbg !31
  %223 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !31
  %224 = bitcast float %198 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #5, !dbg !31
  %225 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !31
  %226 = bitcast float %218 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !31
  %228 = load float, ptr addrspace(3) %227, align 4, !dbg !31
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i = icmp eq i32 %229, 0, !dbg !31
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i = icmp eq i32 %230, 0, !dbg !31
  br i1 %.not.i, label %236, label %231, !dbg !31

231:                                              ; preds = %6
  br i1 %.not1.i, label %234, label %232, !dbg !31

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %228) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %228) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

236:                                              ; preds = %6
  br i1 %.not1.i, label %239, label %237, !dbg !31

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.f(float %228) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.f(float %228) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %232, %234, %237, %239
  %.0.i = phi float [ %233, %232 ], [ %235, %234 ], [ %238, %237 ], [ %240, %239 ], !dbg !31
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i16 = icmp eq i32 %247, 0, !dbg !31
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i19 = icmp eq i32 %248, 0, !dbg !31
  br i1 %.not.i16, label %254, label %249, !dbg !31

249:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %252, label %250, !dbg !31

250:                                              ; preds = %249
  %251 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %158) #5, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

252:                                              ; preds = %249
  %253 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %158) #5, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

254:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %257, label %255, !dbg !31

255:                                              ; preds = %254
  %256 = tail call float @llvm.nvvm.sqrt.rn.f(float %158) #5, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

257:                                              ; preds = %254
  %258 = tail call float @llvm.nvvm.sqrt.approx.f(float %158) #5, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

__nv_sqrtf.exit20:                                ; preds = %250, %252, %255, %257
  %.0.i18 = phi float [ %251, %250 ], [ %253, %252 ], [ %256, %255 ], [ %258, %257 ], !dbg !31
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i36 = icmp eq i32 %265, 0, !dbg !31
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i39 = icmp eq i32 %266, 0, !dbg !31
  br i1 %.not.i36, label %272, label %267, !dbg !31

267:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i39, label %270, label %268, !dbg !31

268:                                              ; preds = %267
  %269 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %178) #5, !dbg !31
  br label %__nv_sqrtf.exit40, !dbg !31

270:                                              ; preds = %267
  %271 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %178) #5, !dbg !31
  br label %__nv_sqrtf.exit40, !dbg !31

272:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i39, label %275, label %273, !dbg !31

273:                                              ; preds = %272
  %274 = tail call float @llvm.nvvm.sqrt.rn.f(float %178) #5, !dbg !31
  br label %__nv_sqrtf.exit40, !dbg !31

275:                                              ; preds = %272
  %276 = tail call float @llvm.nvvm.sqrt.approx.f(float %178) #5, !dbg !31
  br label %__nv_sqrtf.exit40, !dbg !31

__nv_sqrtf.exit40:                                ; preds = %268, %270, %273, %275
  %.0.i38 = phi float [ %269, %268 ], [ %271, %270 ], [ %274, %273 ], [ %276, %275 ], !dbg !31
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i56 = icmp eq i32 %283, 0, !dbg !31
  %284 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i59 = icmp eq i32 %284, 0, !dbg !31
  br i1 %.not.i56, label %290, label %285, !dbg !31

285:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i59, label %288, label %286, !dbg !31

286:                                              ; preds = %285
  %287 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %198) #5, !dbg !31
  br label %__nv_sqrtf.exit60, !dbg !31

288:                                              ; preds = %285
  %289 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %198) #5, !dbg !31
  br label %__nv_sqrtf.exit60, !dbg !31

290:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i59, label %293, label %291, !dbg !31

291:                                              ; preds = %290
  %292 = tail call float @llvm.nvvm.sqrt.rn.f(float %198) #5, !dbg !31
  br label %__nv_sqrtf.exit60, !dbg !31

293:                                              ; preds = %290
  %294 = tail call float @llvm.nvvm.sqrt.approx.f(float %198) #5, !dbg !31
  br label %__nv_sqrtf.exit60, !dbg !31

__nv_sqrtf.exit60:                                ; preds = %286, %288, %291, %293
  %.0.i58 = phi float [ %287, %286 ], [ %289, %288 ], [ %292, %291 ], [ %294, %293 ], !dbg !31
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %296 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i76 = icmp eq i32 %301, 0, !dbg !31
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i79 = icmp eq i32 %302, 0, !dbg !31
  br i1 %.not.i76, label %308, label %303, !dbg !31

303:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i79, label %306, label %304, !dbg !31

304:                                              ; preds = %303
  %305 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %218) #5, !dbg !31
  br label %__nv_sqrtf.exit80, !dbg !31

306:                                              ; preds = %303
  %307 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %218) #5, !dbg !31
  br label %__nv_sqrtf.exit80, !dbg !31

308:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i79, label %311, label %309, !dbg !31

309:                                              ; preds = %308
  %310 = tail call float @llvm.nvvm.sqrt.rn.f(float %218) #5, !dbg !31
  br label %__nv_sqrtf.exit80, !dbg !31

311:                                              ; preds = %308
  %312 = tail call float @llvm.nvvm.sqrt.approx.f(float %218) #5, !dbg !31
  br label %__nv_sqrtf.exit80, !dbg !31

__nv_sqrtf.exit80:                                ; preds = %304, %306, %309, %311
  %.0.i78 = phi float [ %305, %304 ], [ %307, %306 ], [ %310, %309 ], [ %312, %311 ], !dbg !31
  %313 = bitcast i32 %106 to float, !dbg !23
  %314 = bitcast i32 %102 to float, !dbg !23
  %315 = bitcast i32 %98 to float, !dbg !23
  %316 = bitcast i32 %94 to float, !dbg !23
  %317 = or disjoint i32 %8, %15, !dbg !13
  %318 = icmp slt i32 %317, 32, !dbg !14
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %316, float %.0.i18) #5, !dbg !32
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %315, float %.0.i38) #5, !dbg !32
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float %.0.i58) #5, !dbg !32
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %313, float %.0.i78) #5, !dbg !32
  %323 = fmul float %319, %52, !dbg !33
  %324 = fmul float %319, %53, !dbg !33
  %325 = fmul float %319, %54, !dbg !33
  %326 = fmul float %319, %55, !dbg !33
  %327 = fmul float %320, %61, !dbg !33
  %328 = fmul float %320, %62, !dbg !33
  %329 = fmul float %320, %63, !dbg !33
  %330 = fmul float %320, %64, !dbg !33
  %331 = fmul float %321, %70, !dbg !33
  %332 = fmul float %321, %71, !dbg !33
  %333 = fmul float %321, %72, !dbg !33
  %334 = fmul float %321, %73, !dbg !33
  %335 = fmul float %322, %79, !dbg !33
  %336 = fmul float %322, %80, !dbg !33
  %337 = fmul float %322, %81, !dbg !33
  %338 = fmul float %322, %82, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %339 = sext i32 %317 to i64, !dbg !35
  %340 = getelementptr float, ptr addrspace(1) %0, i64 %339, !dbg !35
  %341 = and i32 %9, 224, !dbg !36
  %342 = icmp eq i32 %341, 0, !dbg !36
  %343 = bitcast float %.0.i to i32, !dbg !36
  %344 = and i1 %342, %318, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %343, ptr addrspace(1) %340, i1 %344) #5, !dbg !36
  %345 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !37
  %346 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !37
  %347 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !37
  %348 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !37
  %349 = bitcast float %323 to i32, !dbg !38
  %350 = bitcast float %324 to i32, !dbg !38
  %351 = bitcast float %325 to i32, !dbg !38
  %352 = bitcast float %326 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %349, i32 %350, i32 %351, i32 %352, ptr addrspace(1) %345, i1 %43) #5, !dbg !38
  %353 = bitcast float %327 to i32, !dbg !38
  %354 = bitcast float %328 to i32, !dbg !38
  %355 = bitcast float %329 to i32, !dbg !38
  %356 = bitcast float %330 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %353, i32 %354, i32 %355, i32 %356, ptr addrspace(1) %346, i1 %44) #5, !dbg !38
  %357 = bitcast float %331 to i32, !dbg !38
  %358 = bitcast float %332 to i32, !dbg !38
  %359 = bitcast float %333 to i32, !dbg !38
  %360 = bitcast float %334 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %357, i32 %358, i32 %359, i32 %360, ptr addrspace(1) %347, i1 %45) #5, !dbg !38
  %361 = bitcast float %335 to i32, !dbg !38
  %362 = bitcast float %336 to i32, !dbg !38
  %363 = bitcast float %337 to i32, !dbg !38
  %364 = bitcast float %338 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %361, i32 %362, i32 %363, i32 %364, ptr addrspace(1) %348, i1 %46) #5, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyqfdqebgw5knkx7hvqfu7joezfy35aag5cjj6j7nw3lhxl2ibjl.py", directory: "inductor_cache/yq")
!4 = !{ptr @triton_per_fused__weight_norm_interface_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_6", linkageName: "triton_per_fused__weight_norm_interface_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 38, scope: !7)
!18 = !DILocation(line: 31, column: 35, scope: !7)
!19 = !DILocation(line: 31, column: 30, scope: !7)
!20 = !DILocation(line: 31, column: 51, scope: !7)
!21 = !DILocation(line: 31, column: 43, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 18, scope: !7)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!29 = !DILocation(line: 36, column: 24, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 37, column: 26, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
!35 = !DILocation(line: 41, column: 28, scope: !7)
!36 = !DILocation(line: 41, column: 39, scope: !7)
!37 = !DILocation(line: 42, column: 25, scope: !7)
!38 = !DILocation(line: 42, column: 44, scope: !7)
!39 = !DILocation(line: 42, column: 4, scope: !7)
