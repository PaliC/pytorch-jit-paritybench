; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__euclidean_dist_argmin_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = shl i32 %4, 6, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 62, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 64, !dbg !14
  %11 = shl i32 %9, 2, !dbg !15
  %12 = or disjoint i32 %11, 4, !dbg !15
  %13 = sext i32 %11 to i64, !dbg !16
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !16
  %15 = sext i32 %12 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 %10) #3, !dbg !17
  %18 = bitcast i32 %17 to float, !dbg !17
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %10) #3, !dbg !17
  %20 = bitcast i32 %19 to float, !dbg !17
  %21 = or disjoint i32 %11, 1, !dbg !18
  %22 = or disjoint i32 %11, 5, !dbg !18
  %23 = sext i32 %21 to i64, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !19
  %25 = sext i32 %22 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %10) #3, !dbg !20
  %28 = bitcast i32 %27 to float, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %10) #3, !dbg !20
  %30 = bitcast i32 %29 to float, !dbg !20
  %31 = or disjoint i32 %11, 2, !dbg !21
  %32 = or disjoint i32 %11, 6, !dbg !21
  %33 = sext i32 %31 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !22
  %35 = sext i32 %32 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %10) #3, !dbg !23
  %38 = bitcast i32 %37 to float, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %10) #3, !dbg !23
  %40 = bitcast i32 %39 to float, !dbg !23
  %41 = or disjoint i32 %11, 3, !dbg !24
  %42 = or disjoint i32 %11, 7, !dbg !24
  %43 = sext i32 %41 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !25
  %45 = sext i32 %42 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !25
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %10) #3, !dbg !26
  %48 = bitcast i32 %47 to float, !dbg !26
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %10) #3, !dbg !26
  %50 = bitcast i32 %49 to float, !dbg !26
  %.inv = fcmp ole float %18, 0.000000e+00, !dbg !27
  %51 = select i1 %.inv, float 0.000000e+00, float %18, !dbg !27
  %.inv1 = fcmp ole float %20, 0.000000e+00, !dbg !27
  %52 = select i1 %.inv1, float 0.000000e+00, float %20, !dbg !27
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %53, 0, !dbg !31
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %54, 0, !dbg !31
  br i1 %.not.i, label %60, label %55, !dbg !31

55:                                               ; preds = %3
  br i1 %.not1.i, label %58, label %56, !dbg !31

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

60:                                               ; preds = %3
  br i1 %.not1.i, label %63, label %61, !dbg !31

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %56, %58, %61, %63
  %.0.i = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !31
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i9 = icmp eq i32 %65, 0, !dbg !31
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i12 = icmp eq i32 %66, 0, !dbg !31
  br i1 %.not.i9, label %72, label %67, !dbg !31

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %70, label %68, !dbg !31

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !31
  br label %__nv_sqrtf.exit13, !dbg !31

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !31
  br label %__nv_sqrtf.exit13, !dbg !31

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %75, label %73, !dbg !31

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !31
  br label %__nv_sqrtf.exit13, !dbg !31

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !31
  br label %__nv_sqrtf.exit13, !dbg !31

__nv_sqrtf.exit13:                                ; preds = %68, %70, %73, %75
  %.0.i11 = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !31
  %.inv2 = fcmp ole float %28, 0.000000e+00, !dbg !32
  %77 = select i1 %.inv2, float 0.000000e+00, float %28, !dbg !32
  %.inv3 = fcmp ole float %30, 0.000000e+00, !dbg !32
  %78 = select i1 %.inv3, float 0.000000e+00, float %30, !dbg !32
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i14 = icmp eq i32 %79, 0, !dbg !34
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i17 = icmp eq i32 %80, 0, !dbg !34
  br i1 %.not.i14, label %86, label %81, !dbg !34

81:                                               ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %84, label %82, !dbg !34

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !34
  br label %__nv_sqrtf.exit18, !dbg !34

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !34
  br label %__nv_sqrtf.exit18, !dbg !34

86:                                               ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %89, label %87, !dbg !34

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !34
  br label %__nv_sqrtf.exit18, !dbg !34

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !34
  br label %__nv_sqrtf.exit18, !dbg !34

__nv_sqrtf.exit18:                                ; preds = %82, %84, %87, %89
  %.0.i16 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !34
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i19 = icmp eq i32 %91, 0, !dbg !34
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i22 = icmp eq i32 %92, 0, !dbg !34
  br i1 %.not.i19, label %98, label %93, !dbg !34

93:                                               ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %96, label %94, !dbg !34

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !34
  br label %__nv_sqrtf.exit23, !dbg !34

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !34
  br label %__nv_sqrtf.exit23, !dbg !34

98:                                               ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %101, label %99, !dbg !34

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !34
  br label %__nv_sqrtf.exit23, !dbg !34

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !34
  br label %__nv_sqrtf.exit23, !dbg !34

__nv_sqrtf.exit23:                                ; preds = %94, %96, %99, %101
  %.0.i21 = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !34
  %.inv5 = fcmp ole float %38, 0.000000e+00, !dbg !35
  %103 = select i1 %.inv5, float 0.000000e+00, float %38, !dbg !35
  %.inv6 = fcmp ole float %40, 0.000000e+00, !dbg !35
  %104 = select i1 %.inv6, float 0.000000e+00, float %40, !dbg !35
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i24 = icmp eq i32 %105, 0, !dbg !37
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i27 = icmp eq i32 %106, 0, !dbg !37
  br i1 %.not.i24, label %112, label %107, !dbg !37

107:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %110, label %108, !dbg !37

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #3, !dbg !37
  br label %__nv_sqrtf.exit28, !dbg !37

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #3, !dbg !37
  br label %__nv_sqrtf.exit28, !dbg !37

112:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %115, label %113, !dbg !37

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #3, !dbg !37
  br label %__nv_sqrtf.exit28, !dbg !37

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #3, !dbg !37
  br label %__nv_sqrtf.exit28, !dbg !37

__nv_sqrtf.exit28:                                ; preds = %108, %110, %113, %115
  %.0.i26 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !37
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i29 = icmp eq i32 %117, 0, !dbg !37
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i32 = icmp eq i32 %118, 0, !dbg !37
  br i1 %.not.i29, label %124, label %119, !dbg !37

119:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %122, label %120, !dbg !37

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #3, !dbg !37
  br label %__nv_sqrtf.exit33, !dbg !37

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #3, !dbg !37
  br label %__nv_sqrtf.exit33, !dbg !37

124:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %127, label %125, !dbg !37

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #3, !dbg !37
  br label %__nv_sqrtf.exit33, !dbg !37

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #3, !dbg !37
  br label %__nv_sqrtf.exit33, !dbg !37

__nv_sqrtf.exit33:                                ; preds = %120, %122, %125, %127
  %.0.i31 = phi float [ %121, %120 ], [ %123, %122 ], [ %126, %125 ], [ %128, %127 ], !dbg !37
  %.inv7 = fcmp ole float %48, 0.000000e+00, !dbg !38
  %129 = select i1 %.inv7, float 0.000000e+00, float %48, !dbg !38
  %.inv8 = fcmp ole float %50, 0.000000e+00, !dbg !38
  %130 = select i1 %.inv8, float 0.000000e+00, float %50, !dbg !38
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i34 = icmp eq i32 %131, 0, !dbg !40
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i37 = icmp eq i32 %132, 0, !dbg !40
  br i1 %.not.i34, label %138, label %133, !dbg !40

133:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %136, label %134, !dbg !40

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #3, !dbg !40
  br label %__nv_sqrtf.exit38, !dbg !40

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #3, !dbg !40
  br label %__nv_sqrtf.exit38, !dbg !40

138:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %141, label %139, !dbg !40

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #3, !dbg !40
  br label %__nv_sqrtf.exit38, !dbg !40

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #3, !dbg !40
  br label %__nv_sqrtf.exit38, !dbg !40

__nv_sqrtf.exit38:                                ; preds = %134, %136, %139, %141
  %.0.i36 = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !40
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i39 = icmp eq i32 %143, 0, !dbg !40
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i42 = icmp eq i32 %144, 0, !dbg !40
  br i1 %.not.i39, label %150, label %145, !dbg !40

145:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %148, label %146, !dbg !40

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #3, !dbg !40
  br label %__nv_sqrtf.exit43, !dbg !40

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #3, !dbg !40
  br label %__nv_sqrtf.exit43, !dbg !40

150:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %153, label %151, !dbg !40

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #3, !dbg !40
  br label %__nv_sqrtf.exit43, !dbg !40

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #3, !dbg !40
  br label %__nv_sqrtf.exit43, !dbg !40

__nv_sqrtf.exit43:                                ; preds = %146, %148, %151, %153
  %.0.i41 = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !40
  %155 = fcmp olt float %.0.i11, %.0.i21, !dbg !41
  %156 = fcmp uno float %.0.i11, 0.000000e+00, !dbg !42
  %157 = fcmp uno float %.0.i21, 0.000000e+00, !dbg !43
  %158 = xor i1 %157, true, !dbg !44
  %159 = and i1 %156, %158, !dbg !44
  %160 = or i1 %155, %159, !dbg !45
  %161 = fcmp oeq float %.0.i11, %.0.i21, !dbg !46
  %162 = and i1 %156, %157, !dbg !47
  %163 = or i1 %161, %162, !dbg !48
  %164 = or i1 %160, %163, !dbg !49
  %165 = select i1 %164, float %.0.i11, float %.0.i21, !dbg !50
  %166 = fcmp olt float %165, %.0.i31, !dbg !51
  %167 = fcmp uno float %165, 0.000000e+00, !dbg !52
  %168 = fcmp uno float %.0.i31, 0.000000e+00, !dbg !53
  %169 = xor i1 %168, true, !dbg !54
  %170 = and i1 %167, %169, !dbg !54
  %171 = or i1 %166, %170, !dbg !55
  %172 = fcmp oeq float %165, %.0.i31, !dbg !56
  %173 = and i1 %167, %168, !dbg !57
  %174 = or i1 %172, %173, !dbg !58
  %175 = or i1 %171, %174, !dbg !59
  %not.4 = xor i1 %164, true, !dbg !60
  %176 = zext i1 %not.4 to i64, !dbg !60
  %177 = select i1 %175, i64 %176, i64 2, !dbg !61
  %178 = fcmp olt float %.0.i, %.0.i16, !dbg !41
  %179 = fcmp uno float %.0.i, 0.000000e+00, !dbg !42
  %180 = fcmp uno float %.0.i16, 0.000000e+00, !dbg !43
  %181 = xor i1 %180, true, !dbg !44
  %182 = and i1 %179, %181, !dbg !44
  %183 = or i1 %178, %182, !dbg !45
  %184 = fcmp oeq float %.0.i, %.0.i16, !dbg !46
  %185 = and i1 %179, %180, !dbg !47
  %186 = or i1 %184, %185, !dbg !48
  %187 = or i1 %183, %186, !dbg !49
  %188 = select i1 %187, float %.0.i, float %.0.i16, !dbg !50
  %189 = fcmp olt float %188, %.0.i26, !dbg !51
  %190 = fcmp uno float %188, 0.000000e+00, !dbg !52
  %191 = fcmp uno float %.0.i26, 0.000000e+00, !dbg !53
  %192 = xor i1 %191, true, !dbg !54
  %193 = and i1 %190, %192, !dbg !54
  %194 = or i1 %189, %193, !dbg !55
  %195 = fcmp oeq float %188, %.0.i26, !dbg !56
  %196 = and i1 %190, %191, !dbg !57
  %197 = or i1 %195, %196, !dbg !58
  %198 = or i1 %194, %197, !dbg !59
  %not. = xor i1 %187, true, !dbg !60
  %199 = zext i1 %not. to i64, !dbg !60
  %200 = select i1 %198, i64 %199, i64 2, !dbg !61
  %201 = select i1 %175, float %165, float %.0.i31, !dbg !62
  %202 = select i1 %198, float %188, float %.0.i26, !dbg !62
  %203 = fcmp olt float %202, %.0.i36, !dbg !63
  %204 = fcmp olt float %201, %.0.i41, !dbg !63
  %205 = fcmp oeq float %202, %.0.i36, !dbg !64
  %206 = fcmp oeq float %201, %.0.i41, !dbg !64
  %207 = fcmp uno float %202, 0.000000e+00, !dbg !65
  %208 = fcmp uno float %201, 0.000000e+00, !dbg !65
  %209 = fcmp uno float %.0.i36, 0.000000e+00, !dbg !66
  %210 = fcmp uno float %.0.i41, 0.000000e+00, !dbg !66
  %211 = xor i1 %209, true, !dbg !67
  %212 = and i1 %207, %211, !dbg !67
  %213 = xor i1 %210, true, !dbg !67
  %214 = and i1 %208, %213, !dbg !67
  %215 = or i1 %203, %212, !dbg !68
  %216 = or i1 %204, %214, !dbg !68
  %217 = and i1 %207, %209, !dbg !69
  %218 = and i1 %208, %210, !dbg !69
  %219 = or i1 %205, %217, !dbg !70
  %220 = or i1 %206, %218, !dbg !70
  %221 = or i1 %215, %219, !dbg !71
  %222 = or i1 %216, %220, !dbg !71
  %223 = select i1 %221, i64 %200, i64 3, !dbg !72
  %224 = select i1 %222, i64 %177, i64 3, !dbg !72
  %225 = sext i32 %9 to i64, !dbg !73
  %226 = getelementptr i64, ptr addrspace(1) %1, i64 %225, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %223, i64 %224, ptr addrspace(1) %226, i1 %10) #3, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cg7crnlor3u23dwyualwy5tgz5jh46p5hlb7gajkoqplsxu3o2el.py", directory: "inductor_cache/g7")
!4 = !{ptr @triton_poi_fused__euclidean_dist_argmin_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__euclidean_dist_argmin_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__euclidean_dist_argmin_2", linkageName: "triton_poi_fused__euclidean_dist_argmin_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 34, scope: !7)
!19 = !DILocation(line: 26, column: 30, scope: !7)
!20 = !DILocation(line: 26, column: 41, scope: !7)
!21 = !DILocation(line: 27, column: 35, scope: !7)
!22 = !DILocation(line: 27, column: 31, scope: !7)
!23 = !DILocation(line: 27, column: 42, scope: !7)
!24 = !DILocation(line: 28, column: 35, scope: !7)
!25 = !DILocation(line: 28, column: 31, scope: !7)
!26 = !DILocation(line: 28, column: 42, scope: !7)
!27 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 30, column: 40, scope: !7)
!31 = !DILocation(line: 31, column: 26, scope: !7)
!32 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !33)
!33 = !DILocation(line: 32, column: 40, scope: !7)
!34 = !DILocation(line: 33, column: 26, scope: !7)
!35 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !36)
!36 = !DILocation(line: 49, column: 42, scope: !7)
!37 = !DILocation(line: 50, column: 27, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !39)
!39 = !DILocation(line: 65, column: 42, scope: !7)
!40 = !DILocation(line: 66, column: 27, scope: !7)
!41 = !DILocation(line: 34, column: 18, scope: !7)
!42 = !DILocation(line: 36, column: 19, scope: !7)
!43 = !DILocation(line: 37, column: 20, scope: !7)
!44 = !DILocation(line: 38, column: 19, scope: !7)
!45 = !DILocation(line: 39, column: 19, scope: !7)
!46 = !DILocation(line: 35, column: 19, scope: !7)
!47 = !DILocation(line: 40, column: 19, scope: !7)
!48 = !DILocation(line: 41, column: 19, scope: !7)
!49 = !DILocation(line: 46, column: 20, scope: !7)
!50 = !DILocation(line: 47, column: 34, scope: !7)
!51 = !DILocation(line: 51, column: 20, scope: !7)
!52 = !DILocation(line: 53, column: 21, scope: !7)
!53 = !DILocation(line: 54, column: 21, scope: !7)
!54 = !DILocation(line: 55, column: 20, scope: !7)
!55 = !DILocation(line: 56, column: 20, scope: !7)
!56 = !DILocation(line: 52, column: 21, scope: !7)
!57 = !DILocation(line: 57, column: 20, scope: !7)
!58 = !DILocation(line: 58, column: 20, scope: !7)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 48, column: 35, scope: !7)
!61 = !DILocation(line: 64, column: 35, scope: !7)
!62 = !DILocation(line: 63, column: 35, scope: !7)
!63 = !DILocation(line: 67, column: 20, scope: !7)
!64 = !DILocation(line: 68, column: 21, scope: !7)
!65 = !DILocation(line: 69, column: 21, scope: !7)
!66 = !DILocation(line: 70, column: 21, scope: !7)
!67 = !DILocation(line: 71, column: 20, scope: !7)
!68 = !DILocation(line: 72, column: 20, scope: !7)
!69 = !DILocation(line: 73, column: 20, scope: !7)
!70 = !DILocation(line: 74, column: 20, scope: !7)
!71 = !DILocation(line: 78, column: 20, scope: !7)
!72 = !DILocation(line: 80, column: 35, scope: !7)
!73 = !DILocation(line: 81, column: 25, scope: !7)
!74 = !DILocation(line: 81, column: 37, scope: !7)
!75 = !DILocation(line: 81, column: 4, scope: !7)
