; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_constant_pad_nd_div_mul_relu_sqrt_sub_var_mean_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 62, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 40, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %15 = sdiv i32 %.frozen, 10, !dbg !15
  %16 = mul i32 %15, 10, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = add nsw i32 %.decomposed, -6, !dbg !17
  %18 = icmp sgt i32 %.decomposed, 5, !dbg !18
  %19 = shl nsw i32 %15, 2, !dbg !19
  %20 = add nsw i32 %17, %19, !dbg !20
  %21 = sext i32 %20 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !21
  %23 = and i1 %14, %18, !dbg !22
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #1, !dbg !23
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !23
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !23
  %27 = bitcast i32 %25 to float, !dbg !23
  %28 = bitcast i32 %26 to float, !dbg !23
  %29 = sext i32 %15 to i64, !dbg !24
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !24
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %23, i32 0, i1 %23) #1, !dbg !25
  %32 = bitcast i32 %31 to float, !dbg !25
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %23, i32 0, i1 %23) #1, !dbg !25
  %34 = bitcast i32 %33 to float, !dbg !25
  %35 = fsub float %27, %32, !dbg !26
  %36 = fsub float %28, %34, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %23, i32 0, i1 %23) #1, !dbg !28
  %39 = bitcast i32 %38 to float, !dbg !28
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %23, i32 0, i1 %23) #1, !dbg !28
  %41 = bitcast i32 %40 to float, !dbg !28
  %42 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %35, float %39) #1, !dbg !29
  %43 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float %41) #1, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %23, i32 0, i1 %23) #1, !dbg !31
  %46 = bitcast i32 %45 to float, !dbg !31
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %23, i32 0, i1 %23) #1, !dbg !31
  %48 = bitcast i32 %47 to float, !dbg !31
  %49 = fmul float %42, %46, !dbg !32
  %50 = fmul float %43, %48, !dbg !32
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !33
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %23, i32 0, i1 %23) #1, !dbg !34
  %53 = bitcast i32 %52 to float, !dbg !34
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %23, i32 0, i1 %23) #1, !dbg !34
  %55 = bitcast i32 %54 to float, !dbg !34
  %56 = fadd float %49, %53, !dbg !35
  %57 = fadd float %50, %55, !dbg !35
  %58 = fcmp olt float %56, 0.000000e+00, !dbg !36
  %59 = fcmp olt float %57, 0.000000e+00, !dbg !36
  %60 = select i1 %58, float 0.000000e+00, float %56, !dbg !40
  %61 = select i1 %59, float 0.000000e+00, float %57, !dbg !40
  %62 = sext i32 %13 to i64, !dbg !41
  %63 = getelementptr float, ptr addrspace(1) %5, i64 %62, !dbg !41
  %64 = bitcast float %60 to i32, !dbg !42
  %65 = select i1 %18, i32 %64, i32 0, !dbg !43
  %66 = bitcast float %61 to i32, !dbg !42
  %67 = select i1 %18, i32 %66, i32 0, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %65, i32 %67, ptr addrspace(1) %63, i1 %14) #1, !dbg !42
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwezh7mubbdpxoho2wbx7gqbyw4zpiqlq5i6ckr6a75qmpw5lvih.py", directory: "inductor_cache/we")
!4 = !{ptr @triton_poi_fused_add_constant_pad_nd_div_mul_relu_sqrt_sub_var_mean_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_constant_pad_nd_div_mul_relu_sqrt_sub_var_mean_3, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_constant_pad_nd_div_mul_relu_sqrt_sub_var_mean_3", linkageName: "triton_poi_fused_add_constant_pad_nd_div_mul_relu_sqrt_sub_var_mean_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 18, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 44, scope: !7)
!20 = !DILocation(line: 30, column: 42, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 56, scope: !7)
!23 = !DILocation(line: 30, column: 49, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 18, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 35, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 31, scope: !7)
!34 = !DILocation(line: 37, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 19, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 40, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 43, column: 25, scope: !7)
!42 = !DILocation(line: 43, column: 37, scope: !7)
!43 = !DILocation(line: 42, column: 34, scope: !7)
!44 = !DILocation(line: 43, column: 4, scope: !7)
