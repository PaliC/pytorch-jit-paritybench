; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %15 = shl i32 %14, 7, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = lshr i32 %16, 2, !dbg !12
  %18 = and i32 %17, 63, !dbg !12
  %19 = or disjoint i32 %18, 64, !dbg !12
  %20 = or disjoint i32 %15, %18, !dbg !13
  %21 = or disjoint i32 %15, %19, !dbg !13
  %22 = shl i32 %16, 2, !dbg !14
  %23 = and i32 %22, 12, !dbg !14
  %24 = srem i32 %20, 1024, !dbg !15
  %25 = srem i32 %21, 1024, !dbg !15
  %26 = shl i32 %20, 4, !dbg !16
  %27 = shl i32 %21, 4, !dbg !16
  %28 = or disjoint i32 %26, %23, !dbg !17
  %29 = or disjoint i32 %27, %23, !dbg !17
  %30 = sext i32 %28 to i64, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !18
  %32 = sext i32 %29 to i64, !dbg !18
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !18
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #5, !dbg !19
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #5, !dbg !19
  %36 = sext i32 %24 to i64, !dbg !20
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !20
  %38 = sext i32 %25 to i64, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !20
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #5, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #5, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #5, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #5, !dbg !21
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !21
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !21
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !22
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !23
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !23
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !23
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !23
  %54 = bitcast i32 %53 to float, !dbg !23
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #5, !dbg !23
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #5, !dbg !23
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #5, !dbg !23
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #5, !dbg !23
  %59 = bitcast i32 %58 to float, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !24
  %61 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #5, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #5, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #5, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #5, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #5, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #5, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #5, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #5, !dbg !25
  %70 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !26
  %71 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !26
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #5, !dbg !27
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #5, !dbg !27
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #5, !dbg !27
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #5, !dbg !27
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #5, !dbg !27
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #5, !dbg !27
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #5, !dbg !27
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #5, !dbg !27
  %80 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !28
  %81 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !28
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 true) #5, !dbg !29
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 true) #5, !dbg !29
  %84 = getelementptr float, ptr addrspace(1) %8, i64 %36, !dbg !30
  %85 = getelementptr float, ptr addrspace(1) %8, i64 %38, !dbg !30
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #5, !dbg !31
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #5, !dbg !31
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #5, !dbg !31
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #5, !dbg !31
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #5, !dbg !31
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #5, !dbg !31
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #5, !dbg !31
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #5, !dbg !31
  %94 = getelementptr float, ptr addrspace(1) %9, i64 %36, !dbg !32
  %95 = getelementptr float, ptr addrspace(1) %9, i64 %38, !dbg !32
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #5, !dbg !33
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #5, !dbg !33
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #5, !dbg !33
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #5, !dbg !33
  %100 = bitcast i32 %99 to float, !dbg !33
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #5, !dbg !33
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #5, !dbg !33
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #5, !dbg !33
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #5, !dbg !33
  %105 = bitcast i32 %104 to float, !dbg !33
  %106 = getelementptr float, ptr addrspace(1) %10, i64 %36, !dbg !34
  %107 = getelementptr float, ptr addrspace(1) %10, i64 %38, !dbg !34
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #5, !dbg !35
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #5, !dbg !35
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #5, !dbg !35
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #5, !dbg !35
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #5, !dbg !35
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #5, !dbg !35
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #5, !dbg !35
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #5, !dbg !35
  %116 = getelementptr float, ptr addrspace(1) %11, i64 %36, !dbg !36
  %117 = getelementptr float, ptr addrspace(1) %11, i64 %38, !dbg !36
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #5, !dbg !37
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #5, !dbg !37
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #5, !dbg !37
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #5, !dbg !37
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #5, !dbg !37
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #5, !dbg !37
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #5, !dbg !37
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #5, !dbg !37
  %126 = fadd float %54, 0x3EE4F8B580000000, !dbg !38
  %127 = fadd float %59, 0x3EE4F8B580000000, !dbg !38
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i13 = icmp eq i32 %134, 0, !dbg !39
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %.not1.i16 = icmp eq i32 %135, 0, !dbg !39
  br i1 %.not.i13, label %141, label %136, !dbg !39

136:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %139, label %137, !dbg !39

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #5, !dbg !39
  br label %__nv_sqrtf.exit17, !dbg !39

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #5, !dbg !39
  br label %__nv_sqrtf.exit17, !dbg !39

141:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %144, label %142, !dbg !39

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #5, !dbg !39
  br label %__nv_sqrtf.exit17, !dbg !39

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #5, !dbg !39
  br label %__nv_sqrtf.exit17, !dbg !39

__nv_sqrtf.exit17:                                ; preds = %137, %139, %142, %144
  %.0.i15 = phi float [ %138, %137 ], [ %140, %139 ], [ %143, %142 ], [ %145, %144 ], !dbg !39
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i33 = icmp eq i32 %152, 0, !dbg !39
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %.not1.i36 = icmp eq i32 %153, 0, !dbg !39
  br i1 %.not.i33, label %159, label %154, !dbg !39

154:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i36, label %157, label %155, !dbg !39

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #5, !dbg !39
  br label %__nv_sqrtf.exit37, !dbg !39

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #5, !dbg !39
  br label %__nv_sqrtf.exit37, !dbg !39

159:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i36, label %162, label %160, !dbg !39

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #5, !dbg !39
  br label %__nv_sqrtf.exit37, !dbg !39

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #5, !dbg !39
  br label %__nv_sqrtf.exit37, !dbg !39

__nv_sqrtf.exit37:                                ; preds = %155, %157, %160, %162
  %.0.i35 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !39
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #5, !dbg !40
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #5, !dbg !40
  %166 = fadd float %100, 0x3EE4F8B580000000, !dbg !41
  %167 = fadd float %105, 0x3EE4F8B580000000, !dbg !41
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i53 = icmp eq i32 %174, 0, !dbg !42
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i56 = icmp eq i32 %175, 0, !dbg !42
  br i1 %.not.i53, label %181, label %176, !dbg !42

176:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i56, label %179, label %177, !dbg !42

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %166) #5, !dbg !42
  br label %__nv_sqrtf.exit57, !dbg !42

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %166) #5, !dbg !42
  br label %__nv_sqrtf.exit57, !dbg !42

181:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i56, label %184, label %182, !dbg !42

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.f(float %166) #5, !dbg !42
  br label %__nv_sqrtf.exit57, !dbg !42

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.f(float %166) #5, !dbg !42
  br label %__nv_sqrtf.exit57, !dbg !42

__nv_sqrtf.exit57:                                ; preds = %177, %179, %182, %184
  %.0.i55 = phi float [ %178, %177 ], [ %180, %179 ], [ %183, %182 ], [ %185, %184 ], !dbg !42
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i73 = icmp eq i32 %192, 0, !dbg !42
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i76 = icmp eq i32 %193, 0, !dbg !42
  br i1 %.not.i73, label %199, label %194, !dbg !42

194:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i76, label %197, label %195, !dbg !42

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %167) #5, !dbg !42
  br label %__nv_sqrtf.exit77, !dbg !42

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %167) #5, !dbg !42
  br label %__nv_sqrtf.exit77, !dbg !42

199:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i76, label %202, label %200, !dbg !42

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.f(float %167) #5, !dbg !42
  br label %__nv_sqrtf.exit77, !dbg !42

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.f(float %167) #5, !dbg !42
  br label %__nv_sqrtf.exit77, !dbg !42

__nv_sqrtf.exit77:                                ; preds = %195, %197, %200, %202
  %.0.i75 = phi float [ %196, %195 ], [ %198, %197 ], [ %201, %200 ], [ %203, %202 ], !dbg !42
  %204 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !29
  %205 = bitcast i32 %204 to float, !dbg !29
  %206 = bitcast i32 %93 to float, !dbg !31
  %207 = fsub float %205, %206, !dbg !43
  %208 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !29
  %209 = bitcast i32 %208 to float, !dbg !29
  %210 = fsub float %209, %206, !dbg !43
  %211 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !29
  %212 = bitcast i32 %211 to float, !dbg !29
  %213 = fsub float %212, %206, !dbg !43
  %214 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !29
  %215 = bitcast i32 %214 to float, !dbg !29
  %216 = fsub float %215, %206, !dbg !43
  %217 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !29
  %218 = bitcast i32 %217 to float, !dbg !29
  %219 = bitcast i32 %89 to float, !dbg !31
  %220 = fsub float %218, %219, !dbg !43
  %221 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !29
  %222 = bitcast i32 %221 to float, !dbg !29
  %223 = fsub float %222, %219, !dbg !43
  %224 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !29
  %225 = bitcast i32 %224 to float, !dbg !29
  %226 = fsub float %225, %219, !dbg !43
  %227 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !29
  %228 = bitcast i32 %227 to float, !dbg !29
  %229 = fsub float %228, %219, !dbg !43
  %230 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !19
  %231 = bitcast i32 %230 to float, !dbg !19
  %232 = bitcast i32 %47 to float, !dbg !21
  %233 = fsub float %231, %232, !dbg !44
  %234 = fmul float %233, %165, !dbg !45
  %235 = bitcast i32 %69 to float, !dbg !25
  %236 = fmul float %234, %235, !dbg !46
  %237 = bitcast i32 %79 to float, !dbg !27
  %238 = fadd float %236, %237, !dbg !47
  %239 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !19
  %240 = bitcast i32 %239 to float, !dbg !19
  %241 = fsub float %240, %232, !dbg !44
  %242 = fmul float %241, %165, !dbg !45
  %243 = fmul float %242, %235, !dbg !46
  %244 = fadd float %243, %237, !dbg !47
  %245 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !19
  %246 = bitcast i32 %245 to float, !dbg !19
  %247 = fsub float %246, %232, !dbg !44
  %248 = fmul float %247, %165, !dbg !45
  %249 = fmul float %248, %235, !dbg !46
  %250 = fadd float %249, %237, !dbg !47
  %251 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !19
  %252 = bitcast i32 %251 to float, !dbg !19
  %253 = fsub float %252, %232, !dbg !44
  %254 = fmul float %253, %165, !dbg !45
  %255 = fmul float %254, %235, !dbg !46
  %256 = fadd float %255, %237, !dbg !47
  %257 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !19
  %258 = bitcast i32 %257 to float, !dbg !19
  %259 = bitcast i32 %43 to float, !dbg !21
  %260 = fsub float %258, %259, !dbg !44
  %261 = fmul float %260, %164, !dbg !45
  %262 = bitcast i32 %65 to float, !dbg !25
  %263 = fmul float %261, %262, !dbg !46
  %264 = bitcast i32 %75 to float, !dbg !27
  %265 = fadd float %263, %264, !dbg !47
  %266 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !19
  %267 = bitcast i32 %266 to float, !dbg !19
  %268 = fsub float %267, %259, !dbg !44
  %269 = fmul float %268, %164, !dbg !45
  %270 = fmul float %269, %262, !dbg !46
  %271 = fadd float %270, %264, !dbg !47
  %272 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !19
  %273 = bitcast i32 %272 to float, !dbg !19
  %274 = fsub float %273, %259, !dbg !44
  %275 = fmul float %274, %164, !dbg !45
  %276 = fmul float %275, %262, !dbg !46
  %277 = fadd float %276, %264, !dbg !47
  %278 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !19
  %279 = bitcast i32 %278 to float, !dbg !19
  %280 = fsub float %279, %259, !dbg !44
  %281 = fmul float %280, %164, !dbg !45
  %282 = fmul float %281, %262, !dbg !46
  %283 = fadd float %282, %264, !dbg !47
  %284 = bitcast i32 %125 to float, !dbg !37
  %285 = bitcast i32 %121 to float, !dbg !37
  %286 = bitcast i32 %115 to float, !dbg !35
  %287 = bitcast i32 %111 to float, !dbg !35
  %288 = and i32 %16, 127, !dbg !12
  %289 = or disjoint i32 %15, %288, !dbg !13
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i55) #5, !dbg !48
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i75) #5, !dbg !48
  %292 = fmul float %229, %290, !dbg !49
  %293 = fmul float %226, %290, !dbg !49
  %294 = fmul float %223, %290, !dbg !49
  %295 = fmul float %220, %290, !dbg !49
  %296 = fmul float %216, %291, !dbg !49
  %297 = fmul float %213, %291, !dbg !49
  %298 = fmul float %210, %291, !dbg !49
  %299 = fmul float %207, %291, !dbg !49
  %300 = fmul float %292, %287, !dbg !50
  %301 = fmul float %293, %287, !dbg !50
  %302 = fmul float %294, %287, !dbg !50
  %303 = fmul float %295, %287, !dbg !50
  %304 = fmul float %296, %286, !dbg !50
  %305 = fmul float %297, %286, !dbg !50
  %306 = fmul float %298, %286, !dbg !50
  %307 = fmul float %299, %286, !dbg !50
  %308 = fadd float %300, %285, !dbg !51
  %309 = fadd float %301, %285, !dbg !51
  %310 = fadd float %302, %285, !dbg !51
  %311 = fadd float %303, %285, !dbg !51
  %312 = fadd float %304, %284, !dbg !51
  %313 = fadd float %305, %284, !dbg !51
  %314 = fadd float %306, %284, !dbg !51
  %315 = fadd float %307, %284, !dbg !51
  %316 = fcmp olt float %308, 0.000000e+00, !dbg !52
  %317 = fcmp olt float %309, 0.000000e+00, !dbg !52
  %318 = fcmp olt float %310, 0.000000e+00, !dbg !52
  %319 = fcmp olt float %311, 0.000000e+00, !dbg !52
  %320 = fcmp olt float %312, 0.000000e+00, !dbg !52
  %321 = fcmp olt float %313, 0.000000e+00, !dbg !52
  %322 = fcmp olt float %314, 0.000000e+00, !dbg !52
  %323 = fcmp olt float %315, 0.000000e+00, !dbg !52
  %324 = select i1 %316, float 0.000000e+00, float %308, !dbg !56
  %325 = select i1 %317, float 0.000000e+00, float %309, !dbg !56
  %326 = select i1 %318, float 0.000000e+00, float %310, !dbg !56
  %327 = select i1 %319, float 0.000000e+00, float %311, !dbg !56
  %328 = select i1 %320, float 0.000000e+00, float %312, !dbg !56
  %329 = select i1 %321, float 0.000000e+00, float %313, !dbg !56
  %330 = select i1 %322, float 0.000000e+00, float %314, !dbg !56
  %331 = select i1 %323, float 0.000000e+00, float %315, !dbg !56
  %332 = fadd float %283, %324, !dbg !57
  %333 = fadd float %277, %325, !dbg !57
  %334 = fadd float %271, %326, !dbg !57
  %335 = fadd float %265, %327, !dbg !57
  %336 = fadd float %256, %328, !dbg !57
  %337 = fadd float %250, %329, !dbg !57
  %338 = fadd float %244, %330, !dbg !57
  %339 = fadd float %238, %331, !dbg !57
  %340 = fcmp olt float %332, 0.000000e+00, !dbg !58
  %341 = fcmp olt float %333, 0.000000e+00, !dbg !58
  %342 = fcmp olt float %334, 0.000000e+00, !dbg !58
  %343 = fcmp olt float %335, 0.000000e+00, !dbg !58
  %344 = fcmp olt float %336, 0.000000e+00, !dbg !58
  %345 = fcmp olt float %337, 0.000000e+00, !dbg !58
  %346 = fcmp olt float %338, 0.000000e+00, !dbg !58
  %347 = fcmp olt float %339, 0.000000e+00, !dbg !58
  %348 = select i1 %340, float 0.000000e+00, float %332, !dbg !60
  %349 = select i1 %341, float 0.000000e+00, float %333, !dbg !60
  %350 = select i1 %342, float 0.000000e+00, float %334, !dbg !60
  %351 = select i1 %343, float 0.000000e+00, float %335, !dbg !60
  %352 = select i1 %344, float 0.000000e+00, float %336, !dbg !60
  %353 = select i1 %345, float 0.000000e+00, float %337, !dbg !60
  %354 = select i1 %346, float 0.000000e+00, float %338, !dbg !60
  %355 = select i1 %347, float 0.000000e+00, float %339, !dbg !60
  %356 = fadd float %348, %349, !dbg !61
  %357 = fadd float %350, %356, !dbg !61
  %358 = fadd float %351, %357, !dbg !61
  %359 = fadd float %352, %353, !dbg !61
  %360 = fadd float %354, %359, !dbg !61
  %361 = fadd float %355, %360, !dbg !61
  %362 = bitcast float %358 to i32, !dbg !66
  %363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %362, i32 2, i32 31), !dbg !66
  %364 = bitcast i32 %363 to float, !dbg !66
  %365 = fadd float %358, %364, !dbg !61
  %366 = bitcast float %365 to i32, !dbg !66
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 1, i32 31), !dbg !66
  %368 = bitcast i32 %367 to float, !dbg !66
  %369 = fadd float %365, %368, !dbg !61
  %370 = bitcast float %361 to i32, !dbg !66
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 2, i32 31), !dbg !66
  %372 = bitcast i32 %371 to float, !dbg !66
  %373 = fadd float %361, %372, !dbg !61
  %374 = bitcast float %373 to i32, !dbg !66
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 1, i32 31), !dbg !66
  %376 = bitcast i32 %375 to float, !dbg !66
  %377 = fadd float %373, %376, !dbg !61
  %378 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !67
  %379 = bitcast float %369 to <1 x i32>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %378, <1 x i32> %379, i1 true) #5, !dbg !67
  %380 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !67
  %381 = bitcast float %377 to <1 x i32>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %380, <1 x i32> %381, i1 true) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %382 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %288, !dbg !67
  %383 = load float, ptr addrspace(3) %382, align 4, !dbg !67
  %384 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %383, float 1.600000e+01) #5, !dbg !67
  %385 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !68
  %386 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !68
  %387 = bitcast float %348 to i32, !dbg !69
  %388 = bitcast float %349 to i32, !dbg !69
  %389 = bitcast float %350 to i32, !dbg !69
  %390 = bitcast float %351 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %387, i32 %388, i32 %389, i32 %390, ptr addrspace(1) %385, i1 true) #5, !dbg !69
  %391 = bitcast float %352 to i32, !dbg !69
  %392 = bitcast float %353 to i32, !dbg !69
  %393 = bitcast float %354 to i32, !dbg !69
  %394 = bitcast float %355 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %391, i32 %392, i32 %393, i32 %394, ptr addrspace(1) %386, i1 true) #5, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %395 = sext i32 %289 to i64, !dbg !71
  %396 = getelementptr float, ptr addrspace(1) %1, i64 %395, !dbg !71
  %397 = and i32 %16, 128, !dbg !72
  %398 = icmp eq i32 %397, 0, !dbg !72
  %399 = bitcast float %384 to i32, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %399, ptr addrspace(1) %396, i1 %398) #5, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py", directory: "inductor_cache/yu")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_21, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_21, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_21", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 32, column: 38, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 43, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 31, scope: !7)
!25 = !DILocation(line: 35, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 44, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 31, scope: !7)
!33 = !DILocation(line: 39, column: 36, scope: !7)
!34 = !DILocation(line: 40, column: 31, scope: !7)
!35 = !DILocation(line: 40, column: 36, scope: !7)
!36 = !DILocation(line: 41, column: 31, scope: !7)
!37 = !DILocation(line: 41, column: 36, scope: !7)
!38 = !DILocation(line: 44, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 26, scope: !7)
!40 = !DILocation(line: 47, column: 18, scope: !7)
!41 = !DILocation(line: 54, column: 20, scope: !7)
!42 = !DILocation(line: 55, column: 27, scope: !7)
!43 = !DILocation(line: 53, column: 20, scope: !7)
!44 = !DILocation(line: 42, column: 18, scope: !7)
!45 = !DILocation(line: 50, column: 19, scope: !7)
!46 = !DILocation(line: 51, column: 20, scope: !7)
!47 = !DILocation(line: 52, column: 20, scope: !7)
!48 = !DILocation(line: 56, column: 19, scope: !7)
!49 = !DILocation(line: 58, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 60, column: 20, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!55 = !DILocation(line: 62, column: 42, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !55)
!57 = !DILocation(line: 63, column: 20, scope: !7)
!58 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !59)
!59 = !DILocation(line: 64, column: 42, scope: !7)
!60 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !59)
!61 = !DILocation(line: 256, column: 15, scope: !62, inlinedAt: !65)
!62 = distinct !DILexicalBlockFile(scope: !64, file: !63, discriminator: 0)
!63 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!64 = distinct !DILexicalBlockFile(scope: !7, file: !63, discriminator: 0)
!65 = !DILocation(line: 66, column: 26, scope: !7)
!66 = !DILocation(line: 267, column: 36, scope: !64, inlinedAt: !65)
!67 = !DILocation(line: 68, column: 20, scope: !7)
!68 = !DILocation(line: 69, column: 28, scope: !7)
!69 = !DILocation(line: 69, column: 48, scope: !7)
!70 = !DILocation(line: 70, column: 4, scope: !7)
!71 = !DILocation(line: 71, column: 28, scope: !7)
!72 = !DILocation(line: 71, column: 40, scope: !7)
!73 = !DILocation(line: 71, column: 4, scope: !7)
