; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_threshold_backward_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 8, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 254, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = icmp slt i32 %20, 256, !dbg !14
  %22 = sdiv i32 %20, 16, !dbg !15
  %23 = srem i32 %22, 4, !dbg !16
  %24 = sext i32 %20 to i64, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !17
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %21) #3, !dbg !18
  %27 = sext i32 %23 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %21) #3, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %21) #3, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %21) #3, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %21) #3, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %21) #3, !dbg !24
  %36 = bitcast i32 %35 to float, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %21) #3, !dbg !24
  %38 = bitcast i32 %37 to float, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %21) #3, !dbg !26
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %21) #3, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %21) #3, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %21) #3, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %7, i64 %27, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %21) #3, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %21) #3, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %8, i64 %27, !dbg !31
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %21) #3, !dbg !32
  %50 = bitcast i32 %49 to float, !dbg !32
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %21) #3, !dbg !32
  %52 = bitcast i32 %51 to float, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %9, i64 %27, !dbg !33
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %21) #3, !dbg !34
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %21) #3, !dbg !34
  %56 = getelementptr float, ptr addrspace(1) %10, i64 %27, !dbg !35
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %21) #3, !dbg !36
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %21) #3, !dbg !36
  %59 = getelementptr float, ptr addrspace(1) %11, i64 %24, !dbg !37
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 %21) #3, !dbg !38
  %61 = fadd float %36, 0x3EE4F8B580000000, !dbg !39
  %62 = fadd float %38, 0x3EE4F8B580000000, !dbg !39
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i = icmp eq i32 %63, 0, !dbg !40
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i = icmp eq i32 %64, 0, !dbg !40
  br i1 %.not.i, label %70, label %65, !dbg !40

65:                                               ; preds = %14
  br i1 %.not1.i, label %68, label %66, !dbg !40

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

70:                                               ; preds = %14
  br i1 %.not1.i, label %73, label %71, !dbg !40

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %66, %68, %71, %73
  %.0.i = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !40
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i1 = icmp eq i32 %75, 0, !dbg !40
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i4 = icmp eq i32 %76, 0, !dbg !40
  br i1 %.not.i1, label %82, label %77, !dbg !40

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %80, label %78, !dbg !40

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %85, label %83, !dbg !40

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

__nv_sqrtf.exit5:                                 ; preds = %78, %80, %83, %85
  %.0.i3 = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !40
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !41
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !41
  %89 = fadd float %50, 0x3EE4F8B580000000, !dbg !42
  %90 = fadd float %52, 0x3EE4F8B580000000, !dbg !42
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i6 = icmp eq i32 %91, 0, !dbg !43
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i9 = icmp eq i32 %92, 0, !dbg !43
  br i1 %.not.i6, label %98, label %93, !dbg !43

93:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %96, label %94, !dbg !43

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

98:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %101, label %99, !dbg !43

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

__nv_sqrtf.exit10:                                ; preds = %94, %96, %99, %101
  %.0.i8 = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !43
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i11 = icmp eq i32 %103, 0, !dbg !43
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i14 = icmp eq i32 %104, 0, !dbg !43
  br i1 %.not.i11, label %110, label %105, !dbg !43

105:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %108, label %106, !dbg !43

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

110:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %113, label %111, !dbg !43

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

__nv_sqrtf.exit15:                                ; preds = %106, %108, %111, %113
  %.0.i13 = phi float [ %107, %106 ], [ %109, %108 ], [ %112, %111 ], [ %114, %113 ], !dbg !43
  %115 = extractvalue { i32, i32 } %26, 1, !dbg !18
  %116 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !20
  %117 = insertelement <2 x i32> %116, i32 %30, i64 1, !dbg !20
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !20
  %119 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !22
  %120 = insertelement <2 x i32> %119, i32 %33, i64 1, !dbg !22
  %121 = bitcast <2 x i32> %120 to <2 x float>, !dbg !22
  %122 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !26
  %123 = insertelement <2 x i32> %122, i32 %41, i64 1, !dbg !26
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !26
  %125 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !28
  %126 = insertelement <2 x i32> %125, i32 %44, i64 1, !dbg !28
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !28
  %128 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !30
  %129 = insertelement <2 x i32> %128, i32 %47, i64 1, !dbg !30
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !30
  %131 = extractvalue { i32, i32 } %26, 0, !dbg !18
  %132 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !18
  %133 = insertelement <2 x i32> %132, i32 %115, i64 1, !dbg !18
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !18
  %135 = fadd <2 x float> %134, %118, !dbg !44
  %136 = fsub <2 x float> %135, %121, !dbg !45
  %137 = insertelement <2 x float> poison, float %87, i64 0, !dbg !46
  %138 = insertelement <2 x float> %137, float %88, i64 1, !dbg !46
  %139 = fmul <2 x float> %136, %138, !dbg !46
  %140 = extractvalue { i32, i32 } %60, 1, !dbg !38
  %141 = extractvalue { i32, i32 } %60, 0, !dbg !38
  %142 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !36
  %143 = insertelement <2 x i32> %142, i32 %58, i64 1, !dbg !36
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !36
  %145 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !34
  %146 = insertelement <2 x i32> %145, i32 %55, i64 1, !dbg !34
  %147 = bitcast <2 x i32> %146 to <2 x float>, !dbg !34
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !47
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !47
  %bc = bitcast <2 x float> %135 to <2 x i32>, !dbg !48
  %150 = extractelement <2 x i32> %bc, i64 0, !dbg !48
  %bc16 = bitcast <2 x float> %135 to <2 x i32>, !dbg !48
  %151 = extractelement <2 x i32> %bc16, i64 1, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %150, i32 %151, ptr addrspace(1) %25, i1 %21) #3, !dbg !48
  %152 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !49
  %153 = getelementptr i1, ptr addrspace(1) %12, i64 %24, !dbg !50
  %154 = fmul <2 x float> %139, %124, !dbg !51
  %155 = fadd <2 x float> %154, %127, !dbg !52
  %156 = fsub <2 x float> %155, %130, !dbg !53
  %157 = insertelement <2 x i32> poison, i32 %141, i64 0, !dbg !38
  %158 = insertelement <2 x i32> %157, i32 %140, i64 1, !dbg !38
  %159 = bitcast <2 x i32> %158 to <2 x float>, !dbg !38
  %160 = insertelement <2 x float> poison, float %148, i64 0, !dbg !54
  %161 = insertelement <2 x float> %160, float %149, i64 1, !dbg !54
  %162 = fmul <2 x float> %156, %161, !dbg !54
  %163 = fmul <2 x float> %162, %147, !dbg !55
  %164 = fadd <2 x float> %163, %144, !dbg !56
  %165 = fadd <2 x float> %164, %159, !dbg !57
  %166 = fcmp olt <2 x float> %165, zeroinitializer, !dbg !58
  %167 = select <2 x i1> %166, <2 x float> zeroinitializer, <2 x float> %165, !dbg !62
  %168 = fcmp ole <2 x float> %167, zeroinitializer, !dbg !63
  %bc17 = bitcast <2 x float> %167 to <2 x i32>, !dbg !64
  %169 = extractelement <2 x i32> %bc17, i64 0, !dbg !64
  %bc18 = bitcast <2 x float> %167 to <2 x i32>, !dbg !64
  %170 = extractelement <2 x i32> %bc18, i64 1, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %169, i32 %170, ptr addrspace(1) %152, i1 %21) #3, !dbg !64
  %171 = zext <2 x i1> %168 to <2 x i8>, !dbg !65
  %172 = bitcast <2 x i8> %171 to i16, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %172, ptr addrspace(1) %153, i1 %21) #3, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clduyohf6iurdff4m2yy2kgztxbl2defrqqhlpqgf6fi5x77de3i.py", directory: "inductor_cache/ld")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_threshold_backward_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_threshold_backward_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_threshold_backward_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_threshold_backward_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 34, scope: !7)
!18 = !DILocation(line: 26, column: 39, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 36, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 40, column: 18, scope: !7)
!40 = !DILocation(line: 41, column: 26, scope: !7)
!41 = !DILocation(line: 43, column: 19, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 51, column: 27, scope: !7)
!44 = !DILocation(line: 37, column: 18, scope: !7)
!45 = !DILocation(line: 38, column: 18, scope: !7)
!46 = !DILocation(line: 46, column: 19, scope: !7)
!47 = !DILocation(line: 52, column: 19, scope: !7)
!48 = !DILocation(line: 62, column: 39, scope: !7)
!49 = !DILocation(line: 63, column: 28, scope: !7)
!50 = !DILocation(line: 64, column: 25, scope: !7)
!51 = !DILocation(line: 47, column: 20, scope: !7)
!52 = !DILocation(line: 48, column: 20, scope: !7)
!53 = !DILocation(line: 49, column: 20, scope: !7)
!54 = !DILocation(line: 54, column: 20, scope: !7)
!55 = !DILocation(line: 55, column: 20, scope: !7)
!56 = !DILocation(line: 56, column: 20, scope: !7)
!57 = !DILocation(line: 57, column: 20, scope: !7)
!58 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !61)
!59 = distinct !DILexicalBlockFile(scope: !7, file: !60, discriminator: 0)
!60 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!61 = !DILocation(line: 59, column: 42, scope: !7)
!62 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !61)
!63 = !DILocation(line: 61, column: 21, scope: !7)
!64 = !DILocation(line: 63, column: 40, scope: !7)
!65 = !DILocation(line: 64, column: 37, scope: !7)
!66 = !DILocation(line: 64, column: 4, scope: !7)
