; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_leaky_relu_leaky_relu_backward_native_group_norm_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 3, !dbg !12
  %13 = and i32 %12, 1016, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = sdiv i32 %14, 4096, !dbg !14
  %17 = srem i32 %16, 64, !dbg !15
  %18 = sext i32 %14 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !16
  %20 = sext i32 %15 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !16
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #4, !dbg !17
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #4, !dbg !17
  %24 = sdiv i32 %14, 16384, !dbg !18
  %25 = sext i32 %24 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !20
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !22
  %37 = bitcast i32 %36 to float, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !22
  %39 = bitcast i32 %38 to float, !dbg !22
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !22
  %41 = bitcast i32 %40 to float, !dbg !22
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !22
  %43 = bitcast i32 %42 to float, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !22
  %45 = bitcast i32 %44 to float, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !22
  %47 = bitcast i32 %46 to float, !dbg !22
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !22
  %49 = bitcast i32 %48 to float, !dbg !22
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !22
  %51 = bitcast i32 %50 to float, !dbg !22
  %52 = sext i32 %17 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !23
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #4, !dbg !24
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #4, !dbg !24
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #4, !dbg !24
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #4, !dbg !24
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #4, !dbg !24
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #4, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #4, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #4, !dbg !24
  %62 = getelementptr float, ptr addrspace(1) %5, i64 %52, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !26
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !26
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !26
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !26
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !26
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !26
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !26
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !26
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %37, float 1.638400e+04) #4, !dbg !27
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %39, float 1.638400e+04) #4, !dbg !27
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %41, float 1.638400e+04) #4, !dbg !27
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float 1.638400e+04) #4, !dbg !27
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float 1.638400e+04) #4, !dbg !27
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float 1.638400e+04) #4, !dbg !27
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float 1.638400e+04) #4, !dbg !27
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float 1.638400e+04) #4, !dbg !27
  %79 = fadd float %71, 0x3EE4F8B580000000, !dbg !28
  %80 = fadd float %72, 0x3EE4F8B580000000, !dbg !28
  %81 = fadd float %73, 0x3EE4F8B580000000, !dbg !28
  %82 = fadd float %74, 0x3EE4F8B580000000, !dbg !28
  %83 = fadd float %75, 0x3EE4F8B580000000, !dbg !28
  %84 = fadd float %76, 0x3EE4F8B580000000, !dbg !28
  %85 = fadd float %77, 0x3EE4F8B580000000, !dbg !28
  %86 = fadd float %78, 0x3EE4F8B580000000, !dbg !28
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i = icmp eq i32 %87, 0, !dbg !29
  br i1 %.not.i, label %90, label %88, !dbg !29

88:                                               ; preds = %8
  %89 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %79), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

90:                                               ; preds = %8
  %91 = tail call float @llvm.nvvm.rsqrt.approx.f(float %79), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

__nv_rsqrtf.exit:                                 ; preds = %88, %90
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], !dbg !29
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i15 = icmp eq i32 %92, 0, !dbg !29
  br i1 %.not.i15, label %95, label %93, !dbg !29

93:                                               ; preds = %__nv_rsqrtf.exit
  %94 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %80), !dbg !29
  br label %__nv_rsqrtf.exit17, !dbg !29

95:                                               ; preds = %__nv_rsqrtf.exit
  %96 = tail call float @llvm.nvvm.rsqrt.approx.f(float %80), !dbg !29
  br label %__nv_rsqrtf.exit17, !dbg !29

__nv_rsqrtf.exit17:                               ; preds = %93, %95
  %.0.i16 = phi float [ %94, %93 ], [ %96, %95 ], !dbg !29
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i18 = icmp eq i32 %97, 0, !dbg !29
  br i1 %.not.i18, label %100, label %98, !dbg !29

98:                                               ; preds = %__nv_rsqrtf.exit17
  %99 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %81), !dbg !29
  br label %__nv_rsqrtf.exit20, !dbg !29

100:                                              ; preds = %__nv_rsqrtf.exit17
  %101 = tail call float @llvm.nvvm.rsqrt.approx.f(float %81), !dbg !29
  br label %__nv_rsqrtf.exit20, !dbg !29

__nv_rsqrtf.exit20:                               ; preds = %98, %100
  %.0.i19 = phi float [ %99, %98 ], [ %101, %100 ], !dbg !29
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i21 = icmp eq i32 %102, 0, !dbg !29
  br i1 %.not.i21, label %105, label %103, !dbg !29

103:                                              ; preds = %__nv_rsqrtf.exit20
  %104 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %82), !dbg !29
  br label %__nv_rsqrtf.exit23, !dbg !29

105:                                              ; preds = %__nv_rsqrtf.exit20
  %106 = tail call float @llvm.nvvm.rsqrt.approx.f(float %82), !dbg !29
  br label %__nv_rsqrtf.exit23, !dbg !29

__nv_rsqrtf.exit23:                               ; preds = %103, %105
  %.0.i22 = phi float [ %104, %103 ], [ %106, %105 ], !dbg !29
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i24 = icmp eq i32 %107, 0, !dbg !29
  br i1 %.not.i24, label %110, label %108, !dbg !29

108:                                              ; preds = %__nv_rsqrtf.exit23
  %109 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %83), !dbg !29
  br label %__nv_rsqrtf.exit26, !dbg !29

110:                                              ; preds = %__nv_rsqrtf.exit23
  %111 = tail call float @llvm.nvvm.rsqrt.approx.f(float %83), !dbg !29
  br label %__nv_rsqrtf.exit26, !dbg !29

__nv_rsqrtf.exit26:                               ; preds = %108, %110
  %.0.i25 = phi float [ %109, %108 ], [ %111, %110 ], !dbg !29
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i27 = icmp eq i32 %112, 0, !dbg !29
  br i1 %.not.i27, label %115, label %113, !dbg !29

113:                                              ; preds = %__nv_rsqrtf.exit26
  %114 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %84), !dbg !29
  br label %__nv_rsqrtf.exit29, !dbg !29

115:                                              ; preds = %__nv_rsqrtf.exit26
  %116 = tail call float @llvm.nvvm.rsqrt.approx.f(float %84), !dbg !29
  br label %__nv_rsqrtf.exit29, !dbg !29

__nv_rsqrtf.exit29:                               ; preds = %113, %115
  %.0.i28 = phi float [ %114, %113 ], [ %116, %115 ], !dbg !29
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i30 = icmp eq i32 %117, 0, !dbg !29
  br i1 %.not.i30, label %120, label %118, !dbg !29

118:                                              ; preds = %__nv_rsqrtf.exit29
  %119 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %85), !dbg !29
  br label %__nv_rsqrtf.exit32, !dbg !29

120:                                              ; preds = %__nv_rsqrtf.exit29
  %121 = tail call float @llvm.nvvm.rsqrt.approx.f(float %85), !dbg !29
  br label %__nv_rsqrtf.exit32, !dbg !29

__nv_rsqrtf.exit32:                               ; preds = %118, %120
  %.0.i31 = phi float [ %119, %118 ], [ %121, %120 ], !dbg !29
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i33 = icmp eq i32 %122, 0, !dbg !29
  br i1 %.not.i33, label %125, label %123, !dbg !29

123:                                              ; preds = %__nv_rsqrtf.exit32
  %124 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %86), !dbg !29
  br label %__nv_rsqrtf.exit35, !dbg !29

125:                                              ; preds = %__nv_rsqrtf.exit32
  %126 = tail call float @llvm.nvvm.rsqrt.approx.f(float %86), !dbg !29
  br label %__nv_rsqrtf.exit35, !dbg !29

__nv_rsqrtf.exit35:                               ; preds = %123, %125
  %.0.i34 = phi float [ %124, %123 ], [ %126, %125 ], !dbg !29
  %127 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !17
  %128 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !20
  %129 = insertelement <4 x i32> %128, i32 %32, i64 1, !dbg !20
  %130 = insertelement <4 x i32> %129, i32 %33, i64 2, !dbg !20
  %131 = insertelement <4 x i32> %130, i32 %34, i64 3, !dbg !20
  %132 = bitcast <4 x i32> %131 to <4 x float>, !dbg !20
  %133 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !17
  %134 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !17
  %135 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !17
  %136 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !17
  %137 = insertelement <4 x i32> poison, i32 %27, i64 0, !dbg !20
  %138 = insertelement <4 x i32> %137, i32 %28, i64 1, !dbg !20
  %139 = insertelement <4 x i32> %138, i32 %29, i64 2, !dbg !20
  %140 = insertelement <4 x i32> %139, i32 %30, i64 3, !dbg !20
  %141 = bitcast <4 x i32> %140 to <4 x float>, !dbg !20
  %142 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !17
  %143 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !17
  %144 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !17
  %145 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !26
  %146 = insertelement <4 x i32> %145, i32 %68, i64 1, !dbg !26
  %147 = insertelement <4 x i32> %146, i32 %69, i64 2, !dbg !26
  %148 = insertelement <4 x i32> %147, i32 %70, i64 3, !dbg !26
  %149 = bitcast <4 x i32> %148 to <4 x float>, !dbg !26
  %150 = insertelement <4 x i32> poison, i32 %63, i64 0, !dbg !26
  %151 = insertelement <4 x i32> %150, i32 %64, i64 1, !dbg !26
  %152 = insertelement <4 x i32> %151, i32 %65, i64 2, !dbg !26
  %153 = insertelement <4 x i32> %152, i32 %66, i64 3, !dbg !26
  %154 = bitcast <4 x i32> %153 to <4 x float>, !dbg !26
  %155 = insertelement <4 x i32> poison, i32 %58, i64 0, !dbg !24
  %156 = insertelement <4 x i32> %155, i32 %59, i64 1, !dbg !24
  %157 = insertelement <4 x i32> %156, i32 %60, i64 2, !dbg !24
  %158 = insertelement <4 x i32> %157, i32 %61, i64 3, !dbg !24
  %159 = bitcast <4 x i32> %158 to <4 x float>, !dbg !24
  %160 = insertelement <4 x i32> poison, i32 %54, i64 0, !dbg !24
  %161 = insertelement <4 x i32> %160, i32 %55, i64 1, !dbg !24
  %162 = insertelement <4 x i32> %161, i32 %56, i64 2, !dbg !24
  %163 = insertelement <4 x i32> %162, i32 %57, i64 3, !dbg !24
  %164 = bitcast <4 x i32> %163 to <4 x float>, !dbg !24
  %165 = shl i32 %11, 2, !dbg !12
  %166 = and i32 %165, 508, !dbg !12
  %167 = or disjoint i32 %166, 512, !dbg !12
  %168 = or disjoint i32 %10, %167, !dbg !13
  %169 = or disjoint i32 %10, %166, !dbg !13
  %170 = sext i32 %169 to i64, !dbg !30
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !30
  %172 = sext i32 %168 to i64, !dbg !30
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !30
  %174 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !31
  %175 = getelementptr inbounds i8, ptr addrspace(3) %174, i32 16, !dbg !31
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %166, !dbg !31
  %177 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %167, !dbg !31
  %178 = getelementptr inbounds i8, ptr addrspace(3) %176, i32 4, !dbg !31
  %179 = getelementptr inbounds i8, ptr addrspace(3) %176, i32 8, !dbg !31
  %180 = getelementptr inbounds i8, ptr addrspace(3) %176, i32 12, !dbg !31
  %181 = getelementptr i1, ptr addrspace(1) %6, i64 %18, !dbg !32
  %182 = insertelement <4 x i32> poison, i32 %144, i64 0, !dbg !17
  %183 = insertelement <4 x i32> %182, i32 %143, i64 1, !dbg !17
  %184 = insertelement <4 x i32> %183, i32 %142, i64 2, !dbg !17
  %185 = insertelement <4 x i32> %184, i32 %136, i64 3, !dbg !17
  %186 = bitcast <4 x i32> %185 to <4 x float>, !dbg !17
  %187 = fsub <4 x float> %186, %141, !dbg !33
  %188 = insertelement <4 x float> poison, float %.0.i, i64 0, !dbg !34
  %189 = insertelement <4 x float> %188, float %.0.i16, i64 1, !dbg !34
  %190 = insertelement <4 x float> %189, float %.0.i19, i64 2, !dbg !34
  %191 = insertelement <4 x float> %190, float %.0.i22, i64 3, !dbg !34
  %192 = fmul <4 x float> %187, %191, !dbg !34
  %193 = fmul <4 x float> %192, %164, !dbg !35
  %194 = fadd <4 x float> %193, %154, !dbg !36
  %195 = fcmp ogt <4 x float> %194, zeroinitializer, !dbg !37
  %196 = fmul <4 x float> %194, splat (float 0x3FC99999A0000000), !dbg !38
  %197 = select <4 x i1> %195, <4 x float> %194, <4 x float> %196, !dbg !39
  %198 = fcmp ogt <4 x float> %197, zeroinitializer, !dbg !40
  %bc = bitcast <4 x float> %197 to <4 x i32>, !dbg !31
  %199 = extractelement <4 x i32> %bc, i64 0, !dbg !31
  %bc36 = bitcast <4 x float> %197 to <4 x i32>, !dbg !31
  %200 = extractelement <4 x i32> %bc36, i64 1, !dbg !31
  %bc37 = bitcast <4 x float> %197 to <4 x i32>, !dbg !31
  %201 = extractelement <4 x i32> %bc37, i64 2, !dbg !31
  %bc38 = bitcast <4 x float> %197 to <4 x i32>, !dbg !31
  %202 = extractelement <4 x i32> %bc38, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %174, i32 %199, i32 %200, i32 %201, i32 %202, i1 true) #4, !dbg !31
  %203 = insertelement <4 x i32> poison, i32 %135, i64 0, !dbg !17
  %204 = insertelement <4 x i32> %203, i32 %134, i64 1, !dbg !17
  %205 = insertelement <4 x i32> %204, i32 %133, i64 2, !dbg !17
  %206 = insertelement <4 x i32> %205, i32 %127, i64 3, !dbg !17
  %207 = bitcast <4 x i32> %206 to <4 x float>, !dbg !17
  %208 = fsub <4 x float> %207, %132, !dbg !33
  %209 = insertelement <4 x float> poison, float %.0.i25, i64 0, !dbg !34
  %210 = insertelement <4 x float> %209, float %.0.i28, i64 1, !dbg !34
  %211 = insertelement <4 x float> %210, float %.0.i31, i64 2, !dbg !34
  %212 = insertelement <4 x float> %211, float %.0.i34, i64 3, !dbg !34
  %213 = fmul <4 x float> %208, %212, !dbg !34
  %214 = fmul <4 x float> %213, %159, !dbg !35
  %215 = fadd <4 x float> %214, %149, !dbg !36
  %216 = fcmp ogt <4 x float> %215, zeroinitializer, !dbg !37
  %217 = fmul <4 x float> %215, splat (float 0x3FC99999A0000000), !dbg !38
  %218 = select <4 x i1> %216, <4 x float> %215, <4 x float> %217, !dbg !39
  %219 = fcmp ogt <4 x float> %218, zeroinitializer, !dbg !40
  %bc39 = bitcast <4 x float> %218 to <4 x i32>, !dbg !31
  %220 = extractelement <4 x i32> %bc39, i64 0, !dbg !31
  %bc40 = bitcast <4 x float> %218 to <4 x i32>, !dbg !31
  %221 = extractelement <4 x i32> %bc40, i64 1, !dbg !31
  %bc41 = bitcast <4 x float> %218 to <4 x i32>, !dbg !31
  %222 = extractelement <4 x i32> %bc41, i64 2, !dbg !31
  %bc42 = bitcast <4 x float> %218 to <4 x i32>, !dbg !31
  %223 = extractelement <4 x i32> %bc42, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %175, i32 %220, i32 %221, i32 %222, i32 %223, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %224 = load <4 x i32>, ptr addrspace(3) %177, align 16, !dbg !31
  %.extract = load i32, ptr addrspace(3) %176, align 16, !dbg !31
  %.extract8 = load i32, ptr addrspace(3) %178, align 4, !dbg !31
  %.extract9 = load i32, ptr addrspace(3) %179, align 8, !dbg !31
  %.extract10 = load i32, ptr addrspace(3) %180, align 4, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %171, i1 true) #4, !dbg !31
  %.extract11 = extractelement <4 x i32> %224, i64 0, !dbg !31
  %.extract12 = extractelement <4 x i32> %224, i64 1, !dbg !31
  %.extract13 = extractelement <4 x i32> %224, i64 2, !dbg !31
  %.extract14 = extractelement <4 x i32> %224, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %173, i1 true) #4, !dbg !31
  %225 = zext <4 x i1> %198 to <4 x i8>, !dbg !41
  %226 = bitcast <4 x i8> %225 to i32, !dbg !41
  %227 = zext <4 x i1> %219 to <4 x i8>, !dbg !41
  %228 = bitcast <4 x i8> %227 to i32, !dbg !41
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %226, i32 %228, ptr addrspace(1) %181, i1 true) #4, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cedmt2ehy5q6e4wiosoeldiwzq5ejl3bz5dged2y4xt2xfmowvbm.py", directory: "inductor_cache/ed")
!4 = !{ptr @triton_poi_fused_leaky_relu_leaky_relu_backward_native_group_norm_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_leaky_relu_backward_native_group_norm_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_leaky_relu_backward_native_group_norm_3", linkageName: "triton_poi_fused_leaky_relu_leaky_relu_backward_native_group_norm_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 29, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 36, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 40, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 40, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 37, column: 27, scope: !7)
!30 = !DILocation(line: 47, column: 28, scope: !7)
!31 = !DILocation(line: 47, column: 40, scope: !7)
!32 = !DILocation(line: 48, column: 25, scope: !7)
!33 = !DILocation(line: 32, column: 18, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 39, column: 19, scope: !7)
!36 = !DILocation(line: 40, column: 20, scope: !7)
!37 = !DILocation(line: 42, column: 20, scope: !7)
!38 = !DILocation(line: 44, column: 20, scope: !7)
!39 = !DILocation(line: 45, column: 35, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 37, scope: !7)
!42 = !DILocation(line: 48, column: 4, scope: !7)
