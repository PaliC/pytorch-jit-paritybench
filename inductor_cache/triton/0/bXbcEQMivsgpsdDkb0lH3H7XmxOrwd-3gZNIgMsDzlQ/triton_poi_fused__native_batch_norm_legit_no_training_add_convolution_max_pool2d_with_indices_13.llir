; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = and i32 %14, 127, !dbg !12
  %16 = or disjoint i32 %15, 128, !dbg !12
  %17 = or disjoint i32 %15, 256, !dbg !12
  %18 = or disjoint i32 %15, 384, !dbg !12
  %19 = or disjoint i32 %13, %16, !dbg !13
  %20 = or disjoint i32 %13, %17, !dbg !13
  %21 = or disjoint i32 %13, %18, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %23 = icmp slt i32 %22, 728, !dbg !15
  %24 = sdiv i32 %19, 16, !dbg !16
  %25 = sdiv i32 %20, 16, !dbg !16
  %26 = sdiv i32 %21, 16, !dbg !16
  %27 = mul i32 %19, 728, !dbg !17
  %28 = mul i32 %20, 728, !dbg !17
  %29 = mul i32 %21, 728, !dbg !17
  %30 = add i32 %27, %22, !dbg !18
  %31 = add i32 %28, %22, !dbg !18
  %32 = add i32 %29, %22, !dbg !18
  %33 = sext i32 %30 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !19
  %35 = sext i32 %31 to i64, !dbg !19
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !19
  %37 = sext i32 %32 to i64, !dbg !19
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !19
  %39 = sext i32 %22 to i64, !dbg !20
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !20
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !21
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %5, i64 %39, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %6, i64 %39, !dbg !24
  %45 = add i32 %22, -12376, !dbg !25
  %46 = add i32 %27, %45, !dbg !26
  %47 = add i32 %28, %45, !dbg !26
  %48 = add i32 %29, %45, !dbg !26
  %49 = sext i32 %46 to i64, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !27
  %51 = sext i32 %47 to i64, !dbg !27
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !27
  %53 = sext i32 %48 to i64, !dbg !27
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !27
  %55 = add i32 %22, -11648, !dbg !28
  %56 = add i32 %27, %55, !dbg !29
  %57 = add i32 %28, %55, !dbg !29
  %58 = add i32 %29, %55, !dbg !29
  %59 = sext i32 %56 to i64, !dbg !30
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !30
  %61 = sext i32 %57 to i64, !dbg !30
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !30
  %63 = sext i32 %58 to i64, !dbg !30
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !30
  %65 = add i32 %22, -10920, !dbg !31
  %66 = add i32 %27, %65, !dbg !32
  %67 = add i32 %28, %65, !dbg !32
  %68 = add i32 %29, %65, !dbg !32
  %69 = sext i32 %66 to i64, !dbg !33
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !33
  %71 = sext i32 %67 to i64, !dbg !33
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !33
  %73 = sext i32 %68 to i64, !dbg !33
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !33
  %75 = add i32 %22, -728, !dbg !34
  %76 = add i32 %27, %75, !dbg !35
  %77 = add i32 %28, %75, !dbg !35
  %78 = add i32 %29, %75, !dbg !35
  %79 = sext i32 %76 to i64, !dbg !36
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !36
  %81 = sext i32 %77 to i64, !dbg !36
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !36
  %83 = sext i32 %78 to i64, !dbg !36
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !36
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !37
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !37
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !37
  %88 = add i32 %22, 728, !dbg !38
  %89 = add i32 %27, %88, !dbg !39
  %90 = add i32 %28, %88, !dbg !39
  %91 = add i32 %29, %88, !dbg !39
  %92 = sext i32 %89 to i64, !dbg !40
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !40
  %94 = sext i32 %90 to i64, !dbg !40
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !40
  %96 = sext i32 %91 to i64, !dbg !40
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !40
  %98 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !41
  %99 = insertelement <2 x i32> %98, i32 %19, i64 1, !dbg !41
  %100 = srem <2 x i32> %99, splat (i32 16), !dbg !41
  %101 = extractelement <2 x i32> %100, i64 0, !dbg !42
  %102 = icmp sgt i32 %101, 0, !dbg !43
  %103 = extractelement <2 x i32> %100, i64 1, !dbg !42
  %104 = icmp sgt i32 %103, 0, !dbg !44
  %105 = and i1 %104, %102, !dbg !45
  %106 = and i1 %23, %105, !dbg !46
  %107 = icmp sgt i32 %103, -1, !dbg !47
  %108 = and i1 %107, %102, !dbg !48
  %109 = and i1 %23, %108, !dbg !49
  %110 = add nsw <2 x i32> %100, splat (i32 1), !dbg !50
  %111 = shufflevector <2 x i32> %110, <2 x i32> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %112 = shufflevector <2 x i32> %110, <2 x i32> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %113 = extractelement <2 x i32> %110, i64 1, !dbg !51
  %114 = icmp ult i32 %113, 16, !dbg !52
  %115 = and i1 %102, %114, !dbg !53
  %116 = and i1 %23, %115, !dbg !54
  %117 = icmp sgt i32 %101, -1, !dbg !55
  %118 = and i1 %104, %117, !dbg !56
  %119 = and i1 %23, %118, !dbg !57
  %120 = or i32 %101, %103, !dbg !42
  %121 = icmp sgt i32 %120, -1, !dbg !42
  %122 = and i1 %23, %121, !dbg !58
  %123 = and i1 %117, %114, !dbg !59
  %124 = and i1 %23, %123, !dbg !60
  %125 = extractelement <2 x i32> %110, i64 0, !dbg !51
  %126 = icmp ult i32 %125, 16, !dbg !50
  %127 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !41
  %128 = insertelement <2 x i32> %127, i32 %20, i64 1, !dbg !41
  %129 = srem <2 x i32> %128, splat (i32 16), !dbg !41
  %130 = extractelement <2 x i32> %129, i64 0, !dbg !42
  %131 = icmp sgt i32 %130, 0, !dbg !43
  %132 = extractelement <2 x i32> %129, i64 1, !dbg !42
  %133 = icmp sgt i32 %132, 0, !dbg !44
  %134 = and i1 %133, %131, !dbg !45
  %135 = and i1 %23, %134, !dbg !46
  %136 = icmp sgt i32 %132, -1, !dbg !47
  %137 = and i1 %136, %131, !dbg !48
  %138 = and i1 %23, %137, !dbg !49
  %139 = add nsw <2 x i32> %129, splat (i32 1), !dbg !50
  %140 = shufflevector <2 x i32> %139, <2 x i32> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %141 = shufflevector <2 x i32> %139, <2 x i32> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %142 = extractelement <2 x i32> %139, i64 1, !dbg !51
  %143 = icmp ult i32 %142, 16, !dbg !52
  %144 = and i1 %131, %143, !dbg !53
  %145 = and i1 %23, %144, !dbg !54
  %146 = icmp sgt i32 %130, -1, !dbg !55
  %147 = and i1 %133, %146, !dbg !56
  %148 = and i1 %23, %147, !dbg !57
  %149 = or i32 %130, %132, !dbg !42
  %150 = icmp sgt i32 %149, -1, !dbg !42
  %151 = and i1 %23, %150, !dbg !58
  %152 = and i1 %146, %143, !dbg !59
  %153 = and i1 %23, %152, !dbg !60
  %154 = extractelement <2 x i32> %139, i64 0, !dbg !51
  %155 = icmp ult i32 %154, 16, !dbg !50
  %156 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !41
  %157 = insertelement <2 x i32> %156, i32 %21, i64 1, !dbg !41
  %158 = srem <2 x i32> %157, splat (i32 16), !dbg !41
  %159 = extractelement <2 x i32> %158, i64 0, !dbg !42
  %160 = icmp sgt i32 %159, 0, !dbg !43
  %161 = extractelement <2 x i32> %158, i64 1, !dbg !42
  %162 = icmp sgt i32 %161, 0, !dbg !44
  %163 = and i1 %162, %160, !dbg !45
  %164 = and i1 %23, %163, !dbg !46
  %165 = icmp sgt i32 %161, -1, !dbg !47
  %166 = and i1 %165, %160, !dbg !48
  %167 = and i1 %23, %166, !dbg !49
  %168 = add nsw <2 x i32> %158, splat (i32 1), !dbg !50
  %169 = shufflevector <2 x i32> %168, <2 x i32> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %170 = extractelement <2 x i32> %168, i64 1, !dbg !51
  %171 = icmp ult i32 %170, 16, !dbg !52
  %172 = and i1 %160, %171, !dbg !53
  %173 = and i1 %23, %172, !dbg !54
  %174 = icmp sgt i32 %159, -1, !dbg !55
  %175 = and i1 %162, %174, !dbg !56
  %176 = and i1 %23, %175, !dbg !57
  %177 = or i32 %159, %161, !dbg !42
  %178 = icmp sgt i32 %177, -1, !dbg !42
  %179 = and i1 %23, %178, !dbg !58
  %180 = and i1 %174, %171, !dbg !59
  %181 = and i1 %23, %180, !dbg !60
  %182 = extractelement <2 x i32> %168, i64 0, !dbg !51
  %183 = icmp ult i32 %182, 16, !dbg !50
  %184 = or disjoint i32 %13, %15, !dbg !13
  %185 = or disjoint i32 %184, 512, !dbg !13
  %186 = or disjoint i32 %184, 640, !dbg !13
  %187 = or disjoint i32 %184, 768, !dbg !13
  %188 = or disjoint i32 %184, 896, !dbg !13
  %189 = insertelement <4 x i32> poison, i32 %187, i64 0, !dbg !16
  %190 = insertelement <4 x i32> %189, i32 %186, i64 1, !dbg !16
  %191 = insertelement <4 x i32> %190, i32 %185, i64 2, !dbg !16
  %192 = insertelement <4 x i32> %191, i32 %184, i64 3, !dbg !16
  %193 = sdiv <4 x i32> %192, splat (i32 16), !dbg !16
  %194 = sdiv i32 %188, 16, !dbg !16
  %195 = srem <4 x i32> %193, splat (i32 16), !dbg !41
  %196 = mul i32 %184, 728, !dbg !17
  %197 = mul i32 %185, 728, !dbg !17
  %198 = mul i32 %186, 728, !dbg !17
  %199 = mul i32 %187, 728, !dbg !17
  %200 = mul i32 %188, 728, !dbg !17
  %201 = add i32 %196, %22, !dbg !18
  %202 = add i32 %22, %197, !dbg !18
  %203 = add i32 %22, %198, !dbg !18
  %204 = add i32 %22, %199, !dbg !18
  %205 = add i32 %22, %200, !dbg !18
  %206 = sext i32 %201 to i64, !dbg !19
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !19
  %208 = sext i32 %202 to i64, !dbg !19
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !19
  %210 = sext i32 %203 to i64, !dbg !19
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %210, !dbg !19
  %212 = sext i32 %204 to i64, !dbg !19
  %213 = getelementptr float, ptr addrspace(1) %0, i64 %212, !dbg !19
  %214 = sext i32 %205 to i64, !dbg !19
  %215 = getelementptr float, ptr addrspace(1) %0, i64 %214, !dbg !19
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 %23) #4, !dbg !61
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %23) #4, !dbg !61
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %23) #4, !dbg !61
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %23) #4, !dbg !61
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 %23) #4, !dbg !61
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %211, i1 %23) #4, !dbg !61
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %213, i1 %23) #4, !dbg !61
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %215, i1 %23) #4, !dbg !61
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %23) #4, !dbg !62
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %23) #4, !dbg !63
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %23) #4, !dbg !64
  %227 = bitcast i32 %226 to float, !dbg !64
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %23) #4, !dbg !65
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %23) #4, !dbg !66
  %230 = extractelement <4 x i32> %195, i64 3, !dbg !42
  %231 = icmp sgt i32 %230, 0, !dbg !43
  %232 = extractelement <4 x i32> %195, i64 2, !dbg !42
  %233 = icmp sgt i32 %232, 0, !dbg !43
  %234 = extractelement <4 x i32> %195, i64 1, !dbg !42
  %235 = icmp sgt i32 %234, 0, !dbg !43
  %236 = extractelement <4 x i32> %195, i64 0, !dbg !42
  %237 = icmp sgt i32 %236, 0, !dbg !43
  %238 = add i32 %196, %45, !dbg !26
  %239 = add i32 %45, %197, !dbg !26
  %240 = add i32 %45, %198, !dbg !26
  %241 = add i32 %45, %199, !dbg !26
  %242 = add i32 %45, %200, !dbg !26
  %243 = sext i32 %238 to i64, !dbg !27
  %244 = getelementptr float, ptr addrspace(1) %1, i64 %243, !dbg !27
  %245 = sext i32 %239 to i64, !dbg !27
  %246 = getelementptr float, ptr addrspace(1) %1, i64 %245, !dbg !27
  %247 = sext i32 %240 to i64, !dbg !27
  %248 = getelementptr float, ptr addrspace(1) %1, i64 %247, !dbg !27
  %249 = sext i32 %241 to i64, !dbg !27
  %250 = getelementptr float, ptr addrspace(1) %1, i64 %249, !dbg !27
  %251 = sext i32 %242 to i64, !dbg !27
  %252 = getelementptr float, ptr addrspace(1) %1, i64 %251, !dbg !27
  %253 = add i32 %196, %55, !dbg !29
  %254 = add i32 %55, %197, !dbg !29
  %255 = add i32 %55, %198, !dbg !29
  %256 = add i32 %55, %199, !dbg !29
  %257 = add i32 %55, %200, !dbg !29
  %258 = sext i32 %253 to i64, !dbg !30
  %259 = getelementptr float, ptr addrspace(1) %1, i64 %258, !dbg !30
  %260 = sext i32 %254 to i64, !dbg !30
  %261 = getelementptr float, ptr addrspace(1) %1, i64 %260, !dbg !30
  %262 = sext i32 %255 to i64, !dbg !30
  %263 = getelementptr float, ptr addrspace(1) %1, i64 %262, !dbg !30
  %264 = sext i32 %256 to i64, !dbg !30
  %265 = getelementptr float, ptr addrspace(1) %1, i64 %264, !dbg !30
  %266 = sext i32 %257 to i64, !dbg !30
  %267 = getelementptr float, ptr addrspace(1) %1, i64 %266, !dbg !30
  %268 = add i32 %196, %65, !dbg !32
  %269 = add i32 %65, %197, !dbg !32
  %270 = add i32 %65, %198, !dbg !32
  %271 = add i32 %65, %199, !dbg !32
  %272 = add i32 %65, %200, !dbg !32
  %273 = sext i32 %268 to i64, !dbg !33
  %274 = getelementptr float, ptr addrspace(1) %1, i64 %273, !dbg !33
  %275 = sext i32 %269 to i64, !dbg !33
  %276 = getelementptr float, ptr addrspace(1) %1, i64 %275, !dbg !33
  %277 = sext i32 %270 to i64, !dbg !33
  %278 = getelementptr float, ptr addrspace(1) %1, i64 %277, !dbg !33
  %279 = sext i32 %271 to i64, !dbg !33
  %280 = getelementptr float, ptr addrspace(1) %1, i64 %279, !dbg !33
  %281 = sext i32 %272 to i64, !dbg !33
  %282 = getelementptr float, ptr addrspace(1) %1, i64 %281, !dbg !33
  %283 = icmp sgt i32 %230, -1, !dbg !55
  %284 = icmp sgt i32 %232, -1, !dbg !55
  %285 = icmp sgt i32 %234, -1, !dbg !55
  %286 = icmp sgt i32 %236, -1, !dbg !55
  %287 = add i32 %196, %75, !dbg !35
  %288 = add i32 %75, %197, !dbg !35
  %289 = add i32 %75, %198, !dbg !35
  %290 = add i32 %75, %199, !dbg !35
  %291 = add i32 %75, %200, !dbg !35
  %292 = sext i32 %287 to i64, !dbg !36
  %293 = getelementptr float, ptr addrspace(1) %1, i64 %292, !dbg !36
  %294 = sext i32 %288 to i64, !dbg !36
  %295 = getelementptr float, ptr addrspace(1) %1, i64 %294, !dbg !36
  %296 = sext i32 %289 to i64, !dbg !36
  %297 = getelementptr float, ptr addrspace(1) %1, i64 %296, !dbg !36
  %298 = sext i32 %290 to i64, !dbg !36
  %299 = getelementptr float, ptr addrspace(1) %1, i64 %298, !dbg !36
  %300 = sext i32 %291 to i64, !dbg !36
  %301 = getelementptr float, ptr addrspace(1) %1, i64 %300, !dbg !36
  %302 = getelementptr float, ptr addrspace(1) %1, i64 %206, !dbg !37
  %303 = getelementptr float, ptr addrspace(1) %1, i64 %208, !dbg !37
  %304 = getelementptr float, ptr addrspace(1) %1, i64 %210, !dbg !37
  %305 = getelementptr float, ptr addrspace(1) %1, i64 %212, !dbg !37
  %306 = getelementptr float, ptr addrspace(1) %1, i64 %214, !dbg !37
  %307 = add i32 %196, %88, !dbg !39
  %308 = add i32 %88, %197, !dbg !39
  %309 = add i32 %88, %198, !dbg !39
  %310 = add i32 %88, %199, !dbg !39
  %311 = add i32 %88, %200, !dbg !39
  %312 = sext i32 %307 to i64, !dbg !40
  %313 = getelementptr float, ptr addrspace(1) %1, i64 %312, !dbg !40
  %314 = sext i32 %308 to i64, !dbg !40
  %315 = getelementptr float, ptr addrspace(1) %1, i64 %314, !dbg !40
  %316 = sext i32 %309 to i64, !dbg !40
  %317 = getelementptr float, ptr addrspace(1) %1, i64 %316, !dbg !40
  %318 = sext i32 %310 to i64, !dbg !40
  %319 = getelementptr float, ptr addrspace(1) %1, i64 %318, !dbg !40
  %320 = sext i32 %311 to i64, !dbg !40
  %321 = getelementptr float, ptr addrspace(1) %1, i64 %320, !dbg !40
  %322 = add nsw <4 x i32> %195, splat (i32 1), !dbg !50
  %323 = icmp ult <4 x i32> %322, splat (i32 16), !dbg !50
  %324 = insertelement <2 x i32> poison, i32 %194, i64 0, !dbg !41
  %325 = insertelement <2 x i32> %324, i32 %184, i64 1, !dbg !41
  %326 = srem <2 x i32> %325, splat (i32 16), !dbg !41
  %327 = extractelement <2 x i32> %326, i64 0, !dbg !42
  %328 = icmp sgt i32 %327, 0, !dbg !43
  %329 = extractelement <2 x i32> %326, i64 1, !dbg !42
  %330 = icmp sgt i32 %329, 0, !dbg !44
  %331 = and i1 %330, %231, !dbg !45
  %332 = and i1 %330, %233, !dbg !45
  %333 = and i1 %330, %235, !dbg !45
  %334 = and i1 %330, %237, !dbg !45
  %335 = and i1 %330, %328, !dbg !45
  %336 = and i1 %23, %331, !dbg !46
  %337 = and i1 %332, %23, !dbg !46
  %338 = and i1 %333, %23, !dbg !46
  %339 = and i1 %334, %23, !dbg !46
  %340 = and i1 %335, %23, !dbg !46
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %244, i1 %336, i32 -8388608, i1 %336) #4, !dbg !67
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %106, i32 -8388608, i1 %106) #4, !dbg !67
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %135, i32 -8388608, i1 %135) #4, !dbg !67
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %164, i32 -8388608, i1 %164) #4, !dbg !67
  %345 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %246, i1 %337, i32 -8388608, i1 %337) #4, !dbg !67
  %346 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %248, i1 %338, i32 -8388608, i1 %338) #4, !dbg !67
  %347 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %250, i1 %339, i32 -8388608, i1 %339) #4, !dbg !67
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %252, i1 %340, i32 -8388608, i1 %340) #4, !dbg !67
  %349 = icmp sgt i32 %329, -1, !dbg !47
  %350 = and i1 %349, %231, !dbg !48
  %351 = and i1 %349, %233, !dbg !48
  %352 = and i1 %349, %235, !dbg !48
  %353 = and i1 %349, %237, !dbg !48
  %354 = and i1 %349, %328, !dbg !48
  %355 = and i1 %23, %350, !dbg !49
  %356 = and i1 %351, %23, !dbg !49
  %357 = and i1 %352, %23, !dbg !49
  %358 = and i1 %353, %23, !dbg !49
  %359 = and i1 %354, %23, !dbg !49
  %360 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %259, i1 %355, i32 -8388608, i1 %355) #4, !dbg !68
  %361 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %109, i32 -8388608, i1 %109) #4, !dbg !68
  %362 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %138, i32 -8388608, i1 %138) #4, !dbg !68
  %363 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %167, i32 -8388608, i1 %167) #4, !dbg !68
  %364 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %261, i1 %356, i32 -8388608, i1 %356) #4, !dbg !68
  %365 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %263, i1 %357, i32 -8388608, i1 %357) #4, !dbg !68
  %366 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %265, i1 %358, i32 -8388608, i1 %358) #4, !dbg !68
  %367 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %267, i1 %359, i32 -8388608, i1 %359) #4, !dbg !68
  %368 = add nsw <2 x i32> %326, splat (i32 1), !dbg !50
  %369 = extractelement <2 x i32> %368, i64 1, !dbg !51
  %370 = icmp ult i32 %369, 16, !dbg !52
  %371 = and i1 %231, %370, !dbg !53
  %372 = and i1 %233, %370, !dbg !53
  %373 = and i1 %235, %370, !dbg !53
  %374 = and i1 %237, %370, !dbg !53
  %375 = and i1 %328, %370, !dbg !53
  %376 = and i1 %23, %371, !dbg !54
  %377 = and i1 %372, %23, !dbg !54
  %378 = and i1 %373, %23, !dbg !54
  %379 = and i1 %374, %23, !dbg !54
  %380 = and i1 %375, %23, !dbg !54
  %381 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %274, i1 %376, i32 -8388608, i1 %376) #4, !dbg !69
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %116, i32 -8388608, i1 %116) #4, !dbg !69
  %383 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %145, i32 -8388608, i1 %145) #4, !dbg !69
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %173, i32 -8388608, i1 %173) #4, !dbg !69
  %385 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %276, i1 %377, i32 -8388608, i1 %377) #4, !dbg !69
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %278, i1 %378, i32 -8388608, i1 %378) #4, !dbg !69
  %387 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %379, i32 -8388608, i1 %379) #4, !dbg !69
  %388 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %282, i1 %380, i32 -8388608, i1 %380) #4, !dbg !69
  %389 = icmp sgt i32 %327, -1, !dbg !55
  %390 = and i1 %330, %283, !dbg !56
  %391 = and i1 %330, %284, !dbg !56
  %392 = and i1 %330, %285, !dbg !56
  %393 = and i1 %330, %286, !dbg !56
  %394 = and i1 %330, %389, !dbg !56
  %395 = and i1 %23, %390, !dbg !57
  %396 = and i1 %391, %23, !dbg !57
  %397 = and i1 %392, %23, !dbg !57
  %398 = and i1 %393, %23, !dbg !57
  %399 = and i1 %394, %23, !dbg !57
  %400 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %293, i1 %395, i32 -8388608, i1 %395) #4, !dbg !70
  %401 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %119, i32 -8388608, i1 %119) #4, !dbg !70
  %402 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %148, i32 -8388608, i1 %148) #4, !dbg !70
  %403 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %176, i32 -8388608, i1 %176) #4, !dbg !70
  %404 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %295, i1 %396, i32 -8388608, i1 %396) #4, !dbg !70
  %405 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %297, i1 %397, i32 -8388608, i1 %397) #4, !dbg !70
  %406 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %299, i1 %398, i32 -8388608, i1 %398) #4, !dbg !70
  %407 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %301, i1 %399, i32 -8388608, i1 %399) #4, !dbg !70
  %408 = or i32 %230, %329, !dbg !42
  %409 = icmp sgt i32 %408, -1, !dbg !42
  %410 = or i32 %232, %329, !dbg !42
  %411 = icmp sgt i32 %410, -1, !dbg !42
  %412 = or i32 %234, %329, !dbg !42
  %413 = icmp sgt i32 %412, -1, !dbg !42
  %414 = or i32 %236, %329, !dbg !42
  %415 = icmp sgt i32 %414, -1, !dbg !42
  %416 = or i32 %327, %329, !dbg !42
  %417 = icmp sgt i32 %416, -1, !dbg !42
  %418 = and i1 %23, %409, !dbg !58
  %419 = and i1 %411, %23, !dbg !58
  %420 = and i1 %413, %23, !dbg !58
  %421 = and i1 %415, %23, !dbg !58
  %422 = and i1 %417, %23, !dbg !58
  %423 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %418, i32 -8388608, i1 %418) #4, !dbg !71
  %424 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %122, i32 -8388608, i1 %122) #4, !dbg !71
  %425 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %151, i32 -8388608, i1 %151) #4, !dbg !71
  %426 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %179, i32 -8388608, i1 %179) #4, !dbg !71
  %427 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %303, i1 %419, i32 -8388608, i1 %419) #4, !dbg !71
  %428 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %304, i1 %420, i32 -8388608, i1 %420) #4, !dbg !71
  %429 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %305, i1 %421, i32 -8388608, i1 %421) #4, !dbg !71
  %430 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %306, i1 %422, i32 -8388608, i1 %422) #4, !dbg !71
  %431 = and i1 %283, %370, !dbg !59
  %432 = and i1 %284, %370, !dbg !59
  %433 = and i1 %285, %370, !dbg !59
  %434 = and i1 %286, %370, !dbg !59
  %435 = and i1 %389, %370, !dbg !59
  %436 = and i1 %23, %431, !dbg !60
  %437 = and i1 %432, %23, !dbg !60
  %438 = and i1 %433, %23, !dbg !60
  %439 = and i1 %434, %23, !dbg !60
  %440 = and i1 %435, %23, !dbg !60
  %441 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %313, i1 %436, i32 -8388608, i1 %436) #4, !dbg !72
  %442 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %124, i32 -8388608, i1 %124) #4, !dbg !72
  %443 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %153, i32 -8388608, i1 %153) #4, !dbg !72
  %444 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %181, i32 -8388608, i1 %181) #4, !dbg !72
  %445 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %315, i1 %437, i32 -8388608, i1 %437) #4, !dbg !72
  %446 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %317, i1 %438, i32 -8388608, i1 %438) #4, !dbg !72
  %447 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %319, i1 %439, i32 -8388608, i1 %439) #4, !dbg !72
  %448 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %321, i1 %440, i32 -8388608, i1 %440) #4, !dbg !72
  %449 = extractelement <2 x i32> %368, i64 0, !dbg !51
  %450 = icmp ult i32 %449, 16, !dbg !50
  %451 = extractelement <4 x i1> %323, i64 3, !dbg !73
  %452 = and i1 %330, %451, !dbg !73
  %453 = and i1 %104, %126, !dbg !73
  %454 = and i1 %133, %155, !dbg !73
  %455 = and i1 %162, %183, !dbg !73
  %456 = extractelement <4 x i1> %323, i64 2, !dbg !73
  %457 = and i1 %330, %456, !dbg !73
  %458 = extractelement <4 x i1> %323, i64 1, !dbg !73
  %459 = and i1 %330, %458, !dbg !73
  %460 = extractelement <4 x i1> %323, i64 0, !dbg !73
  %461 = and i1 %330, %460, !dbg !73
  %462 = and i1 %330, %450, !dbg !73
  %463 = add i32 %22, 10920, !dbg !74
  %464 = add i32 %196, %463, !dbg !75
  %465 = add i32 %27, %463, !dbg !75
  %466 = add i32 %28, %463, !dbg !75
  %467 = add i32 %29, %463, !dbg !75
  %468 = add i32 %463, %197, !dbg !75
  %469 = add i32 %463, %198, !dbg !75
  %470 = add i32 %463, %199, !dbg !75
  %471 = add i32 %463, %200, !dbg !75
  %472 = sext i32 %464 to i64, !dbg !76
  %473 = getelementptr float, ptr addrspace(1) %1, i64 %472, !dbg !76
  %474 = sext i32 %465 to i64, !dbg !76
  %475 = getelementptr float, ptr addrspace(1) %1, i64 %474, !dbg !76
  %476 = sext i32 %466 to i64, !dbg !76
  %477 = getelementptr float, ptr addrspace(1) %1, i64 %476, !dbg !76
  %478 = sext i32 %467 to i64, !dbg !76
  %479 = getelementptr float, ptr addrspace(1) %1, i64 %478, !dbg !76
  %480 = sext i32 %468 to i64, !dbg !76
  %481 = getelementptr float, ptr addrspace(1) %1, i64 %480, !dbg !76
  %482 = sext i32 %469 to i64, !dbg !76
  %483 = getelementptr float, ptr addrspace(1) %1, i64 %482, !dbg !76
  %484 = sext i32 %470 to i64, !dbg !76
  %485 = getelementptr float, ptr addrspace(1) %1, i64 %484, !dbg !76
  %486 = sext i32 %471 to i64, !dbg !76
  %487 = getelementptr float, ptr addrspace(1) %1, i64 %486, !dbg !76
  %488 = and i1 %23, %452, !dbg !77
  %489 = and i1 %23, %453, !dbg !77
  %490 = and i1 %23, %454, !dbg !77
  %491 = and i1 %23, %455, !dbg !77
  %492 = and i1 %457, %23, !dbg !77
  %493 = and i1 %459, %23, !dbg !77
  %494 = and i1 %461, %23, !dbg !77
  %495 = and i1 %462, %23, !dbg !77
  %496 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %473, i1 %488, i32 -8388608, i1 %488) #4, !dbg !78
  %497 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %475, i1 %489, i32 -8388608, i1 %489) #4, !dbg !78
  %498 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %477, i1 %490, i32 -8388608, i1 %490) #4, !dbg !78
  %499 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %479, i1 %491, i32 -8388608, i1 %491) #4, !dbg !78
  %500 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %481, i1 %492, i32 -8388608, i1 %492) #4, !dbg !78
  %501 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %483, i1 %493, i32 -8388608, i1 %493) #4, !dbg !78
  %502 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %485, i1 %494, i32 -8388608, i1 %494) #4, !dbg !78
  %503 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %487, i1 %495, i32 -8388608, i1 %495) #4, !dbg !78
  %504 = and i1 %349, %451, !dbg !79
  %505 = and i1 %107, %126, !dbg !79
  %506 = and i1 %136, %155, !dbg !79
  %507 = and i1 %165, %183, !dbg !79
  %508 = and i1 %349, %456, !dbg !79
  %509 = and i1 %349, %458, !dbg !79
  %510 = and i1 %349, %460, !dbg !79
  %511 = and i1 %349, %450, !dbg !79
  %512 = add i32 %22, 11648, !dbg !80
  %513 = add i32 %196, %512, !dbg !81
  %514 = add i32 %27, %512, !dbg !81
  %515 = add i32 %28, %512, !dbg !81
  %516 = add i32 %29, %512, !dbg !81
  %517 = add i32 %512, %197, !dbg !81
  %518 = add i32 %512, %198, !dbg !81
  %519 = add i32 %512, %199, !dbg !81
  %520 = add i32 %512, %200, !dbg !81
  %521 = sext i32 %513 to i64, !dbg !82
  %522 = getelementptr float, ptr addrspace(1) %1, i64 %521, !dbg !82
  %523 = sext i32 %514 to i64, !dbg !82
  %524 = getelementptr float, ptr addrspace(1) %1, i64 %523, !dbg !82
  %525 = sext i32 %515 to i64, !dbg !82
  %526 = getelementptr float, ptr addrspace(1) %1, i64 %525, !dbg !82
  %527 = sext i32 %516 to i64, !dbg !82
  %528 = getelementptr float, ptr addrspace(1) %1, i64 %527, !dbg !82
  %529 = sext i32 %517 to i64, !dbg !82
  %530 = getelementptr float, ptr addrspace(1) %1, i64 %529, !dbg !82
  %531 = sext i32 %518 to i64, !dbg !82
  %532 = getelementptr float, ptr addrspace(1) %1, i64 %531, !dbg !82
  %533 = sext i32 %519 to i64, !dbg !82
  %534 = getelementptr float, ptr addrspace(1) %1, i64 %533, !dbg !82
  %535 = sext i32 %520 to i64, !dbg !82
  %536 = getelementptr float, ptr addrspace(1) %1, i64 %535, !dbg !82
  %537 = and i1 %23, %504, !dbg !83
  %538 = and i1 %23, %505, !dbg !83
  %539 = and i1 %23, %506, !dbg !83
  %540 = and i1 %23, %507, !dbg !83
  %541 = and i1 %508, %23, !dbg !83
  %542 = and i1 %509, %23, !dbg !83
  %543 = and i1 %510, %23, !dbg !83
  %544 = and i1 %511, %23, !dbg !83
  %545 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %522, i1 %537, i32 -8388608, i1 %537) #4, !dbg !84
  %546 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %524, i1 %538, i32 -8388608, i1 %538) #4, !dbg !84
  %547 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %526, i1 %539, i32 -8388608, i1 %539) #4, !dbg !84
  %548 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %528, i1 %540, i32 -8388608, i1 %540) #4, !dbg !84
  %549 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %530, i1 %541, i32 -8388608, i1 %541) #4, !dbg !84
  %550 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %532, i1 %542, i32 -8388608, i1 %542) #4, !dbg !84
  %551 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %534, i1 %543, i32 -8388608, i1 %543) #4, !dbg !84
  %552 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %536, i1 %544, i32 -8388608, i1 %544) #4, !dbg !84
  %553 = shufflevector <2 x i32> %368, <2 x i32> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>, !dbg !51
  %554 = shufflevector <4 x i32> %553, <4 x i32> %322, <8 x i32> <i32 0, i32 4, i32 5, i32 6, i32 poison, i32 poison, i32 poison, i32 7>, !dbg !51
  %555 = shufflevector <8 x i32> %554, <8 x i32> %169, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 7>, !dbg !51
  %556 = shufflevector <8 x i32> %555, <8 x i32> %141, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 7>, !dbg !51
  %557 = shufflevector <8 x i32> %556, <8 x i32> %112, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 7>, !dbg !51
  %558 = shufflevector <2 x i32> %368, <2 x i32> %168, <4 x i32> <i32 1, i32 3, i32 poison, i32 poison>, !dbg !51
  %559 = shufflevector <4 x i32> %558, <4 x i32> %140, <4 x i32> <i32 0, i32 1, i32 5, i32 poison>, !dbg !51
  %560 = shufflevector <4 x i32> %559, <4 x i32> %111, <4 x i32> <i32 0, i32 1, i32 2, i32 5>, !dbg !51
  %561 = shufflevector <4 x i32> %560, <4 x i32> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 2, i32 3, i32 0>, !dbg !51
  %562 = or <8 x i32> %557, %561, !dbg !51
  %563 = icmp ult <8 x i32> %562, splat (i32 16), !dbg !51
  %564 = add i32 %22, 12376, !dbg !85
  %565 = add i32 %196, %564, !dbg !86
  %566 = add i32 %27, %564, !dbg !86
  %567 = add i32 %28, %564, !dbg !86
  %568 = add i32 %29, %564, !dbg !86
  %569 = add i32 %564, %197, !dbg !86
  %570 = add i32 %564, %198, !dbg !86
  %571 = add i32 %564, %199, !dbg !86
  %572 = add i32 %564, %200, !dbg !86
  %573 = sext i32 %565 to i64, !dbg !87
  %574 = getelementptr float, ptr addrspace(1) %1, i64 %573, !dbg !87
  %575 = sext i32 %566 to i64, !dbg !87
  %576 = getelementptr float, ptr addrspace(1) %1, i64 %575, !dbg !87
  %577 = sext i32 %567 to i64, !dbg !87
  %578 = getelementptr float, ptr addrspace(1) %1, i64 %577, !dbg !87
  %579 = sext i32 %568 to i64, !dbg !87
  %580 = getelementptr float, ptr addrspace(1) %1, i64 %579, !dbg !87
  %581 = sext i32 %569 to i64, !dbg !87
  %582 = getelementptr float, ptr addrspace(1) %1, i64 %581, !dbg !87
  %583 = sext i32 %570 to i64, !dbg !87
  %584 = getelementptr float, ptr addrspace(1) %1, i64 %583, !dbg !87
  %585 = sext i32 %571 to i64, !dbg !87
  %586 = getelementptr float, ptr addrspace(1) %1, i64 %585, !dbg !87
  %587 = sext i32 %572 to i64, !dbg !87
  %588 = getelementptr float, ptr addrspace(1) %1, i64 %587, !dbg !87
  %589 = extractelement <8 x i1> %563, i64 7, !dbg !88
  %590 = and i1 %23, %589, !dbg !88
  %591 = extractelement <8 x i1> %563, i64 6, !dbg !88
  %592 = and i1 %23, %591, !dbg !88
  %593 = extractelement <8 x i1> %563, i64 5, !dbg !88
  %594 = and i1 %23, %593, !dbg !88
  %595 = extractelement <8 x i1> %563, i64 4, !dbg !88
  %596 = and i1 %23, %595, !dbg !88
  %597 = extractelement <8 x i1> %563, i64 3, !dbg !88
  %598 = and i1 %597, %23, !dbg !88
  %599 = extractelement <8 x i1> %563, i64 2, !dbg !88
  %600 = and i1 %599, %23, !dbg !88
  %601 = extractelement <8 x i1> %563, i64 1, !dbg !88
  %602 = and i1 %601, %23, !dbg !88
  %603 = extractelement <8 x i1> %563, i64 0, !dbg !88
  %604 = and i1 %603, %23, !dbg !88
  %605 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %574, i1 %590, i32 -8388608, i1 %590) #4, !dbg !89
  %606 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %576, i1 %592, i32 -8388608, i1 %592) #4, !dbg !89
  %607 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %578, i1 %594, i32 -8388608, i1 %594) #4, !dbg !89
  %608 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %580, i1 %596, i32 -8388608, i1 %596) #4, !dbg !89
  %609 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %582, i1 %598, i32 -8388608, i1 %598) #4, !dbg !89
  %610 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %584, i1 %600, i32 -8388608, i1 %600) #4, !dbg !89
  %611 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %586, i1 %602, i32 -8388608, i1 %602) #4, !dbg !89
  %612 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %588, i1 %604, i32 -8388608, i1 %604) #4, !dbg !89
  %613 = fadd float %227, 0x3EE4F8B580000000, !dbg !90
  %614 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !91
  %.not.i = icmp eq i32 %614, 0, !dbg !91
  %615 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !91
  %.not1.i = icmp eq i32 %615, 0, !dbg !91
  br i1 %.not.i, label %621, label %616, !dbg !91

616:                                              ; preds = %11
  br i1 %.not1.i, label %619, label %617, !dbg !91

617:                                              ; preds = %616
  %618 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %613) #4, !dbg !91
  br label %__nv_sqrtf.exit, !dbg !91

619:                                              ; preds = %616
  %620 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %613) #4, !dbg !91
  br label %__nv_sqrtf.exit, !dbg !91

621:                                              ; preds = %11
  br i1 %.not1.i, label %624, label %622, !dbg !91

622:                                              ; preds = %621
  %623 = tail call float @llvm.nvvm.sqrt.rn.f(float %613) #4, !dbg !91
  br label %__nv_sqrtf.exit, !dbg !91

624:                                              ; preds = %621
  %625 = tail call float @llvm.nvvm.sqrt.approx.f(float %613) #4, !dbg !91
  br label %__nv_sqrtf.exit, !dbg !91

__nv_sqrtf.exit:                                  ; preds = %617, %619, %622, %624
  %.0.i = phi float [ %618, %617 ], [ %620, %619 ], [ %623, %622 ], [ %625, %624 ], !dbg !91
  %626 = bitcast i32 %223 to float, !dbg !61
  %627 = bitcast i32 %224 to float, !dbg !62
  %628 = fadd float %626, %627, !dbg !92
  %629 = bitcast i32 %225 to float, !dbg !63
  %630 = fsub float %628, %629, !dbg !93
  %631 = bitcast i32 %222 to float, !dbg !61
  %632 = fadd float %631, %627, !dbg !92
  %633 = fsub float %632, %629, !dbg !93
  %634 = bitcast i32 %221 to float, !dbg !61
  %635 = fadd float %634, %627, !dbg !92
  %636 = fsub float %635, %629, !dbg !93
  %637 = bitcast i32 %220 to float, !dbg !61
  %638 = fadd float %637, %627, !dbg !92
  %639 = fsub float %638, %629, !dbg !93
  %640 = bitcast i32 %219 to float, !dbg !61
  %641 = fadd float %640, %627, !dbg !92
  %642 = fsub float %641, %629, !dbg !93
  %643 = bitcast i32 %218 to float, !dbg !61
  %644 = fadd float %643, %627, !dbg !92
  %645 = fsub float %644, %629, !dbg !93
  %646 = bitcast i32 %217 to float, !dbg !61
  %647 = fadd float %646, %627, !dbg !92
  %648 = fsub float %647, %629, !dbg !93
  %649 = bitcast i32 %216 to float, !dbg !61
  %650 = fadd float %649, %627, !dbg !92
  %651 = fsub float %650, %629, !dbg !93
  %652 = bitcast i32 %367 to float, !dbg !68
  %653 = bitcast i32 %348 to float, !dbg !67
  %654 = fcmp ogt float %652, %653, !dbg !94
  %655 = fcmp uno float %652, 0.000000e+00, !dbg !98
  %656 = or i1 %654, %655, !dbg !99
  %657 = select i1 %656, float %652, float %653, !dbg !100
  %658 = bitcast i32 %388 to float, !dbg !69
  %659 = fcmp olt float %657, %658, !dbg !101
  %660 = fcmp uno float %658, 0.000000e+00, !dbg !103
  %661 = or i1 %659, %660, !dbg !104
  %662 = select i1 %661, float %658, float %657, !dbg !105
  %663 = bitcast i32 %407 to float, !dbg !70
  %664 = fcmp olt float %662, %663, !dbg !106
  %665 = fcmp uno float %663, 0.000000e+00, !dbg !108
  %666 = or i1 %664, %665, !dbg !109
  %667 = select i1 %666, float %663, float %662, !dbg !110
  %668 = bitcast i32 %430 to float, !dbg !71
  %669 = fcmp olt float %667, %668, !dbg !111
  %670 = fcmp uno float %668, 0.000000e+00, !dbg !113
  %671 = or i1 %669, %670, !dbg !114
  %672 = select i1 %671, float %668, float %667, !dbg !115
  %673 = bitcast i32 %448 to float, !dbg !72
  %674 = fcmp olt float %672, %673, !dbg !116
  %675 = fcmp uno float %673, 0.000000e+00, !dbg !118
  %676 = or i1 %674, %675, !dbg !119
  %677 = select i1 %676, float %673, float %672, !dbg !120
  %678 = bitcast i32 %503 to float, !dbg !78
  %679 = fcmp olt float %677, %678, !dbg !121
  %680 = fcmp uno float %678, 0.000000e+00, !dbg !123
  %681 = or i1 %679, %680, !dbg !124
  %682 = select i1 %681, float %678, float %677, !dbg !125
  %683 = bitcast i32 %552 to float, !dbg !84
  %684 = fcmp olt float %682, %683, !dbg !126
  %685 = fcmp uno float %683, 0.000000e+00, !dbg !128
  %686 = or i1 %684, %685, !dbg !129
  %687 = select i1 %686, float %683, float %682, !dbg !130
  %688 = bitcast i32 %612 to float, !dbg !89
  %689 = fcmp olt float %687, %688, !dbg !131
  %690 = zext i1 %654 to i8, !dbg !133
  %691 = select i1 %659, i8 2, i8 %690, !dbg !134
  %692 = select i1 %664, i8 3, i8 %691, !dbg !135
  %693 = select i1 %669, i8 4, i8 %692, !dbg !136
  %694 = select i1 %674, i8 5, i8 %693, !dbg !137
  %695 = select i1 %679, i8 6, i8 %694, !dbg !138
  %696 = select i1 %684, i8 7, i8 %695, !dbg !139
  %697 = select i1 %689, i8 8, i8 %696, !dbg !140
  %698 = bitcast i32 %366 to float, !dbg !68
  %699 = bitcast i32 %347 to float, !dbg !67
  %700 = fcmp ogt float %698, %699, !dbg !94
  %701 = fcmp uno float %698, 0.000000e+00, !dbg !98
  %702 = or i1 %700, %701, !dbg !99
  %703 = select i1 %702, float %698, float %699, !dbg !100
  %704 = bitcast i32 %387 to float, !dbg !69
  %705 = fcmp olt float %703, %704, !dbg !101
  %706 = fcmp uno float %704, 0.000000e+00, !dbg !103
  %707 = or i1 %705, %706, !dbg !104
  %708 = select i1 %707, float %704, float %703, !dbg !105
  %709 = bitcast i32 %406 to float, !dbg !70
  %710 = fcmp olt float %708, %709, !dbg !106
  %711 = fcmp uno float %709, 0.000000e+00, !dbg !108
  %712 = or i1 %710, %711, !dbg !109
  %713 = select i1 %712, float %709, float %708, !dbg !110
  %714 = bitcast i32 %429 to float, !dbg !71
  %715 = fcmp olt float %713, %714, !dbg !111
  %716 = fcmp uno float %714, 0.000000e+00, !dbg !113
  %717 = or i1 %715, %716, !dbg !114
  %718 = select i1 %717, float %714, float %713, !dbg !115
  %719 = bitcast i32 %447 to float, !dbg !72
  %720 = fcmp olt float %718, %719, !dbg !116
  %721 = fcmp uno float %719, 0.000000e+00, !dbg !118
  %722 = or i1 %720, %721, !dbg !119
  %723 = select i1 %722, float %719, float %718, !dbg !120
  %724 = bitcast i32 %502 to float, !dbg !78
  %725 = fcmp olt float %723, %724, !dbg !121
  %726 = fcmp uno float %724, 0.000000e+00, !dbg !123
  %727 = or i1 %725, %726, !dbg !124
  %728 = select i1 %727, float %724, float %723, !dbg !125
  %729 = bitcast i32 %551 to float, !dbg !84
  %730 = fcmp olt float %728, %729, !dbg !126
  %731 = fcmp uno float %729, 0.000000e+00, !dbg !128
  %732 = or i1 %730, %731, !dbg !129
  %733 = select i1 %732, float %729, float %728, !dbg !130
  %734 = bitcast i32 %611 to float, !dbg !89
  %735 = fcmp olt float %733, %734, !dbg !131
  %736 = zext i1 %700 to i8, !dbg !133
  %737 = select i1 %705, i8 2, i8 %736, !dbg !134
  %738 = select i1 %710, i8 3, i8 %737, !dbg !135
  %739 = select i1 %715, i8 4, i8 %738, !dbg !136
  %740 = select i1 %720, i8 5, i8 %739, !dbg !137
  %741 = select i1 %725, i8 6, i8 %740, !dbg !138
  %742 = select i1 %730, i8 7, i8 %741, !dbg !139
  %743 = select i1 %735, i8 8, i8 %742, !dbg !140
  %744 = bitcast i32 %365 to float, !dbg !68
  %745 = bitcast i32 %346 to float, !dbg !67
  %746 = fcmp ogt float %744, %745, !dbg !94
  %747 = fcmp uno float %744, 0.000000e+00, !dbg !98
  %748 = or i1 %746, %747, !dbg !99
  %749 = select i1 %748, float %744, float %745, !dbg !100
  %750 = bitcast i32 %386 to float, !dbg !69
  %751 = fcmp olt float %749, %750, !dbg !101
  %752 = fcmp uno float %750, 0.000000e+00, !dbg !103
  %753 = or i1 %751, %752, !dbg !104
  %754 = select i1 %753, float %750, float %749, !dbg !105
  %755 = bitcast i32 %405 to float, !dbg !70
  %756 = fcmp olt float %754, %755, !dbg !106
  %757 = fcmp uno float %755, 0.000000e+00, !dbg !108
  %758 = or i1 %756, %757, !dbg !109
  %759 = select i1 %758, float %755, float %754, !dbg !110
  %760 = bitcast i32 %428 to float, !dbg !71
  %761 = fcmp olt float %759, %760, !dbg !111
  %762 = fcmp uno float %760, 0.000000e+00, !dbg !113
  %763 = or i1 %761, %762, !dbg !114
  %764 = select i1 %763, float %760, float %759, !dbg !115
  %765 = bitcast i32 %446 to float, !dbg !72
  %766 = fcmp olt float %764, %765, !dbg !116
  %767 = fcmp uno float %765, 0.000000e+00, !dbg !118
  %768 = or i1 %766, %767, !dbg !119
  %769 = select i1 %768, float %765, float %764, !dbg !120
  %770 = bitcast i32 %501 to float, !dbg !78
  %771 = fcmp olt float %769, %770, !dbg !121
  %772 = fcmp uno float %770, 0.000000e+00, !dbg !123
  %773 = or i1 %771, %772, !dbg !124
  %774 = select i1 %773, float %770, float %769, !dbg !125
  %775 = bitcast i32 %550 to float, !dbg !84
  %776 = fcmp olt float %774, %775, !dbg !126
  %777 = fcmp uno float %775, 0.000000e+00, !dbg !128
  %778 = or i1 %776, %777, !dbg !129
  %779 = select i1 %778, float %775, float %774, !dbg !130
  %780 = bitcast i32 %610 to float, !dbg !89
  %781 = fcmp olt float %779, %780, !dbg !131
  %782 = zext i1 %746 to i8, !dbg !133
  %783 = select i1 %751, i8 2, i8 %782, !dbg !134
  %784 = select i1 %756, i8 3, i8 %783, !dbg !135
  %785 = select i1 %761, i8 4, i8 %784, !dbg !136
  %786 = select i1 %766, i8 5, i8 %785, !dbg !137
  %787 = select i1 %771, i8 6, i8 %786, !dbg !138
  %788 = select i1 %776, i8 7, i8 %787, !dbg !139
  %789 = select i1 %781, i8 8, i8 %788, !dbg !140
  %790 = bitcast i32 %364 to float, !dbg !68
  %791 = bitcast i32 %345 to float, !dbg !67
  %792 = fcmp ogt float %790, %791, !dbg !94
  %793 = fcmp uno float %790, 0.000000e+00, !dbg !98
  %794 = or i1 %792, %793, !dbg !99
  %795 = select i1 %794, float %790, float %791, !dbg !100
  %796 = bitcast i32 %385 to float, !dbg !69
  %797 = fcmp olt float %795, %796, !dbg !101
  %798 = fcmp uno float %796, 0.000000e+00, !dbg !103
  %799 = or i1 %797, %798, !dbg !104
  %800 = select i1 %799, float %796, float %795, !dbg !105
  %801 = bitcast i32 %404 to float, !dbg !70
  %802 = fcmp olt float %800, %801, !dbg !106
  %803 = fcmp uno float %801, 0.000000e+00, !dbg !108
  %804 = or i1 %802, %803, !dbg !109
  %805 = select i1 %804, float %801, float %800, !dbg !110
  %806 = bitcast i32 %427 to float, !dbg !71
  %807 = fcmp olt float %805, %806, !dbg !111
  %808 = fcmp uno float %806, 0.000000e+00, !dbg !113
  %809 = or i1 %807, %808, !dbg !114
  %810 = select i1 %809, float %806, float %805, !dbg !115
  %811 = bitcast i32 %445 to float, !dbg !72
  %812 = fcmp olt float %810, %811, !dbg !116
  %813 = fcmp uno float %811, 0.000000e+00, !dbg !118
  %814 = or i1 %812, %813, !dbg !119
  %815 = select i1 %814, float %811, float %810, !dbg !120
  %816 = bitcast i32 %500 to float, !dbg !78
  %817 = fcmp olt float %815, %816, !dbg !121
  %818 = fcmp uno float %816, 0.000000e+00, !dbg !123
  %819 = or i1 %817, %818, !dbg !124
  %820 = select i1 %819, float %816, float %815, !dbg !125
  %821 = bitcast i32 %549 to float, !dbg !84
  %822 = fcmp olt float %820, %821, !dbg !126
  %823 = fcmp uno float %821, 0.000000e+00, !dbg !128
  %824 = or i1 %822, %823, !dbg !129
  %825 = select i1 %824, float %821, float %820, !dbg !130
  %826 = bitcast i32 %609 to float, !dbg !89
  %827 = fcmp olt float %825, %826, !dbg !131
  %828 = zext i1 %792 to i8, !dbg !133
  %829 = select i1 %797, i8 2, i8 %828, !dbg !134
  %830 = select i1 %802, i8 3, i8 %829, !dbg !135
  %831 = select i1 %807, i8 4, i8 %830, !dbg !136
  %832 = select i1 %812, i8 5, i8 %831, !dbg !137
  %833 = select i1 %817, i8 6, i8 %832, !dbg !138
  %834 = select i1 %822, i8 7, i8 %833, !dbg !139
  %835 = select i1 %827, i8 8, i8 %834, !dbg !140
  %836 = bitcast i32 %363 to float, !dbg !68
  %837 = bitcast i32 %344 to float, !dbg !67
  %838 = fcmp ogt float %836, %837, !dbg !94
  %839 = fcmp uno float %836, 0.000000e+00, !dbg !98
  %840 = or i1 %838, %839, !dbg !99
  %841 = select i1 %840, float %836, float %837, !dbg !100
  %842 = bitcast i32 %384 to float, !dbg !69
  %843 = fcmp olt float %841, %842, !dbg !101
  %844 = fcmp uno float %842, 0.000000e+00, !dbg !103
  %845 = or i1 %843, %844, !dbg !104
  %846 = select i1 %845, float %842, float %841, !dbg !105
  %847 = bitcast i32 %403 to float, !dbg !70
  %848 = fcmp olt float %846, %847, !dbg !106
  %849 = fcmp uno float %847, 0.000000e+00, !dbg !108
  %850 = or i1 %848, %849, !dbg !109
  %851 = select i1 %850, float %847, float %846, !dbg !110
  %852 = bitcast i32 %426 to float, !dbg !71
  %853 = fcmp olt float %851, %852, !dbg !111
  %854 = fcmp uno float %852, 0.000000e+00, !dbg !113
  %855 = or i1 %853, %854, !dbg !114
  %856 = select i1 %855, float %852, float %851, !dbg !115
  %857 = bitcast i32 %444 to float, !dbg !72
  %858 = fcmp olt float %856, %857, !dbg !116
  %859 = fcmp uno float %857, 0.000000e+00, !dbg !118
  %860 = or i1 %858, %859, !dbg !119
  %861 = select i1 %860, float %857, float %856, !dbg !120
  %862 = bitcast i32 %499 to float, !dbg !78
  %863 = fcmp olt float %861, %862, !dbg !121
  %864 = fcmp uno float %862, 0.000000e+00, !dbg !123
  %865 = or i1 %863, %864, !dbg !124
  %866 = select i1 %865, float %862, float %861, !dbg !125
  %867 = bitcast i32 %548 to float, !dbg !84
  %868 = fcmp olt float %866, %867, !dbg !126
  %869 = fcmp uno float %867, 0.000000e+00, !dbg !128
  %870 = or i1 %868, %869, !dbg !129
  %871 = select i1 %870, float %867, float %866, !dbg !130
  %872 = bitcast i32 %608 to float, !dbg !89
  %873 = fcmp olt float %871, %872, !dbg !131
  %874 = zext i1 %838 to i8, !dbg !133
  %875 = select i1 %843, i8 2, i8 %874, !dbg !134
  %876 = select i1 %848, i8 3, i8 %875, !dbg !135
  %877 = select i1 %853, i8 4, i8 %876, !dbg !136
  %878 = select i1 %858, i8 5, i8 %877, !dbg !137
  %879 = select i1 %863, i8 6, i8 %878, !dbg !138
  %880 = select i1 %868, i8 7, i8 %879, !dbg !139
  %881 = select i1 %873, i8 8, i8 %880, !dbg !140
  %882 = bitcast i32 %362 to float, !dbg !68
  %883 = bitcast i32 %343 to float, !dbg !67
  %884 = fcmp ogt float %882, %883, !dbg !94
  %885 = fcmp uno float %882, 0.000000e+00, !dbg !98
  %886 = or i1 %884, %885, !dbg !99
  %887 = select i1 %886, float %882, float %883, !dbg !100
  %888 = bitcast i32 %383 to float, !dbg !69
  %889 = fcmp olt float %887, %888, !dbg !101
  %890 = fcmp uno float %888, 0.000000e+00, !dbg !103
  %891 = or i1 %889, %890, !dbg !104
  %892 = select i1 %891, float %888, float %887, !dbg !105
  %893 = bitcast i32 %402 to float, !dbg !70
  %894 = fcmp olt float %892, %893, !dbg !106
  %895 = fcmp uno float %893, 0.000000e+00, !dbg !108
  %896 = or i1 %894, %895, !dbg !109
  %897 = select i1 %896, float %893, float %892, !dbg !110
  %898 = bitcast i32 %425 to float, !dbg !71
  %899 = fcmp olt float %897, %898, !dbg !111
  %900 = fcmp uno float %898, 0.000000e+00, !dbg !113
  %901 = or i1 %899, %900, !dbg !114
  %902 = select i1 %901, float %898, float %897, !dbg !115
  %903 = bitcast i32 %443 to float, !dbg !72
  %904 = fcmp olt float %902, %903, !dbg !116
  %905 = fcmp uno float %903, 0.000000e+00, !dbg !118
  %906 = or i1 %904, %905, !dbg !119
  %907 = select i1 %906, float %903, float %902, !dbg !120
  %908 = bitcast i32 %498 to float, !dbg !78
  %909 = fcmp olt float %907, %908, !dbg !121
  %910 = fcmp uno float %908, 0.000000e+00, !dbg !123
  %911 = or i1 %909, %910, !dbg !124
  %912 = select i1 %911, float %908, float %907, !dbg !125
  %913 = bitcast i32 %547 to float, !dbg !84
  %914 = fcmp olt float %912, %913, !dbg !126
  %915 = fcmp uno float %913, 0.000000e+00, !dbg !128
  %916 = or i1 %914, %915, !dbg !129
  %917 = select i1 %916, float %913, float %912, !dbg !130
  %918 = bitcast i32 %607 to float, !dbg !89
  %919 = fcmp olt float %917, %918, !dbg !131
  %920 = zext i1 %884 to i8, !dbg !133
  %921 = select i1 %889, i8 2, i8 %920, !dbg !134
  %922 = select i1 %894, i8 3, i8 %921, !dbg !135
  %923 = select i1 %899, i8 4, i8 %922, !dbg !136
  %924 = select i1 %904, i8 5, i8 %923, !dbg !137
  %925 = select i1 %909, i8 6, i8 %924, !dbg !138
  %926 = select i1 %914, i8 7, i8 %925, !dbg !139
  %927 = select i1 %919, i8 8, i8 %926, !dbg !140
  %928 = bitcast i32 %361 to float, !dbg !68
  %929 = bitcast i32 %342 to float, !dbg !67
  %930 = fcmp ogt float %928, %929, !dbg !94
  %931 = fcmp uno float %928, 0.000000e+00, !dbg !98
  %932 = or i1 %930, %931, !dbg !99
  %933 = select i1 %932, float %928, float %929, !dbg !100
  %934 = bitcast i32 %382 to float, !dbg !69
  %935 = fcmp olt float %933, %934, !dbg !101
  %936 = fcmp uno float %934, 0.000000e+00, !dbg !103
  %937 = or i1 %935, %936, !dbg !104
  %938 = select i1 %937, float %934, float %933, !dbg !105
  %939 = bitcast i32 %401 to float, !dbg !70
  %940 = fcmp olt float %938, %939, !dbg !106
  %941 = fcmp uno float %939, 0.000000e+00, !dbg !108
  %942 = or i1 %940, %941, !dbg !109
  %943 = select i1 %942, float %939, float %938, !dbg !110
  %944 = bitcast i32 %424 to float, !dbg !71
  %945 = fcmp olt float %943, %944, !dbg !111
  %946 = fcmp uno float %944, 0.000000e+00, !dbg !113
  %947 = or i1 %945, %946, !dbg !114
  %948 = select i1 %947, float %944, float %943, !dbg !115
  %949 = bitcast i32 %442 to float, !dbg !72
  %950 = fcmp olt float %948, %949, !dbg !116
  %951 = fcmp uno float %949, 0.000000e+00, !dbg !118
  %952 = or i1 %950, %951, !dbg !119
  %953 = select i1 %952, float %949, float %948, !dbg !120
  %954 = bitcast i32 %497 to float, !dbg !78
  %955 = fcmp olt float %953, %954, !dbg !121
  %956 = fcmp uno float %954, 0.000000e+00, !dbg !123
  %957 = or i1 %955, %956, !dbg !124
  %958 = select i1 %957, float %954, float %953, !dbg !125
  %959 = bitcast i32 %546 to float, !dbg !84
  %960 = fcmp olt float %958, %959, !dbg !126
  %961 = fcmp uno float %959, 0.000000e+00, !dbg !128
  %962 = or i1 %960, %961, !dbg !129
  %963 = select i1 %962, float %959, float %958, !dbg !130
  %964 = bitcast i32 %606 to float, !dbg !89
  %965 = fcmp olt float %963, %964, !dbg !131
  %966 = zext i1 %930 to i8, !dbg !133
  %967 = select i1 %935, i8 2, i8 %966, !dbg !134
  %968 = select i1 %940, i8 3, i8 %967, !dbg !135
  %969 = select i1 %945, i8 4, i8 %968, !dbg !136
  %970 = select i1 %950, i8 5, i8 %969, !dbg !137
  %971 = select i1 %955, i8 6, i8 %970, !dbg !138
  %972 = select i1 %960, i8 7, i8 %971, !dbg !139
  %973 = select i1 %965, i8 8, i8 %972, !dbg !140
  %974 = bitcast i32 %360 to float, !dbg !68
  %975 = bitcast i32 %341 to float, !dbg !67
  %976 = fcmp ogt float %974, %975, !dbg !94
  %977 = fcmp uno float %974, 0.000000e+00, !dbg !98
  %978 = or i1 %976, %977, !dbg !99
  %979 = select i1 %978, float %974, float %975, !dbg !100
  %980 = bitcast i32 %381 to float, !dbg !69
  %981 = fcmp olt float %979, %980, !dbg !101
  %982 = fcmp uno float %980, 0.000000e+00, !dbg !103
  %983 = or i1 %981, %982, !dbg !104
  %984 = select i1 %983, float %980, float %979, !dbg !105
  %985 = bitcast i32 %400 to float, !dbg !70
  %986 = fcmp olt float %984, %985, !dbg !106
  %987 = fcmp uno float %985, 0.000000e+00, !dbg !108
  %988 = or i1 %986, %987, !dbg !109
  %989 = select i1 %988, float %985, float %984, !dbg !110
  %990 = bitcast i32 %423 to float, !dbg !71
  %991 = fcmp olt float %989, %990, !dbg !111
  %992 = fcmp uno float %990, 0.000000e+00, !dbg !113
  %993 = or i1 %991, %992, !dbg !114
  %994 = select i1 %993, float %990, float %989, !dbg !115
  %995 = bitcast i32 %441 to float, !dbg !72
  %996 = fcmp olt float %994, %995, !dbg !116
  %997 = fcmp uno float %995, 0.000000e+00, !dbg !118
  %998 = or i1 %996, %997, !dbg !119
  %999 = select i1 %998, float %995, float %994, !dbg !120
  %1000 = bitcast i32 %496 to float, !dbg !78
  %1001 = fcmp olt float %999, %1000, !dbg !121
  %1002 = fcmp uno float %1000, 0.000000e+00, !dbg !123
  %1003 = or i1 %1001, %1002, !dbg !124
  %1004 = select i1 %1003, float %1000, float %999, !dbg !125
  %1005 = bitcast i32 %545 to float, !dbg !84
  %1006 = fcmp olt float %1004, %1005, !dbg !126
  %1007 = fcmp uno float %1005, 0.000000e+00, !dbg !128
  %1008 = or i1 %1006, %1007, !dbg !129
  %1009 = select i1 %1008, float %1005, float %1004, !dbg !130
  %1010 = bitcast i32 %605 to float, !dbg !89
  %1011 = fcmp olt float %1009, %1010, !dbg !131
  %1012 = zext i1 %976 to i8, !dbg !133
  %1013 = select i1 %981, i8 2, i8 %1012, !dbg !134
  %1014 = select i1 %986, i8 3, i8 %1013, !dbg !135
  %1015 = select i1 %991, i8 4, i8 %1014, !dbg !136
  %1016 = select i1 %996, i8 5, i8 %1015, !dbg !137
  %1017 = select i1 %1001, i8 6, i8 %1016, !dbg !138
  %1018 = select i1 %1006, i8 7, i8 %1017, !dbg !139
  %1019 = select i1 %1011, i8 8, i8 %1018, !dbg !140
  %1020 = fcmp uno float %688, 0.000000e+00, !dbg !141
  %1021 = or i1 %689, %1020, !dbg !142
  %1022 = select i1 %1021, float %688, float %687, !dbg !143
  %1023 = fcmp uno float %734, 0.000000e+00, !dbg !141
  %1024 = or i1 %735, %1023, !dbg !142
  %1025 = select i1 %1024, float %734, float %733, !dbg !143
  %1026 = fcmp uno float %780, 0.000000e+00, !dbg !141
  %1027 = or i1 %781, %1026, !dbg !142
  %1028 = select i1 %1027, float %780, float %779, !dbg !143
  %1029 = fcmp uno float %826, 0.000000e+00, !dbg !141
  %1030 = or i1 %827, %1029, !dbg !142
  %1031 = select i1 %1030, float %826, float %825, !dbg !143
  %1032 = fcmp uno float %872, 0.000000e+00, !dbg !141
  %1033 = or i1 %873, %1032, !dbg !142
  %1034 = select i1 %1033, float %872, float %871, !dbg !143
  %1035 = fcmp uno float %918, 0.000000e+00, !dbg !141
  %1036 = or i1 %919, %1035, !dbg !142
  %1037 = select i1 %1036, float %918, float %917, !dbg !143
  %1038 = fcmp uno float %964, 0.000000e+00, !dbg !141
  %1039 = or i1 %965, %1038, !dbg !142
  %1040 = select i1 %1039, float %964, float %963, !dbg !143
  %1041 = fcmp uno float %1010, 0.000000e+00, !dbg !141
  %1042 = or i1 %1011, %1041, !dbg !142
  %1043 = select i1 %1042, float %1010, float %1009, !dbg !143
  %1044 = bitcast i32 %229 to float, !dbg !66
  %1045 = bitcast i32 %228 to float, !dbg !65
  %1046 = shl i32 %14, 2, !dbg !12
  %1047 = and i32 %1046, 508, !dbg !12
  %1048 = or disjoint i32 %1047, %13, !dbg !13
  %1049 = or disjoint i32 %1048, 512, !dbg !13
  %.frozen = freeze i32 %1048, !dbg !144
  %1050 = sdiv i32 %.frozen, 256, !dbg !144
  %1051 = mul i32 %1050, 256, !dbg !145
  %.decomposed = sub i32 %.frozen, %1051, !dbg !145
  %1052 = sdiv i32 %1049, 256, !dbg !144
  %1053 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !146
  %1054 = fmul float %651, %1053, !dbg !147
  %1055 = fmul float %648, %1053, !dbg !147
  %1056 = fmul float %645, %1053, !dbg !147
  %1057 = fmul float %642, %1053, !dbg !147
  %1058 = fmul float %639, %1053, !dbg !147
  %1059 = fmul float %636, %1053, !dbg !147
  %1060 = fmul float %633, %1053, !dbg !147
  %1061 = fmul float %630, %1053, !dbg !147
  %1062 = fmul float %1054, %1045, !dbg !148
  %1063 = fmul float %1055, %1045, !dbg !148
  %1064 = fmul float %1056, %1045, !dbg !148
  %1065 = fmul float %1057, %1045, !dbg !148
  %1066 = fmul float %1058, %1045, !dbg !148
  %1067 = fmul float %1059, %1045, !dbg !148
  %1068 = fmul float %1060, %1045, !dbg !148
  %1069 = fmul float %1061, %1045, !dbg !148
  %1070 = fadd float %1062, %1044, !dbg !149
  %1071 = fadd float %1063, %1044, !dbg !149
  %1072 = fadd float %1064, %1044, !dbg !149
  %1073 = fadd float %1065, %1044, !dbg !149
  %1074 = fadd float %1066, %1044, !dbg !149
  %1075 = fadd float %1067, %1044, !dbg !149
  %1076 = fadd float %1068, %1044, !dbg !149
  %1077 = fadd float %1069, %1044, !dbg !149
  %1078 = fadd float %1043, %1070, !dbg !150
  %1079 = fadd float %1040, %1071, !dbg !150
  %1080 = fadd float %1037, %1072, !dbg !150
  %1081 = fadd float %1034, %1073, !dbg !150
  %1082 = fadd float %1031, %1074, !dbg !150
  %1083 = fadd float %1028, %1075, !dbg !150
  %1084 = fadd float %1025, %1076, !dbg !150
  %1085 = fadd float %1022, %1077, !dbg !150
  %1086 = getelementptr i8, ptr addrspace(1) %7, i64 %206, !dbg !151
  %1087 = getelementptr i8, ptr addrspace(1) %7, i64 %33, !dbg !151
  %1088 = getelementptr i8, ptr addrspace(1) %7, i64 %35, !dbg !151
  %1089 = getelementptr i8, ptr addrspace(1) %7, i64 %37, !dbg !151
  %1090 = getelementptr i8, ptr addrspace(1) %7, i64 %208, !dbg !151
  %1091 = getelementptr i8, ptr addrspace(1) %7, i64 %210, !dbg !151
  %1092 = getelementptr i8, ptr addrspace(1) %7, i64 %212, !dbg !151
  %1093 = getelementptr i8, ptr addrspace(1) %7, i64 %214, !dbg !151
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %1019, ptr addrspace(1) %1086, i1 %23) #4, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %973, ptr addrspace(1) %1087, i1 %23) #4, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %927, ptr addrspace(1) %1088, i1 %23) #4, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %881, ptr addrspace(1) %1089, i1 %23) #4, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %835, ptr addrspace(1) %1090, i1 %23) #4, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %789, ptr addrspace(1) %1091, i1 %23) #4, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %743, ptr addrspace(1) %1092, i1 %23) #4, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %697, ptr addrspace(1) %1093, i1 %23) #4, !dbg !152
  tail call void @llvm.nvvm.barrier0(), !dbg !153
  %1094 = bitcast float %650 to i32, !dbg !154
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1094, ptr addrspace(1) %207, i1 %23) #4, !dbg !154
  %1095 = bitcast float %647 to i32, !dbg !154
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1095, ptr addrspace(1) %34, i1 %23) #4, !dbg !154
  %1096 = bitcast float %644 to i32, !dbg !154
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1096, ptr addrspace(1) %36, i1 %23) #4, !dbg !154
  %1097 = bitcast float %641 to i32, !dbg !154
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1097, ptr addrspace(1) %38, i1 %23) #4, !dbg !154
  %1098 = bitcast float %638 to i32, !dbg !154
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1098, ptr addrspace(1) %209, i1 %23) #4, !dbg !154
  %1099 = bitcast float %635 to i32, !dbg !154
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1099, ptr addrspace(1) %211, i1 %23) #4, !dbg !154
  %1100 = bitcast float %632 to i32, !dbg !154
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1100, ptr addrspace(1) %213, i1 %23) #4, !dbg !154
  %1101 = bitcast float %628 to i32, !dbg !154
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1101, ptr addrspace(1) %215, i1 %23) #4, !dbg !154
  %1102 = shl i32 %22, 8, !dbg !155
  %1103 = add i32 %.decomposed, %1102, !dbg !156
  %1104 = mul i32 %1050, 186368, !dbg !157
  %1105 = mul i32 %1052, 186368, !dbg !157
  %1106 = add i32 %1103, %1104, !dbg !158
  %1107 = add i32 %1103, %1105, !dbg !158
  %1108 = sext i32 %1106 to i64, !dbg !159
  %1109 = getelementptr float, ptr addrspace(1) %8, i64 %1108, !dbg !159
  %1110 = sext i32 %1107 to i64, !dbg !159
  %1111 = getelementptr float, ptr addrspace(1) %8, i64 %1110, !dbg !159
  %1112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !160
  %1113 = bitcast float %1078 to <1 x i32>, !dbg !160
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1112, <1 x i32> %1113, i1 true) #4, !dbg !160
  %1114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !160
  %1115 = bitcast float %1079 to <1 x i32>, !dbg !160
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1114, <1 x i32> %1115, i1 true) #4, !dbg !160
  %1116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !160
  %1117 = bitcast float %1080 to <1 x i32>, !dbg !160
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1116, <1 x i32> %1117, i1 true) #4, !dbg !160
  %1118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !160
  %1119 = bitcast float %1081 to <1 x i32>, !dbg !160
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1118, <1 x i32> %1119, i1 true) #4, !dbg !160
  tail call void @llvm.nvvm.barrier0(), !dbg !160
  %1120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1047, !dbg !160
  %1121 = load <4 x i32>, ptr addrspace(3) %1120, align 16, !dbg !160
  tail call void @llvm.nvvm.barrier0(), !dbg !160
  %1122 = bitcast float %1082 to <1 x i32>, !dbg !160
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1112, <1 x i32> %1122, i1 true) #4, !dbg !160
  %1123 = bitcast float %1083 to <1 x i32>, !dbg !160
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1114, <1 x i32> %1123, i1 true) #4, !dbg !160
  %1124 = bitcast float %1084 to <1 x i32>, !dbg !160
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1116, <1 x i32> %1124, i1 true) #4, !dbg !160
  %1125 = bitcast float %1085 to <1 x i32>, !dbg !160
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1118, <1 x i32> %1125, i1 true) #4, !dbg !160
  tail call void @llvm.nvvm.barrier0(), !dbg !160
  %1126 = load <4 x i32>, ptr addrspace(3) %1120, align 16, !dbg !160
  %.extract = extractelement <4 x i32> %1121, i64 0, !dbg !160
  %.extract8 = extractelement <4 x i32> %1121, i64 1, !dbg !160
  %.extract9 = extractelement <4 x i32> %1121, i64 2, !dbg !160
  %.extract10 = extractelement <4 x i32> %1121, i64 3, !dbg !160
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %1109, i1 %23) #4, !dbg !160
  %.extract11 = extractelement <4 x i32> %1126, i64 0, !dbg !160
  %.extract12 = extractelement <4 x i32> %1126, i64 1, !dbg !160
  %.extract13 = extractelement <4 x i32> %1126, i64 2, !dbg !160
  %.extract14 = extractelement <4 x i32> %1126, i64 3, !dbg !160
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %1111, i1 %23) #4, !dbg !160
  ret void, !dbg !161
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2ktk7o3iszzameqeugdr3imivwcvh4sg3ao45lshs54pswdywpt.py", directory: "inductor_cache/2k")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 34, column: 44, scope: !7)
!18 = !DILocation(line: 34, column: 40, scope: !7)
!19 = !DILocation(line: 34, column: 35, scope: !7)
!20 = !DILocation(line: 35, column: 31, scope: !7)
!21 = !DILocation(line: 36, column: 31, scope: !7)
!22 = !DILocation(line: 37, column: 31, scope: !7)
!23 = !DILocation(line: 38, column: 31, scope: !7)
!24 = !DILocation(line: 39, column: 31, scope: !7)
!25 = !DILocation(line: 51, column: 42, scope: !7)
!26 = !DILocation(line: 51, column: 47, scope: !7)
!27 = !DILocation(line: 51, column: 31, scope: !7)
!28 = !DILocation(line: 57, column: 42, scope: !7)
!29 = !DILocation(line: 57, column: 47, scope: !7)
!30 = !DILocation(line: 57, column: 31, scope: !7)
!31 = !DILocation(line: 64, column: 42, scope: !7)
!32 = !DILocation(line: 64, column: 47, scope: !7)
!33 = !DILocation(line: 64, column: 31, scope: !7)
!34 = !DILocation(line: 71, column: 40, scope: !7)
!35 = !DILocation(line: 71, column: 45, scope: !7)
!36 = !DILocation(line: 71, column: 31, scope: !7)
!37 = !DILocation(line: 74, column: 31, scope: !7)
!38 = !DILocation(line: 77, column: 37, scope: !7)
!39 = !DILocation(line: 77, column: 42, scope: !7)
!40 = !DILocation(line: 77, column: 31, scope: !7)
!41 = !DILocation(line: 28, column: 27, scope: !7)
!42 = !DILocation(line: 73, column: 20, scope: !7)
!43 = !DILocation(line: 42, column: 19, scope: !7)
!44 = !DILocation(line: 47, column: 19, scope: !7)
!45 = !DILocation(line: 50, column: 19, scope: !7)
!46 = !DILocation(line: 51, column: 64, scope: !7)
!47 = !DILocation(line: 53, column: 21, scope: !7)
!48 = !DILocation(line: 56, column: 19, scope: !7)
!49 = !DILocation(line: 57, column: 64, scope: !7)
!50 = !DILocation(line: 82, column: 20, scope: !7)
!51 = !DILocation(line: 89, column: 20, scope: !7)
!52 = !DILocation(line: 62, column: 20, scope: !7)
!53 = !DILocation(line: 63, column: 19, scope: !7)
!54 = !DILocation(line: 64, column: 64, scope: !7)
!55 = !DILocation(line: 67, column: 21, scope: !7)
!56 = !DILocation(line: 70, column: 20, scope: !7)
!57 = !DILocation(line: 71, column: 62, scope: !7)
!58 = !DILocation(line: 74, column: 53, scope: !7)
!59 = !DILocation(line: 76, column: 20, scope: !7)
!60 = !DILocation(line: 77, column: 59, scope: !7)
!61 = !DILocation(line: 34, column: 49, scope: !7)
!62 = !DILocation(line: 35, column: 36, scope: !7)
!63 = !DILocation(line: 36, column: 36, scope: !7)
!64 = !DILocation(line: 37, column: 36, scope: !7)
!65 = !DILocation(line: 38, column: 36, scope: !7)
!66 = !DILocation(line: 39, column: 36, scope: !7)
!67 = !DILocation(line: 51, column: 56, scope: !7)
!68 = !DILocation(line: 57, column: 56, scope: !7)
!69 = !DILocation(line: 64, column: 56, scope: !7)
!70 = !DILocation(line: 71, column: 54, scope: !7)
!71 = !DILocation(line: 74, column: 45, scope: !7)
!72 = !DILocation(line: 77, column: 51, scope: !7)
!73 = !DILocation(line: 83, column: 20, scope: !7)
!74 = !DILocation(line: 84, column: 39, scope: !7)
!75 = !DILocation(line: 84, column: 44, scope: !7)
!76 = !DILocation(line: 84, column: 31, scope: !7)
!77 = !DILocation(line: 84, column: 61, scope: !7)
!78 = !DILocation(line: 84, column: 53, scope: !7)
!79 = !DILocation(line: 86, column: 20, scope: !7)
!80 = !DILocation(line: 87, column: 39, scope: !7)
!81 = !DILocation(line: 87, column: 44, scope: !7)
!82 = !DILocation(line: 87, column: 31, scope: !7)
!83 = !DILocation(line: 87, column: 61, scope: !7)
!84 = !DILocation(line: 87, column: 53, scope: !7)
!85 = !DILocation(line: 90, column: 39, scope: !7)
!86 = !DILocation(line: 90, column: 44, scope: !7)
!87 = !DILocation(line: 90, column: 31, scope: !7)
!88 = !DILocation(line: 90, column: 61, scope: !7)
!89 = !DILocation(line: 90, column: 53, scope: !7)
!90 = !DILocation(line: 120, column: 20, scope: !7)
!91 = !DILocation(line: 121, column: 27, scope: !7)
!92 = !DILocation(line: 117, column: 20, scope: !7)
!93 = !DILocation(line: 118, column: 20, scope: !7)
!94 = !DILocation(line: 118, column: 15, scope: !95, inlinedAt: !97)
!95 = distinct !DILexicalBlockFile(scope: !7, file: !96, discriminator: 0)
!96 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!97 = !DILocation(line: 58, column: 42, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !95, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !95, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !95, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !95, inlinedAt: !102)
!102 = !DILocation(line: 65, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !95, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !95, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !95, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !95, inlinedAt: !107)
!107 = !DILocation(line: 72, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !95, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !95, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !95, inlinedAt: !107)
!111 = !DILocation(line: 118, column: 15, scope: !95, inlinedAt: !112)
!112 = !DILocation(line: 75, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 21, scope: !95, inlinedAt: !112)
!114 = !DILocation(line: 120, column: 16, scope: !95, inlinedAt: !112)
!115 = !DILocation(line: 121, column: 29, scope: !95, inlinedAt: !112)
!116 = !DILocation(line: 118, column: 15, scope: !95, inlinedAt: !117)
!117 = !DILocation(line: 78, column: 42, scope: !7)
!118 = !DILocation(line: 120, column: 21, scope: !95, inlinedAt: !117)
!119 = !DILocation(line: 120, column: 16, scope: !95, inlinedAt: !117)
!120 = !DILocation(line: 121, column: 29, scope: !95, inlinedAt: !117)
!121 = !DILocation(line: 118, column: 15, scope: !95, inlinedAt: !122)
!122 = !DILocation(line: 85, column: 42, scope: !7)
!123 = !DILocation(line: 120, column: 21, scope: !95, inlinedAt: !122)
!124 = !DILocation(line: 120, column: 16, scope: !95, inlinedAt: !122)
!125 = !DILocation(line: 121, column: 29, scope: !95, inlinedAt: !122)
!126 = !DILocation(line: 118, column: 15, scope: !95, inlinedAt: !127)
!127 = !DILocation(line: 88, column: 42, scope: !7)
!128 = !DILocation(line: 120, column: 21, scope: !95, inlinedAt: !127)
!129 = !DILocation(line: 120, column: 16, scope: !95, inlinedAt: !127)
!130 = !DILocation(line: 121, column: 29, scope: !95, inlinedAt: !127)
!131 = !DILocation(line: 118, column: 15, scope: !95, inlinedAt: !132)
!132 = !DILocation(line: 91, column: 42, scope: !7)
!133 = !DILocation(line: 95, column: 35, scope: !7)
!134 = !DILocation(line: 98, column: 35, scope: !7)
!135 = !DILocation(line: 101, column: 35, scope: !7)
!136 = !DILocation(line: 104, column: 35, scope: !7)
!137 = !DILocation(line: 107, column: 35, scope: !7)
!138 = !DILocation(line: 110, column: 35, scope: !7)
!139 = !DILocation(line: 113, column: 35, scope: !7)
!140 = !DILocation(line: 116, column: 35, scope: !7)
!141 = !DILocation(line: 120, column: 21, scope: !95, inlinedAt: !132)
!142 = !DILocation(line: 120, column: 16, scope: !95, inlinedAt: !132)
!143 = !DILocation(line: 121, column: 29, scope: !95, inlinedAt: !132)
!144 = !DILocation(line: 32, column: 19, scope: !7)
!145 = !DILocation(line: 33, column: 19, scope: !7)
!146 = !DILocation(line: 123, column: 20, scope: !7)
!147 = !DILocation(line: 126, column: 20, scope: !7)
!148 = !DILocation(line: 127, column: 20, scope: !7)
!149 = !DILocation(line: 128, column: 20, scope: !7)
!150 = !DILocation(line: 129, column: 20, scope: !7)
!151 = !DILocation(line: 130, column: 25, scope: !7)
!152 = !DILocation(line: 130, column: 46, scope: !7)
!153 = !DILocation(line: 131, column: 4, scope: !7)
!154 = !DILocation(line: 132, column: 49, scope: !7)
!155 = !DILocation(line: 133, column: 34, scope: !7)
!156 = !DILocation(line: 133, column: 30, scope: !7)
!157 = !DILocation(line: 133, column: 46, scope: !7)
!158 = !DILocation(line: 133, column: 39, scope: !7)
!159 = !DILocation(line: 133, column: 25, scope: !7)
!160 = !DILocation(line: 133, column: 58, scope: !7)
!161 = !DILocation(line: 133, column: 4, scope: !7)
