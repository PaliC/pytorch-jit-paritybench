; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_group_norm_relu_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 510, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 1, !dbg !13
  %20 = srem i32 %18, 256, !dbg !14
  %21 = srem i32 %19, 256, !dbg !14
  %22 = sdiv i32 %18, 65536, !dbg !15
  %23 = sext i32 %18 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !16
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !17
  %26 = shl nsw i32 %22, 5, !dbg !18
  %.lhs.trunc = trunc nsw i32 %20 to i16, !dbg !19
  %27 = sdiv i16 %.lhs.trunc, 8, !dbg !19
  %.sext = sext i16 %27 to i32, !dbg !19
  %.lhs.trunc10 = trunc nsw i32 %21 to i16, !dbg !19
  %28 = sdiv i16 %.lhs.trunc10, 8, !dbg !19
  %.sext11 = sext i16 %28 to i32, !dbg !19
  %29 = add nsw i32 %26, %.sext, !dbg !20
  %30 = add nsw i32 %26, %.sext11, !dbg !20
  %31 = sext i32 %29 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !21
  %33 = sext i32 %30 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !24
  %40 = bitcast i32 %39 to float, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !24
  %42 = bitcast i32 %41 to float, !dbg !24
  %43 = sext i32 %20 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !25
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %5, i64 %43, !dbg !27
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !29
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %7, i64 %31, !dbg !31
  %51 = getelementptr float, ptr addrspace(1) %7, i64 %33, !dbg !31
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !32
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !32
  %54 = getelementptr float, ptr addrspace(1) %8, i64 %31, !dbg !33
  %55 = getelementptr float, ptr addrspace(1) %8, i64 %33, !dbg !33
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !34
  %57 = bitcast i32 %56 to float, !dbg !34
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !34
  %59 = bitcast i32 %58 to float, !dbg !34
  %60 = getelementptr float, ptr addrspace(1) %9, i64 %43, !dbg !35
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !36
  %62 = getelementptr float, ptr addrspace(1) %10, i64 %43, !dbg !37
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !38
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %40, float 2.048000e+03) #3, !dbg !39
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float 2.048000e+03) #3, !dbg !39
  %66 = fadd float %64, 0x3EE4F8B580000000, !dbg !40
  %67 = fadd float %65, 0x3EE4F8B580000000, !dbg !40
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %68, 0, !dbg !41
  br i1 %.not.i, label %71, label %69, !dbg !41

69:                                               ; preds = %12
  %70 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %66), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

71:                                               ; preds = %12
  %72 = tail call float @llvm.nvvm.rsqrt.approx.f(float %66), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %69, %71
  %.0.i = phi float [ %70, %69 ], [ %72, %71 ], !dbg !41
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %73, 0, !dbg !41
  br i1 %.not.i1, label %76, label %74, !dbg !41

74:                                               ; preds = %__nv_rsqrtf.exit
  %75 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %67), !dbg !41
  br label %__nv_rsqrtf.exit3, !dbg !41

76:                                               ; preds = %__nv_rsqrtf.exit
  %77 = tail call float @llvm.nvvm.rsqrt.approx.f(float %67), !dbg !41
  br label %__nv_rsqrtf.exit3, !dbg !41

__nv_rsqrtf.exit3:                                ; preds = %74, %76
  %.0.i2 = phi float [ %75, %74 ], [ %77, %76 ], !dbg !41
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float 2.048000e+03) #3, !dbg !42
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float 2.048000e+03) #3, !dbg !42
  %80 = fadd float %78, 0x3EE4F8B580000000, !dbg !43
  %81 = fadd float %79, 0x3EE4F8B580000000, !dbg !43
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i4 = icmp eq i32 %82, 0, !dbg !44
  br i1 %.not.i4, label %85, label %83, !dbg !44

83:                                               ; preds = %__nv_rsqrtf.exit3
  %84 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %80), !dbg !44
  br label %__nv_rsqrtf.exit6, !dbg !44

85:                                               ; preds = %__nv_rsqrtf.exit3
  %86 = tail call float @llvm.nvvm.rsqrt.approx.f(float %80), !dbg !44
  br label %__nv_rsqrtf.exit6, !dbg !44

__nv_rsqrtf.exit6:                                ; preds = %83, %85
  %.0.i5 = phi float [ %84, %83 ], [ %86, %85 ], !dbg !44
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i7 = icmp eq i32 %87, 0, !dbg !44
  br i1 %.not.i7, label %90, label %88, !dbg !44

88:                                               ; preds = %__nv_rsqrtf.exit6
  %89 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %81), !dbg !44
  br label %__nv_rsqrtf.exit9, !dbg !44

90:                                               ; preds = %__nv_rsqrtf.exit6
  %91 = tail call float @llvm.nvvm.rsqrt.approx.f(float %81), !dbg !44
  br label %__nv_rsqrtf.exit9, !dbg !44

__nv_rsqrtf.exit9:                                ; preds = %88, %90
  %.0.i8 = phi float [ %89, %88 ], [ %91, %90 ], !dbg !44
  %92 = extractvalue { i32, i32 } %49, 1, !dbg !30
  %93 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !22
  %94 = insertelement <2 x i32> %93, i32 %53, i64 1, !dbg !22
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !22
  %96 = extractvalue { i32, i32 } %49, 0, !dbg !30
  %97 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !22
  %98 = insertelement <2 x i32> %97, i32 %52, i64 1, !dbg !22
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !22
  %100 = extractvalue { i32, i32 } %25, 1, !dbg !17
  %101 = extractvalue { i32, i32 } %45, 1, !dbg !26
  %102 = extractvalue { i32, i32 } %47, 1, !dbg !28
  %103 = extractvalue { i32, i32 } %25, 0, !dbg !17
  %104 = extractvalue { i32, i32 } %45, 0, !dbg !26
  %105 = extractvalue { i32, i32 } %47, 0, !dbg !28
  %106 = extractvalue { i32, i32 } %63, 1, !dbg !38
  %107 = extractvalue { i32, i32 } %63, 0, !dbg !38
  %108 = extractvalue { i32, i32 } %61, 1, !dbg !36
  %109 = extractvalue { i32, i32 } %61, 0, !dbg !36
  %110 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !17
  %111 = insertelement <2 x i32> %110, i32 %96, i64 1, !dbg !17
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !17
  %113 = fsub <2 x float> %112, %99, !dbg !45
  %114 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !28
  %115 = insertelement <2 x i32> %114, i32 %107, i64 1, !dbg !28
  %116 = bitcast <2 x i32> %115 to <2 x float>, !dbg !28
  %117 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !26
  %118 = insertelement <2 x i32> %117, i32 %109, i64 1, !dbg !26
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !26
  %120 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !46
  %121 = insertelement <2 x float> %120, float %.0.i5, i64 1, !dbg !46
  %122 = fmul <2 x float> %113, %121, !dbg !46
  %123 = fmul <2 x float> %122, %119, !dbg !47
  %124 = fadd <2 x float> %123, %116, !dbg !48
  %125 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !17
  %126 = insertelement <2 x i32> %125, i32 %92, i64 1, !dbg !17
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !17
  %128 = fsub <2 x float> %127, %95, !dbg !45
  %129 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !28
  %130 = insertelement <2 x i32> %129, i32 %106, i64 1, !dbg !28
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !28
  %132 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !26
  %133 = insertelement <2 x i32> %132, i32 %108, i64 1, !dbg !26
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !26
  %135 = insertelement <2 x float> poison, float %.0.i2, i64 0, !dbg !46
  %136 = insertelement <2 x float> %135, float %.0.i8, i64 1, !dbg !46
  %137 = fmul <2 x float> %128, %136, !dbg !46
  %138 = fmul <2 x float> %137, %134, !dbg !47
  %139 = fadd <2 x float> %138, %131, !dbg !48
  %shift = shufflevector <2 x float> %124, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %140 = fadd <2 x float> %124, %shift, !dbg !49
  %141 = extractelement <2 x float> %140, i64 0, !dbg !49
  %shift12 = shufflevector <2 x float> %139, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %142 = fadd <2 x float> %139, %shift12, !dbg !49
  %143 = extractelement <2 x float> %142, i64 0, !dbg !49
  %144 = fcmp olt float %141, 0.000000e+00, !dbg !50
  %145 = fcmp olt float %143, 0.000000e+00, !dbg !50
  %146 = select i1 %144, float 0.000000e+00, float %141, !dbg !54
  %147 = select i1 %145, float 0.000000e+00, float %143, !dbg !54
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !55
  %149 = bitcast float %146 to i32, !dbg !56
  %150 = bitcast float %147 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %149, i32 %150, ptr addrspace(1) %148, i1 true) #3, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvvscif6bgvvy4owqlvxdy7esvgcee23tu7mu2nbslb3uu3t6nga.py", directory: "inductor_cache/vv")
!4 = !{ptr @triton_poi_fused_add_native_group_norm_relu_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_group_norm_relu_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_group_norm_relu_12", linkageName: "triton_poi_fused_add_native_group_norm_relu_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 33, scope: !7)
!19 = !DILocation(line: 28, column: 45, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 50, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 50, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 51, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 51, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 41, column: 18, scope: !7)
!41 = !DILocation(line: 42, column: 27, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 28, scope: !7)
!45 = !DILocation(line: 37, column: 18, scope: !7)
!46 = !DILocation(line: 43, column: 18, scope: !7)
!47 = !DILocation(line: 44, column: 19, scope: !7)
!48 = !DILocation(line: 45, column: 20, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 55, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 56, column: 28, scope: !7)
!56 = !DILocation(line: 56, column: 40, scope: !7)
!57 = !DILocation(line: 56, column: 4, scope: !7)
