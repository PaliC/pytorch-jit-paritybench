#loc = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":19:0)
#loc1 = loc(unknown)
#loc14 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":36:25)
#loc36 = loc(callsite(#loc1 at #loc14))
module {
  tt.func public @triton_red_fused_clamp_min_div_linalg_vector_norm_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<9.99999996E-13> : tensor<1x1xf32> loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c3072_i32 = arith.constant 3072 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<3072> : tensor<1x2048xi32> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32> loc(#loc1)
    %0 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<2048xi32> -> tensor<1x2048xi32> loc(#loc3)
    %2 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc4)
    %3 = scf.for %arg4 = %c0_i32 to %c3072_i32 step %c2048_i32 iter_args(%arg5 = %cst_1) -> (tensor<1x2048xf32>)  : i32 {
      %16 = tt.splat %arg4 : i32 -> tensor<1x2048xi32> loc(#loc6)
      %17 = arith.addi %16, %1 : tensor<1x2048xi32> loc(#loc6)
      %18 = arith.cmpi slt, %17, %cst_0 : tensor<1x2048xi32> loc(#loc7)
      %19 = tt.addptr %2, %17 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc4)
      %20 = tt.load %19, %18, %cst_1 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>> loc(#loc8)
      %21 = arith.mulf %20, %20 : tensor<1x2048xf32> loc(#loc9)
      %22 = arith.addf %arg5, %21 : tensor<1x2048xf32> loc(#loc10)
      %23 = arith.select %18, %22, %arg5 : tensor<1x2048xi1>, tensor<1x2048xf32> loc(#loc11)
      scf.yield %23 : tensor<1x2048xf32> loc(#loc12)
    } loc(#loc5)
    %4 = "tt.reduce"(%3) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc14)), %arg5: f32 loc(callsite(#loc1 at #loc14))):
      %16 = arith.addf %arg4, %arg5 : f32 loc(#loc42)
      tt.reduce.return %16 : f32 loc(#loc35)
    }) : (tensor<1x2048xf32>) -> tensor<1xf32> loc(#loc35)
    %5 = tt.expand_dims %4 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc16)
    %6 = tt.extern_elementwise %5 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32> loc(#loc17)
    gpu.barrier loc(#loc18)
    %7 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc19)
    %8 = tt.splat %7 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc19)
    tt.store %8, %6 : tensor<1x1x!tt.ptr<f32>> loc(#loc20)
    %9 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc21)
    %10 = arith.cmpf ogt, %6, %cst : tensor<1x1xf32> loc(#loc38)
    %11 = arith.cmpf une, %6, %6 : tensor<1x1xf32> loc(#loc39)
    %12 = arith.ori %10, %11 : tensor<1x1xi1> loc(#loc40)
    %13 = arith.select %12, %6, %cst : tensor<1x1xi1>, tensor<1x1xf32> loc(#loc41)
    %14 = tt.broadcast %13 : tensor<1x1xf32> -> tensor<1x2048xf32> loc(#loc27)
    %15 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc28)
    scf.for %arg4 = %c0_i32 to %c3072_i32 step %c2048_i32  : i32 {
      %16 = tt.splat %arg4 : i32 -> tensor<1x2048xi32> loc(#loc30)
      %17 = arith.addi %16, %1 : tensor<1x2048xi32> loc(#loc30)
      %18 = arith.cmpi slt, %17, %cst_0 : tensor<1x2048xi32> loc(#loc31)
      %19 = tt.addptr %9, %17 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc21)
      %20 = tt.load %19, %18, %cst_1 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>> loc(#loc32)
      %21 = arith.divf %20, %14 : tensor<1x2048xf32> loc(#loc27)
      %22 = tt.addptr %15, %17 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc28)
      tt.store %22, %21, %18 : tensor<1x2048x!tt.ptr<f32>> loc(#loc33)
    } loc(#loc29)
    tt.return loc(#loc34)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":25:25)
#loc3 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":25:33)
#loc4 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":31:34)
#loc5 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":27:36)
#loc6 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":28:27)
#loc7 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":29:25)
#loc8 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":31:39)
#loc9 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":32:22)
#loc10 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":34:23)
#loc11 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":35:38)
#loc12 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":35:8)
#loc13 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc16 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":36:28)
#loc17 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":37:26)
#loc18 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":38:4)
#loc19 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":39:28)
#loc20 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":39:70)
#loc21 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":44:34)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc23 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":46:44)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc27 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":47:22)
#loc28 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":48:29)
#loc29 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":40:36)
#loc30 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":41:27)
#loc31 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":42:25)
#loc32 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":44:39)
#loc33 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":48:75)
#loc34 = loc("inductor_cache/52/c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py":40:4)
#loc35 = loc(callsite(#loc13 at #loc14))
#loc37 = loc(callsite(#loc15 at #loc13))
#loc38 = loc(callsite(#loc22 at #loc23))
#loc39 = loc(callsite(#loc24 at #loc23))
#loc40 = loc(callsite(#loc25 at #loc23))
#loc41 = loc(callsite(#loc26 at #loc23))
#loc42 = loc(callsite(#loc37 at #loc14))
