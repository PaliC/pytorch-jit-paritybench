; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused_clamp_min_div_linalg_vector_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = shl i32 %5, 2, !dbg !10
  %8 = and i32 %7, 2044, !dbg !10
  %9 = zext nneg i32 %8 to i64, !dbg !11
  %10 = getelementptr float, ptr addrspace(1) %1, i64 %9, !dbg !12
  %11 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %10, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !13
  %12 = extractvalue { i32, i32, i32, i32 } %11, 0, !dbg !13
  %13 = extractvalue { i32, i32, i32, i32 } %11, 1, !dbg !13
  %14 = extractvalue { i32, i32, i32, i32 } %11, 2, !dbg !13
  %15 = extractvalue { i32, i32, i32, i32 } %11, 3, !dbg !13
  %16 = bitcast i32 %14 to float, !dbg !13
  %17 = bitcast i32 %15 to float, !dbg !13
  %18 = fmul float %16, %16, !dbg !14
  %19 = fmul float %17, %17, !dbg !14
  %20 = or disjoint i64 %9, 2048, !dbg !15
  %21 = icmp samesign ult i64 %20, 3072, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !12
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !13
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !13
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !13
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !13
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !13
  %28 = bitcast i32 %26 to float, !dbg !13
  %29 = bitcast i32 %27 to float, !dbg !13
  %30 = fmul float %28, %28, !dbg !14
  %31 = fmul float %29, %29, !dbg !14
  %32 = fadd float %18, %30, !dbg !17
  %33 = fadd float %19, %31, !dbg !17
  %34 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !13
  %35 = insertelement <2 x i32> %34, i32 %13, i64 1, !dbg !13
  %36 = bitcast <2 x i32> %35 to <2 x float>, !dbg !13
  %37 = fmul <2 x float> %36, %36, !dbg !14
  %38 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !13
  %39 = insertelement <2 x i32> %38, i32 %25, i64 1, !dbg !13
  %40 = bitcast <2 x i32> %39 to <2 x float>, !dbg !13
  %41 = fmul <2 x float> %40, %40, !dbg !14
  %42 = fadd <2 x float> %37, %41, !dbg !17
  %43 = insertelement <2 x i1> poison, i1 %21, i64 0, !dbg !18
  %44 = shufflevector <2 x i1> %43, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !18
  %45 = select <2 x i1> %44, <2 x float> %42, <2 x float> %37, !dbg !18
  %46 = select i1 %21, float %32, float %18, !dbg !18
  %47 = select i1 %21, float %33, float %19, !dbg !18
  %48 = lshr i32 %5, 5, !dbg !10
  %shift = shufflevector <2 x float> %45, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %49 = fadd <2 x float> %45, %shift, !dbg !19
  %50 = extractelement <2 x float> %49, i64 0, !dbg !19
  %51 = fadd float %46, %50, !dbg !19
  %52 = fadd float %47, %51, !dbg !19
  %53 = bitcast float %52 to i32, !dbg !24
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 16, i32 31), !dbg !24
  %55 = bitcast i32 %54 to float, !dbg !24
  %56 = fadd float %52, %55, !dbg !19
  %57 = bitcast float %56 to i32, !dbg !24
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 8, i32 31), !dbg !24
  %59 = bitcast i32 %58 to float, !dbg !24
  %60 = fadd float %56, %59, !dbg !19
  %61 = bitcast float %60 to i32, !dbg !24
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 4, i32 31), !dbg !24
  %63 = bitcast i32 %62 to float, !dbg !24
  %64 = fadd float %60, %63, !dbg !19
  %65 = bitcast float %64 to i32, !dbg !24
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 2, i32 31), !dbg !24
  %67 = bitcast i32 %66 to float, !dbg !24
  %68 = fadd float %64, %67, !dbg !19
  %69 = bitcast float %68 to i32, !dbg !24
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 1, i32 31), !dbg !24
  %71 = bitcast i32 %70 to float, !dbg !24
  %72 = fadd float %68, %71, !dbg !19
  %73 = icmp eq i32 %6, 0, !dbg !24
  %74 = and i32 %48, 15, !dbg !24
  %75 = zext nneg i32 %74 to i64, !dbg !24
  %76 = getelementptr float, ptr addrspace(3) @global_smem, i64 %75, !dbg !24
  %77 = bitcast float %72 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 %73) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %78 = icmp slt i32 %5, 16, !dbg !24
  %79 = sext i32 %5 to i64, !dbg !24
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i64 %79, !dbg !24
  %81 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %80, i1 %78) #5, !dbg !24
  %82 = bitcast i32 %81 to float, !dbg !24
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 8, i32 31), !dbg !24
  %84 = bitcast i32 %83 to float, !dbg !24
  %85 = fadd float %82, %84, !dbg !19
  %86 = bitcast float %85 to i32, !dbg !24
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 4, i32 31), !dbg !24
  %88 = bitcast i32 %87 to float, !dbg !24
  %89 = fadd float %85, %88, !dbg !19
  %90 = bitcast float %89 to i32, !dbg !24
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 2, i32 31), !dbg !24
  %92 = bitcast i32 %91 to float, !dbg !24
  %93 = fadd float %89, %92, !dbg !19
  %94 = bitcast float %93 to i32, !dbg !24
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !24
  %96 = bitcast i32 %95 to float, !dbg !24
  %97 = fadd float %93, %96, !dbg !19
  %98 = and i32 %5, 15, !dbg !24
  %99 = icmp eq i32 %98, 0, !dbg !24
  %100 = and i1 %78, %99, !dbg !24
  %101 = bitcast float %97 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %101, i1 %100) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %102 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !25
  %.not.i = icmp eq i32 %103, 0, !dbg !25
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !25
  %.not1.i = icmp eq i32 %104, 0, !dbg !25
  br i1 %.not.i, label %110, label %105, !dbg !25

105:                                              ; preds = %4
  br i1 %.not1.i, label %108, label %106, !dbg !25

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #5, !dbg !25
  br label %__nv_sqrtf.exit, !dbg !25

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #5, !dbg !25
  br label %__nv_sqrtf.exit, !dbg !25

110:                                              ; preds = %4
  br i1 %.not1.i, label %113, label %111, !dbg !25

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #5, !dbg !25
  br label %__nv_sqrtf.exit, !dbg !25

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #5, !dbg !25
  br label %__nv_sqrtf.exit, !dbg !25

__nv_sqrtf.exit:                                  ; preds = %106, %108, %111, %113
  %.0.i = phi float [ %107, %106 ], [ %109, %108 ], [ %112, %111 ], [ %114, %113 ], !dbg !25
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !25
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !25
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !25
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !25
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !25
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !25
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !25
  %.not.i17 = icmp eq i32 %121, 0, !dbg !25
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !25
  %.not1.i20 = icmp eq i32 %122, 0, !dbg !25
  br i1 %.not.i17, label %128, label %123, !dbg !25

123:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %126, label %124, !dbg !25

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #5, !dbg !25
  br label %__nv_sqrtf.exit21, !dbg !25

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #5, !dbg !25
  br label %__nv_sqrtf.exit21, !dbg !25

128:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %131, label %129, !dbg !25

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #5, !dbg !25
  br label %__nv_sqrtf.exit21, !dbg !25

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #5, !dbg !25
  br label %__nv_sqrtf.exit21, !dbg !25

__nv_sqrtf.exit21:                                ; preds = %124, %126, %129, %131
  %.0.i19 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %urem = and i32 %5, 511, !dbg !27
  %133 = icmp eq i32 %urem, 0, !dbg !27
  %134 = bitcast float %.0.i to i32, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %134, ptr addrspace(1) %0, i1 %133) #5, !dbg !27
  %135 = fcmp ogt float %.0.i19, 0x3D71979980000000, !dbg !28
  %136 = fcmp uno float %.0.i19, 0.000000e+00, !dbg !32
  %137 = or i1 %135, %136, !dbg !33
  %138 = select i1 %137, float %.0.i19, float 0x3D71979980000000, !dbg !34
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %10, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !35
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !35
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !35
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !35
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !35
  %144 = bitcast i32 %140 to float, !dbg !35
  %145 = bitcast i32 %141 to float, !dbg !35
  %146 = bitcast i32 %142 to float, !dbg !35
  %147 = bitcast i32 %143 to float, !dbg !35
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %138) #5, !dbg !36
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float %138) #5, !dbg !36
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %138) #5, !dbg !36
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float %138) #5, !dbg !36
  %152 = getelementptr float, ptr addrspace(1) %2, i64 %9, !dbg !37
  %153 = bitcast float %148 to i32, !dbg !38
  %154 = bitcast float %149 to i32, !dbg !38
  %155 = bitcast float %150 to i32, !dbg !38
  %156 = bitcast float %151 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %153, i32 %154, i32 %155, i32 %156, ptr addrspace(1) %152, i1 true) #5, !dbg !38
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !35
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !35
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !35
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !35
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !35
  %162 = bitcast i32 %158 to float, !dbg !35
  %163 = bitcast i32 %159 to float, !dbg !35
  %164 = bitcast i32 %160 to float, !dbg !35
  %165 = bitcast i32 %161 to float, !dbg !35
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float %138) #5, !dbg !36
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %163, float %138) #5, !dbg !36
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float %138) #5, !dbg !36
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float %138) #5, !dbg !36
  %170 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !37
  %171 = bitcast float %166 to i32, !dbg !38
  %172 = bitcast float %167 to i32, !dbg !38
  %173 = bitcast float %168 to i32, !dbg !38
  %174 = bitcast float %169 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %171, i32 %172, i32 %173, i32 %174, ptr addrspace(1) %170, i1 %21) #5, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c52m3ltwitjosbbgjues3qvbdnms5qk36qvawn62xdyyo3vy3pv2.py", directory: "inductor_cache/52")
!4 = !{ptr @triton_red_fused_clamp_min_div_linalg_vector_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_clamp_min_div_linalg_vector_norm_0, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_clamp_min_div_linalg_vector_norm_0", linkageName: "triton_red_fused_clamp_min_div_linalg_vector_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 25, column: 33, scope: !7)
!11 = !DILocation(line: 27, column: 36, scope: !7)
!12 = !DILocation(line: 31, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 22, scope: !7)
!15 = !DILocation(line: 28, column: 27, scope: !7)
!16 = !DILocation(line: 29, column: 25, scope: !7)
!17 = !DILocation(line: 34, column: 23, scope: !7)
!18 = !DILocation(line: 35, column: 38, scope: !7)
!19 = !DILocation(line: 256, column: 15, scope: !20, inlinedAt: !23)
!20 = distinct !DILexicalBlockFile(scope: !22, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!22 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!23 = !DILocation(line: 36, column: 25, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !22, inlinedAt: !23)
!25 = !DILocation(line: 37, column: 26, scope: !7)
!26 = !DILocation(line: 38, column: 4, scope: !7)
!27 = !DILocation(line: 39, column: 70, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 46, column: 44, scope: !7)
!32 = !DILocation(line: 120, column: 21, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 120, column: 16, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 44, column: 39, scope: !7)
!36 = !DILocation(line: 47, column: 22, scope: !7)
!37 = !DILocation(line: 48, column: 29, scope: !7)
!38 = !DILocation(line: 48, column: 75, scope: !7)
!39 = !DILocation(line: 40, column: 4, scope: !7)
