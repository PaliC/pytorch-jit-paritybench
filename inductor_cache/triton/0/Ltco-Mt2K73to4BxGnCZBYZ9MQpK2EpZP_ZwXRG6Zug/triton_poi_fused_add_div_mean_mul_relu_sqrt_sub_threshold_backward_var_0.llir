; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_mean_mul_relu_sqrt_sub_threshold_backward_var_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 7, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = or disjoint i32 %8, %10, !dbg !13
  %12 = icmp slt i32 %11, 256, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %13 = sdiv i32 %.frozen, 16, !dbg !15
  %14 = mul i32 %13, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %15 = sdiv i32 %11, 64, !dbg !17
  %16 = srem i32 %13, 4, !dbg !18
  %17 = sext i32 %11 to i64, !dbg !19
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !19
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %12) #3, !dbg !20
  %20 = shl nsw i32 %15, 6, !dbg !21
  %21 = add i32 %20, %.decomposed, !dbg !22
  %22 = sext i32 %21 to i64, !dbg !23
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !23
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %12) #3, !dbg !24
  %25 = bitcast i32 %24 to float, !dbg !24
  %26 = add i32 %21, 16, !dbg !25
  %27 = sext i32 %26 to i64, !dbg !26
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !26
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %12) #3, !dbg !27
  %30 = bitcast i32 %29 to float, !dbg !27
  %31 = add i32 %21, 32, !dbg !28
  %32 = sext i32 %31 to i64, !dbg !29
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !29
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %12) #3, !dbg !30
  %35 = bitcast i32 %34 to float, !dbg !30
  %36 = add i32 %21, 48, !dbg !31
  %37 = sext i32 %36 to i64, !dbg !32
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !32
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %12) #3, !dbg !33
  %40 = bitcast i32 %39 to float, !dbg !33
  %41 = sext i32 %16 to i64, !dbg !34
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !34
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %12) #3, !dbg !35
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !36
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %12) #3, !dbg !37
  %46 = fadd float %25, %30, !dbg !38
  %47 = fadd float %46, %35, !dbg !39
  %48 = fadd float %47, %40, !dbg !40
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %48, float 4.000000e+00) #3, !dbg !41
  %50 = fsub float %25, %49, !dbg !42
  %51 = fmul float %50, %50, !dbg !43
  %52 = fsub float %30, %49, !dbg !44
  %53 = fmul float %52, %52, !dbg !45
  %54 = fadd float %51, %53, !dbg !46
  %55 = fsub float %35, %49, !dbg !47
  %56 = fmul float %55, %55, !dbg !48
  %57 = fadd float %56, %54, !dbg !49
  %58 = fsub float %40, %49, !dbg !50
  %59 = fmul float %58, %58, !dbg !51
  %60 = fadd float %59, %57, !dbg !52
  %61 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float 4.000000e+00) #3, !dbg !53
  %62 = fadd float %61, 0x3EE4F8B580000000, !dbg !54
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i = icmp eq i32 %63, 0, !dbg !55
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i = icmp eq i32 %64, 0, !dbg !55
  br i1 %.not.i, label %70, label %65, !dbg !55

65:                                               ; preds = %6
  br i1 %.not1.i, label %68, label %66, !dbg !55

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

70:                                               ; preds = %6
  br i1 %.not1.i, label %73, label %71, !dbg !55

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

__nv_sqrtf.exit:                                  ; preds = %66, %68, %71, %73
  %.0.i = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !55
  %75 = bitcast i32 %19 to float, !dbg !20
  %76 = fsub float %75, %49, !dbg !56
  %77 = bitcast i32 %45 to float, !dbg !37
  %78 = bitcast i32 %43 to float, !dbg !35
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float %.0.i) #3, !dbg !57
  %80 = fmul float %79, %78, !dbg !58
  %81 = fadd float %80, %77, !dbg !59
  %82 = fcmp olt float %81, 0.000000e+00, !dbg !60
  %83 = select i1 %82, float 0.000000e+00, float %81, !dbg !64
  %84 = fcmp ole float %83, 0.000000e+00, !dbg !65
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !66
  %86 = bitcast float %83 to i32, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %86, ptr addrspace(1) %85, i1 %12) #3, !dbg !67
  %87 = getelementptr i1, ptr addrspace(1) %4, i64 %17, !dbg !68
  %88 = zext i1 %84 to i8, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %88, ptr addrspace(1) %87, i1 %12) #3, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5muygypheghvsfku547iu3msjhe37gu7xbctit723hn4sbmbshm.py", directory: "inductor_cache/5m")
!4 = !{ptr @triton_poi_fused_add_div_mean_mul_relu_sqrt_sub_threshold_backward_var_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mean_mul_relu_sqrt_sub_threshold_backward_var_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mean_mul_relu_sqrt_sub_threshold_backward_var_0", linkageName: "triton_poi_fused_add_div_mean_mul_relu_sqrt_sub_threshold_backward_var_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 38, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 43, scope: !7)
!25 = !DILocation(line: 30, column: 40, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 48, scope: !7)
!28 = !DILocation(line: 31, column: 40, scope: !7)
!29 = !DILocation(line: 31, column: 30, scope: !7)
!30 = !DILocation(line: 31, column: 48, scope: !7)
!31 = !DILocation(line: 32, column: 40, scope: !7)
!32 = !DILocation(line: 32, column: 30, scope: !7)
!33 = !DILocation(line: 32, column: 48, scope: !7)
!34 = !DILocation(line: 33, column: 31, scope: !7)
!35 = !DILocation(line: 33, column: 36, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 36, scope: !7)
!38 = !DILocation(line: 35, column: 18, scope: !7)
!39 = !DILocation(line: 36, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 41, column: 19, scope: !7)
!43 = !DILocation(line: 42, column: 20, scope: !7)
!44 = !DILocation(line: 43, column: 19, scope: !7)
!45 = !DILocation(line: 44, column: 20, scope: !7)
!46 = !DILocation(line: 45, column: 20, scope: !7)
!47 = !DILocation(line: 46, column: 19, scope: !7)
!48 = !DILocation(line: 47, column: 20, scope: !7)
!49 = !DILocation(line: 48, column: 20, scope: !7)
!50 = !DILocation(line: 49, column: 19, scope: !7)
!51 = !DILocation(line: 50, column: 20, scope: !7)
!52 = !DILocation(line: 51, column: 20, scope: !7)
!53 = !DILocation(line: 52, column: 20, scope: !7)
!54 = !DILocation(line: 54, column: 20, scope: !7)
!55 = !DILocation(line: 55, column: 27, scope: !7)
!56 = !DILocation(line: 40, column: 19, scope: !7)
!57 = !DILocation(line: 56, column: 20, scope: !7)
!58 = !DILocation(line: 57, column: 20, scope: !7)
!59 = !DILocation(line: 58, column: 20, scope: !7)
!60 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !63)
!61 = distinct !DILexicalBlockFile(scope: !7, file: !62, discriminator: 0)
!62 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!63 = !DILocation(line: 60, column: 42, scope: !7)
!64 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !63)
!65 = !DILocation(line: 62, column: 21, scope: !7)
!66 = !DILocation(line: 63, column: 28, scope: !7)
!67 = !DILocation(line: 63, column: 40, scope: !7)
!68 = !DILocation(line: 64, column: 25, scope: !7)
!69 = !DILocation(line: 64, column: 37, scope: !7)
!70 = !DILocation(line: 64, column: 4, scope: !7)
