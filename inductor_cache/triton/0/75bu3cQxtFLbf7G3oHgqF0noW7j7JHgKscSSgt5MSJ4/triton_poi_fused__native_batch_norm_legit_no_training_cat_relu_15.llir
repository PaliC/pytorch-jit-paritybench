; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 9, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 1, !dbg !12
  %20 = and i32 %19, 510, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %.frozen = freeze i32 %21, !dbg !14
  %22 = sdiv i32 %.frozen, 64, !dbg !14
  %23 = srem i32 %22, 704, !dbg !15
  %24 = mul i32 %22, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %.frozen23 = freeze i32 %21, !dbg !17
  %25 = sdiv i32 %.frozen23, 45056, !dbg !17
  %26 = sext i32 %23 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !18
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !21
  %34 = bitcast i32 %33 to float, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %7, i64 %26, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %8, i64 %26, !dbg !28
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !29
  %46 = bitcast i32 %45 to float, !dbg !29
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !29
  %48 = bitcast i32 %47 to float, !dbg !29
  %49 = getelementptr float, ptr addrspace(1) %9, i64 %26, !dbg !30
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !31
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !31
  %52 = getelementptr float, ptr addrspace(1) %10, i64 %26, !dbg !32
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !33
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !33
  %55 = icmp slt i32 %23, 512, !dbg !34
  %56 = mul i32 %25, 45056, !dbg !35
  %srem.decomposed = sub i32 %.frozen23, %56, !dbg !35
  %57 = mul nsw i32 %25, 43008, !dbg !36
  %58 = add nsw i32 %57, %srem.decomposed, !dbg !37
  %59 = sext i32 %58 to i64, !dbg !38
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !38
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #3, !dbg !39
  %62 = mul nsw i32 %25, 34816, !dbg !40
  %63 = add nsw i32 %62, %srem.decomposed, !dbg !41
  %64 = sext i32 %63 to i64, !dbg !42
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !42
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %65, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #3, !dbg !43
  %67 = add nsw i32 %23, -512, !dbg !44
  %68 = icmp ult i32 %67, 160, !dbg !44
  %69 = shl nsw i32 %23, 6, !dbg !45
  %70 = add nsw i32 %.decomposed, -32768, !dbg !45
  %71 = add nsw i32 %70, %57, !dbg !46
  %72 = add nsw i32 %71, %69, !dbg !47
  %73 = sext i32 %72 to i64, !dbg !48
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %73, !dbg !48
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %74, i1 %68, i32 0, i1 %68, i32 0, i1 %68) #3, !dbg !49
  %76 = icmp sgt i32 %23, 671, !dbg !50
  %77 = sext i32 %63 to i64, !dbg !51
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !51
  %79 = getelementptr i8, ptr addrspace(1) %78, i64 -40960, !dbg !51
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %79, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #3, !dbg !52
  %81 = fadd float %32, 0x3F50624DE0000000, !dbg !53
  %82 = fadd float %34, 0x3F50624DE0000000, !dbg !53
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i = icmp eq i32 %83, 0, !dbg !54
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i = icmp eq i32 %84, 0, !dbg !54
  br i1 %.not.i, label %90, label %85, !dbg !54

85:                                               ; preds = %15
  br i1 %.not1.i, label %88, label %86, !dbg !54

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

90:                                               ; preds = %15
  br i1 %.not1.i, label %93, label %91, !dbg !54

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

__nv_sqrtf.exit:                                  ; preds = %86, %88, %91, %93
  %.0.i = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !54
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i3 = icmp eq i32 %95, 0, !dbg !54
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i6 = icmp eq i32 %96, 0, !dbg !54
  br i1 %.not.i3, label %102, label %97, !dbg !54

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %100, label %98, !dbg !54

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !54
  br label %__nv_sqrtf.exit7, !dbg !54

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !54
  br label %__nv_sqrtf.exit7, !dbg !54

102:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %105, label %103, !dbg !54

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !54
  br label %__nv_sqrtf.exit7, !dbg !54

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !54
  br label %__nv_sqrtf.exit7, !dbg !54

__nv_sqrtf.exit7:                                 ; preds = %98, %100, %103, %105
  %.0.i5 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !54
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !55
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #3, !dbg !55
  %109 = fadd float %46, 0x3F50624DE0000000, !dbg !56
  %110 = fadd float %48, 0x3F50624DE0000000, !dbg !56
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i8 = icmp eq i32 %111, 0, !dbg !57
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i11 = icmp eq i32 %112, 0, !dbg !57
  br i1 %.not.i8, label %118, label %113, !dbg !57

113:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %116, label %114, !dbg !57

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #3, !dbg !57
  br label %__nv_sqrtf.exit12, !dbg !57

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #3, !dbg !57
  br label %__nv_sqrtf.exit12, !dbg !57

118:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %121, label %119, !dbg !57

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #3, !dbg !57
  br label %__nv_sqrtf.exit12, !dbg !57

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #3, !dbg !57
  br label %__nv_sqrtf.exit12, !dbg !57

__nv_sqrtf.exit12:                                ; preds = %114, %116, %119, %121
  %.0.i10 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !57
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i13 = icmp eq i32 %123, 0, !dbg !57
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i16 = icmp eq i32 %124, 0, !dbg !57
  br i1 %.not.i13, label %130, label %125, !dbg !57

125:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %128, label %126, !dbg !57

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #3, !dbg !57
  br label %__nv_sqrtf.exit17, !dbg !57

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #3, !dbg !57
  br label %__nv_sqrtf.exit17, !dbg !57

130:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %133, label %131, !dbg !57

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #3, !dbg !57
  br label %__nv_sqrtf.exit17, !dbg !57

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #3, !dbg !57
  br label %__nv_sqrtf.exit17, !dbg !57

__nv_sqrtf.exit17:                                ; preds = %126, %128, %131, %133
  %.0.i15 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !57
  %135 = extractvalue { i32, i32 } %61, 1, !dbg !39
  %136 = extractvalue { i32, i32 } %66, 1, !dbg !43
  %137 = icmp slt i32 %23, 672, !dbg !58
  %138 = extractvalue { i32, i32 } %75, 1, !dbg !49
  %139 = extractvalue { i32, i32 } %80, 1, !dbg !52
  %140 = insertelement <4 x i32> poison, i32 %43, i64 0, !dbg !27
  %141 = insertelement <4 x i32> %140, i32 %42, i64 1, !dbg !27
  %142 = insertelement <4 x i32> %141, i32 %28, i64 2, !dbg !27
  %143 = insertelement <4 x i32> %142, i32 %29, i64 3, !dbg !27
  %144 = bitcast <4 x i32> %143 to <4 x float>, !dbg !27
  %145 = extractvalue { i32, i32 } %61, 0, !dbg !39
  %146 = extractvalue { i32, i32 } %66, 0, !dbg !43
  %147 = extractvalue { i32, i32 } %75, 0, !dbg !49
  %148 = extractvalue { i32, i32 } %80, 0, !dbg !52
  %149 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !31
  %150 = insertelement <4 x i32> %149, i32 %50, i64 1, !dbg !31
  %151 = insertelement <4 x i32> %150, i32 %36, i64 2, !dbg !31
  %152 = insertelement <4 x i32> %151, i32 %37, i64 3, !dbg !31
  %153 = bitcast <4 x i32> %152 to <4 x float>, !dbg !31
  %154 = insertelement <4 x i32> poison, i32 %54, i64 0, !dbg !33
  %155 = insertelement <4 x i32> %154, i32 %53, i64 1, !dbg !33
  %156 = insertelement <4 x i32> %155, i32 %39, i64 2, !dbg !33
  %157 = insertelement <4 x i32> %156, i32 %40, i64 3, !dbg !33
  %158 = bitcast <4 x i32> %157 to <4 x float>, !dbg !33
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !59
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #3, !dbg !59
  %161 = insertelement <2 x i32> poison, i32 %135, i64 0, !dbg !39
  %162 = insertelement <2 x i32> %161, i32 %145, i64 1, !dbg !39
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !39
  %164 = insertelement <2 x i32> poison, i32 %136, i64 0, !dbg !43
  %165 = insertelement <2 x i32> %164, i32 %146, i64 1, !dbg !43
  %166 = bitcast <2 x i32> %165 to <2 x float>, !dbg !43
  %167 = fadd <2 x float> %163, %166, !dbg !60
  %168 = insertelement <2 x i1> poison, i1 %137, i64 0, !dbg !61
  %169 = shufflevector <2 x i1> %168, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !61
  %170 = insertelement <2 x i32> poison, i32 %138, i64 0, !dbg !61
  %171 = insertelement <2 x i32> %170, i32 %147, i64 1, !dbg !61
  %172 = insertelement <2 x i32> poison, i32 %139, i64 0, !dbg !61
  %173 = insertelement <2 x i32> %172, i32 %148, i64 1, !dbg !61
  %174 = select <2 x i1> %169, <2 x i32> %171, <2 x i32> %173, !dbg !61
  %175 = bitcast <2 x i32> %174 to <2 x float>, !dbg !61
  %176 = insertelement <2 x i1> poison, i1 %55, i64 0, !dbg !62
  %177 = shufflevector <2 x i1> %176, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !62
  %178 = select <2 x i1> %177, <2 x float> %167, <2 x float> %175, !dbg !62
  %179 = shufflevector <2 x float> %178, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 0>, !dbg !62
  %180 = fsub <4 x float> %179, %144, !dbg !63
  %181 = insertelement <4 x float> poison, float %160, i64 0, !dbg !64
  %182 = insertelement <4 x float> %181, float %159, i64 1, !dbg !64
  %183 = insertelement <4 x float> %182, float %107, i64 2, !dbg !64
  %184 = insertelement <4 x float> %183, float %108, i64 3, !dbg !64
  %185 = fmul <4 x float> %180, %184, !dbg !64
  %186 = fmul <4 x float> %185, %153, !dbg !65
  %187 = fadd <4 x float> %186, %158, !dbg !66
  %188 = fcmp olt <4 x float> %187, zeroinitializer, !dbg !67
  %189 = extractelement <4 x i1> %188, i64 3, !dbg !71
  %190 = extractelement <4 x i1> %188, i64 2, !dbg !71
  %191 = extractelement <4 x i1> %188, i64 1, !dbg !73
  %192 = extractelement <4 x i1> %188, i64 0, !dbg !73
  %193 = sext i32 %21 to i64, !dbg !74
  %194 = getelementptr float, ptr addrspace(1) %11, i64 %193, !dbg !74
  %bc = bitcast <2 x float> %178 to <2 x i32>, !dbg !75
  %195 = extractelement <2 x i32> %bc, i64 1, !dbg !75
  %bc18 = bitcast <2 x float> %178 to <2 x i32>, !dbg !75
  %196 = extractelement <2 x i32> %bc18, i64 0, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %195, i32 %196, ptr addrspace(1) %194, i1 true) #3, !dbg !75
  %197 = getelementptr float, ptr addrspace(1) %12, i64 %193, !dbg !76
  %bc19 = bitcast <4 x float> %187 to <4 x i32>, !dbg !77
  %198 = extractelement <4 x i32> %bc19, i64 2, !dbg !77
  %199 = select i1 %190, i32 0, i32 %198, !dbg !71
  %bc20 = bitcast <4 x float> %187 to <4 x i32>, !dbg !77
  %200 = extractelement <4 x i32> %bc20, i64 3, !dbg !77
  %201 = select i1 %189, i32 0, i32 %200, !dbg !71
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %199, i32 %201, ptr addrspace(1) %197, i1 true) #3, !dbg !77
  %202 = getelementptr float, ptr addrspace(1) %13, i64 %193, !dbg !78
  %bc21 = bitcast <4 x float> %187 to <4 x i32>, !dbg !79
  %203 = extractelement <4 x i32> %bc21, i64 1, !dbg !79
  %204 = select i1 %191, i32 0, i32 %203, !dbg !73
  %bc22 = bitcast <4 x float> %187 to <4 x i32>, !dbg !79
  %205 = extractelement <4 x i32> %bc22, i64 0, !dbg !79
  %206 = select i1 %192, i32 0, i32 %205, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %204, i32 %206, ptr addrspace(1) %202, i1 true) #3, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnauqvhdxeuj3fq5dhpejkea2xgqh3qyic4oilnhzbjimnkrjwxk.py", directory: "inductor_cache/na")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_15, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_15", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 32, scope: !7)
!33 = !DILocation(line: 35, column: 37, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 35, scope: !7)
!36 = !DILocation(line: 41, column: 51, scope: !7)
!37 = !DILocation(line: 41, column: 45, scope: !7)
!38 = !DILocation(line: 41, column: 30, scope: !7)
!39 = !DILocation(line: 41, column: 56, scope: !7)
!40 = !DILocation(line: 42, column: 51, scope: !7)
!41 = !DILocation(line: 42, column: 45, scope: !7)
!42 = !DILocation(line: 42, column: 30, scope: !7)
!43 = !DILocation(line: 42, column: 56, scope: !7)
!44 = !DILocation(line: 54, column: 20, scope: !7)
!45 = !DILocation(line: 55, column: 40, scope: !7)
!46 = !DILocation(line: 55, column: 36, scope: !7)
!47 = !DILocation(line: 55, column: 55, scope: !7)
!48 = !DILocation(line: 55, column: 31, scope: !7)
!49 = !DILocation(line: 55, column: 66, scope: !7)
!50 = !DILocation(line: 56, column: 21, scope: !7)
!51 = !DILocation(line: 60, column: 31, scope: !7)
!52 = !DILocation(line: 60, column: 85, scope: !7)
!53 = !DILocation(line: 67, column: 20, scope: !7)
!54 = !DILocation(line: 68, column: 27, scope: !7)
!55 = !DILocation(line: 70, column: 20, scope: !7)
!56 = !DILocation(line: 79, column: 20, scope: !7)
!57 = !DILocation(line: 80, column: 27, scope: !7)
!58 = !DILocation(line: 53, column: 20, scope: !7)
!59 = !DILocation(line: 81, column: 20, scope: !7)
!60 = !DILocation(line: 43, column: 18, scope: !7)
!61 = !DILocation(line: 61, column: 35, scope: !7)
!62 = !DILocation(line: 0, scope: !7)
!63 = !DILocation(line: 78, column: 20, scope: !7)
!64 = !DILocation(line: 83, column: 20, scope: !7)
!65 = !DILocation(line: 84, column: 20, scope: !7)
!66 = !DILocation(line: 85, column: 20, scope: !7)
!67 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !70)
!68 = distinct !DILexicalBlockFile(scope: !7, file: !69, discriminator: 0)
!69 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!70 = !DILocation(line: 86, column: 42, scope: !7)
!71 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !72)
!72 = !DILocation(line: 77, column: 42, scope: !7)
!73 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !70)
!74 = !DILocation(line: 87, column: 25, scope: !7)
!75 = !DILocation(line: 87, column: 37, scope: !7)
!76 = !DILocation(line: 88, column: 25, scope: !7)
!77 = !DILocation(line: 88, column: 37, scope: !7)
!78 = !DILocation(line: 89, column: 25, scope: !7)
!79 = !DILocation(line: 89, column: 37, scope: !7)
!80 = !DILocation(line: 89, column: 4, scope: !7)
