; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 252, !dbg !12
  %17 = and i32 %14, 255, !dbg !12
  %18 = or disjoint i32 %13, %16, !dbg !13
  %19 = or disjoint i32 %13, %17, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %21 = shl i32 %20, 4, !dbg !15
  %22 = lshr i32 %14, 6, !dbg !16
  %23 = and i32 %22, 3, !dbg !16
  %24 = or disjoint i32 %21, %23, !dbg !17
  %25 = or disjoint i32 %24, 4, !dbg !17
  %26 = or disjoint i32 %24, 8, !dbg !17
  %27 = or disjoint i32 %24, 12, !dbg !17
  %28 = icmp slt i32 %24, 16, !dbg !18
  %29 = icmp slt i32 %25, 16, !dbg !18
  %30 = icmp slt i32 %26, 16, !dbg !18
  %31 = icmp slt i32 %27, 16, !dbg !18
  %.frozen = freeze i32 %24, !dbg !19
  %32 = sdiv i32 %.frozen, 4, !dbg !19
  %33 = sdiv i32 %25, 4, !dbg !19
  %34 = sdiv i32 %26, 4, !dbg !19
  %35 = sdiv i32 %27, 4, !dbg !19
  %36 = mul i32 %32, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %36, !dbg !20
  %.frozen11 = freeze i32 %18, !dbg !21
  %37 = sdiv i32 %.frozen11, 256, !dbg !21
  %38 = mul i32 %37, 256, !dbg !22
  %.decomposed12 = sub i32 %.frozen11, %38, !dbg !22
  %39 = srem i32 %19, 256, !dbg !22
  %40 = sext i32 %32 to i64, !dbg !23
  %41 = getelementptr i64, ptr addrspace(1) %0, i64 %40, !dbg !23
  %42 = sext i32 %33 to i64, !dbg !23
  %43 = getelementptr i64, ptr addrspace(1) %0, i64 %42, !dbg !23
  %44 = sext i32 %34 to i64, !dbg !23
  %45 = getelementptr i64, ptr addrspace(1) %0, i64 %44, !dbg !23
  %46 = sext i32 %35 to i64, !dbg !23
  %47 = getelementptr i64, ptr addrspace(1) %0, i64 %46, !dbg !23
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %28) #2, !dbg !24
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %28) #2, !dbg !24
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %28) #2, !dbg !24
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %28) #2, !dbg !24
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %29) #2, !dbg !24
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %29) #2, !dbg !24
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %29) #2, !dbg !24
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %29) #2, !dbg !24
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 %30) #2, !dbg !24
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 %30) #2, !dbg !24
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 %30) #2, !dbg !24
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 %30) #2, !dbg !24
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 %31) #2, !dbg !24
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 %31) #2, !dbg !24
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 %31) #2, !dbg !24
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 %31) #2, !dbg !24
  %64 = sext i32 %.decomposed to i64, !dbg !25
  %65 = getelementptr i64, ptr addrspace(1) %1, i64 %64, !dbg !25
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %28) #2, !dbg !26
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %28) #2, !dbg !26
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %28) #2, !dbg !26
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %28) #2, !dbg !26
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %29) #2, !dbg !26
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %29) #2, !dbg !26
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %29) #2, !dbg !26
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %29) #2, !dbg !26
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %30) #2, !dbg !26
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %30) #2, !dbg !26
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %30) #2, !dbg !26
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %30) #2, !dbg !26
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %31) #2, !dbg !26
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %31) #2, !dbg !26
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %31) #2, !dbg !26
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %31) #2, !dbg !26
  %82 = sext i32 %39 to i64, !dbg !27
  %83 = getelementptr float, ptr addrspace(1) %3, i64 %82, !dbg !27
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #2, !dbg !28
  %85 = getelementptr i64, ptr addrspace(1) %4, i64 %64, !dbg !29
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 %28) #2, !dbg !30
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 %28) #2, !dbg !30
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 %28) #2, !dbg !30
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 %28) #2, !dbg !30
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 %29) #2, !dbg !30
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 %29) #2, !dbg !30
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 %29) #2, !dbg !30
  %93 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 %29) #2, !dbg !30
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 %30) #2, !dbg !30
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 %30) #2, !dbg !30
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 %30) #2, !dbg !30
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 %30) #2, !dbg !30
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 %31) #2, !dbg !30
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 %31) #2, !dbg !30
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 %31) #2, !dbg !30
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 %31) #2, !dbg !30
  %102 = getelementptr float, ptr addrspace(1) %5, i64 %64, !dbg !31
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %28) #2, !dbg !32
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %28) #2, !dbg !32
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %28) #2, !dbg !32
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %28) #2, !dbg !32
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %29) #2, !dbg !32
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %29) #2, !dbg !32
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %29) #2, !dbg !32
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %29) #2, !dbg !32
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %30) #2, !dbg !32
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %30) #2, !dbg !32
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %30) #2, !dbg !32
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %30) #2, !dbg !32
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %31) #2, !dbg !32
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %31) #2, !dbg !32
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %31) #2, !dbg !32
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %31) #2, !dbg !32
  %119 = getelementptr i64, ptr addrspace(1) %6, i64 %40, !dbg !33
  %120 = getelementptr i64, ptr addrspace(1) %6, i64 %42, !dbg !33
  %121 = getelementptr i64, ptr addrspace(1) %6, i64 %44, !dbg !33
  %122 = getelementptr i64, ptr addrspace(1) %6, i64 %46, !dbg !33
  %123 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %119, i1 %28) #2, !dbg !34
  %124 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %119, i1 %28) #2, !dbg !34
  %125 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %119, i1 %28) #2, !dbg !34
  %126 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %119, i1 %28) #2, !dbg !34
  %127 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %120, i1 %29) #2, !dbg !34
  %128 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %120, i1 %29) #2, !dbg !34
  %129 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %120, i1 %29) #2, !dbg !34
  %130 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %120, i1 %29) #2, !dbg !34
  %131 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %121, i1 %30) #2, !dbg !34
  %132 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %121, i1 %30) #2, !dbg !34
  %133 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %121, i1 %30) #2, !dbg !34
  %134 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %121, i1 %30) #2, !dbg !34
  %135 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %122, i1 %31) #2, !dbg !34
  %136 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %122, i1 %31) #2, !dbg !34
  %137 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %122, i1 %31) #2, !dbg !34
  %138 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %122, i1 %31) #2, !dbg !34
  %139 = getelementptr float, ptr addrspace(1) %7, i64 %40, !dbg !35
  %140 = getelementptr float, ptr addrspace(1) %7, i64 %42, !dbg !35
  %141 = getelementptr float, ptr addrspace(1) %7, i64 %44, !dbg !35
  %142 = getelementptr float, ptr addrspace(1) %7, i64 %46, !dbg !35
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %28) #2, !dbg !36
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %28) #2, !dbg !36
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %28) #2, !dbg !36
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %28) #2, !dbg !36
  %147 = bitcast i32 %146 to float, !dbg !36
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %29) #2, !dbg !36
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %29) #2, !dbg !36
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %29) #2, !dbg !36
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %29) #2, !dbg !36
  %152 = bitcast i32 %151 to float, !dbg !36
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %30) #2, !dbg !36
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %30) #2, !dbg !36
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %30) #2, !dbg !36
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %30) #2, !dbg !36
  %157 = bitcast i32 %156 to float, !dbg !36
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %31) #2, !dbg !36
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %31) #2, !dbg !36
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %31) #2, !dbg !36
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %31) #2, !dbg !36
  %162 = bitcast i32 %161 to float, !dbg !36
  %163 = lshr i64 %51, 62, !dbg !37
  %164 = and i64 %163, 2, !dbg !37
  %165 = add i64 %164, %51, !dbg !37
  %166 = lshr i64 %55, 62, !dbg !37
  %167 = and i64 %166, 2, !dbg !37
  %168 = add i64 %167, %55, !dbg !37
  %169 = lshr i64 %59, 62, !dbg !37
  %170 = and i64 %169, 2, !dbg !37
  %171 = add i64 %170, %59, !dbg !37
  %172 = lshr i64 %63, 62, !dbg !37
  %173 = and i64 %172, 2, !dbg !37
  %174 = add i64 %173, %63, !dbg !37
  %175 = lshr i64 %69, 62, !dbg !38
  %176 = and i64 %175, 2, !dbg !38
  %177 = add i64 %176, %69, !dbg !38
  %178 = lshr i64 %73, 62, !dbg !38
  %179 = and i64 %178, 2, !dbg !38
  %180 = add i64 %179, %73, !dbg !38
  %181 = lshr i64 %77, 62, !dbg !38
  %182 = and i64 %181, 2, !dbg !38
  %183 = add i64 %182, %77, !dbg !38
  %184 = lshr i64 %81, 62, !dbg !38
  %185 = and i64 %184, 2, !dbg !38
  %186 = add i64 %185, %81, !dbg !38
  %187 = sext i32 %.decomposed12 to i64, !dbg !39
  %188 = shl i64 %165, 9, !dbg !40
  %189 = shl i64 %168, 9, !dbg !40
  %190 = shl i64 %171, 9, !dbg !40
  %191 = shl i64 %174, 9, !dbg !40
  %192 = shl i32 %37, 10, !dbg !41
  %193 = sext i32 %192 to i64, !dbg !42
  %.idx = shl i64 %177, 10, !dbg !43
  %194 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !43
  %195 = getelementptr float, ptr addrspace(1) %194, i64 %187, !dbg !43
  %196 = getelementptr float, ptr addrspace(1) %195, i64 %188, !dbg !43
  %197 = getelementptr float, ptr addrspace(1) %196, i64 %193, !dbg !43
  %.idx4 = shl i64 %180, 10, !dbg !43
  %198 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx4, !dbg !43
  %199 = getelementptr float, ptr addrspace(1) %198, i64 %187, !dbg !43
  %200 = getelementptr float, ptr addrspace(1) %199, i64 %189, !dbg !43
  %201 = getelementptr float, ptr addrspace(1) %200, i64 %193, !dbg !43
  %.idx5 = shl i64 %183, 10, !dbg !43
  %202 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx5, !dbg !43
  %203 = getelementptr float, ptr addrspace(1) %202, i64 %187, !dbg !43
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %190, !dbg !43
  %205 = getelementptr float, ptr addrspace(1) %204, i64 %193, !dbg !43
  %.idx6 = shl i64 %186, 10, !dbg !43
  %206 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx6, !dbg !43
  %207 = getelementptr float, ptr addrspace(1) %206, i64 %187, !dbg !43
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %191, !dbg !43
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %193, !dbg !43
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %197, i1 %28) #2, !dbg !44
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !44
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !44
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !44
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !44
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %201, i1 %29) #2, !dbg !44
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !44
  %217 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !44
  %218 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !44
  %219 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !44
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %205, i1 %30) #2, !dbg !44
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !44
  %222 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !44
  %223 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !44
  %224 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !44
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %209, i1 %31) #2, !dbg !44
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !44
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !44
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !44
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !44
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !45
  %231 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !45
  %233 = load float, ptr addrspace(3) %232, align 16, !dbg !45
  %234 = getelementptr inbounds i8, ptr addrspace(3) %232, i32 4, !dbg !45
  %235 = load float, ptr addrspace(3) %234, align 4, !dbg !45
  %236 = getelementptr inbounds i8, ptr addrspace(3) %232, i32 8, !dbg !45
  %237 = load float, ptr addrspace(3) %236, align 8, !dbg !45
  %238 = getelementptr inbounds i8, ptr addrspace(3) %232, i32 12, !dbg !45
  %239 = load float, ptr addrspace(3) %238, align 4, !dbg !45
  %240 = lshr i64 %89, 62, !dbg !46
  %241 = and i64 %240, 2, !dbg !46
  %242 = add i64 %241, %89, !dbg !46
  %243 = lshr i64 %93, 62, !dbg !46
  %244 = and i64 %243, 2, !dbg !46
  %245 = add i64 %244, %93, !dbg !46
  %246 = lshr i64 %97, 62, !dbg !46
  %247 = and i64 %246, 2, !dbg !46
  %248 = add i64 %247, %97, !dbg !46
  %249 = lshr i64 %101, 62, !dbg !46
  %250 = and i64 %249, 2, !dbg !46
  %251 = add i64 %250, %101, !dbg !46
  %.idx7 = shl i64 %242, 10, !dbg !47
  %252 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx7, !dbg !47
  %253 = getelementptr float, ptr addrspace(1) %252, i64 %187, !dbg !47
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %188, !dbg !47
  %255 = getelementptr float, ptr addrspace(1) %254, i64 %193, !dbg !47
  %.idx8 = shl i64 %245, 10, !dbg !47
  %256 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx8, !dbg !47
  %257 = getelementptr float, ptr addrspace(1) %256, i64 %187, !dbg !47
  %258 = getelementptr float, ptr addrspace(1) %257, i64 %189, !dbg !47
  %259 = getelementptr float, ptr addrspace(1) %258, i64 %193, !dbg !47
  %.idx9 = shl i64 %248, 10, !dbg !47
  %260 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx9, !dbg !47
  %261 = getelementptr float, ptr addrspace(1) %260, i64 %187, !dbg !47
  %262 = getelementptr float, ptr addrspace(1) %261, i64 %190, !dbg !47
  %263 = getelementptr float, ptr addrspace(1) %262, i64 %193, !dbg !47
  %.idx10 = shl i64 %251, 10, !dbg !47
  %264 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx10, !dbg !47
  %265 = getelementptr float, ptr addrspace(1) %264, i64 %187, !dbg !47
  %266 = getelementptr float, ptr addrspace(1) %265, i64 %191, !dbg !47
  %267 = getelementptr float, ptr addrspace(1) %266, i64 %193, !dbg !47
  %268 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %255, i1 %28) #2, !dbg !48
  %269 = extractvalue { i32, i32, i32, i32 } %268, 0, !dbg !48
  %270 = extractvalue { i32, i32, i32, i32 } %268, 1, !dbg !48
  %271 = extractvalue { i32, i32, i32, i32 } %268, 2, !dbg !48
  %272 = extractvalue { i32, i32, i32, i32 } %268, 3, !dbg !48
  %273 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %259, i1 %29) #2, !dbg !48
  %274 = extractvalue { i32, i32, i32, i32 } %273, 0, !dbg !48
  %275 = extractvalue { i32, i32, i32, i32 } %273, 1, !dbg !48
  %276 = extractvalue { i32, i32, i32, i32 } %273, 2, !dbg !48
  %277 = extractvalue { i32, i32, i32, i32 } %273, 3, !dbg !48
  %278 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %263, i1 %30) #2, !dbg !48
  %279 = extractvalue { i32, i32, i32, i32 } %278, 0, !dbg !48
  %280 = extractvalue { i32, i32, i32, i32 } %278, 1, !dbg !48
  %281 = extractvalue { i32, i32, i32, i32 } %278, 2, !dbg !48
  %282 = extractvalue { i32, i32, i32, i32 } %278, 3, !dbg !48
  %283 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %267, i1 %31) #2, !dbg !48
  %284 = extractvalue { i32, i32, i32, i32 } %283, 0, !dbg !48
  %285 = extractvalue { i32, i32, i32, i32 } %283, 1, !dbg !48
  %286 = extractvalue { i32, i32, i32, i32 } %283, 2, !dbg !48
  %287 = extractvalue { i32, i32, i32, i32 } %283, 3, !dbg !48
  %288 = lshr i64 %126, 62, !dbg !49
  %289 = and i64 %288, 2, !dbg !49
  %290 = add i64 %289, %126, !dbg !49
  %291 = lshr i64 %130, 62, !dbg !49
  %292 = and i64 %291, 2, !dbg !49
  %293 = add i64 %292, %130, !dbg !49
  %294 = lshr i64 %134, 62, !dbg !49
  %295 = and i64 %294, 2, !dbg !49
  %296 = add i64 %295, %134, !dbg !49
  %297 = lshr i64 %138, 62, !dbg !49
  %298 = and i64 %297, 2, !dbg !49
  %299 = add i64 %298, %138, !dbg !49
  %300 = shl i64 %290, 9, !dbg !50
  %301 = shl i64 %293, 9, !dbg !50
  %302 = shl i64 %296, 9, !dbg !50
  %303 = shl i64 %299, 9, !dbg !50
  %304 = getelementptr float, ptr addrspace(1) %195, i64 %300, !dbg !51
  %305 = getelementptr float, ptr addrspace(1) %304, i64 %193, !dbg !51
  %306 = getelementptr float, ptr addrspace(1) %199, i64 %301, !dbg !51
  %307 = getelementptr float, ptr addrspace(1) %306, i64 %193, !dbg !51
  %308 = getelementptr float, ptr addrspace(1) %203, i64 %302, !dbg !51
  %309 = getelementptr float, ptr addrspace(1) %308, i64 %193, !dbg !51
  %310 = getelementptr float, ptr addrspace(1) %207, i64 %303, !dbg !51
  %311 = getelementptr float, ptr addrspace(1) %310, i64 %193, !dbg !51
  %312 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %305, i1 %28) #2, !dbg !52
  %313 = extractvalue { i32, i32, i32, i32 } %312, 0, !dbg !52
  %314 = extractvalue { i32, i32, i32, i32 } %312, 1, !dbg !52
  %315 = extractvalue { i32, i32, i32, i32 } %312, 2, !dbg !52
  %316 = extractvalue { i32, i32, i32, i32 } %312, 3, !dbg !52
  %317 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %307, i1 %29) #2, !dbg !52
  %318 = extractvalue { i32, i32, i32, i32 } %317, 0, !dbg !52
  %319 = extractvalue { i32, i32, i32, i32 } %317, 1, !dbg !52
  %320 = extractvalue { i32, i32, i32, i32 } %317, 2, !dbg !52
  %321 = extractvalue { i32, i32, i32, i32 } %317, 3, !dbg !52
  %322 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %309, i1 %30) #2, !dbg !52
  %323 = extractvalue { i32, i32, i32, i32 } %322, 0, !dbg !52
  %324 = extractvalue { i32, i32, i32, i32 } %322, 1, !dbg !52
  %325 = extractvalue { i32, i32, i32, i32 } %322, 2, !dbg !52
  %326 = extractvalue { i32, i32, i32, i32 } %322, 3, !dbg !52
  %327 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %311, i1 %31) #2, !dbg !52
  %328 = extractvalue { i32, i32, i32, i32 } %327, 0, !dbg !52
  %329 = extractvalue { i32, i32, i32, i32 } %327, 1, !dbg !52
  %330 = extractvalue { i32, i32, i32, i32 } %327, 2, !dbg !52
  %331 = extractvalue { i32, i32, i32, i32 } %327, 3, !dbg !52
  %332 = getelementptr float, ptr addrspace(1) %253, i64 %300, !dbg !53
  %333 = getelementptr float, ptr addrspace(1) %332, i64 %193, !dbg !53
  %334 = getelementptr float, ptr addrspace(1) %257, i64 %301, !dbg !53
  %335 = getelementptr float, ptr addrspace(1) %334, i64 %193, !dbg !53
  %336 = getelementptr float, ptr addrspace(1) %261, i64 %302, !dbg !53
  %337 = getelementptr float, ptr addrspace(1) %336, i64 %193, !dbg !53
  %338 = getelementptr float, ptr addrspace(1) %265, i64 %303, !dbg !53
  %339 = getelementptr float, ptr addrspace(1) %338, i64 %193, !dbg !53
  %340 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %333, i1 %28) #2, !dbg !54
  %341 = extractvalue { i32, i32, i32, i32 } %340, 0, !dbg !54
  %342 = extractvalue { i32, i32, i32, i32 } %340, 1, !dbg !54
  %343 = extractvalue { i32, i32, i32, i32 } %340, 2, !dbg !54
  %344 = extractvalue { i32, i32, i32, i32 } %340, 3, !dbg !54
  %345 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %335, i1 %29) #2, !dbg !54
  %346 = extractvalue { i32, i32, i32, i32 } %345, 0, !dbg !54
  %347 = extractvalue { i32, i32, i32, i32 } %345, 1, !dbg !54
  %348 = extractvalue { i32, i32, i32, i32 } %345, 2, !dbg !54
  %349 = extractvalue { i32, i32, i32, i32 } %345, 3, !dbg !54
  %350 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %337, i1 %30) #2, !dbg !54
  %351 = extractvalue { i32, i32, i32, i32 } %350, 0, !dbg !54
  %352 = extractvalue { i32, i32, i32, i32 } %350, 1, !dbg !54
  %353 = extractvalue { i32, i32, i32, i32 } %350, 2, !dbg !54
  %354 = extractvalue { i32, i32, i32, i32 } %350, 3, !dbg !54
  %355 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %339, i1 %31) #2, !dbg !54
  %356 = extractvalue { i32, i32, i32, i32 } %355, 0, !dbg !54
  %357 = extractvalue { i32, i32, i32, i32 } %355, 1, !dbg !54
  %358 = extractvalue { i32, i32, i32, i32 } %355, 2, !dbg !54
  %359 = extractvalue { i32, i32, i32, i32 } %355, 3, !dbg !54
  %360 = insertelement <2 x i32> poison, i32 %313, i64 0, !dbg !52
  %361 = insertelement <2 x i32> %360, i32 %211, i64 1, !dbg !52
  %362 = bitcast <2 x i32> %361 to <2 x float>, !dbg !52
  %363 = insertelement <2 x float> poison, float %233, i64 0, !dbg !55
  %364 = shufflevector <2 x float> %363, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !55
  %365 = fadd <2 x float> %364, %362, !dbg !55
  %366 = insertelement <2 x i32> poison, i32 %341, i64 0, !dbg !54
  %367 = insertelement <2 x i32> %366, i32 %269, i64 1, !dbg !54
  %368 = bitcast <2 x i32> %367 to <2 x float>, !dbg !54
  %369 = fadd <2 x float> %364, %368, !dbg !56
  %370 = fsub <2 x float> %369, %365, !dbg !57
  %371 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !58
  %372 = bitcast <2 x i32> %371 to <2 x float>, !dbg !58
  %373 = shufflevector <2 x float> %372, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %374 = fmul <2 x float> %370, %373, !dbg !58
  %375 = fadd <2 x float> %365, %374, !dbg !59
  %376 = insertelement <2 x i32> poison, i32 %314, i64 0, !dbg !52
  %377 = insertelement <2 x i32> %376, i32 %212, i64 1, !dbg !52
  %378 = bitcast <2 x i32> %377 to <2 x float>, !dbg !52
  %379 = insertelement <2 x float> poison, float %235, i64 0, !dbg !55
  %380 = shufflevector <2 x float> %379, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !55
  %381 = fadd <2 x float> %380, %378, !dbg !55
  %382 = insertelement <2 x i32> poison, i32 %342, i64 0, !dbg !54
  %383 = insertelement <2 x i32> %382, i32 %270, i64 1, !dbg !54
  %384 = bitcast <2 x i32> %383 to <2 x float>, !dbg !54
  %385 = fadd <2 x float> %380, %384, !dbg !56
  %386 = fsub <2 x float> %385, %381, !dbg !57
  %387 = fmul <2 x float> %386, %373, !dbg !58
  %388 = fadd <2 x float> %381, %387, !dbg !59
  %389 = insertelement <2 x i32> poison, i32 %315, i64 0, !dbg !52
  %390 = insertelement <2 x i32> %389, i32 %213, i64 1, !dbg !52
  %391 = bitcast <2 x i32> %390 to <2 x float>, !dbg !52
  %392 = insertelement <2 x float> poison, float %237, i64 0, !dbg !55
  %393 = shufflevector <2 x float> %392, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !55
  %394 = fadd <2 x float> %393, %391, !dbg !55
  %395 = insertelement <2 x i32> poison, i32 %343, i64 0, !dbg !54
  %396 = insertelement <2 x i32> %395, i32 %271, i64 1, !dbg !54
  %397 = bitcast <2 x i32> %396 to <2 x float>, !dbg !54
  %398 = fadd <2 x float> %393, %397, !dbg !56
  %399 = fsub <2 x float> %398, %394, !dbg !57
  %400 = fmul <2 x float> %399, %373, !dbg !58
  %401 = fadd <2 x float> %394, %400, !dbg !59
  %402 = insertelement <2 x i32> poison, i32 %316, i64 0, !dbg !52
  %403 = insertelement <2 x i32> %402, i32 %214, i64 1, !dbg !52
  %404 = bitcast <2 x i32> %403 to <2 x float>, !dbg !52
  %405 = insertelement <2 x float> poison, float %239, i64 0, !dbg !55
  %406 = shufflevector <2 x float> %405, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !55
  %407 = fadd <2 x float> %406, %404, !dbg !55
  %408 = insertelement <2 x i32> poison, i32 %344, i64 0, !dbg !54
  %409 = insertelement <2 x i32> %408, i32 %272, i64 1, !dbg !54
  %410 = bitcast <2 x i32> %409 to <2 x float>, !dbg !54
  %411 = fadd <2 x float> %406, %410, !dbg !56
  %412 = fsub <2 x float> %411, %407, !dbg !57
  %413 = fmul <2 x float> %412, %373, !dbg !58
  %414 = fadd <2 x float> %407, %413, !dbg !59
  %415 = insertelement <2 x i32> poison, i32 %318, i64 0, !dbg !52
  %416 = insertelement <2 x i32> %415, i32 %216, i64 1, !dbg !52
  %417 = bitcast <2 x i32> %416 to <2 x float>, !dbg !52
  %418 = fadd <2 x float> %364, %417, !dbg !55
  %419 = insertelement <2 x i32> poison, i32 %346, i64 0, !dbg !54
  %420 = insertelement <2 x i32> %419, i32 %274, i64 1, !dbg !54
  %421 = bitcast <2 x i32> %420 to <2 x float>, !dbg !54
  %422 = fadd <2 x float> %364, %421, !dbg !56
  %423 = fsub <2 x float> %422, %418, !dbg !57
  %424 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !58
  %425 = bitcast <2 x i32> %424 to <2 x float>, !dbg !58
  %426 = shufflevector <2 x float> %425, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %427 = fmul <2 x float> %423, %426, !dbg !58
  %428 = fadd <2 x float> %418, %427, !dbg !59
  %429 = insertelement <2 x i32> poison, i32 %319, i64 0, !dbg !52
  %430 = insertelement <2 x i32> %429, i32 %217, i64 1, !dbg !52
  %431 = bitcast <2 x i32> %430 to <2 x float>, !dbg !52
  %432 = fadd <2 x float> %380, %431, !dbg !55
  %433 = insertelement <2 x i32> poison, i32 %347, i64 0, !dbg !54
  %434 = insertelement <2 x i32> %433, i32 %275, i64 1, !dbg !54
  %435 = bitcast <2 x i32> %434 to <2 x float>, !dbg !54
  %436 = fadd <2 x float> %380, %435, !dbg !56
  %437 = fsub <2 x float> %436, %432, !dbg !57
  %438 = fmul <2 x float> %437, %426, !dbg !58
  %439 = fadd <2 x float> %432, %438, !dbg !59
  %440 = insertelement <2 x i32> poison, i32 %320, i64 0, !dbg !52
  %441 = insertelement <2 x i32> %440, i32 %218, i64 1, !dbg !52
  %442 = bitcast <2 x i32> %441 to <2 x float>, !dbg !52
  %443 = fadd <2 x float> %393, %442, !dbg !55
  %444 = insertelement <2 x i32> poison, i32 %348, i64 0, !dbg !54
  %445 = insertelement <2 x i32> %444, i32 %276, i64 1, !dbg !54
  %446 = bitcast <2 x i32> %445 to <2 x float>, !dbg !54
  %447 = fadd <2 x float> %393, %446, !dbg !56
  %448 = fsub <2 x float> %447, %443, !dbg !57
  %449 = fmul <2 x float> %448, %426, !dbg !58
  %450 = fadd <2 x float> %443, %449, !dbg !59
  %451 = insertelement <2 x i32> poison, i32 %321, i64 0, !dbg !52
  %452 = insertelement <2 x i32> %451, i32 %219, i64 1, !dbg !52
  %453 = bitcast <2 x i32> %452 to <2 x float>, !dbg !52
  %454 = fadd <2 x float> %406, %453, !dbg !55
  %455 = insertelement <2 x i32> poison, i32 %349, i64 0, !dbg !54
  %456 = insertelement <2 x i32> %455, i32 %277, i64 1, !dbg !54
  %457 = bitcast <2 x i32> %456 to <2 x float>, !dbg !54
  %458 = fadd <2 x float> %406, %457, !dbg !56
  %459 = fsub <2 x float> %458, %454, !dbg !57
  %460 = fmul <2 x float> %459, %426, !dbg !58
  %461 = fadd <2 x float> %454, %460, !dbg !59
  %462 = insertelement <2 x i32> poison, i32 %323, i64 0, !dbg !52
  %463 = insertelement <2 x i32> %462, i32 %221, i64 1, !dbg !52
  %464 = bitcast <2 x i32> %463 to <2 x float>, !dbg !52
  %465 = fadd <2 x float> %364, %464, !dbg !55
  %466 = insertelement <2 x i32> poison, i32 %351, i64 0, !dbg !54
  %467 = insertelement <2 x i32> %466, i32 %279, i64 1, !dbg !54
  %468 = bitcast <2 x i32> %467 to <2 x float>, !dbg !54
  %469 = fadd <2 x float> %364, %468, !dbg !56
  %470 = fsub <2 x float> %469, %465, !dbg !57
  %471 = insertelement <2 x i32> poison, i32 %114, i64 0, !dbg !58
  %472 = bitcast <2 x i32> %471 to <2 x float>, !dbg !58
  %473 = shufflevector <2 x float> %472, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %474 = fmul <2 x float> %470, %473, !dbg !58
  %475 = fadd <2 x float> %465, %474, !dbg !59
  %476 = insertelement <2 x i32> poison, i32 %324, i64 0, !dbg !52
  %477 = insertelement <2 x i32> %476, i32 %222, i64 1, !dbg !52
  %478 = bitcast <2 x i32> %477 to <2 x float>, !dbg !52
  %479 = fadd <2 x float> %380, %478, !dbg !55
  %480 = insertelement <2 x i32> poison, i32 %352, i64 0, !dbg !54
  %481 = insertelement <2 x i32> %480, i32 %280, i64 1, !dbg !54
  %482 = bitcast <2 x i32> %481 to <2 x float>, !dbg !54
  %483 = fadd <2 x float> %380, %482, !dbg !56
  %484 = fsub <2 x float> %483, %479, !dbg !57
  %485 = fmul <2 x float> %484, %473, !dbg !58
  %486 = fadd <2 x float> %479, %485, !dbg !59
  %487 = insertelement <2 x i32> poison, i32 %325, i64 0, !dbg !52
  %488 = insertelement <2 x i32> %487, i32 %223, i64 1, !dbg !52
  %489 = bitcast <2 x i32> %488 to <2 x float>, !dbg !52
  %490 = fadd <2 x float> %393, %489, !dbg !55
  %491 = insertelement <2 x i32> poison, i32 %353, i64 0, !dbg !54
  %492 = insertelement <2 x i32> %491, i32 %281, i64 1, !dbg !54
  %493 = bitcast <2 x i32> %492 to <2 x float>, !dbg !54
  %494 = fadd <2 x float> %393, %493, !dbg !56
  %495 = fsub <2 x float> %494, %490, !dbg !57
  %496 = fmul <2 x float> %495, %473, !dbg !58
  %497 = fadd <2 x float> %490, %496, !dbg !59
  %498 = insertelement <2 x i32> poison, i32 %326, i64 0, !dbg !52
  %499 = insertelement <2 x i32> %498, i32 %224, i64 1, !dbg !52
  %500 = bitcast <2 x i32> %499 to <2 x float>, !dbg !52
  %501 = fadd <2 x float> %406, %500, !dbg !55
  %502 = insertelement <2 x i32> poison, i32 %354, i64 0, !dbg !54
  %503 = insertelement <2 x i32> %502, i32 %282, i64 1, !dbg !54
  %504 = bitcast <2 x i32> %503 to <2 x float>, !dbg !54
  %505 = fadd <2 x float> %406, %504, !dbg !56
  %506 = fsub <2 x float> %505, %501, !dbg !57
  %507 = fmul <2 x float> %506, %473, !dbg !58
  %508 = fadd <2 x float> %501, %507, !dbg !59
  %509 = insertelement <2 x i32> poison, i32 %328, i64 0, !dbg !52
  %510 = insertelement <2 x i32> %509, i32 %226, i64 1, !dbg !52
  %511 = bitcast <2 x i32> %510 to <2 x float>, !dbg !52
  %512 = fadd <2 x float> %364, %511, !dbg !55
  %513 = insertelement <2 x i32> poison, i32 %356, i64 0, !dbg !54
  %514 = insertelement <2 x i32> %513, i32 %284, i64 1, !dbg !54
  %515 = bitcast <2 x i32> %514 to <2 x float>, !dbg !54
  %516 = fadd <2 x float> %364, %515, !dbg !56
  %517 = fsub <2 x float> %516, %512, !dbg !57
  %518 = insertelement <2 x i32> poison, i32 %118, i64 0, !dbg !58
  %519 = bitcast <2 x i32> %518 to <2 x float>, !dbg !58
  %520 = shufflevector <2 x float> %519, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %521 = fmul <2 x float> %517, %520, !dbg !58
  %522 = fadd <2 x float> %512, %521, !dbg !59
  %523 = insertelement <2 x i32> poison, i32 %329, i64 0, !dbg !52
  %524 = insertelement <2 x i32> %523, i32 %227, i64 1, !dbg !52
  %525 = bitcast <2 x i32> %524 to <2 x float>, !dbg !52
  %526 = fadd <2 x float> %380, %525, !dbg !55
  %527 = insertelement <2 x i32> poison, i32 %357, i64 0, !dbg !54
  %528 = insertelement <2 x i32> %527, i32 %285, i64 1, !dbg !54
  %529 = bitcast <2 x i32> %528 to <2 x float>, !dbg !54
  %530 = fadd <2 x float> %380, %529, !dbg !56
  %531 = fsub <2 x float> %530, %526, !dbg !57
  %532 = fmul <2 x float> %531, %520, !dbg !58
  %533 = fadd <2 x float> %526, %532, !dbg !59
  %534 = insertelement <2 x i32> poison, i32 %330, i64 0, !dbg !52
  %535 = insertelement <2 x i32> %534, i32 %228, i64 1, !dbg !52
  %536 = bitcast <2 x i32> %535 to <2 x float>, !dbg !52
  %537 = fadd <2 x float> %393, %536, !dbg !55
  %538 = insertelement <2 x i32> poison, i32 %358, i64 0, !dbg !54
  %539 = insertelement <2 x i32> %538, i32 %286, i64 1, !dbg !54
  %540 = bitcast <2 x i32> %539 to <2 x float>, !dbg !54
  %541 = fadd <2 x float> %393, %540, !dbg !56
  %542 = fsub <2 x float> %541, %537, !dbg !57
  %543 = fmul <2 x float> %542, %520, !dbg !58
  %544 = fadd <2 x float> %537, %543, !dbg !59
  %545 = insertelement <2 x i32> poison, i32 %331, i64 0, !dbg !52
  %546 = insertelement <2 x i32> %545, i32 %229, i64 1, !dbg !52
  %547 = bitcast <2 x i32> %546 to <2 x float>, !dbg !52
  %548 = fadd <2 x float> %406, %547, !dbg !55
  %549 = insertelement <2 x i32> poison, i32 %359, i64 0, !dbg !54
  %550 = insertelement <2 x i32> %549, i32 %287, i64 1, !dbg !54
  %551 = bitcast <2 x i32> %550 to <2 x float>, !dbg !54
  %552 = fadd <2 x float> %406, %551, !dbg !56
  %553 = fsub <2 x float> %552, %548, !dbg !57
  %554 = fmul <2 x float> %553, %520, !dbg !58
  %555 = fadd <2 x float> %548, %554, !dbg !59
  %556 = extractelement <2 x float> %375, i64 0, !dbg !60
  %557 = extractelement <2 x float> %375, i64 1, !dbg !61
  %558 = fsub float %556, %557, !dbg !60
  %559 = extractelement <2 x float> %388, i64 0, !dbg !60
  %560 = extractelement <2 x float> %388, i64 1, !dbg !61
  %561 = fsub float %559, %560, !dbg !60
  %562 = extractelement <2 x float> %401, i64 0, !dbg !60
  %563 = extractelement <2 x float> %401, i64 1, !dbg !61
  %564 = fsub float %562, %563, !dbg !60
  %565 = extractelement <2 x float> %414, i64 0, !dbg !60
  %566 = extractelement <2 x float> %414, i64 1, !dbg !61
  %567 = fsub float %565, %566, !dbg !60
  %568 = extractelement <2 x float> %428, i64 0, !dbg !60
  %569 = extractelement <2 x float> %428, i64 1, !dbg !61
  %570 = fsub float %568, %569, !dbg !60
  %571 = extractelement <2 x float> %439, i64 0, !dbg !60
  %572 = extractelement <2 x float> %439, i64 1, !dbg !61
  %573 = fsub float %571, %572, !dbg !60
  %574 = extractelement <2 x float> %450, i64 0, !dbg !60
  %575 = extractelement <2 x float> %450, i64 1, !dbg !61
  %576 = fsub float %574, %575, !dbg !60
  %577 = extractelement <2 x float> %461, i64 0, !dbg !60
  %578 = extractelement <2 x float> %461, i64 1, !dbg !61
  %579 = fsub float %577, %578, !dbg !60
  %580 = extractelement <2 x float> %475, i64 0, !dbg !60
  %581 = extractelement <2 x float> %475, i64 1, !dbg !61
  %582 = fsub float %580, %581, !dbg !60
  %583 = extractelement <2 x float> %486, i64 0, !dbg !60
  %584 = extractelement <2 x float> %486, i64 1, !dbg !61
  %585 = fsub float %583, %584, !dbg !60
  %586 = extractelement <2 x float> %497, i64 0, !dbg !60
  %587 = extractelement <2 x float> %497, i64 1, !dbg !61
  %588 = fsub float %586, %587, !dbg !60
  %589 = extractelement <2 x float> %508, i64 0, !dbg !60
  %590 = extractelement <2 x float> %508, i64 1, !dbg !61
  %591 = fsub float %589, %590, !dbg !60
  %592 = extractelement <2 x float> %522, i64 0, !dbg !60
  %593 = extractelement <2 x float> %522, i64 1, !dbg !61
  %594 = fsub float %592, %593, !dbg !60
  %595 = extractelement <2 x float> %533, i64 0, !dbg !60
  %596 = extractelement <2 x float> %533, i64 1, !dbg !61
  %597 = fsub float %595, %596, !dbg !60
  %598 = extractelement <2 x float> %544, i64 0, !dbg !60
  %599 = extractelement <2 x float> %544, i64 1, !dbg !61
  %600 = fsub float %598, %599, !dbg !60
  %601 = extractelement <2 x float> %555, i64 0, !dbg !60
  %602 = extractelement <2 x float> %555, i64 1, !dbg !61
  %603 = fsub float %601, %602, !dbg !60
  %604 = fmul float %558, %147, !dbg !62
  %605 = fmul float %561, %147, !dbg !62
  %606 = fmul float %564, %147, !dbg !62
  %607 = fmul float %567, %147, !dbg !62
  %608 = fmul float %570, %152, !dbg !62
  %609 = fmul float %573, %152, !dbg !62
  %610 = fmul float %576, %152, !dbg !62
  %611 = fmul float %579, %152, !dbg !62
  %612 = fmul float %582, %157, !dbg !62
  %613 = fmul float %585, %157, !dbg !62
  %614 = fmul float %588, %157, !dbg !62
  %615 = fmul float %591, %157, !dbg !62
  %616 = fmul float %594, %162, !dbg !62
  %617 = fmul float %597, %162, !dbg !62
  %618 = fmul float %600, %162, !dbg !62
  %619 = fmul float %603, %162, !dbg !62
  %620 = fadd float %557, %604, !dbg !61
  %621 = fadd float %560, %605, !dbg !61
  %622 = fadd float %563, %606, !dbg !61
  %623 = fadd float %566, %607, !dbg !61
  %624 = fadd float %569, %608, !dbg !61
  %625 = fadd float %572, %609, !dbg !61
  %626 = fadd float %575, %610, !dbg !61
  %627 = fadd float %578, %611, !dbg !61
  %628 = fadd float %581, %612, !dbg !61
  %629 = fadd float %584, %613, !dbg !61
  %630 = fadd float %587, %614, !dbg !61
  %631 = fadd float %590, %615, !dbg !61
  %632 = fadd float %593, %616, !dbg !61
  %633 = fadd float %596, %617, !dbg !61
  %634 = fadd float %599, %618, !dbg !61
  %635 = fadd float %602, %619, !dbg !61
  %636 = shl i32 %24, 8, !dbg !63
  %637 = shl i32 %25, 8, !dbg !63
  %638 = shl i32 %26, 8, !dbg !63
  %639 = shl i32 %27, 8, !dbg !63
  %640 = shl i32 %37, 12, !dbg !64
  %641 = add i32 %640, %.decomposed12, !dbg !65
  %642 = add i32 %641, %636, !dbg !66
  %643 = add i32 %641, %637, !dbg !66
  %644 = add i32 %641, %638, !dbg !66
  %645 = add i32 %641, %639, !dbg !66
  %646 = sext i32 %642 to i64, !dbg !67
  %647 = getelementptr float, ptr addrspace(1) %8, i64 %646, !dbg !67
  %648 = sext i32 %643 to i64, !dbg !67
  %649 = getelementptr float, ptr addrspace(1) %8, i64 %648, !dbg !67
  %650 = sext i32 %644 to i64, !dbg !67
  %651 = getelementptr float, ptr addrspace(1) %8, i64 %650, !dbg !67
  %652 = sext i32 %645 to i64, !dbg !67
  %653 = getelementptr float, ptr addrspace(1) %8, i64 %652, !dbg !67
  %654 = bitcast float %620 to i32, !dbg !68
  %655 = bitcast float %621 to i32, !dbg !68
  %656 = bitcast float %622 to i32, !dbg !68
  %657 = bitcast float %623 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %654, i32 %655, i32 %656, i32 %657, ptr addrspace(1) %647, i1 %28) #2, !dbg !68
  %658 = bitcast float %624 to i32, !dbg !68
  %659 = bitcast float %625 to i32, !dbg !68
  %660 = bitcast float %626 to i32, !dbg !68
  %661 = bitcast float %627 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %658, i32 %659, i32 %660, i32 %661, ptr addrspace(1) %649, i1 %29) #2, !dbg !68
  %662 = bitcast float %628 to i32, !dbg !68
  %663 = bitcast float %629 to i32, !dbg !68
  %664 = bitcast float %630 to i32, !dbg !68
  %665 = bitcast float %631 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %662, i32 %663, i32 %664, i32 %665, ptr addrspace(1) %651, i1 %30) #2, !dbg !68
  %666 = bitcast float %632 to i32, !dbg !68
  %667 = bitcast float %633 to i32, !dbg !68
  %668 = bitcast float %634 to i32, !dbg !68
  %669 = bitcast float %635 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %666, i32 %667, i32 %668, i32 %669, ptr addrspace(1) %653, i1 %31) #2, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cg3fiiehl3syuq5yykkpwi7bsyoyvlpxtdko5e3oj4zq53sc4lua.py", directory: "inductor_cache/g3")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_12", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 31, scope: !7)
!36 = !DILocation(line: 40, column: 36, scope: !7)
!37 = !DILocation(line: 44, column: 32, scope: !7)
!38 = !DILocation(line: 47, column: 32, scope: !7)
!39 = !DILocation(line: 48, column: 35, scope: !7)
!40 = !DILocation(line: 48, column: 50, scope: !7)
!41 = !DILocation(line: 48, column: 62, scope: !7)
!42 = !DILocation(line: 48, column: 57, scope: !7)
!43 = !DILocation(line: 48, column: 30, scope: !7)
!44 = !DILocation(line: 48, column: 67, scope: !7)
!45 = !DILocation(line: 49, column: 19, scope: !7)
!46 = !DILocation(line: 52, column: 35, scope: !7)
!47 = !DILocation(line: 53, column: 31, scope: !7)
!48 = !DILocation(line: 53, column: 69, scope: !7)
!49 = !DILocation(line: 60, column: 35, scope: !7)
!50 = !DILocation(line: 61, column: 51, scope: !7)
!51 = !DILocation(line: 61, column: 31, scope: !7)
!52 = !DILocation(line: 61, column: 69, scope: !7)
!53 = !DILocation(line: 63, column: 31, scope: !7)
!54 = !DILocation(line: 63, column: 70, scope: !7)
!55 = !DILocation(line: 62, column: 20, scope: !7)
!56 = !DILocation(line: 64, column: 20, scope: !7)
!57 = !DILocation(line: 65, column: 20, scope: !7)
!58 = !DILocation(line: 66, column: 20, scope: !7)
!59 = !DILocation(line: 67, column: 20, scope: !7)
!60 = !DILocation(line: 68, column: 20, scope: !7)
!61 = !DILocation(line: 70, column: 20, scope: !7)
!62 = !DILocation(line: 69, column: 20, scope: !7)
!63 = !DILocation(line: 71, column: 34, scope: !7)
!64 = !DILocation(line: 71, column: 44, scope: !7)
!65 = !DILocation(line: 71, column: 30, scope: !7)
!66 = !DILocation(line: 71, column: 39, scope: !7)
!67 = !DILocation(line: 71, column: 25, scope: !7)
!68 = !DILocation(line: 71, column: 56, scope: !7)
!69 = !DILocation(line: 71, column: 4, scope: !7)
