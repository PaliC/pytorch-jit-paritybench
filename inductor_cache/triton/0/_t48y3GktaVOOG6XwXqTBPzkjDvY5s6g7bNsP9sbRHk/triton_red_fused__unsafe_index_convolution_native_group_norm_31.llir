; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__unsafe_index_convolution_native_group_norm_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = and i32 %12, 64, !dbg !12
  %15 = lshr i32 %12, 1, !dbg !12
  %16 = and i32 %15, 63, !dbg !12
  %17 = or disjoint i32 %11, %13, !dbg !13
  %18 = or disjoint i32 %11, %16, !dbg !13
  %19 = icmp slt i32 %17, 256, !dbg !14
  %20 = icmp slt i32 %18, 256, !dbg !14
  %.lobit = lshr exact i32 %14, 6, !dbg !15
  %21 = shl i32 %12, 2, !dbg !15
  %22 = and i32 %21, 4, !dbg !15
  %23 = srem i32 %17, 64, !dbg !16
  %24 = shl nsw i32 %23, 1, !dbg !17
  %25 = shl i32 %17, 10, !dbg !18
  %26 = sext i32 %25 to i64, !dbg !19
  %27 = shl i32 %18, 13, !dbg !20
  %28 = or disjoint i32 %27, %22
  %29 = shl i32 %12, 3
  %30 = and i32 %29, 504
  %31 = or disjoint i32 %30, %.lobit
  %32 = and i32 %21, 252
  %33 = shl nuw nsw i32 %14, 2
  %34 = or disjoint i32 %32, %33
  %35 = lshr exact i32 %30, 1
  %36 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %35
  %37 = getelementptr inbounds float, ptr addrspace(3) %36, i32 %31
  %38 = or disjoint i32 %31, 2
  %39 = getelementptr inbounds float, ptr addrspace(3) %36, i32 %38
  %40 = or disjoint i32 %31, 4
  %41 = getelementptr inbounds float, ptr addrspace(3) %36, i32 %40
  %42 = or disjoint i32 %31, 6
  %43 = getelementptr inbounds float, ptr addrspace(3) %36, i32 %42
  %44 = lshr exact i32 %34, 1
  %45 = and i32 %44, 252
  %46 = getelementptr float, ptr addrspace(3) @global_smem, i32 %45
  %47 = getelementptr float, ptr addrspace(3) %46, i32 %34
  %48 = sext i32 %28 to i64, !dbg !21
  %invariant.gep = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !21
  %49 = getelementptr inbounds i8, ptr addrspace(3) %47, i32 4
  %50 = getelementptr inbounds i8, ptr addrspace(3) %47, i32 8
  %51 = getelementptr inbounds i8, ptr addrspace(3) %47, i32 12
  br label %52, !dbg !21

52:                                               ; preds = %9, %._crit_edge
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %9 ], [ %224, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %9 ], [ %225, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %9 ], [ %226, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %9 ], [ %227, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %9 ], [ %220, %._crit_edge ]
  %58 = phi float [ 0.000000e+00, %9 ], [ %221, %._crit_edge ]
  %59 = phi float [ 0.000000e+00, %9 ], [ %222, %._crit_edge ]
  %60 = phi float [ 0.000000e+00, %9 ], [ %223, %._crit_edge ]
  %61 = phi float [ 0.000000e+00, %9 ], [ %216, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %9 ], [ %217, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %9 ], [ %218, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %9 ], [ %219, %._crit_edge ]
  %65 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !22
  %66 = lshr i64 %indvars.iv, 8, !dbg !22
  %67 = and i64 %66, 15, !dbg !23
  %68 = lshr i64 %indvars.iv, 4, !dbg !24
  %69 = and i64 %68, 15, !dbg !25
  %.masked = and i32 %65, 8, !dbg !26
  %70 = or disjoint i32 %.masked, %.lobit, !dbg !26
  %71 = or disjoint i32 %70, 2, !dbg !26
  %72 = or disjoint i32 %70, 4, !dbg !26
  %73 = or disjoint i32 %70, 6, !dbg !26
  %74 = lshr i32 %65, 12, !dbg !27
  %75 = getelementptr i64, ptr addrspace(1) %0, i64 %67, !dbg !28
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %75, i1 true, i1 true) #3, !dbg !29
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %75, i1 true, i1 true) #3, !dbg !29
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %75, i1 true, i1 true) #3, !dbg !29
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %75, i1 true, i1 true) #3, !dbg !29
  %80 = getelementptr i64, ptr addrspace(1) %0, i64 %69, !dbg !30
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %80, i1 true, i1 true) #3, !dbg !31
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %80, i1 true, i1 true) #3, !dbg !31
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %80, i1 true, i1 true) #3, !dbg !31
  %84 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %80, i1 true, i1 true) #3, !dbg !31
  %85 = zext nneg i32 %70 to i64, !dbg !32
  %86 = getelementptr i64, ptr addrspace(1) %0, i64 %85, !dbg !32
  %87 = zext nneg i32 %71 to i64, !dbg !32
  %88 = getelementptr i64, ptr addrspace(1) %0, i64 %87, !dbg !32
  %89 = zext nneg i32 %72 to i64, !dbg !32
  %90 = getelementptr i64, ptr addrspace(1) %0, i64 %89, !dbg !32
  %91 = zext nneg i32 %73 to i64, !dbg !32
  %92 = getelementptr i64, ptr addrspace(1) %0, i64 %91, !dbg !32
  %93 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %86, i1 true, i1 true) #3, !dbg !33
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %88, i1 true, i1 true) #3, !dbg !33
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %90, i1 true, i1 true) #3, !dbg !33
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %92, i1 true, i1 true) #3, !dbg !33
  %97 = add nuw nsw i32 %74, %24, !dbg !34
  %98 = sext i32 %97 to i64, !dbg !35
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !35
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %19, i32 0, i1 %19) #3, !dbg !36
  %101 = bitcast i32 %100 to float, !dbg !36
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %19, i32 0, i1 %19) #3, !dbg !36
  %103 = bitcast i32 %102 to float, !dbg !36
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %19, i32 0, i1 %19) #3, !dbg !36
  %105 = bitcast i32 %104 to float, !dbg !36
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %19, i32 0, i1 %19) #3, !dbg !36
  %107 = bitcast i32 %106 to float, !dbg !36
  %108 = lshr i64 %76, 60, !dbg !37
  %109 = and i64 %108, 8, !dbg !37
  %110 = add i64 %109, %76, !dbg !37
  %111 = lshr i64 %77, 60, !dbg !37
  %112 = and i64 %111, 8, !dbg !37
  %113 = add i64 %112, %77, !dbg !37
  %114 = lshr i64 %78, 60, !dbg !37
  %115 = and i64 %114, 8, !dbg !37
  %116 = add i64 %115, %78, !dbg !37
  %117 = lshr i64 %79, 60, !dbg !37
  %118 = and i64 %117, 8, !dbg !37
  %119 = add i64 %118, %79, !dbg !37
  %120 = lshr i64 %81, 60, !dbg !38
  %121 = and i64 %120, 8, !dbg !38
  %122 = add i64 %121, %81, !dbg !38
  %123 = lshr i64 %82, 60, !dbg !38
  %124 = and i64 %123, 8, !dbg !38
  %125 = add i64 %124, %82, !dbg !38
  %126 = lshr i64 %83, 60, !dbg !38
  %127 = and i64 %126, 8, !dbg !38
  %128 = add i64 %127, %83, !dbg !38
  %129 = lshr i64 %84, 60, !dbg !38
  %130 = and i64 %129, 8, !dbg !38
  %131 = add i64 %130, %84, !dbg !38
  %132 = lshr i64 %93, 60, !dbg !39
  %133 = and i64 %132, 8, !dbg !39
  %134 = lshr i64 %94, 60, !dbg !39
  %135 = and i64 %134, 8, !dbg !39
  %136 = lshr i64 %95, 60, !dbg !39
  %137 = and i64 %136, 8, !dbg !39
  %138 = lshr i64 %96, 60, !dbg !39
  %139 = and i64 %138, 8, !dbg !39
  %140 = shl nuw nsw i32 %74, 9, !dbg !40
  %141 = zext nneg i32 %140 to i64, !dbg !41
  %142 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !42
  %143 = getelementptr float, ptr addrspace(1) %142, i64 %133, !dbg !42
  %.idx = shl i64 %122, 5, !dbg !42
  %144 = getelementptr i8, ptr addrspace(1) %143, i64 %.idx, !dbg !42
  %.idx7 = shl i64 %110, 8, !dbg !42
  %145 = getelementptr i8, ptr addrspace(1) %144, i64 %.idx7, !dbg !42
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %141, !dbg !42
  %147 = getelementptr float, ptr addrspace(1) %146, i64 %26, !dbg !42
  %148 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !42
  %149 = getelementptr float, ptr addrspace(1) %148, i64 %135, !dbg !42
  %.idx8 = shl i64 %125, 5, !dbg !42
  %150 = getelementptr i8, ptr addrspace(1) %149, i64 %.idx8, !dbg !42
  %.idx9 = shl i64 %113, 8, !dbg !42
  %151 = getelementptr i8, ptr addrspace(1) %150, i64 %.idx9, !dbg !42
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %141, !dbg !42
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %26, !dbg !42
  %154 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !42
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %137, !dbg !42
  %.idx10 = shl i64 %128, 5, !dbg !42
  %156 = getelementptr i8, ptr addrspace(1) %155, i64 %.idx10, !dbg !42
  %.idx11 = shl i64 %116, 8, !dbg !42
  %157 = getelementptr i8, ptr addrspace(1) %156, i64 %.idx11, !dbg !42
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %141, !dbg !42
  %159 = getelementptr float, ptr addrspace(1) %158, i64 %26, !dbg !42
  %160 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !42
  %161 = getelementptr float, ptr addrspace(1) %160, i64 %139, !dbg !42
  %.idx12 = shl i64 %131, 5, !dbg !42
  %162 = getelementptr i8, ptr addrspace(1) %161, i64 %.idx12, !dbg !42
  %.idx13 = shl i64 %119, 8, !dbg !42
  %163 = getelementptr i8, ptr addrspace(1) %162, i64 %.idx13, !dbg !42
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %141, !dbg !42
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %26, !dbg !42
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %19, i32 0, i1 %19) #3, !dbg !43
  %167 = bitcast i32 %166 to float, !dbg !43
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %19, i32 0, i1 %19) #3, !dbg !43
  %169 = bitcast i32 %168 to float, !dbg !43
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %19, i32 0, i1 %19) #3, !dbg !43
  %171 = bitcast i32 %170 to float, !dbg !43
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %19, i32 0, i1 %19) #3, !dbg !43
  %173 = bitcast i32 %172 to float, !dbg !43
  %174 = fadd float %101, %167, !dbg !44
  %175 = fadd float %103, %169, !dbg !44
  %176 = fadd float %105, %171, !dbg !44
  %177 = fadd float %107, %173, !dbg !44
  %178 = icmp eq i64 %indvars.iv, 0, !dbg !45
  br i1 %178, label %._crit_edge, label %179, !dbg !46

179:                                              ; preds = %52
  %180 = fsub float %174, %61, !dbg !50
  %181 = fsub float %175, %62, !dbg !50
  %182 = fsub float %176, %63, !dbg !50
  %183 = fsub float %177, %64, !dbg !50
  %184 = fadd float %53, 1.000000e+00, !dbg !51
  %185 = fadd float %54, 1.000000e+00, !dbg !51
  %186 = fadd float %55, 1.000000e+00, !dbg !51
  %187 = fadd float %56, 1.000000e+00, !dbg !51
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float %184) #3, !dbg !52
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float %185) #3, !dbg !52
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %182, float %186) #3, !dbg !52
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %183, float %187) #3, !dbg !52
  %192 = fadd float %61, %188, !dbg !53
  %193 = fadd float %62, %189, !dbg !53
  %194 = fadd float %63, %190, !dbg !53
  %195 = fadd float %64, %191, !dbg !53
  %196 = fsub float %174, %192, !dbg !54
  %197 = fsub float %175, %193, !dbg !54
  %198 = fsub float %176, %194, !dbg !54
  %199 = fsub float %177, %195, !dbg !54
  %200 = fmul float %180, %196, !dbg !55
  %201 = fmul float %181, %197, !dbg !55
  %202 = fmul float %182, %198, !dbg !55
  %203 = fmul float %183, %199, !dbg !55
  %204 = fadd float %57, %200, !dbg !56
  %205 = fadd float %58, %201, !dbg !56
  %206 = fadd float %59, %202, !dbg !56
  %207 = fadd float %60, %203, !dbg !56
  br label %._crit_edge, !dbg !46

._crit_edge:                                      ; preds = %52, %179
  %208 = phi float [ %204, %179 ], [ 0.000000e+00, %52 ], !dbg !49
  %209 = phi float [ %205, %179 ], [ 0.000000e+00, %52 ], !dbg !49
  %210 = phi float [ %206, %179 ], [ 0.000000e+00, %52 ], !dbg !49
  %211 = phi float [ %207, %179 ], [ 0.000000e+00, %52 ], !dbg !49
  %.pn20 = phi float [ %192, %179 ], [ %174, %52 ]
  %.pn18 = phi float [ %193, %179 ], [ %175, %52 ]
  %.pn16 = phi float [ %194, %179 ], [ %176, %52 ]
  %.pn14 = phi float [ %195, %179 ], [ %177, %52 ]
  %212 = phi float [ %184, %179 ], [ 1.000000e+00, %52 ], !dbg !49
  %213 = phi float [ %185, %179 ], [ 1.000000e+00, %52 ], !dbg !49
  %214 = phi float [ %186, %179 ], [ 1.000000e+00, %52 ], !dbg !49
  %215 = phi float [ %187, %179 ], [ 1.000000e+00, %52 ], !dbg !49
  %216 = select i1 %19, float %.pn20, float %61, !dbg !57
  %217 = select i1 %19, float %.pn18, float %62, !dbg !57
  %218 = select i1 %19, float %.pn16, float %63, !dbg !57
  %219 = select i1 %19, float %.pn14, float %64, !dbg !57
  %220 = select i1 %19, float %208, float %57, !dbg !58
  %221 = select i1 %19, float %209, float %58, !dbg !58
  %222 = select i1 %19, float %210, float %59, !dbg !58
  %223 = select i1 %19, float %211, float %60, !dbg !58
  %224 = select i1 %19, float %212, float %53, !dbg !59
  %225 = select i1 %19, float %213, float %54, !dbg !59
  %226 = select i1 %19, float %214, float %55, !dbg !59
  %227 = select i1 %19, float %215, float %56, !dbg !59
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %228 = bitcast float %174 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %37, <1 x i32> %228, i1 true) #3, !dbg !61
  %229 = bitcast float %175 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %229, i1 true) #3, !dbg !61
  %230 = bitcast float %176 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %230, i1 true) #3, !dbg !61
  %231 = bitcast float %177 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %231, i1 true) #3, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %.extract = load i32, ptr addrspace(3) %47, align 16, !dbg !61
  %.extract24 = load i32, ptr addrspace(3) %49, align 4, !dbg !61
  %.extract25 = load i32, ptr addrspace(3) %50, align 8, !dbg !61
  %.extract26 = load i32, ptr addrspace(3) %51, align 4, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %gep, i1 %20) #3, !dbg !61
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !21
  %232 = icmp samesign ult i64 %indvars.iv, 8184, !dbg !21
  br i1 %232, label %52, label %233, !dbg !21

233:                                              ; preds = %._crit_edge
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %234 = fsub float %217, %216, !dbg !64
  %235 = fadd float %224, %225, !dbg !66
  %236 = fcmp oeq float %235, 0.000000e+00, !dbg !67
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %225, float %235) #3, !dbg !68
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !69
  %239 = fmul float %234, %238, !dbg !70
  %240 = fadd float %216, %239, !dbg !71
  %241 = fadd float %220, %221, !dbg !72
  %242 = fmul float %234, %234, !dbg !73
  %243 = fmul float %242, %224, !dbg !74
  %244 = fmul float %243, %238, !dbg !75
  %245 = fadd float %241, %244, !dbg !76
  %246 = fsub float %218, %240, !dbg !64
  %247 = fadd float %226, %235, !dbg !66
  %248 = fcmp oeq float %247, 0.000000e+00, !dbg !67
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float %247) #3, !dbg !68
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !69
  %251 = fmul float %250, %246, !dbg !70
  %252 = fadd float %240, %251, !dbg !71
  %253 = fadd float %222, %245, !dbg !72
  %254 = fmul float %246, %246, !dbg !73
  %255 = fmul float %235, %254, !dbg !74
  %256 = fmul float %250, %255, !dbg !75
  %257 = fadd float %253, %256, !dbg !76
  %258 = fsub float %219, %252, !dbg !64
  %259 = fadd float %227, %247, !dbg !66
  %260 = fcmp oeq float %259, 0.000000e+00, !dbg !67
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %227, float %259) #3, !dbg !68
  %262 = select i1 %260, float 0.000000e+00, float %261, !dbg !69
  %263 = fmul float %262, %258, !dbg !70
  %264 = fadd float %252, %263, !dbg !71
  %265 = fadd float %223, %257, !dbg !72
  %266 = fmul float %258, %258, !dbg !73
  %267 = fmul float %247, %266, !dbg !74
  %268 = fmul float %262, %267, !dbg !75
  %269 = fadd float %265, %268, !dbg !76
  %270 = lshr i32 %12, 6, !dbg !62
  %271 = and i32 %270, 1, !dbg !62
  %272 = shl nuw nsw i32 %13, 1, !dbg !62
  %273 = or disjoint i32 %272, %271, !dbg !62
  %274 = getelementptr float, ptr addrspace(3) @global_smem, i32 %273, !dbg !62
  %275 = bitcast float %264 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #3, !dbg !62
  %276 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %273, !dbg !62
  %277 = bitcast float %269 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #3, !dbg !62
  %278 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %273, !dbg !62
  %279 = bitcast float %259 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 true) #3, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %280 = icmp slt i32 %12, 128, !dbg !62
  %281 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !62
  %282 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %281, i1 %280) #3, !dbg !62
  %283 = bitcast i32 %282 to float, !dbg !62
  %284 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %12, !dbg !62
  %285 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %284, i1 %280) #3, !dbg !62
  %286 = bitcast i32 %285 to float, !dbg !62
  %287 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %12, !dbg !62
  %288 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %287, i1 %280) #3, !dbg !62
  %289 = bitcast i32 %288 to float, !dbg !62
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 1, i32 31), !dbg !62
  %291 = bitcast i32 %290 to float, !dbg !62
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 1, i32 31), !dbg !62
  %293 = bitcast i32 %292 to float, !dbg !62
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 1, i32 31), !dbg !62
  %295 = bitcast i32 %294 to float, !dbg !62
  %296 = fsub float %291, %283, !dbg !64
  %297 = fadd float %289, %295, !dbg !66
  %298 = fcmp oeq float %297, 0.000000e+00, !dbg !67
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %295, float %297) #3, !dbg !68
  %300 = select i1 %298, float 0.000000e+00, float %299, !dbg !69
  %301 = fmul float %296, %300, !dbg !70
  %302 = fadd float %301, %283, !dbg !71
  %303 = fadd float %286, %293, !dbg !72
  %304 = fmul float %296, %296, !dbg !73
  %305 = fmul float %304, %289, !dbg !74
  %306 = fmul float %305, %300, !dbg !75
  %307 = fadd float %303, %306, !dbg !76
  %308 = and i32 %12, 1, !dbg !62
  %309 = icmp eq i32 %308, 0, !dbg !62
  %310 = and i1 %280, %309, !dbg !62
  %311 = bitcast float %302 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %311, i1 %310) #3, !dbg !62
  %312 = bitcast float %307 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %312, i1 %310) #3, !dbg !62
  %313 = bitcast float %297 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %313, i1 %310) #3, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %314 = getelementptr float, ptr addrspace(3) @global_smem, i32 %272, !dbg !62
  %315 = load i32, ptr addrspace(3) %314, align 8, !dbg !62
  %316 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %272, !dbg !62
  %317 = load i32, ptr addrspace(3) %316, align 8, !dbg !62
  %318 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %272, !dbg !62
  %319 = load i32, ptr addrspace(3) %318, align 8, !dbg !62
  %320 = sext i32 %17 to i64, !dbg !77
  %321 = getelementptr float, ptr addrspace(1) %4, i64 %320, !dbg !77
  %322 = icmp eq i32 %271, 0, !dbg !78
  %323 = and i1 %322, %19, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %315, ptr addrspace(1) %321, i1 %323) #3, !dbg !78
  %324 = getelementptr float, ptr addrspace(1) %5, i64 %320, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %317, ptr addrspace(1) %324, i1 %323) #3, !dbg !80
  %325 = getelementptr float, ptr addrspace(1) %6, i64 %320, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %319, ptr addrspace(1) %325, i1 %323) #3, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py", directory: "inductor_cache/7s")
!4 = !{ptr @triton_red_fused__unsafe_index_convolution_native_group_norm_31, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__unsafe_index_convolution_native_group_norm_31, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__unsafe_index_convolution_native_group_norm_31", linkageName: "triton_red_fused__unsafe_index_convolution_native_group_norm_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 42, column: 42, scope: !7)
!18 = !DILocation(line: 53, column: 76, scope: !7)
!19 = !DILocation(line: 53, column: 71, scope: !7)
!20 = !DILocation(line: 62, column: 39, scope: !7)
!21 = !DILocation(line: 31, column: 36, scope: !7)
!22 = !DILocation(line: 34, column: 25, scope: !7)
!23 = !DILocation(line: 34, column: 32, scope: !7)
!24 = !DILocation(line: 35, column: 25, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 36, column: 23, scope: !7)
!27 = !DILocation(line: 37, column: 23, scope: !7)
!28 = !DILocation(line: 39, column: 34, scope: !7)
!29 = !DILocation(line: 39, column: 39, scope: !7)
!30 = !DILocation(line: 40, column: 34, scope: !7)
!31 = !DILocation(line: 40, column: 39, scope: !7)
!32 = !DILocation(line: 41, column: 34, scope: !7)
!33 = !DILocation(line: 41, column: 39, scope: !7)
!34 = !DILocation(line: 42, column: 40, scope: !7)
!35 = !DILocation(line: 42, column: 35, scope: !7)
!36 = !DILocation(line: 42, column: 47, scope: !7)
!37 = !DILocation(line: 46, column: 36, scope: !7)
!38 = !DILocation(line: 49, column: 36, scope: !7)
!39 = !DILocation(line: 52, column: 39, scope: !7)
!40 = !DILocation(line: 53, column: 66, scope: !7)
!41 = !DILocation(line: 53, column: 62, scope: !7)
!42 = !DILocation(line: 53, column: 35, scope: !7)
!43 = !DILocation(line: 53, column: 81, scope: !7)
!44 = !DILocation(line: 54, column: 24, scope: !7)
!45 = !DILocation(line: 57, column: 66, scope: !7)
!46 = !DILocation(line: 178, column: 7, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 57, column: 55, scope: !7)
!50 = !DILocation(line: 183, column: 24, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 184, column: 30, scope: !47, inlinedAt: !49)
!52 = !DILocation(line: 185, column: 34, scope: !47, inlinedAt: !49)
!53 = !DILocation(line: 185, column: 26, scope: !47, inlinedAt: !49)
!54 = !DILocation(line: 186, column: 39, scope: !47, inlinedAt: !49)
!55 = !DILocation(line: 186, column: 31, scope: !47, inlinedAt: !49)
!56 = !DILocation(line: 186, column: 22, scope: !47, inlinedAt: !49)
!57 = !DILocation(line: 59, column: 62, scope: !7)
!58 = !DILocation(line: 60, column: 58, scope: !7)
!59 = !DILocation(line: 61, column: 66, scope: !7)
!60 = !DILocation(line: 62, column: 29, scope: !7)
!61 = !DILocation(line: 62, column: 51, scope: !7)
!62 = !DILocation(line: 204, column: 46, scope: !47, inlinedAt: !63)
!63 = !DILocation(line: 64, column: 44, scope: !7)
!64 = !DILocation(line: 192, column: 21, scope: !65, inlinedAt: !63)
!65 = distinct !DILexicalBlockFile(scope: !47, file: !48, discriminator: 0)
!66 = !DILocation(line: 193, column: 28, scope: !65, inlinedAt: !63)
!67 = !DILocation(line: 194, column: 39, scope: !65, inlinedAt: !63)
!68 = !DILocation(line: 194, column: 60, scope: !65, inlinedAt: !63)
!69 = !DILocation(line: 194, column: 49, scope: !65, inlinedAt: !63)
!70 = !DILocation(line: 196, column: 25, scope: !65, inlinedAt: !63)
!71 = !DILocation(line: 196, column: 17, scope: !65, inlinedAt: !63)
!72 = !DILocation(line: 197, column: 15, scope: !65, inlinedAt: !63)
!73 = !DILocation(line: 197, column: 30, scope: !65, inlinedAt: !63)
!74 = !DILocation(line: 197, column: 38, scope: !65, inlinedAt: !63)
!75 = !DILocation(line: 197, column: 49, scope: !65, inlinedAt: !63)
!76 = !DILocation(line: 197, column: 22, scope: !65, inlinedAt: !63)
!77 = !DILocation(line: 69, column: 25, scope: !7)
!78 = !DILocation(line: 69, column: 37, scope: !7)
!79 = !DILocation(line: 70, column: 25, scope: !7)
!80 = !DILocation(line: 70, column: 37, scope: !7)
!81 = !DILocation(line: 71, column: 25, scope: !7)
!82 = !DILocation(line: 71, column: 37, scope: !7)
!83 = !DILocation(line: 71, column: 4, scope: !7)
