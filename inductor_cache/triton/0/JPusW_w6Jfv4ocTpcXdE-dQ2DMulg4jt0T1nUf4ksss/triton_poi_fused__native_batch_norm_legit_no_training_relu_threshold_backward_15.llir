; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %17 = icmp slt i32 %16, 4, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %18 = sdiv i32 %.frozen, 256, !dbg !16
  %19 = mul i32 %18, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %20 = shl i32 %16, 8, !dbg !18
  %21 = add i32 %.decomposed, %20, !dbg !19
  %22 = shl i32 %18, 10, !dbg !20
  %23 = add i32 %21, %22, !dbg !21
  %24 = sext i32 %23 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !22
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %17) #4, !dbg !23
  %27 = sext i32 %.decomposed to i64, !dbg !24
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !24
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #4, !dbg !25
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !26
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #4, !dbg !27
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !27
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !27
  %34 = bitcast i32 %32 to float, !dbg !27
  %35 = bitcast i32 %33 to float, !dbg !27
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !28
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !29
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !30
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #4, !dbg !31
  %40 = fadd float %34, 0x3EE4F8B580000000, !dbg !32
  %41 = fadd float %35, 0x3EE4F8B580000000, !dbg !32
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %42, 0, !dbg !33
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %43, 0, !dbg !33
  br i1 %.not.i, label %49, label %44, !dbg !33

44:                                               ; preds = %9
  br i1 %.not1.i, label %47, label %45, !dbg !33

45:                                               ; preds = %44
  %46 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %40) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

47:                                               ; preds = %44
  %48 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %40) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

49:                                               ; preds = %9
  br i1 %.not1.i, label %52, label %50, !dbg !33

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.f(float %40) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.f(float %40) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %45, %47, %50, %52
  %.0.i = phi float [ %46, %45 ], [ %48, %47 ], [ %51, %50 ], [ %53, %52 ], !dbg !33
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i3 = icmp eq i32 %54, 0, !dbg !33
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i6 = icmp eq i32 %55, 0, !dbg !33
  br i1 %.not.i3, label %61, label %56, !dbg !33

56:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %59, label %57, !dbg !33

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %41) #4, !dbg !33
  br label %__nv_sqrtf.exit7, !dbg !33

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %41) #4, !dbg !33
  br label %__nv_sqrtf.exit7, !dbg !33

61:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %64, label %62, !dbg !33

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %41) #4, !dbg !33
  br label %__nv_sqrtf.exit7, !dbg !33

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %41) #4, !dbg !33
  br label %__nv_sqrtf.exit7, !dbg !33

__nv_sqrtf.exit7:                                 ; preds = %57, %59, %62, %64
  %.0.i5 = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !33
  %66 = extractvalue { i32, i32 } %26, 1, !dbg !23
  %67 = extractvalue { i32, i32 } %29, 1, !dbg !25
  %68 = extractvalue { i32, i32 } %26, 0, !dbg !23
  %69 = extractvalue { i32, i32 } %29, 0, !dbg !25
  %70 = extractvalue { i32, i32 } %39, 1, !dbg !31
  %71 = extractvalue { i32, i32 } %39, 0, !dbg !31
  %72 = extractvalue { i32, i32 } %37, 1, !dbg !29
  %73 = extractvalue { i32, i32 } %37, 0, !dbg !29
  %74 = and i32 %12, 127, !dbg !12
  %75 = or disjoint i32 %74, 128, !dbg !12
  %76 = or disjoint i32 %11, %75, !dbg !13
  %77 = or disjoint i32 %11, %74, !dbg !13
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !34
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !34
  %80 = shl i32 %77, 2, !dbg !35
  %81 = shl i32 %76, 2, !dbg !35
  %82 = add i32 %80, %16, !dbg !36
  %83 = add i32 %81, %16, !dbg !36
  %84 = sext i32 %82 to i64, !dbg !37
  %85 = getelementptr float, ptr addrspace(1) %5, i64 %84, !dbg !37
  %86 = sext i32 %83 to i64, !dbg !37
  %87 = getelementptr float, ptr addrspace(1) %5, i64 %86, !dbg !37
  %.idx = shl nuw nsw i32 %14, 3, !dbg !38
  %88 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !38
  %89 = shl nuw nsw i32 %14, 1, !dbg !38
  %90 = or disjoint i32 %89, 2, !dbg !38
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %90, !dbg !38
  %.idx1 = shl nuw nsw i32 %74, 3, !dbg !38
  %92 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !38
  %.idx2 = shl nuw nsw i32 %75, 3, !dbg !38
  %93 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !38
  %94 = getelementptr i1, ptr addrspace(1) %6, i64 %24, !dbg !39
  %95 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !23
  %96 = insertelement <2 x i32> %95, i32 %66, i64 1, !dbg !23
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !23
  %98 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !25
  %99 = insertelement <2 x i32> %98, i32 %67, i64 1, !dbg !25
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !25
  %101 = fsub <2 x float> %97, %100, !dbg !40
  %102 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !31
  %103 = insertelement <2 x i32> %102, i32 %70, i64 1, !dbg !31
  %104 = bitcast <2 x i32> %103 to <2 x float>, !dbg !31
  %105 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !29
  %106 = insertelement <2 x i32> %105, i32 %72, i64 1, !dbg !29
  %107 = bitcast <2 x i32> %106 to <2 x float>, !dbg !29
  %108 = insertelement <2 x float> poison, float %78, i64 0, !dbg !41
  %109 = insertelement <2 x float> %108, float %79, i64 1, !dbg !41
  %110 = fmul <2 x float> %101, %109, !dbg !41
  %111 = fmul <2 x float> %110, %107, !dbg !42
  %112 = fadd <2 x float> %111, %104, !dbg !43
  %113 = fcmp olt <2 x float> %112, zeroinitializer, !dbg !44
  %114 = select <2 x i1> %113, <2 x float> zeroinitializer, <2 x float> %112, !dbg !48
  %115 = fcmp ole <2 x float> %114, zeroinitializer, !dbg !49
  %116 = extractelement <2 x float> %114, i64 0, !dbg !38
  %117 = bitcast float %116 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %117, i1 true) #4, !dbg !38
  %118 = extractelement <2 x float> %114, i64 1, !dbg !38
  %119 = bitcast float %118 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %119, i1 true) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %120 = load i32, ptr addrspace(3) %92, align 8, !dbg !38
  %121 = load i32, ptr addrspace(3) %93, align 8, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %120, ptr addrspace(1) %85, i1 %17) #4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %121, ptr addrspace(1) %87, i1 %17) #4, !dbg !38
  %122 = zext <2 x i1> %115 to <2 x i8>, !dbg !50
  %123 = bitcast <2 x i8> %122 to i16, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %123, ptr addrspace(1) %94, i1 %17) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cerp4cr5intc52dunio6xvnwvgimwwhrinpoygy4oujaa7qfjbr6.py", directory: "inductor_cache/er")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_15", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 49, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 54, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 26, scope: !7)
!34 = !DILocation(line: 42, column: 18, scope: !7)
!35 = !DILocation(line: 52, column: 32, scope: !7)
!36 = !DILocation(line: 52, column: 30, scope: !7)
!37 = !DILocation(line: 52, column: 25, scope: !7)
!38 = !DILocation(line: 52, column: 44, scope: !7)
!39 = !DILocation(line: 53, column: 25, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 51, column: 21, scope: !7)
!50 = !DILocation(line: 53, column: 56, scope: !7)
!51 = !DILocation(line: 53, column: 4, scope: !7)
