; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 1, !dbg !11
  %20 = or disjoint i32 %19, 1, !dbg !12
  %21 = icmp slt i32 %19, 176, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %23 = shl i32 %22, 8, !dbg !15
  %24 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %25 = and i32 %24, 127, !dbg !16
  %26 = or disjoint i32 %23, %25, !dbg !17
  %27 = or disjoint i32 %26, 128, !dbg !17
  %28 = icmp slt i32 %26, 256, !dbg !18
  %29 = icmp slt i32 %27, 256, !dbg !18
  %30 = sdiv i32 %19, 44, !dbg !19
  %31 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !20
  %32 = insertelement <2 x i32> %31, i32 %19, i64 1, !dbg !20
  %33 = srem <2 x i32> %32, splat (i32 44), !dbg !20
  %34 = icmp slt <2 x i32> %33, splat (i32 11), !dbg !21
  %35 = mul i32 %26, 11, !dbg !22
  %36 = mul i32 %27, 11, !dbg !22
  %37 = mul i32 %30, 2816, !dbg !23
  %38 = add i32 %35, %37, !dbg !24
  %39 = add i32 %37, %36, !dbg !24
  %40 = extractelement <2 x i32> %33, i64 1, !dbg !25
  %41 = add i32 %38, %40, !dbg !26
  %42 = extractelement <2 x i32> %33, i64 0, !dbg !27
  %43 = add i32 %38, %42, !dbg !26
  %44 = add i32 %39, %40, !dbg !26
  %45 = add i32 %39, %42, !dbg !26
  %46 = sext i32 %41 to i64, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !28
  %48 = sext i32 %43 to i64, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !28
  %50 = sext i32 %44 to i64, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !28
  %52 = sext i32 %45 to i64, !dbg !28
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !28
  %54 = extractelement <2 x i1> %34, i64 1, !dbg !29
  %55 = and i1 %54, %28, !dbg !29
  %56 = extractelement <2 x i1> %34, i64 0, !dbg !29
  %57 = and i1 %56, %28, !dbg !29
  %58 = and i1 %29, %54, !dbg !29
  %59 = and i1 %29, %56, !dbg !29
  %60 = and i1 %21, %55, !dbg !30
  %61 = and i1 %21, %57, !dbg !30
  %62 = and i1 %21, %58, !dbg !30
  %63 = and i1 %21, %59, !dbg !30
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %60, i32 0, i1 %60) #3, !dbg !31
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %61, i32 0, i1 %61) #3, !dbg !31
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %62, i32 0, i1 %62) #3, !dbg !31
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %63, i32 0, i1 %63) #3, !dbg !31
  %68 = icmp sgt i32 %42, 10, !dbg !27
  %69 = icmp slt i32 %40, 22, !dbg !32
  %70 = add nsw i32 %40, -11, !dbg !25
  %71 = icmp ult i32 %70, 11, !dbg !25
  %72 = and i1 %69, %68, !dbg !25
  %73 = add nsw i32 %42, -11, !dbg !33
  %74 = add i32 %38, %70, !dbg !34
  %75 = add i32 %38, %73, !dbg !34
  %76 = add i32 %39, %70, !dbg !34
  %77 = add i32 %39, %73, !dbg !34
  %78 = sext i32 %74 to i64, !dbg !35
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !35
  %80 = sext i32 %75 to i64, !dbg !35
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !35
  %82 = sext i32 %76 to i64, !dbg !35
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !35
  %84 = sext i32 %77 to i64, !dbg !35
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !35
  %86 = and i1 %71, %28, !dbg !36
  %87 = and i1 %28, %72, !dbg !36
  %88 = and i1 %29, %71, !dbg !36
  %89 = and i1 %29, %72, !dbg !36
  %90 = and i1 %21, %86, !dbg !37
  %91 = and i1 %21, %87, !dbg !37
  %92 = and i1 %21, %88, !dbg !37
  %93 = and i1 %21, %89, !dbg !37
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %90, i32 0, i1 %90) #3, !dbg !38
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %91, i32 0, i1 %91) #3, !dbg !38
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %92, i32 0, i1 %92) #3, !dbg !38
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %93, i32 0, i1 %93) #3, !dbg !38
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %78, !dbg !39
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !39
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !39
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !39
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %90, i32 0, i1 %90) #3, !dbg !40
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %91, i32 0, i1 %91) #3, !dbg !40
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %92, i32 0, i1 %92) #3, !dbg !40
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %93, i32 0, i1 %93) #3, !dbg !40
  %106 = sext i32 %70 to i64, !dbg !41
  %107 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !41
  %108 = sext i32 %73 to i64, !dbg !41
  %109 = getelementptr float, ptr addrspace(1) %3, i64 %108, !dbg !41
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %90, i32 0, i1 %90) #3, !dbg !42
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %91, i32 0, i1 %91) #3, !dbg !42
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %92, i32 0, i1 %92) #3, !dbg !42
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %93, i32 0, i1 %93) #3, !dbg !42
  %114 = getelementptr float, ptr addrspace(1) %4, i64 %106, !dbg !43
  %115 = getelementptr float, ptr addrspace(1) %4, i64 %108, !dbg !43
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %90, i32 0, i1 %90) #3, !dbg !44
  %117 = bitcast i32 %116 to float, !dbg !44
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %91, i32 0, i1 %91) #3, !dbg !44
  %119 = bitcast i32 %118 to float, !dbg !44
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %92, i32 0, i1 %92) #3, !dbg !44
  %121 = bitcast i32 %120 to float, !dbg !44
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %93, i32 0, i1 %93) #3, !dbg !44
  %123 = bitcast i32 %122 to float, !dbg !44
  %124 = fadd float %117, 0x3F50624DE0000000, !dbg !45
  %125 = fadd float %119, 0x3F50624DE0000000, !dbg !45
  %126 = fadd float %121, 0x3F50624DE0000000, !dbg !45
  %127 = fadd float %123, 0x3F50624DE0000000, !dbg !45
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i = icmp eq i32 %128, 0, !dbg !46
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i = icmp eq i32 %129, 0, !dbg !46
  br i1 %.not.i, label %135, label %130, !dbg !46

130:                                              ; preds = %17
  br i1 %.not1.i, label %133, label %131, !dbg !46

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

135:                                              ; preds = %17
  br i1 %.not1.i, label %138, label %136, !dbg !46

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

__nv_sqrtf.exit:                                  ; preds = %131, %133, %136, %138
  %.0.i = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !46
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i1 = icmp eq i32 %140, 0, !dbg !46
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i4 = icmp eq i32 %141, 0, !dbg !46
  br i1 %.not.i1, label %147, label %142, !dbg !46

142:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %145, label %143, !dbg !46

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

147:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %150, label %148, !dbg !46

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

__nv_sqrtf.exit5:                                 ; preds = %143, %145, %148, %150
  %.0.i3 = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !46
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i6 = icmp eq i32 %152, 0, !dbg !46
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i9 = icmp eq i32 %153, 0, !dbg !46
  br i1 %.not.i6, label %159, label %154, !dbg !46

154:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %157, label %155, !dbg !46

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

159:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %162, label %160, !dbg !46

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

__nv_sqrtf.exit10:                                ; preds = %155, %157, %160, %162
  %.0.i8 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !46
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i11 = icmp eq i32 %164, 0, !dbg !46
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i14 = icmp eq i32 %165, 0, !dbg !46
  br i1 %.not.i11, label %171, label %166, !dbg !46

166:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %169, label %167, !dbg !46

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

171:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %174, label %172, !dbg !46

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

__nv_sqrtf.exit15:                                ; preds = %167, %169, %172, %174
  %.0.i13 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !46
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !47
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !47
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !47
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !47
  %180 = getelementptr float, ptr addrspace(1) %5, i64 %106, !dbg !48
  %181 = getelementptr float, ptr addrspace(1) %5, i64 %108, !dbg !48
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %90, i32 0, i1 %90) #3, !dbg !49
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %91, i32 0, i1 %91) #3, !dbg !49
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %92, i32 0, i1 %92) #3, !dbg !49
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %93, i32 0, i1 %93) #3, !dbg !49
  %186 = getelementptr float, ptr addrspace(1) %6, i64 %106, !dbg !50
  %187 = getelementptr float, ptr addrspace(1) %6, i64 %108, !dbg !50
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %90, i32 0, i1 %90) #3, !dbg !51
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %91, i32 0, i1 %91) #3, !dbg !51
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %92, i32 0, i1 %92) #3, !dbg !51
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %93, i32 0, i1 %93) #3, !dbg !51
  %192 = icmp sgt i32 %40, 21, !dbg !52
  %193 = icmp slt i32 %42, 33, !dbg !53
  %194 = add nsw i32 %40, -22, !dbg !54
  %195 = icmp ult i32 %194, 11, !dbg !54
  %196 = and i1 %192, %193, !dbg !54
  %197 = add nsw i32 %42, -22, !dbg !55
  %198 = add i32 %38, %194, !dbg !56
  %199 = add i32 %38, %197, !dbg !56
  %200 = add i32 %39, %194, !dbg !56
  %201 = add i32 %39, %197, !dbg !56
  %202 = sext i32 %198 to i64, !dbg !57
  %203 = getelementptr float, ptr addrspace(1) %7, i64 %202, !dbg !57
  %204 = sext i32 %199 to i64, !dbg !57
  %205 = getelementptr float, ptr addrspace(1) %7, i64 %204, !dbg !57
  %206 = sext i32 %200 to i64, !dbg !57
  %207 = getelementptr float, ptr addrspace(1) %7, i64 %206, !dbg !57
  %208 = sext i32 %201 to i64, !dbg !57
  %209 = getelementptr float, ptr addrspace(1) %7, i64 %208, !dbg !57
  %210 = and i1 %195, %28, !dbg !58
  %211 = and i1 %28, %196, !dbg !58
  %212 = and i1 %29, %195, !dbg !58
  %213 = and i1 %29, %196, !dbg !58
  %214 = and i1 %21, %210, !dbg !59
  %215 = and i1 %21, %211, !dbg !59
  %216 = and i1 %21, %212, !dbg !59
  %217 = and i1 %21, %213, !dbg !59
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %203, i1 %214, i32 0, i1 %214) #3, !dbg !60
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %205, i1 %215, i32 0, i1 %215) #3, !dbg !60
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %216, i32 0, i1 %216) #3, !dbg !60
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 %217, i32 0, i1 %217) #3, !dbg !60
  %222 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !61
  %223 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !61
  %224 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !61
  %225 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !61
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %222, i1 %214, i32 0, i1 %214) #3, !dbg !62
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %215, i32 0, i1 %215) #3, !dbg !62
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %216, i32 0, i1 %216) #3, !dbg !62
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %225, i1 %217, i32 0, i1 %217) #3, !dbg !62
  %230 = icmp sgt <2 x i32> %33, splat (i32 32), !dbg !63
  %231 = add nsw i32 %40, -33, !dbg !64
  %232 = add nsw i32 %42, -33, !dbg !64
  %233 = add i32 %38, %231, !dbg !65
  %234 = add i32 %38, %232, !dbg !65
  %235 = add i32 %39, %231, !dbg !65
  %236 = add i32 %39, %232, !dbg !65
  %237 = sext i32 %233 to i64, !dbg !66
  %238 = getelementptr float, ptr addrspace(1) %8, i64 %237, !dbg !66
  %239 = sext i32 %234 to i64, !dbg !66
  %240 = getelementptr float, ptr addrspace(1) %8, i64 %239, !dbg !66
  %241 = sext i32 %235 to i64, !dbg !66
  %242 = getelementptr float, ptr addrspace(1) %8, i64 %241, !dbg !66
  %243 = sext i32 %236 to i64, !dbg !66
  %244 = getelementptr float, ptr addrspace(1) %8, i64 %243, !dbg !66
  %245 = extractelement <2 x i1> %230, i64 1, !dbg !67
  %246 = and i1 %245, %28, !dbg !67
  %247 = extractelement <2 x i1> %230, i64 0, !dbg !67
  %248 = and i1 %247, %28, !dbg !67
  %249 = and i1 %29, %245, !dbg !67
  %250 = and i1 %29, %247, !dbg !67
  %251 = and i1 %21, %246, !dbg !68
  %252 = and i1 %21, %248, !dbg !68
  %253 = and i1 %21, %249, !dbg !68
  %254 = and i1 %21, %250, !dbg !68
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %251, i32 0, i1 %251) #3, !dbg !69
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %240, i1 %252, i32 0, i1 %252) #3, !dbg !69
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %242, i1 %253, i32 0, i1 %253) #3, !dbg !69
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %244, i1 %254, i32 0, i1 %254) #3, !dbg !69
  %259 = sext i32 %231 to i64, !dbg !70
  %260 = getelementptr float, ptr addrspace(1) %9, i64 %259, !dbg !70
  %261 = sext i32 %232 to i64, !dbg !70
  %262 = getelementptr float, ptr addrspace(1) %9, i64 %261, !dbg !70
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %260, i1 %251, i32 0, i1 %251) #3, !dbg !71
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %262, i1 %252, i32 0, i1 %252) #3, !dbg !71
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %260, i1 %253, i32 0, i1 %253) #3, !dbg !71
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %262, i1 %254, i32 0, i1 %254) #3, !dbg !71
  %267 = getelementptr float, ptr addrspace(1) %10, i64 %259, !dbg !72
  %268 = getelementptr float, ptr addrspace(1) %10, i64 %261, !dbg !72
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %267, i1 %251, i32 0, i1 %251) #3, !dbg !73
  %270 = bitcast i32 %269 to float, !dbg !73
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %268, i1 %252, i32 0, i1 %252) #3, !dbg !73
  %272 = bitcast i32 %271 to float, !dbg !73
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %267, i1 %253, i32 0, i1 %253) #3, !dbg !73
  %274 = bitcast i32 %273 to float, !dbg !73
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %268, i1 %254, i32 0, i1 %254) #3, !dbg !73
  %276 = bitcast i32 %275 to float, !dbg !73
  %277 = fadd float %270, 0x3F50624DE0000000, !dbg !74
  %278 = fadd float %272, 0x3F50624DE0000000, !dbg !74
  %279 = fadd float %274, 0x3F50624DE0000000, !dbg !74
  %280 = fadd float %276, 0x3F50624DE0000000, !dbg !74
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i16 = icmp eq i32 %281, 0, !dbg !75
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !75
  %.not1.i19 = icmp eq i32 %282, 0, !dbg !75
  br i1 %.not.i16, label %288, label %283, !dbg !75

283:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %286, label %284, !dbg !75

284:                                              ; preds = %283
  %285 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %277) #3, !dbg !75
  br label %__nv_sqrtf.exit20, !dbg !75

286:                                              ; preds = %283
  %287 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %277) #3, !dbg !75
  br label %__nv_sqrtf.exit20, !dbg !75

288:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %291, label %289, !dbg !75

289:                                              ; preds = %288
  %290 = tail call float @llvm.nvvm.sqrt.rn.f(float %277) #3, !dbg !75
  br label %__nv_sqrtf.exit20, !dbg !75

291:                                              ; preds = %288
  %292 = tail call float @llvm.nvvm.sqrt.approx.f(float %277) #3, !dbg !75
  br label %__nv_sqrtf.exit20, !dbg !75

__nv_sqrtf.exit20:                                ; preds = %284, %286, %289, %291
  %.0.i18 = phi float [ %285, %284 ], [ %287, %286 ], [ %290, %289 ], [ %292, %291 ], !dbg !75
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i21 = icmp eq i32 %293, 0, !dbg !75
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !75
  %.not1.i24 = icmp eq i32 %294, 0, !dbg !75
  br i1 %.not.i21, label %300, label %295, !dbg !75

295:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %298, label %296, !dbg !75

296:                                              ; preds = %295
  %297 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %278) #3, !dbg !75
  br label %__nv_sqrtf.exit25, !dbg !75

298:                                              ; preds = %295
  %299 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %278) #3, !dbg !75
  br label %__nv_sqrtf.exit25, !dbg !75

300:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %303, label %301, !dbg !75

301:                                              ; preds = %300
  %302 = tail call float @llvm.nvvm.sqrt.rn.f(float %278) #3, !dbg !75
  br label %__nv_sqrtf.exit25, !dbg !75

303:                                              ; preds = %300
  %304 = tail call float @llvm.nvvm.sqrt.approx.f(float %278) #3, !dbg !75
  br label %__nv_sqrtf.exit25, !dbg !75

__nv_sqrtf.exit25:                                ; preds = %296, %298, %301, %303
  %.0.i23 = phi float [ %297, %296 ], [ %299, %298 ], [ %302, %301 ], [ %304, %303 ], !dbg !75
  %305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i26 = icmp eq i32 %305, 0, !dbg !75
  %306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !75
  %.not1.i29 = icmp eq i32 %306, 0, !dbg !75
  br i1 %.not.i26, label %312, label %307, !dbg !75

307:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %310, label %308, !dbg !75

308:                                              ; preds = %307
  %309 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %279) #3, !dbg !75
  br label %__nv_sqrtf.exit30, !dbg !75

310:                                              ; preds = %307
  %311 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %279) #3, !dbg !75
  br label %__nv_sqrtf.exit30, !dbg !75

312:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %315, label %313, !dbg !75

313:                                              ; preds = %312
  %314 = tail call float @llvm.nvvm.sqrt.rn.f(float %279) #3, !dbg !75
  br label %__nv_sqrtf.exit30, !dbg !75

315:                                              ; preds = %312
  %316 = tail call float @llvm.nvvm.sqrt.approx.f(float %279) #3, !dbg !75
  br label %__nv_sqrtf.exit30, !dbg !75

__nv_sqrtf.exit30:                                ; preds = %308, %310, %313, %315
  %.0.i28 = phi float [ %309, %308 ], [ %311, %310 ], [ %314, %313 ], [ %316, %315 ], !dbg !75
  %317 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i31 = icmp eq i32 %317, 0, !dbg !75
  %318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !75
  %.not1.i34 = icmp eq i32 %318, 0, !dbg !75
  br i1 %.not.i31, label %324, label %319, !dbg !75

319:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %322, label %320, !dbg !75

320:                                              ; preds = %319
  %321 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %280) #3, !dbg !75
  br label %__nv_sqrtf.exit35, !dbg !75

322:                                              ; preds = %319
  %323 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %280) #3, !dbg !75
  br label %__nv_sqrtf.exit35, !dbg !75

324:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %327, label %325, !dbg !75

325:                                              ; preds = %324
  %326 = tail call float @llvm.nvvm.sqrt.rn.f(float %280) #3, !dbg !75
  br label %__nv_sqrtf.exit35, !dbg !75

327:                                              ; preds = %324
  %328 = tail call float @llvm.nvvm.sqrt.approx.f(float %280) #3, !dbg !75
  br label %__nv_sqrtf.exit35, !dbg !75

__nv_sqrtf.exit35:                                ; preds = %320, %322, %325, %327
  %.0.i33 = phi float [ %321, %320 ], [ %323, %322 ], [ %326, %325 ], [ %328, %327 ], !dbg !75
  %329 = shufflevector <2 x i1> %230, <2 x i1> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !63
  %330 = shufflevector <2 x i1> %34, <2 x i1> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !21
  %331 = insertelement <4 x i32> poison, i32 %258, i64 0, !dbg !69
  %332 = insertelement <4 x i32> %331, i32 %257, i64 1, !dbg !69
  %333 = insertelement <4 x i32> %332, i32 %256, i64 2, !dbg !69
  %334 = insertelement <4 x i32> %333, i32 %255, i64 3, !dbg !69
  %335 = bitcast <4 x i32> %334 to <4 x float>, !dbg !69
  %336 = insertelement <4 x i32> poison, i32 %266, i64 0, !dbg !71
  %337 = insertelement <4 x i32> %336, i32 %265, i64 1, !dbg !71
  %338 = insertelement <4 x i32> %337, i32 %264, i64 2, !dbg !71
  %339 = insertelement <4 x i32> %338, i32 %263, i64 3, !dbg !71
  %340 = bitcast <4 x i32> %339 to <4 x float>, !dbg !71
  %341 = insertelement <4 x i32> poison, i32 %221, i64 0, !dbg !60
  %342 = insertelement <4 x i32> %341, i32 %220, i64 1, !dbg !60
  %343 = insertelement <4 x i32> %342, i32 %219, i64 2, !dbg !60
  %344 = insertelement <4 x i32> %343, i32 %218, i64 3, !dbg !60
  %345 = bitcast <4 x i32> %344 to <4 x float>, !dbg !60
  %346 = insertelement <4 x i32> poison, i32 %229, i64 0, !dbg !62
  %347 = insertelement <4 x i32> %346, i32 %228, i64 1, !dbg !62
  %348 = insertelement <4 x i32> %347, i32 %227, i64 2, !dbg !62
  %349 = insertelement <4 x i32> %348, i32 %226, i64 3, !dbg !62
  %350 = bitcast <4 x i32> %349 to <4 x float>, !dbg !62
  %351 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !40
  %352 = insertelement <4 x i32> %351, i32 %104, i64 1, !dbg !40
  %353 = insertelement <4 x i32> %352, i32 %103, i64 2, !dbg !40
  %354 = insertelement <4 x i32> %353, i32 %102, i64 3, !dbg !40
  %355 = bitcast <4 x i32> %354 to <4 x float>, !dbg !40
  %356 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !42
  %357 = insertelement <4 x i32> %356, i32 %112, i64 1, !dbg !42
  %358 = insertelement <4 x i32> %357, i32 %111, i64 2, !dbg !42
  %359 = insertelement <4 x i32> %358, i32 %110, i64 3, !dbg !42
  %360 = bitcast <4 x i32> %359 to <4 x float>, !dbg !42
  %361 = insertelement <4 x i32> poison, i32 %185, i64 0, !dbg !49
  %362 = insertelement <4 x i32> %361, i32 %184, i64 1, !dbg !49
  %363 = insertelement <4 x i32> %362, i32 %183, i64 2, !dbg !49
  %364 = insertelement <4 x i32> %363, i32 %182, i64 3, !dbg !49
  %365 = bitcast <4 x i32> %364 to <4 x float>, !dbg !49
  %366 = insertelement <4 x i32> poison, i32 %191, i64 0, !dbg !51
  %367 = insertelement <4 x i32> %366, i32 %190, i64 1, !dbg !51
  %368 = insertelement <4 x i32> %367, i32 %189, i64 2, !dbg !51
  %369 = insertelement <4 x i32> %368, i32 %188, i64 3, !dbg !51
  %370 = bitcast <4 x i32> %369 to <4 x float>, !dbg !51
  %371 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !38
  %372 = insertelement <4 x i32> %371, i32 %96, i64 1, !dbg !38
  %373 = insertelement <4 x i32> %372, i32 %95, i64 2, !dbg !38
  %374 = insertelement <4 x i32> %373, i32 %94, i64 3, !dbg !38
  %375 = bitcast <4 x i32> %374 to <4 x float>, !dbg !38
  %376 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !31
  %377 = insertelement <4 x i32> %376, i32 %66, i64 1, !dbg !31
  %378 = insertelement <4 x i32> %377, i32 %65, i64 2, !dbg !31
  %379 = insertelement <4 x i32> %378, i32 %64, i64 3, !dbg !31
  %380 = bitcast <4 x i32> %379 to <4 x float>, !dbg !31
  %381 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !76
  %382 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !76
  %383 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !76
  %384 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !76
  %385 = getelementptr float, ptr addrspace(1) %11, i64 %259, !dbg !77
  %386 = getelementptr float, ptr addrspace(1) %11, i64 %261, !dbg !77
  %387 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %385, i1 %251, i32 0, i1 %251) #3, !dbg !78
  %388 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %386, i1 %252, i32 0, i1 %252) #3, !dbg !78
  %389 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %385, i1 %253, i32 0, i1 %253) #3, !dbg !78
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %386, i1 %254, i32 0, i1 %254) #3, !dbg !78
  %391 = getelementptr float, ptr addrspace(1) %12, i64 %259, !dbg !79
  %392 = getelementptr float, ptr addrspace(1) %12, i64 %261, !dbg !79
  %393 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %391, i1 %251, i32 0, i1 %251) #3, !dbg !80
  %394 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %392, i1 %252, i32 0, i1 %252) #3, !dbg !80
  %395 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %391, i1 %253, i32 0, i1 %253) #3, !dbg !80
  %396 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %392, i1 %254, i32 0, i1 %254) #3, !dbg !80
  %397 = getelementptr float, ptr addrspace(1) %13, i64 %237, !dbg !81
  %398 = getelementptr float, ptr addrspace(1) %13, i64 %239, !dbg !81
  %399 = getelementptr float, ptr addrspace(1) %13, i64 %241, !dbg !81
  %400 = getelementptr float, ptr addrspace(1) %13, i64 %243, !dbg !81
  %401 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %397, i1 %251, i32 0, i1 %251) #3, !dbg !82
  %402 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %398, i1 %252, i32 0, i1 %252) #3, !dbg !82
  %403 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %399, i1 %253, i32 0, i1 %253) #3, !dbg !82
  %404 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %400, i1 %254, i32 0, i1 %254) #3, !dbg !82
  %405 = fsub <4 x float> %335, %340, !dbg !83
  %406 = fadd <4 x float> %345, %350, !dbg !84
  %407 = fsub <4 x float> %355, %360, !dbg !85
  %408 = insertelement <4 x float> poison, float %179, i64 0, !dbg !86
  %409 = insertelement <4 x float> %408, float %178, i64 1, !dbg !86
  %410 = insertelement <4 x float> %409, float %177, i64 2, !dbg !86
  %411 = insertelement <4 x float> %410, float %176, i64 3, !dbg !86
  %412 = fmul <4 x float> %407, %411, !dbg !86
  %413 = fmul <4 x float> %412, %365, !dbg !87
  %414 = fadd <4 x float> %413, %370, !dbg !88
  %415 = fadd <4 x float> %414, %375, !dbg !89
  %416 = insertelement <4 x float> poison, float %384, i64 0, !dbg !90
  %417 = insertelement <4 x float> %416, float %383, i64 1, !dbg !90
  %418 = insertelement <4 x float> %417, float %382, i64 2, !dbg !90
  %419 = insertelement <4 x float> %418, float %381, i64 3, !dbg !90
  %420 = fmul <4 x float> %405, %419, !dbg !90
  %421 = insertelement <4 x i32> poison, i32 %390, i64 0, !dbg !78
  %422 = insertelement <4 x i32> %421, i32 %389, i64 1, !dbg !78
  %423 = insertelement <4 x i32> %422, i32 %388, i64 2, !dbg !78
  %424 = insertelement <4 x i32> %423, i32 %387, i64 3, !dbg !78
  %425 = bitcast <4 x i32> %424 to <4 x float>, !dbg !78
  %426 = fmul <4 x float> %420, %425, !dbg !91
  %427 = insertelement <4 x i32> poison, i32 %396, i64 0, !dbg !80
  %428 = insertelement <4 x i32> %427, i32 %395, i64 1, !dbg !80
  %429 = insertelement <4 x i32> %428, i32 %394, i64 2, !dbg !80
  %430 = insertelement <4 x i32> %429, i32 %393, i64 3, !dbg !80
  %431 = bitcast <4 x i32> %430 to <4 x float>, !dbg !80
  %432 = fadd <4 x float> %426, %431, !dbg !92
  %433 = insertelement <4 x i32> poison, i32 %404, i64 0, !dbg !82
  %434 = insertelement <4 x i32> %433, i32 %403, i64 1, !dbg !82
  %435 = insertelement <4 x i32> %434, i32 %402, i64 2, !dbg !82
  %436 = insertelement <4 x i32> %435, i32 %401, i64 3, !dbg !82
  %437 = bitcast <4 x i32> %436 to <4 x float>, !dbg !82
  %438 = fadd <4 x float> %432, %437, !dbg !93
  %439 = select <4 x i1> %329, <4 x float> %438, <4 x float> zeroinitializer, !dbg !94
  %440 = insertelement <4 x i1> poison, i1 %196, i64 0, !dbg !95
  %441 = insertelement <4 x i1> %440, i1 %195, i64 1, !dbg !95
  %442 = shufflevector <4 x i1> %441, <4 x i1> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !95
  %443 = select <4 x i1> %442, <4 x float> %406, <4 x float> %439, !dbg !95
  %444 = insertelement <4 x i1> poison, i1 %72, i64 0, !dbg !95
  %445 = insertelement <4 x i1> %444, i1 %71, i64 1, !dbg !95
  %446 = shufflevector <4 x i1> %445, <4 x i1> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !95
  %447 = select <4 x i1> %446, <4 x float> %415, <4 x float> %443, !dbg !95
  %448 = select <4 x i1> %330, <4 x float> %380, <4 x float> %447, !dbg !96
  %449 = fcmp olt <4 x float> %448, zeroinitializer, !dbg !97
  %450 = extractelement <4 x i1> %449, i64 3, !dbg !101
  %451 = extractelement <4 x i1> %449, i64 2, !dbg !101
  %452 = extractelement <4 x i1> %449, i64 1, !dbg !101
  %453 = extractelement <4 x i1> %449, i64 0, !dbg !101
  %454 = mul i32 %26, 44, !dbg !102
  %455 = mul i32 %27, 44, !dbg !102
  %456 = add i32 %40, %455, !dbg !103
  %457 = mul i32 %30, 11264, !dbg !104
  %458 = add i32 %457, %40, !dbg !103
  %459 = add i32 %458, %454, !dbg !105
  %460 = add i32 %456, %457, !dbg !105
  %461 = sext i32 %459 to i64, !dbg !106
  %462 = getelementptr float, ptr addrspace(1) %14, i64 %461, !dbg !106
  %463 = sext i32 %460 to i64, !dbg !106
  %464 = getelementptr float, ptr addrspace(1) %14, i64 %463, !dbg !106
  %465 = and i1 %21, %28, !dbg !107
  %466 = and i1 %29, %21, !dbg !107
  %bc = bitcast <4 x float> %448 to <4 x i32>, !dbg !108
  %467 = extractelement <4 x i32> %bc, i64 3, !dbg !108
  %468 = select i1 %450, i32 0, i32 %467, !dbg !101
  %bc36 = bitcast <4 x float> %448 to <4 x i32>, !dbg !108
  %469 = extractelement <4 x i32> %bc36, i64 2, !dbg !108
  %470 = select i1 %451, i32 0, i32 %469, !dbg !101
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %468, i32 %470, ptr addrspace(1) %462, i1 %465) #3, !dbg !108
  %bc37 = bitcast <4 x float> %448 to <4 x i32>, !dbg !108
  %471 = extractelement <4 x i32> %bc37, i64 1, !dbg !108
  %472 = select i1 %452, i32 0, i32 %471, !dbg !101
  %bc38 = bitcast <4 x float> %448 to <4 x i32>, !dbg !108
  %473 = extractelement <4 x i32> %bc38, i64 0, !dbg !108
  %474 = select i1 %453, i32 0, i32 %473, !dbg !101
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %472, i32 %474, ptr addrspace(1) %464, i1 %466) #3, !dbg !108
  ret void, !dbg !109
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyy2ojrhwcjtxlmgfz2566bd2z54ndsbf7vhzwwrckanv4m5nkrk.py", directory: "inductor_cache/yy")
!4 = !{ptr @triton_poi_fused_cat_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_9", linkageName: "triton_poi_fused_cat_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 23, scope: !7)
!13 = !DILocation(line: 24, column: 21, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 36, column: 18, scope: !7)
!22 = !DILocation(line: 37, column: 33, scope: !7)
!23 = !DILocation(line: 37, column: 43, scope: !7)
!24 = !DILocation(line: 37, column: 38, scope: !7)
!25 = !DILocation(line: 41, column: 18, scope: !7)
!26 = !DILocation(line: 37, column: 49, scope: !7)
!27 = !DILocation(line: 38, column: 19, scope: !7)
!28 = !DILocation(line: 37, column: 30, scope: !7)
!29 = !DILocation(line: 37, column: 62, scope: !7)
!30 = !DILocation(line: 37, column: 70, scope: !7)
!31 = !DILocation(line: 37, column: 55, scope: !7)
!32 = !DILocation(line: 40, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 58, scope: !7)
!34 = !DILocation(line: 42, column: 50, scope: !7)
!35 = !DILocation(line: 42, column: 31, scope: !7)
!36 = !DILocation(line: 42, column: 71, scope: !7)
!37 = !DILocation(line: 42, column: 79, scope: !7)
!38 = !DILocation(line: 42, column: 64, scope: !7)
!39 = !DILocation(line: 43, column: 31, scope: !7)
!40 = !DILocation(line: 43, column: 64, scope: !7)
!41 = !DILocation(line: 44, column: 31, scope: !7)
!42 = !DILocation(line: 44, column: 79, scope: !7)
!43 = !DILocation(line: 46, column: 31, scope: !7)
!44 = !DILocation(line: 46, column: 79, scope: !7)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 49, column: 27, scope: !7)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 55, column: 31, scope: !7)
!49 = !DILocation(line: 55, column: 79, scope: !7)
!50 = !DILocation(line: 57, column: 31, scope: !7)
!51 = !DILocation(line: 57, column: 79, scope: !7)
!52 = !DILocation(line: 62, column: 20, scope: !7)
!53 = !DILocation(line: 64, column: 19, scope: !7)
!54 = !DILocation(line: 65, column: 20, scope: !7)
!55 = !DILocation(line: 66, column: 58, scope: !7)
!56 = !DILocation(line: 66, column: 50, scope: !7)
!57 = !DILocation(line: 66, column: 31, scope: !7)
!58 = !DILocation(line: 66, column: 72, scope: !7)
!59 = !DILocation(line: 66, column: 80, scope: !7)
!60 = !DILocation(line: 66, column: 64, scope: !7)
!61 = !DILocation(line: 67, column: 31, scope: !7)
!62 = !DILocation(line: 67, column: 64, scope: !7)
!63 = !DILocation(line: 71, column: 20, scope: !7)
!64 = !DILocation(line: 74, column: 58, scope: !7)
!65 = !DILocation(line: 74, column: 50, scope: !7)
!66 = !DILocation(line: 74, column: 31, scope: !7)
!67 = !DILocation(line: 74, column: 72, scope: !7)
!68 = !DILocation(line: 74, column: 80, scope: !7)
!69 = !DILocation(line: 74, column: 64, scope: !7)
!70 = !DILocation(line: 75, column: 31, scope: !7)
!71 = !DILocation(line: 75, column: 79, scope: !7)
!72 = !DILocation(line: 77, column: 32, scope: !7)
!73 = !DILocation(line: 77, column: 80, scope: !7)
!74 = !DILocation(line: 79, column: 20, scope: !7)
!75 = !DILocation(line: 80, column: 27, scope: !7)
!76 = !DILocation(line: 82, column: 20, scope: !7)
!77 = !DILocation(line: 86, column: 32, scope: !7)
!78 = !DILocation(line: 86, column: 80, scope: !7)
!79 = !DILocation(line: 88, column: 32, scope: !7)
!80 = !DILocation(line: 88, column: 80, scope: !7)
!81 = !DILocation(line: 90, column: 32, scope: !7)
!82 = !DILocation(line: 90, column: 65, scope: !7)
!83 = !DILocation(line: 76, column: 20, scope: !7)
!84 = !DILocation(line: 68, column: 20, scope: !7)
!85 = !DILocation(line: 45, column: 20, scope: !7)
!86 = !DILocation(line: 54, column: 20, scope: !7)
!87 = !DILocation(line: 56, column: 20, scope: !7)
!88 = !DILocation(line: 58, column: 20, scope: !7)
!89 = !DILocation(line: 59, column: 20, scope: !7)
!90 = !DILocation(line: 85, column: 20, scope: !7)
!91 = !DILocation(line: 87, column: 20, scope: !7)
!92 = !DILocation(line: 89, column: 20, scope: !7)
!93 = !DILocation(line: 91, column: 20, scope: !7)
!94 = !DILocation(line: 93, column: 35, scope: !7)
!95 = !DILocation(line: 0, scope: !7)
!96 = !DILocation(line: 96, column: 33, scope: !7)
!97 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !100)
!98 = distinct !DILexicalBlockFile(scope: !7, file: !99, discriminator: 0)
!99 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!100 = !DILocation(line: 98, column: 42, scope: !7)
!101 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !100)
!102 = !DILocation(line: 99, column: 33, scope: !7)
!103 = !DILocation(line: 99, column: 30, scope: !7)
!104 = !DILocation(line: 99, column: 44, scope: !7)
!105 = !DILocation(line: 99, column: 38, scope: !7)
!106 = !DILocation(line: 99, column: 25, scope: !7)
!107 = !DILocation(line: 99, column: 64, scope: !7)
!108 = !DILocation(line: 99, column: 56, scope: !7)
!109 = !DILocation(line: 99, column: 4, scope: !7)
