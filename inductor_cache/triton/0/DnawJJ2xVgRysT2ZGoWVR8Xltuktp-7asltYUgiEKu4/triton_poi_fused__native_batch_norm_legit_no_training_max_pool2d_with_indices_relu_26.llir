; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %16 = icmp slt i32 %14, 256, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %17 = sdiv i32 %.frozen, 4, !dbg !15
  %18 = mul i32 %17, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %19 = srem i32 %15, 4, !dbg !16
  %20 = sdiv i32 %14, 16, !dbg !17
  %21 = srem i32 %20, 4, !dbg !18
  %22 = shl nsw i32 %.decomposed, 1, !dbg !19
  %23 = shl nsw i32 %19, 1, !dbg !19
  %24 = shl i32 %17, 4, !dbg !20
  %25 = add i32 %22, %24, !dbg !21
  %26 = add i32 %24, %23, !dbg !21
  %27 = sext i32 %25 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = sext i32 %26 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %16) #3, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %16) #3, !dbg !23
  %33 = or disjoint i32 %25, 1, !dbg !24
  %34 = or disjoint i32 %26, 1, !dbg !24
  %35 = sext i32 %33 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = sext i32 %34 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %16) #3, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %16) #3, !dbg !26
  %41 = add i32 %25, 8, !dbg !27
  %42 = add i32 %26, 8, !dbg !27
  %43 = sext i32 %41 to i64, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !28
  %45 = sext i32 %42 to i64, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !28
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %16) #3, !dbg !29
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %16) #3, !dbg !29
  %49 = add i32 %25, 9, !dbg !30
  %50 = add i32 %26, 9, !dbg !30
  %51 = sext i32 %49 to i64, !dbg !31
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !31
  %53 = sext i32 %50 to i64, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !31
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %16) #3, !dbg !32
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %16) #3, !dbg !32
  %57 = sext i32 %21 to i64, !dbg !33
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !33
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %16) #3, !dbg !34
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %16) #3, !dbg !34
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !35
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %16) #3, !dbg !36
  %63 = bitcast i32 %62 to float, !dbg !36
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %16) #3, !dbg !36
  %65 = bitcast i32 %64 to float, !dbg !36
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !37
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %16) #3, !dbg !38
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %16) #3, !dbg !38
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !39
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %16) #3, !dbg !40
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %16) #3, !dbg !40
  %72 = fadd float %63, 0x3EE4F8B580000000, !dbg !41
  %73 = fadd float %65, 0x3EE4F8B580000000, !dbg !41
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i = icmp eq i32 %74, 0, !dbg !42
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i = icmp eq i32 %75, 0, !dbg !42
  br i1 %.not.i, label %81, label %76, !dbg !42

76:                                               ; preds = %8
  br i1 %.not1.i, label %79, label %77, !dbg !42

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

81:                                               ; preds = %8
  br i1 %.not1.i, label %84, label %82, !dbg !42

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %77, %79, %82, %84
  %.0.i = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !42
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i1 = icmp eq i32 %86, 0, !dbg !42
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i4 = icmp eq i32 %87, 0, !dbg !42
  br i1 %.not.i1, label %93, label %88, !dbg !42

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !42

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %96, label %94, !dbg !42

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

__nv_sqrtf.exit5:                                 ; preds = %89, %91, %94, %96
  %.0.i3 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !42
  %98 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !26
  %99 = insertelement <2 x i32> %98, i32 %40, i64 1, !dbg !26
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !26
  %101 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !23
  %102 = insertelement <2 x i32> %101, i32 %32, i64 1, !dbg !23
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !23
  %104 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !29
  %105 = insertelement <2 x i32> %104, i32 %48, i64 1, !dbg !29
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !29
  %107 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !32
  %108 = insertelement <2 x i32> %107, i32 %56, i64 1, !dbg !32
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !32
  %110 = bitcast i32 %56 to float, !dbg !43
  %111 = fcmp uno float %110, 0.000000e+00, !dbg !43
  %112 = bitcast i32 %60 to float, !dbg !34
  %113 = bitcast i32 %55 to float, !dbg !43
  %114 = fcmp uno float %113, 0.000000e+00, !dbg !43
  %115 = bitcast i32 %59 to float, !dbg !34
  %116 = fcmp ogt <2 x float> %100, %103, !dbg !47
  %117 = fcmp uno <2 x float> %100, zeroinitializer, !dbg !48
  %118 = or <2 x i1> %116, %117, !dbg !50
  %.v = select <2 x i1> %118, <2 x i32> %99, <2 x i32> %102, !dbg !51
  %119 = bitcast <2 x i32> %.v to <2 x float>, !dbg !51
  %120 = fcmp olt <2 x float> %119, %106, !dbg !52
  %121 = fcmp uno <2 x float> %106, zeroinitializer, !dbg !53
  %122 = or <2 x i1> %121, %120, !dbg !55
  %.v6 = select <2 x i1> %122, <2 x i32> %105, <2 x i32> %.v, !dbg !56
  %123 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !56
  %124 = fcmp olt <2 x float> %123, %109, !dbg !57
  %125 = extractelement <2 x i1> %124, i64 1, !dbg !58
  %126 = or i1 %111, %125, !dbg !58
  %127 = extractelement <2 x float> %123, i64 1, !dbg !59
  %128 = select i1 %126, float %110, float %127, !dbg !59
  %129 = fsub float %128, %112, !dbg !60
  %130 = extractelement <2 x i1> %124, i64 0, !dbg !58
  %131 = or i1 %114, %130, !dbg !58
  %132 = extractelement <2 x float> %123, i64 0, !dbg !59
  %133 = select i1 %131, float %113, float %132, !dbg !59
  %134 = fsub float %133, %115, !dbg !60
  %135 = zext <2 x i1> %116 to <2 x i8>, !dbg !61
  %136 = select <2 x i1> %120, <2 x i8> splat (i8 2), <2 x i8> %135, !dbg !62
  %137 = select <2 x i1> %124, <2 x i8> splat (i8 3), <2 x i8> %136, !dbg !63
  %138 = bitcast i32 %71 to float, !dbg !40
  %139 = bitcast i32 %70 to float, !dbg !40
  %140 = bitcast i32 %68 to float, !dbg !38
  %141 = bitcast i32 %67 to float, !dbg !38
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !64
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !64
  %144 = fmul float %134, %142, !dbg !65
  %145 = fmul float %129, %143, !dbg !65
  %146 = fmul float %144, %141, !dbg !66
  %147 = fmul float %145, %140, !dbg !66
  %148 = fadd float %146, %139, !dbg !67
  %149 = fadd float %147, %138, !dbg !67
  %150 = fcmp olt float %148, 0.000000e+00, !dbg !68
  %151 = fcmp olt float %149, 0.000000e+00, !dbg !68
  %152 = select i1 %150, float 0.000000e+00, float %148, !dbg !70
  %153 = select i1 %151, float 0.000000e+00, float %149, !dbg !70
  %154 = sext i32 %14 to i64, !dbg !71
  %155 = getelementptr i8, ptr addrspace(1) %5, i64 %154, !dbg !71
  %156 = bitcast <2 x i8> %137 to i16, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %156, ptr addrspace(1) %155, i1 %16) #3, !dbg !72
  %157 = getelementptr float, ptr addrspace(1) %6, i64 %154, !dbg !73
  %158 = bitcast float %152 to i32, !dbg !74
  %159 = bitcast float %153 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %158, i32 %159, ptr addrspace(1) %157, i1 %16) #3, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwurtva3ahf2ctps7kdiawabx3lpmttpqywlztzptz7bl7vadaag.py", directory: "inductor_cache/wu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_26", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 28, column: 32, scope: !7)
!20 = !DILocation(line: 28, column: 40, scope: !7)
!21 = !DILocation(line: 28, column: 37, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 45, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 49, scope: !7)
!27 = !DILocation(line: 30, column: 41, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 49, scope: !7)
!30 = !DILocation(line: 31, column: 42, scope: !7)
!31 = !DILocation(line: 31, column: 31, scope: !7)
!32 = !DILocation(line: 31, column: 50, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 36, scope: !7)
!35 = !DILocation(line: 33, column: 31, scope: !7)
!36 = !DILocation(line: 33, column: 36, scope: !7)
!37 = !DILocation(line: 34, column: 31, scope: !7)
!38 = !DILocation(line: 34, column: 36, scope: !7)
!39 = !DILocation(line: 35, column: 31, scope: !7)
!40 = !DILocation(line: 35, column: 36, scope: !7)
!41 = !DILocation(line: 51, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 27, scope: !7)
!43 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 48, column: 42, scope: !7)
!47 = !DILocation(line: 36, column: 18, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !49)
!49 = !DILocation(line: 40, column: 40, scope: !7)
!50 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !49)
!51 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !49)
!52 = !DILocation(line: 41, column: 18, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !54)
!54 = !DILocation(line: 44, column: 41, scope: !7)
!55 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !54)
!56 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !54)
!57 = !DILocation(line: 45, column: 20, scope: !7)
!58 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !46)
!59 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!60 = !DILocation(line: 49, column: 20, scope: !7)
!61 = !DILocation(line: 39, column: 32, scope: !7)
!62 = !DILocation(line: 43, column: 33, scope: !7)
!63 = !DILocation(line: 47, column: 35, scope: !7)
!64 = !DILocation(line: 54, column: 20, scope: !7)
!65 = !DILocation(line: 57, column: 20, scope: !7)
!66 = !DILocation(line: 58, column: 20, scope: !7)
!67 = !DILocation(line: 59, column: 20, scope: !7)
!68 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !69)
!69 = !DILocation(line: 61, column: 42, scope: !7)
!70 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !69)
!71 = !DILocation(line: 62, column: 25, scope: !7)
!72 = !DILocation(line: 62, column: 37, scope: !7)
!73 = !DILocation(line: 63, column: 25, scope: !7)
!74 = !DILocation(line: 63, column: 37, scope: !7)
!75 = !DILocation(line: 63, column: 4, scope: !7)
