; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_clamp_div_maximum_minimum_mul_neg_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = icmp slt i32 %10, 256, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %13 = sdiv i32 %.frozen, 16, !dbg !15
  %14 = mul i32 %13, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %15 = srem i32 %11, 16, !dbg !16
  %16 = sext i32 %10 to i64, !dbg !17
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !17
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %17, i1 %12) #1, !dbg !18
  %19 = extractvalue { i32, i32 } %18, 0, !dbg !18
  %20 = extractvalue { i32, i32 } %18, 1, !dbg !18
  %21 = bitcast i32 %19 to float, !dbg !18
  %22 = bitcast i32 %20 to float, !dbg !18
  %23 = shl nsw i32 %13, 2, !dbg !19
  %24 = sext i32 %23 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 %12, i32 0, i1 %12) #1, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 %12, i32 0, i1 %12) #1, !dbg !21
  %28 = or disjoint i32 %23, 1, !dbg !22
  %29 = sext i32 %28 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %12, i32 0, i1 %12) #1, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %12, i32 0, i1 %12) #1, !dbg !24
  %33 = shl nsw i32 %.decomposed, 2, !dbg !25
  %34 = shl nsw i32 %15, 2, !dbg !25
  %35 = sext i32 %33 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !26
  %37 = sext i32 %34 to i64, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %12, i32 0, i1 %12) #1, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %12, i32 0, i1 %12) #1, !dbg !27
  %41 = or disjoint i32 %33, 1, !dbg !28
  %42 = or disjoint i32 %34, 1, !dbg !28
  %43 = sext i32 %41 to i64, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !29
  %45 = sext i32 %42 to i64, !dbg !29
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !29
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %12, i32 0, i1 %12) #1, !dbg !30
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %12, i32 0, i1 %12) #1, !dbg !30
  %49 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !21
  %50 = insertelement <2 x i32> %49, i32 %26, i64 1, !dbg !21
  %51 = bitcast <2 x i32> %50 to <2 x float>, !dbg !21
  %52 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !24
  %53 = insertelement <2 x i32> %52, i32 %31, i64 1, !dbg !24
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !24
  %55 = fmul <2 x float> %54, splat (float 5.000000e-01), !dbg !31
  %56 = fadd <2 x float> %55, %51, !dbg !32
  %57 = fsub <2 x float> %51, %55, !dbg !33
  %58 = fsub <2 x float> %56, %57, !dbg !34
  %59 = extractelement <2 x float> %58, i64 1, !dbg !34
  %60 = fsub <2 x float> %56, %57, !dbg !34
  %61 = extractelement <2 x float> %60, i64 0, !dbg !34
  %62 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !27
  %63 = insertelement <2 x i32> %62, i32 %39, i64 1, !dbg !27
  %64 = bitcast <2 x i32> %63 to <2 x float>, !dbg !27
  %65 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !30
  %66 = insertelement <2 x i32> %65, i32 %47, i64 1, !dbg !30
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !30
  %68 = fmul <2 x float> %67, splat (float 5.000000e-01), !dbg !35
  %69 = fadd <2 x float> %68, %64, !dbg !36
  %70 = shufflevector <2 x float> %69, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !36
  %71 = fsub <2 x float> %64, %68, !dbg !37
  %72 = shufflevector <2 x float> %71, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !37
  %73 = fsub <4 x float> %70, %72, !dbg !38
  %74 = extractelement <4 x float> %73, i64 1, !dbg !38
  %75 = fsub <4 x float> %70, %72, !dbg !38
  %76 = extractelement <4 x float> %75, i64 0, !dbg !38
  %77 = fadd float %59, %74, !dbg !39
  %78 = fadd float %61, %76, !dbg !39
  %79 = fcmp uno <2 x float> %56, zeroinitializer, !dbg !40
  %80 = shufflevector <2 x i1> %79, <2 x i1> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !40
  %81 = fcmp uno <2 x float> %57, zeroinitializer, !dbg !44
  %82 = shufflevector <2 x i1> %81, <2 x i1> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !44
  %83 = shufflevector <2 x float> %56, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !46
  %84 = shufflevector <2 x float> %56, <2 x float> %69, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !46
  %85 = shufflevector <2 x float> %56, <2 x float> %69, <4 x i32> <i32 2, i32 3, i32 0, i32 1>, !dbg !46
  %86 = fcmp ogt <4 x float> %84, %85, !dbg !46
  %87 = or <4 x i1> %80, %86, !dbg !48
  %88 = select <4 x i1> %87, <4 x float> %83, <4 x float> %70, !dbg !49
  %89 = shufflevector <2 x float> %57, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !50
  %90 = shufflevector <2 x float> %57, <2 x float> %71, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !50
  %91 = shufflevector <2 x float> %57, <2 x float> %71, <4 x i32> <i32 2, i32 3, i32 0, i32 1>, !dbg !50
  %92 = fcmp olt <4 x float> %90, %91, !dbg !50
  %93 = or <4 x i1> %82, %92, !dbg !52
  %94 = select <4 x i1> %93, <4 x float> %89, <4 x float> %72, !dbg !53
  %95 = fsub <4 x float> %88, %94, !dbg !54
  %96 = fcmp ole <4 x float> %95, zeroinitializer, !dbg !55
  %97 = extractelement <4 x i1> %96, i64 3, !dbg !57
  %98 = extractelement <4 x float> %95, i64 3, !dbg !57
  %99 = select i1 %97, float 0.000000e+00, float %98, !dbg !57
  %100 = extractelement <4 x i1> %96, i64 2, !dbg !57
  %101 = extractelement <4 x float> %95, i64 2, !dbg !57
  %102 = select i1 %100, float 0.000000e+00, float %101, !dbg !57
  %103 = fsub float %77, %99, !dbg !59
  %104 = fsub float %78, %102, !dbg !59
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float %103) #1, !dbg !60
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %104) #1, !dbg !60
  %107 = extractelement <4 x i1> %96, i64 1, !dbg !55
  %108 = extractelement <4 x float> %95, i64 1, !dbg !55
  %109 = select i1 %107, float 0.000000e+00, float %108, !dbg !55
  %110 = extractelement <4 x i1> %96, i64 0, !dbg !55
  %111 = extractelement <4 x float> %95, i64 0, !dbg !55
  %112 = select i1 %110, float 0.000000e+00, float %111, !dbg !55
  %113 = fsub float %109, %103, !dbg !61
  %114 = fsub float %112, %104, !dbg !61
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float %109) #1, !dbg !62
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float %112) #1, !dbg !62
  %117 = fsub float %115, %105, !dbg !63
  %118 = fadd float %117, 0.000000e+00, !dbg !63
  %119 = fsub float %116, %106, !dbg !63
  %120 = fadd float %119, 0.000000e+00, !dbg !63
  %121 = fadd float %118, %21, !dbg !64
  %122 = fadd float %120, %22, !dbg !64
  %123 = bitcast float %121 to i32, !dbg !65
  %124 = bitcast float %122 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %123, i32 %124, ptr addrspace(1) %17, i1 %12) #1, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceotr6ywccnluilnldvb7ecuepnf4hhl4vk2jrrkrgbc2rorobwl.py", directory: "inductor_cache/eo")
!4 = !{ptr @triton_poi_fused_add_clamp_div_maximum_minimum_mul_neg_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_clamp_div_maximum_minimum_mul_neg_sub_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_clamp_div_maximum_minimum_mul_neg_sub_1", linkageName: "triton_poi_fused_add_clamp_div_maximum_minimum_mul_neg_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 40, scope: !7)
!19 = !DILocation(line: 42, column: 33, scope: !7)
!20 = !DILocation(line: 42, column: 31, scope: !7)
!21 = !DILocation(line: 42, column: 38, scope: !7)
!22 = !DILocation(line: 43, column: 35, scope: !7)
!23 = !DILocation(line: 43, column: 31, scope: !7)
!24 = !DILocation(line: 43, column: 42, scope: !7)
!25 = !DILocation(line: 76, column: 33, scope: !7)
!26 = !DILocation(line: 76, column: 31, scope: !7)
!27 = !DILocation(line: 76, column: 38, scope: !7)
!28 = !DILocation(line: 77, column: 35, scope: !7)
!29 = !DILocation(line: 77, column: 31, scope: !7)
!30 = !DILocation(line: 77, column: 42, scope: !7)
!31 = !DILocation(line: 45, column: 20, scope: !7)
!32 = !DILocation(line: 46, column: 20, scope: !7)
!33 = !DILocation(line: 56, column: 20, scope: !7)
!34 = !DILocation(line: 69, column: 20, scope: !7)
!35 = !DILocation(line: 78, column: 20, scope: !7)
!36 = !DILocation(line: 79, column: 20, scope: !7)
!37 = !DILocation(line: 86, column: 20, scope: !7)
!38 = !DILocation(line: 96, column: 20, scope: !7)
!39 = !DILocation(line: 97, column: 20, scope: !7)
!40 = !DILocation(line: 112, column: 21, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 98, column: 42, scope: !7)
!44 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !45)
!45 = !DILocation(line: 99, column: 42, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !47)
!47 = !DILocation(line: 101, column: 42, scope: !7)
!48 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !47)
!49 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !47)
!50 = !DILocation(line: 110, column: 15, scope: !41, inlinedAt: !51)
!51 = !DILocation(line: 102, column: 42, scope: !7)
!52 = !DILocation(line: 112, column: 16, scope: !41, inlinedAt: !51)
!53 = !DILocation(line: 113, column: 29, scope: !41, inlinedAt: !51)
!54 = !DILocation(line: 103, column: 20, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !56)
!56 = !DILocation(line: 110, column: 42, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !58)
!58 = !DILocation(line: 107, column: 42, scope: !7)
!59 = !DILocation(line: 108, column: 20, scope: !7)
!60 = !DILocation(line: 109, column: 20, scope: !7)
!61 = !DILocation(line: 111, column: 20, scope: !7)
!62 = !DILocation(line: 112, column: 20, scope: !7)
!63 = !DILocation(line: 114, column: 13, scope: !7)
!64 = !DILocation(line: 116, column: 20, scope: !7)
!65 = !DILocation(line: 117, column: 40, scope: !7)
!66 = !DILocation(line: 117, column: 4, scope: !7)
