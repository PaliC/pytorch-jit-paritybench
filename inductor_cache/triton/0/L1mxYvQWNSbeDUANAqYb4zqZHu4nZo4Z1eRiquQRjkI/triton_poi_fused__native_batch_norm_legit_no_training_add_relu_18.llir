; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = and i32 %13, 127, !dbg !12
  %17 = or disjoint i32 %16, 128, !dbg !12
  %18 = or disjoint i32 %16, 256, !dbg !12
  %19 = or disjoint i32 %16, 384, !dbg !12
  %20 = or disjoint i32 %12, %15, !dbg !13
  %21 = or disjoint i32 %12, %16, !dbg !13
  %22 = or disjoint i32 %12, %17, !dbg !13
  %23 = or disjoint i32 %12, %18, !dbg !13
  %24 = or disjoint i32 %12, %19, !dbg !13
  %25 = icmp slt i32 %20, 512, !dbg !14
  %26 = icmp slt i32 %21, 512, !dbg !14
  %27 = icmp slt i32 %22, 512, !dbg !14
  %28 = icmp slt i32 %23, 512, !dbg !14
  %29 = icmp slt i32 %24, 512, !dbg !14
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %31 = shl i32 %30, 1, !dbg !16
  %32 = or disjoint i32 %31, 1, !dbg !17
  %33 = icmp slt i32 %31, 1024, !dbg !18
  %34 = icmp slt i32 %32, 1024, !dbg !18
  %.frozen = freeze i32 %20, !dbg !19
  %35 = sdiv i32 %.frozen, 128, !dbg !19
  %36 = mul i32 %35, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %36, !dbg !20
  %.frozen30 = freeze i32 %21, !dbg !19
  %37 = sdiv i32 %.frozen30, 128, !dbg !19
  %38 = mul i32 %37, 128, !dbg !20
  %.decomposed31 = sub i32 %.frozen30, %38, !dbg !20
  %.frozen32 = freeze i32 %22, !dbg !19
  %39 = sdiv i32 %.frozen32, 128, !dbg !19
  %40 = mul i32 %39, 128, !dbg !20
  %.decomposed33 = sub i32 %.frozen32, %40, !dbg !20
  %.frozen34 = freeze i32 %23, !dbg !19
  %41 = sdiv i32 %.frozen34, 128, !dbg !19
  %42 = mul i32 %41, 128, !dbg !20
  %.decomposed35 = sub i32 %.frozen34, %42, !dbg !20
  %.frozen36 = freeze i32 %24, !dbg !19
  %43 = sdiv i32 %.frozen36, 128, !dbg !19
  %44 = mul i32 %43, 128, !dbg !20
  %.decomposed37 = sub i32 %.frozen36, %44, !dbg !20
  %45 = shl i32 %30, 8, !dbg !21
  %46 = shl i32 %32, 7, !dbg !21
  %47 = shl i32 %35, 17, !dbg !22
  %48 = add i32 %47, %.decomposed, !dbg !23
  %49 = add i32 %48, %45, !dbg !24
  %50 = add i32 %48, %46, !dbg !24
  %51 = sext i32 %49 to i64, !dbg !25
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !25
  %53 = sext i32 %50 to i64, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !25
  %55 = and i1 %33, %25, !dbg !26
  %56 = and i1 %25, %34, !dbg !26
  %57 = and i1 %33, %26, !dbg !26
  %58 = and i1 %33, %27, !dbg !26
  %59 = and i1 %33, %28, !dbg !26
  %60 = and i1 %33, %29, !dbg !26
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %55) #4, !dbg !27
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %56) #4, !dbg !27
  %63 = sext i32 %.decomposed to i64, !dbg !28
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !28
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %25) #4, !dbg !29
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !30
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %25) #4, !dbg !31
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !31
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !31
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !31
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !31
  %72 = bitcast i32 %68 to float, !dbg !31
  %73 = bitcast i32 %69 to float, !dbg !31
  %74 = bitcast i32 %70 to float, !dbg !31
  %75 = bitcast i32 %71 to float, !dbg !31
  %76 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !32
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %25) #4, !dbg !33
  %78 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !34
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 %25) #4, !dbg !35
  %80 = add i32 %31, 393216, !dbg !36
  %81 = shl nsw i32 %.decomposed31, 10, !dbg !37
  %82 = shl nsw i32 %.decomposed33, 10, !dbg !37
  %83 = shl nsw i32 %.decomposed35, 10, !dbg !37
  %84 = shl nsw i32 %.decomposed37, 10, !dbg !37
  %85 = shl i32 %37, 19, !dbg !38
  %86 = shl i32 %39, 19, !dbg !38
  %87 = shl i32 %41, 19, !dbg !38
  %88 = shl i32 %43, 19, !dbg !38
  %89 = add i32 %85, %81, !dbg !39
  %90 = add i32 %89, %80, !dbg !40
  %91 = add i32 %86, %82, !dbg !39
  %92 = add i32 %91, %80, !dbg !40
  %93 = add i32 %87, %83, !dbg !39
  %94 = add i32 %93, %80, !dbg !40
  %95 = add i32 %88, %84, !dbg !39
  %96 = add i32 %95, %80, !dbg !40
  %97 = sext i32 %90 to i64, !dbg !41
  %98 = getelementptr float, ptr addrspace(1) %5, i64 %97, !dbg !41
  %99 = sext i32 %92 to i64, !dbg !41
  %100 = getelementptr float, ptr addrspace(1) %5, i64 %99, !dbg !41
  %101 = sext i32 %94 to i64, !dbg !41
  %102 = getelementptr float, ptr addrspace(1) %5, i64 %101, !dbg !41
  %103 = sext i32 %96 to i64, !dbg !41
  %104 = getelementptr float, ptr addrspace(1) %5, i64 %103, !dbg !41
  %105 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %98, i1 %57) #4, !dbg !42
  %106 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %100, i1 %58) #4, !dbg !42
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %102, i1 %59) #4, !dbg !42
  %108 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %104, i1 %60) #4, !dbg !42
  %109 = fadd float %72, 0x3EE4F8B580000000, !dbg !43
  %110 = fadd float %73, 0x3EE4F8B580000000, !dbg !43
  %111 = fadd float %74, 0x3EE4F8B580000000, !dbg !43
  %112 = fadd float %75, 0x3EE4F8B580000000, !dbg !43
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i = icmp eq i32 %113, 0, !dbg !44
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i = icmp eq i32 %114, 0, !dbg !44
  br i1 %.not.i, label %120, label %115, !dbg !44

115:                                              ; preds = %10
  br i1 %.not1.i, label %118, label %116, !dbg !44

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

120:                                              ; preds = %10
  br i1 %.not1.i, label %123, label %121, !dbg !44

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %116, %118, %121, %123
  %.0.i = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !44
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i15 = icmp eq i32 %125, 0, !dbg !44
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i18 = icmp eq i32 %126, 0, !dbg !44
  br i1 %.not.i15, label %132, label %127, !dbg !44

127:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %130, label %128, !dbg !44

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #4, !dbg !44
  br label %__nv_sqrtf.exit19, !dbg !44

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #4, !dbg !44
  br label %__nv_sqrtf.exit19, !dbg !44

132:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %135, label %133, !dbg !44

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #4, !dbg !44
  br label %__nv_sqrtf.exit19, !dbg !44

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #4, !dbg !44
  br label %__nv_sqrtf.exit19, !dbg !44

__nv_sqrtf.exit19:                                ; preds = %128, %130, %133, %135
  %.0.i17 = phi float [ %129, %128 ], [ %131, %130 ], [ %134, %133 ], [ %136, %135 ], !dbg !44
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i20 = icmp eq i32 %137, 0, !dbg !44
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i23 = icmp eq i32 %138, 0, !dbg !44
  br i1 %.not.i20, label %144, label %139, !dbg !44

139:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %142, label %140, !dbg !44

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %111) #4, !dbg !44
  br label %__nv_sqrtf.exit24, !dbg !44

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %111) #4, !dbg !44
  br label %__nv_sqrtf.exit24, !dbg !44

144:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %147, label %145, !dbg !44

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.f(float %111) #4, !dbg !44
  br label %__nv_sqrtf.exit24, !dbg !44

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.f(float %111) #4, !dbg !44
  br label %__nv_sqrtf.exit24, !dbg !44

__nv_sqrtf.exit24:                                ; preds = %140, %142, %145, %147
  %.0.i22 = phi float [ %141, %140 ], [ %143, %142 ], [ %146, %145 ], [ %148, %147 ], !dbg !44
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i25 = icmp eq i32 %149, 0, !dbg !44
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i28 = icmp eq i32 %150, 0, !dbg !44
  br i1 %.not.i25, label %156, label %151, !dbg !44

151:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %154, label %152, !dbg !44

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #4, !dbg !44
  br label %__nv_sqrtf.exit29, !dbg !44

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #4, !dbg !44
  br label %__nv_sqrtf.exit29, !dbg !44

156:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %159, label %157, !dbg !44

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #4, !dbg !44
  br label %__nv_sqrtf.exit29, !dbg !44

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #4, !dbg !44
  br label %__nv_sqrtf.exit29, !dbg !44

__nv_sqrtf.exit29:                                ; preds = %152, %154, %157, %159
  %.0.i27 = phi float [ %153, %152 ], [ %155, %154 ], [ %158, %157 ], [ %160, %159 ], !dbg !44
  %161 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !27
  %162 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !29
  %163 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !27
  %164 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !29
  %165 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !27
  %166 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !29
  %167 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !27
  %168 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !29
  %169 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !27
  %170 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !27
  %171 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !27
  %172 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !27
  %173 = extractvalue { i32, i32 } %108, 1, !dbg !42
  %174 = bitcast i32 %173 to float, !dbg !42
  %175 = extractvalue { i32, i32 } %108, 0, !dbg !42
  %176 = bitcast i32 %175 to float, !dbg !42
  %177 = extractvalue { i32, i32 } %107, 1, !dbg !42
  %178 = bitcast i32 %177 to float, !dbg !42
  %179 = extractvalue { i32, i32 } %107, 0, !dbg !42
  %180 = bitcast i32 %179 to float, !dbg !42
  %181 = extractvalue { i32, i32 } %106, 1, !dbg !42
  %182 = bitcast i32 %181 to float, !dbg !42
  %183 = extractvalue { i32, i32 } %106, 0, !dbg !42
  %184 = bitcast i32 %183 to float, !dbg !42
  %185 = extractvalue { i32, i32 } %105, 1, !dbg !42
  %186 = bitcast i32 %185 to float, !dbg !42
  %187 = extractvalue { i32, i32 } %105, 0, !dbg !42
  %188 = bitcast i32 %187 to float, !dbg !42
  %189 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !35
  %190 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !35
  %191 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !35
  %192 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !35
  %193 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !33
  %194 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !33
  %195 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !33
  %196 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !33
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !45
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !45
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !45
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !45
  %201 = insertelement <4 x i32> poison, i32 %162, i64 0, !dbg !29
  %202 = insertelement <4 x i32> %201, i32 %164, i64 1, !dbg !29
  %203 = insertelement <4 x i32> %202, i32 %166, i64 2, !dbg !29
  %204 = insertelement <4 x i32> %203, i32 %168, i64 3, !dbg !29
  %205 = bitcast <4 x i32> %204 to <4 x float>, !dbg !29
  %206 = shufflevector <4 x float> %205, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %207 = insertelement <8 x i32> poison, i32 %161, i64 0, !dbg !27
  %208 = insertelement <8 x i32> %207, i32 %163, i64 1, !dbg !27
  %209 = insertelement <8 x i32> %208, i32 %165, i64 2, !dbg !27
  %210 = insertelement <8 x i32> %209, i32 %167, i64 3, !dbg !27
  %211 = insertelement <8 x i32> %210, i32 %169, i64 4, !dbg !27
  %212 = insertelement <8 x i32> %211, i32 %170, i64 5, !dbg !27
  %213 = insertelement <8 x i32> %212, i32 %171, i64 6, !dbg !27
  %214 = insertelement <8 x i32> %213, i32 %172, i64 7, !dbg !27
  %215 = bitcast <8 x i32> %214 to <8 x float>, !dbg !27
  %216 = fsub <8 x float> %215, %206, !dbg !46
  %217 = insertelement <4 x i32> poison, i32 %189, i64 0, !dbg !35
  %218 = insertelement <4 x i32> %217, i32 %190, i64 1, !dbg !35
  %219 = insertelement <4 x i32> %218, i32 %191, i64 2, !dbg !35
  %220 = insertelement <4 x i32> %219, i32 %192, i64 3, !dbg !35
  %221 = bitcast <4 x i32> %220 to <4 x float>, !dbg !35
  %222 = shufflevector <4 x float> %221, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !35
  %223 = insertelement <4 x i32> poison, i32 %193, i64 0, !dbg !33
  %224 = insertelement <4 x i32> %223, i32 %194, i64 1, !dbg !33
  %225 = insertelement <4 x i32> %224, i32 %195, i64 2, !dbg !33
  %226 = insertelement <4 x i32> %225, i32 %196, i64 3, !dbg !33
  %227 = bitcast <4 x i32> %226 to <4 x float>, !dbg !33
  %228 = shufflevector <4 x float> %227, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %229 = insertelement <8 x float> poison, float %200, i64 0, !dbg !47
  %230 = insertelement <8 x float> %229, float %199, i64 1, !dbg !47
  %231 = insertelement <8 x float> %230, float %198, i64 2, !dbg !47
  %232 = insertelement <8 x float> %231, float %197, i64 3, !dbg !47
  %233 = shufflevector <8 x float> %232, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !47
  %234 = fmul <8 x float> %216, %233, !dbg !47
  %235 = fmul <8 x float> %234, %228, !dbg !48
  %236 = fadd <8 x float> %235, %222, !dbg !49
  %237 = fcmp olt <8 x float> %236, zeroinitializer, !dbg !50
  %238 = extractelement <8 x i1> %237, i64 7, !dbg !54
  %239 = extractelement <8 x float> %236, i64 7, !dbg !54
  %240 = select i1 %238, float 0.000000e+00, float %239, !dbg !54
  %241 = extractelement <8 x i1> %237, i64 6, !dbg !54
  %242 = extractelement <8 x float> %236, i64 6, !dbg !54
  %243 = select i1 %241, float 0.000000e+00, float %242, !dbg !54
  %244 = extractelement <8 x i1> %237, i64 5, !dbg !54
  %245 = extractelement <8 x float> %236, i64 5, !dbg !54
  %246 = select i1 %244, float 0.000000e+00, float %245, !dbg !54
  %247 = extractelement <8 x i1> %237, i64 4, !dbg !54
  %248 = extractelement <8 x float> %236, i64 4, !dbg !54
  %249 = select i1 %247, float 0.000000e+00, float %248, !dbg !54
  %250 = extractelement <8 x i1> %237, i64 3, !dbg !54
  %251 = extractelement <8 x float> %236, i64 3, !dbg !54
  %252 = select i1 %250, float 0.000000e+00, float %251, !dbg !54
  %253 = extractelement <8 x i1> %237, i64 2, !dbg !54
  %254 = extractelement <8 x float> %236, i64 2, !dbg !54
  %255 = select i1 %253, float 0.000000e+00, float %254, !dbg !54
  %256 = extractelement <8 x i1> %237, i64 1, !dbg !54
  %257 = extractelement <8 x float> %236, i64 1, !dbg !54
  %258 = select i1 %256, float 0.000000e+00, float %257, !dbg !54
  %259 = extractelement <8 x i1> %237, i64 0, !dbg !54
  %260 = extractelement <8 x float> %236, i64 0, !dbg !54
  %261 = select i1 %259, float 0.000000e+00, float %260, !dbg !54
  %262 = shl i32 %13, 3, !dbg !54
  %263 = and i32 %262, 1016, !dbg !54
  %264 = shl i32 %13, 1, !dbg !54
  %265 = and i32 %264, 254, !dbg !54
  %266 = lshr exact i32 %263, 1, !dbg !54
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %266, !dbg !54
  %268 = getelementptr inbounds float, ptr addrspace(3) %267, i32 %263, !dbg !54
  %269 = bitcast float %240 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #4, !dbg !54
  %270 = or disjoint i32 %263, 2, !dbg !54
  %271 = lshr exact i32 %270, 1, !dbg !54
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %271, !dbg !54
  %273 = getelementptr inbounds float, ptr addrspace(3) %272, i32 %270, !dbg !54
  %274 = bitcast float %243 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #4, !dbg !54
  %275 = or disjoint i32 %263, 4, !dbg !54
  %276 = lshr exact i32 %275, 1, !dbg !54
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %276, !dbg !54
  %278 = getelementptr inbounds float, ptr addrspace(3) %277, i32 %275, !dbg !54
  %279 = bitcast float %246 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 true) #4, !dbg !54
  %280 = or disjoint i32 %263, 6, !dbg !54
  %281 = lshr exact i32 %280, 1, !dbg !54
  %282 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %281, !dbg !54
  %283 = getelementptr inbounds float, ptr addrspace(3) %282, i32 %280, !dbg !54
  %284 = bitcast float %249 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %284, i1 true) #4, !dbg !54
  %285 = or disjoint i32 %263, 1, !dbg !54
  %286 = getelementptr inbounds float, ptr addrspace(3) %267, i32 %285, !dbg !54
  %287 = bitcast float %252 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #4, !dbg !54
  %288 = or disjoint i32 %263, 3, !dbg !54
  %289 = lshr i32 %288, 1, !dbg !54
  %290 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %289, !dbg !54
  %291 = getelementptr inbounds float, ptr addrspace(3) %290, i32 %288, !dbg !54
  %292 = bitcast float %255 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %292, i1 true) #4, !dbg !54
  %293 = or disjoint i32 %263, 5, !dbg !54
  %294 = lshr i32 %293, 1, !dbg !54
  %295 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %294, !dbg !54
  %296 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %293, !dbg !54
  %297 = bitcast float %258 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %297, i1 true) #4, !dbg !54
  %298 = or disjoint i32 %263, 7, !dbg !54
  %299 = lshr i32 %298, 1, !dbg !54
  %300 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %299, !dbg !54
  %301 = getelementptr inbounds float, ptr addrspace(3) %300, i32 %298, !dbg !54
  %302 = bitcast float %261 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %302, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %303 = lshr exact i32 %265, 1, !dbg !54
  %304 = getelementptr float, ptr addrspace(3) @global_smem, i32 %303, !dbg !54
  %305 = getelementptr float, ptr addrspace(3) %304, i32 %265, !dbg !54
  %306 = load float, ptr addrspace(3) %305, align 4, !dbg !54
  %307 = or disjoint i32 %265, 1, !dbg !54
  %308 = getelementptr float, ptr addrspace(3) %304, i32 %307, !dbg !54
  %309 = load float, ptr addrspace(3) %308, align 4, !dbg !54
  %310 = or disjoint i32 %265, 256, !dbg !54
  %311 = lshr exact i32 %310, 1, !dbg !54
  %312 = getelementptr float, ptr addrspace(3) @global_smem, i32 %311, !dbg !54
  %313 = getelementptr float, ptr addrspace(3) %312, i32 %310, !dbg !54
  %314 = load float, ptr addrspace(3) %313, align 4, !dbg !54
  %315 = or disjoint i32 %265, 257, !dbg !54
  %316 = lshr i32 %315, 1, !dbg !54
  %317 = getelementptr float, ptr addrspace(3) @global_smem, i32 %316, !dbg !54
  %318 = getelementptr float, ptr addrspace(3) %317, i32 %315, !dbg !54
  %319 = load float, ptr addrspace(3) %318, align 4, !dbg !54
  %320 = or disjoint i32 %265, 512, !dbg !54
  %321 = lshr exact i32 %320, 1, !dbg !54
  %322 = getelementptr float, ptr addrspace(3) @global_smem, i32 %321, !dbg !54
  %323 = getelementptr float, ptr addrspace(3) %322, i32 %320, !dbg !54
  %324 = load float, ptr addrspace(3) %323, align 4, !dbg !54
  %325 = or disjoint i32 %265, 513, !dbg !54
  %326 = lshr i32 %325, 1, !dbg !54
  %327 = getelementptr float, ptr addrspace(3) @global_smem, i32 %326, !dbg !54
  %328 = getelementptr float, ptr addrspace(3) %327, i32 %325, !dbg !54
  %329 = load float, ptr addrspace(3) %328, align 4, !dbg !54
  %330 = or disjoint i32 %265, 768, !dbg !54
  %331 = lshr exact i32 %330, 1, !dbg !54
  %332 = getelementptr float, ptr addrspace(3) @global_smem, i32 %331, !dbg !54
  %333 = getelementptr float, ptr addrspace(3) %332, i32 %330, !dbg !54
  %334 = load float, ptr addrspace(3) %333, align 4, !dbg !54
  %335 = or disjoint i32 %265, 769, !dbg !54
  %336 = lshr i32 %335, 1, !dbg !54
  %337 = getelementptr float, ptr addrspace(3) @global_smem, i32 %336, !dbg !54
  %338 = getelementptr float, ptr addrspace(3) %337, i32 %335, !dbg !54
  %339 = load float, ptr addrspace(3) %338, align 4, !dbg !54
  %340 = fadd float %306, %188, !dbg !55
  %341 = fadd float %309, %186, !dbg !55
  %342 = fadd float %314, %184, !dbg !55
  %343 = fadd float %319, %182, !dbg !55
  %344 = fadd float %324, %180, !dbg !55
  %345 = fadd float %329, %178, !dbg !55
  %346 = fadd float %334, %176, !dbg !55
  %347 = fadd float %339, %174, !dbg !55
  %348 = add i32 %89, %31, !dbg !56
  %349 = add i32 %91, %31, !dbg !56
  %350 = add i32 %93, %31, !dbg !56
  %351 = add i32 %95, %31, !dbg !56
  %352 = sext i32 %348 to i64, !dbg !57
  %353 = getelementptr float, ptr addrspace(1) %6, i64 %352, !dbg !57
  %354 = sext i32 %349 to i64, !dbg !57
  %355 = getelementptr float, ptr addrspace(1) %6, i64 %354, !dbg !57
  %356 = sext i32 %350 to i64, !dbg !57
  %357 = getelementptr float, ptr addrspace(1) %6, i64 %356, !dbg !57
  %358 = sext i32 %351 to i64, !dbg !57
  %359 = getelementptr float, ptr addrspace(1) %6, i64 %358, !dbg !57
  %360 = bitcast float %306 to i32, !dbg !58
  %361 = bitcast float %309 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %360, i32 %361, ptr addrspace(1) %353, i1 %57) #4, !dbg !58
  %362 = bitcast float %314 to i32, !dbg !58
  %363 = bitcast float %319 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %362, i32 %363, ptr addrspace(1) %355, i1 %58) #4, !dbg !58
  %364 = bitcast float %324 to i32, !dbg !58
  %365 = bitcast float %329 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %364, i32 %365, ptr addrspace(1) %357, i1 %59) #4, !dbg !58
  %366 = bitcast float %334 to i32, !dbg !58
  %367 = bitcast float %339 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %366, i32 %367, ptr addrspace(1) %359, i1 %60) #4, !dbg !58
  %368 = getelementptr float, ptr addrspace(1) %7, i64 %51, !dbg !59
  %369 = getelementptr float, ptr addrspace(1) %7, i64 %53, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %370 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !60
  %371 = bitcast float %340 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %370, <1 x i32> %371, i1 true) #4, !dbg !60
  %372 = getelementptr inbounds i8, ptr addrspace(3) %370, i32 2064, !dbg !60
  %373 = bitcast float %341 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %372, <1 x i32> %373, i1 true) #4, !dbg !60
  %374 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !60
  %375 = bitcast float %342 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %375, i1 true) #4, !dbg !60
  %376 = getelementptr inbounds i8, ptr addrspace(3) %370, i32 2576, !dbg !60
  %377 = bitcast float %343 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %376, <1 x i32> %377, i1 true) #4, !dbg !60
  %378 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !60
  %379 = bitcast float %344 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %378, <1 x i32> %379, i1 true) #4, !dbg !60
  %380 = getelementptr inbounds i8, ptr addrspace(3) %370, i32 3088, !dbg !60
  %381 = bitcast float %345 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %380, <1 x i32> %381, i1 true) #4, !dbg !60
  %382 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !60
  %383 = bitcast float %346 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %382, <1 x i32> %383, i1 true) #4, !dbg !60
  %384 = getelementptr inbounds i8, ptr addrspace(3) %370, i32 3600, !dbg !60
  %385 = bitcast float %347 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %385, i1 true) #4, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %386 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !60
  %387 = getelementptr inbounds i8, ptr addrspace(3) %386, i32 2064, !dbg !60
  %388 = load <4 x i32>, ptr addrspace(3) %387, align 16, !dbg !60
  %.extract = load i32, ptr addrspace(3) %386, align 16, !dbg !60
  %389 = getelementptr inbounds i8, ptr addrspace(3) %386, i32 4, !dbg !60
  %.extract8 = load i32, ptr addrspace(3) %389, align 4, !dbg !60
  %390 = getelementptr inbounds i8, ptr addrspace(3) %386, i32 8, !dbg !60
  %.extract9 = load i32, ptr addrspace(3) %390, align 8, !dbg !60
  %391 = getelementptr inbounds i8, ptr addrspace(3) %386, i32 12, !dbg !60
  %.extract10 = load i32, ptr addrspace(3) %391, align 4, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %368, i1 %55) #4, !dbg !60
  %.extract11 = extractelement <4 x i32> %388, i64 0, !dbg !60
  %.extract12 = extractelement <4 x i32> %388, i64 1, !dbg !60
  %.extract13 = extractelement <4 x i32> %388, i64 2, !dbg !60
  %.extract14 = extractelement <4 x i32> %388, i64 3, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %369, i1 %56) #4, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chsgn3reykqdsxbheday3knosd4f7gsrowjennlh7f5m5rkw6wdl.py", directory: "inductor_cache/hs")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_18", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 39, scope: !7)
!22 = !DILocation(line: 31, column: 51, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 44, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 64, scope: !7)
!27 = !DILocation(line: 31, column: 56, scope: !7)
!28 = !DILocation(line: 32, column: 30, scope: !7)
!29 = !DILocation(line: 32, column: 35, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 35, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 40, scope: !7)
!37 = !DILocation(line: 36, column: 50, scope: !7)
!38 = !DILocation(line: 36, column: 62, scope: !7)
!39 = !DILocation(line: 36, column: 45, scope: !7)
!40 = !DILocation(line: 36, column: 55, scope: !7)
!41 = !DILocation(line: 36, column: 31, scope: !7)
!42 = !DILocation(line: 36, column: 67, scope: !7)
!43 = !DILocation(line: 39, column: 18, scope: !7)
!44 = !DILocation(line: 40, column: 26, scope: !7)
!45 = !DILocation(line: 42, column: 18, scope: !7)
!46 = !DILocation(line: 37, column: 18, scope: !7)
!47 = !DILocation(line: 45, column: 19, scope: !7)
!48 = !DILocation(line: 46, column: 20, scope: !7)
!49 = !DILocation(line: 47, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 49, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 50, column: 20, scope: !7)
!56 = !DILocation(line: 51, column: 40, scope: !7)
!57 = !DILocation(line: 51, column: 25, scope: !7)
!58 = !DILocation(line: 51, column: 59, scope: !7)
!59 = !DILocation(line: 52, column: 25, scope: !7)
!60 = !DILocation(line: 52, column: 58, scope: !7)
!61 = !DILocation(line: 52, column: 4, scope: !7)
