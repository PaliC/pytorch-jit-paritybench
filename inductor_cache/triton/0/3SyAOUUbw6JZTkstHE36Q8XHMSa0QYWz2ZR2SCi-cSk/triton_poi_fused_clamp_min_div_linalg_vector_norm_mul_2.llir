; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_clamp_min_div_linalg_vector_norm_mul_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 127, !dbg !12
  %9 = or disjoint i32 %6, %8, !dbg !13
  %10 = icmp slt i32 %9, 256, !dbg !14
  %11 = srem i32 %9, 16, !dbg !15
  %12 = sdiv i32 %9, 64, !dbg !16
  %13 = sext i32 %9 to i64, !dbg !17
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !17
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 %10) #3, !dbg !18
  %16 = bitcast i32 %15 to float, !dbg !18
  %17 = shl nsw i32 %12, 6, !dbg !19
  %18 = add i32 %17, %11, !dbg !20
  %19 = sext i32 %18 to i64, !dbg !21
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !21
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %10) #3, !dbg !22
  %22 = bitcast i32 %21 to float, !dbg !22
  %23 = add i32 %18, 16, !dbg !23
  %24 = sext i32 %23 to i64, !dbg !24
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !24
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %10) #3, !dbg !25
  %27 = bitcast i32 %26 to float, !dbg !25
  %28 = add i32 %18, 32, !dbg !26
  %29 = sext i32 %28 to i64, !dbg !27
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !27
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %10) #3, !dbg !28
  %32 = bitcast i32 %31 to float, !dbg !28
  %33 = add i32 %18, 48, !dbg !29
  %34 = sext i32 %33 to i64, !dbg !30
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !30
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %10) #3, !dbg !31
  %37 = bitcast i32 %36 to float, !dbg !31
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !32
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %10) #3, !dbg !33
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !34
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %10) #3, !dbg !35
  %42 = bitcast i32 %41 to float, !dbg !35
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !36
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %10) #3, !dbg !37
  %45 = bitcast i32 %44 to float, !dbg !37
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !38
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %10) #3, !dbg !39
  %48 = bitcast i32 %47 to float, !dbg !39
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !40
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %10) #3, !dbg !41
  %51 = bitcast i32 %50 to float, !dbg !41
  %52 = fmul float %22, %22, !dbg !42
  %53 = fmul float %27, %27, !dbg !43
  %54 = fadd float %52, %53, !dbg !44
  %55 = fmul float %32, %32, !dbg !45
  %56 = fadd float %54, %55, !dbg !46
  %57 = fmul float %37, %37, !dbg !47
  %58 = fadd float %56, %57, !dbg !48
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i = icmp eq i32 %59, 0, !dbg !49
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i = icmp eq i32 %60, 0, !dbg !49
  br i1 %.not.i, label %66, label %61, !dbg !49

61:                                               ; preds = %4
  br i1 %.not1.i, label %64, label %62, !dbg !49

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

66:                                               ; preds = %4
  br i1 %.not1.i, label %69, label %67, !dbg !49

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !49
  %71 = fcmp ogt float %.0.i, 0x3E45798EE0000000, !dbg !50
  %72 = fcmp uno float %.0.i, 0.000000e+00, !dbg !54
  %73 = or i1 %71, %72, !dbg !55
  %74 = select i1 %73, float %.0.i, float 0x3E45798EE0000000, !dbg !56
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %16, float %74) #3, !dbg !57
  %76 = fmul float %42, %42, !dbg !58
  %77 = fmul float %45, %45, !dbg !59
  %78 = fadd float %76, %77, !dbg !60
  %79 = fmul float %48, %48, !dbg !61
  %80 = fadd float %78, %79, !dbg !62
  %81 = fmul float %51, %51, !dbg !63
  %82 = fadd float %80, %81, !dbg !64
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i1 = icmp eq i32 %83, 0, !dbg !65
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i4 = icmp eq i32 %84, 0, !dbg !65
  br i1 %.not.i1, label %90, label %85, !dbg !65

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %88, label %86, !dbg !65

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %93, label %91, !dbg !65

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

__nv_sqrtf.exit5:                                 ; preds = %86, %88, %91, %93
  %.0.i3 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !65
  %95 = bitcast i32 %39 to float, !dbg !33
  %96 = fcmp ogt float %.0.i3, 0x3E45798EE0000000, !dbg !66
  %97 = fcmp uno float %.0.i3, 0.000000e+00, !dbg !68
  %98 = or i1 %96, %97, !dbg !69
  %99 = select i1 %98, float %.0.i3, float 0x3E45798EE0000000, !dbg !70
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %99) #3, !dbg !71
  %101 = fmul float %75, %100, !dbg !72
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !73
  %103 = bitcast float %101 to i32, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %103, ptr addrspace(1) %102, i1 %10) #3, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cifq5roriyhvlz265uvrlia6nshf2nicnle6bspmxo2alk7loqxo.py", directory: "inductor_cache/if")
!4 = !{ptr @triton_poi_fused_clamp_min_div_linalg_vector_norm_mul_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clamp_min_div_linalg_vector_norm_mul_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clamp_min_div_linalg_vector_norm_mul_2", linkageName: "triton_poi_fused_clamp_min_div_linalg_vector_norm_mul_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 38, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 43, scope: !7)
!23 = !DILocation(line: 29, column: 40, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 48, scope: !7)
!26 = !DILocation(line: 30, column: 40, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 48, scope: !7)
!29 = !DILocation(line: 31, column: 40, scope: !7)
!30 = !DILocation(line: 31, column: 30, scope: !7)
!31 = !DILocation(line: 31, column: 48, scope: !7)
!32 = !DILocation(line: 32, column: 31, scope: !7)
!33 = !DILocation(line: 32, column: 36, scope: !7)
!34 = !DILocation(line: 33, column: 31, scope: !7)
!35 = !DILocation(line: 33, column: 44, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 49, scope: !7)
!38 = !DILocation(line: 35, column: 31, scope: !7)
!39 = !DILocation(line: 35, column: 49, scope: !7)
!40 = !DILocation(line: 36, column: 31, scope: !7)
!41 = !DILocation(line: 36, column: 49, scope: !7)
!42 = !DILocation(line: 37, column: 18, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 40, column: 18, scope: !7)
!46 = !DILocation(line: 41, column: 18, scope: !7)
!47 = !DILocation(line: 42, column: 19, scope: !7)
!48 = !DILocation(line: 43, column: 19, scope: !7)
!49 = !DILocation(line: 44, column: 27, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 46, column: 42, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !51, inlinedAt: !53)
!56 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!57 = !DILocation(line: 47, column: 19, scope: !7)
!58 = !DILocation(line: 48, column: 20, scope: !7)
!59 = !DILocation(line: 49, column: 20, scope: !7)
!60 = !DILocation(line: 50, column: 20, scope: !7)
!61 = !DILocation(line: 51, column: 20, scope: !7)
!62 = !DILocation(line: 52, column: 20, scope: !7)
!63 = !DILocation(line: 53, column: 20, scope: !7)
!64 = !DILocation(line: 54, column: 20, scope: !7)
!65 = !DILocation(line: 55, column: 27, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !67)
!67 = !DILocation(line: 56, column: 42, scope: !7)
!68 = !DILocation(line: 120, column: 21, scope: !51, inlinedAt: !67)
!69 = !DILocation(line: 120, column: 16, scope: !51, inlinedAt: !67)
!70 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !67)
!71 = !DILocation(line: 57, column: 20, scope: !7)
!72 = !DILocation(line: 58, column: 20, scope: !7)
!73 = !DILocation(line: 59, column: 25, scope: !7)
!74 = !DILocation(line: 59, column: 37, scope: !7)
!75 = !DILocation(line: 59, column: 4, scope: !7)
