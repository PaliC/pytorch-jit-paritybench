; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/66/c66yvuh5prlbal4yqwtiyxvhyrg2vnazfavylibj5o4xcv6ao2n5.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp9 < 262144\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_convolution_max_unpool2d_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !11 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !12
  %11 = shl i32 %10, 9, !dbg !13
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %13 = shl i32 %12, 2, !dbg !14
  %14 = and i32 %13, 508, !dbg !14
  %15 = or disjoint i32 %11, %14, !dbg !15
  %16 = or disjoint i32 %15, 2, !dbg !15
  %17 = sdiv i32 %15, 64, !dbg !16
  %18 = srem i32 %17, 256, !dbg !17
  %19 = sext i32 %15 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !18
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #6, !dbg !19
  %22 = sext i32 %18 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !20
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #6, !dbg !21
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #6, !dbg !21
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #6, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #6, !dbg !21
  %28 = getelementptr i64, ptr addrspace(1) %2, i64 %19, !dbg !22
  %29 = sext i32 %16 to i64, !dbg !22
  %30 = getelementptr i64, ptr addrspace(1) %2, i64 %29, !dbg !22
  %31 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %28, i1 true) #6, !dbg !23
  %32 = extractvalue { i64, i64 } %31, 0, !dbg !23
  %33 = extractvalue { i64, i64 } %31, 1, !dbg !23
  %34 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %30, i1 true) #6, !dbg !23
  %35 = extractvalue { i64, i64 } %34, 0, !dbg !23
  %36 = extractvalue { i64, i64 } %34, 1, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #6, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #6, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #6, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #6, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #6, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #6, !dbg !27
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #6, !dbg !27
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #6, !dbg !27
  %47 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !28
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #6, !dbg !29
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #6, !dbg !29
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #6, !dbg !29
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #6, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !30
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #6, !dbg !31
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #6, !dbg !31
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #6, !dbg !31
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #6, !dbg !31
  %57 = shl i32 %17, 8, !dbg !32
  %58 = sext i32 %57 to i64, !dbg !33
  %59 = insertelement <4 x i64> poison, i64 %32, i64 0, !dbg !33
  %60 = insertelement <4 x i64> %59, i64 %33, i64 1, !dbg !33
  %61 = insertelement <4 x i64> %60, i64 %35, i64 2, !dbg !33
  %62 = insertelement <4 x i64> %61, i64 %36, i64 3, !dbg !33
  %63 = insertelement <4 x i64> poison, i64 %58, i64 0, !dbg !33
  %64 = shufflevector <4 x i64> %63, <4 x i64> poison, <4 x i32> zeroinitializer, !dbg !33
  %65 = add <4 x i64> %62, %64, !dbg !33
  %66 = lshr <4 x i64> %65, splat (i64 45), !dbg !34
  %67 = and <4 x i64> %66, splat (i64 262144), !dbg !34
  %68 = add <4 x i64> %67, %65, !dbg !34
  %69 = tail call i64 @llvm.vector.reduce.or.v4i64(<4 x i64> %68), !dbg !35
  %.not = icmp ult i64 %69, 262144, !dbg !35
  br i1 %.not, label %71, label %70, !dbg !35

70:                                               ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !35
  unreachable, !dbg !35

71:                                               ; preds = %9
  %72 = bitcast i32 %46 to float, !dbg !27
  %73 = bitcast i32 %45 to float, !dbg !27
  %74 = bitcast i32 %44 to float, !dbg !27
  %75 = bitcast i32 %43 to float, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %76 = fadd float %75, 0x3EE4F8B580000000, !dbg !36
  %77 = fadd float %74, 0x3EE4F8B580000000, !dbg !36
  %78 = fadd float %73, 0x3EE4F8B580000000, !dbg !36
  %79 = fadd float %72, 0x3EE4F8B580000000, !dbg !36
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !37
  %.not.i = icmp eq i32 %80, 0, !dbg !37
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !37
  %.not1.i = icmp eq i32 %81, 0, !dbg !37
  br i1 %.not.i, label %87, label %82, !dbg !37

82:                                               ; preds = %71
  br i1 %.not1.i, label %85, label %83, !dbg !37

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #6, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #6, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

87:                                               ; preds = %71
  br i1 %.not1.i, label %90, label %88, !dbg !37

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #6, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #6, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %83, %85, %88, %90
  %.0.i = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !37
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !37
  %.not.i1 = icmp eq i32 %92, 0, !dbg !37
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !37
  %.not1.i4 = icmp eq i32 %93, 0, !dbg !37
  br i1 %.not.i1, label %99, label %94, !dbg !37

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %97, label %95, !dbg !37

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #6, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #6, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

99:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %102, label %100, !dbg !37

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #6, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #6, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %95, %97, %100, %102
  %.0.i3 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !37
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !37
  %.not.i6 = icmp eq i32 %104, 0, !dbg !37
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !37
  %.not1.i9 = icmp eq i32 %105, 0, !dbg !37
  br i1 %.not.i6, label %111, label %106, !dbg !37

106:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %109, label %107, !dbg !37

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #6, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #6, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

111:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %114, label %112, !dbg !37

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #6, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #6, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

__nv_sqrtf.exit10:                                ; preds = %107, %109, %112, %114
  %.0.i8 = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !37
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !37
  %.not.i11 = icmp eq i32 %116, 0, !dbg !37
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !37
  %.not1.i14 = icmp eq i32 %117, 0, !dbg !37
  br i1 %.not.i11, label %123, label %118, !dbg !37

118:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %121, label %119, !dbg !37

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #6, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #6, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

123:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %126, label %124, !dbg !37

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #6, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #6, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

__nv_sqrtf.exit15:                                ; preds = %119, %121, %124, %126
  %.0.i13 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !37
  %128 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !19
  %129 = insertelement <4 x i32> poison, i32 %27, i64 0, !dbg !21
  %130 = insertelement <4 x i32> %129, i32 %26, i64 1, !dbg !21
  %131 = insertelement <4 x i32> %130, i32 %25, i64 2, !dbg !21
  %132 = insertelement <4 x i32> %131, i32 %24, i64 3, !dbg !21
  %133 = bitcast <4 x i32> %132 to <4 x float>, !dbg !21
  %134 = insertelement <4 x i32> poison, i32 %41, i64 0, !dbg !25
  %135 = insertelement <4 x i32> %134, i32 %40, i64 1, !dbg !25
  %136 = insertelement <4 x i32> %135, i32 %39, i64 2, !dbg !25
  %137 = insertelement <4 x i32> %136, i32 %38, i64 3, !dbg !25
  %138 = bitcast <4 x i32> %137 to <4 x float>, !dbg !25
  %139 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !19
  %140 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !19
  %141 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !19
  %142 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !29
  %143 = insertelement <4 x i32> %142, i32 %50, i64 1, !dbg !29
  %144 = insertelement <4 x i32> %143, i32 %49, i64 2, !dbg !29
  %145 = insertelement <4 x i32> %144, i32 %48, i64 3, !dbg !29
  %146 = bitcast <4 x i32> %145 to <4 x float>, !dbg !29
  %147 = insertelement <4 x i32> poison, i32 %56, i64 0, !dbg !31
  %148 = insertelement <4 x i32> %147, i32 %55, i64 1, !dbg !31
  %149 = insertelement <4 x i32> %148, i32 %54, i64 2, !dbg !31
  %150 = insertelement <4 x i32> %149, i32 %53, i64 3, !dbg !31
  %151 = bitcast <4 x i32> %150 to <4 x float>, !dbg !31
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #6, !dbg !38
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #6, !dbg !38
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #6, !dbg !38
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #6, !dbg !38
  %156 = insertelement <4 x i32> poison, i32 %128, i64 0, !dbg !19
  %157 = insertelement <4 x i32> %156, i32 %139, i64 1, !dbg !19
  %158 = insertelement <4 x i32> %157, i32 %140, i64 2, !dbg !19
  %159 = insertelement <4 x i32> %158, i32 %141, i64 3, !dbg !19
  %160 = bitcast <4 x i32> %159 to <4 x float>, !dbg !19
  %161 = fadd <4 x float> %160, %133, !dbg !39
  %162 = fsub <4 x float> %161, %138, !dbg !40
  %163 = insertelement <4 x float> poison, float %155, i64 0, !dbg !41
  %164 = insertelement <4 x float> %163, float %154, i64 1, !dbg !41
  %165 = insertelement <4 x float> %164, float %153, i64 2, !dbg !41
  %166 = insertelement <4 x float> %165, float %152, i64 3, !dbg !41
  %167 = fmul <4 x float> %162, %166, !dbg !41
  %168 = fmul <4 x float> %167, %146, !dbg !42
  %169 = fadd <4 x float> %168, %151, !dbg !43
  %170 = fcmp olt <4 x float> %169, zeroinitializer, !dbg !44
  %171 = extractelement <4 x i1> %170, i64 3, !dbg !48
  %172 = extractelement <4 x i1> %170, i64 2, !dbg !48
  %173 = extractelement <4 x i1> %170, i64 1, !dbg !48
  %174 = extractelement <4 x i1> %170, i64 0, !dbg !48
  %bc = bitcast <4 x float> %161 to <4 x i32>, !dbg !49
  %175 = extractelement <4 x i32> %bc, i64 3, !dbg !49
  %bc16 = bitcast <4 x float> %161 to <4 x i32>, !dbg !49
  %176 = extractelement <4 x i32> %bc16, i64 2, !dbg !49
  %bc17 = bitcast <4 x float> %161 to <4 x i32>, !dbg !49
  %177 = extractelement <4 x i32> %bc17, i64 1, !dbg !49
  %bc18 = bitcast <4 x float> %161 to <4 x i32>, !dbg !49
  %178 = extractelement <4 x i32> %bc18, i64 0, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %175, i32 %176, i32 %177, i32 %178, ptr addrspace(1) %20, i1 true) #6, !dbg !49
  %179 = extractelement <4 x i64> %68, i64 0, !dbg !50
  %180 = getelementptr float, ptr addrspace(1) %7, i64 %179, !dbg !50
  %181 = extractelement <4 x i64> %68, i64 1, !dbg !50
  %182 = getelementptr float, ptr addrspace(1) %7, i64 %181, !dbg !50
  %183 = extractelement <4 x i64> %68, i64 2, !dbg !50
  %184 = getelementptr float, ptr addrspace(1) %7, i64 %183, !dbg !50
  %185 = extractelement <4 x i64> %68, i64 3, !dbg !50
  %186 = getelementptr float, ptr addrspace(1) %7, i64 %185, !dbg !50
  %187 = ptrtoint ptr addrspace(1) %180 to i64, !dbg !51
  %188 = ptrtoint ptr addrspace(1) %182 to i64, !dbg !51
  %189 = ptrtoint ptr addrspace(1) %184 to i64, !dbg !51
  %190 = ptrtoint ptr addrspace(1) %186 to i64, !dbg !51
  %191 = and i32 %12, 127, !dbg !51
  %192 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %14, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %192, i64 %187, i64 %188, i1 true) #6, !dbg !51
  %193 = getelementptr inbounds i8, ptr addrspace(3) %192, i32 16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %193, i64 %189, i64 %190, i1 true) #6, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %194 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %191, !dbg !51
  %195 = load i64, ptr addrspace(3) %194, align 8, !dbg !51
  %196 = or disjoint i32 %191, 128, !dbg !51
  %197 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %196, !dbg !51
  %198 = load i64, ptr addrspace(3) %197, align 8, !dbg !51
  %199 = or disjoint i32 %191, 256, !dbg !51
  %200 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %199, !dbg !51
  %201 = load i64, ptr addrspace(3) %200, align 8, !dbg !51
  %202 = or disjoint i32 %191, 384, !dbg !51
  %203 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %202, !dbg !51
  %204 = load i64, ptr addrspace(3) %203, align 8, !dbg !51
  %205 = inttoptr i64 %195 to ptr addrspace(1), !dbg !51
  %206 = inttoptr i64 %198 to ptr addrspace(1), !dbg !51
  %207 = inttoptr i64 %201 to ptr addrspace(1), !dbg !51
  %208 = inttoptr i64 %204 to ptr addrspace(1), !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !51
  %bc19 = bitcast <4 x float> %169 to <4 x i32>, !dbg !51
  %210 = extractelement <4 x i32> %bc19, i64 3, !dbg !51
  %211 = select i1 %171, i32 0, i32 %210, !dbg !48
  %bc20 = bitcast <4 x float> %169 to <4 x i32>, !dbg !51
  %212 = extractelement <4 x i32> %bc20, i64 2, !dbg !51
  %213 = select i1 %172, i32 0, i32 %212, !dbg !48
  %bc21 = bitcast <4 x float> %169 to <4 x i32>, !dbg !51
  %214 = extractelement <4 x i32> %bc21, i64 1, !dbg !51
  %215 = select i1 %173, i32 0, i32 %214, !dbg !48
  %bc22 = bitcast <4 x float> %169 to <4 x i32>, !dbg !51
  %216 = extractelement <4 x i32> %bc22, i64 0, !dbg !51
  %217 = select i1 %174, i32 0, i32 %216, !dbg !48
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %209, i32 %211, i32 %213, i32 %215, i32 %217, i1 true) #6, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %218 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %191, !dbg !51
  %219 = load i32, ptr addrspace(3) %218, align 4, !dbg !51
  %220 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %196, !dbg !51
  %221 = load i32, ptr addrspace(3) %220, align 4, !dbg !51
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %199, !dbg !51
  %223 = load i32, ptr addrspace(3) %222, align 4, !dbg !51
  %224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %202, !dbg !51
  %225 = load i32, ptr addrspace(3) %224, align 4, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %219, ptr addrspace(1) %205, i1 true) #6, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %221, ptr addrspace(1) %206, i1 true) #6, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %223, ptr addrspace(1) %207, i1 true) #6, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %225, ptr addrspace(1) %208, i1 true) #6, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.or.v4i64(<4 x i64>) #5

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c66yvuh5prlbal4yqwtiyxvhyrg2vnazfavylibj5o4xcv6ao2n5.py", directory: "inductor_cache/66")
!4 = !{ptr @triton_poi_fused_convolution_max_unpool2d_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_max_unpool2d_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_convolution_max_unpool2d_16", linkageName: "triton_poi_fused_convolution_max_unpool2d_16", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 27, scope: !11)
!18 = !DILocation(line: 26, column: 34, scope: !11)
!19 = !DILocation(line: 26, column: 39, scope: !11)
!20 = !DILocation(line: 27, column: 30, scope: !11)
!21 = !DILocation(line: 27, column: 35, scope: !11)
!22 = !DILocation(line: 28, column: 30, scope: !11)
!23 = !DILocation(line: 28, column: 35, scope: !11)
!24 = !DILocation(line: 29, column: 32, scope: !11)
!25 = !DILocation(line: 29, column: 52, scope: !11)
!26 = !DILocation(line: 30, column: 32, scope: !11)
!27 = !DILocation(line: 30, column: 52, scope: !11)
!28 = !DILocation(line: 31, column: 32, scope: !11)
!29 = !DILocation(line: 31, column: 52, scope: !11)
!30 = !DILocation(line: 32, column: 32, scope: !11)
!31 = !DILocation(line: 32, column: 52, scope: !11)
!32 = !DILocation(line: 34, column: 16, scope: !11)
!33 = !DILocation(line: 35, column: 18, scope: !11)
!34 = !DILocation(line: 39, column: 32, scope: !11)
!35 = !DILocation(line: 40, column: 52, scope: !11)
!36 = !DILocation(line: 43, column: 20, scope: !11)
!37 = !DILocation(line: 44, column: 27, scope: !11)
!38 = !DILocation(line: 46, column: 20, scope: !11)
!39 = !DILocation(line: 33, column: 18, scope: !11)
!40 = !DILocation(line: 41, column: 19, scope: !11)
!41 = !DILocation(line: 49, column: 20, scope: !11)
!42 = !DILocation(line: 50, column: 20, scope: !11)
!43 = !DILocation(line: 51, column: 20, scope: !11)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !11, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 53, column: 42, scope: !11)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 54, column: 39, scope: !11)
!50 = !DILocation(line: 55, column: 25, scope: !11)
!51 = !DILocation(line: 55, column: 66, scope: !11)
!52 = !DILocation(line: 55, column: 4, scope: !11)
