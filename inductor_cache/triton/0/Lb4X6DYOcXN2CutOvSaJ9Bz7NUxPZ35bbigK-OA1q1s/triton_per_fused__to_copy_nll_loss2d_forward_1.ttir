#loc = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":19:0)
#loc1 = loc(unknown)
#loc51 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":60:26)
#loc55 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":63:26)
#loc64 = loc(callsite(#loc1 at #loc51))
#loc67 = loc(callsite(#loc1 at #loc55))
module {
  tt.func public @triton_per_fused__to_copy_nll_loss2d_forward_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<4> : tensor<1x64xi64> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x64xf32> loc(#loc1)
    %cst_1 = arith.constant dense<16> : tensor<1x64xi64> loc(#loc1)
    %cst_2 = arith.constant dense<0> : tensor<1x64xi64> loc(#loc1)
    %cst_3 = arith.constant dense<255> : tensor<1x64xi64> loc(#loc1)
    %cst_4 = arith.constant dense<48> : tensor<1x64xi32> loc(#loc1)
    %cst_5 = arith.constant dense<32> : tensor<1x64xi32> loc(#loc1)
    %cst_6 = arith.constant dense<64> : tensor<1x64xi32> loc(#loc1)
    %cst_7 = arith.constant dense<16> : tensor<1x64xi32> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc3)
    %2 = arith.remsi %1, %cst_7 : tensor<1x64xi32> loc(#loc4)
    %3 = arith.divsi %1, %cst_7 : tensor<1x64xi32> loc(#loc5)
    %4 = arith.muli %3, %cst_6 : tensor<1x64xi32> loc(#loc6)
    %5 = arith.addi %2, %4 : tensor<1x64xi32> loc(#loc7)
    %6 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>> loc(#loc8)
    %7 = tt.addptr %6, %5 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc8)
    %8 = tt.load %7 : tensor<1x64x!tt.ptr<f32>> loc(#loc9)
    %9 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>> loc(#loc10)
    %10 = tt.addptr %9, %5 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc10)
    %11 = tt.load %10 : tensor<1x64x!tt.ptr<f32>> loc(#loc11)
    %12 = arith.addi %2, %cst_7 : tensor<1x64xi32> loc(#loc12)
    %13 = arith.addi %12, %4 : tensor<1x64xi32> loc(#loc13)
    %14 = tt.addptr %9, %13 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc14)
    %15 = tt.load %14 : tensor<1x64x!tt.ptr<f32>> loc(#loc15)
    %16 = arith.addi %2, %cst_5 : tensor<1x64xi32> loc(#loc16)
    %17 = arith.addi %16, %4 : tensor<1x64xi32> loc(#loc17)
    %18 = tt.addptr %9, %17 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc18)
    %19 = tt.load %18 : tensor<1x64x!tt.ptr<f32>> loc(#loc19)
    %20 = arith.addi %2, %cst_4 : tensor<1x64xi32> loc(#loc20)
    %21 = arith.addi %20, %4 : tensor<1x64xi32> loc(#loc21)
    %22 = tt.addptr %9, %21 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc22)
    %23 = tt.load %22 : tensor<1x64x!tt.ptr<f32>> loc(#loc23)
    %24 = arith.fptosi %8 : tensor<1x64xf32> to tensor<1x64xi64> loc(#loc24)
    %25 = arith.cmpi ne, %24, %cst_3 : tensor<1x64xi64> loc(#loc25)
    %26 = arith.select %25, %24, %cst_2 : tensor<1x64xi1>, tensor<1x64xi64> loc(#loc26)
    %27 = arith.addi %26, %cst : tensor<1x64xi64> loc(#loc27)
    %28 = arith.cmpi slt, %26, %cst_2 : tensor<1x64xi64> loc(#loc28)
    %29 = arith.select %28, %27, %26 : tensor<1x64xi1>, tensor<1x64xi64> loc(#loc29)
    %30 = arith.cmpi sge, %29, %cst_2 : tensor<1x64xi64> loc(#loc30)
    %31 = arith.cmpi slt, %29, %cst : tensor<1x64xi64> loc(#loc31)
    %32 = arith.andi %30, %31 : tensor<1x64xi1> loc(#loc32)
    tt.assert %32, "index out of bounds: 0 <= tmp9 < 4" : tensor<1x64xi1> loc(#loc33)
    %33 = arith.muli %29, %cst_1 : tensor<1x64xi64> loc(#loc34)
    %34 = arith.extsi %2 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc35)
    %35 = arith.addi %34, %33 : tensor<1x64xi64> loc(#loc35)
    %36 = arith.extsi %4 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc36)
    %37 = arith.addi %35, %36 : tensor<1x64xi64> loc(#loc36)
    %38 = tt.addptr %9, %37 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi64> loc(#loc37)
    %39 = tt.load %38 : tensor<1x64x!tt.ptr<f32>> loc(#loc38)
    %40 = math.exp %11 : tensor<1x64xf32> loc(#loc39)
    %41 = math.exp %15 : tensor<1x64xf32> loc(#loc40)
    %42 = arith.addf %40, %41 : tensor<1x64xf32> loc(#loc41)
    %43 = math.exp %19 : tensor<1x64xf32> loc(#loc42)
    %44 = arith.addf %42, %43 : tensor<1x64xf32> loc(#loc43)
    %45 = math.exp %23 : tensor<1x64xf32> loc(#loc44)
    %46 = arith.addf %44, %45 : tensor<1x64xf32> loc(#loc45)
    %47 = math.log %46 : tensor<1x64xf32> loc(#loc46)
    %48 = arith.subf %39, %47 : tensor<1x64xf32> loc(#loc47)
    %49 = arith.subf %cst_0, %48 : tensor<1x64xf32> loc(#loc48)
    %50 = arith.select %25, %49, %cst_0 : tensor<1x64xi1>, tensor<1x64xf32> loc(#loc49)
    %51 = "tt.reduce"(%50) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc51)), %arg5: f32 loc(callsite(#loc1 at #loc51))):
      %60 = arith.addf %arg4, %arg5 : f32 loc(#loc68)
      tt.reduce.return %60 : f32 loc(#loc63)
    }) : (tensor<1x64xf32>) -> tensor<1xf32> loc(#loc63)
    %52 = tt.expand_dims %51 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc53)
    %53 = arith.extui %25 : tensor<1x64xi1> to tensor<1x64xi64> loc(#loc54)
    %54 = "tt.reduce"(%53) <{axis = 1 : i32}> ({
    ^bb0(%arg4: i64 loc(callsite(#loc1 at #loc55)), %arg5: i64 loc(callsite(#loc1 at #loc55))):
      %60 = arith.addi %arg4, %arg5 : i64 loc(#loc69)
      tt.reduce.return %60 : i64 loc(#loc66)
    }) : (tensor<1x64xi64>) -> tensor<1xi64> loc(#loc66)
    %55 = tt.expand_dims %54 {axis = 1 : i32} : tensor<1xi64> -> tensor<1x1xi64> loc(#loc56)
    %56 = arith.sitofp %55 : tensor<1x1xi64> to tensor<1x1xf32> loc(#loc57)
    %57 = arith.divf %52, %56 : tensor<1x1xf32> loc(#loc58)
    gpu.barrier loc(#loc59)
    %58 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc60)
    %59 = tt.splat %58 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc60)
    tt.store %59, %57 : tensor<1x1x!tt.ptr<f32>> loc(#loc61)
    tt.return loc(#loc62)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":26:26)
#loc3 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":26:34)
#loc4 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":29:19)
#loc5 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":30:19)
#loc6 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":31:38)
#loc7 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":31:35)
#loc8 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":31:30)
#loc9 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":31:43)
#loc10 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":32:31)
#loc11 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":32:44)
#loc12 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":33:36)
#loc13 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":33:41)
#loc14 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":33:31)
#loc15 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":33:49)
#loc16 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":34:36)
#loc17 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":34:41)
#loc18 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":34:31)
#loc19 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":34:49)
#loc20 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":35:36)
#loc21 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":35:41)
#loc22 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":35:31)
#loc23 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":35:49)
#loc24 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":36:19)
#loc25 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":38:19)
#loc26 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":40:32)
#loc27 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":42:18)
#loc28 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":43:18)
#loc29 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":44:32)
#loc30 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":45:27)
#loc31 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":45:43)
#loc32 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":45:36)
#loc33 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":45:47)
#loc34 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":46:39)
#loc35 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":46:36)
#loc36 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":46:46)
#loc37 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":46:31)
#loc38 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":46:54)
#loc39 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":47:24)
#loc40 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":48:24)
#loc41 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":49:20)
#loc42 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":50:24)
#loc43 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":51:20)
#loc44 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":52:24)
#loc45 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":53:20)
#loc46 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":54:24)
#loc47 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":55:20)
#loc48 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":56:13)
#loc49 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":58:34)
#loc50 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc52 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc53 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":60:29)
#loc54 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":61:20)
#loc56 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":63:29)
#loc57 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":64:21)
#loc58 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":65:20)
#loc59 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":66:4)
#loc60 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":67:28)
#loc61 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":67:71)
#loc62 = loc("inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py":67:4)
#loc63 = loc(callsite(#loc50 at #loc51))
#loc65 = loc(callsite(#loc52 at #loc50))
#loc66 = loc(callsite(#loc50 at #loc55))
#loc68 = loc(callsite(#loc65 at #loc51))
#loc69 = loc(callsite(#loc65 at #loc55))
