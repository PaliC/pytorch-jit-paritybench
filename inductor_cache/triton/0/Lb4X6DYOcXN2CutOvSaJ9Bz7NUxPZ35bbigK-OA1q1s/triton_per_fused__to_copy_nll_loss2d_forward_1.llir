; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/qf/cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp9 < 4\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused__to_copy_nll_loss2d_forward_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !11 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %6 = and i32 %5, 15, !dbg !13
  %7 = shl i32 %5, 2, !dbg !14
  %8 = and i32 %7, 192, !dbg !14
  %9 = or disjoint i32 %8, %6, !dbg !15
  %10 = zext nneg i32 %9 to i64, !dbg !16
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !16
  %12 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %11, i1 true) #5, !dbg !17
  %13 = bitcast i32 %12 to float, !dbg !17
  %14 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !18
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #5, !dbg !19
  %16 = or disjoint i32 %9, 16, !dbg !20
  %17 = zext nneg i32 %16 to i64, !dbg !21
  %18 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !21
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #5, !dbg !22
  %20 = or disjoint i32 %9, 32, !dbg !23
  %21 = zext nneg i32 %20 to i64, !dbg !24
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !24
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !25
  %24 = or disjoint i32 %9, 48, !dbg !26
  %25 = zext nneg i32 %24 to i64, !dbg !27
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !27
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !28
  %28 = fptosi float %13 to i64, !dbg !29
  %29 = icmp ne i64 %28, 255, !dbg !30
  %30 = select i1 %29, i64 %28, i64 0, !dbg !31
  %31 = lshr i64 %30, 61, !dbg !32
  %32 = and i64 %31, 4, !dbg !32
  %33 = add i64 %32, %30, !dbg !32
  %34 = icmp ugt i64 %33, 3, !dbg !33
  br i1 %34, label %35, label %36, !dbg !34

35:                                               ; preds = %4
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 45, ptr nonnull @assertFunc_0, i64 1), !dbg !34
  unreachable, !dbg !34

36:                                               ; preds = %4
  %37 = bitcast i32 %27 to float, !dbg !28
  %38 = bitcast i32 %23 to float, !dbg !25
  %39 = bitcast i32 %19 to float, !dbg !22
  %40 = bitcast i32 %15 to float, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %41 = shl nuw nsw i64 %33, 4, !dbg !35
  %42 = zext nneg i32 %6 to i64, !dbg !36
  %43 = or disjoint i64 %41, %42, !dbg !36
  %44 = zext nneg i32 %8 to i64, !dbg !37
  %45 = or disjoint i64 %43, %44, !dbg !37
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !38
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #5, !dbg !39
  %48 = fmul float %40, 0x3FF7154760000000, !dbg !40
  %49 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %48) #5, !dbg !40
  %50 = fmul float %39, 0x3FF7154760000000, !dbg !41
  %51 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %50) #5, !dbg !41
  %52 = fadd float %49, %51, !dbg !42
  %53 = fmul float %38, 0x3FF7154760000000, !dbg !43
  %54 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %53) #5, !dbg !43
  %55 = fadd float %52, %54, !dbg !44
  %56 = fmul float %37, 0x3FF7154760000000, !dbg !45
  %57 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %56) #5, !dbg !45
  %58 = fadd float %55, %57, !dbg !46
  %59 = fcmp olt float %58, 0x3810000000000000, !dbg !47
  %60 = fmul float %58, 0x4160000000000000, !dbg !47
  %.02.i = select i1 %59, float %60, float %58, !dbg !47
  %i.i.0.i = select i1 %59, float -2.300000e+01, float 0.000000e+00, !dbg !47
  %61 = bitcast float %.02.i to i32, !dbg !47
  %62 = add i32 %61, -1059760811, !dbg !47
  %63 = and i32 %62, -8388608, !dbg !47
  %64 = sub i32 %61, %63, !dbg !47
  %65 = bitcast i32 %64 to float, !dbg !47
  %66 = sitofp i32 %63 to float, !dbg !47
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i = icmp eq i32 %67, 0, !dbg !47
  %68 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %66, float 0x3E80000000000000, float %i.i.0.i) #5, !dbg !47
  %69 = tail call float @llvm.nvvm.fma.rn.f(float %66, float 0x3E80000000000000, float %i.i.0.i) #5, !dbg !47
  %.08.i = select i1 %.not.i, float %69, float %68, !dbg !47
  %70 = fadd float %65, -1.000000e+00, !dbg !47
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not1.i = icmp eq i32 %71, 0, !dbg !47
  %72 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %70, float 0x3FC2073EC0000000) #5, !dbg !47
  %73 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %70, float 0x3FC2073EC0000000) #5, !dbg !47
  %.010.i = select i1 %.not1.i, float %73, float %72, !dbg !47
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not2.i = icmp eq i32 %74, 0, !dbg !47
  %75 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %70, float 0xBFBF19B980000000) #5, !dbg !47
  %76 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %70, float 0xBFBF19B980000000) #5, !dbg !47
  %.011.i = select i1 %.not2.i, float %76, float %75, !dbg !47
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not3.i = icmp eq i32 %77, 0, !dbg !47
  %78 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %70, float 0x3FC1E52AA0000000) #5, !dbg !47
  %79 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %70, float 0x3FC1E52AA0000000) #5, !dbg !47
  %.012.i = select i1 %.not3.i, float %79, float %78, !dbg !47
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not4.i = icmp eq i32 %80, 0, !dbg !47
  %81 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %70, float 0xBFC55B1720000000) #5, !dbg !47
  %82 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %70, float 0xBFC55B1720000000) #5, !dbg !47
  %.09.i = select i1 %.not4.i, float %82, float %81, !dbg !47
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not5.i = icmp eq i32 %83, 0, !dbg !47
  %84 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %70, float 0x3FC99DA160000000) #5, !dbg !47
  %85 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %70, float 0x3FC99DA160000000) #5, !dbg !47
  %.05.i = select i1 %.not5.i, float %85, float %84, !dbg !47
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not6.i = icmp eq i32 %86, 0, !dbg !47
  %87 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %70, float 0xBFCFFFE440000000) #5, !dbg !47
  %88 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %70, float 0xBFCFFFE440000000) #5, !dbg !47
  %.01.i = select i1 %.not6.i, float %88, float %87, !dbg !47
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not7.i = icmp eq i32 %89, 0, !dbg !47
  %90 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %70, float 0x3FD5554F00000000) #5, !dbg !47
  %91 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %70, float 0x3FD5554F00000000) #5, !dbg !47
  %.0.i = select i1 %.not7.i, float %91, float %90, !dbg !47
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not8.i = icmp eq i32 %92, 0, !dbg !47
  %93 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %70, float -5.000000e-01) #5, !dbg !47
  %94 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %70, float -5.000000e-01) #5, !dbg !47
  %.07.i = select i1 %.not8.i, float %94, float %93, !dbg !47
  %95 = fmul float %70, %.07.i, !dbg !47
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not9.i = icmp eq i32 %96, 0, !dbg !47
  %97 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %95, float %70, float %70) #5, !dbg !47
  %98 = tail call float @llvm.nvvm.fma.rn.f(float %95, float %70, float %70) #5, !dbg !47
  %.06.i = select i1 %.not9.i, float %98, float %97, !dbg !47
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not10.i = icmp eq i32 %99, 0, !dbg !47
  %100 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #5, !dbg !47
  %101 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #5, !dbg !47
  %.04.i = select i1 %.not10.i, float %101, float %100, !dbg !47
  %102 = icmp ugt i32 %61, 2139095039, !dbg !47
  br i1 %102, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !47

__nv_fmaf_rn.exit.i.i:                            ; preds = %36
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not11.i = icmp eq i32 %103, 0, !dbg !47
  %104 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #5, !dbg !47
  %105 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #5, !dbg !47
  %.03.i = select i1 %.not11.i, float %105, float %104, !dbg !47
  br label %__nv_logf.exit, !dbg !47

__nv_logf.exit:                                   ; preds = %36, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %36 ], !dbg !47
  %106 = bitcast i32 %47 to float, !dbg !39
  %107 = and i32 %5, 31, !dbg !12
  %108 = lshr i32 %5, 5, !dbg !12
  %109 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !47
  %r.i.1.i = select i1 %109, float 0xFFF0000000000000, float %r.i.0.i, !dbg !47
  %110 = fsub float %r.i.1.i, %106, !dbg !48
  %111 = fadd float %110, 0.000000e+00, !dbg !48
  %112 = select i1 %29, float %111, float 0.000000e+00, !dbg !49
  %113 = bitcast float %112 to i32, !dbg !50
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 16, i32 31), !dbg !50
  %115 = bitcast i32 %114 to float, !dbg !50
  %116 = fadd float %112, %115, !dbg !54
  %117 = bitcast float %116 to i32, !dbg !50
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 8, i32 31), !dbg !50
  %119 = bitcast i32 %118 to float, !dbg !50
  %120 = fadd float %116, %119, !dbg !54
  %121 = bitcast float %120 to i32, !dbg !50
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 4, i32 31), !dbg !50
  %123 = bitcast i32 %122 to float, !dbg !50
  %124 = fadd float %120, %123, !dbg !54
  %125 = bitcast float %124 to i32, !dbg !50
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 2, i32 31), !dbg !50
  %127 = bitcast i32 %126 to float, !dbg !50
  %128 = fadd float %124, %127, !dbg !54
  %129 = bitcast float %128 to i32, !dbg !50
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 1, i32 31), !dbg !50
  %131 = bitcast i32 %130 to float, !dbg !50
  %132 = fadd float %128, %131, !dbg !54
  %133 = icmp eq i32 %107, 0, !dbg !50
  %134 = and i32 %108, 1, !dbg !50
  %135 = zext nneg i32 %134 to i64, !dbg !50
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i64 %135, !dbg !50
  %137 = bitcast float %132 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 %133) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %138 = icmp slt i32 %5, 2, !dbg !50
  %139 = sext i32 %5 to i64, !dbg !50
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i64 %139, !dbg !50
  %141 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %140, i1 %138) #5, !dbg !50
  %142 = bitcast i32 %141 to float, !dbg !50
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 1, i32 31), !dbg !50
  %144 = bitcast i32 %143 to float, !dbg !50
  %145 = fadd float %142, %144, !dbg !54
  %146 = and i32 %5, 1, !dbg !50
  %147 = icmp eq i32 %146, 0, !dbg !50
  %148 = and i1 %138, %147, !dbg !50
  %149 = bitcast float %145 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %149, i1 %148) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %150 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !50
  %151 = zext i1 %29 to i64, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %152 = zext i1 %29 to i32, !dbg !57
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 16, i32 31), !dbg !57
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !57
  %155 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !57
  %156 = insertelement <2 x i32> %155, i32 %154, i64 1, !dbg !57
  %157 = bitcast <2 x i32> %156 to i64, !dbg !57
  %158 = add i64 %157, %151, !dbg !59
  %extelt.offset = lshr i64 %158, 32, !dbg !57
  %159 = trunc nuw i64 %extelt.offset to i32, !dbg !57
  %160 = trunc i64 %158 to i32, !dbg !57
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 8, i32 31), !dbg !57
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 8, i32 31), !dbg !57
  %163 = insertelement <2 x i32> poison, i32 %161, i64 0, !dbg !57
  %164 = insertelement <2 x i32> %163, i32 %162, i64 1, !dbg !57
  %165 = bitcast <2 x i32> %164 to i64, !dbg !57
  %166 = add i64 %158, %165, !dbg !59
  %extelt.offset1 = lshr i64 %166, 32, !dbg !57
  %167 = trunc nuw i64 %extelt.offset1 to i32, !dbg !57
  %168 = trunc i64 %166 to i32, !dbg !57
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 4, i32 31), !dbg !57
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 4, i32 31), !dbg !57
  %171 = insertelement <2 x i32> poison, i32 %169, i64 0, !dbg !57
  %172 = insertelement <2 x i32> %171, i32 %170, i64 1, !dbg !57
  %173 = bitcast <2 x i32> %172 to i64, !dbg !57
  %174 = add i64 %166, %173, !dbg !59
  %extelt.offset2 = lshr i64 %174, 32, !dbg !57
  %175 = trunc nuw i64 %extelt.offset2 to i32, !dbg !57
  %176 = trunc i64 %174 to i32, !dbg !57
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 2, i32 31), !dbg !57
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 2, i32 31), !dbg !57
  %179 = insertelement <2 x i32> poison, i32 %177, i64 0, !dbg !57
  %180 = insertelement <2 x i32> %179, i32 %178, i64 1, !dbg !57
  %181 = bitcast <2 x i32> %180 to i64, !dbg !57
  %182 = add i64 %174, %181, !dbg !59
  %extelt.offset3 = lshr i64 %182, 32, !dbg !57
  %183 = trunc nuw i64 %extelt.offset3 to i32, !dbg !57
  %184 = trunc i64 %182 to i32, !dbg !57
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 1, i32 31), !dbg !57
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 1, i32 31), !dbg !57
  %187 = insertelement <2 x i32> poison, i32 %185, i64 0, !dbg !57
  %188 = insertelement <2 x i32> %187, i32 %186, i64 1, !dbg !57
  %189 = bitcast <2 x i32> %188 to i64, !dbg !57
  %190 = add i64 %182, %189, !dbg !59
  %191 = getelementptr i64, ptr addrspace(3) @global_smem, i64 %135, !dbg !57
  %192 = insertelement <1 x i64> poison, i64 %190, i64 0, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %191, <1 x i64> %192, i1 %133) #5, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %193 = getelementptr i64, ptr addrspace(3) @global_smem, i64 %139, !dbg !57
  %194 = tail call i64 asm sideeffect "@$2 ld.shared.b64 $0, [ $1 + 0 ];", "=l,r,b"(ptr addrspace(3) %193, i1 %138) #5, !dbg !57
  %extelt.offset4 = lshr i64 %194, 32, !dbg !57
  %195 = trunc nuw i64 %extelt.offset4 to i32, !dbg !57
  %196 = trunc i64 %194 to i32, !dbg !57
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 1, i32 31), !dbg !57
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 1, i32 31), !dbg !57
  %199 = insertelement <2 x i32> poison, i32 %197, i64 0, !dbg !57
  %200 = insertelement <2 x i32> %199, i32 %198, i64 1, !dbg !57
  %201 = bitcast <2 x i32> %200 to i64, !dbg !57
  %202 = add i64 %194, %201, !dbg !59
  %203 = insertelement <1 x i64> poison, i64 %202, i64 0, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %193, <1 x i64> %203, i1 %148) #5, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %204 = load i64, ptr addrspace(3) @global_smem, align 16, !dbg !57
  %205 = sitofp i64 %204 to float, !dbg !60
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float %205) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %urem = and i32 %5, 63, !dbg !63
  %207 = icmp eq i32 %urem, 0, !dbg !63
  %208 = bitcast float %206 to i32, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %208, ptr addrspace(1) %0, i1 %207) #5, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #1

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqfqmngnetw42p5sj4oyudffx2btjcvwipjirmbr6fyvmeikoumq.py", directory: "inductor_cache/qf")
!4 = !{ptr @triton_per_fused__to_copy_nll_loss2d_forward_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__to_copy_nll_loss2d_forward_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused__to_copy_nll_loss2d_forward_1", linkageName: "triton_per_fused__to_copy_nll_loss2d_forward_1", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 26, column: 34, scope: !11)
!13 = !DILocation(line: 29, column: 19, scope: !11)
!14 = !DILocation(line: 31, column: 38, scope: !11)
!15 = !DILocation(line: 31, column: 35, scope: !11)
!16 = !DILocation(line: 31, column: 30, scope: !11)
!17 = !DILocation(line: 31, column: 43, scope: !11)
!18 = !DILocation(line: 32, column: 31, scope: !11)
!19 = !DILocation(line: 32, column: 44, scope: !11)
!20 = !DILocation(line: 33, column: 41, scope: !11)
!21 = !DILocation(line: 33, column: 31, scope: !11)
!22 = !DILocation(line: 33, column: 49, scope: !11)
!23 = !DILocation(line: 34, column: 41, scope: !11)
!24 = !DILocation(line: 34, column: 31, scope: !11)
!25 = !DILocation(line: 34, column: 49, scope: !11)
!26 = !DILocation(line: 35, column: 41, scope: !11)
!27 = !DILocation(line: 35, column: 31, scope: !11)
!28 = !DILocation(line: 35, column: 49, scope: !11)
!29 = !DILocation(line: 36, column: 19, scope: !11)
!30 = !DILocation(line: 38, column: 19, scope: !11)
!31 = !DILocation(line: 40, column: 32, scope: !11)
!32 = !DILocation(line: 44, column: 32, scope: !11)
!33 = !DILocation(line: 45, column: 36, scope: !11)
!34 = !DILocation(line: 45, column: 47, scope: !11)
!35 = !DILocation(line: 46, column: 39, scope: !11)
!36 = !DILocation(line: 46, column: 36, scope: !11)
!37 = !DILocation(line: 46, column: 46, scope: !11)
!38 = !DILocation(line: 46, column: 31, scope: !11)
!39 = !DILocation(line: 46, column: 54, scope: !11)
!40 = !DILocation(line: 47, column: 24, scope: !11)
!41 = !DILocation(line: 48, column: 24, scope: !11)
!42 = !DILocation(line: 49, column: 20, scope: !11)
!43 = !DILocation(line: 50, column: 24, scope: !11)
!44 = !DILocation(line: 51, column: 20, scope: !11)
!45 = !DILocation(line: 52, column: 24, scope: !11)
!46 = !DILocation(line: 53, column: 20, scope: !11)
!47 = !DILocation(line: 54, column: 24, scope: !11)
!48 = !DILocation(line: 56, column: 13, scope: !11)
!49 = !DILocation(line: 58, column: 34, scope: !11)
!50 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !11, file: !52, discriminator: 0)
!52 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!53 = !DILocation(line: 60, column: 26, scope: !11)
!54 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !53)
!55 = distinct !DILexicalBlockFile(scope: !51, file: !52, discriminator: 0)
!56 = !DILocation(line: 61, column: 20, scope: !11)
!57 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !58)
!58 = !DILocation(line: 63, column: 26, scope: !11)
!59 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !58)
!60 = !DILocation(line: 64, column: 21, scope: !11)
!61 = !DILocation(line: 65, column: 20, scope: !11)
!62 = !DILocation(line: 66, column: 4, scope: !11)
!63 = !DILocation(line: 67, column: 71, scope: !11)
!64 = !DILocation(line: 67, column: 4, scope: !11)
