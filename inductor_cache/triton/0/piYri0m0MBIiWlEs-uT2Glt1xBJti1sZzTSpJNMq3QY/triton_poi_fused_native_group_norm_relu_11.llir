; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_native_group_norm_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %16 = or disjoint i32 %14, 2, !dbg !13
  %17 = or disjoint i32 %14, 3, !dbg !13
  %18 = or disjoint i32 %14, 512, !dbg !13
  %19 = srem i32 %14, 128, !dbg !14
  %20 = srem i32 %15, 128, !dbg !14
  %21 = srem i32 %16, 128, !dbg !14
  %22 = srem i32 %17, 128, !dbg !14
  %23 = sdiv i32 %14, 524288, !dbg !15
  %24 = sdiv i32 %18, 524288, !dbg !15
  %25 = sext i32 %14 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !16
  %27 = sext i32 %18 to i64, !dbg !16
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !16
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !17
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !17
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !18
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !19
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !19
  %35 = shl nsw i32 %23, 2, !dbg !20
  %36 = shl nsw i32 %24, 2, !dbg !20
  %.lhs.trunc = trunc nsw i32 %19 to i8, !dbg !21
  %37 = sdiv i8 %.lhs.trunc, 32, !dbg !21
  %.sext = sext i8 %37 to i32, !dbg !21
  %.lhs.trunc22 = trunc nsw i32 %20 to i8, !dbg !21
  %38 = sdiv i8 %.lhs.trunc22, 32, !dbg !21
  %.sext23 = sext i8 %38 to i32, !dbg !21
  %.lhs.trunc24 = trunc nsw i32 %21 to i8, !dbg !21
  %39 = sdiv i8 %.lhs.trunc24, 32, !dbg !21
  %.sext25 = sext i8 %39 to i32, !dbg !21
  %.lhs.trunc26 = trunc nsw i32 %22 to i8, !dbg !21
  %40 = sdiv i8 %.lhs.trunc26, 32, !dbg !21
  %.sext27 = sext i8 %40 to i32, !dbg !21
  %41 = add nsw i32 %35, %.sext, !dbg !22
  %42 = add nsw i32 %35, %.sext23, !dbg !22
  %43 = add nsw i32 %35, %.sext25, !dbg !22
  %44 = add nsw i32 %35, %.sext27, !dbg !22
  %45 = add nsw i32 %36, %.sext, !dbg !22
  %46 = add nsw i32 %36, %.sext23, !dbg !22
  %47 = add nsw i32 %36, %.sext25, !dbg !22
  %48 = add nsw i32 %36, %.sext27, !dbg !22
  %49 = sext i32 %41 to i64, !dbg !23
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !23
  %51 = sext i32 %42 to i64, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !23
  %53 = sext i32 %43 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !23
  %55 = sext i32 %44 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !23
  %57 = sext i32 %45 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !23
  %59 = sext i32 %46 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !23
  %61 = sext i32 %47 to i64, !dbg !23
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !23
  %63 = sext i32 %48 to i64, !dbg !23
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !23
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !24
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !24
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !24
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !24
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !24
  %73 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !25
  %74 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !25
  %75 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !25
  %76 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !25
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !25
  %78 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !25
  %79 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !25
  %80 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !25
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !26
  %82 = bitcast i32 %81 to float, !dbg !26
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !26
  %84 = bitcast i32 %83 to float, !dbg !26
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !26
  %86 = bitcast i32 %85 to float, !dbg !26
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !26
  %88 = bitcast i32 %87 to float, !dbg !26
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !26
  %90 = bitcast i32 %89 to float, !dbg !26
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !26
  %92 = bitcast i32 %91 to float, !dbg !26
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !26
  %94 = bitcast i32 %93 to float, !dbg !26
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !26
  %96 = bitcast i32 %95 to float, !dbg !26
  %97 = sext i32 %19 to i64, !dbg !27
  %98 = getelementptr float, ptr addrspace(1) %4, i64 %97, !dbg !27
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 true) #3, !dbg !28
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 true) #3, !dbg !28
  %101 = getelementptr float, ptr addrspace(1) %5, i64 %97, !dbg !29
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 true) #3, !dbg !30
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 true) #3, !dbg !30
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float 1.310720e+05) #3, !dbg !31
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float 1.310720e+05) #3, !dbg !31
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 1.310720e+05) #3, !dbg !31
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float 1.310720e+05) #3, !dbg !31
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float 1.310720e+05) #3, !dbg !31
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float 1.310720e+05) #3, !dbg !31
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float 1.310720e+05) #3, !dbg !31
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 1.310720e+05) #3, !dbg !31
  %112 = fadd float %104, 0x3EE4F8B580000000, !dbg !32
  %113 = fadd float %105, 0x3EE4F8B580000000, !dbg !32
  %114 = fadd float %106, 0x3EE4F8B580000000, !dbg !32
  %115 = fadd float %107, 0x3EE4F8B580000000, !dbg !32
  %116 = fadd float %108, 0x3EE4F8B580000000, !dbg !32
  %117 = fadd float %109, 0x3EE4F8B580000000, !dbg !32
  %118 = fadd float %110, 0x3EE4F8B580000000, !dbg !32
  %119 = fadd float %111, 0x3EE4F8B580000000, !dbg !32
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i = icmp eq i32 %120, 0, !dbg !33
  br i1 %.not.i, label %123, label %121, !dbg !33

121:                                              ; preds = %8
  %122 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %112), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

123:                                              ; preds = %8
  %124 = tail call float @llvm.nvvm.rsqrt.approx.f(float %112), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

__nv_rsqrtf.exit:                                 ; preds = %121, %123
  %.0.i = phi float [ %122, %121 ], [ %124, %123 ], !dbg !33
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i1 = icmp eq i32 %125, 0, !dbg !33
  br i1 %.not.i1, label %128, label %126, !dbg !33

126:                                              ; preds = %__nv_rsqrtf.exit
  %127 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %113), !dbg !33
  br label %__nv_rsqrtf.exit3, !dbg !33

128:                                              ; preds = %__nv_rsqrtf.exit
  %129 = tail call float @llvm.nvvm.rsqrt.approx.f(float %113), !dbg !33
  br label %__nv_rsqrtf.exit3, !dbg !33

__nv_rsqrtf.exit3:                                ; preds = %126, %128
  %.0.i2 = phi float [ %127, %126 ], [ %129, %128 ], !dbg !33
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i4 = icmp eq i32 %130, 0, !dbg !33
  br i1 %.not.i4, label %133, label %131, !dbg !33

131:                                              ; preds = %__nv_rsqrtf.exit3
  %132 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %114), !dbg !33
  br label %__nv_rsqrtf.exit6, !dbg !33

133:                                              ; preds = %__nv_rsqrtf.exit3
  %134 = tail call float @llvm.nvvm.rsqrt.approx.f(float %114), !dbg !33
  br label %__nv_rsqrtf.exit6, !dbg !33

__nv_rsqrtf.exit6:                                ; preds = %131, %133
  %.0.i5 = phi float [ %132, %131 ], [ %134, %133 ], !dbg !33
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i7 = icmp eq i32 %135, 0, !dbg !33
  br i1 %.not.i7, label %138, label %136, !dbg !33

136:                                              ; preds = %__nv_rsqrtf.exit6
  %137 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %115), !dbg !33
  br label %__nv_rsqrtf.exit9, !dbg !33

138:                                              ; preds = %__nv_rsqrtf.exit6
  %139 = tail call float @llvm.nvvm.rsqrt.approx.f(float %115), !dbg !33
  br label %__nv_rsqrtf.exit9, !dbg !33

__nv_rsqrtf.exit9:                                ; preds = %136, %138
  %.0.i8 = phi float [ %137, %136 ], [ %139, %138 ], !dbg !33
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i10 = icmp eq i32 %140, 0, !dbg !33
  br i1 %.not.i10, label %143, label %141, !dbg !33

141:                                              ; preds = %__nv_rsqrtf.exit9
  %142 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %116), !dbg !33
  br label %__nv_rsqrtf.exit12, !dbg !33

143:                                              ; preds = %__nv_rsqrtf.exit9
  %144 = tail call float @llvm.nvvm.rsqrt.approx.f(float %116), !dbg !33
  br label %__nv_rsqrtf.exit12, !dbg !33

__nv_rsqrtf.exit12:                               ; preds = %141, %143
  %.0.i11 = phi float [ %142, %141 ], [ %144, %143 ], !dbg !33
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i13 = icmp eq i32 %145, 0, !dbg !33
  br i1 %.not.i13, label %148, label %146, !dbg !33

146:                                              ; preds = %__nv_rsqrtf.exit12
  %147 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %117), !dbg !33
  br label %__nv_rsqrtf.exit15, !dbg !33

148:                                              ; preds = %__nv_rsqrtf.exit12
  %149 = tail call float @llvm.nvvm.rsqrt.approx.f(float %117), !dbg !33
  br label %__nv_rsqrtf.exit15, !dbg !33

__nv_rsqrtf.exit15:                               ; preds = %146, %148
  %.0.i14 = phi float [ %147, %146 ], [ %149, %148 ], !dbg !33
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i16 = icmp eq i32 %150, 0, !dbg !33
  br i1 %.not.i16, label %153, label %151, !dbg !33

151:                                              ; preds = %__nv_rsqrtf.exit15
  %152 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %118), !dbg !33
  br label %__nv_rsqrtf.exit18, !dbg !33

153:                                              ; preds = %__nv_rsqrtf.exit15
  %154 = tail call float @llvm.nvvm.rsqrt.approx.f(float %118), !dbg !33
  br label %__nv_rsqrtf.exit18, !dbg !33

__nv_rsqrtf.exit18:                               ; preds = %151, %153
  %.0.i17 = phi float [ %152, %151 ], [ %154, %153 ], !dbg !33
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i19 = icmp eq i32 %155, 0, !dbg !33
  br i1 %.not.i19, label %158, label %156, !dbg !33

156:                                              ; preds = %__nv_rsqrtf.exit18
  %157 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %119), !dbg !33
  br label %__nv_rsqrtf.exit21, !dbg !33

158:                                              ; preds = %__nv_rsqrtf.exit18
  %159 = tail call float @llvm.nvvm.rsqrt.approx.f(float %119), !dbg !33
  br label %__nv_rsqrtf.exit21, !dbg !33

__nv_rsqrtf.exit21:                               ; preds = %156, %158
  %.0.i20 = phi float [ %157, %156 ], [ %159, %158 ], !dbg !33
  %160 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !17
  %161 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !19
  %162 = insertelement <8 x i32> poison, i32 %72, i64 0, !dbg !24
  %163 = insertelement <8 x i32> %162, i32 %71, i64 1, !dbg !24
  %164 = insertelement <8 x i32> %163, i32 %70, i64 2, !dbg !24
  %165 = insertelement <8 x i32> %164, i32 %69, i64 3, !dbg !24
  %166 = insertelement <8 x i32> %165, i32 %68, i64 4, !dbg !24
  %167 = insertelement <8 x i32> %166, i32 %67, i64 5, !dbg !24
  %168 = insertelement <8 x i32> %167, i32 %66, i64 6, !dbg !24
  %169 = insertelement <8 x i32> %168, i32 %65, i64 7, !dbg !24
  %170 = bitcast <8 x i32> %169 to <8 x float>, !dbg !24
  %171 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !17
  %172 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !19
  %173 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !17
  %174 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !19
  %175 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !17
  %176 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !19
  %177 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !17
  %178 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !19
  %179 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !17
  %180 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !19
  %181 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !17
  %182 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !19
  %183 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !17
  %184 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !19
  %185 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !30
  %186 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !30
  %187 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !30
  %188 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !30
  %189 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !30
  %190 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !30
  %191 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !30
  %192 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !30
  %193 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !28
  %194 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !28
  %195 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !28
  %196 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !28
  %197 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !28
  %198 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !28
  %199 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !28
  %200 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !28
  %201 = insertelement <8 x i32> poison, i32 %160, i64 0, !dbg !17
  %202 = insertelement <8 x i32> %201, i32 %171, i64 1, !dbg !17
  %203 = insertelement <8 x i32> %202, i32 %173, i64 2, !dbg !17
  %204 = insertelement <8 x i32> %203, i32 %175, i64 3, !dbg !17
  %205 = insertelement <8 x i32> %204, i32 %177, i64 4, !dbg !17
  %206 = insertelement <8 x i32> %205, i32 %179, i64 5, !dbg !17
  %207 = insertelement <8 x i32> %206, i32 %181, i64 6, !dbg !17
  %208 = insertelement <8 x i32> %207, i32 %183, i64 7, !dbg !17
  %209 = bitcast <8 x i32> %208 to <8 x float>, !dbg !17
  %210 = insertelement <8 x i32> poison, i32 %161, i64 0, !dbg !19
  %211 = insertelement <8 x i32> %210, i32 %172, i64 1, !dbg !19
  %212 = insertelement <8 x i32> %211, i32 %174, i64 2, !dbg !19
  %213 = insertelement <8 x i32> %212, i32 %176, i64 3, !dbg !19
  %214 = insertelement <8 x i32> %213, i32 %178, i64 4, !dbg !19
  %215 = insertelement <8 x i32> %214, i32 %180, i64 5, !dbg !19
  %216 = insertelement <8 x i32> %215, i32 %182, i64 6, !dbg !19
  %217 = insertelement <8 x i32> %216, i32 %184, i64 7, !dbg !19
  %218 = bitcast <8 x i32> %217 to <8 x float>, !dbg !19
  %219 = fadd <8 x float> %209, %218, !dbg !34
  %220 = fsub <8 x float> %219, %170, !dbg !35
  %221 = insertelement <8 x i32> poison, i32 %185, i64 0, !dbg !30
  %222 = insertelement <8 x i32> %221, i32 %186, i64 1, !dbg !30
  %223 = insertelement <8 x i32> %222, i32 %187, i64 2, !dbg !30
  %224 = insertelement <8 x i32> %223, i32 %188, i64 3, !dbg !30
  %225 = insertelement <8 x i32> %224, i32 %189, i64 4, !dbg !30
  %226 = insertelement <8 x i32> %225, i32 %190, i64 5, !dbg !30
  %227 = insertelement <8 x i32> %226, i32 %191, i64 6, !dbg !30
  %228 = insertelement <8 x i32> %227, i32 %192, i64 7, !dbg !30
  %229 = bitcast <8 x i32> %228 to <8 x float>, !dbg !30
  %230 = insertelement <8 x i32> poison, i32 %193, i64 0, !dbg !28
  %231 = insertelement <8 x i32> %230, i32 %194, i64 1, !dbg !28
  %232 = insertelement <8 x i32> %231, i32 %195, i64 2, !dbg !28
  %233 = insertelement <8 x i32> %232, i32 %196, i64 3, !dbg !28
  %234 = insertelement <8 x i32> %233, i32 %197, i64 4, !dbg !28
  %235 = insertelement <8 x i32> %234, i32 %198, i64 5, !dbg !28
  %236 = insertelement <8 x i32> %235, i32 %199, i64 6, !dbg !28
  %237 = insertelement <8 x i32> %236, i32 %200, i64 7, !dbg !28
  %238 = bitcast <8 x i32> %237 to <8 x float>, !dbg !28
  %239 = insertelement <8 x float> poison, float %.0.i20, i64 0, !dbg !36
  %240 = insertelement <8 x float> %239, float %.0.i17, i64 1, !dbg !36
  %241 = insertelement <8 x float> %240, float %.0.i14, i64 2, !dbg !36
  %242 = insertelement <8 x float> %241, float %.0.i11, i64 3, !dbg !36
  %243 = insertelement <8 x float> %242, float %.0.i8, i64 4, !dbg !36
  %244 = insertelement <8 x float> %243, float %.0.i5, i64 5, !dbg !36
  %245 = insertelement <8 x float> %244, float %.0.i2, i64 6, !dbg !36
  %246 = insertelement <8 x float> %245, float %.0.i, i64 7, !dbg !36
  %247 = fmul <8 x float> %220, %246, !dbg !36
  %248 = fmul <8 x float> %247, %238, !dbg !37
  %249 = fadd <8 x float> %248, %229, !dbg !38
  %250 = fcmp olt <8 x float> %249, zeroinitializer, !dbg !39
  %251 = extractelement <8 x i1> %250, i64 7, !dbg !43
  %252 = extractelement <8 x i1> %250, i64 6, !dbg !43
  %253 = extractelement <8 x i1> %250, i64 5, !dbg !43
  %254 = extractelement <8 x i1> %250, i64 4, !dbg !43
  %255 = extractelement <8 x i1> %250, i64 3, !dbg !43
  %256 = extractelement <8 x i1> %250, i64 2, !dbg !43
  %257 = extractelement <8 x i1> %250, i64 1, !dbg !43
  %258 = extractelement <8 x i1> %250, i64 0, !dbg !43
  %259 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !44
  %260 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !44
  %bc = bitcast <8 x float> %249 to <8 x i32>, !dbg !45
  %261 = extractelement <8 x i32> %bc, i64 7, !dbg !45
  %262 = select i1 %251, i32 0, i32 %261, !dbg !43
  %bc36 = bitcast <8 x float> %249 to <8 x i32>, !dbg !45
  %263 = extractelement <8 x i32> %bc36, i64 6, !dbg !45
  %264 = select i1 %252, i32 0, i32 %263, !dbg !43
  %bc37 = bitcast <8 x float> %249 to <8 x i32>, !dbg !45
  %265 = extractelement <8 x i32> %bc37, i64 5, !dbg !45
  %266 = select i1 %253, i32 0, i32 %265, !dbg !43
  %bc38 = bitcast <8 x float> %249 to <8 x i32>, !dbg !45
  %267 = extractelement <8 x i32> %bc38, i64 4, !dbg !45
  %268 = select i1 %254, i32 0, i32 %267, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %262, i32 %264, i32 %266, i32 %268, ptr addrspace(1) %259, i1 true) #3, !dbg !45
  %bc39 = bitcast <8 x float> %249 to <8 x i32>, !dbg !45
  %269 = extractelement <8 x i32> %bc39, i64 3, !dbg !45
  %270 = select i1 %255, i32 0, i32 %269, !dbg !43
  %bc40 = bitcast <8 x float> %249 to <8 x i32>, !dbg !45
  %271 = extractelement <8 x i32> %bc40, i64 2, !dbg !45
  %272 = select i1 %256, i32 0, i32 %271, !dbg !43
  %bc41 = bitcast <8 x float> %249 to <8 x i32>, !dbg !45
  %273 = extractelement <8 x i32> %bc41, i64 1, !dbg !45
  %274 = select i1 %257, i32 0, i32 %273, !dbg !43
  %bc42 = bitcast <8 x float> %249 to <8 x i32>, !dbg !45
  %275 = extractelement <8 x i32> %bc42, i64 0, !dbg !45
  %276 = select i1 %258, i32 0, i32 %275, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %270, i32 %272, i32 %274, i32 %276, ptr addrspace(1) %260, i1 true) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxdv47e3homlmjkar5dodktw4ujyeys74ojn636mgbxgz24me3we.py", directory: "inductor_cache/xd")
!4 = !{ptr @triton_poi_fused_native_group_norm_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_group_norm_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_group_norm_relu_11", linkageName: "triton_poi_fused_native_group_norm_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 32, scope: !7)
!21 = !DILocation(line: 29, column: 44, scope: !7)
!22 = !DILocation(line: 29, column: 38, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 50, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 50, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 28, scope: !7)
!34 = !DILocation(line: 33, column: 18, scope: !7)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 19, scope: !7)
!37 = !DILocation(line: 41, column: 20, scope: !7)
!38 = !DILocation(line: 42, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 44, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 45, column: 25, scope: !7)
!45 = !DILocation(line: 45, column: 37, scope: !7)
!46 = !DILocation(line: 45, column: 4, scope: !7)
