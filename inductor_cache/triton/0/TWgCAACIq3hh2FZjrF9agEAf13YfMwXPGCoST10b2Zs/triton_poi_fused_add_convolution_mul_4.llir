; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_convolution_mul_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %12 = sdiv i32 %10, 4096, !dbg !14
  %13 = sdiv i32 %11, 4096, !dbg !14
  %14 = srem i32 %12, 64, !dbg !15
  %15 = srem i32 %13, 64, !dbg !15
  %16 = sext i32 %10 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = sext i32 %11 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !16
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #1, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !17
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !17
  %25 = bitcast i32 %21 to float, !dbg !17
  %26 = bitcast i32 %22 to float, !dbg !17
  %27 = bitcast i32 %23 to float, !dbg !17
  %28 = bitcast i32 %24 to float, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #1, !dbg !17
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !17
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !17
  %34 = bitcast i32 %30 to float, !dbg !17
  %35 = bitcast i32 %31 to float, !dbg !17
  %36 = bitcast i32 %32 to float, !dbg !17
  %37 = bitcast i32 %33 to float, !dbg !17
  %38 = sext i32 %14 to i64, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !18
  %40 = sext i32 %15 to i64, !dbg !18
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !18
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !19
  %43 = bitcast i32 %42 to float, !dbg !19
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !19
  %45 = bitcast i32 %44 to float, !dbg !19
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !19
  %47 = bitcast i32 %46 to float, !dbg !19
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !19
  %49 = bitcast i32 %48 to float, !dbg !19
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !19
  %51 = bitcast i32 %50 to float, !dbg !19
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !19
  %53 = bitcast i32 %52 to float, !dbg !19
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !19
  %55 = bitcast i32 %54 to float, !dbg !19
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !19
  %57 = bitcast i32 %56 to float, !dbg !19
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !20
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !20
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !21
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !21
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !21
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !21
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !21
  %65 = bitcast i32 %61 to float, !dbg !21
  %66 = bitcast i32 %62 to float, !dbg !21
  %67 = bitcast i32 %63 to float, !dbg !21
  %68 = bitcast i32 %64 to float, !dbg !21
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !21
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !21
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !21
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !21
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !21
  %74 = bitcast i32 %70 to float, !dbg !21
  %75 = bitcast i32 %71 to float, !dbg !21
  %76 = bitcast i32 %72 to float, !dbg !21
  %77 = bitcast i32 %73 to float, !dbg !21
  %78 = fadd float %25, %43, !dbg !22
  %79 = fadd float %26, %45, !dbg !22
  %80 = fadd float %27, %47, !dbg !22
  %81 = fadd float %28, %49, !dbg !22
  %82 = fadd float %34, %51, !dbg !22
  %83 = fadd float %35, %53, !dbg !22
  %84 = fadd float %36, %55, !dbg !22
  %85 = fadd float %37, %57, !dbg !22
  %86 = fmul float %78, 0x3FC99999A0000000, !dbg !23
  %87 = fmul float %79, 0x3FC99999A0000000, !dbg !23
  %88 = fmul float %80, 0x3FC99999A0000000, !dbg !23
  %89 = fmul float %81, 0x3FC99999A0000000, !dbg !23
  %90 = fmul float %82, 0x3FC99999A0000000, !dbg !23
  %91 = fmul float %83, 0x3FC99999A0000000, !dbg !23
  %92 = fmul float %84, 0x3FC99999A0000000, !dbg !23
  %93 = fmul float %85, 0x3FC99999A0000000, !dbg !23
  %94 = fadd float %86, %65, !dbg !24
  %95 = fadd float %87, %66, !dbg !24
  %96 = fadd float %88, %67, !dbg !24
  %97 = fadd float %89, %68, !dbg !24
  %98 = fadd float %90, %74, !dbg !24
  %99 = fadd float %91, %75, !dbg !24
  %100 = fadd float %92, %76, !dbg !24
  %101 = fadd float %93, %77, !dbg !24
  %102 = bitcast float %94 to i32, !dbg !25
  %103 = bitcast float %95 to i32, !dbg !25
  %104 = bitcast float %96 to i32, !dbg !25
  %105 = bitcast float %97 to i32, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %102, i32 %103, i32 %104, i32 %105, ptr addrspace(1) %17, i1 true) #1, !dbg !25
  %106 = bitcast float %98 to i32, !dbg !25
  %107 = bitcast float %99 to i32, !dbg !25
  %108 = bitcast float %100 to i32, !dbg !25
  %109 = bitcast float %101 to i32, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %106, i32 %107, i32 %108, i32 %109, ptr addrspace(1) %19, i1 true) #1, !dbg !25
  ret void, !dbg !26
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbusn7nmmp2ik3axqefoqpau63dzhjj55inzwvh6qhtvu5bqbnna.py", directory: "inductor_cache/bu")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_4", linkageName: "triton_poi_fused_add_convolution_mul_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 18, scope: !7)
!23 = !DILocation(line: 31, column: 18, scope: !7)
!24 = !DILocation(line: 32, column: 18, scope: !7)
!25 = !DILocation(line: 33, column: 39, scope: !7)
!26 = !DILocation(line: 33, column: 4, scope: !7)
