; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %6 = icmp slt i32 %5, 16, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 15, !dbg !12
  %9 = shl i32 %5, 4, !dbg !13
  %10 = or disjoint i32 %9, %8, !dbg !14
  %11 = sext i32 %10 to i64, !dbg !15
  %12 = getelementptr float, ptr addrspace(1) %0, i64 %11, !dbg !15
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %12, i1 %6, i32 0, i1 %6) #4, !dbg !16
  %14 = bitcast i32 %13 to float, !dbg !16
  %15 = select i1 %6, float %14, float 0.000000e+00, !dbg !17
  %16 = bitcast float %15 to i32, !dbg !18
  %17 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %16, i32 8, i32 31), !dbg !18
  %18 = bitcast i32 %17 to float, !dbg !18
  %19 = fadd float %15, %18, !dbg !22
  %20 = bitcast float %19 to i32, !dbg !18
  %21 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %20, i32 4, i32 31), !dbg !18
  %22 = bitcast i32 %21 to float, !dbg !18
  %23 = fadd float %19, %22, !dbg !22
  %24 = bitcast float %23 to i32, !dbg !18
  %25 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %24, i32 2, i32 31), !dbg !18
  %26 = bitcast i32 %25 to float, !dbg !18
  %27 = fadd float %23, %26, !dbg !22
  %28 = bitcast float %27 to i32, !dbg !18
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 1, i32 31), !dbg !18
  %30 = bitcast i32 %29 to float, !dbg !18
  %31 = fadd float %27, %30, !dbg !22
  %32 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %31, float 1.600000e+01) #4, !dbg !24
  %33 = fsub float %14, %32, !dbg !25
  %34 = fmul float %33, %33, !dbg !26
  %35 = select i1 %6, float %34, float 0.000000e+00, !dbg !27
  %36 = bitcast float %35 to i32, !dbg !28
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 8, i32 31), !dbg !28
  %38 = bitcast i32 %37 to float, !dbg !28
  %39 = fadd float %35, %38, !dbg !30
  %40 = bitcast float %39 to i32, !dbg !28
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 4, i32 31), !dbg !28
  %42 = bitcast i32 %41 to float, !dbg !28
  %43 = fadd float %39, %42, !dbg !30
  %44 = bitcast float %43 to i32, !dbg !28
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 2, i32 31), !dbg !28
  %46 = bitcast i32 %45 to float, !dbg !28
  %47 = fadd float %43, %46, !dbg !30
  %48 = bitcast float %47 to i32, !dbg !28
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 1, i32 31), !dbg !28
  %50 = bitcast i32 %49 to float, !dbg !28
  %51 = fadd float %47, %50, !dbg !30
  %52 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float 1.600000e+01) #4, !dbg !31
  %53 = fadd float %52, 0x3EE4F8B580000000, !dbg !32
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %54, 0, !dbg !33
  br i1 %.not.i, label %57, label %55, !dbg !33

55:                                               ; preds = %4
  %56 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %53), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

57:                                               ; preds = %4
  %58 = tail call float @llvm.nvvm.rsqrt.approx.f(float %53), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

__nv_rsqrtf.exit:                                 ; preds = %55, %57
  %.0.i = phi float [ %56, %55 ], [ %58, %57 ], !dbg !33
  %59 = fmul float %33, %.0.i, !dbg !34
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !35
  %61 = and i32 %7, 48, !dbg !36
  %62 = icmp eq i32 %61, 0, !dbg !36
  %63 = bitcast float %59 to i32, !dbg !36
  %64 = and i1 %62, %6, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %63, ptr addrspace(1) %60, i1 %64) #4, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvecqbqp5gf42v5ji7eo626iwu5onqb2hbmksr3k4t2nyhkxuoeo.py", directory: "inductor_cache/ve")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_0", linkageName: "triton_per_fused__native_batch_norm_legit_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 35, column: 33, scope: !7)
!18 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!21 = !DILocation(line: 36, column: 24, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !21)
!23 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!24 = !DILocation(line: 39, column: 19, scope: !7)
!25 = !DILocation(line: 40, column: 19, scope: !7)
!26 = !DILocation(line: 41, column: 20, scope: !7)
!27 = !DILocation(line: 43, column: 35, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !29)
!29 = !DILocation(line: 44, column: 26, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !29)
!31 = !DILocation(line: 47, column: 20, scope: !7)
!32 = !DILocation(line: 49, column: 20, scope: !7)
!33 = !DILocation(line: 50, column: 28, scope: !7)
!34 = !DILocation(line: 51, column: 20, scope: !7)
!35 = !DILocation(line: 52, column: 25, scope: !7)
!36 = !DILocation(line: 52, column: 45, scope: !7)
!37 = !DILocation(line: 52, column: 4, scope: !7)
