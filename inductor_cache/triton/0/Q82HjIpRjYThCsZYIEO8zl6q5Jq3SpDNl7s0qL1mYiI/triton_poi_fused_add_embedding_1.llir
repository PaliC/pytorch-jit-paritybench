; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_3 = internal constant [8 x i8] c"unknown\00"
@assertFile_3 = internal constant [74 x i8] c"inductor_cache/ks/cksxpfz5px63zb75iaofhczt2egccv5lyralhqcerc7cfvmbi6ap.py\00"
@assertMessage_3 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp36 < 13\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/ks/cksxpfz5px63zb75iaofhczt2egccv5lyralhqcerc7cfvmbi6ap.py\00"
@assertMessage_2 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp27 < 32\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/ks/cksxpfz5px63zb75iaofhczt2egccv5lyralhqcerc7cfvmbi6ap.py\00"
@assertMessage_1 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp18 < 7\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/ks/cksxpfz5px63zb75iaofhczt2egccv5lyralhqcerc7cfvmbi6ap.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp10 < 24\00"

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_add_embedding_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !11 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %11 = shl i32 %10, 6, !dbg !13
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %13 = shl i32 %12, 1, !dbg !14
  %14 = and i32 %13, 2, !dbg !14
  %15 = and i32 %13, 62, !dbg !14
  %16 = or disjoint i32 %11, %15, !dbg !15
  %17 = or disjoint i32 %14, %11, !dbg !15
  %18 = or disjoint i32 %17, 1, !dbg !15
  %19 = icmp slt i32 %16, 64, !dbg !16
  %.frozen = freeze i32 %16, !dbg !17
  %20 = sdiv i32 %.frozen, 4, !dbg !17
  %21 = srem i32 %20, 4, !dbg !18
  %22 = mul i32 %20, 4, !dbg !19
  %.decomposed = sub i32 %.frozen, %22, !dbg !19
  %23 = srem i32 %18, 4, !dbg !19
  %24 = sdiv i32 %16, 16, !dbg !20
  %25 = sext i32 %16 to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !21
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %19) #3, !dbg !22
  %28 = sext i32 %21 to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !23
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %19) #3, !dbg !24
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %19) #3, !dbg !24
  %32 = shl nsw i32 %.decomposed, 2, !dbg !25
  %33 = shl nsw i32 %23, 2, !dbg !25
  %34 = add nsw i32 %21, %32, !dbg !26
  %35 = add nsw i32 %21, %33, !dbg !26
  %36 = sext i32 %34 to i64, !dbg !27
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !27
  %38 = sext i32 %35 to i64, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %19) #3, !dbg !28
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %19) #3, !dbg !28
  %42 = or disjoint i32 %32, 3, !dbg !29
  %43 = or disjoint i32 %33, 3, !dbg !29
  %44 = shl nsw i32 %24, 4, !dbg !30
  %45 = add i32 %42, %44, !dbg !31
  %46 = add i32 %43, %44, !dbg !31
  %47 = sext i32 %45 to i64, !dbg !32
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !32
  %49 = sext i32 %46 to i64, !dbg !32
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !32
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %19) #3, !dbg !33
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %19) #3, !dbg !33
  %53 = or disjoint i32 %32, 2, !dbg !34
  %54 = or disjoint i32 %33, 2, !dbg !34
  %55 = add i32 %53, %44, !dbg !35
  %56 = add i32 %54, %44, !dbg !35
  %57 = sext i32 %55 to i64, !dbg !36
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !36
  %59 = sext i32 %56 to i64, !dbg !36
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !36
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %19) #3, !dbg !37
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %19) #3, !dbg !37
  %63 = or disjoint i32 %32, 1, !dbg !38
  %64 = or disjoint i32 %33, 1, !dbg !38
  %65 = add i32 %63, %44, !dbg !39
  %66 = add i32 %64, %44, !dbg !39
  %67 = sext i32 %65 to i64, !dbg !40
  %68 = getelementptr float, ptr addrspace(1) %3, i64 %67, !dbg !40
  %69 = sext i32 %66 to i64, !dbg !40
  %70 = getelementptr float, ptr addrspace(1) %3, i64 %69, !dbg !40
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %19) #3, !dbg !41
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %19) #3, !dbg !41
  %73 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !41
  %74 = insertelement <2 x i32> %73, i32 %71, i64 1, !dbg !41
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !41
  %76 = add i32 %32, %44, !dbg !42
  %77 = add i32 %33, %44, !dbg !42
  %78 = sext i32 %76 to i64, !dbg !43
  %79 = getelementptr float, ptr addrspace(1) %3, i64 %78, !dbg !43
  %80 = sext i32 %77 to i64, !dbg !43
  %81 = getelementptr float, ptr addrspace(1) %3, i64 %80, !dbg !43
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %19) #3, !dbg !44
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %19) #3, !dbg !44
  %84 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !44
  %85 = insertelement <2 x i32> %84, i32 %83, i64 1, !dbg !44
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !44
  %87 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !33
  %88 = insertelement <2 x i32> %87, i32 %52, i64 1, !dbg !33
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !33
  %90 = fptosi <2 x float> %89 to <2 x i64>, !dbg !45
  %91 = add <2 x i64> %90, splat (i64 24), !dbg !46
  %92 = icmp slt <2 x i64> %90, zeroinitializer, !dbg !47
  %93 = select <2 x i1> %92, <2 x i64> %91, <2 x i64> %90, !dbg !48
  %94 = icmp ugt <2 x i64> %93, splat (i64 23), !dbg !49
  %shift = shufflevector <2 x i1> %94, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %95 = or <2 x i1> %94, %shift, !dbg !50
  %.not13 = extractelement <2 x i1> %95, i64 0, !dbg !50
  %96 = and i1 %19, %.not13, !dbg !50
  br i1 %96, label %97, label %98, !dbg !50

97:                                               ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 42, ptr nonnull @assertFunc_0, i64 1), !dbg !50
  unreachable, !dbg !50

98:                                               ; preds = %9
  %99 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !37
  %100 = insertelement <2 x i32> %99, i32 %62, i64 1, !dbg !37
  %101 = bitcast <2 x i32> %100 to <2 x float>, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %102 = extractelement <2 x i64> %93, i64 0, !dbg !51
  %.idx = shl i64 %102, 4, !dbg !51
  %103 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx, !dbg !51
  %104 = getelementptr float, ptr addrspace(1) %103, i64 %28, !dbg !51
  %105 = extractelement <2 x i64> %93, i64 1, !dbg !51
  %.idx4 = shl i64 %105, 4, !dbg !51
  %106 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx4, !dbg !51
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %28, !dbg !51
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %19) #3, !dbg !52
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %19) #3, !dbg !52
  %110 = fptosi <2 x float> %101 to <2 x i64>, !dbg !53
  %111 = add <2 x i64> %110, splat (i64 7), !dbg !54
  %112 = icmp slt <2 x i64> %110, zeroinitializer, !dbg !55
  %113 = select <2 x i1> %112, <2 x i64> %111, <2 x i64> %110, !dbg !56
  %114 = icmp ugt <2 x i64> %113, splat (i64 6), !dbg !57
  %shift20 = shufflevector <2 x i1> %114, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !58
  %115 = or <2 x i1> %114, %shift20, !dbg !58
  %.not57 = extractelement <2 x i1> %115, i64 0, !dbg !58
  %116 = and i1 %19, %.not57, !dbg !58
  br i1 %116, label %117, label %118, !dbg !58

117:                                              ; preds = %98
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 49, ptr nonnull @assertFunc_1, i64 1), !dbg !58
  unreachable, !dbg !58

118:                                              ; preds = %98
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %119 = extractelement <2 x i64> %113, i64 0, !dbg !59
  %.idx8 = shl i64 %119, 4, !dbg !59
  %120 = getelementptr i8, ptr addrspace(1) %5, i64 %.idx8, !dbg !59
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %28, !dbg !59
  %122 = extractelement <2 x i64> %113, i64 1, !dbg !59
  %.idx9 = shl i64 %122, 4, !dbg !59
  %123 = getelementptr i8, ptr addrspace(1) %5, i64 %.idx9, !dbg !59
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %28, !dbg !59
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %19) #3, !dbg !60
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %19) #3, !dbg !60
  %127 = fptosi <2 x float> %75 to <2 x i64>, !dbg !61
  %128 = lshr <2 x i64> %127, splat (i64 58), !dbg !62
  %129 = and <2 x i64> %128, splat (i64 32), !dbg !62
  %130 = add <2 x i64> %129, %127, !dbg !62
  %131 = extractelement <2 x i64> %130, i64 0, !dbg !63
  %132 = extractelement <2 x i64> %130, i64 1, !dbg !63
  %133 = or i64 %131, %132, !dbg !63
  %.not1012 = icmp ugt i64 %133, 31, !dbg !63
  %134 = and i1 %19, %.not1012, !dbg !63
  br i1 %134, label %135, label %136, !dbg !63

135:                                              ; preds = %118
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 57, ptr nonnull @assertFunc_2, i64 1), !dbg !63
  unreachable, !dbg !63

136:                                              ; preds = %118
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %.idx13 = shl i64 %132, 4, !dbg !64
  %137 = getelementptr i8, ptr addrspace(1) %6, i64 %.idx13, !dbg !64
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %28, !dbg !64
  %.idx14 = shl i64 %131, 4, !dbg !64
  %139 = getelementptr i8, ptr addrspace(1) %6, i64 %.idx14, !dbg !64
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %28, !dbg !64
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %19) #3, !dbg !65
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %19) #3, !dbg !65
  %143 = fptosi <2 x float> %86 to <2 x i64>, !dbg !66
  %144 = add <2 x i64> %143, splat (i64 13), !dbg !67
  %145 = icmp slt <2 x i64> %143, zeroinitializer, !dbg !68
  %146 = select <2 x i1> %145, <2 x i64> %144, <2 x i64> %143, !dbg !69
  %147 = icmp ugt <2 x i64> %146, splat (i64 12), !dbg !70
  %shift21 = shufflevector <2 x i1> %147, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !71
  %148 = or <2 x i1> %147, %shift21, !dbg !71
  %.not1517 = extractelement <2 x i1> %148, i64 0, !dbg !71
  %149 = and i1 %19, %.not1517, !dbg !71
  br i1 %149, label %150, label %151, !dbg !71

150:                                              ; preds = %136
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 65, ptr nonnull @assertFunc_3, i64 1), !dbg !71
  unreachable, !dbg !71

151:                                              ; preds = %136
  %152 = bitcast i32 %109 to float, !dbg !52
  %153 = bitcast i32 %126 to float, !dbg !60
  %154 = fadd float %152, %153, !dbg !72
  %155 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !24
  %156 = insertelement <2 x i32> %155, i32 %142, i64 1, !dbg !24
  %157 = bitcast <2 x i32> %156 to <2 x float>, !dbg !24
  %158 = bitcast i32 %108 to float, !dbg !52
  %159 = bitcast i32 %125 to float, !dbg !60
  %160 = fadd float %158, %159, !dbg !72
  %161 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !24
  %162 = insertelement <2 x i32> %161, i32 %141, i64 1, !dbg !24
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !24
  %164 = extractvalue { i32, i32 } %27, 1, !dbg !22
  %165 = extractvalue { i32, i32 } %27, 0, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %166 = extractelement <2 x i64> %146, i64 0, !dbg !73
  %.idx18 = shl i64 %166, 4, !dbg !73
  %167 = getelementptr i8, ptr addrspace(1) %7, i64 %.idx18, !dbg !73
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %28, !dbg !73
  %169 = extractelement <2 x i64> %146, i64 1, !dbg !73
  %.idx19 = shl i64 %169, 4, !dbg !73
  %170 = getelementptr i8, ptr addrspace(1) %7, i64 %.idx19, !dbg !73
  %171 = getelementptr float, ptr addrspace(1) %170, i64 %28, !dbg !73
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %19) #3, !dbg !74
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %19) #3, !dbg !74
  %174 = insertelement <2 x i32> poison, i32 %165, i64 0, !dbg !75
  %175 = bitcast <2 x i32> %174 to <2 x float>, !dbg !75
  %176 = insertelement <2 x float> %175, float %160, i64 1, !dbg !75
  %177 = fadd <2 x float> %176, %163, !dbg !75
  %178 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !28
  %179 = insertelement <2 x i32> %178, i32 %172, i64 1, !dbg !28
  %180 = bitcast <2 x i32> %179 to <2 x float>, !dbg !28
  %181 = fadd <2 x float> %177, %180, !dbg !76
  %182 = insertelement <2 x i32> poison, i32 %164, i64 0, !dbg !75
  %183 = bitcast <2 x i32> %182 to <2 x float>, !dbg !75
  %184 = insertelement <2 x float> %183, float %154, i64 1, !dbg !75
  %185 = fadd <2 x float> %184, %157, !dbg !75
  %186 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !28
  %187 = insertelement <2 x i32> %186, i32 %173, i64 1, !dbg !28
  %188 = bitcast <2 x i32> %187 to <2 x float>, !dbg !28
  %189 = fadd <2 x float> %185, %188, !dbg !76
  %190 = extractelement <2 x float> %181, i64 1, !dbg !77
  %191 = fadd float %190, 0.000000e+00, !dbg !77
  %192 = extractelement <2 x float> %189, i64 1, !dbg !77
  %193 = fadd float %192, 0.000000e+00, !dbg !77
  %194 = extractelement <2 x float> %181, i64 0, !dbg !78
  %195 = fadd float %194, %191, !dbg !78
  %196 = extractelement <2 x float> %189, i64 0, !dbg !78
  %197 = fadd float %196, %193, !dbg !78
  %198 = bitcast float %195 to i32, !dbg !79
  %199 = bitcast float %197 to i32, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %198, i32 %199, ptr addrspace(1) %26, i1 %19) #3, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cksxpfz5px63zb75iaofhczt2egccv5lyralhqcerc7cfvmbi6ap.py", directory: "inductor_cache/ks")
!4 = !{ptr @triton_poi_fused_add_embedding_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_embedding_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_add_embedding_1", linkageName: "triton_poi_fused_add_embedding_1", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 21, scope: !11)
!18 = !DILocation(line: 25, column: 26, scope: !11)
!19 = !DILocation(line: 26, column: 19, scope: !11)
!20 = !DILocation(line: 27, column: 19, scope: !11)
!21 = !DILocation(line: 28, column: 34, scope: !11)
!22 = !DILocation(line: 28, column: 39, scope: !11)
!23 = !DILocation(line: 29, column: 30, scope: !11)
!24 = !DILocation(line: 29, column: 35, scope: !11)
!25 = !DILocation(line: 30, column: 37, scope: !11)
!26 = !DILocation(line: 30, column: 35, scope: !11)
!27 = !DILocation(line: 30, column: 30, scope: !11)
!28 = !DILocation(line: 30, column: 42, scope: !11)
!29 = !DILocation(line: 31, column: 34, scope: !11)
!30 = !DILocation(line: 31, column: 44, scope: !11)
!31 = !DILocation(line: 31, column: 41, scope: !11)
!32 = !DILocation(line: 31, column: 30, scope: !11)
!33 = !DILocation(line: 31, column: 49, scope: !11)
!34 = !DILocation(line: 32, column: 35, scope: !11)
!35 = !DILocation(line: 32, column: 42, scope: !11)
!36 = !DILocation(line: 32, column: 31, scope: !11)
!37 = !DILocation(line: 32, column: 50, scope: !11)
!38 = !DILocation(line: 33, column: 35, scope: !11)
!39 = !DILocation(line: 33, column: 42, scope: !11)
!40 = !DILocation(line: 33, column: 31, scope: !11)
!41 = !DILocation(line: 33, column: 50, scope: !11)
!42 = !DILocation(line: 34, column: 38, scope: !11)
!43 = !DILocation(line: 34, column: 31, scope: !11)
!44 = !DILocation(line: 34, column: 46, scope: !11)
!45 = !DILocation(line: 37, column: 19, scope: !11)
!46 = !DILocation(line: 39, column: 18, scope: !11)
!47 = !DILocation(line: 40, column: 18, scope: !11)
!48 = !DILocation(line: 41, column: 33, scope: !11)
!49 = !DILocation(line: 42, column: 38, scope: !11)
!50 = !DILocation(line: 42, column: 63, scope: !11)
!51 = !DILocation(line: 43, column: 31, scope: !11)
!52 = !DILocation(line: 43, column: 46, scope: !11)
!53 = !DILocation(line: 44, column: 21, scope: !11)
!54 = !DILocation(line: 46, column: 20, scope: !11)
!55 = !DILocation(line: 47, column: 20, scope: !11)
!56 = !DILocation(line: 48, column: 35, scope: !11)
!57 = !DILocation(line: 49, column: 38, scope: !11)
!58 = !DILocation(line: 49, column: 62, scope: !11)
!59 = !DILocation(line: 50, column: 31, scope: !11)
!60 = !DILocation(line: 50, column: 46, scope: !11)
!61 = !DILocation(line: 52, column: 21, scope: !11)
!62 = !DILocation(line: 56, column: 35, scope: !11)
!63 = !DILocation(line: 57, column: 63, scope: !11)
!64 = !DILocation(line: 58, column: 31, scope: !11)
!65 = !DILocation(line: 58, column: 46, scope: !11)
!66 = !DILocation(line: 60, column: 21, scope: !11)
!67 = !DILocation(line: 62, column: 20, scope: !11)
!68 = !DILocation(line: 63, column: 20, scope: !11)
!69 = !DILocation(line: 64, column: 35, scope: !11)
!70 = !DILocation(line: 65, column: 38, scope: !11)
!71 = !DILocation(line: 65, column: 63, scope: !11)
!72 = !DILocation(line: 51, column: 20, scope: !11)
!73 = !DILocation(line: 66, column: 31, scope: !11)
!74 = !DILocation(line: 66, column: 46, scope: !11)
!75 = !DILocation(line: 35, column: 18, scope: !11)
!76 = !DILocation(line: 36, column: 18, scope: !11)
!77 = !DILocation(line: 69, column: 20, scope: !11)
!78 = !DILocation(line: 70, column: 19, scope: !11)
!79 = !DILocation(line: 71, column: 40, scope: !11)
!80 = !DILocation(line: 71, column: 4, scope: !11)
