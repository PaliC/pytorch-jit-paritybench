; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %14, 16, !dbg !12
  %16 = shl i32 %12, 2, !dbg !12
  %17 = and i32 %16, 28, !dbg !12
  %18 = or disjoint i32 %11, %14, !dbg !13
  %19 = or disjoint i32 %11, %15, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %21 = shl i32 %20, 5, !dbg !15
  %22 = or disjoint i32 %21, %17, !dbg !16
  %23 = icmp slt i32 %22, 32, !dbg !17
  %24 = shl i32 %18, 5, !dbg !18
  %25 = shl i32 %19, 5, !dbg !18
  %26 = add i32 %22, %24, !dbg !19
  %27 = add i32 %22, %25, !dbg !19
  %28 = sext i32 %26 to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !20
  %30 = sext i32 %27 to i64, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !20
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %23) #4, !dbg !21
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %23) #4, !dbg !21
  %34 = sext i32 %22 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %23) #4, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !24
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %23) #4, !dbg !25
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !25
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !25
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !25
  %43 = bitcast i32 %39 to float, !dbg !25
  %44 = bitcast i32 %40 to float, !dbg !25
  %45 = bitcast i32 %41 to float, !dbg !25
  %46 = bitcast i32 %42 to float, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !26
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %23) #4, !dbg !27
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !28
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %23) #4, !dbg !29
  %51 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !30
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %23) #4, !dbg !31
  %53 = fadd float %43, 0x3EE4F8B580000000, !dbg !32
  %54 = fadd float %44, 0x3EE4F8B580000000, !dbg !32
  %55 = fadd float %45, 0x3EE4F8B580000000, !dbg !32
  %56 = fadd float %46, 0x3EE4F8B580000000, !dbg !32
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %57, 0, !dbg !33
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %58, 0, !dbg !33
  br i1 %.not.i, label %64, label %59, !dbg !33

59:                                               ; preds = %9
  br i1 %.not1.i, label %62, label %60, !dbg !33

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

64:                                               ; preds = %9
  br i1 %.not1.i, label %67, label %65, !dbg !33

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %60, %62, %65, %67
  %.0.i = phi float [ %61, %60 ], [ %63, %62 ], [ %66, %65 ], [ %68, %67 ], !dbg !33
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i15 = icmp eq i32 %69, 0, !dbg !33
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i18 = icmp eq i32 %70, 0, !dbg !33
  br i1 %.not.i15, label %76, label %71, !dbg !33

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %74, label %72, !dbg !33

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %79, label %77, !dbg !33

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

__nv_sqrtf.exit19:                                ; preds = %72, %74, %77, %79
  %.0.i17 = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !33
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i20 = icmp eq i32 %81, 0, !dbg !33
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i23 = icmp eq i32 %82, 0, !dbg !33
  br i1 %.not.i20, label %88, label %83, !dbg !33

83:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %86, label %84, !dbg !33

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

88:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %91, label %89, !dbg !33

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

__nv_sqrtf.exit24:                                ; preds = %84, %86, %89, %91
  %.0.i22 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !33
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i25 = icmp eq i32 %93, 0, !dbg !33
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i28 = icmp eq i32 %94, 0, !dbg !33
  br i1 %.not.i25, label %100, label %95, !dbg !33

95:                                               ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %98, label %96, !dbg !33

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

100:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %103, label %101, !dbg !33

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

__nv_sqrtf.exit29:                                ; preds = %96, %98, %101, %103
  %.0.i27 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !33
  %105 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !21
  %106 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %107 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !21
  %108 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %109 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !21
  %110 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %111 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !21
  %112 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %113 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !21
  %114 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !21
  %115 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !21
  %116 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !21
  %117 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !31
  %118 = bitcast i32 %117 to float, !dbg !31
  %119 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !31
  %120 = bitcast i32 %119 to float, !dbg !31
  %121 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !31
  %122 = bitcast i32 %121 to float, !dbg !31
  %123 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !31
  %124 = bitcast i32 %123 to float, !dbg !31
  %125 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !29
  %126 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !29
  %127 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !29
  %128 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !29
  %129 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !27
  %130 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !27
  %131 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !27
  %132 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !27
  %133 = or disjoint i32 %11, %17, !dbg !13
  %.frozen = freeze i32 %133, !dbg !34
  %134 = sdiv i32 %.frozen, 1024, !dbg !34
  %135 = mul i32 %134, 1024, !dbg !35
  %.decomposed = sub i32 %.frozen, %135, !dbg !35
  %136 = or disjoint i32 %21, %15, !dbg !16
  %137 = icmp slt i32 %136, 32, !dbg !17
  %138 = or disjoint i32 %21, %14, !dbg !16
  %139 = icmp slt i32 %138, 32, !dbg !17
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !36
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !36
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !36
  %144 = insertelement <4 x i32> poison, i32 %106, i64 0, !dbg !23
  %145 = insertelement <4 x i32> %144, i32 %108, i64 1, !dbg !23
  %146 = insertelement <4 x i32> %145, i32 %110, i64 2, !dbg !23
  %147 = insertelement <4 x i32> %146, i32 %112, i64 3, !dbg !23
  %148 = bitcast <4 x i32> %147 to <4 x float>, !dbg !23
  %149 = shufflevector <4 x float> %148, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !23
  %150 = insertelement <8 x i32> poison, i32 %105, i64 0, !dbg !21
  %151 = insertelement <8 x i32> %150, i32 %107, i64 1, !dbg !21
  %152 = insertelement <8 x i32> %151, i32 %109, i64 2, !dbg !21
  %153 = insertelement <8 x i32> %152, i32 %111, i64 3, !dbg !21
  %154 = insertelement <8 x i32> %153, i32 %113, i64 4, !dbg !21
  %155 = insertelement <8 x i32> %154, i32 %114, i64 5, !dbg !21
  %156 = insertelement <8 x i32> %155, i32 %115, i64 6, !dbg !21
  %157 = insertelement <8 x i32> %156, i32 %116, i64 7, !dbg !21
  %158 = bitcast <8 x i32> %157 to <8 x float>, !dbg !21
  %159 = fsub <8 x float> %158, %149, !dbg !37
  %160 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !29
  %161 = insertelement <4 x i32> %160, i32 %126, i64 1, !dbg !29
  %162 = insertelement <4 x i32> %161, i32 %127, i64 2, !dbg !29
  %163 = insertelement <4 x i32> %162, i32 %128, i64 3, !dbg !29
  %164 = bitcast <4 x i32> %163 to <4 x float>, !dbg !29
  %165 = shufflevector <4 x float> %164, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %166 = insertelement <4 x i32> poison, i32 %129, i64 0, !dbg !27
  %167 = insertelement <4 x i32> %166, i32 %130, i64 1, !dbg !27
  %168 = insertelement <4 x i32> %167, i32 %131, i64 2, !dbg !27
  %169 = insertelement <4 x i32> %168, i32 %132, i64 3, !dbg !27
  %170 = bitcast <4 x i32> %169 to <4 x float>, !dbg !27
  %171 = shufflevector <4 x float> %170, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %172 = insertelement <8 x float> poison, float %143, i64 0, !dbg !38
  %173 = insertelement <8 x float> %172, float %142, i64 1, !dbg !38
  %174 = insertelement <8 x float> %173, float %141, i64 2, !dbg !38
  %175 = insertelement <8 x float> %174, float %140, i64 3, !dbg !38
  %176 = shufflevector <8 x float> %175, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !38
  %177 = fmul <8 x float> %159, %176, !dbg !38
  %178 = fmul <8 x float> %177, %171, !dbg !39
  %179 = fadd <8 x float> %178, %165, !dbg !40
  %180 = fcmp ogt <8 x float> %179, zeroinitializer, !dbg !41
  %181 = extractelement <8 x float> %179, i64 7, !dbg !42
  %182 = fmul float %181, %124, !dbg !43
  %183 = extractelement <8 x float> %179, i64 6, !dbg !42
  %184 = fmul float %183, %122, !dbg !43
  %185 = extractelement <8 x float> %179, i64 5, !dbg !42
  %186 = fmul float %185, %120, !dbg !43
  %187 = extractelement <8 x float> %179, i64 4, !dbg !42
  %188 = fmul float %187, %118, !dbg !43
  %189 = extractelement <8 x float> %179, i64 3, !dbg !42
  %190 = fmul float %189, %124, !dbg !43
  %191 = extractelement <8 x float> %179, i64 2, !dbg !42
  %192 = fmul float %191, %122, !dbg !43
  %193 = extractelement <8 x float> %179, i64 1, !dbg !42
  %194 = fmul float %193, %120, !dbg !43
  %195 = extractelement <8 x float> %179, i64 0, !dbg !42
  %196 = fmul float %195, %118, !dbg !43
  %197 = extractelement <8 x i1> %180, i64 7, !dbg !42
  %198 = select i1 %197, float %181, float %182, !dbg !42
  %199 = extractelement <8 x i1> %180, i64 6, !dbg !42
  %200 = select i1 %199, float %183, float %184, !dbg !42
  %201 = extractelement <8 x i1> %180, i64 5, !dbg !42
  %202 = select i1 %201, float %185, float %186, !dbg !42
  %203 = extractelement <8 x i1> %180, i64 4, !dbg !42
  %204 = select i1 %203, float %187, float %188, !dbg !42
  %205 = extractelement <8 x i1> %180, i64 3, !dbg !42
  %206 = select i1 %205, float %189, float %190, !dbg !42
  %207 = extractelement <8 x i1> %180, i64 2, !dbg !42
  %208 = select i1 %207, float %191, float %192, !dbg !42
  %209 = extractelement <8 x i1> %180, i64 1, !dbg !42
  %210 = select i1 %209, float %193, float %194, !dbg !42
  %211 = extractelement <8 x i1> %180, i64 0, !dbg !42
  %212 = select i1 %211, float %195, float %196, !dbg !42
  %213 = shl i32 %138, 10, !dbg !44
  %214 = shl i32 %136, 10, !dbg !44
  %215 = mul i32 %134, 35840, !dbg !45
  %216 = add i32 %215, %.decomposed, !dbg !46
  %217 = add i32 %216, %213, !dbg !47
  %218 = add i32 %216, %214, !dbg !47
  %219 = sext i32 %217 to i64, !dbg !48
  %220 = getelementptr float, ptr addrspace(1) %6, i64 %219, !dbg !48
  %221 = sext i32 %218 to i64, !dbg !48
  %222 = getelementptr float, ptr addrspace(1) %6, i64 %221, !dbg !48
  %223 = shl i32 %12, 7, !dbg !49
  %224 = and i32 %223, 896, !dbg !49
  %225 = or disjoint i32 %224, %14, !dbg !49
  %226 = and i32 %16, 508, !dbg !49
  %227 = lshr exact i32 %224, 1, !dbg !49
  %228 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %227, !dbg !49
  %229 = getelementptr float, ptr addrspace(3) %228, i32 %225, !dbg !49
  %230 = bitcast float %198 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %230, i1 true) #4, !dbg !49
  %231 = or disjoint i32 %225, 32, !dbg !49
  %232 = lshr i32 %231, 3, !dbg !49
  %233 = and i32 %232, 116, !dbg !49
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i32 %233, !dbg !49
  %235 = getelementptr float, ptr addrspace(3) %234, i32 %231, !dbg !49
  %236 = bitcast float %200 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #4, !dbg !49
  %237 = or disjoint i32 %225, 64, !dbg !49
  %238 = lshr i32 %237, 3, !dbg !49
  %239 = and i32 %238, 120, !dbg !49
  %240 = getelementptr float, ptr addrspace(3) @global_smem, i32 %239, !dbg !49
  %241 = getelementptr float, ptr addrspace(3) %240, i32 %237, !dbg !49
  %242 = bitcast float %202 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #4, !dbg !49
  %243 = or disjoint i32 %225, 96, !dbg !49
  %244 = lshr i32 %243, 3, !dbg !49
  %245 = and i32 %244, 124, !dbg !49
  %246 = getelementptr float, ptr addrspace(3) @global_smem, i32 %245, !dbg !49
  %247 = getelementptr float, ptr addrspace(3) %246, i32 %243, !dbg !49
  %248 = bitcast float %204 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 true) #4, !dbg !49
  %249 = or disjoint i32 %225, 16, !dbg !49
  %250 = getelementptr float, ptr addrspace(3) %228, i32 %249, !dbg !49
  %251 = bitcast float %206 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 true) #4, !dbg !49
  %252 = or disjoint i32 %225, 48, !dbg !49
  %253 = lshr i32 %252, 3, !dbg !49
  %254 = and i32 %253, 116, !dbg !49
  %255 = getelementptr float, ptr addrspace(3) @global_smem, i32 %254, !dbg !49
  %256 = getelementptr float, ptr addrspace(3) %255, i32 %252, !dbg !49
  %257 = bitcast float %208 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %257, i1 true) #4, !dbg !49
  %258 = or disjoint i32 %225, 80, !dbg !49
  %259 = lshr i32 %258, 3, !dbg !49
  %260 = and i32 %259, 120, !dbg !49
  %261 = getelementptr float, ptr addrspace(3) @global_smem, i32 %260, !dbg !49
  %262 = getelementptr float, ptr addrspace(3) %261, i32 %258, !dbg !49
  %263 = bitcast float %210 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %263, i1 true) #4, !dbg !49
  %264 = or disjoint i32 %225, 112, !dbg !49
  %265 = lshr i32 %264, 3, !dbg !49
  %266 = and i32 %265, 124, !dbg !49
  %267 = getelementptr float, ptr addrspace(3) @global_smem, i32 %266, !dbg !49
  %268 = getelementptr float, ptr addrspace(3) %267, i32 %264, !dbg !49
  %269 = bitcast float %212 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %270 = lshr i32 %16, 3, !dbg !49
  %271 = and i32 %270, 60, !dbg !49
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %271, !dbg !49
  %273 = getelementptr inbounds float, ptr addrspace(3) %272, i32 %226, !dbg !49
  %274 = or disjoint i32 %226, 512, !dbg !49
  %275 = lshr i32 %274, 3, !dbg !49
  %276 = and i32 %275, 124, !dbg !49
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %276, !dbg !49
  %278 = getelementptr inbounds float, ptr addrspace(3) %277, i32 %274, !dbg !49
  %279 = load <4 x i32>, ptr addrspace(3) %278, align 16, !dbg !49
  %.extract = load i32, ptr addrspace(3) %273, align 16, !dbg !49
  %280 = getelementptr inbounds i8, ptr addrspace(3) %273, i32 4, !dbg !49
  %.extract8 = load i32, ptr addrspace(3) %280, align 4, !dbg !49
  %281 = getelementptr inbounds i8, ptr addrspace(3) %273, i32 8, !dbg !49
  %.extract9 = load i32, ptr addrspace(3) %281, align 8, !dbg !49
  %282 = getelementptr inbounds i8, ptr addrspace(3) %273, i32 12, !dbg !49
  %.extract10 = load i32, ptr addrspace(3) %282, align 4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %220, i1 %139) #4, !dbg !49
  %.extract11 = extractelement <4 x i32> %279, i64 0, !dbg !49
  %.extract12 = extractelement <4 x i32> %279, i64 1, !dbg !49
  %.extract13 = extractelement <4 x i32> %279, i64 2, !dbg !49
  %.extract14 = extractelement <4 x i32> %279, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %222, i1 %137) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cihstqvx65caegtin2ji2f55bemani6zbgnwusoiacmbb6vz4bkw.py", directory: "inductor_cache/ih")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 32, column: 38, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 36, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 31, scope: !7)
!31 = !DILocation(line: 37, column: 36, scope: !7)
!32 = !DILocation(line: 40, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 26, scope: !7)
!34 = !DILocation(line: 31, column: 19, scope: !7)
!35 = !DILocation(line: 30, column: 19, scope: !7)
!36 = !DILocation(line: 43, column: 18, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 46, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 35, scope: !7)
!43 = !DILocation(line: 51, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 35, scope: !7)
!45 = !DILocation(line: 53, column: 46, scope: !7)
!46 = !DILocation(line: 53, column: 30, scope: !7)
!47 = !DILocation(line: 53, column: 40, scope: !7)
!48 = !DILocation(line: 53, column: 25, scope: !7)
!49 = !DILocation(line: 53, column: 58, scope: !7)
!50 = !DILocation(line: 53, column: 4, scope: !7)
