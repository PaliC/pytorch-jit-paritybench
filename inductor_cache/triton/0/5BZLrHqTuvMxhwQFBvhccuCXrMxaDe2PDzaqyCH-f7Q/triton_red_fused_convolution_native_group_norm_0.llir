; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_convolution_native_group_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = icmp slt i32 %8, 256, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 511, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %11, 1024, !dbg !12
  %14 = or disjoint i32 %11, 1536, !dbg !12
  %15 = shl i32 %10, 2, !dbg !12
  %16 = and i32 %15, 2044, !dbg !12
  %17 = srem i32 %8, 64, !dbg !13
  %18 = shl i32 %8, 13, !dbg !14
  %19 = shl nsw i32 %17, 1, !dbg !15
  %20 = or disjoint i32 %18, %16
  %21 = shl nuw nsw i32 %16, 1
  %22 = zext nneg i32 %21 to i64
  %23 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %22
  %24 = or disjoint i32 %21, 2
  %25 = zext nneg i32 %24 to i64
  %26 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %25
  %27 = or disjoint i32 %21, 4
  %28 = zext nneg i32 %27 to i64
  %29 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %28
  %30 = or disjoint i32 %21, 6
  %31 = zext nneg i32 %30 to i64
  %32 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %31
  %33 = shl nuw nsw i32 %11, 1
  %34 = zext nneg i32 %33 to i64
  %35 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %34
  %36 = shl nuw nsw i32 %12, 1
  %37 = zext nneg i32 %36 to i64
  %38 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %37
  %39 = shl nuw nsw i32 %13, 1
  %40 = zext nneg i32 %39 to i64
  %41 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %40
  %42 = shl nuw nsw i32 %14, 1
  %43 = zext nneg i32 %42 to i64
  %44 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %43
  %45 = zext nneg i32 %11 to i64
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %45
  %47 = zext nneg i32 %12 to i64
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %47
  %49 = zext nneg i32 %13 to i64
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %49
  %51 = zext nneg i32 %14 to i64
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %51
  %53 = zext nneg i32 %16 to i64
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %53
  %55 = sext i32 %20 to i64, !dbg !16
  %invariant.gep = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !16
  %56 = getelementptr inbounds i8, ptr addrspace(3) %54, i64 4
  %57 = getelementptr inbounds i8, ptr addrspace(3) %54, i64 8
  %58 = getelementptr inbounds i8, ptr addrspace(3) %54, i64 12
  br label %59, !dbg !16

59:                                               ; preds = %7, %._crit_edge
  %indvars.iv = phi i64 [ 0, %7 ], [ %indvars.iv.next, %._crit_edge ]
  %60 = phi float [ 0.000000e+00, %7 ], [ %148, %._crit_edge ]
  %61 = phi float [ 0.000000e+00, %7 ], [ %149, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %7 ], [ %150, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %7 ], [ %151, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %7 ], [ %144, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %7 ], [ %145, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %7 ], [ %146, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %7 ], [ %147, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %7 ], [ %140, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %7 ], [ %141, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %7 ], [ %142, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %7 ], [ %143, %._crit_edge ]
  %72 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !17
  %73 = lshr i32 %72, 12, !dbg !17
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !18
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #3, !dbg !19
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !19
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !19
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !19
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %79 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %23, <1 x i32> %79, i1 true) #3, !dbg !19
  %80 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %26, <1 x i32> %80, i1 true) #3, !dbg !19
  %81 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %29, <1 x i32> %81, i1 true) #3, !dbg !19
  %82 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %32, <1 x i32> %82, i1 true) #3, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %83 = load float, ptr addrspace(3) %35, align 8, !dbg !19
  %84 = load float, ptr addrspace(3) %38, align 8, !dbg !19
  %85 = load float, ptr addrspace(3) %41, align 8, !dbg !19
  %86 = load float, ptr addrspace(3) %44, align 8, !dbg !19
  %87 = add nuw nsw i32 %73, %19, !dbg !20
  %88 = sext i32 %87 to i64, !dbg !21
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !21
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %9, i32 0, i1 %9) #3, !dbg !22
  %91 = bitcast i32 %90 to float, !dbg !22
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %9, i32 0, i1 %9) #3, !dbg !22
  %93 = bitcast i32 %92 to float, !dbg !22
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %9, i32 0, i1 %9) #3, !dbg !22
  %95 = bitcast i32 %94 to float, !dbg !22
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %9, i32 0, i1 %9) #3, !dbg !22
  %97 = bitcast i32 %96 to float, !dbg !22
  %98 = fadd float %83, %91, !dbg !23
  %99 = fadd float %84, %93, !dbg !23
  %100 = fadd float %85, %95, !dbg !23
  %101 = fadd float %86, %97, !dbg !23
  %102 = icmp eq i64 %indvars.iv, 0, !dbg !24
  br i1 %102, label %._crit_edge, label %103, !dbg !25

103:                                              ; preds = %59
  %104 = fsub float %98, %68, !dbg !29
  %105 = fsub float %99, %69, !dbg !29
  %106 = fsub float %100, %70, !dbg !29
  %107 = fsub float %101, %71, !dbg !29
  %108 = fadd float %60, 1.000000e+00, !dbg !30
  %109 = fadd float %61, 1.000000e+00, !dbg !30
  %110 = fadd float %62, 1.000000e+00, !dbg !30
  %111 = fadd float %63, 1.000000e+00, !dbg !30
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %108) #3, !dbg !31
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %109) #3, !dbg !31
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %110) #3, !dbg !31
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %111) #3, !dbg !31
  %116 = fadd float %68, %112, !dbg !32
  %117 = fadd float %69, %113, !dbg !32
  %118 = fadd float %70, %114, !dbg !32
  %119 = fadd float %71, %115, !dbg !32
  %120 = fsub float %98, %116, !dbg !33
  %121 = fsub float %99, %117, !dbg !33
  %122 = fsub float %100, %118, !dbg !33
  %123 = fsub float %101, %119, !dbg !33
  %124 = fmul float %104, %120, !dbg !34
  %125 = fmul float %105, %121, !dbg !34
  %126 = fmul float %106, %122, !dbg !34
  %127 = fmul float %107, %123, !dbg !34
  %128 = fadd float %64, %124, !dbg !35
  %129 = fadd float %65, %125, !dbg !35
  %130 = fadd float %66, %126, !dbg !35
  %131 = fadd float %67, %127, !dbg !35
  br label %._crit_edge, !dbg !25

._crit_edge:                                      ; preds = %59, %103
  %132 = phi float [ %128, %103 ], [ 0.000000e+00, %59 ], !dbg !28
  %133 = phi float [ %129, %103 ], [ 0.000000e+00, %59 ], !dbg !28
  %134 = phi float [ %130, %103 ], [ 0.000000e+00, %59 ], !dbg !28
  %135 = phi float [ %131, %103 ], [ 0.000000e+00, %59 ], !dbg !28
  %.pn7 = phi float [ %116, %103 ], [ %98, %59 ]
  %.pn5 = phi float [ %117, %103 ], [ %99, %59 ]
  %.pn3 = phi float [ %118, %103 ], [ %100, %59 ]
  %.pn1 = phi float [ %119, %103 ], [ %101, %59 ]
  %136 = phi float [ %108, %103 ], [ 1.000000e+00, %59 ], !dbg !28
  %137 = phi float [ %109, %103 ], [ 1.000000e+00, %59 ], !dbg !28
  %138 = phi float [ %110, %103 ], [ 1.000000e+00, %59 ], !dbg !28
  %139 = phi float [ %111, %103 ], [ 1.000000e+00, %59 ], !dbg !28
  %140 = select i1 %9, float %.pn7, float %68, !dbg !36
  %141 = select i1 %9, float %.pn5, float %69, !dbg !36
  %142 = select i1 %9, float %.pn3, float %70, !dbg !36
  %143 = select i1 %9, float %.pn1, float %71, !dbg !36
  %144 = select i1 %9, float %132, float %64, !dbg !37
  %145 = select i1 %9, float %133, float %65, !dbg !37
  %146 = select i1 %9, float %134, float %66, !dbg !37
  %147 = select i1 %9, float %135, float %67, !dbg !37
  %148 = select i1 %9, float %136, float %60, !dbg !38
  %149 = select i1 %9, float %137, float %61, !dbg !38
  %150 = select i1 %9, float %138, float %62, !dbg !38
  %151 = select i1 %9, float %139, float %63, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %152 = bitcast float %98 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %152, i1 true) #3, !dbg !39
  %153 = bitcast float %99 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %153, i1 true) #3, !dbg !39
  %154 = bitcast float %100 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %154, i1 true) #3, !dbg !39
  %155 = bitcast float %101 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %155, i1 true) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %.extract = load i32, ptr addrspace(3) %54, align 16, !dbg !39
  %.extract11 = load i32, ptr addrspace(3) %56, align 4, !dbg !39
  %.extract12 = load i32, ptr addrspace(3) %57, align 8, !dbg !39
  %.extract13 = load i32, ptr addrspace(3) %58, align 4, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %gep, i1 %9) #3, !dbg !39
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !16
  %156 = icmp samesign ult i64 %indvars.iv, 6144, !dbg !16
  br i1 %156, label %59, label %157, !dbg !16

157:                                              ; preds = %._crit_edge
  %158 = lshr i32 %10, 5, !dbg !12
  %159 = and i32 %10, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %160 = fsub float %141, %140, !dbg !42
  %161 = fadd float %148, %149, !dbg !44
  %162 = fcmp oeq float %161, 0.000000e+00, !dbg !45
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float %161) #3, !dbg !46
  %164 = select i1 %162, float 0.000000e+00, float %163, !dbg !47
  %165 = fmul float %160, %164, !dbg !48
  %166 = fadd float %140, %165, !dbg !49
  %167 = fadd float %144, %145, !dbg !50
  %168 = fmul float %160, %160, !dbg !51
  %169 = fmul float %168, %148, !dbg !52
  %170 = fmul float %169, %164, !dbg !53
  %171 = fadd float %167, %170, !dbg !54
  %172 = fsub float %142, %166, !dbg !42
  %173 = fadd float %150, %161, !dbg !44
  %174 = fcmp oeq float %173, 0.000000e+00, !dbg !45
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float %173) #3, !dbg !46
  %176 = select i1 %174, float 0.000000e+00, float %175, !dbg !47
  %177 = fmul float %176, %172, !dbg !48
  %178 = fadd float %166, %177, !dbg !49
  %179 = fadd float %146, %171, !dbg !50
  %180 = fmul float %172, %172, !dbg !51
  %181 = fmul float %161, %180, !dbg !52
  %182 = fmul float %176, %181, !dbg !53
  %183 = fadd float %179, %182, !dbg !54
  %184 = fsub float %143, %178, !dbg !42
  %185 = fadd float %151, %173, !dbg !44
  %186 = fcmp oeq float %185, 0.000000e+00, !dbg !45
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float %185) #3, !dbg !46
  %188 = select i1 %186, float 0.000000e+00, float %187, !dbg !47
  %189 = fmul float %188, %184, !dbg !48
  %190 = fadd float %178, %189, !dbg !49
  %191 = fadd float %147, %183, !dbg !50
  %192 = fmul float %184, %184, !dbg !51
  %193 = fmul float %173, %192, !dbg !52
  %194 = fmul float %188, %193, !dbg !53
  %195 = fadd float %191, %194, !dbg !54
  %196 = bitcast float %190 to i32, !dbg !40
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 16, i32 31), !dbg !40
  %198 = bitcast i32 %197 to float, !dbg !40
  %199 = bitcast float %195 to i32, !dbg !40
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 16, i32 31), !dbg !40
  %201 = bitcast i32 %200 to float, !dbg !40
  %202 = bitcast float %185 to i32, !dbg !40
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 16, i32 31), !dbg !40
  %204 = bitcast i32 %203 to float, !dbg !40
  %205 = fsub float %198, %190, !dbg !42
  %206 = fadd float %185, %204, !dbg !44
  %207 = fcmp oeq float %206, 0.000000e+00, !dbg !45
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %204, float %206) #3, !dbg !46
  %209 = select i1 %207, float 0.000000e+00, float %208, !dbg !47
  %210 = fmul float %209, %205, !dbg !48
  %211 = fadd float %190, %210, !dbg !49
  %212 = fadd float %195, %201, !dbg !50
  %213 = fmul float %205, %205, !dbg !51
  %214 = fmul float %185, %213, !dbg !52
  %215 = fmul float %209, %214, !dbg !53
  %216 = fadd float %212, %215, !dbg !54
  %217 = bitcast float %211 to i32, !dbg !40
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 8, i32 31), !dbg !40
  %219 = bitcast i32 %218 to float, !dbg !40
  %220 = bitcast float %216 to i32, !dbg !40
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 8, i32 31), !dbg !40
  %222 = bitcast i32 %221 to float, !dbg !40
  %223 = bitcast float %206 to i32, !dbg !40
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 8, i32 31), !dbg !40
  %225 = bitcast i32 %224 to float, !dbg !40
  %226 = fsub float %219, %211, !dbg !42
  %227 = fadd float %206, %225, !dbg !44
  %228 = fcmp oeq float %227, 0.000000e+00, !dbg !45
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %225, float %227) #3, !dbg !46
  %230 = select i1 %228, float 0.000000e+00, float %229, !dbg !47
  %231 = fmul float %226, %230, !dbg !48
  %232 = fadd float %211, %231, !dbg !49
  %233 = fadd float %216, %222, !dbg !50
  %234 = fmul float %226, %226, !dbg !51
  %235 = fmul float %206, %234, !dbg !52
  %236 = fmul float %230, %235, !dbg !53
  %237 = fadd float %233, %236, !dbg !54
  %238 = bitcast float %232 to i32, !dbg !40
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 4, i32 31), !dbg !40
  %240 = bitcast i32 %239 to float, !dbg !40
  %241 = bitcast float %237 to i32, !dbg !40
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 4, i32 31), !dbg !40
  %243 = bitcast i32 %242 to float, !dbg !40
  %244 = bitcast float %227 to i32, !dbg !40
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 4, i32 31), !dbg !40
  %246 = bitcast i32 %245 to float, !dbg !40
  %247 = fsub float %240, %232, !dbg !42
  %248 = fadd float %227, %246, !dbg !44
  %249 = fcmp oeq float %248, 0.000000e+00, !dbg !45
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %246, float %248) #3, !dbg !46
  %251 = select i1 %249, float 0.000000e+00, float %250, !dbg !47
  %252 = fmul float %247, %251, !dbg !48
  %253 = fadd float %232, %252, !dbg !49
  %254 = fadd float %237, %243, !dbg !50
  %255 = fmul float %247, %247, !dbg !51
  %256 = fmul float %227, %255, !dbg !52
  %257 = fmul float %251, %256, !dbg !53
  %258 = fadd float %254, %257, !dbg !54
  %259 = bitcast float %253 to i32, !dbg !40
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 2, i32 31), !dbg !40
  %261 = bitcast i32 %260 to float, !dbg !40
  %262 = bitcast float %258 to i32, !dbg !40
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 2, i32 31), !dbg !40
  %264 = bitcast i32 %263 to float, !dbg !40
  %265 = bitcast float %248 to i32, !dbg !40
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 2, i32 31), !dbg !40
  %267 = bitcast i32 %266 to float, !dbg !40
  %268 = fsub float %261, %253, !dbg !42
  %269 = fadd float %248, %267, !dbg !44
  %270 = fcmp oeq float %269, 0.000000e+00, !dbg !45
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %267, float %269) #3, !dbg !46
  %272 = select i1 %270, float 0.000000e+00, float %271, !dbg !47
  %273 = fmul float %268, %272, !dbg !48
  %274 = fadd float %253, %273, !dbg !49
  %275 = fadd float %258, %264, !dbg !50
  %276 = fmul float %268, %268, !dbg !51
  %277 = fmul float %248, %276, !dbg !52
  %278 = fmul float %272, %277, !dbg !53
  %279 = fadd float %275, %278, !dbg !54
  %280 = bitcast float %274 to i32, !dbg !40
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 1, i32 31), !dbg !40
  %282 = bitcast i32 %281 to float, !dbg !40
  %283 = bitcast float %279 to i32, !dbg !40
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 1, i32 31), !dbg !40
  %285 = bitcast i32 %284 to float, !dbg !40
  %286 = bitcast float %269 to i32, !dbg !40
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 1, i32 31), !dbg !40
  %288 = bitcast i32 %287 to float, !dbg !40
  %289 = fsub float %282, %274, !dbg !42
  %290 = fadd float %269, %288, !dbg !44
  %291 = fcmp oeq float %290, 0.000000e+00, !dbg !45
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %288, float %290) #3, !dbg !46
  %293 = select i1 %291, float 0.000000e+00, float %292, !dbg !47
  %294 = fmul float %289, %293, !dbg !48
  %295 = fadd float %274, %294, !dbg !49
  %296 = fadd float %279, %285, !dbg !50
  %297 = fmul float %289, %289, !dbg !51
  %298 = fmul float %269, %297, !dbg !52
  %299 = fmul float %293, %298, !dbg !53
  %300 = fadd float %296, %299, !dbg !54
  %301 = icmp eq i32 %159, 0, !dbg !40
  %302 = and i32 %158, 15, !dbg !40
  %303 = zext nneg i32 %302 to i64, !dbg !40
  %304 = getelementptr float, ptr addrspace(3) @global_smem, i64 %303, !dbg !40
  %305 = bitcast float %295 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %305, i1 %301) #3, !dbg !40
  %306 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %303, !dbg !40
  %307 = bitcast float %300 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %307, i1 %301) #3, !dbg !40
  %308 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %303, !dbg !40
  %309 = bitcast float %290 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %308, <1 x i32> %309, i1 %301) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %310 = icmp slt i32 %10, 16, !dbg !40
  %311 = sext i32 %10 to i64, !dbg !40
  %312 = getelementptr float, ptr addrspace(3) @global_smem, i64 %311, !dbg !40
  %313 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %312, i1 %310) #3, !dbg !40
  %314 = bitcast i32 %313 to float, !dbg !40
  %315 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %311, !dbg !40
  %316 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %315, i1 %310) #3, !dbg !40
  %317 = bitcast i32 %316 to float, !dbg !40
  %318 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %311, !dbg !40
  %319 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %318, i1 %310) #3, !dbg !40
  %320 = bitcast i32 %319 to float, !dbg !40
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 8, i32 31), !dbg !40
  %322 = bitcast i32 %321 to float, !dbg !40
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 8, i32 31), !dbg !40
  %324 = bitcast i32 %323 to float, !dbg !40
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 8, i32 31), !dbg !40
  %326 = bitcast i32 %325 to float, !dbg !40
  %327 = fsub float %322, %314, !dbg !42
  %328 = fadd float %320, %326, !dbg !44
  %329 = fcmp oeq float %328, 0.000000e+00, !dbg !45
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %326, float %328) #3, !dbg !46
  %331 = select i1 %329, float 0.000000e+00, float %330, !dbg !47
  %332 = fmul float %327, %331, !dbg !48
  %333 = fadd float %332, %314, !dbg !49
  %334 = fadd float %317, %324, !dbg !50
  %335 = fmul float %327, %327, !dbg !51
  %336 = fmul float %335, %320, !dbg !52
  %337 = fmul float %336, %331, !dbg !53
  %338 = fadd float %334, %337, !dbg !54
  %339 = bitcast float %333 to i32, !dbg !40
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 4, i32 31), !dbg !40
  %341 = bitcast i32 %340 to float, !dbg !40
  %342 = bitcast float %338 to i32, !dbg !40
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 4, i32 31), !dbg !40
  %344 = bitcast i32 %343 to float, !dbg !40
  %345 = bitcast float %328 to i32, !dbg !40
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 4, i32 31), !dbg !40
  %347 = bitcast i32 %346 to float, !dbg !40
  %348 = fsub float %341, %333, !dbg !42
  %349 = fadd float %328, %347, !dbg !44
  %350 = fcmp oeq float %349, 0.000000e+00, !dbg !45
  %351 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %347, float %349) #3, !dbg !46
  %352 = select i1 %350, float 0.000000e+00, float %351, !dbg !47
  %353 = fmul float %348, %352, !dbg !48
  %354 = fadd float %333, %353, !dbg !49
  %355 = fadd float %338, %344, !dbg !50
  %356 = fmul float %348, %348, !dbg !51
  %357 = fmul float %328, %356, !dbg !52
  %358 = fmul float %352, %357, !dbg !53
  %359 = fadd float %355, %358, !dbg !54
  %360 = bitcast float %354 to i32, !dbg !40
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 2, i32 31), !dbg !40
  %362 = bitcast i32 %361 to float, !dbg !40
  %363 = bitcast float %359 to i32, !dbg !40
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 2, i32 31), !dbg !40
  %365 = bitcast i32 %364 to float, !dbg !40
  %366 = bitcast float %349 to i32, !dbg !40
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 2, i32 31), !dbg !40
  %368 = bitcast i32 %367 to float, !dbg !40
  %369 = fsub float %362, %354, !dbg !42
  %370 = fadd float %349, %368, !dbg !44
  %371 = fcmp oeq float %370, 0.000000e+00, !dbg !45
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %368, float %370) #3, !dbg !46
  %373 = select i1 %371, float 0.000000e+00, float %372, !dbg !47
  %374 = fmul float %369, %373, !dbg !48
  %375 = fadd float %354, %374, !dbg !49
  %376 = fadd float %359, %365, !dbg !50
  %377 = fmul float %369, %369, !dbg !51
  %378 = fmul float %349, %377, !dbg !52
  %379 = fmul float %373, %378, !dbg !53
  %380 = fadd float %376, %379, !dbg !54
  %381 = bitcast float %375 to i32, !dbg !40
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 1, i32 31), !dbg !40
  %383 = bitcast i32 %382 to float, !dbg !40
  %384 = bitcast float %380 to i32, !dbg !40
  %385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 1, i32 31), !dbg !40
  %386 = bitcast i32 %385 to float, !dbg !40
  %387 = bitcast float %370 to i32, !dbg !40
  %388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 1, i32 31), !dbg !40
  %389 = bitcast i32 %388 to float, !dbg !40
  %390 = fsub float %383, %375, !dbg !42
  %391 = fadd float %370, %389, !dbg !44
  %392 = fcmp oeq float %391, 0.000000e+00, !dbg !45
  %393 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %389, float %391) #3, !dbg !46
  %394 = select i1 %392, float 0.000000e+00, float %393, !dbg !47
  %395 = fmul float %390, %394, !dbg !48
  %396 = fadd float %375, %395, !dbg !49
  %397 = fadd float %380, %386, !dbg !50
  %398 = fmul float %390, %390, !dbg !51
  %399 = fmul float %370, %398, !dbg !52
  %400 = fmul float %394, %399, !dbg !53
  %401 = fadd float %397, %400, !dbg !54
  %402 = and i32 %10, 15, !dbg !40
  %403 = icmp eq i32 %402, 0, !dbg !40
  %404 = and i1 %310, %403, !dbg !40
  %405 = bitcast float %396 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, <1 x i32> %405, i1 %404) #3, !dbg !40
  %406 = bitcast float %401 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %315, <1 x i32> %406, i1 %404) #3, !dbg !40
  %407 = bitcast float %391 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, <1 x i32> %407, i1 %404) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %408 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %409 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !40
  %410 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), align 16, !dbg !40
  %411 = sext i32 %8 to i64, !dbg !55
  %412 = getelementptr float, ptr addrspace(1) %2, i64 %411, !dbg !55
  %413 = icmp eq i32 %11, 0, !dbg !56
  %414 = and i1 %413, %9, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %408, ptr addrspace(1) %412, i1 %414) #3, !dbg !56
  %415 = getelementptr float, ptr addrspace(1) %3, i64 %411, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %409, ptr addrspace(1) %415, i1 %414) #3, !dbg !58
  %416 = getelementptr float, ptr addrspace(1) %4, i64 %411, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %410, ptr addrspace(1) %416, i1 %414) #3, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c73bgxhspmpbjcp3lssulsjecerl42vblbm7w5yp75jalptfhui7.py", directory: "inductor_cache/73")
!4 = !{ptr @triton_red_fused_convolution_native_group_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_group_norm_0, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_group_norm_0", linkageName: "triton_red_fused_convolution_native_group_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 36, column: 48, scope: !7)
!15 = !DILocation(line: 37, column: 41, scope: !7)
!16 = !DILocation(line: 31, column: 36, scope: !7)
!17 = !DILocation(line: 35, column: 23, scope: !7)
!18 = !DILocation(line: 36, column: 38, scope: !7)
!19 = !DILocation(line: 36, column: 53, scope: !7)
!20 = !DILocation(line: 37, column: 39, scope: !7)
!21 = !DILocation(line: 37, column: 34, scope: !7)
!22 = !DILocation(line: 37, column: 46, scope: !7)
!23 = !DILocation(line: 38, column: 22, scope: !7)
!24 = !DILocation(line: 41, column: 62, scope: !7)
!25 = !DILocation(line: 178, column: 7, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 41, column: 51, scope: !7)
!29 = !DILocation(line: 183, column: 24, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 184, column: 30, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 185, column: 34, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 185, column: 26, scope: !26, inlinedAt: !28)
!33 = !DILocation(line: 186, column: 39, scope: !26, inlinedAt: !28)
!34 = !DILocation(line: 186, column: 31, scope: !26, inlinedAt: !28)
!35 = !DILocation(line: 186, column: 22, scope: !26, inlinedAt: !28)
!36 = !DILocation(line: 43, column: 60, scope: !7)
!37 = !DILocation(line: 44, column: 56, scope: !7)
!38 = !DILocation(line: 45, column: 64, scope: !7)
!39 = !DILocation(line: 46, column: 53, scope: !7)
!40 = !DILocation(line: 204, column: 46, scope: !26, inlinedAt: !41)
!41 = !DILocation(line: 48, column: 41, scope: !7)
!42 = !DILocation(line: 192, column: 21, scope: !43, inlinedAt: !41)
!43 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!44 = !DILocation(line: 193, column: 28, scope: !43, inlinedAt: !41)
!45 = !DILocation(line: 194, column: 39, scope: !43, inlinedAt: !41)
!46 = !DILocation(line: 194, column: 60, scope: !43, inlinedAt: !41)
!47 = !DILocation(line: 194, column: 49, scope: !43, inlinedAt: !41)
!48 = !DILocation(line: 196, column: 25, scope: !43, inlinedAt: !41)
!49 = !DILocation(line: 196, column: 17, scope: !43, inlinedAt: !41)
!50 = !DILocation(line: 197, column: 15, scope: !43, inlinedAt: !41)
!51 = !DILocation(line: 197, column: 30, scope: !43, inlinedAt: !41)
!52 = !DILocation(line: 197, column: 38, scope: !43, inlinedAt: !41)
!53 = !DILocation(line: 197, column: 49, scope: !43, inlinedAt: !41)
!54 = !DILocation(line: 197, column: 22, scope: !43, inlinedAt: !41)
!55 = !DILocation(line: 53, column: 25, scope: !7)
!56 = !DILocation(line: 53, column: 36, scope: !7)
!57 = !DILocation(line: 54, column: 25, scope: !7)
!58 = !DILocation(line: 54, column: 36, scope: !7)
!59 = !DILocation(line: 55, column: 25, scope: !7)
!60 = !DILocation(line: 55, column: 36, scope: !7)
!61 = !DILocation(line: 55, column: 4, scope: !7)
