; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused_add_div_sqrt_sub_var_mean_34(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
.peel.next:
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %6 = icmp slt i32 %5, 1024, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 2044, !dbg !12
  %10 = mul i32 %5, 9216, !dbg !13
  %11 = zext nneg i32 %9 to i64, !dbg !14
  %12 = add i32 %9, %10, !dbg !15
  %13 = sext i32 %12 to i64, !dbg !16
  %14 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !16
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #5, !dbg !17
  %16 = insertelement <4 x i1> poison, i1 %6, i64 0, !dbg !18
  %17 = shufflevector <4 x i1> %16, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !18
  %18 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !17
  %19 = insertelement <4 x i32> poison, i32 %18, i64 0, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !17
  %21 = insertelement <4 x i32> %19, i32 %20, i64 1, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !17
  %23 = insertelement <4 x i32> %21, i32 %22, i64 2, !dbg !17
  %24 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !17
  %25 = insertelement <4 x i32> %23, i32 %24, i64 3, !dbg !17
  %26 = bitcast <4 x i32> %25 to <4 x float>, !dbg !17
  %27 = select <4 x i1> %17, <4 x float> %26, <4 x float> zeroinitializer, !dbg !18
  %28 = select i1 %6, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %29 = and i32 %7, 31, !dbg !12
  %30 = or disjoint i32 %9, 2048, !dbg !20
  %31 = add i32 %10, %30, !dbg !15
  %32 = sext i32 %31 to i64, !dbg !16
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !16
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #5, !dbg !17
  %35 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !17
  %37 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !17
  %38 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !17
  %39 = fadd float %28, 1.000000e+00, !dbg !21
  %40 = fadd float %28, 1.000000e+00, !dbg !21
  %41 = fadd float %28, 1.000000e+00, !dbg !21
  %42 = fadd float %28, 1.000000e+00, !dbg !21
  %43 = insertelement <4 x i32> poison, i32 %38, i64 0, !dbg !17
  %44 = insertelement <4 x i32> %43, i32 %37, i64 1, !dbg !17
  %45 = insertelement <4 x i32> %44, i32 %36, i64 2, !dbg !17
  %46 = insertelement <4 x i32> %45, i32 %35, i64 3, !dbg !17
  %47 = bitcast <4 x i32> %46 to <4 x float>, !dbg !17
  %48 = fsub <4 x float> %47, %27, !dbg !25
  %49 = extractelement <4 x float> %48, i64 0, !dbg !26
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float %39) #5, !dbg !26
  %51 = extractelement <4 x float> %48, i64 1, !dbg !26
  %52 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float %40) #5, !dbg !26
  %53 = extractelement <4 x float> %48, i64 2, !dbg !26
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float %41) #5, !dbg !26
  %55 = extractelement <4 x float> %48, i64 3, !dbg !26
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float %42) #5, !dbg !26
  %57 = insertelement <4 x float> poison, float %50, i64 0, !dbg !27
  %58 = insertelement <4 x float> %57, float %52, i64 1, !dbg !27
  %59 = insertelement <4 x float> %58, float %54, i64 2, !dbg !27
  %60 = insertelement <4 x float> %59, float %56, i64 3, !dbg !27
  %61 = fadd <4 x float> %27, %60, !dbg !27
  %62 = fsub <4 x float> %47, %61, !dbg !28
  %63 = fmul <4 x float> %48, %62, !dbg !29
  %64 = fadd <4 x float> %63, zeroinitializer, !dbg !30
  %65 = insertelement <4 x i1> poison, i1 %6, i64 0, !dbg !18
  %66 = shufflevector <4 x i1> %65, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !18
  %67 = select <4 x i1> %66, <4 x float> %61, <4 x float> %27, !dbg !18
  %68 = select <4 x i1> %66, <4 x float> %64, <4 x float> zeroinitializer, !dbg !31
  %69 = or disjoint i32 %9, 4096, !dbg !20
  %70 = add i32 %10, %69, !dbg !15
  %71 = sext i32 %70 to i64, !dbg !16
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !16
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %72, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #5, !dbg !17
  %74 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !17
  %75 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !17
  %76 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !17
  %77 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !17
  %78 = fadd float %39, 1.000000e+00, !dbg !21
  %79 = select i1 %6, float %78, float 1.000000e+00, !dbg !19
  %80 = fadd float %40, 1.000000e+00, !dbg !21
  %81 = select i1 %6, float %80, float 1.000000e+00, !dbg !19
  %82 = fadd float %41, 1.000000e+00, !dbg !21
  %83 = select i1 %6, float %82, float 1.000000e+00, !dbg !19
  %84 = fadd float %42, 1.000000e+00, !dbg !21
  %85 = select i1 %6, float %84, float 1.000000e+00, !dbg !19
  %86 = insertelement <4 x i32> poison, i32 %77, i64 0, !dbg !17
  %87 = insertelement <4 x i32> %86, i32 %76, i64 1, !dbg !17
  %88 = insertelement <4 x i32> %87, i32 %75, i64 2, !dbg !17
  %89 = insertelement <4 x i32> %88, i32 %74, i64 3, !dbg !17
  %90 = bitcast <4 x i32> %89 to <4 x float>, !dbg !17
  %91 = fsub <4 x float> %90, %67, !dbg !25
  %92 = extractelement <4 x float> %91, i64 0, !dbg !26
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float %79) #5, !dbg !26
  %94 = extractelement <4 x float> %91, i64 1, !dbg !26
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float %81) #5, !dbg !26
  %96 = extractelement <4 x float> %91, i64 2, !dbg !26
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %83) #5, !dbg !26
  %98 = extractelement <4 x float> %91, i64 3, !dbg !26
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %85) #5, !dbg !26
  %100 = insertelement <4 x float> poison, float %93, i64 0, !dbg !27
  %101 = insertelement <4 x float> %100, float %95, i64 1, !dbg !27
  %102 = insertelement <4 x float> %101, float %97, i64 2, !dbg !27
  %103 = insertelement <4 x float> %102, float %99, i64 3, !dbg !27
  %104 = fadd <4 x float> %67, %103, !dbg !27
  %105 = fsub <4 x float> %90, %104, !dbg !28
  %106 = fmul <4 x float> %91, %105, !dbg !29
  %107 = fadd <4 x float> %68, %106, !dbg !30
  %108 = insertelement <4 x i1> poison, i1 %6, i64 0, !dbg !18
  %109 = shufflevector <4 x i1> %108, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !18
  %110 = select <4 x i1> %109, <4 x float> %104, <4 x float> %67, !dbg !18
  %111 = select <4 x i1> %109, <4 x float> %107, <4 x float> %68, !dbg !31
  %112 = or disjoint i32 %9, 6144, !dbg !20
  %113 = add i32 %10, %112, !dbg !15
  %114 = sext i32 %113 to i64, !dbg !16
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !16
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %115, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #5, !dbg !17
  %117 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !17
  %118 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !17
  %119 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !17
  %120 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !17
  %121 = fadd float %78, 1.000000e+00, !dbg !21
  %122 = select i1 %6, float %121, float 1.000000e+00, !dbg !19
  %123 = fadd float %80, 1.000000e+00, !dbg !21
  %124 = select i1 %6, float %123, float 1.000000e+00, !dbg !19
  %125 = fadd float %82, 1.000000e+00, !dbg !21
  %126 = select i1 %6, float %125, float 1.000000e+00, !dbg !19
  %127 = fadd float %84, 1.000000e+00, !dbg !21
  %128 = select i1 %6, float %127, float 1.000000e+00, !dbg !19
  %129 = insertelement <4 x i32> poison, i32 %120, i64 0, !dbg !17
  %130 = insertelement <4 x i32> %129, i32 %119, i64 1, !dbg !17
  %131 = insertelement <4 x i32> %130, i32 %118, i64 2, !dbg !17
  %132 = insertelement <4 x i32> %131, i32 %117, i64 3, !dbg !17
  %133 = bitcast <4 x i32> %132 to <4 x float>, !dbg !17
  %134 = fsub <4 x float> %133, %110, !dbg !25
  %135 = extractelement <4 x float> %134, i64 0, !dbg !26
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %122) #5, !dbg !26
  %137 = extractelement <4 x float> %134, i64 1, !dbg !26
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float %124) #5, !dbg !26
  %139 = extractelement <4 x float> %134, i64 2, !dbg !26
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float %126) #5, !dbg !26
  %141 = extractelement <4 x float> %134, i64 3, !dbg !26
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float %128) #5, !dbg !26
  %143 = insertelement <4 x float> poison, float %136, i64 0, !dbg !27
  %144 = insertelement <4 x float> %143, float %138, i64 1, !dbg !27
  %145 = insertelement <4 x float> %144, float %140, i64 2, !dbg !27
  %146 = insertelement <4 x float> %145, float %142, i64 3, !dbg !27
  %147 = fadd <4 x float> %110, %146, !dbg !27
  %148 = fsub <4 x float> %133, %147, !dbg !28
  %149 = fmul <4 x float> %134, %148, !dbg !29
  %150 = fadd <4 x float> %111, %149, !dbg !30
  %151 = insertelement <4 x i1> poison, i1 %6, i64 0, !dbg !18
  %152 = shufflevector <4 x i1> %151, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !18
  %153 = select <4 x i1> %152, <4 x float> %147, <4 x float> %110, !dbg !18
  %154 = select <4 x i1> %152, <4 x float> %150, <4 x float> %111, !dbg !31
  %155 = select i1 %6, float %121, float 0.000000e+00, !dbg !19
  %156 = select i1 %6, float %123, float 0.000000e+00, !dbg !19
  %157 = select i1 %6, float %125, float 0.000000e+00, !dbg !19
  %158 = select i1 %6, float %127, float 0.000000e+00, !dbg !19
  %159 = or disjoint i64 %11, 8192, !dbg !20
  %160 = icmp samesign ult i64 %159, 9216, !dbg !32
  %161 = trunc nuw nsw i64 %159 to i32, !dbg !15
  %162 = add i32 %10, %161, !dbg !15
  %163 = sext i32 %162 to i64, !dbg !16
  %164 = getelementptr float, ptr addrspace(1) %1, i64 %163, !dbg !16
  %165 = and i1 %6, %160, !dbg !33
  %166 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %164, i1 %165, i32 0, i1 %165, i32 0, i1 %165, i32 0, i1 %165, i32 0, i1 %165) #5, !dbg !17
  %167 = extractvalue { i32, i32, i32, i32 } %166, 3, !dbg !17
  %168 = extractvalue { i32, i32, i32, i32 } %166, 2, !dbg !17
  %169 = extractvalue { i32, i32, i32, i32 } %166, 1, !dbg !17
  %170 = extractvalue { i32, i32, i32, i32 } %166, 0, !dbg !17
  %171 = fadd float %155, 1.000000e+00, !dbg !21
  %172 = fadd float %156, 1.000000e+00, !dbg !21
  %173 = fadd float %157, 1.000000e+00, !dbg !21
  %174 = fadd float %158, 1.000000e+00, !dbg !21
  %175 = insertelement <4 x i32> poison, i32 %170, i64 0, !dbg !17
  %176 = insertelement <4 x i32> %175, i32 %169, i64 1, !dbg !17
  %177 = insertelement <4 x i32> %176, i32 %168, i64 2, !dbg !17
  %178 = insertelement <4 x i32> %177, i32 %167, i64 3, !dbg !17
  %179 = bitcast <4 x i32> %178 to <4 x float>, !dbg !17
  %180 = fsub <4 x float> %179, %153, !dbg !25
  %181 = extractelement <4 x float> %180, i64 0, !dbg !26
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float %171) #5, !dbg !26
  %183 = extractelement <4 x float> %180, i64 1, !dbg !26
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %183, float %172) #5, !dbg !26
  %185 = extractelement <4 x float> %180, i64 2, !dbg !26
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %185, float %173) #5, !dbg !26
  %187 = extractelement <4 x float> %180, i64 3, !dbg !26
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %187, float %174) #5, !dbg !26
  %189 = insertelement <4 x float> poison, float %182, i64 0, !dbg !27
  %190 = insertelement <4 x float> %189, float %184, i64 1, !dbg !27
  %191 = insertelement <4 x float> %190, float %186, i64 2, !dbg !27
  %192 = insertelement <4 x float> %191, float %188, i64 3, !dbg !27
  %193 = fadd <4 x float> %153, %192, !dbg !27
  %194 = fsub <4 x float> %179, %193, !dbg !28
  %195 = fmul <4 x float> %180, %194, !dbg !29
  %196 = fadd <4 x float> %154, %195, !dbg !30
  %197 = insertelement <4 x i1> poison, i1 %165, i64 0, !dbg !18
  %198 = shufflevector <4 x i1> %197, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !18
  %199 = select <4 x i1> %198, <4 x float> %193, <4 x float> %153, !dbg !18
  %200 = select <4 x i1> %198, <4 x float> %196, <4 x float> %154, !dbg !31
  %201 = select i1 %165, float %171, float %155, !dbg !19
  %202 = select i1 %165, float %172, float %156, !dbg !19
  %203 = select i1 %165, float %173, float %157, !dbg !19
  %204 = select i1 %165, float %174, float %158, !dbg !19
  %205 = lshr i32 %7, 5, !dbg !12
  %206 = extractelement <4 x float> %199, i64 0, !dbg !34
  %207 = extractelement <4 x float> %199, i64 1, !dbg !34
  %208 = fsub float %207, %206, !dbg !34
  %209 = fadd float %201, %202, !dbg !37
  %210 = fcmp oeq float %209, 0.000000e+00, !dbg !38
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %202, float %209) #5, !dbg !39
  %212 = select i1 %210, float 0.000000e+00, float %211, !dbg !40
  %213 = fmul float %208, %212, !dbg !41
  %214 = fadd float %206, %213, !dbg !42
  %shift = shufflevector <4 x float> %200, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !43
  %215 = fadd <4 x float> %200, %shift, !dbg !43
  %216 = extractelement <4 x float> %215, i64 0, !dbg !43
  %217 = fmul float %208, %208, !dbg !44
  %218 = fmul float %217, %201, !dbg !45
  %219 = fmul float %218, %212, !dbg !46
  %220 = fadd float %216, %219, !dbg !47
  %221 = extractelement <4 x float> %199, i64 2, !dbg !34
  %222 = fsub float %221, %214, !dbg !34
  %223 = fadd float %203, %209, !dbg !37
  %224 = fcmp oeq float %223, 0.000000e+00, !dbg !38
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %203, float %223) #5, !dbg !39
  %226 = select i1 %224, float 0.000000e+00, float %225, !dbg !40
  %227 = fmul float %226, %222, !dbg !41
  %228 = fadd float %214, %227, !dbg !42
  %229 = extractelement <4 x float> %200, i64 2, !dbg !43
  %230 = fadd float %229, %220, !dbg !43
  %231 = fmul float %222, %222, !dbg !44
  %232 = fmul float %209, %231, !dbg !45
  %233 = fmul float %226, %232, !dbg !46
  %234 = fadd float %230, %233, !dbg !47
  %235 = extractelement <4 x float> %199, i64 3, !dbg !34
  %236 = fsub float %235, %228, !dbg !34
  %237 = fadd float %204, %223, !dbg !37
  %238 = fcmp oeq float %237, 0.000000e+00, !dbg !38
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %204, float %237) #5, !dbg !39
  %240 = select i1 %238, float 0.000000e+00, float %239, !dbg !40
  %241 = fmul float %240, %236, !dbg !41
  %242 = fadd float %228, %241, !dbg !42
  %243 = extractelement <4 x float> %200, i64 3, !dbg !43
  %244 = fadd float %243, %234, !dbg !43
  %245 = fmul float %236, %236, !dbg !44
  %246 = fmul float %223, %245, !dbg !45
  %247 = fmul float %240, %246, !dbg !46
  %248 = fadd float %244, %247, !dbg !47
  %249 = bitcast float %242 to i32, !dbg !48
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 16, i32 31), !dbg !48
  %251 = bitcast i32 %250 to float, !dbg !48
  %252 = bitcast float %248 to i32, !dbg !48
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 16, i32 31), !dbg !48
  %254 = bitcast i32 %253 to float, !dbg !48
  %255 = bitcast float %237 to i32, !dbg !48
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 16, i32 31), !dbg !48
  %257 = bitcast i32 %256 to float, !dbg !48
  %258 = fsub float %251, %242, !dbg !34
  %259 = fadd float %237, %257, !dbg !37
  %260 = fcmp oeq float %259, 0.000000e+00, !dbg !38
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %257, float %259) #5, !dbg !39
  %262 = select i1 %260, float 0.000000e+00, float %261, !dbg !40
  %263 = fmul float %262, %258, !dbg !41
  %264 = fadd float %242, %263, !dbg !42
  %265 = fadd float %248, %254, !dbg !43
  %266 = fmul float %258, %258, !dbg !44
  %267 = fmul float %237, %266, !dbg !45
  %268 = fmul float %262, %267, !dbg !46
  %269 = fadd float %265, %268, !dbg !47
  %270 = bitcast float %264 to i32, !dbg !48
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 8, i32 31), !dbg !48
  %272 = bitcast i32 %271 to float, !dbg !48
  %273 = bitcast float %269 to i32, !dbg !48
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 8, i32 31), !dbg !48
  %275 = bitcast i32 %274 to float, !dbg !48
  %276 = bitcast float %259 to i32, !dbg !48
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 8, i32 31), !dbg !48
  %278 = bitcast i32 %277 to float, !dbg !48
  %279 = fsub float %272, %264, !dbg !34
  %280 = fadd float %259, %278, !dbg !37
  %281 = fcmp oeq float %280, 0.000000e+00, !dbg !38
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %278, float %280) #5, !dbg !39
  %283 = select i1 %281, float 0.000000e+00, float %282, !dbg !40
  %284 = fmul float %279, %283, !dbg !41
  %285 = fadd float %264, %284, !dbg !42
  %286 = fadd float %269, %275, !dbg !43
  %287 = fmul float %279, %279, !dbg !44
  %288 = fmul float %259, %287, !dbg !45
  %289 = fmul float %283, %288, !dbg !46
  %290 = fadd float %286, %289, !dbg !47
  %291 = bitcast float %285 to i32, !dbg !48
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 4, i32 31), !dbg !48
  %293 = bitcast i32 %292 to float, !dbg !48
  %294 = bitcast float %290 to i32, !dbg !48
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 4, i32 31), !dbg !48
  %296 = bitcast i32 %295 to float, !dbg !48
  %297 = bitcast float %280 to i32, !dbg !48
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 4, i32 31), !dbg !48
  %299 = bitcast i32 %298 to float, !dbg !48
  %300 = fsub float %293, %285, !dbg !34
  %301 = fadd float %280, %299, !dbg !37
  %302 = fcmp oeq float %301, 0.000000e+00, !dbg !38
  %303 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %299, float %301) #5, !dbg !39
  %304 = select i1 %302, float 0.000000e+00, float %303, !dbg !40
  %305 = fmul float %300, %304, !dbg !41
  %306 = fadd float %285, %305, !dbg !42
  %307 = fadd float %290, %296, !dbg !43
  %308 = fmul float %300, %300, !dbg !44
  %309 = fmul float %280, %308, !dbg !45
  %310 = fmul float %304, %309, !dbg !46
  %311 = fadd float %307, %310, !dbg !47
  %312 = bitcast float %306 to i32, !dbg !48
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 2, i32 31), !dbg !48
  %314 = bitcast i32 %313 to float, !dbg !48
  %315 = bitcast float %311 to i32, !dbg !48
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 2, i32 31), !dbg !48
  %317 = bitcast i32 %316 to float, !dbg !48
  %318 = bitcast float %301 to i32, !dbg !48
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 2, i32 31), !dbg !48
  %320 = bitcast i32 %319 to float, !dbg !48
  %321 = fsub float %314, %306, !dbg !34
  %322 = fadd float %301, %320, !dbg !37
  %323 = fcmp oeq float %322, 0.000000e+00, !dbg !38
  %324 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %320, float %322) #5, !dbg !39
  %325 = select i1 %323, float 0.000000e+00, float %324, !dbg !40
  %326 = fmul float %321, %325, !dbg !41
  %327 = fadd float %306, %326, !dbg !42
  %328 = fadd float %311, %317, !dbg !43
  %329 = fmul float %321, %321, !dbg !44
  %330 = fmul float %301, %329, !dbg !45
  %331 = fmul float %325, %330, !dbg !46
  %332 = fadd float %328, %331, !dbg !47
  %333 = bitcast float %327 to i32, !dbg !48
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 1, i32 31), !dbg !48
  %335 = bitcast i32 %334 to float, !dbg !48
  %336 = bitcast float %332 to i32, !dbg !48
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 1, i32 31), !dbg !48
  %338 = bitcast i32 %337 to float, !dbg !48
  %339 = bitcast float %322 to i32, !dbg !48
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 1, i32 31), !dbg !48
  %341 = bitcast i32 %340 to float, !dbg !48
  %342 = fsub float %335, %327, !dbg !34
  %343 = fadd float %322, %341, !dbg !37
  %344 = fcmp oeq float %343, 0.000000e+00, !dbg !38
  %345 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %341, float %343) #5, !dbg !39
  %346 = select i1 %344, float 0.000000e+00, float %345, !dbg !40
  %347 = fmul float %342, %346, !dbg !41
  %348 = fadd float %327, %347, !dbg !42
  %349 = fadd float %332, %338, !dbg !43
  %350 = fmul float %342, %342, !dbg !44
  %351 = fmul float %322, %350, !dbg !45
  %352 = fmul float %346, %351, !dbg !46
  %353 = fadd float %349, %352, !dbg !47
  %354 = icmp eq i32 %29, 0, !dbg !48
  %355 = and i32 %205, 15, !dbg !48
  %356 = getelementptr float, ptr addrspace(3) @global_smem, i32 %355, !dbg !48
  %357 = bitcast float %348 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, <1 x i32> %357, i1 %354) #5, !dbg !48
  %358 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %355, !dbg !48
  %359 = bitcast float %353 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %358, <1 x i32> %359, i1 %354) #5, !dbg !48
  %360 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %355, !dbg !48
  %361 = bitcast float %343 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %360, <1 x i32> %361, i1 %354) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %362 = icmp slt i32 %7, 16, !dbg !48
  %363 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !48
  %364 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %363, i1 %362) #5, !dbg !48
  %365 = bitcast i32 %364 to float, !dbg !48
  %366 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %7, !dbg !48
  %367 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %366, i1 %362) #5, !dbg !48
  %368 = bitcast i32 %367 to float, !dbg !48
  %369 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %7, !dbg !48
  %370 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %369, i1 %362) #5, !dbg !48
  %371 = bitcast i32 %370 to float, !dbg !48
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 8, i32 31), !dbg !48
  %373 = bitcast i32 %372 to float, !dbg !48
  %374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 8, i32 31), !dbg !48
  %375 = bitcast i32 %374 to float, !dbg !48
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 8, i32 31), !dbg !48
  %377 = bitcast i32 %376 to float, !dbg !48
  %378 = fsub float %373, %365, !dbg !34
  %379 = fadd float %371, %377, !dbg !37
  %380 = fcmp oeq float %379, 0.000000e+00, !dbg !38
  %381 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %377, float %379) #5, !dbg !39
  %382 = select i1 %380, float 0.000000e+00, float %381, !dbg !40
  %383 = fmul float %378, %382, !dbg !41
  %384 = fadd float %383, %365, !dbg !42
  %385 = fadd float %368, %375, !dbg !43
  %386 = fmul float %378, %378, !dbg !44
  %387 = fmul float %386, %371, !dbg !45
  %388 = fmul float %387, %382, !dbg !46
  %389 = fadd float %385, %388, !dbg !47
  %390 = bitcast float %384 to i32, !dbg !48
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 4, i32 31), !dbg !48
  %392 = bitcast i32 %391 to float, !dbg !48
  %393 = bitcast float %389 to i32, !dbg !48
  %394 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %393, i32 4, i32 31), !dbg !48
  %395 = bitcast i32 %394 to float, !dbg !48
  %396 = bitcast float %379 to i32, !dbg !48
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 4, i32 31), !dbg !48
  %398 = bitcast i32 %397 to float, !dbg !48
  %399 = fsub float %392, %384, !dbg !34
  %400 = fadd float %379, %398, !dbg !37
  %401 = fcmp oeq float %400, 0.000000e+00, !dbg !38
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %398, float %400) #5, !dbg !39
  %403 = select i1 %401, float 0.000000e+00, float %402, !dbg !40
  %404 = fmul float %399, %403, !dbg !41
  %405 = fadd float %384, %404, !dbg !42
  %406 = fadd float %389, %395, !dbg !43
  %407 = fmul float %399, %399, !dbg !44
  %408 = fmul float %379, %407, !dbg !45
  %409 = fmul float %403, %408, !dbg !46
  %410 = fadd float %406, %409, !dbg !47
  %411 = bitcast float %405 to i32, !dbg !48
  %412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %411, i32 2, i32 31), !dbg !48
  %413 = bitcast i32 %412 to float, !dbg !48
  %414 = bitcast float %410 to i32, !dbg !48
  %415 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %414, i32 2, i32 31), !dbg !48
  %416 = bitcast i32 %415 to float, !dbg !48
  %417 = bitcast float %400 to i32, !dbg !48
  %418 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %417, i32 2, i32 31), !dbg !48
  %419 = bitcast i32 %418 to float, !dbg !48
  %420 = fsub float %413, %405, !dbg !34
  %421 = fadd float %400, %419, !dbg !37
  %422 = fcmp oeq float %421, 0.000000e+00, !dbg !38
  %423 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %419, float %421) #5, !dbg !39
  %424 = select i1 %422, float 0.000000e+00, float %423, !dbg !40
  %425 = fmul float %420, %424, !dbg !41
  %426 = fadd float %405, %425, !dbg !42
  %427 = fadd float %410, %416, !dbg !43
  %428 = fmul float %420, %420, !dbg !44
  %429 = fmul float %400, %428, !dbg !45
  %430 = fmul float %424, %429, !dbg !46
  %431 = fadd float %427, %430, !dbg !47
  %432 = bitcast float %426 to i32, !dbg !48
  %433 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %432, i32 1, i32 31), !dbg !48
  %434 = bitcast i32 %433 to float, !dbg !48
  %435 = bitcast float %431 to i32, !dbg !48
  %436 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %435, i32 1, i32 31), !dbg !48
  %437 = bitcast i32 %436 to float, !dbg !48
  %438 = bitcast float %421 to i32, !dbg !48
  %439 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %438, i32 1, i32 31), !dbg !48
  %440 = bitcast i32 %439 to float, !dbg !48
  %441 = fsub float %434, %426, !dbg !34
  %442 = fadd float %421, %440, !dbg !37
  %443 = fcmp oeq float %442, 0.000000e+00, !dbg !38
  %444 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %440, float %442) #5, !dbg !39
  %445 = select i1 %443, float 0.000000e+00, float %444, !dbg !40
  %446 = fmul float %441, %445, !dbg !41
  %447 = fadd float %426, %446, !dbg !42
  %448 = fadd float %431, %437, !dbg !43
  %449 = fmul float %441, %441, !dbg !44
  %450 = fmul float %421, %449, !dbg !45
  %451 = fmul float %445, %450, !dbg !46
  %452 = fadd float %448, %451, !dbg !47
  %453 = and i32 %7, 15, !dbg !48
  %454 = icmp eq i32 %453, 0, !dbg !48
  %455 = and i1 %362, %454, !dbg !48
  %456 = bitcast float %447 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %363, <1 x i32> %456, i1 %455) #5, !dbg !48
  %457 = bitcast float %452 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %366, <1 x i32> %457, i1 %455) #5, !dbg !48
  %458 = bitcast float %442 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %369, <1 x i32> %458, i1 %455) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %459 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !48
  %460 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !48
  %461 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %460, float 9.216000e+03) #5, !dbg !49
  %462 = fadd float %461, 0x3DDB7CDFE0000000, !dbg !50
  %463 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %.not.i = icmp eq i32 %463, 0, !dbg !51
  %464 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !51
  %.not1.i = icmp eq i32 %464, 0, !dbg !51
  br i1 %.not.i, label %470, label %465, !dbg !51

465:                                              ; preds = %.peel.next
  br i1 %.not1.i, label %468, label %466, !dbg !51

466:                                              ; preds = %465
  %467 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %462) #5, !dbg !51
  br label %__nv_sqrtf.exit, !dbg !51

468:                                              ; preds = %465
  %469 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %462) #5, !dbg !51
  br label %__nv_sqrtf.exit, !dbg !51

470:                                              ; preds = %.peel.next
  br i1 %.not1.i, label %473, label %471, !dbg !51

471:                                              ; preds = %470
  %472 = tail call float @llvm.nvvm.sqrt.rn.f(float %462) #5, !dbg !51
  br label %__nv_sqrtf.exit, !dbg !51

473:                                              ; preds = %470
  %474 = tail call float @llvm.nvvm.sqrt.approx.f(float %462) #5, !dbg !51
  br label %__nv_sqrtf.exit, !dbg !51

__nv_sqrtf.exit:                                  ; preds = %466, %468, %471, %473
  %.0.i = phi float [ %467, %466 ], [ %469, %468 ], [ %472, %471 ], [ %474, %473 ], !dbg !51
  %475 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %476 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !51
  %477 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !51
  %479 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %480 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !51
  %481 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %.not.i24 = icmp eq i32 %481, 0, !dbg !51
  %482 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !51
  %.not1.i27 = icmp eq i32 %482, 0, !dbg !51
  br i1 %.not.i24, label %488, label %483, !dbg !51

483:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i27, label %486, label %484, !dbg !51

484:                                              ; preds = %483
  %485 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %462) #5, !dbg !51
  br label %__nv_sqrtf.exit28, !dbg !51

486:                                              ; preds = %483
  %487 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %462) #5, !dbg !51
  br label %__nv_sqrtf.exit28, !dbg !51

488:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i27, label %491, label %489, !dbg !51

489:                                              ; preds = %488
  %490 = tail call float @llvm.nvvm.sqrt.rn.f(float %462) #5, !dbg !51
  br label %__nv_sqrtf.exit28, !dbg !51

491:                                              ; preds = %488
  %492 = tail call float @llvm.nvvm.sqrt.approx.f(float %462) #5, !dbg !51
  br label %__nv_sqrtf.exit28, !dbg !51

__nv_sqrtf.exit28:                                ; preds = %484, %486, %489, %491
  %.0.i26 = phi float [ %485, %484 ], [ %487, %486 ], [ %490, %489 ], [ %492, %491 ], !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %493 = sext i32 %5 to i64, !dbg !53
  %494 = getelementptr float, ptr addrspace(1) %0, i64 %493, !dbg !53
  %urem = and i32 %7, 511, !dbg !54
  %495 = icmp eq i32 %urem, 0, !dbg !54
  %496 = bitcast float %.0.i to i32, !dbg !54
  %497 = and i1 %495, %6, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %496, ptr addrspace(1) %494, i1 %497) #5, !dbg !54
  %498 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #5, !dbg !55
  %499 = extractvalue { i32, i32, i32, i32 } %498, 0, !dbg !55
  %500 = extractvalue { i32, i32, i32, i32 } %498, 1, !dbg !55
  %501 = extractvalue { i32, i32, i32, i32 } %498, 2, !dbg !55
  %502 = extractvalue { i32, i32, i32, i32 } %498, 3, !dbg !55
  %503 = bitcast i32 %499 to float, !dbg !55
  %504 = bitcast i32 %500 to float, !dbg !55
  %505 = bitcast i32 %501 to float, !dbg !55
  %506 = bitcast i32 %502 to float, !dbg !55
  %507 = fsub float %503, %459, !dbg !56
  %508 = fsub float %504, %459, !dbg !56
  %509 = fsub float %505, %459, !dbg !56
  %510 = fsub float %506, %459, !dbg !56
  %511 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %507, float %.0.i26) #5, !dbg !57
  %512 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %508, float %.0.i26) #5, !dbg !57
  %513 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %509, float %.0.i26) #5, !dbg !57
  %514 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %510, float %.0.i26) #5, !dbg !57
  %515 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !58
  %516 = bitcast float %511 to i32, !dbg !59
  %517 = bitcast float %512 to i32, !dbg !59
  %518 = bitcast float %513 to i32, !dbg !59
  %519 = bitcast float %514 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %516, i32 %517, i32 %518, i32 %519, ptr addrspace(1) %515, i1 %6) #5, !dbg !59
  %520 = or disjoint i32 %9, 2048, !dbg !60
  %521 = add i32 %520, %10, !dbg !61
  %522 = sext i32 %521 to i64, !dbg !62
  %523 = getelementptr float, ptr addrspace(1) %1, i64 %522, !dbg !62
  %524 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %523, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #5, !dbg !55
  %525 = extractvalue { i32, i32, i32, i32 } %524, 0, !dbg !55
  %526 = extractvalue { i32, i32, i32, i32 } %524, 1, !dbg !55
  %527 = extractvalue { i32, i32, i32, i32 } %524, 2, !dbg !55
  %528 = extractvalue { i32, i32, i32, i32 } %524, 3, !dbg !55
  %529 = bitcast i32 %525 to float, !dbg !55
  %530 = bitcast i32 %526 to float, !dbg !55
  %531 = bitcast i32 %527 to float, !dbg !55
  %532 = bitcast i32 %528 to float, !dbg !55
  %533 = fsub float %529, %459, !dbg !56
  %534 = fsub float %530, %459, !dbg !56
  %535 = fsub float %531, %459, !dbg !56
  %536 = fsub float %532, %459, !dbg !56
  %537 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %533, float %.0.i26) #5, !dbg !57
  %538 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %534, float %.0.i26) #5, !dbg !57
  %539 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %535, float %.0.i26) #5, !dbg !57
  %540 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %536, float %.0.i26) #5, !dbg !57
  %541 = getelementptr float, ptr addrspace(1) %2, i64 %522, !dbg !58
  %542 = bitcast float %537 to i32, !dbg !59
  %543 = bitcast float %538 to i32, !dbg !59
  %544 = bitcast float %539 to i32, !dbg !59
  %545 = bitcast float %540 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %542, i32 %543, i32 %544, i32 %545, ptr addrspace(1) %541, i1 %6) #5, !dbg !59
  %546 = or disjoint i32 %9, 4096, !dbg !60
  %547 = add i32 %546, %10, !dbg !61
  %548 = sext i32 %547 to i64, !dbg !62
  %549 = getelementptr float, ptr addrspace(1) %1, i64 %548, !dbg !62
  %550 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %549, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #5, !dbg !55
  %551 = extractvalue { i32, i32, i32, i32 } %550, 0, !dbg !55
  %552 = extractvalue { i32, i32, i32, i32 } %550, 1, !dbg !55
  %553 = extractvalue { i32, i32, i32, i32 } %550, 2, !dbg !55
  %554 = extractvalue { i32, i32, i32, i32 } %550, 3, !dbg !55
  %555 = bitcast i32 %551 to float, !dbg !55
  %556 = bitcast i32 %552 to float, !dbg !55
  %557 = bitcast i32 %553 to float, !dbg !55
  %558 = bitcast i32 %554 to float, !dbg !55
  %559 = fsub float %555, %459, !dbg !56
  %560 = fsub float %556, %459, !dbg !56
  %561 = fsub float %557, %459, !dbg !56
  %562 = fsub float %558, %459, !dbg !56
  %563 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %559, float %.0.i26) #5, !dbg !57
  %564 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %560, float %.0.i26) #5, !dbg !57
  %565 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %561, float %.0.i26) #5, !dbg !57
  %566 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %562, float %.0.i26) #5, !dbg !57
  %567 = getelementptr float, ptr addrspace(1) %2, i64 %548, !dbg !58
  %568 = bitcast float %563 to i32, !dbg !59
  %569 = bitcast float %564 to i32, !dbg !59
  %570 = bitcast float %565 to i32, !dbg !59
  %571 = bitcast float %566 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %568, i32 %569, i32 %570, i32 %571, ptr addrspace(1) %567, i1 %6) #5, !dbg !59
  %572 = or disjoint i32 %9, 6144, !dbg !60
  %573 = add i32 %572, %10, !dbg !61
  %574 = sext i32 %573 to i64, !dbg !62
  %575 = getelementptr float, ptr addrspace(1) %1, i64 %574, !dbg !62
  %576 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %575, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6, i32 0, i1 %6) #5, !dbg !55
  %577 = extractvalue { i32, i32, i32, i32 } %576, 0, !dbg !55
  %578 = extractvalue { i32, i32, i32, i32 } %576, 1, !dbg !55
  %579 = extractvalue { i32, i32, i32, i32 } %576, 2, !dbg !55
  %580 = extractvalue { i32, i32, i32, i32 } %576, 3, !dbg !55
  %581 = bitcast i32 %577 to float, !dbg !55
  %582 = bitcast i32 %578 to float, !dbg !55
  %583 = bitcast i32 %579 to float, !dbg !55
  %584 = bitcast i32 %580 to float, !dbg !55
  %585 = fsub float %581, %459, !dbg !56
  %586 = fsub float %582, %459, !dbg !56
  %587 = fsub float %583, %459, !dbg !56
  %588 = fsub float %584, %459, !dbg !56
  %589 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %585, float %.0.i26) #5, !dbg !57
  %590 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %586, float %.0.i26) #5, !dbg !57
  %591 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %587, float %.0.i26) #5, !dbg !57
  %592 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %588, float %.0.i26) #5, !dbg !57
  %593 = getelementptr float, ptr addrspace(1) %2, i64 %574, !dbg !58
  %594 = bitcast float %589 to i32, !dbg !59
  %595 = bitcast float %590 to i32, !dbg !59
  %596 = bitcast float %591 to i32, !dbg !59
  %597 = bitcast float %592 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %594, i32 %595, i32 %596, i32 %597, ptr addrspace(1) %593, i1 %6) #5, !dbg !59
  %598 = or disjoint i64 %11, 8192, !dbg !60
  %599 = icmp samesign ult i64 %598, 9216, !dbg !63
  %600 = trunc nuw nsw i64 %598 to i32, !dbg !61
  %601 = add i32 %10, %600, !dbg !61
  %602 = sext i32 %601 to i64, !dbg !62
  %603 = getelementptr float, ptr addrspace(1) %1, i64 %602, !dbg !62
  %604 = and i1 %6, %599, !dbg !64
  %605 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %603, i1 %604, i32 0, i1 %604, i32 0, i1 %604, i32 0, i1 %604, i32 0, i1 %604) #5, !dbg !55
  %606 = extractvalue { i32, i32, i32, i32 } %605, 0, !dbg !55
  %607 = extractvalue { i32, i32, i32, i32 } %605, 1, !dbg !55
  %608 = extractvalue { i32, i32, i32, i32 } %605, 2, !dbg !55
  %609 = extractvalue { i32, i32, i32, i32 } %605, 3, !dbg !55
  %610 = bitcast i32 %606 to float, !dbg !55
  %611 = bitcast i32 %607 to float, !dbg !55
  %612 = bitcast i32 %608 to float, !dbg !55
  %613 = bitcast i32 %609 to float, !dbg !55
  %614 = fsub float %610, %459, !dbg !56
  %615 = fsub float %611, %459, !dbg !56
  %616 = fsub float %612, %459, !dbg !56
  %617 = fsub float %613, %459, !dbg !56
  %618 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %614, float %.0.i26) #5, !dbg !57
  %619 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %615, float %.0.i26) #5, !dbg !57
  %620 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %616, float %.0.i26) #5, !dbg !57
  %621 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %617, float %.0.i26) #5, !dbg !57
  %622 = getelementptr float, ptr addrspace(1) %2, i64 %602, !dbg !58
  %623 = bitcast float %618 to i32, !dbg !59
  %624 = bitcast float %619 to i32, !dbg !59
  %625 = bitcast float %620 to i32, !dbg !59
  %626 = bitcast float %621 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %623, i32 %624, i32 %625, i32 %626, ptr addrspace(1) %622, i1 %604) #5, !dbg !59
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccsaatqdgbpvgtz4ab334uztm3ksx6ixrhlesgfda4jtnuyh3l3f.py", directory: "inductor_cache/cs")
!4 = !{ptr @triton_red_fused_add_div_sqrt_sub_var_mean_34, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_div_sqrt_sub_var_mean_34, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_div_sqrt_sub_var_mean_34", linkageName: "triton_red_fused_add_div_sqrt_sub_var_mean_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 34, column: 44, scope: !7)
!14 = !DILocation(line: 30, column: 36, scope: !7)
!15 = !DILocation(line: 34, column: 39, scope: !7)
!16 = !DILocation(line: 34, column: 34, scope: !7)
!17 = !DILocation(line: 34, column: 49, scope: !7)
!18 = !DILocation(line: 39, column: 60, scope: !7)
!19 = !DILocation(line: 41, column: 64, scope: !7)
!20 = !DILocation(line: 31, column: 27, scope: !7)
!21 = !DILocation(line: 184, column: 30, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 37, column: 51, scope: !7)
!25 = !DILocation(line: 183, column: 24, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 185, column: 34, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 185, column: 26, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 186, column: 39, scope: !22, inlinedAt: !24)
!29 = !DILocation(line: 186, column: 31, scope: !22, inlinedAt: !24)
!30 = !DILocation(line: 186, column: 22, scope: !22, inlinedAt: !24)
!31 = !DILocation(line: 40, column: 56, scope: !7)
!32 = !DILocation(line: 32, column: 25, scope: !7)
!33 = !DILocation(line: 34, column: 57, scope: !7)
!34 = !DILocation(line: 192, column: 21, scope: !35, inlinedAt: !36)
!35 = distinct !DILexicalBlockFile(scope: !22, file: !23, discriminator: 0)
!36 = !DILocation(line: 43, column: 41, scope: !7)
!37 = !DILocation(line: 193, column: 28, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 194, column: 39, scope: !35, inlinedAt: !36)
!39 = !DILocation(line: 194, column: 60, scope: !35, inlinedAt: !36)
!40 = !DILocation(line: 194, column: 49, scope: !35, inlinedAt: !36)
!41 = !DILocation(line: 196, column: 25, scope: !35, inlinedAt: !36)
!42 = !DILocation(line: 196, column: 17, scope: !35, inlinedAt: !36)
!43 = !DILocation(line: 197, column: 15, scope: !35, inlinedAt: !36)
!44 = !DILocation(line: 197, column: 30, scope: !35, inlinedAt: !36)
!45 = !DILocation(line: 197, column: 38, scope: !35, inlinedAt: !36)
!46 = !DILocation(line: 197, column: 49, scope: !35, inlinedAt: !36)
!47 = !DILocation(line: 197, column: 22, scope: !35, inlinedAt: !36)
!48 = !DILocation(line: 204, column: 46, scope: !22, inlinedAt: !36)
!49 = !DILocation(line: 49, column: 18, scope: !7)
!50 = !DILocation(line: 51, column: 18, scope: !7)
!51 = !DILocation(line: 52, column: 26, scope: !7)
!52 = !DILocation(line: 53, column: 4, scope: !7)
!53 = !DILocation(line: 54, column: 28, scope: !7)
!54 = !DILocation(line: 54, column: 39, scope: !7)
!55 = !DILocation(line: 59, column: 50, scope: !7)
!56 = !DILocation(line: 60, column: 24, scope: !7)
!57 = !DILocation(line: 61, column: 24, scope: !7)
!58 = !DILocation(line: 62, column: 29, scope: !7)
!59 = !DILocation(line: 62, column: 51, scope: !7)
!60 = !DILocation(line: 56, column: 27, scope: !7)
!61 = !DILocation(line: 59, column: 40, scope: !7)
!62 = !DILocation(line: 59, column: 35, scope: !7)
!63 = !DILocation(line: 57, column: 25, scope: !7)
!64 = !DILocation(line: 59, column: 58, scope: !7)
!65 = !DILocation(line: 55, column: 4, scope: !7)
