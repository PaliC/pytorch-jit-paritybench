; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 1, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 6, !dbg !12
  %.lobit = and i32 %9, 1, !dbg !12
  %10 = or disjoint i32 %7, %.lobit, !dbg !13
  %11 = icmp slt i32 %10, 144, !dbg !14
  %12 = icmp slt i32 %7, 144, !dbg !14
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %14 = shl i32 %13, 9, !dbg !16
  %15 = shl i32 %8, 3, !dbg !17
  %16 = and i32 %15, 504, !dbg !17
  %17 = and i32 %8, 127, !dbg !17
  %18 = or disjoint i32 %14, %16, !dbg !18
  %19 = or disjoint i32 %18, 4, !dbg !18
  %20 = or disjoint i32 %14, %17, !dbg !18
  %21 = or disjoint i32 %20, 128, !dbg !18
  %22 = or disjoint i32 %20, 256, !dbg !18
  %23 = icmp slt i32 %18, 320, !dbg !19
  %24 = icmp slt i32 %20, 320, !dbg !19
  %25 = icmp slt i32 %21, 320, !dbg !19
  %26 = icmp slt i32 %22, 320, !dbg !19
  %27 = icmp slt i32 %14, 0, !dbg !19
  %.frozen = freeze i32 %10, !dbg !20
  %28 = sdiv i32 %.frozen, 6, !dbg !20
  %29 = mul i32 %28, 6, !dbg !21
  %.decomposed = sub i32 %.frozen, %29, !dbg !21
  %30 = srem i32 %28, 6, !dbg !22
  %31 = sdiv i32 %10, 36, !dbg !23
  %.frozen29 = freeze i32 %7, !dbg !23
  %32 = sdiv i32 %.frozen29, 36, !dbg !23
  %33 = mul i32 %32, 36, !dbg !24
  %.decomposed30 = sub i32 %.frozen29, %33, !dbg !24
  %34 = mul nsw i32 %.decomposed, 640, !dbg !25
  %35 = mul nsw i32 %30, 8320, !dbg !26
  %36 = mul i32 %31, 54080, !dbg !27
  %37 = add i32 %36, %34, !dbg !28
  %38 = add i32 %37, %18, !dbg !29
  %39 = add i32 %38, %35, !dbg !30
  %40 = add i32 %37, %19, !dbg !29
  %41 = add i32 %40, %35, !dbg !30
  %42 = sext i32 %39 to i64, !dbg !31
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !31
  %44 = sext i32 %41 to i64, !dbg !31
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !31
  %46 = and i1 %11, %23, !dbg !32
  %47 = and i1 %12, %24, !dbg !32
  %48 = and i1 %25, %12, !dbg !32
  %49 = and i1 %26, %12, !dbg !32
  %50 = and i1 %27, %12, !dbg !32
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %46) #2, !dbg !33
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !33
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !33
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !33
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !33
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %46) #2, !dbg !33
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !33
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !33
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !33
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !33
  %61 = add i32 %37, 320, !dbg !34
  %62 = add i32 %61, %18, !dbg !35
  %63 = add i32 %62, %35, !dbg !36
  %64 = add i32 %61, %19, !dbg !35
  %65 = add i32 %64, %35, !dbg !36
  %66 = sext i32 %63 to i64, !dbg !37
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !37
  %68 = sext i32 %65 to i64, !dbg !37
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !37
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %46) #2, !dbg !38
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !38
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !38
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !38
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !38
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %46) #2, !dbg !38
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !38
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !38
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !38
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !38
  %80 = add i32 %37, 640, !dbg !39
  %81 = add i32 %80, %18, !dbg !40
  %82 = add i32 %81, %35, !dbg !41
  %83 = add i32 %80, %19, !dbg !40
  %84 = add i32 %83, %35, !dbg !41
  %85 = sext i32 %82 to i64, !dbg !42
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !42
  %87 = sext i32 %84 to i64, !dbg !42
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !42
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 %46) #2, !dbg !43
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !43
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !43
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !43
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !43
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %88, i1 %46) #2, !dbg !43
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !43
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !43
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !43
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !43
  %99 = add i32 %37, 4160, !dbg !44
  %100 = add i32 %99, %18, !dbg !45
  %101 = add i32 %100, %35, !dbg !46
  %102 = add i32 %99, %19, !dbg !45
  %103 = add i32 %102, %35, !dbg !46
  %104 = sext i32 %101 to i64, !dbg !47
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !47
  %106 = sext i32 %103 to i64, !dbg !47
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !47
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 %46) #2, !dbg !48
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !48
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !48
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !48
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !48
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 %46) #2, !dbg !48
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !48
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !48
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !48
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !48
  %118 = add i32 %37, 4480, !dbg !49
  %119 = add i32 %118, %18, !dbg !50
  %120 = add i32 %119, %35, !dbg !51
  %121 = add i32 %118, %19, !dbg !50
  %122 = add i32 %121, %35, !dbg !51
  %123 = sext i32 %120 to i64, !dbg !52
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !52
  %125 = sext i32 %122 to i64, !dbg !52
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !52
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %124, i1 %46) #2, !dbg !53
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !53
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !53
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !53
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !53
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %126, i1 %46) #2, !dbg !53
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !53
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !53
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !53
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !53
  %137 = add i32 %37, 4800, !dbg !54
  %138 = add i32 %137, %18, !dbg !55
  %139 = add i32 %138, %35, !dbg !56
  %140 = add i32 %137, %19, !dbg !55
  %141 = add i32 %140, %35, !dbg !56
  %142 = sext i32 %139 to i64, !dbg !57
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !57
  %144 = sext i32 %141 to i64, !dbg !57
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !57
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %143, i1 %46) #2, !dbg !58
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !58
  %148 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !58
  %149 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !58
  %150 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !58
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %145, i1 %46) #2, !dbg !58
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !58
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !58
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !58
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !58
  %156 = add i32 %37, 8320, !dbg !59
  %157 = add i32 %156, %18, !dbg !60
  %158 = add i32 %157, %35, !dbg !61
  %159 = add i32 %156, %19, !dbg !60
  %160 = add i32 %159, %35, !dbg !61
  %161 = sext i32 %158 to i64, !dbg !62
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !62
  %163 = sext i32 %160 to i64, !dbg !62
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !62
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %162, i1 %46) #2, !dbg !63
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !63
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !63
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !63
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !63
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %164, i1 %46) #2, !dbg !63
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !63
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !63
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !63
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !63
  %175 = add i32 %37, 8640, !dbg !64
  %176 = add i32 %175, %18, !dbg !65
  %177 = add i32 %176, %35, !dbg !66
  %178 = add i32 %175, %19, !dbg !65
  %179 = add i32 %178, %35, !dbg !66
  %180 = sext i32 %177 to i64, !dbg !67
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !67
  %182 = sext i32 %179 to i64, !dbg !67
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !67
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %181, i1 %46) #2, !dbg !68
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !68
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !68
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !68
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !68
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %183, i1 %46) #2, !dbg !68
  %190 = extractvalue { i32, i32, i32, i32 } %189, 0, !dbg !68
  %191 = extractvalue { i32, i32, i32, i32 } %189, 1, !dbg !68
  %192 = extractvalue { i32, i32, i32, i32 } %189, 2, !dbg !68
  %193 = extractvalue { i32, i32, i32, i32 } %189, 3, !dbg !68
  %194 = add i32 %37, 8960, !dbg !69
  %195 = add i32 %194, %18, !dbg !70
  %196 = add i32 %195, %35, !dbg !71
  %197 = add i32 %194, %19, !dbg !70
  %198 = add i32 %197, %35, !dbg !71
  %199 = sext i32 %196 to i64, !dbg !72
  %200 = getelementptr float, ptr addrspace(1) %0, i64 %199, !dbg !72
  %201 = sext i32 %198 to i64, !dbg !72
  %202 = getelementptr float, ptr addrspace(1) %0, i64 %201, !dbg !72
  %203 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %200, i1 %46) #2, !dbg !73
  %204 = extractvalue { i32, i32, i32, i32 } %203, 0, !dbg !73
  %205 = extractvalue { i32, i32, i32, i32 } %203, 1, !dbg !73
  %206 = extractvalue { i32, i32, i32, i32 } %203, 2, !dbg !73
  %207 = extractvalue { i32, i32, i32, i32 } %203, 3, !dbg !73
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %202, i1 %46) #2, !dbg !73
  %209 = extractvalue { i32, i32, i32, i32 } %208, 0, !dbg !73
  %210 = extractvalue { i32, i32, i32, i32 } %208, 1, !dbg !73
  %211 = extractvalue { i32, i32, i32, i32 } %208, 2, !dbg !73
  %212 = extractvalue { i32, i32, i32, i32 } %208, 3, !dbg !73
  %213 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !33
  %214 = insertelement <4 x i32> %213, i32 %53, i64 1, !dbg !33
  %215 = insertelement <4 x i32> %214, i32 %54, i64 2, !dbg !33
  %216 = insertelement <4 x i32> %215, i32 %55, i64 3, !dbg !33
  %217 = bitcast <4 x i32> %216 to <4 x float>, !dbg !33
  %218 = insertelement <4 x i32> poison, i32 %71, i64 0, !dbg !38
  %219 = insertelement <4 x i32> %218, i32 %72, i64 1, !dbg !38
  %220 = insertelement <4 x i32> %219, i32 %73, i64 2, !dbg !38
  %221 = insertelement <4 x i32> %220, i32 %74, i64 3, !dbg !38
  %222 = bitcast <4 x i32> %221 to <4 x float>, !dbg !38
  %223 = insertelement <4 x i32> poison, i32 %90, i64 0, !dbg !43
  %224 = insertelement <4 x i32> %223, i32 %91, i64 1, !dbg !43
  %225 = insertelement <4 x i32> %224, i32 %92, i64 2, !dbg !43
  %226 = insertelement <4 x i32> %225, i32 %93, i64 3, !dbg !43
  %227 = bitcast <4 x i32> %226 to <4 x float>, !dbg !43
  %228 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !48
  %229 = insertelement <4 x i32> %228, i32 %110, i64 1, !dbg !48
  %230 = insertelement <4 x i32> %229, i32 %111, i64 2, !dbg !48
  %231 = insertelement <4 x i32> %230, i32 %112, i64 3, !dbg !48
  %232 = bitcast <4 x i32> %231 to <4 x float>, !dbg !48
  %233 = insertelement <4 x i32> poison, i32 %128, i64 0, !dbg !53
  %234 = insertelement <4 x i32> %233, i32 %129, i64 1, !dbg !53
  %235 = insertelement <4 x i32> %234, i32 %130, i64 2, !dbg !53
  %236 = insertelement <4 x i32> %235, i32 %131, i64 3, !dbg !53
  %237 = bitcast <4 x i32> %236 to <4 x float>, !dbg !53
  %238 = insertelement <4 x i32> poison, i32 %147, i64 0, !dbg !58
  %239 = insertelement <4 x i32> %238, i32 %148, i64 1, !dbg !58
  %240 = insertelement <4 x i32> %239, i32 %149, i64 2, !dbg !58
  %241 = insertelement <4 x i32> %240, i32 %150, i64 3, !dbg !58
  %242 = bitcast <4 x i32> %241 to <4 x float>, !dbg !58
  %243 = insertelement <4 x i32> poison, i32 %166, i64 0, !dbg !63
  %244 = insertelement <4 x i32> %243, i32 %167, i64 1, !dbg !63
  %245 = insertelement <4 x i32> %244, i32 %168, i64 2, !dbg !63
  %246 = insertelement <4 x i32> %245, i32 %169, i64 3, !dbg !63
  %247 = bitcast <4 x i32> %246 to <4 x float>, !dbg !63
  %248 = insertelement <4 x i32> poison, i32 %185, i64 0, !dbg !68
  %249 = insertelement <4 x i32> %248, i32 %186, i64 1, !dbg !68
  %250 = insertelement <4 x i32> %249, i32 %187, i64 2, !dbg !68
  %251 = insertelement <4 x i32> %250, i32 %188, i64 3, !dbg !68
  %252 = bitcast <4 x i32> %251 to <4 x float>, !dbg !68
  %253 = insertelement <4 x i32> poison, i32 %204, i64 0, !dbg !73
  %254 = insertelement <4 x i32> %253, i32 %205, i64 1, !dbg !73
  %255 = insertelement <4 x i32> %254, i32 %206, i64 2, !dbg !73
  %256 = insertelement <4 x i32> %255, i32 %207, i64 3, !dbg !73
  %257 = bitcast <4 x i32> %256 to <4 x float>, !dbg !73
  %258 = fcmp ogt <4 x float> %222, %217, !dbg !74
  %259 = fcmp uno <4 x float> %222, zeroinitializer, !dbg !78
  %260 = or <4 x i1> %258, %259, !dbg !79
  %.v = select <4 x i1> %260, <4 x i32> %221, <4 x i32> %216, !dbg !80
  %261 = bitcast <4 x i32> %.v to <4 x float>, !dbg !80
  %262 = fcmp olt <4 x float> %261, %227, !dbg !81
  %263 = fcmp uno <4 x float> %227, zeroinitializer, !dbg !83
  %264 = or <4 x i1> %263, %262, !dbg !84
  %.v16 = select <4 x i1> %264, <4 x i32> %226, <4 x i32> %.v, !dbg !85
  %265 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !85
  %266 = fcmp olt <4 x float> %265, %232, !dbg !86
  %267 = fcmp uno <4 x float> %232, zeroinitializer, !dbg !88
  %268 = or <4 x i1> %267, %266, !dbg !89
  %.v17 = select <4 x i1> %268, <4 x i32> %231, <4 x i32> %.v16, !dbg !90
  %269 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !90
  %270 = fcmp olt <4 x float> %269, %237, !dbg !91
  %271 = fcmp uno <4 x float> %237, zeroinitializer, !dbg !93
  %272 = or <4 x i1> %271, %270, !dbg !94
  %.v18 = select <4 x i1> %272, <4 x i32> %236, <4 x i32> %.v17, !dbg !95
  %273 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !95
  %274 = fcmp olt <4 x float> %273, %242, !dbg !96
  %275 = fcmp uno <4 x float> %242, zeroinitializer, !dbg !98
  %276 = or <4 x i1> %275, %274, !dbg !99
  %.v19 = select <4 x i1> %276, <4 x i32> %241, <4 x i32> %.v18, !dbg !100
  %277 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !100
  %278 = fcmp olt <4 x float> %277, %247, !dbg !101
  %279 = fcmp uno <4 x float> %247, zeroinitializer, !dbg !103
  %280 = or <4 x i1> %279, %278, !dbg !104
  %.v20 = select <4 x i1> %280, <4 x i32> %246, <4 x i32> %.v19, !dbg !105
  %281 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !105
  %282 = fcmp olt <4 x float> %281, %252, !dbg !106
  %283 = fcmp uno <4 x float> %252, zeroinitializer, !dbg !108
  %284 = or <4 x i1> %283, %282, !dbg !109
  %.v21 = select <4 x i1> %284, <4 x i32> %251, <4 x i32> %.v20, !dbg !110
  %285 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !110
  %286 = fcmp olt <4 x float> %285, %257, !dbg !111
  %287 = extractelement <4 x i1> %286, i64 0, !dbg !113
  %288 = extractelement <4 x i1> %286, i64 1, !dbg !113
  %289 = extractelement <4 x i1> %286, i64 2, !dbg !113
  %290 = extractelement <4 x i1> %286, i64 3, !dbg !113
  %291 = zext <4 x i1> %258 to <4 x i8>, !dbg !114
  %292 = select <4 x i1> %262, <4 x i8> splat (i8 2), <4 x i8> %291, !dbg !115
  %293 = select <4 x i1> %266, <4 x i8> splat (i8 3), <4 x i8> %292, !dbg !116
  %294 = select <4 x i1> %270, <4 x i8> splat (i8 4), <4 x i8> %293, !dbg !117
  %295 = select <4 x i1> %274, <4 x i8> splat (i8 5), <4 x i8> %294, !dbg !118
  %296 = select <4 x i1> %278, <4 x i8> splat (i8 6), <4 x i8> %295, !dbg !119
  %297 = select <4 x i1> %282, <4 x i8> splat (i8 7), <4 x i8> %296, !dbg !120
  %298 = select <4 x i1> %286, <4 x i8> splat (i8 8), <4 x i8> %297, !dbg !121
  %299 = insertelement <4 x i32> poison, i32 %57, i64 0, !dbg !33
  %300 = insertelement <4 x i32> %299, i32 %58, i64 1, !dbg !33
  %301 = insertelement <4 x i32> %300, i32 %59, i64 2, !dbg !33
  %302 = insertelement <4 x i32> %301, i32 %60, i64 3, !dbg !33
  %303 = bitcast <4 x i32> %302 to <4 x float>, !dbg !33
  %304 = insertelement <4 x i32> poison, i32 %76, i64 0, !dbg !38
  %305 = insertelement <4 x i32> %304, i32 %77, i64 1, !dbg !38
  %306 = insertelement <4 x i32> %305, i32 %78, i64 2, !dbg !38
  %307 = insertelement <4 x i32> %306, i32 %79, i64 3, !dbg !38
  %308 = bitcast <4 x i32> %307 to <4 x float>, !dbg !38
  %309 = insertelement <4 x i32> poison, i32 %95, i64 0, !dbg !43
  %310 = insertelement <4 x i32> %309, i32 %96, i64 1, !dbg !43
  %311 = insertelement <4 x i32> %310, i32 %97, i64 2, !dbg !43
  %312 = insertelement <4 x i32> %311, i32 %98, i64 3, !dbg !43
  %313 = bitcast <4 x i32> %312 to <4 x float>, !dbg !43
  %314 = insertelement <4 x i32> poison, i32 %114, i64 0, !dbg !48
  %315 = insertelement <4 x i32> %314, i32 %115, i64 1, !dbg !48
  %316 = insertelement <4 x i32> %315, i32 %116, i64 2, !dbg !48
  %317 = insertelement <4 x i32> %316, i32 %117, i64 3, !dbg !48
  %318 = bitcast <4 x i32> %317 to <4 x float>, !dbg !48
  %319 = insertelement <4 x i32> poison, i32 %133, i64 0, !dbg !53
  %320 = insertelement <4 x i32> %319, i32 %134, i64 1, !dbg !53
  %321 = insertelement <4 x i32> %320, i32 %135, i64 2, !dbg !53
  %322 = insertelement <4 x i32> %321, i32 %136, i64 3, !dbg !53
  %323 = bitcast <4 x i32> %322 to <4 x float>, !dbg !53
  %324 = insertelement <4 x i32> poison, i32 %152, i64 0, !dbg !58
  %325 = insertelement <4 x i32> %324, i32 %153, i64 1, !dbg !58
  %326 = insertelement <4 x i32> %325, i32 %154, i64 2, !dbg !58
  %327 = insertelement <4 x i32> %326, i32 %155, i64 3, !dbg !58
  %328 = bitcast <4 x i32> %327 to <4 x float>, !dbg !58
  %329 = insertelement <4 x i32> poison, i32 %171, i64 0, !dbg !63
  %330 = insertelement <4 x i32> %329, i32 %172, i64 1, !dbg !63
  %331 = insertelement <4 x i32> %330, i32 %173, i64 2, !dbg !63
  %332 = insertelement <4 x i32> %331, i32 %174, i64 3, !dbg !63
  %333 = bitcast <4 x i32> %332 to <4 x float>, !dbg !63
  %334 = insertelement <4 x i32> poison, i32 %190, i64 0, !dbg !68
  %335 = insertelement <4 x i32> %334, i32 %191, i64 1, !dbg !68
  %336 = insertelement <4 x i32> %335, i32 %192, i64 2, !dbg !68
  %337 = insertelement <4 x i32> %336, i32 %193, i64 3, !dbg !68
  %338 = bitcast <4 x i32> %337 to <4 x float>, !dbg !68
  %339 = insertelement <4 x i32> poison, i32 %209, i64 0, !dbg !73
  %340 = insertelement <4 x i32> %339, i32 %210, i64 1, !dbg !73
  %341 = insertelement <4 x i32> %340, i32 %211, i64 2, !dbg !73
  %342 = insertelement <4 x i32> %341, i32 %212, i64 3, !dbg !73
  %343 = bitcast <4 x i32> %342 to <4 x float>, !dbg !73
  %344 = fcmp ogt <4 x float> %308, %303, !dbg !74
  %345 = fcmp uno <4 x float> %308, zeroinitializer, !dbg !78
  %346 = or <4 x i1> %344, %345, !dbg !79
  %.v22 = select <4 x i1> %346, <4 x i32> %307, <4 x i32> %302, !dbg !80
  %347 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !80
  %348 = fcmp olt <4 x float> %347, %313, !dbg !81
  %349 = fcmp uno <4 x float> %313, zeroinitializer, !dbg !83
  %350 = or <4 x i1> %349, %348, !dbg !84
  %.v23 = select <4 x i1> %350, <4 x i32> %312, <4 x i32> %.v22, !dbg !85
  %351 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !85
  %352 = fcmp olt <4 x float> %351, %318, !dbg !86
  %353 = fcmp uno <4 x float> %318, zeroinitializer, !dbg !88
  %354 = or <4 x i1> %353, %352, !dbg !89
  %.v24 = select <4 x i1> %354, <4 x i32> %317, <4 x i32> %.v23, !dbg !90
  %355 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !90
  %356 = fcmp olt <4 x float> %355, %323, !dbg !91
  %357 = fcmp uno <4 x float> %323, zeroinitializer, !dbg !93
  %358 = or <4 x i1> %357, %356, !dbg !94
  %.v25 = select <4 x i1> %358, <4 x i32> %322, <4 x i32> %.v24, !dbg !95
  %359 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !95
  %360 = fcmp olt <4 x float> %359, %328, !dbg !96
  %361 = fcmp uno <4 x float> %328, zeroinitializer, !dbg !98
  %362 = or <4 x i1> %361, %360, !dbg !99
  %.v26 = select <4 x i1> %362, <4 x i32> %327, <4 x i32> %.v25, !dbg !100
  %363 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !100
  %364 = fcmp olt <4 x float> %363, %333, !dbg !101
  %365 = fcmp uno <4 x float> %333, zeroinitializer, !dbg !103
  %366 = or <4 x i1> %365, %364, !dbg !104
  %.v27 = select <4 x i1> %366, <4 x i32> %332, <4 x i32> %.v26, !dbg !105
  %367 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !105
  %368 = fcmp olt <4 x float> %367, %338, !dbg !106
  %369 = fcmp uno <4 x float> %338, zeroinitializer, !dbg !108
  %370 = or <4 x i1> %369, %368, !dbg !109
  %.v28 = select <4 x i1> %370, <4 x i32> %337, <4 x i32> %.v27, !dbg !110
  %371 = bitcast <4 x i32> %.v28 to <4 x float>, !dbg !110
  %372 = fcmp olt <4 x float> %371, %343, !dbg !111
  %373 = shufflevector <4 x float> %343, <4 x float> %257, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !122
  %374 = fcmp uno <8 x float> %373, zeroinitializer, !dbg !122
  %375 = extractelement <8 x i1> %374, i64 7, !dbg !113
  %376 = or i1 %375, %287, !dbg !113
  %377 = extractelement <8 x i1> %374, i64 6, !dbg !113
  %378 = or i1 %377, %288, !dbg !113
  %379 = extractelement <8 x i1> %374, i64 5, !dbg !113
  %380 = or i1 %379, %289, !dbg !113
  %381 = extractelement <8 x i1> %374, i64 4, !dbg !113
  %382 = or i1 %381, %290, !dbg !113
  %383 = extractelement <4 x i1> %372, i64 0, !dbg !113
  %384 = extractelement <8 x i1> %374, i64 3, !dbg !113
  %385 = or i1 %384, %383, !dbg !113
  %386 = extractelement <4 x i1> %372, i64 1, !dbg !113
  %387 = extractelement <8 x i1> %374, i64 2, !dbg !113
  %388 = or i1 %387, %386, !dbg !113
  %389 = extractelement <4 x i1> %372, i64 2, !dbg !113
  %390 = extractelement <8 x i1> %374, i64 1, !dbg !113
  %391 = or i1 %390, %389, !dbg !113
  %392 = extractelement <4 x i1> %372, i64 3, !dbg !113
  %393 = extractelement <8 x i1> %374, i64 0, !dbg !113
  %394 = or i1 %393, %392, !dbg !113
  %395 = zext <4 x i1> %344 to <4 x i8>, !dbg !114
  %396 = select <4 x i1> %348, <4 x i8> splat (i8 2), <4 x i8> %395, !dbg !115
  %397 = select <4 x i1> %352, <4 x i8> splat (i8 3), <4 x i8> %396, !dbg !116
  %398 = select <4 x i1> %356, <4 x i8> splat (i8 4), <4 x i8> %397, !dbg !117
  %399 = select <4 x i1> %360, <4 x i8> splat (i8 5), <4 x i8> %398, !dbg !118
  %400 = select <4 x i1> %364, <4 x i8> splat (i8 6), <4 x i8> %399, !dbg !119
  %401 = select <4 x i1> %368, <4 x i8> splat (i8 7), <4 x i8> %400, !dbg !120
  %402 = select <4 x i1> %372, <4 x i8> splat (i8 8), <4 x i8> %401, !dbg !121
  %403 = mul i32 %20, 36, !dbg !123
  %404 = mul i32 %21, 36, !dbg !123
  %405 = mul i32 %22, 36, !dbg !123
  %406 = add i32 %403, 13824, !dbg !123
  %407 = mul i32 %32, 39168, !dbg !124
  %408 = add i32 %407, %.decomposed30, !dbg !125
  %409 = add i32 %408, %403, !dbg !126
  %410 = add i32 %408, %404, !dbg !126
  %411 = add i32 %408, %405, !dbg !126
  %412 = add i32 %408, %406, !dbg !126
  %413 = sext i32 %409 to i64, !dbg !127
  %414 = getelementptr float, ptr addrspace(1) %1, i64 %413, !dbg !127
  %415 = sext i32 %410 to i64, !dbg !127
  %416 = getelementptr float, ptr addrspace(1) %1, i64 %415, !dbg !127
  %417 = sext i32 %411 to i64, !dbg !127
  %418 = getelementptr float, ptr addrspace(1) %1, i64 %417, !dbg !127
  %419 = sext i32 %412 to i64, !dbg !127
  %420 = getelementptr float, ptr addrspace(1) %1, i64 %419, !dbg !127
  %421 = shl i32 %8, 4, !dbg !128
  %422 = and i32 %421, 1008, !dbg !128
  %423 = or disjoint i32 %422, %.lobit, !dbg !128
  %424 = shl i32 %8, 1, !dbg !128
  %425 = and i32 %424, 254, !dbg !128
  %426 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %422, !dbg !128
  %427 = getelementptr inbounds float, ptr addrspace(3) %426, i32 %423, !dbg !128
  %428 = extractelement <4 x i32> %.v21, i64 0, !dbg !128
  %429 = select i1 %376, i32 %204, i32 %428, !dbg !129
  %430 = insertelement <1 x i32> poison, i32 %429, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %427, <1 x i32> %430, i1 true) #2, !dbg !128
  %431 = or disjoint i32 %423, 2, !dbg !128
  %432 = or disjoint i32 %422, 2, !dbg !128
  %433 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %432, !dbg !128
  %434 = getelementptr inbounds float, ptr addrspace(3) %433, i32 %431, !dbg !128
  %435 = extractelement <4 x i32> %.v21, i64 1, !dbg !128
  %436 = select i1 %378, i32 %205, i32 %435, !dbg !129
  %437 = insertelement <1 x i32> poison, i32 %436, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %434, <1 x i32> %437, i1 true) #2, !dbg !128
  %438 = or disjoint i32 %423, 4, !dbg !128
  %439 = or disjoint i32 %422, 4, !dbg !128
  %440 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %439, !dbg !128
  %441 = getelementptr inbounds float, ptr addrspace(3) %440, i32 %438, !dbg !128
  %442 = extractelement <4 x i32> %.v21, i64 2, !dbg !128
  %443 = select i1 %380, i32 %206, i32 %442, !dbg !129
  %444 = insertelement <1 x i32> poison, i32 %443, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %441, <1 x i32> %444, i1 true) #2, !dbg !128
  %445 = or disjoint i32 %423, 6, !dbg !128
  %446 = or disjoint i32 %422, 6, !dbg !128
  %447 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %446, !dbg !128
  %448 = getelementptr inbounds float, ptr addrspace(3) %447, i32 %445, !dbg !128
  %449 = extractelement <4 x i32> %.v21, i64 3, !dbg !128
  %450 = select i1 %382, i32 %207, i32 %449, !dbg !129
  %451 = insertelement <1 x i32> poison, i32 %450, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %448, <1 x i32> %451, i1 true) #2, !dbg !128
  %452 = or disjoint i32 %423, 8, !dbg !128
  %453 = or disjoint i32 %422, 8, !dbg !128
  %454 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %453, !dbg !128
  %455 = getelementptr inbounds float, ptr addrspace(3) %454, i32 %452, !dbg !128
  %456 = extractelement <4 x i32> %.v28, i64 0, !dbg !128
  %457 = select i1 %385, i32 %209, i32 %456, !dbg !129
  %458 = insertelement <1 x i32> poison, i32 %457, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %455, <1 x i32> %458, i1 true) #2, !dbg !128
  %459 = or disjoint i32 %423, 10, !dbg !128
  %460 = or disjoint i32 %422, 10, !dbg !128
  %461 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %460, !dbg !128
  %462 = getelementptr inbounds float, ptr addrspace(3) %461, i32 %459, !dbg !128
  %463 = extractelement <4 x i32> %.v28, i64 1, !dbg !128
  %464 = select i1 %388, i32 %210, i32 %463, !dbg !129
  %465 = insertelement <1 x i32> poison, i32 %464, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %462, <1 x i32> %465, i1 true) #2, !dbg !128
  %466 = or disjoint i32 %423, 12, !dbg !128
  %467 = or disjoint i32 %422, 12, !dbg !128
  %468 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %467, !dbg !128
  %469 = getelementptr inbounds float, ptr addrspace(3) %468, i32 %466, !dbg !128
  %470 = extractelement <4 x i32> %.v28, i64 2, !dbg !128
  %471 = select i1 %391, i32 %211, i32 %470, !dbg !129
  %472 = insertelement <1 x i32> poison, i32 %471, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %469, <1 x i32> %472, i1 true) #2, !dbg !128
  %473 = or disjoint i32 %423, 14, !dbg !128
  %474 = or disjoint i32 %422, 14, !dbg !128
  %475 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %474, !dbg !128
  %476 = getelementptr inbounds float, ptr addrspace(3) %475, i32 %473, !dbg !128
  %477 = extractelement <4 x i32> %.v28, i64 3, !dbg !128
  %478 = select i1 %394, i32 %212, i32 %477, !dbg !129
  %479 = insertelement <1 x i32> poison, i32 %478, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %476, <1 x i32> %479, i1 true) #2, !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %480 = getelementptr float, ptr addrspace(3) @global_smem, i32 %425, !dbg !128
  %481 = getelementptr float, ptr addrspace(3) %480, i32 %425, !dbg !128
  %482 = or disjoint i32 %425, 256, !dbg !128
  %483 = getelementptr float, ptr addrspace(3) @global_smem, i32 %482, !dbg !128
  %484 = getelementptr float, ptr addrspace(3) %483, i32 %482, !dbg !128
  %485 = load <2 x i32>, ptr addrspace(3) %484, align 8, !dbg !128
  %486 = or disjoint i32 %425, 512, !dbg !128
  %487 = getelementptr float, ptr addrspace(3) @global_smem, i32 %486, !dbg !128
  %488 = getelementptr float, ptr addrspace(3) %487, i32 %486, !dbg !128
  %489 = load <2 x i32>, ptr addrspace(3) %488, align 8, !dbg !128
  %490 = or disjoint i32 %425, 768, !dbg !128
  %491 = getelementptr float, ptr addrspace(3) @global_smem, i32 %490, !dbg !128
  %492 = getelementptr float, ptr addrspace(3) %491, i32 %490, !dbg !128
  %493 = load <2 x i32>, ptr addrspace(3) %492, align 8, !dbg !128
  %.extract = load i32, ptr addrspace(3) %481, align 8, !dbg !128
  %494 = getelementptr inbounds i8, ptr addrspace(3) %481, i32 4, !dbg !128
  %.extract9 = load i32, ptr addrspace(3) %494, align 4, !dbg !128
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract9, ptr addrspace(1) %414, i1 %47) #2, !dbg !128
  %.extract10 = extractelement <2 x i32> %485, i64 0, !dbg !128
  %.extract11 = extractelement <2 x i32> %485, i64 1, !dbg !128
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract10, i32 %.extract11, ptr addrspace(1) %416, i1 %48) #2, !dbg !128
  %.extract12 = extractelement <2 x i32> %489, i64 0, !dbg !128
  %.extract13 = extractelement <2 x i32> %489, i64 1, !dbg !128
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract12, i32 %.extract13, ptr addrspace(1) %418, i1 %49) #2, !dbg !128
  %.extract14 = extractelement <2 x i32> %493, i64 0, !dbg !128
  %.extract15 = extractelement <2 x i32> %493, i64 1, !dbg !128
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract14, i32 %.extract15, ptr addrspace(1) %420, i1 %50) #2, !dbg !128
  %495 = mul i32 %10, 320, !dbg !130
  %496 = add i32 %18, %495, !dbg !131
  %497 = sext i32 %496 to i64, !dbg !132
  %498 = getelementptr i8, ptr addrspace(1) %2, i64 %497, !dbg !132
  %499 = bitcast <4 x i8> %298 to i32, !dbg !133
  %500 = bitcast <4 x i8> %402 to i32, !dbg !133
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %499, i32 %500, ptr addrspace(1) %498, i1 %46) #2, !dbg !133
  ret void, !dbg !134
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "copev6z553jcjdvn2jcsjk6sim2scmgpud5fba5u4xelavys5egp.py", directory: "inductor_cache/op")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_35", linkageName: "triton_poi_fused_max_pool2d_with_indices_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 21, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 26, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 32, column: 19, scope: !7)
!25 = !DILocation(line: 34, column: 39, scope: !7)
!26 = !DILocation(line: 34, column: 49, scope: !7)
!27 = !DILocation(line: 34, column: 60, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 44, scope: !7)
!30 = !DILocation(line: 34, column: 54, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 73, scope: !7)
!33 = !DILocation(line: 34, column: 65, scope: !7)
!34 = !DILocation(line: 35, column: 41, scope: !7)
!35 = !DILocation(line: 35, column: 50, scope: !7)
!36 = !DILocation(line: 35, column: 60, scope: !7)
!37 = !DILocation(line: 35, column: 30, scope: !7)
!38 = !DILocation(line: 35, column: 71, scope: !7)
!39 = !DILocation(line: 36, column: 41, scope: !7)
!40 = !DILocation(line: 36, column: 50, scope: !7)
!41 = !DILocation(line: 36, column: 60, scope: !7)
!42 = !DILocation(line: 36, column: 30, scope: !7)
!43 = !DILocation(line: 36, column: 71, scope: !7)
!44 = !DILocation(line: 37, column: 42, scope: !7)
!45 = !DILocation(line: 37, column: 51, scope: !7)
!46 = !DILocation(line: 37, column: 61, scope: !7)
!47 = !DILocation(line: 37, column: 30, scope: !7)
!48 = !DILocation(line: 37, column: 72, scope: !7)
!49 = !DILocation(line: 38, column: 42, scope: !7)
!50 = !DILocation(line: 38, column: 51, scope: !7)
!51 = !DILocation(line: 38, column: 61, scope: !7)
!52 = !DILocation(line: 38, column: 30, scope: !7)
!53 = !DILocation(line: 38, column: 72, scope: !7)
!54 = !DILocation(line: 39, column: 42, scope: !7)
!55 = !DILocation(line: 39, column: 51, scope: !7)
!56 = !DILocation(line: 39, column: 61, scope: !7)
!57 = !DILocation(line: 39, column: 30, scope: !7)
!58 = !DILocation(line: 39, column: 72, scope: !7)
!59 = !DILocation(line: 40, column: 43, scope: !7)
!60 = !DILocation(line: 40, column: 52, scope: !7)
!61 = !DILocation(line: 40, column: 62, scope: !7)
!62 = !DILocation(line: 40, column: 31, scope: !7)
!63 = !DILocation(line: 40, column: 73, scope: !7)
!64 = !DILocation(line: 41, column: 43, scope: !7)
!65 = !DILocation(line: 41, column: 52, scope: !7)
!66 = !DILocation(line: 41, column: 62, scope: !7)
!67 = !DILocation(line: 41, column: 31, scope: !7)
!68 = !DILocation(line: 41, column: 73, scope: !7)
!69 = !DILocation(line: 42, column: 43, scope: !7)
!70 = !DILocation(line: 42, column: 52, scope: !7)
!71 = !DILocation(line: 42, column: 62, scope: !7)
!72 = !DILocation(line: 42, column: 31, scope: !7)
!73 = !DILocation(line: 42, column: 73, scope: !7)
!74 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !77)
!75 = distinct !DILexicalBlockFile(scope: !7, file: !76, discriminator: 0)
!76 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!77 = !DILocation(line: 43, column: 40, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !82)
!82 = !DILocation(line: 44, column: 40, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !87)
!87 = !DILocation(line: 45, column: 40, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !92)
!92 = !DILocation(line: 46, column: 40, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !97)
!97 = !DILocation(line: 47, column: 41, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !102)
!102 = !DILocation(line: 48, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !107)
!107 = !DILocation(line: 49, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !107)
!111 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !112)
!112 = !DILocation(line: 50, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !112)
!114 = !DILocation(line: 54, column: 35, scope: !7)
!115 = !DILocation(line: 57, column: 35, scope: !7)
!116 = !DILocation(line: 60, column: 35, scope: !7)
!117 = !DILocation(line: 63, column: 35, scope: !7)
!118 = !DILocation(line: 66, column: 35, scope: !7)
!119 = !DILocation(line: 69, column: 35, scope: !7)
!120 = !DILocation(line: 72, column: 35, scope: !7)
!121 = !DILocation(line: 75, column: 35, scope: !7)
!122 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !112)
!123 = !DILocation(line: 76, column: 33, scope: !7)
!124 = !DILocation(line: 76, column: 44, scope: !7)
!125 = !DILocation(line: 76, column: 30, scope: !7)
!126 = !DILocation(line: 76, column: 38, scope: !7)
!127 = !DILocation(line: 76, column: 25, scope: !7)
!128 = !DILocation(line: 76, column: 56, scope: !7)
!129 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !112)
!130 = !DILocation(line: 77, column: 34, scope: !7)
!131 = !DILocation(line: 77, column: 30, scope: !7)
!132 = !DILocation(line: 77, column: 25, scope: !7)
!133 = !DILocation(line: 77, column: 46, scope: !7)
!134 = !DILocation(line: 77, column: 4, scope: !7)
