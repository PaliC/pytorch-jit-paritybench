; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_25(ptr addrspace(1) %0, ptr addrspace(1) nocapture readnone %1, ptr addrspace(1) nocapture readnone %2, ptr addrspace(1) %3, ptr addrspace(1) nocapture readnone %4, ptr addrspace(1) %5, ptr addrspace(1) nocapture readnone %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = icmp slt i32 %18, 4, !dbg !15
  %.frozen = freeze i32 %18, !dbg !16
  %20 = sdiv i32 %.frozen, 2, !dbg !16
  %21 = mul i32 %20, 2, !dbg !17
  %.decomposed = sub i32 %.frozen, %21, !dbg !17
  %.frozen1 = freeze i32 %17, !dbg !18
  %22 = sdiv i32 %.frozen1, 256, !dbg !18
  %23 = mul i32 %22, 256, !dbg !19
  %.decomposed2 = sub i32 %.frozen1, %23, !dbg !19
  %24 = sext i32 %17 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !20
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #2, !dbg !21
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !21
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !21
  %29 = bitcast i32 %27 to float, !dbg !21
  %30 = bitcast i32 %28 to float, !dbg !21
  %31 = sext i32 %.decomposed to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %19) #2, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %19) #2, !dbg !23
  %35 = bitcast i32 %34 to float, !dbg !23
  %36 = sext i32 %20 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %7, i64 %36, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %19) #2, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %19) #2, !dbg !25
  %40 = bitcast i32 %39 to float, !dbg !25
  %41 = shl i32 %18, 8, !dbg !26
  %42 = add i32 %.decomposed2, %41, !dbg !27
  %43 = shl i32 %22, 10, !dbg !28
  %44 = add i32 %42, %43, !dbg !29
  %45 = sext i32 %44 to i64, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !30
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %19) #2, !dbg !31
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !31
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !31
  %50 = bitcast i32 %48 to float, !dbg !31
  %51 = bitcast i32 %49 to float, !dbg !31
  %52 = sext i32 %.decomposed2 to i64, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %8, i64 %52, !dbg !32
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #2, !dbg !33
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !33
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !33
  %57 = bitcast i32 %55 to float, !dbg !33
  %58 = bitcast i32 %56 to float, !dbg !33
  %59 = fsub float %29, %29, !dbg !34
  %60 = fsub float %30, %30, !dbg !34
  %61 = fmul float %59, %35, !dbg !35
  %62 = fmul float %60, %35, !dbg !35
  %63 = fadd float %61, %29, !dbg !36
  %64 = fadd float %62, %30, !dbg !36
  %65 = fsub float %63, %63, !dbg !37
  %66 = fsub float %64, %64, !dbg !37
  %67 = fmul float %65, %40, !dbg !38
  %68 = fmul float %66, %40, !dbg !38
  %69 = fadd float %63, %67, !dbg !39
  %70 = fadd float %64, %68, !dbg !39
  %71 = fadd float %50, %57, !dbg !40
  %72 = fadd float %51, %58, !dbg !40
  %73 = fadd float %69, %71, !dbg !41
  %74 = fadd float %70, %72, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %75 = bitcast float %73 to i32, !dbg !43
  %76 = bitcast float %74 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %75, i32 %76, ptr addrspace(1) %46, i1 %19) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c53qykjszpxtilaljhmx22eftahqhncootwyrskvstsx26he4io4.py", directory: "inductor_cache/53")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_25", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 28, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 36, column: 30, scope: !7)
!21 = !DILocation(line: 36, column: 35, scope: !7)
!22 = !DILocation(line: 38, column: 31, scope: !7)
!23 = !DILocation(line: 38, column: 36, scope: !7)
!24 = !DILocation(line: 40, column: 31, scope: !7)
!25 = !DILocation(line: 40, column: 36, scope: !7)
!26 = !DILocation(line: 41, column: 44, scope: !7)
!27 = !DILocation(line: 41, column: 40, scope: !7)
!28 = !DILocation(line: 41, column: 54, scope: !7)
!29 = !DILocation(line: 41, column: 49, scope: !7)
!30 = !DILocation(line: 41, column: 35, scope: !7)
!31 = !DILocation(line: 41, column: 59, scope: !7)
!32 = !DILocation(line: 42, column: 31, scope: !7)
!33 = !DILocation(line: 42, column: 36, scope: !7)
!34 = !DILocation(line: 53, column: 19, scope: !7)
!35 = !DILocation(line: 54, column: 20, scope: !7)
!36 = !DILocation(line: 55, column: 19, scope: !7)
!37 = !DILocation(line: 59, column: 20, scope: !7)
!38 = !DILocation(line: 60, column: 20, scope: !7)
!39 = !DILocation(line: 61, column: 20, scope: !7)
!40 = !DILocation(line: 62, column: 20, scope: !7)
!41 = !DILocation(line: 63, column: 20, scope: !7)
!42 = !DILocation(line: 64, column: 4, scope: !7)
!43 = !DILocation(line: 65, column: 59, scope: !7)
!44 = !DILocation(line: 65, column: 4, scope: !7)
