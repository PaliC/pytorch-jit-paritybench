; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_pixel_shuffle_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %nctaid.y;", "=r"() #2, !dbg !12
  %9 = mul i32 %8, %7, !dbg !13
  %10 = add i32 %9, %6, !dbg !14
  %11 = shl i32 %10, 8, !dbg !15
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %13 = shl i32 %12, 2, !dbg !16
  %14 = and i32 %13, 252, !dbg !16
  %15 = and i32 %12, 127, !dbg !16
  %16 = or disjoint i32 %11, %14, !dbg !17
  %17 = or disjoint i32 %11, %15, !dbg !17
  %18 = or disjoint i32 %17, 128, !dbg !17
  %19 = icmp slt i32 %16, 262144, !dbg !18
  %20 = icmp slt i32 %17, 262144, !dbg !18
  %21 = icmp slt i32 %18, 262144, !dbg !18
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !19
  %23 = shl i32 %22, 2, !dbg !20
  %24 = lshr i32 %12, 6, !dbg !21
  %.lobit = and i32 %24, 1, !dbg !21
  %25 = or disjoint i32 %23, %.lobit, !dbg !22
  %26 = or disjoint i32 %25, 2, !dbg !22
  %27 = icmp slt i32 %25, 4, !dbg !23
  %28 = icmp slt i32 %26, 4, !dbg !23
  %29 = icmp slt i32 %23, 4, !dbg !23
  %30 = srem i32 %16, 64, !dbg !24
  %31 = sdiv i32 %17, 64, !dbg !25
  %32 = sdiv i32 %18, 64, !dbg !25
  %33 = srem i32 %31, 4, !dbg !26
  %34 = srem i32 %32, 4, !dbg !26
  %35 = sdiv i32 %16, 16384, !dbg !27
  %36 = sdiv i32 %17, 16384, !dbg !27
  %37 = sdiv i32 %18, 16384, !dbg !27
  %38 = srem i32 %36, 4, !dbg !28
  %39 = srem i32 %37, 4, !dbg !28
  %40 = shl i32 %25, 12, !dbg !29
  %41 = shl i32 %26, 12, !dbg !29
  %42 = shl i32 %35, 16, !dbg !30
  %43 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !25
  %44 = shufflevector <2 x i32> %43, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !25
  %45 = sdiv <2 x i32> %44, <i32 64, i32 256>, !dbg !25
  %46 = srem <2 x i32> %45, <i32 4, i32 64>, !dbg !26
  %47 = shl nsw <2 x i32> %46, <i32 14, i32 6>, !dbg !31
  %48 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !32
  %49 = insertelement <2 x i32> %48, i32 %30, i64 1, !dbg !32
  %50 = add <2 x i32> %47, %49, !dbg !32
  %51 = extractelement <2 x i32> %50, i64 0, !dbg !33
  %52 = add i32 %51, %40, !dbg !33
  %53 = extractelement <2 x i32> %50, i64 1, !dbg !34
  %54 = add i32 %52, %53, !dbg !34
  %55 = add i32 %51, %41, !dbg !33
  %56 = add i32 %55, %53, !dbg !34
  %57 = sext i32 %54 to i64, !dbg !35
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !35
  %59 = sext i32 %56 to i64, !dbg !35
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !35
  %61 = and i1 %27, %19, !dbg !36
  %62 = and i1 %28, %19, !dbg !36
  %63 = and i1 %29, %20, !dbg !36
  %64 = and i1 %21, %29, !dbg !36
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %61) #2, !dbg !37
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !37
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !37
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !37
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !37
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %62) #2, !dbg !37
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !37
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !37
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !37
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !37
  %75 = shl i32 %12, 4, !dbg !37
  %76 = and i32 %75, 1008, !dbg !37
  %77 = or disjoint i32 %76, %.lobit, !dbg !37
  %78 = and i32 %13, 508, !dbg !37
  %79 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %76, !dbg !37
  %80 = getelementptr float, ptr addrspace(3) %79, i32 %77, !dbg !37
  %81 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #2, !dbg !37
  %82 = or disjoint i32 %77, 4, !dbg !37
  %83 = lshr i32 %82, 2, !dbg !37
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i32 %83, !dbg !37
  %85 = getelementptr float, ptr addrspace(3) %84, i32 %82, !dbg !37
  %86 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #2, !dbg !37
  %87 = or disjoint i32 %77, 8, !dbg !37
  %88 = lshr i32 %87, 2, !dbg !37
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %88, !dbg !37
  %90 = getelementptr float, ptr addrspace(3) %89, i32 %87, !dbg !37
  %91 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #2, !dbg !37
  %92 = or disjoint i32 %77, 12, !dbg !37
  %93 = lshr i32 %92, 2, !dbg !37
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !37
  %95 = getelementptr float, ptr addrspace(3) %94, i32 %92, !dbg !37
  %96 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !37
  %97 = or disjoint i32 %77, 2, !dbg !37
  %98 = getelementptr float, ptr addrspace(3) %79, i32 %97, !dbg !37
  %99 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !37
  %100 = or disjoint i32 %77, 6, !dbg !37
  %101 = lshr i32 %100, 2, !dbg !37
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !37
  %103 = getelementptr float, ptr addrspace(3) %102, i32 %100, !dbg !37
  %104 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #2, !dbg !37
  %105 = or disjoint i32 %77, 10, !dbg !37
  %106 = lshr i32 %105, 2, !dbg !37
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !37
  %108 = getelementptr float, ptr addrspace(3) %107, i32 %105, !dbg !37
  %109 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !37
  %110 = or disjoint i32 %77, 14, !dbg !37
  %111 = lshr i32 %110, 2, !dbg !37
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !37
  %113 = getelementptr float, ptr addrspace(3) %112, i32 %110, !dbg !37
  %114 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %115 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %78, !dbg !37
  %116 = getelementptr inbounds float, ptr addrspace(3) %115, i32 %78, !dbg !37
  %117 = load float, ptr addrspace(3) %116, align 4, !dbg !37
  %118 = or disjoint i32 %78, 1, !dbg !37
  %119 = getelementptr inbounds float, ptr addrspace(3) %115, i32 %118, !dbg !37
  %120 = load float, ptr addrspace(3) %119, align 4, !dbg !37
  %121 = or disjoint i32 %78, 2, !dbg !37
  %122 = getelementptr inbounds float, ptr addrspace(3) %115, i32 %121, !dbg !37
  %123 = load float, ptr addrspace(3) %122, align 4, !dbg !37
  %124 = or disjoint i32 %78, 3, !dbg !37
  %125 = getelementptr inbounds float, ptr addrspace(3) %115, i32 %124, !dbg !37
  %126 = load float, ptr addrspace(3) %125, align 4, !dbg !37
  %127 = or disjoint i32 %78, 512, !dbg !37
  %128 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %127, !dbg !37
  %129 = getelementptr inbounds float, ptr addrspace(3) %128, i32 %127, !dbg !37
  %130 = load float, ptr addrspace(3) %129, align 4, !dbg !37
  %131 = or disjoint i32 %78, 513, !dbg !37
  %132 = lshr i32 %131, 2, !dbg !37
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %132, !dbg !37
  %134 = getelementptr inbounds float, ptr addrspace(3) %133, i32 %131, !dbg !37
  %135 = load float, ptr addrspace(3) %134, align 4, !dbg !37
  %136 = or disjoint i32 %78, 514, !dbg !37
  %137 = lshr i32 %136, 2, !dbg !37
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %137, !dbg !37
  %139 = getelementptr inbounds float, ptr addrspace(3) %138, i32 %136, !dbg !37
  %140 = load float, ptr addrspace(3) %139, align 4, !dbg !37
  %141 = or disjoint i32 %78, 515, !dbg !37
  %142 = lshr i32 %141, 2, !dbg !37
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %142, !dbg !37
  %144 = getelementptr inbounds float, ptr addrspace(3) %143, i32 %141, !dbg !37
  %145 = load float, ptr addrspace(3) %144, align 4, !dbg !37
  %146 = add i32 %33, %22, !dbg !38
  %147 = shl i32 %146, 2, !dbg !38
  %148 = add i32 %22, %34, !dbg !38
  %149 = shl i32 %148, 2, !dbg !38
  %150 = shl nsw i32 %38, 4, !dbg !39
  %151 = shl nsw i32 %39, 4, !dbg !39
  %152 = add i32 %147, %150, !dbg !40
  %153 = add i32 %149, %151, !dbg !40
  %154 = sext i32 %152 to i64, !dbg !41
  %155 = getelementptr float, ptr addrspace(1) %1, i64 %154, !dbg !41
  %156 = sext i32 %153 to i64, !dbg !41
  %157 = getelementptr float, ptr addrspace(1) %1, i64 %156, !dbg !41
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %155, i1 %63) #2, !dbg !42
  %159 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !42
  %160 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !42
  %161 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !42
  %162 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !42
  %163 = bitcast i32 %159 to float, !dbg !42
  %164 = bitcast i32 %160 to float, !dbg !42
  %165 = bitcast i32 %161 to float, !dbg !42
  %166 = bitcast i32 %162 to float, !dbg !42
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %157, i1 %64) #2, !dbg !42
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !42
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !42
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !42
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !42
  %172 = bitcast i32 %168 to float, !dbg !42
  %173 = bitcast i32 %169 to float, !dbg !42
  %174 = bitcast i32 %170 to float, !dbg !42
  %175 = bitcast i32 %171 to float, !dbg !42
  %176 = fadd float %117, %163, !dbg !43
  %177 = fadd float %120, %164, !dbg !43
  %178 = fadd float %123, %165, !dbg !43
  %179 = fadd float %126, %166, !dbg !43
  %180 = fadd float %130, %172, !dbg !43
  %181 = fadd float %135, %173, !dbg !43
  %182 = fadd float %140, %174, !dbg !43
  %183 = fadd float %145, %175, !dbg !43
  %184 = add i32 %17, %22, !dbg !44
  %185 = shl i32 %184, 2, !dbg !44
  %186 = add i32 %22, %18, !dbg !44
  %187 = shl i32 %186, 2, !dbg !44
  %188 = sext i32 %185 to i64, !dbg !45
  %189 = getelementptr float, ptr addrspace(1) %2, i64 %188, !dbg !45
  %190 = sext i32 %187 to i64, !dbg !45
  %191 = getelementptr float, ptr addrspace(1) %2, i64 %190, !dbg !45
  %192 = bitcast float %176 to i32, !dbg !46
  %193 = bitcast float %177 to i32, !dbg !46
  %194 = bitcast float %178 to i32, !dbg !46
  %195 = bitcast float %179 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %192, i32 %193, i32 %194, i32 %195, ptr addrspace(1) %189, i1 %63) #2, !dbg !46
  %196 = bitcast float %180 to i32, !dbg !46
  %197 = bitcast float %181 to i32, !dbg !46
  %198 = bitcast float %182 to i32, !dbg !46
  %199 = bitcast float %183 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %196, i32 %197, i32 %198, i32 %199, ptr addrspace(1) %191, i1 %64) #2, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjy7xcqrcmn53gy2p5mfg6tcbmumrlzax3uuik2lt4wfst7yytys.py", directory: "inductor_cache/jy")
!4 = !{ptr @triton_poi_fused_pixel_shuffle_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_pixel_shuffle_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_pixel_shuffle_8", linkageName: "triton_poi_fused_pixel_shuffle_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 29, scope: !7)
!11 = !DILocation(line: 22, column: 48, scope: !7)
!12 = !DILocation(line: 22, column: 69, scope: !7)
!13 = !DILocation(line: 22, column: 53, scope: !7)
!14 = !DILocation(line: 22, column: 34, scope: !7)
!15 = !DILocation(line: 22, column: 75, scope: !7)
!16 = !DILocation(line: 23, column: 44, scope: !7)
!17 = !DILocation(line: 23, column: 23, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 25, column: 28, scope: !7)
!20 = !DILocation(line: 25, column: 33, scope: !7)
!21 = !DILocation(line: 26, column: 44, scope: !7)
!22 = !DILocation(line: 26, column: 23, scope: !7)
!23 = !DILocation(line: 27, column: 21, scope: !7)
!24 = !DILocation(line: 29, column: 19, scope: !7)
!25 = !DILocation(line: 30, column: 21, scope: !7)
!26 = !DILocation(line: 30, column: 27, scope: !7)
!27 = !DILocation(line: 32, column: 19, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 48, scope: !7)
!30 = !DILocation(line: 35, column: 70, scope: !7)
!31 = !DILocation(line: 35, column: 59, scope: !7)
!32 = !DILocation(line: 35, column: 43, scope: !7)
!33 = !DILocation(line: 35, column: 53, scope: !7)
!34 = !DILocation(line: 35, column: 64, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 83, scope: !7)
!37 = !DILocation(line: 35, column: 75, scope: !7)
!38 = !DILocation(line: 36, column: 35, scope: !7)
!39 = !DILocation(line: 36, column: 45, scope: !7)
!40 = !DILocation(line: 36, column: 42, scope: !7)
!41 = !DILocation(line: 36, column: 30, scope: !7)
!42 = !DILocation(line: 36, column: 50, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 38, column: 30, scope: !7)
!45 = !DILocation(line: 38, column: 25, scope: !7)
!46 = !DILocation(line: 38, column: 43, scope: !7)
!47 = !DILocation(line: 38, column: 4, scope: !7)
