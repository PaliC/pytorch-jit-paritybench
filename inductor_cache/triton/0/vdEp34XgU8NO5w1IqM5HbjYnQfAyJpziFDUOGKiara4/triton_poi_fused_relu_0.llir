; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_relu_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = shl i32 %8, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %11, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = icmp slt i32 %14, 2912, !dbg !14
  %18 = icmp slt i32 %15, 2912, !dbg !14
  %19 = icmp slt i32 %16, 2912, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 5, !dbg !16
  %22 = or disjoint i32 %21, %13, !dbg !17
  %23 = or disjoint i32 %21, %10, !dbg !17
  %24 = or disjoint i32 %21, %11, !dbg !17
  %.frozen = freeze i32 %16, !dbg !18
  %25 = sdiv i32 %.frozen, 728, !dbg !18
  %26 = mul i32 %25, 728, !dbg !19
  %.decomposed = sub i32 %.frozen, %26, !dbg !19
  %27 = shl i32 %14, 12, !dbg !20
  %28 = shl i32 %15, 12, !dbg !20
  %29 = add i32 %22, %27, !dbg !21
  %30 = add i32 %22, %28, !dbg !21
  %31 = sext i32 %29 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = sext i32 %30 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !22
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %17) #2, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !23
  %40 = bitcast i32 %36 to float, !dbg !23
  %41 = bitcast i32 %37 to float, !dbg !23
  %42 = bitcast i32 %38 to float, !dbg !23
  %43 = bitcast i32 %39 to float, !dbg !23
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %18) #2, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !23
  %49 = bitcast i32 %45 to float, !dbg !23
  %50 = bitcast i32 %46 to float, !dbg !23
  %51 = bitcast i32 %47 to float, !dbg !23
  %52 = bitcast i32 %48 to float, !dbg !23
  %53 = fcmp olt float %40, 0.000000e+00, !dbg !24
  %54 = fcmp olt float %41, 0.000000e+00, !dbg !24
  %55 = fcmp olt float %42, 0.000000e+00, !dbg !24
  %56 = fcmp olt float %43, 0.000000e+00, !dbg !24
  %57 = fcmp olt float %49, 0.000000e+00, !dbg !24
  %58 = fcmp olt float %50, 0.000000e+00, !dbg !24
  %59 = fcmp olt float %51, 0.000000e+00, !dbg !24
  %60 = fcmp olt float %52, 0.000000e+00, !dbg !24
  %61 = select i1 %53, float 0.000000e+00, float %40, !dbg !28
  %62 = select i1 %54, float 0.000000e+00, float %41, !dbg !28
  %63 = select i1 %55, float 0.000000e+00, float %42, !dbg !28
  %64 = select i1 %56, float 0.000000e+00, float %43, !dbg !28
  %65 = select i1 %57, float 0.000000e+00, float %49, !dbg !28
  %66 = select i1 %58, float 0.000000e+00, float %50, !dbg !28
  %67 = select i1 %59, float 0.000000e+00, float %51, !dbg !28
  %68 = select i1 %60, float 0.000000e+00, float %52, !dbg !28
  %69 = mul i32 %23, 728, !dbg !29
  %70 = mul i32 %24, 728, !dbg !29
  %71 = mul i32 %25, 2981888, !dbg !30
  %72 = add i32 %71, %.decomposed, !dbg !31
  %73 = add i32 %72, %69, !dbg !32
  %74 = add i32 %72, %70, !dbg !32
  %75 = sext i32 %73 to i64, !dbg !33
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !33
  %77 = sext i32 %74 to i64, !dbg !33
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !33
  %79 = shl i32 %8, 7, !dbg !34
  %80 = and i32 %79, 896, !dbg !34
  %81 = or disjoint i32 %80, %10, !dbg !34
  %82 = and i32 %12, 508, !dbg !34
  %83 = lshr exact i32 %80, 3, !dbg !34
  %84 = or disjoint i32 %83, %81, !dbg !34
  %85 = zext nneg i32 %84 to i64, !dbg !34
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %85, !dbg !34
  %87 = bitcast float %61 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #2, !dbg !34
  %88 = or disjoint i32 %81, 32, !dbg !34
  %89 = lshr i32 %88, 3, !dbg !34
  %90 = and i32 %89, 116, !dbg !34
  %91 = add nuw nsw i32 %90, %88, !dbg !34
  %92 = zext nneg i32 %91 to i64, !dbg !34
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %92, !dbg !34
  %94 = bitcast float %62 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #2, !dbg !34
  %95 = or disjoint i32 %81, 64, !dbg !34
  %96 = lshr i32 %95, 3, !dbg !34
  %97 = and i32 %96, 120, !dbg !34
  %98 = add nuw nsw i32 %97, %95, !dbg !34
  %99 = zext nneg i32 %98 to i64, !dbg !34
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %99, !dbg !34
  %101 = bitcast float %63 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #2, !dbg !34
  %102 = or disjoint i32 %81, 96, !dbg !34
  %103 = lshr i32 %102, 3, !dbg !34
  %104 = and i32 %103, 124, !dbg !34
  %105 = add nuw nsw i32 %104, %102, !dbg !34
  %106 = zext nneg i32 %105 to i64, !dbg !34
  %107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %106, !dbg !34
  %108 = bitcast float %64 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #2, !dbg !34
  %109 = or disjoint i32 %81, 16, !dbg !34
  %110 = add nuw nsw i32 %109, %83, !dbg !34
  %111 = zext nneg i32 %110 to i64, !dbg !34
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %111, !dbg !34
  %113 = bitcast float %65 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !34
  %114 = or disjoint i32 %81, 48, !dbg !34
  %115 = lshr i32 %114, 3, !dbg !34
  %116 = and i32 %115, 116, !dbg !34
  %117 = add nuw nsw i32 %116, %114, !dbg !34
  %118 = zext nneg i32 %117 to i64, !dbg !34
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %118, !dbg !34
  %120 = bitcast float %66 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !34
  %121 = or disjoint i32 %81, 80, !dbg !34
  %122 = lshr i32 %121, 3, !dbg !34
  %123 = and i32 %122, 120, !dbg !34
  %124 = add nuw nsw i32 %123, %121, !dbg !34
  %125 = zext nneg i32 %124 to i64, !dbg !34
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %125, !dbg !34
  %127 = bitcast float %67 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !34
  %128 = or disjoint i32 %81, 112, !dbg !34
  %129 = lshr i32 %128, 3, !dbg !34
  %130 = and i32 %129, 124, !dbg !34
  %131 = add nuw nsw i32 %130, %128, !dbg !34
  %132 = zext nneg i32 %131 to i64, !dbg !34
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %132, !dbg !34
  %134 = bitcast float %68 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %135 = lshr i32 %12, 3, !dbg !34
  %136 = and i32 %135, 60, !dbg !34
  %137 = add nuw nsw i32 %136, %82, !dbg !34
  %138 = zext nneg i32 %137 to i64, !dbg !34
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %138, !dbg !34
  %140 = or disjoint i32 %82, 512, !dbg !34
  %141 = lshr i32 %140, 3, !dbg !34
  %142 = and i32 %141, 124, !dbg !34
  %143 = add nuw nsw i32 %142, %140, !dbg !34
  %144 = zext nneg i32 %143 to i64, !dbg !34
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %144, !dbg !34
  %146 = load <4 x i32>, ptr addrspace(3) %145, align 16, !dbg !34
  %.extract = load i32, ptr addrspace(3) %139, align 16, !dbg !34
  %147 = getelementptr inbounds i8, ptr addrspace(3) %139, i64 4, !dbg !34
  %.extract8 = load i32, ptr addrspace(3) %147, align 4, !dbg !34
  %148 = getelementptr inbounds i8, ptr addrspace(3) %139, i64 8, !dbg !34
  %.extract9 = load i32, ptr addrspace(3) %148, align 8, !dbg !34
  %149 = getelementptr inbounds i8, ptr addrspace(3) %139, i64 12, !dbg !34
  %.extract10 = load i32, ptr addrspace(3) %149, align 4, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %76, i1 %19) #2, !dbg !34
  %.extract11 = extractelement <4 x i32> %146, i64 0, !dbg !34
  %.extract12 = extractelement <4 x i32> %146, i64 1, !dbg !34
  %.extract13 = extractelement <4 x i32> %146, i64 2, !dbg !34
  %.extract14 = extractelement <4 x i32> %146, i64 3, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %78, i1 %19) #2, !dbg !34
  %150 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !35
  %151 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !35
  %152 = bitcast float %61 to i32, !dbg !36
  %153 = bitcast float %62 to i32, !dbg !36
  %154 = bitcast float %63 to i32, !dbg !36
  %155 = bitcast float %64 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %152, i32 %153, i32 %154, i32 %155, ptr addrspace(1) %150, i1 %17) #2, !dbg !36
  %156 = bitcast float %65 to i32, !dbg !36
  %157 = bitcast float %66 to i32, !dbg !36
  %158 = bitcast float %67 to i32, !dbg !36
  %159 = bitcast float %68 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %156, i32 %157, i32 %158, i32 %159, ptr addrspace(1) %151, i1 %18) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckcof3gaunu5ylnxoaek7ds6miywrb2a57hmj6ec4mi2nwsfa3sm.py", directory: "inductor_cache/kc")
!4 = !{ptr @triton_poi_fused_relu_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_0", linkageName: "triton_poi_fused_relu_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 34, column: 40, scope: !7)
!28 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 35, column: 34, scope: !7)
!30 = !DILocation(line: 35, column: 47, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 39, scope: !7)
!33 = !DILocation(line: 35, column: 25, scope: !7)
!34 = !DILocation(line: 35, column: 58, scope: !7)
!35 = !DILocation(line: 36, column: 25, scope: !7)
!36 = !DILocation(line: 36, column: 46, scope: !7)
!37 = !DILocation(line: 36, column: 4, scope: !7)
