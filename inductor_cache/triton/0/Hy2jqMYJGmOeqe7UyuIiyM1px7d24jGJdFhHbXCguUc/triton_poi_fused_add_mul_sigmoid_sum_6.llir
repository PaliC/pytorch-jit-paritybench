; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_mul_sigmoid_sum_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 62, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %12 = sdiv i32 %.frozen, 16, !dbg !15
  %13 = mul i32 %12, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = sdiv i32 %10, 4, !dbg !17
  %15 = shl i32 %12, 6, !dbg !18
  %16 = add i32 %15, %.decomposed, !dbg !19
  %17 = sext i32 %16 to i64, !dbg !20
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !20
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 %11) #1, !dbg !21
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !21
  %21 = extractvalue { i32, i32 } %19, 1, !dbg !21
  %22 = bitcast i32 %20 to float, !dbg !21
  %23 = bitcast i32 %21 to float, !dbg !21
  %24 = shl nsw i32 %14, 2, !dbg !22
  %25 = sext i32 %24 to i64, !dbg !23
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !23
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %11) #1, !dbg !24
  %28 = bitcast i32 %27 to float, !dbg !24
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %11) #1, !dbg !24
  %30 = bitcast i32 %29 to float, !dbg !24
  %31 = add i32 %16, 16, !dbg !25
  %32 = sext i32 %31 to i64, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !26
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %11) #1, !dbg !27
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !27
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !27
  %37 = bitcast i32 %35 to float, !dbg !27
  %38 = bitcast i32 %36 to float, !dbg !27
  %39 = or disjoint i32 %24, 1, !dbg !28
  %40 = sext i32 %39 to i64, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !29
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %11) #1, !dbg !30
  %43 = bitcast i32 %42 to float, !dbg !30
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %11) #1, !dbg !30
  %45 = bitcast i32 %44 to float, !dbg !30
  %46 = add i32 %16, 32, !dbg !31
  %47 = sext i32 %46 to i64, !dbg !32
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !32
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %11) #1, !dbg !33
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !33
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !33
  %52 = bitcast i32 %50 to float, !dbg !33
  %53 = bitcast i32 %51 to float, !dbg !33
  %54 = or disjoint i32 %24, 2, !dbg !34
  %55 = sext i32 %54 to i64, !dbg !35
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !35
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %11) #1, !dbg !36
  %58 = bitcast i32 %57 to float, !dbg !36
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %11) #1, !dbg !36
  %60 = bitcast i32 %59 to float, !dbg !36
  %61 = add i32 %16, 48, !dbg !37
  %62 = sext i32 %61 to i64, !dbg !38
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !38
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %63, i1 %11) #1, !dbg !39
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !39
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !39
  %67 = bitcast i32 %65 to float, !dbg !39
  %68 = bitcast i32 %66 to float, !dbg !39
  %69 = or disjoint i32 %24, 3, !dbg !40
  %70 = sext i32 %69 to i64, !dbg !41
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !41
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %11) #1, !dbg !42
  %73 = bitcast i32 %72 to float, !dbg !42
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %11) #1, !dbg !42
  %75 = bitcast i32 %74 to float, !dbg !42
  %76 = fsub float 0.000000e+00, %22, !dbg !43
  %77 = fsub float 0.000000e+00, %23, !dbg !43
  %78 = fmul float %76, 0x3FF7154760000000, !dbg !47
  %79 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %78) #1, !dbg !47
  %80 = fmul float %77, 0x3FF7154760000000, !dbg !47
  %81 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %80) #1, !dbg !47
  %82 = fadd float %79, 1.000000e+00, !dbg !48
  %83 = fadd float %81, 1.000000e+00, !dbg !48
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %82) #1, !dbg !49
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %83) #1, !dbg !49
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %28) #1, !dbg !50
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %30) #1, !dbg !50
  %88 = fmul float %84, %86, !dbg !51
  %89 = fmul float %85, %87, !dbg !51
  %90 = fsub float 0.000000e+00, %37, !dbg !52
  %91 = fsub float 0.000000e+00, %38, !dbg !52
  %92 = fmul float %90, 0x3FF7154760000000, !dbg !54
  %93 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %92) #1, !dbg !54
  %94 = fmul float %91, 0x3FF7154760000000, !dbg !54
  %95 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %94) #1, !dbg !54
  %96 = fadd float %93, 1.000000e+00, !dbg !55
  %97 = fadd float %95, 1.000000e+00, !dbg !55
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %96) #1, !dbg !56
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %97) #1, !dbg !56
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %43) #1, !dbg !57
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %45) #1, !dbg !57
  %102 = fmul float %98, %100, !dbg !58
  %103 = fmul float %99, %101, !dbg !58
  %104 = fadd float %88, %102, !dbg !59
  %105 = fadd float %89, %103, !dbg !59
  %106 = fsub float 0.000000e+00, %52, !dbg !60
  %107 = fsub float 0.000000e+00, %53, !dbg !60
  %108 = fmul float %106, 0x3FF7154760000000, !dbg !62
  %109 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %108) #1, !dbg !62
  %110 = fmul float %107, 0x3FF7154760000000, !dbg !62
  %111 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %110) #1, !dbg !62
  %112 = fadd float %109, 1.000000e+00, !dbg !63
  %113 = fadd float %111, 1.000000e+00, !dbg !63
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %112) #1, !dbg !64
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %113) #1, !dbg !64
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %58) #1, !dbg !65
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %60) #1, !dbg !65
  %118 = fmul float %114, %116, !dbg !66
  %119 = fmul float %115, %117, !dbg !66
  %120 = fadd float %104, %118, !dbg !67
  %121 = fadd float %105, %119, !dbg !67
  %122 = fsub float 0.000000e+00, %67, !dbg !68
  %123 = fsub float 0.000000e+00, %68, !dbg !68
  %124 = fmul float %122, 0x3FF7154760000000, !dbg !70
  %125 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %124) #1, !dbg !70
  %126 = fmul float %123, 0x3FF7154760000000, !dbg !70
  %127 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %126) #1, !dbg !70
  %128 = fadd float %125, 1.000000e+00, !dbg !71
  %129 = fadd float %127, 1.000000e+00, !dbg !71
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %128) #1, !dbg !72
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %129) #1, !dbg !72
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %73) #1, !dbg !73
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %75) #1, !dbg !73
  %134 = fmul float %130, %132, !dbg !74
  %135 = fmul float %131, %133, !dbg !74
  %136 = fadd float %120, %134, !dbg !75
  %137 = fadd float %121, %135, !dbg !75
  %138 = fadd float %136, 0x3EB0C6F7A0000000, !dbg !76
  %139 = fadd float %137, 0x3EB0C6F7A0000000, !dbg !76
  %140 = sext i32 %10 to i64, !dbg !77
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %140, !dbg !77
  %142 = bitcast float %138 to i32, !dbg !78
  %143 = bitcast float %139 to i32, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %141, i1 %11) #1, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c424qfsgvped36pmiudcr45t2mujz53t75i2bbm75sd4ejv6bxqd.py", directory: "inductor_cache/42")
!4 = !{ptr @triton_poi_fused_add_mul_sigmoid_sum_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_sigmoid_sum_6, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_sigmoid_sum_6", linkageName: "triton_poi_fused_add_mul_sigmoid_sum_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 38, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 43, scope: !7)
!22 = !DILocation(line: 29, column: 32, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 37, scope: !7)
!25 = !DILocation(line: 30, column: 40, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 48, scope: !7)
!28 = !DILocation(line: 31, column: 35, scope: !7)
!29 = !DILocation(line: 31, column: 31, scope: !7)
!30 = !DILocation(line: 31, column: 42, scope: !7)
!31 = !DILocation(line: 32, column: 41, scope: !7)
!32 = !DILocation(line: 32, column: 31, scope: !7)
!33 = !DILocation(line: 32, column: 49, scope: !7)
!34 = !DILocation(line: 33, column: 35, scope: !7)
!35 = !DILocation(line: 33, column: 31, scope: !7)
!36 = !DILocation(line: 33, column: 42, scope: !7)
!37 = !DILocation(line: 34, column: 41, scope: !7)
!38 = !DILocation(line: 34, column: 31, scope: !7)
!39 = !DILocation(line: 34, column: 49, scope: !7)
!40 = !DILocation(line: 35, column: 35, scope: !7)
!41 = !DILocation(line: 35, column: 31, scope: !7)
!42 = !DILocation(line: 35, column: 42, scope: !7)
!43 = !DILocation(line: 47, column: 30, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!46 = !DILocation(line: 36, column: 22, scope: !7)
!47 = !DILocation(line: 47, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 47, column: 20, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 47, column: 16, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 38, column: 18, scope: !7)
!51 = !DILocation(line: 41, column: 18, scope: !7)
!52 = !DILocation(line: 47, column: 30, scope: !44, inlinedAt: !53)
!53 = !DILocation(line: 42, column: 22, scope: !7)
!54 = !DILocation(line: 47, column: 29, scope: !44, inlinedAt: !53)
!55 = !DILocation(line: 47, column: 20, scope: !44, inlinedAt: !53)
!56 = !DILocation(line: 47, column: 16, scope: !44, inlinedAt: !53)
!57 = !DILocation(line: 43, column: 19, scope: !7)
!58 = !DILocation(line: 45, column: 19, scope: !7)
!59 = !DILocation(line: 46, column: 19, scope: !7)
!60 = !DILocation(line: 47, column: 30, scope: !44, inlinedAt: !61)
!61 = !DILocation(line: 47, column: 23, scope: !7)
!62 = !DILocation(line: 47, column: 29, scope: !44, inlinedAt: !61)
!63 = !DILocation(line: 47, column: 20, scope: !44, inlinedAt: !61)
!64 = !DILocation(line: 47, column: 16, scope: !44, inlinedAt: !61)
!65 = !DILocation(line: 48, column: 19, scope: !7)
!66 = !DILocation(line: 50, column: 20, scope: !7)
!67 = !DILocation(line: 51, column: 20, scope: !7)
!68 = !DILocation(line: 47, column: 30, scope: !44, inlinedAt: !69)
!69 = !DILocation(line: 52, column: 23, scope: !7)
!70 = !DILocation(line: 47, column: 29, scope: !44, inlinedAt: !69)
!71 = !DILocation(line: 47, column: 20, scope: !44, inlinedAt: !69)
!72 = !DILocation(line: 47, column: 16, scope: !44, inlinedAt: !69)
!73 = !DILocation(line: 53, column: 19, scope: !7)
!74 = !DILocation(line: 55, column: 20, scope: !7)
!75 = !DILocation(line: 56, column: 20, scope: !7)
!76 = !DILocation(line: 58, column: 20, scope: !7)
!77 = !DILocation(line: 59, column: 25, scope: !7)
!78 = !DILocation(line: 59, column: 37, scope: !7)
!79 = !DILocation(line: 59, column: 4, scope: !7)
