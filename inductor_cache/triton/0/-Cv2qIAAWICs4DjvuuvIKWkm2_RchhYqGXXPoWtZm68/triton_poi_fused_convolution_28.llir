; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_28(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 2, !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 12, !dbg !12
  %12 = and i32 %10, 60, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 32, !dbg !13
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = icmp slt i32 %13, 192, !dbg !14
  %17 = icmp slt i32 %14, 192, !dbg !14
  %18 = icmp slt i32 %15, 192, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 4, !dbg !16
  %21 = lshr i32 %7, 4, !dbg !17
  %22 = and i32 %21, 7, !dbg !17
  %23 = or disjoint i32 %20, %11, !dbg !18
  %24 = or disjoint i32 %20, %22, !dbg !18
  %25 = or disjoint i32 %24, 8, !dbg !18
  %26 = icmp slt i32 %23, 16, !dbg !19
  %27 = icmp slt i32 %24, 16, !dbg !19
  %28 = icmp slt i32 %25, 16, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %29 = sdiv i32 %.frozen, 48, !dbg !20
  %30 = mul i32 %29, 48, !dbg !21
  %.decomposed = sub i32 %.frozen, %30, !dbg !21
  %31 = shl i32 %13, 4, !dbg !22
  %32 = shl i32 %14, 4, !dbg !22
  %33 = add i32 %23, %31, !dbg !23
  %34 = add i32 %23, %32, !dbg !23
  %35 = sext i32 %33 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !24
  %37 = sext i32 %34 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !24
  %39 = and i1 %16, %26, !dbg !25
  %40 = and i1 %17, %26, !dbg !25
  %41 = and i1 %18, %27, !dbg !25
  %42 = and i1 %28, %18, !dbg !25
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %39) #2, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !26
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %40) #2, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !26
  %53 = mul i32 %24, 48, !dbg !27
  %54 = mul i32 %25, 48, !dbg !27
  %55 = mul i32 %29, 768, !dbg !28
  %56 = add i32 %55, %.decomposed, !dbg !29
  %57 = add i32 %56, %53, !dbg !30
  %58 = add i32 %56, %54, !dbg !30
  %59 = sext i32 %57 to i64, !dbg !31
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !31
  %61 = sext i32 %58 to i64, !dbg !31
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !31
  %63 = shl i32 %7, 8, !dbg !32
  %64 = and i32 %63, 768, !dbg !32
  %65 = or disjoint i32 %64, %9, !dbg !32
  %66 = and i32 %10, 508, !dbg !32
  %67 = lshr exact i32 %64, 2, !dbg !32
  %68 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %67, !dbg !32
  %69 = getelementptr float, ptr addrspace(3) %68, i32 %65, !dbg !32
  %70 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #2, !dbg !32
  %71 = or disjoint i32 %65, 64, !dbg !32
  %72 = lshr i32 %71, 4, !dbg !32
  %73 = and i32 %72, 52, !dbg !32
  %74 = getelementptr float, ptr addrspace(3) @global_smem, i32 %73, !dbg !32
  %75 = getelementptr float, ptr addrspace(3) %74, i32 %71, !dbg !32
  %76 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #2, !dbg !32
  %77 = or disjoint i32 %65, 128, !dbg !32
  %78 = lshr i32 %77, 4, !dbg !32
  %79 = and i32 %78, 56, !dbg !32
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i32 %79, !dbg !32
  %81 = getelementptr float, ptr addrspace(3) %80, i32 %77, !dbg !32
  %82 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #2, !dbg !32
  %83 = or disjoint i32 %65, 192, !dbg !32
  %84 = lshr i32 %83, 4, !dbg !32
  %85 = and i32 %84, 60, !dbg !32
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !32
  %87 = getelementptr float, ptr addrspace(3) %86, i32 %83, !dbg !32
  %88 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !32
  %89 = or disjoint i32 %65, 32, !dbg !32
  %90 = getelementptr float, ptr addrspace(3) %68, i32 %89, !dbg !32
  %91 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #2, !dbg !32
  %92 = or disjoint i32 %65, 96, !dbg !32
  %93 = lshr i32 %92, 4, !dbg !32
  %94 = and i32 %93, 52, !dbg !32
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !32
  %96 = getelementptr float, ptr addrspace(3) %95, i32 %92, !dbg !32
  %97 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #2, !dbg !32
  %98 = or disjoint i32 %65, 160, !dbg !32
  %99 = lshr i32 %98, 4, !dbg !32
  %100 = and i32 %99, 56, !dbg !32
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !32
  %102 = getelementptr float, ptr addrspace(3) %101, i32 %98, !dbg !32
  %103 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !32
  %104 = or disjoint i32 %65, 224, !dbg !32
  %105 = lshr i32 %104, 4, !dbg !32
  %106 = and i32 %105, 60, !dbg !32
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !32
  %108 = getelementptr float, ptr addrspace(3) %107, i32 %104, !dbg !32
  %109 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %110 = lshr i32 %10, 4, !dbg !32
  %111 = and i32 %110, 28, !dbg !32
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %111, !dbg !32
  %113 = getelementptr inbounds float, ptr addrspace(3) %112, i32 %66, !dbg !32
  %114 = or disjoint i32 %66, 512, !dbg !32
  %115 = lshr i32 %114, 4, !dbg !32
  %116 = and i32 %115, 60, !dbg !32
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %116, !dbg !32
  %118 = getelementptr inbounds float, ptr addrspace(3) %117, i32 %114, !dbg !32
  %119 = load <4 x i32>, ptr addrspace(3) %118, align 16, !dbg !32
  %.extract = load i32, ptr addrspace(3) %113, align 16, !dbg !32
  %120 = getelementptr inbounds i8, ptr addrspace(3) %113, i32 4, !dbg !32
  %.extract10 = load i32, ptr addrspace(3) %120, align 4, !dbg !32
  %121 = getelementptr inbounds i8, ptr addrspace(3) %113, i32 8, !dbg !32
  %.extract11 = load i32, ptr addrspace(3) %121, align 8, !dbg !32
  %122 = getelementptr inbounds i8, ptr addrspace(3) %113, i32 12, !dbg !32
  %.extract12 = load i32, ptr addrspace(3) %122, align 4, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %60, i1 %41) #2, !dbg !32
  %.extract13 = extractelement <4 x i32> %119, i64 0, !dbg !32
  %.extract14 = extractelement <4 x i32> %119, i64 1, !dbg !32
  %.extract15 = extractelement <4 x i32> %119, i64 2, !dbg !32
  %.extract16 = extractelement <4 x i32> %119, i64 3, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %62, i1 %42) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2fo62cfxo6dv4l3ij6fdsetikkjum5k2mulkqqbt6zwy57axo7t.py", directory: "inductor_cache/2f")
!4 = !{ptr @triton_poi_fused_convolution_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_28", linkageName: "triton_poi_fused_convolution_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 51, scope: !7)
!26 = !DILocation(line: 32, column: 43, scope: !7)
!27 = !DILocation(line: 33, column: 33, scope: !7)
!28 = !DILocation(line: 33, column: 42, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 38, scope: !7)
!31 = !DILocation(line: 33, column: 25, scope: !7)
!32 = !DILocation(line: 33, column: 53, scope: !7)
!33 = !DILocation(line: 33, column: 4, scope: !7)
