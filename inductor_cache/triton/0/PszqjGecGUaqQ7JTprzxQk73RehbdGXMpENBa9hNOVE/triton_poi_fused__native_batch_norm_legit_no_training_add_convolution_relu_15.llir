; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 5, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 5, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = shl i32 %13, 2, !dbg !12
  %17 = or disjoint i32 %12, %15, !dbg !13
  %18 = or disjoint i32 %17, 8, !dbg !13
  %19 = or disjoint i32 %17, 16, !dbg !13
  %20 = or disjoint i32 %17, 24, !dbg !13
  %21 = icmp slt i32 %17, 256, !dbg !14
  %22 = icmp slt i32 %18, 256, !dbg !14
  %23 = icmp slt i32 %19, 256, !dbg !14
  %24 = icmp slt i32 %20, 256, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %26 = shl i32 %25, 7, !dbg !16
  %27 = and i32 %16, 124, !dbg !17
  %28 = or disjoint i32 %26, %27, !dbg !18
  %29 = icmp slt i32 %28, 128, !dbg !19
  %30 = shl i32 %17, 7, !dbg !20
  %31 = shl i32 %18, 7, !dbg !20
  %32 = shl i32 %19, 7, !dbg !20
  %33 = shl i32 %20, 7, !dbg !20
  %34 = add i32 %28, %30, !dbg !21
  %35 = add i32 %28, %31, !dbg !21
  %36 = add i32 %28, %32, !dbg !21
  %37 = add i32 %28, %33, !dbg !21
  %38 = sext i32 %34 to i64, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !22
  %40 = sext i32 %35 to i64, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !22
  %42 = sext i32 %36 to i64, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !22
  %44 = sext i32 %37 to i64, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !22
  %46 = and i1 %21, %29, !dbg !23
  %47 = and i1 %22, %29, !dbg !23
  %48 = and i1 %23, %29, !dbg !23
  %49 = and i1 %24, %29, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %46) #4, !dbg !24
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %47) #4, !dbg !24
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %48) #4, !dbg !24
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %49) #4, !dbg !24
  %54 = sext i32 %28 to i64, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !25
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %29) #4, !dbg !26
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !27
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %29) #4, !dbg !28
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !29
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %29) #4, !dbg !30
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !30
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !30
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !30
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !30
  %65 = bitcast i32 %61 to float, !dbg !30
  %66 = bitcast i32 %62 to float, !dbg !30
  %67 = bitcast i32 %63 to float, !dbg !30
  %68 = bitcast i32 %64 to float, !dbg !30
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !31
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %29) #4, !dbg !32
  %71 = getelementptr float, ptr addrspace(1) %5, i64 %54, !dbg !33
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %29) #4, !dbg !34
  %73 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !35
  %74 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !35
  %75 = getelementptr float, ptr addrspace(1) %6, i64 %42, !dbg !35
  %76 = getelementptr float, ptr addrspace(1) %6, i64 %44, !dbg !35
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %46) #4, !dbg !36
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %47) #4, !dbg !36
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %48) #4, !dbg !36
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %49) #4, !dbg !36
  %81 = fadd float %65, 0x3F50624DE0000000, !dbg !37
  %82 = fadd float %66, 0x3F50624DE0000000, !dbg !37
  %83 = fadd float %67, 0x3F50624DE0000000, !dbg !37
  %84 = fadd float %68, 0x3F50624DE0000000, !dbg !37
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %85, 0, !dbg !38
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %86, 0, !dbg !38
  br i1 %.not.i, label %92, label %87, !dbg !38

87:                                               ; preds = %10
  br i1 %.not1.i, label %90, label %88, !dbg !38

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

92:                                               ; preds = %10
  br i1 %.not1.i, label %95, label %93, !dbg !38

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %88, %90, %93, %95
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !38
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i34 = icmp eq i32 %97, 0, !dbg !38
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i37 = icmp eq i32 %98, 0, !dbg !38
  br i1 %.not.i34, label %104, label %99, !dbg !38

99:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i37, label %102, label %100, !dbg !38

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #4, !dbg !38
  br label %__nv_sqrtf.exit38, !dbg !38

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #4, !dbg !38
  br label %__nv_sqrtf.exit38, !dbg !38

104:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i37, label %107, label %105, !dbg !38

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #4, !dbg !38
  br label %__nv_sqrtf.exit38, !dbg !38

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #4, !dbg !38
  br label %__nv_sqrtf.exit38, !dbg !38

__nv_sqrtf.exit38:                                ; preds = %100, %102, %105, %107
  %.0.i36 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !38
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i39 = icmp eq i32 %109, 0, !dbg !38
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i42 = icmp eq i32 %110, 0, !dbg !38
  br i1 %.not.i39, label %116, label %111, !dbg !38

111:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %114, label %112, !dbg !38

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #4, !dbg !38
  br label %__nv_sqrtf.exit43, !dbg !38

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #4, !dbg !38
  br label %__nv_sqrtf.exit43, !dbg !38

116:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %119, label %117, !dbg !38

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #4, !dbg !38
  br label %__nv_sqrtf.exit43, !dbg !38

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #4, !dbg !38
  br label %__nv_sqrtf.exit43, !dbg !38

__nv_sqrtf.exit43:                                ; preds = %112, %114, %117, %119
  %.0.i41 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !38
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i44 = icmp eq i32 %121, 0, !dbg !38
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i47 = icmp eq i32 %122, 0, !dbg !38
  br i1 %.not.i44, label %128, label %123, !dbg !38

123:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %126, label %124, !dbg !38

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #4, !dbg !38
  br label %__nv_sqrtf.exit48, !dbg !38

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #4, !dbg !38
  br label %__nv_sqrtf.exit48, !dbg !38

128:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %131, label %129, !dbg !38

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #4, !dbg !38
  br label %__nv_sqrtf.exit48, !dbg !38

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #4, !dbg !38
  br label %__nv_sqrtf.exit48, !dbg !38

__nv_sqrtf.exit48:                                ; preds = %124, %126, %129, %131
  %.0.i46 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !38
  %133 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !24
  %134 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !26
  %135 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !28
  %136 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !24
  %137 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !26
  %138 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !28
  %139 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !24
  %140 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !26
  %141 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !28
  %142 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !24
  %143 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !26
  %144 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !28
  %145 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !24
  %146 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !24
  %147 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !24
  %148 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !24
  %149 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !24
  %150 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !24
  %151 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !24
  %152 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !24
  %153 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %154 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %155 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %156 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %157 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !36
  %158 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !36
  %159 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !36
  %160 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !36
  %161 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !36
  %162 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !36
  %163 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !36
  %164 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !36
  %165 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !36
  %166 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !36
  %167 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !36
  %168 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !36
  %169 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !36
  %170 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !36
  %171 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !36
  %172 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !36
  %173 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !34
  %174 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !34
  %175 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !34
  %176 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !34
  %177 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !32
  %178 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !32
  %179 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !32
  %180 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !32
  %181 = lshr i32 %13, 3, !dbg !17
  %182 = and i32 %181, 31, !dbg !17
  %183 = or disjoint i32 %182, %26, !dbg !18
  %184 = or disjoint i32 %183, 96, !dbg !18
  %185 = icmp slt i32 %184, 128, !dbg !19
  %186 = and i32 %16, 28, !dbg !12
  %187 = or disjoint i32 %12, %186, !dbg !13
  %188 = icmp slt i32 %187, 256, !dbg !14
  %189 = and i1 %188, %185, !dbg !23
  %190 = or disjoint i32 %183, 64, !dbg !18
  %191 = icmp slt i32 %190, 128, !dbg !19
  %192 = and i1 %188, %191, !dbg !23
  %193 = or disjoint i32 %183, 32, !dbg !18
  %194 = icmp slt i32 %193, 128, !dbg !19
  %195 = and i1 %188, %194, !dbg !23
  %196 = icmp slt i32 %183, 128, !dbg !19
  %197 = and i1 %188, %196, !dbg !23
  %.frozen = freeze i32 %187, !dbg !39
  %198 = sdiv i32 %.frozen, 64, !dbg !39
  %199 = mul i32 %198, 64, !dbg !40
  %.decomposed = sub i32 %.frozen, %199, !dbg !40
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !41
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i36) #4, !dbg !41
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i41) #4, !dbg !41
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i46) #4, !dbg !41
  %204 = insertelement <4 x i32> poison, i32 %134, i64 0, !dbg !26
  %205 = insertelement <4 x i32> %204, i32 %137, i64 1, !dbg !26
  %206 = insertelement <4 x i32> %205, i32 %140, i64 2, !dbg !26
  %207 = insertelement <4 x i32> %206, i32 %143, i64 3, !dbg !26
  %208 = bitcast <4 x i32> %207 to <4 x float>, !dbg !26
  %209 = shufflevector <4 x float> %208, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !26
  %210 = insertelement <4 x i32> poison, i32 %135, i64 0, !dbg !28
  %211 = insertelement <4 x i32> %210, i32 %138, i64 1, !dbg !28
  %212 = insertelement <4 x i32> %211, i32 %141, i64 2, !dbg !28
  %213 = insertelement <4 x i32> %212, i32 %144, i64 3, !dbg !28
  %214 = bitcast <4 x i32> %213 to <4 x float>, !dbg !28
  %215 = shufflevector <4 x float> %214, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %216 = insertelement <16 x i32> poison, i32 %133, i64 0, !dbg !24
  %217 = insertelement <16 x i32> %216, i32 %136, i64 1, !dbg !24
  %218 = insertelement <16 x i32> %217, i32 %139, i64 2, !dbg !24
  %219 = insertelement <16 x i32> %218, i32 %142, i64 3, !dbg !24
  %220 = insertelement <16 x i32> %219, i32 %145, i64 4, !dbg !24
  %221 = insertelement <16 x i32> %220, i32 %146, i64 5, !dbg !24
  %222 = insertelement <16 x i32> %221, i32 %147, i64 6, !dbg !24
  %223 = insertelement <16 x i32> %222, i32 %148, i64 7, !dbg !24
  %224 = insertelement <16 x i32> %223, i32 %149, i64 8, !dbg !24
  %225 = insertelement <16 x i32> %224, i32 %150, i64 9, !dbg !24
  %226 = insertelement <16 x i32> %225, i32 %151, i64 10, !dbg !24
  %227 = insertelement <16 x i32> %226, i32 %152, i64 11, !dbg !24
  %228 = insertelement <16 x i32> %227, i32 %153, i64 12, !dbg !24
  %229 = insertelement <16 x i32> %228, i32 %154, i64 13, !dbg !24
  %230 = insertelement <16 x i32> %229, i32 %155, i64 14, !dbg !24
  %231 = insertelement <16 x i32> %230, i32 %156, i64 15, !dbg !24
  %232 = bitcast <16 x i32> %231 to <16 x float>, !dbg !24
  %233 = fadd <16 x float> %209, %232, !dbg !42
  %234 = fsub <16 x float> %233, %215, !dbg !43
  %235 = insertelement <16 x i32> poison, i32 %157, i64 0, !dbg !36
  %236 = insertelement <16 x i32> %235, i32 %158, i64 1, !dbg !36
  %237 = insertelement <16 x i32> %236, i32 %159, i64 2, !dbg !36
  %238 = insertelement <16 x i32> %237, i32 %160, i64 3, !dbg !36
  %239 = insertelement <16 x i32> %238, i32 %161, i64 4, !dbg !36
  %240 = insertelement <16 x i32> %239, i32 %162, i64 5, !dbg !36
  %241 = insertelement <16 x i32> %240, i32 %163, i64 6, !dbg !36
  %242 = insertelement <16 x i32> %241, i32 %164, i64 7, !dbg !36
  %243 = insertelement <16 x i32> %242, i32 %165, i64 8, !dbg !36
  %244 = insertelement <16 x i32> %243, i32 %166, i64 9, !dbg !36
  %245 = insertelement <16 x i32> %244, i32 %167, i64 10, !dbg !36
  %246 = insertelement <16 x i32> %245, i32 %168, i64 11, !dbg !36
  %247 = insertelement <16 x i32> %246, i32 %169, i64 12, !dbg !36
  %248 = insertelement <16 x i32> %247, i32 %170, i64 13, !dbg !36
  %249 = insertelement <16 x i32> %248, i32 %171, i64 14, !dbg !36
  %250 = insertelement <16 x i32> %249, i32 %172, i64 15, !dbg !36
  %251 = bitcast <16 x i32> %250 to <16 x float>, !dbg !36
  %252 = insertelement <4 x i32> poison, i32 %173, i64 0, !dbg !34
  %253 = insertelement <4 x i32> %252, i32 %174, i64 1, !dbg !34
  %254 = insertelement <4 x i32> %253, i32 %175, i64 2, !dbg !34
  %255 = insertelement <4 x i32> %254, i32 %176, i64 3, !dbg !34
  %256 = bitcast <4 x i32> %255 to <4 x float>, !dbg !34
  %257 = shufflevector <4 x float> %256, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %258 = insertelement <4 x i32> poison, i32 %177, i64 0, !dbg !32
  %259 = insertelement <4 x i32> %258, i32 %178, i64 1, !dbg !32
  %260 = insertelement <4 x i32> %259, i32 %179, i64 2, !dbg !32
  %261 = insertelement <4 x i32> %260, i32 %180, i64 3, !dbg !32
  %262 = bitcast <4 x i32> %261 to <4 x float>, !dbg !32
  %263 = shufflevector <4 x float> %262, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %264 = insertelement <16 x float> poison, float %203, i64 0, !dbg !44
  %265 = insertelement <16 x float> %264, float %202, i64 1, !dbg !44
  %266 = insertelement <16 x float> %265, float %201, i64 2, !dbg !44
  %267 = insertelement <16 x float> %266, float %200, i64 3, !dbg !44
  %268 = shufflevector <16 x float> %267, <16 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !44
  %269 = fmul <16 x float> %234, %268, !dbg !44
  %270 = fmul <16 x float> %269, %263, !dbg !45
  %271 = fadd <16 x float> %270, %257, !dbg !46
  %272 = fadd <16 x float> %271, %251, !dbg !47
  %273 = fcmp olt <16 x float> %272, zeroinitializer, !dbg !48
  %274 = extractelement <16 x i1> %273, i64 15, !dbg !52
  %275 = extractelement <16 x float> %272, i64 15, !dbg !52
  %276 = select i1 %274, float 0.000000e+00, float %275, !dbg !52
  %277 = extractelement <16 x i1> %273, i64 14, !dbg !52
  %278 = extractelement <16 x float> %272, i64 14, !dbg !52
  %279 = select i1 %277, float 0.000000e+00, float %278, !dbg !52
  %280 = extractelement <16 x i1> %273, i64 13, !dbg !52
  %281 = extractelement <16 x float> %272, i64 13, !dbg !52
  %282 = select i1 %280, float 0.000000e+00, float %281, !dbg !52
  %283 = extractelement <16 x i1> %273, i64 12, !dbg !52
  %284 = extractelement <16 x float> %272, i64 12, !dbg !52
  %285 = select i1 %283, float 0.000000e+00, float %284, !dbg !52
  %286 = extractelement <16 x i1> %273, i64 11, !dbg !52
  %287 = extractelement <16 x float> %272, i64 11, !dbg !52
  %288 = select i1 %286, float 0.000000e+00, float %287, !dbg !52
  %289 = extractelement <16 x i1> %273, i64 10, !dbg !52
  %290 = extractelement <16 x float> %272, i64 10, !dbg !52
  %291 = select i1 %289, float 0.000000e+00, float %290, !dbg !52
  %292 = extractelement <16 x i1> %273, i64 9, !dbg !52
  %293 = extractelement <16 x float> %272, i64 9, !dbg !52
  %294 = select i1 %292, float 0.000000e+00, float %293, !dbg !52
  %295 = extractelement <16 x i1> %273, i64 8, !dbg !52
  %296 = extractelement <16 x float> %272, i64 8, !dbg !52
  %297 = select i1 %295, float 0.000000e+00, float %296, !dbg !52
  %298 = extractelement <16 x i1> %273, i64 7, !dbg !52
  %299 = extractelement <16 x float> %272, i64 7, !dbg !52
  %300 = select i1 %298, float 0.000000e+00, float %299, !dbg !52
  %301 = extractelement <16 x i1> %273, i64 6, !dbg !52
  %302 = extractelement <16 x float> %272, i64 6, !dbg !52
  %303 = select i1 %301, float 0.000000e+00, float %302, !dbg !52
  %304 = extractelement <16 x i1> %273, i64 5, !dbg !52
  %305 = extractelement <16 x float> %272, i64 5, !dbg !52
  %306 = select i1 %304, float 0.000000e+00, float %305, !dbg !52
  %307 = extractelement <16 x i1> %273, i64 4, !dbg !52
  %308 = extractelement <16 x float> %272, i64 4, !dbg !52
  %309 = select i1 %307, float 0.000000e+00, float %308, !dbg !52
  %310 = extractelement <16 x i1> %273, i64 3, !dbg !52
  %311 = extractelement <16 x float> %272, i64 3, !dbg !52
  %312 = select i1 %310, float 0.000000e+00, float %311, !dbg !52
  %313 = extractelement <16 x i1> %273, i64 2, !dbg !52
  %314 = extractelement <16 x float> %272, i64 2, !dbg !52
  %315 = select i1 %313, float 0.000000e+00, float %314, !dbg !52
  %316 = extractelement <16 x i1> %273, i64 1, !dbg !52
  %317 = extractelement <16 x float> %272, i64 1, !dbg !52
  %318 = select i1 %316, float 0.000000e+00, float %317, !dbg !52
  %319 = extractelement <16 x i1> %273, i64 0, !dbg !52
  %320 = extractelement <16 x float> %272, i64 0, !dbg !52
  %321 = select i1 %319, float 0.000000e+00, float %320, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %bc = bitcast <16 x float> %233 to <16 x i32>, !dbg !54
  %322 = extractelement <16 x i32> %bc, i64 15, !dbg !54
  %bc49 = bitcast <16 x float> %233 to <16 x i32>, !dbg !54
  %323 = extractelement <16 x i32> %bc49, i64 14, !dbg !54
  %bc50 = bitcast <16 x float> %233 to <16 x i32>, !dbg !54
  %324 = extractelement <16 x i32> %bc50, i64 13, !dbg !54
  %bc51 = bitcast <16 x float> %233 to <16 x i32>, !dbg !54
  %325 = extractelement <16 x i32> %bc51, i64 12, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %322, i32 %323, i32 %324, i32 %325, ptr addrspace(1) %39, i1 %46) #4, !dbg !54
  %bc52 = bitcast <16 x float> %233 to <16 x i32>, !dbg !54
  %326 = extractelement <16 x i32> %bc52, i64 11, !dbg !54
  %bc53 = bitcast <16 x float> %233 to <16 x i32>, !dbg !54
  %327 = extractelement <16 x i32> %bc53, i64 10, !dbg !54
  %bc54 = bitcast <16 x float> %233 to <16 x i32>, !dbg !54
  %328 = extractelement <16 x i32> %bc54, i64 9, !dbg !54
  %bc55 = bitcast <16 x float> %233 to <16 x i32>, !dbg !54
  %329 = extractelement <16 x i32> %bc55, i64 8, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %326, i32 %327, i32 %328, i32 %329, ptr addrspace(1) %41, i1 %47) #4, !dbg !54
  %bc56 = bitcast <16 x float> %233 to <16 x i32>, !dbg !54
  %330 = extractelement <16 x i32> %bc56, i64 7, !dbg !54
  %bc57 = bitcast <16 x float> %233 to <16 x i32>, !dbg !54
  %331 = extractelement <16 x i32> %bc57, i64 6, !dbg !54
  %bc58 = bitcast <16 x float> %233 to <16 x i32>, !dbg !54
  %332 = extractelement <16 x i32> %bc58, i64 5, !dbg !54
  %bc59 = bitcast <16 x float> %233 to <16 x i32>, !dbg !54
  %333 = extractelement <16 x i32> %bc59, i64 4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %330, i32 %331, i32 %332, i32 %333, ptr addrspace(1) %43, i1 %48) #4, !dbg !54
  %bc60 = bitcast <16 x float> %233 to <16 x i32>, !dbg !54
  %334 = extractelement <16 x i32> %bc60, i64 3, !dbg !54
  %bc61 = bitcast <16 x float> %233 to <16 x i32>, !dbg !54
  %335 = extractelement <16 x i32> %bc61, i64 2, !dbg !54
  %bc62 = bitcast <16 x float> %233 to <16 x i32>, !dbg !54
  %336 = extractelement <16 x i32> %bc62, i64 1, !dbg !54
  %bc63 = bitcast <16 x float> %233 to <16 x i32>, !dbg !54
  %337 = extractelement <16 x i32> %bc63, i64 0, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %334, i32 %335, i32 %336, i32 %337, ptr addrspace(1) %45, i1 %49) #4, !dbg !54
  %338 = shl i32 %183, 6, !dbg !55
  %339 = shl i32 %193, 6, !dbg !55
  %340 = shl i32 %190, 6, !dbg !55
  %341 = shl i32 %184, 6, !dbg !55
  %342 = shl i32 %198, 13, !dbg !56
  %343 = add i32 %342, %.decomposed, !dbg !57
  %344 = add i32 %343, %338, !dbg !58
  %345 = add i32 %343, %339, !dbg !58
  %346 = add i32 %343, %340, !dbg !58
  %347 = add i32 %343, %341, !dbg !58
  %348 = sext i32 %344 to i64, !dbg !59
  %349 = getelementptr float, ptr addrspace(1) %7, i64 %348, !dbg !59
  %350 = sext i32 %345 to i64, !dbg !59
  %351 = getelementptr float, ptr addrspace(1) %7, i64 %350, !dbg !59
  %352 = sext i32 %346 to i64, !dbg !59
  %353 = getelementptr float, ptr addrspace(1) %7, i64 %352, !dbg !59
  %354 = sext i32 %347 to i64, !dbg !59
  %355 = getelementptr float, ptr addrspace(1) %7, i64 %354, !dbg !59
  %356 = shl i32 %13, 7, !dbg !60
  %357 = and i32 %356, 3968, !dbg !60
  %358 = or disjoint i32 %357, %15, !dbg !60
  %359 = and i32 %16, 1020, !dbg !60
  %360 = lshr exact i32 %357, 1, !dbg !60
  %361 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %360, !dbg !60
  %362 = getelementptr float, ptr addrspace(3) %361, i32 %358, !dbg !60
  %363 = bitcast float %276 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %362, <1 x i32> %363, i1 true) #4, !dbg !60
  %364 = or disjoint i32 %358, 32, !dbg !60
  %365 = lshr i32 %364, 3, !dbg !60
  %366 = getelementptr float, ptr addrspace(3) @global_smem, i32 %365, !dbg !60
  %367 = getelementptr float, ptr addrspace(3) %366, i32 %364, !dbg !60
  %368 = bitcast float %279 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %367, <1 x i32> %368, i1 true) #4, !dbg !60
  %369 = or disjoint i32 %358, 64, !dbg !60
  %370 = lshr i32 %369, 3, !dbg !60
  %371 = getelementptr float, ptr addrspace(3) @global_smem, i32 %370, !dbg !60
  %372 = getelementptr float, ptr addrspace(3) %371, i32 %369, !dbg !60
  %373 = bitcast float %282 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %372, <1 x i32> %373, i1 true) #4, !dbg !60
  %374 = or disjoint i32 %358, 96, !dbg !60
  %375 = lshr i32 %374, 3, !dbg !60
  %376 = getelementptr float, ptr addrspace(3) @global_smem, i32 %375, !dbg !60
  %377 = getelementptr float, ptr addrspace(3) %376, i32 %374, !dbg !60
  %378 = bitcast float %285 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %377, <1 x i32> %378, i1 true) #4, !dbg !60
  %379 = or disjoint i32 %358, 8, !dbg !60
  %380 = getelementptr float, ptr addrspace(3) %361, i32 %379, !dbg !60
  %381 = bitcast float %288 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %380, <1 x i32> %381, i1 true) #4, !dbg !60
  %382 = or disjoint i32 %358, 40, !dbg !60
  %383 = lshr i32 %382, 3, !dbg !60
  %384 = and i32 %383, 500, !dbg !60
  %385 = getelementptr float, ptr addrspace(3) @global_smem, i32 %384, !dbg !60
  %386 = getelementptr float, ptr addrspace(3) %385, i32 %382, !dbg !60
  %387 = bitcast float %291 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %387, i1 true) #4, !dbg !60
  %388 = or disjoint i32 %358, 72, !dbg !60
  %389 = lshr i32 %388, 3, !dbg !60
  %390 = and i32 %389, 504, !dbg !60
  %391 = getelementptr float, ptr addrspace(3) @global_smem, i32 %390, !dbg !60
  %392 = getelementptr float, ptr addrspace(3) %391, i32 %388, !dbg !60
  %393 = bitcast float %294 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %393, i1 true) #4, !dbg !60
  %394 = or disjoint i32 %358, 104, !dbg !60
  %395 = lshr i32 %394, 3, !dbg !60
  %396 = and i32 %395, 508, !dbg !60
  %397 = getelementptr float, ptr addrspace(3) @global_smem, i32 %396, !dbg !60
  %398 = getelementptr float, ptr addrspace(3) %397, i32 %394, !dbg !60
  %399 = bitcast float %297 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %398, <1 x i32> %399, i1 true) #4, !dbg !60
  %400 = or disjoint i32 %358, 16, !dbg !60
  %401 = getelementptr float, ptr addrspace(3) %361, i32 %400, !dbg !60
  %402 = bitcast float %300 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %401, <1 x i32> %402, i1 true) #4, !dbg !60
  %403 = or disjoint i32 %358, 48, !dbg !60
  %404 = lshr i32 %403, 3, !dbg !60
  %405 = and i32 %404, 500, !dbg !60
  %406 = getelementptr float, ptr addrspace(3) @global_smem, i32 %405, !dbg !60
  %407 = getelementptr float, ptr addrspace(3) %406, i32 %403, !dbg !60
  %408 = bitcast float %303 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %408, i1 true) #4, !dbg !60
  %409 = or disjoint i32 %358, 80, !dbg !60
  %410 = lshr i32 %409, 3, !dbg !60
  %411 = and i32 %410, 504, !dbg !60
  %412 = getelementptr float, ptr addrspace(3) @global_smem, i32 %411, !dbg !60
  %413 = getelementptr float, ptr addrspace(3) %412, i32 %409, !dbg !60
  %414 = bitcast float %306 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %413, <1 x i32> %414, i1 true) #4, !dbg !60
  %415 = or disjoint i32 %358, 112, !dbg !60
  %416 = lshr i32 %415, 3, !dbg !60
  %417 = and i32 %416, 508, !dbg !60
  %418 = getelementptr float, ptr addrspace(3) @global_smem, i32 %417, !dbg !60
  %419 = getelementptr float, ptr addrspace(3) %418, i32 %415, !dbg !60
  %420 = bitcast float %309 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %419, <1 x i32> %420, i1 true) #4, !dbg !60
  %421 = or disjoint i32 %358, 24, !dbg !60
  %422 = getelementptr float, ptr addrspace(3) %361, i32 %421, !dbg !60
  %423 = bitcast float %312 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %422, <1 x i32> %423, i1 true) #4, !dbg !60
  %424 = or disjoint i32 %358, 56, !dbg !60
  %425 = lshr i32 %424, 3, !dbg !60
  %426 = and i32 %425, 500, !dbg !60
  %427 = getelementptr float, ptr addrspace(3) @global_smem, i32 %426, !dbg !60
  %428 = getelementptr float, ptr addrspace(3) %427, i32 %424, !dbg !60
  %429 = bitcast float %315 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %429, i1 true) #4, !dbg !60
  %430 = or disjoint i32 %358, 88, !dbg !60
  %431 = lshr i32 %430, 3, !dbg !60
  %432 = and i32 %431, 504, !dbg !60
  %433 = getelementptr float, ptr addrspace(3) @global_smem, i32 %432, !dbg !60
  %434 = getelementptr float, ptr addrspace(3) %433, i32 %430, !dbg !60
  %435 = bitcast float %318 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %434, <1 x i32> %435, i1 true) #4, !dbg !60
  %436 = or disjoint i32 %358, 120, !dbg !60
  %437 = lshr i32 %436, 3, !dbg !60
  %438 = and i32 %437, 508, !dbg !60
  %439 = getelementptr float, ptr addrspace(3) @global_smem, i32 %438, !dbg !60
  %440 = getelementptr float, ptr addrspace(3) %439, i32 %436, !dbg !60
  %441 = bitcast float %321 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %441, i1 true) #4, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %442 = lshr i32 %16, 3, !dbg !60
  %443 = and i32 %442, 124, !dbg !60
  %444 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %443, !dbg !60
  %445 = getelementptr inbounds float, ptr addrspace(3) %444, i32 %359, !dbg !60
  %446 = or disjoint i32 %359, 1024, !dbg !60
  %447 = lshr i32 %446, 3, !dbg !60
  %448 = and i32 %447, 252, !dbg !60
  %449 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %448, !dbg !60
  %450 = getelementptr inbounds float, ptr addrspace(3) %449, i32 %446, !dbg !60
  %451 = load <4 x i32>, ptr addrspace(3) %450, align 16, !dbg !60
  %452 = or disjoint i32 %359, 2048, !dbg !60
  %453 = lshr i32 %452, 3, !dbg !60
  %454 = and i32 %453, 380, !dbg !60
  %455 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %454, !dbg !60
  %456 = getelementptr inbounds float, ptr addrspace(3) %455, i32 %452, !dbg !60
  %457 = load <4 x i32>, ptr addrspace(3) %456, align 16, !dbg !60
  %458 = or disjoint i32 %359, 3072, !dbg !60
  %459 = lshr i32 %458, 3, !dbg !60
  %460 = and i32 %459, 508, !dbg !60
  %461 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %460, !dbg !60
  %462 = getelementptr inbounds float, ptr addrspace(3) %461, i32 %458, !dbg !60
  %463 = load <4 x i32>, ptr addrspace(3) %462, align 16, !dbg !60
  %.extract = load i32, ptr addrspace(3) %445, align 16, !dbg !60
  %464 = getelementptr inbounds i8, ptr addrspace(3) %445, i32 4, !dbg !60
  %.extract19 = load i32, ptr addrspace(3) %464, align 4, !dbg !60
  %465 = getelementptr inbounds i8, ptr addrspace(3) %445, i32 8, !dbg !60
  %.extract20 = load i32, ptr addrspace(3) %465, align 8, !dbg !60
  %466 = getelementptr inbounds i8, ptr addrspace(3) %445, i32 12, !dbg !60
  %.extract21 = load i32, ptr addrspace(3) %466, align 4, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %349, i1 %197) #4, !dbg !60
  %.extract22 = extractelement <4 x i32> %451, i64 0, !dbg !60
  %.extract23 = extractelement <4 x i32> %451, i64 1, !dbg !60
  %.extract24 = extractelement <4 x i32> %451, i64 2, !dbg !60
  %.extract25 = extractelement <4 x i32> %451, i64 3, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %351, i1 %195) #4, !dbg !60
  %.extract26 = extractelement <4 x i32> %457, i64 0, !dbg !60
  %.extract27 = extractelement <4 x i32> %457, i64 1, !dbg !60
  %.extract28 = extractelement <4 x i32> %457, i64 2, !dbg !60
  %.extract29 = extractelement <4 x i32> %457, i64 3, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %353, i1 %192) #4, !dbg !60
  %.extract30 = extractelement <4 x i32> %463, i64 0, !dbg !60
  %.extract31 = extractelement <4 x i32> %463, i64 1, !dbg !60
  %.extract32 = extractelement <4 x i32> %463, i64 2, !dbg !60
  %.extract33 = extractelement <4 x i32> %463, i64 3, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %355, i1 %189) #4, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cha5qjameu5f3izoqxxhva6chl4cn5sj6a7i4evb4nu3k46iuo7w.py", directory: "inductor_cache/ha")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_15, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_15", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 34, scope: !7)
!23 = !DILocation(line: 32, column: 56, scope: !7)
!24 = !DILocation(line: 32, column: 48, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 37, column: 31, scope: !7)
!34 = !DILocation(line: 37, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 31, scope: !7)
!36 = !DILocation(line: 38, column: 45, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 43, column: 26, scope: !7)
!39 = !DILocation(line: 31, column: 19, scope: !7)
!40 = !DILocation(line: 30, column: 19, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 40, column: 18, scope: !7)
!44 = !DILocation(line: 48, column: 19, scope: !7)
!45 = !DILocation(line: 49, column: 20, scope: !7)
!46 = !DILocation(line: 50, column: 20, scope: !7)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 53, column: 42, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 54, column: 4, scope: !7)
!54 = !DILocation(line: 55, column: 48, scope: !7)
!55 = !DILocation(line: 56, column: 33, scope: !7)
!56 = !DILocation(line: 56, column: 43, scope: !7)
!57 = !DILocation(line: 56, column: 30, scope: !7)
!58 = !DILocation(line: 56, column: 38, scope: !7)
!59 = !DILocation(line: 56, column: 25, scope: !7)
!60 = !DILocation(line: 56, column: 55, scope: !7)
!61 = !DILocation(line: 56, column: 4, scope: !7)
