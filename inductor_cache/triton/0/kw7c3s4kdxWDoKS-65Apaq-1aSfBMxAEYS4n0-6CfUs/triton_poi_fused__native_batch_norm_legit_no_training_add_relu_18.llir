; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = srem i32 %13, 768, !dbg !14
  %16 = srem i32 %14, 768, !dbg !14
  %17 = sext i32 %13 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = sext i32 %14 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !16
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !18
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %27 = sext i32 %15 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !19
  %29 = sext i32 %16 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !19
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !21
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !22
  %40 = bitcast i32 %36 to float, !dbg !22
  %41 = bitcast i32 %37 to float, !dbg !22
  %42 = bitcast i32 %38 to float, !dbg !22
  %43 = bitcast i32 %39 to float, !dbg !22
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !22
  %49 = bitcast i32 %45 to float, !dbg !22
  %50 = bitcast i32 %46 to float, !dbg !22
  %51 = bitcast i32 %47 to float, !dbg !22
  %52 = bitcast i32 %48 to float, !dbg !22
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !23
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !24
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !24
  %57 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !25
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !25
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !26
  %64 = bitcast i32 %60 to float, !dbg !26
  %65 = bitcast i32 %61 to float, !dbg !26
  %66 = bitcast i32 %62 to float, !dbg !26
  %67 = bitcast i32 %63 to float, !dbg !26
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !26
  %73 = bitcast i32 %69 to float, !dbg !26
  %74 = bitcast i32 %70 to float, !dbg !26
  %75 = bitcast i32 %71 to float, !dbg !26
  %76 = bitcast i32 %72 to float, !dbg !26
  %77 = fadd float %40, 0x3EE4F8B580000000, !dbg !27
  %78 = fadd float %41, 0x3EE4F8B580000000, !dbg !27
  %79 = fadd float %42, 0x3EE4F8B580000000, !dbg !27
  %80 = fadd float %43, 0x3EE4F8B580000000, !dbg !27
  %81 = fadd float %49, 0x3EE4F8B580000000, !dbg !27
  %82 = fadd float %50, 0x3EE4F8B580000000, !dbg !27
  %83 = fadd float %51, 0x3EE4F8B580000000, !dbg !27
  %84 = fadd float %52, 0x3EE4F8B580000000, !dbg !27
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %85, 0, !dbg !28
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %86, 0, !dbg !28
  br i1 %.not.i, label %92, label %87, !dbg !28

87:                                               ; preds = %7
  br i1 %.not1.i, label %90, label %88, !dbg !28

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

92:                                               ; preds = %7
  br i1 %.not1.i, label %95, label %93, !dbg !28

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %88, %90, %93, %95
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !28
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %97, 0, !dbg !28
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %98, 0, !dbg !28
  br i1 %.not.i1, label %104, label %99, !dbg !28

99:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %102, label %100, !dbg !28

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

104:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %107, label %105, !dbg !28

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %100, %102, %105, %107
  %.0.i3 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !28
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i6 = icmp eq i32 %109, 0, !dbg !28
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i9 = icmp eq i32 %110, 0, !dbg !28
  br i1 %.not.i6, label %116, label %111, !dbg !28

111:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %114, label %112, !dbg !28

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

116:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %119, label %117, !dbg !28

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %112, %114, %117, %119
  %.0.i8 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !28
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i11 = icmp eq i32 %121, 0, !dbg !28
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i14 = icmp eq i32 %122, 0, !dbg !28
  br i1 %.not.i11, label %128, label %123, !dbg !28

123:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %126, label %124, !dbg !28

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

128:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %131, label %129, !dbg !28

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %124, %126, %129, %131
  %.0.i13 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !28
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i16 = icmp eq i32 %133, 0, !dbg !28
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i19 = icmp eq i32 %134, 0, !dbg !28
  br i1 %.not.i16, label %140, label %135, !dbg !28

135:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %138, label %136, !dbg !28

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

140:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %143, label %141, !dbg !28

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

__nv_sqrtf.exit20:                                ; preds = %136, %138, %141, %143
  %.0.i18 = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !28
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i21 = icmp eq i32 %145, 0, !dbg !28
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i24 = icmp eq i32 %146, 0, !dbg !28
  br i1 %.not.i21, label %152, label %147, !dbg !28

147:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %150, label %148, !dbg !28

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

152:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %155, label %153, !dbg !28

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

__nv_sqrtf.exit25:                                ; preds = %148, %150, %153, %155
  %.0.i23 = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !28
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i26 = icmp eq i32 %157, 0, !dbg !28
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i29 = icmp eq i32 %158, 0, !dbg !28
  br i1 %.not.i26, label %164, label %159, !dbg !28

159:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %162, label %160, !dbg !28

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

164:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %167, label %165, !dbg !28

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

__nv_sqrtf.exit30:                                ; preds = %160, %162, %165, %167
  %.0.i28 = phi float [ %161, %160 ], [ %163, %162 ], [ %166, %165 ], [ %168, %167 ], !dbg !28
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i31 = icmp eq i32 %169, 0, !dbg !28
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i34 = icmp eq i32 %170, 0, !dbg !28
  br i1 %.not.i31, label %176, label %171, !dbg !28

171:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %174, label %172, !dbg !28

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

176:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %179, label %177, !dbg !28

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

__nv_sqrtf.exit35:                                ; preds = %172, %174, %177, %179
  %.0.i33 = phi float [ %173, %172 ], [ %175, %174 ], [ %178, %177 ], [ %180, %179 ], !dbg !28
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !29
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !29
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !29
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !29
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !29
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !29
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !29
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !29
  %189 = fadd float %64, 0x3EE4F8B580000000, !dbg !30
  %190 = fadd float %65, 0x3EE4F8B580000000, !dbg !30
  %191 = fadd float %66, 0x3EE4F8B580000000, !dbg !30
  %192 = fadd float %67, 0x3EE4F8B580000000, !dbg !30
  %193 = fadd float %73, 0x3EE4F8B580000000, !dbg !30
  %194 = fadd float %74, 0x3EE4F8B580000000, !dbg !30
  %195 = fadd float %75, 0x3EE4F8B580000000, !dbg !30
  %196 = fadd float %76, 0x3EE4F8B580000000, !dbg !30
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i36 = icmp eq i32 %197, 0, !dbg !31
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i39 = icmp eq i32 %198, 0, !dbg !31
  br i1 %.not.i36, label %204, label %199, !dbg !31

199:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %202, label %200, !dbg !31

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %189) #3, !dbg !31
  br label %__nv_sqrtf.exit40, !dbg !31

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %189) #3, !dbg !31
  br label %__nv_sqrtf.exit40, !dbg !31

204:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %207, label %205, !dbg !31

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.f(float %189) #3, !dbg !31
  br label %__nv_sqrtf.exit40, !dbg !31

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.f(float %189) #3, !dbg !31
  br label %__nv_sqrtf.exit40, !dbg !31

__nv_sqrtf.exit40:                                ; preds = %200, %202, %205, %207
  %.0.i38 = phi float [ %201, %200 ], [ %203, %202 ], [ %206, %205 ], [ %208, %207 ], !dbg !31
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i41 = icmp eq i32 %209, 0, !dbg !31
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i44 = icmp eq i32 %210, 0, !dbg !31
  br i1 %.not.i41, label %216, label %211, !dbg !31

211:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %214, label %212, !dbg !31

212:                                              ; preds = %211
  %213 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %190) #3, !dbg !31
  br label %__nv_sqrtf.exit45, !dbg !31

214:                                              ; preds = %211
  %215 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %190) #3, !dbg !31
  br label %__nv_sqrtf.exit45, !dbg !31

216:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %219, label %217, !dbg !31

217:                                              ; preds = %216
  %218 = tail call float @llvm.nvvm.sqrt.rn.f(float %190) #3, !dbg !31
  br label %__nv_sqrtf.exit45, !dbg !31

219:                                              ; preds = %216
  %220 = tail call float @llvm.nvvm.sqrt.approx.f(float %190) #3, !dbg !31
  br label %__nv_sqrtf.exit45, !dbg !31

__nv_sqrtf.exit45:                                ; preds = %212, %214, %217, %219
  %.0.i43 = phi float [ %213, %212 ], [ %215, %214 ], [ %218, %217 ], [ %220, %219 ], !dbg !31
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i46 = icmp eq i32 %221, 0, !dbg !31
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i49 = icmp eq i32 %222, 0, !dbg !31
  br i1 %.not.i46, label %228, label %223, !dbg !31

223:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %226, label %224, !dbg !31

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %191) #3, !dbg !31
  br label %__nv_sqrtf.exit50, !dbg !31

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %191) #3, !dbg !31
  br label %__nv_sqrtf.exit50, !dbg !31

228:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %231, label %229, !dbg !31

229:                                              ; preds = %228
  %230 = tail call float @llvm.nvvm.sqrt.rn.f(float %191) #3, !dbg !31
  br label %__nv_sqrtf.exit50, !dbg !31

231:                                              ; preds = %228
  %232 = tail call float @llvm.nvvm.sqrt.approx.f(float %191) #3, !dbg !31
  br label %__nv_sqrtf.exit50, !dbg !31

__nv_sqrtf.exit50:                                ; preds = %224, %226, %229, %231
  %.0.i48 = phi float [ %225, %224 ], [ %227, %226 ], [ %230, %229 ], [ %232, %231 ], !dbg !31
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i51 = icmp eq i32 %233, 0, !dbg !31
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i54 = icmp eq i32 %234, 0, !dbg !31
  br i1 %.not.i51, label %240, label %235, !dbg !31

235:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %238, label %236, !dbg !31

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %192) #3, !dbg !31
  br label %__nv_sqrtf.exit55, !dbg !31

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %192) #3, !dbg !31
  br label %__nv_sqrtf.exit55, !dbg !31

240:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %243, label %241, !dbg !31

241:                                              ; preds = %240
  %242 = tail call float @llvm.nvvm.sqrt.rn.f(float %192) #3, !dbg !31
  br label %__nv_sqrtf.exit55, !dbg !31

243:                                              ; preds = %240
  %244 = tail call float @llvm.nvvm.sqrt.approx.f(float %192) #3, !dbg !31
  br label %__nv_sqrtf.exit55, !dbg !31

__nv_sqrtf.exit55:                                ; preds = %236, %238, %241, %243
  %.0.i53 = phi float [ %237, %236 ], [ %239, %238 ], [ %242, %241 ], [ %244, %243 ], !dbg !31
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i56 = icmp eq i32 %245, 0, !dbg !31
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i59 = icmp eq i32 %246, 0, !dbg !31
  br i1 %.not.i56, label %252, label %247, !dbg !31

247:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %250, label %248, !dbg !31

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %193) #3, !dbg !31
  br label %__nv_sqrtf.exit60, !dbg !31

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %193) #3, !dbg !31
  br label %__nv_sqrtf.exit60, !dbg !31

252:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %255, label %253, !dbg !31

253:                                              ; preds = %252
  %254 = tail call float @llvm.nvvm.sqrt.rn.f(float %193) #3, !dbg !31
  br label %__nv_sqrtf.exit60, !dbg !31

255:                                              ; preds = %252
  %256 = tail call float @llvm.nvvm.sqrt.approx.f(float %193) #3, !dbg !31
  br label %__nv_sqrtf.exit60, !dbg !31

__nv_sqrtf.exit60:                                ; preds = %248, %250, %253, %255
  %.0.i58 = phi float [ %249, %248 ], [ %251, %250 ], [ %254, %253 ], [ %256, %255 ], !dbg !31
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i61 = icmp eq i32 %257, 0, !dbg !31
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i64 = icmp eq i32 %258, 0, !dbg !31
  br i1 %.not.i61, label %264, label %259, !dbg !31

259:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %262, label %260, !dbg !31

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %194) #3, !dbg !31
  br label %__nv_sqrtf.exit65, !dbg !31

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %194) #3, !dbg !31
  br label %__nv_sqrtf.exit65, !dbg !31

264:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %267, label %265, !dbg !31

265:                                              ; preds = %264
  %266 = tail call float @llvm.nvvm.sqrt.rn.f(float %194) #3, !dbg !31
  br label %__nv_sqrtf.exit65, !dbg !31

267:                                              ; preds = %264
  %268 = tail call float @llvm.nvvm.sqrt.approx.f(float %194) #3, !dbg !31
  br label %__nv_sqrtf.exit65, !dbg !31

__nv_sqrtf.exit65:                                ; preds = %260, %262, %265, %267
  %.0.i63 = phi float [ %261, %260 ], [ %263, %262 ], [ %266, %265 ], [ %268, %267 ], !dbg !31
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i66 = icmp eq i32 %269, 0, !dbg !31
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i69 = icmp eq i32 %270, 0, !dbg !31
  br i1 %.not.i66, label %276, label %271, !dbg !31

271:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %274, label %272, !dbg !31

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %195) #3, !dbg !31
  br label %__nv_sqrtf.exit70, !dbg !31

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %195) #3, !dbg !31
  br label %__nv_sqrtf.exit70, !dbg !31

276:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %279, label %277, !dbg !31

277:                                              ; preds = %276
  %278 = tail call float @llvm.nvvm.sqrt.rn.f(float %195) #3, !dbg !31
  br label %__nv_sqrtf.exit70, !dbg !31

279:                                              ; preds = %276
  %280 = tail call float @llvm.nvvm.sqrt.approx.f(float %195) #3, !dbg !31
  br label %__nv_sqrtf.exit70, !dbg !31

__nv_sqrtf.exit70:                                ; preds = %272, %274, %277, %279
  %.0.i68 = phi float [ %273, %272 ], [ %275, %274 ], [ %278, %277 ], [ %280, %279 ], !dbg !31
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i71 = icmp eq i32 %281, 0, !dbg !31
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i74 = icmp eq i32 %282, 0, !dbg !31
  br i1 %.not.i71, label %288, label %283, !dbg !31

283:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %286, label %284, !dbg !31

284:                                              ; preds = %283
  %285 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %196) #3, !dbg !31
  br label %__nv_sqrtf.exit75, !dbg !31

286:                                              ; preds = %283
  %287 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %196) #3, !dbg !31
  br label %__nv_sqrtf.exit75, !dbg !31

288:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %291, label %289, !dbg !31

289:                                              ; preds = %288
  %290 = tail call float @llvm.nvvm.sqrt.rn.f(float %196) #3, !dbg !31
  br label %__nv_sqrtf.exit75, !dbg !31

291:                                              ; preds = %288
  %292 = tail call float @llvm.nvvm.sqrt.approx.f(float %196) #3, !dbg !31
  br label %__nv_sqrtf.exit75, !dbg !31

__nv_sqrtf.exit75:                                ; preds = %284, %286, %289, %291
  %.0.i73 = phi float [ %285, %284 ], [ %287, %286 ], [ %290, %289 ], [ %292, %291 ], !dbg !31
  %293 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !18
  %294 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !20
  %295 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !16
  %296 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !24
  %297 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !18
  %298 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !20
  %299 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !16
  %300 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !24
  %301 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !18
  %302 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !20
  %303 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !16
  %304 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !24
  %305 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !18
  %306 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !20
  %307 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !16
  %308 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !24
  %309 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %310 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !20
  %311 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %312 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !24
  %313 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %314 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !20
  %315 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %316 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !24
  %317 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %318 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !20
  %319 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %320 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !24
  %321 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %322 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !20
  %323 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %324 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !24
  %325 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !32
  %326 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !32
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !32
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !32
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !32
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !32
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !32
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !32
  %333 = insertelement <8 x i32> poison, i32 %293, i64 0, !dbg !18
  %334 = insertelement <8 x i32> %333, i32 %297, i64 1, !dbg !18
  %335 = insertelement <8 x i32> %334, i32 %301, i64 2, !dbg !18
  %336 = insertelement <8 x i32> %335, i32 %305, i64 3, !dbg !18
  %337 = insertelement <8 x i32> %336, i32 %309, i64 4, !dbg !18
  %338 = insertelement <8 x i32> %337, i32 %313, i64 5, !dbg !18
  %339 = insertelement <8 x i32> %338, i32 %317, i64 6, !dbg !18
  %340 = insertelement <8 x i32> %339, i32 %321, i64 7, !dbg !18
  %341 = bitcast <8 x i32> %340 to <8 x float>, !dbg !18
  %342 = insertelement <8 x i32> poison, i32 %294, i64 0, !dbg !20
  %343 = insertelement <8 x i32> %342, i32 %298, i64 1, !dbg !20
  %344 = insertelement <8 x i32> %343, i32 %302, i64 2, !dbg !20
  %345 = insertelement <8 x i32> %344, i32 %306, i64 3, !dbg !20
  %346 = insertelement <8 x i32> %345, i32 %310, i64 4, !dbg !20
  %347 = insertelement <8 x i32> %346, i32 %314, i64 5, !dbg !20
  %348 = insertelement <8 x i32> %347, i32 %318, i64 6, !dbg !20
  %349 = insertelement <8 x i32> %348, i32 %322, i64 7, !dbg !20
  %350 = bitcast <8 x i32> %349 to <8 x float>, !dbg !20
  %351 = fsub <8 x float> %341, %350, !dbg !33
  %352 = insertelement <8 x float> poison, float %188, i64 0, !dbg !34
  %353 = insertelement <8 x float> %352, float %187, i64 1, !dbg !34
  %354 = insertelement <8 x float> %353, float %186, i64 2, !dbg !34
  %355 = insertelement <8 x float> %354, float %185, i64 3, !dbg !34
  %356 = insertelement <8 x float> %355, float %184, i64 4, !dbg !34
  %357 = insertelement <8 x float> %356, float %183, i64 5, !dbg !34
  %358 = insertelement <8 x float> %357, float %182, i64 6, !dbg !34
  %359 = insertelement <8 x float> %358, float %181, i64 7, !dbg !34
  %360 = fmul <8 x float> %351, %359, !dbg !34
  %361 = insertelement <8 x i32> poison, i32 %295, i64 0, !dbg !16
  %362 = insertelement <8 x i32> %361, i32 %299, i64 1, !dbg !16
  %363 = insertelement <8 x i32> %362, i32 %303, i64 2, !dbg !16
  %364 = insertelement <8 x i32> %363, i32 %307, i64 3, !dbg !16
  %365 = insertelement <8 x i32> %364, i32 %311, i64 4, !dbg !16
  %366 = insertelement <8 x i32> %365, i32 %315, i64 5, !dbg !16
  %367 = insertelement <8 x i32> %366, i32 %319, i64 6, !dbg !16
  %368 = insertelement <8 x i32> %367, i32 %323, i64 7, !dbg !16
  %369 = bitcast <8 x i32> %368 to <8 x float>, !dbg !16
  %370 = fadd <8 x float> %360, %369, !dbg !35
  %371 = insertelement <8 x i32> poison, i32 %296, i64 0, !dbg !24
  %372 = insertelement <8 x i32> %371, i32 %300, i64 1, !dbg !24
  %373 = insertelement <8 x i32> %372, i32 %304, i64 2, !dbg !24
  %374 = insertelement <8 x i32> %373, i32 %308, i64 3, !dbg !24
  %375 = insertelement <8 x i32> %374, i32 %312, i64 4, !dbg !24
  %376 = insertelement <8 x i32> %375, i32 %316, i64 5, !dbg !24
  %377 = insertelement <8 x i32> %376, i32 %320, i64 6, !dbg !24
  %378 = insertelement <8 x i32> %377, i32 %324, i64 7, !dbg !24
  %379 = bitcast <8 x i32> %378 to <8 x float>, !dbg !24
  %380 = fsub <8 x float> %370, %379, !dbg !36
  %381 = insertelement <8 x float> poison, float %332, i64 0, !dbg !37
  %382 = insertelement <8 x float> %381, float %331, i64 1, !dbg !37
  %383 = insertelement <8 x float> %382, float %330, i64 2, !dbg !37
  %384 = insertelement <8 x float> %383, float %329, i64 3, !dbg !37
  %385 = insertelement <8 x float> %384, float %328, i64 4, !dbg !37
  %386 = insertelement <8 x float> %385, float %327, i64 5, !dbg !37
  %387 = insertelement <8 x float> %386, float %326, i64 6, !dbg !37
  %388 = insertelement <8 x float> %387, float %325, i64 7, !dbg !37
  %389 = fmul <8 x float> %380, %388, !dbg !37
  %390 = fcmp olt <8 x float> %389, zeroinitializer, !dbg !38
  %391 = extractelement <8 x i1> %390, i64 7, !dbg !42
  %392 = extractelement <8 x i1> %390, i64 6, !dbg !42
  %393 = extractelement <8 x i1> %390, i64 5, !dbg !42
  %394 = extractelement <8 x i1> %390, i64 4, !dbg !42
  %395 = extractelement <8 x i1> %390, i64 3, !dbg !42
  %396 = extractelement <8 x i1> %390, i64 2, !dbg !42
  %397 = extractelement <8 x i1> %390, i64 1, !dbg !42
  %398 = extractelement <8 x i1> %390, i64 0, !dbg !42
  %bc = bitcast <8 x float> %389 to <8 x i32>, !dbg !43
  %399 = extractelement <8 x i32> %bc, i64 7, !dbg !43
  %400 = select i1 %391, i32 0, i32 %399, !dbg !42
  %bc76 = bitcast <8 x float> %389 to <8 x i32>, !dbg !43
  %401 = extractelement <8 x i32> %bc76, i64 6, !dbg !43
  %402 = select i1 %392, i32 0, i32 %401, !dbg !42
  %bc77 = bitcast <8 x float> %389 to <8 x i32>, !dbg !43
  %403 = extractelement <8 x i32> %bc77, i64 5, !dbg !43
  %404 = select i1 %393, i32 0, i32 %403, !dbg !42
  %bc78 = bitcast <8 x float> %389 to <8 x i32>, !dbg !43
  %405 = extractelement <8 x i32> %bc78, i64 4, !dbg !43
  %406 = select i1 %394, i32 0, i32 %405, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %400, i32 %402, i32 %404, i32 %406, ptr addrspace(1) %18, i1 true) #3, !dbg !43
  %bc79 = bitcast <8 x float> %389 to <8 x i32>, !dbg !43
  %407 = extractelement <8 x i32> %bc79, i64 3, !dbg !43
  %408 = select i1 %395, i32 0, i32 %407, !dbg !42
  %bc80 = bitcast <8 x float> %389 to <8 x i32>, !dbg !43
  %409 = extractelement <8 x i32> %bc80, i64 2, !dbg !43
  %410 = select i1 %396, i32 0, i32 %409, !dbg !42
  %bc81 = bitcast <8 x float> %389 to <8 x i32>, !dbg !43
  %411 = extractelement <8 x i32> %bc81, i64 1, !dbg !43
  %412 = select i1 %397, i32 0, i32 %411, !dbg !42
  %bc82 = bitcast <8 x float> %389 to <8 x i32>, !dbg !43
  %413 = extractelement <8 x i32> %bc82, i64 0, !dbg !43
  %414 = select i1 %398, i32 0, i32 %413, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %408, i32 %410, i32 %412, i32 %414, ptr addrspace(1) %20, i1 true) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cznni2fpnj4ihgr3k42ifn773etcgib3f25bdhydtfkkg4malf52.py", directory: "inductor_cache/zn")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_18", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 26, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 43, column: 20, scope: !7)
!31 = !DILocation(line: 44, column: 27, scope: !7)
!32 = !DILocation(line: 45, column: 19, scope: !7)
!33 = !DILocation(line: 32, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 19, scope: !7)
!35 = !DILocation(line: 41, column: 19, scope: !7)
!36 = !DILocation(line: 42, column: 20, scope: !7)
!37 = !DILocation(line: 47, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 49, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 50, column: 40, scope: !7)
!44 = !DILocation(line: 50, column: 4, scope: !7)
