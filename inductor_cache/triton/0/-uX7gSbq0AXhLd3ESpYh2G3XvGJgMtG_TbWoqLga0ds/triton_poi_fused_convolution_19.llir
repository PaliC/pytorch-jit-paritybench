; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = shl i32 %8, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %11, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = icmp slt i32 %14, 32, !dbg !14
  %18 = icmp slt i32 %15, 32, !dbg !14
  %19 = icmp slt i32 %16, 32, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 5, !dbg !16
  %22 = or disjoint i32 %21, %13, !dbg !17
  %23 = or disjoint i32 %21, %10, !dbg !17
  %24 = or disjoint i32 %21, %11, !dbg !17
  %25 = icmp slt i32 %22, 64, !dbg !18
  %26 = icmp slt i32 %23, 64, !dbg !18
  %27 = icmp slt i32 %24, 64, !dbg !18
  %.frozen = freeze i32 %14, !dbg !19
  %28 = sdiv i32 %.frozen, 8, !dbg !19
  %29 = mul i32 %28, 8, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %.frozen15 = freeze i32 %15, !dbg !19
  %30 = sdiv i32 %.frozen15, 8, !dbg !19
  %31 = mul i32 %30, 8, !dbg !20
  %.decomposed16 = sub i32 %.frozen15, %31, !dbg !20
  %.frozen17 = freeze i32 %16, !dbg !19
  %32 = sdiv i32 %.frozen17, 8, !dbg !19
  %33 = mul i32 %32, 8, !dbg !20
  %.decomposed18 = sub i32 %.frozen17, %33, !dbg !20
  %34 = add i32 %22, 512, !dbg !21
  %35 = shl nsw i32 %.decomposed, 6, !dbg !22
  %36 = shl nsw i32 %.decomposed16, 6, !dbg !22
  %37 = add i32 %34, %35, !dbg !23
  %38 = add i32 %34, %36, !dbg !23
  %39 = shl i32 %28, 10, !dbg !24
  %40 = shl i32 %30, 10, !dbg !24
  %41 = add i32 %37, %39, !dbg !25
  %42 = add i32 %38, %40, !dbg !25
  %43 = sext i32 %41 to i64, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !26
  %45 = sext i32 %42 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !26
  %47 = and i1 %17, %25, !dbg !27
  %48 = and i1 %18, %25, !dbg !27
  %49 = and i1 %19, %26, !dbg !27
  %50 = and i1 %19, %27, !dbg !27
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %47) #2, !dbg !28
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !28
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %48) #2, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !28
  %61 = shl i32 %23, 3, !dbg !29
  %62 = shl i32 %24, 3, !dbg !29
  %63 = shl i32 %32, 9, !dbg !30
  %64 = add i32 %63, %.decomposed18, !dbg !31
  %65 = add i32 %64, %61, !dbg !32
  %66 = add i32 %64, %62, !dbg !32
  %67 = sext i32 %65 to i64, !dbg !33
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !33
  %69 = sext i32 %66 to i64, !dbg !33
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !33
  %71 = shl i32 %8, 7, !dbg !34
  %72 = and i32 %71, 896, !dbg !34
  %73 = or disjoint i32 %72, %10, !dbg !34
  %74 = and i32 %12, 508, !dbg !34
  %75 = lshr exact i32 %72, 3, !dbg !34
  %76 = or disjoint i32 %75, %73, !dbg !34
  %77 = zext nneg i32 %76 to i64, !dbg !34
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %77, !dbg !34
  %79 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #2, !dbg !34
  %80 = or disjoint i32 %73, 32, !dbg !34
  %81 = lshr i32 %80, 3, !dbg !34
  %82 = and i32 %81, 116, !dbg !34
  %83 = add nuw nsw i32 %82, %80, !dbg !34
  %84 = zext nneg i32 %83 to i64, !dbg !34
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %84, !dbg !34
  %86 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #2, !dbg !34
  %87 = or disjoint i32 %73, 64, !dbg !34
  %88 = lshr i32 %87, 3, !dbg !34
  %89 = and i32 %88, 120, !dbg !34
  %90 = add nuw nsw i32 %89, %87, !dbg !34
  %91 = zext nneg i32 %90 to i64, !dbg !34
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %91, !dbg !34
  %93 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #2, !dbg !34
  %94 = or disjoint i32 %73, 96, !dbg !34
  %95 = lshr i32 %94, 3, !dbg !34
  %96 = and i32 %95, 124, !dbg !34
  %97 = add nuw nsw i32 %96, %94, !dbg !34
  %98 = zext nneg i32 %97 to i64, !dbg !34
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %98, !dbg !34
  %100 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 true) #2, !dbg !34
  %101 = or disjoint i32 %73, 16, !dbg !34
  %102 = add nuw nsw i32 %101, %75, !dbg !34
  %103 = zext nneg i32 %102 to i64, !dbg !34
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %103, !dbg !34
  %105 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #2, !dbg !34
  %106 = or disjoint i32 %73, 48, !dbg !34
  %107 = lshr i32 %106, 3, !dbg !34
  %108 = and i32 %107, 116, !dbg !34
  %109 = add nuw nsw i32 %108, %106, !dbg !34
  %110 = zext nneg i32 %109 to i64, !dbg !34
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %110, !dbg !34
  %112 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #2, !dbg !34
  %113 = or disjoint i32 %73, 80, !dbg !34
  %114 = lshr i32 %113, 3, !dbg !34
  %115 = and i32 %114, 120, !dbg !34
  %116 = add nuw nsw i32 %115, %113, !dbg !34
  %117 = zext nneg i32 %116 to i64, !dbg !34
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %117, !dbg !34
  %119 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !34
  %120 = or disjoint i32 %73, 112, !dbg !34
  %121 = lshr i32 %120, 3, !dbg !34
  %122 = and i32 %121, 124, !dbg !34
  %123 = add nuw nsw i32 %122, %120, !dbg !34
  %124 = zext nneg i32 %123 to i64, !dbg !34
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %124, !dbg !34
  %126 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %127 = lshr i32 %12, 3, !dbg !34
  %128 = and i32 %127, 60, !dbg !34
  %129 = add nuw nsw i32 %128, %74, !dbg !34
  %130 = zext nneg i32 %129 to i64, !dbg !34
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %130, !dbg !34
  %132 = or disjoint i32 %74, 512, !dbg !34
  %133 = lshr i32 %132, 3, !dbg !34
  %134 = and i32 %133, 124, !dbg !34
  %135 = add nuw nsw i32 %134, %132, !dbg !34
  %136 = zext nneg i32 %135 to i64, !dbg !34
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %136, !dbg !34
  %138 = load <4 x i32>, ptr addrspace(3) %137, align 16, !dbg !34
  %.extract = load i32, ptr addrspace(3) %131, align 16, !dbg !34
  %139 = getelementptr inbounds i8, ptr addrspace(3) %131, i64 4, !dbg !34
  %.extract8 = load i32, ptr addrspace(3) %139, align 4, !dbg !34
  %140 = getelementptr inbounds i8, ptr addrspace(3) %131, i64 8, !dbg !34
  %.extract9 = load i32, ptr addrspace(3) %140, align 8, !dbg !34
  %141 = getelementptr inbounds i8, ptr addrspace(3) %131, i64 12, !dbg !34
  %.extract10 = load i32, ptr addrspace(3) %141, align 4, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %68, i1 %49) #2, !dbg !34
  %.extract11 = extractelement <4 x i32> %138, i64 0, !dbg !34
  %.extract12 = extractelement <4 x i32> %138, i64 1, !dbg !34
  %.extract13 = extractelement <4 x i32> %138, i64 2, !dbg !34
  %.extract14 = extractelement <4 x i32> %138, i64 3, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %70, i1 %50) #2, !dbg !34
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !35
  %143 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %142, i1 %49) #2, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %143, i1 %50) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm27acmprfpb4byqg2xitq5v54olxgh5o6yuvafemw25xueli227.py", directory: "inductor_cache/m2")
!4 = !{ptr @triton_poi_fused_convolution_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_19", linkageName: "triton_poi_fused_convolution_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 36, scope: !7)
!22 = !DILocation(line: 31, column: 44, scope: !7)
!23 = !DILocation(line: 31, column: 41, scope: !7)
!24 = !DILocation(line: 31, column: 54, scope: !7)
!25 = !DILocation(line: 31, column: 49, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 67, scope: !7)
!28 = !DILocation(line: 31, column: 59, scope: !7)
!29 = !DILocation(line: 32, column: 32, scope: !7)
!30 = !DILocation(line: 32, column: 41, scope: !7)
!31 = !DILocation(line: 32, column: 30, scope: !7)
!32 = !DILocation(line: 32, column: 37, scope: !7)
!33 = !DILocation(line: 32, column: 25, scope: !7)
!34 = !DILocation(line: 32, column: 52, scope: !7)
!35 = !DILocation(line: 33, column: 25, scope: !7)
!36 = !DILocation(line: 33, column: 52, scope: !7)
!37 = !DILocation(line: 33, column: 4, scope: !7)
