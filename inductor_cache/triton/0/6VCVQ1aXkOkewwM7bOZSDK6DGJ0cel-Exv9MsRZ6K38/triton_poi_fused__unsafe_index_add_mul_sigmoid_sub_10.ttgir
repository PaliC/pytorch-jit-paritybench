#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [4, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [4, 8], warpsPerCTA = [1, 8], order = [0, 1]}>
#loc = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_10(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":19:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":19:0), %arg3: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":19:0), %arg5: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":19:0), %arg10: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":19:0), %arg11: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":19:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":19:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.000000e+00> : tensor<16x256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<16x256xf32, #blocked> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<512> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<512> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<256> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<256> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<16> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<128> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<2048> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<128> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<32768> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<256> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_11 = arith.constant dense<0> : tensor<16x1xi64, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<512> : tensor<16x1xi64, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<128> : tensor<16x1xi64, #blocked> loc(#loc1)
    %cst_14 = arith.constant dense<4> : tensor<16x1xi64, #blocked> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<1x256xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<1x256xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<1x256xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<1x256xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_1 : tensor<1x256xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_2 : tensor<1x256xi32, #blocked1> loc(#loc6)
    %12 = tt.get_program_id x : i32 loc(#loc7)
    %13 = arith.muli %12, %c16_i32 : i32 loc(#loc8)
    %14 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc9)
    %15 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc9)
    %16 = tt.expand_dims %14 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc9)
    %17 = tt.expand_dims %15 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc9)
    %18 = tt.splat %13 : i32 -> tensor<16x1xi32, #blocked> loc(#loc10)
    %19 = tt.splat %13 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc10)
    %20 = arith.addi %18, %16 : tensor<16x1xi32, #blocked> loc(#loc10)
    %21 = arith.addi %19, %17 : tensor<16x1xi32, #blocked1> loc(#loc10)
    %22 = arith.cmpi slt, %20, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc11)
    %23 = arith.cmpi slt, %21, %cst_4 : tensor<16x1xi32, #blocked1> loc(#loc11)
    %24 = arith.divsi %20, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc12)
    %25 = arith.remsi %20, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc13)
    %26 = arith.remsi %8, %cst_6 : tensor<1x256xi32, #blocked> loc(#loc14)
    %27 = arith.divsi %8, %cst_6 : tensor<1x256xi32, #blocked> loc(#loc15)
    %28 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<16x1x!tt.ptr<i64>, #blocked> loc(#loc16)
    %29 = tt.addptr %28, %24 : tensor<16x1x!tt.ptr<i64>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc16)
    %30 = tt.load %29, %22 evictionPolicy = evict_last : tensor<16x1x!tt.ptr<i64>, #blocked> loc(#loc17)
    %31 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<16x1x!tt.ptr<i64>, #blocked> loc(#loc18)
    %32 = tt.addptr %31, %25 : tensor<16x1x!tt.ptr<i64>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc18)
    %33 = tt.load %32, %22 evictionPolicy = evict_last : tensor<16x1x!tt.ptr<i64>, #blocked> loc(#loc19)
    %34 = tt.splat %arg3 : !tt.ptr<i64> -> tensor<16x1x!tt.ptr<i64>, #blocked> loc(#loc20)
    %35 = tt.addptr %34, %25 : tensor<16x1x!tt.ptr<i64>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc20)
    %36 = tt.load %35, %22 evictionPolicy = evict_last : tensor<16x1x!tt.ptr<i64>, #blocked> loc(#loc21)
    %37 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<16x1x!tt.ptr<f32>, #blocked> loc(#loc22)
    %38 = tt.addptr %37, %25 : tensor<16x1x!tt.ptr<f32>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc22)
    %39 = tt.load %38, %22 evictionPolicy = evict_last : tensor<16x1x!tt.ptr<f32>, #blocked> loc(#loc23)
    %40 = tt.splat %arg5 : !tt.ptr<i64> -> tensor<16x1x!tt.ptr<i64>, #blocked> loc(#loc24)
    %41 = tt.addptr %40, %24 : tensor<16x1x!tt.ptr<i64>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc24)
    %42 = tt.load %41, %22 evictionPolicy = evict_last : tensor<16x1x!tt.ptr<i64>, #blocked> loc(#loc25)
    %43 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<16x1x!tt.ptr<f32>, #blocked> loc(#loc26)
    %44 = tt.addptr %43, %24 : tensor<16x1x!tt.ptr<f32>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc26)
    %45 = tt.load %44, %22 evictionPolicy = evict_last : tensor<16x1x!tt.ptr<f32>, #blocked> loc(#loc27)
    %46 = arith.addi %30, %cst_14 : tensor<16x1xi64, #blocked> loc(#loc28)
    %47 = arith.cmpi slt, %30, %cst_11 : tensor<16x1xi64, #blocked> loc(#loc29)
    %48 = arith.select %47, %46, %30 : tensor<16x1xi1, #blocked>, tensor<16x1xi64, #blocked> loc(#loc30)
    %49 = arith.addi %33, %cst_14 : tensor<16x1xi64, #blocked> loc(#loc31)
    %50 = arith.cmpi slt, %33, %cst_11 : tensor<16x1xi64, #blocked> loc(#loc32)
    %51 = arith.select %50, %49, %33 : tensor<16x1xi1, #blocked>, tensor<16x1xi64, #blocked> loc(#loc33)
    %52 = arith.muli %51, %cst_13 : tensor<16x1xi64, #blocked> loc(#loc34)
    %53 = tt.broadcast %52 : tensor<16x1xi64, #blocked> -> tensor<16x256xi64, #blocked> loc(#loc34)
    %54 = arith.extsi %26 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc35)
    %55 = tt.broadcast %54 : tensor<1x256xi64, #blocked> -> tensor<16x256xi64, #blocked> loc(#loc35)
    %56 = arith.addi %55, %53 : tensor<16x256xi64, #blocked> loc(#loc35)
    %57 = arith.muli %48, %cst_12 : tensor<16x1xi64, #blocked> loc(#loc36)
    %58 = tt.broadcast %57 : tensor<16x1xi64, #blocked> -> tensor<16x256xi64, #blocked> loc(#loc36)
    %59 = arith.addi %56, %58 : tensor<16x256xi64, #blocked> loc(#loc37)
    %60 = arith.muli %27, %cst_7 : tensor<1x256xi32, #blocked> loc(#loc38)
    %61 = arith.extsi %60 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc39)
    %62 = tt.broadcast %61 : tensor<1x256xi64, #blocked> -> tensor<16x256xi64, #blocked> loc(#loc39)
    %63 = arith.addi %59, %62 : tensor<16x256xi64, #blocked> loc(#loc39)
    %64 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc40)
    %65 = tt.addptr %64, %63 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi64, #blocked> loc(#loc40)
    %66 = tt.broadcast %22 : tensor<16x1xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc41)
    %67 = tt.broadcast %23 : tensor<16x1xi1, #blocked1> -> tensor<16x256xi1, #blocked1> loc(#loc41)
    %68 = tt.broadcast %10 : tensor<1x256xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc41)
    %69 = tt.broadcast %11 : tensor<1x256xi1, #blocked1> -> tensor<16x256xi1, #blocked1> loc(#loc41)
    %70 = arith.andi %66, %68 : tensor<16x256xi1, #blocked> loc(#loc41)
    %71 = arith.andi %67, %69 : tensor<16x256xi1, #blocked1> loc(#loc41)
    %72 = tt.load %65, %70 : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc42)
    %73 = arith.addi %36, %cst_14 : tensor<16x1xi64, #blocked> loc(#loc43)
    %74 = arith.cmpi slt, %36, %cst_11 : tensor<16x1xi64, #blocked> loc(#loc44)
    %75 = arith.select %74, %73, %36 : tensor<16x1xi1, #blocked>, tensor<16x1xi64, #blocked> loc(#loc45)
    %76 = arith.muli %75, %cst_13 : tensor<16x1xi64, #blocked> loc(#loc46)
    %77 = tt.broadcast %76 : tensor<16x1xi64, #blocked> -> tensor<16x256xi64, #blocked> loc(#loc46)
    %78 = arith.addi %55, %77 : tensor<16x256xi64, #blocked> loc(#loc47)
    %79 = arith.addi %78, %58 : tensor<16x256xi64, #blocked> loc(#loc48)
    %80 = arith.addi %79, %62 : tensor<16x256xi64, #blocked> loc(#loc49)
    %81 = tt.addptr %64, %80 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi64, #blocked> loc(#loc50)
    %82 = tt.load %81, %70 : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc51)
    %83 = arith.subf %82, %72 : tensor<16x256xf32, #blocked> loc(#loc52)
    %84 = tt.broadcast %39 : tensor<16x1xf32, #blocked> -> tensor<16x256xf32, #blocked> loc(#loc53)
    %85 = arith.mulf %83, %84 : tensor<16x256xf32, #blocked> loc(#loc53)
    %86 = arith.addf %72, %85 : tensor<16x256xf32, #blocked> loc(#loc54)
    %87 = arith.addi %42, %cst_14 : tensor<16x1xi64, #blocked> loc(#loc55)
    %88 = arith.cmpi slt, %42, %cst_11 : tensor<16x1xi64, #blocked> loc(#loc56)
    %89 = arith.select %88, %87, %42 : tensor<16x1xi1, #blocked>, tensor<16x1xi64, #blocked> loc(#loc57)
    %90 = arith.muli %89, %cst_12 : tensor<16x1xi64, #blocked> loc(#loc58)
    %91 = tt.broadcast %90 : tensor<16x1xi64, #blocked> -> tensor<16x256xi64, #blocked> loc(#loc58)
    %92 = arith.addi %56, %91 : tensor<16x256xi64, #blocked> loc(#loc59)
    %93 = arith.addi %92, %62 : tensor<16x256xi64, #blocked> loc(#loc60)
    %94 = tt.addptr %64, %93 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi64, #blocked> loc(#loc61)
    %95 = tt.load %94, %70 : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc62)
    %96 = arith.addi %78, %91 : tensor<16x256xi64, #blocked> loc(#loc63)
    %97 = arith.addi %96, %62 : tensor<16x256xi64, #blocked> loc(#loc64)
    %98 = tt.addptr %64, %97 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi64, #blocked> loc(#loc65)
    %99 = tt.load %98, %70 : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc66)
    %100 = arith.subf %99, %95 : tensor<16x256xf32, #blocked> loc(#loc67)
    %101 = arith.mulf %100, %84 : tensor<16x256xf32, #blocked> loc(#loc68)
    %102 = arith.addf %95, %101 : tensor<16x256xf32, #blocked> loc(#loc69)
    %103 = arith.subf %102, %86 : tensor<16x256xf32, #blocked> loc(#loc70)
    %104 = tt.broadcast %45 : tensor<16x1xf32, #blocked> -> tensor<16x256xf32, #blocked> loc(#loc71)
    %105 = arith.mulf %103, %104 : tensor<16x256xf32, #blocked> loc(#loc71)
    %106 = arith.addf %86, %105 : tensor<16x256xf32, #blocked> loc(#loc72)
    %107 = arith.subf %cst_0, %106 : tensor<16x256xf32, #blocked> loc(#loc122)
    %108 = math.exp %107 : tensor<16x256xf32, #blocked> loc(#loc123)
    %109 = arith.addf %108, %cst : tensor<16x256xf32, #blocked> loc(#loc124)
    %110 = arith.divf %cst, %109 : tensor<16x256xf32, #blocked> loc(#loc125)
    %111 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc78)
    %112 = tt.addptr %111, %63 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi64, #blocked> loc(#loc78)
    %113 = tt.load %112, %70 : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc79)
    %114 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc80)
    %115 = tt.addptr %114, %63 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi64, #blocked> loc(#loc80)
    %116 = tt.load %115, %70 : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc81)
    %117 = arith.subf %cst_0, %116 : tensor<16x256xf32, #blocked> loc(#loc126)
    %118 = math.exp %117 : tensor<16x256xf32, #blocked> loc(#loc127)
    %119 = arith.addf %118, %cst : tensor<16x256xf32, #blocked> loc(#loc128)
    %120 = arith.divf %cst, %119 : tensor<16x256xf32, #blocked> loc(#loc129)
    %121 = arith.mulf %113, %120 : tensor<16x256xf32, #blocked> loc(#loc83)
    %122 = tt.addptr %111, %80 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi64, #blocked> loc(#loc84)
    %123 = tt.load %122, %70 : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc85)
    %124 = tt.addptr %114, %80 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi64, #blocked> loc(#loc86)
    %125 = tt.load %124, %70 : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc87)
    %126 = arith.subf %cst_0, %125 : tensor<16x256xf32, #blocked> loc(#loc130)
    %127 = math.exp %126 : tensor<16x256xf32, #blocked> loc(#loc131)
    %128 = arith.addf %127, %cst : tensor<16x256xf32, #blocked> loc(#loc132)
    %129 = arith.divf %cst, %128 : tensor<16x256xf32, #blocked> loc(#loc133)
    %130 = arith.mulf %123, %129 : tensor<16x256xf32, #blocked> loc(#loc89)
    %131 = arith.subf %130, %121 : tensor<16x256xf32, #blocked> loc(#loc90)
    %132 = arith.mulf %131, %84 : tensor<16x256xf32, #blocked> loc(#loc91)
    %133 = arith.addf %121, %132 : tensor<16x256xf32, #blocked> loc(#loc92)
    %134 = tt.addptr %111, %93 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi64, #blocked> loc(#loc93)
    %135 = tt.load %134, %70 : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc94)
    %136 = tt.addptr %114, %93 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi64, #blocked> loc(#loc95)
    %137 = tt.load %136, %70 : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc96)
    %138 = arith.subf %cst_0, %137 : tensor<16x256xf32, #blocked> loc(#loc134)
    %139 = math.exp %138 : tensor<16x256xf32, #blocked> loc(#loc135)
    %140 = arith.addf %139, %cst : tensor<16x256xf32, #blocked> loc(#loc136)
    %141 = arith.divf %cst, %140 : tensor<16x256xf32, #blocked> loc(#loc137)
    %142 = arith.mulf %135, %141 : tensor<16x256xf32, #blocked> loc(#loc98)
    %143 = tt.addptr %111, %97 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi64, #blocked> loc(#loc99)
    %144 = tt.load %143, %70 : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc100)
    %145 = tt.addptr %114, %97 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi64, #blocked> loc(#loc101)
    %146 = tt.load %145, %70 : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc102)
    %147 = arith.subf %cst_0, %146 : tensor<16x256xf32, #blocked> loc(#loc138)
    %148 = math.exp %147 : tensor<16x256xf32, #blocked> loc(#loc139)
    %149 = arith.addf %148, %cst : tensor<16x256xf32, #blocked> loc(#loc140)
    %150 = arith.divf %cst, %149 : tensor<16x256xf32, #blocked> loc(#loc141)
    %151 = arith.mulf %144, %150 : tensor<16x256xf32, #blocked> loc(#loc104)
    %152 = arith.subf %151, %142 : tensor<16x256xf32, #blocked> loc(#loc105)
    %153 = arith.mulf %152, %84 : tensor<16x256xf32, #blocked> loc(#loc106)
    %154 = arith.addf %142, %153 : tensor<16x256xf32, #blocked> loc(#loc107)
    %155 = arith.subf %154, %133 : tensor<16x256xf32, #blocked> loc(#loc108)
    %156 = arith.muli %20, %cst_8 : tensor<16x1xi32, #blocked> loc(#loc109)
    %157 = tt.broadcast %26 : tensor<1x256xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc110)
    %158 = tt.broadcast %156 : tensor<16x1xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc110)
    %159 = arith.addi %157, %158 : tensor<16x256xi32, #blocked> loc(#loc110)
    %160 = arith.muli %27, %cst_9 : tensor<1x256xi32, #blocked> loc(#loc111)
    %161 = tt.broadcast %160 : tensor<1x256xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc112)
    %162 = arith.addi %159, %161 : tensor<16x256xi32, #blocked> loc(#loc112)
    %163 = tt.splat %arg9 : !tt.ptr<f32> -> tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc113)
    %164 = tt.addptr %163, %162 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi32, #blocked> loc(#loc113)
    tt.store %164, %110, %70 : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc114)
    %165 = arith.muli %9, %cst_10 : tensor<1x256xi32, #blocked1> loc(#loc115)
    %166 = tt.broadcast %21 : tensor<16x1xi32, #blocked1> -> tensor<16x256xi32, #blocked1> loc(#loc116)
    %167 = tt.broadcast %165 : tensor<1x256xi32, #blocked1> -> tensor<16x256xi32, #blocked1> loc(#loc116)
    %168 = arith.addi %166, %167 : tensor<16x256xi32, #blocked1> loc(#loc116)
    %169 = tt.splat %arg10 : !tt.ptr<f32> -> tensor<16x256x!tt.ptr<f32>, #blocked1> loc(#loc117)
    %170 = tt.addptr %169, %168 : tensor<16x256x!tt.ptr<f32>, #blocked1>, tensor<16x256xi32, #blocked1> loc(#loc117)
    %171 = triton_gpu.convert_layout %133 : tensor<16x256xf32, #blocked> -> tensor<16x256xf32, #blocked1> loc(#loc118)
    tt.store %170, %171, %71 : tensor<16x256x!tt.ptr<f32>, #blocked1> loc(#loc118)
    %172 = tt.splat %arg11 : !tt.ptr<f32> -> tensor<16x256x!tt.ptr<f32>, #blocked1> loc(#loc119)
    %173 = tt.addptr %172, %168 : tensor<16x256x!tt.ptr<f32>, #blocked1>, tensor<16x256xi32, #blocked1> loc(#loc119)
    %174 = triton_gpu.convert_layout %155 : tensor<16x256xf32, #blocked> -> tensor<16x256xf32, #blocked1> loc(#loc120)
    tt.store %173, %174, %71 : tensor<16x256x!tt.ptr<f32>, #blocked1> loc(#loc120)
    tt.return loc(#loc121)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":22:28)
#loc3 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":22:33)
#loc4 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":23:44)
#loc5 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":23:23)
#loc6 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":24:21)
#loc7 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":25:28)
#loc8 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":25:33)
#loc9 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":26:44)
#loc10 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":26:23)
#loc11 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":27:21)
#loc12 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":28:19)
#loc13 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":29:19)
#loc14 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":30:19)
#loc15 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":31:19)
#loc16 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":34:30)
#loc17 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":34:35)
#loc18 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":35:30)
#loc19 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":35:35)
#loc20 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":36:31)
#loc21 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":36:36)
#loc22 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":37:31)
#loc23 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":37:36)
#loc24 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":38:31)
#loc25 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":38:36)
#loc26 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":39:31)
#loc27 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":39:36)
#loc28 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":41:18)
#loc29 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":42:18)
#loc30 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":43:32)
#loc31 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":44:18)
#loc32 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":45:18)
#loc33 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":46:32)
#loc34 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":47:39)
#loc35 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":47:35)
#loc36 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":47:50)
#loc37 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":47:46)
#loc38 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":47:62)
#loc39 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":47:57)
#loc40 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":47:30)
#loc41 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":47:75)
#loc42 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":47:67)
#loc43 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":48:20)
#loc44 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":49:20)
#loc45 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":50:35)
#loc46 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":51:40)
#loc47 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":51:36)
#loc48 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":51:48)
#loc49 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":51:59)
#loc50 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":51:31)
#loc51 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":51:69)
#loc52 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":52:20)
#loc53 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":53:20)
#loc54 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":54:19)
#loc55 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":55:20)
#loc56 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":56:20)
#loc57 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":57:35)
#loc58 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":58:51)
#loc59 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":58:47)
#loc60 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":58:59)
#loc61 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":58:31)
#loc62 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":58:69)
#loc63 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":59:48)
#loc64 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":59:60)
#loc65 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":59:31)
#loc66 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":59:70)
#loc67 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":60:20)
#loc68 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":61:20)
#loc69 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":62:20)
#loc70 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":63:20)
#loc71 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":64:20)
#loc72 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":65:20)
#loc73 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc74 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":66:23)
#loc75 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc76 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc77 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc78 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":67:31)
#loc79 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":67:68)
#loc80 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":68:31)
#loc81 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":68:68)
#loc82 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":69:23)
#loc83 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":70:20)
#loc84 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":71:31)
#loc85 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":71:69)
#loc86 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":72:31)
#loc87 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":72:69)
#loc88 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":73:23)
#loc89 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":74:20)
#loc90 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":75:20)
#loc91 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":76:20)
#loc92 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":77:20)
#loc93 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":78:31)
#loc94 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":78:69)
#loc95 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":79:31)
#loc96 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":79:69)
#loc97 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":80:23)
#loc98 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":81:20)
#loc99 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":82:31)
#loc100 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":82:70)
#loc101 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":83:31)
#loc102 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":83:70)
#loc103 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":84:23)
#loc104 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":85:20)
#loc105 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":86:20)
#loc106 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":87:20)
#loc107 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":88:20)
#loc108 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":89:20)
#loc109 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":90:34)
#loc110 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":90:30)
#loc111 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":90:45)
#loc112 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":90:39)
#loc113 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":90:25)
#loc114 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":90:57)
#loc115 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":91:34)
#loc116 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":91:30)
#loc117 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":91:25)
#loc118 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":91:46)
#loc119 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":92:25)
#loc120 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":92:46)
#loc121 = loc("inductor_cache/47/c4773rirsg53iqndd6lz6saegyyjbmo4hselkks5m6cybbynco7f.py":92:4)
#loc122 = loc(callsite(#loc73 at #loc74))
#loc123 = loc(callsite(#loc75 at #loc74))
#loc124 = loc(callsite(#loc76 at #loc74))
#loc125 = loc(callsite(#loc77 at #loc74))
#loc126 = loc(callsite(#loc73 at #loc82))
#loc127 = loc(callsite(#loc75 at #loc82))
#loc128 = loc(callsite(#loc76 at #loc82))
#loc129 = loc(callsite(#loc77 at #loc82))
#loc130 = loc(callsite(#loc73 at #loc88))
#loc131 = loc(callsite(#loc75 at #loc88))
#loc132 = loc(callsite(#loc76 at #loc88))
#loc133 = loc(callsite(#loc77 at #loc88))
#loc134 = loc(callsite(#loc73 at #loc97))
#loc135 = loc(callsite(#loc75 at #loc97))
#loc136 = loc(callsite(#loc76 at #loc97))
#loc137 = loc(callsite(#loc77 at #loc97))
#loc138 = loc(callsite(#loc73 at #loc103))
#loc139 = loc(callsite(#loc75 at #loc103))
#loc140 = loc(callsite(#loc76 at #loc103))
#loc141 = loc(callsite(#loc77 at #loc103))
