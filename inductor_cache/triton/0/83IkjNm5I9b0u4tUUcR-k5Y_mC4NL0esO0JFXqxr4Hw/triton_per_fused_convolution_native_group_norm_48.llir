; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_convolution_native_group_norm_48(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = and i32 %8, 31, !dbg !11
  %10 = lshr i32 %8, 5, !dbg !11
  %11 = shl i32 %8, 2, !dbg !11
  %12 = and i32 %11, 1020, !dbg !11
  %13 = lshr i32 %12, 6, !dbg !12
  %14 = srem i32 %7, 32, !dbg !13
  %15 = shl i32 %7, 10, !dbg !14
  %16 = or disjoint i32 %15, %12, !dbg !15
  %17 = sext i32 %16 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #5, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !17
  %24 = shl nsw i32 %14, 4, !dbg !18
  %25 = or disjoint i32 %24, %13, !dbg !19
  %26 = sext i32 %25 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !21
  %32 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !17
  %33 = insertelement <2 x i32> %32, i32 %21, i64 1, !dbg !17
  %34 = bitcast <2 x i32> %33 to <2 x float>, !dbg !17
  %35 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !21
  %36 = insertelement <2 x i32> %35, i32 %29, i64 1, !dbg !21
  %37 = bitcast <2 x i32> %36 to <2 x float>, !dbg !21
  %38 = fadd <2 x float> %34, %37, !dbg !22
  %39 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !17
  %40 = insertelement <2 x i32> %39, i32 %23, i64 1, !dbg !17
  %41 = bitcast <2 x i32> %40 to <2 x float>, !dbg !17
  %42 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !21
  %43 = insertelement <2 x i32> %42, i32 %31, i64 1, !dbg !21
  %44 = bitcast <2 x i32> %43 to <2 x float>, !dbg !21
  %45 = fadd <2 x float> %41, %44, !dbg !22
  %46 = extractelement <2 x float> %38, i64 0, !dbg !23
  %47 = extractelement <2 x float> %38, i64 1, !dbg !23
  %48 = fadd float %46, %47, !dbg !24
  %49 = extractelement <2 x float> %45, i64 0, !dbg !23
  %50 = fadd float %48, %49, !dbg !24
  %51 = extractelement <2 x float> %45, i64 1, !dbg !23
  %52 = fadd float %50, %51, !dbg !24
  %53 = bitcast float %52 to i32, !dbg !29
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 16, i32 31), !dbg !29
  %55 = bitcast i32 %54 to float, !dbg !29
  %56 = fadd float %52, %55, !dbg !24
  %57 = bitcast float %56 to i32, !dbg !29
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 8, i32 31), !dbg !29
  %59 = bitcast i32 %58 to float, !dbg !29
  %60 = fadd float %56, %59, !dbg !24
  %61 = bitcast float %60 to i32, !dbg !29
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 4, i32 31), !dbg !29
  %63 = bitcast i32 %62 to float, !dbg !29
  %64 = fadd float %60, %63, !dbg !24
  %65 = bitcast float %64 to i32, !dbg !29
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 2, i32 31), !dbg !29
  %67 = bitcast i32 %66 to float, !dbg !29
  %68 = fadd float %64, %67, !dbg !24
  %69 = bitcast float %68 to i32, !dbg !29
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 1, i32 31), !dbg !29
  %71 = bitcast i32 %70 to float, !dbg !29
  %72 = fadd float %68, %71, !dbg !24
  %73 = icmp eq i32 %9, 0, !dbg !29
  %74 = and i32 %10, 7, !dbg !29
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !29
  %76 = bitcast float %72 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 %73) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %77 = icmp slt i32 %8, 8, !dbg !29
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !29
  %79 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %78, i1 %77) #5, !dbg !29
  %80 = bitcast i32 %79 to float, !dbg !29
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 4, i32 31), !dbg !29
  %82 = bitcast i32 %81 to float, !dbg !29
  %83 = fadd float %80, %82, !dbg !24
  %84 = bitcast float %83 to i32, !dbg !29
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 2, i32 31), !dbg !29
  %86 = bitcast i32 %85 to float, !dbg !29
  %87 = fadd float %83, %86, !dbg !24
  %88 = bitcast float %87 to i32, !dbg !29
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !29
  %90 = bitcast i32 %89 to float, !dbg !29
  %91 = fadd float %87, %90, !dbg !24
  %92 = and i32 %8, 7, !dbg !29
  %93 = icmp eq i32 %92, 0, !dbg !29
  %94 = and i1 %77, %93, !dbg !29
  %95 = bitcast float %91 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %95, i1 %94) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %96 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %97 = fadd float %96, 0.000000e+00, !dbg !30
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float 1.024000e+03) #5, !dbg !34
  %99 = fsub float %46, %98, !dbg !23
  %100 = fsub float %47, %98, !dbg !23
  %101 = fsub float %49, %98, !dbg !23
  %102 = fsub float %51, %98, !dbg !23
  %103 = fmul float %99, %99, !dbg !35
  %104 = fmul float %100, %100, !dbg !35
  %105 = fmul float %101, %101, !dbg !35
  %106 = fmul float %102, %102, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %107 = fadd float %103, %104, !dbg !38
  %108 = fadd float %105, %107, !dbg !38
  %109 = fadd float %106, %108, !dbg !38
  %110 = bitcast float %109 to i32, !dbg !36
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 16, i32 31), !dbg !36
  %112 = bitcast i32 %111 to float, !dbg !36
  %113 = fadd float %109, %112, !dbg !38
  %114 = bitcast float %113 to i32, !dbg !36
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 8, i32 31), !dbg !36
  %116 = bitcast i32 %115 to float, !dbg !36
  %117 = fadd float %113, %116, !dbg !38
  %118 = bitcast float %117 to i32, !dbg !36
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 4, i32 31), !dbg !36
  %120 = bitcast i32 %119 to float, !dbg !36
  %121 = fadd float %117, %120, !dbg !38
  %122 = bitcast float %121 to i32, !dbg !36
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !36
  %124 = bitcast i32 %123 to float, !dbg !36
  %125 = fadd float %121, %124, !dbg !38
  %126 = bitcast float %125 to i32, !dbg !36
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 1, i32 31), !dbg !36
  %128 = bitcast i32 %127 to float, !dbg !36
  %129 = fadd float %125, %128, !dbg !38
  %130 = bitcast float %129 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %130, i1 %73) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %131 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %78, i1 %77) #5, !dbg !36
  %132 = bitcast i32 %131 to float, !dbg !36
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 4, i32 31), !dbg !36
  %134 = bitcast i32 %133 to float, !dbg !36
  %135 = fadd float %132, %134, !dbg !38
  %136 = bitcast float %135 to i32, !dbg !36
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 2, i32 31), !dbg !36
  %138 = bitcast i32 %137 to float, !dbg !36
  %139 = fadd float %135, %138, !dbg !38
  %140 = bitcast float %139 to i32, !dbg !36
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 1, i32 31), !dbg !36
  %142 = bitcast i32 %141 to float, !dbg !36
  %143 = fadd float %139, %142, !dbg !38
  %144 = bitcast float %143 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %144, i1 %94) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %145 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %146 = fadd float %145, 0.000000e+00, !dbg !39
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float 1.024000e+03) #5, !dbg !41
  %148 = fadd float %147, 0x3EE4F8B580000000, !dbg !42
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i = icmp eq i32 %149, 0, !dbg !43
  br i1 %.not.i, label %152, label %150, !dbg !43

150:                                              ; preds = %6
  %151 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %148), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

152:                                              ; preds = %6
  %153 = tail call float @llvm.nvvm.rsqrt.approx.f(float %148), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %150, %152
  %.0.i = phi float [ %151, %150 ], [ %153, %152 ], !dbg !43
  %154 = bitcast float %46 to i32, !dbg !44
  %155 = bitcast float %47 to i32, !dbg !44
  %156 = bitcast float %49 to i32, !dbg !44
  %157 = bitcast float %51 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %154, i32 %155, i32 %156, i32 %157, ptr addrspace(1) %18, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %158 = sext i32 %7 to i64, !dbg !46
  %159 = getelementptr float, ptr addrspace(1) %1, i64 %158, !dbg !46
  %urem = and i32 %8, 255, !dbg !47
  %160 = icmp eq i32 %urem, 0, !dbg !47
  %161 = bitcast float %.0.i to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %161, ptr addrspace(1) %159, i1 %160) #5, !dbg !47
  %162 = getelementptr float, ptr addrspace(1) %3, i64 %158, !dbg !48
  %163 = bitcast float %98 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %163, ptr addrspace(1) %162, i1 %160) #5, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs2ro7l6di2n3vnemz4kvhmj7asboj4tyilka2vuqwnkx7bxnpbc.py", directory: "inductor_cache/s2")
!4 = !{ptr @triton_per_fused_convolution_native_group_norm_48, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_native_group_norm_48, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_native_group_norm_48", linkageName: "triton_per_fused_convolution_native_group_norm_48", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 19, scope: !7)
!13 = !DILocation(line: 33, column: 19, scope: !7)
!14 = !DILocation(line: 34, column: 44, scope: !7)
!15 = !DILocation(line: 34, column: 39, scope: !7)
!16 = !DILocation(line: 34, column: 34, scope: !7)
!17 = !DILocation(line: 34, column: 49, scope: !7)
!18 = !DILocation(line: 35, column: 38, scope: !7)
!19 = !DILocation(line: 35, column: 35, scope: !7)
!20 = !DILocation(line: 35, column: 30, scope: !7)
!21 = !DILocation(line: 35, column: 43, scope: !7)
!22 = !DILocation(line: 36, column: 18, scope: !7)
!23 = !DILocation(line: 43, column: 19, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 39, column: 57, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 73, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 39, column: 44, scope: !7)
!34 = !DILocation(line: 42, column: 19, scope: !7)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !37)
!37 = !DILocation(line: 46, column: 59, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !37)
!39 = !DILocation(line: 73, column: 15, scope: !31, inlinedAt: !40)
!40 = !DILocation(line: 46, column: 45, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 51, column: 28, scope: !7)
!44 = !DILocation(line: 52, column: 49, scope: !7)
!45 = !DILocation(line: 53, column: 4, scope: !7)
!46 = !DILocation(line: 54, column: 28, scope: !7)
!47 = !DILocation(line: 54, column: 40, scope: !7)
!48 = !DILocation(line: 55, column: 25, scope: !7)
!49 = !DILocation(line: 55, column: 37, scope: !7)
!50 = !DILocation(line: 55, column: 4, scope: !7)
