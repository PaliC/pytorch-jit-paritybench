; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_unsqueeze_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %12 = icmp slt i32 %11, 16, !dbg !11
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %14 = shl i32 %13, 8, !dbg !13
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %16 = shl i32 %15, 1, !dbg !14
  %17 = and i32 %16, 254, !dbg !14
  %18 = and i32 %15, 127, !dbg !14
  %19 = or disjoint i32 %18, 128, !dbg !14
  %20 = or disjoint i32 %14, %17, !dbg !15
  %21 = or disjoint i32 %14, %18, !dbg !15
  %22 = or disjoint i32 %14, %19, !dbg !15
  %23 = icmp slt i32 %20, 256, !dbg !16
  %24 = icmp slt i32 %21, 256, !dbg !16
  %25 = icmp slt i32 %22, 256, !dbg !16
  %26 = shl i32 %11, 8, !dbg !17
  %27 = add i32 %20, %26, !dbg !18
  %28 = sext i32 %27 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !19
  %30 = and i1 %12, %23, !dbg !20
  %31 = and i1 %12, %24, !dbg !20
  %32 = and i1 %12, %25, !dbg !20
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %30) #2, !dbg !21
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !21
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !21
  %36 = bitcast i32 %34 to float, !dbg !21
  %37 = bitcast i32 %35 to float, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !22
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %30) #2, !dbg !23
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !23
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !23
  %42 = bitcast i32 %40 to float, !dbg !23
  %43 = bitcast i32 %41 to float, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !24
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %30) #2, !dbg !25
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !25
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !25
  %48 = bitcast i32 %46 to float, !dbg !25
  %49 = bitcast i32 %47 to float, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !26
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %30) #2, !dbg !27
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !27
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !27
  %54 = bitcast i32 %52 to float, !dbg !27
  %55 = bitcast i32 %53 to float, !dbg !27
  %56 = fadd float %36, %42, !dbg !28
  %57 = fadd float %37, %43, !dbg !28
  %58 = fadd float %56, %48, !dbg !29
  %59 = fadd float %57, %49, !dbg !29
  %60 = fadd float %58, %54, !dbg !30
  %61 = fadd float %59, %55, !dbg !30
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !31
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %34, i32 %35, ptr addrspace(1) %62, i1 %30) #2, !dbg !32
  %63 = shl i32 %21, 4, !dbg !33
  %64 = shl i32 %22, 4, !dbg !33
  %65 = add i32 %63, %11, !dbg !34
  %66 = add i32 %64, %11, !dbg !34
  %67 = sext i32 %65 to i64, !dbg !35
  %68 = getelementptr float, ptr addrspace(1) %5, i64 %67, !dbg !35
  %69 = sext i32 %66 to i64, !dbg !35
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %69, !dbg !35
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !36
  %72 = bitcast float %56 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #2, !dbg !36
  %73 = or disjoint i32 %17, 1, !dbg !36
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %73, !dbg !36
  %75 = bitcast float %57 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !36
  %77 = load i32, ptr addrspace(3) %76, align 4, !dbg !36
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !36
  %79 = load i32, ptr addrspace(3) %78, align 4, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %77, ptr addrspace(1) %68, i1 %31) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %79, ptr addrspace(1) %70, i1 %32) #2, !dbg !36
  %80 = getelementptr float, ptr addrspace(1) %6, i64 %67, !dbg !37
  %81 = getelementptr float, ptr addrspace(1) %6, i64 %69, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %82 = bitcast float %58 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %82, i1 true) #2, !dbg !38
  %83 = bitcast float %59 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %83, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %84 = load i32, ptr addrspace(3) %76, align 4, !dbg !38
  %85 = load i32, ptr addrspace(3) %78, align 4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %84, ptr addrspace(1) %80, i1 %31) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %85, ptr addrspace(1) %81, i1 %32) #2, !dbg !38
  %86 = getelementptr float, ptr addrspace(1) %7, i64 %67, !dbg !39
  %87 = getelementptr float, ptr addrspace(1) %7, i64 %69, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %88 = bitcast float %60 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %88, i1 true) #2, !dbg !40
  %89 = bitcast float %61 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %89, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %90 = load i32, ptr addrspace(3) %76, align 4, !dbg !40
  %91 = load i32, ptr addrspace(3) %78, align 4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %90, ptr addrspace(1) %86, i1 %31) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %91, ptr addrspace(1) %87, i1 %32) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c46lohvunymdxqfk57ycmydw243fgfzyorvbxmbieje5o7tmqgdu.py", directory: "inductor_cache/46")
!4 = !{ptr @triton_poi_fused_add_unsqueeze_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_unsqueeze_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_unsqueeze_5", linkageName: "triton_poi_fused_add_unsqueeze_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 39, scope: !7)
!18 = !DILocation(line: 30, column: 35, scope: !7)
!19 = !DILocation(line: 30, column: 30, scope: !7)
!20 = !DILocation(line: 30, column: 52, scope: !7)
!21 = !DILocation(line: 30, column: 44, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 35, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 25, scope: !7)
!32 = !DILocation(line: 37, column: 45, scope: !7)
!33 = !DILocation(line: 38, column: 33, scope: !7)
!34 = !DILocation(line: 38, column: 30, scope: !7)
!35 = !DILocation(line: 38, column: 25, scope: !7)
!36 = !DILocation(line: 38, column: 44, scope: !7)
!37 = !DILocation(line: 39, column: 25, scope: !7)
!38 = !DILocation(line: 39, column: 44, scope: !7)
!39 = !DILocation(line: 40, column: 25, scope: !7)
!40 = !DILocation(line: 40, column: 44, scope: !7)
!41 = !DILocation(line: 40, column: 4, scope: !7)
