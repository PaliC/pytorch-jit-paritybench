; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_11(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %14 = or disjoint i32 %9, 513, !dbg !13
  %15 = or disjoint i32 %9, 514, !dbg !13
  %16 = or disjoint i32 %9, 515, !dbg !13
  %17 = icmp slt i32 %9, 5715456, !dbg !14
  %18 = icmp slt i32 %13, 5715456, !dbg !14
  %19 = sdiv i32 %9, 61, !dbg !15
  %20 = sdiv i32 %10, 61, !dbg !15
  %21 = sdiv i32 %11, 61, !dbg !15
  %22 = sdiv i32 %12, 61, !dbg !15
  %23 = sdiv i32 %13, 61, !dbg !15
  %24 = sdiv i32 %14, 61, !dbg !15
  %25 = sdiv i32 %15, 61, !dbg !15
  %26 = sdiv i32 %16, 61, !dbg !15
  %27 = add i32 %9, -62, !dbg !16
  %28 = add i32 %9, -61, !dbg !16
  %29 = add i32 %9, -60, !dbg !16
  %30 = add i32 %9, -59, !dbg !16
  %31 = sext i32 %27 to i64, !dbg !17
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !17
  %33 = sext i32 %28 to i64, !dbg !17
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !17
  %35 = sext i32 %29 to i64, !dbg !17
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !17
  %37 = sext i32 %30 to i64, !dbg !17
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !17
  %39 = sext i32 %13 to i64, !dbg !17
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !17
  %41 = getelementptr i8, ptr addrspace(1) %40, i64 -248, !dbg !17
  %42 = sext i32 %14 to i64, !dbg !17
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !17
  %44 = getelementptr i8, ptr addrspace(1) %43, i64 -248, !dbg !17
  %45 = sext i32 %15 to i64, !dbg !17
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !17
  %47 = getelementptr i8, ptr addrspace(1) %46, i64 -248, !dbg !17
  %48 = sext i32 %16 to i64, !dbg !17
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !17
  %50 = getelementptr i8, ptr addrspace(1) %49, i64 -248, !dbg !17
  %51 = add i32 %9, -58, !dbg !18
  %52 = sext i32 %51 to i64, !dbg !19
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !19
  %54 = getelementptr i8, ptr addrspace(1) %40, i64 -244, !dbg !19
  %55 = getelementptr i8, ptr addrspace(1) %43, i64 -244, !dbg !19
  %56 = getelementptr i8, ptr addrspace(1) %46, i64 -244, !dbg !19
  %57 = getelementptr i8, ptr addrspace(1) %49, i64 -244, !dbg !19
  %58 = add i32 %9, -57, !dbg !20
  %59 = sext i32 %58 to i64, !dbg !21
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !21
  %61 = getelementptr i8, ptr addrspace(1) %40, i64 -240, !dbg !21
  %62 = getelementptr i8, ptr addrspace(1) %43, i64 -240, !dbg !21
  %63 = getelementptr i8, ptr addrspace(1) %46, i64 -240, !dbg !21
  %64 = getelementptr i8, ptr addrspace(1) %49, i64 -240, !dbg !21
  %65 = add i32 %9, -1, !dbg !22
  %66 = sext i32 %65 to i64, !dbg !23
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !23
  %68 = sext i32 %10 to i64, !dbg !23
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !23
  %70 = getelementptr i8, ptr addrspace(1) %69, i64 -4, !dbg !23
  %71 = sext i32 %11 to i64, !dbg !23
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !23
  %73 = getelementptr i8, ptr addrspace(1) %72, i64 -4, !dbg !23
  %74 = sext i32 %12 to i64, !dbg !23
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !23
  %76 = getelementptr i8, ptr addrspace(1) %75, i64 -4, !dbg !23
  %77 = getelementptr i8, ptr addrspace(1) %40, i64 -4, !dbg !23
  %78 = getelementptr i8, ptr addrspace(1) %43, i64 -4, !dbg !23
  %79 = getelementptr i8, ptr addrspace(1) %46, i64 -4, !dbg !23
  %80 = getelementptr i8, ptr addrspace(1) %49, i64 -4, !dbg !23
  %81 = sext i32 %9 to i64, !dbg !24
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !24
  %83 = add i32 %9, 516, !dbg !25
  %84 = getelementptr i8, ptr addrspace(1) %69, i64 4, !dbg !26
  %85 = getelementptr i8, ptr addrspace(1) %75, i64 4, !dbg !26
  %86 = getelementptr i8, ptr addrspace(1) %43, i64 4, !dbg !26
  %87 = sext i32 %83 to i64, !dbg !26
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !26
  %89 = add i32 %9, 572, !dbg !27
  %90 = add i32 %9, 573, !dbg !27
  %91 = add i32 %9, 574, !dbg !27
  %92 = add i32 %9, 575, !dbg !27
  %93 = getelementptr i8, ptr addrspace(1) %82, i64 240, !dbg !28
  %94 = getelementptr i8, ptr addrspace(1) %69, i64 240, !dbg !28
  %95 = getelementptr i8, ptr addrspace(1) %72, i64 240, !dbg !28
  %96 = getelementptr i8, ptr addrspace(1) %75, i64 240, !dbg !28
  %97 = sext i32 %89 to i64, !dbg !28
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !28
  %99 = sext i32 %90 to i64, !dbg !28
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !28
  %101 = sext i32 %91 to i64, !dbg !28
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !28
  %103 = sext i32 %92 to i64, !dbg !28
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !28
  %105 = add i32 %9, 576, !dbg !29
  %106 = getelementptr i8, ptr addrspace(1) %82, i64 244, !dbg !30
  %107 = getelementptr i8, ptr addrspace(1) %69, i64 244, !dbg !30
  %108 = getelementptr i8, ptr addrspace(1) %72, i64 244, !dbg !30
  %109 = getelementptr i8, ptr addrspace(1) %75, i64 244, !dbg !30
  %110 = sext i32 %105 to i64, !dbg !30
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !30
  %112 = add i32 %9, 577, !dbg !31
  %113 = getelementptr i8, ptr addrspace(1) %82, i64 248, !dbg !32
  %114 = getelementptr i8, ptr addrspace(1) %69, i64 248, !dbg !32
  %115 = getelementptr i8, ptr addrspace(1) %72, i64 248, !dbg !32
  %116 = getelementptr i8, ptr addrspace(1) %75, i64 248, !dbg !32
  %117 = sext i32 %112 to i64, !dbg !32
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !32
  %119 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !33
  %120 = insertelement <2 x i32> %119, i32 %19, i64 1, !dbg !33
  %121 = srem <2 x i32> %120, splat (i32 61), !dbg !33
  %122 = shufflevector <2 x i32> %121, <2 x i32> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %123 = shufflevector <2 x i32> %121, <2 x i32> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %124 = extractelement <2 x i32> %121, i64 1, !dbg !34
  %125 = add nsw i32 %124, -1, !dbg !35
  %126 = icmp sgt i32 %124, 0, !dbg !36
  %127 = extractelement <2 x i32> %121, i64 0, !dbg !37
  %128 = add nsw i32 %127, -1, !dbg !38
  %129 = icmp sgt i32 %127, 0, !dbg !39
  %130 = and i1 %129, %126, !dbg !40
  %131 = and i1 %17, %130, !dbg !41
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %131, i32 0, i1 %131) #1, !dbg !42
  %133 = bitcast i32 %132 to float, !dbg !42
  %134 = icmp sgt i32 %127, -1, !dbg !43
  %135 = and i1 %134, %126, !dbg !44
  %136 = and i1 %17, %135, !dbg !45
  %137 = icmp sgt i32 %124, -1, !dbg !46
  %138 = and i1 %129, %137, !dbg !47
  %139 = and i1 %17, %138, !dbg !48
  %140 = or i32 %124, %127, !dbg !49
  %141 = icmp sgt i32 %140, -1, !dbg !49
  %142 = and i1 %17, %141, !dbg !50
  %143 = icmp sgt i32 %124, 1, !dbg !51
  %144 = select i1 %143, i32 %125, i32 0, !dbg !52
  %145 = add nsw i32 %127, 2, !dbg !53
  %146 = icmp sgt i32 %127, 58, !dbg !54
  %147 = select i1 %146, i32 61, i32 0, !dbg !55
  %148 = icmp slt i32 %127, 59, !dbg !37
  %149 = select i1 %148, i32 %145, i32 0, !dbg !56
  %150 = add nsw i32 %147, %149, !dbg !57
  %151 = add nsw i32 %124, 2, !dbg !58
  %152 = icmp sgt <2 x i32> %121, <i32 1, i32 58>, !dbg !59
  %153 = insertelement <2 x i32> <i32 poison, i32 61>, i32 %128, i64 0, !dbg !60
  %154 = select <2 x i1> %152, <2 x i32> %153, <2 x i32> zeroinitializer, !dbg !60
  %155 = icmp slt i32 %124, 59, !dbg !34
  %156 = select i1 %155, i32 %151, i32 0, !dbg !61
  %157 = extractelement <2 x i32> %154, i64 0
  %reass.add = sub nsw i32 %150, %157
  %158 = insertelement <2 x i32> poison, i32 %150, i64 0
  %159 = insertelement <2 x i32> %158, i32 %156, i64 1
  %160 = sub nsw <2 x i32> %154, %159
  %161 = add nsw <2 x i32> %154, %159
  %162 = shufflevector <2 x i32> %160, <2 x i32> %161, <2 x i32> <i32 0, i32 3>
  %163 = insertelement <2 x i32> poison, i32 %144, i64 0
  %164 = insertelement <2 x i32> %163, i32 %reass.add, i64 1
  %165 = mul nsw <2 x i32> %162, %164
  %shift = shufflevector <2 x i32> %165, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !62
  %166 = add nsw <2 x i32> %165, %shift, !dbg !62
  %167 = extractelement <2 x i32> %166, i64 0, !dbg !62
  %168 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !33
  %169 = insertelement <2 x i32> %168, i32 %20, i64 1, !dbg !33
  %170 = srem <2 x i32> %169, splat (i32 61), !dbg !33
  %171 = shufflevector <2 x i32> %170, <2 x i32> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %172 = shufflevector <2 x i32> %170, <2 x i32> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %173 = extractelement <2 x i32> %170, i64 1, !dbg !34
  %174 = add nsw i32 %173, -1, !dbg !35
  %175 = icmp sgt i32 %173, 0, !dbg !36
  %176 = extractelement <2 x i32> %170, i64 0, !dbg !37
  %177 = add nsw i32 %176, -1, !dbg !38
  %178 = icmp sgt i32 %176, 0, !dbg !39
  %179 = and i1 %178, %175, !dbg !40
  %180 = and i1 %179, %17, !dbg !41
  %181 = icmp sgt i32 %176, -1, !dbg !43
  %182 = and i1 %181, %175, !dbg !44
  %183 = and i1 %182, %17, !dbg !45
  %184 = icmp sgt i32 %173, -1, !dbg !46
  %185 = and i1 %178, %184, !dbg !47
  %186 = and i1 %185, %17, !dbg !48
  %187 = or i32 %173, %176, !dbg !49
  %188 = icmp sgt i32 %187, -1, !dbg !49
  %189 = and i1 %188, %17, !dbg !50
  %190 = icmp sgt i32 %173, 1, !dbg !51
  %191 = select i1 %190, i32 %174, i32 0, !dbg !52
  %192 = add nsw i32 %176, 2, !dbg !53
  %193 = icmp sgt i32 %176, 58, !dbg !54
  %194 = select i1 %193, i32 61, i32 0, !dbg !55
  %195 = icmp slt i32 %176, 59, !dbg !37
  %196 = select i1 %195, i32 %192, i32 0, !dbg !56
  %197 = add nsw i32 %194, %196, !dbg !57
  %198 = add nsw i32 %173, 2, !dbg !58
  %199 = icmp sgt <2 x i32> %170, <i32 1, i32 58>, !dbg !59
  %200 = insertelement <2 x i32> <i32 poison, i32 61>, i32 %177, i64 0, !dbg !60
  %201 = select <2 x i1> %199, <2 x i32> %200, <2 x i32> zeroinitializer, !dbg !60
  %202 = icmp slt i32 %173, 59, !dbg !34
  %203 = select i1 %202, i32 %198, i32 0, !dbg !61
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %180, i32 0, i1 %180) #1, !dbg !42
  %205 = bitcast i32 %204 to float, !dbg !42
  %206 = extractelement <2 x i32> %201, i64 0
  %reass.add26 = sub nsw i32 %197, %206
  %207 = insertelement <2 x i32> poison, i32 %197, i64 0
  %208 = insertelement <2 x i32> %207, i32 %203, i64 1
  %209 = sub nsw <2 x i32> %201, %208
  %210 = add nsw <2 x i32> %201, %208
  %211 = shufflevector <2 x i32> %209, <2 x i32> %210, <2 x i32> <i32 0, i32 3>
  %212 = insertelement <2 x i32> poison, i32 %191, i64 0
  %213 = insertelement <2 x i32> %212, i32 %reass.add26, i64 1
  %214 = mul nsw <2 x i32> %211, %213
  %shift54 = shufflevector <2 x i32> %214, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !62
  %215 = add nsw <2 x i32> %214, %shift54, !dbg !62
  %216 = extractelement <2 x i32> %215, i64 0, !dbg !62
  %217 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !33
  %218 = insertelement <2 x i32> %217, i32 %21, i64 1, !dbg !33
  %219 = srem <2 x i32> %218, splat (i32 61), !dbg !33
  %220 = shufflevector <2 x i32> %219, <2 x i32> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %221 = shufflevector <2 x i32> %219, <2 x i32> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %222 = extractelement <2 x i32> %219, i64 1, !dbg !34
  %223 = add nsw i32 %222, -1, !dbg !35
  %224 = icmp sgt i32 %222, 0, !dbg !36
  %225 = extractelement <2 x i32> %219, i64 0, !dbg !37
  %226 = add nsw i32 %225, -1, !dbg !38
  %227 = icmp sgt i32 %225, 0, !dbg !39
  %228 = and i1 %227, %224, !dbg !40
  %229 = and i1 %228, %17, !dbg !41
  %230 = icmp sgt i32 %225, -1, !dbg !43
  %231 = and i1 %230, %224, !dbg !44
  %232 = and i1 %231, %17, !dbg !45
  %233 = icmp sgt i32 %222, -1, !dbg !46
  %234 = and i1 %227, %233, !dbg !47
  %235 = and i1 %234, %17, !dbg !48
  %236 = or i32 %222, %225, !dbg !49
  %237 = icmp sgt i32 %236, -1, !dbg !49
  %238 = and i1 %237, %17, !dbg !50
  %239 = icmp sgt i32 %222, 1, !dbg !51
  %240 = select i1 %239, i32 %223, i32 0, !dbg !52
  %241 = add nsw i32 %225, 2, !dbg !53
  %242 = icmp sgt i32 %225, 58, !dbg !54
  %243 = select i1 %242, i32 61, i32 0, !dbg !55
  %244 = icmp slt i32 %225, 59, !dbg !37
  %245 = select i1 %244, i32 %241, i32 0, !dbg !56
  %246 = add nsw i32 %243, %245, !dbg !57
  %247 = add nsw i32 %222, 2, !dbg !58
  %248 = icmp sgt <2 x i32> %219, <i32 1, i32 58>, !dbg !59
  %249 = insertelement <2 x i32> <i32 poison, i32 61>, i32 %226, i64 0, !dbg !60
  %250 = select <2 x i1> %248, <2 x i32> %249, <2 x i32> zeroinitializer, !dbg !60
  %251 = icmp slt i32 %222, 59, !dbg !34
  %252 = select i1 %251, i32 %247, i32 0, !dbg !61
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %229, i32 0, i1 %229) #1, !dbg !42
  %254 = bitcast i32 %253 to float, !dbg !42
  %255 = extractelement <2 x i32> %250, i64 0
  %reass.add30 = sub nsw i32 %246, %255
  %256 = insertelement <2 x i32> poison, i32 %246, i64 0
  %257 = insertelement <2 x i32> %256, i32 %252, i64 1
  %258 = sub nsw <2 x i32> %250, %257
  %259 = add nsw <2 x i32> %250, %257
  %260 = shufflevector <2 x i32> %258, <2 x i32> %259, <2 x i32> <i32 0, i32 3>
  %261 = insertelement <2 x i32> poison, i32 %240, i64 0
  %262 = insertelement <2 x i32> %261, i32 %reass.add30, i64 1
  %263 = mul nsw <2 x i32> %260, %262
  %shift55 = shufflevector <2 x i32> %263, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !62
  %264 = add nsw <2 x i32> %263, %shift55, !dbg !62
  %265 = extractelement <2 x i32> %264, i64 0, !dbg !62
  %266 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !33
  %267 = insertelement <2 x i32> %266, i32 %22, i64 1, !dbg !33
  %268 = srem <2 x i32> %267, splat (i32 61), !dbg !33
  %269 = shufflevector <2 x i32> %268, <2 x i32> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %270 = shufflevector <2 x i32> %268, <2 x i32> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %271 = extractelement <2 x i32> %268, i64 1, !dbg !34
  %272 = add nsw i32 %271, -1, !dbg !35
  %273 = icmp sgt i32 %271, 0, !dbg !36
  %274 = extractelement <2 x i32> %268, i64 0, !dbg !37
  %275 = add nsw i32 %274, -1, !dbg !38
  %276 = icmp sgt i32 %274, 0, !dbg !39
  %277 = and i1 %276, %273, !dbg !40
  %278 = and i1 %277, %17, !dbg !41
  %279 = icmp sgt i32 %274, -1, !dbg !43
  %280 = and i1 %279, %273, !dbg !44
  %281 = and i1 %280, %17, !dbg !45
  %282 = icmp sgt i32 %271, -1, !dbg !46
  %283 = and i1 %276, %282, !dbg !47
  %284 = and i1 %283, %17, !dbg !48
  %285 = or i32 %271, %274, !dbg !49
  %286 = icmp sgt i32 %285, -1, !dbg !49
  %287 = and i1 %286, %17, !dbg !50
  %288 = icmp sgt i32 %271, 1, !dbg !51
  %289 = select i1 %288, i32 %272, i32 0, !dbg !52
  %290 = add nsw i32 %274, 2, !dbg !53
  %291 = icmp sgt i32 %274, 58, !dbg !54
  %292 = select i1 %291, i32 61, i32 0, !dbg !55
  %293 = icmp slt i32 %274, 59, !dbg !37
  %294 = select i1 %293, i32 %290, i32 0, !dbg !56
  %295 = add nsw i32 %292, %294, !dbg !57
  %296 = add nsw i32 %271, 2, !dbg !58
  %297 = icmp sgt <2 x i32> %268, <i32 1, i32 58>, !dbg !59
  %298 = insertelement <2 x i32> <i32 poison, i32 61>, i32 %275, i64 0, !dbg !60
  %299 = select <2 x i1> %297, <2 x i32> %298, <2 x i32> zeroinitializer, !dbg !60
  %300 = icmp slt i32 %271, 59, !dbg !34
  %301 = select i1 %300, i32 %296, i32 0, !dbg !61
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %278, i32 0, i1 %278) #1, !dbg !42
  %303 = bitcast i32 %302 to float, !dbg !42
  %304 = extractelement <2 x i32> %299, i64 0
  %reass.add34 = sub nsw i32 %295, %304
  %305 = insertelement <2 x i32> poison, i32 %295, i64 0
  %306 = insertelement <2 x i32> %305, i32 %301, i64 1
  %307 = sub nsw <2 x i32> %299, %306
  %308 = add nsw <2 x i32> %299, %306
  %309 = shufflevector <2 x i32> %307, <2 x i32> %308, <2 x i32> <i32 0, i32 3>
  %310 = insertelement <2 x i32> poison, i32 %289, i64 0
  %311 = insertelement <2 x i32> %310, i32 %reass.add34, i64 1
  %312 = mul nsw <2 x i32> %309, %311
  %shift56 = shufflevector <2 x i32> %312, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !62
  %313 = add nsw <2 x i32> %312, %shift56, !dbg !62
  %314 = extractelement <2 x i32> %313, i64 0, !dbg !62
  %315 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !33
  %316 = insertelement <2 x i32> %315, i32 %23, i64 1, !dbg !33
  %317 = srem <2 x i32> %316, splat (i32 61), !dbg !33
  %318 = shufflevector <2 x i32> %317, <2 x i32> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %319 = shufflevector <2 x i32> %317, <2 x i32> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %320 = extractelement <2 x i32> %317, i64 1, !dbg !34
  %321 = add nsw i32 %320, -1, !dbg !35
  %322 = icmp sgt i32 %320, 0, !dbg !36
  %323 = extractelement <2 x i32> %317, i64 0, !dbg !37
  %324 = add nsw i32 %323, -1, !dbg !38
  %325 = icmp sgt i32 %323, 0, !dbg !39
  %326 = and i1 %325, %322, !dbg !40
  %327 = and i1 %18, %326, !dbg !41
  %328 = icmp sgt i32 %323, -1, !dbg !43
  %329 = and i1 %328, %322, !dbg !44
  %330 = and i1 %18, %329, !dbg !45
  %331 = icmp sgt i32 %320, -1, !dbg !46
  %332 = and i1 %325, %331, !dbg !47
  %333 = and i1 %18, %332, !dbg !48
  %334 = or i32 %320, %323, !dbg !49
  %335 = icmp sgt i32 %334, -1, !dbg !49
  %336 = and i1 %18, %335, !dbg !50
  %337 = icmp sgt i32 %320, 1, !dbg !51
  %338 = select i1 %337, i32 %321, i32 0, !dbg !52
  %339 = add nsw i32 %323, 2, !dbg !53
  %340 = icmp sgt i32 %323, 58, !dbg !54
  %341 = select i1 %340, i32 61, i32 0, !dbg !55
  %342 = icmp slt i32 %323, 59, !dbg !37
  %343 = select i1 %342, i32 %339, i32 0, !dbg !56
  %344 = add nsw i32 %341, %343, !dbg !57
  %345 = add nsw i32 %320, 2, !dbg !58
  %346 = icmp sgt <2 x i32> %317, <i32 1, i32 58>, !dbg !59
  %347 = insertelement <2 x i32> <i32 poison, i32 61>, i32 %324, i64 0, !dbg !60
  %348 = select <2 x i1> %346, <2 x i32> %347, <2 x i32> zeroinitializer, !dbg !60
  %349 = icmp slt i32 %320, 59, !dbg !34
  %350 = select i1 %349, i32 %345, i32 0, !dbg !61
  %351 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %327, i32 0, i1 %327) #1, !dbg !42
  %352 = bitcast i32 %351 to float, !dbg !42
  %353 = extractelement <2 x i32> %348, i64 0
  %reass.add38 = sub nsw i32 %344, %353
  %354 = insertelement <2 x i32> poison, i32 %344, i64 0
  %355 = insertelement <2 x i32> %354, i32 %350, i64 1
  %356 = sub nsw <2 x i32> %348, %355
  %357 = add nsw <2 x i32> %348, %355
  %358 = shufflevector <2 x i32> %356, <2 x i32> %357, <2 x i32> <i32 0, i32 3>
  %359 = insertelement <2 x i32> poison, i32 %338, i64 0
  %360 = insertelement <2 x i32> %359, i32 %reass.add38, i64 1
  %361 = mul nsw <2 x i32> %358, %360
  %shift57 = shufflevector <2 x i32> %361, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !62
  %362 = add nsw <2 x i32> %361, %shift57, !dbg !62
  %363 = extractelement <2 x i32> %362, i64 0, !dbg !62
  %364 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !33
  %365 = insertelement <2 x i32> %364, i32 %24, i64 1, !dbg !33
  %366 = srem <2 x i32> %365, splat (i32 61), !dbg !33
  %367 = shufflevector <2 x i32> %366, <2 x i32> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %368 = shufflevector <2 x i32> %366, <2 x i32> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %369 = extractelement <2 x i32> %366, i64 1, !dbg !34
  %370 = add nsw i32 %369, -1, !dbg !35
  %371 = icmp sgt i32 %369, 0, !dbg !36
  %372 = extractelement <2 x i32> %366, i64 0, !dbg !37
  %373 = add nsw i32 %372, -1, !dbg !38
  %374 = icmp sgt i32 %372, 0, !dbg !39
  %375 = and i1 %374, %371, !dbg !40
  %376 = and i1 %18, %375, !dbg !41
  %377 = icmp sgt i32 %372, -1, !dbg !43
  %378 = and i1 %377, %371, !dbg !44
  %379 = and i1 %18, %378, !dbg !45
  %380 = icmp sgt i32 %369, -1, !dbg !46
  %381 = and i1 %374, %380, !dbg !47
  %382 = and i1 %18, %381, !dbg !48
  %383 = or i32 %369, %372, !dbg !49
  %384 = icmp sgt i32 %383, -1, !dbg !49
  %385 = and i1 %18, %384, !dbg !50
  %386 = icmp sgt i32 %369, 1, !dbg !51
  %387 = select i1 %386, i32 %370, i32 0, !dbg !52
  %388 = add nsw i32 %372, 2, !dbg !53
  %389 = icmp sgt i32 %372, 58, !dbg !54
  %390 = select i1 %389, i32 61, i32 0, !dbg !55
  %391 = icmp slt i32 %372, 59, !dbg !37
  %392 = select i1 %391, i32 %388, i32 0, !dbg !56
  %393 = add nsw i32 %390, %392, !dbg !57
  %394 = add nsw i32 %369, 2, !dbg !58
  %395 = icmp sgt <2 x i32> %366, <i32 1, i32 58>, !dbg !59
  %396 = insertelement <2 x i32> <i32 poison, i32 61>, i32 %373, i64 0, !dbg !60
  %397 = select <2 x i1> %395, <2 x i32> %396, <2 x i32> zeroinitializer, !dbg !60
  %398 = icmp slt i32 %369, 59, !dbg !34
  %399 = select i1 %398, i32 %394, i32 0, !dbg !61
  %400 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %376, i32 0, i1 %376) #1, !dbg !42
  %401 = bitcast i32 %400 to float, !dbg !42
  %402 = extractelement <2 x i32> %397, i64 0
  %reass.add42 = sub nsw i32 %393, %402
  %403 = insertelement <2 x i32> poison, i32 %393, i64 0
  %404 = insertelement <2 x i32> %403, i32 %399, i64 1
  %405 = sub nsw <2 x i32> %397, %404
  %406 = add nsw <2 x i32> %397, %404
  %407 = shufflevector <2 x i32> %405, <2 x i32> %406, <2 x i32> <i32 0, i32 3>
  %408 = insertelement <2 x i32> poison, i32 %387, i64 0
  %409 = insertelement <2 x i32> %408, i32 %reass.add42, i64 1
  %410 = mul nsw <2 x i32> %407, %409
  %shift58 = shufflevector <2 x i32> %410, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !62
  %411 = add nsw <2 x i32> %410, %shift58, !dbg !62
  %412 = extractelement <2 x i32> %411, i64 0, !dbg !62
  %413 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !33
  %414 = insertelement <2 x i32> %413, i32 %25, i64 1, !dbg !33
  %415 = srem <2 x i32> %414, splat (i32 61), !dbg !33
  %416 = extractelement <2 x i32> %415, i64 1, !dbg !34
  %417 = add nsw i32 %416, -1, !dbg !35
  %418 = icmp sgt i32 %416, 0, !dbg !36
  %419 = extractelement <2 x i32> %415, i64 0, !dbg !37
  %420 = add nsw i32 %419, -1, !dbg !38
  %421 = icmp sgt i32 %419, 0, !dbg !39
  %422 = and i1 %421, %418, !dbg !40
  %423 = and i1 %18, %422, !dbg !41
  %424 = icmp sgt i32 %419, -1, !dbg !43
  %425 = and i1 %424, %418, !dbg !44
  %426 = and i1 %18, %425, !dbg !45
  %427 = icmp sgt i32 %416, -1, !dbg !46
  %428 = and i1 %421, %427, !dbg !47
  %429 = and i1 %18, %428, !dbg !48
  %430 = or i32 %416, %419, !dbg !49
  %431 = icmp sgt i32 %430, -1, !dbg !49
  %432 = and i1 %18, %431, !dbg !50
  %433 = icmp sgt i32 %416, 1, !dbg !51
  %434 = select i1 %433, i32 %417, i32 0, !dbg !52
  %435 = add nsw i32 %419, 2, !dbg !53
  %436 = icmp sgt i32 %419, 58, !dbg !54
  %437 = select i1 %436, i32 61, i32 0, !dbg !55
  %438 = icmp slt i32 %419, 59, !dbg !37
  %439 = select i1 %438, i32 %435, i32 0, !dbg !56
  %440 = add nsw i32 %437, %439, !dbg !57
  %441 = add nsw i32 %416, 2, !dbg !58
  %442 = icmp sgt <2 x i32> %415, <i32 1, i32 58>, !dbg !59
  %443 = insertelement <2 x i32> <i32 poison, i32 61>, i32 %420, i64 0, !dbg !60
  %444 = select <2 x i1> %442, <2 x i32> %443, <2 x i32> zeroinitializer, !dbg !60
  %445 = icmp slt i32 %416, 59, !dbg !34
  %446 = select i1 %445, i32 %441, i32 0, !dbg !61
  %447 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %423, i32 0, i1 %423) #1, !dbg !42
  %448 = bitcast i32 %447 to float, !dbg !42
  %449 = extractelement <2 x i32> %444, i64 0
  %reass.add46 = sub nsw i32 %440, %449
  %450 = insertelement <2 x i32> poison, i32 %440, i64 0
  %451 = insertelement <2 x i32> %450, i32 %446, i64 1
  %452 = sub nsw <2 x i32> %444, %451
  %453 = add nsw <2 x i32> %444, %451
  %454 = shufflevector <2 x i32> %452, <2 x i32> %453, <2 x i32> <i32 0, i32 3>
  %455 = insertelement <2 x i32> poison, i32 %434, i64 0
  %456 = insertelement <2 x i32> %455, i32 %reass.add46, i64 1
  %457 = mul nsw <2 x i32> %454, %456
  %shift59 = shufflevector <2 x i32> %457, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !62
  %458 = add nsw <2 x i32> %457, %shift59, !dbg !62
  %459 = extractelement <2 x i32> %458, i64 0, !dbg !62
  %460 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !33
  %461 = insertelement <2 x i32> %460, i32 %26, i64 1, !dbg !33
  %462 = srem <2 x i32> %461, splat (i32 61), !dbg !33
  %463 = extractelement <2 x i32> %462, i64 1, !dbg !34
  %464 = add nsw i32 %463, -1, !dbg !35
  %465 = icmp sgt i32 %463, 0, !dbg !36
  %466 = extractelement <2 x i32> %462, i64 0, !dbg !37
  %467 = add nsw i32 %466, -1, !dbg !38
  %468 = icmp sgt i32 %466, 0, !dbg !39
  %469 = and i1 %468, %465, !dbg !40
  %470 = and i1 %18, %469, !dbg !41
  %471 = icmp sgt i32 %466, -1, !dbg !43
  %472 = and i1 %471, %465, !dbg !44
  %473 = and i1 %18, %472, !dbg !45
  %474 = icmp sgt i32 %463, -1, !dbg !46
  %475 = and i1 %468, %474, !dbg !47
  %476 = and i1 %18, %475, !dbg !48
  %477 = or i32 %463, %466, !dbg !49
  %478 = icmp sgt i32 %477, -1, !dbg !49
  %479 = and i1 %18, %478, !dbg !50
  %480 = shufflevector <2 x i32> %462, <2 x i32> %415, <16 x i32> <i32 1, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !63
  %481 = shufflevector <16 x i32> %480, <16 x i32> %367, <16 x i32> <i32 0, i32 1, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 8, i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !63
  %482 = shufflevector <16 x i32> %481, <16 x i32> %318, <16 x i32> <i32 0, i32 1, i32 2, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 8, i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !63
  %483 = shufflevector <16 x i32> %482, <16 x i32> %269, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 17, i32 poison, i32 poison, i32 poison, i32 8, i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !63
  %484 = shufflevector <16 x i32> %483, <16 x i32> %220, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 8, i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !63
  %485 = shufflevector <16 x i32> %484, <16 x i32> %171, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 17, i32 poison, i32 8, i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !63
  %486 = shufflevector <16 x i32> %485, <16 x i32> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 8, i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !63
  %487 = shufflevector <16 x i32> %486, <16 x i32> %368, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !63
  %488 = shufflevector <16 x i32> %487, <16 x i32> %319, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 16, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !63
  %489 = shufflevector <16 x i32> %488, <16 x i32> %270, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !63
  %490 = shufflevector <16 x i32> %489, <16 x i32> %221, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 16, i32 poison, i32 poison>, !dbg !63
  %491 = shufflevector <16 x i32> %490, <16 x i32> %172, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !63
  %492 = shufflevector <16 x i32> %491, <16 x i32> %123, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 16>, !dbg !63
  %493 = add nsw <16 x i32> %492, splat (i32 1), !dbg !63
  %494 = icmp ult <16 x i32> %493, splat (i32 61), !dbg !63
  %495 = extractelement <16 x i1> %494, i64 15, !dbg !64
  %496 = and i1 %126, %495, !dbg !64
  %497 = and i1 %17, %496, !dbg !65
  %498 = and i1 %137, %495, !dbg !66
  %499 = and i1 %17, %498, !dbg !67
  %500 = extractelement <16 x i1> %494, i64 7, !dbg !68
  %501 = and i1 %129, %500, !dbg !68
  %502 = and i1 %17, %501, !dbg !69
  %503 = and i1 %134, %500, !dbg !70
  %504 = and i1 %17, %503, !dbg !71
  %505 = and i1 %495, %500, !dbg !72
  %506 = and i1 %17, %505, !dbg !73
  %507 = extractelement <16 x i1> %494, i64 14, !dbg !64
  %508 = and i1 %175, %507, !dbg !64
  %509 = and i1 %508, %17, !dbg !65
  %510 = and i1 %184, %507, !dbg !66
  %511 = and i1 %510, %17, !dbg !67
  %512 = extractelement <16 x i1> %494, i64 6, !dbg !68
  %513 = and i1 %178, %512, !dbg !68
  %514 = and i1 %513, %17, !dbg !69
  %515 = and i1 %181, %512, !dbg !70
  %516 = and i1 %515, %17, !dbg !71
  %517 = and i1 %507, %512, !dbg !72
  %518 = and i1 %517, %17, !dbg !73
  %519 = extractelement <16 x i1> %494, i64 13, !dbg !64
  %520 = and i1 %224, %519, !dbg !64
  %521 = and i1 %520, %17, !dbg !65
  %522 = and i1 %233, %519, !dbg !66
  %523 = and i1 %522, %17, !dbg !67
  %524 = extractelement <16 x i1> %494, i64 5, !dbg !68
  %525 = and i1 %227, %524, !dbg !68
  %526 = and i1 %525, %17, !dbg !69
  %527 = and i1 %230, %524, !dbg !70
  %528 = and i1 %527, %17, !dbg !71
  %529 = and i1 %519, %524, !dbg !72
  %530 = and i1 %529, %17, !dbg !73
  %531 = extractelement <16 x i1> %494, i64 12, !dbg !64
  %532 = and i1 %273, %531, !dbg !64
  %533 = and i1 %532, %17, !dbg !65
  %534 = and i1 %282, %531, !dbg !66
  %535 = and i1 %534, %17, !dbg !67
  %536 = extractelement <16 x i1> %494, i64 4, !dbg !68
  %537 = and i1 %276, %536, !dbg !68
  %538 = and i1 %537, %17, !dbg !69
  %539 = and i1 %279, %536, !dbg !70
  %540 = and i1 %539, %17, !dbg !71
  %541 = and i1 %531, %536, !dbg !72
  %542 = and i1 %541, %17, !dbg !73
  %543 = extractelement <16 x i1> %494, i64 11, !dbg !64
  %544 = and i1 %322, %543, !dbg !64
  %545 = and i1 %18, %544, !dbg !65
  %546 = and i1 %331, %543, !dbg !66
  %547 = and i1 %18, %546, !dbg !67
  %548 = extractelement <16 x i1> %494, i64 3, !dbg !68
  %549 = and i1 %325, %548, !dbg !68
  %550 = and i1 %18, %549, !dbg !69
  %551 = and i1 %328, %548, !dbg !70
  %552 = and i1 %18, %551, !dbg !71
  %553 = and i1 %543, %548, !dbg !72
  %554 = and i1 %18, %553, !dbg !73
  %555 = extractelement <16 x i1> %494, i64 10, !dbg !64
  %556 = and i1 %371, %555, !dbg !64
  %557 = and i1 %18, %556, !dbg !65
  %558 = and i1 %380, %555, !dbg !66
  %559 = and i1 %18, %558, !dbg !67
  %560 = extractelement <16 x i1> %494, i64 2, !dbg !68
  %561 = and i1 %374, %560, !dbg !68
  %562 = and i1 %18, %561, !dbg !69
  %563 = and i1 %377, %560, !dbg !70
  %564 = and i1 %18, %563, !dbg !71
  %565 = and i1 %555, %560, !dbg !72
  %566 = and i1 %18, %565, !dbg !73
  %567 = extractelement <16 x i1> %494, i64 9, !dbg !64
  %568 = and i1 %418, %567, !dbg !64
  %569 = and i1 %18, %568, !dbg !65
  %570 = and i1 %427, %567, !dbg !66
  %571 = and i1 %18, %570, !dbg !67
  %572 = extractelement <16 x i1> %494, i64 1, !dbg !68
  %573 = and i1 %421, %572, !dbg !68
  %574 = and i1 %18, %573, !dbg !69
  %575 = and i1 %424, %572, !dbg !70
  %576 = and i1 %18, %575, !dbg !71
  %577 = and i1 %567, %572, !dbg !72
  %578 = and i1 %18, %577, !dbg !73
  %579 = extractelement <16 x i1> %494, i64 8, !dbg !64
  %580 = and i1 %465, %579, !dbg !64
  %581 = and i1 %18, %580, !dbg !65
  %582 = and i1 %474, %579, !dbg !66
  %583 = and i1 %18, %582, !dbg !67
  %584 = extractelement <16 x i1> %494, i64 0, !dbg !68
  %585 = and i1 %468, %584, !dbg !68
  %586 = and i1 %18, %585, !dbg !69
  %587 = and i1 %471, %584, !dbg !70
  %588 = and i1 %18, %587, !dbg !71
  %589 = and i1 %579, %584, !dbg !72
  %590 = and i1 %18, %589, !dbg !73
  %591 = icmp sgt i32 %463, 1, !dbg !51
  %592 = select i1 %591, i32 %464, i32 0, !dbg !52
  %593 = add nsw i32 %466, 2, !dbg !53
  %594 = icmp sgt i32 %466, 58, !dbg !54
  %595 = select i1 %594, i32 61, i32 0, !dbg !55
  %596 = icmp slt i32 %466, 59, !dbg !37
  %597 = select i1 %596, i32 %593, i32 0, !dbg !56
  %598 = add nsw i32 %595, %597, !dbg !57
  %599 = add nsw i32 %463, 2, !dbg !58
  %600 = icmp sgt <2 x i32> %462, <i32 1, i32 58>, !dbg !59
  %601 = insertelement <2 x i32> <i32 poison, i32 61>, i32 %467, i64 0, !dbg !60
  %602 = select <2 x i1> %600, <2 x i32> %601, <2 x i32> zeroinitializer, !dbg !60
  %603 = icmp slt i32 %463, 59, !dbg !34
  %604 = select i1 %603, i32 %599, i32 0, !dbg !61
  %605 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %470, i32 0, i1 %470) #1, !dbg !42
  %606 = bitcast i32 %605 to float, !dbg !42
  %607 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %136, i32 0, i1 %136) #1, !dbg !74
  %608 = bitcast i32 %607 to float, !dbg !74
  %609 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %183, i32 0, i1 %183) #1, !dbg !74
  %610 = bitcast i32 %609 to float, !dbg !74
  %611 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %232, i32 0, i1 %232) #1, !dbg !74
  %612 = bitcast i32 %611 to float, !dbg !74
  %613 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %281, i32 0, i1 %281) #1, !dbg !74
  %614 = bitcast i32 %613 to float, !dbg !74
  %615 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %330, i32 0, i1 %330) #1, !dbg !74
  %616 = bitcast i32 %615 to float, !dbg !74
  %617 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %379, i32 0, i1 %379) #1, !dbg !74
  %618 = bitcast i32 %617 to float, !dbg !74
  %619 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %426, i32 0, i1 %426) #1, !dbg !74
  %620 = bitcast i32 %619 to float, !dbg !74
  %621 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %473, i32 0, i1 %473) #1, !dbg !74
  %622 = bitcast i32 %621 to float, !dbg !74
  %623 = fadd float %133, %608, !dbg !75
  %624 = fadd float %205, %610, !dbg !75
  %625 = fadd float %254, %612, !dbg !75
  %626 = fadd float %303, %614, !dbg !75
  %627 = fadd float %352, %616, !dbg !75
  %628 = fadd float %401, %618, !dbg !75
  %629 = fadd float %448, %620, !dbg !75
  %630 = fadd float %606, %622, !dbg !75
  %631 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %497, i32 0, i1 %497) #1, !dbg !76
  %632 = bitcast i32 %631 to float, !dbg !76
  %633 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %509, i32 0, i1 %509) #1, !dbg !76
  %634 = bitcast i32 %633 to float, !dbg !76
  %635 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %521, i32 0, i1 %521) #1, !dbg !76
  %636 = bitcast i32 %635 to float, !dbg !76
  %637 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %533, i32 0, i1 %533) #1, !dbg !76
  %638 = bitcast i32 %637 to float, !dbg !76
  %639 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %545, i32 0, i1 %545) #1, !dbg !76
  %640 = bitcast i32 %639 to float, !dbg !76
  %641 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %557, i32 0, i1 %557) #1, !dbg !76
  %642 = bitcast i32 %641 to float, !dbg !76
  %643 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %569, i32 0, i1 %569) #1, !dbg !76
  %644 = bitcast i32 %643 to float, !dbg !76
  %645 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %581, i32 0, i1 %581) #1, !dbg !76
  %646 = bitcast i32 %645 to float, !dbg !76
  %647 = fadd float %623, %632, !dbg !77
  %648 = fadd float %624, %634, !dbg !77
  %649 = fadd float %625, %636, !dbg !77
  %650 = fadd float %626, %638, !dbg !77
  %651 = fadd float %627, %640, !dbg !77
  %652 = fadd float %628, %642, !dbg !77
  %653 = fadd float %629, %644, !dbg !77
  %654 = fadd float %630, %646, !dbg !77
  %655 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %139, i32 0, i1 %139) #1, !dbg !78
  %656 = bitcast i32 %655 to float, !dbg !78
  %657 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %186, i32 0, i1 %186) #1, !dbg !78
  %658 = bitcast i32 %657 to float, !dbg !78
  %659 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %235, i32 0, i1 %235) #1, !dbg !78
  %660 = bitcast i32 %659 to float, !dbg !78
  %661 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %284, i32 0, i1 %284) #1, !dbg !78
  %662 = bitcast i32 %661 to float, !dbg !78
  %663 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %333, i32 0, i1 %333) #1, !dbg !78
  %664 = bitcast i32 %663 to float, !dbg !78
  %665 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %382, i32 0, i1 %382) #1, !dbg !78
  %666 = bitcast i32 %665 to float, !dbg !78
  %667 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %429, i32 0, i1 %429) #1, !dbg !78
  %668 = bitcast i32 %667 to float, !dbg !78
  %669 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %476, i32 0, i1 %476) #1, !dbg !78
  %670 = bitcast i32 %669 to float, !dbg !78
  %671 = fadd float %647, %656, !dbg !79
  %672 = fadd float %648, %658, !dbg !79
  %673 = fadd float %649, %660, !dbg !79
  %674 = fadd float %650, %662, !dbg !79
  %675 = fadd float %651, %664, !dbg !79
  %676 = fadd float %652, %666, !dbg !79
  %677 = fadd float %653, %668, !dbg !79
  %678 = fadd float %654, %670, !dbg !79
  %679 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %142, i32 0, i1 %142) #1, !dbg !80
  %680 = bitcast i32 %679 to float, !dbg !80
  %681 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %189, i32 0, i1 %189) #1, !dbg !80
  %682 = bitcast i32 %681 to float, !dbg !80
  %683 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %238, i32 0, i1 %238) #1, !dbg !80
  %684 = bitcast i32 %683 to float, !dbg !80
  %685 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %287, i32 0, i1 %287) #1, !dbg !80
  %686 = bitcast i32 %685 to float, !dbg !80
  %687 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %336, i32 0, i1 %336) #1, !dbg !80
  %688 = bitcast i32 %687 to float, !dbg !80
  %689 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %385, i32 0, i1 %385) #1, !dbg !80
  %690 = bitcast i32 %689 to float, !dbg !80
  %691 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %432, i32 0, i1 %432) #1, !dbg !80
  %692 = bitcast i32 %691 to float, !dbg !80
  %693 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %479, i32 0, i1 %479) #1, !dbg !80
  %694 = bitcast i32 %693 to float, !dbg !80
  %695 = fadd float %671, %680, !dbg !81
  %696 = fadd float %672, %682, !dbg !81
  %697 = fadd float %673, %684, !dbg !81
  %698 = fadd float %674, %686, !dbg !81
  %699 = fadd float %675, %688, !dbg !81
  %700 = fadd float %676, %690, !dbg !81
  %701 = fadd float %677, %692, !dbg !81
  %702 = fadd float %678, %694, !dbg !81
  %703 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %499, i32 0, i1 %499) #1, !dbg !82
  %704 = bitcast i32 %703 to float, !dbg !82
  %705 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %511, i32 0, i1 %511) #1, !dbg !82
  %706 = bitcast i32 %705 to float, !dbg !82
  %707 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %523, i32 0, i1 %523) #1, !dbg !82
  %708 = bitcast i32 %707 to float, !dbg !82
  %709 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %535, i32 0, i1 %535) #1, !dbg !82
  %710 = bitcast i32 %709 to float, !dbg !82
  %711 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %547, i32 0, i1 %547) #1, !dbg !82
  %712 = bitcast i32 %711 to float, !dbg !82
  %713 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %559, i32 0, i1 %559) #1, !dbg !82
  %714 = bitcast i32 %713 to float, !dbg !82
  %715 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %571, i32 0, i1 %571) #1, !dbg !82
  %716 = bitcast i32 %715 to float, !dbg !82
  %717 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %583, i32 0, i1 %583) #1, !dbg !82
  %718 = bitcast i32 %717 to float, !dbg !82
  %719 = fadd float %695, %704, !dbg !83
  %720 = fadd float %696, %706, !dbg !83
  %721 = fadd float %697, %708, !dbg !83
  %722 = fadd float %698, %710, !dbg !83
  %723 = fadd float %699, %712, !dbg !83
  %724 = fadd float %700, %714, !dbg !83
  %725 = fadd float %701, %716, !dbg !83
  %726 = fadd float %702, %718, !dbg !83
  %727 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %502, i32 0, i1 %502) #1, !dbg !84
  %728 = bitcast i32 %727 to float, !dbg !84
  %729 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %514, i32 0, i1 %514) #1, !dbg !84
  %730 = bitcast i32 %729 to float, !dbg !84
  %731 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %526, i32 0, i1 %526) #1, !dbg !84
  %732 = bitcast i32 %731 to float, !dbg !84
  %733 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %538, i32 0, i1 %538) #1, !dbg !84
  %734 = bitcast i32 %733 to float, !dbg !84
  %735 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %550, i32 0, i1 %550) #1, !dbg !84
  %736 = bitcast i32 %735 to float, !dbg !84
  %737 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %562, i32 0, i1 %562) #1, !dbg !84
  %738 = bitcast i32 %737 to float, !dbg !84
  %739 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %574, i32 0, i1 %574) #1, !dbg !84
  %740 = bitcast i32 %739 to float, !dbg !84
  %741 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %586, i32 0, i1 %586) #1, !dbg !84
  %742 = bitcast i32 %741 to float, !dbg !84
  %743 = fadd float %719, %728, !dbg !85
  %744 = fadd float %720, %730, !dbg !85
  %745 = fadd float %721, %732, !dbg !85
  %746 = fadd float %722, %734, !dbg !85
  %747 = fadd float %723, %736, !dbg !85
  %748 = fadd float %724, %738, !dbg !85
  %749 = fadd float %725, %740, !dbg !85
  %750 = fadd float %726, %742, !dbg !85
  %751 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %504, i32 0, i1 %504) #1, !dbg !86
  %752 = bitcast i32 %751 to float, !dbg !86
  %753 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %516, i32 0, i1 %516) #1, !dbg !86
  %754 = bitcast i32 %753 to float, !dbg !86
  %755 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %528, i32 0, i1 %528) #1, !dbg !86
  %756 = bitcast i32 %755 to float, !dbg !86
  %757 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %540, i32 0, i1 %540) #1, !dbg !86
  %758 = bitcast i32 %757 to float, !dbg !86
  %759 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %552, i32 0, i1 %552) #1, !dbg !86
  %760 = bitcast i32 %759 to float, !dbg !86
  %761 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %564, i32 0, i1 %564) #1, !dbg !86
  %762 = bitcast i32 %761 to float, !dbg !86
  %763 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %576, i32 0, i1 %576) #1, !dbg !86
  %764 = bitcast i32 %763 to float, !dbg !86
  %765 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %588, i32 0, i1 %588) #1, !dbg !86
  %766 = bitcast i32 %765 to float, !dbg !86
  %767 = fadd float %743, %752, !dbg !87
  %768 = fadd float %744, %754, !dbg !87
  %769 = fadd float %745, %756, !dbg !87
  %770 = fadd float %746, %758, !dbg !87
  %771 = fadd float %747, %760, !dbg !87
  %772 = fadd float %748, %762, !dbg !87
  %773 = fadd float %749, %764, !dbg !87
  %774 = fadd float %750, %766, !dbg !87
  %775 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %506, i32 0, i1 %506) #1, !dbg !88
  %776 = bitcast i32 %775 to float, !dbg !88
  %777 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %518, i32 0, i1 %518) #1, !dbg !88
  %778 = bitcast i32 %777 to float, !dbg !88
  %779 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %530, i32 0, i1 %530) #1, !dbg !88
  %780 = bitcast i32 %779 to float, !dbg !88
  %781 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %542, i32 0, i1 %542) #1, !dbg !88
  %782 = bitcast i32 %781 to float, !dbg !88
  %783 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %554, i32 0, i1 %554) #1, !dbg !88
  %784 = bitcast i32 %783 to float, !dbg !88
  %785 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %566, i32 0, i1 %566) #1, !dbg !88
  %786 = bitcast i32 %785 to float, !dbg !88
  %787 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %578, i32 0, i1 %578) #1, !dbg !88
  %788 = bitcast i32 %787 to float, !dbg !88
  %789 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %590, i32 0, i1 %590) #1, !dbg !88
  %790 = bitcast i32 %789 to float, !dbg !88
  %791 = fadd float %767, %776, !dbg !89
  %792 = fadd float %768, %778, !dbg !89
  %793 = fadd float %769, %780, !dbg !89
  %794 = fadd float %770, %782, !dbg !89
  %795 = fadd float %771, %784, !dbg !89
  %796 = fadd float %772, %786, !dbg !89
  %797 = fadd float %773, %788, !dbg !89
  %798 = fadd float %774, %790, !dbg !89
  %799 = extractelement <2 x i32> %602, i64 0
  %reass.add50 = sub nsw i32 %598, %799
  %800 = insertelement <2 x i32> poison, i32 %598, i64 0
  %801 = insertelement <2 x i32> %800, i32 %604, i64 1
  %802 = sub nsw <2 x i32> %602, %801
  %803 = add nsw <2 x i32> %602, %801
  %804 = shufflevector <2 x i32> %802, <2 x i32> %803, <2 x i32> <i32 0, i32 3>
  %805 = insertelement <2 x i32> poison, i32 %592, i64 0
  %806 = insertelement <2 x i32> %805, i32 %reass.add50, i64 1
  %807 = mul nsw <2 x i32> %804, %806
  %shift60 = shufflevector <2 x i32> %807, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !62
  %808 = add nsw <2 x i32> %807, %shift60, !dbg !62
  %809 = extractelement <2 x i32> %808, i64 0, !dbg !62
  %810 = sitofp i32 %167 to float, !dbg !90
  %811 = sitofp i32 %216 to float, !dbg !90
  %812 = sitofp i32 %265 to float, !dbg !90
  %813 = sitofp i32 %314 to float, !dbg !90
  %814 = sitofp i32 %363 to float, !dbg !90
  %815 = sitofp i32 %412 to float, !dbg !90
  %816 = sitofp i32 %459 to float, !dbg !90
  %817 = sitofp i32 %809 to float, !dbg !90
  %818 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %791, float %810) #1, !dbg !90
  %819 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %792, float %811) #1, !dbg !90
  %820 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %793, float %812) #1, !dbg !90
  %821 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %794, float %813) #1, !dbg !90
  %822 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %795, float %814) #1, !dbg !90
  %823 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %796, float %815) #1, !dbg !90
  %824 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %797, float %816) #1, !dbg !90
  %825 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %798, float %817) #1, !dbg !90
  %826 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !91
  %827 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !91
  %828 = bitcast float %818 to i32, !dbg !92
  %829 = bitcast float %819 to i32, !dbg !92
  %830 = bitcast float %820 to i32, !dbg !92
  %831 = bitcast float %821 to i32, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %828, i32 %829, i32 %830, i32 %831, ptr addrspace(1) %826, i1 %17) #1, !dbg !92
  %832 = bitcast float %822 to i32, !dbg !92
  %833 = bitcast float %823 to i32, !dbg !92
  %834 = bitcast float %824 to i32, !dbg !92
  %835 = bitcast float %825 to i32, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %832, i32 %833, i32 %834, i32 %835, ptr addrspace(1) %827, i1 %18) #1, !dbg !92
  ret void, !dbg !93
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd2oeip3sxeu3fhbnd62qxfr3vvvxwfmdoe7kznlsovbhpxlgumw.py", directory: "inductor_cache/d2")
!4 = !{ptr @triton_poi_fused_avg_pool2d_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_11", linkageName: "triton_poi_fused_avg_pool2d_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 38, column: 39, scope: !7)
!17 = !DILocation(line: 38, column: 31, scope: !7)
!18 = !DILocation(line: 44, column: 39, scope: !7)
!19 = !DILocation(line: 44, column: 31, scope: !7)
!20 = !DILocation(line: 51, column: 39, scope: !7)
!21 = !DILocation(line: 51, column: 31, scope: !7)
!22 = !DILocation(line: 58, column: 38, scope: !7)
!23 = !DILocation(line: 58, column: 31, scope: !7)
!24 = !DILocation(line: 61, column: 31, scope: !7)
!25 = !DILocation(line: 64, column: 35, scope: !7)
!26 = !DILocation(line: 64, column: 31, scope: !7)
!27 = !DILocation(line: 71, column: 36, scope: !7)
!28 = !DILocation(line: 71, column: 31, scope: !7)
!29 = !DILocation(line: 74, column: 36, scope: !7)
!30 = !DILocation(line: 74, column: 31, scope: !7)
!31 = !DILocation(line: 77, column: 36, scope: !7)
!32 = !DILocation(line: 77, column: 31, scope: !7)
!33 = !DILocation(line: 25, column: 19, scope: !7)
!34 = !DILocation(line: 79, column: 256, scope: !7)
!35 = !DILocation(line: 27, column: 18, scope: !7)
!36 = !DILocation(line: 29, column: 19, scope: !7)
!37 = !DILocation(line: 79, column: 197, scope: !7)
!38 = !DILocation(line: 33, column: 18, scope: !7)
!39 = !DILocation(line: 34, column: 19, scope: !7)
!40 = !DILocation(line: 37, column: 19, scope: !7)
!41 = !DILocation(line: 38, column: 52, scope: !7)
!42 = !DILocation(line: 38, column: 44, scope: !7)
!43 = !DILocation(line: 40, column: 21, scope: !7)
!44 = !DILocation(line: 43, column: 19, scope: !7)
!45 = !DILocation(line: 44, column: 52, scope: !7)
!46 = !DILocation(line: 54, column: 21, scope: !7)
!47 = !DILocation(line: 57, column: 20, scope: !7)
!48 = !DILocation(line: 58, column: 51, scope: !7)
!49 = !DILocation(line: 60, column: 20, scope: !7)
!50 = !DILocation(line: 61, column: 44, scope: !7)
!51 = !DILocation(line: 79, column: 137, scope: !7)
!52 = !DILocation(line: 79, column: 122, scope: !7)
!53 = !DILocation(line: 79, column: 166, scope: !7)
!54 = !DILocation(line: 79, column: 162, scope: !7)
!55 = !DILocation(line: 79, column: 153, scope: !7)
!56 = !DILocation(line: 79, column: 185, scope: !7)
!57 = !DILocation(line: 79, column: 173, scope: !7)
!58 = !DILocation(line: 79, column: 225, scope: !7)
!59 = !DILocation(line: 79, column: 72, scope: !7)
!60 = !DILocation(line: 79, column: 57, scope: !7)
!61 = !DILocation(line: 79, column: 244, scope: !7)
!62 = !DILocation(line: 79, column: 398, scope: !7)
!63 = !DILocation(line: 69, column: 20, scope: !7)
!64 = !DILocation(line: 50, column: 19, scope: !7)
!65 = !DILocation(line: 51, column: 52, scope: !7)
!66 = !DILocation(line: 63, column: 20, scope: !7)
!67 = !DILocation(line: 64, column: 48, scope: !7)
!68 = !DILocation(line: 70, column: 20, scope: !7)
!69 = !DILocation(line: 71, column: 49, scope: !7)
!70 = !DILocation(line: 73, column: 20, scope: !7)
!71 = !DILocation(line: 74, column: 49, scope: !7)
!72 = !DILocation(line: 76, column: 20, scope: !7)
!73 = !DILocation(line: 77, column: 49, scope: !7)
!74 = !DILocation(line: 44, column: 44, scope: !7)
!75 = !DILocation(line: 45, column: 20, scope: !7)
!76 = !DILocation(line: 51, column: 44, scope: !7)
!77 = !DILocation(line: 52, column: 20, scope: !7)
!78 = !DILocation(line: 58, column: 43, scope: !7)
!79 = !DILocation(line: 59, column: 20, scope: !7)
!80 = !DILocation(line: 61, column: 36, scope: !7)
!81 = !DILocation(line: 62, column: 20, scope: !7)
!82 = !DILocation(line: 64, column: 40, scope: !7)
!83 = !DILocation(line: 65, column: 20, scope: !7)
!84 = !DILocation(line: 71, column: 41, scope: !7)
!85 = !DILocation(line: 72, column: 20, scope: !7)
!86 = !DILocation(line: 74, column: 41, scope: !7)
!87 = !DILocation(line: 75, column: 20, scope: !7)
!88 = !DILocation(line: 77, column: 41, scope: !7)
!89 = !DILocation(line: 78, column: 20, scope: !7)
!90 = !DILocation(line: 80, column: 20, scope: !7)
!91 = !DILocation(line: 81, column: 25, scope: !7)
!92 = !DILocation(line: 81, column: 37, scope: !7)
!93 = !DILocation(line: 81, column: 4, scope: !7)
