; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_convolution_mul_40(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = sext i32 %17 to i64, !dbg !14
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !14
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #1, !dbg !15
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !15
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !15
  %23 = bitcast i32 %21 to float, !dbg !15
  %24 = bitcast i32 %22 to float, !dbg !15
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %4, i1 true) #1, !dbg !16
  %26 = bitcast i32 %25 to float, !dbg !16
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !17
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !18
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !18
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !18
  %31 = bitcast i32 %29 to float, !dbg !18
  %32 = bitcast i32 %30 to float, !dbg !18
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 true) #1, !dbg !19
  %34 = bitcast i32 %33 to float, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !20
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !21
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !21
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !21
  %39 = bitcast i32 %37 to float, !dbg !21
  %40 = bitcast i32 %38 to float, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %6, i1 true) #1, !dbg !22
  %42 = bitcast i32 %41 to float, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !23
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !24
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !24
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !24
  %47 = bitcast i32 %45 to float, !dbg !24
  %48 = bitcast i32 %46 to float, !dbg !24
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %7, i1 true) #1, !dbg !25
  %50 = bitcast i32 %49 to float, !dbg !25
  %51 = getelementptr i8, ptr addrspace(1) %8, i64 4, !dbg !26
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !27
  %53 = bitcast i32 %52 to float, !dbg !27
  %54 = getelementptr i8, ptr addrspace(1) %8, i64 8, !dbg !28
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !29
  %56 = bitcast i32 %55 to float, !dbg !29
  %57 = getelementptr i8, ptr addrspace(1) %8, i64 12, !dbg !30
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !31
  %59 = bitcast i32 %58 to float, !dbg !31
  %60 = getelementptr i8, ptr addrspace(1) %8, i64 16, !dbg !32
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !33
  %62 = bitcast i32 %61 to float, !dbg !33
  %63 = fadd float %23, %26, !dbg !34
  %64 = fadd float %24, %26, !dbg !34
  %65 = fadd float %31, %34, !dbg !35
  %66 = fadd float %32, %34, !dbg !35
  %67 = fadd float %39, %42, !dbg !36
  %68 = fadd float %40, %42, !dbg !36
  %69 = fadd float %47, %50, !dbg !37
  %70 = fadd float %48, %50, !dbg !37
  %71 = fmul float %63, %53, !dbg !38
  %72 = fmul float %64, %53, !dbg !38
  %73 = fmul float %65, %56, !dbg !39
  %74 = fmul float %66, %56, !dbg !39
  %75 = fadd float %71, %73, !dbg !40
  %76 = fadd float %72, %74, !dbg !40
  %77 = fmul float %67, %59, !dbg !41
  %78 = fmul float %68, %59, !dbg !41
  %79 = fadd float %75, %77, !dbg !42
  %80 = fadd float %76, %78, !dbg !42
  %81 = fmul float %69, %62, !dbg !43
  %82 = fmul float %70, %62, !dbg !43
  %83 = fadd float %79, %81, !dbg !44
  %84 = fadd float %80, %82, !dbg !44
  %85 = bitcast float %63 to i32, !dbg !45
  %86 = bitcast float %64 to i32, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %85, i32 %86, ptr addrspace(1) %19, i1 true) #1, !dbg !45
  %87 = bitcast float %65 to i32, !dbg !46
  %88 = bitcast float %66 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %87, i32 %88, ptr addrspace(1) %27, i1 true) #1, !dbg !46
  %89 = bitcast float %67 to i32, !dbg !47
  %90 = bitcast float %68 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %89, i32 %90, ptr addrspace(1) %35, i1 true) #1, !dbg !47
  %91 = bitcast float %69 to i32, !dbg !48
  %92 = bitcast float %70 to i32, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %91, i32 %92, ptr addrspace(1) %43, i1 true) #1, !dbg !48
  %93 = getelementptr float, ptr addrspace(1) %9, i64 %18, !dbg !49
  %94 = bitcast float %83 to i32, !dbg !50
  %95 = bitcast float %84 to i32, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %94, i32 %95, ptr addrspace(1) %93, i1 true) #1, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpfmzzwv5vxlwb7qsa6byji2tfg66e5ljhoympmux3g4zp5ci2ec.py", directory: "inductor_cache/pf")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_40, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_40, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_40", linkageName: "triton_poi_fused_add_convolution_mul_40", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 34, scope: !7)
!15 = !DILocation(line: 25, column: 39, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 34, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 34, scope: !7)
!21 = !DILocation(line: 31, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 40, scope: !7)
!25 = !DILocation(line: 35, column: 20, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 20, scope: !7)
!28 = !DILocation(line: 39, column: 31, scope: !7)
!29 = !DILocation(line: 39, column: 20, scope: !7)
!30 = !DILocation(line: 41, column: 31, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 43, column: 31, scope: !7)
!33 = !DILocation(line: 43, column: 20, scope: !7)
!34 = !DILocation(line: 45, column: 18, scope: !7)
!35 = !DILocation(line: 46, column: 18, scope: !7)
!36 = !DILocation(line: 47, column: 19, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 49, column: 20, scope: !7)
!39 = !DILocation(line: 50, column: 20, scope: !7)
!40 = !DILocation(line: 51, column: 20, scope: !7)
!41 = !DILocation(line: 52, column: 20, scope: !7)
!42 = !DILocation(line: 53, column: 20, scope: !7)
!43 = !DILocation(line: 54, column: 20, scope: !7)
!44 = !DILocation(line: 55, column: 20, scope: !7)
!45 = !DILocation(line: 56, column: 39, scope: !7)
!46 = !DILocation(line: 57, column: 39, scope: !7)
!47 = !DILocation(line: 58, column: 40, scope: !7)
!48 = !DILocation(line: 59, column: 40, scope: !7)
!49 = !DILocation(line: 60, column: 25, scope: !7)
!50 = !DILocation(line: 60, column: 37, scope: !7)
!51 = !DILocation(line: 60, column: 4, scope: !7)
