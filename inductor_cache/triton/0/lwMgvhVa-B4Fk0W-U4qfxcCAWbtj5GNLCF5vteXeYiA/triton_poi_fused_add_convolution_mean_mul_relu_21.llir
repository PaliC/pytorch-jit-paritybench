; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_convolution_mean_mul_relu_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 254, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 256, !dbg !14
  %14 = srem i32 %12, 64, !dbg !15
  %15 = shl i32 %12, 2, !dbg !16
  %16 = or disjoint i32 %15, 4, !dbg !16
  %17 = sext i32 %15 to i64, !dbg !17
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !17
  %19 = sext i32 %16 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %13) #1, !dbg !18
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %13) #1, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %13) #1, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %13) #1, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %13) #1, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %13) #1, !dbg !22
  %31 = sext i32 %14 to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !23
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %13) #1, !dbg !24
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !24
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !24
  %36 = or disjoint i32 %15, 1, !dbg !25
  %37 = or disjoint i32 %15, 5, !dbg !25
  %38 = sext i32 %36 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !26
  %40 = sext i32 %37 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %13) #1, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %13) #1, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %13) #1, !dbg !29
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %13) #1, !dbg !29
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !30
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %13) #1, !dbg !31
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %13) #1, !dbg !31
  %52 = or disjoint i32 %15, 2, !dbg !32
  %53 = or disjoint i32 %15, 6, !dbg !32
  %54 = sext i32 %52 to i64, !dbg !33
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !33
  %56 = sext i32 %53 to i64, !dbg !33
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !33
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %13) #1, !dbg !34
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %13) #1, !dbg !34
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !35
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !35
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %13) #1, !dbg !36
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %13) #1, !dbg !36
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !37
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !37
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %13) #1, !dbg !38
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %13) #1, !dbg !38
  %68 = or disjoint i32 %15, 3, !dbg !39
  %69 = or disjoint i32 %15, 7, !dbg !39
  %70 = sext i32 %68 to i64, !dbg !40
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !40
  %72 = sext i32 %69 to i64, !dbg !40
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !40
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %13) #1, !dbg !41
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %13) #1, !dbg !41
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !42
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !42
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %13) #1, !dbg !43
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %13) #1, !dbg !43
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !44
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %72, !dbg !44
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %13) #1, !dbg !45
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %13) #1, !dbg !45
  %84 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !18
  %85 = insertelement <2 x i32> %84, i32 %42, i64 1, !dbg !18
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !18
  %87 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !20
  %88 = insertelement <2 x i32> %87, i32 %46, i64 1, !dbg !20
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !20
  %90 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !22
  %91 = insertelement <2 x i32> %90, i32 %50, i64 1, !dbg !22
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !22
  %93 = fcmp olt <2 x float> %86, zeroinitializer, !dbg !46
  %94 = select <2 x i1> %93, <2 x float> zeroinitializer, <2 x float> %86, !dbg !50
  %95 = fmul <2 x float> %94, %89, !dbg !51
  %96 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !52
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !52
  %98 = shufflevector <2 x float> %97, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %99 = fadd <2 x float> %98, %92, !dbg !52
  %100 = fadd <2 x float> %95, %99, !dbg !53
  %101 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !18
  %102 = insertelement <2 x i32> %101, i32 %43, i64 1, !dbg !18
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !18
  %104 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !20
  %105 = insertelement <2 x i32> %104, i32 %47, i64 1, !dbg !20
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !20
  %107 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !22
  %108 = insertelement <2 x i32> %107, i32 %51, i64 1, !dbg !22
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !22
  %110 = fcmp olt <2 x float> %103, zeroinitializer, !dbg !46
  %111 = select <2 x i1> %110, <2 x float> zeroinitializer, <2 x float> %103, !dbg !50
  %112 = fmul <2 x float> %111, %106, !dbg !51
  %113 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !52
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !52
  %115 = shufflevector <2 x float> %114, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %116 = fadd <2 x float> %115, %109, !dbg !52
  %117 = fadd <2 x float> %112, %116, !dbg !53
  %shift = shufflevector <2 x float> %100, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %118 = fadd <2 x float> %100, %shift, !dbg !54
  %shift1 = shufflevector <2 x float> %117, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %119 = fadd <2 x float> %117, %shift1, !dbg !54
  %120 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !34
  %121 = insertelement <2 x i32> %120, i32 %74, i64 1, !dbg !34
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !34
  %123 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !36
  %124 = insertelement <2 x i32> %123, i32 %78, i64 1, !dbg !36
  %125 = bitcast <2 x i32> %124 to <2 x float>, !dbg !36
  %126 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !38
  %127 = insertelement <2 x i32> %126, i32 %82, i64 1, !dbg !38
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !38
  %129 = fcmp olt <2 x float> %122, zeroinitializer, !dbg !55
  %130 = select <2 x i1> %129, <2 x float> zeroinitializer, <2 x float> %122, !dbg !57
  %131 = fmul <2 x float> %130, %125, !dbg !58
  %132 = fadd <2 x float> %98, %128, !dbg !59
  %133 = fadd <2 x float> %131, %132, !dbg !60
  %134 = fadd <2 x float> %118, %133, !dbg !61
  %135 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !34
  %136 = insertelement <2 x i32> %135, i32 %75, i64 1, !dbg !34
  %137 = bitcast <2 x i32> %136 to <2 x float>, !dbg !34
  %138 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !36
  %139 = insertelement <2 x i32> %138, i32 %79, i64 1, !dbg !36
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !36
  %141 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !38
  %142 = insertelement <2 x i32> %141, i32 %83, i64 1, !dbg !38
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !38
  %144 = fcmp olt <2 x float> %137, zeroinitializer, !dbg !55
  %145 = select <2 x i1> %144, <2 x float> zeroinitializer, <2 x float> %137, !dbg !57
  %146 = fmul <2 x float> %145, %140, !dbg !58
  %147 = fadd <2 x float> %115, %143, !dbg !59
  %148 = fadd <2 x float> %146, %147, !dbg !60
  %149 = fadd <2 x float> %119, %148, !dbg !61
  %shift2 = shufflevector <2 x float> %133, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !62
  %150 = fadd <2 x float> %134, %shift2, !dbg !62
  %151 = extractelement <2 x float> %150, i64 0, !dbg !62
  %shift3 = shufflevector <2 x float> %148, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !62
  %152 = fadd <2 x float> %149, %shift3, !dbg !62
  %153 = extractelement <2 x float> %152, i64 0, !dbg !62
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 4.000000e+00) #1, !dbg !63
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float 4.000000e+00) #1, !dbg !63
  %156 = sext i32 %12 to i64, !dbg !64
  %157 = getelementptr float, ptr addrspace(1) %4, i64 %156, !dbg !64
  %158 = bitcast float %154 to i32, !dbg !65
  %159 = bitcast float %155 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %158, i32 %159, ptr addrspace(1) %157, i1 %13) #1, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjz4ji4bj47er6t75lffmkfs22f5klmperohhsu2nwyurv2hamdx.py", directory: "inductor_cache/jz")
!4 = !{ptr @triton_poi_fused_add_convolution_mean_mul_relu_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mean_mul_relu_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mean_mul_relu_21", linkageName: "triton_poi_fused_add_convolution_mean_mul_relu_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 32, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 37, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 37, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 37, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 34, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 41, scope: !7)
!28 = !DILocation(line: 31, column: 31, scope: !7)
!29 = !DILocation(line: 31, column: 42, scope: !7)
!30 = !DILocation(line: 32, column: 31, scope: !7)
!31 = !DILocation(line: 32, column: 42, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 33, column: 31, scope: !7)
!34 = !DILocation(line: 33, column: 42, scope: !7)
!35 = !DILocation(line: 34, column: 31, scope: !7)
!36 = !DILocation(line: 34, column: 42, scope: !7)
!37 = !DILocation(line: 35, column: 31, scope: !7)
!38 = !DILocation(line: 35, column: 42, scope: !7)
!39 = !DILocation(line: 36, column: 35, scope: !7)
!40 = !DILocation(line: 36, column: 31, scope: !7)
!41 = !DILocation(line: 36, column: 42, scope: !7)
!42 = !DILocation(line: 37, column: 31, scope: !7)
!43 = !DILocation(line: 37, column: 42, scope: !7)
!44 = !DILocation(line: 38, column: 31, scope: !7)
!45 = !DILocation(line: 38, column: 42, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 40, column: 40, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 41, column: 18, scope: !7)
!52 = !DILocation(line: 42, column: 18, scope: !7)
!53 = !DILocation(line: 43, column: 18, scope: !7)
!54 = !DILocation(line: 48, column: 19, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !56)
!56 = !DILocation(line: 49, column: 41, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !56)
!58 = !DILocation(line: 50, column: 20, scope: !7)
!59 = !DILocation(line: 51, column: 20, scope: !7)
!60 = !DILocation(line: 52, column: 20, scope: !7)
!61 = !DILocation(line: 53, column: 20, scope: !7)
!62 = !DILocation(line: 58, column: 20, scope: !7)
!63 = !DILocation(line: 60, column: 20, scope: !7)
!64 = !DILocation(line: 61, column: 25, scope: !7)
!65 = !DILocation(line: 61, column: 37, scope: !7)
!66 = !DILocation(line: 61, column: 4, scope: !7)
