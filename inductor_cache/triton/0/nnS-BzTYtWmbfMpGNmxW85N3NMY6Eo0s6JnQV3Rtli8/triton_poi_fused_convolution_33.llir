; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_33(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 127, !dbg !12
  %9 = or disjoint i32 %8, 128, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 252, !dbg !12
  %12 = or disjoint i32 %6, %8, !dbg !13
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %11, !dbg !13
  %15 = icmp slt i32 %12, 512, !dbg !14
  %16 = icmp slt i32 %13, 512, !dbg !14
  %17 = icmp slt i32 %14, 512, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 2, !dbg !16
  %20 = lshr i32 %7, 6, !dbg !17
  %.lobit = and i32 %20, 1, !dbg !17
  %21 = or disjoint i32 %19, %.lobit, !dbg !18
  %22 = or disjoint i32 %21, 2, !dbg !18
  %23 = icmp slt i32 %19, 4, !dbg !19
  %24 = icmp slt i32 %21, 4, !dbg !19
  %25 = icmp slt i32 %22, 4, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %26 = sdiv i32 %.frozen, 128, !dbg !20
  %27 = mul i32 %26, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %27, !dbg !21
  %.frozen15 = freeze i32 %13, !dbg !20
  %28 = sdiv i32 %.frozen15, 128, !dbg !20
  %29 = mul i32 %28, 128, !dbg !21
  %.decomposed16 = sub i32 %.frozen15, %29, !dbg !21
  %.frozen17 = freeze i32 %14, !dbg !20
  %30 = sdiv i32 %.frozen17, 128, !dbg !20
  %31 = mul i32 %30, 128, !dbg !21
  %.decomposed18 = sub i32 %.frozen17, %31, !dbg !21
  %32 = add i32 %19, 512, !dbg !22
  %33 = shl nsw i32 %.decomposed, 2, !dbg !23
  %34 = shl nsw i32 %.decomposed16, 2, !dbg !23
  %35 = add i32 %33, %32, !dbg !24
  %36 = add i32 %34, %32, !dbg !24
  %37 = shl i32 %26, 10, !dbg !25
  %38 = shl i32 %28, 10, !dbg !25
  %39 = add i32 %35, %37, !dbg !26
  %40 = add i32 %36, %38, !dbg !26
  %41 = sext i32 %39 to i64, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !27
  %43 = sext i32 %40 to i64, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !27
  %45 = and i1 %23, %15, !dbg !28
  %46 = and i1 %23, %16, !dbg !28
  %47 = and i1 %17, %24, !dbg !28
  %48 = and i1 %25, %17, !dbg !28
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %45) #2, !dbg !29
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !29
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !29
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !29
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !29
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %46) #2, !dbg !29
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !29
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !29
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !29
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !29
  %59 = shl i32 %21, 7, !dbg !30
  %60 = shl i32 %22, 7, !dbg !30
  %61 = shl i32 %30, 9, !dbg !31
  %62 = add i32 %61, %.decomposed18, !dbg !32
  %63 = add i32 %62, %59, !dbg !33
  %64 = add i32 %62, %60, !dbg !33
  %65 = sext i32 %63 to i64, !dbg !34
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !34
  %67 = sext i32 %64 to i64, !dbg !34
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !34
  %69 = and i32 %10, 508, !dbg !35
  %70 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %8, !dbg !35
  %71 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #2, !dbg !35
  %72 = getelementptr inbounds i8, ptr addrspace(3) %70, i32 1040, !dbg !35
  %73 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #2, !dbg !35
  %74 = getelementptr inbounds i8, ptr addrspace(3) %70, i32 2080, !dbg !35
  %75 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #2, !dbg !35
  %76 = getelementptr inbounds i8, ptr addrspace(3) %70, i32 3120, !dbg !35
  %77 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #2, !dbg !35
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !35
  %79 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #2, !dbg !35
  %80 = getelementptr inbounds i8, ptr addrspace(3) %70, i32 1552, !dbg !35
  %81 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #2, !dbg !35
  %82 = getelementptr inbounds i8, ptr addrspace(3) %70, i32 2592, !dbg !35
  %83 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #2, !dbg !35
  %84 = getelementptr inbounds i8, ptr addrspace(3) %70, i32 3632, !dbg !35
  %85 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %86 = lshr i32 %10, 6, !dbg !35
  %87 = and i32 %86, 4, !dbg !35
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i32 %87, !dbg !35
  %89 = getelementptr float, ptr addrspace(3) %88, i32 %69, !dbg !35
  %90 = or disjoint i32 %69, 512, !dbg !35
  %91 = lshr i32 %90, 6, !dbg !35
  %92 = and i32 %91, 12, !dbg !35
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i32 %92, !dbg !35
  %94 = getelementptr float, ptr addrspace(3) %93, i32 %90, !dbg !35
  %95 = load <4 x i32>, ptr addrspace(3) %94, align 16, !dbg !35
  %.extract = load i32, ptr addrspace(3) %89, align 16, !dbg !35
  %96 = getelementptr inbounds i8, ptr addrspace(3) %89, i32 4, !dbg !35
  %.extract8 = load i32, ptr addrspace(3) %96, align 4, !dbg !35
  %97 = getelementptr inbounds i8, ptr addrspace(3) %89, i32 8, !dbg !35
  %.extract9 = load i32, ptr addrspace(3) %97, align 8, !dbg !35
  %98 = getelementptr inbounds i8, ptr addrspace(3) %89, i32 12, !dbg !35
  %.extract10 = load i32, ptr addrspace(3) %98, align 4, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %66, i1 %47) #2, !dbg !35
  %.extract11 = extractelement <4 x i32> %95, i64 0, !dbg !35
  %.extract12 = extractelement <4 x i32> %95, i64 1, !dbg !35
  %.extract13 = extractelement <4 x i32> %95, i64 2, !dbg !35
  %.extract14 = extractelement <4 x i32> %95, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %68, i1 %48) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctgxdddg4vepjjrj7753gzn2zkmhmq3ns5ylw7xxf4vprftlbacr.py", directory: "inductor_cache/tg")
!4 = !{ptr @triton_poi_fused_convolution_33, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_33, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_33", linkageName: "triton_poi_fused_convolution_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 36, scope: !7)
!23 = !DILocation(line: 31, column: 43, scope: !7)
!24 = !DILocation(line: 31, column: 41, scope: !7)
!25 = !DILocation(line: 31, column: 53, scope: !7)
!26 = !DILocation(line: 31, column: 48, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 66, scope: !7)
!29 = !DILocation(line: 31, column: 58, scope: !7)
!30 = !DILocation(line: 32, column: 34, scope: !7)
!31 = !DILocation(line: 32, column: 43, scope: !7)
!32 = !DILocation(line: 32, column: 30, scope: !7)
!33 = !DILocation(line: 32, column: 39, scope: !7)
!34 = !DILocation(line: 32, column: 25, scope: !7)
!35 = !DILocation(line: 32, column: 54, scope: !7)
!36 = !DILocation(line: 32, column: 4, scope: !7)
