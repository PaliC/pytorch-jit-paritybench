; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mv_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = and i32 %8, 7, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = icmp slt i32 %12, 128, !dbg !14
  %15 = icmp slt i32 %13, 128, !dbg !14
  %16 = shl i32 %8, 2, !dbg !15
  %17 = and i32 %16, 60, !dbg !15
  %18 = icmp samesign ult i32 %17, 48, !dbg !16
  %19 = mul i32 %12, 48, !dbg !17
  %20 = add i32 %19, %17, !dbg !18
  %21 = sext i32 %20 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !19
  %23 = and i1 %18, %14, !dbg !20
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !21
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !21
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !21
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !21
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !21
  %29 = zext nneg i32 %17 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !22
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !23
  %36 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !21
  %37 = insertelement <2 x i32> %36, i32 %26, i64 1, !dbg !21
  %38 = bitcast <2 x i32> %37 to <2 x float>, !dbg !21
  %39 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !23
  %40 = insertelement <2 x i32> %39, i32 %33, i64 1, !dbg !23
  %41 = bitcast <2 x i32> %40 to <2 x float>, !dbg !23
  %42 = fmul <2 x float> %38, %41, !dbg !24
  %43 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !21
  %44 = insertelement <2 x i32> %43, i32 %27, i64 1, !dbg !21
  %45 = bitcast <2 x i32> %44 to <2 x float>, !dbg !21
  %46 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !23
  %47 = insertelement <2 x i32> %46, i32 %34, i64 1, !dbg !23
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !23
  %49 = fmul <2 x float> %45, %48, !dbg !24
  %shift = shufflevector <2 x float> %42, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !25
  %50 = fadd <2 x float> %42, %shift, !dbg !25
  %shift1 = shufflevector <2 x float> %49, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !25
  %51 = fadd <2 x float> %shift1, %50, !dbg !25
  %52 = fadd <2 x float> %49, %51, !dbg !25
  %53 = extractelement <2 x float> %52, i64 0, !dbg !25
  %54 = select i1 %23, float %53, float 0.000000e+00, !dbg !25
  %55 = bitcast float %54 to i32, !dbg !30
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 8, i32 31), !dbg !30
  %57 = bitcast i32 %56 to float, !dbg !30
  %58 = fadd float %54, %57, !dbg !25
  %59 = bitcast float %58 to i32, !dbg !30
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 4, i32 31), !dbg !30
  %61 = bitcast i32 %60 to float, !dbg !30
  %62 = fadd float %58, %61, !dbg !25
  %63 = bitcast float %62 to i32, !dbg !30
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 2, i32 31), !dbg !30
  %65 = bitcast i32 %64 to float, !dbg !30
  %66 = fadd float %62, %65, !dbg !25
  %67 = bitcast float %66 to i32, !dbg !30
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 1, i32 31), !dbg !30
  %69 = bitcast i32 %68 to float, !dbg !30
  %70 = fadd float %66, %69, !dbg !25
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !31
  %72 = bitcast float %70 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %74 = load i32, ptr addrspace(3) %73, align 4, !dbg !31
  %75 = sext i32 %13 to i64, !dbg !32
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !32
  %77 = and i32 %8, 120, !dbg !33
  %78 = icmp eq i32 %77, 0, !dbg !33
  %79 = and i1 %78, %15, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %74, ptr addrspace(1) %76, i1 %79) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqr2qfv7kfbjuwkbtdiqeqz3p34t4lpqkjbwtuxlcxacyouaz3mr.py", directory: "inductor_cache/qr")
!4 = !{ptr @triton_per_fused_mv_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mv_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mv_0", linkageName: "triton_per_fused_mv_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 38, scope: !7)
!18 = !DILocation(line: 31, column: 35, scope: !7)
!19 = !DILocation(line: 31, column: 30, scope: !7)
!20 = !DILocation(line: 31, column: 51, scope: !7)
!21 = !DILocation(line: 31, column: 43, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 18, scope: !7)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!29 = !DILocation(line: 36, column: 24, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 36, column: 27, scope: !7)
!32 = !DILocation(line: 37, column: 25, scope: !7)
!33 = !DILocation(line: 37, column: 36, scope: !7)
!34 = !DILocation(line: 37, column: 4, scope: !7)
