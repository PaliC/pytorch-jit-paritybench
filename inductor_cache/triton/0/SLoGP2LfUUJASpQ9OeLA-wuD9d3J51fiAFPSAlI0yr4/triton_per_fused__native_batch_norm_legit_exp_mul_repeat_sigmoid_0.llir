; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_exp_mul_repeat_sigmoid_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %14 = icmp slt i32 %13, 16, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = srem i32 %13, 4, !dbg !13
  %18 = sext i32 %17 to i64, !dbg !14
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !14
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %14) #5, !dbg !15
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %14) #5, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !16
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %14) #5, !dbg !17
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %14) #5, !dbg !17
  %25 = shl i32 %13, 4, !dbg !18
  %26 = or disjoint i32 %25, %16, !dbg !19
  %27 = sext i32 %26 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %14, i32 0, i1 %14) #5, !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %14, i32 0, i1 %14) #5, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %14, i32 0, i1 %14) #5, !dbg !23
  %35 = select i1 %14, float %30, float 0.000000e+00, !dbg !24
  %36 = select i1 %14, float %32, float 0.000000e+00, !dbg !24
  %37 = bitcast float %35 to i32, !dbg !25
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 8, i32 31), !dbg !25
  %39 = bitcast i32 %38 to float, !dbg !25
  %40 = fadd float %35, %39, !dbg !29
  %41 = bitcast float %40 to i32, !dbg !25
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 4, i32 31), !dbg !25
  %43 = bitcast i32 %42 to float, !dbg !25
  %44 = fadd float %40, %43, !dbg !29
  %45 = bitcast float %44 to i32, !dbg !25
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 2, i32 31), !dbg !25
  %47 = bitcast i32 %46 to float, !dbg !25
  %48 = fadd float %44, %47, !dbg !29
  %49 = bitcast float %48 to i32, !dbg !25
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 1, i32 31), !dbg !25
  %51 = bitcast i32 %50 to float, !dbg !25
  %52 = fadd float %48, %51, !dbg !29
  %53 = bitcast float %36 to i32, !dbg !25
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 8, i32 31), !dbg !25
  %55 = bitcast i32 %54 to float, !dbg !25
  %56 = fadd float %36, %55, !dbg !29
  %57 = bitcast float %56 to i32, !dbg !25
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 4, i32 31), !dbg !25
  %59 = bitcast i32 %58 to float, !dbg !25
  %60 = fadd float %56, %59, !dbg !29
  %61 = bitcast float %60 to i32, !dbg !25
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 2, i32 31), !dbg !25
  %63 = bitcast i32 %62 to float, !dbg !25
  %64 = fadd float %60, %63, !dbg !29
  %65 = bitcast float %64 to i32, !dbg !25
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 1, i32 31), !dbg !25
  %67 = bitcast i32 %66 to float, !dbg !25
  %68 = fadd float %64, %67, !dbg !29
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float 1.600000e+01) #5, !dbg !31
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float 1.600000e+01) #5, !dbg !31
  %71 = fsub float %30, %69, !dbg !32
  %72 = fsub float %32, %70, !dbg !32
  %73 = fmul float %71, %71, !dbg !33
  %74 = fmul float %72, %72, !dbg !33
  %75 = select i1 %14, float %73, float 0.000000e+00, !dbg !34
  %76 = select i1 %14, float %74, float 0.000000e+00, !dbg !34
  %77 = bitcast float %75 to i32, !dbg !35
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 8, i32 31), !dbg !35
  %79 = bitcast i32 %78 to float, !dbg !35
  %80 = fadd float %75, %79, !dbg !37
  %81 = bitcast float %80 to i32, !dbg !35
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 4, i32 31), !dbg !35
  %83 = bitcast i32 %82 to float, !dbg !35
  %84 = fadd float %80, %83, !dbg !37
  %85 = bitcast float %84 to i32, !dbg !35
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 2, i32 31), !dbg !35
  %87 = bitcast i32 %86 to float, !dbg !35
  %88 = fadd float %84, %87, !dbg !37
  %89 = bitcast float %88 to i32, !dbg !35
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 1, i32 31), !dbg !35
  %91 = bitcast i32 %90 to float, !dbg !35
  %92 = fadd float %88, %91, !dbg !37
  %93 = bitcast float %76 to i32, !dbg !35
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 8, i32 31), !dbg !35
  %95 = bitcast i32 %94 to float, !dbg !35
  %96 = fadd float %76, %95, !dbg !37
  %97 = bitcast float %96 to i32, !dbg !35
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 4, i32 31), !dbg !35
  %99 = bitcast i32 %98 to float, !dbg !35
  %100 = fadd float %96, %99, !dbg !37
  %101 = bitcast float %100 to i32, !dbg !35
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 2, i32 31), !dbg !35
  %103 = bitcast i32 %102 to float, !dbg !35
  %104 = fadd float %100, %103, !dbg !37
  %105 = bitcast float %104 to i32, !dbg !35
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 1, i32 31), !dbg !35
  %107 = bitcast i32 %106 to float, !dbg !35
  %108 = fadd float %104, %107, !dbg !37
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float 1.600000e+01) #5, !dbg !38
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float 1.600000e+01) #5, !dbg !38
  %111 = fadd float %109, 0x3EE4F8B580000000, !dbg !39
  %112 = fadd float %110, 0x3EE4F8B580000000, !dbg !39
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %113, 0, !dbg !40
  br i1 %.not.i, label %116, label %114, !dbg !40

114:                                              ; preds = %12
  %115 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %111), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

116:                                              ; preds = %12
  %117 = tail call float @llvm.nvvm.rsqrt.approx.f(float %111), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %114, %116
  %.0.i = phi float [ %115, %114 ], [ %117, %116 ], !dbg !40
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i1 = icmp eq i32 %118, 0, !dbg !40
  br i1 %.not.i1, label %121, label %119, !dbg !40

119:                                              ; preds = %__nv_rsqrtf.exit
  %120 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %112), !dbg !40
  br label %__nv_rsqrtf.exit3, !dbg !40

121:                                              ; preds = %__nv_rsqrtf.exit
  %122 = tail call float @llvm.nvvm.rsqrt.approx.f(float %112), !dbg !40
  br label %__nv_rsqrtf.exit3, !dbg !40

__nv_rsqrtf.exit3:                                ; preds = %119, %121
  %.0.i2 = phi float [ %120, %119 ], [ %122, %121 ], !dbg !40
  %123 = bitcast i32 %34 to float, !dbg !23
  %124 = bitcast i32 %23 to float, !dbg !17
  %125 = bitcast i32 %20 to float, !dbg !15
  %126 = fmul float %71, %.0.i, !dbg !41
  %127 = fmul float %126, %125, !dbg !42
  %128 = fadd float %127, %124, !dbg !43
  %129 = fsub float 0.000000e+00, %128, !dbg !44
  %130 = fmul float %129, 0x3FF7154760000000, !dbg !46
  %131 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %130) #5, !dbg !46
  %132 = fadd float %131, 1.000000e+00, !dbg !47
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %132) #5, !dbg !48
  %134 = fmul float %133, 1.200000e+01, !dbg !49
  %135 = fmul float %134, 0x3FF7154760000000, !dbg !50
  %136 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %135) #5, !dbg !50
  %137 = fmul float %136, %123, !dbg !51
  %138 = sext i32 %13 to i64, !dbg !52
  %139 = getelementptr float, ptr addrspace(1) %5, i64 %138, !dbg !52
  %urem = and i32 %15, 63, !dbg !53
  %140 = icmp eq i32 %urem, 0, !dbg !53
  %141 = and i1 %140, %14, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %21, ptr addrspace(1) %139, i1 %141) #5, !dbg !53
  %142 = getelementptr float, ptr addrspace(1) %6, i64 %138, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %24, ptr addrspace(1) %142, i1 %141) #5, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !57
  %144 = bitcast float %.0.i2 to i32, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %144, ptr addrspace(1) %143, i1 %141) #5, !dbg !58
  %145 = getelementptr float, ptr addrspace(1) %8, i64 %27, !dbg !59
  %146 = and i32 %15, 48, !dbg !60
  %147 = icmp eq i32 %146, 0, !dbg !60
  %148 = bitcast float %136 to i32, !dbg !60
  %149 = and i1 %147, %14, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %148, ptr addrspace(1) %145, i1 %149) #5, !dbg !60
  %150 = getelementptr float, ptr addrspace(1) %9, i64 %27, !dbg !61
  %151 = bitcast float %137 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %150, i1 %149) #5, !dbg !62
  %152 = getelementptr float, ptr addrspace(1) %7, i64 %138, !dbg !63
  %153 = bitcast float %70 to i32, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %153, ptr addrspace(1) %152, i1 %141) #5, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py", directory: "inductor_cache/og")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_exp_mul_repeat_sigmoid_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_exp_mul_repeat_sigmoid_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_exp_mul_repeat_sigmoid_0", linkageName: "triton_per_fused__native_batch_norm_legit_exp_mul_repeat_sigmoid_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 36, scope: !7)
!14 = !DILocation(line: 31, column: 31, scope: !7)
!15 = !DILocation(line: 31, column: 41, scope: !7)
!16 = !DILocation(line: 32, column: 31, scope: !7)
!17 = !DILocation(line: 32, column: 41, scope: !7)
!18 = !DILocation(line: 33, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 34, column: 31, scope: !7)
!23 = !DILocation(line: 34, column: 44, scope: !7)
!24 = !DILocation(line: 38, column: 33, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 39, column: 24, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 42, column: 19, scope: !7)
!32 = !DILocation(line: 43, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 20, scope: !7)
!34 = !DILocation(line: 46, column: 35, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !36)
!36 = !DILocation(line: 47, column: 26, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !36)
!38 = !DILocation(line: 49, column: 20, scope: !7)
!39 = !DILocation(line: 51, column: 20, scope: !7)
!40 = !DILocation(line: 52, column: 28, scope: !7)
!41 = !DILocation(line: 54, column: 20, scope: !7)
!42 = !DILocation(line: 55, column: 20, scope: !7)
!43 = !DILocation(line: 56, column: 20, scope: !7)
!44 = !DILocation(line: 47, column: 30, scope: !26, inlinedAt: !45)
!45 = !DILocation(line: 57, column: 23, scope: !7)
!46 = !DILocation(line: 47, column: 29, scope: !26, inlinedAt: !45)
!47 = !DILocation(line: 47, column: 20, scope: !26, inlinedAt: !45)
!48 = !DILocation(line: 47, column: 16, scope: !26, inlinedAt: !45)
!49 = !DILocation(line: 59, column: 20, scope: !7)
!50 = !DILocation(line: 60, column: 24, scope: !7)
!51 = !DILocation(line: 61, column: 20, scope: !7)
!52 = !DILocation(line: 62, column: 25, scope: !7)
!53 = !DILocation(line: 62, column: 36, scope: !7)
!54 = !DILocation(line: 63, column: 25, scope: !7)
!55 = !DILocation(line: 63, column: 36, scope: !7)
!56 = !DILocation(line: 64, column: 4, scope: !7)
!57 = !DILocation(line: 65, column: 28, scope: !7)
!58 = !DILocation(line: 65, column: 40, scope: !7)
!59 = !DILocation(line: 66, column: 25, scope: !7)
!60 = !DILocation(line: 66, column: 45, scope: !7)
!61 = !DILocation(line: 67, column: 25, scope: !7)
!62 = !DILocation(line: 67, column: 45, scope: !7)
!63 = !DILocation(line: 68, column: 25, scope: !7)
!64 = !DILocation(line: 68, column: 37, scope: !7)
!65 = !DILocation(line: 68, column: 4, scope: !7)
