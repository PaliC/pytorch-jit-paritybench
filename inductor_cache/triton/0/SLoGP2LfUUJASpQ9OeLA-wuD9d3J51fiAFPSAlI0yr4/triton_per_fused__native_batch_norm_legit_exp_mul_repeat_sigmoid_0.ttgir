#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":19:0)
#loc1 = loc(unknown)
#loc18 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":39:24)
#loc25 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":47:26)
#loc56 = loc(callsite(#loc1 at #loc18))
#loc59 = loc(callsite(#loc1 at #loc25))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__native_batch_norm_legit_exp_mul_repeat_sigmoid_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":19:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":19:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.200000e+01> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc4)
    %6 = arith.remsi %0, %c4_i32 : i32 loc(#loc5)
    %7 = tt.addptr %arg1, %6 : !tt.ptr<f32>, i32 loc(#loc6)
    %8 = tt.splat %7 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc7)
    %9 = tt.splat %7 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %10 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc7)
    %11 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc7)
    %12 = tt.load %8, %10 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc7)
    %13 = tt.load %9, %11 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %14 = tt.addptr %arg2, %6 : !tt.ptr<f32>, i32 loc(#loc8)
    %15 = tt.splat %14 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc9)
    %16 = tt.splat %14 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc9)
    %17 = tt.load %15, %10 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc9)
    %18 = tt.load %16, %11 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc9)
    %19 = arith.muli %0, %c16_i32 : i32 loc(#loc10)
    %20 = tt.splat %19 : i32 -> tensor<1x16xi32, #blocked> loc(#loc11)
    %21 = tt.splat %19 : i32 -> tensor<1x16xi32, #blocked1> loc(#loc11)
    %22 = arith.addi %4, %20 : tensor<1x16xi32, #blocked> loc(#loc11)
    %23 = arith.addi %5, %21 : tensor<1x16xi32, #blocked1> loc(#loc11)
    %24 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc12)
    %25 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %26 = tt.addptr %24, %22 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc12)
    %27 = tt.addptr %25, %23 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc12)
    %28 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked> loc(#loc13)
    %29 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked1> loc(#loc13)
    %30 = tt.load %26, %28, %cst : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc13)
    %31 = tt.load %27, %29, %cst_6 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc13)
    %32 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc14)
    %33 = tt.addptr %32, %22 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc14)
    %34 = tt.load %33, %28, %cst : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc15)
    %35 = arith.select %28, %30, %cst : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc16)
    %36 = arith.select %29, %31, %cst_6 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc16)
    %37 = "tt.reduce"(%35) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc18)), %arg13: f32 loc(callsite(#loc1 at #loc18))):
      %86 = arith.addf %arg12, %arg13 : f32 loc(#loc64)
      tt.reduce.return %86 : f32 loc(#loc55)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc55)
    %38 = "tt.reduce"(%36) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc18)), %arg13: f32 loc(callsite(#loc1 at #loc18))):
      %86 = arith.addf %arg12, %arg13 : f32 loc(#loc64)
      tt.reduce.return %86 : f32 loc(#loc55)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc55)
    %39 = tt.expand_dims %37 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc20)
    %40 = tt.expand_dims %38 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc20)
    %41 = arith.divf %39, %cst_4 : tensor<1x1xf32, #blocked> loc(#loc21)
    %42 = arith.divf %40, %cst_5 : tensor<1x1xf32, #blocked1> loc(#loc21)
    %43 = tt.broadcast %41 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc22)
    %44 = tt.broadcast %42 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc22)
    %45 = arith.subf %30, %43 : tensor<1x16xf32, #blocked> loc(#loc22)
    %46 = arith.subf %31, %44 : tensor<1x16xf32, #blocked1> loc(#loc22)
    %47 = arith.mulf %45, %45 : tensor<1x16xf32, #blocked> loc(#loc23)
    %48 = arith.mulf %46, %46 : tensor<1x16xf32, #blocked1> loc(#loc23)
    %49 = arith.select %28, %47, %cst : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc24)
    %50 = arith.select %29, %48, %cst_6 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc24)
    %51 = "tt.reduce"(%49) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc25)), %arg13: f32 loc(callsite(#loc1 at #loc25))):
      %86 = arith.addf %arg12, %arg13 : f32 loc(#loc65)
      tt.reduce.return %86 : f32 loc(#loc58)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc58)
    %52 = "tt.reduce"(%50) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc25)), %arg13: f32 loc(callsite(#loc1 at #loc25))):
      %86 = arith.addf %arg12, %arg13 : f32 loc(#loc65)
      tt.reduce.return %86 : f32 loc(#loc58)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc58)
    %53 = tt.expand_dims %51 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc26)
    %54 = tt.expand_dims %52 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc26)
    %55 = arith.divf %53, %cst_4 : tensor<1x1xf32, #blocked> loc(#loc27)
    %56 = arith.divf %54, %cst_5 : tensor<1x1xf32, #blocked1> loc(#loc27)
    %57 = arith.addf %55, %cst_2 : tensor<1x1xf32, #blocked> loc(#loc28)
    %58 = arith.addf %56, %cst_3 : tensor<1x1xf32, #blocked1> loc(#loc28)
    %59 = tt.extern_elementwise %57 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc29)
    %60 = tt.extern_elementwise %58 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc29)
    %61 = tt.broadcast %59 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc30)
    %62 = arith.mulf %45, %61 : tensor<1x16xf32, #blocked> loc(#loc30)
    %63 = tt.broadcast %12 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc31)
    %64 = arith.mulf %62, %63 : tensor<1x16xf32, #blocked> loc(#loc31)
    %65 = tt.broadcast %17 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc32)
    %66 = arith.addf %64, %65 : tensor<1x16xf32, #blocked> loc(#loc32)
    %67 = arith.subf %cst, %66 : tensor<1x16xf32, #blocked> loc(#loc60)
    %68 = math.exp %67 : tensor<1x16xf32, #blocked> loc(#loc61)
    %69 = arith.addf %68, %cst_0 : tensor<1x16xf32, #blocked> loc(#loc62)
    %70 = arith.divf %cst_0, %69 : tensor<1x16xf32, #blocked> loc(#loc63)
    %71 = arith.mulf %70, %cst_1 : tensor<1x16xf32, #blocked> loc(#loc38)
    %72 = math.exp %71 : tensor<1x16xf32, #blocked> loc(#loc39)
    %73 = arith.mulf %34, %72 : tensor<1x16xf32, #blocked> loc(#loc40)
    %74 = tt.addptr %arg5, %0 : !tt.ptr<f32>, i32 loc(#loc41)
    %75 = tt.splat %74 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc42)
    tt.store %75, %13, %11 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc42)
    %76 = tt.addptr %arg6, %0 : !tt.ptr<f32>, i32 loc(#loc43)
    %77 = tt.splat %76 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc44)
    tt.store %77, %18, %11 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc44)
    gpu.barrier loc(#loc45)
    %78 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc46)
    %79 = tt.splat %78 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc47)
    tt.store %79, %60, %11 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc47)
    %80 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc48)
    %81 = tt.addptr %80, %22 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc48)
    tt.store %81, %72, %28 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc49)
    %82 = tt.splat %arg9 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc50)
    %83 = tt.addptr %82, %22 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc50)
    tt.store %83, %73, %28 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc51)
    %84 = tt.addptr %arg7, %0 : !tt.ptr<f32>, i32 loc(#loc52)
    %85 = tt.splat %84 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc53)
    tt.store %85, %42, %11 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc53)
    tt.return loc(#loc54)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":23:28)
#loc3 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":25:21)
#loc4 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":26:34)
#loc5 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":31:36)
#loc6 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":31:31)
#loc7 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":31:41)
#loc8 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":32:31)
#loc9 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":32:41)
#loc10 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":33:38)
#loc11 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":33:35)
#loc12 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":33:30)
#loc13 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":33:43)
#loc14 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":34:31)
#loc15 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":34:44)
#loc16 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":38:33)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc20 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":39:27)
#loc21 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":42:19)
#loc22 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":43:19)
#loc23 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":44:20)
#loc24 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":46:35)
#loc26 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":47:29)
#loc27 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":49:20)
#loc28 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":51:20)
#loc29 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":52:28)
#loc30 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":54:20)
#loc31 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":55:20)
#loc32 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":56:20)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc34 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":57:23)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc38 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":59:20)
#loc39 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":60:24)
#loc40 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":61:20)
#loc41 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":62:25)
#loc42 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":62:36)
#loc43 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":63:25)
#loc44 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":63:36)
#loc45 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":64:4)
#loc46 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":65:28)
#loc47 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":65:40)
#loc48 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":66:25)
#loc49 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":66:45)
#loc50 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":67:25)
#loc51 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":67:45)
#loc52 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":68:25)
#loc53 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":68:37)
#loc54 = loc("inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py":68:4)
#loc55 = loc(callsite(#loc17 at #loc18))
#loc57 = loc(callsite(#loc19 at #loc17))
#loc58 = loc(callsite(#loc17 at #loc25))
#loc60 = loc(callsite(#loc33 at #loc34))
#loc61 = loc(callsite(#loc35 at #loc34))
#loc62 = loc(callsite(#loc36 at #loc34))
#loc63 = loc(callsite(#loc37 at #loc34))
#loc64 = loc(callsite(#loc57 at #loc18))
#loc65 = loc(callsite(#loc57 at #loc25))
