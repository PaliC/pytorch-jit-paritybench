; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_mul_sub_sum_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %8 = icmp slt i32 %7, 64, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %.frozen = freeze i32 %7, !dbg !13
  %11 = sdiv i32 %.frozen, 4, !dbg !13
  %12 = srem i32 %11, 4, !dbg !14
  %.frozen1 = freeze i32 %7, !dbg !15
  %13 = sdiv i32 %.frozen1, 16, !dbg !15
  %14 = mul i32 %11, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %15 = mul i32 %13, 16, !dbg !17
  %.decomposed2 = sub i32 %.frozen1, %15, !dbg !17
  %16 = shl nuw nsw i32 %10, 2, !dbg !18
  %17 = add nsw i32 %12, %16, !dbg !19
  %18 = shl i32 %13, 6, !dbg !20
  %19 = add i32 %17, %18, !dbg !21
  %20 = sext i32 %19 to i64, !dbg !22
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !22
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %8, i32 0, i1 %8) #2, !dbg !23
  %23 = bitcast i32 %22 to float, !dbg !23
  %24 = shl nsw i32 %.decomposed, 4, !dbg !24
  %25 = or disjoint i32 %24, %10, !dbg !25
  %26 = add i32 %25, %18, !dbg !26
  %27 = sext i32 %26 to i64, !dbg !27
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !27
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %8, i32 0, i1 %8) #2, !dbg !28
  %30 = bitcast i32 %29 to float, !dbg !28
  %31 = sext i32 %.decomposed2 to i64, !dbg !29
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !29
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %8) #2, !dbg !30
  %34 = bitcast i32 %33 to float, !dbg !30
  %35 = fsub float %30, %34, !dbg !31
  %36 = fmul float %35, %23, !dbg !32
  %37 = select i1 %8, float %36, float 0.000000e+00, !dbg !33
  %38 = bitcast float %37 to i32, !dbg !34
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 8, i32 31), !dbg !34
  %40 = bitcast i32 %39 to float, !dbg !34
  %41 = fadd float %37, %40, !dbg !38
  %42 = bitcast float %41 to i32, !dbg !34
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 4, i32 31), !dbg !34
  %44 = bitcast i32 %43 to float, !dbg !34
  %45 = fadd float %41, %44, !dbg !38
  %46 = bitcast float %45 to i32, !dbg !34
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 2, i32 31), !dbg !34
  %48 = bitcast i32 %47 to float, !dbg !34
  %49 = fadd float %45, %48, !dbg !38
  %50 = bitcast float %49 to i32, !dbg !34
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 1, i32 31), !dbg !34
  %52 = bitcast i32 %51 to float, !dbg !34
  %53 = fadd float %49, %52, !dbg !38
  %54 = sext i32 %7 to i64, !dbg !40
  %55 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !40
  %56 = and i32 %9, 63, !dbg !41
  %57 = icmp eq i32 %56, 0, !dbg !41
  %58 = bitcast float %53 to i32, !dbg !41
  %59 = and i1 %57, %8, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %58, ptr addrspace(1) %55, i1 %59) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfifqvbzsrbmpgcwlzybe23pvr2fdzpg4bxh4qxo7lf6c5l3ypse.py", directory: "inductor_cache/fi")
!4 = !{ptr @triton_per_fused_mul_sub_sum_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mul_sub_sum_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mul_sub_sum_3", linkageName: "triton_per_fused_mul_sub_sum_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 30, column: 21, scope: !7)
!14 = !DILocation(line: 30, column: 26, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 19, scope: !7)
!18 = !DILocation(line: 35, column: 37, scope: !7)
!19 = !DILocation(line: 35, column: 35, scope: !7)
!20 = !DILocation(line: 35, column: 45, scope: !7)
!21 = !DILocation(line: 35, column: 42, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 50, scope: !7)
!24 = !DILocation(line: 36, column: 38, scope: !7)
!25 = !DILocation(line: 36, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 43, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 51, scope: !7)
!29 = !DILocation(line: 37, column: 30, scope: !7)
!30 = !DILocation(line: 37, column: 35, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 33, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = !DILocation(line: 42, column: 24, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !37)
!39 = distinct !DILexicalBlockFile(scope: !35, file: !36, discriminator: 0)
!40 = !DILocation(line: 43, column: 25, scope: !7)
!41 = !DILocation(line: 43, column: 36, scope: !7)
!42 = !DILocation(line: 43, column: 4, scope: !7)
