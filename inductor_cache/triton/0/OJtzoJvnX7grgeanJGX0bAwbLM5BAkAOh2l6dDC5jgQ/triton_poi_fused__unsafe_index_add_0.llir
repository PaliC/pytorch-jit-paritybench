; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = icmp slt i32 %6, 512, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %9 = shl i32 %8, 10, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 2, !dbg !14
  %12 = and i32 %11, 508, !dbg !14
  %13 = or disjoint i32 %12, 1, !dbg !14
  %14 = or disjoint i32 %12, 2, !dbg !14
  %15 = or disjoint i32 %12, 3, !dbg !14
  %16 = and i32 %10, 127, !dbg !14
  %17 = or disjoint i32 %16, 128, !dbg !14
  %18 = or disjoint i32 %16, 256, !dbg !14
  %19 = or disjoint i32 %16, 384, !dbg !14
  %20 = or disjoint i32 %16, 512, !dbg !14
  %21 = or disjoint i32 %16, 640, !dbg !14
  %22 = or disjoint i32 %16, 768, !dbg !14
  %23 = or disjoint i32 %16, 896, !dbg !14
  %24 = or disjoint i32 %9, %12, !dbg !15
  %25 = or disjoint i32 %9, %13, !dbg !15
  %26 = or disjoint i32 %9, %14, !dbg !15
  %27 = or disjoint i32 %9, %15, !dbg !15
  %28 = or disjoint i32 %24, 512, !dbg !15
  %29 = or disjoint i32 %9, %16, !dbg !15
  %30 = or disjoint i32 %9, %17, !dbg !15
  %31 = or disjoint i32 %9, %18, !dbg !15
  %32 = or disjoint i32 %9, %19, !dbg !15
  %33 = or disjoint i32 %9, %20, !dbg !15
  %34 = or disjoint i32 %9, %21, !dbg !15
  %35 = or disjoint i32 %9, %22, !dbg !15
  %36 = or disjoint i32 %9, %23, !dbg !15
  %.frozen = freeze i32 %24, !dbg !16
  %37 = sdiv i32 %.frozen, 64, !dbg !16
  %38 = sdiv i32 %28, 64, !dbg !16
  %39 = mul i32 %37, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %39, !dbg !17
  %40 = srem i32 %25, 64, !dbg !17
  %41 = srem i32 %26, 64, !dbg !17
  %42 = srem i32 %27, 64, !dbg !17
  %.frozen1 = freeze i32 %6, !dbg !18
  %43 = sdiv i32 %.frozen1, 128, !dbg !18
  %44 = mul i32 %43, 128, !dbg !19
  %.decomposed2 = sub i32 %.frozen1, %44, !dbg !19
  %45 = shl i32 %6, 12, !dbg !20
  %46 = add i32 %24, %45, !dbg !21
  %47 = add i32 %45, %28, !dbg !21
  %48 = sext i32 %46 to i64, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !22
  %50 = sext i32 %47 to i64, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !22
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %7) #2, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !23
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !23
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !23
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !23
  %57 = bitcast i32 %53 to float, !dbg !23
  %58 = bitcast i32 %54 to float, !dbg !23
  %59 = bitcast i32 %55 to float, !dbg !23
  %60 = bitcast i32 %56 to float, !dbg !23
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %7) #2, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !23
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !23
  %66 = bitcast i32 %62 to float, !dbg !23
  %67 = bitcast i32 %63 to float, !dbg !23
  %68 = bitcast i32 %64 to float, !dbg !23
  %69 = bitcast i32 %65 to float, !dbg !23
  %70 = sitofp i32 %37 to float, !dbg !24
  %71 = sitofp i32 %38 to float, !dbg !24
  %72 = fmul float %70, 6.250000e-02, !dbg !25
  %73 = fmul float %71, 6.250000e-02, !dbg !25
  %74 = fptosi float %72 to i32, !dbg !26
  %75 = fptosi float %73 to i32, !dbg !26
  %76 = sitofp i32 %.decomposed to float, !dbg !27
  %77 = sitofp i32 %40 to float, !dbg !27
  %78 = sitofp i32 %41 to float, !dbg !27
  %79 = sitofp i32 %42 to float, !dbg !27
  %80 = fmul float %76, 6.250000e-02, !dbg !28
  %81 = fmul float %77, 6.250000e-02, !dbg !28
  %82 = fmul float %78, 6.250000e-02, !dbg !28
  %83 = fmul float %79, 6.250000e-02, !dbg !28
  %84 = fptosi float %80 to i32, !dbg !29
  %85 = fptosi float %81 to i32, !dbg !29
  %86 = fptosi float %82 to i32, !dbg !29
  %87 = fptosi float %83 to i32, !dbg !29
  %88 = shl i32 %74, 2, !dbg !30
  %89 = shl i32 %75, 2, !dbg !30
  %90 = shl i32 %6, 4, !dbg !31
  %91 = add i32 %88, %90, !dbg !32
  %92 = add i32 %91, %84, !dbg !33
  %93 = add i32 %91, %85, !dbg !33
  %94 = add i32 %91, %86, !dbg !33
  %95 = add i32 %91, %87, !dbg !33
  %96 = add i32 %90, %89, !dbg !32
  %97 = add i32 %96, %84, !dbg !33
  %98 = add i32 %96, %85, !dbg !33
  %99 = add i32 %96, %86, !dbg !33
  %100 = add i32 %96, %87, !dbg !33
  %101 = sext i32 %92 to i64, !dbg !34
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !34
  %103 = sext i32 %93 to i64, !dbg !34
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !34
  %105 = sext i32 %94 to i64, !dbg !34
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !34
  %107 = sext i32 %95 to i64, !dbg !34
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !34
  %109 = sext i32 %97 to i64, !dbg !34
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !34
  %111 = sext i32 %98 to i64, !dbg !34
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !34
  %113 = sext i32 %99 to i64, !dbg !34
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !34
  %115 = sext i32 %100 to i64, !dbg !34
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !34
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %7) #2, !dbg !35
  %118 = bitcast i32 %117 to float, !dbg !35
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %7) #2, !dbg !35
  %120 = bitcast i32 %119 to float, !dbg !35
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %7) #2, !dbg !35
  %122 = bitcast i32 %121 to float, !dbg !35
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %7) #2, !dbg !35
  %124 = bitcast i32 %123 to float, !dbg !35
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %7) #2, !dbg !35
  %126 = bitcast i32 %125 to float, !dbg !35
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %7) #2, !dbg !35
  %128 = bitcast i32 %127 to float, !dbg !35
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %7) #2, !dbg !35
  %130 = bitcast i32 %129 to float, !dbg !35
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %7) #2, !dbg !35
  %132 = bitcast i32 %131 to float, !dbg !35
  %133 = fadd float %57, %118, !dbg !36
  %134 = fadd float %58, %120, !dbg !36
  %135 = fadd float %59, %122, !dbg !36
  %136 = fadd float %60, %124, !dbg !36
  %137 = fadd float %66, %126, !dbg !36
  %138 = fadd float %67, %128, !dbg !36
  %139 = fadd float %68, %130, !dbg !36
  %140 = fadd float %69, %132, !dbg !36
  %141 = shl i32 %29, 7, !dbg !37
  %142 = shl i32 %30, 7, !dbg !37
  %143 = shl i32 %31, 7, !dbg !37
  %144 = shl i32 %32, 7, !dbg !37
  %145 = shl i32 %33, 7, !dbg !37
  %146 = shl i32 %34, 7, !dbg !37
  %147 = shl i32 %35, 7, !dbg !37
  %148 = shl i32 %36, 7, !dbg !37
  %149 = shl i32 %43, 19, !dbg !38
  %150 = add i32 %149, %.decomposed2, !dbg !39
  %151 = add i32 %150, %141, !dbg !40
  %152 = add i32 %150, %142, !dbg !40
  %153 = add i32 %150, %143, !dbg !40
  %154 = add i32 %150, %144, !dbg !40
  %155 = add i32 %150, %145, !dbg !40
  %156 = add i32 %150, %146, !dbg !40
  %157 = add i32 %150, %147, !dbg !40
  %158 = add i32 %150, %148, !dbg !40
  %159 = sext i32 %151 to i64, !dbg !41
  %160 = getelementptr float, ptr addrspace(1) %2, i64 %159, !dbg !41
  %161 = sext i32 %152 to i64, !dbg !41
  %162 = getelementptr float, ptr addrspace(1) %2, i64 %161, !dbg !41
  %163 = sext i32 %153 to i64, !dbg !41
  %164 = getelementptr float, ptr addrspace(1) %2, i64 %163, !dbg !41
  %165 = sext i32 %154 to i64, !dbg !41
  %166 = getelementptr float, ptr addrspace(1) %2, i64 %165, !dbg !41
  %167 = sext i32 %155 to i64, !dbg !41
  %168 = getelementptr float, ptr addrspace(1) %2, i64 %167, !dbg !41
  %169 = sext i32 %156 to i64, !dbg !41
  %170 = getelementptr float, ptr addrspace(1) %2, i64 %169, !dbg !41
  %171 = sext i32 %157 to i64, !dbg !41
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %171, !dbg !41
  %173 = sext i32 %158 to i64, !dbg !41
  %174 = getelementptr float, ptr addrspace(1) %2, i64 %173, !dbg !41
  %175 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !42
  %176 = bitcast float %133 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %176, i1 true) #2, !dbg !42
  %177 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !42
  %178 = bitcast float %134 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %178, i1 true) #2, !dbg !42
  %179 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !42
  %180 = bitcast float %135 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !42
  %181 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !42
  %182 = bitcast float %136 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 true) #2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !42
  %184 = load i32, ptr addrspace(3) %183, align 4, !dbg !42
  %185 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !42
  %186 = load i32, ptr addrspace(3) %185, align 4, !dbg !42
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !42
  %188 = load i32, ptr addrspace(3) %187, align 4, !dbg !42
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !42
  %190 = load i32, ptr addrspace(3) %189, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %191 = bitcast float %137 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %191, i1 true) #2, !dbg !42
  %192 = bitcast float %138 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %192, i1 true) #2, !dbg !42
  %193 = bitcast float %139 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %193, i1 true) #2, !dbg !42
  %194 = bitcast float %140 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %194, i1 true) #2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %195 = load i32, ptr addrspace(3) %183, align 4, !dbg !42
  %196 = load i32, ptr addrspace(3) %185, align 4, !dbg !42
  %197 = load i32, ptr addrspace(3) %187, align 4, !dbg !42
  %198 = load i32, ptr addrspace(3) %189, align 4, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %184, ptr addrspace(1) %160, i1 %7) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %186, ptr addrspace(1) %162, i1 %7) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %188, ptr addrspace(1) %164, i1 %7) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %190, ptr addrspace(1) %166, i1 %7) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %168, i1 %7) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %196, ptr addrspace(1) %170, i1 %7) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %197, ptr addrspace(1) %172, i1 %7) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %198, ptr addrspace(1) %174, i1 %7) #2, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbzixknvbypz6iruufz3qq5iwdohfj4omjds3fudqetucvsnj6ei.py", directory: "inductor_cache/bz")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_0", linkageName: "triton_poi_fused__unsafe_index_add_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 28, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 41, scope: !7)
!21 = !DILocation(line: 34, column: 36, scope: !7)
!22 = !DILocation(line: 34, column: 31, scope: !7)
!23 = !DILocation(line: 34, column: 46, scope: !7)
!24 = !DILocation(line: 36, column: 19, scope: !7)
!25 = !DILocation(line: 38, column: 18, scope: !7)
!26 = !DILocation(line: 39, column: 19, scope: !7)
!27 = !DILocation(line: 41, column: 19, scope: !7)
!28 = !DILocation(line: 42, column: 18, scope: !7)
!29 = !DILocation(line: 43, column: 19, scope: !7)
!30 = !DILocation(line: 44, column: 39, scope: !7)
!31 = !DILocation(line: 44, column: 49, scope: !7)
!32 = !DILocation(line: 44, column: 37, scope: !7)
!33 = !DILocation(line: 44, column: 46, scope: !7)
!34 = !DILocation(line: 44, column: 30, scope: !7)
!35 = !DILocation(line: 44, column: 54, scope: !7)
!36 = !DILocation(line: 45, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 34, scope: !7)
!38 = !DILocation(line: 46, column: 46, scope: !7)
!39 = !DILocation(line: 46, column: 30, scope: !7)
!40 = !DILocation(line: 46, column: 39, scope: !7)
!41 = !DILocation(line: 46, column: 25, scope: !7)
!42 = !DILocation(line: 46, column: 58, scope: !7)
!43 = !DILocation(line: 46, column: 4, scope: !7)
