; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_3 = internal constant [8 x i8] c"unknown\00"
@assertFile_3 = internal constant [74 x i8] c"inductor_cache/bs/cbsicsqji23fdxzjlziry3a6hhdh64kajei6ficiqtypdite3foo.py\00"
@assertMessage_3 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp31 < 13\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/bs/cbsicsqji23fdxzjlziry3a6hhdh64kajei6ficiqtypdite3foo.py\00"
@assertMessage_2 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp22 < 32\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/bs/cbsicsqji23fdxzjlziry3a6hhdh64kajei6ficiqtypdite3foo.py\00"
@assertMessage_1 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp13 < 7\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/bs/cbsicsqji23fdxzjlziry3a6hhdh64kajei6ficiqtypdite3foo.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp5 < 24\00"

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_add_embedding_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !11 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %9 = shl i32 %8, 7, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = and i32 %10, 127, !dbg !14
  %12 = or disjoint i32 %9, %11, !dbg !15
  %13 = icmp slt i32 %12, 256, !dbg !16
  %.frozen = freeze i32 %12, !dbg !17
  %14 = sdiv i32 %.frozen, 4, !dbg !17
  %15 = srem i32 %14, 4, !dbg !18
  %16 = sdiv i32 %12, 16, !dbg !19
  %17 = shl nsw i32 %16, 4, !dbg !20
  %18 = add i32 %17, %15, !dbg !21
  %19 = add i32 %18, 12, !dbg !22
  %20 = sext i32 %19 to i64, !dbg !23
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !23
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %13) #3, !dbg !24
  %23 = bitcast i32 %22 to float, !dbg !24
  %24 = add i32 %18, 8, !dbg !25
  %25 = sext i32 %24 to i64, !dbg !26
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !26
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %13) #3, !dbg !27
  %28 = add i32 %18, 4, !dbg !28
  %29 = sext i32 %28 to i64, !dbg !29
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !29
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %13) #3, !dbg !30
  %32 = bitcast i32 %31 to float, !dbg !30
  %33 = sext i32 %18 to i64, !dbg !31
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !31
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %13) #3, !dbg !32
  %36 = bitcast i32 %35 to float, !dbg !32
  %37 = fptosi float %23 to i64, !dbg !33
  %38 = add i64 %37, 24, !dbg !34
  %39 = icmp slt i64 %37, 0, !dbg !35
  %40 = select i1 %39, i64 %38, i64 %37, !dbg !36
  %41 = icmp ugt i64 %40, 23, !dbg !37
  %.not1 = and i1 %13, %41, !dbg !38
  br i1 %.not1, label %42, label %43, !dbg !38

42:                                               ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 37, ptr nonnull @assertFunc_0, i64 1), !dbg !38
  unreachable, !dbg !38

43:                                               ; preds = %7
  %44 = bitcast i32 %27 to float, !dbg !27
  %45 = mul i32 %14, 4, !dbg !39
  %.decomposed = sub i32 %.frozen, %45, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %46 = sext i32 %.decomposed to i64, !dbg !40
  %.idx = shl i64 %40, 4, !dbg !41
  %47 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !41
  %48 = getelementptr float, ptr addrspace(1) %47, i64 %46, !dbg !41
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %13) #3, !dbg !42
  %50 = fptosi float %44 to i64, !dbg !43
  %51 = add i64 %50, 7, !dbg !44
  %52 = icmp slt i64 %50, 0, !dbg !45
  %53 = select i1 %52, i64 %51, i64 %50, !dbg !46
  %54 = icmp ugt i64 %53, 6, !dbg !47
  %.not2 = and i1 %13, %54, !dbg !48
  br i1 %.not2, label %55, label %56, !dbg !48

55:                                               ; preds = %43
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 44, ptr nonnull @assertFunc_1, i64 1), !dbg !48
  unreachable, !dbg !48

56:                                               ; preds = %43
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %.idx3 = shl i64 %53, 4, !dbg !49
  %57 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx3, !dbg !49
  %58 = getelementptr float, ptr addrspace(1) %57, i64 %46, !dbg !49
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %13) #3, !dbg !50
  %60 = fptosi float %32 to i64, !dbg !51
  %61 = lshr i64 %60, 58, !dbg !52
  %62 = and i64 %61, 32, !dbg !52
  %63 = add i64 %62, %60, !dbg !52
  %64 = icmp ugt i64 %63, 31, !dbg !53
  %.not4 = and i1 %13, %64, !dbg !54
  br i1 %.not4, label %65, label %66, !dbg !54

65:                                               ; preds = %56
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 52, ptr nonnull @assertFunc_2, i64 1), !dbg !54
  unreachable, !dbg !54

66:                                               ; preds = %56
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %.idx5 = shl i64 %63, 4, !dbg !55
  %67 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx5, !dbg !55
  %68 = getelementptr float, ptr addrspace(1) %67, i64 %46, !dbg !55
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %13) #3, !dbg !56
  %70 = fptosi float %36 to i64, !dbg !57
  %71 = add i64 %70, 13, !dbg !58
  %72 = icmp slt i64 %70, 0, !dbg !59
  %73 = select i1 %72, i64 %71, i64 %70, !dbg !60
  %74 = icmp ugt i64 %73, 12, !dbg !61
  %.not6 = and i1 %13, %74, !dbg !62
  br i1 %.not6, label %75, label %76, !dbg !62

75:                                               ; preds = %66
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 60, ptr nonnull @assertFunc_3, i64 1), !dbg !62
  unreachable, !dbg !62

76:                                               ; preds = %66
  %77 = bitcast i32 %49 to float, !dbg !42
  %78 = bitcast i32 %59 to float, !dbg !50
  %79 = fadd float %77, %78, !dbg !63
  %80 = bitcast i32 %69 to float, !dbg !56
  %81 = fadd float %79, %80, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %.idx7 = shl i64 %73, 4, !dbg !65
  %82 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx7, !dbg !65
  %83 = getelementptr float, ptr addrspace(1) %82, i64 %46, !dbg !65
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %13) #3, !dbg !66
  %85 = bitcast i32 %84 to float, !dbg !66
  %86 = fadd float %81, %85, !dbg !67
  %87 = fadd float %86, 0.000000e+00, !dbg !68
  %88 = sext i32 %12 to i64, !dbg !69
  %89 = getelementptr float, ptr addrspace(1) %5, i64 %88, !dbg !69
  %90 = bitcast float %87 to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %90, ptr addrspace(1) %89, i1 %13) #3, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbsicsqji23fdxzjlziry3a6hhdh64kajei6ficiqtypdite3foo.py", directory: "inductor_cache/bs")
!4 = !{ptr @triton_poi_fused_add_embedding_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_embedding_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_add_embedding_0", linkageName: "triton_poi_fused_add_embedding_0", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 24, column: 21, scope: !11)
!18 = !DILocation(line: 24, column: 26, scope: !11)
!19 = !DILocation(line: 25, column: 19, scope: !11)
!20 = !DILocation(line: 28, column: 43, scope: !11)
!21 = !DILocation(line: 28, column: 35, scope: !11)
!22 = !DILocation(line: 28, column: 40, scope: !11)
!23 = !DILocation(line: 28, column: 30, scope: !11)
!24 = !DILocation(line: 28, column: 48, scope: !11)
!25 = !DILocation(line: 29, column: 39, scope: !11)
!26 = !DILocation(line: 29, column: 30, scope: !11)
!27 = !DILocation(line: 29, column: 47, scope: !11)
!28 = !DILocation(line: 30, column: 40, scope: !11)
!29 = !DILocation(line: 30, column: 31, scope: !11)
!30 = !DILocation(line: 30, column: 48, scope: !11)
!31 = !DILocation(line: 31, column: 31, scope: !11)
!32 = !DILocation(line: 31, column: 44, scope: !11)
!33 = !DILocation(line: 32, column: 19, scope: !11)
!34 = !DILocation(line: 34, column: 18, scope: !11)
!35 = !DILocation(line: 35, column: 18, scope: !11)
!36 = !DILocation(line: 36, column: 32, scope: !11)
!37 = !DILocation(line: 37, column: 37, scope: !11)
!38 = !DILocation(line: 37, column: 61, scope: !11)
!39 = !DILocation(line: 26, column: 19, scope: !11)
!40 = !DILocation(line: 38, column: 35, scope: !11)
!41 = !DILocation(line: 38, column: 30, scope: !11)
!42 = !DILocation(line: 38, column: 44, scope: !11)
!43 = !DILocation(line: 39, column: 19, scope: !11)
!44 = !DILocation(line: 41, column: 19, scope: !11)
!45 = !DILocation(line: 42, column: 19, scope: !11)
!46 = !DILocation(line: 43, column: 35, scope: !11)
!47 = !DILocation(line: 44, column: 38, scope: !11)
!48 = !DILocation(line: 44, column: 62, scope: !11)
!49 = !DILocation(line: 45, column: 31, scope: !11)
!50 = !DILocation(line: 45, column: 46, scope: !11)
!51 = !DILocation(line: 47, column: 21, scope: !11)
!52 = !DILocation(line: 51, column: 35, scope: !11)
!53 = !DILocation(line: 52, column: 38, scope: !11)
!54 = !DILocation(line: 52, column: 63, scope: !11)
!55 = !DILocation(line: 53, column: 31, scope: !11)
!56 = !DILocation(line: 53, column: 46, scope: !11)
!57 = !DILocation(line: 55, column: 21, scope: !11)
!58 = !DILocation(line: 57, column: 20, scope: !11)
!59 = !DILocation(line: 58, column: 20, scope: !11)
!60 = !DILocation(line: 59, column: 35, scope: !11)
!61 = !DILocation(line: 60, column: 38, scope: !11)
!62 = !DILocation(line: 60, column: 63, scope: !11)
!63 = !DILocation(line: 46, column: 19, scope: !11)
!64 = !DILocation(line: 54, column: 20, scope: !11)
!65 = !DILocation(line: 61, column: 31, scope: !11)
!66 = !DILocation(line: 61, column: 46, scope: !11)
!67 = !DILocation(line: 62, column: 20, scope: !11)
!68 = !DILocation(line: 64, column: 20, scope: !11)
!69 = !DILocation(line: 65, column: 25, scope: !11)
!70 = !DILocation(line: 65, column: 37, scope: !11)
!71 = !DILocation(line: 65, column: 4, scope: !11)
