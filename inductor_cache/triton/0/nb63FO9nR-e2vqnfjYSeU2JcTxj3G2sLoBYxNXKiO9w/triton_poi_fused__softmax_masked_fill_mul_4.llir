; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_masked_fill_mul_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 64, !dbg !14
  %13 = shl i32 %11, 2, !dbg !15
  %14 = or disjoint i32 %13, 4, !dbg !15
  %15 = sext i32 %13 to i64, !dbg !16
  %16 = getelementptr i1, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = sext i32 %14 to i64, !dbg !16
  %18 = getelementptr i1, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %16, i1 %12) #1, !dbg !17
  %20 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %18, i1 %12) #1, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %12) #1, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %12) #1, !dbg !19
  %25 = or disjoint i32 %13, 1, !dbg !20
  %26 = or disjoint i32 %13, 5, !dbg !20
  %27 = sext i32 %25 to i64, !dbg !21
  %28 = getelementptr i1, ptr addrspace(1) %0, i64 %27, !dbg !21
  %29 = sext i32 %26 to i64, !dbg !21
  %30 = getelementptr i1, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %12) #1, !dbg !22
  %32 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %12) #1, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %12) #1, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %12) #1, !dbg !24
  %37 = or disjoint i32 %13, 2, !dbg !25
  %38 = or disjoint i32 %13, 6, !dbg !25
  %39 = sext i32 %37 to i64, !dbg !26
  %40 = getelementptr i1, ptr addrspace(1) %0, i64 %39, !dbg !26
  %41 = sext i32 %38 to i64, !dbg !26
  %42 = getelementptr i1, ptr addrspace(1) %0, i64 %41, !dbg !26
  %43 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %12) #1, !dbg !27
  %44 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %42, i1 %12) #1, !dbg !27
  %.not4 = icmp eq i8 %43, 0, !dbg !27
  %.not5 = icmp eq i8 %44, 0, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !28
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %12) #1, !dbg !29
  %48 = bitcast i32 %47 to float, !dbg !29
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %12) #1, !dbg !29
  %50 = bitcast i32 %49 to float, !dbg !29
  %51 = or disjoint i32 %13, 3, !dbg !30
  %52 = or disjoint i32 %13, 7, !dbg !30
  %53 = sext i32 %51 to i64, !dbg !31
  %54 = getelementptr i1, ptr addrspace(1) %0, i64 %53, !dbg !31
  %55 = sext i32 %52 to i64, !dbg !31
  %56 = getelementptr i1, ptr addrspace(1) %0, i64 %55, !dbg !31
  %57 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %54, i1 %12) #1, !dbg !32
  %58 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %56, i1 %12) #1, !dbg !32
  %.not6 = icmp eq i8 %57, 0, !dbg !32
  %.not7 = icmp eq i8 %58, 0, !dbg !32
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !33
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !33
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %12) #1, !dbg !34
  %62 = bitcast i32 %61 to float, !dbg !34
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %12) #1, !dbg !34
  %64 = bitcast i32 %63 to float, !dbg !34
  %65 = insertelement <2 x i8> poison, i8 %19, i64 0, !dbg !17
  %66 = insertelement <2 x i8> %65, i8 %31, i64 1, !dbg !17
  %67 = icmp eq <2 x i8> %66, zeroinitializer, !dbg !17
  %68 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !19
  %69 = insertelement <2 x i32> %68, i32 %35, i64 1, !dbg !19
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !19
  %71 = select <2 x i1> %67, <2 x float> %70, <2 x float> splat (float 0xFFF0000000000000), !dbg !35
  %72 = insertelement <2 x i8> poison, i8 %20, i64 0, !dbg !17
  %73 = insertelement <2 x i8> %72, i8 %32, i64 1, !dbg !17
  %74 = icmp eq <2 x i8> %73, zeroinitializer, !dbg !17
  %75 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !19
  %76 = insertelement <2 x i32> %75, i32 %36, i64 1, !dbg !19
  %77 = bitcast <2 x i32> %76 to <2 x float>, !dbg !19
  %78 = select <2 x i1> %74, <2 x float> %77, <2 x float> splat (float 0xFFF0000000000000), !dbg !35
  %79 = extractelement <2 x float> %71, i64 0, !dbg !36
  %80 = extractelement <2 x float> %71, i64 1, !dbg !37
  %81 = fcmp ogt float %79, %80, !dbg !38
  %82 = extractelement <2 x float> %78, i64 0, !dbg !36
  %83 = extractelement <2 x float> %78, i64 1, !dbg !37
  %84 = fcmp ogt float %82, %83, !dbg !38
  %85 = fcmp uno float %79, 0.000000e+00, !dbg !42
  %86 = fcmp uno float %82, 0.000000e+00, !dbg !42
  %87 = or i1 %85, %81, !dbg !43
  %88 = or i1 %86, %84, !dbg !43
  %89 = select i1 %87, float %79, float %80, !dbg !44
  %90 = select i1 %88, float %82, float %83, !dbg !44
  %91 = select i1 %.not4, float %48, float 0xFFF0000000000000, !dbg !45
  %92 = select i1 %.not5, float %50, float 0xFFF0000000000000, !dbg !45
  %93 = fcmp ogt float %89, %91, !dbg !46
  %94 = fcmp ogt float %90, %92, !dbg !46
  %95 = fcmp uno float %89, 0.000000e+00, !dbg !48
  %96 = fcmp uno float %90, 0.000000e+00, !dbg !48
  %97 = or i1 %95, %93, !dbg !49
  %98 = or i1 %96, %94, !dbg !49
  %99 = select i1 %97, float %89, float %91, !dbg !50
  %100 = select i1 %98, float %90, float %92, !dbg !50
  %101 = select i1 %.not6, float %62, float 0xFFF0000000000000, !dbg !51
  %102 = select i1 %.not7, float %64, float 0xFFF0000000000000, !dbg !51
  %103 = fcmp ogt float %99, %101, !dbg !52
  %104 = fcmp ogt float %100, %102, !dbg !52
  %105 = fcmp uno float %99, 0.000000e+00, !dbg !54
  %106 = fcmp uno float %100, 0.000000e+00, !dbg !54
  %107 = or i1 %105, %103, !dbg !55
  %108 = or i1 %106, %104, !dbg !55
  %109 = select i1 %107, float %99, float %101, !dbg !56
  %110 = select i1 %108, float %100, float %102, !dbg !56
  %111 = fsub float %79, %109, !dbg !36
  %112 = fsub float %82, %110, !dbg !36
  %113 = fmul float %111, 0x3FF7154760000000, !dbg !57
  %114 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %113) #1, !dbg !57
  %115 = fmul float %112, 0x3FF7154760000000, !dbg !57
  %116 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %115) #1, !dbg !57
  %117 = fsub float %80, %109, !dbg !37
  %118 = fsub float %83, %110, !dbg !37
  %119 = fmul float %117, 0x3FF7154760000000, !dbg !58
  %120 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %119) #1, !dbg !58
  %121 = fmul float %118, 0x3FF7154760000000, !dbg !58
  %122 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %121) #1, !dbg !58
  %123 = fadd float %114, %120, !dbg !59
  %124 = fadd float %116, %122, !dbg !59
  %125 = fsub float %91, %109, !dbg !60
  %126 = fsub float %92, %110, !dbg !60
  %127 = fmul float %125, 0x3FF7154760000000, !dbg !61
  %128 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %127) #1, !dbg !61
  %129 = fmul float %126, 0x3FF7154760000000, !dbg !61
  %130 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %129) #1, !dbg !61
  %131 = fadd float %123, %128, !dbg !62
  %132 = fadd float %124, %130, !dbg !62
  %133 = fsub float %101, %109, !dbg !63
  %134 = fsub float %102, %110, !dbg !63
  %135 = fmul float %133, 0x3FF7154760000000, !dbg !64
  %136 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %135) #1, !dbg !64
  %137 = fmul float %134, 0x3FF7154760000000, !dbg !64
  %138 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %137) #1, !dbg !64
  %139 = fadd float %131, %136, !dbg !65
  %140 = fadd float %132, %138, !dbg !65
  %141 = sext i32 %11 to i64, !dbg !66
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %141, !dbg !66
  %143 = bitcast float %109 to i32, !dbg !67
  %144 = bitcast float %110 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %143, i32 %144, ptr addrspace(1) %142, i1 %12) #1, !dbg !67
  %145 = getelementptr float, ptr addrspace(1) %3, i64 %141, !dbg !68
  %146 = bitcast float %139 to i32, !dbg !69
  %147 = bitcast float %140 to i32, !dbg !69
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %146, i32 %147, ptr addrspace(1) %145, i1 %12) #1, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm5n65s7tovagnw2dorqecejyfynn4q2gbsezb7ghqwvxwytjww6.py", directory: "inductor_cache/m5")
!4 = !{ptr @triton_poi_fused__softmax_masked_fill_mul_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_masked_fill_mul_4, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_masked_fill_mul_4", linkageName: "triton_poi_fused__softmax_masked_fill_mul_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 37, scope: !7)
!20 = !DILocation(line: 27, column: 34, scope: !7)
!21 = !DILocation(line: 27, column: 30, scope: !7)
!22 = !DILocation(line: 27, column: 41, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 35, scope: !7)
!26 = !DILocation(line: 29, column: 31, scope: !7)
!27 = !DILocation(line: 29, column: 42, scope: !7)
!28 = !DILocation(line: 30, column: 31, scope: !7)
!29 = !DILocation(line: 30, column: 42, scope: !7)
!30 = !DILocation(line: 31, column: 35, scope: !7)
!31 = !DILocation(line: 31, column: 31, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 42, scope: !7)
!35 = !DILocation(line: 36, column: 32, scope: !7)
!36 = !DILocation(line: 46, column: 19, scope: !7)
!37 = !DILocation(line: 48, column: 19, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 39, column: 41, scope: !7)
!42 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 41, column: 34, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !47)
!47 = !DILocation(line: 42, column: 42, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !47)
!51 = !DILocation(line: 44, column: 34, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !53)
!53 = !DILocation(line: 45, column: 42, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !53)
!56 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !53)
!57 = !DILocation(line: 47, column: 24, scope: !7)
!58 = !DILocation(line: 49, column: 24, scope: !7)
!59 = !DILocation(line: 50, column: 20, scope: !7)
!60 = !DILocation(line: 51, column: 20, scope: !7)
!61 = !DILocation(line: 52, column: 24, scope: !7)
!62 = !DILocation(line: 53, column: 20, scope: !7)
!63 = !DILocation(line: 54, column: 20, scope: !7)
!64 = !DILocation(line: 55, column: 24, scope: !7)
!65 = !DILocation(line: 56, column: 20, scope: !7)
!66 = !DILocation(line: 57, column: 25, scope: !7)
!67 = !DILocation(line: 57, column: 37, scope: !7)
!68 = !DILocation(line: 58, column: 25, scope: !7)
!69 = !DILocation(line: 58, column: 37, scope: !7)
!70 = !DILocation(line: 58, column: 4, scope: !7)
