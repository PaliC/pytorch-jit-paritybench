; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 3, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = and i32 %11, 7, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = icmp slt i32 %15, 16, !dbg !14
  %17 = shl i32 %11, 1, !dbg !15
  %18 = and i32 %17, 14, !dbg !15
  %19 = shl i32 %15, 4, !dbg !16
  %20 = or disjoint i32 %19, %18, !dbg !17
  %21 = sext i32 %20 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !19
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !19
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !19
  %26 = bitcast i32 %24 to float, !dbg !19
  %27 = bitcast i32 %25 to float, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !20
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %28, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !21
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !21
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !21
  %32 = bitcast i32 %30 to float, !dbg !21
  %33 = bitcast i32 %31 to float, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !22
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !23
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !23
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !23
  %38 = bitcast i32 %36 to float, !dbg !23
  %39 = bitcast i32 %37 to float, !dbg !23
  %40 = select i1 %16, float %26, float 0.000000e+00, !dbg !24
  %41 = select i1 %16, float %27, float 0.000000e+00, !dbg !24
  %42 = select i1 %16, float %38, float 0.000000e+00, !dbg !25
  %43 = select i1 %16, float %39, float 0.000000e+00, !dbg !25
  %44 = fsub float %41, %40, !dbg !26
  %45 = fadd float %42, %43, !dbg !31
  %46 = fcmp oeq float %45, 0.000000e+00, !dbg !32
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float %45) #5, !dbg !33
  %48 = select i1 %46, float 0.000000e+00, float %47, !dbg !34
  %49 = fmul float %44, %48, !dbg !35
  %50 = fadd float %40, %49, !dbg !36
  %51 = fadd float %32, %33, !dbg !37
  %52 = select i1 %16, float %51, float 0.000000e+00, !dbg !37
  %53 = fmul float %44, %44, !dbg !38
  %54 = fmul float %53, %42, !dbg !39
  %55 = fmul float %54, %48, !dbg !40
  %56 = fadd float %52, %55, !dbg !41
  %57 = bitcast float %50 to i32, !dbg !42
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 4, i32 31), !dbg !42
  %59 = bitcast i32 %58 to float, !dbg !42
  %60 = bitcast float %56 to i32, !dbg !42
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 4, i32 31), !dbg !42
  %62 = bitcast i32 %61 to float, !dbg !42
  %63 = bitcast float %45 to i32, !dbg !42
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 4, i32 31), !dbg !42
  %65 = bitcast i32 %64 to float, !dbg !42
  %66 = fsub float %59, %50, !dbg !26
  %67 = fadd float %45, %65, !dbg !31
  %68 = fcmp oeq float %67, 0.000000e+00, !dbg !32
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float %67) #5, !dbg !33
  %70 = select i1 %68, float 0.000000e+00, float %69, !dbg !34
  %71 = fmul float %70, %66, !dbg !35
  %72 = fadd float %50, %71, !dbg !36
  %73 = fadd float %56, %62, !dbg !37
  %74 = fmul float %66, %66, !dbg !38
  %75 = fmul float %45, %74, !dbg !39
  %76 = fmul float %70, %75, !dbg !40
  %77 = fadd float %73, %76, !dbg !41
  %78 = bitcast float %72 to i32, !dbg !42
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 2, i32 31), !dbg !42
  %80 = bitcast i32 %79 to float, !dbg !42
  %81 = bitcast float %77 to i32, !dbg !42
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 2, i32 31), !dbg !42
  %83 = bitcast i32 %82 to float, !dbg !42
  %84 = bitcast float %67 to i32, !dbg !42
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 2, i32 31), !dbg !42
  %86 = bitcast i32 %85 to float, !dbg !42
  %87 = fsub float %80, %72, !dbg !26
  %88 = fadd float %67, %86, !dbg !31
  %89 = fcmp oeq float %88, 0.000000e+00, !dbg !32
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %88) #5, !dbg !33
  %91 = select i1 %89, float 0.000000e+00, float %90, !dbg !34
  %92 = fmul float %87, %91, !dbg !35
  %93 = fadd float %72, %92, !dbg !36
  %94 = fadd float %77, %83, !dbg !37
  %95 = fmul float %87, %87, !dbg !38
  %96 = fmul float %67, %95, !dbg !39
  %97 = fmul float %91, %96, !dbg !40
  %98 = fadd float %94, %97, !dbg !41
  %99 = bitcast float %93 to i32, !dbg !42
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !42
  %101 = bitcast i32 %100 to float, !dbg !42
  %102 = bitcast float %98 to i32, !dbg !42
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 1, i32 31), !dbg !42
  %104 = bitcast i32 %103 to float, !dbg !42
  %105 = bitcast float %88 to i32, !dbg !42
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 1, i32 31), !dbg !42
  %107 = bitcast i32 %106 to float, !dbg !42
  %108 = fsub float %101, %93, !dbg !26
  %109 = fadd float %88, %107, !dbg !31
  %110 = fcmp oeq float %109, 0.000000e+00, !dbg !32
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %109) #5, !dbg !33
  %112 = select i1 %110, float 0.000000e+00, float %111, !dbg !34
  %113 = fmul float %108, %112, !dbg !35
  %114 = fadd float %93, %113, !dbg !36
  %115 = fadd float %98, %104, !dbg !37
  %116 = fmul float %108, %108, !dbg !38
  %117 = fmul float %88, %116, !dbg !39
  %118 = fmul float %112, %117, !dbg !40
  %119 = fadd float %115, %118, !dbg !41
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !43
  %121 = bitcast float %114 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !43
  %123 = load i32, ptr addrspace(3) %122, align 4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %124 = bitcast float %119 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %124, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %125 = load float, ptr addrspace(3) %122, align 4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %124, i1 true) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %126 = load i32, ptr addrspace(3) %122, align 4, !dbg !45
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float 1.310720e+05) #5, !dbg !46
  %128 = fadd float %127, 0x3EE4F8B580000000, !dbg !47
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i = icmp eq i32 %129, 0, !dbg !44
  br i1 %.not.i, label %132, label %130, !dbg !44

130:                                              ; preds = %8
  %131 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %128), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

132:                                              ; preds = %8
  %133 = tail call float @llvm.nvvm.rsqrt.approx.f(float %128), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

__nv_rsqrtf.exit:                                 ; preds = %130, %132
  %.0.i = phi float [ %131, %130 ], [ %133, %132 ], !dbg !44
  %134 = or disjoint i32 %10, %14, !dbg !13
  %135 = icmp slt i32 %134, 16, !dbg !14
  %136 = sext i32 %134 to i64, !dbg !48
  %137 = getelementptr float, ptr addrspace(1) %5, i64 %136, !dbg !48
  %138 = and i32 %11, 56, !dbg !49
  %139 = icmp eq i32 %138, 0, !dbg !49
  %140 = bitcast float %.0.i to i32, !dbg !49
  %141 = and i1 %139, %135, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %137, i1 %141) #5, !dbg !49
  %142 = getelementptr float, ptr addrspace(1) %3, i64 %136, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %142, i1 %141) #5, !dbg !51
  %143 = getelementptr float, ptr addrspace(1) %4, i64 %136, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %126, ptr addrspace(1) %143, i1 %141) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbduzbbpezz6ckvxgwqoh25p4epldvmktal5rk33yhmyzpujo2c7.py", directory: "inductor_cache/bd")
!4 = !{ptr @triton_per_fused_native_group_norm_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_6, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_6", linkageName: "triton_per_fused_native_group_norm_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 43, scope: !7)
!24 = !DILocation(line: 37, column: 33, scope: !7)
!25 = !DILocation(line: 39, column: 33, scope: !7)
!26 = !DILocation(line: 192, column: 21, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!30 = !DILocation(line: 40, column: 67, scope: !7)
!31 = !DILocation(line: 193, column: 28, scope: !27, inlinedAt: !30)
!32 = !DILocation(line: 194, column: 39, scope: !27, inlinedAt: !30)
!33 = !DILocation(line: 194, column: 60, scope: !27, inlinedAt: !30)
!34 = !DILocation(line: 194, column: 49, scope: !27, inlinedAt: !30)
!35 = !DILocation(line: 196, column: 25, scope: !27, inlinedAt: !30)
!36 = !DILocation(line: 196, column: 17, scope: !27, inlinedAt: !30)
!37 = !DILocation(line: 197, column: 15, scope: !27, inlinedAt: !30)
!38 = !DILocation(line: 197, column: 30, scope: !27, inlinedAt: !30)
!39 = !DILocation(line: 197, column: 38, scope: !27, inlinedAt: !30)
!40 = !DILocation(line: 197, column: 49, scope: !27, inlinedAt: !30)
!41 = !DILocation(line: 197, column: 22, scope: !27, inlinedAt: !30)
!42 = !DILocation(line: 204, column: 46, scope: !29, inlinedAt: !30)
!43 = !DILocation(line: 41, column: 18, scope: !7)
!44 = !DILocation(line: 48, column: 28, scope: !7)
!45 = !DILocation(line: 42, column: 18, scope: !7)
!46 = !DILocation(line: 45, column: 20, scope: !7)
!47 = !DILocation(line: 47, column: 20, scope: !7)
!48 = !DILocation(line: 49, column: 25, scope: !7)
!49 = !DILocation(line: 49, column: 37, scope: !7)
!50 = !DILocation(line: 50, column: 25, scope: !7)
!51 = !DILocation(line: 50, column: 37, scope: !7)
!52 = !DILocation(line: 51, column: 25, scope: !7)
!53 = !DILocation(line: 51, column: 37, scope: !7)
!54 = !DILocation(line: 51, column: 4, scope: !7)
