; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_div_mul_pow_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 53824, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %16 = sdiv i32 %.frozen, 13456, !dbg !15
  %17 = mul i32 %16, 13456, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %.frozen1 = freeze i32 %14, !dbg !17
  %18 = sdiv i32 %.frozen1, 3364, !dbg !17
  %19 = mul i32 %18, 3364, !dbg !18
  %.decomposed2 = sub i32 %.frozen1, %19, !dbg !18
  %20 = sext i32 %.decomposed to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !19
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 %15) #1, !dbg !20
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !20
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !20
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !20
  %27 = bitcast i32 %23 to float, !dbg !20
  %28 = bitcast i32 %24 to float, !dbg !20
  %29 = bitcast i32 %25 to float, !dbg !20
  %30 = bitcast i32 %26 to float, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !21
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %15) #1, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !22
  %37 = bitcast i32 %33 to float, !dbg !22
  %38 = bitcast i32 %34 to float, !dbg !22
  %39 = bitcast i32 %35 to float, !dbg !22
  %40 = bitcast i32 %36 to float, !dbg !22
  %41 = sext i32 %16 to i64, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !23
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %15) #1, !dbg !24
  %44 = bitcast i32 %43 to float, !dbg !24
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %15) #1, !dbg !24
  %46 = bitcast i32 %45 to float, !dbg !24
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %15) #1, !dbg !24
  %48 = bitcast i32 %47 to float, !dbg !24
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %15) #1, !dbg !24
  %50 = bitcast i32 %49 to float, !dbg !24
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %15) #1, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !26
  %57 = bitcast i32 %53 to float, !dbg !26
  %58 = bitcast i32 %54 to float, !dbg !26
  %59 = bitcast i32 %55 to float, !dbg !26
  %60 = bitcast i32 %56 to float, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !27
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %15) #1, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %67 = bitcast i32 %63 to float, !dbg !28
  %68 = bitcast i32 %64 to float, !dbg !28
  %69 = bitcast i32 %65 to float, !dbg !28
  %70 = bitcast i32 %66 to float, !dbg !28
  %71 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !29
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %15) #1, !dbg !30
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !30
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !30
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !30
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !30
  %77 = bitcast i32 %73 to float, !dbg !30
  %78 = bitcast i32 %74 to float, !dbg !30
  %79 = bitcast i32 %75 to float, !dbg !30
  %80 = bitcast i32 %76 to float, !dbg !30
  %81 = fmul float %27, 2.000000e+00, !dbg !31
  %82 = fmul float %28, 2.000000e+00, !dbg !31
  %83 = fmul float %29, 2.000000e+00, !dbg !31
  %84 = fmul float %30, 2.000000e+00, !dbg !31
  %85 = fmul float %81, %37, !dbg !32
  %86 = fmul float %82, %38, !dbg !32
  %87 = fmul float %83, %39, !dbg !32
  %88 = fmul float %84, %40, !dbg !32
  %89 = fmul float %44, 1.000000e+05, !dbg !33
  %90 = fmul float %46, 1.000000e+05, !dbg !33
  %91 = fmul float %48, 1.000000e+05, !dbg !33
  %92 = fmul float %50, 1.000000e+05, !dbg !33
  %93 = fmul float %89, 0x3F847AE140000000, !dbg !34
  %94 = fmul float %90, 0x3F847AE140000000, !dbg !34
  %95 = fmul float %91, 0x3F847AE140000000, !dbg !34
  %96 = fmul float %92, 0x3F847AE140000000, !dbg !34
  %97 = fmul float %93, %93, !dbg !35
  %98 = fmul float %94, %94, !dbg !35
  %99 = fmul float %95, %95, !dbg !35
  %100 = fmul float %96, %96, !dbg !35
  %101 = fadd float %85, %97, !dbg !36
  %102 = fadd float %86, %98, !dbg !36
  %103 = fadd float %87, %99, !dbg !36
  %104 = fadd float %88, %100, !dbg !36
  %105 = fmul float %27, %37, !dbg !37
  %106 = fmul float %28, %38, !dbg !37
  %107 = fmul float %29, %39, !dbg !37
  %108 = fmul float %30, %40, !dbg !37
  %109 = fsub float %57, %105, !dbg !38
  %110 = fsub float %58, %106, !dbg !38
  %111 = fsub float %59, %107, !dbg !38
  %112 = fsub float %60, %108, !dbg !38
  %113 = fmul float %109, 0x3FF0555560000000, !dbg !39
  %114 = fmul float %110, 0x3FF0555560000000, !dbg !39
  %115 = fmul float %111, 0x3FF0555560000000, !dbg !39
  %116 = fmul float %112, 0x3FF0555560000000, !dbg !39
  %117 = fmul float %113, 2.000000e+00, !dbg !40
  %118 = fmul float %114, 2.000000e+00, !dbg !40
  %119 = fmul float %115, 2.000000e+00, !dbg !40
  %120 = fmul float %116, 2.000000e+00, !dbg !40
  %121 = fmul float %89, 0x3F9EB851E0000000, !dbg !41
  %122 = fmul float %90, 0x3F9EB851E0000000, !dbg !41
  %123 = fmul float %91, 0x3F9EB851E0000000, !dbg !41
  %124 = fmul float %92, 0x3F9EB851E0000000, !dbg !41
  %125 = fmul float %121, %121, !dbg !42
  %126 = fmul float %122, %122, !dbg !42
  %127 = fmul float %123, %123, !dbg !42
  %128 = fmul float %124, %124, !dbg !42
  %129 = fadd float %125, %117, !dbg !43
  %130 = fadd float %126, %118, !dbg !43
  %131 = fadd float %127, %119, !dbg !43
  %132 = fadd float %128, %120, !dbg !43
  %133 = fmul float %101, %129, !dbg !44
  %134 = fmul float %102, %130, !dbg !44
  %135 = fmul float %103, %131, !dbg !44
  %136 = fmul float %104, %132, !dbg !44
  %137 = fmul float %27, %27, !dbg !45
  %138 = fmul float %28, %28, !dbg !45
  %139 = fmul float %29, %29, !dbg !45
  %140 = fmul float %30, %30, !dbg !45
  %141 = fmul float %37, %37, !dbg !46
  %142 = fmul float %38, %38, !dbg !46
  %143 = fmul float %39, %39, !dbg !46
  %144 = fmul float %40, %40, !dbg !46
  %145 = fadd float %137, %141, !dbg !47
  %146 = fadd float %138, %142, !dbg !47
  %147 = fadd float %139, %143, !dbg !47
  %148 = fadd float %140, %144, !dbg !47
  %149 = fadd float %145, %97, !dbg !48
  %150 = fadd float %146, %98, !dbg !48
  %151 = fadd float %147, %99, !dbg !48
  %152 = fadd float %148, %100, !dbg !48
  %153 = fsub float %67, %137, !dbg !49
  %154 = fsub float %68, %138, !dbg !49
  %155 = fsub float %69, %139, !dbg !49
  %156 = fsub float %70, %140, !dbg !49
  %157 = fmul float %153, 0x3FF0555560000000, !dbg !50
  %158 = fmul float %154, 0x3FF0555560000000, !dbg !50
  %159 = fmul float %155, 0x3FF0555560000000, !dbg !50
  %160 = fmul float %156, 0x3FF0555560000000, !dbg !50
  %161 = fsub float %77, %141, !dbg !51
  %162 = fsub float %78, %142, !dbg !51
  %163 = fsub float %79, %143, !dbg !51
  %164 = fsub float %80, %144, !dbg !51
  %165 = fmul float %161, 0x3FF0555560000000, !dbg !52
  %166 = fmul float %162, 0x3FF0555560000000, !dbg !52
  %167 = fmul float %163, 0x3FF0555560000000, !dbg !52
  %168 = fmul float %164, 0x3FF0555560000000, !dbg !52
  %169 = fadd float %157, %165, !dbg !53
  %170 = fadd float %158, %166, !dbg !53
  %171 = fadd float %159, %167, !dbg !53
  %172 = fadd float %160, %168, !dbg !53
  %173 = fadd float %125, %169, !dbg !54
  %174 = fadd float %126, %170, !dbg !54
  %175 = fadd float %127, %171, !dbg !54
  %176 = fadd float %128, %172, !dbg !54
  %177 = fmul float %149, %173, !dbg !55
  %178 = fmul float %150, %174, !dbg !55
  %179 = fmul float %151, %175, !dbg !55
  %180 = fmul float %152, %176, !dbg !55
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float %177) #1, !dbg !56
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float %178) #1, !dbg !56
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %179) #1, !dbg !56
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float %180) #1, !dbg !56
  %185 = mul i32 %18, 3392, !dbg !57
  %186 = add i32 %185, %.decomposed2, !dbg !58
  %187 = sext i32 %186 to i64, !dbg !59
  %188 = getelementptr float, ptr addrspace(1) %6, i64 %187, !dbg !59
  %189 = bitcast float %181 to i32, !dbg !60
  %190 = bitcast float %182 to i32, !dbg !60
  %191 = bitcast float %183 to i32, !dbg !60
  %192 = bitcast float %184 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %189, i32 %190, i32 %191, i32 %192, ptr addrspace(1) %188, i1 %15) #1, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgnjqnsbz6nzyay7etnty7wtvg3vqzdhmabswnlwkmvidd5gbvre.py", directory: "inductor_cache/gn")
!4 = !{ptr @triton_poi_fused_add_div_mul_pow_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mul_pow_sub_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mul_pow_sub_1", linkageName: "triton_poi_fused_add_div_mul_pow_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 19, scope: !7)
!36 = !DILocation(line: 42, column: 19, scope: !7)
!37 = !DILocation(line: 43, column: 19, scope: !7)
!38 = !DILocation(line: 44, column: 20, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 19, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 51, column: 20, scope: !7)
!44 = !DILocation(line: 52, column: 20, scope: !7)
!45 = !DILocation(line: 53, column: 19, scope: !7)
!46 = !DILocation(line: 54, column: 19, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 56, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 58, column: 20, scope: !7)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 60, column: 20, scope: !7)
!53 = !DILocation(line: 61, column: 20, scope: !7)
!54 = !DILocation(line: 62, column: 20, scope: !7)
!55 = !DILocation(line: 63, column: 20, scope: !7)
!56 = !DILocation(line: 64, column: 20, scope: !7)
!57 = !DILocation(line: 65, column: 35, scope: !7)
!58 = !DILocation(line: 65, column: 30, scope: !7)
!59 = !DILocation(line: 65, column: 25, scope: !7)
!60 = !DILocation(line: 65, column: 47, scope: !7)
!61 = !DILocation(line: 65, column: 4, scope: !7)
