; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__softmax_11(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 3, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 6, !dbg !12
  %.lobit1 = lshr i32 %7, 5, !dbg !12
  %10 = and i32 %.lobit1, 3, !dbg !12
  %11 = or disjoint i32 %6, %9, !dbg !13
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %12, 4, !dbg !13
  %14 = icmp slt i32 %11, 8, !dbg !14
  %15 = icmp slt i32 %12, 8, !dbg !14
  %16 = icmp slt i32 %13, 8, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %18 = shl i32 %17, 7, !dbg !16
  %19 = lshr i32 %7, 2, !dbg !17
  %20 = and i32 %19, 31, !dbg !17
  %21 = shl i32 %7, 2, !dbg !17
  %22 = and i32 %21, 124, !dbg !17
  %23 = or disjoint i32 %18, %20, !dbg !18
  %24 = or disjoint i32 %23, 32, !dbg !18
  %25 = or disjoint i32 %23, 64, !dbg !18
  %26 = or disjoint i32 %23, 96, !dbg !18
  %27 = or disjoint i32 %18, %22, !dbg !18
  %28 = icmp slt i32 %23, 256, !dbg !19
  %29 = icmp slt i32 %24, 256, !dbg !19
  %30 = icmp slt i32 %25, 256, !dbg !19
  %31 = icmp slt i32 %26, 256, !dbg !19
  %32 = icmp slt i32 %27, 256, !dbg !19
  %33 = sdiv i32 %12, 2, !dbg !20
  %34 = sdiv i32 %13, 2, !dbg !20
  %35 = shl i32 %23, 1, !dbg !21
  %36 = shl i32 %24, 1, !dbg !21
  %37 = shl i32 %25, 1, !dbg !21
  %38 = shl i32 %26, 1, !dbg !21
  %39 = shl i32 %27, 1, !dbg !21
  %40 = or disjoint i32 %39, 2, !dbg !21
  %41 = or disjoint i32 %39, 4, !dbg !21
  %42 = or disjoint i32 %39, 6, !dbg !21
  %43 = shl i32 %11, 8, !dbg !22
  %44 = shl i32 %33, 9, !dbg !22
  %45 = shl i32 %34, 9, !dbg !22
  %46 = add i32 %35, %43, !dbg !23
  %47 = add i32 %43, %36, !dbg !23
  %48 = add i32 %43, %37, !dbg !23
  %49 = add i32 %43, %38, !dbg !23
  %50 = sext i32 %46 to i64, !dbg !24
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !24
  %52 = sext i32 %47 to i64, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !24
  %54 = sext i32 %48 to i64, !dbg !24
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !24
  %56 = sext i32 %49 to i64, !dbg !24
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !24
  %58 = and i1 %14, %28, !dbg !25
  %59 = and i1 %29, %14, !dbg !25
  %60 = and i1 %30, %14, !dbg !25
  %61 = and i1 %31, %14, !dbg !25
  %62 = and i1 %15, %32, !dbg !25
  %63 = and i1 %16, %32, !dbg !25
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %58) #2, !dbg !26
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !26
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !26
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 %59) #2, !dbg !26
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !26
  %69 = extractvalue { i32, i32 } %67, 1, !dbg !26
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 %60) #2, !dbg !26
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !26
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !26
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %57, i1 %61) #2, !dbg !26
  %74 = extractvalue { i32, i32 } %73, 0, !dbg !26
  %75 = extractvalue { i32, i32 } %73, 1, !dbg !26
  %76 = shl i32 %7, 8, !dbg !26
  %77 = and i32 %76, 768, !dbg !26
  %78 = or disjoint i32 %77, %20, !dbg !26
  %79 = and i32 %21, 508, !dbg !26
  %80 = lshr exact i32 %77, 7, !dbg !26
  %81 = add nuw nsw i32 %80, %78, !dbg !26
  %82 = zext nneg i32 %81 to i64, !dbg !26
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %82, !dbg !26
  %84 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #2, !dbg !26
  %85 = or disjoint i32 %78, 128, !dbg !26
  %86 = lshr i32 %85, 7, !dbg !26
  %87 = add nuw nsw i32 %86, %85, !dbg !26
  %88 = zext nneg i32 %87 to i64, !dbg !26
  %89 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %88, !dbg !26
  %90 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #2, !dbg !26
  %91 = or disjoint i32 %78, 32, !dbg !26
  %92 = add nuw nsw i32 %91, %80, !dbg !26
  %93 = zext nneg i32 %92 to i64, !dbg !26
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %93, !dbg !26
  %95 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #2, !dbg !26
  %96 = or disjoint i32 %78, 160, !dbg !26
  %97 = lshr i32 %96, 7, !dbg !26
  %98 = add nuw nsw i32 %97, %96, !dbg !26
  %99 = zext nneg i32 %98 to i64, !dbg !26
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %99, !dbg !26
  %101 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #2, !dbg !26
  %102 = or disjoint i32 %78, 64, !dbg !26
  %103 = add nuw nsw i32 %102, %80, !dbg !26
  %104 = zext nneg i32 %103 to i64, !dbg !26
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %104, !dbg !26
  %106 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #2, !dbg !26
  %107 = or disjoint i32 %78, 192, !dbg !26
  %108 = lshr i32 %107, 7, !dbg !26
  %109 = add nuw nsw i32 %108, %107, !dbg !26
  %110 = zext nneg i32 %109 to i64, !dbg !26
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %110, !dbg !26
  %112 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #2, !dbg !26
  %113 = or disjoint i32 %78, 96, !dbg !26
  %114 = add nuw nsw i32 %113, %80, !dbg !26
  %115 = zext nneg i32 %114 to i64, !dbg !26
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %115, !dbg !26
  %117 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #2, !dbg !26
  %118 = or disjoint i32 %78, 224, !dbg !26
  %119 = lshr i32 %118, 7, !dbg !26
  %120 = add nuw nsw i32 %119, %118, !dbg !26
  %121 = zext nneg i32 %120 to i64, !dbg !26
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %121, !dbg !26
  %123 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %124 = lshr i32 %79, 7, !dbg !26
  %125 = or disjoint i32 %124, %79, !dbg !26
  %126 = zext nneg i32 %125 to i64, !dbg !26
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %126, !dbg !26
  %128 = load float, ptr addrspace(3) %127, align 4, !dbg !26
  %129 = or disjoint i32 %79, 1, !dbg !26
  %130 = add nuw nsw i32 %129, %124, !dbg !26
  %131 = zext nneg i32 %130 to i64, !dbg !26
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %131, !dbg !26
  %133 = load float, ptr addrspace(3) %132, align 4, !dbg !26
  %134 = or disjoint i32 %79, 2, !dbg !26
  %135 = add nuw nsw i32 %134, %124, !dbg !26
  %136 = zext nneg i32 %135 to i64, !dbg !26
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %136, !dbg !26
  %138 = load float, ptr addrspace(3) %137, align 4, !dbg !26
  %139 = or disjoint i32 %79, 3, !dbg !26
  %140 = add nuw nsw i32 %139, %124, !dbg !26
  %141 = zext nneg i32 %140 to i64, !dbg !26
  %142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %141, !dbg !26
  %143 = load float, ptr addrspace(3) %142, align 4, !dbg !26
  %144 = or disjoint i32 %79, 512, !dbg !26
  %145 = lshr i32 %144, 7, !dbg !26
  %146 = add nuw nsw i32 %145, %144, !dbg !26
  %147 = zext nneg i32 %146 to i64, !dbg !26
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %147, !dbg !26
  %149 = load float, ptr addrspace(3) %148, align 4, !dbg !26
  %150 = or disjoint i32 %79, 513, !dbg !26
  %151 = lshr i32 %150, 7, !dbg !26
  %152 = add nuw nsw i32 %151, %150, !dbg !26
  %153 = zext nneg i32 %152 to i64, !dbg !26
  %154 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %153, !dbg !26
  %155 = load float, ptr addrspace(3) %154, align 4, !dbg !26
  %156 = or disjoint i32 %79, 514, !dbg !26
  %157 = lshr i32 %156, 7, !dbg !26
  %158 = add nuw nsw i32 %157, %156, !dbg !26
  %159 = zext nneg i32 %158 to i64, !dbg !26
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %159, !dbg !26
  %161 = load float, ptr addrspace(3) %160, align 4, !dbg !26
  %162 = or disjoint i32 %79, 515, !dbg !26
  %163 = lshr i32 %162, 7, !dbg !26
  %164 = add nuw nsw i32 %163, %162, !dbg !26
  %165 = zext nneg i32 %164 to i64, !dbg !26
  %166 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %165, !dbg !26
  %167 = load float, ptr addrspace(3) %166, align 4, !dbg !26
  %168 = add i32 %39, %44, !dbg !27
  %169 = add i32 %44, %40, !dbg !27
  %170 = add i32 %44, %41, !dbg !27
  %171 = add i32 %44, %42, !dbg !27
  %172 = add i32 %39, %45, !dbg !27
  %173 = add i32 %45, %40, !dbg !27
  %174 = add i32 %45, %41, !dbg !27
  %175 = add i32 %45, %42, !dbg !27
  %176 = sext i32 %168 to i64, !dbg !28
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !28
  %178 = sext i32 %169 to i64, !dbg !28
  %179 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !28
  %180 = sext i32 %170 to i64, !dbg !28
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !28
  %182 = sext i32 %171 to i64, !dbg !28
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !28
  %184 = sext i32 %172 to i64, !dbg !28
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !28
  %186 = sext i32 %173 to i64, !dbg !28
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !28
  %188 = sext i32 %174 to i64, !dbg !28
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !28
  %190 = sext i32 %175 to i64, !dbg !28
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !28
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %62) #2, !dbg !29
  %193 = bitcast i32 %192 to float, !dbg !29
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %62) #2, !dbg !29
  %195 = bitcast i32 %194 to float, !dbg !29
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 %62) #2, !dbg !29
  %197 = bitcast i32 %196 to float, !dbg !29
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %62) #2, !dbg !29
  %199 = bitcast i32 %198 to float, !dbg !29
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %63) #2, !dbg !29
  %201 = bitcast i32 %200 to float, !dbg !29
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %63) #2, !dbg !29
  %203 = bitcast i32 %202 to float, !dbg !29
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 %63) #2, !dbg !29
  %205 = bitcast i32 %204 to float, !dbg !29
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %63) #2, !dbg !29
  %207 = bitcast i32 %206 to float, !dbg !29
  %208 = or disjoint i32 %39, 1, !dbg !30
  %209 = or disjoint i32 %39, 3, !dbg !30
  %210 = or disjoint i32 %39, 5, !dbg !30
  %211 = or disjoint i32 %39, 7, !dbg !30
  %212 = add i32 %208, %44, !dbg !31
  %213 = add i32 %44, %209, !dbg !31
  %214 = add i32 %44, %210, !dbg !31
  %215 = add i32 %44, %211, !dbg !31
  %216 = add i32 %208, %45, !dbg !31
  %217 = add i32 %209, %45, !dbg !31
  %218 = add i32 %210, %45, !dbg !31
  %219 = add i32 %211, %45, !dbg !31
  %220 = sext i32 %212 to i64, !dbg !32
  %221 = getelementptr float, ptr addrspace(1) %0, i64 %220, !dbg !32
  %222 = sext i32 %213 to i64, !dbg !32
  %223 = getelementptr float, ptr addrspace(1) %0, i64 %222, !dbg !32
  %224 = sext i32 %214 to i64, !dbg !32
  %225 = getelementptr float, ptr addrspace(1) %0, i64 %224, !dbg !32
  %226 = sext i32 %215 to i64, !dbg !32
  %227 = getelementptr float, ptr addrspace(1) %0, i64 %226, !dbg !32
  %228 = sext i32 %216 to i64, !dbg !32
  %229 = getelementptr float, ptr addrspace(1) %0, i64 %228, !dbg !32
  %230 = sext i32 %217 to i64, !dbg !32
  %231 = getelementptr float, ptr addrspace(1) %0, i64 %230, !dbg !32
  %232 = sext i32 %218 to i64, !dbg !32
  %233 = getelementptr float, ptr addrspace(1) %0, i64 %232, !dbg !32
  %234 = sext i32 %219 to i64, !dbg !32
  %235 = getelementptr float, ptr addrspace(1) %0, i64 %234, !dbg !32
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %221, i1 %62) #2, !dbg !33
  %237 = bitcast i32 %236 to float, !dbg !33
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %223, i1 %62) #2, !dbg !33
  %239 = bitcast i32 %238 to float, !dbg !33
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %225, i1 %62) #2, !dbg !33
  %241 = bitcast i32 %240 to float, !dbg !33
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 %62) #2, !dbg !33
  %243 = bitcast i32 %242 to float, !dbg !33
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %229, i1 %63) #2, !dbg !33
  %245 = bitcast i32 %244 to float, !dbg !33
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %63) #2, !dbg !33
  %247 = bitcast i32 %246 to float, !dbg !33
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 %63) #2, !dbg !33
  %249 = bitcast i32 %248 to float, !dbg !33
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %235, i1 %63) #2, !dbg !33
  %251 = bitcast i32 %250 to float, !dbg !33
  %252 = fcmp ogt float %193, %237, !dbg !34
  %253 = fcmp ogt float %195, %239, !dbg !34
  %254 = fcmp ogt float %197, %241, !dbg !34
  %255 = fcmp ogt float %199, %243, !dbg !34
  %256 = fcmp ogt float %201, %245, !dbg !34
  %257 = fcmp ogt float %203, %247, !dbg !34
  %258 = fcmp ogt float %205, %249, !dbg !34
  %259 = fcmp ogt float %207, %251, !dbg !34
  %260 = fcmp uno float %193, 0.000000e+00, !dbg !38
  %261 = fcmp uno float %195, 0.000000e+00, !dbg !38
  %262 = fcmp uno float %197, 0.000000e+00, !dbg !38
  %263 = fcmp uno float %199, 0.000000e+00, !dbg !38
  %264 = fcmp uno float %201, 0.000000e+00, !dbg !38
  %265 = fcmp uno float %203, 0.000000e+00, !dbg !38
  %266 = fcmp uno float %205, 0.000000e+00, !dbg !38
  %267 = fcmp uno float %207, 0.000000e+00, !dbg !38
  %268 = or i1 %260, %252, !dbg !39
  %269 = or i1 %261, %253, !dbg !39
  %270 = or i1 %262, %254, !dbg !39
  %271 = or i1 %263, %255, !dbg !39
  %272 = or i1 %264, %256, !dbg !39
  %273 = or i1 %265, %257, !dbg !39
  %274 = or i1 %266, %258, !dbg !39
  %275 = or i1 %267, %259, !dbg !39
  %276 = select i1 %268, float %193, float %237, !dbg !40
  %277 = select i1 %269, float %195, float %239, !dbg !40
  %278 = select i1 %270, float %197, float %241, !dbg !40
  %279 = select i1 %271, float %199, float %243, !dbg !40
  %280 = select i1 %272, float %201, float %245, !dbg !40
  %281 = select i1 %273, float %203, float %247, !dbg !40
  %282 = select i1 %274, float %205, float %249, !dbg !40
  %283 = select i1 %275, float %207, float %251, !dbg !40
  %284 = fsub float %128, %276, !dbg !41
  %285 = fsub float %133, %277, !dbg !41
  %286 = fsub float %138, %278, !dbg !41
  %287 = fsub float %143, %279, !dbg !41
  %288 = fsub float %149, %280, !dbg !41
  %289 = fsub float %155, %281, !dbg !41
  %290 = fsub float %161, %282, !dbg !41
  %291 = fsub float %167, %283, !dbg !41
  %292 = fmul float %284, 0x3FF7154760000000, !dbg !42
  %293 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %292) #2, !dbg !42
  %294 = fmul float %285, 0x3FF7154760000000, !dbg !42
  %295 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %294) #2, !dbg !42
  %296 = fmul float %286, 0x3FF7154760000000, !dbg !42
  %297 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %296) #2, !dbg !42
  %298 = fmul float %287, 0x3FF7154760000000, !dbg !42
  %299 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %298) #2, !dbg !42
  %300 = fmul float %288, 0x3FF7154760000000, !dbg !42
  %301 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %300) #2, !dbg !42
  %302 = fmul float %289, 0x3FF7154760000000, !dbg !42
  %303 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %302) #2, !dbg !42
  %304 = fmul float %290, 0x3FF7154760000000, !dbg !42
  %305 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %304) #2, !dbg !42
  %306 = fmul float %291, 0x3FF7154760000000, !dbg !42
  %307 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %306) #2, !dbg !42
  %308 = fsub float %193, %276, !dbg !43
  %309 = fsub float %195, %277, !dbg !43
  %310 = fsub float %197, %278, !dbg !43
  %311 = fsub float %199, %279, !dbg !43
  %312 = fsub float %201, %280, !dbg !43
  %313 = fsub float %203, %281, !dbg !43
  %314 = fsub float %205, %282, !dbg !43
  %315 = fsub float %207, %283, !dbg !43
  %316 = fmul float %308, 0x3FF7154760000000, !dbg !44
  %317 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %316) #2, !dbg !44
  %318 = fmul float %309, 0x3FF7154760000000, !dbg !44
  %319 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %318) #2, !dbg !44
  %320 = fmul float %310, 0x3FF7154760000000, !dbg !44
  %321 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %320) #2, !dbg !44
  %322 = fmul float %311, 0x3FF7154760000000, !dbg !44
  %323 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %322) #2, !dbg !44
  %324 = fmul float %312, 0x3FF7154760000000, !dbg !44
  %325 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %324) #2, !dbg !44
  %326 = fmul float %313, 0x3FF7154760000000, !dbg !44
  %327 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %326) #2, !dbg !44
  %328 = fmul float %314, 0x3FF7154760000000, !dbg !44
  %329 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %328) #2, !dbg !44
  %330 = fmul float %315, 0x3FF7154760000000, !dbg !44
  %331 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %330) #2, !dbg !44
  %332 = fsub float %237, %276, !dbg !45
  %333 = fsub float %239, %277, !dbg !45
  %334 = fsub float %241, %278, !dbg !45
  %335 = fsub float %243, %279, !dbg !45
  %336 = fsub float %245, %280, !dbg !45
  %337 = fsub float %247, %281, !dbg !45
  %338 = fsub float %249, %282, !dbg !45
  %339 = fsub float %251, %283, !dbg !45
  %340 = fmul float %332, 0x3FF7154760000000, !dbg !46
  %341 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %340) #2, !dbg !46
  %342 = fmul float %333, 0x3FF7154760000000, !dbg !46
  %343 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %342) #2, !dbg !46
  %344 = fmul float %334, 0x3FF7154760000000, !dbg !46
  %345 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %344) #2, !dbg !46
  %346 = fmul float %335, 0x3FF7154760000000, !dbg !46
  %347 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %346) #2, !dbg !46
  %348 = fmul float %336, 0x3FF7154760000000, !dbg !46
  %349 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %348) #2, !dbg !46
  %350 = fmul float %337, 0x3FF7154760000000, !dbg !46
  %351 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %350) #2, !dbg !46
  %352 = fmul float %338, 0x3FF7154760000000, !dbg !46
  %353 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %352) #2, !dbg !46
  %354 = fmul float %339, 0x3FF7154760000000, !dbg !46
  %355 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %354) #2, !dbg !46
  %356 = fadd float %317, %341, !dbg !47
  %357 = fadd float %319, %343, !dbg !47
  %358 = fadd float %321, %345, !dbg !47
  %359 = fadd float %323, %347, !dbg !47
  %360 = fadd float %325, %349, !dbg !47
  %361 = fadd float %327, %351, !dbg !47
  %362 = fadd float %329, %353, !dbg !47
  %363 = fadd float %331, %355, !dbg !47
  %364 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %293, float %356) #2, !dbg !48
  %365 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %295, float %357) #2, !dbg !48
  %366 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %297, float %358) #2, !dbg !48
  %367 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %299, float %359) #2, !dbg !48
  %368 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %301, float %360) #2, !dbg !48
  %369 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %303, float %361) #2, !dbg !48
  %370 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %305, float %362) #2, !dbg !48
  %371 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float %363) #2, !dbg !48
  %372 = shl i32 %12, 8, !dbg !49
  %373 = shl i32 %13, 8, !dbg !49
  %374 = add i32 %27, %372, !dbg !50
  %375 = add i32 %27, %373, !dbg !50
  %376 = sext i32 %374 to i64, !dbg !51
  %377 = getelementptr float, ptr addrspace(1) %1, i64 %376, !dbg !51
  %378 = sext i32 %375 to i64, !dbg !51
  %379 = getelementptr float, ptr addrspace(1) %1, i64 %378, !dbg !51
  %380 = bitcast float %364 to i32, !dbg !52
  %381 = bitcast float %365 to i32, !dbg !52
  %382 = bitcast float %366 to i32, !dbg !52
  %383 = bitcast float %367 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %380, i32 %381, i32 %382, i32 %383, ptr addrspace(1) %377, i1 %62) #2, !dbg !52
  %384 = bitcast float %368 to i32, !dbg !52
  %385 = bitcast float %369 to i32, !dbg !52
  %386 = bitcast float %370 to i32, !dbg !52
  %387 = bitcast float %371 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %384, i32 %385, i32 %386, i32 %387, ptr addrspace(1) %379, i1 %63) #2, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgpuydnvf62rk3odopurlnijasx3f44xkcznxf4hmlegs6ntapl3.py", directory: "inductor_cache/gp")
!4 = !{ptr @triton_poi_fused__softmax_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_11", linkageName: "triton_poi_fused__softmax_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 37, scope: !7)
!22 = !DILocation(line: 32, column: 46, scope: !7)
!23 = !DILocation(line: 32, column: 42, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 59, scope: !7)
!26 = !DILocation(line: 32, column: 51, scope: !7)
!27 = !DILocation(line: 33, column: 37, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 46, scope: !7)
!30 = !DILocation(line: 34, column: 34, scope: !7)
!31 = !DILocation(line: 34, column: 41, scope: !7)
!32 = !DILocation(line: 34, column: 30, scope: !7)
!33 = !DILocation(line: 34, column: 50, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 35, column: 40, scope: !7)
!38 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 36, column: 18, scope: !7)
!42 = !DILocation(line: 37, column: 23, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 39, column: 23, scope: !7)
!45 = !DILocation(line: 40, column: 18, scope: !7)
!46 = !DILocation(line: 41, column: 23, scope: !7)
!47 = !DILocation(line: 42, column: 19, scope: !7)
!48 = !DILocation(line: 43, column: 19, scope: !7)
!49 = !DILocation(line: 44, column: 34, scope: !7)
!50 = !DILocation(line: 44, column: 30, scope: !7)
!51 = !DILocation(line: 44, column: 25, scope: !7)
!52 = !DILocation(line: 44, column: 46, scope: !7)
!53 = !DILocation(line: 44, column: 4, scope: !7)
