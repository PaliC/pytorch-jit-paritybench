; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) nocapture readnone %21, ptr addrspace(1) nocapture readnone %22, ptr addrspace(1) %23, ptr addrspace(1) nocapture readnone %24, ptr addrspace(1) %25, ptr addrspace(1) %26, ptr addrspace(1) %27, i32 %28) local_unnamed_addr !dbg !7 {
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %31 = shl i32 %30, 9, !dbg !11
  %32 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %33 = shl i32 %32, 1, !dbg !12
  %34 = and i32 %33, 510, !dbg !12
  %35 = or disjoint i32 %31, %34, !dbg !13
  %.frozen = freeze i32 %35, !dbg !14
  %36 = sdiv i32 %.frozen, 1280, !dbg !14
  %37 = mul i32 %36, 1280, !dbg !15
  %.decomposed = sub i32 %.frozen, %37, !dbg !15
  %38 = icmp slt i32 %.decomposed, 256, !dbg !16
  %39 = shl nsw i32 %36, 8, !dbg !17
  %40 = add nsw i32 %39, %.decomposed, !dbg !18
  %41 = sext i32 %40 to i64, !dbg !19
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !19
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %42, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #3, !dbg !20
  %44 = sext i32 %.decomposed to i64, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !21
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #3, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !23
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %47, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #3, !dbg !24
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !24
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !24
  %51 = bitcast i32 %49 to float, !dbg !24
  %52 = bitcast i32 %50 to float, !dbg !24
  %53 = fadd float %51, 0x3EE4F8B580000000, !dbg !25
  %54 = fadd float %52, 0x3EE4F8B580000000, !dbg !25
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i = icmp eq i32 %55, 0, !dbg !26
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i = icmp eq i32 %56, 0, !dbg !26
  br i1 %.not.i, label %62, label %57, !dbg !26

57:                                               ; preds = %29
  br i1 %.not1.i, label %60, label %58, !dbg !26

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

62:                                               ; preds = %29
  br i1 %.not1.i, label %65, label %63, !dbg !26

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %58, %60, %63, %65
  %.0.i = phi float [ %59, %58 ], [ %61, %60 ], [ %64, %63 ], [ %66, %65 ], !dbg !26
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i1 = icmp eq i32 %67, 0, !dbg !26
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i4 = icmp eq i32 %68, 0, !dbg !26
  br i1 %.not.i1, label %74, label %69, !dbg !26

69:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %72, label %70, !dbg !26

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %77, label %75, !dbg !26

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

__nv_sqrtf.exit5:                                 ; preds = %70, %72, %75, %77
  %.0.i3 = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !26
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !27
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !27
  %81 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !28
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %81, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #3, !dbg !29
  %83 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !30
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %83, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #3, !dbg !31
  %85 = and i32 %.decomposed, -256, !dbg !32
  %86 = icmp eq i32 %85, 256, !dbg !32
  %87 = add nsw i32 %.decomposed, -256, !dbg !33
  %88 = add nsw i32 %39, %87, !dbg !34
  %89 = sext i32 %88 to i64, !dbg !35
  %90 = getelementptr float, ptr addrspace(1) %5, i64 %89, !dbg !35
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %90, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #3, !dbg !36
  %92 = sext i32 %87 to i64, !dbg !37
  %93 = getelementptr float, ptr addrspace(1) %6, i64 %92, !dbg !37
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %93, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #3, !dbg !38
  %95 = getelementptr float, ptr addrspace(1) %7, i64 %92, !dbg !39
  %96 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %95, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #3, !dbg !40
  %97 = extractvalue { i32, i32 } %96, 0, !dbg !40
  %98 = extractvalue { i32, i32 } %96, 1, !dbg !40
  %99 = bitcast i32 %97 to float, !dbg !40
  %100 = bitcast i32 %98 to float, !dbg !40
  %101 = fadd float %99, 0x3EE4F8B580000000, !dbg !41
  %102 = fadd float %100, 0x3EE4F8B580000000, !dbg !41
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i6 = icmp eq i32 %103, 0, !dbg !42
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i9 = icmp eq i32 %104, 0, !dbg !42
  br i1 %.not.i6, label %110, label %105, !dbg !42

105:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %108, label %106, !dbg !42

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

110:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %113, label %111, !dbg !42

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

__nv_sqrtf.exit10:                                ; preds = %106, %108, %111, %113
  %.0.i8 = phi float [ %107, %106 ], [ %109, %108 ], [ %112, %111 ], [ %114, %113 ], !dbg !42
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i11 = icmp eq i32 %115, 0, !dbg !42
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i14 = icmp eq i32 %116, 0, !dbg !42
  br i1 %.not.i11, label %122, label %117, !dbg !42

117:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %120, label %118, !dbg !42

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

122:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %125, label %123, !dbg !42

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

__nv_sqrtf.exit15:                                ; preds = %118, %120, %123, %125
  %.0.i13 = phi float [ %119, %118 ], [ %121, %120 ], [ %124, %123 ], [ %126, %125 ], !dbg !42
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !43
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !43
  %129 = getelementptr float, ptr addrspace(1) %8, i64 %92, !dbg !44
  %130 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %129, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #3, !dbg !45
  %131 = getelementptr float, ptr addrspace(1) %9, i64 %92, !dbg !46
  %132 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %131, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #3, !dbg !47
  %133 = icmp eq i32 %85, 512, !dbg !48
  %134 = add nsw i32 %.decomposed, -512, !dbg !49
  %135 = add nsw i32 %39, %134, !dbg !50
  %136 = sext i32 %135 to i64, !dbg !51
  %137 = getelementptr float, ptr addrspace(1) %10, i64 %136, !dbg !51
  %138 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %137, i1 %133, i32 0, i1 %133, i32 0, i1 %133) #3, !dbg !52
  %139 = sext i32 %134 to i64, !dbg !53
  %140 = getelementptr float, ptr addrspace(1) %11, i64 %139, !dbg !53
  %141 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %140, i1 %133, i32 0, i1 %133, i32 0, i1 %133) #3, !dbg !54
  %142 = getelementptr float, ptr addrspace(1) %12, i64 %139, !dbg !55
  %143 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %142, i1 %133, i32 0, i1 %133, i32 0, i1 %133) #3, !dbg !56
  %144 = extractvalue { i32, i32 } %143, 0, !dbg !56
  %145 = extractvalue { i32, i32 } %143, 1, !dbg !56
  %146 = bitcast i32 %144 to float, !dbg !56
  %147 = bitcast i32 %145 to float, !dbg !56
  %148 = fadd float %146, 0x3EE4F8B580000000, !dbg !57
  %149 = fadd float %147, 0x3EE4F8B580000000, !dbg !57
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i16 = icmp eq i32 %150, 0, !dbg !58
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i19 = icmp eq i32 %151, 0, !dbg !58
  br i1 %.not.i16, label %157, label %152, !dbg !58

152:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %155, label %153, !dbg !58

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %148) #3, !dbg !58
  br label %__nv_sqrtf.exit20, !dbg !58

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %148) #3, !dbg !58
  br label %__nv_sqrtf.exit20, !dbg !58

157:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %160, label %158, !dbg !58

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %148) #3, !dbg !58
  br label %__nv_sqrtf.exit20, !dbg !58

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %148) #3, !dbg !58
  br label %__nv_sqrtf.exit20, !dbg !58

__nv_sqrtf.exit20:                                ; preds = %153, %155, %158, %160
  %.0.i18 = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !58
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i21 = icmp eq i32 %162, 0, !dbg !58
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i24 = icmp eq i32 %163, 0, !dbg !58
  br i1 %.not.i21, label %169, label %164, !dbg !58

164:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %167, label %165, !dbg !58

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %149) #3, !dbg !58
  br label %__nv_sqrtf.exit25, !dbg !58

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %149) #3, !dbg !58
  br label %__nv_sqrtf.exit25, !dbg !58

169:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %172, label %170, !dbg !58

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %149) #3, !dbg !58
  br label %__nv_sqrtf.exit25, !dbg !58

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %149) #3, !dbg !58
  br label %__nv_sqrtf.exit25, !dbg !58

__nv_sqrtf.exit25:                                ; preds = %165, %167, %170, %172
  %.0.i23 = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !58
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !59
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !59
  %176 = getelementptr float, ptr addrspace(1) %13, i64 %139, !dbg !60
  %177 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %176, i1 %133, i32 0, i1 %133, i32 0, i1 %133) #3, !dbg !61
  %178 = getelementptr float, ptr addrspace(1) %14, i64 %139, !dbg !62
  %179 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %178, i1 %133, i32 0, i1 %133, i32 0, i1 %133) #3, !dbg !63
  %180 = icmp eq i32 %85, 768, !dbg !64
  %181 = add nsw i32 %.decomposed, -768, !dbg !65
  %182 = add nsw i32 %39, %181, !dbg !66
  %183 = sext i32 %182 to i64, !dbg !67
  %184 = getelementptr float, ptr addrspace(1) %15, i64 %183, !dbg !67
  %185 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %184, i1 %180, i32 0, i1 %180, i32 0, i1 %180) #3, !dbg !68
  %186 = sext i32 %181 to i64, !dbg !69
  %187 = getelementptr float, ptr addrspace(1) %16, i64 %186, !dbg !69
  %188 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %187, i1 %180, i32 0, i1 %180, i32 0, i1 %180) #3, !dbg !70
  %189 = getelementptr float, ptr addrspace(1) %17, i64 %186, !dbg !71
  %190 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %189, i1 %180, i32 0, i1 %180, i32 0, i1 %180) #3, !dbg !72
  %191 = extractvalue { i32, i32 } %190, 0, !dbg !72
  %192 = extractvalue { i32, i32 } %190, 1, !dbg !72
  %193 = bitcast i32 %191 to float, !dbg !72
  %194 = bitcast i32 %192 to float, !dbg !72
  %195 = fadd float %193, 0x3EE4F8B580000000, !dbg !73
  %196 = fadd float %194, 0x3EE4F8B580000000, !dbg !73
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i26 = icmp eq i32 %197, 0, !dbg !74
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i29 = icmp eq i32 %198, 0, !dbg !74
  br i1 %.not.i26, label %204, label %199, !dbg !74

199:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %202, label %200, !dbg !74

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %195) #3, !dbg !74
  br label %__nv_sqrtf.exit30, !dbg !74

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %195) #3, !dbg !74
  br label %__nv_sqrtf.exit30, !dbg !74

204:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %207, label %205, !dbg !74

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.f(float %195) #3, !dbg !74
  br label %__nv_sqrtf.exit30, !dbg !74

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.f(float %195) #3, !dbg !74
  br label %__nv_sqrtf.exit30, !dbg !74

__nv_sqrtf.exit30:                                ; preds = %200, %202, %205, %207
  %.0.i28 = phi float [ %201, %200 ], [ %203, %202 ], [ %206, %205 ], [ %208, %207 ], !dbg !74
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i31 = icmp eq i32 %209, 0, !dbg !74
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i34 = icmp eq i32 %210, 0, !dbg !74
  br i1 %.not.i31, label %216, label %211, !dbg !74

211:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %214, label %212, !dbg !74

212:                                              ; preds = %211
  %213 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %196) #3, !dbg !74
  br label %__nv_sqrtf.exit35, !dbg !74

214:                                              ; preds = %211
  %215 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %196) #3, !dbg !74
  br label %__nv_sqrtf.exit35, !dbg !74

216:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %219, label %217, !dbg !74

217:                                              ; preds = %216
  %218 = tail call float @llvm.nvvm.sqrt.rn.f(float %196) #3, !dbg !74
  br label %__nv_sqrtf.exit35, !dbg !74

219:                                              ; preds = %216
  %220 = tail call float @llvm.nvvm.sqrt.approx.f(float %196) #3, !dbg !74
  br label %__nv_sqrtf.exit35, !dbg !74

__nv_sqrtf.exit35:                                ; preds = %212, %214, %217, %219
  %.0.i33 = phi float [ %213, %212 ], [ %215, %214 ], [ %218, %217 ], [ %220, %219 ], !dbg !74
  %221 = extractvalue { i32, i32 } %185, 1, !dbg !68
  %222 = extractvalue { i32, i32 } %188, 1, !dbg !70
  %223 = extractvalue { i32, i32 } %185, 0, !dbg !68
  %224 = extractvalue { i32, i32 } %188, 0, !dbg !70
  %225 = extractvalue { i32, i32 } %138, 1, !dbg !52
  %226 = extractvalue { i32, i32 } %141, 1, !dbg !54
  %227 = extractvalue { i32, i32 } %177, 1, !dbg !61
  %228 = extractvalue { i32, i32 } %179, 1, !dbg !63
  %229 = extractvalue { i32, i32 } %138, 0, !dbg !52
  %230 = extractvalue { i32, i32 } %141, 0, !dbg !54
  %231 = extractvalue { i32, i32 } %177, 0, !dbg !61
  %232 = extractvalue { i32, i32 } %179, 0, !dbg !63
  %233 = extractvalue { i32, i32 } %91, 1, !dbg !36
  %234 = extractvalue { i32, i32 } %94, 1, !dbg !38
  %235 = extractvalue { i32, i32 } %130, 1, !dbg !45
  %236 = extractvalue { i32, i32 } %132, 1, !dbg !47
  %237 = extractvalue { i32, i32 } %91, 0, !dbg !36
  %238 = extractvalue { i32, i32 } %94, 0, !dbg !38
  %239 = extractvalue { i32, i32 } %130, 0, !dbg !45
  %240 = extractvalue { i32, i32 } %132, 0, !dbg !47
  %241 = extractvalue { i32, i32 } %43, 1, !dbg !20
  %242 = extractvalue { i32, i32 } %46, 1, !dbg !22
  %243 = extractvalue { i32, i32 } %82, 1, !dbg !29
  %244 = extractvalue { i32, i32 } %84, 1, !dbg !31
  %245 = extractvalue { i32, i32 } %43, 0, !dbg !20
  %246 = extractvalue { i32, i32 } %46, 0, !dbg !22
  %247 = extractvalue { i32, i32 } %82, 0, !dbg !29
  %248 = extractvalue { i32, i32 } %84, 0, !dbg !31
  %249 = srem i32 %36, 4, !dbg !75
  %250 = sdiv i32 %35, 5120, !dbg !76
  %251 = srem i32 %250, 4, !dbg !77
  %252 = srem i32 %36, 16, !dbg !78
  %253 = sdiv i32 %35, 20480, !dbg !79
  %254 = or disjoint i32 %35, 1, !dbg !13
  %255 = srem i32 %254, 1280, !dbg !15
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !80
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !80
  %258 = getelementptr float, ptr addrspace(1) %18, i64 %186, !dbg !81
  %259 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %258, i1 %180, i32 0, i1 %180, i32 0, i1 %180) #3, !dbg !82
  %260 = extractvalue { i32, i32 } %259, 0, !dbg !82
  %261 = extractvalue { i32, i32 } %259, 1, !dbg !82
  %262 = getelementptr float, ptr addrspace(1) %19, i64 %186, !dbg !83
  %263 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %262, i1 %180, i32 0, i1 %180, i32 0, i1 %180) #3, !dbg !84
  %264 = extractvalue { i32, i32 } %263, 0, !dbg !84
  %265 = extractvalue { i32, i32 } %263, 1, !dbg !84
  %266 = insertelement <8 x i32> poison, i32 %221, i64 0, !dbg !68
  %267 = insertelement <8 x i32> %266, i32 %223, i64 1, !dbg !68
  %268 = insertelement <8 x i32> %267, i32 %245, i64 2, !dbg !68
  %269 = insertelement <8 x i32> %268, i32 %241, i64 3, !dbg !68
  %270 = insertelement <8 x i32> %269, i32 %237, i64 4, !dbg !68
  %271 = insertelement <8 x i32> %270, i32 %233, i64 5, !dbg !68
  %272 = insertelement <8 x i32> %271, i32 %229, i64 6, !dbg !68
  %273 = insertelement <8 x i32> %272, i32 %225, i64 7, !dbg !68
  %274 = bitcast <8 x i32> %273 to <8 x float>, !dbg !68
  %275 = insertelement <8 x i32> poison, i32 %222, i64 0, !dbg !70
  %276 = insertelement <8 x i32> %275, i32 %224, i64 1, !dbg !70
  %277 = insertelement <8 x i32> %276, i32 %246, i64 2, !dbg !70
  %278 = insertelement <8 x i32> %277, i32 %242, i64 3, !dbg !70
  %279 = insertelement <8 x i32> %278, i32 %238, i64 4, !dbg !70
  %280 = insertelement <8 x i32> %279, i32 %234, i64 5, !dbg !70
  %281 = insertelement <8 x i32> %280, i32 %230, i64 6, !dbg !70
  %282 = insertelement <8 x i32> %281, i32 %226, i64 7, !dbg !70
  %283 = bitcast <8 x i32> %282 to <8 x float>, !dbg !70
  %284 = fsub <8 x float> %274, %283, !dbg !85
  %285 = insertelement <8 x float> poison, float %257, i64 0, !dbg !86
  %286 = insertelement <8 x float> %285, float %256, i64 1, !dbg !86
  %287 = insertelement <8 x float> %286, float %79, i64 2, !dbg !86
  %288 = insertelement <8 x float> %287, float %80, i64 3, !dbg !86
  %289 = insertelement <8 x float> %288, float %127, i64 4, !dbg !86
  %290 = insertelement <8 x float> %289, float %128, i64 5, !dbg !86
  %291 = insertelement <8 x float> %290, float %174, i64 6, !dbg !86
  %292 = insertelement <8 x float> %291, float %175, i64 7, !dbg !86
  %293 = fmul <8 x float> %284, %292, !dbg !86
  %294 = insertelement <8 x i32> poison, i32 %261, i64 0, !dbg !82
  %295 = insertelement <8 x i32> %294, i32 %260, i64 1, !dbg !82
  %296 = insertelement <8 x i32> %295, i32 %247, i64 2, !dbg !82
  %297 = insertelement <8 x i32> %296, i32 %243, i64 3, !dbg !82
  %298 = insertelement <8 x i32> %297, i32 %239, i64 4, !dbg !82
  %299 = insertelement <8 x i32> %298, i32 %235, i64 5, !dbg !82
  %300 = insertelement <8 x i32> %299, i32 %231, i64 6, !dbg !82
  %301 = insertelement <8 x i32> %300, i32 %227, i64 7, !dbg !82
  %302 = bitcast <8 x i32> %301 to <8 x float>, !dbg !82
  %303 = fmul <8 x float> %293, %302, !dbg !87
  %304 = insertelement <8 x i32> poison, i32 %265, i64 0, !dbg !84
  %305 = insertelement <8 x i32> %304, i32 %264, i64 1, !dbg !84
  %306 = insertelement <8 x i32> %305, i32 %248, i64 2, !dbg !84
  %307 = insertelement <8 x i32> %306, i32 %244, i64 3, !dbg !84
  %308 = insertelement <8 x i32> %307, i32 %240, i64 4, !dbg !84
  %309 = insertelement <8 x i32> %308, i32 %236, i64 5, !dbg !84
  %310 = insertelement <8 x i32> %309, i32 %232, i64 6, !dbg !84
  %311 = insertelement <8 x i32> %310, i32 %228, i64 7, !dbg !84
  %312 = bitcast <8 x i32> %311 to <8 x float>, !dbg !84
  %313 = fadd <8 x float> %303, %312, !dbg !88
  %314 = fcmp olt <8 x float> %313, zeroinitializer, !dbg !89
  %315 = extractelement <8 x i1> %314, i64 7, !dbg !93
  %316 = extractelement <8 x float> %313, i64 7, !dbg !93
  %317 = select i1 %315, float 0.000000e+00, float %316, !dbg !93
  %318 = extractelement <8 x i1> %314, i64 6, !dbg !93
  %319 = extractelement <8 x float> %313, i64 6, !dbg !93
  %320 = select i1 %318, float 0.000000e+00, float %319, !dbg !93
  %321 = extractelement <8 x i1> %314, i64 5, !dbg !95
  %322 = extractelement <8 x float> %313, i64 5, !dbg !95
  %323 = select i1 %321, float 0.000000e+00, float %322, !dbg !95
  %324 = extractelement <8 x i1> %314, i64 4, !dbg !95
  %325 = extractelement <8 x float> %313, i64 4, !dbg !95
  %326 = select i1 %324, float 0.000000e+00, float %325, !dbg !95
  %327 = extractelement <8 x i1> %314, i64 3, !dbg !97
  %328 = extractelement <8 x float> %313, i64 3, !dbg !97
  %329 = select i1 %327, float 0.000000e+00, float %328, !dbg !97
  %330 = extractelement <8 x i1> %314, i64 2, !dbg !97
  %331 = extractelement <8 x float> %313, i64 2, !dbg !97
  %332 = select i1 %330, float 0.000000e+00, float %331, !dbg !97
  %333 = extractelement <8 x i1> %314, i64 1, !dbg !99
  %334 = extractelement <8 x float> %313, i64 1, !dbg !99
  %335 = select i1 %333, float 0.000000e+00, float %334, !dbg !99
  %336 = extractelement <8 x i1> %314, i64 0, !dbg !99
  %337 = extractelement <8 x float> %313, i64 0, !dbg !99
  %338 = select i1 %336, float 0.000000e+00, float %337, !dbg !99
  %339 = icmp sgt i32 %.decomposed, 1023, !dbg !100
  %340 = add nsw i32 %.decomposed, -1024, !dbg !101
  %341 = shl nsw i32 %340, 4, !dbg !102
  %342 = shl nsw i32 %255, 4, !dbg !102
  %343 = shl nsw i32 %253, 12, !dbg !103
  %344 = add nsw i32 %343, %252, !dbg !104
  %345 = add nsw i32 %344, %341, !dbg !105
  %346 = add nsw i32 %344, -16384, !dbg !104
  %347 = add nsw i32 %346, %342, !dbg !105
  %348 = sext i32 %345 to i64, !dbg !106
  %349 = getelementptr float, ptr addrspace(1) %20, i64 %348, !dbg !106
  %350 = sext i32 %347 to i64, !dbg !106
  %351 = getelementptr float, ptr addrspace(1) %20, i64 %350, !dbg !106
  %352 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %349, i1 %339, i32 0, i1 %339) #3, !dbg !107
  %353 = bitcast i32 %352 to float, !dbg !107
  %354 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %351, i1 %339, i32 0, i1 %339) #3, !dbg !107
  %355 = bitcast i32 %354 to float, !dbg !107
  %356 = shl nsw i32 %253, 8, !dbg !108
  %357 = add nsw i32 %356, %340, !dbg !109
  %358 = sext i32 %357 to i64, !dbg !110
  %359 = getelementptr float, ptr addrspace(1) %23, i64 %358, !dbg !110
  %360 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %359, i1 %339, i32 0, i1 %339, i32 0, i1 %339) #3, !dbg !111
  %361 = extractvalue { i32, i32 } %360, 0, !dbg !111
  %362 = extractvalue { i32, i32 } %360, 1, !dbg !111
  %363 = bitcast i32 %361 to float, !dbg !111
  %364 = bitcast i32 %362 to float, !dbg !111
  %365 = fsub float %363, %363, !dbg !112
  %366 = fsub float %364, %364, !dbg !112
  %367 = sext i32 %249 to i64, !dbg !113
  %368 = getelementptr float, ptr addrspace(1) %25, i64 %367, !dbg !113
  %369 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %368, i1 %339, i32 0, i1 %339) #3, !dbg !114
  %370 = bitcast i32 %369 to float, !dbg !114
  %371 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %368, i1 %339, i32 0, i1 %339) #3, !dbg !114
  %372 = bitcast i32 %371 to float, !dbg !114
  %373 = fmul float %365, %370, !dbg !115
  %374 = fmul float %366, %372, !dbg !115
  %375 = fadd float %373, %363, !dbg !116
  %376 = fadd float %374, %364, !dbg !116
  %377 = fsub float %375, %353, !dbg !117
  %378 = fsub float %376, %355, !dbg !117
  %379 = sext i32 %251 to i64, !dbg !118
  %380 = getelementptr float, ptr addrspace(1) %26, i64 %379, !dbg !118
  %381 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %380, i1 %339, i32 0, i1 %339) #3, !dbg !119
  %382 = bitcast i32 %381 to float, !dbg !119
  %383 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %380, i1 %339, i32 0, i1 %339) #3, !dbg !119
  %384 = bitcast i32 %383 to float, !dbg !119
  %385 = fmul float %377, %382, !dbg !120
  %386 = fmul float %378, %384, !dbg !120
  %387 = fadd float %385, %353, !dbg !121
  %388 = fadd float %386, %355, !dbg !121
  %389 = select i1 %339, float %387, float 0.000000e+00, !dbg !122
  %390 = select i1 %339, float %388, float 0.000000e+00, !dbg !122
  %391 = select i1 %180, float %335, float %389, !dbg !123
  %392 = select i1 %180, float %338, float %390, !dbg !123
  %393 = select i1 %133, float %320, float %391, !dbg !123
  %394 = select i1 %133, float %317, float %392, !dbg !123
  %395 = select i1 %86, float %326, float %393, !dbg !123
  %396 = select i1 %86, float %323, float %394, !dbg !123
  %397 = select i1 %38, float %332, float %395, !dbg !123
  %398 = select i1 %38, float %329, float %396, !dbg !123
  %399 = sext i32 %35 to i64, !dbg !124
  %400 = getelementptr float, ptr addrspace(1) %27, i64 %399, !dbg !124
  %401 = bitcast float %397 to i32, !dbg !125
  %402 = bitcast float %398 to i32, !dbg !125
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %401, i32 %402, ptr addrspace(1) %400, i1 true) #3, !dbg !125
  ret void, !dbg !126
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6vszyuugr3wxq6f3frwvg6skuxlczrokasoywxeqlsgdeehutpe.py", directory: "inductor_cache/6v")
!4 = !{ptr @triton_poi_fused_cat_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_6", linkageName: "triton_poi_fused_cat_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 35, column: 18, scope: !7)
!17 = !DILocation(line: 36, column: 34, scope: !7)
!18 = !DILocation(line: 36, column: 40, scope: !7)
!19 = !DILocation(line: 36, column: 30, scope: !7)
!20 = !DILocation(line: 36, column: 46, scope: !7)
!21 = !DILocation(line: 37, column: 30, scope: !7)
!22 = !DILocation(line: 37, column: 35, scope: !7)
!23 = !DILocation(line: 39, column: 30, scope: !7)
!24 = !DILocation(line: 39, column: 35, scope: !7)
!25 = !DILocation(line: 41, column: 19, scope: !7)
!26 = !DILocation(line: 42, column: 27, scope: !7)
!27 = !DILocation(line: 44, column: 20, scope: !7)
!28 = !DILocation(line: 48, column: 31, scope: !7)
!29 = !DILocation(line: 48, column: 36, scope: !7)
!30 = !DILocation(line: 50, column: 31, scope: !7)
!31 = !DILocation(line: 50, column: 36, scope: !7)
!32 = !DILocation(line: 59, column: 20, scope: !7)
!33 = !DILocation(line: 60, column: 50, scope: !7)
!34 = !DILocation(line: 60, column: 41, scope: !7)
!35 = !DILocation(line: 60, column: 31, scope: !7)
!36 = !DILocation(line: 60, column: 56, scope: !7)
!37 = !DILocation(line: 61, column: 31, scope: !7)
!38 = !DILocation(line: 61, column: 45, scope: !7)
!39 = !DILocation(line: 63, column: 31, scope: !7)
!40 = !DILocation(line: 63, column: 45, scope: !7)
!41 = !DILocation(line: 65, column: 20, scope: !7)
!42 = !DILocation(line: 66, column: 27, scope: !7)
!43 = !DILocation(line: 68, column: 20, scope: !7)
!44 = !DILocation(line: 72, column: 31, scope: !7)
!45 = !DILocation(line: 72, column: 45, scope: !7)
!46 = !DILocation(line: 74, column: 31, scope: !7)
!47 = !DILocation(line: 74, column: 45, scope: !7)
!48 = !DILocation(line: 83, column: 20, scope: !7)
!49 = !DILocation(line: 84, column: 51, scope: !7)
!50 = !DILocation(line: 84, column: 42, scope: !7)
!51 = !DILocation(line: 84, column: 32, scope: !7)
!52 = !DILocation(line: 84, column: 57, scope: !7)
!53 = !DILocation(line: 85, column: 32, scope: !7)
!54 = !DILocation(line: 85, column: 46, scope: !7)
!55 = !DILocation(line: 87, column: 32, scope: !7)
!56 = !DILocation(line: 87, column: 46, scope: !7)
!57 = !DILocation(line: 89, column: 20, scope: !7)
!58 = !DILocation(line: 90, column: 27, scope: !7)
!59 = !DILocation(line: 92, column: 20, scope: !7)
!60 = !DILocation(line: 96, column: 32, scope: !7)
!61 = !DILocation(line: 96, column: 46, scope: !7)
!62 = !DILocation(line: 98, column: 32, scope: !7)
!63 = !DILocation(line: 98, column: 46, scope: !7)
!64 = !DILocation(line: 107, column: 20, scope: !7)
!65 = !DILocation(line: 108, column: 51, scope: !7)
!66 = !DILocation(line: 108, column: 42, scope: !7)
!67 = !DILocation(line: 108, column: 32, scope: !7)
!68 = !DILocation(line: 108, column: 57, scope: !7)
!69 = !DILocation(line: 109, column: 32, scope: !7)
!70 = !DILocation(line: 109, column: 46, scope: !7)
!71 = !DILocation(line: 111, column: 32, scope: !7)
!72 = !DILocation(line: 111, column: 46, scope: !7)
!73 = !DILocation(line: 113, column: 20, scope: !7)
!74 = !DILocation(line: 114, column: 27, scope: !7)
!75 = !DILocation(line: 29, column: 29, scope: !7)
!76 = !DILocation(line: 28, column: 21, scope: !7)
!77 = !DILocation(line: 28, column: 29, scope: !7)
!78 = !DILocation(line: 27, column: 29, scope: !7)
!79 = !DILocation(line: 26, column: 19, scope: !7)
!80 = !DILocation(line: 116, column: 20, scope: !7)
!81 = !DILocation(line: 120, column: 32, scope: !7)
!82 = !DILocation(line: 120, column: 46, scope: !7)
!83 = !DILocation(line: 122, column: 32, scope: !7)
!84 = !DILocation(line: 122, column: 46, scope: !7)
!85 = !DILocation(line: 110, column: 20, scope: !7)
!86 = !DILocation(line: 119, column: 20, scope: !7)
!87 = !DILocation(line: 121, column: 20, scope: !7)
!88 = !DILocation(line: 123, column: 20, scope: !7)
!89 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !92)
!90 = distinct !DILexicalBlockFile(scope: !7, file: !91, discriminator: 0)
!91 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!92 = !DILocation(line: 125, column: 42, scope: !7)
!93 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !94)
!94 = !DILocation(line: 101, column: 42, scope: !7)
!95 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !96)
!96 = !DILocation(line: 77, column: 42, scope: !7)
!97 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !98)
!98 = !DILocation(line: 53, column: 42, scope: !7)
!99 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !92)
!100 = !DILocation(line: 128, column: 20, scope: !7)
!101 = !DILocation(line: 131, column: 52, scope: !7)
!102 = !DILocation(line: 131, column: 42, scope: !7)
!103 = !DILocation(line: 131, column: 63, scope: !7)
!104 = !DILocation(line: 131, column: 38, scope: !7)
!105 = !DILocation(line: 131, column: 58, scope: !7)
!106 = !DILocation(line: 131, column: 33, scope: !7)
!107 = !DILocation(line: 131, column: 68, scope: !7)
!108 = !DILocation(line: 141, column: 37, scope: !7)
!109 = !DILocation(line: 141, column: 43, scope: !7)
!110 = !DILocation(line: 141, column: 33, scope: !7)
!111 = !DILocation(line: 141, column: 59, scope: !7)
!112 = !DILocation(line: 146, column: 22, scope: !7)
!113 = !DILocation(line: 147, column: 33, scope: !7)
!114 = !DILocation(line: 147, column: 38, scope: !7)
!115 = !DILocation(line: 148, column: 22, scope: !7)
!116 = !DILocation(line: 149, column: 22, scope: !7)
!117 = !DILocation(line: 150, column: 22, scope: !7)
!118 = !DILocation(line: 151, column: 33, scope: !7)
!119 = !DILocation(line: 151, column: 38, scope: !7)
!120 = !DILocation(line: 152, column: 22, scope: !7)
!121 = !DILocation(line: 153, column: 22, scope: !7)
!122 = !DILocation(line: 155, column: 37, scope: !7)
!123 = !DILocation(line: 0, scope: !7)
!124 = !DILocation(line: 160, column: 25, scope: !7)
!125 = !DILocation(line: 160, column: 38, scope: !7)
!126 = !DILocation(line: 160, column: 4, scope: !7)
