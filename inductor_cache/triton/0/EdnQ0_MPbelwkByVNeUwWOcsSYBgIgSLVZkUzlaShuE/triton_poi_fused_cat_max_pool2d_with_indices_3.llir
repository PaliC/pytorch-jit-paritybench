; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_max_pool2d_with_indices_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = icmp slt i32 %11, 256, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %14 = sdiv i32 %.frozen, 4, !dbg !15
  %15 = mul i32 %14, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %.frozen23 = freeze i32 %11, !dbg !17
  %16 = sdiv i32 %.frozen23, 64, !dbg !17
  %17 = mul i32 %16, 64, !dbg !18
  %.decomposed24 = sub i32 %.frozen23, %17, !dbg !18
  %18 = sext i32 %11 to i64, !dbg !19
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !19
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %13) #1, !dbg !20
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !20
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !20
  %23 = icmp sgt i32 %.decomposed, 1, !dbg !21
  %24 = add i32 %11, -10, !dbg !22
  %25 = sext i32 %24 to i64, !dbg !23
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !23
  %27 = icmp sgt i32 %.decomposed, 0, !dbg !24
  %28 = add i32 %11, -9, !dbg !25
  %29 = add i32 %11, -8, !dbg !25
  %30 = sext i32 %28 to i64, !dbg !26
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !26
  %32 = sext i32 %29 to i64, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !26
  %34 = icmp sgt i32 %.decomposed, -1, !dbg !27
  %35 = icmp ult i32 %.decomposed, 4, !dbg !28
  %36 = add i32 %11, -7, !dbg !29
  %37 = add i32 %11, -6, !dbg !29
  %38 = sext i32 %36 to i64, !dbg !30
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !30
  %40 = sext i32 %37 to i64, !dbg !30
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !30
  %42 = add nsw i32 %.decomposed, 2, !dbg !31
  %43 = icmp ult i32 %42, 4, !dbg !31
  %44 = add i32 %11, -5, !dbg !32
  %45 = add i32 %11, -4, !dbg !32
  %46 = sext i32 %44 to i64, !dbg !33
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !33
  %48 = sext i32 %45 to i64, !dbg !33
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !33
  %50 = add i32 %11, -3, !dbg !34
  %51 = add i32 %11, -2, !dbg !34
  %52 = sext i32 %50 to i64, !dbg !35
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !35
  %54 = sext i32 %51 to i64, !dbg !35
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !35
  %56 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !16
  %57 = insertelement <2 x i32> %56, i32 %14, i64 1, !dbg !16
  %58 = srem <2 x i32> %57, splat (i32 4), !dbg !16
  %59 = extractelement <2 x i32> %58, i64 1, !dbg !36
  %60 = icmp sgt i32 %59, 1, !dbg !37
  %61 = and i1 %23, %60, !dbg !38
  %62 = and i1 %13, %61, !dbg !39
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %62, i32 -8388608, i1 %62, i32 -8388608, i1 %62) #1, !dbg !40
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !40
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !40
  %66 = and i1 %27, %60, !dbg !41
  %67 = icmp sgt <2 x i32> %58, <i32 0, i32 -1>, !dbg !24
  %68 = extractelement <2 x i1> %67, i64 0, !dbg !41
  %69 = and i1 %68, %60, !dbg !41
  %70 = and i1 %13, %66, !dbg !42
  %71 = and i1 %13, %69, !dbg !42
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %70, i32 -8388608, i1 %70) #1, !dbg !43
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %71, i32 -8388608, i1 %71) #1, !dbg !43
  %74 = and i1 %34, %60, !dbg !44
  %75 = and i1 %13, %74, !dbg !45
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %75, i32 -8388608, i1 %75, i32 -8388608, i1 %75) #1, !dbg !46
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !46
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !46
  %79 = extractelement <2 x i32> %58, i64 0, !dbg !28
  %80 = add nsw i32 %79, 1, !dbg !28
  %81 = icmp ult i32 %80, 4, !dbg !28
  %82 = and i1 %35, %60, !dbg !47
  %83 = and i1 %81, %60, !dbg !47
  %84 = and i1 %13, %82, !dbg !48
  %85 = and i1 %13, %83, !dbg !48
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %84, i32 -8388608, i1 %84) #1, !dbg !49
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %85, i32 -8388608, i1 %85) #1, !dbg !49
  %88 = and i1 %60, %43, !dbg !50
  %89 = and i1 %13, %88, !dbg !51
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %89, i32 -8388608, i1 %89, i32 -8388608, i1 %89) #1, !dbg !52
  %91 = extractvalue { i32, i32 } %90, 0, !dbg !52
  %92 = extractvalue { i32, i32 } %90, 1, !dbg !52
  %93 = icmp sgt i32 %59, 0, !dbg !53
  %94 = and i1 %23, %93, !dbg !54
  %95 = and i1 %13, %94, !dbg !55
  %96 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %95, i32 -8388608, i1 %95, i32 -8388608, i1 %95) #1, !dbg !56
  %97 = extractvalue { i32, i32 } %96, 0, !dbg !56
  %98 = extractvalue { i32, i32 } %96, 1, !dbg !56
  %99 = and i1 %27, %93, !dbg !57
  %100 = and i1 %68, %93, !dbg !57
  %101 = and i1 %13, %99, !dbg !58
  %102 = and i1 %13, %100, !dbg !58
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %101, i32 -8388608, i1 %101) #1, !dbg !59
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %102, i32 -8388608, i1 %102) #1, !dbg !59
  %105 = and i1 %34, %93, !dbg !60
  %106 = and i1 %13, %105, !dbg !61
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %49, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106) #1, !dbg !62
  %108 = extractvalue { i32, i32 } %107, 0, !dbg !62
  %109 = extractvalue { i32, i32 } %107, 1, !dbg !62
  %110 = and i1 %35, %93, !dbg !63
  %111 = and i1 %81, %93, !dbg !63
  %112 = and i1 %13, %110, !dbg !64
  %113 = and i1 %13, %111, !dbg !64
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %112, i32 -8388608, i1 %112) #1, !dbg !65
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %113, i32 -8388608, i1 %113) #1, !dbg !65
  %116 = and i1 %93, %43, !dbg !66
  %117 = and i1 %13, %116, !dbg !67
  %118 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %55, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117) #1, !dbg !68
  %119 = extractvalue { i32, i32 } %118, 0, !dbg !68
  %120 = extractvalue { i32, i32 } %118, 1, !dbg !68
  %121 = extractelement <2 x i1> %67, i64 1, !dbg !69
  %122 = and i1 %23, %121, !dbg !69
  %123 = and i1 %13, %122, !dbg !70
  %124 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %55, i1 %123, i32 -8388608, i1 %123, i32 -8388608, i1 %123) #1, !dbg !71
  %125 = extractvalue { i32, i32 } %124, 0, !dbg !71
  %126 = extractvalue { i32, i32 } %124, 1, !dbg !71
  %127 = and i1 %27, %121, !dbg !72
  %128 = and i1 %68, %121, !dbg !72
  %129 = add i32 %11, -1, !dbg !73
  %130 = sext i32 %129 to i64, !dbg !74
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !74
  %132 = sext i32 %12 to i64, !dbg !74
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !74
  %134 = getelementptr i8, ptr addrspace(1) %133, i64 -4, !dbg !74
  %135 = and i1 %13, %127, !dbg !75
  %136 = and i1 %13, %128, !dbg !75
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %135, i32 -8388608, i1 %135) #1, !dbg !76
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %136, i32 -8388608, i1 %136) #1, !dbg !76
  %139 = or i32 %59, %.decomposed, !dbg !77
  %140 = icmp sgt i32 %139, -1, !dbg !77
  %141 = and i1 %13, %140, !dbg !78
  %142 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %19, i1 %141, i32 -8388608, i1 %141, i32 -8388608, i1 %141) #1, !dbg !79
  %143 = extractvalue { i32, i32 } %142, 0, !dbg !79
  %144 = extractvalue { i32, i32 } %142, 1, !dbg !79
  %145 = and i1 %35, %121, !dbg !80
  %146 = and i1 %81, %121, !dbg !80
  %147 = add i32 %11, 2, !dbg !81
  %148 = sext i32 %147 to i64, !dbg !82
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !82
  %150 = and i1 %13, %145, !dbg !83
  %151 = and i1 %13, %146, !dbg !83
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %150, i32 -8388608, i1 %150) #1, !dbg !84
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %151, i32 -8388608, i1 %151) #1, !dbg !84
  %154 = and i1 %121, %43, !dbg !85
  %155 = and i1 %13, %154, !dbg !86
  %156 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %149, i1 %155, i32 -8388608, i1 %155, i32 -8388608, i1 %155) #1, !dbg !87
  %157 = extractvalue { i32, i32 } %156, 0, !dbg !87
  %158 = extractvalue { i32, i32 } %156, 1, !dbg !87
  %159 = add nsw i32 %59, 1, !dbg !88
  %160 = icmp ult i32 %159, 4, !dbg !88
  %161 = and i1 %23, %160, !dbg !89
  %162 = and i1 %13, %161, !dbg !90
  %163 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %149, i1 %162, i32 -8388608, i1 %162, i32 -8388608, i1 %162) #1, !dbg !91
  %164 = extractvalue { i32, i32 } %163, 0, !dbg !91
  %165 = extractvalue { i32, i32 } %163, 1, !dbg !91
  %166 = and i1 %27, %160, !dbg !92
  %167 = and i1 %68, %160, !dbg !92
  %168 = add i32 %11, 3, !dbg !93
  %169 = add i32 %11, 4, !dbg !93
  %170 = sext i32 %168 to i64, !dbg !94
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !94
  %172 = sext i32 %169 to i64, !dbg !94
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !94
  %174 = and i1 %13, %166, !dbg !95
  %175 = and i1 %13, %167, !dbg !95
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %174, i32 -8388608, i1 %174) #1, !dbg !96
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %175, i32 -8388608, i1 %175) #1, !dbg !96
  %178 = and i1 %34, %160, !dbg !97
  %179 = and i1 %13, %178, !dbg !98
  %180 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %173, i1 %179, i32 -8388608, i1 %179, i32 -8388608, i1 %179) #1, !dbg !99
  %181 = extractvalue { i32, i32 } %180, 0, !dbg !99
  %182 = extractvalue { i32, i32 } %180, 1, !dbg !99
  %183 = or i32 %159, %.decomposed, !dbg !100
  %184 = icmp ult i32 %183, 4, !dbg !100
  %185 = add i32 %11, 5, !dbg !101
  %186 = add i32 %11, 6, !dbg !101
  %187 = sext i32 %185 to i64, !dbg !102
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %187, !dbg !102
  %189 = sext i32 %186 to i64, !dbg !102
  %190 = getelementptr float, ptr addrspace(1) %0, i64 %189, !dbg !102
  %191 = and i1 %13, %184, !dbg !103
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %191, i32 -8388608, i1 %191) #1, !dbg !104
  %193 = add nsw i32 %59, 2, !dbg !36
  %194 = icmp ult i32 %193, 4, !dbg !36
  %195 = and i1 %23, %194, !dbg !105
  %196 = and i1 %13, %195, !dbg !106
  %197 = and i1 %27, %194, !dbg !107
  %198 = and i1 %68, %194, !dbg !107
  %199 = add i32 %11, 7, !dbg !108
  %200 = add i32 %11, 8, !dbg !108
  %201 = sext i32 %199 to i64, !dbg !109
  %202 = getelementptr float, ptr addrspace(1) %0, i64 %201, !dbg !109
  %203 = sext i32 %200 to i64, !dbg !109
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !109
  %205 = and i1 %13, %197, !dbg !110
  %206 = and i1 %13, %198, !dbg !110
  %207 = and i1 %34, %194, !dbg !111
  %208 = and i1 %13, %207, !dbg !112
  %209 = insertelement <4 x i32> poison, i32 %80, i64 0, !dbg !113
  %210 = insertelement <4 x i32> %209, i32 %193, i64 1, !dbg !113
  %211 = insertelement <4 x i32> %210, i32 %159, i64 2, !dbg !113
  %212 = shufflevector <4 x i32> %211, <4 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 0>, !dbg !113
  %213 = insertelement <4 x i32> poison, i32 %193, i64 0, !dbg !113
  %214 = insertelement <4 x i32> %213, i32 %.decomposed, i64 1, !dbg !113
  %215 = insertelement <4 x i32> %214, i32 %42, i64 2, !dbg !113
  %216 = insertelement <4 x i32> %215, i32 %159, i64 3, !dbg !113
  %217 = or <4 x i32> %212, %216, !dbg !113
  %218 = icmp ult <4 x i32> %217, splat (i32 4), !dbg !113
  %219 = extractelement <4 x i1> %218, i64 3, !dbg !103
  %220 = and i1 %13, %219, !dbg !103
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %220, i32 -8388608, i1 %220) #1, !dbg !104
  %222 = extractelement <4 x i1> %218, i64 2, !dbg !114
  %223 = and i1 %13, %222, !dbg !114
  %224 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %190, i1 %223, i32 -8388608, i1 %223, i32 -8388608, i1 %223) #1, !dbg !115
  %225 = extractvalue { i32, i32 } %224, 0, !dbg !115
  %226 = extractvalue { i32, i32 } %224, 1, !dbg !115
  %227 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %190, i1 %196, i32 -8388608, i1 %196, i32 -8388608, i1 %196) #1, !dbg !116
  %228 = extractvalue { i32, i32 } %227, 0, !dbg !116
  %229 = extractvalue { i32, i32 } %227, 1, !dbg !116
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %202, i1 %205, i32 -8388608, i1 %205) #1, !dbg !117
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 %206, i32 -8388608, i1 %206) #1, !dbg !117
  %232 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %204, i1 %208, i32 -8388608, i1 %208, i32 -8388608, i1 %208) #1, !dbg !118
  %233 = extractvalue { i32, i32 } %232, 0, !dbg !118
  %234 = extractvalue { i32, i32 } %232, 1, !dbg !118
  %235 = add i32 %11, 9, !dbg !119
  %236 = add i32 %11, 10, !dbg !119
  %237 = sext i32 %235 to i64, !dbg !120
  %238 = getelementptr float, ptr addrspace(1) %0, i64 %237, !dbg !120
  %239 = sext i32 %236 to i64, !dbg !120
  %240 = getelementptr float, ptr addrspace(1) %0, i64 %239, !dbg !120
  %241 = extractelement <4 x i1> %218, i64 1, !dbg !121
  %242 = and i1 %13, %241, !dbg !121
  %243 = extractelement <4 x i1> %218, i64 0, !dbg !121
  %244 = and i1 %13, %243, !dbg !121
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %242, i32 -8388608, i1 %242) #1, !dbg !122
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %240, i1 %244, i32 -8388608, i1 %244) #1, !dbg !122
  %247 = or i32 %193, %42, !dbg !123
  %248 = icmp ult i32 %247, 4, !dbg !123
  %249 = and i1 %13, %248, !dbg !124
  %250 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %240, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249) #1, !dbg !125
  %251 = extractvalue { i32, i32 } %250, 0, !dbg !125
  %252 = extractvalue { i32, i32 } %250, 1, !dbg !125
  %253 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !40
  %254 = insertelement <2 x i32> %253, i32 %65, i64 1, !dbg !40
  %255 = bitcast <2 x i32> %254 to <2 x float>, !dbg !40
  %256 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !43
  %257 = insertelement <2 x i32> %256, i32 %73, i64 1, !dbg !43
  %258 = bitcast <2 x i32> %257 to <2 x float>, !dbg !43
  %259 = fcmp ogt <2 x float> %258, %255, !dbg !126
  %260 = fcmp uno <2 x float> %258, zeroinitializer, !dbg !130
  %261 = or <2 x i1> %259, %260, !dbg !131
  %.v = select <2 x i1> %261, <2 x i32> %257, <2 x i32> %254, !dbg !132
  %262 = bitcast <2 x i32> %.v to <2 x float>, !dbg !132
  %263 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !46
  %264 = insertelement <2 x i32> %263, i32 %78, i64 1, !dbg !46
  %265 = bitcast <2 x i32> %264 to <2 x float>, !dbg !46
  %266 = fcmp olt <2 x float> %262, %265, !dbg !133
  %267 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !49
  %268 = insertelement <2 x i32> %267, i32 %87, i64 1, !dbg !49
  %269 = bitcast <2 x i32> %268 to <2 x float>, !dbg !49
  %270 = fcmp uno <2 x float> %265, zeroinitializer, !dbg !135
  %271 = or <2 x i1> %266, %270, !dbg !136
  %.v1 = select <2 x i1> %271, <2 x i32> %264, <2 x i32> %.v, !dbg !137
  %272 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !137
  %273 = fcmp olt <2 x float> %272, %269, !dbg !138
  %274 = fcmp uno <2 x float> %269, zeroinitializer, !dbg !140
  %275 = or <2 x i1> %274, %273, !dbg !141
  %.v2 = select <2 x i1> %275, <2 x i32> %268, <2 x i32> %.v1, !dbg !142
  %276 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !142
  %277 = zext <2 x i1> %259 to <2 x i8>, !dbg !143
  %278 = select <2 x i1> %266, <2 x i8> splat (i8 2), <2 x i8> %277, !dbg !144
  %279 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !52
  %280 = insertelement <2 x i32> %279, i32 %92, i64 1, !dbg !52
  %281 = bitcast <2 x i32> %280 to <2 x float>, !dbg !52
  %282 = fcmp uno <2 x float> %281, zeroinitializer, !dbg !145
  %283 = fcmp olt <2 x float> %276, %281, !dbg !147
  %284 = or <2 x i1> %282, %283, !dbg !148
  %.v3 = select <2 x i1> %284, <2 x i32> %280, <2 x i32> %.v2, !dbg !149
  %285 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !149
  %286 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !56
  %287 = insertelement <2 x i32> %286, i32 %98, i64 1, !dbg !56
  %288 = bitcast <2 x i32> %287 to <2 x float>, !dbg !56
  %289 = fcmp olt <2 x float> %285, %288, !dbg !150
  %290 = fcmp uno <2 x float> %288, zeroinitializer, !dbg !152
  %291 = or <2 x i1> %290, %289, !dbg !153
  %.v4 = select <2 x i1> %291, <2 x i32> %287, <2 x i32> %.v3, !dbg !154
  %292 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !154
  %293 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !59
  %294 = insertelement <2 x i32> %293, i32 %104, i64 1, !dbg !59
  %295 = bitcast <2 x i32> %294 to <2 x float>, !dbg !59
  %296 = fcmp olt <2 x float> %292, %295, !dbg !155
  %297 = fcmp uno <2 x float> %295, zeroinitializer, !dbg !157
  %298 = or <2 x i1> %297, %296, !dbg !158
  %.v5 = select <2 x i1> %298, <2 x i32> %294, <2 x i32> %.v4, !dbg !159
  %299 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !159
  %300 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !62
  %301 = insertelement <2 x i32> %300, i32 %109, i64 1, !dbg !62
  %302 = bitcast <2 x i32> %301 to <2 x float>, !dbg !62
  %303 = fcmp olt <2 x float> %299, %302, !dbg !160
  %304 = fcmp uno <2 x float> %302, zeroinitializer, !dbg !162
  %305 = or <2 x i1> %304, %303, !dbg !163
  %.v6 = select <2 x i1> %305, <2 x i32> %301, <2 x i32> %.v5, !dbg !164
  %306 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !164
  %307 = insertelement <2 x i32> poison, i32 %114, i64 0, !dbg !65
  %308 = insertelement <2 x i32> %307, i32 %115, i64 1, !dbg !65
  %309 = bitcast <2 x i32> %308 to <2 x float>, !dbg !65
  %310 = fcmp olt <2 x float> %306, %309, !dbg !165
  %311 = fcmp uno <2 x float> %309, zeroinitializer, !dbg !167
  %312 = or <2 x i1> %311, %310, !dbg !168
  %.v7 = select <2 x i1> %312, <2 x i32> %308, <2 x i32> %.v6, !dbg !169
  %313 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !169
  %314 = insertelement <2 x i32> poison, i32 %119, i64 0, !dbg !68
  %315 = insertelement <2 x i32> %314, i32 %120, i64 1, !dbg !68
  %316 = bitcast <2 x i32> %315 to <2 x float>, !dbg !68
  %317 = fcmp olt <2 x float> %313, %316, !dbg !170
  %318 = fcmp uno <2 x float> %316, zeroinitializer, !dbg !172
  %319 = or <2 x i1> %318, %317, !dbg !173
  %.v8 = select <2 x i1> %319, <2 x i32> %315, <2 x i32> %.v7, !dbg !174
  %320 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !174
  %321 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !71
  %322 = insertelement <2 x i32> %321, i32 %126, i64 1, !dbg !71
  %323 = bitcast <2 x i32> %322 to <2 x float>, !dbg !71
  %324 = fcmp olt <2 x float> %320, %323, !dbg !175
  %325 = fcmp uno <2 x float> %323, zeroinitializer, !dbg !177
  %326 = or <2 x i1> %325, %324, !dbg !178
  %.v9 = select <2 x i1> %326, <2 x i32> %322, <2 x i32> %.v8, !dbg !179
  %327 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !179
  %328 = insertelement <2 x i32> poison, i32 %137, i64 0, !dbg !76
  %329 = insertelement <2 x i32> %328, i32 %138, i64 1, !dbg !76
  %330 = bitcast <2 x i32> %329 to <2 x float>, !dbg !76
  %331 = fcmp olt <2 x float> %327, %330, !dbg !180
  %332 = fcmp uno <2 x float> %330, zeroinitializer, !dbg !182
  %333 = or <2 x i1> %332, %331, !dbg !183
  %.v10 = select <2 x i1> %333, <2 x i32> %329, <2 x i32> %.v9, !dbg !184
  %334 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !184
  %335 = insertelement <2 x i32> poison, i32 %143, i64 0, !dbg !79
  %336 = insertelement <2 x i32> %335, i32 %144, i64 1, !dbg !79
  %337 = bitcast <2 x i32> %336 to <2 x float>, !dbg !79
  %338 = fcmp olt <2 x float> %334, %337, !dbg !185
  %339 = fcmp uno <2 x float> %337, zeroinitializer, !dbg !187
  %340 = or <2 x i1> %339, %338, !dbg !188
  %.v11 = select <2 x i1> %340, <2 x i32> %336, <2 x i32> %.v10, !dbg !189
  %341 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !189
  %342 = insertelement <2 x i32> poison, i32 %152, i64 0, !dbg !84
  %343 = insertelement <2 x i32> %342, i32 %153, i64 1, !dbg !84
  %344 = bitcast <2 x i32> %343 to <2 x float>, !dbg !84
  %345 = fcmp olt <2 x float> %341, %344, !dbg !190
  %346 = insertelement <2 x i32> poison, i32 %157, i64 0, !dbg !87
  %347 = insertelement <2 x i32> %346, i32 %158, i64 1, !dbg !87
  %348 = bitcast <2 x i32> %347 to <2 x float>, !dbg !87
  %349 = fcmp uno <2 x float> %344, zeroinitializer, !dbg !192
  %350 = or <2 x i1> %349, %345, !dbg !193
  %.v12 = select <2 x i1> %350, <2 x i32> %343, <2 x i32> %.v11, !dbg !194
  %351 = bitcast <2 x i32> %.v12 to <2 x float>, !dbg !194
  %352 = fcmp olt <2 x float> %351, %348, !dbg !195
  %353 = fcmp uno <2 x float> %348, zeroinitializer, !dbg !197
  %354 = or <2 x i1> %353, %352, !dbg !198
  %.v13 = select <2 x i1> %354, <2 x i32> %347, <2 x i32> %.v12, !dbg !199
  %355 = bitcast <2 x i32> %.v13 to <2 x float>, !dbg !199
  %356 = select <2 x i1> %273, <2 x i8> splat (i8 3), <2 x i8> %278, !dbg !200
  %357 = select <2 x i1> %283, <2 x i8> splat (i8 4), <2 x i8> %356, !dbg !201
  %358 = select <2 x i1> %289, <2 x i8> splat (i8 5), <2 x i8> %357, !dbg !202
  %359 = select <2 x i1> %296, <2 x i8> splat (i8 6), <2 x i8> %358, !dbg !203
  %360 = select <2 x i1> %303, <2 x i8> splat (i8 7), <2 x i8> %359, !dbg !204
  %361 = select <2 x i1> %310, <2 x i8> splat (i8 8), <2 x i8> %360, !dbg !205
  %362 = select <2 x i1> %317, <2 x i8> splat (i8 9), <2 x i8> %361, !dbg !206
  %363 = select <2 x i1> %324, <2 x i8> splat (i8 10), <2 x i8> %362, !dbg !207
  %364 = select <2 x i1> %331, <2 x i8> splat (i8 11), <2 x i8> %363, !dbg !208
  %365 = select <2 x i1> %338, <2 x i8> splat (i8 12), <2 x i8> %364, !dbg !209
  %366 = select <2 x i1> %345, <2 x i8> splat (i8 13), <2 x i8> %365, !dbg !210
  %367 = insertelement <2 x i32> poison, i32 %164, i64 0, !dbg !91
  %368 = insertelement <2 x i32> %367, i32 %165, i64 1, !dbg !91
  %369 = bitcast <2 x i32> %368 to <2 x float>, !dbg !91
  %370 = fcmp uno <2 x float> %369, zeroinitializer, !dbg !211
  %371 = fcmp olt <2 x float> %355, %369, !dbg !213
  %372 = or <2 x i1> %370, %371, !dbg !214
  %.v14 = select <2 x i1> %372, <2 x i32> %368, <2 x i32> %.v13, !dbg !215
  %373 = bitcast <2 x i32> %.v14 to <2 x float>, !dbg !215
  %374 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !96
  %375 = insertelement <2 x i32> %374, i32 %177, i64 1, !dbg !96
  %376 = bitcast <2 x i32> %375 to <2 x float>, !dbg !96
  %377 = fcmp olt <2 x float> %373, %376, !dbg !216
  %378 = fcmp uno <2 x float> %376, zeroinitializer, !dbg !218
  %379 = or <2 x i1> %378, %377, !dbg !219
  %.v15 = select <2 x i1> %379, <2 x i32> %375, <2 x i32> %.v14, !dbg !220
  %380 = bitcast <2 x i32> %.v15 to <2 x float>, !dbg !220
  %381 = insertelement <2 x i32> poison, i32 %181, i64 0, !dbg !99
  %382 = insertelement <2 x i32> %381, i32 %182, i64 1, !dbg !99
  %383 = bitcast <2 x i32> %382 to <2 x float>, !dbg !99
  %384 = fcmp olt <2 x float> %380, %383, !dbg !221
  %385 = fcmp uno <2 x float> %383, zeroinitializer, !dbg !223
  %386 = or <2 x i1> %385, %384, !dbg !224
  %.v16 = select <2 x i1> %386, <2 x i32> %382, <2 x i32> %.v15, !dbg !225
  %387 = bitcast <2 x i32> %.v16 to <2 x float>, !dbg !225
  %388 = insertelement <2 x i32> poison, i32 %192, i64 0, !dbg !104
  %389 = insertelement <2 x i32> %388, i32 %221, i64 1, !dbg !104
  %390 = bitcast <2 x i32> %389 to <2 x float>, !dbg !104
  %391 = fcmp olt <2 x float> %387, %390, !dbg !226
  %392 = fcmp uno <2 x float> %390, zeroinitializer, !dbg !228
  %393 = or <2 x i1> %392, %391, !dbg !229
  %.v17 = select <2 x i1> %393, <2 x i32> %389, <2 x i32> %.v16, !dbg !230
  %394 = bitcast <2 x i32> %.v17 to <2 x float>, !dbg !230
  %395 = insertelement <2 x i32> poison, i32 %225, i64 0, !dbg !115
  %396 = insertelement <2 x i32> %395, i32 %226, i64 1, !dbg !115
  %397 = bitcast <2 x i32> %396 to <2 x float>, !dbg !115
  %398 = fcmp olt <2 x float> %394, %397, !dbg !231
  %399 = fcmp uno <2 x float> %397, zeroinitializer, !dbg !233
  %400 = or <2 x i1> %399, %398, !dbg !234
  %.v18 = select <2 x i1> %400, <2 x i32> %396, <2 x i32> %.v17, !dbg !235
  %401 = bitcast <2 x i32> %.v18 to <2 x float>, !dbg !235
  %402 = insertelement <2 x i32> poison, i32 %228, i64 0, !dbg !116
  %403 = insertelement <2 x i32> %402, i32 %229, i64 1, !dbg !116
  %404 = bitcast <2 x i32> %403 to <2 x float>, !dbg !116
  %405 = fcmp olt <2 x float> %401, %404, !dbg !236
  %406 = fcmp uno <2 x float> %404, zeroinitializer, !dbg !238
  %407 = or <2 x i1> %406, %405, !dbg !239
  %.v19 = select <2 x i1> %407, <2 x i32> %403, <2 x i32> %.v18, !dbg !240
  %408 = bitcast <2 x i32> %.v19 to <2 x float>, !dbg !240
  %409 = insertelement <2 x i32> poison, i32 %230, i64 0, !dbg !117
  %410 = insertelement <2 x i32> %409, i32 %231, i64 1, !dbg !117
  %411 = bitcast <2 x i32> %410 to <2 x float>, !dbg !117
  %412 = fcmp olt <2 x float> %408, %411, !dbg !241
  %413 = fcmp uno <2 x float> %411, zeroinitializer, !dbg !243
  %414 = or <2 x i1> %413, %412, !dbg !244
  %.v20 = select <2 x i1> %414, <2 x i32> %410, <2 x i32> %.v19, !dbg !245
  %415 = bitcast <2 x i32> %.v20 to <2 x float>, !dbg !245
  %416 = insertelement <2 x i32> poison, i32 %233, i64 0, !dbg !118
  %417 = insertelement <2 x i32> %416, i32 %234, i64 1, !dbg !118
  %418 = bitcast <2 x i32> %417 to <2 x float>, !dbg !118
  %419 = fcmp olt <2 x float> %415, %418, !dbg !246
  %420 = fcmp uno <2 x float> %418, zeroinitializer, !dbg !248
  %421 = or <2 x i1> %420, %419, !dbg !249
  %.v21 = select <2 x i1> %421, <2 x i32> %417, <2 x i32> %.v20, !dbg !250
  %422 = bitcast <2 x i32> %.v21 to <2 x float>, !dbg !250
  %423 = insertelement <2 x i32> poison, i32 %245, i64 0, !dbg !122
  %424 = insertelement <2 x i32> %423, i32 %246, i64 1, !dbg !122
  %425 = bitcast <2 x i32> %424 to <2 x float>, !dbg !122
  %426 = fcmp olt <2 x float> %422, %425, !dbg !251
  %427 = fcmp uno <2 x float> %425, zeroinitializer, !dbg !253
  %428 = or <2 x i1> %427, %426, !dbg !254
  %.v22 = select <2 x i1> %428, <2 x i32> %424, <2 x i32> %.v21, !dbg !255
  %429 = bitcast <2 x i32> %.v22 to <2 x float>, !dbg !255
  %430 = insertelement <2 x i32> poison, i32 %251, i64 0, !dbg !125
  %431 = insertelement <2 x i32> %430, i32 %252, i64 1, !dbg !125
  %432 = bitcast <2 x i32> %431 to <2 x float>, !dbg !125
  %433 = fcmp olt <2 x float> %429, %432, !dbg !256
  %434 = bitcast i32 %251 to float, !dbg !258
  %435 = fcmp uno float %434, 0.000000e+00, !dbg !258
  %436 = bitcast i32 %252 to float, !dbg !258
  %437 = fcmp uno float %436, 0.000000e+00, !dbg !258
  %438 = extractelement <2 x i1> %433, i64 0, !dbg !259
  %439 = or i1 %435, %438, !dbg !259
  %440 = extractelement <2 x i1> %433, i64 1, !dbg !259
  %441 = or i1 %437, %440, !dbg !259
  %442 = select <2 x i1> %352, <2 x i8> splat (i8 14), <2 x i8> %366, !dbg !260
  %443 = select <2 x i1> %371, <2 x i8> splat (i8 15), <2 x i8> %442, !dbg !261
  %444 = select <2 x i1> %377, <2 x i8> splat (i8 16), <2 x i8> %443, !dbg !262
  %445 = select <2 x i1> %384, <2 x i8> splat (i8 17), <2 x i8> %444, !dbg !263
  %446 = select <2 x i1> %391, <2 x i8> splat (i8 18), <2 x i8> %445, !dbg !264
  %447 = select <2 x i1> %398, <2 x i8> splat (i8 19), <2 x i8> %446, !dbg !265
  %448 = select <2 x i1> %405, <2 x i8> splat (i8 20), <2 x i8> %447, !dbg !266
  %449 = select <2 x i1> %412, <2 x i8> splat (i8 21), <2 x i8> %448, !dbg !267
  %450 = select <2 x i1> %419, <2 x i8> splat (i8 22), <2 x i8> %449, !dbg !268
  %451 = select <2 x i1> %426, <2 x i8> splat (i8 23), <2 x i8> %450, !dbg !269
  %452 = select <2 x i1> %433, <2 x i8> splat (i8 24), <2 x i8> %451, !dbg !270
  %453 = shl i32 %16, 8, !dbg !271
  %454 = add i32 %453, %.decomposed24, !dbg !272
  %455 = sext i32 %454 to i64, !dbg !273
  %456 = getelementptr float, ptr addrspace(1) %1, i64 %455, !dbg !273
  %457 = extractelement <2 x i32> %.v22, i64 0, !dbg !274
  %458 = select i1 %439, i32 %251, i32 %457, !dbg !275
  %459 = extractelement <2 x i32> %.v22, i64 1, !dbg !274
  %460 = select i1 %441, i32 %252, i32 %459, !dbg !275
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %458, i32 %460, ptr addrspace(1) %456, i1 %13) #1, !dbg !274
  %461 = getelementptr i8, ptr addrspace(1) %2, i64 %18, !dbg !276
  %462 = bitcast <2 x i8> %452 to i16, !dbg !277
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %462, ptr addrspace(1) %461, i1 %13) #1, !dbg !277
  %463 = getelementptr float, ptr addrspace(1) %3, i64 %455, !dbg !278
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %21, i32 %22, ptr addrspace(1) %463, i1 %13) #1, !dbg !279
  ret void, !dbg !280
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "codrk74iyttcu6x4emhdsaafxttb6vfxydyzxvxxl4cad6nwpo5c.py", directory: "inductor_cache/od")
!4 = !{ptr @triton_poi_fused_cat_max_pool2d_with_indices_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_max_pool2d_with_indices_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_max_pool2d_with_indices_3", linkageName: "triton_poi_fused_cat_max_pool2d_with_indices_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 32, scope: !7)
!20 = !DILocation(line: 29, column: 37, scope: !7)
!21 = !DILocation(line: 37, column: 19, scope: !7)
!22 = !DILocation(line: 41, column: 39, scope: !7)
!23 = !DILocation(line: 41, column: 31, scope: !7)
!24 = !DILocation(line: 43, column: 21, scope: !7)
!25 = !DILocation(line: 47, column: 38, scope: !7)
!26 = !DILocation(line: 47, column: 31, scope: !7)
!27 = !DILocation(line: 50, column: 21, scope: !7)
!28 = !DILocation(line: 59, column: 20, scope: !7)
!29 = !DILocation(line: 61, column: 38, scope: !7)
!30 = !DILocation(line: 61, column: 31, scope: !7)
!31 = !DILocation(line: 66, column: 20, scope: !7)
!32 = !DILocation(line: 78, column: 38, scope: !7)
!33 = !DILocation(line: 78, column: 31, scope: !7)
!34 = !DILocation(line: 84, column: 38, scope: !7)
!35 = !DILocation(line: 84, column: 31, scope: !7)
!36 = !DILocation(line: 130, column: 21, scope: !7)
!37 = !DILocation(line: 32, column: 19, scope: !7)
!38 = !DILocation(line: 40, column: 19, scope: !7)
!39 = !DILocation(line: 41, column: 52, scope: !7)
!40 = !DILocation(line: 41, column: 44, scope: !7)
!41 = !DILocation(line: 46, column: 19, scope: !7)
!42 = !DILocation(line: 47, column: 51, scope: !7)
!43 = !DILocation(line: 47, column: 43, scope: !7)
!44 = !DILocation(line: 53, column: 19, scope: !7)
!45 = !DILocation(line: 54, column: 51, scope: !7)
!46 = !DILocation(line: 54, column: 43, scope: !7)
!47 = !DILocation(line: 60, column: 19, scope: !7)
!48 = !DILocation(line: 61, column: 51, scope: !7)
!49 = !DILocation(line: 61, column: 43, scope: !7)
!50 = !DILocation(line: 67, column: 19, scope: !7)
!51 = !DILocation(line: 68, column: 51, scope: !7)
!52 = !DILocation(line: 68, column: 43, scope: !7)
!53 = !DILocation(line: 71, column: 21, scope: !7)
!54 = !DILocation(line: 74, column: 20, scope: !7)
!55 = !DILocation(line: 75, column: 51, scope: !7)
!56 = !DILocation(line: 75, column: 43, scope: !7)
!57 = !DILocation(line: 77, column: 20, scope: !7)
!58 = !DILocation(line: 78, column: 51, scope: !7)
!59 = !DILocation(line: 78, column: 43, scope: !7)
!60 = !DILocation(line: 80, column: 20, scope: !7)
!61 = !DILocation(line: 81, column: 51, scope: !7)
!62 = !DILocation(line: 81, column: 43, scope: !7)
!63 = !DILocation(line: 83, column: 20, scope: !7)
!64 = !DILocation(line: 84, column: 51, scope: !7)
!65 = !DILocation(line: 84, column: 43, scope: !7)
!66 = !DILocation(line: 86, column: 20, scope: !7)
!67 = !DILocation(line: 87, column: 51, scope: !7)
!68 = !DILocation(line: 87, column: 43, scope: !7)
!69 = !DILocation(line: 93, column: 20, scope: !7)
!70 = !DILocation(line: 94, column: 51, scope: !7)
!71 = !DILocation(line: 94, column: 43, scope: !7)
!72 = !DILocation(line: 96, column: 20, scope: !7)
!73 = !DILocation(line: 97, column: 38, scope: !7)
!74 = !DILocation(line: 97, column: 31, scope: !7)
!75 = !DILocation(line: 97, column: 51, scope: !7)
!76 = !DILocation(line: 97, column: 43, scope: !7)
!77 = !DILocation(line: 99, column: 20, scope: !7)
!78 = !DILocation(line: 100, column: 44, scope: !7)
!79 = !DILocation(line: 100, column: 36, scope: !7)
!80 = !DILocation(line: 102, column: 20, scope: !7)
!81 = !DILocation(line: 103, column: 35, scope: !7)
!82 = !DILocation(line: 103, column: 31, scope: !7)
!83 = !DILocation(line: 103, column: 48, scope: !7)
!84 = !DILocation(line: 103, column: 40, scope: !7)
!85 = !DILocation(line: 105, column: 20, scope: !7)
!86 = !DILocation(line: 106, column: 48, scope: !7)
!87 = !DILocation(line: 106, column: 40, scope: !7)
!88 = !DILocation(line: 111, column: 20, scope: !7)
!89 = !DILocation(line: 112, column: 20, scope: !7)
!90 = !DILocation(line: 113, column: 48, scope: !7)
!91 = !DILocation(line: 113, column: 40, scope: !7)
!92 = !DILocation(line: 115, column: 20, scope: !7)
!93 = !DILocation(line: 116, column: 35, scope: !7)
!94 = !DILocation(line: 116, column: 31, scope: !7)
!95 = !DILocation(line: 116, column: 48, scope: !7)
!96 = !DILocation(line: 116, column: 40, scope: !7)
!97 = !DILocation(line: 118, column: 20, scope: !7)
!98 = !DILocation(line: 119, column: 48, scope: !7)
!99 = !DILocation(line: 119, column: 40, scope: !7)
!100 = !DILocation(line: 121, column: 20, scope: !7)
!101 = !DILocation(line: 122, column: 35, scope: !7)
!102 = !DILocation(line: 122, column: 31, scope: !7)
!103 = !DILocation(line: 122, column: 48, scope: !7)
!104 = !DILocation(line: 122, column: 40, scope: !7)
!105 = !DILocation(line: 131, column: 22, scope: !7)
!106 = !DILocation(line: 132, column: 50, scope: !7)
!107 = !DILocation(line: 134, column: 22, scope: !7)
!108 = !DILocation(line: 135, column: 36, scope: !7)
!109 = !DILocation(line: 135, column: 32, scope: !7)
!110 = !DILocation(line: 135, column: 50, scope: !7)
!111 = !DILocation(line: 137, column: 22, scope: !7)
!112 = !DILocation(line: 138, column: 50, scope: !7)
!113 = !DILocation(line: 140, column: 22, scope: !7)
!114 = !DILocation(line: 125, column: 48, scope: !7)
!115 = !DILocation(line: 125, column: 40, scope: !7)
!116 = !DILocation(line: 132, column: 41, scope: !7)
!117 = !DILocation(line: 135, column: 41, scope: !7)
!118 = !DILocation(line: 138, column: 41, scope: !7)
!119 = !DILocation(line: 141, column: 36, scope: !7)
!120 = !DILocation(line: 141, column: 32, scope: !7)
!121 = !DILocation(line: 141, column: 50, scope: !7)
!122 = !DILocation(line: 141, column: 41, scope: !7)
!123 = !DILocation(line: 143, column: 22, scope: !7)
!124 = !DILocation(line: 144, column: 51, scope: !7)
!125 = !DILocation(line: 144, column: 42, scope: !7)
!126 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !129)
!127 = distinct !DILexicalBlockFile(scope: !7, file: !128, discriminator: 0)
!128 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!129 = !DILocation(line: 48, column: 42, scope: !7)
!130 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !129)
!131 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !129)
!132 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !129)
!133 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !134)
!134 = !DILocation(line: 55, column: 42, scope: !7)
!135 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !134)
!136 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !134)
!137 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !134)
!138 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !139)
!139 = !DILocation(line: 62, column: 42, scope: !7)
!140 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !139)
!141 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !139)
!142 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !139)
!143 = !DILocation(line: 149, column: 38, scope: !7)
!144 = !DILocation(line: 152, column: 38, scope: !7)
!145 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !146)
!146 = !DILocation(line: 69, column: 42, scope: !7)
!147 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !146)
!148 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !146)
!149 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !146)
!150 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !151)
!151 = !DILocation(line: 76, column: 42, scope: !7)
!152 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !151)
!153 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !151)
!154 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !151)
!155 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !156)
!156 = !DILocation(line: 79, column: 42, scope: !7)
!157 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !156)
!158 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !156)
!159 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !156)
!160 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !161)
!161 = !DILocation(line: 82, column: 42, scope: !7)
!162 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !161)
!163 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !161)
!164 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !161)
!165 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !166)
!166 = !DILocation(line: 85, column: 42, scope: !7)
!167 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !166)
!168 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !166)
!169 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !166)
!170 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !171)
!171 = !DILocation(line: 88, column: 42, scope: !7)
!172 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !171)
!173 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !171)
!174 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !171)
!175 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !176)
!176 = !DILocation(line: 95, column: 42, scope: !7)
!177 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !176)
!178 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !176)
!179 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !176)
!180 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !181)
!181 = !DILocation(line: 98, column: 42, scope: !7)
!182 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !181)
!183 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !181)
!184 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !181)
!185 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !186)
!186 = !DILocation(line: 101, column: 42, scope: !7)
!187 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !186)
!188 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !186)
!189 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !186)
!190 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !191)
!191 = !DILocation(line: 104, column: 42, scope: !7)
!192 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !191)
!193 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !191)
!194 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !191)
!195 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !196)
!196 = !DILocation(line: 107, column: 42, scope: !7)
!197 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !196)
!198 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !196)
!199 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !196)
!200 = !DILocation(line: 155, column: 38, scope: !7)
!201 = !DILocation(line: 158, column: 38, scope: !7)
!202 = !DILocation(line: 161, column: 38, scope: !7)
!203 = !DILocation(line: 164, column: 38, scope: !7)
!204 = !DILocation(line: 167, column: 38, scope: !7)
!205 = !DILocation(line: 170, column: 38, scope: !7)
!206 = !DILocation(line: 173, column: 38, scope: !7)
!207 = !DILocation(line: 176, column: 38, scope: !7)
!208 = !DILocation(line: 179, column: 38, scope: !7)
!209 = !DILocation(line: 182, column: 38, scope: !7)
!210 = !DILocation(line: 185, column: 38, scope: !7)
!211 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !212)
!212 = !DILocation(line: 114, column: 42, scope: !7)
!213 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !212)
!214 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !212)
!215 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !212)
!216 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !217)
!217 = !DILocation(line: 117, column: 42, scope: !7)
!218 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !217)
!219 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !217)
!220 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !217)
!221 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !222)
!222 = !DILocation(line: 120, column: 42, scope: !7)
!223 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !222)
!224 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !222)
!225 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !222)
!226 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !227)
!227 = !DILocation(line: 123, column: 42, scope: !7)
!228 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !227)
!229 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !227)
!230 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !227)
!231 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !232)
!232 = !DILocation(line: 126, column: 42, scope: !7)
!233 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !232)
!234 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !232)
!235 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !232)
!236 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !237)
!237 = !DILocation(line: 133, column: 44, scope: !7)
!238 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !237)
!239 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !237)
!240 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !237)
!241 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !242)
!242 = !DILocation(line: 136, column: 44, scope: !7)
!243 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !242)
!244 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !242)
!245 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !242)
!246 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !247)
!247 = !DILocation(line: 139, column: 44, scope: !7)
!248 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !247)
!249 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !247)
!250 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !247)
!251 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !252)
!252 = !DILocation(line: 142, column: 44, scope: !7)
!253 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !252)
!254 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !252)
!255 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !252)
!256 = !DILocation(line: 118, column: 15, scope: !127, inlinedAt: !257)
!257 = !DILocation(line: 145, column: 44, scope: !7)
!258 = !DILocation(line: 120, column: 21, scope: !127, inlinedAt: !257)
!259 = !DILocation(line: 120, column: 16, scope: !127, inlinedAt: !257)
!260 = !DILocation(line: 188, column: 38, scope: !7)
!261 = !DILocation(line: 191, column: 38, scope: !7)
!262 = !DILocation(line: 194, column: 38, scope: !7)
!263 = !DILocation(line: 197, column: 38, scope: !7)
!264 = !DILocation(line: 200, column: 38, scope: !7)
!265 = !DILocation(line: 203, column: 38, scope: !7)
!266 = !DILocation(line: 206, column: 38, scope: !7)
!267 = !DILocation(line: 209, column: 38, scope: !7)
!268 = !DILocation(line: 212, column: 38, scope: !7)
!269 = !DILocation(line: 215, column: 38, scope: !7)
!270 = !DILocation(line: 218, column: 38, scope: !7)
!271 = !DILocation(line: 219, column: 34, scope: !7)
!272 = !DILocation(line: 219, column: 30, scope: !7)
!273 = !DILocation(line: 219, column: 25, scope: !7)
!274 = !DILocation(line: 219, column: 47, scope: !7)
!275 = !DILocation(line: 121, column: 29, scope: !127, inlinedAt: !257)
!276 = !DILocation(line: 220, column: 25, scope: !7)
!277 = !DILocation(line: 220, column: 38, scope: !7)
!278 = !DILocation(line: 221, column: 25, scope: !7)
!279 = !DILocation(line: 221, column: 47, scope: !7)
!280 = !DILocation(line: 221, column: 4, scope: !7)
