; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_sigmoid_32(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 12, !dbg !12
  %10 = and i32 %7, 64, !dbg !12
  %.lobit = lshr exact i32 %10, 6, !dbg !12
  %11 = or disjoint i32 %6, %9, !dbg !13
  %12 = or disjoint i32 %6, %.lobit, !dbg !13
  %13 = or disjoint i32 %12, 2, !dbg !13
  %14 = or disjoint i32 %12, 4, !dbg !13
  %15 = or disjoint i32 %12, 6, !dbg !13
  %16 = or disjoint i32 %12, 8, !dbg !13
  %17 = or disjoint i32 %12, 10, !dbg !13
  %18 = or disjoint i32 %12, 12, !dbg !13
  %19 = or disjoint i32 %12, 14, !dbg !13
  %20 = icmp slt i32 %11, 16, !dbg !14
  %21 = icmp slt i32 %12, 16, !dbg !14
  %22 = icmp slt i32 %13, 16, !dbg !14
  %23 = icmp slt i32 %14, 16, !dbg !14
  %24 = icmp slt i32 %15, 16, !dbg !14
  %25 = icmp slt i32 %16, 16, !dbg !14
  %26 = icmp slt i32 %17, 16, !dbg !14
  %27 = icmp slt i32 %18, 16, !dbg !14
  %28 = icmp slt i32 %19, 16, !dbg !14
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %30 = shl i32 %29, 6, !dbg !16
  %31 = lshr i32 %7, 2, !dbg !17
  %32 = and i32 %31, 15, !dbg !17
  %33 = lshr exact i32 %10, 2, !dbg !17
  %34 = or disjoint i32 %32, %33, !dbg !17
  %35 = and i32 %7, 63, !dbg !17
  %36 = or disjoint i32 %30, %34, !dbg !18
  %37 = or disjoint i32 %36, 32, !dbg !18
  %38 = or disjoint i32 %30, %35, !dbg !18
  %39 = icmp slt i32 %36, 90721, !dbg !19
  %40 = icmp slt i32 %37, 90721, !dbg !19
  %41 = icmp slt i32 %38, 90721, !dbg !19
  %42 = ashr exact i32 %11, 2, !dbg !20
  %43 = mul i32 %36, 12, !dbg !21
  %44 = mul i32 %37, 12, !dbg !21
  %45 = mul i32 %42, 1088652, !dbg !22
  %46 = add i32 %43, %45, !dbg !23
  %47 = add i32 %45, %44, !dbg !23
  %48 = sext i32 %46 to i64, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !24
  %50 = sext i32 %47 to i64, !dbg !24
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !24
  %52 = and i1 %20, %39, !dbg !25
  %53 = and i1 %40, %20, !dbg !25
  %54 = and i1 %21, %41, !dbg !25
  %55 = and i1 %22, %41, !dbg !25
  %56 = and i1 %23, %41, !dbg !25
  %57 = and i1 %24, %41, !dbg !25
  %58 = and i1 %25, %41, !dbg !25
  %59 = and i1 %26, %41, !dbg !25
  %60 = and i1 %27, %41, !dbg !25
  %61 = and i1 %28, %41, !dbg !25
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %52) #2, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !26
  %67 = bitcast i32 %63 to float, !dbg !26
  %68 = bitcast i32 %64 to float, !dbg !26
  %69 = bitcast i32 %65 to float, !dbg !26
  %70 = bitcast i32 %66 to float, !dbg !26
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %53) #2, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !26
  %76 = bitcast i32 %72 to float, !dbg !26
  %77 = bitcast i32 %73 to float, !dbg !26
  %78 = bitcast i32 %74 to float, !dbg !26
  %79 = bitcast i32 %75 to float, !dbg !26
  %80 = fsub float 0.000000e+00, %67, !dbg !27
  %81 = fsub float 0.000000e+00, %68, !dbg !27
  %82 = fsub float 0.000000e+00, %69, !dbg !27
  %83 = fsub float 0.000000e+00, %70, !dbg !27
  %84 = fsub float 0.000000e+00, %76, !dbg !27
  %85 = fsub float 0.000000e+00, %77, !dbg !27
  %86 = fsub float 0.000000e+00, %78, !dbg !27
  %87 = fsub float 0.000000e+00, %79, !dbg !27
  %88 = fmul float %80, 0x3FF7154760000000, !dbg !31
  %89 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %88) #2, !dbg !31
  %90 = fmul float %81, 0x3FF7154760000000, !dbg !31
  %91 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %90) #2, !dbg !31
  %92 = fmul float %82, 0x3FF7154760000000, !dbg !31
  %93 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %92) #2, !dbg !31
  %94 = fmul float %83, 0x3FF7154760000000, !dbg !31
  %95 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %94) #2, !dbg !31
  %96 = fmul float %84, 0x3FF7154760000000, !dbg !31
  %97 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %96) #2, !dbg !31
  %98 = fmul float %85, 0x3FF7154760000000, !dbg !31
  %99 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %98) #2, !dbg !31
  %100 = fmul float %86, 0x3FF7154760000000, !dbg !31
  %101 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %100) #2, !dbg !31
  %102 = fmul float %87, 0x3FF7154760000000, !dbg !31
  %103 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %102) #2, !dbg !31
  %104 = fadd float %89, 1.000000e+00, !dbg !32
  %105 = fadd float %91, 1.000000e+00, !dbg !32
  %106 = fadd float %93, 1.000000e+00, !dbg !32
  %107 = fadd float %95, 1.000000e+00, !dbg !32
  %108 = fadd float %97, 1.000000e+00, !dbg !32
  %109 = fadd float %99, 1.000000e+00, !dbg !32
  %110 = fadd float %101, 1.000000e+00, !dbg !32
  %111 = fadd float %103, 1.000000e+00, !dbg !32
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %104) #2, !dbg !33
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %105) #2, !dbg !33
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %106) #2, !dbg !33
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %107) #2, !dbg !33
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %108) #2, !dbg !33
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %109) #2, !dbg !33
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %110) #2, !dbg !33
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %111) #2, !dbg !33
  %120 = mul i32 %12, 90721, !dbg !34
  %121 = mul i32 %13, 90721, !dbg !34
  %122 = mul i32 %14, 90721, !dbg !34
  %123 = mul i32 %15, 90721, !dbg !34
  %124 = mul i32 %16, 90721, !dbg !34
  %125 = mul i32 %17, 90721, !dbg !34
  %126 = mul i32 %18, 90721, !dbg !34
  %127 = mul i32 %19, 90721, !dbg !34
  %128 = add i32 %38, %120, !dbg !35
  %129 = add i32 %38, %121, !dbg !35
  %130 = add i32 %38, %122, !dbg !35
  %131 = add i32 %38, %123, !dbg !35
  %132 = add i32 %38, %124, !dbg !35
  %133 = add i32 %38, %125, !dbg !35
  %134 = add i32 %38, %126, !dbg !35
  %135 = add i32 %38, %127, !dbg !35
  %136 = sext i32 %128 to i64, !dbg !36
  %137 = getelementptr float, ptr addrspace(1) %1, i64 %136, !dbg !36
  %138 = sext i32 %129 to i64, !dbg !36
  %139 = getelementptr float, ptr addrspace(1) %1, i64 %138, !dbg !36
  %140 = sext i32 %130 to i64, !dbg !36
  %141 = getelementptr float, ptr addrspace(1) %1, i64 %140, !dbg !36
  %142 = sext i32 %131 to i64, !dbg !36
  %143 = getelementptr float, ptr addrspace(1) %1, i64 %142, !dbg !36
  %144 = sext i32 %132 to i64, !dbg !36
  %145 = getelementptr float, ptr addrspace(1) %1, i64 %144, !dbg !36
  %146 = sext i32 %133 to i64, !dbg !36
  %147 = getelementptr float, ptr addrspace(1) %1, i64 %146, !dbg !36
  %148 = sext i32 %134 to i64, !dbg !36
  %149 = getelementptr float, ptr addrspace(1) %1, i64 %148, !dbg !36
  %150 = sext i32 %135 to i64, !dbg !36
  %151 = getelementptr float, ptr addrspace(1) %1, i64 %150, !dbg !36
  %152 = shl i32 %7, 8, !dbg !37
  %153 = and i32 %152, 768, !dbg !37
  %154 = or disjoint i32 %153, %32, !dbg !37
  %155 = or disjoint i32 %154, %33, !dbg !37
  %156 = and i32 %7, 127, !dbg !37
  %157 = lshr exact i32 %153, 6, !dbg !37
  %158 = add nuw nsw i32 %155, %157, !dbg !37
  %159 = zext nneg i32 %158 to i64, !dbg !37
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %159, !dbg !37
  %161 = bitcast float %112 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %161, i1 true) #2, !dbg !37
  %162 = or disjoint i32 %155, 64, !dbg !37
  %163 = lshr i32 %162, 6, !dbg !37
  %164 = add nuw nsw i32 %163, %162, !dbg !37
  %165 = zext nneg i32 %164 to i64, !dbg !37
  %166 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %165, !dbg !37
  %167 = bitcast float %113 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %167, i1 true) #2, !dbg !37
  %168 = or disjoint i32 %155, 128, !dbg !37
  %169 = lshr i32 %168, 6, !dbg !37
  %170 = add nuw nsw i32 %169, %168, !dbg !37
  %171 = zext nneg i32 %170 to i64, !dbg !37
  %172 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %171, !dbg !37
  %173 = bitcast float %114 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %173, i1 true) #2, !dbg !37
  %174 = or disjoint i32 %155, 192, !dbg !37
  %175 = lshr i32 %174, 6, !dbg !37
  %176 = add nuw nsw i32 %175, %174, !dbg !37
  %177 = zext nneg i32 %176 to i64, !dbg !37
  %178 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %177, !dbg !37
  %179 = bitcast float %115 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %179, i1 true) #2, !dbg !37
  %180 = or disjoint i32 %157, 32, !dbg !37
  %181 = add nuw nsw i32 %180, %155, !dbg !37
  %182 = zext nneg i32 %181 to i64, !dbg !37
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %182, !dbg !37
  %184 = bitcast float %116 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %184, i1 true) #2, !dbg !37
  %185 = or disjoint i32 %155, 96, !dbg !37
  %186 = lshr i32 %185, 6, !dbg !37
  %187 = add nuw nsw i32 %186, %185, !dbg !37
  %188 = zext nneg i32 %187 to i64, !dbg !37
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %188, !dbg !37
  %190 = bitcast float %117 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %190, i1 true) #2, !dbg !37
  %191 = or disjoint i32 %155, 160, !dbg !37
  %192 = lshr i32 %191, 6, !dbg !37
  %193 = add nuw nsw i32 %192, %191, !dbg !37
  %194 = zext nneg i32 %193 to i64, !dbg !37
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %194, !dbg !37
  %196 = bitcast float %118 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %196, i1 true) #2, !dbg !37
  %197 = or disjoint i32 %155, 224, !dbg !37
  %198 = lshr i32 %197, 6, !dbg !37
  %199 = add nuw nsw i32 %198, %197, !dbg !37
  %200 = zext nneg i32 %199 to i64, !dbg !37
  %201 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %200, !dbg !37
  %202 = bitcast float %119 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %202, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %203 = lshr i32 %156, 6, !dbg !37
  %204 = add nuw nsw i32 %203, %156, !dbg !37
  %205 = zext nneg i32 %204 to i64, !dbg !37
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %205, !dbg !37
  %207 = load i32, ptr addrspace(3) %206, align 4, !dbg !37
  %208 = or disjoint i32 %156, 128, !dbg !37
  %209 = lshr i32 %208, 6, !dbg !37
  %210 = add nuw nsw i32 %209, %208, !dbg !37
  %211 = zext nneg i32 %210 to i64, !dbg !37
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %211, !dbg !37
  %213 = load i32, ptr addrspace(3) %212, align 4, !dbg !37
  %214 = or disjoint i32 %156, 256, !dbg !37
  %215 = lshr i32 %214, 6, !dbg !37
  %216 = add nuw nsw i32 %215, %214, !dbg !37
  %217 = zext nneg i32 %216 to i64, !dbg !37
  %218 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %217, !dbg !37
  %219 = load i32, ptr addrspace(3) %218, align 4, !dbg !37
  %220 = or disjoint i32 %156, 384, !dbg !37
  %221 = lshr i32 %220, 6, !dbg !37
  %222 = add nuw nsw i32 %221, %220, !dbg !37
  %223 = zext nneg i32 %222 to i64, !dbg !37
  %224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %223, !dbg !37
  %225 = load i32, ptr addrspace(3) %224, align 4, !dbg !37
  %226 = or disjoint i32 %156, 512, !dbg !37
  %227 = lshr i32 %226, 6, !dbg !37
  %228 = add nuw nsw i32 %227, %226, !dbg !37
  %229 = zext nneg i32 %228 to i64, !dbg !37
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %229, !dbg !37
  %231 = load i32, ptr addrspace(3) %230, align 4, !dbg !37
  %232 = or disjoint i32 %156, 640, !dbg !37
  %233 = lshr i32 %232, 6, !dbg !37
  %234 = add nuw nsw i32 %233, %232, !dbg !37
  %235 = zext nneg i32 %234 to i64, !dbg !37
  %236 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %235, !dbg !37
  %237 = load i32, ptr addrspace(3) %236, align 4, !dbg !37
  %238 = or disjoint i32 %156, 768, !dbg !37
  %239 = lshr i32 %238, 6, !dbg !37
  %240 = add nuw nsw i32 %239, %238, !dbg !37
  %241 = zext nneg i32 %240 to i64, !dbg !37
  %242 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %241, !dbg !37
  %243 = load i32, ptr addrspace(3) %242, align 4, !dbg !37
  %244 = or disjoint i32 %156, 896, !dbg !37
  %245 = lshr i32 %244, 6, !dbg !37
  %246 = add nuw nsw i32 %245, %244, !dbg !37
  %247 = zext nneg i32 %246 to i64, !dbg !37
  %248 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %247, !dbg !37
  %249 = load i32, ptr addrspace(3) %248, align 4, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %207, ptr addrspace(1) %137, i1 %54) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %213, ptr addrspace(1) %139, i1 %55) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %219, ptr addrspace(1) %141, i1 %56) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %225, ptr addrspace(1) %143, i1 %57) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %231, ptr addrspace(1) %145, i1 %58) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %237, ptr addrspace(1) %147, i1 %59) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %243, ptr addrspace(1) %149, i1 %60) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %249, ptr addrspace(1) %151, i1 %61) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7gi4bzv6zte2ut4nbkpj3danyabpt63gwjytbaidbnwlqpwmikw.py", directory: "inductor_cache/7g")
!4 = !{ptr @triton_poi_fused_sigmoid_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_sigmoid_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_sigmoid_32", linkageName: "triton_poi_fused_sigmoid_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 43, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 64, scope: !7)
!26 = !DILocation(line: 32, column: 56, scope: !7)
!27 = !DILocation(line: 47, column: 30, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = !DILocation(line: 33, column: 22, scope: !7)
!31 = !DILocation(line: 47, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 47, column: 20, scope: !28, inlinedAt: !30)
!33 = !DILocation(line: 47, column: 16, scope: !28, inlinedAt: !30)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 34, column: 30, scope: !7)
!36 = !DILocation(line: 34, column: 25, scope: !7)
!37 = !DILocation(line: 34, column: 47, scope: !7)
!38 = !DILocation(line: 34, column: 4, scope: !7)
