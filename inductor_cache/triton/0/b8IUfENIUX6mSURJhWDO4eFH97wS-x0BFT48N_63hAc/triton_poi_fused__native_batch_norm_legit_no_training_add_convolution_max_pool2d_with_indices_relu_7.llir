; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 1, !dbg !13
  %17 = sdiv i32 %15, 1024, !dbg !14
  %18 = srem i32 %17, 4, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %19 = sdiv i32 %.frozen, 32, !dbg !16
  %20 = mul i32 %19, 32, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = srem i32 %16, 32, !dbg !17
  %22 = sext i32 %15 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !18
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %25 = sext i32 %18 to i64, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !21
  %29 = shl nsw i32 %.decomposed, 1, !dbg !22
  %30 = shl nsw i32 %21, 1, !dbg !22
  %31 = shl i32 %19, 7, !dbg !23
  %32 = add i32 %29, %31, !dbg !24
  %33 = add i32 %31, %30, !dbg !24
  %34 = sext i32 %32 to i64, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !25
  %36 = sext i32 %33 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !26
  %40 = or disjoint i32 %32, 1, !dbg !27
  %41 = or disjoint i32 %33, 1, !dbg !27
  %42 = sext i32 %40 to i64, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !28
  %44 = sext i32 %41 to i64, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !29
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !29
  %48 = add i32 %32, 64, !dbg !30
  %49 = add i32 %33, 64, !dbg !30
  %50 = sext i32 %48 to i64, !dbg !31
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !31
  %52 = sext i32 %49 to i64, !dbg !31
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !31
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !32
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !32
  %56 = add i32 %32, 65, !dbg !33
  %57 = add i32 %33, 65, !dbg !33
  %58 = sext i32 %56 to i64, !dbg !34
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !34
  %60 = sext i32 %57 to i64, !dbg !34
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !34
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !35
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !35
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !36
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !37
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !37
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !38
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !39
  %69 = bitcast i32 %68 to float, !dbg !39
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !39
  %71 = bitcast i32 %70 to float, !dbg !39
  %72 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !40
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !41
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !41
  %75 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !42
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !43
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !43
  %78 = fadd float %69, 0x3EE4F8B580000000, !dbg !44
  %79 = fadd float %71, 0x3EE4F8B580000000, !dbg !44
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i = icmp eq i32 %80, 0, !dbg !45
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i = icmp eq i32 %81, 0, !dbg !45
  br i1 %.not.i, label %87, label %82, !dbg !45

82:                                               ; preds = %9
  br i1 %.not1.i, label %85, label %83, !dbg !45

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

87:                                               ; preds = %9
  br i1 %.not1.i, label %90, label %88, !dbg !45

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %83, %85, %88, %90
  %.0.i = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !45
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i1 = icmp eq i32 %92, 0, !dbg !45
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i4 = icmp eq i32 %93, 0, !dbg !45
  br i1 %.not.i1, label %99, label %94, !dbg !45

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %97, label %95, !dbg !45

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

99:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %102, label %100, !dbg !45

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

__nv_sqrtf.exit5:                                 ; preds = %95, %97, %100, %102
  %.0.i3 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !45
  %104 = extractvalue { i32, i32 } %24, 1, !dbg !19
  %105 = bitcast i32 %104 to float, !dbg !19
  %106 = bitcast i32 %28 to float, !dbg !21
  %107 = fadd float %105, %106, !dbg !46
  %108 = bitcast i32 %47 to float, !dbg !29
  %109 = bitcast i32 %39 to float, !dbg !26
  %110 = fcmp ogt float %108, %109, !dbg !47
  %111 = fcmp uno float %108, 0.000000e+00, !dbg !51
  %112 = or i1 %110, %111, !dbg !52
  %113 = select i1 %112, float %108, float %109, !dbg !53
  %114 = bitcast i32 %55 to float, !dbg !32
  %115 = fcmp olt float %113, %114, !dbg !54
  %116 = fcmp uno float %114, 0.000000e+00, !dbg !56
  %117 = or i1 %116, %115, !dbg !57
  %118 = select i1 %117, float %114, float %113, !dbg !58
  %119 = bitcast i32 %63 to float, !dbg !35
  %120 = fcmp olt float %118, %119, !dbg !59
  %121 = fcmp uno float %119, 0.000000e+00, !dbg !61
  %122 = or i1 %121, %120, !dbg !62
  %123 = select i1 %122, float %119, float %118, !dbg !63
  %124 = fadd float %107, %123, !dbg !64
  %125 = bitcast i32 %66 to float, !dbg !37
  %126 = fsub float %124, %125, !dbg !65
  %127 = extractvalue { i32, i32 } %24, 0, !dbg !19
  %128 = bitcast i32 %127 to float, !dbg !19
  %129 = bitcast i32 %27 to float, !dbg !21
  %130 = fadd float %128, %129, !dbg !46
  %131 = bitcast i32 %46 to float, !dbg !29
  %132 = bitcast i32 %38 to float, !dbg !26
  %133 = fcmp ogt float %131, %132, !dbg !47
  %134 = fcmp uno float %131, 0.000000e+00, !dbg !51
  %135 = or i1 %133, %134, !dbg !52
  %136 = select i1 %135, float %131, float %132, !dbg !53
  %137 = bitcast i32 %54 to float, !dbg !32
  %138 = fcmp olt float %136, %137, !dbg !54
  %139 = fcmp uno float %137, 0.000000e+00, !dbg !56
  %140 = or i1 %139, %138, !dbg !57
  %141 = select i1 %140, float %137, float %136, !dbg !58
  %142 = bitcast i32 %62 to float, !dbg !35
  %143 = fcmp olt float %141, %142, !dbg !59
  %144 = fcmp uno float %142, 0.000000e+00, !dbg !61
  %145 = or i1 %144, %143, !dbg !62
  %146 = select i1 %145, float %142, float %141, !dbg !63
  %147 = fadd float %130, %146, !dbg !64
  %148 = bitcast i32 %65 to float, !dbg !37
  %149 = fsub float %147, %148, !dbg !65
  %150 = bitcast i32 %77 to float, !dbg !43
  %151 = bitcast i32 %76 to float, !dbg !43
  %152 = bitcast i32 %74 to float, !dbg !41
  %153 = bitcast i32 %73 to float, !dbg !41
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !66
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !66
  %156 = fmul float %149, %154, !dbg !67
  %157 = fmul float %126, %155, !dbg !67
  %158 = fmul float %156, %153, !dbg !68
  %159 = fmul float %157, %152, !dbg !68
  %160 = fadd float %158, %151, !dbg !69
  %161 = fadd float %159, %150, !dbg !69
  %162 = fcmp olt float %160, 0.000000e+00, !dbg !70
  %163 = fcmp olt float %161, 0.000000e+00, !dbg !70
  %164 = select i1 %162, float 0.000000e+00, float %160, !dbg !72
  %165 = select i1 %163, float 0.000000e+00, float %161, !dbg !72
  %166 = bitcast float %147 to i32, !dbg !73
  %167 = bitcast float %124 to i32, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %166, i32 %167, ptr addrspace(1) %23, i1 true) #3, !dbg !73
  %168 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !74
  %169 = bitcast float %164 to i32, !dbg !75
  %170 = bitcast float %165 to i32, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %169, i32 %170, ptr addrspace(1) %168, i1 true) #3, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6bi56ira7wmpzsww7rh5za6gt6m7fwwegqx6zufn6rh64mv7laa.py", directory: "inductor_cache/6b")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 34, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 32, scope: !7)
!23 = !DILocation(line: 30, column: 41, scope: !7)
!24 = !DILocation(line: 30, column: 37, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 46, scope: !7)
!27 = !DILocation(line: 31, column: 41, scope: !7)
!28 = !DILocation(line: 31, column: 30, scope: !7)
!29 = !DILocation(line: 31, column: 50, scope: !7)
!30 = !DILocation(line: 32, column: 42, scope: !7)
!31 = !DILocation(line: 32, column: 30, scope: !7)
!32 = !DILocation(line: 32, column: 51, scope: !7)
!33 = !DILocation(line: 33, column: 42, scope: !7)
!34 = !DILocation(line: 33, column: 30, scope: !7)
!35 = !DILocation(line: 33, column: 51, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 36, scope: !7)
!38 = !DILocation(line: 35, column: 31, scope: !7)
!39 = !DILocation(line: 35, column: 36, scope: !7)
!40 = !DILocation(line: 36, column: 31, scope: !7)
!41 = !DILocation(line: 36, column: 36, scope: !7)
!42 = !DILocation(line: 37, column: 31, scope: !7)
!43 = !DILocation(line: 37, column: 36, scope: !7)
!44 = !DILocation(line: 45, column: 20, scope: !7)
!45 = !DILocation(line: 46, column: 27, scope: !7)
!46 = !DILocation(line: 38, column: 18, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 39, column: 40, scope: !7)
!51 = !DILocation(line: 120, column: 21, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 120, column: 16, scope: !48, inlinedAt: !50)
!53 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!54 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !55)
!55 = !DILocation(line: 40, column: 40, scope: !7)
!56 = !DILocation(line: 120, column: 21, scope: !48, inlinedAt: !55)
!57 = !DILocation(line: 120, column: 16, scope: !48, inlinedAt: !55)
!58 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !55)
!59 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !60)
!60 = !DILocation(line: 41, column: 40, scope: !7)
!61 = !DILocation(line: 120, column: 21, scope: !48, inlinedAt: !60)
!62 = !DILocation(line: 120, column: 16, scope: !48, inlinedAt: !60)
!63 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !60)
!64 = !DILocation(line: 42, column: 19, scope: !7)
!65 = !DILocation(line: 43, column: 20, scope: !7)
!66 = !DILocation(line: 48, column: 20, scope: !7)
!67 = !DILocation(line: 51, column: 20, scope: !7)
!68 = !DILocation(line: 52, column: 20, scope: !7)
!69 = !DILocation(line: 53, column: 20, scope: !7)
!70 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !71)
!71 = !DILocation(line: 55, column: 42, scope: !7)
!72 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !71)
!73 = !DILocation(line: 56, column: 40, scope: !7)
!74 = !DILocation(line: 57, column: 25, scope: !7)
!75 = !DILocation(line: 57, column: 37, scope: !7)
!76 = !DILocation(line: 57, column: 4, scope: !7)
