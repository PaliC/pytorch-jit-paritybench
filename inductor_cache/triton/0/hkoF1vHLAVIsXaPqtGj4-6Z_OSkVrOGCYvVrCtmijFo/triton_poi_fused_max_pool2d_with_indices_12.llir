; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 1024, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %12 = sdiv i32 %.frozen, 256, !dbg !15
  %13 = mul i32 %12, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = mul i32 %12, 2304, !dbg !17
  %15 = add i32 %14, %.decomposed, !dbg !18
  %16 = sext i32 %15 to i64, !dbg !19
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !19
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %17, i1 %11) #1, !dbg !20
  %19 = extractvalue { i32, i32 } %18, 0, !dbg !20
  %20 = extractvalue { i32, i32 } %18, 1, !dbg !20
  %21 = add i32 %15, 256, !dbg !21
  %22 = sext i32 %21 to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !22
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %11) #1, !dbg !23
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !23
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !23
  %27 = add i32 %15, 512, !dbg !24
  %28 = sext i32 %27 to i64, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !25
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %11) #1, !dbg !26
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !26
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !26
  %33 = add i32 %15, 768, !dbg !27
  %34 = sext i32 %33 to i64, !dbg !28
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !28
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %11) #1, !dbg !29
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !29
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !29
  %39 = add i32 %15, 1024, !dbg !30
  %40 = sext i32 %39 to i64, !dbg !31
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !31
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %11) #1, !dbg !32
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !32
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !32
  %45 = add i32 %15, 1280, !dbg !33
  %46 = sext i32 %45 to i64, !dbg !34
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !34
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %11) #1, !dbg !35
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !35
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !35
  %51 = add i32 %15, 1536, !dbg !36
  %52 = sext i32 %51 to i64, !dbg !37
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !37
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 %11) #1, !dbg !38
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !38
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !38
  %57 = add i32 %15, 1792, !dbg !39
  %58 = sext i32 %57 to i64, !dbg !40
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !40
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 %11) #1, !dbg !41
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !41
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !41
  %63 = add i32 %15, 2048, !dbg !42
  %64 = sext i32 %63 to i64, !dbg !43
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !43
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 %11) #1, !dbg !44
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !44
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !44
  %69 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !20
  %70 = insertelement <2 x i32> %69, i32 %20, i64 1, !dbg !20
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !20
  %72 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !23
  %73 = insertelement <2 x i32> %72, i32 %26, i64 1, !dbg !23
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !23
  %75 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !26
  %76 = insertelement <2 x i32> %75, i32 %32, i64 1, !dbg !26
  %77 = bitcast <2 x i32> %76 to <2 x float>, !dbg !26
  %78 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !29
  %79 = insertelement <2 x i32> %78, i32 %38, i64 1, !dbg !29
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !29
  %81 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !32
  %82 = insertelement <2 x i32> %81, i32 %44, i64 1, !dbg !32
  %83 = bitcast <2 x i32> %82 to <2 x float>, !dbg !32
  %84 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !35
  %85 = insertelement <2 x i32> %84, i32 %50, i64 1, !dbg !35
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !35
  %87 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !38
  %88 = insertelement <2 x i32> %87, i32 %56, i64 1, !dbg !38
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !38
  %90 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !41
  %91 = insertelement <2 x i32> %90, i32 %62, i64 1, !dbg !41
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !41
  %93 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !44
  %94 = insertelement <2 x i32> %93, i32 %68, i64 1, !dbg !44
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !44
  %96 = fcmp ogt <2 x float> %74, %71, !dbg !45
  %97 = fcmp uno <2 x float> %74, zeroinitializer, !dbg !49
  %98 = or <2 x i1> %96, %97, !dbg !50
  %.v = select <2 x i1> %98, <2 x i32> %73, <2 x i32> %70, !dbg !51
  %99 = bitcast <2 x i32> %.v to <2 x float>, !dbg !51
  %100 = fcmp olt <2 x float> %99, %77, !dbg !52
  %101 = fcmp uno <2 x float> %77, zeroinitializer, !dbg !54
  %102 = or <2 x i1> %101, %100, !dbg !55
  %.v1 = select <2 x i1> %102, <2 x i32> %76, <2 x i32> %.v, !dbg !56
  %103 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !56
  %104 = fcmp olt <2 x float> %103, %80, !dbg !57
  %105 = fcmp uno <2 x float> %80, zeroinitializer, !dbg !59
  %106 = or <2 x i1> %105, %104, !dbg !60
  %.v2 = select <2 x i1> %106, <2 x i32> %79, <2 x i32> %.v1, !dbg !61
  %107 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !61
  %108 = fcmp olt <2 x float> %107, %83, !dbg !62
  %109 = fcmp uno <2 x float> %83, zeroinitializer, !dbg !64
  %110 = or <2 x i1> %109, %108, !dbg !65
  %.v3 = select <2 x i1> %110, <2 x i32> %82, <2 x i32> %.v2, !dbg !66
  %111 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !66
  %112 = fcmp olt <2 x float> %111, %86, !dbg !67
  %113 = fcmp uno <2 x float> %86, zeroinitializer, !dbg !69
  %114 = or <2 x i1> %113, %112, !dbg !70
  %.v4 = select <2 x i1> %114, <2 x i32> %85, <2 x i32> %.v3, !dbg !71
  %115 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !71
  %116 = fcmp olt <2 x float> %115, %89, !dbg !72
  %117 = fcmp uno <2 x float> %89, zeroinitializer, !dbg !74
  %118 = or <2 x i1> %117, %116, !dbg !75
  %.v5 = select <2 x i1> %118, <2 x i32> %88, <2 x i32> %.v4, !dbg !76
  %119 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !76
  %120 = fcmp olt <2 x float> %119, %92, !dbg !77
  %121 = fcmp uno <2 x float> %92, zeroinitializer, !dbg !79
  %122 = or <2 x i1> %121, %120, !dbg !80
  %.v6 = select <2 x i1> %122, <2 x i32> %91, <2 x i32> %.v5, !dbg !81
  %123 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !81
  %124 = fcmp olt <2 x float> %123, %95, !dbg !82
  %125 = bitcast i32 %67 to float, !dbg !84
  %126 = fcmp uno float %125, 0.000000e+00, !dbg !84
  %127 = bitcast i32 %68 to float, !dbg !84
  %128 = fcmp uno float %127, 0.000000e+00, !dbg !84
  %129 = extractelement <2 x i1> %124, i64 0, !dbg !85
  %130 = or i1 %126, %129, !dbg !85
  %131 = extractelement <2 x i1> %124, i64 1, !dbg !85
  %132 = or i1 %128, %131, !dbg !85
  %133 = zext <2 x i1> %96 to <2 x i8>, !dbg !86
  %134 = select <2 x i1> %100, <2 x i8> splat (i8 2), <2 x i8> %133, !dbg !87
  %135 = select <2 x i1> %104, <2 x i8> splat (i8 3), <2 x i8> %134, !dbg !88
  %136 = select <2 x i1> %108, <2 x i8> splat (i8 4), <2 x i8> %135, !dbg !89
  %137 = select <2 x i1> %112, <2 x i8> splat (i8 5), <2 x i8> %136, !dbg !90
  %138 = select <2 x i1> %116, <2 x i8> splat (i8 6), <2 x i8> %137, !dbg !91
  %139 = select <2 x i1> %120, <2 x i8> splat (i8 7), <2 x i8> %138, !dbg !92
  %140 = select <2 x i1> %124, <2 x i8> splat (i8 8), <2 x i8> %139, !dbg !93
  %141 = sext i32 %10 to i64, !dbg !94
  %142 = getelementptr float, ptr addrspace(1) %1, i64 %141, !dbg !94
  %143 = extractelement <2 x i32> %.v6, i64 0, !dbg !95
  %144 = select i1 %130, i32 %67, i32 %143, !dbg !96
  %145 = extractelement <2 x i32> %.v6, i64 1, !dbg !95
  %146 = select i1 %132, i32 %68, i32 %145, !dbg !96
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %144, i32 %146, ptr addrspace(1) %142, i1 %11) #1, !dbg !95
  %147 = getelementptr i8, ptr addrspace(1) %2, i64 %141, !dbg !97
  %148 = bitcast <2 x i8> %140 to i16, !dbg !98
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %148, ptr addrspace(1) %147, i1 %11) #1, !dbg !98
  ret void, !dbg !99
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmcjpbyucuyxi3x2oudwr5dfymqoi2nqwq4742r5b6pkqzupuwvk.py", directory: "inductor_cache/mc")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_12", linkageName: "triton_poi_fused_max_pool2d_with_indices_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 40, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 45, scope: !7)
!21 = !DILocation(line: 28, column: 41, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 51, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 51, scope: !7)
!27 = !DILocation(line: 30, column: 41, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 51, scope: !7)
!30 = !DILocation(line: 31, column: 42, scope: !7)
!31 = !DILocation(line: 31, column: 30, scope: !7)
!32 = !DILocation(line: 31, column: 52, scope: !7)
!33 = !DILocation(line: 32, column: 42, scope: !7)
!34 = !DILocation(line: 32, column: 30, scope: !7)
!35 = !DILocation(line: 32, column: 52, scope: !7)
!36 = !DILocation(line: 33, column: 43, scope: !7)
!37 = !DILocation(line: 33, column: 31, scope: !7)
!38 = !DILocation(line: 33, column: 53, scope: !7)
!39 = !DILocation(line: 34, column: 43, scope: !7)
!40 = !DILocation(line: 34, column: 31, scope: !7)
!41 = !DILocation(line: 34, column: 53, scope: !7)
!42 = !DILocation(line: 35, column: 43, scope: !7)
!43 = !DILocation(line: 35, column: 31, scope: !7)
!44 = !DILocation(line: 35, column: 53, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 36, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!52 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !53)
!53 = !DILocation(line: 37, column: 40, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !53)
!56 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !53)
!57 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !58)
!58 = !DILocation(line: 38, column: 40, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !58)
!60 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !58)
!61 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !58)
!62 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !63)
!63 = !DILocation(line: 39, column: 40, scope: !7)
!64 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !63)
!65 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !63)
!66 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !63)
!67 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !68)
!68 = !DILocation(line: 40, column: 41, scope: !7)
!69 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !68)
!70 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !68)
!71 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !68)
!72 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !73)
!73 = !DILocation(line: 41, column: 42, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !73)
!77 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !78)
!78 = !DILocation(line: 42, column: 42, scope: !7)
!79 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !78)
!80 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !78)
!81 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !78)
!82 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !83)
!83 = !DILocation(line: 43, column: 42, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !83)
!86 = !DILocation(line: 47, column: 35, scope: !7)
!87 = !DILocation(line: 50, column: 35, scope: !7)
!88 = !DILocation(line: 53, column: 35, scope: !7)
!89 = !DILocation(line: 56, column: 35, scope: !7)
!90 = !DILocation(line: 59, column: 35, scope: !7)
!91 = !DILocation(line: 62, column: 35, scope: !7)
!92 = !DILocation(line: 65, column: 35, scope: !7)
!93 = !DILocation(line: 68, column: 35, scope: !7)
!94 = !DILocation(line: 69, column: 25, scope: !7)
!95 = !DILocation(line: 69, column: 37, scope: !7)
!96 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !83)
!97 = !DILocation(line: 70, column: 25, scope: !7)
!98 = !DILocation(line: 70, column: 37, scope: !7)
!99 = !DILocation(line: 70, column: 4, scope: !7)
