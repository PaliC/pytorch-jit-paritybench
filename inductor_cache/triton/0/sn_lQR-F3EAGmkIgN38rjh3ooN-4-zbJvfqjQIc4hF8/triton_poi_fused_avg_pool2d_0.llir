; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_avg_pool2d_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 2, !dbg !12
  %9 = and i32 %8, 7, !dbg !12
  %10 = shl i32 %7, 1, !dbg !12
  %11 = and i32 %10, 14, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %12, 8, !dbg !13
  %14 = or disjoint i32 %6, %11, !dbg !13
  %15 = icmp slt i32 %12, 16, !dbg !14
  %16 = icmp slt i32 %13, 16, !dbg !14
  %17 = icmp slt i32 %14, 16, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %19 = shl i32 %18, 2, !dbg !16
  %20 = and i32 %7, 3, !dbg !17
  %.lobit13 = lshr i32 %7, 3, !dbg !17
  %21 = and i32 %.lobit13, 3, !dbg !17
  %22 = or disjoint i32 %19, %20, !dbg !18
  %23 = or disjoint i32 %19, %21, !dbg !18
  %24 = icmp slt i32 %22, 4, !dbg !19
  %25 = icmp slt i32 %23, 4, !dbg !19
  %.frozen = freeze i32 %22, !dbg !20
  %26 = sdiv i32 %.frozen, 2, !dbg !20
  %27 = mul i32 %26, 2, !dbg !21
  %.decomposed = sub i32 %.frozen, %27, !dbg !21
  %.frozen6 = freeze i32 %14, !dbg !22
  %28 = sdiv i32 %.frozen6, 4, !dbg !22
  %29 = mul i32 %28, 4, !dbg !23
  %.decomposed7 = sub i32 %.frozen6, %29, !dbg !23
  %30 = shl nsw i32 %26, 1, !dbg !24
  %31 = add i32 %30, -1, !dbg !25
  %32 = icmp ult i32 %31, 4, !dbg !26
  %33 = shl nsw i32 %.decomposed, 1, !dbg !27
  %34 = icmp sgt i32 %.decomposed, 0, !dbg !28
  %35 = and i1 %34, %32, !dbg !29
  %36 = shl i32 %26, 3, !dbg !30
  %37 = add i32 %36, %33, !dbg !31
  %38 = add i32 %37, -5, !dbg !32
  %39 = shl i32 %12, 4, !dbg !33
  %40 = shl i32 %13, 4, !dbg !33
  %41 = add i32 %38, %39, !dbg !34
  %42 = add i32 %38, %40, !dbg !34
  %43 = sext i32 %41 to i64, !dbg !35
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !35
  %45 = sext i32 %42 to i64, !dbg !35
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !35
  %47 = and i1 %24, %35, !dbg !36
  %48 = and i1 %15, %47, !dbg !37
  %49 = and i1 %16, %47, !dbg !37
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %48, i32 0, i1 %48) #3, !dbg !38
  %51 = bitcast i32 %50 to float, !dbg !38
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %49, i32 0, i1 %49) #3, !dbg !38
  %53 = bitcast i32 %52 to float, !dbg !38
  %54 = icmp sgt i32 %.decomposed, -1, !dbg !39
  %55 = and i1 %54, %32, !dbg !40
  %56 = add i32 %37, -4, !dbg !41
  %57 = add i32 %56, %39, !dbg !42
  %58 = add i32 %56, %40, !dbg !42
  %59 = sext i32 %57 to i64, !dbg !43
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !43
  %61 = sext i32 %58 to i64, !dbg !43
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !43
  %63 = and i1 %24, %55, !dbg !44
  %64 = and i1 %15, %63, !dbg !45
  %65 = and i1 %16, %63, !dbg !45
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %64, i32 0, i1 %64) #3, !dbg !46
  %67 = bitcast i32 %66 to float, !dbg !46
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %65, i32 0, i1 %65) #3, !dbg !46
  %69 = bitcast i32 %68 to float, !dbg !46
  %70 = fadd float %51, %67, !dbg !47
  %71 = fadd float %53, %69, !dbg !47
  %72 = or disjoint i32 %33, 1, !dbg !48
  %73 = add i32 %37, -3, !dbg !49
  %74 = add i32 %73, %39, !dbg !50
  %75 = add i32 %73, %40, !dbg !50
  %76 = sext i32 %74 to i64, !dbg !51
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !51
  %78 = sext i32 %75 to i64, !dbg !51
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !51
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %64, i32 0, i1 %64) #3, !dbg !52
  %81 = bitcast i32 %80 to float, !dbg !52
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %65, i32 0, i1 %65) #3, !dbg !52
  %83 = bitcast i32 %82 to float, !dbg !52
  %84 = fadd float %70, %81, !dbg !53
  %85 = fadd float %71, %83, !dbg !53
  %86 = add i32 %37, -1, !dbg !54
  %87 = add i32 %86, %39, !dbg !55
  %88 = add i32 %86, %40, !dbg !55
  %89 = sext i32 %87 to i64, !dbg !56
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !56
  %91 = sext i32 %88 to i64, !dbg !56
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !56
  %93 = add i32 %22, 1, !dbg !57
  %94 = icmp ult i32 %93, 5, !dbg !57
  %95 = and i1 %94, %34, !dbg !57
  %96 = and i1 %15, %95, !dbg !58
  %97 = and i1 %16, %95, !dbg !58
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %96, i32 0, i1 %96) #3, !dbg !59
  %99 = bitcast i32 %98 to float, !dbg !59
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %97, i32 0, i1 %97) #3, !dbg !59
  %101 = bitcast i32 %100 to float, !dbg !59
  %102 = fadd float %84, %99, !dbg !60
  %103 = fadd float %85, %101, !dbg !60
  %104 = add i32 %37, %39, !dbg !61
  %105 = add i32 %37, %40, !dbg !61
  %106 = sext i32 %104 to i64, !dbg !62
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !62
  %108 = sext i32 %105 to i64, !dbg !62
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !62
  %110 = and i1 %94, %54, !dbg !63
  %111 = and i1 %15, %110, !dbg !64
  %112 = and i1 %16, %110, !dbg !64
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %111, i32 0, i1 %111) #3, !dbg !65
  %114 = bitcast i32 %113 to float, !dbg !65
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %112, i32 0, i1 %112) #3, !dbg !65
  %116 = bitcast i32 %115 to float, !dbg !65
  %117 = fadd float %102, %114, !dbg !66
  %118 = fadd float %103, %116, !dbg !66
  %119 = add i32 %72, %36, !dbg !67
  %120 = add i32 %119, %39, !dbg !68
  %121 = add i32 %119, %40, !dbg !68
  %122 = sext i32 %120 to i64, !dbg !69
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !69
  %124 = sext i32 %121 to i64, !dbg !69
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !69
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %111, i32 0, i1 %111) #3, !dbg !70
  %127 = bitcast i32 %126 to float, !dbg !70
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %112, i32 0, i1 %112) #3, !dbg !70
  %129 = bitcast i32 %128 to float, !dbg !70
  %130 = fadd float %117, %127, !dbg !71
  %131 = fadd float %118, %129, !dbg !71
  %132 = or disjoint i32 %30, 1, !dbg !72
  %133 = icmp sgt i32 %22, -2, !dbg !73
  %134 = icmp slt i32 %132, 4, !dbg !74
  %135 = and i1 %133, %134, !dbg !75
  %136 = and i1 %34, %135, !dbg !76
  %137 = add i32 %37, 3, !dbg !77
  %138 = add i32 %137, %39, !dbg !78
  %139 = add i32 %137, %40, !dbg !78
  %140 = sext i32 %138 to i64, !dbg !79
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !79
  %142 = sext i32 %139 to i64, !dbg !79
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !79
  %144 = and i1 %24, %136, !dbg !80
  %145 = and i1 %15, %144, !dbg !81
  %146 = and i1 %16, %144, !dbg !81
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %145, i32 0, i1 %145) #3, !dbg !82
  %148 = bitcast i32 %147 to float, !dbg !82
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %146, i32 0, i1 %146) #3, !dbg !82
  %150 = bitcast i32 %149 to float, !dbg !82
  %151 = fadd float %130, %148, !dbg !83
  %152 = fadd float %131, %150, !dbg !83
  %153 = and i1 %54, %135, !dbg !84
  %154 = add i32 %37, 4, !dbg !85
  %155 = add i32 %154, %39, !dbg !86
  %156 = add i32 %154, %40, !dbg !86
  %157 = sext i32 %155 to i64, !dbg !87
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !87
  %159 = sext i32 %156 to i64, !dbg !87
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !87
  %161 = and i1 %24, %153, !dbg !88
  %162 = and i1 %15, %161, !dbg !89
  %163 = and i1 %16, %161, !dbg !89
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 %162, i32 0, i1 %162) #3, !dbg !90
  %165 = bitcast i32 %164 to float, !dbg !90
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %163, i32 0, i1 %163) #3, !dbg !90
  %167 = bitcast i32 %166 to float, !dbg !90
  %168 = fadd float %151, %165, !dbg !91
  %169 = fadd float %152, %167, !dbg !91
  %170 = add i32 %37, 5, !dbg !92
  %171 = add i32 %170, %39, !dbg !93
  %172 = add i32 %170, %40, !dbg !93
  %173 = sext i32 %171 to i64, !dbg !94
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !94
  %175 = sext i32 %172 to i64, !dbg !94
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !94
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %174, i1 %162, i32 0, i1 %162) #3, !dbg !95
  %178 = bitcast i32 %177 to float, !dbg !95
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %176, i1 %163, i32 0, i1 %163) #3, !dbg !95
  %180 = bitcast i32 %179 to float, !dbg !95
  %181 = fadd float %168, %178, !dbg !96
  %182 = fadd float %169, %180, !dbg !96
  %183 = mul nsw i32 %.decomposed, -2, !dbg !97
  %184 = mul i32 %26, -2, !dbg !98
  %185 = add nsw i32 %33, 2, !dbg !99
  %186 = add i32 %30, 2, !dbg !100
  %187 = tail call i32 @llvm.smin.i32(i32 %186, i32 5), !dbg !101
  %188 = mul i32 %185, %184, !dbg !102
  %189 = shl nsw i32 %.decomposed, 2, !dbg !103
  %190 = mul i32 %189, %26, !dbg !104
  %reass.add = add nsw i32 %185, %183
  %reass.mul = mul i32 %reass.add, %187
  %191 = or disjoint i32 %183, 1, !dbg !105
  %192 = add i32 %191, %184, !dbg !106
  %193 = add i32 %192, %190, !dbg !107
  %194 = add i32 %193, %185, !dbg !108
  %195 = add i32 %194, %188, !dbg !109
  %196 = add i32 %195, %187, !dbg !110
  %197 = add i32 %196, %reass.mul, !dbg !111
  %198 = sitofp i32 %197 to float, !dbg !112
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float %198) #3, !dbg !112
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %182, float %198) #3, !dbg !112
  %201 = shl i32 %23, 2, !dbg !113
  %202 = add i32 %201, %.decomposed7, !dbg !114
  %203 = shl i32 %28, 4, !dbg !115
  %204 = add i32 %202, %203, !dbg !116
  %205 = sext i32 %204 to i64, !dbg !117
  %206 = getelementptr float, ptr addrspace(1) %1, i64 %205, !dbg !117
  %207 = and i1 %17, %25, !dbg !118
  %208 = shl i32 %7, 4, !dbg !119
  %209 = and i32 %208, 48, !dbg !119
  %210 = or disjoint i32 %209, %9, !dbg !119
  %211 = and i32 %10, 62, !dbg !119
  %212 = lshr exact i32 %209, 1, !dbg !119
  %213 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %212, !dbg !119
  %214 = getelementptr inbounds float, ptr addrspace(3) %213, i32 %210, !dbg !119
  %215 = bitcast float %199 to <1 x i32>, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 true) #3, !dbg !119
  %216 = or disjoint i32 %210, 8, !dbg !119
  %217 = getelementptr inbounds float, ptr addrspace(3) %213, i32 %216, !dbg !119
  %218 = bitcast float %200 to <1 x i32>, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %218, i1 true) #3, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %219 = lshr i32 %10, 3, !dbg !119
  %220 = and i32 %219, 6, !dbg !119
  %221 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %220, !dbg !119
  %222 = getelementptr inbounds float, ptr addrspace(3) %221, i32 %211, !dbg !119
  %.extract = load i32, ptr addrspace(3) %222, align 8, !dbg !119
  %223 = getelementptr inbounds i8, ptr addrspace(3) %222, i32 4, !dbg !119
  %.extract5 = load i32, ptr addrspace(3) %223, align 4, !dbg !119
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract5, ptr addrspace(1) %206, i1 %207) #3, !dbg !119
  ret void, !dbg !120
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cc52kox7odikc2dpvx4ixjbpbmbphiobzjcionfnni2rftmw7t2d.py", directory: "inductor_cache/c5")
!4 = !{ptr @triton_poi_fused_avg_pool2d_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_0", linkageName: "triton_poi_fused_avg_pool2d_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 20, scope: !7)
!25 = !DILocation(line: 34, column: 18, scope: !7)
!26 = !DILocation(line: 39, column: 18, scope: !7)
!27 = !DILocation(line: 40, column: 20, scope: !7)
!28 = !DILocation(line: 41, column: 19, scope: !7)
!29 = !DILocation(line: 44, column: 19, scope: !7)
!30 = !DILocation(line: 45, column: 47, scope: !7)
!31 = !DILocation(line: 45, column: 38, scope: !7)
!32 = !DILocation(line: 45, column: 45, scope: !7)
!33 = !DILocation(line: 45, column: 55, scope: !7)
!34 = !DILocation(line: 45, column: 52, scope: !7)
!35 = !DILocation(line: 45, column: 31, scope: !7)
!36 = !DILocation(line: 45, column: 68, scope: !7)
!37 = !DILocation(line: 45, column: 76, scope: !7)
!38 = !DILocation(line: 45, column: 60, scope: !7)
!39 = !DILocation(line: 47, column: 21, scope: !7)
!40 = !DILocation(line: 50, column: 19, scope: !7)
!41 = !DILocation(line: 51, column: 45, scope: !7)
!42 = !DILocation(line: 51, column: 52, scope: !7)
!43 = !DILocation(line: 51, column: 31, scope: !7)
!44 = !DILocation(line: 51, column: 68, scope: !7)
!45 = !DILocation(line: 51, column: 76, scope: !7)
!46 = !DILocation(line: 51, column: 60, scope: !7)
!47 = !DILocation(line: 52, column: 20, scope: !7)
!48 = !DILocation(line: 53, column: 16, scope: !7)
!49 = !DILocation(line: 58, column: 45, scope: !7)
!50 = !DILocation(line: 58, column: 52, scope: !7)
!51 = !DILocation(line: 58, column: 31, scope: !7)
!52 = !DILocation(line: 58, column: 60, scope: !7)
!53 = !DILocation(line: 59, column: 20, scope: !7)
!54 = !DILocation(line: 65, column: 45, scope: !7)
!55 = !DILocation(line: 65, column: 52, scope: !7)
!56 = !DILocation(line: 65, column: 31, scope: !7)
!57 = !DILocation(line: 65, column: 68, scope: !7)
!58 = !DILocation(line: 65, column: 76, scope: !7)
!59 = !DILocation(line: 65, column: 60, scope: !7)
!60 = !DILocation(line: 66, column: 20, scope: !7)
!61 = !DILocation(line: 68, column: 45, scope: !7)
!62 = !DILocation(line: 68, column: 31, scope: !7)
!63 = !DILocation(line: 68, column: 61, scope: !7)
!64 = !DILocation(line: 68, column: 69, scope: !7)
!65 = !DILocation(line: 68, column: 53, scope: !7)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 71, column: 42, scope: !7)
!68 = !DILocation(line: 71, column: 49, scope: !7)
!69 = !DILocation(line: 71, column: 31, scope: !7)
!70 = !DILocation(line: 71, column: 57, scope: !7)
!71 = !DILocation(line: 72, column: 20, scope: !7)
!72 = !DILocation(line: 73, column: 16, scope: !7)
!73 = !DILocation(line: 74, column: 21, scope: !7)
!74 = !DILocation(line: 75, column: 20, scope: !7)
!75 = !DILocation(line: 76, column: 20, scope: !7)
!76 = !DILocation(line: 77, column: 20, scope: !7)
!77 = !DILocation(line: 78, column: 42, scope: !7)
!78 = !DILocation(line: 78, column: 49, scope: !7)
!79 = !DILocation(line: 78, column: 31, scope: !7)
!80 = !DILocation(line: 78, column: 65, scope: !7)
!81 = !DILocation(line: 78, column: 73, scope: !7)
!82 = !DILocation(line: 78, column: 57, scope: !7)
!83 = !DILocation(line: 79, column: 20, scope: !7)
!84 = !DILocation(line: 80, column: 20, scope: !7)
!85 = !DILocation(line: 81, column: 42, scope: !7)
!86 = !DILocation(line: 81, column: 49, scope: !7)
!87 = !DILocation(line: 81, column: 31, scope: !7)
!88 = !DILocation(line: 81, column: 65, scope: !7)
!89 = !DILocation(line: 81, column: 73, scope: !7)
!90 = !DILocation(line: 81, column: 57, scope: !7)
!91 = !DILocation(line: 82, column: 20, scope: !7)
!92 = !DILocation(line: 84, column: 42, scope: !7)
!93 = !DILocation(line: 84, column: 49, scope: !7)
!94 = !DILocation(line: 84, column: 31, scope: !7)
!95 = !DILocation(line: 84, column: 57, scope: !7)
!96 = !DILocation(line: 85, column: 20, scope: !7)
!97 = !DILocation(line: 86, column: 22, scope: !7)
!98 = !DILocation(line: 86, column: 34, scope: !7)
!99 = !DILocation(line: 86, column: 60, scope: !7)
!100 = !DILocation(line: 86, column: 122, scope: !7)
!101 = !DILocation(line: 86, column: 131, scope: !7)
!102 = !DILocation(line: 86, column: 250, scope: !7)
!103 = !DILocation(line: 86, column: 316, scope: !7)
!104 = !DILocation(line: 86, column: 319, scope: !7)
!105 = !DILocation(line: 86, column: 29, scope: !7)
!106 = !DILocation(line: 86, column: 40, scope: !7)
!107 = !DILocation(line: 86, column: 167, scope: !7)
!108 = !DILocation(line: 86, column: 241, scope: !7)
!109 = !DILocation(line: 86, column: 314, scope: !7)
!110 = !DILocation(line: 86, column: 325, scope: !7)
!111 = !DILocation(line: 86, column: 389, scope: !7)
!112 = !DILocation(line: 87, column: 20, scope: !7)
!113 = !DILocation(line: 88, column: 32, scope: !7)
!114 = !DILocation(line: 88, column: 30, scope: !7)
!115 = !DILocation(line: 88, column: 40, scope: !7)
!116 = !DILocation(line: 88, column: 37, scope: !7)
!117 = !DILocation(line: 88, column: 25, scope: !7)
!118 = !DILocation(line: 88, column: 60, scope: !7)
!119 = !DILocation(line: 88, column: 52, scope: !7)
!120 = !DILocation(line: 88, column: 4, scope: !7)
