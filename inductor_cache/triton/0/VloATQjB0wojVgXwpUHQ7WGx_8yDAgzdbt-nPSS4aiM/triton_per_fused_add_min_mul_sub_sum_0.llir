; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_add_min_mul_sub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = and i32 %6, 3, !dbg !11
  %8 = shl i32 %6, 2, !dbg !12
  %9 = and i32 %8, 60, !dbg !12
  %10 = and i32 %8, 48, !dbg !12
  %11 = zext nneg i32 %10 to i64, !dbg !13
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !13
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 true) #3, !dbg !14
  %14 = mul nuw nsw i32 %7, 5, !dbg !15
  %15 = or disjoint i32 %14, %10, !dbg !16
  %16 = zext nneg i32 %15 to i64, !dbg !17
  %17 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !17
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !18
  %19 = bitcast i32 %18 to float, !dbg !18
  %20 = or disjoint i32 %10, %7, !dbg !19
  %21 = zext nneg i32 %20 to i64, !dbg !20
  %22 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !20
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !21
  %24 = or disjoint i32 %10, 5, !dbg !22
  %25 = zext nneg i32 %24 to i64, !dbg !23
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !23
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !24
  %28 = or disjoint i32 %20, 4, !dbg !25
  %29 = zext nneg i32 %28 to i64, !dbg !26
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !26
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !27
  %32 = or disjoint i32 %10, 10, !dbg !28
  %33 = zext nneg i32 %32 to i64, !dbg !29
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !29
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !30
  %36 = bitcast i32 %35 to float, !dbg !30
  %37 = or disjoint i32 %20, 8, !dbg !31
  %38 = zext nneg i32 %37 to i64, !dbg !32
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !32
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !33
  %41 = bitcast i32 %40 to float, !dbg !33
  %42 = or i32 %9, 15, !dbg !34
  %43 = zext nneg i32 %42 to i64, !dbg !35
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !35
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !36
  %46 = bitcast i32 %45 to float, !dbg !36
  %47 = or disjoint i32 %7, %9, !dbg !37
  %48 = or i32 %47, 12, !dbg !37
  %49 = zext nneg i32 %48 to i64, !dbg !38
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !38
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !39
  %52 = bitcast i32 %51 to float, !dbg !39
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !40
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !41
  %55 = bitcast i32 %54 to float, !dbg !41
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %11, !dbg !42
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !43
  %58 = zext nneg i32 %9 to i64, !dbg !44
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !44
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !45
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !46
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !47
  %63 = or disjoint i32 %9, 1, !dbg !48
  %64 = zext nneg i32 %63 to i64, !dbg !49
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %64, !dbg !49
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !50
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !51
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !52
  %69 = bitcast i32 %68 to float, !dbg !52
  %70 = or disjoint i32 %9, 2, !dbg !53
  %71 = zext nneg i32 %70 to i64, !dbg !54
  %72 = getelementptr float, ptr addrspace(1) %3, i64 %71, !dbg !54
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !55
  %74 = bitcast i32 %73 to float, !dbg !55
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !56
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !57
  %77 = bitcast i32 %76 to float, !dbg !57
  %78 = or disjoint i32 %9, 3, !dbg !58
  %79 = zext nneg i32 %78 to i64, !dbg !59
  %80 = getelementptr float, ptr addrspace(1) %3, i64 %79, !dbg !59
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !60
  %82 = bitcast i32 %81 to float, !dbg !60
  %83 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !14
  %84 = insertelement <2 x i32> %83, i32 %27, i64 1, !dbg !14
  %85 = bitcast <2 x i32> %84 to <2 x float>, !dbg !14
  %86 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !21
  %87 = insertelement <2 x i32> %86, i32 %31, i64 1, !dbg !21
  %88 = bitcast <2 x i32> %87 to <2 x float>, !dbg !21
  %89 = insertelement <2 x float> poison, float %19, i64 0, !dbg !61
  %90 = shufflevector <2 x float> %89, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %91 = fadd <2 x float> %90, %85, !dbg !61
  %92 = fmul <2 x float> %88, splat (float 2.000000e+00), !dbg !62
  %93 = fsub <2 x float> %91, %92, !dbg !63
  %94 = extractelement <2 x float> %93, i64 0, !dbg !64
  %95 = extractelement <2 x float> %93, i64 1, !dbg !64
  %96 = fcmp olt float %94, %95, !dbg !68
  %97 = fcmp uno float %94, 0.000000e+00, !dbg !69
  %98 = or i1 %97, %96, !dbg !70
  %99 = select i1 %98, float %94, float %95, !dbg !64
  %100 = fadd float %19, %36, !dbg !71
  %101 = fmul float %41, 2.000000e+00, !dbg !72
  %102 = fsub float %100, %101, !dbg !73
  %103 = fcmp olt float %99, %102, !dbg !74
  %104 = fcmp uno float %99, 0.000000e+00, !dbg !76
  %105 = or i1 %103, %104, !dbg !77
  %106 = select i1 %105, float %99, float %102, !dbg !78
  %107 = fadd float %19, %46, !dbg !79
  %108 = fmul float %52, 2.000000e+00, !dbg !80
  %109 = fsub float %107, %108, !dbg !81
  %110 = fcmp olt float %106, %109, !dbg !82
  %111 = fcmp uno float %106, 0.000000e+00, !dbg !84
  %112 = or i1 %110, %111, !dbg !85
  %113 = select i1 %112, float %106, float %109, !dbg !86
  %114 = bitcast float %113 to i32, !dbg !87
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 8, i32 31), !dbg !87
  %116 = bitcast i32 %115 to float, !dbg !87
  %117 = fadd float %113, %116, !dbg !91
  %118 = bitcast float %117 to i32, !dbg !87
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 4, i32 31), !dbg !87
  %120 = bitcast i32 %119 to float, !dbg !87
  %121 = fadd float %117, %120, !dbg !91
  %122 = bitcast float %121 to i32, !dbg !87
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !87
  %124 = bitcast i32 %123 to float, !dbg !87
  %125 = fadd float %121, %124, !dbg !91
  %126 = bitcast float %125 to i32, !dbg !87
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 1, i32 31), !dbg !87
  %128 = bitcast i32 %127 to float, !dbg !87
  %129 = fadd float %125, %128, !dbg !91
  %130 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !43
  %131 = insertelement <2 x i32> %130, i32 %62, i64 1, !dbg !43
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !43
  %133 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !45
  %134 = insertelement <2 x i32> %133, i32 %66, i64 1, !dbg !45
  %135 = bitcast <2 x i32> %134 to <2 x float>, !dbg !45
  %136 = insertelement <2 x float> poison, float %55, i64 0, !dbg !93
  %137 = shufflevector <2 x float> %136, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !93
  %138 = fadd <2 x float> %137, %132, !dbg !93
  %139 = fmul <2 x float> %135, splat (float 2.000000e+00), !dbg !94
  %140 = fsub <2 x float> %138, %139, !dbg !95
  %141 = extractelement <2 x float> %140, i64 0, !dbg !96
  %142 = extractelement <2 x float> %140, i64 1, !dbg !96
  %143 = fcmp olt float %141, %142, !dbg !98
  %144 = fcmp uno float %141, 0.000000e+00, !dbg !99
  %145 = or i1 %144, %143, !dbg !100
  %146 = select i1 %145, float %141, float %142, !dbg !96
  %147 = fadd float %55, %69, !dbg !101
  %148 = fmul float %74, 2.000000e+00, !dbg !102
  %149 = fsub float %147, %148, !dbg !103
  %150 = fcmp olt float %146, %149, !dbg !104
  %151 = fcmp uno float %146, 0.000000e+00, !dbg !106
  %152 = or i1 %150, %151, !dbg !107
  %153 = select i1 %152, float %146, float %149, !dbg !108
  %154 = fadd float %55, %77, !dbg !109
  %155 = fmul float %82, 2.000000e+00, !dbg !110
  %156 = fsub float %154, %155, !dbg !111
  %157 = fcmp olt float %153, %156, !dbg !112
  %158 = fcmp uno float %153, 0.000000e+00, !dbg !114
  %159 = or i1 %157, %158, !dbg !115
  %160 = select i1 %159, float %153, float %156, !dbg !116
  %161 = bitcast float %160 to i32, !dbg !117
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 8, i32 31), !dbg !117
  %163 = bitcast i32 %162 to float, !dbg !117
  %164 = fadd float %160, %163, !dbg !119
  %165 = bitcast float %164 to i32, !dbg !117
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 4, i32 31), !dbg !117
  %167 = bitcast i32 %166 to float, !dbg !117
  %168 = fadd float %164, %167, !dbg !119
  %169 = bitcast float %168 to i32, !dbg !117
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 2, i32 31), !dbg !117
  %171 = bitcast i32 %170 to float, !dbg !117
  %172 = fadd float %168, %171, !dbg !119
  %173 = bitcast float %172 to i32, !dbg !117
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 1, i32 31), !dbg !117
  %175 = bitcast i32 %174 to float, !dbg !117
  %176 = fadd float %172, %175, !dbg !119
  %177 = fadd float %129, %176, !dbg !120
  tail call void @llvm.nvvm.barrier0(), !dbg !121
  %178 = and i32 %6, 63, !dbg !122
  %179 = icmp eq i32 %178, 0, !dbg !122
  %180 = bitcast float %177 to i32, !dbg !122
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %180, ptr addrspace(1) %0, i1 %179) #3, !dbg !122
  ret void, !dbg !123
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cab6cme63nm3waacbjkefwhzq2ibvho5quxsgayzzrzjursvf3tx.py", directory: "inductor_cache/ab")
!4 = !{ptr @triton_per_fused_add_min_mul_sub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_min_mul_sub_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_min_mul_sub_sum_0", linkageName: "triton_per_fused_add_min_mul_sub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 19, scope: !7)
!12 = !DILocation(line: 32, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 38, scope: !7)
!15 = !DILocation(line: 33, column: 32, scope: !7)
!16 = !DILocation(line: 33, column: 37, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 45, scope: !7)
!19 = !DILocation(line: 34, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 43, scope: !7)
!22 = !DILocation(line: 35, column: 34, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 42, scope: !7)
!25 = !DILocation(line: 36, column: 39, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 47, scope: !7)
!28 = !DILocation(line: 37, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 44, scope: !7)
!31 = !DILocation(line: 38, column: 40, scope: !7)
!32 = !DILocation(line: 38, column: 31, scope: !7)
!33 = !DILocation(line: 38, column: 48, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 31, scope: !7)
!36 = !DILocation(line: 39, column: 44, scope: !7)
!37 = !DILocation(line: 40, column: 41, scope: !7)
!38 = !DILocation(line: 40, column: 31, scope: !7)
!39 = !DILocation(line: 40, column: 49, scope: !7)
!40 = !DILocation(line: 41, column: 31, scope: !7)
!41 = !DILocation(line: 41, column: 46, scope: !7)
!42 = !DILocation(line: 42, column: 31, scope: !7)
!43 = !DILocation(line: 42, column: 39, scope: !7)
!44 = !DILocation(line: 43, column: 31, scope: !7)
!45 = !DILocation(line: 43, column: 38, scope: !7)
!46 = !DILocation(line: 44, column: 31, scope: !7)
!47 = !DILocation(line: 44, column: 43, scope: !7)
!48 = !DILocation(line: 45, column: 35, scope: !7)
!49 = !DILocation(line: 45, column: 31, scope: !7)
!50 = !DILocation(line: 45, column: 42, scope: !7)
!51 = !DILocation(line: 46, column: 31, scope: !7)
!52 = !DILocation(line: 46, column: 44, scope: !7)
!53 = !DILocation(line: 47, column: 35, scope: !7)
!54 = !DILocation(line: 47, column: 31, scope: !7)
!55 = !DILocation(line: 47, column: 42, scope: !7)
!56 = !DILocation(line: 48, column: 31, scope: !7)
!57 = !DILocation(line: 48, column: 44, scope: !7)
!58 = !DILocation(line: 49, column: 35, scope: !7)
!59 = !DILocation(line: 49, column: 31, scope: !7)
!60 = !DILocation(line: 49, column: 42, scope: !7)
!61 = !DILocation(line: 50, column: 18, scope: !7)
!62 = !DILocation(line: 52, column: 18, scope: !7)
!63 = !DILocation(line: 53, column: 18, scope: !7)
!64 = !DILocation(line: 113, column: 29, scope: !65, inlinedAt: !67)
!65 = distinct !DILexicalBlockFile(scope: !7, file: !66, discriminator: 0)
!66 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!67 = !DILocation(line: 57, column: 41, scope: !7)
!68 = !DILocation(line: 110, column: 15, scope: !65, inlinedAt: !67)
!69 = !DILocation(line: 112, column: 21, scope: !65, inlinedAt: !67)
!70 = !DILocation(line: 112, column: 16, scope: !65, inlinedAt: !67)
!71 = !DILocation(line: 58, column: 20, scope: !7)
!72 = !DILocation(line: 59, column: 20, scope: !7)
!73 = !DILocation(line: 60, column: 20, scope: !7)
!74 = !DILocation(line: 110, column: 15, scope: !65, inlinedAt: !75)
!75 = !DILocation(line: 61, column: 42, scope: !7)
!76 = !DILocation(line: 112, column: 21, scope: !65, inlinedAt: !75)
!77 = !DILocation(line: 112, column: 16, scope: !65, inlinedAt: !75)
!78 = !DILocation(line: 113, column: 29, scope: !65, inlinedAt: !75)
!79 = !DILocation(line: 62, column: 20, scope: !7)
!80 = !DILocation(line: 63, column: 20, scope: !7)
!81 = !DILocation(line: 64, column: 20, scope: !7)
!82 = !DILocation(line: 110, column: 15, scope: !65, inlinedAt: !83)
!83 = !DILocation(line: 65, column: 42, scope: !7)
!84 = !DILocation(line: 112, column: 21, scope: !65, inlinedAt: !83)
!85 = !DILocation(line: 112, column: 16, scope: !65, inlinedAt: !83)
!86 = !DILocation(line: 113, column: 29, scope: !65, inlinedAt: !83)
!87 = !DILocation(line: 267, column: 36, scope: !88, inlinedAt: !90)
!88 = distinct !DILexicalBlockFile(scope: !7, file: !89, discriminator: 0)
!89 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!90 = !DILocation(line: 67, column: 26, scope: !7)
!91 = !DILocation(line: 256, column: 15, scope: !92, inlinedAt: !90)
!92 = distinct !DILexicalBlockFile(scope: !88, file: !89, discriminator: 0)
!93 = !DILocation(line: 68, column: 20, scope: !7)
!94 = !DILocation(line: 69, column: 20, scope: !7)
!95 = !DILocation(line: 70, column: 20, scope: !7)
!96 = !DILocation(line: 113, column: 29, scope: !65, inlinedAt: !97)
!97 = !DILocation(line: 74, column: 42, scope: !7)
!98 = !DILocation(line: 110, column: 15, scope: !65, inlinedAt: !97)
!99 = !DILocation(line: 112, column: 21, scope: !65, inlinedAt: !97)
!100 = !DILocation(line: 112, column: 16, scope: !65, inlinedAt: !97)
!101 = !DILocation(line: 75, column: 20, scope: !7)
!102 = !DILocation(line: 76, column: 20, scope: !7)
!103 = !DILocation(line: 77, column: 20, scope: !7)
!104 = !DILocation(line: 110, column: 15, scope: !65, inlinedAt: !105)
!105 = !DILocation(line: 78, column: 42, scope: !7)
!106 = !DILocation(line: 112, column: 21, scope: !65, inlinedAt: !105)
!107 = !DILocation(line: 112, column: 16, scope: !65, inlinedAt: !105)
!108 = !DILocation(line: 113, column: 29, scope: !65, inlinedAt: !105)
!109 = !DILocation(line: 79, column: 20, scope: !7)
!110 = !DILocation(line: 80, column: 20, scope: !7)
!111 = !DILocation(line: 81, column: 20, scope: !7)
!112 = !DILocation(line: 110, column: 15, scope: !65, inlinedAt: !113)
!113 = !DILocation(line: 82, column: 42, scope: !7)
!114 = !DILocation(line: 112, column: 21, scope: !65, inlinedAt: !113)
!115 = !DILocation(line: 112, column: 16, scope: !65, inlinedAt: !113)
!116 = !DILocation(line: 113, column: 29, scope: !65, inlinedAt: !113)
!117 = !DILocation(line: 267, column: 36, scope: !88, inlinedAt: !118)
!118 = !DILocation(line: 84, column: 26, scope: !7)
!119 = !DILocation(line: 256, column: 15, scope: !92, inlinedAt: !118)
!120 = !DILocation(line: 85, column: 20, scope: !7)
!121 = !DILocation(line: 86, column: 4, scope: !7)
!122 = !DILocation(line: 87, column: 71, scope: !7)
!123 = !DILocation(line: 87, column: 4, scope: !7)
