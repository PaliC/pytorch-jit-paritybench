; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %16 = shl i32 %15, 8, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = lshr i32 %17, 2, !dbg !12
  %19 = and i32 %18, 63, !dbg !12
  %20 = shl i32 %17, 2, !dbg !12
  %21 = and i32 %20, 12, !dbg !12
  %22 = or disjoint i32 %16, %19, !dbg !13
  %23 = or disjoint i32 %22, 64, !dbg !13
  %24 = or disjoint i32 %22, 128, !dbg !13
  %25 = or disjoint i32 %22, 192, !dbg !13
  %26 = icmp slt i32 %22, 256, !dbg !14
  %27 = icmp slt i32 %23, 256, !dbg !14
  %28 = icmp slt i32 %24, 256, !dbg !14
  %29 = icmp slt i32 %25, 256, !dbg !14
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %31 = shl i32 %30, 4, !dbg !16
  %32 = or disjoint i32 %31, %21, !dbg !17
  %33 = icmp slt i32 %32, 256, !dbg !18
  %34 = sdiv i32 %22, 64, !dbg !19
  %35 = sdiv i32 %23, 64, !dbg !19
  %36 = sdiv i32 %24, 64, !dbg !19
  %37 = sdiv i32 %25, 64, !dbg !19
  %38 = sext i32 %32 to i64, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !20
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %33) #4, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !22
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %33) #4, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !23
  %47 = bitcast i32 %43 to float, !dbg !23
  %48 = bitcast i32 %44 to float, !dbg !23
  %49 = bitcast i32 %45 to float, !dbg !23
  %50 = bitcast i32 %46 to float, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %7, i64 %38, !dbg !24
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %33) #4, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %8, i64 %38, !dbg !26
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %33) #4, !dbg !27
  %55 = getelementptr float, ptr addrspace(1) %9, i64 %38, !dbg !28
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %33) #4, !dbg !29
  %57 = icmp slt i32 %32, 128, !dbg !30
  %58 = shl i32 %22, 7, !dbg !31
  %59 = shl i32 %23, 7, !dbg !31
  %60 = shl i32 %24, 7, !dbg !31
  %61 = shl i32 %25, 7, !dbg !31
  %62 = add i32 %58, %32, !dbg !32
  %63 = add i32 %32, %59, !dbg !32
  %64 = add i32 %32, %60, !dbg !32
  %65 = add i32 %32, %61, !dbg !32
  %66 = sext i32 %62 to i64, !dbg !33
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !33
  %68 = sext i32 %63 to i64, !dbg !33
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !33
  %70 = sext i32 %64 to i64, !dbg !33
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !33
  %72 = sext i32 %65 to i64, !dbg !33
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !33
  %74 = and i1 %26, %57, !dbg !34
  %75 = and i1 %27, %57, !dbg !34
  %76 = and i1 %28, %57, !dbg !34
  %77 = and i1 %29, %57, !dbg !34
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #4, !dbg !35
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #4, !dbg !35
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %71, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #4, !dbg !35
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %77, i32 0, i1 %77, i32 0, i1 %77, i32 0, i1 %77, i32 0, i1 %77) #4, !dbg !35
  %82 = add i32 %32, -128, !dbg !36
  %83 = add i32 %82, %58, !dbg !37
  %84 = add i32 %82, %59, !dbg !37
  %85 = add i32 %82, %60, !dbg !37
  %86 = add i32 %82, %61, !dbg !37
  %87 = sext i32 %83 to i64, !dbg !38
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !38
  %89 = sext i32 %84 to i64, !dbg !38
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !38
  %91 = sext i32 %85 to i64, !dbg !38
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !38
  %93 = sext i32 %86 to i64, !dbg !38
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !38
  %95 = and i32 %30, 268435448, !dbg !39
  %96 = icmp eq i32 %95, 8, !dbg !39
  %97 = and i1 %96, %26, !dbg !40
  %98 = and i1 %27, %96, !dbg !40
  %99 = and i1 %28, %96, !dbg !40
  %100 = and i1 %29, %96, !dbg !40
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 %97, i32 0, i1 %97, i32 0, i1 %97, i32 0, i1 %97, i32 0, i1 %97) #4, !dbg !41
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %90, i1 %98, i32 0, i1 %98, i32 0, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #4, !dbg !41
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %92, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #4, !dbg !41
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %94, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100) #4, !dbg !41
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !42
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !42
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !42
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !42
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %105, i1 %97, i32 0, i1 %97, i32 0, i1 %97, i32 0, i1 %97, i32 0, i1 %97) #4, !dbg !43
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %106, i1 %98, i32 0, i1 %98, i32 0, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #4, !dbg !43
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %107, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #4, !dbg !43
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %108, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100) #4, !dbg !43
  %113 = sext i32 %82 to i64, !dbg !44
  %114 = getelementptr float, ptr addrspace(1) %3, i64 %113, !dbg !44
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 %97, i32 0, i1 %97, i32 0, i1 %97, i32 0, i1 %97, i32 0, i1 %97) #4, !dbg !45
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 %98, i32 0, i1 %98, i32 0, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #4, !dbg !45
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #4, !dbg !45
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100) #4, !dbg !45
  %119 = shl i32 %34, 7, !dbg !46
  %120 = shl i32 %35, 7, !dbg !46
  %121 = shl i32 %36, 7, !dbg !46
  %122 = shl i32 %37, 7, !dbg !46
  %123 = add i32 %119, %82, !dbg !47
  %124 = add i32 %82, %120, !dbg !47
  %125 = add i32 %82, %121, !dbg !47
  %126 = add i32 %82, %122, !dbg !47
  %127 = sext i32 %123 to i64, !dbg !48
  %128 = getelementptr float, ptr addrspace(1) %4, i64 %127, !dbg !48
  %129 = sext i32 %124 to i64, !dbg !48
  %130 = getelementptr float, ptr addrspace(1) %4, i64 %129, !dbg !48
  %131 = sext i32 %125 to i64, !dbg !48
  %132 = getelementptr float, ptr addrspace(1) %4, i64 %131, !dbg !48
  %133 = sext i32 %126 to i64, !dbg !48
  %134 = getelementptr float, ptr addrspace(1) %4, i64 %133, !dbg !48
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %128, i1 %97, i32 0, i1 %97, i32 0, i1 %97, i32 0, i1 %97, i32 0, i1 %97) #4, !dbg !49
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !49
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !49
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !49
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !49
  %140 = bitcast i32 %136 to float, !dbg !49
  %141 = bitcast i32 %137 to float, !dbg !49
  %142 = bitcast i32 %138 to float, !dbg !49
  %143 = bitcast i32 %139 to float, !dbg !49
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %130, i1 %98, i32 0, i1 %98, i32 0, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #4, !dbg !49
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !49
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !49
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !49
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !49
  %149 = bitcast i32 %145 to float, !dbg !49
  %150 = bitcast i32 %146 to float, !dbg !49
  %151 = bitcast i32 %147 to float, !dbg !49
  %152 = bitcast i32 %148 to float, !dbg !49
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %132, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #4, !dbg !49
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !49
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !49
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !49
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !49
  %158 = bitcast i32 %154 to float, !dbg !49
  %159 = bitcast i32 %155 to float, !dbg !49
  %160 = bitcast i32 %156 to float, !dbg !49
  %161 = bitcast i32 %157 to float, !dbg !49
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %134, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100) #4, !dbg !49
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !49
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !49
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !49
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !49
  %167 = bitcast i32 %163 to float, !dbg !49
  %168 = bitcast i32 %164 to float, !dbg !49
  %169 = bitcast i32 %165 to float, !dbg !49
  %170 = bitcast i32 %166 to float, !dbg !49
  %171 = fsub float 0.000000e+00, %140, !dbg !50
  %172 = fsub float 0.000000e+00, %141, !dbg !50
  %173 = fsub float 0.000000e+00, %142, !dbg !50
  %174 = fsub float 0.000000e+00, %143, !dbg !50
  %175 = fsub float 0.000000e+00, %149, !dbg !50
  %176 = fsub float 0.000000e+00, %150, !dbg !50
  %177 = fsub float 0.000000e+00, %151, !dbg !50
  %178 = fsub float 0.000000e+00, %152, !dbg !50
  %179 = fsub float 0.000000e+00, %158, !dbg !50
  %180 = fsub float 0.000000e+00, %159, !dbg !50
  %181 = fsub float 0.000000e+00, %160, !dbg !50
  %182 = fsub float 0.000000e+00, %161, !dbg !50
  %183 = fsub float 0.000000e+00, %167, !dbg !50
  %184 = fsub float 0.000000e+00, %168, !dbg !50
  %185 = fsub float 0.000000e+00, %169, !dbg !50
  %186 = fsub float 0.000000e+00, %170, !dbg !50
  %187 = fmul float %171, 0x3FF7154760000000, !dbg !54
  %188 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %187) #4, !dbg !54
  %189 = fmul float %172, 0x3FF7154760000000, !dbg !54
  %190 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %189) #4, !dbg !54
  %191 = fmul float %173, 0x3FF7154760000000, !dbg !54
  %192 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %191) #4, !dbg !54
  %193 = fmul float %174, 0x3FF7154760000000, !dbg !54
  %194 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %193) #4, !dbg !54
  %195 = fmul float %175, 0x3FF7154760000000, !dbg !54
  %196 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %195) #4, !dbg !54
  %197 = fmul float %176, 0x3FF7154760000000, !dbg !54
  %198 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %197) #4, !dbg !54
  %199 = fmul float %177, 0x3FF7154760000000, !dbg !54
  %200 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %199) #4, !dbg !54
  %201 = fmul float %178, 0x3FF7154760000000, !dbg !54
  %202 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %201) #4, !dbg !54
  %203 = fmul float %179, 0x3FF7154760000000, !dbg !54
  %204 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %203) #4, !dbg !54
  %205 = fmul float %180, 0x3FF7154760000000, !dbg !54
  %206 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %205) #4, !dbg !54
  %207 = fmul float %181, 0x3FF7154760000000, !dbg !54
  %208 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %207) #4, !dbg !54
  %209 = fmul float %182, 0x3FF7154760000000, !dbg !54
  %210 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %209) #4, !dbg !54
  %211 = fmul float %183, 0x3FF7154760000000, !dbg !54
  %212 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %211) #4, !dbg !54
  %213 = fmul float %184, 0x3FF7154760000000, !dbg !54
  %214 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %213) #4, !dbg !54
  %215 = fmul float %185, 0x3FF7154760000000, !dbg !54
  %216 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %215) #4, !dbg !54
  %217 = fmul float %186, 0x3FF7154760000000, !dbg !54
  %218 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %217) #4, !dbg !54
  %219 = fadd float %188, 1.000000e+00, !dbg !55
  %220 = fadd float %190, 1.000000e+00, !dbg !55
  %221 = fadd float %192, 1.000000e+00, !dbg !55
  %222 = fadd float %194, 1.000000e+00, !dbg !55
  %223 = fadd float %196, 1.000000e+00, !dbg !55
  %224 = fadd float %198, 1.000000e+00, !dbg !55
  %225 = fadd float %200, 1.000000e+00, !dbg !55
  %226 = fadd float %202, 1.000000e+00, !dbg !55
  %227 = fadd float %204, 1.000000e+00, !dbg !55
  %228 = fadd float %206, 1.000000e+00, !dbg !55
  %229 = fadd float %208, 1.000000e+00, !dbg !55
  %230 = fadd float %210, 1.000000e+00, !dbg !55
  %231 = fadd float %212, 1.000000e+00, !dbg !55
  %232 = fadd float %214, 1.000000e+00, !dbg !55
  %233 = fadd float %216, 1.000000e+00, !dbg !55
  %234 = fadd float %218, 1.000000e+00, !dbg !55
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %219) #4, !dbg !56
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %220) #4, !dbg !56
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %221) #4, !dbg !56
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %222) #4, !dbg !56
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %223) #4, !dbg !56
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %224) #4, !dbg !56
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %225) #4, !dbg !56
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %226) #4, !dbg !56
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %227) #4, !dbg !56
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %228) #4, !dbg !56
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %229) #4, !dbg !56
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %230) #4, !dbg !56
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %231) #4, !dbg !56
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %232) #4, !dbg !56
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %233) #4, !dbg !56
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %234) #4, !dbg !56
  %251 = fadd float %47, 0x3EE4F8B580000000, !dbg !57
  %252 = fadd float %48, 0x3EE4F8B580000000, !dbg !57
  %253 = fadd float %49, 0x3EE4F8B580000000, !dbg !57
  %254 = fadd float %50, 0x3EE4F8B580000000, !dbg !57
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not.i = icmp eq i32 %255, 0, !dbg !58
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !58
  %.not1.i = icmp eq i32 %256, 0, !dbg !58
  br i1 %.not.i, label %262, label %257, !dbg !58

257:                                              ; preds = %14
  br i1 %.not1.i, label %260, label %258, !dbg !58

258:                                              ; preds = %257
  %259 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %251) #4, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

260:                                              ; preds = %257
  %261 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %251) #4, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

262:                                              ; preds = %14
  br i1 %.not1.i, label %265, label %263, !dbg !58

263:                                              ; preds = %262
  %264 = tail call float @llvm.nvvm.sqrt.rn.f(float %251) #4, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

265:                                              ; preds = %262
  %266 = tail call float @llvm.nvvm.sqrt.approx.f(float %251) #4, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

__nv_sqrtf.exit:                                  ; preds = %258, %260, %263, %265
  %.0.i = phi float [ %259, %258 ], [ %261, %260 ], [ %264, %263 ], [ %266, %265 ], !dbg !58
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not.i33 = icmp eq i32 %267, 0, !dbg !58
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !58
  %.not1.i36 = icmp eq i32 %268, 0, !dbg !58
  br i1 %.not.i33, label %274, label %269, !dbg !58

269:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %272, label %270, !dbg !58

270:                                              ; preds = %269
  %271 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %252) #4, !dbg !58
  br label %__nv_sqrtf.exit37, !dbg !58

272:                                              ; preds = %269
  %273 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %252) #4, !dbg !58
  br label %__nv_sqrtf.exit37, !dbg !58

274:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %277, label %275, !dbg !58

275:                                              ; preds = %274
  %276 = tail call float @llvm.nvvm.sqrt.rn.f(float %252) #4, !dbg !58
  br label %__nv_sqrtf.exit37, !dbg !58

277:                                              ; preds = %274
  %278 = tail call float @llvm.nvvm.sqrt.approx.f(float %252) #4, !dbg !58
  br label %__nv_sqrtf.exit37, !dbg !58

__nv_sqrtf.exit37:                                ; preds = %270, %272, %275, %277
  %.0.i35 = phi float [ %271, %270 ], [ %273, %272 ], [ %276, %275 ], [ %278, %277 ], !dbg !58
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not.i38 = icmp eq i32 %279, 0, !dbg !58
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !58
  %.not1.i41 = icmp eq i32 %280, 0, !dbg !58
  br i1 %.not.i38, label %286, label %281, !dbg !58

281:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %284, label %282, !dbg !58

282:                                              ; preds = %281
  %283 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %253) #4, !dbg !58
  br label %__nv_sqrtf.exit42, !dbg !58

284:                                              ; preds = %281
  %285 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %253) #4, !dbg !58
  br label %__nv_sqrtf.exit42, !dbg !58

286:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %289, label %287, !dbg !58

287:                                              ; preds = %286
  %288 = tail call float @llvm.nvvm.sqrt.rn.f(float %253) #4, !dbg !58
  br label %__nv_sqrtf.exit42, !dbg !58

289:                                              ; preds = %286
  %290 = tail call float @llvm.nvvm.sqrt.approx.f(float %253) #4, !dbg !58
  br label %__nv_sqrtf.exit42, !dbg !58

__nv_sqrtf.exit42:                                ; preds = %282, %284, %287, %289
  %.0.i40 = phi float [ %283, %282 ], [ %285, %284 ], [ %288, %287 ], [ %290, %289 ], !dbg !58
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not.i43 = icmp eq i32 %291, 0, !dbg !58
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !58
  %.not1.i46 = icmp eq i32 %292, 0, !dbg !58
  br i1 %.not.i43, label %298, label %293, !dbg !58

293:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %296, label %294, !dbg !58

294:                                              ; preds = %293
  %295 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %254) #4, !dbg !58
  br label %__nv_sqrtf.exit47, !dbg !58

296:                                              ; preds = %293
  %297 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %254) #4, !dbg !58
  br label %__nv_sqrtf.exit47, !dbg !58

298:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %301, label %299, !dbg !58

299:                                              ; preds = %298
  %300 = tail call float @llvm.nvvm.sqrt.rn.f(float %254) #4, !dbg !58
  br label %__nv_sqrtf.exit47, !dbg !58

301:                                              ; preds = %298
  %302 = tail call float @llvm.nvvm.sqrt.approx.f(float %254) #4, !dbg !58
  br label %__nv_sqrtf.exit47, !dbg !58

__nv_sqrtf.exit47:                                ; preds = %294, %296, %299, %301
  %.0.i45 = phi float [ %295, %294 ], [ %297, %296 ], [ %300, %299 ], [ %302, %301 ], !dbg !58
  %303 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !35
  %304 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !43
  %305 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !45
  %306 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !41
  %307 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !21
  %308 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !35
  %309 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !43
  %310 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !45
  %311 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !41
  %312 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !21
  %313 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !35
  %314 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !43
  %315 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !45
  %316 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !41
  %317 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !21
  %318 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !35
  %319 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !43
  %320 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !45
  %321 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !41
  %322 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !21
  %323 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !35
  %324 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !43
  %325 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !45
  %326 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !41
  %327 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !35
  %328 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !43
  %329 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !45
  %330 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !41
  %331 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !35
  %332 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !43
  %333 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !45
  %334 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !41
  %335 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !35
  %336 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !43
  %337 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !45
  %338 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !41
  %339 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !35
  %340 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !43
  %341 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !45
  %342 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !41
  %343 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !35
  %344 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !43
  %345 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !45
  %346 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !41
  %347 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !35
  %348 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !43
  %349 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !45
  %350 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !41
  %351 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !35
  %352 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !43
  %353 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !45
  %354 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !41
  %355 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !35
  %356 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !43
  %357 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !45
  %358 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !41
  %359 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !35
  %360 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !43
  %361 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !45
  %362 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !41
  %363 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !35
  %364 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !43
  %365 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !45
  %366 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !41
  %367 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !35
  %368 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !43
  %369 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !45
  %370 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !41
  %371 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !29
  %372 = bitcast i32 %371 to float, !dbg !29
  %373 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !29
  %374 = bitcast i32 %373 to float, !dbg !29
  %375 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !29
  %376 = bitcast i32 %375 to float, !dbg !29
  %377 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !29
  %378 = bitcast i32 %377 to float, !dbg !29
  %379 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !27
  %380 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !27
  %381 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !27
  %382 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !27
  %383 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %384 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %385 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %386 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %387 = and i32 %20, 252, !dbg !12
  %388 = or disjoint i32 %16, %387, !dbg !13
  %.frozen = freeze i32 %388, !dbg !19
  %389 = sdiv i32 %.frozen, 64, !dbg !19
  %390 = mul i32 %389, 64, !dbg !59
  %.decomposed = sub i32 %.frozen, %390, !dbg !59
  %.lobit12 = lshr i32 %17, 6, !dbg !60
  %391 = and i32 %.lobit12, 3, !dbg !60
  %392 = or disjoint i32 %391, %31, !dbg !17
  %393 = or disjoint i32 %392, 12, !dbg !17
  %394 = icmp slt i32 %393, 256, !dbg !18
  %395 = or disjoint i32 %392, 8, !dbg !17
  %396 = icmp slt i32 %395, 256, !dbg !18
  %397 = or disjoint i32 %392, 4, !dbg !17
  %398 = icmp slt i32 %397, 256, !dbg !18
  %399 = icmp slt i32 %392, 256, !dbg !18
  %400 = icmp slt i32 %388, 256, !dbg !14
  %401 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !61
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !61
  %403 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #4, !dbg !61
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #4, !dbg !61
  %405 = insertelement <4 x i32> poison, i32 %307, i64 0, !dbg !21
  %406 = insertelement <4 x i32> %405, i32 %312, i64 1, !dbg !21
  %407 = insertelement <4 x i32> %406, i32 %317, i64 2, !dbg !21
  %408 = insertelement <4 x i32> %407, i32 %322, i64 3, !dbg !21
  %409 = bitcast <4 x i32> %408 to <4 x float>, !dbg !21
  %410 = shufflevector <4 x float> %409, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !21
  %411 = insertelement <16 x i32> poison, i32 %303, i64 0, !dbg !35
  %412 = insertelement <16 x i32> %411, i32 %308, i64 1, !dbg !35
  %413 = insertelement <16 x i32> %412, i32 %313, i64 2, !dbg !35
  %414 = insertelement <16 x i32> %413, i32 %318, i64 3, !dbg !35
  %415 = insertelement <16 x i32> %414, i32 %323, i64 4, !dbg !35
  %416 = insertelement <16 x i32> %415, i32 %327, i64 5, !dbg !35
  %417 = insertelement <16 x i32> %416, i32 %331, i64 6, !dbg !35
  %418 = insertelement <16 x i32> %417, i32 %335, i64 7, !dbg !35
  %419 = insertelement <16 x i32> %418, i32 %339, i64 8, !dbg !35
  %420 = insertelement <16 x i32> %419, i32 %343, i64 9, !dbg !35
  %421 = insertelement <16 x i32> %420, i32 %347, i64 10, !dbg !35
  %422 = insertelement <16 x i32> %421, i32 %351, i64 11, !dbg !35
  %423 = insertelement <16 x i32> %422, i32 %355, i64 12, !dbg !35
  %424 = insertelement <16 x i32> %423, i32 %359, i64 13, !dbg !35
  %425 = insertelement <16 x i32> %424, i32 %363, i64 14, !dbg !35
  %426 = insertelement <16 x i32> %425, i32 %367, i64 15, !dbg !35
  %427 = bitcast <16 x i32> %426 to <16 x float>, !dbg !35
  %428 = insertelement <16 x i32> poison, i32 %304, i64 0, !dbg !43
  %429 = insertelement <16 x i32> %428, i32 %309, i64 1, !dbg !43
  %430 = insertelement <16 x i32> %429, i32 %314, i64 2, !dbg !43
  %431 = insertelement <16 x i32> %430, i32 %319, i64 3, !dbg !43
  %432 = insertelement <16 x i32> %431, i32 %324, i64 4, !dbg !43
  %433 = insertelement <16 x i32> %432, i32 %328, i64 5, !dbg !43
  %434 = insertelement <16 x i32> %433, i32 %332, i64 6, !dbg !43
  %435 = insertelement <16 x i32> %434, i32 %336, i64 7, !dbg !43
  %436 = insertelement <16 x i32> %435, i32 %340, i64 8, !dbg !43
  %437 = insertelement <16 x i32> %436, i32 %344, i64 9, !dbg !43
  %438 = insertelement <16 x i32> %437, i32 %348, i64 10, !dbg !43
  %439 = insertelement <16 x i32> %438, i32 %352, i64 11, !dbg !43
  %440 = insertelement <16 x i32> %439, i32 %356, i64 12, !dbg !43
  %441 = insertelement <16 x i32> %440, i32 %360, i64 13, !dbg !43
  %442 = insertelement <16 x i32> %441, i32 %364, i64 14, !dbg !43
  %443 = insertelement <16 x i32> %442, i32 %368, i64 15, !dbg !43
  %444 = bitcast <16 x i32> %443 to <16 x float>, !dbg !43
  %445 = fcmp ogt <16 x float> %444, zeroinitializer, !dbg !62
  %446 = insertelement <16 x i32> poison, i32 %305, i64 0, !dbg !45
  %447 = insertelement <16 x i32> %446, i32 %310, i64 1, !dbg !45
  %448 = insertelement <16 x i32> %447, i32 %315, i64 2, !dbg !45
  %449 = insertelement <16 x i32> %448, i32 %320, i64 3, !dbg !45
  %450 = insertelement <16 x i32> %449, i32 %325, i64 4, !dbg !45
  %451 = insertelement <16 x i32> %450, i32 %329, i64 5, !dbg !45
  %452 = insertelement <16 x i32> %451, i32 %333, i64 6, !dbg !45
  %453 = insertelement <16 x i32> %452, i32 %337, i64 7, !dbg !45
  %454 = insertelement <16 x i32> %453, i32 %341, i64 8, !dbg !45
  %455 = insertelement <16 x i32> %454, i32 %345, i64 9, !dbg !45
  %456 = insertelement <16 x i32> %455, i32 %349, i64 10, !dbg !45
  %457 = insertelement <16 x i32> %456, i32 %353, i64 11, !dbg !45
  %458 = insertelement <16 x i32> %457, i32 %357, i64 12, !dbg !45
  %459 = insertelement <16 x i32> %458, i32 %361, i64 13, !dbg !45
  %460 = insertelement <16 x i32> %459, i32 %365, i64 14, !dbg !45
  %461 = insertelement <16 x i32> %460, i32 %369, i64 15, !dbg !45
  %462 = bitcast <16 x i32> %461 to <16 x float>, !dbg !45
  %463 = fmul <16 x float> %444, %462, !dbg !63
  %464 = select <16 x i1> %445, <16 x float> %444, <16 x float> %463, !dbg !64
  %465 = insertelement <16 x float> poison, float %250, i64 0, !dbg !65
  %466 = insertelement <16 x float> %465, float %249, i64 1, !dbg !65
  %467 = insertelement <16 x float> %466, float %248, i64 2, !dbg !65
  %468 = insertelement <16 x float> %467, float %247, i64 3, !dbg !65
  %469 = insertelement <16 x float> %468, float %246, i64 4, !dbg !65
  %470 = insertelement <16 x float> %469, float %245, i64 5, !dbg !65
  %471 = insertelement <16 x float> %470, float %244, i64 6, !dbg !65
  %472 = insertelement <16 x float> %471, float %243, i64 7, !dbg !65
  %473 = insertelement <16 x float> %472, float %242, i64 8, !dbg !65
  %474 = insertelement <16 x float> %473, float %241, i64 9, !dbg !65
  %475 = insertelement <16 x float> %474, float %240, i64 10, !dbg !65
  %476 = insertelement <16 x float> %475, float %239, i64 11, !dbg !65
  %477 = insertelement <16 x float> %476, float %238, i64 12, !dbg !65
  %478 = insertelement <16 x float> %477, float %237, i64 13, !dbg !65
  %479 = insertelement <16 x float> %478, float %236, i64 14, !dbg !65
  %480 = insertelement <16 x float> %479, float %235, i64 15, !dbg !65
  %481 = fmul <16 x float> %464, %480, !dbg !65
  %482 = insertelement <16 x i32> poison, i32 %306, i64 0, !dbg !41
  %483 = insertelement <16 x i32> %482, i32 %311, i64 1, !dbg !41
  %484 = insertelement <16 x i32> %483, i32 %316, i64 2, !dbg !41
  %485 = insertelement <16 x i32> %484, i32 %321, i64 3, !dbg !41
  %486 = insertelement <16 x i32> %485, i32 %326, i64 4, !dbg !41
  %487 = insertelement <16 x i32> %486, i32 %330, i64 5, !dbg !41
  %488 = insertelement <16 x i32> %487, i32 %334, i64 6, !dbg !41
  %489 = insertelement <16 x i32> %488, i32 %338, i64 7, !dbg !41
  %490 = insertelement <16 x i32> %489, i32 %342, i64 8, !dbg !41
  %491 = insertelement <16 x i32> %490, i32 %346, i64 9, !dbg !41
  %492 = insertelement <16 x i32> %491, i32 %350, i64 10, !dbg !41
  %493 = insertelement <16 x i32> %492, i32 %354, i64 11, !dbg !41
  %494 = insertelement <16 x i32> %493, i32 %358, i64 12, !dbg !41
  %495 = insertelement <16 x i32> %494, i32 %362, i64 13, !dbg !41
  %496 = insertelement <16 x i32> %495, i32 %366, i64 14, !dbg !41
  %497 = insertelement <16 x i32> %496, i32 %370, i64 15, !dbg !41
  %498 = bitcast <16 x i32> %497 to <16 x float>, !dbg !41
  %499 = fadd <16 x float> %481, %498, !dbg !66
  %500 = insertelement <16 x i1> poison, i1 %57, i64 0, !dbg !67
  %501 = shufflevector <16 x i1> %500, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !67
  %502 = select <16 x i1> %501, <16 x float> %427, <16 x float> %499, !dbg !67
  %503 = fsub <16 x float> %502, %410, !dbg !68
  %504 = insertelement <4 x i32> poison, i32 %379, i64 0, !dbg !27
  %505 = insertelement <4 x i32> %504, i32 %380, i64 1, !dbg !27
  %506 = insertelement <4 x i32> %505, i32 %381, i64 2, !dbg !27
  %507 = insertelement <4 x i32> %506, i32 %382, i64 3, !dbg !27
  %508 = bitcast <4 x i32> %507 to <4 x float>, !dbg !27
  %509 = shufflevector <4 x float> %508, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %510 = insertelement <4 x i32> poison, i32 %383, i64 0, !dbg !25
  %511 = insertelement <4 x i32> %510, i32 %384, i64 1, !dbg !25
  %512 = insertelement <4 x i32> %511, i32 %385, i64 2, !dbg !25
  %513 = insertelement <4 x i32> %512, i32 %386, i64 3, !dbg !25
  %514 = bitcast <4 x i32> %513 to <4 x float>, !dbg !25
  %515 = shufflevector <4 x float> %514, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !25
  %516 = insertelement <16 x float> poison, float %404, i64 0, !dbg !69
  %517 = insertelement <16 x float> %516, float %403, i64 1, !dbg !69
  %518 = insertelement <16 x float> %517, float %402, i64 2, !dbg !69
  %519 = insertelement <16 x float> %518, float %401, i64 3, !dbg !69
  %520 = shufflevector <16 x float> %519, <16 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !69
  %521 = fmul <16 x float> %503, %520, !dbg !69
  %522 = fmul <16 x float> %521, %515, !dbg !70
  %523 = fadd <16 x float> %522, %509, !dbg !71
  %524 = fcmp ogt <16 x float> %523, zeroinitializer, !dbg !72
  %525 = extractelement <16 x float> %523, i64 15, !dbg !73
  %526 = fmul float %525, %378, !dbg !74
  %527 = extractelement <16 x float> %523, i64 14, !dbg !73
  %528 = fmul float %527, %376, !dbg !74
  %529 = extractelement <16 x float> %523, i64 13, !dbg !73
  %530 = fmul float %529, %374, !dbg !74
  %531 = extractelement <16 x float> %523, i64 12, !dbg !73
  %532 = fmul float %531, %372, !dbg !74
  %533 = extractelement <16 x float> %523, i64 11, !dbg !73
  %534 = fmul float %533, %378, !dbg !74
  %535 = extractelement <16 x float> %523, i64 10, !dbg !73
  %536 = fmul float %535, %376, !dbg !74
  %537 = extractelement <16 x float> %523, i64 9, !dbg !73
  %538 = fmul float %537, %374, !dbg !74
  %539 = extractelement <16 x float> %523, i64 8, !dbg !73
  %540 = fmul float %539, %372, !dbg !74
  %541 = extractelement <16 x float> %523, i64 7, !dbg !73
  %542 = fmul float %541, %378, !dbg !74
  %543 = extractelement <16 x float> %523, i64 6, !dbg !73
  %544 = fmul float %543, %376, !dbg !74
  %545 = extractelement <16 x float> %523, i64 5, !dbg !73
  %546 = fmul float %545, %374, !dbg !74
  %547 = extractelement <16 x float> %523, i64 4, !dbg !73
  %548 = fmul float %547, %372, !dbg !74
  %549 = extractelement <16 x float> %523, i64 3, !dbg !73
  %550 = fmul float %549, %378, !dbg !74
  %551 = extractelement <16 x float> %523, i64 2, !dbg !73
  %552 = fmul float %551, %376, !dbg !74
  %553 = extractelement <16 x float> %523, i64 1, !dbg !73
  %554 = fmul float %553, %374, !dbg !74
  %555 = extractelement <16 x float> %523, i64 0, !dbg !73
  %556 = fmul float %555, %372, !dbg !74
  %557 = extractelement <16 x i1> %524, i64 15, !dbg !73
  %558 = select i1 %557, float %525, float %526, !dbg !73
  %559 = extractelement <16 x i1> %524, i64 14, !dbg !73
  %560 = select i1 %559, float %527, float %528, !dbg !73
  %561 = extractelement <16 x i1> %524, i64 13, !dbg !73
  %562 = select i1 %561, float %529, float %530, !dbg !73
  %563 = extractelement <16 x i1> %524, i64 12, !dbg !73
  %564 = select i1 %563, float %531, float %532, !dbg !73
  %565 = extractelement <16 x i1> %524, i64 11, !dbg !73
  %566 = select i1 %565, float %533, float %534, !dbg !73
  %567 = extractelement <16 x i1> %524, i64 10, !dbg !73
  %568 = select i1 %567, float %535, float %536, !dbg !73
  %569 = extractelement <16 x i1> %524, i64 9, !dbg !73
  %570 = select i1 %569, float %537, float %538, !dbg !73
  %571 = extractelement <16 x i1> %524, i64 8, !dbg !73
  %572 = select i1 %571, float %539, float %540, !dbg !73
  %573 = extractelement <16 x i1> %524, i64 7, !dbg !73
  %574 = select i1 %573, float %541, float %542, !dbg !73
  %575 = extractelement <16 x i1> %524, i64 6, !dbg !73
  %576 = select i1 %575, float %543, float %544, !dbg !73
  %577 = extractelement <16 x i1> %524, i64 5, !dbg !73
  %578 = select i1 %577, float %545, float %546, !dbg !73
  %579 = extractelement <16 x i1> %524, i64 4, !dbg !73
  %580 = select i1 %579, float %547, float %548, !dbg !73
  %581 = extractelement <16 x i1> %524, i64 3, !dbg !73
  %582 = select i1 %581, float %549, float %550, !dbg !73
  %583 = extractelement <16 x i1> %524, i64 2, !dbg !73
  %584 = select i1 %583, float %551, float %552, !dbg !73
  %585 = extractelement <16 x i1> %524, i64 1, !dbg !73
  %586 = select i1 %585, float %553, float %554, !dbg !73
  %587 = extractelement <16 x i1> %524, i64 0, !dbg !73
  %588 = select i1 %587, float %555, float %556, !dbg !73
  %589 = shl i32 %22, 8, !dbg !75
  %590 = shl i32 %23, 8, !dbg !75
  %591 = shl i32 %24, 8, !dbg !75
  %592 = shl i32 %25, 8, !dbg !75
  %593 = add i32 %32, %589, !dbg !76
  %594 = add i32 %32, %590, !dbg !76
  %595 = add i32 %32, %591, !dbg !76
  %596 = add i32 %32, %592, !dbg !76
  %597 = sext i32 %593 to i64, !dbg !77
  %598 = getelementptr float, ptr addrspace(1) %10, i64 %597, !dbg !77
  %599 = sext i32 %594 to i64, !dbg !77
  %600 = getelementptr float, ptr addrspace(1) %10, i64 %599, !dbg !77
  %601 = sext i32 %595 to i64, !dbg !77
  %602 = getelementptr float, ptr addrspace(1) %10, i64 %601, !dbg !77
  %603 = sext i32 %596 to i64, !dbg !77
  %604 = getelementptr float, ptr addrspace(1) %10, i64 %603, !dbg !77
  %605 = and i1 %26, %33, !dbg !78
  %606 = and i1 %27, %33, !dbg !78
  %607 = and i1 %28, %33, !dbg !78
  %608 = and i1 %29, %33, !dbg !78
  %609 = and i1 %400, %399, !dbg !78
  %610 = and i1 %400, %398, !dbg !78
  %611 = and i1 %400, %396, !dbg !78
  %612 = and i1 %400, %394, !dbg !78
  %bc = bitcast <16 x float> %502 to <16 x i32>, !dbg !79
  %613 = extractelement <16 x i32> %bc, i64 15, !dbg !79
  %bc48 = bitcast <16 x float> %502 to <16 x i32>, !dbg !79
  %614 = extractelement <16 x i32> %bc48, i64 14, !dbg !79
  %bc49 = bitcast <16 x float> %502 to <16 x i32>, !dbg !79
  %615 = extractelement <16 x i32> %bc49, i64 13, !dbg !79
  %bc50 = bitcast <16 x float> %502 to <16 x i32>, !dbg !79
  %616 = extractelement <16 x i32> %bc50, i64 12, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %613, i32 %614, i32 %615, i32 %616, ptr addrspace(1) %598, i1 %605) #4, !dbg !79
  %bc51 = bitcast <16 x float> %502 to <16 x i32>, !dbg !79
  %617 = extractelement <16 x i32> %bc51, i64 11, !dbg !79
  %bc52 = bitcast <16 x float> %502 to <16 x i32>, !dbg !79
  %618 = extractelement <16 x i32> %bc52, i64 10, !dbg !79
  %bc53 = bitcast <16 x float> %502 to <16 x i32>, !dbg !79
  %619 = extractelement <16 x i32> %bc53, i64 9, !dbg !79
  %bc54 = bitcast <16 x float> %502 to <16 x i32>, !dbg !79
  %620 = extractelement <16 x i32> %bc54, i64 8, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %617, i32 %618, i32 %619, i32 %620, ptr addrspace(1) %600, i1 %606) #4, !dbg !79
  %bc55 = bitcast <16 x float> %502 to <16 x i32>, !dbg !79
  %621 = extractelement <16 x i32> %bc55, i64 7, !dbg !79
  %bc56 = bitcast <16 x float> %502 to <16 x i32>, !dbg !79
  %622 = extractelement <16 x i32> %bc56, i64 6, !dbg !79
  %bc57 = bitcast <16 x float> %502 to <16 x i32>, !dbg !79
  %623 = extractelement <16 x i32> %bc57, i64 5, !dbg !79
  %bc58 = bitcast <16 x float> %502 to <16 x i32>, !dbg !79
  %624 = extractelement <16 x i32> %bc58, i64 4, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %621, i32 %622, i32 %623, i32 %624, ptr addrspace(1) %602, i1 %607) #4, !dbg !79
  %bc59 = bitcast <16 x float> %502 to <16 x i32>, !dbg !79
  %625 = extractelement <16 x i32> %bc59, i64 3, !dbg !79
  %bc60 = bitcast <16 x float> %502 to <16 x i32>, !dbg !79
  %626 = extractelement <16 x i32> %bc60, i64 2, !dbg !79
  %bc61 = bitcast <16 x float> %502 to <16 x i32>, !dbg !79
  %627 = extractelement <16 x i32> %bc61, i64 1, !dbg !79
  %bc62 = bitcast <16 x float> %502 to <16 x i32>, !dbg !79
  %628 = extractelement <16 x i32> %bc62, i64 0, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %625, i32 %626, i32 %627, i32 %628, ptr addrspace(1) %604, i1 %608) #4, !dbg !79
  %629 = shl i32 %392, 6, !dbg !80
  %630 = shl i32 %397, 6, !dbg !80
  %631 = shl i32 %395, 6, !dbg !80
  %632 = shl i32 %393, 6, !dbg !80
  %633 = shl i32 %389, 14, !dbg !81
  %634 = add i32 %633, %.decomposed, !dbg !82
  %635 = add i32 %634, %629, !dbg !83
  %636 = add i32 %634, %630, !dbg !83
  %637 = add i32 %634, %631, !dbg !83
  %638 = add i32 %634, %632, !dbg !83
  %639 = sext i32 %635 to i64, !dbg !84
  %640 = getelementptr float, ptr addrspace(1) %11, i64 %639, !dbg !84
  %641 = sext i32 %636 to i64, !dbg !84
  %642 = getelementptr float, ptr addrspace(1) %11, i64 %641, !dbg !84
  %643 = sext i32 %637 to i64, !dbg !84
  %644 = getelementptr float, ptr addrspace(1) %11, i64 %643, !dbg !84
  %645 = sext i32 %638 to i64, !dbg !84
  %646 = getelementptr float, ptr addrspace(1) %11, i64 %645, !dbg !84
  %647 = shl i32 %17, 10, !dbg !85
  %648 = and i32 %647, 3072, !dbg !85
  %649 = or disjoint i32 %648, %19, !dbg !85
  %650 = and i32 %20, 1020, !dbg !85
  %651 = lshr exact i32 %648, 4, !dbg !85
  %652 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %651, !dbg !85
  %653 = getelementptr float, ptr addrspace(3) %652, i32 %649, !dbg !85
  %654 = bitcast float %558 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %653, <1 x i32> %654, i1 true) #4, !dbg !85
  %655 = or disjoint i32 %649, 256, !dbg !85
  %656 = lshr i32 %655, 6, !dbg !85
  %657 = getelementptr float, ptr addrspace(3) @global_smem, i32 %656, !dbg !85
  %658 = getelementptr float, ptr addrspace(3) %657, i32 %655, !dbg !85
  %659 = bitcast float %560 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %658, <1 x i32> %659, i1 true) #4, !dbg !85
  %660 = or disjoint i32 %649, 512, !dbg !85
  %661 = lshr i32 %660, 6, !dbg !85
  %662 = getelementptr float, ptr addrspace(3) @global_smem, i32 %661, !dbg !85
  %663 = getelementptr float, ptr addrspace(3) %662, i32 %660, !dbg !85
  %664 = bitcast float %562 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %663, <1 x i32> %664, i1 true) #4, !dbg !85
  %665 = or disjoint i32 %649, 768, !dbg !85
  %666 = lshr i32 %665, 6, !dbg !85
  %667 = getelementptr float, ptr addrspace(3) @global_smem, i32 %666, !dbg !85
  %668 = getelementptr float, ptr addrspace(3) %667, i32 %665, !dbg !85
  %669 = bitcast float %564 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %668, <1 x i32> %669, i1 true) #4, !dbg !85
  %670 = or disjoint i32 %649, 64, !dbg !85
  %671 = getelementptr float, ptr addrspace(3) %652, i32 %670, !dbg !85
  %672 = bitcast float %566 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %671, <1 x i32> %672, i1 true) #4, !dbg !85
  %673 = or disjoint i32 %649, 320, !dbg !85
  %674 = lshr i32 %673, 6, !dbg !85
  %675 = and i32 %674, 52, !dbg !85
  %676 = getelementptr float, ptr addrspace(3) @global_smem, i32 %675, !dbg !85
  %677 = getelementptr float, ptr addrspace(3) %676, i32 %673, !dbg !85
  %678 = bitcast float %568 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %677, <1 x i32> %678, i1 true) #4, !dbg !85
  %679 = or disjoint i32 %649, 576, !dbg !85
  %680 = lshr i32 %679, 6, !dbg !85
  %681 = and i32 %680, 56, !dbg !85
  %682 = getelementptr float, ptr addrspace(3) @global_smem, i32 %681, !dbg !85
  %683 = getelementptr float, ptr addrspace(3) %682, i32 %679, !dbg !85
  %684 = bitcast float %570 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %683, <1 x i32> %684, i1 true) #4, !dbg !85
  %685 = or disjoint i32 %649, 832, !dbg !85
  %686 = lshr i32 %685, 6, !dbg !85
  %687 = and i32 %686, 60, !dbg !85
  %688 = getelementptr float, ptr addrspace(3) @global_smem, i32 %687, !dbg !85
  %689 = getelementptr float, ptr addrspace(3) %688, i32 %685, !dbg !85
  %690 = bitcast float %572 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %689, <1 x i32> %690, i1 true) #4, !dbg !85
  %691 = or disjoint i32 %649, 128, !dbg !85
  %692 = getelementptr float, ptr addrspace(3) %652, i32 %691, !dbg !85
  %693 = bitcast float %574 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %692, <1 x i32> %693, i1 true) #4, !dbg !85
  %694 = or disjoint i32 %649, 384, !dbg !85
  %695 = lshr i32 %694, 6, !dbg !85
  %696 = and i32 %695, 52, !dbg !85
  %697 = getelementptr float, ptr addrspace(3) @global_smem, i32 %696, !dbg !85
  %698 = getelementptr float, ptr addrspace(3) %697, i32 %694, !dbg !85
  %699 = bitcast float %576 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %698, <1 x i32> %699, i1 true) #4, !dbg !85
  %700 = or disjoint i32 %649, 640, !dbg !85
  %701 = lshr i32 %700, 6, !dbg !85
  %702 = and i32 %701, 56, !dbg !85
  %703 = getelementptr float, ptr addrspace(3) @global_smem, i32 %702, !dbg !85
  %704 = getelementptr float, ptr addrspace(3) %703, i32 %700, !dbg !85
  %705 = bitcast float %578 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %704, <1 x i32> %705, i1 true) #4, !dbg !85
  %706 = or disjoint i32 %649, 896, !dbg !85
  %707 = lshr i32 %706, 6, !dbg !85
  %708 = and i32 %707, 60, !dbg !85
  %709 = getelementptr float, ptr addrspace(3) @global_smem, i32 %708, !dbg !85
  %710 = getelementptr float, ptr addrspace(3) %709, i32 %706, !dbg !85
  %711 = bitcast float %580 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %710, <1 x i32> %711, i1 true) #4, !dbg !85
  %712 = or disjoint i32 %649, 192, !dbg !85
  %713 = getelementptr float, ptr addrspace(3) %652, i32 %712, !dbg !85
  %714 = bitcast float %582 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %713, <1 x i32> %714, i1 true) #4, !dbg !85
  %715 = or disjoint i32 %649, 448, !dbg !85
  %716 = lshr i32 %715, 6, !dbg !85
  %717 = and i32 %716, 52, !dbg !85
  %718 = getelementptr float, ptr addrspace(3) @global_smem, i32 %717, !dbg !85
  %719 = getelementptr float, ptr addrspace(3) %718, i32 %715, !dbg !85
  %720 = bitcast float %584 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %719, <1 x i32> %720, i1 true) #4, !dbg !85
  %721 = or disjoint i32 %649, 704, !dbg !85
  %722 = lshr i32 %721, 6, !dbg !85
  %723 = and i32 %722, 56, !dbg !85
  %724 = getelementptr float, ptr addrspace(3) @global_smem, i32 %723, !dbg !85
  %725 = getelementptr float, ptr addrspace(3) %724, i32 %721, !dbg !85
  %726 = bitcast float %586 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %725, <1 x i32> %726, i1 true) #4, !dbg !85
  %727 = or disjoint i32 %649, 960, !dbg !85
  %728 = lshr i32 %727, 6, !dbg !85
  %729 = and i32 %728, 60, !dbg !85
  %730 = getelementptr float, ptr addrspace(3) @global_smem, i32 %729, !dbg !85
  %731 = getelementptr float, ptr addrspace(3) %730, i32 %727, !dbg !85
  %732 = bitcast float %588 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %731, <1 x i32> %732, i1 true) #4, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %733 = lshr i32 %20, 6, !dbg !85
  %734 = and i32 %733, 12, !dbg !85
  %735 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %734, !dbg !85
  %736 = getelementptr inbounds float, ptr addrspace(3) %735, i32 %650, !dbg !85
  %737 = or disjoint i32 %650, 1024, !dbg !85
  %738 = lshr i32 %737, 6, !dbg !85
  %739 = and i32 %738, 28, !dbg !85
  %740 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %739, !dbg !85
  %741 = getelementptr inbounds float, ptr addrspace(3) %740, i32 %737, !dbg !85
  %742 = load <4 x i32>, ptr addrspace(3) %741, align 16, !dbg !85
  %743 = or disjoint i32 %650, 2048, !dbg !85
  %744 = lshr i32 %743, 6, !dbg !85
  %745 = and i32 %744, 44, !dbg !85
  %746 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %745, !dbg !85
  %747 = getelementptr inbounds float, ptr addrspace(3) %746, i32 %743, !dbg !85
  %748 = load <4 x i32>, ptr addrspace(3) %747, align 16, !dbg !85
  %749 = or disjoint i32 %650, 3072, !dbg !85
  %750 = lshr i32 %749, 6, !dbg !85
  %751 = and i32 %750, 60, !dbg !85
  %752 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %751, !dbg !85
  %753 = getelementptr inbounds float, ptr addrspace(3) %752, i32 %749, !dbg !85
  %754 = load <4 x i32>, ptr addrspace(3) %753, align 16, !dbg !85
  %.extract = load i32, ptr addrspace(3) %736, align 16, !dbg !85
  %755 = getelementptr inbounds i8, ptr addrspace(3) %736, i32 4, !dbg !85
  %.extract18 = load i32, ptr addrspace(3) %755, align 4, !dbg !85
  %756 = getelementptr inbounds i8, ptr addrspace(3) %736, i32 8, !dbg !85
  %.extract19 = load i32, ptr addrspace(3) %756, align 8, !dbg !85
  %757 = getelementptr inbounds i8, ptr addrspace(3) %736, i32 12, !dbg !85
  %.extract20 = load i32, ptr addrspace(3) %757, align 4, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %640, i1 %609) #4, !dbg !85
  %.extract21 = extractelement <4 x i32> %742, i64 0, !dbg !85
  %.extract22 = extractelement <4 x i32> %742, i64 1, !dbg !85
  %.extract23 = extractelement <4 x i32> %742, i64 2, !dbg !85
  %.extract24 = extractelement <4 x i32> %742, i64 3, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %642, i1 %610) #4, !dbg !85
  %.extract25 = extractelement <4 x i32> %748, i64 0, !dbg !85
  %.extract26 = extractelement <4 x i32> %748, i64 1, !dbg !85
  %.extract27 = extractelement <4 x i32> %748, i64 2, !dbg !85
  %.extract28 = extractelement <4 x i32> %748, i64 3, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %644, i1 %611) #4, !dbg !85
  %.extract29 = extractelement <4 x i32> %754, i64 0, !dbg !85
  %.extract30 = extractelement <4 x i32> %754, i64 1, !dbg !85
  %.extract31 = extractelement <4 x i32> %754, i64 2, !dbg !85
  %.extract32 = extractelement <4 x i32> %754, i64 3, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %646, i1 %612) #4, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py", directory: "inductor_cache/6s")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 31, scope: !7)
!21 = !DILocation(line: 32, column: 36, scope: !7)
!22 = !DILocation(line: 33, column: 31, scope: !7)
!23 = !DILocation(line: 33, column: 36, scope: !7)
!24 = !DILocation(line: 34, column: 31, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 36, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 41, column: 18, scope: !7)
!31 = !DILocation(line: 42, column: 34, scope: !7)
!32 = !DILocation(line: 42, column: 40, scope: !7)
!33 = !DILocation(line: 42, column: 30, scope: !7)
!34 = !DILocation(line: 42, column: 61, scope: !7)
!35 = !DILocation(line: 42, column: 46, scope: !7)
!36 = !DILocation(line: 46, column: 49, scope: !7)
!37 = !DILocation(line: 46, column: 40, scope: !7)
!38 = !DILocation(line: 46, column: 30, scope: !7)
!39 = !DILocation(line: 46, column: 62, scope: !7)
!40 = !DILocation(line: 46, column: 70, scope: !7)
!41 = !DILocation(line: 46, column: 55, scope: !7)
!42 = !DILocation(line: 47, column: 31, scope: !7)
!43 = !DILocation(line: 47, column: 56, scope: !7)
!44 = !DILocation(line: 50, column: 31, scope: !7)
!45 = !DILocation(line: 50, column: 80, scope: !7)
!46 = !DILocation(line: 53, column: 35, scope: !7)
!47 = !DILocation(line: 53, column: 41, scope: !7)
!48 = !DILocation(line: 53, column: 31, scope: !7)
!49 = !DILocation(line: 53, column: 56, scope: !7)
!50 = !DILocation(line: 47, column: 30, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!53 = !DILocation(line: 54, column: 23, scope: !7)
!54 = !DILocation(line: 47, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 47, column: 20, scope: !51, inlinedAt: !53)
!56 = !DILocation(line: 47, column: 16, scope: !51, inlinedAt: !53)
!57 = !DILocation(line: 62, column: 20, scope: !7)
!58 = !DILocation(line: 63, column: 27, scope: !7)
!59 = !DILocation(line: 31, column: 19, scope: !7)
!60 = !DILocation(line: 26, column: 44, scope: !7)
!61 = !DILocation(line: 65, column: 20, scope: !7)
!62 = !DILocation(line: 49, column: 20, scope: !7)
!63 = !DILocation(line: 51, column: 20, scope: !7)
!64 = !DILocation(line: 52, column: 35, scope: !7)
!65 = !DILocation(line: 55, column: 20, scope: !7)
!66 = !DILocation(line: 56, column: 19, scope: !7)
!67 = !DILocation(line: 59, column: 33, scope: !7)
!68 = !DILocation(line: 60, column: 20, scope: !7)
!69 = !DILocation(line: 68, column: 20, scope: !7)
!70 = !DILocation(line: 69, column: 20, scope: !7)
!71 = !DILocation(line: 70, column: 20, scope: !7)
!72 = !DILocation(line: 72, column: 20, scope: !7)
!73 = !DILocation(line: 74, column: 35, scope: !7)
!74 = !DILocation(line: 73, column: 20, scope: !7)
!75 = !DILocation(line: 75, column: 34, scope: !7)
!76 = !DILocation(line: 75, column: 30, scope: !7)
!77 = !DILocation(line: 75, column: 25, scope: !7)
!78 = !DILocation(line: 75, column: 54, scope: !7)
!79 = !DILocation(line: 75, column: 46, scope: !7)
!80 = !DILocation(line: 76, column: 33, scope: !7)
!81 = !DILocation(line: 76, column: 44, scope: !7)
!82 = !DILocation(line: 76, column: 30, scope: !7)
!83 = !DILocation(line: 76, column: 38, scope: !7)
!84 = !DILocation(line: 76, column: 25, scope: !7)
!85 = !DILocation(line: 76, column: 56, scope: !7)
!86 = !DILocation(line: 76, column: 4, scope: !7)
