; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 10, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 512, !dbg !13
  %22 = srem i32 %20, 256, !dbg !14
  %.frozen = freeze i32 %20, !dbg !15
  %23 = sdiv i32 %.frozen, 65536, !dbg !15
  %.frozen91 = freeze i32 %21, !dbg !15
  %24 = sdiv i32 %.frozen91, 65536, !dbg !15
  %25 = mul i32 %23, 65536, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %25, !dbg !16
  %26 = mul i32 %24, 65536, !dbg !16
  %srem1.decomposed = sub i32 %.frozen91, %26, !dbg !16
  %27 = mul nsw i32 %23, 24576, !dbg !17
  %28 = mul nsw i32 %24, 24576, !dbg !17
  %29 = add nsw i32 %27, %srem.decomposed, !dbg !18
  %30 = add nsw i32 %28, %srem1.decomposed, !dbg !18
  %31 = sext i32 %29 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !19
  %33 = sext i32 %30 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !19
  %35 = shl nsw i32 %23, 13, !dbg !20
  %36 = shl nsw i32 %24, 13, !dbg !20
  %37 = add nsw i32 %35, %22, !dbg !21
  %38 = add nsw i32 %37, -16384, !dbg !22
  %39 = add nsw i32 %36, %22, !dbg !21
  %40 = add nsw i32 %39, -16384, !dbg !22
  %41 = add nsw i32 %37, -24576, !dbg !23
  %42 = add nsw i32 %39, -24576, !dbg !23
  %43 = add nsw i32 %37, -32768, !dbg !24
  %44 = add nsw i32 %39, -32768, !dbg !24
  %45 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !25
  %46 = insertelement <2 x i32> %45, i32 %20, i64 1, !dbg !25
  %47 = sdiv <2 x i32> %46, splat (i32 256), !dbg !25
  %48 = srem <2 x i32> %47, splat (i32 256), !dbg !26
  %49 = extractelement <2 x i32> %48, i64 1, !dbg !27
  %50 = sext i32 %49 to i64, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %7, i64 %50, !dbg !28
  %52 = extractelement <2 x i32> %48, i64 0, !dbg !27
  %53 = sext i32 %52 to i64, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %7, i64 %53, !dbg !28
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !29
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !29
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !29
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !29
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !29
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !29
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !29
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !29
  %63 = getelementptr float, ptr addrspace(1) %8, i64 %50, !dbg !30
  %64 = getelementptr float, ptr addrspace(1) %8, i64 %53, !dbg !30
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !31
  %66 = bitcast i32 %65 to float, !dbg !31
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !31
  %68 = bitcast i32 %67 to float, !dbg !31
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !31
  %70 = bitcast i32 %69 to float, !dbg !31
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !31
  %72 = bitcast i32 %71 to float, !dbg !31
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !31
  %74 = bitcast i32 %73 to float, !dbg !31
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !31
  %76 = bitcast i32 %75 to float, !dbg !31
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !31
  %78 = bitcast i32 %77 to float, !dbg !31
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !31
  %80 = bitcast i32 %79 to float, !dbg !31
  %81 = getelementptr float, ptr addrspace(1) %9, i64 %50, !dbg !32
  %82 = getelementptr float, ptr addrspace(1) %9, i64 %53, !dbg !32
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !33
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !33
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !33
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !33
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !33
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !33
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !33
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !33
  %91 = getelementptr float, ptr addrspace(1) %10, i64 %50, !dbg !34
  %92 = getelementptr float, ptr addrspace(1) %10, i64 %53, !dbg !34
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !35
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !35
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !35
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !35
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !35
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !35
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !35
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !35
  %101 = icmp slt <2 x i32> %48, splat (i32 64), !dbg !36
  %102 = extractelement <2 x i1> %101, i64 1, !dbg !37
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #3, !dbg !37
  %104 = extractelement <2 x i1> %101, i64 0, !dbg !37
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %104, i32 0, i1 %104, i32 0, i1 %104, i32 0, i1 %104, i32 0, i1 %104) #3, !dbg !37
  %106 = and <2 x i32> %48, splat (i32 -32), !dbg !38
  %107 = icmp eq <2 x i32> %106, splat (i32 64), !dbg !38
  %108 = shl nsw i32 %49, 8, !dbg !21
  %109 = shl nsw i32 %52, 8, !dbg !21
  %110 = add nsw i32 %38, %108, !dbg !39
  %111 = add nsw i32 %40, %109, !dbg !39
  %112 = sext i32 %110 to i64, !dbg !40
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !40
  %114 = sext i32 %111 to i64, !dbg !40
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !40
  %116 = extractelement <2 x i1> %107, i64 1, !dbg !41
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %113, i1 %116, i32 0, i1 %116, i32 0, i1 %116, i32 0, i1 %116, i32 0, i1 %116) #3, !dbg !41
  %118 = extractelement <2 x i1> %107, i64 0, !dbg !41
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %115, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118) #3, !dbg !41
  %120 = icmp eq <2 x i32> %106, splat (i32 96), !dbg !42
  %121 = add nsw i32 %41, %108, !dbg !43
  %122 = add nsw i32 %42, %109, !dbg !43
  %123 = sext i32 %121 to i64, !dbg !44
  %124 = getelementptr float, ptr addrspace(1) %2, i64 %123, !dbg !44
  %125 = sext i32 %122 to i64, !dbg !44
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %125, !dbg !44
  %127 = extractelement <2 x i1> %120, i64 1, !dbg !45
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %124, i1 %127, i32 0, i1 %127, i32 0, i1 %127, i32 0, i1 %127, i32 0, i1 %127) #3, !dbg !45
  %129 = extractelement <2 x i1> %120, i64 0, !dbg !45
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %126, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129) #3, !dbg !45
  %131 = icmp eq <2 x i32> %106, splat (i32 128), !dbg !46
  %132 = add nsw i32 %43, %108, !dbg !47
  %133 = add nsw i32 %44, %109, !dbg !47
  %134 = sext i32 %132 to i64, !dbg !48
  %135 = getelementptr float, ptr addrspace(1) %3, i64 %134, !dbg !48
  %136 = sext i32 %133 to i64, !dbg !48
  %137 = getelementptr float, ptr addrspace(1) %3, i64 %136, !dbg !48
  %138 = extractelement <2 x i1> %131, i64 1, !dbg !49
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %135, i1 %138, i32 0, i1 %138, i32 0, i1 %138, i32 0, i1 %138, i32 0, i1 %138) #3, !dbg !49
  %140 = extractelement <2 x i1> %131, i64 0, !dbg !49
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %137, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #3, !dbg !49
  %142 = icmp eq <2 x i32> %106, splat (i32 160), !dbg !50
  %143 = add nsw i32 %37, -40960, !dbg !51
  %144 = add nsw i32 %143, %108, !dbg !52
  %145 = add nsw i32 %39, -40960, !dbg !51
  %146 = add nsw i32 %145, %109, !dbg !52
  %147 = sext i32 %144 to i64, !dbg !53
  %148 = getelementptr float, ptr addrspace(1) %4, i64 %147, !dbg !53
  %149 = sext i32 %146 to i64, !dbg !53
  %150 = getelementptr float, ptr addrspace(1) %4, i64 %149, !dbg !53
  %151 = extractelement <2 x i1> %142, i64 1, !dbg !54
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %148, i1 %151, i32 0, i1 %151, i32 0, i1 %151, i32 0, i1 %151, i32 0, i1 %151) #3, !dbg !54
  %153 = extractelement <2 x i1> %142, i64 0, !dbg !54
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %150, i1 %153, i32 0, i1 %153, i32 0, i1 %153, i32 0, i1 %153, i32 0, i1 %153) #3, !dbg !54
  %155 = icmp eq <2 x i32> %106, splat (i32 192), !dbg !55
  %156 = add nsw i32 %37, -49152, !dbg !56
  %157 = add nsw i32 %156, %108, !dbg !57
  %158 = add nsw i32 %39, -49152, !dbg !56
  %159 = add nsw i32 %158, %109, !dbg !57
  %160 = sext i32 %157 to i64, !dbg !58
  %161 = getelementptr float, ptr addrspace(1) %5, i64 %160, !dbg !58
  %162 = sext i32 %159 to i64, !dbg !58
  %163 = getelementptr float, ptr addrspace(1) %5, i64 %162, !dbg !58
  %164 = extractelement <2 x i1> %155, i64 1, !dbg !59
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %161, i1 %164, i32 0, i1 %164, i32 0, i1 %164, i32 0, i1 %164, i32 0, i1 %164) #3, !dbg !59
  %166 = extractelement <2 x i1> %155, i64 0, !dbg !59
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %163, i1 %166, i32 0, i1 %166, i32 0, i1 %166, i32 0, i1 %166, i32 0, i1 %166) #3, !dbg !59
  %168 = icmp sgt i32 %49, 223, !dbg !27
  %169 = icmp sgt i32 %52, 223, !dbg !27
  %170 = add nsw i32 %37, -57344, !dbg !60
  %171 = add nsw i32 %170, %108, !dbg !61
  %172 = add nsw i32 %39, -57344, !dbg !60
  %173 = add nsw i32 %172, %109, !dbg !61
  %174 = sext i32 %171 to i64, !dbg !62
  %175 = getelementptr float, ptr addrspace(1) %6, i64 %174, !dbg !62
  %176 = sext i32 %173 to i64, !dbg !62
  %177 = getelementptr float, ptr addrspace(1) %6, i64 %176, !dbg !62
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %175, i1 %168, i32 0, i1 %168, i32 0, i1 %168, i32 0, i1 %168, i32 0, i1 %168) #3, !dbg !63
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %177, i1 %169, i32 0, i1 %169, i32 0, i1 %169, i32 0, i1 %169, i32 0, i1 %169) #3, !dbg !63
  %180 = fadd float %66, 0x3EE4F8B580000000, !dbg !64
  %181 = fadd float %68, 0x3EE4F8B580000000, !dbg !64
  %182 = fadd float %70, 0x3EE4F8B580000000, !dbg !64
  %183 = fadd float %72, 0x3EE4F8B580000000, !dbg !64
  %184 = fadd float %74, 0x3EE4F8B580000000, !dbg !64
  %185 = fadd float %76, 0x3EE4F8B580000000, !dbg !64
  %186 = fadd float %78, 0x3EE4F8B580000000, !dbg !64
  %187 = fadd float %80, 0x3EE4F8B580000000, !dbg !64
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i = icmp eq i32 %188, 0, !dbg !65
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i = icmp eq i32 %189, 0, !dbg !65
  br i1 %.not.i, label %195, label %190, !dbg !65

190:                                              ; preds = %14
  br i1 %.not1.i, label %193, label %191, !dbg !65

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %180) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %180) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

195:                                              ; preds = %14
  br i1 %.not1.i, label %198, label %196, !dbg !65

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.f(float %180) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.f(float %180) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

__nv_sqrtf.exit:                                  ; preds = %191, %193, %196, %198
  %.0.i = phi float [ %192, %191 ], [ %194, %193 ], [ %197, %196 ], [ %199, %198 ], !dbg !65
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i49 = icmp eq i32 %200, 0, !dbg !65
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i52 = icmp eq i32 %201, 0, !dbg !65
  br i1 %.not.i49, label %207, label %202, !dbg !65

202:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i52, label %205, label %203, !dbg !65

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %181) #3, !dbg !65
  br label %__nv_sqrtf.exit53, !dbg !65

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %181) #3, !dbg !65
  br label %__nv_sqrtf.exit53, !dbg !65

207:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i52, label %210, label %208, !dbg !65

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.f(float %181) #3, !dbg !65
  br label %__nv_sqrtf.exit53, !dbg !65

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.f(float %181) #3, !dbg !65
  br label %__nv_sqrtf.exit53, !dbg !65

__nv_sqrtf.exit53:                                ; preds = %203, %205, %208, %210
  %.0.i51 = phi float [ %204, %203 ], [ %206, %205 ], [ %209, %208 ], [ %211, %210 ], !dbg !65
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i54 = icmp eq i32 %212, 0, !dbg !65
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i57 = icmp eq i32 %213, 0, !dbg !65
  br i1 %.not.i54, label %219, label %214, !dbg !65

214:                                              ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %217, label %215, !dbg !65

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %182) #3, !dbg !65
  br label %__nv_sqrtf.exit58, !dbg !65

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %182) #3, !dbg !65
  br label %__nv_sqrtf.exit58, !dbg !65

219:                                              ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %222, label %220, !dbg !65

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.f(float %182) #3, !dbg !65
  br label %__nv_sqrtf.exit58, !dbg !65

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.f(float %182) #3, !dbg !65
  br label %__nv_sqrtf.exit58, !dbg !65

__nv_sqrtf.exit58:                                ; preds = %215, %217, %220, %222
  %.0.i56 = phi float [ %216, %215 ], [ %218, %217 ], [ %221, %220 ], [ %223, %222 ], !dbg !65
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i59 = icmp eq i32 %224, 0, !dbg !65
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i62 = icmp eq i32 %225, 0, !dbg !65
  br i1 %.not.i59, label %231, label %226, !dbg !65

226:                                              ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %229, label %227, !dbg !65

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %183) #3, !dbg !65
  br label %__nv_sqrtf.exit63, !dbg !65

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %183) #3, !dbg !65
  br label %__nv_sqrtf.exit63, !dbg !65

231:                                              ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %234, label %232, !dbg !65

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.f(float %183) #3, !dbg !65
  br label %__nv_sqrtf.exit63, !dbg !65

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.f(float %183) #3, !dbg !65
  br label %__nv_sqrtf.exit63, !dbg !65

__nv_sqrtf.exit63:                                ; preds = %227, %229, %232, %234
  %.0.i61 = phi float [ %228, %227 ], [ %230, %229 ], [ %233, %232 ], [ %235, %234 ], !dbg !65
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i64 = icmp eq i32 %236, 0, !dbg !65
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i67 = icmp eq i32 %237, 0, !dbg !65
  br i1 %.not.i64, label %243, label %238, !dbg !65

238:                                              ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %241, label %239, !dbg !65

239:                                              ; preds = %238
  %240 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %184) #3, !dbg !65
  br label %__nv_sqrtf.exit68, !dbg !65

241:                                              ; preds = %238
  %242 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %184) #3, !dbg !65
  br label %__nv_sqrtf.exit68, !dbg !65

243:                                              ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %246, label %244, !dbg !65

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.f(float %184) #3, !dbg !65
  br label %__nv_sqrtf.exit68, !dbg !65

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.f(float %184) #3, !dbg !65
  br label %__nv_sqrtf.exit68, !dbg !65

__nv_sqrtf.exit68:                                ; preds = %239, %241, %244, %246
  %.0.i66 = phi float [ %240, %239 ], [ %242, %241 ], [ %245, %244 ], [ %247, %246 ], !dbg !65
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i69 = icmp eq i32 %248, 0, !dbg !65
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i72 = icmp eq i32 %249, 0, !dbg !65
  br i1 %.not.i69, label %255, label %250, !dbg !65

250:                                              ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %253, label %251, !dbg !65

251:                                              ; preds = %250
  %252 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %185) #3, !dbg !65
  br label %__nv_sqrtf.exit73, !dbg !65

253:                                              ; preds = %250
  %254 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %185) #3, !dbg !65
  br label %__nv_sqrtf.exit73, !dbg !65

255:                                              ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %258, label %256, !dbg !65

256:                                              ; preds = %255
  %257 = tail call float @llvm.nvvm.sqrt.rn.f(float %185) #3, !dbg !65
  br label %__nv_sqrtf.exit73, !dbg !65

258:                                              ; preds = %255
  %259 = tail call float @llvm.nvvm.sqrt.approx.f(float %185) #3, !dbg !65
  br label %__nv_sqrtf.exit73, !dbg !65

__nv_sqrtf.exit73:                                ; preds = %251, %253, %256, %258
  %.0.i71 = phi float [ %252, %251 ], [ %254, %253 ], [ %257, %256 ], [ %259, %258 ], !dbg !65
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i74 = icmp eq i32 %260, 0, !dbg !65
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i77 = icmp eq i32 %261, 0, !dbg !65
  br i1 %.not.i74, label %267, label %262, !dbg !65

262:                                              ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %265, label %263, !dbg !65

263:                                              ; preds = %262
  %264 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %186) #3, !dbg !65
  br label %__nv_sqrtf.exit78, !dbg !65

265:                                              ; preds = %262
  %266 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %186) #3, !dbg !65
  br label %__nv_sqrtf.exit78, !dbg !65

267:                                              ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %270, label %268, !dbg !65

268:                                              ; preds = %267
  %269 = tail call float @llvm.nvvm.sqrt.rn.f(float %186) #3, !dbg !65
  br label %__nv_sqrtf.exit78, !dbg !65

270:                                              ; preds = %267
  %271 = tail call float @llvm.nvvm.sqrt.approx.f(float %186) #3, !dbg !65
  br label %__nv_sqrtf.exit78, !dbg !65

__nv_sqrtf.exit78:                                ; preds = %263, %265, %268, %270
  %.0.i76 = phi float [ %264, %263 ], [ %266, %265 ], [ %269, %268 ], [ %271, %270 ], !dbg !65
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i79 = icmp eq i32 %272, 0, !dbg !65
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i82 = icmp eq i32 %273, 0, !dbg !65
  br i1 %.not.i79, label %279, label %274, !dbg !65

274:                                              ; preds = %__nv_sqrtf.exit78
  br i1 %.not1.i82, label %277, label %275, !dbg !65

275:                                              ; preds = %274
  %276 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %187) #3, !dbg !65
  br label %__nv_sqrtf.exit83, !dbg !65

277:                                              ; preds = %274
  %278 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %187) #3, !dbg !65
  br label %__nv_sqrtf.exit83, !dbg !65

279:                                              ; preds = %__nv_sqrtf.exit78
  br i1 %.not1.i82, label %282, label %280, !dbg !65

280:                                              ; preds = %279
  %281 = tail call float @llvm.nvvm.sqrt.rn.f(float %187) #3, !dbg !65
  br label %__nv_sqrtf.exit83, !dbg !65

282:                                              ; preds = %279
  %283 = tail call float @llvm.nvvm.sqrt.approx.f(float %187) #3, !dbg !65
  br label %__nv_sqrtf.exit83, !dbg !65

__nv_sqrtf.exit83:                                ; preds = %275, %277, %280, %282
  %.0.i81 = phi float [ %276, %275 ], [ %278, %277 ], [ %281, %280 ], [ %283, %282 ], !dbg !65
  %284 = shufflevector <2 x i1> %142, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !50
  %285 = shufflevector <2 x i1> %131, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !46
  %286 = shufflevector <2 x i1> %120, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !42
  %287 = shufflevector <2 x i1> %107, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !38
  %288 = shufflevector <2 x i1> %101, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !36
  %289 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !37
  %290 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !41
  %291 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !45
  %292 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !49
  %293 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !54
  %294 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !59
  %295 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !63
  %296 = insertelement <8 x i32> poison, i32 %62, i64 0, !dbg !29
  %297 = insertelement <8 x i32> %296, i32 %61, i64 1, !dbg !29
  %298 = insertelement <8 x i32> %297, i32 %60, i64 2, !dbg !29
  %299 = insertelement <8 x i32> %298, i32 %59, i64 3, !dbg !29
  %300 = insertelement <8 x i32> %299, i32 %58, i64 4, !dbg !29
  %301 = insertelement <8 x i32> %300, i32 %57, i64 5, !dbg !29
  %302 = insertelement <8 x i32> %301, i32 %56, i64 6, !dbg !29
  %303 = insertelement <8 x i32> %302, i32 %55, i64 7, !dbg !29
  %304 = bitcast <8 x i32> %303 to <8 x float>, !dbg !29
  %305 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !37
  %306 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !41
  %307 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !45
  %308 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !49
  %309 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !54
  %310 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !59
  %311 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !63
  %312 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !37
  %313 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !41
  %314 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !45
  %315 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !49
  %316 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !54
  %317 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !59
  %318 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !63
  %319 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !37
  %320 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !41
  %321 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !45
  %322 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !49
  %323 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !54
  %324 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !59
  %325 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !63
  %326 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !37
  %327 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !41
  %328 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !45
  %329 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !49
  %330 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !54
  %331 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !59
  %332 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !63
  %333 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !37
  %334 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !41
  %335 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !45
  %336 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !49
  %337 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !54
  %338 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !59
  %339 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !63
  %340 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !37
  %341 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !41
  %342 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !45
  %343 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !49
  %344 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !54
  %345 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !59
  %346 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !63
  %347 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !37
  %348 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !41
  %349 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !45
  %350 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !49
  %351 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !54
  %352 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !59
  %353 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !63
  %354 = insertelement <8 x i32> poison, i32 %100, i64 0, !dbg !35
  %355 = insertelement <8 x i32> %354, i32 %99, i64 1, !dbg !35
  %356 = insertelement <8 x i32> %355, i32 %98, i64 2, !dbg !35
  %357 = insertelement <8 x i32> %356, i32 %97, i64 3, !dbg !35
  %358 = insertelement <8 x i32> %357, i32 %96, i64 4, !dbg !35
  %359 = insertelement <8 x i32> %358, i32 %95, i64 5, !dbg !35
  %360 = insertelement <8 x i32> %359, i32 %94, i64 6, !dbg !35
  %361 = insertelement <8 x i32> %360, i32 %93, i64 7, !dbg !35
  %362 = bitcast <8 x i32> %361 to <8 x float>, !dbg !35
  %363 = insertelement <8 x i32> poison, i32 %90, i64 0, !dbg !33
  %364 = insertelement <8 x i32> %363, i32 %89, i64 1, !dbg !33
  %365 = insertelement <8 x i32> %364, i32 %88, i64 2, !dbg !33
  %366 = insertelement <8 x i32> %365, i32 %87, i64 3, !dbg !33
  %367 = insertelement <8 x i32> %366, i32 %86, i64 4, !dbg !33
  %368 = insertelement <8 x i32> %367, i32 %85, i64 5, !dbg !33
  %369 = insertelement <8 x i32> %368, i32 %84, i64 6, !dbg !33
  %370 = insertelement <8 x i32> %369, i32 %83, i64 7, !dbg !33
  %371 = bitcast <8 x i32> %370 to <8 x float>, !dbg !33
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !66
  %373 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i51) #3, !dbg !66
  %374 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i56) #3, !dbg !66
  %375 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i61) #3, !dbg !66
  %376 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i66) #3, !dbg !66
  %377 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i71) #3, !dbg !66
  %378 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i76) #3, !dbg !66
  %379 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i81) #3, !dbg !66
  %380 = shufflevector <2 x i1> %155, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !67
  %381 = insertelement <8 x i32> poison, i32 %294, i64 0, !dbg !67
  %382 = insertelement <8 x i32> %381, i32 %310, i64 1, !dbg !67
  %383 = insertelement <8 x i32> %382, i32 %317, i64 2, !dbg !67
  %384 = insertelement <8 x i32> %383, i32 %324, i64 3, !dbg !67
  %385 = insertelement <8 x i32> %384, i32 %331, i64 4, !dbg !67
  %386 = insertelement <8 x i32> %385, i32 %338, i64 5, !dbg !67
  %387 = insertelement <8 x i32> %386, i32 %345, i64 6, !dbg !67
  %388 = insertelement <8 x i32> %387, i32 %352, i64 7, !dbg !67
  %389 = insertelement <8 x i32> poison, i32 %295, i64 0, !dbg !67
  %390 = insertelement <8 x i32> %389, i32 %311, i64 1, !dbg !67
  %391 = insertelement <8 x i32> %390, i32 %318, i64 2, !dbg !67
  %392 = insertelement <8 x i32> %391, i32 %325, i64 3, !dbg !67
  %393 = insertelement <8 x i32> %392, i32 %332, i64 4, !dbg !67
  %394 = insertelement <8 x i32> %393, i32 %339, i64 5, !dbg !67
  %395 = insertelement <8 x i32> %394, i32 %346, i64 6, !dbg !67
  %396 = insertelement <8 x i32> %395, i32 %353, i64 7, !dbg !67
  %397 = select <8 x i1> %380, <8 x i32> %388, <8 x i32> %396, !dbg !67
  %398 = insertelement <8 x i32> poison, i32 %293, i64 0, !dbg !68
  %399 = insertelement <8 x i32> %398, i32 %309, i64 1, !dbg !68
  %400 = insertelement <8 x i32> %399, i32 %316, i64 2, !dbg !68
  %401 = insertelement <8 x i32> %400, i32 %323, i64 3, !dbg !68
  %402 = insertelement <8 x i32> %401, i32 %330, i64 4, !dbg !68
  %403 = insertelement <8 x i32> %402, i32 %337, i64 5, !dbg !68
  %404 = insertelement <8 x i32> %403, i32 %344, i64 6, !dbg !68
  %405 = insertelement <8 x i32> %404, i32 %351, i64 7, !dbg !68
  %406 = select <8 x i1> %284, <8 x i32> %405, <8 x i32> %397, !dbg !68
  %407 = insertelement <8 x i32> poison, i32 %292, i64 0, !dbg !69
  %408 = insertelement <8 x i32> %407, i32 %308, i64 1, !dbg !69
  %409 = insertelement <8 x i32> %408, i32 %315, i64 2, !dbg !69
  %410 = insertelement <8 x i32> %409, i32 %322, i64 3, !dbg !69
  %411 = insertelement <8 x i32> %410, i32 %329, i64 4, !dbg !69
  %412 = insertelement <8 x i32> %411, i32 %336, i64 5, !dbg !69
  %413 = insertelement <8 x i32> %412, i32 %343, i64 6, !dbg !69
  %414 = insertelement <8 x i32> %413, i32 %350, i64 7, !dbg !69
  %415 = select <8 x i1> %285, <8 x i32> %414, <8 x i32> %406, !dbg !69
  %416 = insertelement <8 x i32> poison, i32 %291, i64 0, !dbg !70
  %417 = insertelement <8 x i32> %416, i32 %307, i64 1, !dbg !70
  %418 = insertelement <8 x i32> %417, i32 %314, i64 2, !dbg !70
  %419 = insertelement <8 x i32> %418, i32 %321, i64 3, !dbg !70
  %420 = insertelement <8 x i32> %419, i32 %328, i64 4, !dbg !70
  %421 = insertelement <8 x i32> %420, i32 %335, i64 5, !dbg !70
  %422 = insertelement <8 x i32> %421, i32 %342, i64 6, !dbg !70
  %423 = insertelement <8 x i32> %422, i32 %349, i64 7, !dbg !70
  %424 = select <8 x i1> %286, <8 x i32> %423, <8 x i32> %415, !dbg !70
  %425 = insertelement <8 x i32> poison, i32 %290, i64 0, !dbg !71
  %426 = insertelement <8 x i32> %425, i32 %306, i64 1, !dbg !71
  %427 = insertelement <8 x i32> %426, i32 %313, i64 2, !dbg !71
  %428 = insertelement <8 x i32> %427, i32 %320, i64 3, !dbg !71
  %429 = insertelement <8 x i32> %428, i32 %327, i64 4, !dbg !71
  %430 = insertelement <8 x i32> %429, i32 %334, i64 5, !dbg !71
  %431 = insertelement <8 x i32> %430, i32 %341, i64 6, !dbg !71
  %432 = insertelement <8 x i32> %431, i32 %348, i64 7, !dbg !71
  %433 = select <8 x i1> %287, <8 x i32> %432, <8 x i32> %424, !dbg !71
  %434 = insertelement <8 x i32> poison, i32 %289, i64 0, !dbg !72
  %435 = insertelement <8 x i32> %434, i32 %305, i64 1, !dbg !72
  %436 = insertelement <8 x i32> %435, i32 %312, i64 2, !dbg !72
  %437 = insertelement <8 x i32> %436, i32 %319, i64 3, !dbg !72
  %438 = insertelement <8 x i32> %437, i32 %326, i64 4, !dbg !72
  %439 = insertelement <8 x i32> %438, i32 %333, i64 5, !dbg !72
  %440 = insertelement <8 x i32> %439, i32 %340, i64 6, !dbg !72
  %441 = insertelement <8 x i32> %440, i32 %347, i64 7, !dbg !72
  %442 = select <8 x i1> %288, <8 x i32> %441, <8 x i32> %433, !dbg !72
  %443 = bitcast <8 x i32> %442 to <8 x float>, !dbg !72
  %444 = fsub <8 x float> %443, %304, !dbg !73
  %445 = insertelement <8 x float> poison, float %379, i64 0, !dbg !74
  %446 = insertelement <8 x float> %445, float %378, i64 1, !dbg !74
  %447 = insertelement <8 x float> %446, float %377, i64 2, !dbg !74
  %448 = insertelement <8 x float> %447, float %376, i64 3, !dbg !74
  %449 = insertelement <8 x float> %448, float %375, i64 4, !dbg !74
  %450 = insertelement <8 x float> %449, float %374, i64 5, !dbg !74
  %451 = insertelement <8 x float> %450, float %373, i64 6, !dbg !74
  %452 = insertelement <8 x float> %451, float %372, i64 7, !dbg !74
  %453 = fmul <8 x float> %444, %452, !dbg !74
  %454 = fmul <8 x float> %453, %371, !dbg !75
  %455 = fadd <8 x float> %454, %362, !dbg !76
  %456 = fcmp olt <8 x float> %455, zeroinitializer, !dbg !77
  %457 = extractelement <8 x i1> %456, i64 7, !dbg !81
  %458 = extractelement <8 x i1> %456, i64 6, !dbg !81
  %459 = extractelement <8 x i1> %456, i64 5, !dbg !81
  %460 = extractelement <8 x i1> %456, i64 4, !dbg !81
  %461 = extractelement <8 x i1> %456, i64 3, !dbg !81
  %462 = extractelement <8 x i1> %456, i64 2, !dbg !81
  %463 = extractelement <8 x i1> %456, i64 1, !dbg !81
  %464 = extractelement <8 x i1> %456, i64 0, !dbg !81
  %465 = sext i32 %20 to i64, !dbg !82
  %466 = getelementptr float, ptr addrspace(1) %11, i64 %465, !dbg !82
  %467 = sext i32 %21 to i64, !dbg !82
  %468 = getelementptr float, ptr addrspace(1) %11, i64 %467, !dbg !82
  %469 = extractelement <8 x i32> %442, i64 4, !dbg !83
  %470 = extractelement <8 x i32> %442, i64 5, !dbg !83
  %471 = extractelement <8 x i32> %442, i64 6, !dbg !83
  %472 = extractelement <8 x i32> %442, i64 7, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %472, i32 %471, i32 %470, i32 %469, ptr addrspace(1) %466, i1 true) #3, !dbg !83
  %473 = extractelement <8 x i32> %442, i64 0, !dbg !83
  %474 = extractelement <8 x i32> %442, i64 1, !dbg !83
  %475 = extractelement <8 x i32> %442, i64 2, !dbg !83
  %476 = extractelement <8 x i32> %442, i64 3, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %476, i32 %475, i32 %474, i32 %473, ptr addrspace(1) %468, i1 true) #3, !dbg !83
  %477 = getelementptr float, ptr addrspace(1) %12, i64 %465, !dbg !84
  %478 = getelementptr float, ptr addrspace(1) %12, i64 %467, !dbg !84
  %bc = bitcast <8 x float> %455 to <8 x i32>, !dbg !85
  %479 = extractelement <8 x i32> %bc, i64 7, !dbg !85
  %480 = select i1 %457, i32 0, i32 %479, !dbg !81
  %bc84 = bitcast <8 x float> %455 to <8 x i32>, !dbg !85
  %481 = extractelement <8 x i32> %bc84, i64 6, !dbg !85
  %482 = select i1 %458, i32 0, i32 %481, !dbg !81
  %bc85 = bitcast <8 x float> %455 to <8 x i32>, !dbg !85
  %483 = extractelement <8 x i32> %bc85, i64 5, !dbg !85
  %484 = select i1 %459, i32 0, i32 %483, !dbg !81
  %bc86 = bitcast <8 x float> %455 to <8 x i32>, !dbg !85
  %485 = extractelement <8 x i32> %bc86, i64 4, !dbg !85
  %486 = select i1 %460, i32 0, i32 %485, !dbg !81
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %480, i32 %482, i32 %484, i32 %486, ptr addrspace(1) %477, i1 true) #3, !dbg !85
  %bc87 = bitcast <8 x float> %455 to <8 x i32>, !dbg !85
  %487 = extractelement <8 x i32> %bc87, i64 3, !dbg !85
  %488 = select i1 %461, i32 0, i32 %487, !dbg !81
  %bc88 = bitcast <8 x float> %455 to <8 x i32>, !dbg !85
  %489 = extractelement <8 x i32> %bc88, i64 2, !dbg !85
  %490 = select i1 %462, i32 0, i32 %489, !dbg !81
  %bc89 = bitcast <8 x float> %455 to <8 x i32>, !dbg !85
  %491 = extractelement <8 x i32> %bc89, i64 1, !dbg !85
  %492 = select i1 %463, i32 0, i32 %491, !dbg !81
  %bc90 = bitcast <8 x float> %455 to <8 x i32>, !dbg !85
  %493 = extractelement <8 x i32> %bc90, i64 0, !dbg !85
  %494 = select i1 %464, i32 0, i32 %493, !dbg !81
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %488, i32 %490, i32 %492, i32 %494, ptr addrspace(1) %478, i1 true) #3, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdzfiascqoqrmdrnoy3px3lxwfevpqj4qwiun3ywt2msafyfabsb.py", directory: "inductor_cache/dz")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 37, column: 35, scope: !7)
!17 = !DILocation(line: 37, column: 52, scope: !7)
!18 = !DILocation(line: 37, column: 46, scope: !7)
!19 = !DILocation(line: 37, column: 30, scope: !7)
!20 = !DILocation(line: 42, column: 60, scope: !7)
!21 = !DILocation(line: 42, column: 41, scope: !7)
!22 = !DILocation(line: 42, column: 36, scope: !7)
!23 = !DILocation(line: 47, column: 36, scope: !7)
!24 = !DILocation(line: 52, column: 36, scope: !7)
!25 = !DILocation(line: 24, column: 21, scope: !7)
!26 = !DILocation(line: 24, column: 28, scope: !7)
!27 = !DILocation(line: 63, column: 20, scope: !7)
!28 = !DILocation(line: 28, column: 31, scope: !7)
!29 = !DILocation(line: 28, column: 36, scope: !7)
!30 = !DILocation(line: 29, column: 31, scope: !7)
!31 = !DILocation(line: 29, column: 36, scope: !7)
!32 = !DILocation(line: 30, column: 31, scope: !7)
!33 = !DILocation(line: 30, column: 36, scope: !7)
!34 = !DILocation(line: 31, column: 32, scope: !7)
!35 = !DILocation(line: 31, column: 37, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 57, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 55, scope: !7)
!40 = !DILocation(line: 42, column: 31, scope: !7)
!41 = !DILocation(line: 42, column: 65, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 55, scope: !7)
!44 = !DILocation(line: 47, column: 31, scope: !7)
!45 = !DILocation(line: 47, column: 65, scope: !7)
!46 = !DILocation(line: 51, column: 20, scope: !7)
!47 = !DILocation(line: 52, column: 56, scope: !7)
!48 = !DILocation(line: 52, column: 31, scope: !7)
!49 = !DILocation(line: 52, column: 66, scope: !7)
!50 = !DILocation(line: 56, column: 20, scope: !7)
!51 = !DILocation(line: 57, column: 36, scope: !7)
!52 = !DILocation(line: 57, column: 56, scope: !7)
!53 = !DILocation(line: 57, column: 31, scope: !7)
!54 = !DILocation(line: 57, column: 66, scope: !7)
!55 = !DILocation(line: 61, column: 20, scope: !7)
!56 = !DILocation(line: 62, column: 36, scope: !7)
!57 = !DILocation(line: 62, column: 56, scope: !7)
!58 = !DILocation(line: 62, column: 31, scope: !7)
!59 = !DILocation(line: 62, column: 66, scope: !7)
!60 = !DILocation(line: 66, column: 36, scope: !7)
!61 = !DILocation(line: 66, column: 56, scope: !7)
!62 = !DILocation(line: 66, column: 31, scope: !7)
!63 = !DILocation(line: 66, column: 66, scope: !7)
!64 = !DILocation(line: 75, column: 20, scope: !7)
!65 = !DILocation(line: 76, column: 27, scope: !7)
!66 = !DILocation(line: 78, column: 20, scope: !7)
!67 = !DILocation(line: 67, column: 35, scope: !7)
!68 = !DILocation(line: 68, column: 35, scope: !7)
!69 = !DILocation(line: 69, column: 35, scope: !7)
!70 = !DILocation(line: 70, column: 35, scope: !7)
!71 = !DILocation(line: 71, column: 34, scope: !7)
!72 = !DILocation(line: 72, column: 33, scope: !7)
!73 = !DILocation(line: 73, column: 20, scope: !7)
!74 = !DILocation(line: 81, column: 20, scope: !7)
!75 = !DILocation(line: 82, column: 20, scope: !7)
!76 = !DILocation(line: 83, column: 20, scope: !7)
!77 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !80)
!78 = distinct !DILexicalBlockFile(scope: !7, file: !79, discriminator: 0)
!79 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!80 = !DILocation(line: 85, column: 42, scope: !7)
!81 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !80)
!82 = !DILocation(line: 86, column: 25, scope: !7)
!83 = !DILocation(line: 86, column: 37, scope: !7)
!84 = !DILocation(line: 87, column: 25, scope: !7)
!85 = !DILocation(line: 87, column: 37, scope: !7)
!86 = !DILocation(line: 87, column: 4, scope: !7)
