; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_leaky_relu_leaky_relu_backward_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 3, !dbg !12
  %10 = and i32 %9, 1016, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %12, 512, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = or disjoint i32 %7, %12, !dbg !13
  %17 = or disjoint i32 %7, %13, !dbg !13
  %18 = sext i32 %14 to i64, !dbg !14
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !14
  %20 = sext i32 %15 to i64, !dbg !14
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !14
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #2, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !15
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !15
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #2, !dbg !15
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !15
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !15
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !15
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !15
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !16
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !16
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #2, !dbg !17
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !17
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !17
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !17
  %39 = bitcast i32 %35 to float, !dbg !17
  %40 = bitcast i32 %36 to float, !dbg !17
  %41 = bitcast i32 %37 to float, !dbg !17
  %42 = bitcast i32 %38 to float, !dbg !17
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #2, !dbg !17
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !17
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !17
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !17
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !17
  %48 = bitcast i32 %44 to float, !dbg !17
  %49 = bitcast i32 %45 to float, !dbg !17
  %50 = bitcast i32 %46 to float, !dbg !17
  %51 = bitcast i32 %47 to float, !dbg !17
  %52 = sext i32 %16 to i64, !dbg !18
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !18
  %54 = sext i32 %17 to i64, !dbg !18
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !18
  %56 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !19
  %57 = getelementptr inbounds i8, ptr addrspace(3) %56, i32 16, !dbg !19
  %58 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !19
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !19
  %60 = getelementptr inbounds i8, ptr addrspace(3) %58, i32 4, !dbg !19
  %61 = getelementptr inbounds i8, ptr addrspace(3) %58, i32 8, !dbg !19
  %62 = getelementptr inbounds i8, ptr addrspace(3) %58, i32 12, !dbg !19
  %63 = getelementptr i1, ptr addrspace(1) %3, i64 %18, !dbg !20
  %64 = insertelement <4 x i32> poison, i32 %23, i64 0, !dbg !15
  %65 = insertelement <4 x i32> %64, i32 %24, i64 1, !dbg !15
  %66 = insertelement <4 x i32> %65, i32 %25, i64 2, !dbg !15
  %67 = insertelement <4 x i32> %66, i32 %26, i64 3, !dbg !15
  %68 = bitcast <4 x i32> %67 to <4 x float>, !dbg !15
  %69 = fcmp ogt <4 x float> %68, zeroinitializer, !dbg !21
  %70 = fmul <4 x float> %68, splat (float 0x3FC99999A0000000), !dbg !22
  %71 = select <4 x i1> %69, <4 x float> %68, <4 x float> %70, !dbg !23
  %72 = extractelement <4 x float> %71, i64 0, !dbg !24
  %73 = fadd float %72, %39, !dbg !24
  %74 = extractelement <4 x float> %71, i64 1, !dbg !24
  %75 = fadd float %74, %40, !dbg !24
  %76 = extractelement <4 x float> %71, i64 2, !dbg !24
  %77 = fadd float %76, %41, !dbg !24
  %78 = extractelement <4 x float> %71, i64 3, !dbg !24
  %79 = fadd float %78, %42, !dbg !24
  %80 = fcmp ogt <4 x float> %71, zeroinitializer, !dbg !25
  %81 = bitcast float %73 to i32, !dbg !19
  %82 = bitcast float %75 to i32, !dbg !19
  %83 = bitcast float %77 to i32, !dbg !19
  %84 = bitcast float %79 to i32, !dbg !19
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %56, i32 %81, i32 %82, i32 %83, i32 %84, i1 true) #2, !dbg !19
  %85 = insertelement <4 x i32> poison, i32 %28, i64 0, !dbg !15
  %86 = insertelement <4 x i32> %85, i32 %29, i64 1, !dbg !15
  %87 = insertelement <4 x i32> %86, i32 %30, i64 2, !dbg !15
  %88 = insertelement <4 x i32> %87, i32 %31, i64 3, !dbg !15
  %89 = bitcast <4 x i32> %88 to <4 x float>, !dbg !15
  %90 = fcmp ogt <4 x float> %89, zeroinitializer, !dbg !21
  %91 = fmul <4 x float> %89, splat (float 0x3FC99999A0000000), !dbg !22
  %92 = select <4 x i1> %90, <4 x float> %89, <4 x float> %91, !dbg !23
  %93 = extractelement <4 x float> %92, i64 0, !dbg !24
  %94 = fadd float %93, %48, !dbg !24
  %95 = extractelement <4 x float> %92, i64 1, !dbg !24
  %96 = fadd float %95, %49, !dbg !24
  %97 = extractelement <4 x float> %92, i64 2, !dbg !24
  %98 = fadd float %97, %50, !dbg !24
  %99 = extractelement <4 x float> %92, i64 3, !dbg !24
  %100 = fadd float %99, %51, !dbg !24
  %101 = fcmp ogt <4 x float> %92, zeroinitializer, !dbg !25
  %102 = bitcast float %94 to i32, !dbg !19
  %103 = bitcast float %96 to i32, !dbg !19
  %104 = bitcast float %98 to i32, !dbg !19
  %105 = bitcast float %100 to i32, !dbg !19
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %57, i32 %102, i32 %103, i32 %104, i32 %105, i1 true) #2, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %106 = load <4 x i32>, ptr addrspace(3) %59, align 16, !dbg !19
  %.extract = load i32, ptr addrspace(3) %58, align 16, !dbg !19
  %.extract8 = load i32, ptr addrspace(3) %60, align 4, !dbg !19
  %.extract9 = load i32, ptr addrspace(3) %61, align 8, !dbg !19
  %.extract10 = load i32, ptr addrspace(3) %62, align 4, !dbg !19
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %53, i1 true) #2, !dbg !19
  %.extract11 = extractelement <4 x i32> %106, i64 0, !dbg !19
  %.extract12 = extractelement <4 x i32> %106, i64 1, !dbg !19
  %.extract13 = extractelement <4 x i32> %106, i64 2, !dbg !19
  %.extract14 = extractelement <4 x i32> %106, i64 3, !dbg !19
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %55, i1 true) #2, !dbg !19
  %107 = zext <4 x i1> %80 to <4 x i8>, !dbg !26
  %108 = bitcast <4 x i8> %107 to i32, !dbg !26
  %109 = zext <4 x i1> %101 to <4 x i8>, !dbg !26
  %110 = bitcast <4 x i8> %109 to i32, !dbg !26
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %108, i32 %110, ptr addrspace(1) %63, i1 true) #2, !dbg !26
  ret void, !dbg !27
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7x777d67bjjbivcavunxmuvey3khyuh52uejmub4rk5wscivqs5.py", directory: "inductor_cache/7x")
!4 = !{ptr @triton_poi_fused_add_leaky_relu_leaky_relu_backward_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_leaky_relu_leaky_relu_backward_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_leaky_relu_leaky_relu_backward_36", linkageName: "triton_poi_fused_add_leaky_relu_leaky_relu_backward_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 30, scope: !7)
!15 = !DILocation(line: 25, column: 35, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 34, column: 25, scope: !7)
!19 = !DILocation(line: 34, column: 36, scope: !7)
!20 = !DILocation(line: 35, column: 25, scope: !7)
!21 = !DILocation(line: 28, column: 18, scope: !7)
!22 = !DILocation(line: 30, column: 18, scope: !7)
!23 = !DILocation(line: 31, column: 32, scope: !7)
!24 = !DILocation(line: 32, column: 18, scope: !7)
!25 = !DILocation(line: 33, column: 18, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 35, column: 4, scope: !7)
