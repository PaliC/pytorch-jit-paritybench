; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_add_mul_pow_rsqrt_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %.fr = freeze i32 %7, !dbg !11
  %8 = icmp slt i32 %.fr, 384, !dbg !12
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %10 = and i32 %9, 31, !dbg !13
  %11 = lshr i32 %9, 5, !dbg !13
  %12 = and i32 %9, 255, !dbg !13
  %13 = or disjoint i32 %12, 256, !dbg !13
  %14 = or disjoint i32 %12, 512, !dbg !13
  %15 = or disjoint i32 %12, 768, !dbg !13
  %16 = shl i32 %9, 2, !dbg !13
  %17 = and i32 %16, 1020, !dbg !13
  %18 = srem i32 %.fr, 96, !dbg !14
  %19 = icmp samesign ult i32 %15, 864, !dbg !15
  %20 = icmp samesign ult i32 %17, 864, !dbg !15
  %.lhs.trunc = trunc i32 %9 to i8, !dbg !16
  %21 = udiv i8 %.lhs.trunc, 9, !dbg !16
  %.zext = zext nneg i8 %21 to i32, !dbg !16
  %.lhs.trunc7 = trunc nuw nsw i32 %13 to i16, !dbg !16
  %22 = udiv i16 %.lhs.trunc7, 9, !dbg !16
  %.zext8 = zext nneg i16 %22 to i32, !dbg !16
  %.lhs.trunc9 = trunc nuw nsw i32 %14 to i16, !dbg !16
  %23 = udiv i16 %.lhs.trunc9, 9, !dbg !16
  %.zext10 = zext nneg i16 %23 to i32, !dbg !16
  %.lhs.trunc11 = trunc nuw nsw i32 %15 to i16, !dbg !16
  %24 = udiv i16 %.lhs.trunc11, 9, !dbg !16
  %.zext12 = zext nneg i16 %24 to i32, !dbg !16
  %25 = mul nsw i32 %18, 864, !dbg !17
  %26 = add nsw i32 %25, %17, !dbg !18
  %27 = sext i32 %26 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !19
  %29 = and i1 %19, %8, !dbg !20
  %30 = and i1 %20, %8, !dbg !20
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #5, !dbg !21
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !21
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !21
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !21
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !21
  %36 = shl nuw nsw i32 %17, 1, !dbg !21
  %37 = zext nneg i32 %36 to i64, !dbg !21
  %38 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %37, !dbg !21
  %39 = insertelement <1 x i32> poison, i32 %32, i64 0, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %39, i1 true) #5, !dbg !21
  %40 = or disjoint i32 %36, 2, !dbg !21
  %41 = zext nneg i32 %40 to i64, !dbg !21
  %42 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %41, !dbg !21
  %43 = insertelement <1 x i32> poison, i32 %33, i64 0, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %43, i1 true) #5, !dbg !21
  %44 = or disjoint i32 %36, 4, !dbg !21
  %45 = zext nneg i32 %44 to i64, !dbg !21
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %45, !dbg !21
  %47 = insertelement <1 x i32> poison, i32 %34, i64 0, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %47, i1 true) #5, !dbg !21
  %48 = or disjoint i32 %36, 6, !dbg !21
  %49 = zext nneg i32 %48 to i64, !dbg !21
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %49, !dbg !21
  %51 = insertelement <1 x i32> poison, i32 %35, i64 0, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %51, i1 true) #5, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %52 = shl nuw nsw i32 %12, 1, !dbg !21
  %53 = zext nneg i32 %52 to i64, !dbg !21
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %53, !dbg !21
  %55 = load float, ptr addrspace(3) %54, align 8, !dbg !21
  %56 = shl nuw nsw i32 %13, 1, !dbg !21
  %57 = zext nneg i32 %56 to i64, !dbg !21
  %58 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %57, !dbg !21
  %59 = load float, ptr addrspace(3) %58, align 8, !dbg !21
  %60 = shl nuw nsw i32 %14, 1, !dbg !21
  %61 = zext nneg i32 %60 to i64, !dbg !21
  %62 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %61, !dbg !21
  %63 = load float, ptr addrspace(3) %62, align 8, !dbg !21
  %64 = shl nuw nsw i32 %15, 1, !dbg !21
  %65 = zext nneg i32 %64 to i64, !dbg !21
  %66 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %65, !dbg !21
  %67 = load float, ptr addrspace(3) %66, align 8, !dbg !21
  %68 = sub nsw i32 %.fr, %18, !dbg !11
  %69 = add i32 %68, %.zext, !dbg !22
  %70 = add i32 %68, %.zext8, !dbg !22
  %71 = add i32 %68, %.zext10, !dbg !22
  %72 = add i32 %68, %.zext12, !dbg !22
  %73 = sext i32 %69 to i64, !dbg !23
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %73, !dbg !23
  %75 = sext i32 %70 to i64, !dbg !23
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !23
  %77 = sext i32 %71 to i64, !dbg !23
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !23
  %79 = sext i32 %72 to i64, !dbg !23
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !23
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %8, i32 0, i1 %8) #5, !dbg !24
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %8, i32 0, i1 %8) #5, !dbg !24
  %83 = bitcast i32 %82 to float, !dbg !24
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %8, i32 0, i1 %8) #5, !dbg !24
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %29, i32 0, i1 %29) #5, !dbg !24
  %86 = bitcast i32 %85 to float, !dbg !24
  %87 = fadd float %83, 1.000000e+00, !dbg !25
  %88 = fadd float %86, 1.000000e+00, !dbg !25
  %89 = fmul float %59, %87, !dbg !26
  %90 = fmul float %67, %88, !dbg !26
  %91 = fmul float %89, %89, !dbg !27
  %92 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !24
  %93 = insertelement <2 x i32> %92, i32 %84, i64 1, !dbg !24
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !24
  %95 = fadd <2 x float> %94, splat (float 1.000000e+00), !dbg !25
  %96 = insertelement <2 x float> poison, float %55, i64 0, !dbg !26
  %97 = insertelement <2 x float> %96, float %63, i64 1, !dbg !26
  %98 = fmul <2 x float> %97, %95, !dbg !26
  %99 = fmul <2 x float> %98, %98, !dbg !27
  %100 = fmul float %90, %90, !dbg !27
  %101 = select i1 %29, float %100, float 0.000000e+00, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %102 = extractelement <2 x float> %99, i64 0, !dbg !33
  %103 = fadd float %102, %91, !dbg !33
  %104 = extractelement <2 x float> %99, i64 1, !dbg !33
  %105 = fadd float %103, %104, !dbg !33
  %106 = select i1 %8, float %105, float 0.000000e+00, !dbg !33
  %107 = fadd float %106, %101, !dbg !33
  %108 = bitcast float %107 to i32, !dbg !29
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 16, i32 31), !dbg !29
  %110 = bitcast i32 %109 to float, !dbg !29
  %111 = fadd float %107, %110, !dbg !33
  %112 = bitcast float %111 to i32, !dbg !29
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 8, i32 31), !dbg !29
  %114 = bitcast i32 %113 to float, !dbg !29
  %115 = fadd float %111, %114, !dbg !33
  %116 = bitcast float %115 to i32, !dbg !29
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 4, i32 31), !dbg !29
  %118 = bitcast i32 %117 to float, !dbg !29
  %119 = fadd float %115, %118, !dbg !33
  %120 = bitcast float %119 to i32, !dbg !29
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 2, i32 31), !dbg !29
  %122 = bitcast i32 %121 to float, !dbg !29
  %123 = fadd float %119, %122, !dbg !33
  %124 = bitcast float %123 to i32, !dbg !29
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 1, i32 31), !dbg !29
  %126 = bitcast i32 %125 to float, !dbg !29
  %127 = fadd float %123, %126, !dbg !33
  %128 = icmp eq i32 %10, 0, !dbg !29
  %129 = and i32 %11, 7, !dbg !29
  %130 = zext nneg i32 %129 to i64, !dbg !29
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i64 %130, !dbg !29
  %132 = bitcast float %127 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 %128) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %133 = icmp slt i32 %9, 8, !dbg !29
  %134 = sext i32 %9 to i64, !dbg !29
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i64 %134, !dbg !29
  %136 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %135, i1 %133) #5, !dbg !29
  %137 = bitcast i32 %136 to float, !dbg !29
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 4, i32 31), !dbg !29
  %139 = bitcast i32 %138 to float, !dbg !29
  %140 = fadd float %137, %139, !dbg !33
  %141 = bitcast float %140 to i32, !dbg !29
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 2, i32 31), !dbg !29
  %143 = bitcast i32 %142 to float, !dbg !29
  %144 = fadd float %140, %143, !dbg !33
  %145 = bitcast float %144 to i32, !dbg !29
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 1, i32 31), !dbg !29
  %147 = bitcast i32 %146 to float, !dbg !29
  %148 = fadd float %144, %147, !dbg !33
  %149 = and i32 %9, 7, !dbg !29
  %150 = icmp eq i32 %149, 0, !dbg !29
  %151 = and i1 %133, %150, !dbg !29
  %152 = bitcast float %148 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %152, i1 %151) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %153 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %154 = fadd float %153, 0x3E45798EE0000000, !dbg !35
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %155, 0, !dbg !36
  br i1 %.not.i, label %158, label %156, !dbg !36

156:                                              ; preds = %6
  %157 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %154), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

158:                                              ; preds = %6
  %159 = tail call float @llvm.nvvm.rsqrt.approx.f(float %154), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %156, %158
  %.0.i = phi float [ %157, %156 ], [ %159, %158 ], !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %160 = sext i32 %.fr to i64, !dbg !38
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !38
  %162 = icmp eq i32 %12, 0, !dbg !39
  %163 = bitcast float %.0.i to i32, !dbg !39
  %164 = and i1 %162, %8, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %163, ptr addrspace(1) %161, i1 %164) #5, !dbg !39
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #5, !dbg !40
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !40
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !40
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !40
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !40
  %170 = insertelement <1 x i32> poison, i32 %166, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %170, i1 true) #5, !dbg !40
  %171 = insertelement <1 x i32> poison, i32 %167, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %171, i1 true) #5, !dbg !40
  %172 = insertelement <1 x i32> poison, i32 %168, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %172, i1 true) #5, !dbg !40
  %173 = insertelement <1 x i32> poison, i32 %169, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %173, i1 true) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %174 = load float, ptr addrspace(3) %54, align 8, !dbg !40
  %175 = load float, ptr addrspace(3) %58, align 8, !dbg !40
  %176 = load float, ptr addrspace(3) %62, align 8, !dbg !40
  %177 = load float, ptr addrspace(3) %66, align 8, !dbg !40
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %8, i32 0, i1 %8) #5, !dbg !41
  %179 = bitcast i32 %178 to float, !dbg !41
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %8, i32 0, i1 %8) #5, !dbg !41
  %181 = bitcast i32 %180 to float, !dbg !41
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %8, i32 0, i1 %8) #5, !dbg !41
  %183 = bitcast i32 %182 to float, !dbg !41
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %29, i32 0, i1 %29) #5, !dbg !41
  %185 = bitcast i32 %184 to float, !dbg !41
  %186 = fadd float %179, 1.000000e+00, !dbg !42
  %187 = fadd float %181, 1.000000e+00, !dbg !42
  %188 = fadd float %183, 1.000000e+00, !dbg !42
  %189 = fadd float %185, 1.000000e+00, !dbg !42
  %190 = fmul float %174, %186, !dbg !43
  %191 = fmul float %175, %187, !dbg !43
  %192 = fmul float %176, %188, !dbg !43
  %193 = fmul float %177, %189, !dbg !43
  %194 = fmul float %.0.i, %190, !dbg !44
  %195 = fmul float %.0.i, %191, !dbg !44
  %196 = fmul float %.0.i, %192, !dbg !44
  %197 = fmul float %.0.i, %193, !dbg !44
  %198 = mul i32 %.fr, 864, !dbg !45
  %199 = add i32 %198, %17, !dbg !46
  %200 = sext i32 %199 to i64, !dbg !47
  %201 = getelementptr float, ptr addrspace(1) %3, i64 %200, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %202 = zext nneg i32 %12 to i64, !dbg !48
  %203 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %202, !dbg !48
  %204 = bitcast float %194 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 true) #5, !dbg !48
  %205 = zext nneg i32 %13 to i64, !dbg !48
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %205, !dbg !48
  %207 = bitcast float %195 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %207, i1 true) #5, !dbg !48
  %208 = zext nneg i32 %14 to i64, !dbg !48
  %209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %208, !dbg !48
  %210 = bitcast float %196 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #5, !dbg !48
  %211 = zext nneg i32 %15 to i64, !dbg !48
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %211, !dbg !48
  %213 = bitcast float %197 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %213, i1 true) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %214 = zext nneg i32 %17 to i64, !dbg !48
  %215 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %214, !dbg !48
  %.extract = load i32, ptr addrspace(3) %215, align 16, !dbg !48
  %216 = getelementptr inbounds i8, ptr addrspace(3) %215, i64 4, !dbg !48
  %.extract4 = load i32, ptr addrspace(3) %216, align 4, !dbg !48
  %217 = getelementptr inbounds i8, ptr addrspace(3) %215, i64 8, !dbg !48
  %.extract5 = load i32, ptr addrspace(3) %217, align 8, !dbg !48
  %218 = getelementptr inbounds i8, ptr addrspace(3) %215, i64 12, !dbg !48
  %.extract6 = load i32, ptr addrspace(3) %218, align 4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %201, i1 %30) #5, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py", directory: "inductor_cache/hk")
!4 = !{ptr @triton_red_fused_add_mul_pow_rsqrt_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_mul_pow_rsqrt_sum_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_mul_pow_rsqrt_sum_0", linkageName: "triton_red_fused_add_mul_pow_rsqrt_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 36, column: 42, scope: !7)
!12 = !DILocation(line: 24, column: 21, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 32, column: 25, scope: !7)
!16 = !DILocation(line: 34, column: 23, scope: !7)
!17 = !DILocation(line: 35, column: 43, scope: !7)
!18 = !DILocation(line: 35, column: 39, scope: !7)
!19 = !DILocation(line: 35, column: 34, scope: !7)
!20 = !DILocation(line: 35, column: 56, scope: !7)
!21 = !DILocation(line: 35, column: 48, scope: !7)
!22 = !DILocation(line: 36, column: 39, scope: !7)
!23 = !DILocation(line: 36, column: 34, scope: !7)
!24 = !DILocation(line: 36, column: 47, scope: !7)
!25 = !DILocation(line: 38, column: 22, scope: !7)
!26 = !DILocation(line: 39, column: 22, scope: !7)
!27 = !DILocation(line: 40, column: 22, scope: !7)
!28 = !DILocation(line: 43, column: 46, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = !DILocation(line: 44, column: 25, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !32)
!34 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!35 = !DILocation(line: 46, column: 19, scope: !7)
!36 = !DILocation(line: 47, column: 28, scope: !7)
!37 = !DILocation(line: 48, column: 4, scope: !7)
!38 = !DILocation(line: 49, column: 28, scope: !7)
!39 = !DILocation(line: 49, column: 40, scope: !7)
!40 = !DILocation(line: 55, column: 49, scope: !7)
!41 = !DILocation(line: 56, column: 48, scope: !7)
!42 = !DILocation(line: 58, column: 24, scope: !7)
!43 = !DILocation(line: 59, column: 24, scope: !7)
!44 = !DILocation(line: 60, column: 24, scope: !7)
!45 = !DILocation(line: 61, column: 38, scope: !7)
!46 = !DILocation(line: 61, column: 34, scope: !7)
!47 = !DILocation(line: 61, column: 29, scope: !7)
!48 = !DILocation(line: 61, column: 50, scope: !7)
!49 = !DILocation(line: 50, column: 4, scope: !7)
