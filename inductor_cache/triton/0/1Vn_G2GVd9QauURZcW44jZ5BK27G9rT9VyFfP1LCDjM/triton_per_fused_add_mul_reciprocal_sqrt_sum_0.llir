; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_mul_reciprocal_sqrt_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %6 = icmp slt i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = lshr i32 %7, 5, !dbg !12
  %10 = and i32 %7, 63, !dbg !12
  %11 = shl i32 %5, 6, !dbg !13
  %12 = or disjoint i32 %11, %10, !dbg !14
  %13 = sext i32 %12 to i64, !dbg !15
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !15
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %14, i1 %6, i32 0, i1 %6) #5, !dbg !16
  %16 = bitcast i32 %15 to float, !dbg !16
  %17 = fmul float %16, %16, !dbg !17
  %18 = select i1 %6, float %17, float 0.000000e+00, !dbg !18
  %19 = bitcast float %18 to i32, !dbg !19
  %20 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %19, i32 16, i32 31), !dbg !19
  %21 = bitcast i32 %20 to float, !dbg !19
  %22 = fadd float %18, %21, !dbg !23
  %23 = bitcast float %22 to i32, !dbg !19
  %24 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %23, i32 8, i32 31), !dbg !19
  %25 = bitcast i32 %24 to float, !dbg !19
  %26 = fadd float %22, %25, !dbg !23
  %27 = bitcast float %26 to i32, !dbg !19
  %28 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %27, i32 4, i32 31), !dbg !19
  %29 = bitcast i32 %28 to float, !dbg !19
  %30 = fadd float %26, %29, !dbg !23
  %31 = bitcast float %30 to i32, !dbg !19
  %32 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %31, i32 2, i32 31), !dbg !19
  %33 = bitcast i32 %32 to float, !dbg !19
  %34 = fadd float %30, %33, !dbg !23
  %35 = bitcast float %34 to i32, !dbg !19
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 1, i32 31), !dbg !19
  %37 = bitcast i32 %36 to float, !dbg !19
  %38 = fadd float %34, %37, !dbg !23
  %39 = icmp eq i32 %8, 0, !dbg !19
  %40 = and i32 %9, 1, !dbg !19
  %41 = zext nneg i32 %40 to i64, !dbg !19
  %42 = getelementptr float, ptr addrspace(3) @global_smem, i64 %41, !dbg !19
  %43 = bitcast float %38 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %43, i1 %39) #5, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %44 = icmp slt i32 %7, 2, !dbg !19
  %45 = sext i32 %7 to i64, !dbg !19
  %46 = getelementptr float, ptr addrspace(3) @global_smem, i64 %45, !dbg !19
  %47 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %46, i1 %44) #5, !dbg !19
  %48 = bitcast i32 %47 to float, !dbg !19
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 1, i32 31), !dbg !19
  %50 = bitcast i32 %49 to float, !dbg !19
  %51 = fadd float %48, %50, !dbg !23
  %52 = and i32 %7, 1, !dbg !19
  %53 = icmp eq i32 %52, 0, !dbg !19
  %54 = and i1 %44, %53, !dbg !19
  %55 = bitcast float %51 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %55, i1 %54) #5, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %56 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !19
  %57 = fadd float %56, 0x3EE4F8B580000000, !dbg !25
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %57) #5, !dbg !26
  %59 = fmul float %58, 6.400000e+01, !dbg !27
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i = icmp eq i32 %60, 0, !dbg !28
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %.not1.i = icmp eq i32 %61, 0, !dbg !28
  br i1 %.not.i, label %67, label %62, !dbg !28

62:                                               ; preds = %4
  br i1 %.not1.i, label %65, label %63, !dbg !28

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

67:                                               ; preds = %4
  br i1 %.not1.i, label %70, label %68, !dbg !28

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %63, %65, %68, %70
  %.0.i = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !28
  %72 = fmul float %.0.i, %16, !dbg !29
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !30
  %74 = bitcast float %72 to i32, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %74, ptr addrspace(1) %73, i1 %6) #5, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpjy35ayfzsnyxobmoj2snijaqfwduoukb4zfdbktjhuizs5dvtk.py", directory: "inductor_cache/pj")
!4 = !{ptr @triton_per_fused_add_mul_reciprocal_sqrt_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mul_reciprocal_sqrt_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mul_reciprocal_sqrt_sum_0", linkageName: "triton_per_fused_add_mul_reciprocal_sqrt_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 32, column: 18, scope: !7)
!18 = !DILocation(line: 34, column: 33, scope: !7)
!19 = !DILocation(line: 267, column: 36, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!22 = !DILocation(line: 35, column: 24, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !22)
!24 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 39, column: 18, scope: !7)
!27 = !DILocation(line: 41, column: 19, scope: !7)
!28 = !DILocation(line: 42, column: 27, scope: !7)
!29 = !DILocation(line: 45, column: 19, scope: !7)
!30 = !DILocation(line: 46, column: 25, scope: !7)
!31 = !DILocation(line: 46, column: 45, scope: !7)
!32 = !DILocation(line: 46, column: 4, scope: !7)
