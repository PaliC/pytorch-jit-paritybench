; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_avg_pool2d_convolution_52(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 2, !dbg !12
  %12 = and i32 %11, 63, !dbg !12
  %13 = shl i32 %10, 2, !dbg !12
  %14 = and i32 %13, 12, !dbg !12
  %15 = and i32 %13, 252, !dbg !12
  %16 = or disjoint i32 %9, %12, !dbg !13
  %17 = or disjoint i32 %9, %15, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %19 = shl i32 %18, 4, !dbg !15
  %.lobit12 = lshr i32 %10, 6, !dbg !16
  %20 = and i32 %.lobit12, 3, !dbg !16
  %21 = or disjoint i32 %19, %20, !dbg !17
  %22 = or disjoint i32 %21, 4, !dbg !17
  %23 = or disjoint i32 %21, 8, !dbg !17
  %24 = or disjoint i32 %21, 12, !dbg !17
  %25 = icmp slt i32 %21, 64, !dbg !18
  %26 = icmp slt i32 %22, 64, !dbg !18
  %27 = icmp slt i32 %23, 64, !dbg !18
  %28 = icmp slt i32 %24, 64, !dbg !18
  %.frozen = freeze i32 %17, !dbg !19
  %29 = sdiv i32 %.frozen, 2048, !dbg !19
  %30 = mul i32 %29, 2048, !dbg !20
  %.decomposed = sub i32 %.frozen, %30, !dbg !20
  %31 = shl i32 %16, 6, !dbg !21
  %32 = or disjoint i32 %31, 4096, !dbg !21
  %33 = or disjoint i32 %31, 8192, !dbg !21
  %34 = or disjoint i32 %31, 12288, !dbg !21
  %35 = or disjoint i32 %19, %14, !dbg !17
  %36 = or disjoint i32 %35, 1, !dbg !17
  %37 = or disjoint i32 %35, 2, !dbg !17
  %38 = or disjoint i32 %35, 3, !dbg !17
  %39 = icmp slt i32 %35, 64, !dbg !18
  %40 = sdiv i32 %35, 8, !dbg !22
  %41 = insertelement <4 x i32> poison, i32 %38, i64 0, !dbg !23
  %42 = insertelement <4 x i32> %41, i32 %37, i64 1, !dbg !23
  %43 = insertelement <4 x i32> %42, i32 %35, i64 2, !dbg !23
  %44 = insertelement <4 x i32> %43, i32 %36, i64 3, !dbg !23
  %45 = srem <4 x i32> %44, splat (i32 8), !dbg !23
  %46 = shufflevector <4 x i32> %45, <4 x i32> poison, <8 x i32> <i32 0, i32 1, i32 1, i32 2, i32 0, i32 1, i32 3, i32 2>, !dbg !23
  %47 = add i32 %35, %31, !dbg !24
  %48 = add i32 %35, %32, !dbg !24
  %49 = add i32 %35, %33, !dbg !24
  %50 = add i32 %35, %34, !dbg !24
  %51 = sext i32 %47 to i64, !dbg !25
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !25
  %53 = sext i32 %48 to i64, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !25
  %55 = sext i32 %49 to i64, !dbg !25
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !25
  %57 = sext i32 %50 to i64, !dbg !25
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !25
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %39) #3, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !26
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %39) #3, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !26
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %39) #3, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !26
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %39) #3, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !26
  %79 = add i32 %35, -9, !dbg !27
  %80 = add i32 %35, -8, !dbg !27
  %81 = add i32 %35, -7, !dbg !27
  %82 = add i32 %35, -6, !dbg !27
  %83 = add i32 %79, %31, !dbg !28
  %84 = add i32 %31, %80, !dbg !28
  %85 = add i32 %31, %81, !dbg !28
  %86 = add i32 %31, %82, !dbg !28
  %87 = add i32 %79, %32, !dbg !28
  %88 = add i32 %80, %32, !dbg !28
  %89 = add i32 %81, %32, !dbg !28
  %90 = add i32 %82, %32, !dbg !28
  %91 = add i32 %79, %33, !dbg !28
  %92 = add i32 %80, %33, !dbg !28
  %93 = add i32 %81, %33, !dbg !28
  %94 = add i32 %82, %33, !dbg !28
  %95 = add i32 %79, %34, !dbg !28
  %96 = add i32 %80, %34, !dbg !28
  %97 = add i32 %81, %34, !dbg !28
  %98 = add i32 %82, %34, !dbg !28
  %99 = sext i32 %83 to i64, !dbg !29
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !29
  %101 = sext i32 %84 to i64, !dbg !29
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !29
  %103 = sext i32 %85 to i64, !dbg !29
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !29
  %105 = sext i32 %86 to i64, !dbg !29
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !29
  %107 = sext i32 %87 to i64, !dbg !29
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !29
  %109 = sext i32 %88 to i64, !dbg !29
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !29
  %111 = sext i32 %89 to i64, !dbg !29
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !29
  %113 = sext i32 %90 to i64, !dbg !29
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !29
  %115 = sext i32 %91 to i64, !dbg !29
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !29
  %117 = sext i32 %92 to i64, !dbg !29
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !29
  %119 = sext i32 %93 to i64, !dbg !29
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !29
  %121 = sext i32 %94 to i64, !dbg !29
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !29
  %123 = sext i32 %95 to i64, !dbg !29
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !29
  %125 = sext i32 %96 to i64, !dbg !29
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !29
  %127 = sext i32 %97 to i64, !dbg !29
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !29
  %129 = sext i32 %98 to i64, !dbg !29
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !29
  %131 = icmp ult i32 %80, 56, !dbg !30
  %132 = icmp sgt <8 x i32> %46, <i32 6, i32 6, i32 -1, i32 -1, i32 0, i32 0, i32 0, i32 0>, !dbg !31
  %133 = extractelement <8 x i1> %132, i64 7, !dbg !32
  %134 = and i1 %131, %133, !dbg !30
  %135 = extractelement <8 x i1> %132, i64 6, !dbg !32
  %136 = and i1 %135, %131, !dbg !30
  %137 = extractelement <8 x i1> %132, i64 5, !dbg !32
  %138 = and i1 %137, %131, !dbg !30
  %139 = extractelement <8 x i1> %132, i64 4, !dbg !32
  %140 = and i1 %139, %131, !dbg !30
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %134, i32 0, i1 %134) #3, !dbg !33
  %142 = bitcast i32 %141 to float, !dbg !33
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %136, i32 0, i1 %136) #3, !dbg !33
  %144 = bitcast i32 %143 to float, !dbg !33
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %138, i32 0, i1 %138) #3, !dbg !33
  %146 = bitcast i32 %145 to float, !dbg !33
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %140, i32 0, i1 %140) #3, !dbg !33
  %148 = bitcast i32 %147 to float, !dbg !33
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %134, i32 0, i1 %134) #3, !dbg !33
  %150 = bitcast i32 %149 to float, !dbg !33
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %136, i32 0, i1 %136) #3, !dbg !33
  %152 = bitcast i32 %151 to float, !dbg !33
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %138, i32 0, i1 %138) #3, !dbg !33
  %154 = bitcast i32 %153 to float, !dbg !33
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %140, i32 0, i1 %140) #3, !dbg !33
  %156 = bitcast i32 %155 to float, !dbg !33
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %134, i32 0, i1 %134) #3, !dbg !33
  %158 = bitcast i32 %157 to float, !dbg !33
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %136, i32 0, i1 %136) #3, !dbg !33
  %160 = bitcast i32 %159 to float, !dbg !33
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %138, i32 0, i1 %138) #3, !dbg !33
  %162 = bitcast i32 %161 to float, !dbg !33
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %140, i32 0, i1 %140) #3, !dbg !33
  %164 = bitcast i32 %163 to float, !dbg !33
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %134, i32 0, i1 %134) #3, !dbg !33
  %166 = bitcast i32 %165 to float, !dbg !33
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %136, i32 0, i1 %136) #3, !dbg !33
  %168 = bitcast i32 %167 to float, !dbg !33
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %138, i32 0, i1 %138) #3, !dbg !33
  %170 = bitcast i32 %169 to float, !dbg !33
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %140, i32 0, i1 %140) #3, !dbg !33
  %172 = bitcast i32 %171 to float, !dbg !33
  %173 = extractelement <8 x i1> %132, i64 3, !dbg !34
  %174 = and i1 %131, %173, !dbg !35
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %102, i1 %174, i32 0, i1 %174, i32 0, i1 %174, i32 0, i1 %174, i32 0, i1 %174) #3, !dbg !36
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !36
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !36
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !36
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !36
  %180 = bitcast i32 %176 to float, !dbg !36
  %181 = bitcast i32 %177 to float, !dbg !36
  %182 = bitcast i32 %178 to float, !dbg !36
  %183 = bitcast i32 %179 to float, !dbg !36
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %110, i1 %174, i32 0, i1 %174, i32 0, i1 %174, i32 0, i1 %174, i32 0, i1 %174) #3, !dbg !36
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !36
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !36
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !36
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !36
  %189 = bitcast i32 %185 to float, !dbg !36
  %190 = bitcast i32 %186 to float, !dbg !36
  %191 = bitcast i32 %187 to float, !dbg !36
  %192 = bitcast i32 %188 to float, !dbg !36
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %118, i1 %174, i32 0, i1 %174, i32 0, i1 %174, i32 0, i1 %174, i32 0, i1 %174) #3, !dbg !36
  %194 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !36
  %195 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !36
  %196 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !36
  %197 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !36
  %198 = bitcast i32 %194 to float, !dbg !36
  %199 = bitcast i32 %195 to float, !dbg !36
  %200 = bitcast i32 %196 to float, !dbg !36
  %201 = bitcast i32 %197 to float, !dbg !36
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %126, i1 %174, i32 0, i1 %174, i32 0, i1 %174, i32 0, i1 %174, i32 0, i1 %174) #3, !dbg !36
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !36
  %204 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !36
  %205 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !36
  %206 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !36
  %207 = bitcast i32 %203 to float, !dbg !36
  %208 = bitcast i32 %204 to float, !dbg !36
  %209 = bitcast i32 %205 to float, !dbg !36
  %210 = bitcast i32 %206 to float, !dbg !36
  %211 = fadd float %142, %180, !dbg !37
  %212 = fadd float %144, %181, !dbg !37
  %213 = fadd float %146, %182, !dbg !37
  %214 = fadd float %148, %183, !dbg !37
  %215 = fadd float %150, %189, !dbg !37
  %216 = fadd float %152, %190, !dbg !37
  %217 = fadd float %154, %191, !dbg !37
  %218 = fadd float %156, %192, !dbg !37
  %219 = fadd float %158, %198, !dbg !37
  %220 = fadd float %160, %199, !dbg !37
  %221 = fadd float %162, %200, !dbg !37
  %222 = fadd float %164, %201, !dbg !37
  %223 = fadd float %166, %207, !dbg !37
  %224 = fadd float %168, %208, !dbg !37
  %225 = fadd float %170, %209, !dbg !37
  %226 = fadd float %172, %210, !dbg !37
  %227 = extractelement <4 x i32> %45, i64 2, !dbg !38
  %228 = or disjoint i32 %227, 1, !dbg !39
  %229 = extractelement <4 x i32> %45, i64 1, !dbg !40
  %230 = or disjoint i32 %229, 1, !dbg !39
  %231 = icmp slt i32 %228, 8, !dbg !41
  %232 = icmp slt i32 %230, 8, !dbg !41
  %233 = and i1 %173, %231, !dbg !34
  %234 = extractelement <4 x i32> %45, i64 3, !dbg !38
  %235 = icmp ult i32 %234, 7, !dbg !34
  %236 = extractelement <8 x i1> %132, i64 2, !dbg !34
  %237 = and i1 %236, %232, !dbg !34
  %238 = extractelement <4 x i32> %45, i64 0, !dbg !40
  %239 = add nsw i32 %238, 1, !dbg !34
  %240 = icmp ult i32 %239, 8, !dbg !34
  %241 = add i32 %35, -5, !dbg !42
  %242 = add i32 %35, -4, !dbg !42
  %243 = add i32 %31, %241, !dbg !43
  %244 = add i32 %31, %242, !dbg !43
  %245 = add i32 %241, %32, !dbg !43
  %246 = add i32 %242, %32, !dbg !43
  %247 = add i32 %241, %33, !dbg !43
  %248 = add i32 %242, %33, !dbg !43
  %249 = add i32 %241, %34, !dbg !43
  %250 = add i32 %242, %34, !dbg !43
  %251 = sext i32 %243 to i64, !dbg !44
  %252 = getelementptr float, ptr addrspace(1) %0, i64 %251, !dbg !44
  %253 = sext i32 %244 to i64, !dbg !44
  %254 = getelementptr float, ptr addrspace(1) %0, i64 %253, !dbg !44
  %255 = sext i32 %245 to i64, !dbg !44
  %256 = getelementptr float, ptr addrspace(1) %0, i64 %255, !dbg !44
  %257 = sext i32 %246 to i64, !dbg !44
  %258 = getelementptr float, ptr addrspace(1) %0, i64 %257, !dbg !44
  %259 = sext i32 %247 to i64, !dbg !44
  %260 = getelementptr float, ptr addrspace(1) %0, i64 %259, !dbg !44
  %261 = sext i32 %248 to i64, !dbg !44
  %262 = getelementptr float, ptr addrspace(1) %0, i64 %261, !dbg !44
  %263 = sext i32 %249 to i64, !dbg !44
  %264 = getelementptr float, ptr addrspace(1) %0, i64 %263, !dbg !44
  %265 = sext i32 %250 to i64, !dbg !44
  %266 = getelementptr float, ptr addrspace(1) %0, i64 %265, !dbg !44
  %267 = and i1 %131, %233, !dbg !45
  %268 = and i1 %235, %131, !dbg !45
  %269 = and i1 %237, %131, !dbg !45
  %270 = and i1 %240, %131, !dbg !45
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %267, i32 0, i1 %267) #3, !dbg !46
  %272 = bitcast i32 %271 to float, !dbg !46
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %268, i32 0, i1 %268) #3, !dbg !46
  %274 = bitcast i32 %273 to float, !dbg !46
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %252, i1 %269, i32 0, i1 %269) #3, !dbg !46
  %276 = bitcast i32 %275 to float, !dbg !46
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %270, i32 0, i1 %270) #3, !dbg !46
  %278 = bitcast i32 %277 to float, !dbg !46
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %267, i32 0, i1 %267) #3, !dbg !46
  %280 = bitcast i32 %279 to float, !dbg !46
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %268, i32 0, i1 %268) #3, !dbg !46
  %282 = bitcast i32 %281 to float, !dbg !46
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %256, i1 %269, i32 0, i1 %269) #3, !dbg !46
  %284 = bitcast i32 %283 to float, !dbg !46
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %258, i1 %270, i32 0, i1 %270) #3, !dbg !46
  %286 = bitcast i32 %285 to float, !dbg !46
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %267, i32 0, i1 %267) #3, !dbg !46
  %288 = bitcast i32 %287 to float, !dbg !46
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %268, i32 0, i1 %268) #3, !dbg !46
  %290 = bitcast i32 %289 to float, !dbg !46
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %260, i1 %269, i32 0, i1 %269) #3, !dbg !46
  %292 = bitcast i32 %291 to float, !dbg !46
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %262, i1 %270, i32 0, i1 %270) #3, !dbg !46
  %294 = bitcast i32 %293 to float, !dbg !46
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %267, i32 0, i1 %267) #3, !dbg !46
  %296 = bitcast i32 %295 to float, !dbg !46
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %268, i32 0, i1 %268) #3, !dbg !46
  %298 = bitcast i32 %297 to float, !dbg !46
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %264, i1 %269, i32 0, i1 %269) #3, !dbg !46
  %300 = bitcast i32 %299 to float, !dbg !46
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %266, i1 %270, i32 0, i1 %270) #3, !dbg !46
  %302 = bitcast i32 %301 to float, !dbg !46
  %303 = fadd float %211, %272, !dbg !47
  %304 = fadd float %212, %274, !dbg !47
  %305 = fadd float %213, %276, !dbg !47
  %306 = fadd float %214, %278, !dbg !47
  %307 = fadd float %215, %280, !dbg !47
  %308 = fadd float %216, %282, !dbg !47
  %309 = fadd float %217, %284, !dbg !47
  %310 = fadd float %218, %286, !dbg !47
  %311 = fadd float %219, %288, !dbg !47
  %312 = fadd float %220, %290, !dbg !47
  %313 = fadd float %221, %292, !dbg !47
  %314 = fadd float %222, %294, !dbg !47
  %315 = fadd float %223, %296, !dbg !47
  %316 = fadd float %224, %298, !dbg !47
  %317 = fadd float %225, %300, !dbg !47
  %318 = fadd float %226, %302, !dbg !47
  %319 = add i32 %35, -1, !dbg !48
  %320 = add i32 %319, %31, !dbg !49
  %321 = add i32 %31, %36, !dbg !49
  %322 = add i32 %31, %37, !dbg !49
  %323 = add i32 %319, %32, !dbg !49
  %324 = add i32 %36, %32, !dbg !49
  %325 = add i32 %37, %32, !dbg !49
  %326 = add i32 %319, %33, !dbg !49
  %327 = add i32 %36, %33, !dbg !49
  %328 = add i32 %37, %33, !dbg !49
  %329 = add i32 %319, %34, !dbg !49
  %330 = add i32 %36, %34, !dbg !49
  %331 = add i32 %37, %34, !dbg !49
  %332 = sext i32 %320 to i64, !dbg !50
  %333 = getelementptr float, ptr addrspace(1) %0, i64 %332, !dbg !50
  %334 = sext i32 %321 to i64, !dbg !50
  %335 = getelementptr float, ptr addrspace(1) %0, i64 %334, !dbg !50
  %336 = sext i32 %322 to i64, !dbg !50
  %337 = getelementptr float, ptr addrspace(1) %0, i64 %336, !dbg !50
  %338 = sext i32 %323 to i64, !dbg !50
  %339 = getelementptr float, ptr addrspace(1) %0, i64 %338, !dbg !50
  %340 = sext i32 %324 to i64, !dbg !50
  %341 = getelementptr float, ptr addrspace(1) %0, i64 %340, !dbg !50
  %342 = sext i32 %325 to i64, !dbg !50
  %343 = getelementptr float, ptr addrspace(1) %0, i64 %342, !dbg !50
  %344 = sext i32 %326 to i64, !dbg !50
  %345 = getelementptr float, ptr addrspace(1) %0, i64 %344, !dbg !50
  %346 = sext i32 %327 to i64, !dbg !50
  %347 = getelementptr float, ptr addrspace(1) %0, i64 %346, !dbg !50
  %348 = sext i32 %328 to i64, !dbg !50
  %349 = getelementptr float, ptr addrspace(1) %0, i64 %348, !dbg !50
  %350 = sext i32 %329 to i64, !dbg !50
  %351 = getelementptr float, ptr addrspace(1) %0, i64 %350, !dbg !50
  %352 = sext i32 %330 to i64, !dbg !50
  %353 = getelementptr float, ptr addrspace(1) %0, i64 %352, !dbg !50
  %354 = sext i32 %331 to i64, !dbg !50
  %355 = getelementptr float, ptr addrspace(1) %0, i64 %354, !dbg !50
  %356 = add i32 %35, 7, !dbg !51
  %357 = icmp ult i32 %356, 71, !dbg !51
  %358 = and i1 %357, %133, !dbg !51
  %359 = and i1 %135, %357, !dbg !51
  %360 = and i1 %137, %357, !dbg !51
  %361 = and i1 %139, %357, !dbg !51
  %362 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %333, i1 %358, i32 0, i1 %358) #3, !dbg !52
  %363 = bitcast i32 %362 to float, !dbg !52
  %364 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %359, i32 0, i1 %359) #3, !dbg !52
  %365 = bitcast i32 %364 to float, !dbg !52
  %366 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %335, i1 %360, i32 0, i1 %360) #3, !dbg !52
  %367 = bitcast i32 %366 to float, !dbg !52
  %368 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %337, i1 %361, i32 0, i1 %361) #3, !dbg !52
  %369 = bitcast i32 %368 to float, !dbg !52
  %370 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %339, i1 %358, i32 0, i1 %358) #3, !dbg !52
  %371 = bitcast i32 %370 to float, !dbg !52
  %372 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %359, i32 0, i1 %359) #3, !dbg !52
  %373 = bitcast i32 %372 to float, !dbg !52
  %374 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %341, i1 %360, i32 0, i1 %360) #3, !dbg !52
  %375 = bitcast i32 %374 to float, !dbg !52
  %376 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %343, i1 %361, i32 0, i1 %361) #3, !dbg !52
  %377 = bitcast i32 %376 to float, !dbg !52
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %345, i1 %358, i32 0, i1 %358) #3, !dbg !52
  %379 = bitcast i32 %378 to float, !dbg !52
  %380 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %359, i32 0, i1 %359) #3, !dbg !52
  %381 = bitcast i32 %380 to float, !dbg !52
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %347, i1 %360, i32 0, i1 %360) #3, !dbg !52
  %383 = bitcast i32 %382 to float, !dbg !52
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %349, i1 %361, i32 0, i1 %361) #3, !dbg !52
  %385 = bitcast i32 %384 to float, !dbg !52
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %351, i1 %358, i32 0, i1 %358) #3, !dbg !52
  %387 = bitcast i32 %386 to float, !dbg !52
  %388 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %359, i32 0, i1 %359) #3, !dbg !52
  %389 = bitcast i32 %388 to float, !dbg !52
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %353, i1 %360, i32 0, i1 %360) #3, !dbg !52
  %391 = bitcast i32 %390 to float, !dbg !52
  %392 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %355, i1 %361, i32 0, i1 %361) #3, !dbg !52
  %393 = bitcast i32 %392 to float, !dbg !52
  %394 = fadd float %303, %363, !dbg !53
  %395 = fadd float %304, %365, !dbg !53
  %396 = fadd float %305, %367, !dbg !53
  %397 = fadd float %306, %369, !dbg !53
  %398 = fadd float %307, %371, !dbg !53
  %399 = fadd float %308, %373, !dbg !53
  %400 = fadd float %309, %375, !dbg !53
  %401 = fadd float %310, %377, !dbg !53
  %402 = fadd float %311, %379, !dbg !53
  %403 = fadd float %312, %381, !dbg !53
  %404 = fadd float %313, %383, !dbg !53
  %405 = fadd float %314, %385, !dbg !53
  %406 = fadd float %315, %387, !dbg !53
  %407 = fadd float %316, %389, !dbg !53
  %408 = fadd float %317, %391, !dbg !53
  %409 = fadd float %318, %393, !dbg !53
  %410 = and i1 %357, %173, !dbg !54
  %411 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %410, i32 0, i1 %410, i32 0, i1 %410, i32 0, i1 %410, i32 0, i1 %410) #3, !dbg !55
  %412 = extractvalue { i32, i32, i32, i32 } %411, 0, !dbg !55
  %413 = extractvalue { i32, i32, i32, i32 } %411, 1, !dbg !55
  %414 = extractvalue { i32, i32, i32, i32 } %411, 2, !dbg !55
  %415 = extractvalue { i32, i32, i32, i32 } %411, 3, !dbg !55
  %416 = bitcast i32 %412 to float, !dbg !55
  %417 = bitcast i32 %413 to float, !dbg !55
  %418 = bitcast i32 %414 to float, !dbg !55
  %419 = bitcast i32 %415 to float, !dbg !55
  %420 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %410, i32 0, i1 %410, i32 0, i1 %410, i32 0, i1 %410, i32 0, i1 %410) #3, !dbg !55
  %421 = extractvalue { i32, i32, i32, i32 } %420, 0, !dbg !55
  %422 = extractvalue { i32, i32, i32, i32 } %420, 1, !dbg !55
  %423 = extractvalue { i32, i32, i32, i32 } %420, 2, !dbg !55
  %424 = extractvalue { i32, i32, i32, i32 } %420, 3, !dbg !55
  %425 = bitcast i32 %421 to float, !dbg !55
  %426 = bitcast i32 %422 to float, !dbg !55
  %427 = bitcast i32 %423 to float, !dbg !55
  %428 = bitcast i32 %424 to float, !dbg !55
  %429 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %410, i32 0, i1 %410, i32 0, i1 %410, i32 0, i1 %410, i32 0, i1 %410) #3, !dbg !55
  %430 = extractvalue { i32, i32, i32, i32 } %429, 0, !dbg !55
  %431 = extractvalue { i32, i32, i32, i32 } %429, 1, !dbg !55
  %432 = extractvalue { i32, i32, i32, i32 } %429, 2, !dbg !55
  %433 = extractvalue { i32, i32, i32, i32 } %429, 3, !dbg !55
  %434 = bitcast i32 %430 to float, !dbg !55
  %435 = bitcast i32 %431 to float, !dbg !55
  %436 = bitcast i32 %432 to float, !dbg !55
  %437 = bitcast i32 %433 to float, !dbg !55
  %438 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %410, i32 0, i1 %410, i32 0, i1 %410, i32 0, i1 %410, i32 0, i1 %410) #3, !dbg !55
  %439 = extractvalue { i32, i32, i32, i32 } %438, 0, !dbg !55
  %440 = extractvalue { i32, i32, i32, i32 } %438, 1, !dbg !55
  %441 = extractvalue { i32, i32, i32, i32 } %438, 2, !dbg !55
  %442 = extractvalue { i32, i32, i32, i32 } %438, 3, !dbg !55
  %443 = bitcast i32 %439 to float, !dbg !55
  %444 = bitcast i32 %440 to float, !dbg !55
  %445 = bitcast i32 %441 to float, !dbg !55
  %446 = bitcast i32 %442 to float, !dbg !55
  %447 = fadd float %394, %416, !dbg !56
  %448 = fadd float %395, %417, !dbg !56
  %449 = fadd float %396, %418, !dbg !56
  %450 = fadd float %397, %419, !dbg !56
  %451 = fadd float %398, %425, !dbg !56
  %452 = fadd float %399, %426, !dbg !56
  %453 = fadd float %400, %427, !dbg !56
  %454 = fadd float %401, %428, !dbg !56
  %455 = fadd float %402, %434, !dbg !56
  %456 = fadd float %403, %435, !dbg !56
  %457 = fadd float %404, %436, !dbg !56
  %458 = fadd float %405, %437, !dbg !56
  %459 = fadd float %406, %443, !dbg !56
  %460 = fadd float %407, %444, !dbg !56
  %461 = fadd float %408, %445, !dbg !56
  %462 = fadd float %409, %446, !dbg !56
  %463 = add i32 %35, 4, !dbg !57
  %464 = add i32 %31, %38, !dbg !58
  %465 = add i32 %31, %463, !dbg !58
  %466 = add i32 %38, %32, !dbg !58
  %467 = add i32 %463, %32, !dbg !58
  %468 = add i32 %38, %33, !dbg !58
  %469 = add i32 %463, %33, !dbg !58
  %470 = add i32 %38, %34, !dbg !58
  %471 = add i32 %463, %34, !dbg !58
  %472 = sext i32 %464 to i64, !dbg !59
  %473 = getelementptr float, ptr addrspace(1) %0, i64 %472, !dbg !59
  %474 = sext i32 %465 to i64, !dbg !59
  %475 = getelementptr float, ptr addrspace(1) %0, i64 %474, !dbg !59
  %476 = sext i32 %466 to i64, !dbg !59
  %477 = getelementptr float, ptr addrspace(1) %0, i64 %476, !dbg !59
  %478 = sext i32 %467 to i64, !dbg !59
  %479 = getelementptr float, ptr addrspace(1) %0, i64 %478, !dbg !59
  %480 = sext i32 %468 to i64, !dbg !59
  %481 = getelementptr float, ptr addrspace(1) %0, i64 %480, !dbg !59
  %482 = sext i32 %469 to i64, !dbg !59
  %483 = getelementptr float, ptr addrspace(1) %0, i64 %482, !dbg !59
  %484 = sext i32 %470 to i64, !dbg !59
  %485 = getelementptr float, ptr addrspace(1) %0, i64 %484, !dbg !59
  %486 = sext i32 %471 to i64, !dbg !59
  %487 = getelementptr float, ptr addrspace(1) %0, i64 %486, !dbg !59
  %488 = and i1 %357, %233, !dbg !60
  %489 = and i1 %235, %357, !dbg !60
  %490 = and i1 %237, %357, !dbg !60
  %491 = and i1 %240, %357, !dbg !60
  %492 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %335, i1 %488, i32 0, i1 %488) #3, !dbg !61
  %493 = bitcast i32 %492 to float, !dbg !61
  %494 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %337, i1 %489, i32 0, i1 %489) #3, !dbg !61
  %495 = bitcast i32 %494 to float, !dbg !61
  %496 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %473, i1 %490, i32 0, i1 %490) #3, !dbg !61
  %497 = bitcast i32 %496 to float, !dbg !61
  %498 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %475, i1 %491, i32 0, i1 %491) #3, !dbg !61
  %499 = bitcast i32 %498 to float, !dbg !61
  %500 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %341, i1 %488, i32 0, i1 %488) #3, !dbg !61
  %501 = bitcast i32 %500 to float, !dbg !61
  %502 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %343, i1 %489, i32 0, i1 %489) #3, !dbg !61
  %503 = bitcast i32 %502 to float, !dbg !61
  %504 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %477, i1 %490, i32 0, i1 %490) #3, !dbg !61
  %505 = bitcast i32 %504 to float, !dbg !61
  %506 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %479, i1 %491, i32 0, i1 %491) #3, !dbg !61
  %507 = bitcast i32 %506 to float, !dbg !61
  %508 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %347, i1 %488, i32 0, i1 %488) #3, !dbg !61
  %509 = bitcast i32 %508 to float, !dbg !61
  %510 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %349, i1 %489, i32 0, i1 %489) #3, !dbg !61
  %511 = bitcast i32 %510 to float, !dbg !61
  %512 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %481, i1 %490, i32 0, i1 %490) #3, !dbg !61
  %513 = bitcast i32 %512 to float, !dbg !61
  %514 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %483, i1 %491, i32 0, i1 %491) #3, !dbg !61
  %515 = bitcast i32 %514 to float, !dbg !61
  %516 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %353, i1 %488, i32 0, i1 %488) #3, !dbg !61
  %517 = bitcast i32 %516 to float, !dbg !61
  %518 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %355, i1 %489, i32 0, i1 %489) #3, !dbg !61
  %519 = bitcast i32 %518 to float, !dbg !61
  %520 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %485, i1 %490, i32 0, i1 %490) #3, !dbg !61
  %521 = bitcast i32 %520 to float, !dbg !61
  %522 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %487, i1 %491, i32 0, i1 %491) #3, !dbg !61
  %523 = bitcast i32 %522 to float, !dbg !61
  %524 = fadd float %447, %493, !dbg !62
  %525 = fadd float %448, %495, !dbg !62
  %526 = fadd float %449, %497, !dbg !62
  %527 = fadd float %450, %499, !dbg !62
  %528 = fadd float %451, %501, !dbg !62
  %529 = fadd float %452, %503, !dbg !62
  %530 = fadd float %453, %505, !dbg !62
  %531 = fadd float %454, %507, !dbg !62
  %532 = fadd float %455, %509, !dbg !62
  %533 = fadd float %456, %511, !dbg !62
  %534 = fadd float %457, %513, !dbg !62
  %535 = fadd float %458, %515, !dbg !62
  %536 = fadd float %459, %517, !dbg !62
  %537 = fadd float %460, %519, !dbg !62
  %538 = fadd float %461, %521, !dbg !62
  %539 = fadd float %462, %523, !dbg !62
  %540 = add i32 %35, 8, !dbg !63
  %541 = add i32 %35, 9, !dbg !63
  %542 = add i32 %35, 10, !dbg !63
  %543 = add i32 %356, %31, !dbg !64
  %544 = add i32 %31, %540, !dbg !64
  %545 = add i32 %31, %541, !dbg !64
  %546 = add i32 %31, %542, !dbg !64
  %547 = add i32 %356, %32, !dbg !64
  %548 = add i32 %540, %32, !dbg !64
  %549 = add i32 %541, %32, !dbg !64
  %550 = add i32 %542, %32, !dbg !64
  %551 = add i32 %356, %33, !dbg !64
  %552 = add i32 %540, %33, !dbg !64
  %553 = add i32 %541, %33, !dbg !64
  %554 = add i32 %542, %33, !dbg !64
  %555 = add i32 %356, %34, !dbg !64
  %556 = add i32 %540, %34, !dbg !64
  %557 = add i32 %541, %34, !dbg !64
  %558 = add i32 %542, %34, !dbg !64
  %559 = sext i32 %543 to i64, !dbg !65
  %560 = getelementptr float, ptr addrspace(1) %0, i64 %559, !dbg !65
  %561 = sext i32 %544 to i64, !dbg !65
  %562 = getelementptr float, ptr addrspace(1) %0, i64 %561, !dbg !65
  %563 = sext i32 %545 to i64, !dbg !65
  %564 = getelementptr float, ptr addrspace(1) %0, i64 %563, !dbg !65
  %565 = sext i32 %546 to i64, !dbg !65
  %566 = getelementptr float, ptr addrspace(1) %0, i64 %565, !dbg !65
  %567 = sext i32 %547 to i64, !dbg !65
  %568 = getelementptr float, ptr addrspace(1) %0, i64 %567, !dbg !65
  %569 = sext i32 %548 to i64, !dbg !65
  %570 = getelementptr float, ptr addrspace(1) %0, i64 %569, !dbg !65
  %571 = sext i32 %549 to i64, !dbg !65
  %572 = getelementptr float, ptr addrspace(1) %0, i64 %571, !dbg !65
  %573 = sext i32 %550 to i64, !dbg !65
  %574 = getelementptr float, ptr addrspace(1) %0, i64 %573, !dbg !65
  %575 = sext i32 %551 to i64, !dbg !65
  %576 = getelementptr float, ptr addrspace(1) %0, i64 %575, !dbg !65
  %577 = sext i32 %552 to i64, !dbg !65
  %578 = getelementptr float, ptr addrspace(1) %0, i64 %577, !dbg !65
  %579 = sext i32 %553 to i64, !dbg !65
  %580 = getelementptr float, ptr addrspace(1) %0, i64 %579, !dbg !65
  %581 = sext i32 %554 to i64, !dbg !65
  %582 = getelementptr float, ptr addrspace(1) %0, i64 %581, !dbg !65
  %583 = sext i32 %555 to i64, !dbg !65
  %584 = getelementptr float, ptr addrspace(1) %0, i64 %583, !dbg !65
  %585 = sext i32 %556 to i64, !dbg !65
  %586 = getelementptr float, ptr addrspace(1) %0, i64 %585, !dbg !65
  %587 = sext i32 %557 to i64, !dbg !65
  %588 = getelementptr float, ptr addrspace(1) %0, i64 %587, !dbg !65
  %589 = sext i32 %558 to i64, !dbg !65
  %590 = getelementptr float, ptr addrspace(1) %0, i64 %589, !dbg !65
  %591 = add i32 %35, 15, !dbg !32
  %592 = icmp ult i32 %591, 71, !dbg !32
  %593 = and i1 %592, %133, !dbg !32
  %594 = and i1 %135, %592, !dbg !32
  %595 = and i1 %137, %592, !dbg !32
  %596 = and i1 %139, %592, !dbg !32
  %597 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %560, i1 %593, i32 0, i1 %593) #3, !dbg !66
  %598 = bitcast i32 %597 to float, !dbg !66
  %599 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %562, i1 %594, i32 0, i1 %594) #3, !dbg !66
  %600 = bitcast i32 %599 to float, !dbg !66
  %601 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %564, i1 %595, i32 0, i1 %595) #3, !dbg !66
  %602 = bitcast i32 %601 to float, !dbg !66
  %603 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %566, i1 %596, i32 0, i1 %596) #3, !dbg !66
  %604 = bitcast i32 %603 to float, !dbg !66
  %605 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %568, i1 %593, i32 0, i1 %593) #3, !dbg !66
  %606 = bitcast i32 %605 to float, !dbg !66
  %607 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %570, i1 %594, i32 0, i1 %594) #3, !dbg !66
  %608 = bitcast i32 %607 to float, !dbg !66
  %609 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %572, i1 %595, i32 0, i1 %595) #3, !dbg !66
  %610 = bitcast i32 %609 to float, !dbg !66
  %611 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %574, i1 %596, i32 0, i1 %596) #3, !dbg !66
  %612 = bitcast i32 %611 to float, !dbg !66
  %613 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %576, i1 %593, i32 0, i1 %593) #3, !dbg !66
  %614 = bitcast i32 %613 to float, !dbg !66
  %615 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %578, i1 %594, i32 0, i1 %594) #3, !dbg !66
  %616 = bitcast i32 %615 to float, !dbg !66
  %617 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %580, i1 %595, i32 0, i1 %595) #3, !dbg !66
  %618 = bitcast i32 %617 to float, !dbg !66
  %619 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %582, i1 %596, i32 0, i1 %596) #3, !dbg !66
  %620 = bitcast i32 %619 to float, !dbg !66
  %621 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %584, i1 %593, i32 0, i1 %593) #3, !dbg !66
  %622 = bitcast i32 %621 to float, !dbg !66
  %623 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %586, i1 %594, i32 0, i1 %594) #3, !dbg !66
  %624 = bitcast i32 %623 to float, !dbg !66
  %625 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %588, i1 %595, i32 0, i1 %595) #3, !dbg !66
  %626 = bitcast i32 %625 to float, !dbg !66
  %627 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %590, i1 %596, i32 0, i1 %596) #3, !dbg !66
  %628 = bitcast i32 %627 to float, !dbg !66
  %629 = fadd float %524, %598, !dbg !67
  %630 = fadd float %525, %600, !dbg !67
  %631 = fadd float %526, %602, !dbg !67
  %632 = fadd float %527, %604, !dbg !67
  %633 = fadd float %528, %606, !dbg !67
  %634 = fadd float %529, %608, !dbg !67
  %635 = fadd float %530, %610, !dbg !67
  %636 = fadd float %531, %612, !dbg !67
  %637 = fadd float %532, %614, !dbg !67
  %638 = fadd float %533, %616, !dbg !67
  %639 = fadd float %534, %618, !dbg !67
  %640 = fadd float %535, %620, !dbg !67
  %641 = fadd float %536, %622, !dbg !67
  %642 = fadd float %537, %624, !dbg !67
  %643 = fadd float %538, %626, !dbg !67
  %644 = fadd float %539, %628, !dbg !67
  %645 = and i1 %592, %173, !dbg !68
  %646 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %562, i1 %645, i32 0, i1 %645, i32 0, i1 %645, i32 0, i1 %645, i32 0, i1 %645) #3, !dbg !69
  %647 = extractvalue { i32, i32, i32, i32 } %646, 0, !dbg !69
  %648 = extractvalue { i32, i32, i32, i32 } %646, 1, !dbg !69
  %649 = extractvalue { i32, i32, i32, i32 } %646, 2, !dbg !69
  %650 = extractvalue { i32, i32, i32, i32 } %646, 3, !dbg !69
  %651 = bitcast i32 %647 to float, !dbg !69
  %652 = bitcast i32 %648 to float, !dbg !69
  %653 = bitcast i32 %649 to float, !dbg !69
  %654 = bitcast i32 %650 to float, !dbg !69
  %655 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %570, i1 %645, i32 0, i1 %645, i32 0, i1 %645, i32 0, i1 %645, i32 0, i1 %645) #3, !dbg !69
  %656 = extractvalue { i32, i32, i32, i32 } %655, 0, !dbg !69
  %657 = extractvalue { i32, i32, i32, i32 } %655, 1, !dbg !69
  %658 = extractvalue { i32, i32, i32, i32 } %655, 2, !dbg !69
  %659 = extractvalue { i32, i32, i32, i32 } %655, 3, !dbg !69
  %660 = bitcast i32 %656 to float, !dbg !69
  %661 = bitcast i32 %657 to float, !dbg !69
  %662 = bitcast i32 %658 to float, !dbg !69
  %663 = bitcast i32 %659 to float, !dbg !69
  %664 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %578, i1 %645, i32 0, i1 %645, i32 0, i1 %645, i32 0, i1 %645, i32 0, i1 %645) #3, !dbg !69
  %665 = extractvalue { i32, i32, i32, i32 } %664, 0, !dbg !69
  %666 = extractvalue { i32, i32, i32, i32 } %664, 1, !dbg !69
  %667 = extractvalue { i32, i32, i32, i32 } %664, 2, !dbg !69
  %668 = extractvalue { i32, i32, i32, i32 } %664, 3, !dbg !69
  %669 = bitcast i32 %665 to float, !dbg !69
  %670 = bitcast i32 %666 to float, !dbg !69
  %671 = bitcast i32 %667 to float, !dbg !69
  %672 = bitcast i32 %668 to float, !dbg !69
  %673 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %586, i1 %645, i32 0, i1 %645, i32 0, i1 %645, i32 0, i1 %645, i32 0, i1 %645) #3, !dbg !69
  %674 = extractvalue { i32, i32, i32, i32 } %673, 0, !dbg !69
  %675 = extractvalue { i32, i32, i32, i32 } %673, 1, !dbg !69
  %676 = extractvalue { i32, i32, i32, i32 } %673, 2, !dbg !69
  %677 = extractvalue { i32, i32, i32, i32 } %673, 3, !dbg !69
  %678 = bitcast i32 %674 to float, !dbg !69
  %679 = bitcast i32 %675 to float, !dbg !69
  %680 = bitcast i32 %676 to float, !dbg !69
  %681 = bitcast i32 %677 to float, !dbg !69
  %682 = fadd float %629, %651, !dbg !70
  %683 = fadd float %630, %652, !dbg !70
  %684 = fadd float %631, %653, !dbg !70
  %685 = fadd float %632, %654, !dbg !70
  %686 = fadd float %633, %660, !dbg !70
  %687 = fadd float %634, %661, !dbg !70
  %688 = fadd float %635, %662, !dbg !70
  %689 = fadd float %636, %663, !dbg !70
  %690 = fadd float %637, %669, !dbg !70
  %691 = fadd float %638, %670, !dbg !70
  %692 = fadd float %639, %671, !dbg !70
  %693 = fadd float %640, %672, !dbg !70
  %694 = fadd float %641, %678, !dbg !70
  %695 = fadd float %642, %679, !dbg !70
  %696 = fadd float %643, %680, !dbg !70
  %697 = fadd float %644, %681, !dbg !70
  %698 = add i32 %35, 11, !dbg !71
  %699 = add i32 %35, 12, !dbg !71
  %700 = add i32 %31, %698, !dbg !72
  %701 = add i32 %31, %699, !dbg !72
  %702 = add i32 %698, %32, !dbg !72
  %703 = add i32 %699, %32, !dbg !72
  %704 = add i32 %698, %33, !dbg !72
  %705 = add i32 %699, %33, !dbg !72
  %706 = add i32 %698, %34, !dbg !72
  %707 = add i32 %699, %34, !dbg !72
  %708 = sext i32 %700 to i64, !dbg !73
  %709 = getelementptr float, ptr addrspace(1) %0, i64 %708, !dbg !73
  %710 = sext i32 %701 to i64, !dbg !73
  %711 = getelementptr float, ptr addrspace(1) %0, i64 %710, !dbg !73
  %712 = sext i32 %702 to i64, !dbg !73
  %713 = getelementptr float, ptr addrspace(1) %0, i64 %712, !dbg !73
  %714 = sext i32 %703 to i64, !dbg !73
  %715 = getelementptr float, ptr addrspace(1) %0, i64 %714, !dbg !73
  %716 = sext i32 %704 to i64, !dbg !73
  %717 = getelementptr float, ptr addrspace(1) %0, i64 %716, !dbg !73
  %718 = sext i32 %705 to i64, !dbg !73
  %719 = getelementptr float, ptr addrspace(1) %0, i64 %718, !dbg !73
  %720 = sext i32 %706 to i64, !dbg !73
  %721 = getelementptr float, ptr addrspace(1) %0, i64 %720, !dbg !73
  %722 = sext i32 %707 to i64, !dbg !73
  %723 = getelementptr float, ptr addrspace(1) %0, i64 %722, !dbg !73
  %724 = and i1 %592, %233, !dbg !74
  %725 = and i1 %235, %592, !dbg !74
  %726 = and i1 %237, %592, !dbg !74
  %727 = and i1 %240, %592, !dbg !74
  %728 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %564, i1 %724, i32 0, i1 %724) #3, !dbg !75
  %729 = bitcast i32 %728 to float, !dbg !75
  %730 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %566, i1 %725, i32 0, i1 %725) #3, !dbg !75
  %731 = bitcast i32 %730 to float, !dbg !75
  %732 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %709, i1 %726, i32 0, i1 %726) #3, !dbg !75
  %733 = bitcast i32 %732 to float, !dbg !75
  %734 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %711, i1 %727, i32 0, i1 %727) #3, !dbg !75
  %735 = bitcast i32 %734 to float, !dbg !75
  %736 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %572, i1 %724, i32 0, i1 %724) #3, !dbg !75
  %737 = bitcast i32 %736 to float, !dbg !75
  %738 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %574, i1 %725, i32 0, i1 %725) #3, !dbg !75
  %739 = bitcast i32 %738 to float, !dbg !75
  %740 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %713, i1 %726, i32 0, i1 %726) #3, !dbg !75
  %741 = bitcast i32 %740 to float, !dbg !75
  %742 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %715, i1 %727, i32 0, i1 %727) #3, !dbg !75
  %743 = bitcast i32 %742 to float, !dbg !75
  %744 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %580, i1 %724, i32 0, i1 %724) #3, !dbg !75
  %745 = bitcast i32 %744 to float, !dbg !75
  %746 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %582, i1 %725, i32 0, i1 %725) #3, !dbg !75
  %747 = bitcast i32 %746 to float, !dbg !75
  %748 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %717, i1 %726, i32 0, i1 %726) #3, !dbg !75
  %749 = bitcast i32 %748 to float, !dbg !75
  %750 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %719, i1 %727, i32 0, i1 %727) #3, !dbg !75
  %751 = bitcast i32 %750 to float, !dbg !75
  %752 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %588, i1 %724, i32 0, i1 %724) #3, !dbg !75
  %753 = bitcast i32 %752 to float, !dbg !75
  %754 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %590, i1 %725, i32 0, i1 %725) #3, !dbg !75
  %755 = bitcast i32 %754 to float, !dbg !75
  %756 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %721, i1 %726, i32 0, i1 %726) #3, !dbg !75
  %757 = bitcast i32 %756 to float, !dbg !75
  %758 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %723, i1 %727, i32 0, i1 %727) #3, !dbg !75
  %759 = bitcast i32 %758 to float, !dbg !75
  %760 = fadd float %682, %729, !dbg !76
  %761 = fadd float %683, %731, !dbg !76
  %762 = fadd float %684, %733, !dbg !76
  %763 = fadd float %685, %735, !dbg !76
  %764 = fadd float %686, %737, !dbg !76
  %765 = fadd float %687, %739, !dbg !76
  %766 = fadd float %688, %741, !dbg !76
  %767 = fadd float %689, %743, !dbg !76
  %768 = fadd float %690, %745, !dbg !76
  %769 = fadd float %691, %747, !dbg !76
  %770 = fadd float %692, %749, !dbg !76
  %771 = fadd float %693, %751, !dbg !76
  %772 = fadd float %694, %753, !dbg !76
  %773 = fadd float %695, %755, !dbg !76
  %774 = fadd float %696, %757, !dbg !76
  %775 = fadd float %697, %759, !dbg !76
  %776 = or disjoint i32 %227, 2, !dbg !77
  %777 = or disjoint i32 %234, 2, !dbg !77
  %778 = add nsw i32 %229, 2, !dbg !77
  %779 = add nsw i32 %238, 2, !dbg !77
  %780 = extractelement <8 x i1> %132, i64 1, !dbg !78
  %781 = select i1 %780, i32 9, i32 0, !dbg !78
  %782 = extractelement <8 x i1> %132, i64 0, !dbg !78
  %783 = select i1 %782, i32 9, i32 0, !dbg !78
  %784 = icmp slt i32 %229, 7, !dbg !79
  %785 = icmp slt i32 %238, 7, !dbg !79
  %786 = select i1 %784, i32 %778, i32 0, !dbg !80
  %787 = select i1 %785, i32 %779, i32 0, !dbg !80
  %788 = tail call i32 @llvm.smin.i32(i32 %776, i32 9), !dbg !81
  %789 = tail call i32 @llvm.smin.i32(i32 %777, i32 9), !dbg !81
  %790 = add nsw i32 %781, %786, !dbg !81
  %791 = add nsw i32 %783, %787, !dbg !81
  %792 = add nsw i32 %40, 2, !dbg !82
  %793 = icmp sgt i32 %35, 55, !dbg !83
  %794 = select i1 %793, i32 9, i32 0, !dbg !84
  %795 = icmp slt i32 %35, 56, !dbg !85
  %796 = select i1 %795, i32 %792, i32 0, !dbg !86
  %797 = add nsw i32 %796, %794, !dbg !87
  %reass.add = sub nsw i32 %797, %40
  %reass.mul = mul i32 %reass.add, %788
  %reass.add85 = sub nsw i32 %40, %797
  %reass.mul86 = mul i32 %reass.add85, %227
  %798 = add nsw i32 %40, %227, !dbg !38
  %reass.sub = sub i32 %788, %798, !dbg !40
  %799 = add i32 %reass.sub, 1, !dbg !40
  %800 = add i32 %799, %797, !dbg !88
  %801 = add i32 %800, %reass.mul, !dbg !89
  %802 = add i32 %801, %reass.mul86, !dbg !90
  %reass.mul80 = mul i32 %reass.add, %789
  %reass.mul88 = mul i32 %reass.add85, %234
  %reass.sub93 = sub i32 %789, %234, !dbg !38
  %803 = or disjoint i32 %reass.sub93, 1, !dbg !38
  %804 = sub i32 %803, %40, !dbg !40
  %805 = add i32 %804, %797, !dbg !88
  %806 = add i32 %805, %reass.mul80, !dbg !89
  %807 = add i32 %806, %reass.mul88, !dbg !90
  %reass.mul82 = mul i32 %reass.add, %790
  %reass.mul90 = mul i32 %reass.add85, %229
  %808 = add nsw i32 %790, 1, !dbg !40
  %809 = add nsw i32 %229, %40, !dbg !40
  %810 = sub nsw i32 %808, %809, !dbg !40
  %811 = add nsw i32 %810, %797, !dbg !88
  %812 = add i32 %811, %reass.mul82, !dbg !89
  %813 = add i32 %812, %reass.mul90, !dbg !90
  %reass.mul84 = mul i32 %reass.add, %791
  %reass.mul92 = mul i32 %reass.add85, %238
  %814 = add nsw i32 %791, 1, !dbg !40
  %815 = add nsw i32 %238, %40, !dbg !40
  %816 = sub nsw i32 %814, %815, !dbg !40
  %817 = add nsw i32 %816, %797, !dbg !88
  %818 = add i32 %817, %reass.mul84, !dbg !89
  %819 = add i32 %818, %reass.mul92, !dbg !90
  %820 = sitofp i32 %802 to float, !dbg !91
  %821 = sitofp i32 %807 to float, !dbg !91
  %822 = sitofp i32 %813 to float, !dbg !91
  %823 = sitofp i32 %819 to float, !dbg !91
  %824 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %760, float %820) #3, !dbg !91
  %825 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %761, float %821) #3, !dbg !91
  %826 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %762, float %822) #3, !dbg !91
  %827 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %763, float %823) #3, !dbg !91
  %828 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %764, float %820) #3, !dbg !91
  %829 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %765, float %821) #3, !dbg !91
  %830 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %766, float %822) #3, !dbg !91
  %831 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %767, float %823) #3, !dbg !91
  %832 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %768, float %820) #3, !dbg !91
  %833 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %769, float %821) #3, !dbg !91
  %834 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %770, float %822) #3, !dbg !91
  %835 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %771, float %823) #3, !dbg !91
  %836 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %772, float %820) #3, !dbg !91
  %837 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %773, float %821) #3, !dbg !91
  %838 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %774, float %822) #3, !dbg !91
  %839 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %775, float %823) #3, !dbg !91
  %840 = shl i32 %21, 11, !dbg !92
  %841 = shl i32 %22, 11, !dbg !92
  %842 = shl i32 %23, 11, !dbg !92
  %843 = shl i32 %24, 11, !dbg !92
  %844 = shl i32 %29, 17, !dbg !93
  %845 = add i32 %844, %.decomposed, !dbg !94
  %846 = add i32 %845, %840, !dbg !95
  %847 = add i32 %845, %841, !dbg !95
  %848 = add i32 %845, %842, !dbg !95
  %849 = add i32 %845, %843, !dbg !95
  %850 = sext i32 %846 to i64, !dbg !96
  %851 = getelementptr float, ptr addrspace(1) %1, i64 %850, !dbg !96
  %852 = sext i32 %847 to i64, !dbg !96
  %853 = getelementptr float, ptr addrspace(1) %1, i64 %852, !dbg !96
  %854 = sext i32 %848 to i64, !dbg !96
  %855 = getelementptr float, ptr addrspace(1) %1, i64 %854, !dbg !96
  %856 = sext i32 %849 to i64, !dbg !96
  %857 = getelementptr float, ptr addrspace(1) %1, i64 %856, !dbg !96
  %858 = shl i32 %10, 10, !dbg !97
  %859 = and i32 %858, 3072, !dbg !97
  %860 = or disjoint i32 %859, %12, !dbg !97
  %861 = and i32 %13, 1020, !dbg !97
  %862 = lshr exact i32 %859, 4, !dbg !97
  %863 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %862, !dbg !97
  %864 = getelementptr float, ptr addrspace(3) %863, i32 %860, !dbg !97
  %865 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %864, <1 x i32> %865, i1 true) #3, !dbg !97
  %866 = or disjoint i32 %860, 256, !dbg !97
  %867 = lshr i32 %866, 6, !dbg !97
  %868 = getelementptr float, ptr addrspace(3) @global_smem, i32 %867, !dbg !97
  %869 = getelementptr float, ptr addrspace(3) %868, i32 %866, !dbg !97
  %870 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %869, <1 x i32> %870, i1 true) #3, !dbg !97
  %871 = or disjoint i32 %860, 512, !dbg !97
  %872 = lshr i32 %871, 6, !dbg !97
  %873 = getelementptr float, ptr addrspace(3) @global_smem, i32 %872, !dbg !97
  %874 = getelementptr float, ptr addrspace(3) %873, i32 %871, !dbg !97
  %875 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %874, <1 x i32> %875, i1 true) #3, !dbg !97
  %876 = or disjoint i32 %860, 768, !dbg !97
  %877 = lshr i32 %876, 6, !dbg !97
  %878 = getelementptr float, ptr addrspace(3) @global_smem, i32 %877, !dbg !97
  %879 = getelementptr float, ptr addrspace(3) %878, i32 %876, !dbg !97
  %880 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %879, <1 x i32> %880, i1 true) #3, !dbg !97
  %881 = or disjoint i32 %860, 64, !dbg !97
  %882 = getelementptr float, ptr addrspace(3) %863, i32 %881, !dbg !97
  %883 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %882, <1 x i32> %883, i1 true) #3, !dbg !97
  %884 = or disjoint i32 %860, 320, !dbg !97
  %885 = lshr i32 %884, 6, !dbg !97
  %886 = and i32 %885, 52, !dbg !97
  %887 = getelementptr float, ptr addrspace(3) @global_smem, i32 %886, !dbg !97
  %888 = getelementptr float, ptr addrspace(3) %887, i32 %884, !dbg !97
  %889 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %888, <1 x i32> %889, i1 true) #3, !dbg !97
  %890 = or disjoint i32 %860, 576, !dbg !97
  %891 = lshr i32 %890, 6, !dbg !97
  %892 = and i32 %891, 56, !dbg !97
  %893 = getelementptr float, ptr addrspace(3) @global_smem, i32 %892, !dbg !97
  %894 = getelementptr float, ptr addrspace(3) %893, i32 %890, !dbg !97
  %895 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %894, <1 x i32> %895, i1 true) #3, !dbg !97
  %896 = or disjoint i32 %860, 832, !dbg !97
  %897 = lshr i32 %896, 6, !dbg !97
  %898 = and i32 %897, 60, !dbg !97
  %899 = getelementptr float, ptr addrspace(3) @global_smem, i32 %898, !dbg !97
  %900 = getelementptr float, ptr addrspace(3) %899, i32 %896, !dbg !97
  %901 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %900, <1 x i32> %901, i1 true) #3, !dbg !97
  %902 = or disjoint i32 %860, 128, !dbg !97
  %903 = getelementptr float, ptr addrspace(3) %863, i32 %902, !dbg !97
  %904 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %903, <1 x i32> %904, i1 true) #3, !dbg !97
  %905 = or disjoint i32 %860, 384, !dbg !97
  %906 = lshr i32 %905, 6, !dbg !97
  %907 = and i32 %906, 52, !dbg !97
  %908 = getelementptr float, ptr addrspace(3) @global_smem, i32 %907, !dbg !97
  %909 = getelementptr float, ptr addrspace(3) %908, i32 %905, !dbg !97
  %910 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %909, <1 x i32> %910, i1 true) #3, !dbg !97
  %911 = or disjoint i32 %860, 640, !dbg !97
  %912 = lshr i32 %911, 6, !dbg !97
  %913 = and i32 %912, 56, !dbg !97
  %914 = getelementptr float, ptr addrspace(3) @global_smem, i32 %913, !dbg !97
  %915 = getelementptr float, ptr addrspace(3) %914, i32 %911, !dbg !97
  %916 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %915, <1 x i32> %916, i1 true) #3, !dbg !97
  %917 = or disjoint i32 %860, 896, !dbg !97
  %918 = lshr i32 %917, 6, !dbg !97
  %919 = and i32 %918, 60, !dbg !97
  %920 = getelementptr float, ptr addrspace(3) @global_smem, i32 %919, !dbg !97
  %921 = getelementptr float, ptr addrspace(3) %920, i32 %917, !dbg !97
  %922 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %921, <1 x i32> %922, i1 true) #3, !dbg !97
  %923 = or disjoint i32 %860, 192, !dbg !97
  %924 = getelementptr float, ptr addrspace(3) %863, i32 %923, !dbg !97
  %925 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %924, <1 x i32> %925, i1 true) #3, !dbg !97
  %926 = or disjoint i32 %860, 448, !dbg !97
  %927 = lshr i32 %926, 6, !dbg !97
  %928 = and i32 %927, 52, !dbg !97
  %929 = getelementptr float, ptr addrspace(3) @global_smem, i32 %928, !dbg !97
  %930 = getelementptr float, ptr addrspace(3) %929, i32 %926, !dbg !97
  %931 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %930, <1 x i32> %931, i1 true) #3, !dbg !97
  %932 = or disjoint i32 %860, 704, !dbg !97
  %933 = lshr i32 %932, 6, !dbg !97
  %934 = and i32 %933, 56, !dbg !97
  %935 = getelementptr float, ptr addrspace(3) @global_smem, i32 %934, !dbg !97
  %936 = getelementptr float, ptr addrspace(3) %935, i32 %932, !dbg !97
  %937 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %936, <1 x i32> %937, i1 true) #3, !dbg !97
  %938 = or disjoint i32 %860, 960, !dbg !97
  %939 = lshr i32 %938, 6, !dbg !97
  %940 = and i32 %939, 60, !dbg !97
  %941 = getelementptr float, ptr addrspace(3) @global_smem, i32 %940, !dbg !97
  %942 = getelementptr float, ptr addrspace(3) %941, i32 %938, !dbg !97
  %943 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %942, <1 x i32> %943, i1 true) #3, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %944 = lshr i32 %13, 6, !dbg !97
  %945 = and i32 %944, 12, !dbg !97
  %946 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %945, !dbg !97
  %947 = getelementptr inbounds float, ptr addrspace(3) %946, i32 %861, !dbg !97
  %948 = or disjoint i32 %861, 1024, !dbg !97
  %949 = lshr i32 %948, 6, !dbg !97
  %950 = and i32 %949, 28, !dbg !97
  %951 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %950, !dbg !97
  %952 = getelementptr inbounds float, ptr addrspace(3) %951, i32 %948, !dbg !97
  %953 = load <4 x i32>, ptr addrspace(3) %952, align 16, !dbg !97
  %954 = or disjoint i32 %861, 2048, !dbg !97
  %955 = lshr i32 %954, 6, !dbg !97
  %956 = and i32 %955, 44, !dbg !97
  %957 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %956, !dbg !97
  %958 = getelementptr inbounds float, ptr addrspace(3) %957, i32 %954, !dbg !97
  %959 = load <4 x i32>, ptr addrspace(3) %958, align 16, !dbg !97
  %960 = or disjoint i32 %861, 3072, !dbg !97
  %961 = lshr i32 %960, 6, !dbg !97
  %962 = and i32 %961, 60, !dbg !97
  %963 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %962, !dbg !97
  %964 = getelementptr inbounds float, ptr addrspace(3) %963, i32 %960, !dbg !97
  %965 = load <4 x i32>, ptr addrspace(3) %964, align 16, !dbg !97
  %.extract = load i32, ptr addrspace(3) %947, align 16, !dbg !97
  %966 = getelementptr inbounds i8, ptr addrspace(3) %947, i32 4, !dbg !97
  %.extract22 = load i32, ptr addrspace(3) %966, align 4, !dbg !97
  %967 = getelementptr inbounds i8, ptr addrspace(3) %947, i32 8, !dbg !97
  %.extract23 = load i32, ptr addrspace(3) %967, align 8, !dbg !97
  %968 = getelementptr inbounds i8, ptr addrspace(3) %947, i32 12, !dbg !97
  %.extract24 = load i32, ptr addrspace(3) %968, align 4, !dbg !97
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %851, i1 %25) #3, !dbg !97
  %.extract25 = extractelement <4 x i32> %953, i64 0, !dbg !97
  %.extract26 = extractelement <4 x i32> %953, i64 1, !dbg !97
  %.extract27 = extractelement <4 x i32> %953, i64 2, !dbg !97
  %.extract28 = extractelement <4 x i32> %953, i64 3, !dbg !97
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %853, i1 %26) #3, !dbg !97
  %.extract29 = extractelement <4 x i32> %959, i64 0, !dbg !97
  %.extract30 = extractelement <4 x i32> %959, i64 1, !dbg !97
  %.extract31 = extractelement <4 x i32> %959, i64 2, !dbg !97
  %.extract32 = extractelement <4 x i32> %959, i64 3, !dbg !97
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %855, i1 %27) #3, !dbg !97
  %.extract33 = extractelement <4 x i32> %965, i64 0, !dbg !97
  %.extract34 = extractelement <4 x i32> %965, i64 1, !dbg !97
  %.extract35 = extractelement <4 x i32> %965, i64 2, !dbg !97
  %.extract36 = extractelement <4 x i32> %965, i64 3, !dbg !97
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract33, i32 %.extract34, i32 %.extract35, i32 %.extract36, ptr addrspace(1) %857, i1 %28) #3, !dbg !97
  %969 = getelementptr float, ptr addrspace(1) %2, i64 %850, !dbg !98
  %970 = getelementptr float, ptr addrspace(1) %2, i64 %852, !dbg !98
  %971 = getelementptr float, ptr addrspace(1) %2, i64 %854, !dbg !98
  %972 = getelementptr float, ptr addrspace(1) %2, i64 %856, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %969, i1 %25) #3, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %970, i1 %26) #3, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %971, i1 %27) #3, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract33, i32 %.extract34, i32 %.extract35, i32 %.extract36, ptr addrspace(1) %972, i1 %28) #3, !dbg !99
  %973 = getelementptr float, ptr addrspace(1) %3, i64 %850, !dbg !100
  %974 = getelementptr float, ptr addrspace(1) %3, i64 %852, !dbg !100
  %975 = getelementptr float, ptr addrspace(1) %3, i64 %854, !dbg !100
  %976 = getelementptr float, ptr addrspace(1) %3, i64 %856, !dbg !100
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %973, i1 %25) #3, !dbg !101
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %974, i1 %26) #3, !dbg !101
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %975, i1 %27) #3, !dbg !101
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract33, i32 %.extract34, i32 %.extract35, i32 %.extract36, ptr addrspace(1) %976, i1 %28) #3, !dbg !101
  %977 = getelementptr float, ptr addrspace(1) %4, i64 %850, !dbg !102
  %978 = getelementptr float, ptr addrspace(1) %4, i64 %852, !dbg !102
  %979 = getelementptr float, ptr addrspace(1) %4, i64 %854, !dbg !102
  %980 = getelementptr float, ptr addrspace(1) %4, i64 %856, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %981 = bitcast float %824 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %864, <1 x i32> %981, i1 true) #3, !dbg !103
  %982 = bitcast float %825 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %869, <1 x i32> %982, i1 true) #3, !dbg !103
  %983 = bitcast float %826 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %874, <1 x i32> %983, i1 true) #3, !dbg !103
  %984 = bitcast float %827 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %879, <1 x i32> %984, i1 true) #3, !dbg !103
  %985 = bitcast float %828 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %882, <1 x i32> %985, i1 true) #3, !dbg !103
  %986 = bitcast float %829 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %888, <1 x i32> %986, i1 true) #3, !dbg !103
  %987 = bitcast float %830 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %894, <1 x i32> %987, i1 true) #3, !dbg !103
  %988 = bitcast float %831 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %900, <1 x i32> %988, i1 true) #3, !dbg !103
  %989 = bitcast float %832 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %903, <1 x i32> %989, i1 true) #3, !dbg !103
  %990 = bitcast float %833 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %909, <1 x i32> %990, i1 true) #3, !dbg !103
  %991 = bitcast float %834 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %915, <1 x i32> %991, i1 true) #3, !dbg !103
  %992 = bitcast float %835 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %921, <1 x i32> %992, i1 true) #3, !dbg !103
  %993 = bitcast float %836 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %924, <1 x i32> %993, i1 true) #3, !dbg !103
  %994 = bitcast float %837 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %930, <1 x i32> %994, i1 true) #3, !dbg !103
  %995 = bitcast float %838 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %936, <1 x i32> %995, i1 true) #3, !dbg !103
  %996 = bitcast float %839 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %942, <1 x i32> %996, i1 true) #3, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %997 = load <4 x i32>, ptr addrspace(3) %952, align 16, !dbg !103
  %998 = load <4 x i32>, ptr addrspace(3) %958, align 16, !dbg !103
  %999 = load <4 x i32>, ptr addrspace(3) %964, align 16, !dbg !103
  %.extract52 = load i32, ptr addrspace(3) %947, align 16, !dbg !103
  %.extract53 = load i32, ptr addrspace(3) %966, align 4, !dbg !103
  %.extract54 = load i32, ptr addrspace(3) %967, align 8, !dbg !103
  %.extract55 = load i32, ptr addrspace(3) %968, align 4, !dbg !103
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract52, i32 %.extract53, i32 %.extract54, i32 %.extract55, ptr addrspace(1) %977, i1 %25) #3, !dbg !103
  %.extract56 = extractelement <4 x i32> %997, i64 0, !dbg !103
  %.extract57 = extractelement <4 x i32> %997, i64 1, !dbg !103
  %.extract58 = extractelement <4 x i32> %997, i64 2, !dbg !103
  %.extract59 = extractelement <4 x i32> %997, i64 3, !dbg !103
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract56, i32 %.extract57, i32 %.extract58, i32 %.extract59, ptr addrspace(1) %978, i1 %26) #3, !dbg !103
  %.extract60 = extractelement <4 x i32> %998, i64 0, !dbg !103
  %.extract61 = extractelement <4 x i32> %998, i64 1, !dbg !103
  %.extract62 = extractelement <4 x i32> %998, i64 2, !dbg !103
  %.extract63 = extractelement <4 x i32> %998, i64 3, !dbg !103
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract60, i32 %.extract61, i32 %.extract62, i32 %.extract63, ptr addrspace(1) %979, i1 %27) #3, !dbg !103
  %.extract64 = extractelement <4 x i32> %999, i64 0, !dbg !103
  %.extract65 = extractelement <4 x i32> %999, i64 1, !dbg !103
  %.extract66 = extractelement <4 x i32> %999, i64 2, !dbg !103
  %.extract67 = extractelement <4 x i32> %999, i64 3, !dbg !103
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract64, i32 %.extract65, i32 %.extract66, i32 %.extract67, ptr addrspace(1) %980, i1 %28) #3, !dbg !103
  ret void, !dbg !104
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cl6bvt4rfep5ixyc5ivyfdt75jd5vxeku7mip4jqpfqcjnmydbey.py", directory: "inductor_cache/l6")
!4 = !{ptr @triton_poi_fused_avg_pool2d_convolution_52, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_convolution_52, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_convolution_52", linkageName: "triton_poi_fused_avg_pool2d_convolution_52", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 43, scope: !7)
!27 = !DILocation(line: 46, column: 38, scope: !7)
!28 = !DILocation(line: 46, column: 43, scope: !7)
!29 = !DILocation(line: 46, column: 31, scope: !7)
!30 = !DILocation(line: 46, column: 59, scope: !7)
!31 = !DILocation(line: 87, column: 64, scope: !7)
!32 = !DILocation(line: 79, column: 56, scope: !7)
!33 = !DILocation(line: 46, column: 51, scope: !7)
!34 = !DILocation(line: 57, column: 20, scope: !7)
!35 = !DILocation(line: 52, column: 59, scope: !7)
!36 = !DILocation(line: 52, column: 51, scope: !7)
!37 = !DILocation(line: 53, column: 20, scope: !7)
!38 = !DILocation(line: 87, column: 48, scope: !7)
!39 = !DILocation(line: 54, column: 16, scope: !7)
!40 = !DILocation(line: 87, column: 163, scope: !7)
!41 = !DILocation(line: 56, column: 20, scope: !7)
!42 = !DILocation(line: 59, column: 38, scope: !7)
!43 = !DILocation(line: 59, column: 43, scope: !7)
!44 = !DILocation(line: 59, column: 31, scope: !7)
!45 = !DILocation(line: 59, column: 59, scope: !7)
!46 = !DILocation(line: 59, column: 51, scope: !7)
!47 = !DILocation(line: 60, column: 20, scope: !7)
!48 = !DILocation(line: 66, column: 38, scope: !7)
!49 = !DILocation(line: 66, column: 43, scope: !7)
!50 = !DILocation(line: 66, column: 31, scope: !7)
!51 = !DILocation(line: 66, column: 59, scope: !7)
!52 = !DILocation(line: 66, column: 51, scope: !7)
!53 = !DILocation(line: 67, column: 20, scope: !7)
!54 = !DILocation(line: 69, column: 52, scope: !7)
!55 = !DILocation(line: 69, column: 44, scope: !7)
!56 = !DILocation(line: 70, column: 20, scope: !7)
!57 = !DILocation(line: 72, column: 35, scope: !7)
!58 = !DILocation(line: 72, column: 40, scope: !7)
!59 = !DILocation(line: 72, column: 31, scope: !7)
!60 = !DILocation(line: 72, column: 56, scope: !7)
!61 = !DILocation(line: 72, column: 48, scope: !7)
!62 = !DILocation(line: 73, column: 20, scope: !7)
!63 = !DILocation(line: 79, column: 35, scope: !7)
!64 = !DILocation(line: 79, column: 40, scope: !7)
!65 = !DILocation(line: 79, column: 31, scope: !7)
!66 = !DILocation(line: 79, column: 48, scope: !7)
!67 = !DILocation(line: 80, column: 20, scope: !7)
!68 = !DILocation(line: 82, column: 56, scope: !7)
!69 = !DILocation(line: 82, column: 48, scope: !7)
!70 = !DILocation(line: 83, column: 20, scope: !7)
!71 = !DILocation(line: 85, column: 35, scope: !7)
!72 = !DILocation(line: 85, column: 40, scope: !7)
!73 = !DILocation(line: 85, column: 31, scope: !7)
!74 = !DILocation(line: 85, column: 56, scope: !7)
!75 = !DILocation(line: 85, column: 48, scope: !7)
!76 = !DILocation(line: 86, column: 20, scope: !7)
!77 = !DILocation(line: 87, column: 68, scope: !7)
!78 = !DILocation(line: 87, column: 56, scope: !7)
!79 = !DILocation(line: 87, column: 99, scope: !7)
!80 = !DILocation(line: 87, column: 87, scope: !7)
!81 = !DILocation(line: 87, column: 75, scope: !7)
!82 = !DILocation(line: 87, column: 124, scope: !7)
!83 = !DILocation(line: 87, column: 120, scope: !7)
!84 = !DILocation(line: 87, column: 112, scope: !7)
!85 = !DILocation(line: 87, column: 155, scope: !7)
!86 = !DILocation(line: 87, column: 143, scope: !7)
!87 = !DILocation(line: 87, column: 131, scope: !7)
!88 = !DILocation(line: 87, column: 231, scope: !7)
!89 = !DILocation(line: 87, column: 299, scope: !7)
!90 = !DILocation(line: 87, column: 357, scope: !7)
!91 = !DILocation(line: 88, column: 20, scope: !7)
!92 = !DILocation(line: 89, column: 35, scope: !7)
!93 = !DILocation(line: 89, column: 47, scope: !7)
!94 = !DILocation(line: 89, column: 30, scope: !7)
!95 = !DILocation(line: 89, column: 40, scope: !7)
!96 = !DILocation(line: 89, column: 25, scope: !7)
!97 = !DILocation(line: 89, column: 58, scope: !7)
!98 = !DILocation(line: 90, column: 25, scope: !7)
!99 = !DILocation(line: 90, column: 58, scope: !7)
!100 = !DILocation(line: 91, column: 25, scope: !7)
!101 = !DILocation(line: 91, column: 58, scope: !7)
!102 = !DILocation(line: 92, column: 25, scope: !7)
!103 = !DILocation(line: 92, column: 59, scope: !7)
!104 = !DILocation(line: 92, column: 4, scope: !7)
