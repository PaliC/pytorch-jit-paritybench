; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_23 = internal constant [8 x i8] c"unknown\00"
@assertFile_23 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_23 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp252 < 4\00"
@assertFunc_22 = internal constant [8 x i8] c"unknown\00"
@assertFile_22 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_22 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp247 < 4\00"
@assertFunc_21 = internal constant [8 x i8] c"unknown\00"
@assertFile_21 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_21 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp230 < 4\00"
@assertFunc_20 = internal constant [8 x i8] c"unknown\00"
@assertFile_20 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_20 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp225 < 4\00"
@assertFunc_19 = internal constant [8 x i8] c"unknown\00"
@assertFile_19 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_19 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp208 < 4\00"
@assertFunc_18 = internal constant [8 x i8] c"unknown\00"
@assertFile_18 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_18 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp203 < 4\00"
@assertFunc_17 = internal constant [8 x i8] c"unknown\00"
@assertFile_17 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_17 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp187 < 4\00"
@assertFunc_16 = internal constant [8 x i8] c"unknown\00"
@assertFile_16 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_16 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp182 < 4\00"
@assertFunc_15 = internal constant [8 x i8] c"unknown\00"
@assertFile_15 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_15 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp165 < 4\00"
@assertFunc_14 = internal constant [8 x i8] c"unknown\00"
@assertFile_14 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_14 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp160 < 4\00"
@assertFunc_13 = internal constant [8 x i8] c"unknown\00"
@assertFile_13 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_13 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp143 < 4\00"
@assertFunc_12 = internal constant [8 x i8] c"unknown\00"
@assertFile_12 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_12 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp138 < 4\00"
@assertFunc_11 = internal constant [8 x i8] c"unknown\00"
@assertFile_11 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_11 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp121 < 4\00"
@assertFunc_10 = internal constant [8 x i8] c"unknown\00"
@assertFile_10 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_10 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp116 < 4\00"
@assertFunc_9 = internal constant [8 x i8] c"unknown\00"
@assertFile_9 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_9 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp100 < 4\00"
@assertFunc_8 = internal constant [8 x i8] c"unknown\00"
@assertFile_8 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_8 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp95 < 4\00"
@assertFunc_7 = internal constant [8 x i8] c"unknown\00"
@assertFile_7 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_7 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp78 < 4\00"
@assertFunc_6 = internal constant [8 x i8] c"unknown\00"
@assertFile_6 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_6 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp73 < 4\00"
@assertFunc_5 = internal constant [8 x i8] c"unknown\00"
@assertFile_5 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_5 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp55 < 4\00"
@assertFunc_4 = internal constant [8 x i8] c"unknown\00"
@assertFile_4 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_4 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp50 < 4\00"
@assertFunc_3 = internal constant [8 x i8] c"unknown\00"
@assertFile_3 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_3 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp32 < 4\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_2 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp27 < 4\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_1 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp10 < 4\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp5 < 4\00"

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_grid_sampler_2d_linalg_vector_norm_sub_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, i32 %23) local_unnamed_addr !dbg !11 {
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %26 = shl i32 %25, 7, !dbg !13
  %27 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %28 = and i32 %27, 127, !dbg !14
  %29 = or disjoint i32 %26, %28, !dbg !15
  %30 = icmp slt i32 %29, 1024, !dbg !16
  %.frozen = freeze i32 %29, !dbg !17
  %31 = sdiv i32 %.frozen, 16, !dbg !17
  %32 = mul i32 %31, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %32, !dbg !18
  %33 = shl i32 %31, 6, !dbg !19
  %34 = add i32 %33, %.decomposed, !dbg !20
  %35 = sext i32 %34 to i64, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %30) #4, !dbg !22
  %38 = getelementptr i64, ptr addrspace(1) %1, i64 %35, !dbg !23
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %30) #4, !dbg !24
  %40 = getelementptr i64, ptr addrspace(1) %2, i64 %35, !dbg !25
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 %30) #4, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %30) #4, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %30) #4, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !31
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %30) #4, !dbg !32
  %48 = getelementptr float, ptr addrspace(1) %7, i64 %35, !dbg !33
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %30) #4, !dbg !34
  %50 = add i32 %34, 16, !dbg !35
  %51 = sext i32 %50 to i64, !dbg !36
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !36
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %30) #4, !dbg !37
  %54 = getelementptr i64, ptr addrspace(1) %1, i64 %51, !dbg !38
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 %30) #4, !dbg !39
  %56 = getelementptr i64, ptr addrspace(1) %2, i64 %51, !dbg !40
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 %30) #4, !dbg !41
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !42
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %30) #4, !dbg !43
  %60 = getelementptr float, ptr addrspace(1) %5, i64 %51, !dbg !44
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %30) #4, !dbg !45
  %62 = getelementptr float, ptr addrspace(1) %6, i64 %51, !dbg !46
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %30) #4, !dbg !47
  %64 = getelementptr float, ptr addrspace(1) %7, i64 %51, !dbg !48
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %30) #4, !dbg !49
  %66 = add i32 %34, 32, !dbg !50
  %67 = sext i32 %66 to i64, !dbg !51
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !51
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %30) #4, !dbg !52
  %70 = getelementptr i64, ptr addrspace(1) %1, i64 %67, !dbg !53
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %30) #4, !dbg !54
  %72 = getelementptr i64, ptr addrspace(1) %2, i64 %67, !dbg !55
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 %30) #4, !dbg !56
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %67, !dbg !57
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %30) #4, !dbg !58
  %76 = getelementptr float, ptr addrspace(1) %5, i64 %67, !dbg !59
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %30) #4, !dbg !60
  %78 = getelementptr float, ptr addrspace(1) %6, i64 %67, !dbg !61
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %30) #4, !dbg !62
  %80 = getelementptr float, ptr addrspace(1) %7, i64 %67, !dbg !63
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %30) #4, !dbg !64
  %82 = add i32 %34, 48, !dbg !65
  %83 = sext i32 %82 to i64, !dbg !66
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !66
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %30) #4, !dbg !67
  %86 = getelementptr i64, ptr addrspace(1) %1, i64 %83, !dbg !68
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %86, i1 %30) #4, !dbg !69
  %88 = getelementptr i64, ptr addrspace(1) %2, i64 %83, !dbg !70
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 %30) #4, !dbg !71
  %90 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !72
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %30) #4, !dbg !73
  %92 = getelementptr float, ptr addrspace(1) %5, i64 %83, !dbg !74
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %30) #4, !dbg !75
  %94 = getelementptr float, ptr addrspace(1) %6, i64 %83, !dbg !76
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %30) #4, !dbg !77
  %96 = getelementptr float, ptr addrspace(1) %7, i64 %83, !dbg !78
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %30) #4, !dbg !79
  %98 = getelementptr i64, ptr addrspace(1) %8, i64 %35, !dbg !80
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %98, i1 %30) #4, !dbg !81
  %100 = getelementptr i64, ptr addrspace(1) %9, i64 %35, !dbg !82
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %100, i1 %30) #4, !dbg !83
  %102 = getelementptr float, ptr addrspace(1) %10, i64 %35, !dbg !84
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %30) #4, !dbg !85
  %104 = getelementptr float, ptr addrspace(1) %11, i64 %35, !dbg !86
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %30) #4, !dbg !87
  %106 = getelementptr float, ptr addrspace(1) %12, i64 %35, !dbg !88
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %30) #4, !dbg !89
  %108 = getelementptr float, ptr addrspace(1) %13, i64 %35, !dbg !90
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %30) #4, !dbg !91
  %110 = getelementptr i64, ptr addrspace(1) %8, i64 %51, !dbg !92
  %111 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %110, i1 %30) #4, !dbg !93
  %112 = getelementptr i64, ptr addrspace(1) %9, i64 %51, !dbg !94
  %113 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %112, i1 %30) #4, !dbg !95
  %114 = getelementptr float, ptr addrspace(1) %10, i64 %51, !dbg !96
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %30) #4, !dbg !97
  %116 = getelementptr float, ptr addrspace(1) %11, i64 %51, !dbg !98
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %30) #4, !dbg !99
  %118 = getelementptr float, ptr addrspace(1) %12, i64 %51, !dbg !100
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %30) #4, !dbg !101
  %120 = getelementptr float, ptr addrspace(1) %13, i64 %51, !dbg !102
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %30) #4, !dbg !103
  %122 = getelementptr i64, ptr addrspace(1) %8, i64 %67, !dbg !104
  %123 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %122, i1 %30) #4, !dbg !105
  %124 = getelementptr i64, ptr addrspace(1) %9, i64 %67, !dbg !106
  %125 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %124, i1 %30) #4, !dbg !107
  %126 = getelementptr float, ptr addrspace(1) %10, i64 %67, !dbg !108
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %30) #4, !dbg !109
  %128 = getelementptr float, ptr addrspace(1) %11, i64 %67, !dbg !110
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %30) #4, !dbg !111
  %130 = getelementptr float, ptr addrspace(1) %12, i64 %67, !dbg !112
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %30) #4, !dbg !113
  %132 = getelementptr float, ptr addrspace(1) %13, i64 %67, !dbg !114
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %30) #4, !dbg !115
  %134 = getelementptr i64, ptr addrspace(1) %8, i64 %83, !dbg !116
  %135 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %134, i1 %30) #4, !dbg !117
  %136 = getelementptr i64, ptr addrspace(1) %9, i64 %83, !dbg !118
  %137 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %136, i1 %30) #4, !dbg !119
  %138 = getelementptr float, ptr addrspace(1) %10, i64 %83, !dbg !120
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %30) #4, !dbg !121
  %140 = getelementptr float, ptr addrspace(1) %11, i64 %83, !dbg !122
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %30) #4, !dbg !123
  %142 = getelementptr float, ptr addrspace(1) %12, i64 %83, !dbg !124
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %30) #4, !dbg !125
  %144 = getelementptr float, ptr addrspace(1) %13, i64 %83, !dbg !126
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %30) #4, !dbg !127
  %146 = getelementptr i64, ptr addrspace(1) %14, i64 %35, !dbg !128
  %147 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %146, i1 %30) #4, !dbg !129
  %148 = getelementptr i64, ptr addrspace(1) %15, i64 %35, !dbg !130
  %149 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %148, i1 %30) #4, !dbg !131
  %150 = getelementptr float, ptr addrspace(1) %16, i64 %35, !dbg !132
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %30) #4, !dbg !133
  %152 = getelementptr float, ptr addrspace(1) %17, i64 %35, !dbg !134
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %30) #4, !dbg !135
  %154 = getelementptr float, ptr addrspace(1) %18, i64 %35, !dbg !136
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %30) #4, !dbg !137
  %156 = getelementptr float, ptr addrspace(1) %19, i64 %35, !dbg !138
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 %30) #4, !dbg !139
  %158 = getelementptr i64, ptr addrspace(1) %14, i64 %51, !dbg !140
  %159 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %158, i1 %30) #4, !dbg !141
  %160 = getelementptr i64, ptr addrspace(1) %15, i64 %51, !dbg !142
  %161 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %160, i1 %30) #4, !dbg !143
  %162 = getelementptr float, ptr addrspace(1) %16, i64 %51, !dbg !144
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %30) #4, !dbg !145
  %164 = getelementptr float, ptr addrspace(1) %17, i64 %51, !dbg !146
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %30) #4, !dbg !147
  %166 = getelementptr float, ptr addrspace(1) %18, i64 %51, !dbg !148
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %30) #4, !dbg !149
  %168 = getelementptr float, ptr addrspace(1) %19, i64 %51, !dbg !150
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %30) #4, !dbg !151
  %170 = getelementptr i64, ptr addrspace(1) %14, i64 %67, !dbg !152
  %171 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %170, i1 %30) #4, !dbg !153
  %172 = getelementptr i64, ptr addrspace(1) %15, i64 %67, !dbg !154
  %173 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %172, i1 %30) #4, !dbg !155
  %174 = getelementptr float, ptr addrspace(1) %16, i64 %67, !dbg !156
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %30) #4, !dbg !157
  %176 = getelementptr float, ptr addrspace(1) %17, i64 %67, !dbg !158
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %30) #4, !dbg !159
  %178 = getelementptr float, ptr addrspace(1) %18, i64 %67, !dbg !160
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 %30) #4, !dbg !161
  %180 = getelementptr float, ptr addrspace(1) %19, i64 %67, !dbg !162
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %30) #4, !dbg !163
  %182 = getelementptr i64, ptr addrspace(1) %14, i64 %83, !dbg !164
  %183 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %182, i1 %30) #4, !dbg !165
  %184 = getelementptr i64, ptr addrspace(1) %15, i64 %83, !dbg !166
  %185 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %184, i1 %30) #4, !dbg !167
  %186 = getelementptr float, ptr addrspace(1) %16, i64 %83, !dbg !168
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %30) #4, !dbg !169
  %188 = getelementptr float, ptr addrspace(1) %17, i64 %83, !dbg !170
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 %30) #4, !dbg !171
  %190 = getelementptr float, ptr addrspace(1) %18, i64 %83, !dbg !172
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 %30) #4, !dbg !173
  %192 = getelementptr float, ptr addrspace(1) %19, i64 %83, !dbg !174
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 %30) #4, !dbg !175
  %194 = lshr i64 %39, 61, !dbg !176
  %195 = and i64 %194, 4, !dbg !176
  %196 = add i64 %195, %39, !dbg !176
  %197 = icmp ugt i64 %196, 3, !dbg !177
  %.not1 = and i1 %30, %197, !dbg !178
  br i1 %.not1, label %198, label %199, !dbg !178

198:                                              ; preds = %24
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 107, ptr nonnull @assertFunc_0, i64 1), !dbg !178
  unreachable, !dbg !178

199:                                              ; preds = %24
  tail call void @llvm.nvvm.barrier0(), !dbg !178
  %200 = lshr i64 %41, 61, !dbg !179
  %201 = and i64 %200, 4, !dbg !179
  %202 = add i64 %201, %41, !dbg !179
  %203 = icmp ugt i64 %202, 3, !dbg !180
  %.not2 = and i1 %30, %203, !dbg !181
  br i1 %.not2, label %204, label %205, !dbg !181

204:                                              ; preds = %199
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 111, ptr nonnull @assertFunc_1, i64 1), !dbg !181
  unreachable, !dbg !181

205:                                              ; preds = %199
  tail call void @llvm.nvvm.barrier0(), !dbg !181
  %206 = sext i32 %33 to i64, !dbg !182
  %207 = getelementptr float, ptr addrspace(1) %3, i64 %202, !dbg !183
  %.idx = shl i64 %196, 4, !dbg !183
  %208 = getelementptr i8, ptr addrspace(1) %207, i64 %.idx, !dbg !183
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %206, !dbg !183
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 %30) #4, !dbg !184
  %211 = lshr i64 %55, 61, !dbg !185
  %212 = and i64 %211, 4, !dbg !185
  %213 = add i64 %212, %55, !dbg !185
  %214 = icmp ugt i64 %213, 3, !dbg !186
  %.not3 = and i1 %30, %214, !dbg !187
  br i1 %.not3, label %215, label %216, !dbg !187

215:                                              ; preds = %205
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 122, ptr nonnull @assertFunc_2, i64 1), !dbg !187
  unreachable, !dbg !187

216:                                              ; preds = %205
  tail call void @llvm.nvvm.barrier0(), !dbg !187
  %217 = lshr i64 %57, 61, !dbg !188
  %218 = and i64 %217, 4, !dbg !188
  %219 = add i64 %218, %57, !dbg !188
  %220 = icmp ugt i64 %219, 3, !dbg !189
  %.not4 = and i1 %30, %220, !dbg !190
  br i1 %.not4, label %221, label %222, !dbg !190

221:                                              ; preds = %216
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 126, ptr nonnull @assertFunc_3, i64 1), !dbg !190
  unreachable, !dbg !190

222:                                              ; preds = %216
  tail call void @llvm.nvvm.barrier0(), !dbg !190
  %223 = getelementptr float, ptr addrspace(1) %3, i64 %219, !dbg !191
  %224 = getelementptr i8, ptr addrspace(1) %223, i64 64, !dbg !191
  %.idx5 = shl i64 %213, 4, !dbg !191
  %225 = getelementptr i8, ptr addrspace(1) %224, i64 %.idx5, !dbg !191
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %206, !dbg !191
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 %30) #4, !dbg !192
  %228 = lshr i64 %71, 61, !dbg !193
  %229 = and i64 %228, 4, !dbg !193
  %230 = add i64 %229, %71, !dbg !193
  %231 = icmp ugt i64 %230, 3, !dbg !194
  %.not6 = and i1 %30, %231, !dbg !195
  br i1 %.not6, label %232, label %233, !dbg !195

232:                                              ; preds = %222
  tail call void @__assertfail(ptr nonnull @assertMessage_4, ptr nonnull @assertFile_4, i32 138, ptr nonnull @assertFunc_4, i64 1), !dbg !195
  unreachable, !dbg !195

233:                                              ; preds = %222
  tail call void @llvm.nvvm.barrier0(), !dbg !195
  %234 = lshr i64 %73, 61, !dbg !196
  %235 = and i64 %234, 4, !dbg !196
  %236 = add i64 %235, %73, !dbg !196
  %237 = icmp ugt i64 %236, 3, !dbg !197
  %.not7 = and i1 %30, %237, !dbg !198
  br i1 %.not7, label %238, label %239, !dbg !198

238:                                              ; preds = %233
  tail call void @__assertfail(ptr nonnull @assertMessage_5, ptr nonnull @assertFile_5, i32 142, ptr nonnull @assertFunc_5, i64 1), !dbg !198
  unreachable, !dbg !198

239:                                              ; preds = %233
  tail call void @llvm.nvvm.barrier0(), !dbg !198
  %240 = getelementptr float, ptr addrspace(1) %3, i64 %236, !dbg !199
  %241 = getelementptr i8, ptr addrspace(1) %240, i64 128, !dbg !199
  %.idx8 = shl i64 %230, 4, !dbg !199
  %242 = getelementptr i8, ptr addrspace(1) %241, i64 %.idx8, !dbg !199
  %243 = getelementptr float, ptr addrspace(1) %242, i64 %206, !dbg !199
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %243, i1 %30) #4, !dbg !200
  %245 = lshr i64 %87, 61, !dbg !201
  %246 = and i64 %245, 4, !dbg !201
  %247 = add i64 %246, %87, !dbg !201
  %248 = icmp ugt i64 %247, 3, !dbg !202
  %.not9 = and i1 %30, %248, !dbg !203
  br i1 %.not9, label %249, label %250, !dbg !203

249:                                              ; preds = %239
  tail call void @__assertfail(ptr nonnull @assertMessage_6, ptr nonnull @assertFile_6, i32 154, ptr nonnull @assertFunc_6, i64 1), !dbg !203
  unreachable, !dbg !203

250:                                              ; preds = %239
  tail call void @llvm.nvvm.barrier0(), !dbg !203
  %251 = lshr i64 %89, 61, !dbg !204
  %252 = and i64 %251, 4, !dbg !204
  %253 = add i64 %252, %89, !dbg !204
  %254 = icmp ugt i64 %253, 3, !dbg !205
  %.not10 = and i1 %30, %254, !dbg !206
  br i1 %.not10, label %255, label %256, !dbg !206

255:                                              ; preds = %250
  tail call void @__assertfail(ptr nonnull @assertMessage_7, ptr nonnull @assertFile_7, i32 158, ptr nonnull @assertFunc_7, i64 1), !dbg !206
  unreachable, !dbg !206

256:                                              ; preds = %250
  tail call void @llvm.nvvm.barrier0(), !dbg !206
  %257 = getelementptr float, ptr addrspace(1) %3, i64 %253, !dbg !207
  %258 = getelementptr i8, ptr addrspace(1) %257, i64 192, !dbg !207
  %.idx11 = shl i64 %247, 4, !dbg !207
  %259 = getelementptr i8, ptr addrspace(1) %258, i64 %.idx11, !dbg !207
  %260 = getelementptr float, ptr addrspace(1) %259, i64 %206, !dbg !207
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %260, i1 %30) #4, !dbg !208
  %262 = lshr i64 %99, 61, !dbg !209
  %263 = and i64 %262, 4, !dbg !209
  %264 = add i64 %263, %99, !dbg !209
  %265 = icmp ugt i64 %264, 3, !dbg !210
  %.not12 = and i1 %30, %265, !dbg !211
  br i1 %.not12, label %266, label %267, !dbg !211

266:                                              ; preds = %256
  tail call void @__assertfail(ptr nonnull @assertMessage_8, ptr nonnull @assertFile_8, i32 170, ptr nonnull @assertFunc_8, i64 1), !dbg !211
  unreachable, !dbg !211

267:                                              ; preds = %256
  tail call void @llvm.nvvm.barrier0(), !dbg !211
  %268 = lshr i64 %101, 61, !dbg !212
  %269 = and i64 %268, 4, !dbg !212
  %270 = add i64 %269, %101, !dbg !212
  %271 = icmp ugt i64 %270, 3, !dbg !213
  %.not13 = and i1 %30, %271, !dbg !214
  br i1 %.not13, label %272, label %273, !dbg !214

272:                                              ; preds = %267
  tail call void @__assertfail(ptr nonnull @assertMessage_9, ptr nonnull @assertFile_9, i32 174, ptr nonnull @assertFunc_9, i64 1), !dbg !214
  unreachable, !dbg !214

273:                                              ; preds = %267
  tail call void @llvm.nvvm.barrier0(), !dbg !214
  %274 = getelementptr float, ptr addrspace(1) %3, i64 %270, !dbg !215
  %.idx14 = shl i64 %264, 4, !dbg !215
  %275 = getelementptr i8, ptr addrspace(1) %274, i64 %.idx14, !dbg !215
  %276 = getelementptr float, ptr addrspace(1) %275, i64 %206, !dbg !215
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 %30) #4, !dbg !216
  %278 = lshr i64 %111, 61, !dbg !217
  %279 = and i64 %278, 4, !dbg !217
  %280 = add i64 %279, %111, !dbg !217
  %281 = icmp ugt i64 %280, 3, !dbg !218
  %.not15 = and i1 %30, %281, !dbg !219
  br i1 %.not15, label %282, label %283, !dbg !219

282:                                              ; preds = %273
  tail call void @__assertfail(ptr nonnull @assertMessage_10, ptr nonnull @assertFile_10, i32 185, ptr nonnull @assertFunc_10, i64 1), !dbg !219
  unreachable, !dbg !219

283:                                              ; preds = %273
  tail call void @llvm.nvvm.barrier0(), !dbg !219
  %284 = lshr i64 %113, 61, !dbg !220
  %285 = and i64 %284, 4, !dbg !220
  %286 = add i64 %285, %113, !dbg !220
  %287 = icmp ugt i64 %286, 3, !dbg !221
  %.not16 = and i1 %30, %287, !dbg !222
  br i1 %.not16, label %288, label %289, !dbg !222

288:                                              ; preds = %283
  tail call void @__assertfail(ptr nonnull @assertMessage_11, ptr nonnull @assertFile_11, i32 189, ptr nonnull @assertFunc_11, i64 1), !dbg !222
  unreachable, !dbg !222

289:                                              ; preds = %283
  tail call void @llvm.nvvm.barrier0(), !dbg !222
  %290 = getelementptr float, ptr addrspace(1) %3, i64 %286, !dbg !223
  %291 = getelementptr i8, ptr addrspace(1) %290, i64 64, !dbg !223
  %.idx17 = shl i64 %280, 4, !dbg !223
  %292 = getelementptr i8, ptr addrspace(1) %291, i64 %.idx17, !dbg !223
  %293 = getelementptr float, ptr addrspace(1) %292, i64 %206, !dbg !223
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %293, i1 %30) #4, !dbg !224
  %295 = lshr i64 %123, 61, !dbg !225
  %296 = and i64 %295, 4, !dbg !225
  %297 = add i64 %296, %123, !dbg !225
  %298 = icmp ugt i64 %297, 3, !dbg !226
  %.not18 = and i1 %30, %298, !dbg !227
  br i1 %.not18, label %299, label %300, !dbg !227

299:                                              ; preds = %289
  tail call void @__assertfail(ptr nonnull @assertMessage_12, ptr nonnull @assertFile_12, i32 201, ptr nonnull @assertFunc_12, i64 1), !dbg !227
  unreachable, !dbg !227

300:                                              ; preds = %289
  tail call void @llvm.nvvm.barrier0(), !dbg !227
  %301 = lshr i64 %125, 61, !dbg !228
  %302 = and i64 %301, 4, !dbg !228
  %303 = add i64 %302, %125, !dbg !228
  %304 = icmp ugt i64 %303, 3, !dbg !229
  %.not19 = and i1 %30, %304, !dbg !230
  br i1 %.not19, label %305, label %306, !dbg !230

305:                                              ; preds = %300
  tail call void @__assertfail(ptr nonnull @assertMessage_13, ptr nonnull @assertFile_13, i32 205, ptr nonnull @assertFunc_13, i64 1), !dbg !230
  unreachable, !dbg !230

306:                                              ; preds = %300
  tail call void @llvm.nvvm.barrier0(), !dbg !230
  %307 = getelementptr float, ptr addrspace(1) %3, i64 %303, !dbg !231
  %308 = getelementptr i8, ptr addrspace(1) %307, i64 128, !dbg !231
  %.idx20 = shl i64 %297, 4, !dbg !231
  %309 = getelementptr i8, ptr addrspace(1) %308, i64 %.idx20, !dbg !231
  %310 = getelementptr float, ptr addrspace(1) %309, i64 %206, !dbg !231
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %310, i1 %30) #4, !dbg !232
  %312 = lshr i64 %135, 61, !dbg !233
  %313 = and i64 %312, 4, !dbg !233
  %314 = add i64 %313, %135, !dbg !233
  %315 = icmp ugt i64 %314, 3, !dbg !234
  %.not21 = and i1 %30, %315, !dbg !235
  br i1 %.not21, label %316, label %317, !dbg !235

316:                                              ; preds = %306
  tail call void @__assertfail(ptr nonnull @assertMessage_14, ptr nonnull @assertFile_14, i32 217, ptr nonnull @assertFunc_14, i64 1), !dbg !235
  unreachable, !dbg !235

317:                                              ; preds = %306
  tail call void @llvm.nvvm.barrier0(), !dbg !235
  %318 = lshr i64 %137, 61, !dbg !236
  %319 = and i64 %318, 4, !dbg !236
  %320 = add i64 %319, %137, !dbg !236
  %321 = icmp ugt i64 %320, 3, !dbg !237
  %.not22 = and i1 %30, %321, !dbg !238
  br i1 %.not22, label %322, label %323, !dbg !238

322:                                              ; preds = %317
  tail call void @__assertfail(ptr nonnull @assertMessage_15, ptr nonnull @assertFile_15, i32 221, ptr nonnull @assertFunc_15, i64 1), !dbg !238
  unreachable, !dbg !238

323:                                              ; preds = %317
  tail call void @llvm.nvvm.barrier0(), !dbg !238
  %324 = getelementptr float, ptr addrspace(1) %3, i64 %320, !dbg !239
  %325 = getelementptr i8, ptr addrspace(1) %324, i64 192, !dbg !239
  %.idx23 = shl i64 %314, 4, !dbg !239
  %326 = getelementptr i8, ptr addrspace(1) %325, i64 %.idx23, !dbg !239
  %327 = getelementptr float, ptr addrspace(1) %326, i64 %206, !dbg !239
  %328 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %327, i1 %30) #4, !dbg !240
  %329 = lshr i64 %147, 61, !dbg !241
  %330 = and i64 %329, 4, !dbg !241
  %331 = add i64 %330, %147, !dbg !241
  %332 = icmp ugt i64 %331, 3, !dbg !242
  %.not24 = and i1 %30, %332, !dbg !243
  br i1 %.not24, label %333, label %334, !dbg !243

333:                                              ; preds = %323
  tail call void @__assertfail(ptr nonnull @assertMessage_16, ptr nonnull @assertFile_16, i32 233, ptr nonnull @assertFunc_16, i64 1), !dbg !243
  unreachable, !dbg !243

334:                                              ; preds = %323
  tail call void @llvm.nvvm.barrier0(), !dbg !243
  %335 = lshr i64 %149, 61, !dbg !244
  %336 = and i64 %335, 4, !dbg !244
  %337 = add i64 %336, %149, !dbg !244
  %338 = icmp ugt i64 %337, 3, !dbg !245
  %.not25 = and i1 %30, %338, !dbg !246
  br i1 %.not25, label %339, label %340, !dbg !246

339:                                              ; preds = %334
  tail call void @__assertfail(ptr nonnull @assertMessage_17, ptr nonnull @assertFile_17, i32 237, ptr nonnull @assertFunc_17, i64 1), !dbg !246
  unreachable, !dbg !246

340:                                              ; preds = %334
  tail call void @llvm.nvvm.barrier0(), !dbg !246
  %341 = getelementptr float, ptr addrspace(1) %3, i64 %337, !dbg !247
  %.idx26 = shl i64 %331, 4, !dbg !247
  %342 = getelementptr i8, ptr addrspace(1) %341, i64 %.idx26, !dbg !247
  %343 = getelementptr float, ptr addrspace(1) %342, i64 %206, !dbg !247
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %343, i1 %30) #4, !dbg !248
  %345 = lshr i64 %159, 61, !dbg !249
  %346 = and i64 %345, 4, !dbg !249
  %347 = add i64 %346, %159, !dbg !249
  %348 = icmp ugt i64 %347, 3, !dbg !250
  %.not27 = and i1 %30, %348, !dbg !251
  br i1 %.not27, label %349, label %350, !dbg !251

349:                                              ; preds = %340
  tail call void @__assertfail(ptr nonnull @assertMessage_18, ptr nonnull @assertFile_18, i32 248, ptr nonnull @assertFunc_18, i64 1), !dbg !251
  unreachable, !dbg !251

350:                                              ; preds = %340
  tail call void @llvm.nvvm.barrier0(), !dbg !251
  %351 = lshr i64 %161, 61, !dbg !252
  %352 = and i64 %351, 4, !dbg !252
  %353 = add i64 %352, %161, !dbg !252
  %354 = icmp ugt i64 %353, 3, !dbg !253
  %.not28 = and i1 %30, %354, !dbg !254
  br i1 %.not28, label %355, label %356, !dbg !254

355:                                              ; preds = %350
  tail call void @__assertfail(ptr nonnull @assertMessage_19, ptr nonnull @assertFile_19, i32 252, ptr nonnull @assertFunc_19, i64 1), !dbg !254
  unreachable, !dbg !254

356:                                              ; preds = %350
  tail call void @llvm.nvvm.barrier0(), !dbg !254
  %357 = getelementptr float, ptr addrspace(1) %3, i64 %353, !dbg !255
  %358 = getelementptr i8, ptr addrspace(1) %357, i64 64, !dbg !255
  %.idx29 = shl i64 %347, 4, !dbg !255
  %359 = getelementptr i8, ptr addrspace(1) %358, i64 %.idx29, !dbg !255
  %360 = getelementptr float, ptr addrspace(1) %359, i64 %206, !dbg !255
  %361 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %360, i1 %30) #4, !dbg !256
  %362 = lshr i64 %171, 61, !dbg !257
  %363 = and i64 %362, 4, !dbg !257
  %364 = add i64 %363, %171, !dbg !257
  %365 = icmp ugt i64 %364, 3, !dbg !258
  %.not30 = and i1 %30, %365, !dbg !259
  br i1 %.not30, label %366, label %367, !dbg !259

366:                                              ; preds = %356
  tail call void @__assertfail(ptr nonnull @assertMessage_20, ptr nonnull @assertFile_20, i32 264, ptr nonnull @assertFunc_20, i64 1), !dbg !259
  unreachable, !dbg !259

367:                                              ; preds = %356
  tail call void @llvm.nvvm.barrier0(), !dbg !259
  %368 = lshr i64 %173, 61, !dbg !260
  %369 = and i64 %368, 4, !dbg !260
  %370 = add i64 %369, %173, !dbg !260
  %371 = icmp ugt i64 %370, 3, !dbg !261
  %.not31 = and i1 %30, %371, !dbg !262
  br i1 %.not31, label %372, label %373, !dbg !262

372:                                              ; preds = %367
  tail call void @__assertfail(ptr nonnull @assertMessage_21, ptr nonnull @assertFile_21, i32 268, ptr nonnull @assertFunc_21, i64 1), !dbg !262
  unreachable, !dbg !262

373:                                              ; preds = %367
  tail call void @llvm.nvvm.barrier0(), !dbg !262
  %374 = getelementptr float, ptr addrspace(1) %3, i64 %370, !dbg !263
  %375 = getelementptr i8, ptr addrspace(1) %374, i64 128, !dbg !263
  %.idx32 = shl i64 %364, 4, !dbg !263
  %376 = getelementptr i8, ptr addrspace(1) %375, i64 %.idx32, !dbg !263
  %377 = getelementptr float, ptr addrspace(1) %376, i64 %206, !dbg !263
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %377, i1 %30) #4, !dbg !264
  %379 = lshr i64 %183, 61, !dbg !265
  %380 = and i64 %379, 4, !dbg !265
  %381 = add i64 %380, %183, !dbg !265
  %382 = icmp ugt i64 %381, 3, !dbg !266
  %.not33 = and i1 %30, %382, !dbg !267
  br i1 %.not33, label %383, label %384, !dbg !267

383:                                              ; preds = %373
  tail call void @__assertfail(ptr nonnull @assertMessage_22, ptr nonnull @assertFile_22, i32 280, ptr nonnull @assertFunc_22, i64 1), !dbg !267
  unreachable, !dbg !267

384:                                              ; preds = %373
  tail call void @llvm.nvvm.barrier0(), !dbg !267
  %385 = lshr i64 %185, 61, !dbg !268
  %386 = and i64 %385, 4, !dbg !268
  %387 = add i64 %386, %185, !dbg !268
  %388 = icmp ugt i64 %387, 3, !dbg !269
  %.not34 = and i1 %30, %388, !dbg !270
  br i1 %.not34, label %389, label %390, !dbg !270

389:                                              ; preds = %384
  tail call void @__assertfail(ptr nonnull @assertMessage_23, ptr nonnull @assertFile_23, i32 284, ptr nonnull @assertFunc_23, i64 1), !dbg !270
  unreachable, !dbg !270

390:                                              ; preds = %384
  %391 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !22
  %392 = insertelement <2 x i32> %391, i32 %53, i64 1, !dbg !22
  %393 = bitcast <2 x i32> %392 to <2 x float>, !dbg !22
  %394 = insertelement <2 x i32> poison, i32 %344, i64 0, !dbg !248
  %395 = insertelement <2 x i32> %394, i32 %361, i64 1, !dbg !248
  %396 = bitcast <2 x i32> %395 to <2 x float>, !dbg !248
  %397 = insertelement <2 x i32> poison, i32 %151, i64 0, !dbg !133
  %398 = insertelement <2 x i32> %397, i32 %163, i64 1, !dbg !133
  %399 = bitcast <2 x i32> %398 to <2 x float>, !dbg !133
  %400 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !135
  %401 = insertelement <2 x i32> %400, i32 %165, i64 1, !dbg !135
  %402 = bitcast <2 x i32> %401 to <2 x float>, !dbg !135
  %403 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !137
  %404 = insertelement <2 x i32> %403, i32 %167, i64 1, !dbg !137
  %405 = bitcast <2 x i32> %404 to <2 x float>, !dbg !137
  %406 = insertelement <2 x i32> poison, i32 %157, i64 0, !dbg !139
  %407 = insertelement <2 x i32> %406, i32 %169, i64 1, !dbg !139
  %408 = bitcast <2 x i32> %407 to <2 x float>, !dbg !139
  %409 = fmul <2 x float> %399, %396, !dbg !271
  %410 = fadd <2 x float> %409, %402, !dbg !272
  %411 = fadd <2 x float> %410, %405, !dbg !273
  %412 = fadd <2 x float> %411, %408, !dbg !274
  %413 = fsub <2 x float> %393, %412, !dbg !275
  %414 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %413), !dbg !276
  %shift = shufflevector <2 x float> %414, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !277
  %415 = fadd <2 x float> %414, %shift, !dbg !277
  %416 = extractelement <2 x float> %415, i64 0, !dbg !277
  %417 = bitcast i32 %69 to float, !dbg !52
  %418 = bitcast i32 %378 to float, !dbg !264
  %419 = bitcast i32 %175 to float, !dbg !157
  %420 = fmul float %419, %418, !dbg !278
  %421 = bitcast i32 %177 to float, !dbg !159
  %422 = fadd float %420, %421, !dbg !279
  %423 = bitcast i32 %179 to float, !dbg !161
  %424 = fadd float %422, %423, !dbg !280
  %425 = bitcast i32 %181 to float, !dbg !163
  %426 = fadd float %424, %425, !dbg !281
  %427 = fsub float %417, %426, !dbg !282
  %428 = tail call float @llvm.fabs.f32(float %427), !dbg !283
  %429 = fadd float %416, %428, !dbg !284
  %430 = insertelement <2 x i32> poison, i32 %277, i64 0, !dbg !216
  %431 = insertelement <2 x i32> %430, i32 %294, i64 1, !dbg !216
  %432 = bitcast <2 x i32> %431 to <2 x float>, !dbg !216
  %433 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !85
  %434 = insertelement <2 x i32> %433, i32 %115, i64 1, !dbg !85
  %435 = bitcast <2 x i32> %434 to <2 x float>, !dbg !85
  %436 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !87
  %437 = insertelement <2 x i32> %436, i32 %117, i64 1, !dbg !87
  %438 = bitcast <2 x i32> %437 to <2 x float>, !dbg !87
  %439 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !89
  %440 = insertelement <2 x i32> %439, i32 %119, i64 1, !dbg !89
  %441 = bitcast <2 x i32> %440 to <2 x float>, !dbg !89
  %442 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !91
  %443 = insertelement <2 x i32> %442, i32 %121, i64 1, !dbg !91
  %444 = bitcast <2 x i32> %443 to <2 x float>, !dbg !91
  %445 = fmul <2 x float> %435, %432, !dbg !285
  %446 = fadd <2 x float> %445, %438, !dbg !286
  %447 = fadd <2 x float> %446, %441, !dbg !287
  %448 = fadd <2 x float> %447, %444, !dbg !288
  %449 = fsub <2 x float> %393, %448, !dbg !289
  %450 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %449), !dbg !290
  %shift36 = shufflevector <2 x float> %450, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !291
  %451 = fadd <2 x float> %450, %shift36, !dbg !291
  %452 = extractelement <2 x float> %451, i64 0, !dbg !291
  %453 = bitcast i32 %311 to float, !dbg !232
  %454 = bitcast i32 %127 to float, !dbg !109
  %455 = fmul float %454, %453, !dbg !292
  %456 = bitcast i32 %129 to float, !dbg !111
  %457 = fadd float %455, %456, !dbg !293
  %458 = bitcast i32 %131 to float, !dbg !113
  %459 = fadd float %457, %458, !dbg !294
  %460 = bitcast i32 %133 to float, !dbg !115
  %461 = fadd float %459, %460, !dbg !295
  %462 = fsub float %417, %461, !dbg !296
  %463 = tail call float @llvm.fabs.f32(float %462), !dbg !297
  %464 = fadd float %452, %463, !dbg !298
  %465 = bitcast i32 %85 to float, !dbg !67
  %466 = bitcast i32 %328 to float, !dbg !240
  %467 = bitcast i32 %139 to float, !dbg !121
  %468 = fmul float %467, %466, !dbg !299
  %469 = bitcast i32 %141 to float, !dbg !123
  %470 = fadd float %468, %469, !dbg !300
  %471 = bitcast i32 %143 to float, !dbg !125
  %472 = fadd float %470, %471, !dbg !301
  %473 = bitcast i32 %145 to float, !dbg !127
  %474 = fadd float %472, %473, !dbg !302
  %475 = fsub float %465, %474, !dbg !303
  %476 = tail call float @llvm.fabs.f32(float %475), !dbg !304
  %477 = fadd float %464, %476, !dbg !305
  %478 = insertelement <2 x i32> poison, i32 %210, i64 0, !dbg !184
  %479 = insertelement <2 x i32> %478, i32 %227, i64 1, !dbg !184
  %480 = bitcast <2 x i32> %479 to <2 x float>, !dbg !184
  %481 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !28
  %482 = insertelement <2 x i32> %481, i32 %59, i64 1, !dbg !28
  %483 = bitcast <2 x i32> %482 to <2 x float>, !dbg !28
  %484 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !30
  %485 = insertelement <2 x i32> %484, i32 %61, i64 1, !dbg !30
  %486 = bitcast <2 x i32> %485 to <2 x float>, !dbg !30
  %487 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !32
  %488 = insertelement <2 x i32> %487, i32 %63, i64 1, !dbg !32
  %489 = bitcast <2 x i32> %488 to <2 x float>, !dbg !32
  %490 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !34
  %491 = insertelement <2 x i32> %490, i32 %65, i64 1, !dbg !34
  %492 = bitcast <2 x i32> %491 to <2 x float>, !dbg !34
  %493 = fmul <2 x float> %483, %480, !dbg !306
  %494 = fadd <2 x float> %493, %486, !dbg !307
  %495 = fadd <2 x float> %494, %489, !dbg !308
  %496 = fadd <2 x float> %495, %492, !dbg !309
  %497 = fsub <2 x float> %393, %496, !dbg !310
  %498 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %497), !dbg !311
  %shift37 = shufflevector <2 x float> %498, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !312
  %499 = fadd <2 x float> %498, %shift37, !dbg !312
  %500 = extractelement <2 x float> %499, i64 0, !dbg !312
  %501 = bitcast i32 %244 to float, !dbg !200
  %502 = bitcast i32 %75 to float, !dbg !58
  %503 = fmul float %502, %501, !dbg !313
  %504 = bitcast i32 %77 to float, !dbg !60
  %505 = fadd float %503, %504, !dbg !314
  %506 = bitcast i32 %79 to float, !dbg !62
  %507 = fadd float %505, %506, !dbg !315
  %508 = bitcast i32 %81 to float, !dbg !64
  %509 = fadd float %507, %508, !dbg !316
  %510 = fsub float %417, %509, !dbg !317
  %511 = tail call float @llvm.fabs.f32(float %510), !dbg !318
  %512 = fadd float %500, %511, !dbg !319
  %513 = bitcast i32 %261 to float, !dbg !208
  %514 = bitcast i32 %91 to float, !dbg !73
  %515 = fmul float %514, %513, !dbg !320
  %516 = bitcast i32 %93 to float, !dbg !75
  %517 = fadd float %515, %516, !dbg !321
  %518 = bitcast i32 %95 to float, !dbg !77
  %519 = fadd float %517, %518, !dbg !322
  %520 = bitcast i32 %97 to float, !dbg !79
  %521 = fadd float %519, %520, !dbg !323
  %522 = fsub float %465, %521, !dbg !324
  %523 = tail call float @llvm.fabs.f32(float %522), !dbg !325
  %524 = fadd float %512, %523, !dbg !326
  %525 = bitcast i32 %193 to float, !dbg !175
  %526 = bitcast i32 %191 to float, !dbg !173
  %527 = bitcast i32 %189 to float, !dbg !171
  %528 = bitcast i32 %187 to float, !dbg !169
  tail call void @llvm.nvvm.barrier0(), !dbg !270
  %529 = getelementptr float, ptr addrspace(1) %3, i64 %387, !dbg !327
  %530 = getelementptr i8, ptr addrspace(1) %529, i64 192, !dbg !327
  %.idx35 = shl i64 %381, 4, !dbg !327
  %531 = getelementptr i8, ptr addrspace(1) %530, i64 %.idx35, !dbg !327
  %532 = getelementptr float, ptr addrspace(1) %531, i64 %206, !dbg !327
  %533 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %532, i1 %30) #4, !dbg !328
  %534 = bitcast i32 %533 to float, !dbg !328
  %535 = fmul float %528, %534, !dbg !329
  %536 = fadd float %535, %527, !dbg !330
  %537 = fadd float %536, %526, !dbg !331
  %538 = fadd float %537, %525, !dbg !332
  %539 = fsub float %465, %538, !dbg !333
  %540 = tail call float @llvm.fabs.f32(float %539), !dbg !334
  %541 = fadd float %429, %540, !dbg !335
  %542 = sext i32 %29 to i64, !dbg !336
  %543 = getelementptr float, ptr addrspace(1) %20, i64 %542, !dbg !336
  %544 = bitcast float %524 to i32, !dbg !337
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %544, ptr addrspace(1) %543, i1 %30) #4, !dbg !337
  %545 = getelementptr float, ptr addrspace(1) %21, i64 %542, !dbg !338
  %546 = bitcast float %477 to i32, !dbg !339
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %546, ptr addrspace(1) %545, i1 %30) #4, !dbg !339
  %547 = getelementptr float, ptr addrspace(1) %22, i64 %542, !dbg !340
  %548 = bitcast float %541 to i32, !dbg !341
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %548, ptr addrspace(1) %547, i1 %30) #4, !dbg !341
  ret void, !dbg !342
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py", directory: "inductor_cache/rw")
!4 = !{ptr @triton_poi_fused_grid_sampler_2d_linalg_vector_norm_sub_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_grid_sampler_2d_linalg_vector_norm_sub_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_grid_sampler_2d_linalg_vector_norm_sub_4", linkageName: "triton_poi_fused_grid_sampler_2d_linalg_vector_norm_sub_4", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 19, scope: !11)
!18 = !DILocation(line: 24, column: 19, scope: !11)
!19 = !DILocation(line: 27, column: 38, scope: !11)
!20 = !DILocation(line: 27, column: 35, scope: !11)
!21 = !DILocation(line: 27, column: 30, scope: !11)
!22 = !DILocation(line: 27, column: 43, scope: !11)
!23 = !DILocation(line: 28, column: 30, scope: !11)
!24 = !DILocation(line: 28, column: 43, scope: !11)
!25 = !DILocation(line: 29, column: 30, scope: !11)
!26 = !DILocation(line: 29, column: 43, scope: !11)
!27 = !DILocation(line: 30, column: 31, scope: !11)
!28 = !DILocation(line: 30, column: 44, scope: !11)
!29 = !DILocation(line: 31, column: 31, scope: !11)
!30 = !DILocation(line: 31, column: 44, scope: !11)
!31 = !DILocation(line: 32, column: 31, scope: !11)
!32 = !DILocation(line: 32, column: 44, scope: !11)
!33 = !DILocation(line: 33, column: 31, scope: !11)
!34 = !DILocation(line: 33, column: 44, scope: !11)
!35 = !DILocation(line: 34, column: 41, scope: !11)
!36 = !DILocation(line: 34, column: 31, scope: !11)
!37 = !DILocation(line: 34, column: 49, scope: !11)
!38 = !DILocation(line: 35, column: 31, scope: !11)
!39 = !DILocation(line: 35, column: 49, scope: !11)
!40 = !DILocation(line: 36, column: 31, scope: !11)
!41 = !DILocation(line: 36, column: 49, scope: !11)
!42 = !DILocation(line: 37, column: 31, scope: !11)
!43 = !DILocation(line: 37, column: 49, scope: !11)
!44 = !DILocation(line: 38, column: 31, scope: !11)
!45 = !DILocation(line: 38, column: 49, scope: !11)
!46 = !DILocation(line: 39, column: 31, scope: !11)
!47 = !DILocation(line: 39, column: 49, scope: !11)
!48 = !DILocation(line: 40, column: 31, scope: !11)
!49 = !DILocation(line: 40, column: 49, scope: !11)
!50 = !DILocation(line: 41, column: 41, scope: !11)
!51 = !DILocation(line: 41, column: 31, scope: !11)
!52 = !DILocation(line: 41, column: 49, scope: !11)
!53 = !DILocation(line: 42, column: 31, scope: !11)
!54 = !DILocation(line: 42, column: 49, scope: !11)
!55 = !DILocation(line: 43, column: 31, scope: !11)
!56 = !DILocation(line: 43, column: 49, scope: !11)
!57 = !DILocation(line: 44, column: 31, scope: !11)
!58 = !DILocation(line: 44, column: 49, scope: !11)
!59 = !DILocation(line: 45, column: 31, scope: !11)
!60 = !DILocation(line: 45, column: 49, scope: !11)
!61 = !DILocation(line: 46, column: 31, scope: !11)
!62 = !DILocation(line: 46, column: 49, scope: !11)
!63 = !DILocation(line: 47, column: 31, scope: !11)
!64 = !DILocation(line: 47, column: 49, scope: !11)
!65 = !DILocation(line: 48, column: 41, scope: !11)
!66 = !DILocation(line: 48, column: 31, scope: !11)
!67 = !DILocation(line: 48, column: 49, scope: !11)
!68 = !DILocation(line: 49, column: 31, scope: !11)
!69 = !DILocation(line: 49, column: 49, scope: !11)
!70 = !DILocation(line: 50, column: 31, scope: !11)
!71 = !DILocation(line: 50, column: 49, scope: !11)
!72 = !DILocation(line: 51, column: 31, scope: !11)
!73 = !DILocation(line: 51, column: 49, scope: !11)
!74 = !DILocation(line: 52, column: 31, scope: !11)
!75 = !DILocation(line: 52, column: 49, scope: !11)
!76 = !DILocation(line: 53, column: 31, scope: !11)
!77 = !DILocation(line: 53, column: 49, scope: !11)
!78 = !DILocation(line: 54, column: 31, scope: !11)
!79 = !DILocation(line: 54, column: 49, scope: !11)
!80 = !DILocation(line: 55, column: 31, scope: !11)
!81 = !DILocation(line: 55, column: 44, scope: !11)
!82 = !DILocation(line: 56, column: 31, scope: !11)
!83 = !DILocation(line: 56, column: 44, scope: !11)
!84 = !DILocation(line: 57, column: 33, scope: !11)
!85 = !DILocation(line: 57, column: 46, scope: !11)
!86 = !DILocation(line: 58, column: 33, scope: !11)
!87 = !DILocation(line: 58, column: 46, scope: !11)
!88 = !DILocation(line: 59, column: 33, scope: !11)
!89 = !DILocation(line: 59, column: 46, scope: !11)
!90 = !DILocation(line: 60, column: 33, scope: !11)
!91 = !DILocation(line: 60, column: 46, scope: !11)
!92 = !DILocation(line: 61, column: 32, scope: !11)
!93 = !DILocation(line: 61, column: 50, scope: !11)
!94 = !DILocation(line: 62, column: 32, scope: !11)
!95 = !DILocation(line: 62, column: 50, scope: !11)
!96 = !DILocation(line: 63, column: 33, scope: !11)
!97 = !DILocation(line: 63, column: 51, scope: !11)
!98 = !DILocation(line: 64, column: 33, scope: !11)
!99 = !DILocation(line: 64, column: 51, scope: !11)
!100 = !DILocation(line: 65, column: 33, scope: !11)
!101 = !DILocation(line: 65, column: 51, scope: !11)
!102 = !DILocation(line: 66, column: 33, scope: !11)
!103 = !DILocation(line: 66, column: 51, scope: !11)
!104 = !DILocation(line: 67, column: 32, scope: !11)
!105 = !DILocation(line: 67, column: 50, scope: !11)
!106 = !DILocation(line: 68, column: 32, scope: !11)
!107 = !DILocation(line: 68, column: 50, scope: !11)
!108 = !DILocation(line: 69, column: 33, scope: !11)
!109 = !DILocation(line: 69, column: 51, scope: !11)
!110 = !DILocation(line: 70, column: 33, scope: !11)
!111 = !DILocation(line: 70, column: 51, scope: !11)
!112 = !DILocation(line: 71, column: 33, scope: !11)
!113 = !DILocation(line: 71, column: 51, scope: !11)
!114 = !DILocation(line: 72, column: 33, scope: !11)
!115 = !DILocation(line: 72, column: 51, scope: !11)
!116 = !DILocation(line: 73, column: 32, scope: !11)
!117 = !DILocation(line: 73, column: 50, scope: !11)
!118 = !DILocation(line: 74, column: 32, scope: !11)
!119 = !DILocation(line: 74, column: 50, scope: !11)
!120 = !DILocation(line: 75, column: 33, scope: !11)
!121 = !DILocation(line: 75, column: 51, scope: !11)
!122 = !DILocation(line: 76, column: 33, scope: !11)
!123 = !DILocation(line: 76, column: 51, scope: !11)
!124 = !DILocation(line: 77, column: 33, scope: !11)
!125 = !DILocation(line: 77, column: 51, scope: !11)
!126 = !DILocation(line: 78, column: 33, scope: !11)
!127 = !DILocation(line: 78, column: 51, scope: !11)
!128 = !DILocation(line: 79, column: 33, scope: !11)
!129 = !DILocation(line: 79, column: 46, scope: !11)
!130 = !DILocation(line: 80, column: 33, scope: !11)
!131 = !DILocation(line: 80, column: 46, scope: !11)
!132 = !DILocation(line: 81, column: 33, scope: !11)
!133 = !DILocation(line: 81, column: 46, scope: !11)
!134 = !DILocation(line: 82, column: 33, scope: !11)
!135 = !DILocation(line: 82, column: 46, scope: !11)
!136 = !DILocation(line: 83, column: 33, scope: !11)
!137 = !DILocation(line: 83, column: 46, scope: !11)
!138 = !DILocation(line: 84, column: 33, scope: !11)
!139 = !DILocation(line: 84, column: 46, scope: !11)
!140 = !DILocation(line: 85, column: 33, scope: !11)
!141 = !DILocation(line: 85, column: 51, scope: !11)
!142 = !DILocation(line: 86, column: 33, scope: !11)
!143 = !DILocation(line: 86, column: 51, scope: !11)
!144 = !DILocation(line: 87, column: 33, scope: !11)
!145 = !DILocation(line: 87, column: 51, scope: !11)
!146 = !DILocation(line: 88, column: 33, scope: !11)
!147 = !DILocation(line: 88, column: 51, scope: !11)
!148 = !DILocation(line: 89, column: 33, scope: !11)
!149 = !DILocation(line: 89, column: 51, scope: !11)
!150 = !DILocation(line: 90, column: 33, scope: !11)
!151 = !DILocation(line: 90, column: 51, scope: !11)
!152 = !DILocation(line: 91, column: 33, scope: !11)
!153 = !DILocation(line: 91, column: 51, scope: !11)
!154 = !DILocation(line: 92, column: 33, scope: !11)
!155 = !DILocation(line: 92, column: 51, scope: !11)
!156 = !DILocation(line: 93, column: 33, scope: !11)
!157 = !DILocation(line: 93, column: 51, scope: !11)
!158 = !DILocation(line: 94, column: 33, scope: !11)
!159 = !DILocation(line: 94, column: 51, scope: !11)
!160 = !DILocation(line: 95, column: 33, scope: !11)
!161 = !DILocation(line: 95, column: 51, scope: !11)
!162 = !DILocation(line: 96, column: 33, scope: !11)
!163 = !DILocation(line: 96, column: 51, scope: !11)
!164 = !DILocation(line: 97, column: 33, scope: !11)
!165 = !DILocation(line: 97, column: 51, scope: !11)
!166 = !DILocation(line: 98, column: 33, scope: !11)
!167 = !DILocation(line: 98, column: 51, scope: !11)
!168 = !DILocation(line: 99, column: 33, scope: !11)
!169 = !DILocation(line: 99, column: 51, scope: !11)
!170 = !DILocation(line: 100, column: 33, scope: !11)
!171 = !DILocation(line: 100, column: 51, scope: !11)
!172 = !DILocation(line: 101, column: 33, scope: !11)
!173 = !DILocation(line: 101, column: 51, scope: !11)
!174 = !DILocation(line: 102, column: 33, scope: !11)
!175 = !DILocation(line: 102, column: 51, scope: !11)
!176 = !DILocation(line: 106, column: 32, scope: !11)
!177 = !DILocation(line: 107, column: 37, scope: !11)
!178 = !DILocation(line: 107, column: 60, scope: !11)
!179 = !DILocation(line: 110, column: 33, scope: !11)
!180 = !DILocation(line: 111, column: 38, scope: !11)
!181 = !DILocation(line: 111, column: 62, scope: !11)
!182 = !DILocation(line: 112, column: 48, scope: !11)
!183 = !DILocation(line: 112, column: 31, scope: !11)
!184 = !DILocation(line: 112, column: 56, scope: !11)
!185 = !DILocation(line: 121, column: 35, scope: !11)
!186 = !DILocation(line: 122, column: 38, scope: !11)
!187 = !DILocation(line: 122, column: 62, scope: !11)
!188 = !DILocation(line: 125, column: 35, scope: !11)
!189 = !DILocation(line: 126, column: 38, scope: !11)
!190 = !DILocation(line: 126, column: 62, scope: !11)
!191 = !DILocation(line: 127, column: 31, scope: !11)
!192 = !DILocation(line: 127, column: 62, scope: !11)
!193 = !DILocation(line: 137, column: 35, scope: !11)
!194 = !DILocation(line: 138, column: 38, scope: !11)
!195 = !DILocation(line: 138, column: 62, scope: !11)
!196 = !DILocation(line: 141, column: 35, scope: !11)
!197 = !DILocation(line: 142, column: 38, scope: !11)
!198 = !DILocation(line: 142, column: 62, scope: !11)
!199 = !DILocation(line: 143, column: 31, scope: !11)
!200 = !DILocation(line: 143, column: 62, scope: !11)
!201 = !DILocation(line: 153, column: 35, scope: !11)
!202 = !DILocation(line: 154, column: 38, scope: !11)
!203 = !DILocation(line: 154, column: 62, scope: !11)
!204 = !DILocation(line: 157, column: 35, scope: !11)
!205 = !DILocation(line: 158, column: 38, scope: !11)
!206 = !DILocation(line: 158, column: 62, scope: !11)
!207 = !DILocation(line: 159, column: 31, scope: !11)
!208 = !DILocation(line: 159, column: 62, scope: !11)
!209 = !DILocation(line: 169, column: 35, scope: !11)
!210 = !DILocation(line: 170, column: 38, scope: !11)
!211 = !DILocation(line: 170, column: 62, scope: !11)
!212 = !DILocation(line: 173, column: 36, scope: !11)
!213 = !DILocation(line: 174, column: 39, scope: !11)
!214 = !DILocation(line: 174, column: 64, scope: !11)
!215 = !DILocation(line: 175, column: 32, scope: !11)
!216 = !DILocation(line: 175, column: 59, scope: !11)
!217 = !DILocation(line: 184, column: 38, scope: !11)
!218 = !DILocation(line: 185, column: 39, scope: !11)
!219 = !DILocation(line: 185, column: 64, scope: !11)
!220 = !DILocation(line: 188, column: 38, scope: !11)
!221 = !DILocation(line: 189, column: 39, scope: !11)
!222 = !DILocation(line: 189, column: 64, scope: !11)
!223 = !DILocation(line: 190, column: 32, scope: !11)
!224 = !DILocation(line: 190, column: 65, scope: !11)
!225 = !DILocation(line: 200, column: 38, scope: !11)
!226 = !DILocation(line: 201, column: 39, scope: !11)
!227 = !DILocation(line: 201, column: 64, scope: !11)
!228 = !DILocation(line: 204, column: 38, scope: !11)
!229 = !DILocation(line: 205, column: 39, scope: !11)
!230 = !DILocation(line: 205, column: 64, scope: !11)
!231 = !DILocation(line: 206, column: 32, scope: !11)
!232 = !DILocation(line: 206, column: 65, scope: !11)
!233 = !DILocation(line: 216, column: 38, scope: !11)
!234 = !DILocation(line: 217, column: 39, scope: !11)
!235 = !DILocation(line: 217, column: 64, scope: !11)
!236 = !DILocation(line: 220, column: 38, scope: !11)
!237 = !DILocation(line: 221, column: 39, scope: !11)
!238 = !DILocation(line: 221, column: 64, scope: !11)
!239 = !DILocation(line: 222, column: 32, scope: !11)
!240 = !DILocation(line: 222, column: 65, scope: !11)
!241 = !DILocation(line: 232, column: 38, scope: !11)
!242 = !DILocation(line: 233, column: 39, scope: !11)
!243 = !DILocation(line: 233, column: 64, scope: !11)
!244 = !DILocation(line: 236, column: 38, scope: !11)
!245 = !DILocation(line: 237, column: 39, scope: !11)
!246 = !DILocation(line: 237, column: 64, scope: !11)
!247 = !DILocation(line: 238, column: 32, scope: !11)
!248 = !DILocation(line: 238, column: 60, scope: !11)
!249 = !DILocation(line: 247, column: 38, scope: !11)
!250 = !DILocation(line: 248, column: 39, scope: !11)
!251 = !DILocation(line: 248, column: 64, scope: !11)
!252 = !DILocation(line: 251, column: 38, scope: !11)
!253 = !DILocation(line: 252, column: 39, scope: !11)
!254 = !DILocation(line: 252, column: 64, scope: !11)
!255 = !DILocation(line: 253, column: 32, scope: !11)
!256 = !DILocation(line: 253, column: 65, scope: !11)
!257 = !DILocation(line: 263, column: 38, scope: !11)
!258 = !DILocation(line: 264, column: 39, scope: !11)
!259 = !DILocation(line: 264, column: 64, scope: !11)
!260 = !DILocation(line: 267, column: 38, scope: !11)
!261 = !DILocation(line: 268, column: 39, scope: !11)
!262 = !DILocation(line: 268, column: 64, scope: !11)
!263 = !DILocation(line: 269, column: 32, scope: !11)
!264 = !DILocation(line: 269, column: 65, scope: !11)
!265 = !DILocation(line: 279, column: 38, scope: !11)
!266 = !DILocation(line: 280, column: 39, scope: !11)
!267 = !DILocation(line: 280, column: 64, scope: !11)
!268 = !DILocation(line: 283, column: 38, scope: !11)
!269 = !DILocation(line: 284, column: 39, scope: !11)
!270 = !DILocation(line: 284, column: 64, scope: !11)
!271 = !DILocation(line: 239, column: 22, scope: !11)
!272 = !DILocation(line: 240, column: 22, scope: !11)
!273 = !DILocation(line: 241, column: 22, scope: !11)
!274 = !DILocation(line: 242, column: 22, scope: !11)
!275 = !DILocation(line: 243, column: 20, scope: !11)
!276 = !DILocation(line: 244, column: 25, scope: !11)
!277 = !DILocation(line: 260, column: 22, scope: !11)
!278 = !DILocation(line: 270, column: 22, scope: !11)
!279 = !DILocation(line: 271, column: 22, scope: !11)
!280 = !DILocation(line: 272, column: 22, scope: !11)
!281 = !DILocation(line: 273, column: 22, scope: !11)
!282 = !DILocation(line: 274, column: 21, scope: !11)
!283 = !DILocation(line: 275, column: 25, scope: !11)
!284 = !DILocation(line: 276, column: 22, scope: !11)
!285 = !DILocation(line: 176, column: 22, scope: !11)
!286 = !DILocation(line: 177, column: 22, scope: !11)
!287 = !DILocation(line: 178, column: 22, scope: !11)
!288 = !DILocation(line: 179, column: 22, scope: !11)
!289 = !DILocation(line: 180, column: 20, scope: !11)
!290 = !DILocation(line: 181, column: 25, scope: !11)
!291 = !DILocation(line: 197, column: 22, scope: !11)
!292 = !DILocation(line: 207, column: 22, scope: !11)
!293 = !DILocation(line: 208, column: 22, scope: !11)
!294 = !DILocation(line: 209, column: 22, scope: !11)
!295 = !DILocation(line: 210, column: 22, scope: !11)
!296 = !DILocation(line: 211, column: 21, scope: !11)
!297 = !DILocation(line: 212, column: 25, scope: !11)
!298 = !DILocation(line: 213, column: 22, scope: !11)
!299 = !DILocation(line: 223, column: 22, scope: !11)
!300 = !DILocation(line: 224, column: 22, scope: !11)
!301 = !DILocation(line: 225, column: 22, scope: !11)
!302 = !DILocation(line: 226, column: 22, scope: !11)
!303 = !DILocation(line: 227, column: 21, scope: !11)
!304 = !DILocation(line: 228, column: 25, scope: !11)
!305 = !DILocation(line: 229, column: 22, scope: !11)
!306 = !DILocation(line: 113, column: 20, scope: !11)
!307 = !DILocation(line: 114, column: 20, scope: !11)
!308 = !DILocation(line: 115, column: 20, scope: !11)
!309 = !DILocation(line: 116, column: 20, scope: !11)
!310 = !DILocation(line: 117, column: 19, scope: !11)
!311 = !DILocation(line: 118, column: 24, scope: !11)
!312 = !DILocation(line: 134, column: 20, scope: !11)
!313 = !DILocation(line: 144, column: 20, scope: !11)
!314 = !DILocation(line: 145, column: 20, scope: !11)
!315 = !DILocation(line: 146, column: 20, scope: !11)
!316 = !DILocation(line: 147, column: 20, scope: !11)
!317 = !DILocation(line: 148, column: 20, scope: !11)
!318 = !DILocation(line: 149, column: 24, scope: !11)
!319 = !DILocation(line: 150, column: 20, scope: !11)
!320 = !DILocation(line: 160, column: 20, scope: !11)
!321 = !DILocation(line: 161, column: 20, scope: !11)
!322 = !DILocation(line: 162, column: 20, scope: !11)
!323 = !DILocation(line: 163, column: 20, scope: !11)
!324 = !DILocation(line: 164, column: 20, scope: !11)
!325 = !DILocation(line: 165, column: 24, scope: !11)
!326 = !DILocation(line: 166, column: 20, scope: !11)
!327 = !DILocation(line: 285, column: 32, scope: !11)
!328 = !DILocation(line: 285, column: 65, scope: !11)
!329 = !DILocation(line: 286, column: 22, scope: !11)
!330 = !DILocation(line: 287, column: 22, scope: !11)
!331 = !DILocation(line: 288, column: 22, scope: !11)
!332 = !DILocation(line: 289, column: 22, scope: !11)
!333 = !DILocation(line: 290, column: 21, scope: !11)
!334 = !DILocation(line: 291, column: 25, scope: !11)
!335 = !DILocation(line: 292, column: 22, scope: !11)
!336 = !DILocation(line: 293, column: 25, scope: !11)
!337 = !DILocation(line: 293, column: 37, scope: !11)
!338 = !DILocation(line: 294, column: 25, scope: !11)
!339 = !DILocation(line: 294, column: 38, scope: !11)
!340 = !DILocation(line: 295, column: 25, scope: !11)
!341 = !DILocation(line: 295, column: 38, scope: !11)
!342 = !DILocation(line: 295, column: 4, scope: !11)
