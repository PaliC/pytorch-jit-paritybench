; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit18 = lshr i32 %8, 4, !dbg !12
  %9 = and i32 %.lobit18, 3, !dbg !12
  %10 = and i32 %8, 64, !dbg !12
  %11 = lshr exact i32 %10, 4, !dbg !12
  %12 = or disjoint i32 %9, %11, !dbg !12
  %13 = shl i32 %8, 2, !dbg !12
  %14 = and i32 %13, 4, !dbg !12
  %15 = or disjoint i32 %12, %7, !dbg !13
  %16 = or disjoint i32 %7, %14, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %18 = shl i32 %17, 7, !dbg !15
  %19 = shl i32 %8, 3, !dbg !16
  %20 = and i32 %19, 120, !dbg !16
  %21 = lshr i32 %8, 1, !dbg !16
  %22 = and i32 %21, 63, !dbg !16
  %23 = or disjoint i32 %18, %20, !dbg !17
  %24 = or disjoint i32 %23, 4, !dbg !17
  %25 = or disjoint i32 %18, %22, !dbg !17
  %26 = or disjoint i32 %25, 64, !dbg !17
  %27 = icmp slt i32 %23, 128, !dbg !18
  %28 = icmp slt i32 %25, 128, !dbg !18
  %29 = icmp slt i32 %26, 128, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %30 = sdiv i32 %.frozen, 16, !dbg !19
  %31 = mul i32 %30, 16, !dbg !20
  %.decomposed = sub i32 %.frozen, %31, !dbg !20
  %.frozen22 = freeze i32 %16, !dbg !21
  %32 = sdiv i32 %.frozen22, 256, !dbg !21
  %33 = mul i32 %32, 256, !dbg !22
  %.decomposed23 = sub i32 %.frozen22, %33, !dbg !22
  %34 = shl nsw i32 %.decomposed, 8, !dbg !23
  %35 = shl i32 %30, 13, !dbg !24
  %36 = add i32 %35, %34, !dbg !25
  %37 = add i32 %36, %23, !dbg !26
  %38 = add i32 %36, %24, !dbg !26
  %39 = sext i32 %37 to i64, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !27
  %41 = sext i32 %38 to i64, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !27
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %27) #2, !dbg !28
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !28
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !28
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !28
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !28
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %27) #2, !dbg !28
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !28
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !28
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !28
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !28
  %53 = or disjoint i32 %36, 128, !dbg !29
  %54 = add i32 %53, %23, !dbg !30
  %55 = add i32 %53, %24, !dbg !30
  %56 = sext i32 %54 to i64, !dbg !31
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !31
  %58 = sext i32 %55 to i64, !dbg !31
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !31
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %27) #2, !dbg !32
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !32
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !32
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !32
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !32
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %27) #2, !dbg !32
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !32
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !32
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !32
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !32
  %70 = add i32 %36, 4096, !dbg !33
  %71 = add i32 %70, %23, !dbg !34
  %72 = add i32 %70, %24, !dbg !34
  %73 = sext i32 %71 to i64, !dbg !35
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !35
  %75 = sext i32 %72 to i64, !dbg !35
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !35
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %27) #2, !dbg !36
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !36
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !36
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !36
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !36
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %27) #2, !dbg !36
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !36
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !36
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !36
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !36
  %87 = add i32 %36, 4224, !dbg !37
  %88 = add i32 %87, %23, !dbg !38
  %89 = add i32 %87, %24, !dbg !38
  %90 = sext i32 %88 to i64, !dbg !39
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !39
  %92 = sext i32 %89 to i64, !dbg !39
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !39
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %91, i1 %27) #2, !dbg !40
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !40
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !40
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !40
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !40
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %93, i1 %27) #2, !dbg !40
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !40
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !40
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !40
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !40
  %104 = insertelement <4 x i32> poison, i32 %44, i64 0, !dbg !28
  %105 = insertelement <4 x i32> %104, i32 %45, i64 1, !dbg !28
  %106 = insertelement <4 x i32> %105, i32 %46, i64 2, !dbg !28
  %107 = insertelement <4 x i32> %106, i32 %47, i64 3, !dbg !28
  %108 = bitcast <4 x i32> %107 to <4 x float>, !dbg !28
  %109 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !32
  %110 = insertelement <4 x i32> %109, i32 %62, i64 1, !dbg !32
  %111 = insertelement <4 x i32> %110, i32 %63, i64 2, !dbg !32
  %112 = insertelement <4 x i32> %111, i32 %64, i64 3, !dbg !32
  %113 = bitcast <4 x i32> %112 to <4 x float>, !dbg !32
  %114 = insertelement <4 x i32> poison, i32 %78, i64 0, !dbg !36
  %115 = insertelement <4 x i32> %114, i32 %79, i64 1, !dbg !36
  %116 = insertelement <4 x i32> %115, i32 %80, i64 2, !dbg !36
  %117 = insertelement <4 x i32> %116, i32 %81, i64 3, !dbg !36
  %118 = bitcast <4 x i32> %117 to <4 x float>, !dbg !36
  %119 = insertelement <4 x i32> poison, i32 %95, i64 0, !dbg !40
  %120 = insertelement <4 x i32> %119, i32 %96, i64 1, !dbg !40
  %121 = insertelement <4 x i32> %120, i32 %97, i64 2, !dbg !40
  %122 = insertelement <4 x i32> %121, i32 %98, i64 3, !dbg !40
  %123 = bitcast <4 x i32> %122 to <4 x float>, !dbg !40
  %124 = fcmp ogt <4 x float> %113, %108, !dbg !41
  %125 = fcmp uno <4 x float> %113, zeroinitializer, !dbg !45
  %126 = or <4 x i1> %124, %125, !dbg !46
  %.v = select <4 x i1> %126, <4 x i32> %112, <4 x i32> %107, !dbg !47
  %127 = bitcast <4 x i32> %.v to <4 x float>, !dbg !47
  %128 = fcmp olt <4 x float> %127, %118, !dbg !48
  %129 = fcmp uno <4 x float> %118, zeroinitializer, !dbg !50
  %130 = or <4 x i1> %129, %128, !dbg !51
  %.v19 = select <4 x i1> %130, <4 x i32> %117, <4 x i32> %.v, !dbg !52
  %131 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !52
  %132 = fcmp olt <4 x float> %131, %123, !dbg !53
  %133 = extractelement <4 x i1> %132, i64 0, !dbg !55
  %134 = extractelement <4 x i1> %132, i64 1, !dbg !55
  %135 = extractelement <4 x i1> %132, i64 2, !dbg !55
  %136 = extractelement <4 x i1> %132, i64 3, !dbg !55
  %137 = zext <4 x i1> %124 to <4 x i8>, !dbg !56
  %138 = select <4 x i1> %128, <4 x i8> splat (i8 2), <4 x i8> %137, !dbg !57
  %139 = select <4 x i1> %132, <4 x i8> splat (i8 3), <4 x i8> %138, !dbg !58
  %140 = insertelement <4 x i32> poison, i32 %49, i64 0, !dbg !28
  %141 = insertelement <4 x i32> %140, i32 %50, i64 1, !dbg !28
  %142 = insertelement <4 x i32> %141, i32 %51, i64 2, !dbg !28
  %143 = insertelement <4 x i32> %142, i32 %52, i64 3, !dbg !28
  %144 = bitcast <4 x i32> %143 to <4 x float>, !dbg !28
  %145 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !32
  %146 = insertelement <4 x i32> %145, i32 %67, i64 1, !dbg !32
  %147 = insertelement <4 x i32> %146, i32 %68, i64 2, !dbg !32
  %148 = insertelement <4 x i32> %147, i32 %69, i64 3, !dbg !32
  %149 = bitcast <4 x i32> %148 to <4 x float>, !dbg !32
  %150 = insertelement <4 x i32> poison, i32 %83, i64 0, !dbg !36
  %151 = insertelement <4 x i32> %150, i32 %84, i64 1, !dbg !36
  %152 = insertelement <4 x i32> %151, i32 %85, i64 2, !dbg !36
  %153 = insertelement <4 x i32> %152, i32 %86, i64 3, !dbg !36
  %154 = bitcast <4 x i32> %153 to <4 x float>, !dbg !36
  %155 = insertelement <4 x i32> poison, i32 %100, i64 0, !dbg !40
  %156 = insertelement <4 x i32> %155, i32 %101, i64 1, !dbg !40
  %157 = insertelement <4 x i32> %156, i32 %102, i64 2, !dbg !40
  %158 = insertelement <4 x i32> %157, i32 %103, i64 3, !dbg !40
  %159 = bitcast <4 x i32> %158 to <4 x float>, !dbg !40
  %160 = fcmp ogt <4 x float> %149, %144, !dbg !41
  %161 = fcmp uno <4 x float> %149, zeroinitializer, !dbg !45
  %162 = or <4 x i1> %160, %161, !dbg !46
  %.v20 = select <4 x i1> %162, <4 x i32> %148, <4 x i32> %143, !dbg !47
  %163 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !47
  %164 = fcmp olt <4 x float> %163, %154, !dbg !48
  %165 = fcmp uno <4 x float> %154, zeroinitializer, !dbg !50
  %166 = or <4 x i1> %165, %164, !dbg !51
  %.v21 = select <4 x i1> %166, <4 x i32> %153, <4 x i32> %.v20, !dbg !52
  %167 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !52
  %168 = fcmp olt <4 x float> %167, %159, !dbg !53
  %169 = shufflevector <4 x float> %159, <4 x float> %123, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !59
  %170 = fcmp uno <8 x float> %169, zeroinitializer, !dbg !59
  %171 = extractelement <8 x i1> %170, i64 7, !dbg !55
  %172 = or i1 %171, %133, !dbg !55
  %173 = extractelement <8 x i1> %170, i64 6, !dbg !55
  %174 = or i1 %173, %134, !dbg !55
  %175 = extractelement <8 x i1> %170, i64 5, !dbg !55
  %176 = or i1 %175, %135, !dbg !55
  %177 = extractelement <8 x i1> %170, i64 4, !dbg !55
  %178 = or i1 %177, %136, !dbg !55
  %179 = extractelement <4 x i1> %168, i64 0, !dbg !55
  %180 = extractelement <8 x i1> %170, i64 3, !dbg !55
  %181 = or i1 %180, %179, !dbg !55
  %182 = extractelement <4 x i1> %168, i64 1, !dbg !55
  %183 = extractelement <8 x i1> %170, i64 2, !dbg !55
  %184 = or i1 %183, %182, !dbg !55
  %185 = extractelement <4 x i1> %168, i64 2, !dbg !55
  %186 = extractelement <8 x i1> %170, i64 1, !dbg !55
  %187 = or i1 %186, %185, !dbg !55
  %188 = extractelement <4 x i1> %168, i64 3, !dbg !55
  %189 = extractelement <8 x i1> %170, i64 0, !dbg !55
  %190 = or i1 %189, %188, !dbg !55
  %191 = zext <4 x i1> %160 to <4 x i8>, !dbg !56
  %192 = select <4 x i1> %164, <4 x i8> splat (i8 2), <4 x i8> %191, !dbg !57
  %193 = select <4 x i1> %168, <4 x i8> splat (i8 3), <4 x i8> %192, !dbg !58
  %194 = shl i32 %25, 8, !dbg !60
  %195 = shl i32 %26, 8, !dbg !60
  %196 = shl i32 %32, 15, !dbg !61
  %197 = add i32 %196, %.decomposed23, !dbg !62
  %198 = add i32 %197, %194, !dbg !63
  %199 = add i32 %197, %195, !dbg !63
  %200 = sext i32 %198 to i64, !dbg !64
  %201 = getelementptr float, ptr addrspace(1) %1, i64 %200, !dbg !64
  %202 = sext i32 %199 to i64, !dbg !64
  %203 = getelementptr float, ptr addrspace(1) %1, i64 %202, !dbg !64
  %204 = shl i32 %8, 6, !dbg !65
  %205 = and i32 %204, 960, !dbg !65
  %206 = or disjoint i32 %9, %205, !dbg !65
  %207 = or disjoint i32 %206, %11, !dbg !65
  %208 = and i32 %13, 56, !dbg !65
  %209 = shl i32 %8, 2, !dbg !65
  %210 = and i32 %209, 64, !dbg !65
  %211 = or disjoint i32 %208, %210, !dbg !65
  %212 = shl i32 %8, 2, !dbg !65
  %213 = and i32 %212, 128, !dbg !65
  %214 = or disjoint i32 %211, %213, !dbg !65
  %215 = shl nuw nsw i32 %10, 2, !dbg !65
  %216 = or disjoint i32 %214, %215, !dbg !65
  %217 = or disjoint i32 %216, %14, !dbg !65
  %218 = lshr exact i32 %205, 1, !dbg !65
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %218, !dbg !65
  %220 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %207, !dbg !65
  %221 = extractelement <4 x i32> %.v19, i64 0, !dbg !65
  %222 = select i1 %172, i32 %95, i32 %221, !dbg !66
  %223 = insertelement <1 x i32> poison, i32 %222, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %223, i1 true) #2, !dbg !65
  %224 = or disjoint i32 %207, 8, !dbg !65
  %225 = lshr i32 %224, 1, !dbg !65
  %226 = and i32 %225, 484, !dbg !65
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !65
  %228 = getelementptr inbounds float, ptr addrspace(3) %227, i32 %224, !dbg !65
  %229 = extractelement <4 x i32> %.v19, i64 1, !dbg !65
  %230 = select i1 %174, i32 %96, i32 %229, !dbg !66
  %231 = insertelement <1 x i32> poison, i32 %230, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %231, i1 true) #2, !dbg !65
  %232 = or disjoint i32 %207, 16, !dbg !65
  %233 = lshr i32 %232, 1, !dbg !65
  %234 = and i32 %233, 488, !dbg !65
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %234, !dbg !65
  %236 = getelementptr inbounds float, ptr addrspace(3) %235, i32 %232, !dbg !65
  %237 = extractelement <4 x i32> %.v19, i64 2, !dbg !65
  %238 = select i1 %176, i32 %97, i32 %237, !dbg !66
  %239 = insertelement <1 x i32> poison, i32 %238, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %239, i1 true) #2, !dbg !65
  %240 = or disjoint i32 %207, 24, !dbg !65
  %241 = lshr i32 %240, 1, !dbg !65
  %242 = and i32 %241, 492, !dbg !65
  %243 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %242, !dbg !65
  %244 = getelementptr inbounds float, ptr addrspace(3) %243, i32 %240, !dbg !65
  %245 = extractelement <4 x i32> %.v19, i64 3, !dbg !65
  %246 = select i1 %178, i32 %98, i32 %245, !dbg !66
  %247 = insertelement <1 x i32> poison, i32 %246, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %247, i1 true) #2, !dbg !65
  %248 = or disjoint i32 %207, 32, !dbg !65
  %249 = lshr i32 %248, 1, !dbg !65
  %250 = and i32 %249, 496, !dbg !65
  %251 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %250, !dbg !65
  %252 = getelementptr inbounds float, ptr addrspace(3) %251, i32 %248, !dbg !65
  %253 = extractelement <4 x i32> %.v21, i64 0, !dbg !65
  %254 = select i1 %181, i32 %100, i32 %253, !dbg !66
  %255 = insertelement <1 x i32> poison, i32 %254, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %255, i1 true) #2, !dbg !65
  %256 = or disjoint i32 %207, 40, !dbg !65
  %257 = lshr i32 %256, 1, !dbg !65
  %258 = and i32 %257, 500, !dbg !65
  %259 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %258, !dbg !65
  %260 = getelementptr inbounds float, ptr addrspace(3) %259, i32 %256, !dbg !65
  %261 = extractelement <4 x i32> %.v21, i64 1, !dbg !65
  %262 = select i1 %184, i32 %101, i32 %261, !dbg !66
  %263 = insertelement <1 x i32> poison, i32 %262, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %263, i1 true) #2, !dbg !65
  %264 = or disjoint i32 %207, 48, !dbg !65
  %265 = lshr i32 %264, 1, !dbg !65
  %266 = and i32 %265, 504, !dbg !65
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %266, !dbg !65
  %268 = getelementptr inbounds float, ptr addrspace(3) %267, i32 %264, !dbg !65
  %269 = extractelement <4 x i32> %.v21, i64 2, !dbg !65
  %270 = select i1 %187, i32 %102, i32 %269, !dbg !66
  %271 = insertelement <1 x i32> poison, i32 %270, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %271, i1 true) #2, !dbg !65
  %272 = or disjoint i32 %207, 56, !dbg !65
  %273 = lshr i32 %272, 1, !dbg !65
  %274 = and i32 %273, 508, !dbg !65
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %274, !dbg !65
  %276 = getelementptr inbounds float, ptr addrspace(3) %275, i32 %272, !dbg !65
  %277 = extractelement <4 x i32> %.v21, i64 3, !dbg !65
  %278 = select i1 %190, i32 %103, i32 %277, !dbg !66
  %279 = insertelement <1 x i32> poison, i32 %278, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %279, i1 true) #2, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %280 = lshr exact i32 %216, 1, !dbg !65
  %281 = getelementptr float, ptr addrspace(3) @global_smem, i32 %280, !dbg !65
  %282 = getelementptr float, ptr addrspace(3) %281, i32 %217, !dbg !65
  %283 = or disjoint i32 %217, 512, !dbg !65
  %284 = lshr exact i32 %283, 1, !dbg !65
  %285 = and i32 %284, 2147483644, !dbg !65
  %286 = getelementptr float, ptr addrspace(3) @global_smem, i32 %285, !dbg !65
  %287 = getelementptr float, ptr addrspace(3) %286, i32 %283, !dbg !65
  %288 = load <4 x i32>, ptr addrspace(3) %287, align 16, !dbg !65
  %.extract = load i32, ptr addrspace(3) %282, align 16, !dbg !65
  %289 = getelementptr inbounds i8, ptr addrspace(3) %282, i32 4, !dbg !65
  %.extract11 = load i32, ptr addrspace(3) %289, align 4, !dbg !65
  %290 = getelementptr inbounds i8, ptr addrspace(3) %282, i32 8, !dbg !65
  %.extract12 = load i32, ptr addrspace(3) %290, align 8, !dbg !65
  %291 = getelementptr inbounds i8, ptr addrspace(3) %282, i32 12, !dbg !65
  %.extract13 = load i32, ptr addrspace(3) %291, align 4, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %201, i1 %28) #2, !dbg !65
  %.extract14 = extractelement <4 x i32> %288, i64 0, !dbg !65
  %.extract15 = extractelement <4 x i32> %288, i64 1, !dbg !65
  %.extract16 = extractelement <4 x i32> %288, i64 2, !dbg !65
  %.extract17 = extractelement <4 x i32> %288, i64 3, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %203, i1 %29) #2, !dbg !65
  %292 = shl i32 %15, 7, !dbg !67
  %293 = add i32 %23, %292, !dbg !68
  %294 = sext i32 %293 to i64, !dbg !69
  %295 = getelementptr i8, ptr addrspace(1) %2, i64 %294, !dbg !69
  %296 = bitcast <4 x i8> %139 to i32, !dbg !70
  %297 = bitcast <4 x i8> %193 to i32, !dbg !70
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %296, i32 %297, ptr addrspace(1) %295, i1 %27) #2, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvafwkioxaymnejhlfejpncpy47kqzrtu664rztbzcc76ftx7sj7.py", directory: "inductor_cache/va")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_4", linkageName: "triton_poi_fused_max_pool2d_with_indices_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 39, scope: !7)
!24 = !DILocation(line: 34, column: 49, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 44, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 54, scope: !7)
!29 = !DILocation(line: 35, column: 41, scope: !7)
!30 = !DILocation(line: 35, column: 50, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 60, scope: !7)
!33 = !DILocation(line: 36, column: 42, scope: !7)
!34 = !DILocation(line: 36, column: 51, scope: !7)
!35 = !DILocation(line: 36, column: 30, scope: !7)
!36 = !DILocation(line: 36, column: 61, scope: !7)
!37 = !DILocation(line: 37, column: 42, scope: !7)
!38 = !DILocation(line: 37, column: 51, scope: !7)
!39 = !DILocation(line: 37, column: 30, scope: !7)
!40 = !DILocation(line: 37, column: 61, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 38, column: 40, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !44)
!47 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!48 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !49)
!49 = !DILocation(line: 39, column: 40, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !49)
!53 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !54)
!54 = !DILocation(line: 40, column: 40, scope: !7)
!55 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !54)
!56 = !DILocation(line: 44, column: 33, scope: !7)
!57 = !DILocation(line: 47, column: 35, scope: !7)
!58 = !DILocation(line: 50, column: 35, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !54)
!60 = !DILocation(line: 51, column: 34, scope: !7)
!61 = !DILocation(line: 51, column: 45, scope: !7)
!62 = !DILocation(line: 51, column: 30, scope: !7)
!63 = !DILocation(line: 51, column: 39, scope: !7)
!64 = !DILocation(line: 51, column: 25, scope: !7)
!65 = !DILocation(line: 51, column: 56, scope: !7)
!66 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !54)
!67 = !DILocation(line: 52, column: 34, scope: !7)
!68 = !DILocation(line: 52, column: 30, scope: !7)
!69 = !DILocation(line: 52, column: 25, scope: !7)
!70 = !DILocation(line: 52, column: 46, scope: !7)
!71 = !DILocation(line: 52, column: 4, scope: !7)
