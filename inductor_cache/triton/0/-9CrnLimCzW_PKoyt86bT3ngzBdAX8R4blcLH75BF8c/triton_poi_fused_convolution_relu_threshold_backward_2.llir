; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_threshold_backward_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %.lobit1 = lshr i32 %10, 6, !dbg !12
  %13 = and i32 %.lobit1, 3, !dbg !12
  %14 = or disjoint i32 %9, %12, !dbg !13
  %15 = or disjoint i32 %9, %13, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = or disjoint i32 %15, 8, !dbg !13
  %18 = or disjoint i32 %15, 12, !dbg !13
  %19 = icmp slt i32 %14, 16, !dbg !14
  %20 = icmp slt i32 %15, 16, !dbg !14
  %21 = icmp slt i32 %16, 16, !dbg !14
  %22 = icmp slt i32 %17, 16, !dbg !14
  %23 = icmp slt i32 %18, 16, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %25 = shl i32 %24, 8, !dbg !16
  %26 = lshr i32 %10, 2, !dbg !17
  %27 = and i32 %26, 63, !dbg !17
  %28 = or disjoint i32 %27, 64, !dbg !17
  %29 = or disjoint i32 %27, 128, !dbg !17
  %30 = or disjoint i32 %27, 192, !dbg !17
  %31 = and i32 %11, 252, !dbg !17
  %32 = or disjoint i32 %25, %27, !dbg !18
  %33 = or disjoint i32 %25, %28, !dbg !18
  %34 = or disjoint i32 %25, %29, !dbg !18
  %35 = or disjoint i32 %25, %30, !dbg !18
  %36 = or disjoint i32 %25, %31, !dbg !18
  %37 = shl i32 %32, 2, !dbg !19
  %38 = shl i32 %33, 2, !dbg !19
  %39 = shl i32 %34, 2, !dbg !19
  %40 = shl i32 %35, 2, !dbg !19
  %41 = shl i32 %14, 12, !dbg !20
  %42 = add i32 %37, %41, !dbg !21
  %43 = add i32 %38, %41, !dbg !21
  %44 = add i32 %39, %41, !dbg !21
  %45 = add i32 %40, %41, !dbg !21
  %46 = sext i32 %42 to i64, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !22
  %48 = sext i32 %43 to i64, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !22
  %50 = sext i32 %44 to i64, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !22
  %52 = sext i32 %45 to i64, !dbg !22
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !22
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %19) #2, !dbg !23
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !23
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !23
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !23
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !23
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %19) #2, !dbg !23
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !23
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !23
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %19) #2, !dbg !23
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !23
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !23
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !23
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !23
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %19) #2, !dbg !23
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !23
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !23
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !23
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !23
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1, i1 %19) #2, !dbg !24
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !24
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !24
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !24
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !24
  %79 = shl i32 %15, 12, !dbg !25
  %80 = shl i32 %16, 12, !dbg !25
  %81 = shl i32 %17, 12, !dbg !25
  %82 = shl i32 %18, 12, !dbg !25
  %83 = add i32 %36, %79, !dbg !26
  %84 = add i32 %36, %80, !dbg !26
  %85 = add i32 %36, %81, !dbg !26
  %86 = add i32 %36, %82, !dbg !26
  %87 = sext i32 %83 to i64, !dbg !27
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !27
  %89 = sext i32 %84 to i64, !dbg !27
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !27
  %91 = sext i32 %85 to i64, !dbg !27
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !27
  %93 = sext i32 %86 to i64, !dbg !27
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !27
  %95 = shl i32 %10, 10, !dbg !28
  %96 = and i32 %95, 3072, !dbg !28
  %97 = or disjoint i32 %96, %27, !dbg !28
  %98 = and i32 %11, 1020, !dbg !28
  %99 = lshr exact i32 %96, 6, !dbg !28
  %100 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %99, !dbg !28
  %101 = getelementptr float, ptr addrspace(3) %100, i32 %97, !dbg !28
  %102 = or disjoint i32 %97, 256, !dbg !28
  %103 = lshr i32 %102, 8, !dbg !28
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !28
  %105 = getelementptr float, ptr addrspace(3) %104, i32 %102, !dbg !28
  %106 = or disjoint i32 %97, 512, !dbg !28
  %107 = lshr i32 %106, 8, !dbg !28
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !28
  %109 = getelementptr float, ptr addrspace(3) %108, i32 %106, !dbg !28
  %110 = or disjoint i32 %97, 768, !dbg !28
  %111 = lshr i32 %110, 8, !dbg !28
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !28
  %113 = getelementptr float, ptr addrspace(3) %112, i32 %110, !dbg !28
  %114 = or disjoint i32 %97, 64, !dbg !28
  %115 = getelementptr float, ptr addrspace(3) %100, i32 %114, !dbg !28
  %116 = or disjoint i32 %97, 320, !dbg !28
  %117 = lshr i32 %116, 8, !dbg !28
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !28
  %119 = getelementptr float, ptr addrspace(3) %118, i32 %116, !dbg !28
  %120 = or disjoint i32 %97, 576, !dbg !28
  %121 = lshr i32 %120, 8, !dbg !28
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %121, !dbg !28
  %123 = getelementptr float, ptr addrspace(3) %122, i32 %120, !dbg !28
  %124 = or disjoint i32 %97, 832, !dbg !28
  %125 = lshr i32 %124, 8, !dbg !28
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !28
  %127 = getelementptr float, ptr addrspace(3) %126, i32 %124, !dbg !28
  %128 = or disjoint i32 %97, 128, !dbg !28
  %129 = getelementptr float, ptr addrspace(3) %100, i32 %128, !dbg !28
  %130 = or disjoint i32 %97, 384, !dbg !28
  %131 = lshr i32 %130, 8, !dbg !28
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %131, !dbg !28
  %133 = getelementptr float, ptr addrspace(3) %132, i32 %130, !dbg !28
  %134 = or disjoint i32 %97, 640, !dbg !28
  %135 = lshr i32 %134, 8, !dbg !28
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !28
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %134, !dbg !28
  %138 = or disjoint i32 %97, 896, !dbg !28
  %139 = lshr i32 %138, 8, !dbg !28
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !28
  %141 = getelementptr float, ptr addrspace(3) %140, i32 %138, !dbg !28
  %142 = or disjoint i32 %97, 192, !dbg !28
  %143 = getelementptr float, ptr addrspace(3) %100, i32 %142, !dbg !28
  %144 = or disjoint i32 %97, 448, !dbg !28
  %145 = lshr i32 %144, 8, !dbg !28
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !28
  %147 = getelementptr float, ptr addrspace(3) %146, i32 %144, !dbg !28
  %148 = or disjoint i32 %97, 704, !dbg !28
  %149 = lshr i32 %148, 8, !dbg !28
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i32 %149, !dbg !28
  %151 = getelementptr float, ptr addrspace(3) %150, i32 %148, !dbg !28
  %152 = or disjoint i32 %97, 960, !dbg !28
  %153 = lshr i32 %152, 8, !dbg !28
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !28
  %155 = getelementptr float, ptr addrspace(3) %154, i32 %152, !dbg !28
  %156 = lshr i32 %98, 8, !dbg !28
  %157 = or disjoint i32 %156, %98, !dbg !28
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %157, !dbg !28
  %159 = or disjoint i32 %98, 1, !dbg !28
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %156, !dbg !28
  %161 = getelementptr inbounds float, ptr addrspace(3) %160, i32 %159, !dbg !28
  %162 = or disjoint i32 %98, 2, !dbg !28
  %163 = getelementptr inbounds float, ptr addrspace(3) %160, i32 %162, !dbg !28
  %164 = or disjoint i32 %98, 3, !dbg !28
  %165 = getelementptr inbounds float, ptr addrspace(3) %160, i32 %164, !dbg !28
  %166 = or disjoint i32 %98, 1024, !dbg !28
  %167 = lshr i32 %166, 8, !dbg !28
  %168 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %167, !dbg !28
  %169 = getelementptr inbounds float, ptr addrspace(3) %168, i32 %166, !dbg !28
  %170 = or disjoint i32 %98, 1025, !dbg !28
  %171 = lshr i32 %170, 8, !dbg !28
  %172 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %171, !dbg !28
  %173 = getelementptr inbounds float, ptr addrspace(3) %172, i32 %170, !dbg !28
  %174 = or disjoint i32 %98, 1026, !dbg !28
  %175 = lshr i32 %174, 8, !dbg !28
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %175, !dbg !28
  %177 = getelementptr inbounds float, ptr addrspace(3) %176, i32 %174, !dbg !28
  %178 = or disjoint i32 %98, 1027, !dbg !28
  %179 = lshr i32 %178, 8, !dbg !28
  %180 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %179, !dbg !28
  %181 = getelementptr inbounds float, ptr addrspace(3) %180, i32 %178, !dbg !28
  %182 = or disjoint i32 %98, 2048, !dbg !28
  %183 = lshr i32 %182, 8, !dbg !28
  %184 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %183, !dbg !28
  %185 = getelementptr inbounds float, ptr addrspace(3) %184, i32 %182, !dbg !28
  %186 = or disjoint i32 %98, 2049, !dbg !28
  %187 = lshr i32 %186, 8, !dbg !28
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %187, !dbg !28
  %189 = getelementptr inbounds float, ptr addrspace(3) %188, i32 %186, !dbg !28
  %190 = or disjoint i32 %98, 2050, !dbg !28
  %191 = lshr i32 %190, 8, !dbg !28
  %192 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %191, !dbg !28
  %193 = getelementptr inbounds float, ptr addrspace(3) %192, i32 %190, !dbg !28
  %194 = or disjoint i32 %98, 2051, !dbg !28
  %195 = lshr i32 %194, 8, !dbg !28
  %196 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %195, !dbg !28
  %197 = getelementptr inbounds float, ptr addrspace(3) %196, i32 %194, !dbg !28
  %198 = or disjoint i32 %98, 3072, !dbg !28
  %199 = lshr i32 %198, 8, !dbg !28
  %200 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %199, !dbg !28
  %201 = getelementptr inbounds float, ptr addrspace(3) %200, i32 %198, !dbg !28
  %202 = or disjoint i32 %98, 3073, !dbg !28
  %203 = lshr i32 %202, 8, !dbg !28
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %203, !dbg !28
  %205 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %202, !dbg !28
  %206 = or disjoint i32 %98, 3074, !dbg !28
  %207 = lshr i32 %206, 8, !dbg !28
  %208 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %207, !dbg !28
  %209 = getelementptr inbounds float, ptr addrspace(3) %208, i32 %206, !dbg !28
  %210 = or disjoint i32 %98, 3075, !dbg !28
  %211 = lshr i32 %210, 8, !dbg !28
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %211, !dbg !28
  %213 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %210, !dbg !28
  %214 = getelementptr float, ptr addrspace(1) %3, i64 %87, !dbg !29
  %215 = getelementptr float, ptr addrspace(1) %3, i64 %89, !dbg !29
  %216 = getelementptr float, ptr addrspace(1) %3, i64 %91, !dbg !29
  %217 = getelementptr float, ptr addrspace(1) %3, i64 %93, !dbg !29
  %218 = getelementptr i1, ptr addrspace(1) %4, i64 %46, !dbg !30
  %219 = getelementptr i1, ptr addrspace(1) %4, i64 %48, !dbg !30
  %220 = getelementptr i1, ptr addrspace(1) %4, i64 %50, !dbg !30
  %221 = getelementptr i1, ptr addrspace(1) %4, i64 %52, !dbg !30
  %222 = insertelement <4 x i32> poison, i32 %55, i64 0, !dbg !23
  %223 = insertelement <4 x i32> %222, i32 %56, i64 1, !dbg !23
  %224 = insertelement <4 x i32> %223, i32 %57, i64 2, !dbg !23
  %225 = insertelement <4 x i32> %224, i32 %58, i64 3, !dbg !23
  %226 = bitcast <4 x i32> %225 to <4 x float>, !dbg !23
  %227 = insertelement <4 x i32> poison, i32 %75, i64 0, !dbg !24
  %228 = insertelement <4 x i32> %227, i32 %76, i64 1, !dbg !24
  %229 = insertelement <4 x i32> %228, i32 %77, i64 2, !dbg !24
  %230 = insertelement <4 x i32> %229, i32 %78, i64 3, !dbg !24
  %231 = bitcast <4 x i32> %230 to <4 x float>, !dbg !24
  %232 = fadd <4 x float> %226, %231, !dbg !31
  %233 = fcmp olt <4 x float> %232, zeroinitializer, !dbg !32
  %234 = select <4 x i1> %233, <4 x float> zeroinitializer, <4 x float> %232, !dbg !36
  %235 = fcmp ole <4 x float> %234, zeroinitializer, !dbg !37
  %236 = extractelement <4 x float> %232, i64 0, !dbg !28
  %237 = bitcast float %236 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %237, i1 true) #2, !dbg !28
  %238 = extractelement <4 x float> %232, i64 1, !dbg !28
  %239 = bitcast float %238 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %239, i1 true) #2, !dbg !28
  %240 = extractelement <4 x float> %232, i64 2, !dbg !28
  %241 = bitcast float %240 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %241, i1 true) #2, !dbg !28
  %242 = extractelement <4 x float> %232, i64 3, !dbg !28
  %243 = bitcast float %242 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %243, i1 true) #2, !dbg !28
  %244 = extractelement <4 x float> %234, i64 0, !dbg !38
  %245 = bitcast float %244 to <1 x i32>, !dbg !38
  %246 = extractelement <4 x float> %234, i64 1, !dbg !38
  %247 = bitcast float %246 to <1 x i32>, !dbg !38
  %248 = extractelement <4 x float> %234, i64 2, !dbg !38
  %249 = bitcast float %248 to <1 x i32>, !dbg !38
  %250 = extractelement <4 x float> %234, i64 3, !dbg !38
  %251 = bitcast float %250 to <1 x i32>, !dbg !38
  %252 = insertelement <4 x i32> poison, i32 %60, i64 0, !dbg !23
  %253 = insertelement <4 x i32> %252, i32 %61, i64 1, !dbg !23
  %254 = insertelement <4 x i32> %253, i32 %62, i64 2, !dbg !23
  %255 = insertelement <4 x i32> %254, i32 %63, i64 3, !dbg !23
  %256 = bitcast <4 x i32> %255 to <4 x float>, !dbg !23
  %257 = fadd <4 x float> %256, %231, !dbg !31
  %258 = fcmp olt <4 x float> %257, zeroinitializer, !dbg !32
  %259 = select <4 x i1> %258, <4 x float> zeroinitializer, <4 x float> %257, !dbg !36
  %260 = fcmp ole <4 x float> %259, zeroinitializer, !dbg !37
  %261 = extractelement <4 x float> %257, i64 0, !dbg !28
  %262 = bitcast float %261 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %262, i1 true) #2, !dbg !28
  %263 = extractelement <4 x float> %257, i64 1, !dbg !28
  %264 = bitcast float %263 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %264, i1 true) #2, !dbg !28
  %265 = extractelement <4 x float> %257, i64 2, !dbg !28
  %266 = bitcast float %265 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %266, i1 true) #2, !dbg !28
  %267 = extractelement <4 x float> %257, i64 3, !dbg !28
  %268 = bitcast float %267 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %268, i1 true) #2, !dbg !28
  %269 = extractelement <4 x float> %259, i64 0, !dbg !38
  %270 = bitcast float %269 to <1 x i32>, !dbg !38
  %271 = extractelement <4 x float> %259, i64 1, !dbg !38
  %272 = bitcast float %271 to <1 x i32>, !dbg !38
  %273 = extractelement <4 x float> %259, i64 2, !dbg !38
  %274 = bitcast float %273 to <1 x i32>, !dbg !38
  %275 = extractelement <4 x float> %259, i64 3, !dbg !38
  %276 = bitcast float %275 to <1 x i32>, !dbg !38
  %277 = insertelement <4 x i32> poison, i32 %65, i64 0, !dbg !23
  %278 = insertelement <4 x i32> %277, i32 %66, i64 1, !dbg !23
  %279 = insertelement <4 x i32> %278, i32 %67, i64 2, !dbg !23
  %280 = insertelement <4 x i32> %279, i32 %68, i64 3, !dbg !23
  %281 = bitcast <4 x i32> %280 to <4 x float>, !dbg !23
  %282 = fadd <4 x float> %281, %231, !dbg !31
  %283 = fcmp olt <4 x float> %282, zeroinitializer, !dbg !32
  %284 = select <4 x i1> %283, <4 x float> zeroinitializer, <4 x float> %282, !dbg !36
  %285 = fcmp ole <4 x float> %284, zeroinitializer, !dbg !37
  %286 = extractelement <4 x float> %282, i64 0, !dbg !28
  %287 = bitcast float %286 to <1 x i32>, !dbg !28
  %288 = extractelement <4 x float> %282, i64 1, !dbg !28
  %289 = bitcast float %288 to <1 x i32>, !dbg !28
  %290 = extractelement <4 x float> %282, i64 2, !dbg !28
  %291 = bitcast float %290 to <1 x i32>, !dbg !28
  %292 = extractelement <4 x float> %282, i64 3, !dbg !28
  %293 = bitcast float %292 to <1 x i32>, !dbg !28
  %294 = extractelement <4 x float> %284, i64 0, !dbg !38
  %295 = bitcast float %294 to <1 x i32>, !dbg !38
  %296 = extractelement <4 x float> %284, i64 1, !dbg !38
  %297 = bitcast float %296 to <1 x i32>, !dbg !38
  %298 = extractelement <4 x float> %284, i64 2, !dbg !38
  %299 = bitcast float %298 to <1 x i32>, !dbg !38
  %300 = extractelement <4 x float> %284, i64 3, !dbg !38
  %301 = bitcast float %300 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %287, i1 true) #2, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %289, i1 true) #2, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %291, i1 true) #2, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %293, i1 true) #2, !dbg !28
  %302 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !23
  %303 = insertelement <4 x i32> %302, i32 %71, i64 1, !dbg !23
  %304 = insertelement <4 x i32> %303, i32 %72, i64 2, !dbg !23
  %305 = insertelement <4 x i32> %304, i32 %73, i64 3, !dbg !23
  %306 = bitcast <4 x i32> %305 to <4 x float>, !dbg !23
  %307 = fadd <4 x float> %306, %231, !dbg !31
  %308 = fcmp olt <4 x float> %307, zeroinitializer, !dbg !32
  %309 = select <4 x i1> %308, <4 x float> zeroinitializer, <4 x float> %307, !dbg !36
  %310 = fcmp ole <4 x float> %309, zeroinitializer, !dbg !37
  %311 = extractelement <4 x float> %307, i64 0, !dbg !28
  %312 = bitcast float %311 to <1 x i32>, !dbg !28
  %313 = extractelement <4 x float> %307, i64 1, !dbg !28
  %314 = bitcast float %313 to <1 x i32>, !dbg !28
  %315 = extractelement <4 x float> %307, i64 2, !dbg !28
  %316 = bitcast float %315 to <1 x i32>, !dbg !28
  %317 = extractelement <4 x float> %307, i64 3, !dbg !28
  %318 = bitcast float %317 to <1 x i32>, !dbg !28
  %319 = extractelement <4 x float> %309, i64 0, !dbg !38
  %320 = bitcast float %319 to <1 x i32>, !dbg !38
  %321 = extractelement <4 x float> %309, i64 1, !dbg !38
  %322 = bitcast float %321 to <1 x i32>, !dbg !38
  %323 = extractelement <4 x float> %309, i64 2, !dbg !38
  %324 = bitcast float %323 to <1 x i32>, !dbg !38
  %325 = extractelement <4 x float> %309, i64 3, !dbg !38
  %326 = bitcast float %325 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %312, i1 true) #2, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %314, i1 true) #2, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %316, i1 true) #2, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %318, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %327 = load i32, ptr addrspace(3) %158, align 4, !dbg !28
  %328 = load i32, ptr addrspace(3) %161, align 4, !dbg !28
  %329 = load i32, ptr addrspace(3) %163, align 4, !dbg !28
  %330 = load i32, ptr addrspace(3) %165, align 4, !dbg !28
  %331 = load i32, ptr addrspace(3) %169, align 4, !dbg !28
  %332 = load i32, ptr addrspace(3) %173, align 4, !dbg !28
  %333 = load i32, ptr addrspace(3) %177, align 4, !dbg !28
  %334 = load i32, ptr addrspace(3) %181, align 4, !dbg !28
  %335 = load i32, ptr addrspace(3) %185, align 4, !dbg !28
  %336 = load i32, ptr addrspace(3) %189, align 4, !dbg !28
  %337 = load i32, ptr addrspace(3) %193, align 4, !dbg !28
  %338 = load i32, ptr addrspace(3) %197, align 4, !dbg !28
  %339 = load i32, ptr addrspace(3) %201, align 4, !dbg !28
  %340 = load i32, ptr addrspace(3) %205, align 4, !dbg !28
  %341 = load i32, ptr addrspace(3) %209, align 4, !dbg !28
  %342 = load i32, ptr addrspace(3) %213, align 4, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %327, i32 %328, i32 %329, i32 %330, ptr addrspace(1) %88, i1 %20) #2, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %331, i32 %332, i32 %333, i32 %334, ptr addrspace(1) %90, i1 %21) #2, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %335, i32 %336, i32 %337, i32 %338, ptr addrspace(1) %92, i1 %22) #2, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %339, i32 %340, i32 %341, i32 %342, ptr addrspace(1) %94, i1 %23) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %245, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %247, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %249, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %251, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %270, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %272, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %274, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %276, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %295, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %297, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %299, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %301, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %320, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %322, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %324, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %326, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %343 = load i32, ptr addrspace(3) %158, align 4, !dbg !38
  %344 = load i32, ptr addrspace(3) %161, align 4, !dbg !38
  %345 = load i32, ptr addrspace(3) %163, align 4, !dbg !38
  %346 = load i32, ptr addrspace(3) %165, align 4, !dbg !38
  %347 = load i32, ptr addrspace(3) %169, align 4, !dbg !38
  %348 = load i32, ptr addrspace(3) %173, align 4, !dbg !38
  %349 = load i32, ptr addrspace(3) %177, align 4, !dbg !38
  %350 = load i32, ptr addrspace(3) %181, align 4, !dbg !38
  %351 = load i32, ptr addrspace(3) %185, align 4, !dbg !38
  %352 = load i32, ptr addrspace(3) %189, align 4, !dbg !38
  %353 = load i32, ptr addrspace(3) %193, align 4, !dbg !38
  %354 = load i32, ptr addrspace(3) %197, align 4, !dbg !38
  %355 = load i32, ptr addrspace(3) %201, align 4, !dbg !38
  %356 = load i32, ptr addrspace(3) %205, align 4, !dbg !38
  %357 = load i32, ptr addrspace(3) %209, align 4, !dbg !38
  %358 = load i32, ptr addrspace(3) %213, align 4, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %343, i32 %344, i32 %345, i32 %346, ptr addrspace(1) %214, i1 %20) #2, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %347, i32 %348, i32 %349, i32 %350, ptr addrspace(1) %215, i1 %21) #2, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %351, i32 %352, i32 %353, i32 %354, ptr addrspace(1) %216, i1 %22) #2, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %355, i32 %356, i32 %357, i32 %358, ptr addrspace(1) %217, i1 %23) #2, !dbg !38
  %359 = zext <4 x i1> %235 to <4 x i8>, !dbg !39
  %360 = bitcast <4 x i8> %359 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %360, ptr addrspace(1) %218, i1 %19) #2, !dbg !39
  %361 = zext <4 x i1> %260 to <4 x i8>, !dbg !39
  %362 = bitcast <4 x i8> %361 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %362, ptr addrspace(1) %219, i1 %19) #2, !dbg !39
  %363 = zext <4 x i1> %285 to <4 x i8>, !dbg !39
  %364 = bitcast <4 x i8> %363 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %364, ptr addrspace(1) %220, i1 %19) #2, !dbg !39
  %365 = zext <4 x i1> %310 to <4 x i8>, !dbg !39
  %366 = bitcast <4 x i8> %365 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %366, ptr addrspace(1) %221, i1 %19) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py", directory: "inductor_cache/mi")
!4 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_threshold_backward_2", linkageName: "triton_poi_fused_convolution_relu_threshold_backward_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 32, column: 37, scope: !7)
!20 = !DILocation(line: 32, column: 48, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 53, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 39, column: 35, scope: !7)
!26 = !DILocation(line: 39, column: 30, scope: !7)
!27 = !DILocation(line: 39, column: 25, scope: !7)
!28 = !DILocation(line: 39, column: 46, scope: !7)
!29 = !DILocation(line: 40, column: 25, scope: !7)
!30 = !DILocation(line: 41, column: 25, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 36, column: 40, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 38, column: 19, scope: !7)
!38 = !DILocation(line: 40, column: 46, scope: !7)
!39 = !DILocation(line: 41, column: 54, scope: !7)
!40 = !DILocation(line: 41, column: 4, scope: !7)
