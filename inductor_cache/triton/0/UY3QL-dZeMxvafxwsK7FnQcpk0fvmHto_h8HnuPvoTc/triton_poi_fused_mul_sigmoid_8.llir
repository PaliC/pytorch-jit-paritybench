; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_mul_sigmoid_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !11
  %8 = shl i32 %7, 10, !dbg !12
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %10 = shl i32 %9, 2, !dbg !13
  %11 = and i32 %10, 508, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = or disjoint i32 %11, 2, !dbg !13
  %14 = or disjoint i32 %11, 3, !dbg !13
  %15 = or disjoint i32 %11, 513, !dbg !13
  %16 = or disjoint i32 %11, 514, !dbg !13
  %17 = or disjoint i32 %11, 515, !dbg !13
  %18 = or disjoint i32 %8, %11, !dbg !14
  %19 = or disjoint i32 %8, %12, !dbg !14
  %20 = or disjoint i32 %8, %13, !dbg !14
  %21 = or disjoint i32 %8, %14, !dbg !14
  %22 = or disjoint i32 %18, 512, !dbg !14
  %23 = or disjoint i32 %8, %15, !dbg !14
  %24 = or disjoint i32 %8, %16, !dbg !14
  %25 = or disjoint i32 %8, %17, !dbg !14
  %.frozen = freeze i32 %6, !dbg !15
  %26 = sdiv i32 %.frozen, 512, !dbg !15
  %27 = mul i32 %26, 512, !dbg !16
  %.decomposed = sub i32 %.frozen, %27, !dbg !16
  %28 = shl i32 %26, 12, !dbg !17
  %29 = add i32 %18, %28, !dbg !18
  %30 = add i32 %28, %22, !dbg !18
  %31 = sext i32 %29 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !19
  %33 = sext i32 %30 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !19
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !20
  %40 = bitcast i32 %36 to float, !dbg !20
  %41 = bitcast i32 %37 to float, !dbg !20
  %42 = bitcast i32 %38 to float, !dbg !20
  %43 = bitcast i32 %39 to float, !dbg !20
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !20
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !20
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !20
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !20
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !20
  %49 = bitcast i32 %45 to float, !dbg !20
  %50 = bitcast i32 %46 to float, !dbg !20
  %51 = bitcast i32 %47 to float, !dbg !20
  %52 = bitcast i32 %48 to float, !dbg !20
  %53 = shl i32 %18, 9, !dbg !21
  %54 = shl i32 %19, 9, !dbg !21
  %55 = shl i32 %20, 9, !dbg !21
  %56 = shl i32 %21, 9, !dbg !21
  %57 = shl i32 %22, 9, !dbg !21
  %58 = shl i32 %23, 9, !dbg !21
  %59 = shl i32 %24, 9, !dbg !21
  %60 = shl i32 %25, 9, !dbg !21
  %61 = shl i32 %26, 21, !dbg !22
  %62 = add i32 %61, %.decomposed, !dbg !23
  %63 = add i32 %62, %53, !dbg !24
  %64 = add i32 %62, %54, !dbg !24
  %65 = add i32 %62, %55, !dbg !24
  %66 = add i32 %62, %56, !dbg !24
  %67 = add i32 %62, %57, !dbg !24
  %68 = add i32 %62, %58, !dbg !24
  %69 = add i32 %62, %59, !dbg !24
  %70 = add i32 %62, %60, !dbg !24
  %71 = sext i32 %63 to i64, !dbg !25
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !25
  %73 = sext i32 %64 to i64, !dbg !25
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !25
  %75 = sext i32 %65 to i64, !dbg !25
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !25
  %77 = sext i32 %66 to i64, !dbg !25
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !25
  %79 = sext i32 %67 to i64, !dbg !25
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !25
  %81 = sext i32 %68 to i64, !dbg !25
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !25
  %83 = sext i32 %69 to i64, !dbg !25
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !25
  %85 = sext i32 %70 to i64, !dbg !25
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !25
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !26
  %88 = bitcast i32 %87 to float, !dbg !26
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !26
  %90 = bitcast i32 %89 to float, !dbg !26
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #1, !dbg !26
  %92 = bitcast i32 %91 to float, !dbg !26
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #1, !dbg !26
  %94 = bitcast i32 %93 to float, !dbg !26
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !26
  %96 = bitcast i32 %95 to float, !dbg !26
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !26
  %98 = bitcast i32 %97 to float, !dbg !26
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !26
  %100 = bitcast i32 %99 to float, !dbg !26
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !26
  %102 = bitcast i32 %101 to float, !dbg !26
  %103 = fsub float 0.000000e+00, %40, !dbg !27
  %104 = fsub float 0.000000e+00, %41, !dbg !27
  %105 = fsub float 0.000000e+00, %42, !dbg !27
  %106 = fsub float 0.000000e+00, %43, !dbg !27
  %107 = fsub float 0.000000e+00, %49, !dbg !27
  %108 = fsub float 0.000000e+00, %50, !dbg !27
  %109 = fsub float 0.000000e+00, %51, !dbg !27
  %110 = fsub float 0.000000e+00, %52, !dbg !27
  %111 = fmul float %103, 0x3FF7154760000000, !dbg !31
  %112 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %111) #1, !dbg !31
  %113 = fmul float %104, 0x3FF7154760000000, !dbg !31
  %114 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %113) #1, !dbg !31
  %115 = fmul float %105, 0x3FF7154760000000, !dbg !31
  %116 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %115) #1, !dbg !31
  %117 = fmul float %106, 0x3FF7154760000000, !dbg !31
  %118 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %117) #1, !dbg !31
  %119 = fmul float %107, 0x3FF7154760000000, !dbg !31
  %120 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %119) #1, !dbg !31
  %121 = fmul float %108, 0x3FF7154760000000, !dbg !31
  %122 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %121) #1, !dbg !31
  %123 = fmul float %109, 0x3FF7154760000000, !dbg !31
  %124 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %123) #1, !dbg !31
  %125 = fmul float %110, 0x3FF7154760000000, !dbg !31
  %126 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %125) #1, !dbg !31
  %127 = fadd float %112, 1.000000e+00, !dbg !32
  %128 = fadd float %114, 1.000000e+00, !dbg !32
  %129 = fadd float %116, 1.000000e+00, !dbg !32
  %130 = fadd float %118, 1.000000e+00, !dbg !32
  %131 = fadd float %120, 1.000000e+00, !dbg !32
  %132 = fadd float %122, 1.000000e+00, !dbg !32
  %133 = fadd float %124, 1.000000e+00, !dbg !32
  %134 = fadd float %126, 1.000000e+00, !dbg !32
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %127) #1, !dbg !33
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %128) #1, !dbg !33
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %129) #1, !dbg !33
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %130) #1, !dbg !33
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %131) #1, !dbg !33
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %132) #1, !dbg !33
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %133) #1, !dbg !33
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %134) #1, !dbg !33
  %143 = fmul float %135, %88, !dbg !34
  %144 = fmul float %136, %90, !dbg !34
  %145 = fmul float %137, %92, !dbg !34
  %146 = fmul float %138, %94, !dbg !34
  %147 = fmul float %139, %96, !dbg !34
  %148 = fmul float %140, %98, !dbg !34
  %149 = fmul float %141, %100, !dbg !34
  %150 = fmul float %142, %102, !dbg !34
  %151 = shl i32 %6, 12, !dbg !35
  %152 = add i32 %18, %151, !dbg !36
  %153 = add i32 %151, %22, !dbg !36
  %154 = sext i32 %152 to i64, !dbg !37
  %155 = getelementptr float, ptr addrspace(1) %2, i64 %154, !dbg !37
  %156 = sext i32 %153 to i64, !dbg !37
  %157 = getelementptr float, ptr addrspace(1) %2, i64 %156, !dbg !37
  %158 = bitcast float %143 to i32, !dbg !38
  %159 = bitcast float %144 to i32, !dbg !38
  %160 = bitcast float %145 to i32, !dbg !38
  %161 = bitcast float %146 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %158, i32 %159, i32 %160, i32 %161, ptr addrspace(1) %155, i1 true) #1, !dbg !38
  %162 = bitcast float %147 to i32, !dbg !38
  %163 = bitcast float %148 to i32, !dbg !38
  %164 = bitcast float %149 to i32, !dbg !38
  %165 = bitcast float %150 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %162, i32 %163, i32 %164, i32 %165, ptr addrspace(1) %157, i1 true) #1, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py", directory: "inductor_cache/av")
!4 = !{ptr @triton_poi_fused_mul_sigmoid_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_sigmoid_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_sigmoid_8", linkageName: "triton_poi_fused_mul_sigmoid_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 28, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 26, column: 23, scope: !7)
!15 = !DILocation(line: 29, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 40, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 45, scope: !7)
!21 = !DILocation(line: 33, column: 39, scope: !7)
!22 = !DILocation(line: 33, column: 52, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 44, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 57, scope: !7)
!27 = !DILocation(line: 47, column: 30, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = !DILocation(line: 34, column: 22, scope: !7)
!31 = !DILocation(line: 47, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 47, column: 20, scope: !28, inlinedAt: !30)
!33 = !DILocation(line: 47, column: 16, scope: !28, inlinedAt: !30)
!34 = !DILocation(line: 35, column: 18, scope: !7)
!35 = !DILocation(line: 36, column: 35, scope: !7)
!36 = !DILocation(line: 36, column: 30, scope: !7)
!37 = !DILocation(line: 36, column: 25, scope: !7)
!38 = !DILocation(line: 36, column: 46, scope: !7)
!39 = !DILocation(line: 36, column: 4, scope: !7)
