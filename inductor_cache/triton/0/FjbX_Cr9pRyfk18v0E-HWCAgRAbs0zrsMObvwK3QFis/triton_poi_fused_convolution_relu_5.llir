; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 1, !dbg !12
  %10 = shl nuw nsw i32 %9, 2, !dbg !12
  %11 = and i32 %8, 64, !dbg !12
  %.lobit = lshr exact i32 %11, 6, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %.lobit, !dbg !13
  %14 = or disjoint i32 %13, 2, !dbg !13
  %15 = or disjoint i32 %13, 4, !dbg !13
  %16 = or disjoint i32 %13, 6, !dbg !13
  %17 = icmp slt i32 %12, 768, !dbg !14
  %18 = icmp slt i32 %13, 768, !dbg !14
  %19 = icmp slt i32 %14, 768, !dbg !14
  %20 = icmp slt i32 %15, 768, !dbg !14
  %21 = icmp slt i32 %16, 768, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %23 = shl i32 %22, 6, !dbg !16
  %24 = lshr i32 %8, 1, !dbg !17
  %25 = and i32 %24, 31, !dbg !17
  %26 = lshr exact i32 %11, 1, !dbg !17
  %27 = or disjoint i32 %25, %26, !dbg !17
  %28 = and i32 %8, 63, !dbg !17
  %29 = or disjoint i32 %27, %23, !dbg !18
  %30 = or disjoint i32 %23, %28, !dbg !18
  %31 = icmp slt i32 %29, 49, !dbg !19
  %32 = icmp slt i32 %30, 49, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %33 = sdiv i32 %.frozen, 192, !dbg !20
  %34 = mul i32 %33, 192, !dbg !21
  %.decomposed = sub i32 %.frozen, %34, !dbg !21
  %35 = mul i32 %29, 192, !dbg !22
  %36 = add i32 %35, %.decomposed, !dbg !23
  %37 = mul i32 %33, 9408, !dbg !24
  %38 = add i32 %36, %37, !dbg !25
  %39 = sext i32 %38 to i64, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !26
  %41 = and i1 %17, %31, !dbg !27
  %42 = and i1 %18, %32, !dbg !27
  %43 = and i1 %19, %32, !dbg !27
  %44 = and i1 %20, %32, !dbg !27
  %45 = and i1 %21, %32, !dbg !27
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %41) #2, !dbg !28
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !28
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !28
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !28
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !28
  %51 = sext i32 %.decomposed to i64, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !29
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %17) #2, !dbg !30
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !30
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !30
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !30
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !30
  %58 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !28
  %59 = insertelement <4 x i32> %58, i32 %49, i64 1, !dbg !28
  %60 = insertelement <4 x i32> %59, i32 %48, i64 2, !dbg !28
  %61 = insertelement <4 x i32> %60, i32 %47, i64 3, !dbg !28
  %62 = bitcast <4 x i32> %61 to <4 x float>, !dbg !28
  %63 = insertelement <4 x i32> poison, i32 %57, i64 0, !dbg !30
  %64 = insertelement <4 x i32> %63, i32 %56, i64 1, !dbg !30
  %65 = insertelement <4 x i32> %64, i32 %55, i64 2, !dbg !30
  %66 = insertelement <4 x i32> %65, i32 %54, i64 3, !dbg !30
  %67 = bitcast <4 x i32> %66 to <4 x float>, !dbg !30
  %68 = fadd <4 x float> %62, %67, !dbg !31
  %69 = fcmp olt <4 x float> %68, zeroinitializer, !dbg !32
  %70 = extractelement <4 x i1> %69, i64 3, !dbg !36
  %71 = extractelement <4 x float> %68, i64 3, !dbg !36
  %72 = select i1 %70, float 0.000000e+00, float %71, !dbg !36
  %73 = extractelement <4 x i1> %69, i64 2, !dbg !36
  %74 = extractelement <4 x float> %68, i64 2, !dbg !36
  %75 = select i1 %73, float 0.000000e+00, float %74, !dbg !36
  %76 = extractelement <4 x i1> %69, i64 1, !dbg !36
  %77 = extractelement <4 x float> %68, i64 1, !dbg !36
  %78 = select i1 %76, float 0.000000e+00, float %77, !dbg !36
  %79 = extractelement <4 x i1> %69, i64 0, !dbg !36
  %80 = extractelement <4 x float> %68, i64 0, !dbg !36
  %81 = select i1 %79, float 0.000000e+00, float %80, !dbg !36
  %82 = mul i32 %13, 49, !dbg !37
  %83 = mul i32 %14, 49, !dbg !37
  %84 = mul i32 %15, 49, !dbg !37
  %85 = mul i32 %16, 49, !dbg !37
  %86 = add i32 %30, %82, !dbg !38
  %87 = add i32 %30, %83, !dbg !38
  %88 = add i32 %30, %84, !dbg !38
  %89 = add i32 %30, %85, !dbg !38
  %90 = sext i32 %86 to i64, !dbg !39
  %91 = getelementptr float, ptr addrspace(1) %2, i64 %90, !dbg !39
  %92 = sext i32 %87 to i64, !dbg !39
  %93 = getelementptr float, ptr addrspace(1) %2, i64 %92, !dbg !39
  %94 = sext i32 %88 to i64, !dbg !39
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !39
  %96 = sext i32 %89 to i64, !dbg !39
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !39
  %98 = shl nuw nsw i32 %9, 8, !dbg !40
  %99 = or disjoint i32 %98, %25, !dbg !40
  %100 = or disjoint i32 %99, %26, !dbg !40
  %101 = and i32 %8, 127, !dbg !40
  %.idx = shl nuw nsw i32 %9, 4, !dbg !40
  %102 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !40
  %103 = getelementptr float, ptr addrspace(3) %102, i32 %100, !dbg !40
  %104 = bitcast float %72 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #2, !dbg !40
  %105 = or disjoint i32 %100, 64, !dbg !40
  %106 = lshr i32 %105, 6, !dbg !40
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !40
  %108 = getelementptr float, ptr addrspace(3) %107, i32 %105, !dbg !40
  %109 = bitcast float %75 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !40
  %110 = or disjoint i32 %100, 128, !dbg !40
  %111 = lshr i32 %110, 6, !dbg !40
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !40
  %113 = getelementptr float, ptr addrspace(3) %112, i32 %110, !dbg !40
  %114 = bitcast float %78 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !40
  %115 = or disjoint i32 %100, 192, !dbg !40
  %116 = lshr i32 %115, 6, !dbg !40
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !40
  %118 = getelementptr float, ptr addrspace(3) %117, i32 %115, !dbg !40
  %119 = bitcast float %81 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %120 = lshr i32 %101, 6, !dbg !40
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %120, !dbg !40
  %122 = getelementptr inbounds float, ptr addrspace(3) %121, i32 %101, !dbg !40
  %123 = load i32, ptr addrspace(3) %122, align 4, !dbg !40
  %124 = or disjoint i32 %101, 128, !dbg !40
  %125 = lshr i32 %124, 6, !dbg !40
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %125, !dbg !40
  %127 = getelementptr inbounds float, ptr addrspace(3) %126, i32 %124, !dbg !40
  %128 = load i32, ptr addrspace(3) %127, align 4, !dbg !40
  %129 = or disjoint i32 %101, 256, !dbg !40
  %130 = lshr i32 %129, 6, !dbg !40
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %130, !dbg !40
  %132 = getelementptr inbounds float, ptr addrspace(3) %131, i32 %129, !dbg !40
  %133 = load i32, ptr addrspace(3) %132, align 4, !dbg !40
  %134 = or disjoint i32 %101, 384, !dbg !40
  %135 = lshr i32 %134, 6, !dbg !40
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %135, !dbg !40
  %137 = getelementptr inbounds float, ptr addrspace(3) %136, i32 %134, !dbg !40
  %138 = load i32, ptr addrspace(3) %137, align 4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %91, i1 %42) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %128, ptr addrspace(1) %93, i1 %43) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %133, ptr addrspace(1) %95, i1 %44) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %138, ptr addrspace(1) %97, i1 %45) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7lndrsifwkxsjhyqhl432gpz73gh5pqdmwpqqir5am4p2cnb4em.py", directory: "inductor_cache/7l")
!4 = !{ptr @triton_poi_fused_convolution_relu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_5", linkageName: "triton_poi_fused_convolution_relu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 49, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 36, column: 40, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 37, column: 33, scope: !7)
!38 = !DILocation(line: 37, column: 30, scope: !7)
!39 = !DILocation(line: 37, column: 25, scope: !7)
!40 = !DILocation(line: 37, column: 44, scope: !7)
!41 = !DILocation(line: 37, column: 4, scope: !7)
