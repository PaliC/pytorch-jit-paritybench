; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %16 = shl i32 %15, 2, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = lshr i32 %17, 6, !dbg !12
  %.lobit = and i32 %18, 1, !dbg !12
  %19 = or disjoint i32 %16, 1, !dbg !13
  %20 = or disjoint i32 %16, 2, !dbg !13
  %21 = or disjoint i32 %16, 3, !dbg !13
  %22 = or disjoint i32 %16, %.lobit, !dbg !13
  %23 = or disjoint i32 %22, 2, !dbg !13
  %24 = icmp slt i32 %16, 512, !dbg !14
  %25 = icmp slt i32 %22, 512, !dbg !14
  %26 = icmp slt i32 %23, 512, !dbg !14
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %28 = shl i32 %27, 8, !dbg !16
  %29 = shl i32 %17, 1, !dbg !17
  %30 = and i32 %29, 254, !dbg !17
  %31 = and i32 %17, 127, !dbg !17
  %32 = or disjoint i32 %31, 128, !dbg !17
  %33 = shl i32 %17, 2, !dbg !17
  %34 = and i32 %33, 252, !dbg !17
  %35 = or disjoint i32 %28, %30, !dbg !18
  %36 = or disjoint i32 %28, %31, !dbg !18
  %37 = or disjoint i32 %28, %32, !dbg !18
  %38 = or disjoint i32 %28, %34, !dbg !18
  %39 = icmp slt i32 %35, 256, !dbg !19
  %40 = icmp slt i32 %36, 256, !dbg !19
  %41 = icmp slt i32 %37, 256, !dbg !19
  %42 = icmp slt i32 %38, 256, !dbg !19
  %.frozen = freeze i32 %35, !dbg !20
  %43 = sdiv i32 %.frozen, 16, !dbg !20
  %44 = mul i32 %43, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %44, !dbg !21
  %.frozen6 = freeze i32 %16, !dbg !22
  %45 = sdiv i32 %.frozen6, 128, !dbg !22
  %46 = mul i32 %45, 128, !dbg !23
  %.decomposed7 = sub i32 %.frozen6, %46, !dbg !23
  %.frozen8 = freeze i32 %19, !dbg !22
  %47 = sdiv i32 %.frozen8, 128, !dbg !22
  %48 = mul i32 %47, 128, !dbg !23
  %.decomposed9 = sub i32 %.frozen8, %48, !dbg !23
  %.frozen10 = freeze i32 %20, !dbg !22
  %49 = sdiv i32 %.frozen10, 128, !dbg !22
  %50 = mul i32 %49, 128, !dbg !23
  %.decomposed11 = sub i32 %.frozen10, %50, !dbg !23
  %.frozen12 = freeze i32 %21, !dbg !22
  %51 = sdiv i32 %.frozen12, 128, !dbg !22
  %52 = mul i32 %51, 128, !dbg !23
  %.decomposed13 = sub i32 %.frozen12, %52, !dbg !23
  %53 = sext i32 %43 to i64, !dbg !24
  %54 = getelementptr i64, ptr addrspace(1) %0, i64 %53, !dbg !24
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 %39) #2, !dbg !25
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 %39) #2, !dbg !25
  %57 = sext i32 %.decomposed to i64, !dbg !26
  %58 = getelementptr i64, ptr addrspace(1) %1, i64 %57, !dbg !26
  %59 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %58, i1 %39) #2, !dbg !27
  %60 = extractvalue { i64, i64 } %59, 0, !dbg !27
  %61 = extractvalue { i64, i64 } %59, 1, !dbg !27
  %62 = getelementptr i64, ptr addrspace(1) %3, i64 %57, !dbg !28
  %63 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %62, i1 %39) #2, !dbg !29
  %64 = extractvalue { i64, i64 } %63, 0, !dbg !29
  %65 = extractvalue { i64, i64 } %63, 1, !dbg !29
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !30
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 %39) #2, !dbg !31
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !31
  %69 = extractvalue { i32, i32 } %67, 1, !dbg !31
  %70 = getelementptr i64, ptr addrspace(1) %5, i64 %53, !dbg !32
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %39) #2, !dbg !33
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %39) #2, !dbg !33
  %73 = getelementptr float, ptr addrspace(1) %6, i64 %53, !dbg !34
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %39) #2, !dbg !35
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %39) #2, !dbg !35
  %76 = lshr i64 %55, 61, !dbg !36
  %77 = and i64 %76, 4, !dbg !36
  %78 = add i64 %77, %55, !dbg !36
  %79 = lshr i64 %60, 61, !dbg !37
  %80 = and i64 %79, 4, !dbg !37
  %81 = add i64 %80, %60, !dbg !37
  %82 = lshr i64 %61, 61, !dbg !37
  %83 = and i64 %82, 4, !dbg !37
  %84 = add i64 %83, %61, !dbg !37
  %85 = shl i64 %81, 7, !dbg !38
  %86 = shl i64 %84, 7, !dbg !38
  %87 = sext i32 %.decomposed7 to i64, !dbg !39
  %88 = sext i32 %.decomposed9 to i64, !dbg !39
  %89 = sext i32 %.decomposed11 to i64, !dbg !39
  %90 = sext i32 %.decomposed13 to i64, !dbg !39
  %91 = add i64 %85, %87, !dbg !39
  %92 = add i64 %86, %87, !dbg !39
  %93 = add i64 %85, %88, !dbg !39
  %94 = add i64 %86, %88, !dbg !39
  %95 = add i64 %85, %89, !dbg !39
  %96 = add i64 %86, %89, !dbg !39
  %97 = add i64 %85, %90, !dbg !39
  %98 = add i64 %86, %90, !dbg !39
  %99 = shl i64 %78, 9, !dbg !40
  %100 = shl i32 %45, 11, !dbg !41
  %101 = shl i32 %47, 11, !dbg !41
  %102 = shl i32 %49, 11, !dbg !41
  %103 = shl i32 %51, 11, !dbg !41
  %104 = sext i32 %100 to i64, !dbg !42
  %105 = sext i32 %101 to i64, !dbg !42
  %106 = sext i32 %102 to i64, !dbg !42
  %107 = sext i32 %103 to i64, !dbg !42
  %108 = add i64 %99, %104, !dbg !43
  %109 = add i64 %108, %91, !dbg !42
  %110 = add i64 %108, %92, !dbg !42
  %111 = add i64 %99, %105, !dbg !43
  %112 = add i64 %111, %93, !dbg !42
  %113 = add i64 %111, %94, !dbg !42
  %114 = add i64 %99, %106, !dbg !43
  %115 = add i64 %114, %95, !dbg !42
  %116 = add i64 %114, %96, !dbg !42
  %117 = add i64 %99, %107, !dbg !43
  %118 = add i64 %117, %97, !dbg !42
  %119 = add i64 %117, %98, !dbg !42
  %120 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !44
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %110, !dbg !44
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %112, !dbg !44
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !44
  %124 = getelementptr float, ptr addrspace(1) %2, i64 %115, !dbg !44
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %116, !dbg !44
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !44
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !44
  %128 = and i1 %24, %40, !dbg !45
  %129 = and i1 %24, %41, !dbg !45
  %130 = and i1 %25, %42, !dbg !45
  %131 = and i1 %26, %42, !dbg !45
  %132 = ptrtoint ptr addrspace(1) %120 to i64, !dbg !46
  %133 = ptrtoint ptr addrspace(1) %121 to i64, !dbg !46
  %134 = ptrtoint ptr addrspace(1) %122 to i64, !dbg !46
  %135 = ptrtoint ptr addrspace(1) %123 to i64, !dbg !46
  %136 = ptrtoint ptr addrspace(1) %124 to i64, !dbg !46
  %137 = ptrtoint ptr addrspace(1) %125 to i64, !dbg !46
  %138 = ptrtoint ptr addrspace(1) %126 to i64, !dbg !46
  %139 = ptrtoint ptr addrspace(1) %127 to i64, !dbg !46
  %140 = shl i32 %17, 3, !dbg !46
  %141 = and i32 %140, 1016, !dbg !46
  %142 = and i32 %33, 508, !dbg !46
  %143 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %141, !dbg !46
  %144 = getelementptr i64, ptr addrspace(3) %143, i32 %141, !dbg !46
  %145 = insertelement <1 x i64> poison, i64 %132, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %144, <1 x i64> %145, i1 true) #2, !dbg !46
  %146 = or disjoint i32 %141, 4, !dbg !46
  %147 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %146, !dbg !46
  %148 = getelementptr i64, ptr addrspace(3) %147, i32 %146, !dbg !46
  %149 = insertelement <1 x i64> poison, i64 %133, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %148, <1 x i64> %149, i1 true) #2, !dbg !46
  %150 = or disjoint i32 %141, 1, !dbg !46
  %151 = getelementptr i64, ptr addrspace(3) %143, i32 %150, !dbg !46
  %152 = insertelement <1 x i64> poison, i64 %134, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %151, <1 x i64> %152, i1 true) #2, !dbg !46
  %153 = or disjoint i32 %141, 5, !dbg !46
  %154 = getelementptr i64, ptr addrspace(3) %147, i32 %153, !dbg !46
  %155 = insertelement <1 x i64> poison, i64 %135, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %154, <1 x i64> %155, i1 true) #2, !dbg !46
  %156 = or disjoint i32 %141, 2, !dbg !46
  %157 = getelementptr i64, ptr addrspace(3) %143, i32 %156, !dbg !46
  %158 = insertelement <1 x i64> poison, i64 %136, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %157, <1 x i64> %158, i1 true) #2, !dbg !46
  %159 = or disjoint i32 %141, 6, !dbg !46
  %160 = getelementptr i64, ptr addrspace(3) %147, i32 %159, !dbg !46
  %161 = insertelement <1 x i64> poison, i64 %137, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %160, <1 x i64> %161, i1 true) #2, !dbg !46
  %162 = or disjoint i32 %141, 3, !dbg !46
  %163 = getelementptr i64, ptr addrspace(3) %143, i32 %162, !dbg !46
  %164 = insertelement <1 x i64> poison, i64 %138, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %163, <1 x i64> %164, i1 true) #2, !dbg !46
  %165 = or disjoint i32 %141, 7, !dbg !46
  %166 = getelementptr i64, ptr addrspace(3) %147, i32 %165, !dbg !46
  %167 = insertelement <1 x i64> poison, i64 %139, i64 0, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %166, <1 x i64> %167, i1 true) #2, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %.idx = shl nuw nsw i32 %142, 4, !dbg !46
  %168 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !46
  %169 = load i64, ptr addrspace(3) %168, align 16, !dbg !46
  %170 = or disjoint i32 %142, 512, !dbg !46
  %.idx2 = shl nuw nsw i32 %170, 4, !dbg !46
  %171 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !46
  %172 = load i64, ptr addrspace(3) %171, align 16, !dbg !46
  %173 = inttoptr i64 %169 to ptr addrspace(1), !dbg !46
  %174 = inttoptr i64 %172 to ptr addrspace(1), !dbg !46
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %173, i1 %128) #2, !dbg !46
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !46
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !46
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !46
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !46
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %174, i1 %129) #2, !dbg !46
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !46
  %182 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !46
  %183 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !46
  %184 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !46
  %185 = lshr i64 %64, 61, !dbg !47
  %186 = and i64 %185, 4, !dbg !47
  %187 = add i64 %186, %64, !dbg !47
  %188 = lshr i64 %65, 61, !dbg !47
  %189 = and i64 %188, 4, !dbg !47
  %190 = add i64 %189, %65, !dbg !47
  %191 = shl i64 %187, 7, !dbg !48
  %192 = shl i64 %190, 7, !dbg !48
  %193 = add i64 %191, %87, !dbg !49
  %194 = add i64 %192, %87, !dbg !49
  %195 = add i64 %191, %88, !dbg !49
  %196 = add i64 %192, %88, !dbg !49
  %197 = add i64 %191, %89, !dbg !49
  %198 = add i64 %192, %89, !dbg !49
  %199 = add i64 %191, %90, !dbg !49
  %200 = add i64 %192, %90, !dbg !49
  %201 = add i64 %108, %193, !dbg !50
  %202 = add i64 %108, %194, !dbg !50
  %203 = add i64 %111, %195, !dbg !50
  %204 = add i64 %111, %196, !dbg !50
  %205 = add i64 %114, %197, !dbg !50
  %206 = add i64 %114, %198, !dbg !50
  %207 = add i64 %117, %199, !dbg !50
  %208 = add i64 %117, %200, !dbg !50
  %209 = getelementptr float, ptr addrspace(1) %2, i64 %201, !dbg !51
  %210 = getelementptr float, ptr addrspace(1) %2, i64 %202, !dbg !51
  %211 = getelementptr float, ptr addrspace(1) %2, i64 %203, !dbg !51
  %212 = getelementptr float, ptr addrspace(1) %2, i64 %204, !dbg !51
  %213 = getelementptr float, ptr addrspace(1) %2, i64 %205, !dbg !51
  %214 = getelementptr float, ptr addrspace(1) %2, i64 %206, !dbg !51
  %215 = getelementptr float, ptr addrspace(1) %2, i64 %207, !dbg !51
  %216 = getelementptr float, ptr addrspace(1) %2, i64 %208, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %217 = ptrtoint ptr addrspace(1) %209 to i64, !dbg !52
  %218 = ptrtoint ptr addrspace(1) %210 to i64, !dbg !52
  %219 = ptrtoint ptr addrspace(1) %211 to i64, !dbg !52
  %220 = ptrtoint ptr addrspace(1) %212 to i64, !dbg !52
  %221 = ptrtoint ptr addrspace(1) %213 to i64, !dbg !52
  %222 = ptrtoint ptr addrspace(1) %214 to i64, !dbg !52
  %223 = ptrtoint ptr addrspace(1) %215 to i64, !dbg !52
  %224 = ptrtoint ptr addrspace(1) %216 to i64, !dbg !52
  %225 = insertelement <1 x i64> poison, i64 %217, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %144, <1 x i64> %225, i1 true) #2, !dbg !52
  %226 = insertelement <1 x i64> poison, i64 %218, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %148, <1 x i64> %226, i1 true) #2, !dbg !52
  %227 = insertelement <1 x i64> poison, i64 %219, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %151, <1 x i64> %227, i1 true) #2, !dbg !52
  %228 = insertelement <1 x i64> poison, i64 %220, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %154, <1 x i64> %228, i1 true) #2, !dbg !52
  %229 = insertelement <1 x i64> poison, i64 %221, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %157, <1 x i64> %229, i1 true) #2, !dbg !52
  %230 = insertelement <1 x i64> poison, i64 %222, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %160, <1 x i64> %230, i1 true) #2, !dbg !52
  %231 = insertelement <1 x i64> poison, i64 %223, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %163, <1 x i64> %231, i1 true) #2, !dbg !52
  %232 = insertelement <1 x i64> poison, i64 %224, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %166, <1 x i64> %232, i1 true) #2, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %233 = load i64, ptr addrspace(3) %168, align 16, !dbg !52
  %234 = load i64, ptr addrspace(3) %171, align 16, !dbg !52
  %235 = inttoptr i64 %233 to ptr addrspace(1), !dbg !52
  %236 = inttoptr i64 %234 to ptr addrspace(1), !dbg !52
  %237 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %235, i1 %128) #2, !dbg !52
  %238 = extractvalue { i32, i32, i32, i32 } %237, 0, !dbg !52
  %239 = extractvalue { i32, i32, i32, i32 } %237, 1, !dbg !52
  %240 = extractvalue { i32, i32, i32, i32 } %237, 2, !dbg !52
  %241 = extractvalue { i32, i32, i32, i32 } %237, 3, !dbg !52
  %242 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %236, i1 %129) #2, !dbg !52
  %243 = extractvalue { i32, i32, i32, i32 } %242, 0, !dbg !52
  %244 = extractvalue { i32, i32, i32, i32 } %242, 1, !dbg !52
  %245 = extractvalue { i32, i32, i32, i32 } %242, 2, !dbg !52
  %246 = extractvalue { i32, i32, i32, i32 } %242, 3, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %.idx3 = shl nuw nsw i32 %30, 3, !dbg !53
  %247 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !53
  %248 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 true) #2, !dbg !53
  %249 = shl nuw nsw i32 %30, 1, !dbg !53
  %250 = or disjoint i32 %249, 2, !dbg !53
  %251 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %250, !dbg !53
  %252 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %252, i1 true) #2, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %.idx4 = shl nuw nsw i32 %31, 3, !dbg !53
  %253 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !53
  %254 = load float, ptr addrspace(3) %253, align 8, !dbg !53
  %.idx5 = shl nuw nsw i32 %32, 3, !dbg !53
  %255 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !53
  %256 = load float, ptr addrspace(3) %255, align 8, !dbg !53
  %257 = lshr i64 %71, 61, !dbg !54
  %258 = and i64 %257, 4, !dbg !54
  %259 = add i64 %258, %71, !dbg !54
  %260 = shl i64 %259, 9, !dbg !55
  %261 = add i64 %260, %104, !dbg !56
  %262 = add i64 %261, %91, !dbg !57
  %263 = add i64 %261, %92, !dbg !57
  %264 = add i64 %260, %105, !dbg !56
  %265 = add i64 %264, %93, !dbg !57
  %266 = add i64 %264, %94, !dbg !57
  %267 = add i64 %260, %106, !dbg !56
  %268 = add i64 %267, %95, !dbg !57
  %269 = add i64 %267, %96, !dbg !57
  %270 = add i64 %260, %107, !dbg !56
  %271 = add i64 %270, %97, !dbg !57
  %272 = add i64 %270, %98, !dbg !57
  %273 = getelementptr float, ptr addrspace(1) %2, i64 %262, !dbg !58
  %274 = getelementptr float, ptr addrspace(1) %2, i64 %263, !dbg !58
  %275 = getelementptr float, ptr addrspace(1) %2, i64 %265, !dbg !58
  %276 = getelementptr float, ptr addrspace(1) %2, i64 %266, !dbg !58
  %277 = getelementptr float, ptr addrspace(1) %2, i64 %268, !dbg !58
  %278 = getelementptr float, ptr addrspace(1) %2, i64 %269, !dbg !58
  %279 = getelementptr float, ptr addrspace(1) %2, i64 %271, !dbg !58
  %280 = getelementptr float, ptr addrspace(1) %2, i64 %272, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %281 = ptrtoint ptr addrspace(1) %273 to i64, !dbg !59
  %282 = ptrtoint ptr addrspace(1) %274 to i64, !dbg !59
  %283 = ptrtoint ptr addrspace(1) %275 to i64, !dbg !59
  %284 = ptrtoint ptr addrspace(1) %276 to i64, !dbg !59
  %285 = ptrtoint ptr addrspace(1) %277 to i64, !dbg !59
  %286 = ptrtoint ptr addrspace(1) %278 to i64, !dbg !59
  %287 = ptrtoint ptr addrspace(1) %279 to i64, !dbg !59
  %288 = ptrtoint ptr addrspace(1) %280 to i64, !dbg !59
  %289 = insertelement <1 x i64> poison, i64 %281, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %144, <1 x i64> %289, i1 true) #2, !dbg !59
  %290 = insertelement <1 x i64> poison, i64 %282, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %148, <1 x i64> %290, i1 true) #2, !dbg !59
  %291 = insertelement <1 x i64> poison, i64 %283, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %151, <1 x i64> %291, i1 true) #2, !dbg !59
  %292 = insertelement <1 x i64> poison, i64 %284, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %154, <1 x i64> %292, i1 true) #2, !dbg !59
  %293 = insertelement <1 x i64> poison, i64 %285, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %157, <1 x i64> %293, i1 true) #2, !dbg !59
  %294 = insertelement <1 x i64> poison, i64 %286, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %160, <1 x i64> %294, i1 true) #2, !dbg !59
  %295 = insertelement <1 x i64> poison, i64 %287, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %163, <1 x i64> %295, i1 true) #2, !dbg !59
  %296 = insertelement <1 x i64> poison, i64 %288, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %166, <1 x i64> %296, i1 true) #2, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %297 = load i64, ptr addrspace(3) %168, align 16, !dbg !59
  %298 = load i64, ptr addrspace(3) %171, align 16, !dbg !59
  %299 = inttoptr i64 %297 to ptr addrspace(1), !dbg !59
  %300 = inttoptr i64 %298 to ptr addrspace(1), !dbg !59
  %301 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %299, i1 %128) #2, !dbg !59
  %302 = extractvalue { i32, i32, i32, i32 } %301, 0, !dbg !59
  %303 = extractvalue { i32, i32, i32, i32 } %301, 1, !dbg !59
  %304 = extractvalue { i32, i32, i32, i32 } %301, 2, !dbg !59
  %305 = extractvalue { i32, i32, i32, i32 } %301, 3, !dbg !59
  %306 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %300, i1 %129) #2, !dbg !59
  %307 = extractvalue { i32, i32, i32, i32 } %306, 0, !dbg !59
  %308 = extractvalue { i32, i32, i32, i32 } %306, 1, !dbg !59
  %309 = extractvalue { i32, i32, i32, i32 } %306, 2, !dbg !59
  %310 = extractvalue { i32, i32, i32, i32 } %306, 3, !dbg !59
  %311 = add i64 %261, %193, !dbg !60
  %312 = add i64 %261, %194, !dbg !60
  %313 = add i64 %264, %195, !dbg !60
  %314 = add i64 %264, %196, !dbg !60
  %315 = add i64 %267, %197, !dbg !60
  %316 = add i64 %267, %198, !dbg !60
  %317 = add i64 %270, %199, !dbg !60
  %318 = add i64 %270, %200, !dbg !60
  %319 = getelementptr float, ptr addrspace(1) %2, i64 %311, !dbg !61
  %320 = getelementptr float, ptr addrspace(1) %2, i64 %312, !dbg !61
  %321 = getelementptr float, ptr addrspace(1) %2, i64 %313, !dbg !61
  %322 = getelementptr float, ptr addrspace(1) %2, i64 %314, !dbg !61
  %323 = getelementptr float, ptr addrspace(1) %2, i64 %315, !dbg !61
  %324 = getelementptr float, ptr addrspace(1) %2, i64 %316, !dbg !61
  %325 = getelementptr float, ptr addrspace(1) %2, i64 %317, !dbg !61
  %326 = getelementptr float, ptr addrspace(1) %2, i64 %318, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %327 = ptrtoint ptr addrspace(1) %319 to i64, !dbg !62
  %328 = ptrtoint ptr addrspace(1) %320 to i64, !dbg !62
  %329 = ptrtoint ptr addrspace(1) %321 to i64, !dbg !62
  %330 = ptrtoint ptr addrspace(1) %322 to i64, !dbg !62
  %331 = ptrtoint ptr addrspace(1) %323 to i64, !dbg !62
  %332 = ptrtoint ptr addrspace(1) %324 to i64, !dbg !62
  %333 = ptrtoint ptr addrspace(1) %325 to i64, !dbg !62
  %334 = ptrtoint ptr addrspace(1) %326 to i64, !dbg !62
  %335 = insertelement <1 x i64> poison, i64 %327, i64 0, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %144, <1 x i64> %335, i1 true) #2, !dbg !62
  %336 = insertelement <1 x i64> poison, i64 %328, i64 0, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %148, <1 x i64> %336, i1 true) #2, !dbg !62
  %337 = insertelement <1 x i64> poison, i64 %329, i64 0, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %151, <1 x i64> %337, i1 true) #2, !dbg !62
  %338 = insertelement <1 x i64> poison, i64 %330, i64 0, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %154, <1 x i64> %338, i1 true) #2, !dbg !62
  %339 = insertelement <1 x i64> poison, i64 %331, i64 0, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %157, <1 x i64> %339, i1 true) #2, !dbg !62
  %340 = insertelement <1 x i64> poison, i64 %332, i64 0, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %160, <1 x i64> %340, i1 true) #2, !dbg !62
  %341 = insertelement <1 x i64> poison, i64 %333, i64 0, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %163, <1 x i64> %341, i1 true) #2, !dbg !62
  %342 = insertelement <1 x i64> poison, i64 %334, i64 0, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %166, <1 x i64> %342, i1 true) #2, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %343 = load i64, ptr addrspace(3) %168, align 16, !dbg !62
  %344 = load i64, ptr addrspace(3) %171, align 16, !dbg !62
  %345 = inttoptr i64 %343 to ptr addrspace(1), !dbg !62
  %346 = inttoptr i64 %344 to ptr addrspace(1), !dbg !62
  %347 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %345, i1 %128) #2, !dbg !62
  %348 = extractvalue { i32, i32, i32, i32 } %347, 0, !dbg !62
  %349 = extractvalue { i32, i32, i32, i32 } %347, 1, !dbg !62
  %350 = extractvalue { i32, i32, i32, i32 } %347, 2, !dbg !62
  %351 = extractvalue { i32, i32, i32, i32 } %347, 3, !dbg !62
  %352 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %346, i1 %129) #2, !dbg !62
  %353 = extractvalue { i32, i32, i32, i32 } %352, 0, !dbg !62
  %354 = extractvalue { i32, i32, i32, i32 } %352, 1, !dbg !62
  %355 = extractvalue { i32, i32, i32, i32 } %352, 2, !dbg !62
  %356 = extractvalue { i32, i32, i32, i32 } %352, 3, !dbg !62
  %357 = insertelement <2 x i32> poison, i32 %302, i64 0, !dbg !59
  %358 = insertelement <2 x i32> %357, i32 %176, i64 1, !dbg !59
  %359 = bitcast <2 x i32> %358 to <2 x float>, !dbg !59
  %360 = insertelement <2 x i32> poison, i32 %348, i64 0, !dbg !62
  %361 = insertelement <2 x i32> %360, i32 %238, i64 1, !dbg !62
  %362 = bitcast <2 x i32> %361 to <2 x float>, !dbg !62
  %363 = fsub <2 x float> %362, %359, !dbg !63
  %364 = insertelement <2 x float> poison, float %254, i64 0, !dbg !64
  %365 = shufflevector <2 x float> %364, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %366 = fmul <2 x float> %365, %363, !dbg !64
  %367 = fadd <2 x float> %366, %359, !dbg !65
  %368 = insertelement <2 x i32> poison, i32 %303, i64 0, !dbg !59
  %369 = insertelement <2 x i32> %368, i32 %177, i64 1, !dbg !59
  %370 = bitcast <2 x i32> %369 to <2 x float>, !dbg !59
  %371 = insertelement <2 x i32> poison, i32 %349, i64 0, !dbg !62
  %372 = insertelement <2 x i32> %371, i32 %239, i64 1, !dbg !62
  %373 = bitcast <2 x i32> %372 to <2 x float>, !dbg !62
  %374 = fsub <2 x float> %373, %370, !dbg !63
  %375 = fmul <2 x float> %365, %374, !dbg !64
  %376 = fadd <2 x float> %375, %370, !dbg !65
  %377 = insertelement <2 x i32> poison, i32 %304, i64 0, !dbg !59
  %378 = insertelement <2 x i32> %377, i32 %178, i64 1, !dbg !59
  %379 = bitcast <2 x i32> %378 to <2 x float>, !dbg !59
  %380 = insertelement <2 x i32> poison, i32 %350, i64 0, !dbg !62
  %381 = insertelement <2 x i32> %380, i32 %240, i64 1, !dbg !62
  %382 = bitcast <2 x i32> %381 to <2 x float>, !dbg !62
  %383 = fsub <2 x float> %382, %379, !dbg !63
  %384 = fmul <2 x float> %365, %383, !dbg !64
  %385 = fadd <2 x float> %384, %379, !dbg !65
  %386 = insertelement <2 x i32> poison, i32 %305, i64 0, !dbg !59
  %387 = insertelement <2 x i32> %386, i32 %179, i64 1, !dbg !59
  %388 = bitcast <2 x i32> %387 to <2 x float>, !dbg !59
  %389 = insertelement <2 x i32> poison, i32 %351, i64 0, !dbg !62
  %390 = insertelement <2 x i32> %389, i32 %241, i64 1, !dbg !62
  %391 = bitcast <2 x i32> %390 to <2 x float>, !dbg !62
  %392 = fsub <2 x float> %391, %388, !dbg !63
  %393 = fmul <2 x float> %365, %392, !dbg !64
  %394 = fadd <2 x float> %393, %388, !dbg !65
  %395 = insertelement <2 x i32> poison, i32 %307, i64 0, !dbg !59
  %396 = insertelement <2 x i32> %395, i32 %181, i64 1, !dbg !59
  %397 = bitcast <2 x i32> %396 to <2 x float>, !dbg !59
  %398 = insertelement <2 x i32> poison, i32 %353, i64 0, !dbg !62
  %399 = insertelement <2 x i32> %398, i32 %243, i64 1, !dbg !62
  %400 = bitcast <2 x i32> %399 to <2 x float>, !dbg !62
  %401 = fsub <2 x float> %400, %397, !dbg !63
  %402 = insertelement <2 x float> poison, float %256, i64 0, !dbg !64
  %403 = shufflevector <2 x float> %402, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %404 = fmul <2 x float> %403, %401, !dbg !64
  %405 = fadd <2 x float> %404, %397, !dbg !65
  %406 = insertelement <2 x i32> poison, i32 %308, i64 0, !dbg !59
  %407 = insertelement <2 x i32> %406, i32 %182, i64 1, !dbg !59
  %408 = bitcast <2 x i32> %407 to <2 x float>, !dbg !59
  %409 = insertelement <2 x i32> poison, i32 %354, i64 0, !dbg !62
  %410 = insertelement <2 x i32> %409, i32 %244, i64 1, !dbg !62
  %411 = bitcast <2 x i32> %410 to <2 x float>, !dbg !62
  %412 = fsub <2 x float> %411, %408, !dbg !63
  %413 = fmul <2 x float> %403, %412, !dbg !64
  %414 = fadd <2 x float> %413, %408, !dbg !65
  %415 = insertelement <2 x i32> poison, i32 %309, i64 0, !dbg !59
  %416 = insertelement <2 x i32> %415, i32 %183, i64 1, !dbg !59
  %417 = bitcast <2 x i32> %416 to <2 x float>, !dbg !59
  %418 = insertelement <2 x i32> poison, i32 %355, i64 0, !dbg !62
  %419 = insertelement <2 x i32> %418, i32 %245, i64 1, !dbg !62
  %420 = bitcast <2 x i32> %419 to <2 x float>, !dbg !62
  %421 = fsub <2 x float> %420, %417, !dbg !63
  %422 = fmul <2 x float> %403, %421, !dbg !64
  %423 = fadd <2 x float> %422, %417, !dbg !65
  %424 = insertelement <2 x i32> poison, i32 %310, i64 0, !dbg !59
  %425 = insertelement <2 x i32> %424, i32 %184, i64 1, !dbg !59
  %426 = bitcast <2 x i32> %425 to <2 x float>, !dbg !59
  %427 = insertelement <2 x i32> poison, i32 %356, i64 0, !dbg !62
  %428 = insertelement <2 x i32> %427, i32 %246, i64 1, !dbg !62
  %429 = bitcast <2 x i32> %428 to <2 x float>, !dbg !62
  %430 = fsub <2 x float> %429, %426, !dbg !63
  %431 = fmul <2 x float> %403, %430, !dbg !64
  %432 = fadd <2 x float> %431, %426, !dbg !65
  %433 = extractelement <2 x float> %367, i64 0, !dbg !66
  %434 = extractelement <2 x float> %367, i64 1, !dbg !67
  %435 = fsub float %433, %434, !dbg !66
  %436 = extractelement <2 x float> %376, i64 0, !dbg !66
  %437 = extractelement <2 x float> %376, i64 1, !dbg !67
  %438 = fsub float %436, %437, !dbg !66
  %439 = extractelement <2 x float> %385, i64 0, !dbg !66
  %440 = extractelement <2 x float> %385, i64 1, !dbg !67
  %441 = fsub float %439, %440, !dbg !66
  %442 = extractelement <2 x float> %394, i64 0, !dbg !66
  %443 = extractelement <2 x float> %394, i64 1, !dbg !67
  %444 = fsub float %442, %443, !dbg !66
  %445 = extractelement <2 x float> %405, i64 0, !dbg !66
  %446 = extractelement <2 x float> %405, i64 1, !dbg !67
  %447 = fsub float %445, %446, !dbg !66
  %448 = extractelement <2 x float> %414, i64 0, !dbg !66
  %449 = extractelement <2 x float> %414, i64 1, !dbg !67
  %450 = fsub float %448, %449, !dbg !66
  %451 = extractelement <2 x float> %423, i64 0, !dbg !66
  %452 = extractelement <2 x float> %423, i64 1, !dbg !67
  %453 = fsub float %451, %452, !dbg !66
  %454 = extractelement <2 x float> %432, i64 0, !dbg !66
  %455 = extractelement <2 x float> %432, i64 1, !dbg !67
  %456 = fsub float %454, %455, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %457 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %457, i1 true) #2, !dbg !68
  %458 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %458, i1 true) #2, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %459 = load float, ptr addrspace(3) %253, align 8, !dbg !68
  %460 = load float, ptr addrspace(3) %255, align 8, !dbg !68
  %461 = fmul float %435, %459, !dbg !68
  %462 = fmul float %438, %459, !dbg !68
  %463 = fmul float %441, %459, !dbg !68
  %464 = fmul float %444, %459, !dbg !68
  %465 = fmul float %447, %460, !dbg !68
  %466 = fmul float %450, %460, !dbg !68
  %467 = fmul float %453, %460, !dbg !68
  %468 = fmul float %456, %460, !dbg !68
  %469 = fadd float %434, %461, !dbg !67
  %470 = fadd float %437, %462, !dbg !67
  %471 = fadd float %440, %463, !dbg !67
  %472 = fadd float %443, %464, !dbg !67
  %473 = fadd float %446, %465, !dbg !67
  %474 = fadd float %449, %466, !dbg !67
  %475 = fadd float %452, %467, !dbg !67
  %476 = fadd float %455, %468, !dbg !67
  %477 = fsub float 0.000000e+00, %469, !dbg !69
  %478 = fsub float 0.000000e+00, %470, !dbg !69
  %479 = fsub float 0.000000e+00, %471, !dbg !69
  %480 = fsub float 0.000000e+00, %472, !dbg !69
  %481 = fsub float 0.000000e+00, %473, !dbg !69
  %482 = fsub float 0.000000e+00, %474, !dbg !69
  %483 = fsub float 0.000000e+00, %475, !dbg !69
  %484 = fsub float 0.000000e+00, %476, !dbg !69
  %485 = fmul float %477, 0x3FF7154760000000, !dbg !73
  %486 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %485) #2, !dbg !73
  %487 = fmul float %478, 0x3FF7154760000000, !dbg !73
  %488 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %487) #2, !dbg !73
  %489 = fmul float %479, 0x3FF7154760000000, !dbg !73
  %490 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %489) #2, !dbg !73
  %491 = fmul float %480, 0x3FF7154760000000, !dbg !73
  %492 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %491) #2, !dbg !73
  %493 = fmul float %481, 0x3FF7154760000000, !dbg !73
  %494 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %493) #2, !dbg !73
  %495 = fmul float %482, 0x3FF7154760000000, !dbg !73
  %496 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %495) #2, !dbg !73
  %497 = fmul float %483, 0x3FF7154760000000, !dbg !73
  %498 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %497) #2, !dbg !73
  %499 = fmul float %484, 0x3FF7154760000000, !dbg !73
  %500 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %499) #2, !dbg !73
  %501 = fadd float %486, 1.000000e+00, !dbg !74
  %502 = fadd float %488, 1.000000e+00, !dbg !74
  %503 = fadd float %490, 1.000000e+00, !dbg !74
  %504 = fadd float %492, 1.000000e+00, !dbg !74
  %505 = fadd float %494, 1.000000e+00, !dbg !74
  %506 = fadd float %496, 1.000000e+00, !dbg !74
  %507 = fadd float %498, 1.000000e+00, !dbg !74
  %508 = fadd float %500, 1.000000e+00, !dbg !74
  %509 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %501) #2, !dbg !75
  %510 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %502) #2, !dbg !75
  %511 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %503) #2, !dbg !75
  %512 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %504) #2, !dbg !75
  %513 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %505) #2, !dbg !75
  %514 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %506) #2, !dbg !75
  %515 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %507) #2, !dbg !75
  %516 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %508) #2, !dbg !75
  %517 = getelementptr float, ptr addrspace(1) %7, i64 %109, !dbg !76
  %518 = getelementptr float, ptr addrspace(1) %7, i64 %110, !dbg !76
  %519 = getelementptr float, ptr addrspace(1) %7, i64 %112, !dbg !76
  %520 = getelementptr float, ptr addrspace(1) %7, i64 %113, !dbg !76
  %521 = getelementptr float, ptr addrspace(1) %7, i64 %115, !dbg !76
  %522 = getelementptr float, ptr addrspace(1) %7, i64 %116, !dbg !76
  %523 = getelementptr float, ptr addrspace(1) %7, i64 %118, !dbg !76
  %524 = getelementptr float, ptr addrspace(1) %7, i64 %119, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %525 = ptrtoint ptr addrspace(1) %517 to i64, !dbg !77
  %526 = ptrtoint ptr addrspace(1) %518 to i64, !dbg !77
  %527 = ptrtoint ptr addrspace(1) %519 to i64, !dbg !77
  %528 = ptrtoint ptr addrspace(1) %520 to i64, !dbg !77
  %529 = ptrtoint ptr addrspace(1) %521 to i64, !dbg !77
  %530 = ptrtoint ptr addrspace(1) %522 to i64, !dbg !77
  %531 = ptrtoint ptr addrspace(1) %523 to i64, !dbg !77
  %532 = ptrtoint ptr addrspace(1) %524 to i64, !dbg !77
  %533 = insertelement <1 x i64> poison, i64 %525, i64 0, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %144, <1 x i64> %533, i1 true) #2, !dbg !77
  %534 = insertelement <1 x i64> poison, i64 %526, i64 0, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %148, <1 x i64> %534, i1 true) #2, !dbg !77
  %535 = insertelement <1 x i64> poison, i64 %527, i64 0, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %151, <1 x i64> %535, i1 true) #2, !dbg !77
  %536 = insertelement <1 x i64> poison, i64 %528, i64 0, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %154, <1 x i64> %536, i1 true) #2, !dbg !77
  %537 = insertelement <1 x i64> poison, i64 %529, i64 0, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %157, <1 x i64> %537, i1 true) #2, !dbg !77
  %538 = insertelement <1 x i64> poison, i64 %530, i64 0, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %160, <1 x i64> %538, i1 true) #2, !dbg !77
  %539 = insertelement <1 x i64> poison, i64 %531, i64 0, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %163, <1 x i64> %539, i1 true) #2, !dbg !77
  %540 = insertelement <1 x i64> poison, i64 %532, i64 0, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %166, <1 x i64> %540, i1 true) #2, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %541 = load i64, ptr addrspace(3) %168, align 16, !dbg !77
  %542 = load i64, ptr addrspace(3) %171, align 16, !dbg !77
  %543 = inttoptr i64 %541 to ptr addrspace(1), !dbg !77
  %544 = inttoptr i64 %542 to ptr addrspace(1), !dbg !77
  %545 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %543, i1 %128) #2, !dbg !77
  %546 = extractvalue { i32, i32, i32, i32 } %545, 0, !dbg !77
  %547 = extractvalue { i32, i32, i32, i32 } %545, 1, !dbg !77
  %548 = extractvalue { i32, i32, i32, i32 } %545, 2, !dbg !77
  %549 = extractvalue { i32, i32, i32, i32 } %545, 3, !dbg !77
  %550 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %544, i1 %129) #2, !dbg !77
  %551 = extractvalue { i32, i32, i32, i32 } %550, 0, !dbg !77
  %552 = extractvalue { i32, i32, i32, i32 } %550, 1, !dbg !77
  %553 = extractvalue { i32, i32, i32, i32 } %550, 2, !dbg !77
  %554 = extractvalue { i32, i32, i32, i32 } %550, 3, !dbg !77
  %555 = getelementptr float, ptr addrspace(1) %8, i64 %109, !dbg !78
  %556 = getelementptr float, ptr addrspace(1) %8, i64 %110, !dbg !78
  %557 = getelementptr float, ptr addrspace(1) %8, i64 %112, !dbg !78
  %558 = getelementptr float, ptr addrspace(1) %8, i64 %113, !dbg !78
  %559 = getelementptr float, ptr addrspace(1) %8, i64 %115, !dbg !78
  %560 = getelementptr float, ptr addrspace(1) %8, i64 %116, !dbg !78
  %561 = getelementptr float, ptr addrspace(1) %8, i64 %118, !dbg !78
  %562 = getelementptr float, ptr addrspace(1) %8, i64 %119, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %563 = ptrtoint ptr addrspace(1) %555 to i64, !dbg !79
  %564 = ptrtoint ptr addrspace(1) %556 to i64, !dbg !79
  %565 = ptrtoint ptr addrspace(1) %557 to i64, !dbg !79
  %566 = ptrtoint ptr addrspace(1) %558 to i64, !dbg !79
  %567 = ptrtoint ptr addrspace(1) %559 to i64, !dbg !79
  %568 = ptrtoint ptr addrspace(1) %560 to i64, !dbg !79
  %569 = ptrtoint ptr addrspace(1) %561 to i64, !dbg !79
  %570 = ptrtoint ptr addrspace(1) %562 to i64, !dbg !79
  %571 = insertelement <1 x i64> poison, i64 %563, i64 0, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %144, <1 x i64> %571, i1 true) #2, !dbg !79
  %572 = insertelement <1 x i64> poison, i64 %564, i64 0, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %148, <1 x i64> %572, i1 true) #2, !dbg !79
  %573 = insertelement <1 x i64> poison, i64 %565, i64 0, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %151, <1 x i64> %573, i1 true) #2, !dbg !79
  %574 = insertelement <1 x i64> poison, i64 %566, i64 0, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %154, <1 x i64> %574, i1 true) #2, !dbg !79
  %575 = insertelement <1 x i64> poison, i64 %567, i64 0, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %157, <1 x i64> %575, i1 true) #2, !dbg !79
  %576 = insertelement <1 x i64> poison, i64 %568, i64 0, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %160, <1 x i64> %576, i1 true) #2, !dbg !79
  %577 = insertelement <1 x i64> poison, i64 %569, i64 0, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %163, <1 x i64> %577, i1 true) #2, !dbg !79
  %578 = insertelement <1 x i64> poison, i64 %570, i64 0, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %166, <1 x i64> %578, i1 true) #2, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %579 = load i64, ptr addrspace(3) %168, align 16, !dbg !79
  %580 = load i64, ptr addrspace(3) %171, align 16, !dbg !79
  %581 = inttoptr i64 %579 to ptr addrspace(1), !dbg !79
  %582 = inttoptr i64 %580 to ptr addrspace(1), !dbg !79
  %583 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %581, i1 %128) #2, !dbg !79
  %584 = extractvalue { i32, i32, i32, i32 } %583, 0, !dbg !79
  %585 = extractvalue { i32, i32, i32, i32 } %583, 1, !dbg !79
  %586 = extractvalue { i32, i32, i32, i32 } %583, 2, !dbg !79
  %587 = extractvalue { i32, i32, i32, i32 } %583, 3, !dbg !79
  %588 = bitcast i32 %584 to float, !dbg !79
  %589 = bitcast i32 %585 to float, !dbg !79
  %590 = bitcast i32 %586 to float, !dbg !79
  %591 = bitcast i32 %587 to float, !dbg !79
  %592 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %582, i1 %129) #2, !dbg !79
  %593 = extractvalue { i32, i32, i32, i32 } %592, 0, !dbg !79
  %594 = extractvalue { i32, i32, i32, i32 } %592, 1, !dbg !79
  %595 = extractvalue { i32, i32, i32, i32 } %592, 2, !dbg !79
  %596 = extractvalue { i32, i32, i32, i32 } %592, 3, !dbg !79
  %597 = bitcast i32 %593 to float, !dbg !79
  %598 = bitcast i32 %594 to float, !dbg !79
  %599 = bitcast i32 %595 to float, !dbg !79
  %600 = bitcast i32 %596 to float, !dbg !79
  %601 = fsub float 0.000000e+00, %588, !dbg !80
  %602 = fsub float 0.000000e+00, %589, !dbg !80
  %603 = fsub float 0.000000e+00, %590, !dbg !80
  %604 = fsub float 0.000000e+00, %591, !dbg !80
  %605 = fsub float 0.000000e+00, %597, !dbg !80
  %606 = fsub float 0.000000e+00, %598, !dbg !80
  %607 = fsub float 0.000000e+00, %599, !dbg !80
  %608 = fsub float 0.000000e+00, %600, !dbg !80
  %609 = fmul float %601, 0x3FF7154760000000, !dbg !82
  %610 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %609) #2, !dbg !82
  %611 = fmul float %602, 0x3FF7154760000000, !dbg !82
  %612 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %611) #2, !dbg !82
  %613 = fmul float %603, 0x3FF7154760000000, !dbg !82
  %614 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %613) #2, !dbg !82
  %615 = fmul float %604, 0x3FF7154760000000, !dbg !82
  %616 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %615) #2, !dbg !82
  %617 = fmul float %605, 0x3FF7154760000000, !dbg !82
  %618 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %617) #2, !dbg !82
  %619 = fmul float %606, 0x3FF7154760000000, !dbg !82
  %620 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %619) #2, !dbg !82
  %621 = fmul float %607, 0x3FF7154760000000, !dbg !82
  %622 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %621) #2, !dbg !82
  %623 = fmul float %608, 0x3FF7154760000000, !dbg !82
  %624 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %623) #2, !dbg !82
  %625 = fadd float %610, 1.000000e+00, !dbg !83
  %626 = fadd float %612, 1.000000e+00, !dbg !83
  %627 = fadd float %614, 1.000000e+00, !dbg !83
  %628 = fadd float %616, 1.000000e+00, !dbg !83
  %629 = fadd float %618, 1.000000e+00, !dbg !83
  %630 = fadd float %620, 1.000000e+00, !dbg !83
  %631 = fadd float %622, 1.000000e+00, !dbg !83
  %632 = fadd float %624, 1.000000e+00, !dbg !83
  %633 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %625) #2, !dbg !84
  %634 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %626) #2, !dbg !84
  %635 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %627) #2, !dbg !84
  %636 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %628) #2, !dbg !84
  %637 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %629) #2, !dbg !84
  %638 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %630) #2, !dbg !84
  %639 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %631) #2, !dbg !84
  %640 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %632) #2, !dbg !84
  %641 = getelementptr float, ptr addrspace(1) %7, i64 %201, !dbg !85
  %642 = getelementptr float, ptr addrspace(1) %7, i64 %202, !dbg !85
  %643 = getelementptr float, ptr addrspace(1) %7, i64 %203, !dbg !85
  %644 = getelementptr float, ptr addrspace(1) %7, i64 %204, !dbg !85
  %645 = getelementptr float, ptr addrspace(1) %7, i64 %205, !dbg !85
  %646 = getelementptr float, ptr addrspace(1) %7, i64 %206, !dbg !85
  %647 = getelementptr float, ptr addrspace(1) %7, i64 %207, !dbg !85
  %648 = getelementptr float, ptr addrspace(1) %7, i64 %208, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !86
  %649 = ptrtoint ptr addrspace(1) %641 to i64, !dbg !86
  %650 = ptrtoint ptr addrspace(1) %642 to i64, !dbg !86
  %651 = ptrtoint ptr addrspace(1) %643 to i64, !dbg !86
  %652 = ptrtoint ptr addrspace(1) %644 to i64, !dbg !86
  %653 = ptrtoint ptr addrspace(1) %645 to i64, !dbg !86
  %654 = ptrtoint ptr addrspace(1) %646 to i64, !dbg !86
  %655 = ptrtoint ptr addrspace(1) %647 to i64, !dbg !86
  %656 = ptrtoint ptr addrspace(1) %648 to i64, !dbg !86
  %657 = insertelement <1 x i64> poison, i64 %649, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %144, <1 x i64> %657, i1 true) #2, !dbg !86
  %658 = insertelement <1 x i64> poison, i64 %650, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %148, <1 x i64> %658, i1 true) #2, !dbg !86
  %659 = insertelement <1 x i64> poison, i64 %651, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %151, <1 x i64> %659, i1 true) #2, !dbg !86
  %660 = insertelement <1 x i64> poison, i64 %652, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %154, <1 x i64> %660, i1 true) #2, !dbg !86
  %661 = insertelement <1 x i64> poison, i64 %653, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %157, <1 x i64> %661, i1 true) #2, !dbg !86
  %662 = insertelement <1 x i64> poison, i64 %654, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %160, <1 x i64> %662, i1 true) #2, !dbg !86
  %663 = insertelement <1 x i64> poison, i64 %655, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %163, <1 x i64> %663, i1 true) #2, !dbg !86
  %664 = insertelement <1 x i64> poison, i64 %656, i64 0, !dbg !86
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %166, <1 x i64> %664, i1 true) #2, !dbg !86
  tail call void @llvm.nvvm.barrier0(), !dbg !86
  %665 = load i64, ptr addrspace(3) %168, align 16, !dbg !86
  %666 = load i64, ptr addrspace(3) %171, align 16, !dbg !86
  %667 = inttoptr i64 %665 to ptr addrspace(1), !dbg !86
  %668 = inttoptr i64 %666 to ptr addrspace(1), !dbg !86
  %669 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %667, i1 %128) #2, !dbg !86
  %670 = extractvalue { i32, i32, i32, i32 } %669, 0, !dbg !86
  %671 = extractvalue { i32, i32, i32, i32 } %669, 1, !dbg !86
  %672 = extractvalue { i32, i32, i32, i32 } %669, 2, !dbg !86
  %673 = extractvalue { i32, i32, i32, i32 } %669, 3, !dbg !86
  %674 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %668, i1 %129) #2, !dbg !86
  %675 = extractvalue { i32, i32, i32, i32 } %674, 0, !dbg !86
  %676 = extractvalue { i32, i32, i32, i32 } %674, 1, !dbg !86
  %677 = extractvalue { i32, i32, i32, i32 } %674, 2, !dbg !86
  %678 = extractvalue { i32, i32, i32, i32 } %674, 3, !dbg !86
  %679 = getelementptr float, ptr addrspace(1) %8, i64 %201, !dbg !87
  %680 = getelementptr float, ptr addrspace(1) %8, i64 %202, !dbg !87
  %681 = getelementptr float, ptr addrspace(1) %8, i64 %203, !dbg !87
  %682 = getelementptr float, ptr addrspace(1) %8, i64 %204, !dbg !87
  %683 = getelementptr float, ptr addrspace(1) %8, i64 %205, !dbg !87
  %684 = getelementptr float, ptr addrspace(1) %8, i64 %206, !dbg !87
  %685 = getelementptr float, ptr addrspace(1) %8, i64 %207, !dbg !87
  %686 = getelementptr float, ptr addrspace(1) %8, i64 %208, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %687 = ptrtoint ptr addrspace(1) %679 to i64, !dbg !88
  %688 = ptrtoint ptr addrspace(1) %680 to i64, !dbg !88
  %689 = ptrtoint ptr addrspace(1) %681 to i64, !dbg !88
  %690 = ptrtoint ptr addrspace(1) %682 to i64, !dbg !88
  %691 = ptrtoint ptr addrspace(1) %683 to i64, !dbg !88
  %692 = ptrtoint ptr addrspace(1) %684 to i64, !dbg !88
  %693 = ptrtoint ptr addrspace(1) %685 to i64, !dbg !88
  %694 = ptrtoint ptr addrspace(1) %686 to i64, !dbg !88
  %695 = insertelement <1 x i64> poison, i64 %687, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %144, <1 x i64> %695, i1 true) #2, !dbg !88
  %696 = insertelement <1 x i64> poison, i64 %688, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %148, <1 x i64> %696, i1 true) #2, !dbg !88
  %697 = insertelement <1 x i64> poison, i64 %689, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %151, <1 x i64> %697, i1 true) #2, !dbg !88
  %698 = insertelement <1 x i64> poison, i64 %690, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %154, <1 x i64> %698, i1 true) #2, !dbg !88
  %699 = insertelement <1 x i64> poison, i64 %691, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %157, <1 x i64> %699, i1 true) #2, !dbg !88
  %700 = insertelement <1 x i64> poison, i64 %692, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %160, <1 x i64> %700, i1 true) #2, !dbg !88
  %701 = insertelement <1 x i64> poison, i64 %693, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %163, <1 x i64> %701, i1 true) #2, !dbg !88
  %702 = insertelement <1 x i64> poison, i64 %694, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %166, <1 x i64> %702, i1 true) #2, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %703 = load i64, ptr addrspace(3) %168, align 16, !dbg !88
  %704 = load i64, ptr addrspace(3) %171, align 16, !dbg !88
  %705 = inttoptr i64 %703 to ptr addrspace(1), !dbg !88
  %706 = inttoptr i64 %704 to ptr addrspace(1), !dbg !88
  %707 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %705, i1 %128) #2, !dbg !88
  %708 = extractvalue { i32, i32, i32, i32 } %707, 0, !dbg !88
  %709 = extractvalue { i32, i32, i32, i32 } %707, 1, !dbg !88
  %710 = extractvalue { i32, i32, i32, i32 } %707, 2, !dbg !88
  %711 = extractvalue { i32, i32, i32, i32 } %707, 3, !dbg !88
  %712 = bitcast i32 %708 to float, !dbg !88
  %713 = bitcast i32 %709 to float, !dbg !88
  %714 = bitcast i32 %710 to float, !dbg !88
  %715 = bitcast i32 %711 to float, !dbg !88
  %716 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %706, i1 %129) #2, !dbg !88
  %717 = extractvalue { i32, i32, i32, i32 } %716, 0, !dbg !88
  %718 = extractvalue { i32, i32, i32, i32 } %716, 1, !dbg !88
  %719 = extractvalue { i32, i32, i32, i32 } %716, 2, !dbg !88
  %720 = extractvalue { i32, i32, i32, i32 } %716, 3, !dbg !88
  %721 = bitcast i32 %717 to float, !dbg !88
  %722 = bitcast i32 %718 to float, !dbg !88
  %723 = bitcast i32 %719 to float, !dbg !88
  %724 = bitcast i32 %720 to float, !dbg !88
  %725 = fsub float 0.000000e+00, %712, !dbg !89
  %726 = fsub float 0.000000e+00, %713, !dbg !89
  %727 = fsub float 0.000000e+00, %714, !dbg !89
  %728 = fsub float 0.000000e+00, %715, !dbg !89
  %729 = fsub float 0.000000e+00, %721, !dbg !89
  %730 = fsub float 0.000000e+00, %722, !dbg !89
  %731 = fsub float 0.000000e+00, %723, !dbg !89
  %732 = fsub float 0.000000e+00, %724, !dbg !89
  %733 = fmul float %725, 0x3FF7154760000000, !dbg !91
  %734 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %733) #2, !dbg !91
  %735 = fmul float %726, 0x3FF7154760000000, !dbg !91
  %736 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %735) #2, !dbg !91
  %737 = fmul float %727, 0x3FF7154760000000, !dbg !91
  %738 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %737) #2, !dbg !91
  %739 = fmul float %728, 0x3FF7154760000000, !dbg !91
  %740 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %739) #2, !dbg !91
  %741 = fmul float %729, 0x3FF7154760000000, !dbg !91
  %742 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %741) #2, !dbg !91
  %743 = fmul float %730, 0x3FF7154760000000, !dbg !91
  %744 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %743) #2, !dbg !91
  %745 = fmul float %731, 0x3FF7154760000000, !dbg !91
  %746 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %745) #2, !dbg !91
  %747 = fmul float %732, 0x3FF7154760000000, !dbg !91
  %748 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %747) #2, !dbg !91
  %749 = fadd float %734, 1.000000e+00, !dbg !92
  %750 = fadd float %736, 1.000000e+00, !dbg !92
  %751 = fadd float %738, 1.000000e+00, !dbg !92
  %752 = fadd float %740, 1.000000e+00, !dbg !92
  %753 = fadd float %742, 1.000000e+00, !dbg !92
  %754 = fadd float %744, 1.000000e+00, !dbg !92
  %755 = fadd float %746, 1.000000e+00, !dbg !92
  %756 = fadd float %748, 1.000000e+00, !dbg !92
  %757 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %749) #2, !dbg !93
  %758 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %750) #2, !dbg !93
  %759 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %751) #2, !dbg !93
  %760 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %752) #2, !dbg !93
  %761 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %753) #2, !dbg !93
  %762 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %754) #2, !dbg !93
  %763 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %755) #2, !dbg !93
  %764 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %756) #2, !dbg !93
  %765 = getelementptr float, ptr addrspace(1) %7, i64 %262, !dbg !94
  %766 = getelementptr float, ptr addrspace(1) %7, i64 %263, !dbg !94
  %767 = getelementptr float, ptr addrspace(1) %7, i64 %265, !dbg !94
  %768 = getelementptr float, ptr addrspace(1) %7, i64 %266, !dbg !94
  %769 = getelementptr float, ptr addrspace(1) %7, i64 %268, !dbg !94
  %770 = getelementptr float, ptr addrspace(1) %7, i64 %269, !dbg !94
  %771 = getelementptr float, ptr addrspace(1) %7, i64 %271, !dbg !94
  %772 = getelementptr float, ptr addrspace(1) %7, i64 %272, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %773 = ptrtoint ptr addrspace(1) %765 to i64, !dbg !95
  %774 = ptrtoint ptr addrspace(1) %766 to i64, !dbg !95
  %775 = ptrtoint ptr addrspace(1) %767 to i64, !dbg !95
  %776 = ptrtoint ptr addrspace(1) %768 to i64, !dbg !95
  %777 = ptrtoint ptr addrspace(1) %769 to i64, !dbg !95
  %778 = ptrtoint ptr addrspace(1) %770 to i64, !dbg !95
  %779 = ptrtoint ptr addrspace(1) %771 to i64, !dbg !95
  %780 = ptrtoint ptr addrspace(1) %772 to i64, !dbg !95
  %781 = insertelement <1 x i64> poison, i64 %773, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %144, <1 x i64> %781, i1 true) #2, !dbg !95
  %782 = insertelement <1 x i64> poison, i64 %774, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %148, <1 x i64> %782, i1 true) #2, !dbg !95
  %783 = insertelement <1 x i64> poison, i64 %775, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %151, <1 x i64> %783, i1 true) #2, !dbg !95
  %784 = insertelement <1 x i64> poison, i64 %776, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %154, <1 x i64> %784, i1 true) #2, !dbg !95
  %785 = insertelement <1 x i64> poison, i64 %777, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %157, <1 x i64> %785, i1 true) #2, !dbg !95
  %786 = insertelement <1 x i64> poison, i64 %778, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %160, <1 x i64> %786, i1 true) #2, !dbg !95
  %787 = insertelement <1 x i64> poison, i64 %779, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %163, <1 x i64> %787, i1 true) #2, !dbg !95
  %788 = insertelement <1 x i64> poison, i64 %780, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %166, <1 x i64> %788, i1 true) #2, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %789 = load i64, ptr addrspace(3) %168, align 16, !dbg !95
  %790 = load i64, ptr addrspace(3) %171, align 16, !dbg !95
  %791 = inttoptr i64 %789 to ptr addrspace(1), !dbg !95
  %792 = inttoptr i64 %790 to ptr addrspace(1), !dbg !95
  %793 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %791, i1 %128) #2, !dbg !95
  %794 = extractvalue { i32, i32, i32, i32 } %793, 0, !dbg !95
  %795 = extractvalue { i32, i32, i32, i32 } %793, 1, !dbg !95
  %796 = extractvalue { i32, i32, i32, i32 } %793, 2, !dbg !95
  %797 = extractvalue { i32, i32, i32, i32 } %793, 3, !dbg !95
  %798 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %792, i1 %129) #2, !dbg !95
  %799 = extractvalue { i32, i32, i32, i32 } %798, 0, !dbg !95
  %800 = extractvalue { i32, i32, i32, i32 } %798, 1, !dbg !95
  %801 = extractvalue { i32, i32, i32, i32 } %798, 2, !dbg !95
  %802 = extractvalue { i32, i32, i32, i32 } %798, 3, !dbg !95
  %803 = getelementptr float, ptr addrspace(1) %8, i64 %262, !dbg !96
  %804 = getelementptr float, ptr addrspace(1) %8, i64 %263, !dbg !96
  %805 = getelementptr float, ptr addrspace(1) %8, i64 %265, !dbg !96
  %806 = getelementptr float, ptr addrspace(1) %8, i64 %266, !dbg !96
  %807 = getelementptr float, ptr addrspace(1) %8, i64 %268, !dbg !96
  %808 = getelementptr float, ptr addrspace(1) %8, i64 %269, !dbg !96
  %809 = getelementptr float, ptr addrspace(1) %8, i64 %271, !dbg !96
  %810 = getelementptr float, ptr addrspace(1) %8, i64 %272, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %811 = ptrtoint ptr addrspace(1) %803 to i64, !dbg !97
  %812 = ptrtoint ptr addrspace(1) %804 to i64, !dbg !97
  %813 = ptrtoint ptr addrspace(1) %805 to i64, !dbg !97
  %814 = ptrtoint ptr addrspace(1) %806 to i64, !dbg !97
  %815 = ptrtoint ptr addrspace(1) %807 to i64, !dbg !97
  %816 = ptrtoint ptr addrspace(1) %808 to i64, !dbg !97
  %817 = ptrtoint ptr addrspace(1) %809 to i64, !dbg !97
  %818 = ptrtoint ptr addrspace(1) %810 to i64, !dbg !97
  %819 = insertelement <1 x i64> poison, i64 %811, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %144, <1 x i64> %819, i1 true) #2, !dbg !97
  %820 = insertelement <1 x i64> poison, i64 %812, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %148, <1 x i64> %820, i1 true) #2, !dbg !97
  %821 = insertelement <1 x i64> poison, i64 %813, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %151, <1 x i64> %821, i1 true) #2, !dbg !97
  %822 = insertelement <1 x i64> poison, i64 %814, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %154, <1 x i64> %822, i1 true) #2, !dbg !97
  %823 = insertelement <1 x i64> poison, i64 %815, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %157, <1 x i64> %823, i1 true) #2, !dbg !97
  %824 = insertelement <1 x i64> poison, i64 %816, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %160, <1 x i64> %824, i1 true) #2, !dbg !97
  %825 = insertelement <1 x i64> poison, i64 %817, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %163, <1 x i64> %825, i1 true) #2, !dbg !97
  %826 = insertelement <1 x i64> poison, i64 %818, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %166, <1 x i64> %826, i1 true) #2, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %827 = load i64, ptr addrspace(3) %168, align 16, !dbg !97
  %828 = load i64, ptr addrspace(3) %171, align 16, !dbg !97
  %829 = inttoptr i64 %827 to ptr addrspace(1), !dbg !97
  %830 = inttoptr i64 %828 to ptr addrspace(1), !dbg !97
  %831 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %829, i1 %128) #2, !dbg !97
  %832 = extractvalue { i32, i32, i32, i32 } %831, 0, !dbg !97
  %833 = extractvalue { i32, i32, i32, i32 } %831, 1, !dbg !97
  %834 = extractvalue { i32, i32, i32, i32 } %831, 2, !dbg !97
  %835 = extractvalue { i32, i32, i32, i32 } %831, 3, !dbg !97
  %836 = bitcast i32 %832 to float, !dbg !97
  %837 = bitcast i32 %833 to float, !dbg !97
  %838 = bitcast i32 %834 to float, !dbg !97
  %839 = bitcast i32 %835 to float, !dbg !97
  %840 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %830, i1 %129) #2, !dbg !97
  %841 = extractvalue { i32, i32, i32, i32 } %840, 0, !dbg !97
  %842 = extractvalue { i32, i32, i32, i32 } %840, 1, !dbg !97
  %843 = extractvalue { i32, i32, i32, i32 } %840, 2, !dbg !97
  %844 = extractvalue { i32, i32, i32, i32 } %840, 3, !dbg !97
  %845 = bitcast i32 %841 to float, !dbg !97
  %846 = bitcast i32 %842 to float, !dbg !97
  %847 = bitcast i32 %843 to float, !dbg !97
  %848 = bitcast i32 %844 to float, !dbg !97
  %849 = fsub float 0.000000e+00, %836, !dbg !98
  %850 = fsub float 0.000000e+00, %837, !dbg !98
  %851 = fsub float 0.000000e+00, %838, !dbg !98
  %852 = fsub float 0.000000e+00, %839, !dbg !98
  %853 = fsub float 0.000000e+00, %845, !dbg !98
  %854 = fsub float 0.000000e+00, %846, !dbg !98
  %855 = fsub float 0.000000e+00, %847, !dbg !98
  %856 = fsub float 0.000000e+00, %848, !dbg !98
  %857 = fmul float %849, 0x3FF7154760000000, !dbg !100
  %858 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %857) #2, !dbg !100
  %859 = fmul float %850, 0x3FF7154760000000, !dbg !100
  %860 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %859) #2, !dbg !100
  %861 = fmul float %851, 0x3FF7154760000000, !dbg !100
  %862 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %861) #2, !dbg !100
  %863 = fmul float %852, 0x3FF7154760000000, !dbg !100
  %864 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %863) #2, !dbg !100
  %865 = fmul float %853, 0x3FF7154760000000, !dbg !100
  %866 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %865) #2, !dbg !100
  %867 = fmul float %854, 0x3FF7154760000000, !dbg !100
  %868 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %867) #2, !dbg !100
  %869 = fmul float %855, 0x3FF7154760000000, !dbg !100
  %870 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %869) #2, !dbg !100
  %871 = fmul float %856, 0x3FF7154760000000, !dbg !100
  %872 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %871) #2, !dbg !100
  %873 = fadd float %858, 1.000000e+00, !dbg !101
  %874 = fadd float %860, 1.000000e+00, !dbg !101
  %875 = fadd float %862, 1.000000e+00, !dbg !101
  %876 = fadd float %864, 1.000000e+00, !dbg !101
  %877 = fadd float %866, 1.000000e+00, !dbg !101
  %878 = fadd float %868, 1.000000e+00, !dbg !101
  %879 = fadd float %870, 1.000000e+00, !dbg !101
  %880 = fadd float %872, 1.000000e+00, !dbg !101
  %881 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %873) #2, !dbg !102
  %882 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %874) #2, !dbg !102
  %883 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %875) #2, !dbg !102
  %884 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %876) #2, !dbg !102
  %885 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %877) #2, !dbg !102
  %886 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %878) #2, !dbg !102
  %887 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %879) #2, !dbg !102
  %888 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %880) #2, !dbg !102
  %889 = getelementptr float, ptr addrspace(1) %7, i64 %311, !dbg !103
  %890 = getelementptr float, ptr addrspace(1) %7, i64 %312, !dbg !103
  %891 = getelementptr float, ptr addrspace(1) %7, i64 %313, !dbg !103
  %892 = getelementptr float, ptr addrspace(1) %7, i64 %314, !dbg !103
  %893 = getelementptr float, ptr addrspace(1) %7, i64 %315, !dbg !103
  %894 = getelementptr float, ptr addrspace(1) %7, i64 %316, !dbg !103
  %895 = getelementptr float, ptr addrspace(1) %7, i64 %317, !dbg !103
  %896 = getelementptr float, ptr addrspace(1) %7, i64 %318, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !104
  %897 = ptrtoint ptr addrspace(1) %889 to i64, !dbg !104
  %898 = ptrtoint ptr addrspace(1) %890 to i64, !dbg !104
  %899 = ptrtoint ptr addrspace(1) %891 to i64, !dbg !104
  %900 = ptrtoint ptr addrspace(1) %892 to i64, !dbg !104
  %901 = ptrtoint ptr addrspace(1) %893 to i64, !dbg !104
  %902 = ptrtoint ptr addrspace(1) %894 to i64, !dbg !104
  %903 = ptrtoint ptr addrspace(1) %895 to i64, !dbg !104
  %904 = ptrtoint ptr addrspace(1) %896 to i64, !dbg !104
  %905 = insertelement <1 x i64> poison, i64 %897, i64 0, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %144, <1 x i64> %905, i1 true) #2, !dbg !104
  %906 = insertelement <1 x i64> poison, i64 %898, i64 0, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %148, <1 x i64> %906, i1 true) #2, !dbg !104
  %907 = insertelement <1 x i64> poison, i64 %899, i64 0, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %151, <1 x i64> %907, i1 true) #2, !dbg !104
  %908 = insertelement <1 x i64> poison, i64 %900, i64 0, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %154, <1 x i64> %908, i1 true) #2, !dbg !104
  %909 = insertelement <1 x i64> poison, i64 %901, i64 0, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %157, <1 x i64> %909, i1 true) #2, !dbg !104
  %910 = insertelement <1 x i64> poison, i64 %902, i64 0, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %160, <1 x i64> %910, i1 true) #2, !dbg !104
  %911 = insertelement <1 x i64> poison, i64 %903, i64 0, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %163, <1 x i64> %911, i1 true) #2, !dbg !104
  %912 = insertelement <1 x i64> poison, i64 %904, i64 0, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %166, <1 x i64> %912, i1 true) #2, !dbg !104
  tail call void @llvm.nvvm.barrier0(), !dbg !104
  %913 = load i64, ptr addrspace(3) %168, align 16, !dbg !104
  %914 = load i64, ptr addrspace(3) %171, align 16, !dbg !104
  %915 = inttoptr i64 %913 to ptr addrspace(1), !dbg !104
  %916 = inttoptr i64 %914 to ptr addrspace(1), !dbg !104
  %917 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %915, i1 %128) #2, !dbg !104
  %918 = extractvalue { i32, i32, i32, i32 } %917, 0, !dbg !104
  %919 = extractvalue { i32, i32, i32, i32 } %917, 1, !dbg !104
  %920 = extractvalue { i32, i32, i32, i32 } %917, 2, !dbg !104
  %921 = extractvalue { i32, i32, i32, i32 } %917, 3, !dbg !104
  %922 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %916, i1 %129) #2, !dbg !104
  %923 = extractvalue { i32, i32, i32, i32 } %922, 0, !dbg !104
  %924 = extractvalue { i32, i32, i32, i32 } %922, 1, !dbg !104
  %925 = extractvalue { i32, i32, i32, i32 } %922, 2, !dbg !104
  %926 = extractvalue { i32, i32, i32, i32 } %922, 3, !dbg !104
  %927 = getelementptr float, ptr addrspace(1) %8, i64 %311, !dbg !105
  %928 = getelementptr float, ptr addrspace(1) %8, i64 %312, !dbg !105
  %929 = getelementptr float, ptr addrspace(1) %8, i64 %313, !dbg !105
  %930 = getelementptr float, ptr addrspace(1) %8, i64 %314, !dbg !105
  %931 = getelementptr float, ptr addrspace(1) %8, i64 %315, !dbg !105
  %932 = getelementptr float, ptr addrspace(1) %8, i64 %316, !dbg !105
  %933 = getelementptr float, ptr addrspace(1) %8, i64 %317, !dbg !105
  %934 = getelementptr float, ptr addrspace(1) %8, i64 %318, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !106
  %935 = ptrtoint ptr addrspace(1) %927 to i64, !dbg !106
  %936 = ptrtoint ptr addrspace(1) %928 to i64, !dbg !106
  %937 = ptrtoint ptr addrspace(1) %929 to i64, !dbg !106
  %938 = ptrtoint ptr addrspace(1) %930 to i64, !dbg !106
  %939 = ptrtoint ptr addrspace(1) %931 to i64, !dbg !106
  %940 = ptrtoint ptr addrspace(1) %932 to i64, !dbg !106
  %941 = ptrtoint ptr addrspace(1) %933 to i64, !dbg !106
  %942 = ptrtoint ptr addrspace(1) %934 to i64, !dbg !106
  %943 = insertelement <1 x i64> poison, i64 %935, i64 0, !dbg !106
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %144, <1 x i64> %943, i1 true) #2, !dbg !106
  %944 = insertelement <1 x i64> poison, i64 %936, i64 0, !dbg !106
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %148, <1 x i64> %944, i1 true) #2, !dbg !106
  %945 = insertelement <1 x i64> poison, i64 %937, i64 0, !dbg !106
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %151, <1 x i64> %945, i1 true) #2, !dbg !106
  %946 = insertelement <1 x i64> poison, i64 %938, i64 0, !dbg !106
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %154, <1 x i64> %946, i1 true) #2, !dbg !106
  %947 = insertelement <1 x i64> poison, i64 %939, i64 0, !dbg !106
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %157, <1 x i64> %947, i1 true) #2, !dbg !106
  %948 = insertelement <1 x i64> poison, i64 %940, i64 0, !dbg !106
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %160, <1 x i64> %948, i1 true) #2, !dbg !106
  %949 = insertelement <1 x i64> poison, i64 %941, i64 0, !dbg !106
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %163, <1 x i64> %949, i1 true) #2, !dbg !106
  %950 = insertelement <1 x i64> poison, i64 %942, i64 0, !dbg !106
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %166, <1 x i64> %950, i1 true) #2, !dbg !106
  tail call void @llvm.nvvm.barrier0(), !dbg !106
  %951 = load i64, ptr addrspace(3) %168, align 16, !dbg !106
  %952 = load i64, ptr addrspace(3) %171, align 16, !dbg !106
  %953 = inttoptr i64 %951 to ptr addrspace(1), !dbg !106
  %954 = inttoptr i64 %952 to ptr addrspace(1), !dbg !106
  %955 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %953, i1 %128) #2, !dbg !106
  %956 = extractvalue { i32, i32, i32, i32 } %955, 0, !dbg !106
  %957 = extractvalue { i32, i32, i32, i32 } %955, 1, !dbg !106
  %958 = extractvalue { i32, i32, i32, i32 } %955, 2, !dbg !106
  %959 = extractvalue { i32, i32, i32, i32 } %955, 3, !dbg !106
  %960 = bitcast i32 %956 to float, !dbg !106
  %961 = bitcast i32 %957 to float, !dbg !106
  %962 = bitcast i32 %958 to float, !dbg !106
  %963 = bitcast i32 %959 to float, !dbg !106
  %964 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %954, i1 %129) #2, !dbg !106
  %965 = extractvalue { i32, i32, i32, i32 } %964, 0, !dbg !106
  %966 = extractvalue { i32, i32, i32, i32 } %964, 1, !dbg !106
  %967 = extractvalue { i32, i32, i32, i32 } %964, 2, !dbg !106
  %968 = extractvalue { i32, i32, i32, i32 } %964, 3, !dbg !106
  %969 = bitcast i32 %965 to float, !dbg !106
  %970 = bitcast i32 %966 to float, !dbg !106
  %971 = bitcast i32 %967 to float, !dbg !106
  %972 = bitcast i32 %968 to float, !dbg !106
  %973 = fsub float 0.000000e+00, %960, !dbg !107
  %974 = fsub float 0.000000e+00, %961, !dbg !107
  %975 = fsub float 0.000000e+00, %962, !dbg !107
  %976 = fsub float 0.000000e+00, %963, !dbg !107
  %977 = fsub float 0.000000e+00, %969, !dbg !107
  %978 = fsub float 0.000000e+00, %970, !dbg !107
  %979 = fsub float 0.000000e+00, %971, !dbg !107
  %980 = fsub float 0.000000e+00, %972, !dbg !107
  %981 = fmul float %973, 0x3FF7154760000000, !dbg !109
  %982 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %981) #2, !dbg !109
  %983 = fmul float %974, 0x3FF7154760000000, !dbg !109
  %984 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %983) #2, !dbg !109
  %985 = fmul float %975, 0x3FF7154760000000, !dbg !109
  %986 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %985) #2, !dbg !109
  %987 = fmul float %976, 0x3FF7154760000000, !dbg !109
  %988 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %987) #2, !dbg !109
  %989 = fmul float %977, 0x3FF7154760000000, !dbg !109
  %990 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %989) #2, !dbg !109
  %991 = fmul float %978, 0x3FF7154760000000, !dbg !109
  %992 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %991) #2, !dbg !109
  %993 = fmul float %979, 0x3FF7154760000000, !dbg !109
  %994 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %993) #2, !dbg !109
  %995 = fmul float %980, 0x3FF7154760000000, !dbg !109
  %996 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %995) #2, !dbg !109
  %997 = fadd float %982, 1.000000e+00, !dbg !110
  %998 = fadd float %984, 1.000000e+00, !dbg !110
  %999 = fadd float %986, 1.000000e+00, !dbg !110
  %1000 = fadd float %988, 1.000000e+00, !dbg !110
  %1001 = fadd float %990, 1.000000e+00, !dbg !110
  %1002 = fadd float %992, 1.000000e+00, !dbg !110
  %1003 = fadd float %994, 1.000000e+00, !dbg !110
  %1004 = fadd float %996, 1.000000e+00, !dbg !110
  %1005 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %997) #2, !dbg !111
  %1006 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %998) #2, !dbg !111
  %1007 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %999) #2, !dbg !111
  %1008 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1000) #2, !dbg !111
  %1009 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1001) #2, !dbg !111
  %1010 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1002) #2, !dbg !111
  %1011 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1003) #2, !dbg !111
  %1012 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %1004) #2, !dbg !111
  %1013 = insertelement <2 x i32> poison, i32 %794, i64 0, !dbg !95
  %1014 = insertelement <2 x i32> %1013, i32 %546, i64 1, !dbg !95
  %1015 = bitcast <2 x i32> %1014 to <2 x float>, !dbg !95
  %1016 = insertelement <2 x float> poison, float %881, i64 0, !dbg !112
  %1017 = insertelement <2 x float> %1016, float %633, i64 1, !dbg !112
  %1018 = fmul <2 x float> %1017, %1015, !dbg !112
  %1019 = insertelement <2 x i32> poison, i32 %918, i64 0, !dbg !104
  %1020 = insertelement <2 x i32> %1019, i32 %670, i64 1, !dbg !104
  %1021 = bitcast <2 x i32> %1020 to <2 x float>, !dbg !104
  %1022 = insertelement <2 x float> poison, float %1005, i64 0, !dbg !113
  %1023 = insertelement <2 x float> %1022, float %757, i64 1, !dbg !113
  %1024 = fmul <2 x float> %1023, %1021, !dbg !113
  %1025 = fsub <2 x float> %1024, %1018, !dbg !114
  %1026 = fmul <2 x float> %365, %1025, !dbg !115
  %1027 = fadd <2 x float> %1018, %1026, !dbg !116
  %1028 = insertelement <2 x i32> poison, i32 %795, i64 0, !dbg !95
  %1029 = insertelement <2 x i32> %1028, i32 %547, i64 1, !dbg !95
  %1030 = bitcast <2 x i32> %1029 to <2 x float>, !dbg !95
  %1031 = insertelement <2 x float> poison, float %882, i64 0, !dbg !112
  %1032 = insertelement <2 x float> %1031, float %634, i64 1, !dbg !112
  %1033 = fmul <2 x float> %1032, %1030, !dbg !112
  %1034 = insertelement <2 x i32> poison, i32 %919, i64 0, !dbg !104
  %1035 = insertelement <2 x i32> %1034, i32 %671, i64 1, !dbg !104
  %1036 = bitcast <2 x i32> %1035 to <2 x float>, !dbg !104
  %1037 = insertelement <2 x float> poison, float %1006, i64 0, !dbg !113
  %1038 = insertelement <2 x float> %1037, float %758, i64 1, !dbg !113
  %1039 = fmul <2 x float> %1038, %1036, !dbg !113
  %1040 = fsub <2 x float> %1039, %1033, !dbg !114
  %1041 = fmul <2 x float> %365, %1040, !dbg !115
  %1042 = fadd <2 x float> %1033, %1041, !dbg !116
  %1043 = insertelement <2 x i32> poison, i32 %796, i64 0, !dbg !95
  %1044 = insertelement <2 x i32> %1043, i32 %548, i64 1, !dbg !95
  %1045 = bitcast <2 x i32> %1044 to <2 x float>, !dbg !95
  %1046 = insertelement <2 x float> poison, float %883, i64 0, !dbg !112
  %1047 = insertelement <2 x float> %1046, float %635, i64 1, !dbg !112
  %1048 = fmul <2 x float> %1047, %1045, !dbg !112
  %1049 = insertelement <2 x i32> poison, i32 %920, i64 0, !dbg !104
  %1050 = insertelement <2 x i32> %1049, i32 %672, i64 1, !dbg !104
  %1051 = bitcast <2 x i32> %1050 to <2 x float>, !dbg !104
  %1052 = insertelement <2 x float> poison, float %1007, i64 0, !dbg !113
  %1053 = insertelement <2 x float> %1052, float %759, i64 1, !dbg !113
  %1054 = fmul <2 x float> %1053, %1051, !dbg !113
  %1055 = fsub <2 x float> %1054, %1048, !dbg !114
  %1056 = fmul <2 x float> %365, %1055, !dbg !115
  %1057 = fadd <2 x float> %1048, %1056, !dbg !116
  %1058 = insertelement <2 x i32> poison, i32 %797, i64 0, !dbg !95
  %1059 = insertelement <2 x i32> %1058, i32 %549, i64 1, !dbg !95
  %1060 = bitcast <2 x i32> %1059 to <2 x float>, !dbg !95
  %1061 = insertelement <2 x float> poison, float %884, i64 0, !dbg !112
  %1062 = insertelement <2 x float> %1061, float %636, i64 1, !dbg !112
  %1063 = fmul <2 x float> %1062, %1060, !dbg !112
  %1064 = insertelement <2 x i32> poison, i32 %921, i64 0, !dbg !104
  %1065 = insertelement <2 x i32> %1064, i32 %673, i64 1, !dbg !104
  %1066 = bitcast <2 x i32> %1065 to <2 x float>, !dbg !104
  %1067 = insertelement <2 x float> poison, float %1008, i64 0, !dbg !113
  %1068 = insertelement <2 x float> %1067, float %760, i64 1, !dbg !113
  %1069 = fmul <2 x float> %1068, %1066, !dbg !113
  %1070 = fsub <2 x float> %1069, %1063, !dbg !114
  %1071 = fmul <2 x float> %365, %1070, !dbg !115
  %1072 = fadd <2 x float> %1063, %1071, !dbg !116
  %1073 = insertelement <2 x i32> poison, i32 %799, i64 0, !dbg !95
  %1074 = insertelement <2 x i32> %1073, i32 %551, i64 1, !dbg !95
  %1075 = bitcast <2 x i32> %1074 to <2 x float>, !dbg !95
  %1076 = insertelement <2 x float> poison, float %885, i64 0, !dbg !112
  %1077 = insertelement <2 x float> %1076, float %637, i64 1, !dbg !112
  %1078 = fmul <2 x float> %1077, %1075, !dbg !112
  %1079 = insertelement <2 x i32> poison, i32 %923, i64 0, !dbg !104
  %1080 = insertelement <2 x i32> %1079, i32 %675, i64 1, !dbg !104
  %1081 = bitcast <2 x i32> %1080 to <2 x float>, !dbg !104
  %1082 = insertelement <2 x float> poison, float %1009, i64 0, !dbg !113
  %1083 = insertelement <2 x float> %1082, float %761, i64 1, !dbg !113
  %1084 = fmul <2 x float> %1083, %1081, !dbg !113
  %1085 = fsub <2 x float> %1084, %1078, !dbg !114
  %1086 = fmul <2 x float> %403, %1085, !dbg !115
  %1087 = fadd <2 x float> %1078, %1086, !dbg !116
  %1088 = insertelement <2 x i32> poison, i32 %800, i64 0, !dbg !95
  %1089 = insertelement <2 x i32> %1088, i32 %552, i64 1, !dbg !95
  %1090 = bitcast <2 x i32> %1089 to <2 x float>, !dbg !95
  %1091 = insertelement <2 x float> poison, float %886, i64 0, !dbg !112
  %1092 = insertelement <2 x float> %1091, float %638, i64 1, !dbg !112
  %1093 = fmul <2 x float> %1092, %1090, !dbg !112
  %1094 = insertelement <2 x i32> poison, i32 %924, i64 0, !dbg !104
  %1095 = insertelement <2 x i32> %1094, i32 %676, i64 1, !dbg !104
  %1096 = bitcast <2 x i32> %1095 to <2 x float>, !dbg !104
  %1097 = insertelement <2 x float> poison, float %1010, i64 0, !dbg !113
  %1098 = insertelement <2 x float> %1097, float %762, i64 1, !dbg !113
  %1099 = fmul <2 x float> %1098, %1096, !dbg !113
  %1100 = fsub <2 x float> %1099, %1093, !dbg !114
  %1101 = fmul <2 x float> %403, %1100, !dbg !115
  %1102 = fadd <2 x float> %1093, %1101, !dbg !116
  %1103 = insertelement <2 x i32> poison, i32 %801, i64 0, !dbg !95
  %1104 = insertelement <2 x i32> %1103, i32 %553, i64 1, !dbg !95
  %1105 = bitcast <2 x i32> %1104 to <2 x float>, !dbg !95
  %1106 = insertelement <2 x float> poison, float %887, i64 0, !dbg !112
  %1107 = insertelement <2 x float> %1106, float %639, i64 1, !dbg !112
  %1108 = fmul <2 x float> %1107, %1105, !dbg !112
  %1109 = insertelement <2 x i32> poison, i32 %925, i64 0, !dbg !104
  %1110 = insertelement <2 x i32> %1109, i32 %677, i64 1, !dbg !104
  %1111 = bitcast <2 x i32> %1110 to <2 x float>, !dbg !104
  %1112 = insertelement <2 x float> poison, float %1011, i64 0, !dbg !113
  %1113 = insertelement <2 x float> %1112, float %763, i64 1, !dbg !113
  %1114 = fmul <2 x float> %1113, %1111, !dbg !113
  %1115 = fsub <2 x float> %1114, %1108, !dbg !114
  %1116 = fmul <2 x float> %403, %1115, !dbg !115
  %1117 = fadd <2 x float> %1108, %1116, !dbg !116
  %1118 = insertelement <2 x i32> poison, i32 %802, i64 0, !dbg !95
  %1119 = insertelement <2 x i32> %1118, i32 %554, i64 1, !dbg !95
  %1120 = bitcast <2 x i32> %1119 to <2 x float>, !dbg !95
  %1121 = insertelement <2 x float> poison, float %888, i64 0, !dbg !112
  %1122 = insertelement <2 x float> %1121, float %640, i64 1, !dbg !112
  %1123 = fmul <2 x float> %1122, %1120, !dbg !112
  %1124 = insertelement <2 x i32> poison, i32 %926, i64 0, !dbg !104
  %1125 = insertelement <2 x i32> %1124, i32 %678, i64 1, !dbg !104
  %1126 = bitcast <2 x i32> %1125 to <2 x float>, !dbg !104
  %1127 = insertelement <2 x float> poison, float %1012, i64 0, !dbg !113
  %1128 = insertelement <2 x float> %1127, float %764, i64 1, !dbg !113
  %1129 = fmul <2 x float> %1128, %1126, !dbg !113
  %1130 = fsub <2 x float> %1129, %1123, !dbg !114
  %1131 = fmul <2 x float> %403, %1130, !dbg !115
  %1132 = fadd <2 x float> %1123, %1131, !dbg !116
  %1133 = extractelement <2 x float> %1027, i64 0, !dbg !117
  %1134 = extractelement <2 x float> %1027, i64 1, !dbg !118
  %1135 = fsub float %1133, %1134, !dbg !117
  %1136 = extractelement <2 x float> %1042, i64 0, !dbg !117
  %1137 = extractelement <2 x float> %1042, i64 1, !dbg !118
  %1138 = fsub float %1136, %1137, !dbg !117
  %1139 = extractelement <2 x float> %1057, i64 0, !dbg !117
  %1140 = extractelement <2 x float> %1057, i64 1, !dbg !118
  %1141 = fsub float %1139, %1140, !dbg !117
  %1142 = extractelement <2 x float> %1072, i64 0, !dbg !117
  %1143 = extractelement <2 x float> %1072, i64 1, !dbg !118
  %1144 = fsub float %1142, %1143, !dbg !117
  %1145 = extractelement <2 x float> %1087, i64 0, !dbg !117
  %1146 = extractelement <2 x float> %1087, i64 1, !dbg !118
  %1147 = fsub float %1145, %1146, !dbg !117
  %1148 = extractelement <2 x float> %1102, i64 0, !dbg !117
  %1149 = extractelement <2 x float> %1102, i64 1, !dbg !118
  %1150 = fsub float %1148, %1149, !dbg !117
  %1151 = extractelement <2 x float> %1117, i64 0, !dbg !117
  %1152 = extractelement <2 x float> %1117, i64 1, !dbg !118
  %1153 = fsub float %1151, %1152, !dbg !117
  %1154 = extractelement <2 x float> %1132, i64 0, !dbg !117
  %1155 = extractelement <2 x float> %1132, i64 1, !dbg !118
  %1156 = fsub float %1154, %1155, !dbg !117
  %1157 = shl i32 %36, 7, !dbg !119
  %1158 = shl i32 %37, 7, !dbg !119
  %1159 = shl i32 %45, 15, !dbg !120
  %1160 = add i32 %1159, %.decomposed7, !dbg !121
  %1161 = add i32 %1160, %1157, !dbg !122
  %1162 = add i32 %1160, %1158, !dbg !122
  %1163 = sext i32 %1161 to i64, !dbg !123
  %1164 = getelementptr float, ptr addrspace(1) %9, i64 %1163, !dbg !123
  %1165 = sext i32 %1162 to i64, !dbg !123
  %1166 = getelementptr float, ptr addrspace(1) %9, i64 %1165, !dbg !123
  %1167 = bitcast float %509 to i32, !dbg !124
  %1168 = bitcast float %510 to i32, !dbg !124
  %1169 = bitcast float %511 to i32, !dbg !124
  %1170 = bitcast float %512 to i32, !dbg !124
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1167, i32 %1168, i32 %1169, i32 %1170, ptr addrspace(1) %1164, i1 %128) #2, !dbg !124
  %1171 = bitcast float %513 to i32, !dbg !124
  %1172 = bitcast float %514 to i32, !dbg !124
  %1173 = bitcast float %515 to i32, !dbg !124
  %1174 = bitcast float %516 to i32, !dbg !124
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1171, i32 %1172, i32 %1173, i32 %1174, ptr addrspace(1) %1166, i1 %129) #2, !dbg !124
  %1175 = shl i32 %22, 8, !dbg !125
  %1176 = shl i32 %23, 8, !dbg !125
  %1177 = add i32 %38, %1175, !dbg !126
  %1178 = add i32 %38, %1176, !dbg !126
  %1179 = sext i32 %1177 to i64, !dbg !127
  %1180 = getelementptr float, ptr addrspace(1) %10, i64 %1179, !dbg !127
  %1181 = sext i32 %1178 to i64, !dbg !127
  %1182 = getelementptr float, ptr addrspace(1) %10, i64 %1181, !dbg !127
  tail call void @llvm.nvvm.barrier0(), !dbg !118
  %1183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %31, !dbg !118
  %1184 = bitcast float %1134 to <1 x i32>, !dbg !118
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1183, <1 x i32> %1184, i1 true) #2, !dbg !118
  %1185 = getelementptr inbounds i8, ptr addrspace(3) %1183, i32 1028, !dbg !118
  %1186 = bitcast float %1137 to <1 x i32>, !dbg !118
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1185, <1 x i32> %1186, i1 true) #2, !dbg !118
  %1187 = getelementptr inbounds i8, ptr addrspace(3) %1183, i32 2056, !dbg !118
  %1188 = bitcast float %1140 to <1 x i32>, !dbg !118
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1187, <1 x i32> %1188, i1 true) #2, !dbg !118
  %1189 = getelementptr inbounds i8, ptr addrspace(3) %1183, i32 3084, !dbg !118
  %1190 = bitcast float %1143 to <1 x i32>, !dbg !118
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1189, <1 x i32> %1190, i1 true) #2, !dbg !118
  %1191 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %32, !dbg !118
  %1192 = bitcast float %1146 to <1 x i32>, !dbg !118
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1191, <1 x i32> %1192, i1 true) #2, !dbg !118
  %1193 = getelementptr inbounds i8, ptr addrspace(3) %1183, i32 1540, !dbg !118
  %1194 = bitcast float %1149 to <1 x i32>, !dbg !118
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1193, <1 x i32> %1194, i1 true) #2, !dbg !118
  %1195 = getelementptr inbounds i8, ptr addrspace(3) %1183, i32 2568, !dbg !118
  %1196 = bitcast float %1152 to <1 x i32>, !dbg !118
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1195, <1 x i32> %1196, i1 true) #2, !dbg !118
  %1197 = getelementptr inbounds i8, ptr addrspace(3) %1183, i32 3596, !dbg !118
  %1198 = bitcast float %1155 to <1 x i32>, !dbg !118
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1197, <1 x i32> %1198, i1 true) #2, !dbg !118
  tail call void @llvm.nvvm.barrier0(), !dbg !118
  %1199 = lshr i32 %142, 8, !dbg !118
  %1200 = or disjoint i32 %1199, %142, !dbg !118
  %1201 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1200, !dbg !118
  %1202 = load i32, ptr addrspace(3) %1201, align 4, !dbg !118
  %1203 = or disjoint i32 %142, 1, !dbg !118
  %1204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1199, !dbg !118
  %1205 = getelementptr inbounds float, ptr addrspace(3) %1204, i32 %1203, !dbg !118
  %1206 = load i32, ptr addrspace(3) %1205, align 4, !dbg !118
  %1207 = or disjoint i32 %1200, 2, !dbg !118
  %1208 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1207, !dbg !118
  %1209 = load i32, ptr addrspace(3) %1208, align 4, !dbg !118
  %1210 = or disjoint i32 %142, 3, !dbg !118
  %1211 = getelementptr inbounds float, ptr addrspace(3) %1204, i32 %1210, !dbg !118
  %1212 = load i32, ptr addrspace(3) %1211, align 4, !dbg !118
  %1213 = lshr i32 %170, 8, !dbg !118
  %1214 = or disjoint i32 %1213, %170, !dbg !118
  %1215 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1214, !dbg !118
  %1216 = load i32, ptr addrspace(3) %1215, align 4, !dbg !118
  %1217 = or disjoint i32 %142, 513, !dbg !118
  %1218 = lshr i32 %1217, 8, !dbg !118
  %1219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1218, !dbg !118
  %1220 = getelementptr inbounds float, ptr addrspace(3) %1219, i32 %1217, !dbg !118
  %1221 = load i32, ptr addrspace(3) %1220, align 4, !dbg !118
  %1222 = or disjoint i32 %142, 514, !dbg !118
  %1223 = lshr i32 %1222, 8, !dbg !118
  %1224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1223, !dbg !118
  %1225 = getelementptr inbounds float, ptr addrspace(3) %1224, i32 %1222, !dbg !118
  %1226 = load i32, ptr addrspace(3) %1225, align 4, !dbg !118
  %1227 = or disjoint i32 %142, 515, !dbg !118
  %1228 = lshr i32 %1227, 8, !dbg !118
  %1229 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1228, !dbg !118
  %1230 = getelementptr inbounds float, ptr addrspace(3) %1229, i32 %1227, !dbg !118
  %1231 = load i32, ptr addrspace(3) %1230, align 4, !dbg !118
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1202, i32 %1206, i32 %1209, i32 %1212, ptr addrspace(1) %1180, i1 %130) #2, !dbg !118
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1216, i32 %1221, i32 %1226, i32 %1231, ptr addrspace(1) %1182, i1 %131) #2, !dbg !118
  %1232 = getelementptr float, ptr addrspace(1) %11, i64 %1179, !dbg !128
  %1233 = getelementptr float, ptr addrspace(1) %11, i64 %1181, !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %1234 = bitcast float %1135 to <1 x i32>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1183, <1 x i32> %1234, i1 true) #2, !dbg !129
  %1235 = bitcast float %1138 to <1 x i32>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1185, <1 x i32> %1235, i1 true) #2, !dbg !129
  %1236 = bitcast float %1141 to <1 x i32>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1187, <1 x i32> %1236, i1 true) #2, !dbg !129
  %1237 = bitcast float %1144 to <1 x i32>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1189, <1 x i32> %1237, i1 true) #2, !dbg !129
  %1238 = bitcast float %1147 to <1 x i32>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1191, <1 x i32> %1238, i1 true) #2, !dbg !129
  %1239 = bitcast float %1150 to <1 x i32>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1193, <1 x i32> %1239, i1 true) #2, !dbg !129
  %1240 = bitcast float %1153 to <1 x i32>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1195, <1 x i32> %1240, i1 true) #2, !dbg !129
  %1241 = bitcast float %1156 to <1 x i32>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1197, <1 x i32> %1241, i1 true) #2, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %1242 = load i32, ptr addrspace(3) %1201, align 4, !dbg !129
  %1243 = load i32, ptr addrspace(3) %1205, align 4, !dbg !129
  %1244 = load i32, ptr addrspace(3) %1208, align 4, !dbg !129
  %1245 = load i32, ptr addrspace(3) %1211, align 4, !dbg !129
  %1246 = load i32, ptr addrspace(3) %1215, align 4, !dbg !129
  %1247 = load i32, ptr addrspace(3) %1220, align 4, !dbg !129
  %1248 = load i32, ptr addrspace(3) %1225, align 4, !dbg !129
  %1249 = load i32, ptr addrspace(3) %1230, align 4, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1242, i32 %1243, i32 %1244, i32 %1245, ptr addrspace(1) %1232, i1 %130) #2, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1246, i32 %1247, i32 %1248, i32 %1249, ptr addrspace(1) %1233, i1 %131) #2, !dbg !129
  ret void, !dbg !130
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cowu6awx4txqdncme5fmkrfif3cbgoe7yju33stjebtbmsh3bixa.py", directory: "inductor_cache/ow")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_7", linkageName: "triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 30, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 31, scope: !7)
!31 = !DILocation(line: 37, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 31, scope: !7)
!33 = !DILocation(line: 38, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 31, scope: !7)
!35 = !DILocation(line: 39, column: 36, scope: !7)
!36 = !DILocation(line: 43, column: 32, scope: !7)
!37 = !DILocation(line: 46, column: 32, scope: !7)
!38 = !DILocation(line: 47, column: 39, scope: !7)
!39 = !DILocation(line: 47, column: 35, scope: !7)
!40 = !DILocation(line: 47, column: 50, scope: !7)
!41 = !DILocation(line: 47, column: 62, scope: !7)
!42 = !DILocation(line: 47, column: 57, scope: !7)
!43 = !DILocation(line: 47, column: 46, scope: !7)
!44 = !DILocation(line: 47, column: 30, scope: !7)
!45 = !DILocation(line: 47, column: 75, scope: !7)
!46 = !DILocation(line: 47, column: 67, scope: !7)
!47 = !DILocation(line: 50, column: 35, scope: !7)
!48 = !DILocation(line: 51, column: 40, scope: !7)
!49 = !DILocation(line: 51, column: 36, scope: !7)
!50 = !DILocation(line: 51, column: 59, scope: !7)
!51 = !DILocation(line: 51, column: 31, scope: !7)
!52 = !DILocation(line: 51, column: 69, scope: !7)
!53 = !DILocation(line: 53, column: 20, scope: !7)
!54 = !DILocation(line: 57, column: 35, scope: !7)
!55 = !DILocation(line: 58, column: 51, scope: !7)
!56 = !DILocation(line: 58, column: 47, scope: !7)
!57 = !DILocation(line: 58, column: 59, scope: !7)
!58 = !DILocation(line: 58, column: 31, scope: !7)
!59 = !DILocation(line: 58, column: 69, scope: !7)
!60 = !DILocation(line: 59, column: 60, scope: !7)
!61 = !DILocation(line: 59, column: 31, scope: !7)
!62 = !DILocation(line: 59, column: 70, scope: !7)
!63 = !DILocation(line: 60, column: 20, scope: !7)
!64 = !DILocation(line: 61, column: 20, scope: !7)
!65 = !DILocation(line: 62, column: 20, scope: !7)
!66 = !DILocation(line: 63, column: 20, scope: !7)
!67 = !DILocation(line: 65, column: 20, scope: !7)
!68 = !DILocation(line: 64, column: 20, scope: !7)
!69 = !DILocation(line: 47, column: 30, scope: !70, inlinedAt: !72)
!70 = distinct !DILexicalBlockFile(scope: !7, file: !71, discriminator: 0)
!71 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!72 = !DILocation(line: 66, column: 23, scope: !7)
!73 = !DILocation(line: 47, column: 29, scope: !70, inlinedAt: !72)
!74 = !DILocation(line: 47, column: 20, scope: !70, inlinedAt: !72)
!75 = !DILocation(line: 47, column: 16, scope: !70, inlinedAt: !72)
!76 = !DILocation(line: 67, column: 31, scope: !7)
!77 = !DILocation(line: 67, column: 68, scope: !7)
!78 = !DILocation(line: 68, column: 31, scope: !7)
!79 = !DILocation(line: 68, column: 68, scope: !7)
!80 = !DILocation(line: 47, column: 30, scope: !70, inlinedAt: !81)
!81 = !DILocation(line: 69, column: 23, scope: !7)
!82 = !DILocation(line: 47, column: 29, scope: !70, inlinedAt: !81)
!83 = !DILocation(line: 47, column: 20, scope: !70, inlinedAt: !81)
!84 = !DILocation(line: 47, column: 16, scope: !70, inlinedAt: !81)
!85 = !DILocation(line: 71, column: 31, scope: !7)
!86 = !DILocation(line: 71, column: 69, scope: !7)
!87 = !DILocation(line: 72, column: 31, scope: !7)
!88 = !DILocation(line: 72, column: 69, scope: !7)
!89 = !DILocation(line: 47, column: 30, scope: !70, inlinedAt: !90)
!90 = !DILocation(line: 73, column: 23, scope: !7)
!91 = !DILocation(line: 47, column: 29, scope: !70, inlinedAt: !90)
!92 = !DILocation(line: 47, column: 20, scope: !70, inlinedAt: !90)
!93 = !DILocation(line: 47, column: 16, scope: !70, inlinedAt: !90)
!94 = !DILocation(line: 78, column: 31, scope: !7)
!95 = !DILocation(line: 78, column: 69, scope: !7)
!96 = !DILocation(line: 79, column: 31, scope: !7)
!97 = !DILocation(line: 79, column: 69, scope: !7)
!98 = !DILocation(line: 47, column: 30, scope: !70, inlinedAt: !99)
!99 = !DILocation(line: 80, column: 23, scope: !7)
!100 = !DILocation(line: 47, column: 29, scope: !70, inlinedAt: !99)
!101 = !DILocation(line: 47, column: 20, scope: !70, inlinedAt: !99)
!102 = !DILocation(line: 47, column: 16, scope: !70, inlinedAt: !99)
!103 = !DILocation(line: 82, column: 31, scope: !7)
!104 = !DILocation(line: 82, column: 70, scope: !7)
!105 = !DILocation(line: 83, column: 31, scope: !7)
!106 = !DILocation(line: 83, column: 70, scope: !7)
!107 = !DILocation(line: 47, column: 30, scope: !70, inlinedAt: !108)
!108 = !DILocation(line: 84, column: 23, scope: !7)
!109 = !DILocation(line: 47, column: 29, scope: !70, inlinedAt: !108)
!110 = !DILocation(line: 47, column: 20, scope: !70, inlinedAt: !108)
!111 = !DILocation(line: 47, column: 16, scope: !70, inlinedAt: !108)
!112 = !DILocation(line: 81, column: 20, scope: !7)
!113 = !DILocation(line: 85, column: 20, scope: !7)
!114 = !DILocation(line: 86, column: 20, scope: !7)
!115 = !DILocation(line: 87, column: 20, scope: !7)
!116 = !DILocation(line: 88, column: 20, scope: !7)
!117 = !DILocation(line: 89, column: 20, scope: !7)
!118 = !DILocation(line: 91, column: 46, scope: !7)
!119 = !DILocation(line: 90, column: 34, scope: !7)
!120 = !DILocation(line: 90, column: 45, scope: !7)
!121 = !DILocation(line: 90, column: 30, scope: !7)
!122 = !DILocation(line: 90, column: 39, scope: !7)
!123 = !DILocation(line: 90, column: 25, scope: !7)
!124 = !DILocation(line: 90, column: 57, scope: !7)
!125 = !DILocation(line: 91, column: 34, scope: !7)
!126 = !DILocation(line: 91, column: 30, scope: !7)
!127 = !DILocation(line: 91, column: 25, scope: !7)
!128 = !DILocation(line: 92, column: 25, scope: !7)
!129 = !DILocation(line: 92, column: 46, scope: !7)
!130 = !DILocation(line: 92, column: 4, scope: !7)
