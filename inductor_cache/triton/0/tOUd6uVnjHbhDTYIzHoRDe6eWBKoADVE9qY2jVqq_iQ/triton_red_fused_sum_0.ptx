//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_red_fused_sum_0  // -- Begin function triton_red_fused_sum_0
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
.noreturn;
.global .align 1 .b8 assertFunc_0[8] = {117, 110, 107, 110, 111, 119, 110};
.global .align 1 .b8 assertFile_0[74] = {105, 110, 100, 117, 99, 116, 111, 114, 95, 99, 97, 99, 104, 101, 47, 105, 50, 47, 99, 105, 50, 99, 99, 51, 97, 114, 113, 117, 102, 116, 101, 121, 119, 115, 115, 100, 105, 99, 97, 117, 115, 104, 50, 118, 53, 120, 97, 103, 111, 105, 120, 121, 102, 97, 119, 100, 122, 106, 117, 55, 122, 106, 111, 105, 109, 110, 55, 116, 52, 113, 46, 112, 121};
.global .align 1 .b8 assertMessage_0[36] = {105, 110, 100, 101, 120, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 58, 32, 48, 32, 60, 61, 32, 116, 109, 112, 56, 32, 60, 32, 49, 54};
.extern .shared .align 16 .b8 global_smem[];
                                        // @triton_red_fused_sum_0
.visible .entry triton_red_fused_sum_0(
	.param .u64 .ptr .global .align 1 triton_red_fused_sum_0_param_0,
	.param .u64 .ptr .global .align 1 triton_red_fused_sum_0_param_1,
	.param .u64 .ptr .global .align 1 triton_red_fused_sum_0_param_2,
	.param .u64 .ptr .global .align 1 triton_red_fused_sum_0_param_3,
	.param .u64 .ptr .global .align 1 triton_red_fused_sum_0_param_4,
	.param .u32 triton_red_fused_sum_0_param_5
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<94>;
	.reg .b32 	%r<273>;
	.reg .f32 	%f<159>;
	.reg .b64 	%rd<76>;
	.loc	1 19 0                          // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:19:0
$L__func_begin0:
	.loc	1 19 0                          // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:19:0

// %bb.0:
	ld.param.u64 	%rd22, [triton_red_fused_sum_0_param_0];
$L__tmp0:
	.loc	1 25 33                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:25:33
	mov.u32 	%r1, %tid.x;
	ld.param.u64 	%rd23, [triton_red_fused_sum_0_param_1];
	and.b32  	%r118, %r1, 31;
	ld.param.u64 	%rd24, [triton_red_fused_sum_0_param_3];
	shl.b32 	%r2, %r1, 2;
	and.b32  	%r119, %r2, 252;
	and.b32  	%r3, %r1, 63;
	shl.b32 	%r120, %r3, 3;
	.loc	1 31 34                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:31:34
	mul.wide.u32 	%rd25, %r119, 4;
	add.s64 	%rd8, %rd22, %rd25;
	mov.b32 	%r109, 0;
	mov.pred 	%p57, -1;
	.loc	1 31 39                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:31:39
	// begin inline asm
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	mov.u32 %r34, 0x0;
	mov.u32 %r35, 0x0;
	@%p57 ld.global.L1::evict_last.v4.b32 { %r32, %r33, %r34, %r35 }, [ %rd8 + 0 ];
	@!%p57 mov.u32 %r32, %r109;
	@!%p57 mov.u32 %r33, %r109;
	@!%p57 mov.u32 %r34, %r109;
	@!%p57 mov.u32 %r35, %r109;
	// end inline asm
	mov.b32 	%f14, %r32;
	mov.b32 	%f15, %r33;
	mov.b32 	%f16, %r34;
	mov.b32 	%f17, %r35;
	.loc	1 33 23                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:33:23
	add.f32 	%f18, %f14, 0f00000000;
	add.f32 	%f19, %f15, 0f00000000;
	add.f32 	%f20, %f16, 0f00000000;
	add.f32 	%f21, %f17, 0f00000000;
$L__tmp1:
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f22, %f18, %f19;
	add.f32 	%f23, %f20, %f22;
	add.f32 	%f24, %f21, %f23;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r121, %f24;
	shfl.sync.bfly.b32	%r122, %r121, 16, 31, -1;
	mov.b32 	%f25, %r122;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f26, %f24, %f25;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r123, %f26;
	shfl.sync.bfly.b32	%r124, %r123, 8, 31, -1;
	mov.b32 	%f27, %r124;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f28, %f26, %f27;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r125, %f28;
	shfl.sync.bfly.b32	%r126, %r125, 4, 31, -1;
	mov.b32 	%f29, %r126;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f30, %f28, %f29;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r127, %f30;
	shfl.sync.bfly.b32	%r128, %r127, 2, 31, -1;
	mov.b32 	%f31, %r128;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f32, %f30, %f31;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r129, %f32;
	shfl.sync.bfly.b32	%r130, %r129, 1, 31, -1;
	mov.b32 	%f33, %r130;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f34, %f32, %f33;
	.loc	2 267 36                        // standard.py:267:36
	setp.eq.s32 	%p6, %r118, 0;
	shr.u32 	%r131, %r1, 3;
	and.b32  	%r132, %r131, 4;
	mov.u32 	%r133, global_smem;
	add.s32 	%r40, %r133, %r132;
	mov.b32 	%r41, %f34;
	// begin inline asm
	@%p6 st.shared.b32 [ %r40 + 0 ], %r41;
	// end inline asm
	bar.sync 	0;
	setp.lt.s32 	%p7, %r1, 2;
	add.s32 	%r43, %r133, %r2;
	// begin inline asm
	@%p7 ld.shared.b32 %r42, [ %r43 + 0 ];
	// end inline asm
	mov.b32 	%f35, %r42;
	shfl.sync.bfly.b32	%r134, %r42, 1, 31, -1;
	mov.b32 	%f36, %r134;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f37, %f35, %f36;
	.loc	2 267 36                        // standard.py:267:36
	and.b32  	%r135, %r1, 1;
	setp.eq.b32 	%p58, %r135, 1;
	not.pred 	%p59, %p58;
	and.pred  	%p8, %p7, %p59;
	mov.b32 	%r45, %f37;
	// begin inline asm
	@%p8 st.shared.b32 [ %r43 + 0 ], %r45;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f1, [global_smem];
$L__tmp2:
	.loc	1 39 30                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:39:30
	bfe.u32 	%r136, %r1, 2, 4;
	.loc	1 43 23                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:43:23
	and.b32  	%r137, %r2, 12;
	.loc	1 45 34                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:45:34
	mul.wide.u32 	%rd26, %r136, 8;
	add.s64 	%rd10, %rd23, %rd26;
	.loc	1 45 39                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:45:39
	// begin inline asm
	mov.u64 %rd9, 0x0;
	@%p57 ld.global.L1::evict_last.b64 { %rd9 }, [ %rd10 + 0 ];
	@!%p57 mov.u64 %rd9, 0x0;
	// end inline asm
	// begin inline asm
	mov.u64 %rd11, 0x0;
	@%p57 ld.global.L1::evict_last.b64 { %rd11 }, [ %rd10 + 0 ];
	@!%p57 mov.u64 %rd11, 0x0;
	// end inline asm
	// begin inline asm
	mov.u64 %rd13, 0x0;
	@%p57 ld.global.L1::evict_last.b64 { %rd13 }, [ %rd10 + 0 ];
	@!%p57 mov.u64 %rd13, 0x0;
	// end inline asm
	// begin inline asm
	mov.u64 %rd15, 0x0;
	@%p57 ld.global.L1::evict_last.b64 { %rd15 }, [ %rd10 + 0 ];
	@!%p57 mov.u64 %rd15, 0x0;
	// end inline asm
	.loc	1 46 43                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:46:43
	and.b32  	%r138, %r1, 48;
	.loc	1 46 40                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:46:40
	or.b32  	%r139, %r137, %r138;
	.loc	1 46 35                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:46:35
	mul.wide.u32 	%rd27, %r139, 4;
	add.s64 	%rd17, %rd22, %rd27;
	.loc	1 46 48                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:46:48
	// begin inline asm
	mov.u32 %r46, 0x0;
	mov.u32 %r47, 0x0;
	mov.u32 %r48, 0x0;
	mov.u32 %r49, 0x0;
	@%p57 ld.global.L1::evict_last.v4.b32 { %r46, %r47, %r48, %r49 }, [ %rd17 + 0 ];
	@!%p57 mov.u32 %r46, %r109;
	@!%p57 mov.u32 %r47, %r109;
	@!%p57 mov.u32 %r48, %r109;
	@!%p57 mov.u32 %r49, %r109;
	// end inline asm
	bar.sync 	0;
	shl.b32 	%r140, %r119, 3;
	add.s32 	%r110, %r133, %r140;
	// begin inline asm
	@%p57 st.shared.b32 [ %r110 + 0 ], %r46;
	// end inline asm
	add.s32 	%r112, %r110, 8;
	// begin inline asm
	@%p57 st.shared.b32 [ %r112 + 0 ], %r47;
	// end inline asm
	add.s32 	%r114, %r110, 16;
	// begin inline asm
	@%p57 st.shared.b32 [ %r114 + 0 ], %r48;
	// end inline asm
	add.s32 	%r116, %r110, 24;
	// begin inline asm
	@%p57 st.shared.b32 [ %r116 + 0 ], %r49;
	// end inline asm
	bar.sync 	0;
	add.s32 	%r12, %r133, %r120;
	ld.shared.f32 	%f2, [%r12];
	ld.shared.f32 	%f3, [%r12+512];
	ld.shared.f32 	%f4, [%r12+1024];
	ld.shared.f32 	%f5, [%r12+1536];
	.loc	1 47 35                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:47:35
	add.s64 	%rd18, %rd24, %rd25;
	.loc	1 47 40                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:47:40
	// begin inline asm
	mov.u32 %r62, 0x0;
	mov.u32 %r63, 0x0;
	mov.u32 %r64, 0x0;
	mov.u32 %r65, 0x0;
	@%p57 ld.global.L1::evict_first.v4.b32 { %r62, %r63, %r64, %r65 }, [ %rd18 + 0 ];
	@!%p57 mov.u32 %r62, %r109;
	@!%p57 mov.u32 %r63, %r109;
	@!%p57 mov.u32 %r64, %r109;
	@!%p57 mov.u32 %r65, %r109;
	// end inline asm
	.loc	1 48 35                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:48:35
	add.s64 	%rd19, %rd17, 256;
	.loc	1 48 53                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:48:53
	// begin inline asm
	mov.u32 %r70, 0x0;
	mov.u32 %r71, 0x0;
	mov.u32 %r72, 0x0;
	mov.u32 %r73, 0x0;
	@%p57 ld.global.L1::evict_last.v4.b32 { %r70, %r71, %r72, %r73 }, [ %rd19 + 0 ];
	@!%p57 mov.u32 %r70, %r109;
	@!%p57 mov.u32 %r71, %r109;
	@!%p57 mov.u32 %r72, %r109;
	@!%p57 mov.u32 %r73, %r109;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p57 st.shared.b32 [ %r110 + 0 ], %r70;
	// end inline asm
	// begin inline asm
	@%p57 st.shared.b32 [ %r112 + 0 ], %r71;
	// end inline asm
	// begin inline asm
	@%p57 st.shared.b32 [ %r114 + 0 ], %r72;
	// end inline asm
	// begin inline asm
	@%p57 st.shared.b32 [ %r116 + 0 ], %r73;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f6, [%r12];
	ld.shared.f32 	%f7, [%r12+512];
	ld.shared.f32 	%f8, [%r12+1024];
	ld.shared.f32 	%f9, [%r12+1536];
	.loc	1 49 35                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:49:35
	add.s64 	%rd20, %rd17, 512;
	.loc	1 49 54                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:49:54
	// begin inline asm
	mov.u32 %r86, 0x0;
	mov.u32 %r87, 0x0;
	mov.u32 %r88, 0x0;
	mov.u32 %r89, 0x0;
	@%p57 ld.global.L1::evict_last.v4.b32 { %r86, %r87, %r88, %r89 }, [ %rd20 + 0 ];
	@!%p57 mov.u32 %r86, %r109;
	@!%p57 mov.u32 %r87, %r109;
	@!%p57 mov.u32 %r88, %r109;
	@!%p57 mov.u32 %r89, %r109;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p57 st.shared.b32 [ %r110 + 0 ], %r86;
	// end inline asm
	// begin inline asm
	@%p57 st.shared.b32 [ %r112 + 0 ], %r87;
	// end inline asm
	// begin inline asm
	@%p57 st.shared.b32 [ %r114 + 0 ], %r88;
	// end inline asm
	// begin inline asm
	@%p57 st.shared.b32 [ %r116 + 0 ], %r89;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f10, [%r12];
	ld.shared.f32 	%f11, [%r12+512];
	ld.shared.f32 	%f12, [%r12+1024];
	ld.shared.f32 	%f13, [%r12+1536];
	.loc	1 50 35                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:50:35
	add.s64 	%rd21, %rd17, 768;
	.loc	1 50 54                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:50:54
	// begin inline asm
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	mov.u32 %r104, 0x0;
	mov.u32 %r105, 0x0;
	@%p57 ld.global.L1::evict_last.v4.b32 { %r102, %r103, %r104, %r105 }, [ %rd21 + 0 ];
	@!%p57 mov.u32 %r102, %r109;
	@!%p57 mov.u32 %r103, %r109;
	@!%p57 mov.u32 %r104, %r109;
	@!%p57 mov.u32 %r105, %r109;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p57 st.shared.b32 [ %r110 + 0 ], %r102;
	// end inline asm
	// begin inline asm
	@%p57 st.shared.b32 [ %r112 + 0 ], %r103;
	// end inline asm
	// begin inline asm
	@%p57 st.shared.b32 [ %r114 + 0 ], %r104;
	// end inline asm
	// begin inline asm
	@%p57 st.shared.b32 [ %r116 + 0 ], %r105;
	// end inline asm
	bar.sync 	0;
	.loc	1 54 36                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:54:36
	shr.u64 	%rd28, %rd9, 59;
	shr.u64 	%rd29, %rd15, 59;
	shr.u64 	%rd30, %rd11, 59;
	shr.u64 	%rd31, %rd13, 59;
	and.b64  	%rd32, %rd31, 16;
	and.b64  	%rd33, %rd30, 16;
	and.b64  	%rd34, %rd29, 16;
	and.b64  	%rd35, %rd28, 16;
	add.s64 	%rd3, %rd35, %rd9;
	add.s64 	%rd5, %rd34, %rd15;
	add.s64 	%rd2, %rd33, %rd11;
	add.s64 	%rd4, %rd32, %rd13;
	.loc	1 55 65                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:55:65
	or.b64  	%rd36, %rd2, %rd4;
	or.b64  	%rd37, %rd3, %rd5;
	or.b64  	%rd38, %rd36, %rd37;
	setp.lt.u64 	%p60, %rd38, 16;
	@%p60 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:
	.loc	1 0 65                          // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:0:65
	ld.param.u64 	%rd7, [triton_red_fused_sum_0_param_4];
	ld.param.u64 	%rd6, [triton_red_fused_sum_0_param_2];
	cvt.u64.u32 	%rd1, %r119;
	add.s32 	%r13, %r12, 512;
	add.s32 	%r14, %r12, 1024;
	add.s32 	%r15, %r12, 1536;
	cvt.u32.u64 	%r249, %rd1;
	.loc	1 50 54                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:50:54
	ld.shared.f32 	%f38, [%r15];
	ld.shared.f32 	%f39, [%r14];
	ld.shared.f32 	%f40, [%r13];
	ld.shared.f32 	%f41, [%r12];
	mov.b32 	%f42, %r105;
	mov.b32 	%f43, %r104;
	mov.b32 	%f44, %r103;
	mov.b32 	%f45, %r102;
	.loc	1 49 54                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:49:54
	mov.b32 	%f46, %r89;
	mov.b32 	%f47, %r88;
	mov.b32 	%f48, %r87;
	mov.b32 	%f49, %r86;
	.loc	1 48 53                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:48:53
	mov.b32 	%f50, %r73;
	mov.b32 	%f51, %r72;
	mov.b32 	%f52, %r71;
	mov.b32 	%f53, %r70;
	.loc	1 47 40                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:47:40
	mov.b32 	%f54, %r65;
	mov.b32 	%f55, %r64;
	mov.b32 	%f56, %r63;
	mov.b32 	%f57, %r62;
	.loc	1 46 48                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:46:48
	mov.b32 	%f58, %r49;
	mov.b32 	%f59, %r48;
	mov.b32 	%f60, %r47;
	mov.b32 	%f61, %r46;
	.loc	1 55 65                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:55:65
	bar.sync 	0;
	.loc	1 56 38                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:56:38
	shl.b32 	%r250, %r1, 4;
	and.b32  	%r251, %r250, 48;
	.loc	1 56 46                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:56:46
	and.b32  	%r252, %r2, 192;
	.loc	1 56 43                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:56:43
	or.b32  	%r253, %r251, %r252;
	.loc	1 56 60                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:56:60
	shr.s64 	%rd50, %rd3, 63;
	shr.u64 	%rd51, %rd50, 60;
	add.s64 	%rd52, %rd3, %rd51;
	and.b64  	%rd53, %rd52, 4611686018427387888;
	sub.s64 	%rd54, %rd3, %rd53;
	shr.s64 	%rd55, %rd2, 63;
	shr.u64 	%rd56, %rd55, 60;
	add.s64 	%rd57, %rd2, %rd56;
	and.b64  	%rd58, %rd57, 4611686018427387888;
	sub.s64 	%rd59, %rd2, %rd58;
	shr.s64 	%rd60, %rd4, 63;
	shr.u64 	%rd61, %rd60, 60;
	add.s64 	%rd62, %rd4, %rd61;
	and.b64  	%rd63, %rd62, 4611686018427387888;
	sub.s64 	%rd64, %rd4, %rd63;
	.loc	1 56 53                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:56:53
	cvt.u64.u32 	%rd65, %r253;
	or.b64  	%rd66, %rd5, %rd65;
	.loc	1 56 35                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:56:35
	shl.b64 	%rd67, %rd54, 2;
	add.s64 	%rd68, %rd6, %rd67;
	mul.wide.u32 	%rd69, %r253, 4;
	add.s64 	%rd45, %rd68, %rd69;
	shl.b64 	%rd70, %rd59, 2;
	add.s64 	%rd71, %rd6, %rd70;
	add.s64 	%rd46, %rd71, %rd69;
	shl.b64 	%rd72, %rd64, 2;
	add.s64 	%rd73, %rd6, %rd72;
	add.s64 	%rd47, %rd73, %rd69;
	shl.b64 	%rd74, %rd66, 2;
	add.s64 	%rd48, %rd6, %rd74;
	.loc	1 56 67                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:56:67
	// begin inline asm
	mov.u32 %r141, 0x0;
	@%p57 ld.global.L1::evict_last.b32 { %r141 }, [ %rd45 + 0 ];
	@!%p57 mov.u32 %r141, %r109;
	// end inline asm
	mov.b32 	%f62, %r141;
	// begin inline asm
	mov.u32 %r143, 0x0;
	@%p57 ld.global.L1::evict_last.b32 { %r143 }, [ %rd46 + 0 ];
	@!%p57 mov.u32 %r143, %r109;
	// end inline asm
	mov.b32 	%f63, %r143;
	// begin inline asm
	mov.u32 %r145, 0x0;
	@%p57 ld.global.L1::evict_last.b32 { %r145 }, [ %rd47 + 0 ];
	@!%p57 mov.u32 %r145, %r109;
	// end inline asm
	mov.b32 	%f64, %r145;
	// begin inline asm
	mov.u32 %r147, 0x0;
	@%p57 ld.global.L1::evict_last.b32 { %r147 }, [ %rd48 + 0 ];
	@!%p57 mov.u32 %r147, %r109;
	// end inline asm
	mov.b32 	%f65, %r147;
	.loc	1 58 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:58:24
	mul.f32 	%f66, %f61, %f57;
	mul.f32 	%f67, %f60, %f56;
	mul.f32 	%f68, %f59, %f55;
	mul.f32 	%f69, %f58, %f54;
	bar.sync 	0;
	mov.b32 	%r150, %f66;
	// begin inline asm
	@%p57 st.shared.b32 [ %r110 + 0 ], %r150;
	// end inline asm
	mov.b32 	%r152, %f67;
	// begin inline asm
	@%p57 st.shared.b32 [ %r112 + 0 ], %r152;
	// end inline asm
	mov.b32 	%r154, %f68;
	// begin inline asm
	@%p57 st.shared.b32 [ %r114 + 0 ], %r154;
	// end inline asm
	mov.b32 	%r156, %f69;
	// begin inline asm
	@%p57 st.shared.b32 [ %r116 + 0 ], %r156;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f70, [%r12];
	ld.shared.f32 	%f71, [%r13];
	ld.shared.f32 	%f72, [%r14];
	ld.shared.f32 	%f73, [%r15];
	.loc	1 59 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:59:24
	neg.f32 	%f74, %f70;
	fma.rn.f32 	%f75, %f2, %f62, %f74;
	mov.b32 	%r254, %f75;
	neg.f32 	%f76, %f71;
	fma.rn.f32 	%f77, %f3, %f63, %f76;
	mov.b32 	%r255, %f77;
	neg.f32 	%f78, %f72;
	fma.rn.f32 	%f79, %f4, %f64, %f78;
	mov.b32 	%r256, %f79;
	neg.f32 	%f80, %f73;
	fma.rn.f32 	%f81, %f5, %f65, %f80;
	mov.b32 	%r257, %f81;
	.loc	1 62 23                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:62:23
	add.f32 	%f82, %f1, 0f38D1B717;
	.loc	1 63 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:63:24
	bar.sync 	0;
	mov.b32 	%r158, %f82;
	// begin inline asm
	@%p57 st.shared.b32 [ %r133 + 0 ], %r158;
	// end inline asm
	// begin inline asm
	@%p57 st.shared.b32 [ %r133 + 0 ], %r158;
	// end inline asm
	// begin inline asm
	@%p57 st.shared.b32 [ %r133 + 0 ], %r158;
	// end inline asm
	// begin inline asm
	@%p57 st.shared.b32 [ %r133 + 0 ], %r158;
	// end inline asm
	bar.sync 	0;
	and.b32  	%r166, %r254, 2147483647;
	ld.shared.u32 	%r167, [global_smem];
	// begin inline asm
	div.full.f32 %r165, %r166, %r167;
	// end inline asm
	mov.b32 	%f83, %r165;
	and.b32  	%r169, %r255, 2147483647;
	// begin inline asm
	div.full.f32 %r168, %r169, %r167;
	// end inline asm
	mov.b32 	%f84, %r168;
	and.b32  	%r172, %r256, 2147483647;
	// begin inline asm
	div.full.f32 %r171, %r172, %r167;
	// end inline asm
	mov.b32 	%f85, %r171;
	and.b32  	%r175, %r257, 2147483647;
	// begin inline asm
	div.full.f32 %r174, %r175, %r167;
	// end inline asm
	mov.b32 	%f86, %r174;
	.loc	1 65 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:65:24
	mul.f32 	%f87, %f57, %f53;
	mul.f32 	%f88, %f56, %f52;
	mul.f32 	%f89, %f55, %f51;
	mul.f32 	%f90, %f54, %f50;
	bar.sync 	0;
	mov.b32 	%r178, %f87;
	// begin inline asm
	@%p57 st.shared.b32 [ %r110 + 0 ], %r178;
	// end inline asm
	mov.b32 	%r180, %f88;
	// begin inline asm
	@%p57 st.shared.b32 [ %r112 + 0 ], %r180;
	// end inline asm
	mov.b32 	%r182, %f89;
	// begin inline asm
	@%p57 st.shared.b32 [ %r114 + 0 ], %r182;
	// end inline asm
	mov.b32 	%r184, %f90;
	// begin inline asm
	@%p57 st.shared.b32 [ %r116 + 0 ], %r184;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f91, [%r12];
	ld.shared.f32 	%f92, [%r13];
	ld.shared.f32 	%f93, [%r14];
	ld.shared.f32 	%f94, [%r15];
	.loc	1 66 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:66:24
	neg.f32 	%f95, %f91;
	fma.rn.f32 	%f96, %f6, %f62, %f95;
	mov.b32 	%r258, %f96;
	neg.f32 	%f97, %f92;
	fma.rn.f32 	%f98, %f7, %f63, %f97;
	mov.b32 	%r259, %f98;
	neg.f32 	%f99, %f93;
	fma.rn.f32 	%f100, %f8, %f64, %f99;
	mov.b32 	%r260, %f100;
	neg.f32 	%f101, %f94;
	fma.rn.f32 	%f102, %f9, %f65, %f101;
	mov.b32 	%r261, %f102;
	.loc	1 68 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:68:24
	and.b32  	%r186, %r258, 2147483647;
	// begin inline asm
	div.full.f32 %r185, %r186, %r167;
	// end inline asm
	mov.b32 	%f103, %r185;
	and.b32  	%r189, %r259, 2147483647;
	// begin inline asm
	div.full.f32 %r188, %r189, %r167;
	// end inline asm
	mov.b32 	%f104, %r188;
	and.b32  	%r192, %r260, 2147483647;
	// begin inline asm
	div.full.f32 %r191, %r192, %r167;
	// end inline asm
	mov.b32 	%f105, %r191;
	and.b32  	%r195, %r261, 2147483647;
	// begin inline asm
	div.full.f32 %r194, %r195, %r167;
	// end inline asm
	mov.b32 	%f106, %r194;
	.loc	1 69 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:69:24
	add.f32 	%f107, %f83, %f103;
	add.f32 	%f108, %f84, %f104;
	add.f32 	%f109, %f85, %f105;
	add.f32 	%f110, %f86, %f106;
	.loc	1 71 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:71:24
	mul.f32 	%f111, %f57, %f49;
	mul.f32 	%f112, %f56, %f48;
	mul.f32 	%f113, %f55, %f47;
	mul.f32 	%f114, %f54, %f46;
	bar.sync 	0;
	mov.b32 	%r198, %f111;
	// begin inline asm
	@%p57 st.shared.b32 [ %r110 + 0 ], %r198;
	// end inline asm
	mov.b32 	%r200, %f112;
	// begin inline asm
	@%p57 st.shared.b32 [ %r112 + 0 ], %r200;
	// end inline asm
	mov.b32 	%r202, %f113;
	// begin inline asm
	@%p57 st.shared.b32 [ %r114 + 0 ], %r202;
	// end inline asm
	mov.b32 	%r204, %f114;
	// begin inline asm
	@%p57 st.shared.b32 [ %r116 + 0 ], %r204;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f115, [%r12];
	ld.shared.f32 	%f116, [%r13];
	ld.shared.f32 	%f117, [%r14];
	ld.shared.f32 	%f118, [%r15];
	.loc	1 72 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:72:24
	neg.f32 	%f119, %f115;
	fma.rn.f32 	%f120, %f10, %f62, %f119;
	mov.b32 	%r262, %f120;
	neg.f32 	%f121, %f116;
	fma.rn.f32 	%f122, %f11, %f63, %f121;
	mov.b32 	%r263, %f122;
	neg.f32 	%f123, %f117;
	fma.rn.f32 	%f124, %f12, %f64, %f123;
	mov.b32 	%r264, %f124;
	neg.f32 	%f125, %f118;
	fma.rn.f32 	%f126, %f13, %f65, %f125;
	mov.b32 	%r265, %f126;
	.loc	1 74 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:74:24
	and.b32  	%r206, %r262, 2147483647;
	// begin inline asm
	div.full.f32 %r205, %r206, %r167;
	// end inline asm
	mov.b32 	%f127, %r205;
	and.b32  	%r209, %r263, 2147483647;
	// begin inline asm
	div.full.f32 %r208, %r209, %r167;
	// end inline asm
	mov.b32 	%f128, %r208;
	and.b32  	%r212, %r264, 2147483647;
	// begin inline asm
	div.full.f32 %r211, %r212, %r167;
	// end inline asm
	mov.b32 	%f129, %r211;
	and.b32  	%r215, %r265, 2147483647;
	// begin inline asm
	div.full.f32 %r214, %r215, %r167;
	// end inline asm
	mov.b32 	%f130, %r214;
	.loc	1 75 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:75:24
	add.f32 	%f131, %f107, %f127;
	add.f32 	%f132, %f108, %f128;
	add.f32 	%f133, %f109, %f129;
	add.f32 	%f134, %f110, %f130;
	.loc	1 77 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:77:24
	mul.f32 	%f135, %f57, %f45;
	mul.f32 	%f136, %f56, %f44;
	mul.f32 	%f137, %f55, %f43;
	mul.f32 	%f138, %f54, %f42;
	bar.sync 	0;
	mov.b32 	%r218, %f135;
	// begin inline asm
	@%p57 st.shared.b32 [ %r110 + 0 ], %r218;
	// end inline asm
	mov.b32 	%r220, %f136;
	// begin inline asm
	@%p57 st.shared.b32 [ %r112 + 0 ], %r220;
	// end inline asm
	mov.b32 	%r222, %f137;
	// begin inline asm
	@%p57 st.shared.b32 [ %r114 + 0 ], %r222;
	// end inline asm
	mov.b32 	%r224, %f138;
	// begin inline asm
	@%p57 st.shared.b32 [ %r116 + 0 ], %r224;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f139, [%r12];
	ld.shared.f32 	%f140, [%r13];
	ld.shared.f32 	%f141, [%r14];
	ld.shared.f32 	%f142, [%r15];
	.loc	1 78 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:78:24
	neg.f32 	%f143, %f139;
	fma.rn.f32 	%f144, %f41, %f62, %f143;
	mov.b32 	%r266, %f144;
	neg.f32 	%f145, %f140;
	fma.rn.f32 	%f146, %f40, %f63, %f145;
	mov.b32 	%r267, %f146;
	neg.f32 	%f147, %f141;
	fma.rn.f32 	%f148, %f39, %f64, %f147;
	mov.b32 	%r268, %f148;
	neg.f32 	%f149, %f142;
	fma.rn.f32 	%f150, %f38, %f65, %f149;
	mov.b32 	%r269, %f150;
	.loc	1 80 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:80:24
	and.b32  	%r226, %r266, 2147483647;
	// begin inline asm
	div.full.f32 %r225, %r226, %r167;
	// end inline asm
	mov.b32 	%f151, %r225;
	and.b32  	%r229, %r267, 2147483647;
	// begin inline asm
	div.full.f32 %r228, %r229, %r167;
	// end inline asm
	mov.b32 	%f152, %r228;
	and.b32  	%r232, %r268, 2147483647;
	// begin inline asm
	div.full.f32 %r231, %r232, %r167;
	// end inline asm
	mov.b32 	%f153, %r231;
	and.b32  	%r235, %r269, 2147483647;
	// begin inline asm
	div.full.f32 %r234, %r235, %r167;
	// end inline asm
	mov.b32 	%f154, %r234;
	.loc	1 81 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:81:24
	add.f32 	%f155, %f131, %f151;
	add.f32 	%f156, %f132, %f152;
	add.f32 	%f157, %f133, %f153;
	add.f32 	%f158, %f134, %f154;
	.loc	1 82 29                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:82:29
	shl.b64 	%rd75, %rd1, 2;
	add.s64 	%rd49, %rd7, %rd75;
	.loc	1 82 76                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:82:76
	bar.sync 	0;
	shl.b32 	%r270, %r3, 2;
	add.s32 	%r237, %r133, %r270;
	mov.b32 	%r238, %f155;
	// begin inline asm
	@%p57 st.shared.b32 [ %r237 + 0 ], %r238;
	// end inline asm
	add.s32 	%r239, %r237, 256;
	mov.b32 	%r240, %f156;
	// begin inline asm
	@%p57 st.shared.b32 [ %r239 + 0 ], %r240;
	// end inline asm
	add.s32 	%r241, %r237, 512;
	mov.b32 	%r242, %f157;
	// begin inline asm
	@%p57 st.shared.b32 [ %r241 + 0 ], %r242;
	// end inline asm
	add.s32 	%r243, %r237, 768;
	mov.b32 	%r244, %f158;
	// begin inline asm
	@%p57 st.shared.b32 [ %r243 + 0 ], %r244;
	// end inline asm
	bar.sync 	0;
	shl.b32 	%r271, %r249, 2;
	add.s32 	%r272, %r133, %r271;
	ld.shared.v4.u32 	{%r245, %r246, %r247, %r248}, [%r272];
	// begin inline asm
	@%p57 st.global.v4.b32 [ %rd49 + 0 ], { %r245, %r246, %r247, %r248 };
	// end inline asm
	.loc	1 36 4                          // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:36:4
	ret;
$L__BB0_1:
	.loc	1 55 65                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:55:65
	mov.u64 	%rd39, assertMessage_0;
	cvta.global.u64 	%rd40, %rd39;
	mov.u64 	%rd41, assertFile_0;
	cvta.global.u64 	%rd42, %rd41;
	mov.u64 	%rd43, assertFunc_0;
	cvta.global.u64 	%rd44, %rd43;
	{ // callseq 0, 0
	.param .b64 param0;
	st.param.b64 	[param0], %rd40;
	.param .b64 param1;
	st.param.b64 	[param1], %rd42;
	.param .b32 param2;
	st.param.b32 	[param2], 55;
	.param .b64 param3;
	st.param.b64 	[param3], %rd44;
	.param .b64 param4;
	st.param.b64 	[param4], 1;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 0
	trap;
$L__tmp3:
$L__func_end0:
                                        // -- End function
}
	.file	1 "inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py"
	.file	2 "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 167                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xa0 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 105
.b8 50
.b8 99
.b8 99
.b8 51
.b8 97
.b8 114
.b8 113
.b8 117
.b8 102
.b8 116
.b8 101
.b8 121
.b8 119
.b8 115
.b8 115
.b8 100
.b8 105
.b8 99
.b8 97
.b8 117
.b8 115
.b8 104
.b8 50
.b8 118
.b8 53
.b8 120
.b8 97
.b8 103
.b8 111
.b8 105
.b8 120
.b8 121
.b8 102
.b8 97
.b8 119
.b8 100
.b8 122
.b8 106
.b8 117
.b8 55
.b8 122
.b8 106
.b8 111
.b8 105
.b8 109
.b8 110
.b8 55
.b8 116
.b8 52
.b8 113
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 105                                 // DW_AT_comp_dir
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 105
.b8 50
.b8 0
.b8 2                                   // Abbrev [2] 0x63:0x19 DW_TAG_subprogram
.b8 116                                 // DW_AT_name
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 114
.b8 101
.b8 100
.b8 95
.b8 102
.b8 117
.b8 115
.b8 101
.b8 100
.b8 95
.b8 115
.b8 117
.b8 109
.b8 95
.b8 48
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x7c:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 99                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x91:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 35                                  // DW_AT_call_line
.b8 25                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
