; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp8 < 16\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_red_fused_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !11 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = lshr i32 %7, 5, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 252, !dbg !12
  %12 = and i32 %7, 63, !dbg !12
  %13 = or disjoint i32 %12, 64, !dbg !12
  %14 = or disjoint i32 %12, 128, !dbg !12
  %15 = or disjoint i32 %12, 192, !dbg !12
  %16 = zext nneg i32 %11 to i64, !dbg !13
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !13
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !14
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !14
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !14
  %23 = bitcast i32 %19 to float, !dbg !14
  %24 = bitcast i32 %20 to float, !dbg !14
  %25 = bitcast i32 %21 to float, !dbg !14
  %26 = bitcast i32 %22 to float, !dbg !14
  %27 = fadd float %23, 0.000000e+00, !dbg !15
  %28 = fadd float %24, 0.000000e+00, !dbg !15
  %29 = fadd float %25, 0.000000e+00, !dbg !15
  %30 = fadd float %26, 0.000000e+00, !dbg !15
  %31 = fadd float %27, %28, !dbg !16
  %32 = fadd float %29, %31, !dbg !16
  %33 = fadd float %30, %32, !dbg !16
  %34 = bitcast float %33 to i32, !dbg !21
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 16, i32 31), !dbg !21
  %36 = bitcast i32 %35 to float, !dbg !21
  %37 = fadd float %33, %36, !dbg !16
  %38 = bitcast float %37 to i32, !dbg !21
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 8, i32 31), !dbg !21
  %40 = bitcast i32 %39 to float, !dbg !21
  %41 = fadd float %37, %40, !dbg !16
  %42 = bitcast float %41 to i32, !dbg !21
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 4, i32 31), !dbg !21
  %44 = bitcast i32 %43 to float, !dbg !21
  %45 = fadd float %41, %44, !dbg !16
  %46 = bitcast float %45 to i32, !dbg !21
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 2, i32 31), !dbg !21
  %48 = bitcast i32 %47 to float, !dbg !21
  %49 = fadd float %45, %48, !dbg !16
  %50 = bitcast float %49 to i32, !dbg !21
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 1, i32 31), !dbg !21
  %52 = bitcast i32 %51 to float, !dbg !21
  %53 = fadd float %49, %52, !dbg !16
  %54 = icmp eq i32 %8, 0, !dbg !21
  %55 = and i32 %9, 1, !dbg !21
  %56 = zext nneg i32 %55 to i64, !dbg !21
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i64 %56, !dbg !21
  %58 = bitcast float %53 to <1 x i32>, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 %54) #5, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %59 = icmp slt i32 %7, 2, !dbg !21
  %60 = sext i32 %7 to i64, !dbg !21
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i64 %60, !dbg !21
  %62 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %61, i1 %59) #5, !dbg !21
  %63 = bitcast i32 %62 to float, !dbg !21
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 1, i32 31), !dbg !21
  %65 = bitcast i32 %64 to float, !dbg !21
  %66 = fadd float %63, %65, !dbg !16
  %67 = and i32 %7, 1, !dbg !21
  %68 = icmp eq i32 %67, 0, !dbg !21
  %69 = and i1 %59, %68, !dbg !21
  %70 = bitcast float %66 to <1 x i32>, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %70, i1 %69) #5, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %71 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !21
  %72 = lshr i32 %7, 2, !dbg !22
  %73 = and i32 %72, 15, !dbg !23
  %74 = and i32 %10, 12, !dbg !24
  %75 = zext nneg i32 %73 to i64, !dbg !25
  %76 = getelementptr i64, ptr addrspace(1) %1, i64 %75, !dbg !25
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %76, i1 true, i1 true) #5, !dbg !26
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %76, i1 true, i1 true) #5, !dbg !26
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %76, i1 true, i1 true) #5, !dbg !26
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %76, i1 true, i1 true) #5, !dbg !26
  %81 = and i32 %7, 48, !dbg !27
  %82 = or disjoint i32 %74, %81, !dbg !28
  %83 = zext nneg i32 %82 to i64, !dbg !29
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !29
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %84, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !30
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !30
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !30
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !30
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %90 = shl nuw nsw i32 %11, 1, !dbg !30
  %91 = zext nneg i32 %90 to i64, !dbg !30
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %91, !dbg !30
  %93 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #5, !dbg !30
  %94 = or disjoint i32 %90, 2, !dbg !30
  %95 = zext nneg i32 %94 to i64, !dbg !30
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %95, !dbg !30
  %97 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #5, !dbg !30
  %98 = or disjoint i32 %90, 4, !dbg !30
  %99 = zext nneg i32 %98 to i64, !dbg !30
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %99, !dbg !30
  %101 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #5, !dbg !30
  %102 = or disjoint i32 %90, 6, !dbg !30
  %103 = zext nneg i32 %102 to i64, !dbg !30
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %103, !dbg !30
  %105 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %106 = shl nuw nsw i32 %12, 1, !dbg !30
  %107 = zext nneg i32 %106 to i64, !dbg !30
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %107, !dbg !30
  %109 = load float, ptr addrspace(3) %108, align 8, !dbg !30
  %110 = shl nuw nsw i32 %13, 1, !dbg !30
  %111 = zext nneg i32 %110 to i64, !dbg !30
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %111, !dbg !30
  %113 = load float, ptr addrspace(3) %112, align 8, !dbg !30
  %114 = shl nuw nsw i32 %14, 1, !dbg !30
  %115 = zext nneg i32 %114 to i64, !dbg !30
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %115, !dbg !30
  %117 = load float, ptr addrspace(3) %116, align 8, !dbg !30
  %118 = shl nuw nsw i32 %15, 1, !dbg !30
  %119 = zext nneg i32 %118 to i64, !dbg !30
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %119, !dbg !30
  %121 = load float, ptr addrspace(3) %120, align 8, !dbg !30
  %122 = getelementptr float, ptr addrspace(1) %3, i64 %16, !dbg !31
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %122, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !32
  %124 = or disjoint i32 %82, 64, !dbg !33
  %125 = zext nneg i32 %124 to i64, !dbg !34
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !34
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %126, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !35
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !35
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !35
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !35
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %132 = insertelement <1 x i32> poison, i32 %128, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %132, i1 true) #5, !dbg !35
  %133 = insertelement <1 x i32> poison, i32 %129, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %133, i1 true) #5, !dbg !35
  %134 = insertelement <1 x i32> poison, i32 %130, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %134, i1 true) #5, !dbg !35
  %135 = insertelement <1 x i32> poison, i32 %131, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %135, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %136 = load float, ptr addrspace(3) %108, align 8, !dbg !35
  %137 = load float, ptr addrspace(3) %112, align 8, !dbg !35
  %138 = load float, ptr addrspace(3) %116, align 8, !dbg !35
  %139 = load float, ptr addrspace(3) %120, align 8, !dbg !35
  %140 = or disjoint i32 %82, 128, !dbg !36
  %141 = zext nneg i32 %140 to i64, !dbg !37
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !37
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %142, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !38
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !38
  %145 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !38
  %146 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !38
  %147 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %148 = insertelement <1 x i32> poison, i32 %144, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %148, i1 true) #5, !dbg !38
  %149 = insertelement <1 x i32> poison, i32 %145, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %149, i1 true) #5, !dbg !38
  %150 = insertelement <1 x i32> poison, i32 %146, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %150, i1 true) #5, !dbg !38
  %151 = insertelement <1 x i32> poison, i32 %147, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %151, i1 true) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %152 = load float, ptr addrspace(3) %108, align 8, !dbg !38
  %153 = load float, ptr addrspace(3) %112, align 8, !dbg !38
  %154 = load float, ptr addrspace(3) %116, align 8, !dbg !38
  %155 = load float, ptr addrspace(3) %120, align 8, !dbg !38
  %156 = or disjoint i32 %82, 192, !dbg !39
  %157 = zext nneg i32 %156 to i64, !dbg !40
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !40
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %158, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !41
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !41
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !41
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !41
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %164 = insertelement <1 x i32> poison, i32 %160, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %164, i1 true) #5, !dbg !41
  %165 = insertelement <1 x i32> poison, i32 %161, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %165, i1 true) #5, !dbg !41
  %166 = insertelement <1 x i32> poison, i32 %162, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %166, i1 true) #5, !dbg !41
  %167 = insertelement <1 x i32> poison, i32 %163, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %167, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %168 = insertelement <4 x i64> poison, i64 %78, i64 0, !dbg !42
  %169 = insertelement <4 x i64> %168, i64 %77, i64 1, !dbg !42
  %170 = insertelement <4 x i64> %169, i64 %79, i64 2, !dbg !42
  %171 = insertelement <4 x i64> %170, i64 %80, i64 3, !dbg !42
  %172 = lshr <4 x i64> %171, splat (i64 59), !dbg !42
  %173 = and <4 x i64> %172, splat (i64 16), !dbg !42
  %174 = add <4 x i64> %173, %171, !dbg !42
  %175 = tail call i64 @llvm.vector.reduce.or.v4i64(<4 x i64> %174), !dbg !43
  %.not = icmp ult i64 %175, 16, !dbg !43
  br i1 %.not, label %177, label %176, !dbg !43

176:                                              ; preds = %6
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 55, ptr nonnull @assertFunc_0, i64 1), !dbg !43
  unreachable, !dbg !43

177:                                              ; preds = %6
  %178 = load float, ptr addrspace(3) %120, align 8, !dbg !41
  %179 = load float, ptr addrspace(3) %116, align 8, !dbg !41
  %180 = load float, ptr addrspace(3) %112, align 8, !dbg !41
  %181 = load float, ptr addrspace(3) %108, align 8, !dbg !41
  %182 = bitcast i32 %163 to float, !dbg !41
  %183 = bitcast i32 %162 to float, !dbg !41
  %184 = bitcast i32 %161 to float, !dbg !41
  %185 = bitcast i32 %160 to float, !dbg !41
  %186 = bitcast i32 %147 to float, !dbg !38
  %187 = bitcast i32 %146 to float, !dbg !38
  %188 = bitcast i32 %145 to float, !dbg !38
  %189 = bitcast i32 %144 to float, !dbg !38
  %190 = bitcast i32 %131 to float, !dbg !35
  %191 = bitcast i32 %130 to float, !dbg !35
  %192 = bitcast i32 %129 to float, !dbg !35
  %193 = bitcast i32 %128 to float, !dbg !35
  %194 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !32
  %195 = bitcast i32 %194 to float, !dbg !32
  %196 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !32
  %197 = bitcast i32 %196 to float, !dbg !32
  %198 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !32
  %199 = bitcast i32 %198 to float, !dbg !32
  %200 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !32
  %201 = bitcast i32 %200 to float, !dbg !32
  %202 = bitcast i32 %89 to float, !dbg !30
  %203 = bitcast i32 %88 to float, !dbg !30
  %204 = bitcast i32 %87 to float, !dbg !30
  %205 = bitcast i32 %86 to float, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %206 = shl i32 %7, 4, !dbg !44
  %207 = and i32 %206, 48, !dbg !44
  %208 = and i32 %10, 192, !dbg !45
  %209 = or disjoint i32 %207, %208, !dbg !46
  %210 = extractelement <4 x i64> %174, i64 1, !dbg !47
  %211 = srem i64 %210, 16, !dbg !47
  %212 = extractelement <4 x i64> %174, i64 0, !dbg !47
  %213 = srem i64 %212, 16, !dbg !47
  %214 = extractelement <4 x i64> %174, i64 2, !dbg !47
  %215 = srem i64 %214, 16, !dbg !47
  %216 = zext nneg i32 %209 to i64, !dbg !48
  %217 = extractelement <4 x i64> %174, i64 3, !dbg !48
  %218 = or disjoint i64 %217, %216, !dbg !48
  %219 = getelementptr float, ptr addrspace(1) %2, i64 %211, !dbg !49
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %216, !dbg !49
  %221 = getelementptr float, ptr addrspace(1) %2, i64 %213, !dbg !49
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %216, !dbg !49
  %223 = getelementptr float, ptr addrspace(1) %2, i64 %215, !dbg !49
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %216, !dbg !49
  %225 = getelementptr float, ptr addrspace(1) %2, i64 %218, !dbg !49
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %220, i1 true, i32 0, i1 true) #5, !dbg !50
  %227 = bitcast i32 %226 to float, !dbg !50
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %222, i1 true, i32 0, i1 true) #5, !dbg !50
  %229 = bitcast i32 %228 to float, !dbg !50
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 true, i32 0, i1 true) #5, !dbg !50
  %231 = bitcast i32 %230 to float, !dbg !50
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %225, i1 true, i32 0, i1 true) #5, !dbg !50
  %233 = bitcast i32 %232 to float, !dbg !50
  %234 = fmul float %109, %227, !dbg !51
  %235 = fmul float %113, %229, !dbg !51
  %236 = fmul float %117, %231, !dbg !51
  %237 = fmul float %121, %233, !dbg !51
  %238 = fmul float %205, %201, !dbg !52
  %239 = fmul float %204, %199, !dbg !52
  %240 = fmul float %203, %197, !dbg !52
  %241 = fmul float %202, %195, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %242 = bitcast float %238 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %242, i1 true) #5, !dbg !52
  %243 = bitcast float %239 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %243, i1 true) #5, !dbg !52
  %244 = bitcast float %240 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %244, i1 true) #5, !dbg !52
  %245 = bitcast float %241 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %245, i1 true) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %246 = load float, ptr addrspace(3) %108, align 8, !dbg !52
  %247 = load float, ptr addrspace(3) %112, align 8, !dbg !52
  %248 = load float, ptr addrspace(3) %116, align 8, !dbg !52
  %249 = load float, ptr addrspace(3) %120, align 8, !dbg !52
  %250 = fsub float %234, %246, !dbg !53
  %251 = fsub float %235, %247, !dbg !53
  %252 = fsub float %236, %248, !dbg !53
  %253 = fsub float %237, %249, !dbg !53
  %254 = tail call float @llvm.fabs.f32(float %250), !dbg !54
  %255 = tail call float @llvm.fabs.f32(float %251), !dbg !54
  %256 = tail call float @llvm.fabs.f32(float %252), !dbg !54
  %257 = tail call float @llvm.fabs.f32(float %253), !dbg !54
  %258 = fadd float %71, 0x3F1A36E2E0000000, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %259 = bitcast float %258 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %259, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %259, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %259, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %259, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %260 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !56
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %254, float %260) #5, !dbg !56
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %255, float %260) #5, !dbg !56
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %256, float %260) #5, !dbg !56
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %257, float %260) #5, !dbg !56
  %265 = fmul float %136, %227, !dbg !57
  %266 = fmul float %137, %229, !dbg !57
  %267 = fmul float %138, %231, !dbg !57
  %268 = fmul float %139, %233, !dbg !57
  %269 = fmul float %201, %193, !dbg !58
  %270 = fmul float %199, %192, !dbg !58
  %271 = fmul float %197, %191, !dbg !58
  %272 = fmul float %195, %190, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %273 = bitcast float %269 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %273, i1 true) #5, !dbg !58
  %274 = bitcast float %270 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %274, i1 true) #5, !dbg !58
  %275 = bitcast float %271 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %275, i1 true) #5, !dbg !58
  %276 = bitcast float %272 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %276, i1 true) #5, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %277 = load float, ptr addrspace(3) %108, align 8, !dbg !58
  %278 = load float, ptr addrspace(3) %112, align 8, !dbg !58
  %279 = load float, ptr addrspace(3) %116, align 8, !dbg !58
  %280 = load float, ptr addrspace(3) %120, align 8, !dbg !58
  %281 = fsub float %265, %277, !dbg !59
  %282 = fsub float %266, %278, !dbg !59
  %283 = fsub float %267, %279, !dbg !59
  %284 = fsub float %268, %280, !dbg !59
  %285 = tail call float @llvm.fabs.f32(float %281), !dbg !60
  %286 = tail call float @llvm.fabs.f32(float %282), !dbg !60
  %287 = tail call float @llvm.fabs.f32(float %283), !dbg !60
  %288 = tail call float @llvm.fabs.f32(float %284), !dbg !60
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %285, float %260) #5, !dbg !61
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %286, float %260) #5, !dbg !61
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %287, float %260) #5, !dbg !61
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %288, float %260) #5, !dbg !61
  %293 = fadd float %261, %289, !dbg !62
  %294 = fadd float %262, %290, !dbg !62
  %295 = fadd float %263, %291, !dbg !62
  %296 = fadd float %264, %292, !dbg !62
  %297 = fmul float %152, %227, !dbg !63
  %298 = fmul float %153, %229, !dbg !63
  %299 = fmul float %154, %231, !dbg !63
  %300 = fmul float %155, %233, !dbg !63
  %301 = fmul float %201, %189, !dbg !64
  %302 = fmul float %199, %188, !dbg !64
  %303 = fmul float %197, %187, !dbg !64
  %304 = fmul float %195, %186, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %305 = bitcast float %301 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %305, i1 true) #5, !dbg !64
  %306 = bitcast float %302 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %306, i1 true) #5, !dbg !64
  %307 = bitcast float %303 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %307, i1 true) #5, !dbg !64
  %308 = bitcast float %304 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %308, i1 true) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %309 = load float, ptr addrspace(3) %108, align 8, !dbg !64
  %310 = load float, ptr addrspace(3) %112, align 8, !dbg !64
  %311 = load float, ptr addrspace(3) %116, align 8, !dbg !64
  %312 = load float, ptr addrspace(3) %120, align 8, !dbg !64
  %313 = fsub float %297, %309, !dbg !65
  %314 = fsub float %298, %310, !dbg !65
  %315 = fsub float %299, %311, !dbg !65
  %316 = fsub float %300, %312, !dbg !65
  %317 = tail call float @llvm.fabs.f32(float %313), !dbg !66
  %318 = tail call float @llvm.fabs.f32(float %314), !dbg !66
  %319 = tail call float @llvm.fabs.f32(float %315), !dbg !66
  %320 = tail call float @llvm.fabs.f32(float %316), !dbg !66
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float %260) #5, !dbg !67
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %318, float %260) #5, !dbg !67
  %323 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %319, float %260) #5, !dbg !67
  %324 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %320, float %260) #5, !dbg !67
  %325 = fadd float %293, %321, !dbg !68
  %326 = fadd float %294, %322, !dbg !68
  %327 = fadd float %295, %323, !dbg !68
  %328 = fadd float %296, %324, !dbg !68
  %329 = fmul float %181, %227, !dbg !69
  %330 = fmul float %180, %229, !dbg !69
  %331 = fmul float %179, %231, !dbg !69
  %332 = fmul float %178, %233, !dbg !69
  %333 = fmul float %201, %185, !dbg !70
  %334 = fmul float %199, %184, !dbg !70
  %335 = fmul float %197, %183, !dbg !70
  %336 = fmul float %195, %182, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %337 = bitcast float %333 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %337, i1 true) #5, !dbg !70
  %338 = bitcast float %334 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %338, i1 true) #5, !dbg !70
  %339 = bitcast float %335 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %339, i1 true) #5, !dbg !70
  %340 = bitcast float %336 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %340, i1 true) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %341 = load float, ptr addrspace(3) %108, align 8, !dbg !70
  %342 = load float, ptr addrspace(3) %112, align 8, !dbg !70
  %343 = load float, ptr addrspace(3) %116, align 8, !dbg !70
  %344 = load float, ptr addrspace(3) %120, align 8, !dbg !70
  %345 = fsub float %329, %341, !dbg !71
  %346 = fsub float %330, %342, !dbg !71
  %347 = fsub float %331, %343, !dbg !71
  %348 = fsub float %332, %344, !dbg !71
  %349 = tail call float @llvm.fabs.f32(float %345), !dbg !72
  %350 = tail call float @llvm.fabs.f32(float %346), !dbg !72
  %351 = tail call float @llvm.fabs.f32(float %347), !dbg !72
  %352 = tail call float @llvm.fabs.f32(float %348), !dbg !72
  %353 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %349, float %260) #5, !dbg !73
  %354 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %350, float %260) #5, !dbg !73
  %355 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %351, float %260) #5, !dbg !73
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float %260) #5, !dbg !73
  %357 = fadd float %325, %353, !dbg !74
  %358 = fadd float %326, %354, !dbg !74
  %359 = fadd float %327, %355, !dbg !74
  %360 = fadd float %328, %356, !dbg !74
  %361 = getelementptr float, ptr addrspace(1) %4, i64 %16, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %362 = zext nneg i32 %12 to i64, !dbg !76
  %363 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %362, !dbg !76
  %364 = bitcast float %357 to <1 x i32>, !dbg !76
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %363, <1 x i32> %364, i1 true) #5, !dbg !76
  %365 = zext nneg i32 %13 to i64, !dbg !76
  %366 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %365, !dbg !76
  %367 = bitcast float %358 to <1 x i32>, !dbg !76
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %366, <1 x i32> %367, i1 true) #5, !dbg !76
  %368 = zext nneg i32 %14 to i64, !dbg !76
  %369 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %368, !dbg !76
  %370 = bitcast float %359 to <1 x i32>, !dbg !76
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %369, <1 x i32> %370, i1 true) #5, !dbg !76
  %371 = zext nneg i32 %15 to i64, !dbg !76
  %372 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %371, !dbg !76
  %373 = bitcast float %360 to <1 x i32>, !dbg !76
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %372, <1 x i32> %373, i1 true) #5, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %374 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %16, !dbg !76
  %.extract = load i32, ptr addrspace(3) %374, align 16, !dbg !76
  %375 = getelementptr inbounds i8, ptr addrspace(3) %374, i64 4, !dbg !76
  %.extract4 = load i32, ptr addrspace(3) %375, align 4, !dbg !76
  %376 = getelementptr inbounds i8, ptr addrspace(3) %374, i64 8, !dbg !76
  %.extract5 = load i32, ptr addrspace(3) %376, align 8, !dbg !76
  %377 = getelementptr inbounds i8, ptr addrspace(3) %374, i64 12, !dbg !76
  %.extract6 = load i32, ptr addrspace(3) %377, align 4, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %361, i1 true) #5, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.or.v4i64(<4 x i64>) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py", directory: "inductor_cache/i2")
!4 = !{ptr @triton_red_fused_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_red_fused_sum_0", linkageName: "triton_red_fused_sum_0", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 25, column: 33, scope: !11)
!13 = !DILocation(line: 31, column: 34, scope: !11)
!14 = !DILocation(line: 31, column: 39, scope: !11)
!15 = !DILocation(line: 33, column: 23, scope: !11)
!16 = !DILocation(line: 256, column: 15, scope: !17, inlinedAt: !20)
!17 = distinct !DILexicalBlockFile(scope: !19, file: !18, discriminator: 0)
!18 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!19 = distinct !DILexicalBlockFile(scope: !11, file: !18, discriminator: 0)
!20 = !DILocation(line: 35, column: 25, scope: !11)
!21 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !20)
!22 = !DILocation(line: 39, column: 25, scope: !11)
!23 = !DILocation(line: 39, column: 30, scope: !11)
!24 = !DILocation(line: 43, column: 23, scope: !11)
!25 = !DILocation(line: 45, column: 34, scope: !11)
!26 = !DILocation(line: 45, column: 39, scope: !11)
!27 = !DILocation(line: 46, column: 43, scope: !11)
!28 = !DILocation(line: 46, column: 40, scope: !11)
!29 = !DILocation(line: 46, column: 35, scope: !11)
!30 = !DILocation(line: 46, column: 48, scope: !11)
!31 = !DILocation(line: 47, column: 35, scope: !11)
!32 = !DILocation(line: 47, column: 40, scope: !11)
!33 = !DILocation(line: 48, column: 45, scope: !11)
!34 = !DILocation(line: 48, column: 35, scope: !11)
!35 = !DILocation(line: 48, column: 53, scope: !11)
!36 = !DILocation(line: 49, column: 46, scope: !11)
!37 = !DILocation(line: 49, column: 35, scope: !11)
!38 = !DILocation(line: 49, column: 54, scope: !11)
!39 = !DILocation(line: 50, column: 46, scope: !11)
!40 = !DILocation(line: 50, column: 35, scope: !11)
!41 = !DILocation(line: 50, column: 54, scope: !11)
!42 = !DILocation(line: 54, column: 36, scope: !11)
!43 = !DILocation(line: 55, column: 65, scope: !11)
!44 = !DILocation(line: 56, column: 38, scope: !11)
!45 = !DILocation(line: 56, column: 46, scope: !11)
!46 = !DILocation(line: 56, column: 43, scope: !11)
!47 = !DILocation(line: 56, column: 60, scope: !11)
!48 = !DILocation(line: 56, column: 53, scope: !11)
!49 = !DILocation(line: 56, column: 35, scope: !11)
!50 = !DILocation(line: 56, column: 67, scope: !11)
!51 = !DILocation(line: 57, column: 24, scope: !11)
!52 = !DILocation(line: 58, column: 24, scope: !11)
!53 = !DILocation(line: 59, column: 24, scope: !11)
!54 = !DILocation(line: 60, column: 28, scope: !11)
!55 = !DILocation(line: 62, column: 23, scope: !11)
!56 = !DILocation(line: 63, column: 24, scope: !11)
!57 = !DILocation(line: 64, column: 24, scope: !11)
!58 = !DILocation(line: 65, column: 24, scope: !11)
!59 = !DILocation(line: 66, column: 24, scope: !11)
!60 = !DILocation(line: 67, column: 28, scope: !11)
!61 = !DILocation(line: 68, column: 24, scope: !11)
!62 = !DILocation(line: 69, column: 24, scope: !11)
!63 = !DILocation(line: 70, column: 24, scope: !11)
!64 = !DILocation(line: 71, column: 24, scope: !11)
!65 = !DILocation(line: 72, column: 24, scope: !11)
!66 = !DILocation(line: 73, column: 28, scope: !11)
!67 = !DILocation(line: 74, column: 24, scope: !11)
!68 = !DILocation(line: 75, column: 24, scope: !11)
!69 = !DILocation(line: 76, column: 24, scope: !11)
!70 = !DILocation(line: 77, column: 24, scope: !11)
!71 = !DILocation(line: 78, column: 24, scope: !11)
!72 = !DILocation(line: 79, column: 28, scope: !11)
!73 = !DILocation(line: 80, column: 24, scope: !11)
!74 = !DILocation(line: 81, column: 24, scope: !11)
!75 = !DILocation(line: 82, column: 29, scope: !11)
!76 = !DILocation(line: 82, column: 76, scope: !11)
!77 = !DILocation(line: 36, column: 4, scope: !11)
