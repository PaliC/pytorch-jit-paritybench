; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_mul_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 3, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = and i32 %11, 7, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = icmp slt i32 %15, 64, !dbg !14
  %17 = shl i32 %11, 1, !dbg !15
  %18 = and i32 %17, 14, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %19 = sdiv i32 %.frozen, 4, !dbg !16
  %20 = mul i32 %19, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = sdiv i32 %15, 16, !dbg !18
  %22 = shl nsw i32 %.decomposed, 4, !dbg !19
  %23 = or disjoint i32 %22, %18, !dbg !20
  %24 = shl i32 %21, 6, !dbg !21
  %25 = add i32 %23, %24, !dbg !22
  %26 = sext i32 %25 to i64, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !23
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %27, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !24
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !24
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !24
  %31 = bitcast i32 %29 to float, !dbg !24
  %32 = bitcast i32 %30 to float, !dbg !24
  %33 = shl nsw i32 %21, 2, !dbg !25
  %34 = add nsw i32 %33, %.decomposed, !dbg !26
  %35 = sext i32 %34 to i64, !dbg !27
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !27
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %16) #5, !dbg !28
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %16) #5, !dbg !28
  %39 = bitcast i32 %38 to float, !dbg !28
  %40 = shl i32 %19, 4, !dbg !29
  %41 = or disjoint i32 %40, %18, !dbg !30
  %42 = sext i32 %41 to i64, !dbg !31
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !31
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !32
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !32
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !32
  %47 = bitcast i32 %45 to float, !dbg !32
  %48 = bitcast i32 %46 to float, !dbg !32
  %49 = sext i32 %19 to i64, !dbg !33
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !33
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %16) #5, !dbg !34
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %16) #5, !dbg !34
  %53 = bitcast i32 %52 to float, !dbg !34
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !35
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %54, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !36
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !36
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !36
  %58 = bitcast i32 %56 to float, !dbg !36
  %59 = bitcast i32 %57 to float, !dbg !36
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !37
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %16) #5, !dbg !38
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %16) #5, !dbg !38
  %63 = bitcast i32 %62 to float, !dbg !38
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !39
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %64, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !40
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !41
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %16) #5, !dbg !42
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %16) #5, !dbg !42
  %69 = bitcast i32 %68 to float, !dbg !42
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i1 = icmp eq i32 %72, 0, !dbg !43
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %.not1.i4 = icmp eq i32 %73, 0, !dbg !43
  br i1 %.not.i1, label %79, label %74, !dbg !43

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %77, label %75, !dbg !43

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %39) #5, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %39) #5, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %82, label %80, !dbg !43

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %39) #5, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %39) #5, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

__nv_sqrtf.exit5:                                 ; preds = %75, %77, %80, %82
  %.0.i3 = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !43
  %84 = fcmp ogt float %.0.i3, 0x3D71979980000000, !dbg !44
  %85 = fcmp uno float %.0.i3, 0.000000e+00, !dbg !48
  %86 = or i1 %84, %85, !dbg !49
  %87 = select i1 %86, float %.0.i3, float 0x3D71979980000000, !dbg !50
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %31, float %87) #5, !dbg !51
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %32, float %87) #5, !dbg !51
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !52
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %.not.i11 = icmp eq i32 %92, 0, !dbg !52
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !52
  %.not1.i14 = icmp eq i32 %93, 0, !dbg !52
  br i1 %.not.i11, label %99, label %94, !dbg !52

94:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i14, label %97, label %95, !dbg !52

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #5, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #5, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

99:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i14, label %102, label %100, !dbg !52

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #5, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #5, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

__nv_sqrtf.exit15:                                ; preds = %95, %97, %100, %102
  %.0.i13 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !52
  %104 = fcmp ogt float %.0.i13, 0x3D71979980000000, !dbg !53
  %105 = fcmp uno float %.0.i13, 0.000000e+00, !dbg !55
  %106 = or i1 %104, %105, !dbg !56
  %107 = select i1 %106, float %.0.i13, float 0x3D71979980000000, !dbg !57
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float %107) #5, !dbg !58
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %48, float %107) #5, !dbg !58
  %110 = fmul float %88, %108, !dbg !59
  %111 = fmul float %89, %109, !dbg !59
  %112 = fadd float %110, %111, !dbg !60
  %113 = select i1 %16, float %112, float 0.000000e+00, !dbg !60
  %114 = bitcast float %113 to i32, !dbg !65
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 4, i32 31), !dbg !65
  %116 = bitcast i32 %115 to float, !dbg !65
  %117 = fadd float %113, %116, !dbg !60
  %118 = bitcast float %117 to i32, !dbg !65
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 2, i32 31), !dbg !65
  %120 = bitcast i32 %119 to float, !dbg !65
  %121 = fadd float %117, %120, !dbg !60
  %122 = bitcast float %121 to i32, !dbg !65
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 1, i32 31), !dbg !65
  %124 = bitcast i32 %123 to float, !dbg !65
  %125 = fadd float %121, %124, !dbg !60
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !66
  %127 = bitcast float %125 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #5, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !66
  %129 = load i32, ptr addrspace(3) %128, align 4, !dbg !66
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !67
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !67
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !67
  %.not.i21 = icmp eq i32 %132, 0, !dbg !67
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !67
  %.not1.i24 = icmp eq i32 %133, 0, !dbg !67
  br i1 %.not.i21, label %139, label %134, !dbg !67

134:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i24, label %137, label %135, !dbg !67

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #5, !dbg !67
  br label %__nv_sqrtf.exit25, !dbg !67

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #5, !dbg !67
  br label %__nv_sqrtf.exit25, !dbg !67

139:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i24, label %142, label %140, !dbg !67

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #5, !dbg !67
  br label %__nv_sqrtf.exit25, !dbg !67

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #5, !dbg !67
  br label %__nv_sqrtf.exit25, !dbg !67

__nv_sqrtf.exit25:                                ; preds = %135, %137, %140, %142
  %.0.i23 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !67
  %144 = fcmp ogt float %.0.i23, 0x3D71979980000000, !dbg !68
  %145 = fcmp uno float %.0.i23, 0.000000e+00, !dbg !70
  %146 = or i1 %144, %145, !dbg !71
  %147 = select i1 %146, float %.0.i23, float 0x3D71979980000000, !dbg !72
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float %147) #5, !dbg !73
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float %147) #5, !dbg !73
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !74
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !74
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !74
  %.not.i31 = icmp eq i32 %152, 0, !dbg !74
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !74
  %.not1.i34 = icmp eq i32 %153, 0, !dbg !74
  br i1 %.not.i31, label %159, label %154, !dbg !74

154:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i34, label %157, label %155, !dbg !74

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #5, !dbg !74
  br label %__nv_sqrtf.exit35, !dbg !74

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #5, !dbg !74
  br label %__nv_sqrtf.exit35, !dbg !74

159:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i34, label %162, label %160, !dbg !74

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #5, !dbg !74
  br label %__nv_sqrtf.exit35, !dbg !74

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #5, !dbg !74
  br label %__nv_sqrtf.exit35, !dbg !74

__nv_sqrtf.exit35:                                ; preds = %155, %157, %160, %162
  %.0.i33 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !74
  %164 = extractvalue { i32, i32 } %65, 1, !dbg !40
  %165 = bitcast i32 %164 to float, !dbg !40
  %166 = extractvalue { i32, i32 } %65, 0, !dbg !40
  %167 = bitcast i32 %166 to float, !dbg !40
  %168 = or disjoint i32 %10, %14, !dbg !13
  %169 = icmp slt i32 %168, 64, !dbg !14
  %170 = fcmp ogt float %.0.i33, 0x3D71979980000000, !dbg !75
  %171 = fcmp uno float %.0.i33, 0.000000e+00, !dbg !77
  %172 = or i1 %170, %171, !dbg !78
  %173 = select i1 %172, float %.0.i33, float 0x3D71979980000000, !dbg !79
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %167, float %173) #5, !dbg !80
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float %173) #5, !dbg !80
  %176 = fmul float %148, %174, !dbg !81
  %177 = fmul float %149, %175, !dbg !81
  %178 = fadd float %176, %177, !dbg !82
  %179 = select i1 %16, float %178, float 0.000000e+00, !dbg !82
  %180 = bitcast float %179 to i32, !dbg !84
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 4, i32 31), !dbg !84
  %182 = bitcast i32 %181 to float, !dbg !84
  %183 = fadd float %179, %182, !dbg !82
  %184 = bitcast float %183 to i32, !dbg !84
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 2, i32 31), !dbg !84
  %186 = bitcast i32 %185 to float, !dbg !84
  %187 = fadd float %183, %186, !dbg !82
  %188 = bitcast float %187 to i32, !dbg !84
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 1, i32 31), !dbg !84
  %190 = bitcast i32 %189 to float, !dbg !84
  %191 = fadd float %187, %190, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %192 = bitcast float %191 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %192, i1 true) #5, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %193 = load i32, ptr addrspace(3) %128, align 4, !dbg !85
  %194 = fmul float %108, %148, !dbg !86
  %195 = fmul float %109, %149, !dbg !86
  %196 = fadd float %194, %195, !dbg !87
  %197 = select i1 %16, float %196, float 0.000000e+00, !dbg !87
  %198 = bitcast float %197 to i32, !dbg !89
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 4, i32 31), !dbg !89
  %200 = bitcast i32 %199 to float, !dbg !89
  %201 = fadd float %197, %200, !dbg !87
  %202 = bitcast float %201 to i32, !dbg !89
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 2, i32 31), !dbg !89
  %204 = bitcast i32 %203 to float, !dbg !89
  %205 = fadd float %201, %204, !dbg !87
  %206 = bitcast float %205 to i32, !dbg !89
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 1, i32 31), !dbg !89
  %208 = bitcast i32 %207 to float, !dbg !89
  %209 = fadd float %205, %208, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  %210 = bitcast float %209 to <1 x i32>, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %210, i1 true) #5, !dbg !90
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  %211 = load i32, ptr addrspace(3) %128, align 4, !dbg !90
  %212 = sext i32 %168 to i64, !dbg !91
  %213 = getelementptr float, ptr addrspace(1) %4, i64 %212, !dbg !91
  %214 = and i32 %11, 56, !dbg !92
  %215 = icmp eq i32 %214, 0, !dbg !92
  %216 = and i1 %215, %169, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %129, ptr addrspace(1) %213, i1 %216) #5, !dbg !92
  %217 = getelementptr float, ptr addrspace(1) %5, i64 %212, !dbg !93
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %193, ptr addrspace(1) %217, i1 %216) #5, !dbg !94
  %218 = getelementptr float, ptr addrspace(1) %6, i64 %212, !dbg !95
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %211, ptr addrspace(1) %218, i1 %216) #5, !dbg !96
  ret void, !dbg !97
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c77hhhx3yihyatzshnro3cufvi5cccsacrubokyecyxkncfco5s7.py", directory: "inductor_cache/77")
!4 = !{ptr @triton_per_fused_mul_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mul_sum_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mul_sum_1", linkageName: "triton_per_fused_mul_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 34, column: 38, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 34, column: 46, scope: !7)
!22 = !DILocation(line: 34, column: 43, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 51, scope: !7)
!25 = !DILocation(line: 35, column: 37, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 42, scope: !7)
!29 = !DILocation(line: 36, column: 38, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 36, column: 30, scope: !7)
!32 = !DILocation(line: 36, column: 43, scope: !7)
!33 = !DILocation(line: 37, column: 30, scope: !7)
!34 = !DILocation(line: 37, column: 35, scope: !7)
!35 = !DILocation(line: 38, column: 31, scope: !7)
!36 = !DILocation(line: 38, column: 52, scope: !7)
!37 = !DILocation(line: 39, column: 31, scope: !7)
!38 = !DILocation(line: 39, column: 43, scope: !7)
!39 = !DILocation(line: 40, column: 31, scope: !7)
!40 = !DILocation(line: 40, column: 44, scope: !7)
!41 = !DILocation(line: 41, column: 31, scope: !7)
!42 = !DILocation(line: 41, column: 36, scope: !7)
!43 = !DILocation(line: 42, column: 26, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 44, column: 40, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 45, column: 18, scope: !7)
!52 = !DILocation(line: 46, column: 26, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !54)
!54 = !DILocation(line: 47, column: 40, scope: !7)
!55 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !54)
!56 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !54)
!57 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !54)
!58 = !DILocation(line: 48, column: 19, scope: !7)
!59 = !DILocation(line: 49, column: 19, scope: !7)
!60 = !DILocation(line: 256, column: 15, scope: !61, inlinedAt: !64)
!61 = distinct !DILexicalBlockFile(scope: !63, file: !62, discriminator: 0)
!62 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!63 = distinct !DILexicalBlockFile(scope: !7, file: !62, discriminator: 0)
!64 = !DILocation(line: 52, column: 26, scope: !7)
!65 = !DILocation(line: 267, column: 36, scope: !63, inlinedAt: !64)
!66 = !DILocation(line: 52, column: 29, scope: !7)
!67 = !DILocation(line: 53, column: 27, scope: !7)
!68 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !69)
!69 = !DILocation(line: 54, column: 42, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !69)
!73 = !DILocation(line: 55, column: 20, scope: !7)
!74 = !DILocation(line: 56, column: 27, scope: !7)
!75 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !76)
!76 = !DILocation(line: 57, column: 42, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !76)
!80 = !DILocation(line: 58, column: 20, scope: !7)
!81 = !DILocation(line: 59, column: 20, scope: !7)
!82 = !DILocation(line: 256, column: 15, scope: !61, inlinedAt: !83)
!83 = !DILocation(line: 62, column: 26, scope: !7)
!84 = !DILocation(line: 267, column: 36, scope: !63, inlinedAt: !83)
!85 = !DILocation(line: 62, column: 29, scope: !7)
!86 = !DILocation(line: 63, column: 20, scope: !7)
!87 = !DILocation(line: 256, column: 15, scope: !61, inlinedAt: !88)
!88 = !DILocation(line: 66, column: 26, scope: !7)
!89 = !DILocation(line: 267, column: 36, scope: !63, inlinedAt: !88)
!90 = !DILocation(line: 66, column: 29, scope: !7)
!91 = !DILocation(line: 67, column: 25, scope: !7)
!92 = !DILocation(line: 67, column: 37, scope: !7)
!93 = !DILocation(line: 68, column: 25, scope: !7)
!94 = !DILocation(line: 68, column: 37, scope: !7)
!95 = !DILocation(line: 69, column: 25, scope: !7)
!96 = !DILocation(line: 69, column: 37, scope: !7)
!97 = !DILocation(line: 69, column: 4, scope: !7)
