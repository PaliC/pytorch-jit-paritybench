; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = srem i32 %14, 512, !dbg !14
  %17 = sext i32 %14 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = sext i32 %15 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !16
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !16
  %23 = sext i32 %16 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !19
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !20
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !21
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !22
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !23
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !24
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !24
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !24
  %40 = bitcast i32 %36 to float, !dbg !24
  %41 = bitcast i32 %37 to float, !dbg !24
  %42 = bitcast i32 %38 to float, !dbg !24
  %43 = bitcast i32 %39 to float, !dbg !24
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !24
  %49 = bitcast i32 %45 to float, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = bitcast i32 %47 to float, !dbg !24
  %52 = bitcast i32 %48 to float, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !25
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !26
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !26
  %56 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !27
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !28
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !28
  %59 = fadd float %40, 0x3EE4F8B580000000, !dbg !29
  %60 = fadd float %41, 0x3EE4F8B580000000, !dbg !29
  %61 = fadd float %42, 0x3EE4F8B580000000, !dbg !29
  %62 = fadd float %43, 0x3EE4F8B580000000, !dbg !29
  %63 = fadd float %49, 0x3EE4F8B580000000, !dbg !29
  %64 = fadd float %50, 0x3EE4F8B580000000, !dbg !29
  %65 = fadd float %51, 0x3EE4F8B580000000, !dbg !29
  %66 = fadd float %52, 0x3EE4F8B580000000, !dbg !29
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %67, 0, !dbg !30
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %68, 0, !dbg !30
  br i1 %.not.i, label %74, label %69, !dbg !30

69:                                               ; preds = %8
  br i1 %.not1.i, label %72, label %70, !dbg !30

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

74:                                               ; preds = %8
  br i1 %.not1.i, label %77, label %75, !dbg !30

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %70, %72, %75, %77
  %.0.i = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !30
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %79, 0, !dbg !30
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %80, 0, !dbg !30
  br i1 %.not.i1, label %86, label %81, !dbg !30

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %84, label %82, !dbg !30

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %89, label %87, !dbg !30

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %82, %84, %87, %89
  %.0.i3 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !30
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %91, 0, !dbg !30
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %92, 0, !dbg !30
  br i1 %.not.i6, label %98, label %93, !dbg !30

93:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %96, label %94, !dbg !30

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

98:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %101, label %99, !dbg !30

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %94, %96, %99, %101
  %.0.i8 = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !30
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %103, 0, !dbg !30
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %104, 0, !dbg !30
  br i1 %.not.i11, label %110, label %105, !dbg !30

105:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %108, label %106, !dbg !30

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

110:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %113, label %111, !dbg !30

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %106, %108, %111, %113
  %.0.i13 = phi float [ %107, %106 ], [ %109, %108 ], [ %112, %111 ], [ %114, %113 ], !dbg !30
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i16 = icmp eq i32 %115, 0, !dbg !30
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i19 = icmp eq i32 %116, 0, !dbg !30
  br i1 %.not.i16, label %122, label %117, !dbg !30

117:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %120, label %118, !dbg !30

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

122:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %125, label %123, !dbg !30

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

__nv_sqrtf.exit20:                                ; preds = %118, %120, %123, %125
  %.0.i18 = phi float [ %119, %118 ], [ %121, %120 ], [ %124, %123 ], [ %126, %125 ], !dbg !30
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i21 = icmp eq i32 %127, 0, !dbg !30
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i24 = icmp eq i32 %128, 0, !dbg !30
  br i1 %.not.i21, label %134, label %129, !dbg !30

129:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %132, label %130, !dbg !30

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

134:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %137, label %135, !dbg !30

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

__nv_sqrtf.exit25:                                ; preds = %130, %132, %135, %137
  %.0.i23 = phi float [ %131, %130 ], [ %133, %132 ], [ %136, %135 ], [ %138, %137 ], !dbg !30
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i26 = icmp eq i32 %139, 0, !dbg !30
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i29 = icmp eq i32 %140, 0, !dbg !30
  br i1 %.not.i26, label %146, label %141, !dbg !30

141:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %144, label %142, !dbg !30

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

146:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %149, label %147, !dbg !30

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

__nv_sqrtf.exit30:                                ; preds = %142, %144, %147, %149
  %.0.i28 = phi float [ %143, %142 ], [ %145, %144 ], [ %148, %147 ], [ %150, %149 ], !dbg !30
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i31 = icmp eq i32 %151, 0, !dbg !30
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i34 = icmp eq i32 %152, 0, !dbg !30
  br i1 %.not.i31, label %158, label %153, !dbg !30

153:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %156, label %154, !dbg !30

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

158:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %161, label %159, !dbg !30

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

__nv_sqrtf.exit35:                                ; preds = %154, %156, %159, %161
  %.0.i33 = phi float [ %155, %154 ], [ %157, %156 ], [ %160, %159 ], [ %162, %161 ], !dbg !30
  %163 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !16
  %164 = bitcast i32 %163 to float, !dbg !16
  %165 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !18
  %166 = bitcast i32 %165 to float, !dbg !18
  %167 = fadd float %164, %166, !dbg !31
  %168 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !22
  %169 = bitcast i32 %168 to float, !dbg !22
  %170 = fsub float %167, %169, !dbg !32
  %171 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !16
  %172 = bitcast i32 %171 to float, !dbg !16
  %173 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !18
  %174 = bitcast i32 %173 to float, !dbg !18
  %175 = fadd float %172, %174, !dbg !31
  %176 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !22
  %177 = bitcast i32 %176 to float, !dbg !22
  %178 = fsub float %175, %177, !dbg !32
  %179 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !16
  %180 = bitcast i32 %179 to float, !dbg !16
  %181 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !18
  %182 = bitcast i32 %181 to float, !dbg !18
  %183 = fadd float %180, %182, !dbg !31
  %184 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !22
  %185 = bitcast i32 %184 to float, !dbg !22
  %186 = fsub float %183, %185, !dbg !32
  %187 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !16
  %188 = bitcast i32 %187 to float, !dbg !16
  %189 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !18
  %190 = bitcast i32 %189 to float, !dbg !18
  %191 = fadd float %188, %190, !dbg !31
  %192 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !22
  %193 = bitcast i32 %192 to float, !dbg !22
  %194 = fsub float %191, %193, !dbg !32
  %195 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %196 = bitcast i32 %195 to float, !dbg !16
  %197 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %198 = bitcast i32 %197 to float, !dbg !18
  %199 = fadd float %196, %198, !dbg !31
  %200 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !22
  %201 = bitcast i32 %200 to float, !dbg !22
  %202 = fsub float %199, %201, !dbg !32
  %203 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %204 = bitcast i32 %203 to float, !dbg !16
  %205 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %206 = bitcast i32 %205 to float, !dbg !18
  %207 = fadd float %204, %206, !dbg !31
  %208 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !22
  %209 = bitcast i32 %208 to float, !dbg !22
  %210 = fsub float %207, %209, !dbg !32
  %211 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %212 = bitcast i32 %211 to float, !dbg !16
  %213 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %214 = bitcast i32 %213 to float, !dbg !18
  %215 = fadd float %212, %214, !dbg !31
  %216 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !22
  %217 = bitcast i32 %216 to float, !dbg !22
  %218 = fsub float %215, %217, !dbg !32
  %219 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %220 = bitcast i32 %219 to float, !dbg !16
  %221 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %222 = bitcast i32 %221 to float, !dbg !18
  %223 = fadd float %220, %222, !dbg !31
  %224 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !22
  %225 = bitcast i32 %224 to float, !dbg !22
  %226 = fsub float %223, %225, !dbg !32
  %227 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !28
  %228 = bitcast i32 %227 to float, !dbg !28
  %229 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !28
  %230 = bitcast i32 %229 to float, !dbg !28
  %231 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !28
  %232 = bitcast i32 %231 to float, !dbg !28
  %233 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !28
  %234 = bitcast i32 %233 to float, !dbg !28
  %235 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !28
  %236 = bitcast i32 %235 to float, !dbg !28
  %237 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !28
  %238 = bitcast i32 %237 to float, !dbg !28
  %239 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !28
  %240 = bitcast i32 %239 to float, !dbg !28
  %241 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !28
  %242 = bitcast i32 %241 to float, !dbg !28
  %243 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %244 = bitcast i32 %243 to float, !dbg !26
  %245 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %246 = bitcast i32 %245 to float, !dbg !26
  %247 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %248 = bitcast i32 %247 to float, !dbg !26
  %249 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %250 = bitcast i32 %249 to float, !dbg !26
  %251 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !26
  %252 = bitcast i32 %251 to float, !dbg !26
  %253 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !26
  %254 = bitcast i32 %253 to float, !dbg !26
  %255 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !26
  %256 = bitcast i32 %255 to float, !dbg !26
  %257 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !26
  %258 = bitcast i32 %257 to float, !dbg !26
  %259 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !20
  %260 = bitcast i32 %259 to float, !dbg !20
  %261 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !20
  %262 = bitcast i32 %261 to float, !dbg !20
  %263 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !20
  %264 = bitcast i32 %263 to float, !dbg !20
  %265 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !20
  %266 = bitcast i32 %265 to float, !dbg !20
  %267 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !20
  %268 = bitcast i32 %267 to float, !dbg !20
  %269 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !20
  %270 = bitcast i32 %269 to float, !dbg !20
  %271 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !20
  %272 = bitcast i32 %271 to float, !dbg !20
  %273 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !20
  %274 = bitcast i32 %273 to float, !dbg !20
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !33
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !33
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !33
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !33
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !33
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !33
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !33
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !33
  %283 = fmul float %226, %275, !dbg !34
  %284 = fmul float %218, %276, !dbg !34
  %285 = fmul float %210, %277, !dbg !34
  %286 = fmul float %202, %278, !dbg !34
  %287 = fmul float %194, %279, !dbg !34
  %288 = fmul float %186, %280, !dbg !34
  %289 = fmul float %178, %281, !dbg !34
  %290 = fmul float %170, %282, !dbg !34
  %291 = fmul float %283, %258, !dbg !35
  %292 = fmul float %284, %256, !dbg !35
  %293 = fmul float %285, %254, !dbg !35
  %294 = fmul float %286, %252, !dbg !35
  %295 = fmul float %287, %250, !dbg !35
  %296 = fmul float %288, %248, !dbg !35
  %297 = fmul float %289, %246, !dbg !35
  %298 = fmul float %290, %244, !dbg !35
  %299 = fadd float %291, %242, !dbg !36
  %300 = fadd float %292, %240, !dbg !36
  %301 = fadd float %293, %238, !dbg !36
  %302 = fadd float %294, %236, !dbg !36
  %303 = fadd float %295, %234, !dbg !36
  %304 = fadd float %296, %232, !dbg !36
  %305 = fadd float %297, %230, !dbg !36
  %306 = fadd float %298, %228, !dbg !36
  %307 = fadd float %299, %274, !dbg !37
  %308 = fadd float %300, %272, !dbg !37
  %309 = fadd float %301, %270, !dbg !37
  %310 = fadd float %302, %268, !dbg !37
  %311 = fadd float %303, %266, !dbg !37
  %312 = fadd float %304, %264, !dbg !37
  %313 = fadd float %305, %262, !dbg !37
  %314 = fadd float %306, %260, !dbg !37
  %315 = bitcast float %223 to i32, !dbg !38
  %316 = bitcast float %215 to i32, !dbg !38
  %317 = bitcast float %207 to i32, !dbg !38
  %318 = bitcast float %199 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %315, i32 %316, i32 %317, i32 %318, ptr addrspace(1) %18, i1 true) #3, !dbg !38
  %319 = bitcast float %191 to i32, !dbg !38
  %320 = bitcast float %183 to i32, !dbg !38
  %321 = bitcast float %175 to i32, !dbg !38
  %322 = bitcast float %167 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %319, i32 %320, i32 %321, i32 %322, ptr addrspace(1) %20, i1 true) #3, !dbg !38
  %323 = bitcast float %307 to i32, !dbg !39
  %324 = bitcast float %308 to i32, !dbg !39
  %325 = bitcast float %309 to i32, !dbg !39
  %326 = bitcast float %310 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %323, i32 %324, i32 %325, i32 %326, ptr addrspace(1) %27, i1 true) #3, !dbg !39
  %327 = bitcast float %311 to i32, !dbg !39
  %328 = bitcast float %312 to i32, !dbg !39
  %329 = bitcast float %313 to i32, !dbg !39
  %330 = bitcast float %314 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %327, i32 %328, i32 %329, i32 %330, ptr addrspace(1) %28, i1 true) #3, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5fekeup3zckiqlc655y6gblu75ofcyne5f5beqgo5hklicssakz.py", directory: "inductor_cache/5f")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 34, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 26, scope: !7)
!31 = !DILocation(line: 33, column: 18, scope: !7)
!32 = !DILocation(line: 34, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 20, scope: !7)
!34 = !DILocation(line: 42, column: 19, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 39, scope: !7)
!39 = !DILocation(line: 47, column: 40, scope: !7)
!40 = !DILocation(line: 47, column: 4, scope: !7)
