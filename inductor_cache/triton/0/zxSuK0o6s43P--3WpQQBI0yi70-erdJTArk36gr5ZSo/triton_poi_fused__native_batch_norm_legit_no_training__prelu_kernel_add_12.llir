; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 7, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 127, !dbg !12
  %15 = shl i32 %13, 1, !dbg !12
  %16 = and i32 %15, 126, !dbg !12
  %17 = or disjoint i32 %12, %14, !dbg !13
  %18 = or disjoint i32 %12, %16, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %20 = shl i32 %19, 1, !dbg !15
  %21 = lshr i32 %13, 6, !dbg !16
  %.lobit = and i32 %21, 1, !dbg !16
  %22 = or disjoint i32 %20, %.lobit, !dbg !17
  %23 = icmp slt i32 %20, 2, !dbg !18
  %24 = icmp slt i32 %22, 2, !dbg !18
  %.frozen = freeze i32 %18, !dbg !19
  %25 = sdiv i32 %.frozen, 256, !dbg !19
  %26 = mul i32 %25, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %26, !dbg !20
  %27 = add i32 %17, %19, !dbg !21
  %28 = shl i32 %27, 1, !dbg !21
  %29 = sext i32 %28 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %23) #4, !dbg !23
  %32 = sext i32 %20 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !24
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %23) #4, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !26
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %23) #4, !dbg !27
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !27
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !27
  %39 = bitcast i32 %37 to float, !dbg !27
  %40 = bitcast i32 %38 to float, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !28
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %23) #4, !dbg !29
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !30
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %23) #4, !dbg !31
  %45 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !32
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %23) #4, !dbg !33
  %47 = shl i32 %22, 8, !dbg !34
  %48 = add i32 %47, %.decomposed, !dbg !35
  %49 = shl i32 %25, 9, !dbg !36
  %50 = add i32 %48, %49, !dbg !37
  %51 = sext i32 %50 to i64, !dbg !38
  %52 = getelementptr float, ptr addrspace(1) %6, i64 %51, !dbg !38
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %24) #4, !dbg !39
  %54 = fadd float %39, 0x3EE4F8B580000000, !dbg !40
  %55 = fadd float %40, 0x3EE4F8B580000000, !dbg !40
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i = icmp eq i32 %56, 0, !dbg !41
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i = icmp eq i32 %57, 0, !dbg !41
  br i1 %.not.i, label %63, label %58, !dbg !41

58:                                               ; preds = %10
  br i1 %.not1.i, label %61, label %59, !dbg !41

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

63:                                               ; preds = %10
  br i1 %.not1.i, label %66, label %64, !dbg !41

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %59, %61, %64, %66
  %.0.i = phi float [ %60, %59 ], [ %62, %61 ], [ %65, %64 ], [ %67, %66 ], !dbg !41
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i2 = icmp eq i32 %68, 0, !dbg !41
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i5 = icmp eq i32 %69, 0, !dbg !41
  br i1 %.not.i2, label %75, label %70, !dbg !41

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %73, label %71, !dbg !41

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !41
  br label %__nv_sqrtf.exit6, !dbg !41

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !41
  br label %__nv_sqrtf.exit6, !dbg !41

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %78, label %76, !dbg !41

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !41
  br label %__nv_sqrtf.exit6, !dbg !41

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !41
  br label %__nv_sqrtf.exit6, !dbg !41

__nv_sqrtf.exit6:                                 ; preds = %71, %73, %76, %78
  %.0.i4 = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !41
  %80 = extractvalue { i32, i32 } %31, 1, !dbg !23
  %81 = bitcast i32 %80 to float, !dbg !23
  %82 = extractvalue { i32, i32 } %34, 1, !dbg !25
  %83 = bitcast i32 %82 to float, !dbg !25
  %84 = fsub float %81, %83, !dbg !42
  %85 = extractvalue { i32, i32 } %31, 0, !dbg !23
  %86 = bitcast i32 %85 to float, !dbg !23
  %87 = extractvalue { i32, i32 } %34, 0, !dbg !25
  %88 = bitcast i32 %87 to float, !dbg !25
  %89 = fsub float %86, %88, !dbg !42
  %90 = extractvalue { i32, i32 } %53, 1, !dbg !39
  %91 = bitcast i32 %90 to float, !dbg !39
  %92 = extractvalue { i32, i32 } %53, 0, !dbg !39
  %93 = bitcast i32 %92 to float, !dbg !39
  %94 = extractvalue { i32, i32 } %46, 1, !dbg !33
  %95 = bitcast i32 %94 to float, !dbg !33
  %96 = extractvalue { i32, i32 } %46, 0, !dbg !33
  %97 = bitcast i32 %96 to float, !dbg !33
  %98 = extractvalue { i32, i32 } %44, 1, !dbg !31
  %99 = bitcast i32 %98 to float, !dbg !31
  %100 = extractvalue { i32, i32 } %44, 0, !dbg !31
  %101 = bitcast i32 %100 to float, !dbg !31
  %102 = extractvalue { i32, i32 } %42, 1, !dbg !29
  %103 = bitcast i32 %102 to float, !dbg !29
  %104 = extractvalue { i32, i32 } %42, 0, !dbg !29
  %105 = bitcast i32 %104 to float, !dbg !29
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !43
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #4, !dbg !43
  %108 = fmul float %89, %106, !dbg !44
  %109 = fmul float %84, %107, !dbg !44
  %110 = fmul float %108, %105, !dbg !45
  %111 = fmul float %109, %103, !dbg !45
  %112 = fadd float %110, %101, !dbg !46
  %113 = fadd float %111, %99, !dbg !46
  %114 = fcmp ogt float %112, 0.000000e+00, !dbg !47
  %115 = fcmp ogt float %113, 0.000000e+00, !dbg !47
  %116 = fmul float %112, %97, !dbg !48
  %117 = fmul float %113, %95, !dbg !48
  %118 = select i1 %114, float %112, float %116, !dbg !49
  %119 = select i1 %115, float %113, float %117, !dbg !49
  %120 = and i32 %15, 254, !dbg !49
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !49
  %122 = bitcast float %118 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #4, !dbg !49
  %123 = getelementptr inbounds i8, ptr addrspace(3) %121, i32 520, !dbg !49
  %124 = bitcast float %119 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %125 = lshr i32 %15, 6, !dbg !49
  %126 = and i32 %125, 2, !dbg !49
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %126, !dbg !49
  %128 = getelementptr float, ptr addrspace(3) %127, i32 %120, !dbg !49
  %129 = load float, ptr addrspace(3) %128, align 8, !dbg !49
  %130 = getelementptr inbounds i8, ptr addrspace(3) %128, i32 4, !dbg !49
  %131 = load float, ptr addrspace(3) %130, align 4, !dbg !49
  %132 = fadd float %129, %93, !dbg !50
  %133 = fadd float %131, %91, !dbg !50
  %134 = getelementptr float, ptr addrspace(1) %7, i64 %51, !dbg !51
  %135 = bitcast float %132 to i32, !dbg !52
  %136 = bitcast float %133 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %135, i32 %136, ptr addrspace(1) %134, i1 %24) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cf7ngmalthsp2ker5pntizg64spnndx267usywyursud5osmuwf2.py", directory: "inductor_cache/f7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 42, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 36, scope: !7)
!34 = !DILocation(line: 38, column: 40, scope: !7)
!35 = !DILocation(line: 38, column: 36, scope: !7)
!36 = !DILocation(line: 38, column: 49, scope: !7)
!37 = !DILocation(line: 38, column: 45, scope: !7)
!38 = !DILocation(line: 38, column: 31, scope: !7)
!39 = !DILocation(line: 38, column: 54, scope: !7)
!40 = !DILocation(line: 41, column: 18, scope: !7)
!41 = !DILocation(line: 42, column: 26, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 44, column: 18, scope: !7)
!44 = !DILocation(line: 47, column: 19, scope: !7)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 52, column: 20, scope: !7)
!49 = !DILocation(line: 53, column: 35, scope: !7)
!50 = !DILocation(line: 54, column: 20, scope: !7)
!51 = !DILocation(line: 55, column: 25, scope: !7)
!52 = !DILocation(line: 55, column: 55, scope: !7)
!53 = !DILocation(line: 55, column: 4, scope: !7)
