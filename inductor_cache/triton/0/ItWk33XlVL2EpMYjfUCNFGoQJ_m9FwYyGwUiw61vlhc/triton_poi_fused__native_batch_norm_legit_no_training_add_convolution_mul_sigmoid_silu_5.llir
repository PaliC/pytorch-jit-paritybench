; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %19 = shl i32 %18, 10, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = and i32 %20, 127, !dbg !12
  %22 = or disjoint i32 %21, 128, !dbg !12
  %23 = or disjoint i32 %21, 256, !dbg !12
  %24 = or disjoint i32 %21, 384, !dbg !12
  %25 = or disjoint i32 %19, %21, !dbg !13
  %26 = or disjoint i32 %19, %22, !dbg !13
  %27 = or disjoint i32 %19, %23, !dbg !13
  %28 = or disjoint i32 %19, %24, !dbg !13
  %29 = or disjoint i32 %25, 512, !dbg !13
  %30 = or disjoint i32 %25, 640, !dbg !13
  %31 = or disjoint i32 %25, 768, !dbg !13
  %32 = or disjoint i32 %25, 896, !dbg !13
  %33 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %34 = icmp slt i32 %33, 512, !dbg !15
  %35 = sdiv i32 %25, 4096, !dbg !16
  %36 = sdiv i32 %26, 4096, !dbg !16
  %37 = sdiv i32 %27, 4096, !dbg !16
  %38 = sdiv i32 %28, 4096, !dbg !16
  %39 = sdiv i32 %29, 4096, !dbg !16
  %40 = sdiv i32 %30, 4096, !dbg !16
  %41 = sdiv i32 %31, 4096, !dbg !16
  %42 = sdiv i32 %32, 4096, !dbg !16
  %43 = shl i32 %25, 9, !dbg !17
  %44 = shl i32 %26, 9, !dbg !17
  %45 = shl i32 %27, 9, !dbg !17
  %46 = shl i32 %28, 9, !dbg !17
  %47 = shl i32 %29, 9, !dbg !17
  %48 = shl i32 %30, 9, !dbg !17
  %49 = shl i32 %31, 9, !dbg !17
  %50 = shl i32 %32, 9, !dbg !17
  %51 = add i32 %43, %33, !dbg !18
  %52 = add i32 %44, %33, !dbg !18
  %53 = add i32 %45, %33, !dbg !18
  %54 = add i32 %46, %33, !dbg !18
  %55 = add i32 %33, %47, !dbg !18
  %56 = add i32 %33, %48, !dbg !18
  %57 = add i32 %33, %49, !dbg !18
  %58 = add i32 %33, %50, !dbg !18
  %59 = sext i32 %51 to i64, !dbg !19
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !19
  %61 = sext i32 %52 to i64, !dbg !19
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !19
  %63 = sext i32 %53 to i64, !dbg !19
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !19
  %65 = sext i32 %54 to i64, !dbg !19
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !19
  %67 = sext i32 %55 to i64, !dbg !19
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !19
  %69 = sext i32 %56 to i64, !dbg !19
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !19
  %71 = sext i32 %57 to i64, !dbg !19
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !19
  %73 = sext i32 %58 to i64, !dbg !19
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !19
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %34) #4, !dbg !20
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %34) #4, !dbg !20
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %34) #4, !dbg !20
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %34) #4, !dbg !20
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %34) #4, !dbg !20
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %34) #4, !dbg !20
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %34) #4, !dbg !20
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %34) #4, !dbg !20
  %83 = sext i32 %33 to i64, !dbg !21
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !21
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %34) #4, !dbg !22
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !23
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !23
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !23
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !23
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !23
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !23
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !23
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !23
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %34) #4, !dbg !24
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %34) #4, !dbg !24
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %34) #4, !dbg !24
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %34) #4, !dbg !24
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %34) #4, !dbg !24
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %34) #4, !dbg !24
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %34) #4, !dbg !24
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %34) #4, !dbg !24
  %102 = getelementptr float, ptr addrspace(1) %3, i64 %83, !dbg !25
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %34) #4, !dbg !26
  %104 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !27
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %34) #4, !dbg !28
  %106 = getelementptr float, ptr addrspace(1) %5, i64 %83, !dbg !29
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %34) #4, !dbg !30
  %108 = bitcast i32 %107 to float, !dbg !30
  %109 = getelementptr float, ptr addrspace(1) %6, i64 %83, !dbg !31
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %34) #4, !dbg !32
  %111 = getelementptr float, ptr addrspace(1) %7, i64 %83, !dbg !33
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %34) #4, !dbg !34
  %113 = getelementptr float, ptr addrspace(1) %8, i64 %83, !dbg !35
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %34) #4, !dbg !36
  %115 = getelementptr float, ptr addrspace(1) %9, i64 %83, !dbg !37
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %34) #4, !dbg !38
  %117 = bitcast i32 %116 to float, !dbg !38
  %118 = getelementptr float, ptr addrspace(1) %10, i64 %83, !dbg !39
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %34) #4, !dbg !40
  %120 = getelementptr float, ptr addrspace(1) %11, i64 %83, !dbg !41
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %34) #4, !dbg !42
  %122 = shl nsw i32 %35, 9, !dbg !43
  %123 = shl nsw i32 %36, 9, !dbg !43
  %124 = shl nsw i32 %37, 9, !dbg !43
  %125 = shl nsw i32 %38, 9, !dbg !43
  %126 = shl nsw i32 %39, 9, !dbg !43
  %127 = shl nsw i32 %40, 9, !dbg !43
  %128 = shl nsw i32 %41, 9, !dbg !43
  %129 = shl nsw i32 %42, 9, !dbg !43
  %130 = add i32 %122, %33, !dbg !44
  %131 = add i32 %123, %33, !dbg !44
  %132 = add i32 %124, %33, !dbg !44
  %133 = add i32 %125, %33, !dbg !44
  %134 = add i32 %33, %126, !dbg !44
  %135 = add i32 %33, %127, !dbg !44
  %136 = add i32 %33, %128, !dbg !44
  %137 = add i32 %33, %129, !dbg !44
  %138 = sext i32 %130 to i64, !dbg !45
  %139 = getelementptr float, ptr addrspace(1) %12, i64 %138, !dbg !45
  %140 = sext i32 %131 to i64, !dbg !45
  %141 = getelementptr float, ptr addrspace(1) %12, i64 %140, !dbg !45
  %142 = sext i32 %132 to i64, !dbg !45
  %143 = getelementptr float, ptr addrspace(1) %12, i64 %142, !dbg !45
  %144 = sext i32 %133 to i64, !dbg !45
  %145 = getelementptr float, ptr addrspace(1) %12, i64 %144, !dbg !45
  %146 = sext i32 %134 to i64, !dbg !45
  %147 = getelementptr float, ptr addrspace(1) %12, i64 %146, !dbg !45
  %148 = sext i32 %135 to i64, !dbg !45
  %149 = getelementptr float, ptr addrspace(1) %12, i64 %148, !dbg !45
  %150 = sext i32 %136 to i64, !dbg !45
  %151 = getelementptr float, ptr addrspace(1) %12, i64 %150, !dbg !45
  %152 = sext i32 %137 to i64, !dbg !45
  %153 = getelementptr float, ptr addrspace(1) %12, i64 %152, !dbg !45
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %34) #4, !dbg !46
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %34) #4, !dbg !46
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %34) #4, !dbg !46
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %34) #4, !dbg !46
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %34) #4, !dbg !46
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %34) #4, !dbg !46
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %34) #4, !dbg !46
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %34) #4, !dbg !46
  %162 = getelementptr float, ptr addrspace(1) %13, i64 %59, !dbg !47
  %163 = getelementptr float, ptr addrspace(1) %13, i64 %61, !dbg !47
  %164 = getelementptr float, ptr addrspace(1) %13, i64 %63, !dbg !47
  %165 = getelementptr float, ptr addrspace(1) %13, i64 %65, !dbg !47
  %166 = getelementptr float, ptr addrspace(1) %13, i64 %67, !dbg !47
  %167 = getelementptr float, ptr addrspace(1) %13, i64 %69, !dbg !47
  %168 = getelementptr float, ptr addrspace(1) %13, i64 %71, !dbg !47
  %169 = getelementptr float, ptr addrspace(1) %13, i64 %73, !dbg !47
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %34) #4, !dbg !48
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %34) #4, !dbg !48
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %34) #4, !dbg !48
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %34) #4, !dbg !48
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %34) #4, !dbg !48
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %34) #4, !dbg !48
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %34) #4, !dbg !48
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %34) #4, !dbg !48
  %178 = fadd float %108, 0x3EE4F8B580000000, !dbg !49
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i = icmp eq i32 %179, 0, !dbg !50
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !50
  %.not1.i = icmp eq i32 %180, 0, !dbg !50
  br i1 %.not.i, label %186, label %181, !dbg !50

181:                                              ; preds = %17
  br i1 %.not1.i, label %184, label %182, !dbg !50

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %178) #4, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %178) #4, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

186:                                              ; preds = %17
  br i1 %.not1.i, label %189, label %187, !dbg !50

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.f(float %178) #4, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.f(float %178) #4, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

__nv_sqrtf.exit:                                  ; preds = %182, %184, %187, %189
  %.0.i = phi float [ %183, %182 ], [ %185, %184 ], [ %188, %187 ], [ %190, %189 ], !dbg !50
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !51
  %192 = fadd float %117, 0x3EE4F8B580000000, !dbg !52
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !53
  %.not.i15 = icmp eq i32 %193, 0, !dbg !53
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !53
  %.not1.i18 = icmp eq i32 %194, 0, !dbg !53
  br i1 %.not.i15, label %200, label %195, !dbg !53

195:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %198, label %196, !dbg !53

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %192) #4, !dbg !53
  br label %__nv_sqrtf.exit19, !dbg !53

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %192) #4, !dbg !53
  br label %__nv_sqrtf.exit19, !dbg !53

200:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %203, label %201, !dbg !53

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.f(float %192) #4, !dbg !53
  br label %__nv_sqrtf.exit19, !dbg !53

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.f(float %192) #4, !dbg !53
  br label %__nv_sqrtf.exit19, !dbg !53

__nv_sqrtf.exit19:                                ; preds = %196, %198, %201, %203
  %.0.i17 = phi float [ %197, %196 ], [ %199, %198 ], [ %202, %201 ], [ %204, %203 ], !dbg !53
  %205 = bitcast i32 %101 to float, !dbg !24
  %206 = bitcast i32 %103 to float, !dbg !26
  %207 = fadd float %205, %206, !dbg !54
  %208 = bitcast i32 %114 to float, !dbg !36
  %209 = fsub float %207, %208, !dbg !55
  %210 = bitcast i32 %100 to float, !dbg !24
  %211 = fadd float %210, %206, !dbg !54
  %212 = fsub float %211, %208, !dbg !55
  %213 = bitcast i32 %99 to float, !dbg !24
  %214 = fadd float %213, %206, !dbg !54
  %215 = fsub float %214, %208, !dbg !55
  %216 = bitcast i32 %98 to float, !dbg !24
  %217 = fadd float %216, %206, !dbg !54
  %218 = fsub float %217, %208, !dbg !55
  %219 = bitcast i32 %97 to float, !dbg !24
  %220 = fadd float %219, %206, !dbg !54
  %221 = fsub float %220, %208, !dbg !55
  %222 = bitcast i32 %96 to float, !dbg !24
  %223 = fadd float %222, %206, !dbg !54
  %224 = fsub float %223, %208, !dbg !55
  %225 = bitcast i32 %95 to float, !dbg !24
  %226 = fadd float %225, %206, !dbg !54
  %227 = fsub float %226, %208, !dbg !55
  %228 = bitcast i32 %94 to float, !dbg !24
  %229 = fadd float %228, %206, !dbg !54
  %230 = fsub float %229, %208, !dbg !55
  %231 = bitcast i32 %82 to float, !dbg !20
  %232 = bitcast i32 %85 to float, !dbg !22
  %233 = fadd float %231, %232, !dbg !56
  %234 = bitcast i32 %105 to float, !dbg !28
  %235 = fsub float %233, %234, !dbg !57
  %236 = fmul float %235, %191, !dbg !58
  %237 = bitcast i32 %110 to float, !dbg !32
  %238 = fmul float %236, %237, !dbg !59
  %239 = bitcast i32 %112 to float, !dbg !34
  %240 = fadd float %238, %239, !dbg !60
  %241 = bitcast i32 %81 to float, !dbg !20
  %242 = fadd float %241, %232, !dbg !56
  %243 = fsub float %242, %234, !dbg !57
  %244 = fmul float %243, %191, !dbg !58
  %245 = fmul float %244, %237, !dbg !59
  %246 = fadd float %245, %239, !dbg !60
  %247 = bitcast i32 %80 to float, !dbg !20
  %248 = fadd float %247, %232, !dbg !56
  %249 = fsub float %248, %234, !dbg !57
  %250 = fmul float %249, %191, !dbg !58
  %251 = fmul float %250, %237, !dbg !59
  %252 = fadd float %251, %239, !dbg !60
  %253 = bitcast i32 %79 to float, !dbg !20
  %254 = fadd float %253, %232, !dbg !56
  %255 = fsub float %254, %234, !dbg !57
  %256 = fmul float %255, %191, !dbg !58
  %257 = fmul float %256, %237, !dbg !59
  %258 = fadd float %257, %239, !dbg !60
  %259 = bitcast i32 %78 to float, !dbg !20
  %260 = fadd float %259, %232, !dbg !56
  %261 = fsub float %260, %234, !dbg !57
  %262 = fmul float %261, %191, !dbg !58
  %263 = fmul float %262, %237, !dbg !59
  %264 = fadd float %263, %239, !dbg !60
  %265 = bitcast i32 %77 to float, !dbg !20
  %266 = fadd float %265, %232, !dbg !56
  %267 = fsub float %266, %234, !dbg !57
  %268 = fmul float %267, %191, !dbg !58
  %269 = fmul float %268, %237, !dbg !59
  %270 = fadd float %269, %239, !dbg !60
  %271 = bitcast i32 %76 to float, !dbg !20
  %272 = fadd float %271, %232, !dbg !56
  %273 = fsub float %272, %234, !dbg !57
  %274 = fmul float %273, %191, !dbg !58
  %275 = fmul float %274, %237, !dbg !59
  %276 = fadd float %275, %239, !dbg !60
  %277 = bitcast i32 %75 to float, !dbg !20
  %278 = fadd float %277, %232, !dbg !56
  %279 = fsub float %278, %234, !dbg !57
  %280 = fmul float %279, %191, !dbg !58
  %281 = fmul float %280, %237, !dbg !59
  %282 = fadd float %281, %239, !dbg !60
  %283 = bitcast i32 %177 to float, !dbg !48
  %284 = bitcast i32 %176 to float, !dbg !48
  %285 = bitcast i32 %175 to float, !dbg !48
  %286 = bitcast i32 %174 to float, !dbg !48
  %287 = bitcast i32 %173 to float, !dbg !48
  %288 = bitcast i32 %172 to float, !dbg !48
  %289 = bitcast i32 %171 to float, !dbg !48
  %290 = bitcast i32 %170 to float, !dbg !48
  %291 = bitcast i32 %161 to float, !dbg !46
  %292 = bitcast i32 %160 to float, !dbg !46
  %293 = bitcast i32 %159 to float, !dbg !46
  %294 = bitcast i32 %158 to float, !dbg !46
  %295 = bitcast i32 %157 to float, !dbg !46
  %296 = bitcast i32 %156 to float, !dbg !46
  %297 = bitcast i32 %155 to float, !dbg !46
  %298 = bitcast i32 %154 to float, !dbg !46
  %299 = bitcast i32 %121 to float, !dbg !42
  %300 = bitcast i32 %119 to float, !dbg !40
  %301 = shl i32 %20, 2, !dbg !12
  %302 = and i32 %301, 508, !dbg !12
  %303 = or disjoint i32 %302, %19, !dbg !13
  %304 = or disjoint i32 %303, 512, !dbg !13
  %.frozen = freeze i32 %304, !dbg !16
  %305 = sdiv i32 %.frozen, 4096, !dbg !16
  %306 = mul i32 %305, 4096, !dbg !61
  %.decomposed = sub i32 %.frozen, %306, !dbg !61
  %.frozen20 = freeze i32 %303, !dbg !16
  %307 = sdiv i32 %.frozen20, 4096, !dbg !16
  %308 = mul i32 %307, 4096, !dbg !61
  %.decomposed21 = sub i32 %.frozen20, %308, !dbg !61
  %309 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !62
  %310 = fmul float %230, %309, !dbg !63
  %311 = fmul float %227, %309, !dbg !63
  %312 = fmul float %224, %309, !dbg !63
  %313 = fmul float %221, %309, !dbg !63
  %314 = fmul float %218, %309, !dbg !63
  %315 = fmul float %215, %309, !dbg !63
  %316 = fmul float %212, %309, !dbg !63
  %317 = fmul float %209, %309, !dbg !63
  %318 = fmul float %310, %300, !dbg !64
  %319 = fmul float %311, %300, !dbg !64
  %320 = fmul float %312, %300, !dbg !64
  %321 = fmul float %313, %300, !dbg !64
  %322 = fmul float %314, %300, !dbg !64
  %323 = fmul float %315, %300, !dbg !64
  %324 = fmul float %316, %300, !dbg !64
  %325 = fmul float %317, %300, !dbg !64
  %326 = fadd float %318, %299, !dbg !65
  %327 = fadd float %319, %299, !dbg !65
  %328 = fadd float %320, %299, !dbg !65
  %329 = fadd float %321, %299, !dbg !65
  %330 = fadd float %322, %299, !dbg !65
  %331 = fadd float %323, %299, !dbg !65
  %332 = fadd float %324, %299, !dbg !65
  %333 = fadd float %325, %299, !dbg !65
  %334 = fadd float %282, %326, !dbg !66
  %335 = fadd float %276, %327, !dbg !66
  %336 = fadd float %270, %328, !dbg !66
  %337 = fadd float %264, %329, !dbg !66
  %338 = fadd float %258, %330, !dbg !66
  %339 = fadd float %252, %331, !dbg !66
  %340 = fadd float %246, %332, !dbg !66
  %341 = fadd float %240, %333, !dbg !66
  %342 = fsub float 0.000000e+00, %298, !dbg !67
  %343 = fsub float 0.000000e+00, %297, !dbg !67
  %344 = fsub float 0.000000e+00, %296, !dbg !67
  %345 = fsub float 0.000000e+00, %295, !dbg !67
  %346 = fsub float 0.000000e+00, %294, !dbg !67
  %347 = fsub float 0.000000e+00, %293, !dbg !67
  %348 = fsub float 0.000000e+00, %292, !dbg !67
  %349 = fsub float 0.000000e+00, %291, !dbg !67
  %350 = fmul float %342, 0x3FF7154760000000, !dbg !71
  %351 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %350) #4, !dbg !71
  %352 = fmul float %343, 0x3FF7154760000000, !dbg !71
  %353 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %352) #4, !dbg !71
  %354 = fmul float %344, 0x3FF7154760000000, !dbg !71
  %355 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %354) #4, !dbg !71
  %356 = fmul float %345, 0x3FF7154760000000, !dbg !71
  %357 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %356) #4, !dbg !71
  %358 = fmul float %346, 0x3FF7154760000000, !dbg !71
  %359 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %358) #4, !dbg !71
  %360 = fmul float %347, 0x3FF7154760000000, !dbg !71
  %361 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %360) #4, !dbg !71
  %362 = fmul float %348, 0x3FF7154760000000, !dbg !71
  %363 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %362) #4, !dbg !71
  %364 = fmul float %349, 0x3FF7154760000000, !dbg !71
  %365 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %364) #4, !dbg !71
  %366 = fadd float %351, 1.000000e+00, !dbg !72
  %367 = fadd float %353, 1.000000e+00, !dbg !72
  %368 = fadd float %355, 1.000000e+00, !dbg !72
  %369 = fadd float %357, 1.000000e+00, !dbg !72
  %370 = fadd float %359, 1.000000e+00, !dbg !72
  %371 = fadd float %361, 1.000000e+00, !dbg !72
  %372 = fadd float %363, 1.000000e+00, !dbg !72
  %373 = fadd float %365, 1.000000e+00, !dbg !72
  %374 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %366) #4, !dbg !73
  %375 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %367) #4, !dbg !73
  %376 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %368) #4, !dbg !73
  %377 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %369) #4, !dbg !73
  %378 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %370) #4, !dbg !73
  %379 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %371) #4, !dbg !73
  %380 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %372) #4, !dbg !73
  %381 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %373) #4, !dbg !73
  %382 = fmul float %374, %290, !dbg !74
  %383 = fmul float %375, %289, !dbg !74
  %384 = fmul float %376, %288, !dbg !74
  %385 = fmul float %377, %287, !dbg !74
  %386 = fmul float %378, %286, !dbg !74
  %387 = fmul float %379, %285, !dbg !74
  %388 = fmul float %380, %284, !dbg !74
  %389 = fmul float %381, %283, !dbg !74
  %390 = fadd float %334, %382, !dbg !75
  %391 = fadd float %335, %383, !dbg !75
  %392 = fadd float %336, %384, !dbg !75
  %393 = fadd float %337, %385, !dbg !75
  %394 = fadd float %338, %386, !dbg !75
  %395 = fadd float %339, %387, !dbg !75
  %396 = fadd float %340, %388, !dbg !75
  %397 = fadd float %341, %389, !dbg !75
  %398 = fsub float 0.000000e+00, %390, !dbg !76
  %399 = fsub float 0.000000e+00, %391, !dbg !76
  %400 = fsub float 0.000000e+00, %392, !dbg !76
  %401 = fsub float 0.000000e+00, %393, !dbg !76
  %402 = fsub float 0.000000e+00, %394, !dbg !76
  %403 = fsub float 0.000000e+00, %395, !dbg !76
  %404 = fsub float 0.000000e+00, %396, !dbg !76
  %405 = fsub float 0.000000e+00, %397, !dbg !76
  %406 = fmul float %398, 0x3FF7154760000000, !dbg !78
  %407 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %406) #4, !dbg !78
  %408 = fmul float %399, 0x3FF7154760000000, !dbg !78
  %409 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %408) #4, !dbg !78
  %410 = fmul float %400, 0x3FF7154760000000, !dbg !78
  %411 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %410) #4, !dbg !78
  %412 = fmul float %401, 0x3FF7154760000000, !dbg !78
  %413 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %412) #4, !dbg !78
  %414 = fmul float %402, 0x3FF7154760000000, !dbg !78
  %415 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %414) #4, !dbg !78
  %416 = fmul float %403, 0x3FF7154760000000, !dbg !78
  %417 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %416) #4, !dbg !78
  %418 = fmul float %404, 0x3FF7154760000000, !dbg !78
  %419 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %418) #4, !dbg !78
  %420 = fmul float %405, 0x3FF7154760000000, !dbg !78
  %421 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %420) #4, !dbg !78
  %422 = fadd float %407, 1.000000e+00, !dbg !79
  %423 = fadd float %409, 1.000000e+00, !dbg !79
  %424 = fadd float %411, 1.000000e+00, !dbg !79
  %425 = fadd float %413, 1.000000e+00, !dbg !79
  %426 = fadd float %415, 1.000000e+00, !dbg !79
  %427 = fadd float %417, 1.000000e+00, !dbg !79
  %428 = fadd float %419, 1.000000e+00, !dbg !79
  %429 = fadd float %421, 1.000000e+00, !dbg !79
  %430 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %422) #4, !dbg !80
  %431 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %423) #4, !dbg !80
  %432 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %424) #4, !dbg !80
  %433 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %425) #4, !dbg !80
  %434 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %426) #4, !dbg !80
  %435 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %427) #4, !dbg !80
  %436 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %428) #4, !dbg !80
  %437 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %429) #4, !dbg !80
  %438 = fmul float %390, %430, !dbg !81
  %439 = fmul float %391, %431, !dbg !81
  %440 = fmul float %392, %432, !dbg !81
  %441 = fmul float %393, %433, !dbg !81
  %442 = fmul float %394, %434, !dbg !81
  %443 = fmul float %395, %435, !dbg !81
  %444 = fmul float %396, %436, !dbg !81
  %445 = fmul float %397, %437, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %446 = bitcast float %278 to i32, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %446, ptr addrspace(1) %60, i1 %34) #4, !dbg !83
  %447 = bitcast float %272 to i32, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %447, ptr addrspace(1) %62, i1 %34) #4, !dbg !83
  %448 = bitcast float %266 to i32, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %448, ptr addrspace(1) %64, i1 %34) #4, !dbg !83
  %449 = bitcast float %260 to i32, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %449, ptr addrspace(1) %66, i1 %34) #4, !dbg !83
  %450 = bitcast float %254 to i32, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %450, ptr addrspace(1) %68, i1 %34) #4, !dbg !83
  %451 = bitcast float %248 to i32, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %451, ptr addrspace(1) %70, i1 %34) #4, !dbg !83
  %452 = bitcast float %242 to i32, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %452, ptr addrspace(1) %72, i1 %34) #4, !dbg !83
  %453 = bitcast float %233 to i32, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %453, ptr addrspace(1) %74, i1 %34) #4, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !84
  %454 = bitcast float %229 to i32, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %454, ptr addrspace(1) %86, i1 %34) #4, !dbg !85
  %455 = bitcast float %226 to i32, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %455, ptr addrspace(1) %87, i1 %34) #4, !dbg !85
  %456 = bitcast float %223 to i32, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %456, ptr addrspace(1) %88, i1 %34) #4, !dbg !85
  %457 = bitcast float %220 to i32, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %457, ptr addrspace(1) %89, i1 %34) #4, !dbg !85
  %458 = bitcast float %217 to i32, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %458, ptr addrspace(1) %90, i1 %34) #4, !dbg !85
  %459 = bitcast float %214 to i32, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %459, ptr addrspace(1) %91, i1 %34) #4, !dbg !85
  %460 = bitcast float %211 to i32, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %460, ptr addrspace(1) %92, i1 %34) #4, !dbg !85
  %461 = bitcast float %207 to i32, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %461, ptr addrspace(1) %93, i1 %34) #4, !dbg !85
  %462 = shl i32 %33, 12, !dbg !86
  %463 = add i32 %.decomposed21, %462, !dbg !87
  %464 = add i32 %.decomposed, %462, !dbg !87
  %465 = shl i32 %307, 21, !dbg !88
  %466 = shl i32 %305, 21, !dbg !88
  %467 = add i32 %463, %465, !dbg !89
  %468 = add i32 %464, %466, !dbg !89
  %469 = sext i32 %467 to i64, !dbg !90
  %470 = getelementptr float, ptr addrspace(1) %14, i64 %469, !dbg !90
  %471 = sext i32 %468 to i64, !dbg !90
  %472 = getelementptr float, ptr addrspace(1) %14, i64 %471, !dbg !90
  %473 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !91
  %474 = bitcast float %438 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %473, <1 x i32> %474, i1 true) #4, !dbg !91
  %475 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !91
  %476 = bitcast float %439 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %475, <1 x i32> %476, i1 true) #4, !dbg !91
  %477 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %23, !dbg !91
  %478 = bitcast float %440 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %477, <1 x i32> %478, i1 true) #4, !dbg !91
  %479 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %24, !dbg !91
  %480 = bitcast float %441 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %479, <1 x i32> %480, i1 true) #4, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %481 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %302, !dbg !91
  %482 = load <4 x i32>, ptr addrspace(3) %481, align 16, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %483 = bitcast float %442 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %473, <1 x i32> %483, i1 true) #4, !dbg !91
  %484 = bitcast float %443 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %475, <1 x i32> %484, i1 true) #4, !dbg !91
  %485 = bitcast float %444 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %477, <1 x i32> %485, i1 true) #4, !dbg !91
  %486 = bitcast float %445 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %479, <1 x i32> %486, i1 true) #4, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %487 = load <4 x i32>, ptr addrspace(3) %481, align 16, !dbg !91
  %.extract = extractelement <4 x i32> %482, i64 0, !dbg !91
  %.extract8 = extractelement <4 x i32> %482, i64 1, !dbg !91
  %.extract9 = extractelement <4 x i32> %482, i64 2, !dbg !91
  %.extract10 = extractelement <4 x i32> %482, i64 3, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %470, i1 %34) #4, !dbg !91
  %.extract11 = extractelement <4 x i32> %487, i64 0, !dbg !91
  %.extract12 = extractelement <4 x i32> %487, i64 1, !dbg !91
  %.extract13 = extractelement <4 x i32> %487, i64 2, !dbg !91
  %.extract14 = extractelement <4 x i32> %487, i64 3, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %472, i1 %34) #4, !dbg !91
  ret void, !dbg !92
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6hb5osixqfolktdv6zhzfoegxdcrbaouwjwi44j2o4uo4y7wgui.py", directory: "inductor_cache/6h")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 34, scope: !7)
!20 = !DILocation(line: 32, column: 48, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 34, scope: !7)
!24 = !DILocation(line: 34, column: 48, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 37, column: 30, scope: !7)
!30 = !DILocation(line: 37, column: 35, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 31, scope: !7)
!36 = !DILocation(line: 40, column: 36, scope: !7)
!37 = !DILocation(line: 41, column: 31, scope: !7)
!38 = !DILocation(line: 41, column: 36, scope: !7)
!39 = !DILocation(line: 42, column: 31, scope: !7)
!40 = !DILocation(line: 42, column: 36, scope: !7)
!41 = !DILocation(line: 43, column: 31, scope: !7)
!42 = !DILocation(line: 43, column: 36, scope: !7)
!43 = !DILocation(line: 44, column: 41, scope: !7)
!44 = !DILocation(line: 44, column: 37, scope: !7)
!45 = !DILocation(line: 44, column: 32, scope: !7)
!46 = !DILocation(line: 44, column: 46, scope: !7)
!47 = !DILocation(line: 45, column: 32, scope: !7)
!48 = !DILocation(line: 45, column: 46, scope: !7)
!49 = !DILocation(line: 50, column: 19, scope: !7)
!50 = !DILocation(line: 51, column: 27, scope: !7)
!51 = !DILocation(line: 53, column: 20, scope: !7)
!52 = !DILocation(line: 60, column: 20, scope: !7)
!53 = !DILocation(line: 61, column: 27, scope: !7)
!54 = !DILocation(line: 47, column: 18, scope: !7)
!55 = !DILocation(line: 59, column: 19, scope: !7)
!56 = !DILocation(line: 46, column: 18, scope: !7)
!57 = !DILocation(line: 48, column: 18, scope: !7)
!58 = !DILocation(line: 56, column: 19, scope: !7)
!59 = !DILocation(line: 57, column: 20, scope: !7)
!60 = !DILocation(line: 58, column: 20, scope: !7)
!61 = !DILocation(line: 31, column: 19, scope: !7)
!62 = !DILocation(line: 62, column: 20, scope: !7)
!63 = !DILocation(line: 64, column: 20, scope: !7)
!64 = !DILocation(line: 65, column: 20, scope: !7)
!65 = !DILocation(line: 66, column: 20, scope: !7)
!66 = !DILocation(line: 67, column: 20, scope: !7)
!67 = !DILocation(line: 47, column: 30, scope: !68, inlinedAt: !70)
!68 = distinct !DILexicalBlockFile(scope: !7, file: !69, discriminator: 0)
!69 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!70 = !DILocation(line: 68, column: 23, scope: !7)
!71 = !DILocation(line: 47, column: 29, scope: !68, inlinedAt: !70)
!72 = !DILocation(line: 47, column: 20, scope: !68, inlinedAt: !70)
!73 = !DILocation(line: 47, column: 16, scope: !68, inlinedAt: !70)
!74 = !DILocation(line: 69, column: 20, scope: !7)
!75 = !DILocation(line: 70, column: 20, scope: !7)
!76 = !DILocation(line: 47, column: 30, scope: !68, inlinedAt: !77)
!77 = !DILocation(line: 71, column: 23, scope: !7)
!78 = !DILocation(line: 47, column: 29, scope: !68, inlinedAt: !77)
!79 = !DILocation(line: 47, column: 20, scope: !68, inlinedAt: !77)
!80 = !DILocation(line: 47, column: 16, scope: !68, inlinedAt: !77)
!81 = !DILocation(line: 72, column: 20, scope: !7)
!82 = !DILocation(line: 73, column: 4, scope: !7)
!83 = !DILocation(line: 74, column: 48, scope: !7)
!84 = !DILocation(line: 75, column: 4, scope: !7)
!85 = !DILocation(line: 76, column: 48, scope: !7)
!86 = !DILocation(line: 77, column: 35, scope: !7)
!87 = !DILocation(line: 77, column: 30, scope: !7)
!88 = !DILocation(line: 77, column: 48, scope: !7)
!89 = !DILocation(line: 77, column: 40, scope: !7)
!90 = !DILocation(line: 77, column: 25, scope: !7)
!91 = !DILocation(line: 77, column: 60, scope: !7)
!92 = !DILocation(line: 77, column: 4, scope: !7)
