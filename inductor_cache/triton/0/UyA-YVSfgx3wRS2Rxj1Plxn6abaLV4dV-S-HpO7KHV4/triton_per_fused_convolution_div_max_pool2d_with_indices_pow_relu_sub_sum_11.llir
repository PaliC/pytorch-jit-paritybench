; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_convolution_div_max_pool2d_with_indices_pow_relu_sub_sum_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 5, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = or disjoint i32 %10, 8, !dbg !12
  %12 = or disjoint i32 %10, 16, !dbg !12
  %13 = or disjoint i32 %10, 24, !dbg !12
  %14 = and i32 %8, 31, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %11, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = shl i32 %8, 2, !dbg !14
  %21 = and i32 %20, 124, !dbg !14
  %22 = shl i32 %15, 7, !dbg !15
  %23 = shl i32 %16, 7, !dbg !15
  %24 = shl i32 %17, 7, !dbg !15
  %25 = shl i32 %18, 7, !dbg !15
  %26 = or disjoint i32 %22, %21, !dbg !16
  %27 = or disjoint i32 %23, %21, !dbg !16
  %28 = or disjoint i32 %24, %21, !dbg !16
  %29 = or disjoint i32 %25, %21, !dbg !16
  %30 = sext i32 %26 to i64, !dbg !17
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !17
  %32 = sext i32 %27 to i64, !dbg !17
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !17
  %34 = sext i32 %28 to i64, !dbg !17
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !17
  %36 = sext i32 %29 to i64, !dbg !17
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !17
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !18
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !18
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !18
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !18
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !18
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !18
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !18
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !18
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !18
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !18
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !18
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !18
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !18
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !18
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !18
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !18
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !18
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !18
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !18
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !18
  %58 = zext nneg i32 %21 to i64, !dbg !19
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !19
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !20
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !20
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !20
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !20
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !20
  %65 = insertelement <16 x i32> poison, i32 %57, i64 0, !dbg !18
  %66 = insertelement <16 x i32> %65, i32 %56, i64 1, !dbg !18
  %67 = insertelement <16 x i32> %66, i32 %55, i64 2, !dbg !18
  %68 = insertelement <16 x i32> %67, i32 %54, i64 3, !dbg !18
  %69 = insertelement <16 x i32> %68, i32 %52, i64 4, !dbg !18
  %70 = insertelement <16 x i32> %69, i32 %51, i64 5, !dbg !18
  %71 = insertelement <16 x i32> %70, i32 %50, i64 6, !dbg !18
  %72 = insertelement <16 x i32> %71, i32 %49, i64 7, !dbg !18
  %73 = insertelement <16 x i32> %72, i32 %47, i64 8, !dbg !18
  %74 = insertelement <16 x i32> %73, i32 %46, i64 9, !dbg !18
  %75 = insertelement <16 x i32> %74, i32 %45, i64 10, !dbg !18
  %76 = insertelement <16 x i32> %75, i32 %44, i64 11, !dbg !18
  %77 = insertelement <16 x i32> %76, i32 %42, i64 12, !dbg !18
  %78 = insertelement <16 x i32> %77, i32 %41, i64 13, !dbg !18
  %79 = insertelement <16 x i32> %78, i32 %40, i64 14, !dbg !18
  %80 = insertelement <16 x i32> %79, i32 %39, i64 15, !dbg !18
  %81 = bitcast <16 x i32> %80 to <16 x float>, !dbg !18
  %82 = insertelement <4 x i32> poison, i32 %64, i64 0, !dbg !20
  %83 = insertelement <4 x i32> %82, i32 %63, i64 1, !dbg !20
  %84 = insertelement <4 x i32> %83, i32 %62, i64 2, !dbg !20
  %85 = insertelement <4 x i32> %84, i32 %61, i64 3, !dbg !20
  %86 = bitcast <4 x i32> %85 to <4 x float>, !dbg !20
  %87 = shufflevector <4 x float> %86, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !20
  %88 = fadd <16 x float> %87, %81, !dbg !21
  %89 = fcmp olt <16 x float> %88, zeroinitializer, !dbg !22
  %90 = extractelement <16 x i1> %89, i64 15, !dbg !26
  %91 = extractelement <16 x float> %88, i64 15, !dbg !26
  %92 = select i1 %90, float 0.000000e+00, float %91, !dbg !26
  %93 = extractelement <16 x i1> %89, i64 14, !dbg !26
  %94 = extractelement <16 x float> %88, i64 14, !dbg !26
  %95 = select i1 %93, float 0.000000e+00, float %94, !dbg !26
  %96 = extractelement <16 x i1> %89, i64 13, !dbg !26
  %97 = extractelement <16 x float> %88, i64 13, !dbg !26
  %98 = select i1 %96, float 0.000000e+00, float %97, !dbg !26
  %99 = extractelement <16 x i1> %89, i64 12, !dbg !26
  %100 = extractelement <16 x float> %88, i64 12, !dbg !26
  %101 = select i1 %99, float 0.000000e+00, float %100, !dbg !26
  %102 = extractelement <16 x i1> %89, i64 11, !dbg !26
  %103 = extractelement <16 x float> %88, i64 11, !dbg !26
  %104 = select i1 %102, float 0.000000e+00, float %103, !dbg !26
  %105 = extractelement <16 x i1> %89, i64 10, !dbg !26
  %106 = extractelement <16 x float> %88, i64 10, !dbg !26
  %107 = select i1 %105, float 0.000000e+00, float %106, !dbg !26
  %108 = extractelement <16 x i1> %89, i64 9, !dbg !26
  %109 = extractelement <16 x float> %88, i64 9, !dbg !26
  %110 = select i1 %108, float 0.000000e+00, float %109, !dbg !26
  %111 = extractelement <16 x i1> %89, i64 8, !dbg !26
  %112 = extractelement <16 x float> %88, i64 8, !dbg !26
  %113 = select i1 %111, float 0.000000e+00, float %112, !dbg !26
  %114 = extractelement <16 x i1> %89, i64 7, !dbg !26
  %115 = extractelement <16 x float> %88, i64 7, !dbg !26
  %116 = select i1 %114, float 0.000000e+00, float %115, !dbg !26
  %117 = extractelement <16 x i1> %89, i64 6, !dbg !26
  %118 = extractelement <16 x float> %88, i64 6, !dbg !26
  %119 = select i1 %117, float 0.000000e+00, float %118, !dbg !26
  %120 = extractelement <16 x i1> %89, i64 5, !dbg !26
  %121 = extractelement <16 x float> %88, i64 5, !dbg !26
  %122 = select i1 %120, float 0.000000e+00, float %121, !dbg !26
  %123 = extractelement <16 x i1> %89, i64 4, !dbg !26
  %124 = extractelement <16 x float> %88, i64 4, !dbg !26
  %125 = select i1 %123, float 0.000000e+00, float %124, !dbg !26
  %126 = extractelement <16 x i1> %89, i64 3, !dbg !26
  %127 = extractelement <16 x float> %88, i64 3, !dbg !26
  %128 = select i1 %126, float 0.000000e+00, float %127, !dbg !26
  %129 = extractelement <16 x i1> %89, i64 2, !dbg !26
  %130 = extractelement <16 x float> %88, i64 2, !dbg !26
  %131 = select i1 %129, float 0.000000e+00, float %130, !dbg !26
  %132 = extractelement <16 x i1> %89, i64 1, !dbg !26
  %133 = extractelement <16 x float> %88, i64 1, !dbg !26
  %134 = select i1 %132, float 0.000000e+00, float %133, !dbg !26
  %135 = extractelement <16 x i1> %89, i64 0, !dbg !26
  %136 = extractelement <16 x float> %88, i64 0, !dbg !26
  %137 = select i1 %135, float 0.000000e+00, float %136, !dbg !26
  %138 = fmul float %92, %92, !dbg !27
  %139 = fmul float %95, %95, !dbg !27
  %140 = fmul float %98, %98, !dbg !27
  %141 = fmul float %101, %101, !dbg !27
  %142 = fmul float %104, %104, !dbg !27
  %143 = fmul float %107, %107, !dbg !27
  %144 = fmul float %110, %110, !dbg !27
  %145 = fmul float %113, %113, !dbg !27
  %146 = fmul float %116, %116, !dbg !27
  %147 = fmul float %119, %119, !dbg !27
  %148 = fmul float %122, %122, !dbg !27
  %149 = fmul float %125, %125, !dbg !27
  %150 = fmul float %128, %128, !dbg !27
  %151 = fmul float %131, %131, !dbg !27
  %152 = fmul float %134, %134, !dbg !27
  %153 = fmul float %137, %137, !dbg !27
  %154 = fadd float %138, %139, !dbg !28
  %155 = fadd float %140, %154, !dbg !28
  %156 = fadd float %141, %155, !dbg !28
  %157 = fadd float %142, %143, !dbg !28
  %158 = fadd float %144, %157, !dbg !28
  %159 = fadd float %145, %158, !dbg !28
  %160 = fadd float %146, %147, !dbg !28
  %161 = fadd float %148, %160, !dbg !28
  %162 = fadd float %149, %161, !dbg !28
  %163 = fadd float %150, %151, !dbg !28
  %164 = fadd float %152, %163, !dbg !28
  %165 = fadd float %153, %164, !dbg !28
  %166 = bitcast float %156 to i32, !dbg !33
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 16, i32 31), !dbg !33
  %168 = bitcast i32 %167 to float, !dbg !33
  %169 = fadd float %156, %168, !dbg !28
  %170 = bitcast float %169 to i32, !dbg !33
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 8, i32 31), !dbg !33
  %172 = bitcast i32 %171 to float, !dbg !33
  %173 = fadd float %169, %172, !dbg !28
  %174 = bitcast float %173 to i32, !dbg !33
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 4, i32 31), !dbg !33
  %176 = bitcast i32 %175 to float, !dbg !33
  %177 = fadd float %173, %176, !dbg !28
  %178 = bitcast float %177 to i32, !dbg !33
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 2, i32 31), !dbg !33
  %180 = bitcast i32 %179 to float, !dbg !33
  %181 = fadd float %177, %180, !dbg !28
  %182 = bitcast float %181 to i32, !dbg !33
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 1, i32 31), !dbg !33
  %184 = bitcast i32 %183 to float, !dbg !33
  %185 = fadd float %181, %184, !dbg !28
  %186 = bitcast float %159 to i32, !dbg !33
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 16, i32 31), !dbg !33
  %188 = bitcast i32 %187 to float, !dbg !33
  %189 = fadd float %159, %188, !dbg !28
  %190 = bitcast float %189 to i32, !dbg !33
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 8, i32 31), !dbg !33
  %192 = bitcast i32 %191 to float, !dbg !33
  %193 = fadd float %189, %192, !dbg !28
  %194 = bitcast float %193 to i32, !dbg !33
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 4, i32 31), !dbg !33
  %196 = bitcast i32 %195 to float, !dbg !33
  %197 = fadd float %193, %196, !dbg !28
  %198 = bitcast float %197 to i32, !dbg !33
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 2, i32 31), !dbg !33
  %200 = bitcast i32 %199 to float, !dbg !33
  %201 = fadd float %197, %200, !dbg !28
  %202 = bitcast float %201 to i32, !dbg !33
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 1, i32 31), !dbg !33
  %204 = bitcast i32 %203 to float, !dbg !33
  %205 = fadd float %201, %204, !dbg !28
  %206 = bitcast float %162 to i32, !dbg !33
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 16, i32 31), !dbg !33
  %208 = bitcast i32 %207 to float, !dbg !33
  %209 = fadd float %162, %208, !dbg !28
  %210 = bitcast float %209 to i32, !dbg !33
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 8, i32 31), !dbg !33
  %212 = bitcast i32 %211 to float, !dbg !33
  %213 = fadd float %209, %212, !dbg !28
  %214 = bitcast float %213 to i32, !dbg !33
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 4, i32 31), !dbg !33
  %216 = bitcast i32 %215 to float, !dbg !33
  %217 = fadd float %213, %216, !dbg !28
  %218 = bitcast float %217 to i32, !dbg !33
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 2, i32 31), !dbg !33
  %220 = bitcast i32 %219 to float, !dbg !33
  %221 = fadd float %217, %220, !dbg !28
  %222 = bitcast float %221 to i32, !dbg !33
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 1, i32 31), !dbg !33
  %224 = bitcast i32 %223 to float, !dbg !33
  %225 = fadd float %221, %224, !dbg !28
  %226 = bitcast float %165 to i32, !dbg !33
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 16, i32 31), !dbg !33
  %228 = bitcast i32 %227 to float, !dbg !33
  %229 = fadd float %165, %228, !dbg !28
  %230 = bitcast float %229 to i32, !dbg !33
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 8, i32 31), !dbg !33
  %232 = bitcast i32 %231 to float, !dbg !33
  %233 = fadd float %229, %232, !dbg !28
  %234 = bitcast float %233 to i32, !dbg !33
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 4, i32 31), !dbg !33
  %236 = bitcast i32 %235 to float, !dbg !33
  %237 = fadd float %233, %236, !dbg !28
  %238 = bitcast float %237 to i32, !dbg !33
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 2, i32 31), !dbg !33
  %240 = bitcast i32 %239 to float, !dbg !33
  %241 = fadd float %237, %240, !dbg !28
  %242 = bitcast float %241 to i32, !dbg !33
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 1, i32 31), !dbg !33
  %244 = bitcast i32 %243 to float, !dbg !33
  %245 = fadd float %241, %244, !dbg !28
  %246 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !34
  %247 = bitcast float %185 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #3, !dbg !34
  %248 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !34
  %249 = bitcast float %205 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 true) #3, !dbg !34
  %250 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !34
  %251 = bitcast float %225 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 true) #3, !dbg !34
  %252 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !34
  %253 = bitcast float %245 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %254 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !34
  %255 = load i32, ptr addrspace(3) %254, align 4, !dbg !34
  %256 = bitcast float %92 to i32, !dbg !35
  %257 = bitcast float %95 to i32, !dbg !35
  %258 = bitcast float %98 to i32, !dbg !35
  %259 = bitcast float %101 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %256, i32 %257, i32 %258, i32 %259, ptr addrspace(1) %31, i1 true) #3, !dbg !35
  %260 = bitcast float %104 to i32, !dbg !35
  %261 = bitcast float %107 to i32, !dbg !35
  %262 = bitcast float %110 to i32, !dbg !35
  %263 = bitcast float %113 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %260, i32 %261, i32 %262, i32 %263, ptr addrspace(1) %33, i1 true) #3, !dbg !35
  %264 = bitcast float %116 to i32, !dbg !35
  %265 = bitcast float %119 to i32, !dbg !35
  %266 = bitcast float %122 to i32, !dbg !35
  %267 = bitcast float %125 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %264, i32 %265, i32 %266, i32 %267, ptr addrspace(1) %35, i1 true) #3, !dbg !35
  %268 = bitcast float %128 to i32, !dbg !35
  %269 = bitcast float %131 to i32, !dbg !35
  %270 = bitcast float %134 to i32, !dbg !35
  %271 = bitcast float %137 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %268, i32 %269, i32 %270, i32 %271, ptr addrspace(1) %37, i1 true) #3, !dbg !35
  %272 = sext i32 %19 to i64, !dbg !36
  %273 = getelementptr float, ptr addrspace(1) %2, i64 %272, !dbg !36
  %274 = and i32 %8, 224, !dbg !37
  %275 = icmp eq i32 %274, 0, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %255, ptr addrspace(1) %273, i1 %275) #3, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cimz2zkj5bin2tcgcmk263oyk6wbrwtqydhe6ioaodtz5fdx7b4g.py", directory: "inductor_cache/im")
!4 = !{ptr @triton_per_fused_convolution_div_max_pool2d_with_indices_pow_relu_sub_sum_11, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_div_max_pool2d_with_indices_pow_relu_sub_sum_11, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_div_max_pool2d_with_indices_pow_relu_sub_sum_11", linkageName: "triton_per_fused_convolution_div_max_pool2d_with_indices_pow_relu_sub_sum_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 43, scope: !7)
!16 = !DILocation(line: 31, column: 39, scope: !7)
!17 = !DILocation(line: 31, column: 34, scope: !7)
!18 = !DILocation(line: 31, column: 48, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 18, scope: !7)
!22 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 35, column: 40, scope: !7)
!26 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!32 = !DILocation(line: 38, column: 24, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 38, column: 27, scope: !7)
!35 = !DILocation(line: 39, column: 48, scope: !7)
!36 = !DILocation(line: 40, column: 25, scope: !7)
!37 = !DILocation(line: 40, column: 36, scope: !7)
!38 = !DILocation(line: 40, column: 4, scope: !7)
