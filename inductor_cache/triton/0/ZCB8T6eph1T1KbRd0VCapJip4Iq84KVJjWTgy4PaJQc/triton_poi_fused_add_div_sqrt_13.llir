; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = lshr i32 %8, 3, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = icmp slt i32 %14, 512, !dbg !14
  %18 = icmp slt i32 %15, 512, !dbg !14
  %19 = icmp slt i32 %16, 512, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %21 = shl i32 %20, 5, !dbg !16
  %22 = or disjoint i32 %21, %12, !dbg !17
  %23 = or disjoint i32 %21, %13, !dbg !17
  %24 = or disjoint i32 %21, %10, !dbg !17
  %25 = icmp slt i32 %22, 1024, !dbg !18
  %26 = icmp slt i32 %23, 1024, !dbg !18
  %27 = icmp slt i32 %24, 1024, !dbg !18
  %.frozen = freeze i32 %14, !dbg !19
  %28 = sdiv i32 %.frozen, 128, !dbg !19
  %29 = mul i32 %28, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %30 = sdiv i32 %15, 128, !dbg !19
  %31 = sdiv i32 %16, 128, !dbg !19
  %32 = shl i32 %22, 7, !dbg !21
  %33 = shl i32 %23, 7, !dbg !21
  %34 = shl i32 %28, 17, !dbg !22
  %35 = add i32 %34, %.decomposed, !dbg !23
  %36 = add i32 %35, %32, !dbg !24
  %37 = add i32 %35, %33, !dbg !24
  %38 = sext i32 %36 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !25
  %40 = sext i32 %37 to i64, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !25
  %42 = and i1 %17, %25, !dbg !26
  %43 = and i1 %17, %26, !dbg !26
  %44 = and i1 %18, %27, !dbg !26
  %45 = and i1 %19, %27, !dbg !26
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %42) #4, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !27
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !27
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !27
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %43) #4, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !27
  %56 = shl i32 %8, 7, !dbg !27
  %57 = and i32 %56, 896, !dbg !27
  %58 = or disjoint i32 %57, %12, !dbg !27
  %59 = and i32 %9, 508, !dbg !27
  %60 = lshr exact i32 %57, 5, !dbg !27
  %61 = add nuw nsw i32 %60, %58, !dbg !27
  %62 = zext nneg i32 %61 to i64, !dbg !27
  %63 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %62, !dbg !27
  %64 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #4, !dbg !27
  %65 = or disjoint i32 %58, 32, !dbg !27
  %66 = lshr i32 %65, 5, !dbg !27
  %67 = add nuw nsw i32 %66, %65, !dbg !27
  %68 = zext nneg i32 %67 to i64, !dbg !27
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %68, !dbg !27
  %70 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #4, !dbg !27
  %71 = or disjoint i32 %58, 64, !dbg !27
  %72 = lshr i32 %71, 5, !dbg !27
  %73 = add nuw nsw i32 %72, %71, !dbg !27
  %74 = zext nneg i32 %73 to i64, !dbg !27
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %74, !dbg !27
  %76 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #4, !dbg !27
  %77 = or disjoint i32 %58, 96, !dbg !27
  %78 = lshr i32 %77, 5, !dbg !27
  %79 = add nuw nsw i32 %78, %77, !dbg !27
  %80 = zext nneg i32 %79 to i64, !dbg !27
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %80, !dbg !27
  %82 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #4, !dbg !27
  %83 = or disjoint i32 %58, 16, !dbg !27
  %84 = add nuw nsw i32 %83, %60, !dbg !27
  %85 = zext nneg i32 %84 to i64, !dbg !27
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %85, !dbg !27
  %87 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #4, !dbg !27
  %88 = or disjoint i32 %58, 48, !dbg !27
  %89 = lshr i32 %88, 5, !dbg !27
  %90 = add nuw nsw i32 %89, %88, !dbg !27
  %91 = zext nneg i32 %90 to i64, !dbg !27
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %91, !dbg !27
  %93 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #4, !dbg !27
  %94 = or disjoint i32 %58, 80, !dbg !27
  %95 = lshr i32 %94, 5, !dbg !27
  %96 = add nuw nsw i32 %95, %94, !dbg !27
  %97 = zext nneg i32 %96 to i64, !dbg !27
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %97, !dbg !27
  %99 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #4, !dbg !27
  %100 = or disjoint i32 %58, 112, !dbg !27
  %101 = lshr i32 %100, 5, !dbg !27
  %102 = add nuw nsw i32 %101, %100, !dbg !27
  %103 = zext nneg i32 %102 to i64, !dbg !27
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %103, !dbg !27
  %105 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %106 = lshr i32 %59, 5, !dbg !27
  %107 = add nuw nsw i32 %106, %59, !dbg !27
  %108 = zext nneg i32 %107 to i64, !dbg !27
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %108, !dbg !27
  %110 = load float, ptr addrspace(3) %109, align 4, !dbg !27
  %111 = or disjoint i32 %59, 1, !dbg !27
  %112 = add nuw nsw i32 %111, %106, !dbg !27
  %113 = zext nneg i32 %112 to i64, !dbg !27
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %113, !dbg !27
  %115 = load float, ptr addrspace(3) %114, align 4, !dbg !27
  %116 = or disjoint i32 %59, 2, !dbg !27
  %117 = add nuw nsw i32 %116, %106, !dbg !27
  %118 = zext nneg i32 %117 to i64, !dbg !27
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %118, !dbg !27
  %120 = load float, ptr addrspace(3) %119, align 4, !dbg !27
  %121 = or disjoint i32 %59, 3, !dbg !27
  %122 = add nuw nsw i32 %121, %106, !dbg !27
  %123 = zext nneg i32 %122 to i64, !dbg !27
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %123, !dbg !27
  %125 = load float, ptr addrspace(3) %124, align 4, !dbg !27
  %126 = or disjoint i32 %59, 512, !dbg !27
  %127 = lshr i32 %126, 5, !dbg !27
  %128 = add nuw nsw i32 %127, %126, !dbg !27
  %129 = zext nneg i32 %128 to i64, !dbg !27
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %129, !dbg !27
  %131 = load float, ptr addrspace(3) %130, align 4, !dbg !27
  %132 = or disjoint i32 %59, 513, !dbg !27
  %133 = lshr i32 %132, 5, !dbg !27
  %134 = add nuw nsw i32 %133, %132, !dbg !27
  %135 = zext nneg i32 %134 to i64, !dbg !27
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %135, !dbg !27
  %137 = load float, ptr addrspace(3) %136, align 4, !dbg !27
  %138 = or disjoint i32 %59, 514, !dbg !27
  %139 = lshr i32 %138, 5, !dbg !27
  %140 = add nuw nsw i32 %139, %138, !dbg !27
  %141 = zext nneg i32 %140 to i64, !dbg !27
  %142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %141, !dbg !27
  %143 = load float, ptr addrspace(3) %142, align 4, !dbg !27
  %144 = or disjoint i32 %59, 515, !dbg !27
  %145 = lshr i32 %144, 5, !dbg !27
  %146 = add nuw nsw i32 %145, %144, !dbg !27
  %147 = zext nneg i32 %146 to i64, !dbg !27
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %147, !dbg !27
  %149 = load float, ptr addrspace(3) %148, align 4, !dbg !27
  %150 = shl i32 %30, 10, !dbg !28
  %151 = shl i32 %31, 10, !dbg !28
  %152 = add i32 %150, %24, !dbg !29
  %153 = add i32 %151, %24, !dbg !29
  %154 = sext i32 %152 to i64, !dbg !30
  %155 = getelementptr float, ptr addrspace(1) %1, i64 %154, !dbg !30
  %156 = sext i32 %153 to i64, !dbg !30
  %157 = getelementptr float, ptr addrspace(1) %1, i64 %156, !dbg !30
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %155, i1 %44) #4, !dbg !31
  %159 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !31
  %160 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !31
  %161 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !31
  %162 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !31
  %163 = bitcast i32 %159 to float, !dbg !31
  %164 = bitcast i32 %160 to float, !dbg !31
  %165 = bitcast i32 %161 to float, !dbg !31
  %166 = bitcast i32 %162 to float, !dbg !31
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %157, i1 %45) #4, !dbg !31
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !31
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !31
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !31
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !31
  %172 = bitcast i32 %168 to float, !dbg !31
  %173 = bitcast i32 %169 to float, !dbg !31
  %174 = bitcast i32 %170 to float, !dbg !31
  %175 = bitcast i32 %171 to float, !dbg !31
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i = icmp eq i32 %176, 0, !dbg !32
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i = icmp eq i32 %177, 0, !dbg !32
  br i1 %.not.i, label %183, label %178, !dbg !32

178:                                              ; preds = %5
  br i1 %.not1.i, label %181, label %179, !dbg !32

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %163) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %163) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

183:                                              ; preds = %5
  br i1 %.not1.i, label %186, label %184, !dbg !32

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %163) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %163) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %179, %181, %184, %186
  %.0.i = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !32
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i1 = icmp eq i32 %188, 0, !dbg !32
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i4 = icmp eq i32 %189, 0, !dbg !32
  br i1 %.not.i1, label %195, label %190, !dbg !32

190:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %193, label %191, !dbg !32

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %164) #4, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %164) #4, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

195:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %198, label %196, !dbg !32

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.f(float %164) #4, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.f(float %164) #4, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

__nv_sqrtf.exit5:                                 ; preds = %191, %193, %196, %198
  %.0.i3 = phi float [ %192, %191 ], [ %194, %193 ], [ %197, %196 ], [ %199, %198 ], !dbg !32
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i6 = icmp eq i32 %200, 0, !dbg !32
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i9 = icmp eq i32 %201, 0, !dbg !32
  br i1 %.not.i6, label %207, label %202, !dbg !32

202:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %205, label %203, !dbg !32

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %165) #4, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %165) #4, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

207:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %210, label %208, !dbg !32

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.f(float %165) #4, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.f(float %165) #4, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

__nv_sqrtf.exit10:                                ; preds = %203, %205, %208, %210
  %.0.i8 = phi float [ %204, %203 ], [ %206, %205 ], [ %209, %208 ], [ %211, %210 ], !dbg !32
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i11 = icmp eq i32 %212, 0, !dbg !32
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i14 = icmp eq i32 %213, 0, !dbg !32
  br i1 %.not.i11, label %219, label %214, !dbg !32

214:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %217, label %215, !dbg !32

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %166) #4, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %166) #4, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

219:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %222, label %220, !dbg !32

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.f(float %166) #4, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.f(float %166) #4, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

__nv_sqrtf.exit15:                                ; preds = %215, %217, %220, %222
  %.0.i13 = phi float [ %216, %215 ], [ %218, %217 ], [ %221, %220 ], [ %223, %222 ], !dbg !32
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i16 = icmp eq i32 %224, 0, !dbg !32
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i19 = icmp eq i32 %225, 0, !dbg !32
  br i1 %.not.i16, label %231, label %226, !dbg !32

226:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %229, label %227, !dbg !32

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %172) #4, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %172) #4, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

231:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %234, label %232, !dbg !32

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.f(float %172) #4, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.f(float %172) #4, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

__nv_sqrtf.exit20:                                ; preds = %227, %229, %232, %234
  %.0.i18 = phi float [ %228, %227 ], [ %230, %229 ], [ %233, %232 ], [ %235, %234 ], !dbg !32
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i21 = icmp eq i32 %236, 0, !dbg !32
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i24 = icmp eq i32 %237, 0, !dbg !32
  br i1 %.not.i21, label %243, label %238, !dbg !32

238:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %241, label %239, !dbg !32

239:                                              ; preds = %238
  %240 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %173) #4, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

241:                                              ; preds = %238
  %242 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %173) #4, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

243:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %246, label %244, !dbg !32

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.f(float %173) #4, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.f(float %173) #4, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

__nv_sqrtf.exit25:                                ; preds = %239, %241, %244, %246
  %.0.i23 = phi float [ %240, %239 ], [ %242, %241 ], [ %245, %244 ], [ %247, %246 ], !dbg !32
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i26 = icmp eq i32 %248, 0, !dbg !32
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i29 = icmp eq i32 %249, 0, !dbg !32
  br i1 %.not.i26, label %255, label %250, !dbg !32

250:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %253, label %251, !dbg !32

251:                                              ; preds = %250
  %252 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %174) #4, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

253:                                              ; preds = %250
  %254 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %174) #4, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

255:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %258, label %256, !dbg !32

256:                                              ; preds = %255
  %257 = tail call float @llvm.nvvm.sqrt.rn.f(float %174) #4, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

258:                                              ; preds = %255
  %259 = tail call float @llvm.nvvm.sqrt.approx.f(float %174) #4, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

__nv_sqrtf.exit30:                                ; preds = %251, %253, %256, %258
  %.0.i28 = phi float [ %252, %251 ], [ %254, %253 ], [ %257, %256 ], [ %259, %258 ], !dbg !32
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i31 = icmp eq i32 %260, 0, !dbg !32
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i34 = icmp eq i32 %261, 0, !dbg !32
  br i1 %.not.i31, label %267, label %262, !dbg !32

262:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %265, label %263, !dbg !32

263:                                              ; preds = %262
  %264 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %175) #4, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

265:                                              ; preds = %262
  %266 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %175) #4, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

267:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %270, label %268, !dbg !32

268:                                              ; preds = %267
  %269 = tail call float @llvm.nvvm.sqrt.rn.f(float %175) #4, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

270:                                              ; preds = %267
  %271 = tail call float @llvm.nvvm.sqrt.approx.f(float %175) #4, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

__nv_sqrtf.exit35:                                ; preds = %263, %265, %268, %270
  %.0.i33 = phi float [ %264, %263 ], [ %266, %265 ], [ %269, %268 ], [ %271, %270 ], !dbg !32
  %272 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !33
  %273 = fadd float %.0.i3, 0x3DDB7CDFE0000000, !dbg !33
  %274 = fadd float %.0.i8, 0x3DDB7CDFE0000000, !dbg !33
  %275 = fadd float %.0.i13, 0x3DDB7CDFE0000000, !dbg !33
  %276 = fadd float %.0.i18, 0x3DDB7CDFE0000000, !dbg !33
  %277 = fadd float %.0.i23, 0x3DDB7CDFE0000000, !dbg !33
  %278 = fadd float %.0.i28, 0x3DDB7CDFE0000000, !dbg !33
  %279 = fadd float %.0.i33, 0x3DDB7CDFE0000000, !dbg !33
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float %272) #4, !dbg !34
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float %273) #4, !dbg !34
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %274) #4, !dbg !34
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %275) #4, !dbg !34
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %276) #4, !dbg !34
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float %277) #4, !dbg !34
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float %278) #4, !dbg !34
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float %279) #4, !dbg !34
  %288 = shl i32 %15, 10, !dbg !35
  %289 = shl i32 %16, 10, !dbg !35
  %290 = add i32 %24, %288, !dbg !36
  %291 = add i32 %24, %289, !dbg !36
  %292 = sext i32 %290 to i64, !dbg !37
  %293 = getelementptr float, ptr addrspace(1) %2, i64 %292, !dbg !37
  %294 = sext i32 %291 to i64, !dbg !37
  %295 = getelementptr float, ptr addrspace(1) %2, i64 %294, !dbg !37
  %296 = bitcast float %280 to i32, !dbg !38
  %297 = bitcast float %281 to i32, !dbg !38
  %298 = bitcast float %282 to i32, !dbg !38
  %299 = bitcast float %283 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %296, i32 %297, i32 %298, i32 %299, ptr addrspace(1) %293, i1 %44) #4, !dbg !38
  %300 = bitcast float %284 to i32, !dbg !38
  %301 = bitcast float %285 to i32, !dbg !38
  %302 = bitcast float %286 to i32, !dbg !38
  %303 = bitcast float %287 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %300, i32 %301, i32 %302, i32 %303, ptr addrspace(1) %295, i1 %45) #4, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crgvmqzazod3ucvhtqvt2iswtmt4jiiv4ypddm4vvf3w7whokxtw.py", directory: "inductor_cache/rg")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_13", linkageName: "triton_poi_fused_add_div_sqrt_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 64, scope: !7)
!27 = !DILocation(line: 32, column: 56, scope: !7)
!28 = !DILocation(line: 33, column: 40, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 45, scope: !7)
!32 = !DILocation(line: 34, column: 26, scope: !7)
!33 = !DILocation(line: 36, column: 18, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 35, scope: !7)
!36 = !DILocation(line: 38, column: 30, scope: !7)
!37 = !DILocation(line: 38, column: 25, scope: !7)
!38 = !DILocation(line: 38, column: 46, scope: !7)
!39 = !DILocation(line: 38, column: 4, scope: !7)
