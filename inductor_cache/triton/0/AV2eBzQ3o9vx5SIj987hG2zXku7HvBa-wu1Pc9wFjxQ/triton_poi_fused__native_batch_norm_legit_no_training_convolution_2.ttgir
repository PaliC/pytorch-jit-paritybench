#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__native_batch_norm_legit_no_training_convolution_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<9.99999974E-6> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<144> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<9> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<256xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_1 : tensor<256xi32, #blocked> loc(#loc6)
    %6 = arith.divsi %4, %cst_2 : tensor<256xi32, #blocked> loc(#loc7)
    %7 = arith.remsi %6, %cst_3 : tensor<256xi32, #blocked> loc(#loc8)
    %8 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc9)
    %9 = tt.addptr %8, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc9)
    %10 = tt.load %9, %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc10)
    %11 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc11)
    %12 = tt.addptr %11, %7 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc11)
    %13 = tt.load %12, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc12)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc13)
    %15 = tt.addptr %14, %7 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc13)
    %16 = tt.load %15, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc14)
    %17 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc15)
    %18 = tt.addptr %17, %7 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc15)
    %19 = tt.load %18, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc16)
    %20 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc17)
    %21 = tt.addptr %20, %7 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc17)
    %22 = tt.load %21, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc18)
    %23 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc19)
    %24 = tt.addptr %23, %7 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc19)
    %25 = tt.load %24, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc20)
    %26 = arith.addf %10, %13 : tensor<256xf32, #blocked> loc(#loc21)
    %27 = arith.subf %26, %16 : tensor<256xf32, #blocked> loc(#loc22)
    %28 = arith.addf %19, %cst : tensor<256xf32, #blocked> loc(#loc23)
    %29 = tt.extern_elementwise %28 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<256xf32, #blocked>) -> tensor<256xf32, #blocked> loc(#loc24)
    %30 = arith.divf %cst_0, %29 : tensor<256xf32, #blocked> loc(#loc25)
    %31 = arith.mulf %27, %30 : tensor<256xf32, #blocked> loc(#loc26)
    %32 = arith.mulf %31, %22 : tensor<256xf32, #blocked> loc(#loc27)
    %33 = arith.addf %32, %25 : tensor<256xf32, #blocked> loc(#loc28)
    tt.store %9, %26, %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc29)
    %34 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc30)
    %35 = tt.addptr %34, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc30)
    tt.store %35, %33, %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc31)
    tt.return loc(#loc32)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":21:28)
#loc3 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":21:33)
#loc4 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":22:36)
#loc5 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":22:23)
#loc6 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":23:21)
#loc7 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":25:21)
#loc8 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":25:26)
#loc9 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":26:34)
#loc10 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":26:39)
#loc11 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":27:30)
#loc12 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":27:35)
#loc13 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":28:30)
#loc14 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":28:35)
#loc15 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":29:30)
#loc16 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":29:35)
#loc17 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":30:31)
#loc18 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":30:36)
#loc19 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":31:31)
#loc20 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":31:36)
#loc21 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":32:18)
#loc22 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":33:18)
#loc23 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":35:18)
#loc24 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":36:26)
#loc25 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":38:19)
#loc26 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":41:19)
#loc27 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":42:20)
#loc28 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":43:20)
#loc29 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":44:39)
#loc30 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":45:25)
#loc31 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":45:37)
#loc32 = loc("inductor_cache/3s/c3sci7k4ygl7bpjmenzsypjqwv3vfpgjdhmym7evgr5b73rzcw42.py":45:4)
