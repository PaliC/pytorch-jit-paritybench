; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_76(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 2, !dbg !13
  %16 = icmp slt i32 %14, 43392, !dbg !14
  %17 = srem i32 %14, 678, !dbg !15
  %18 = srem i32 %15, 678, !dbg !15
  %19 = sext i32 %14 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 %16) #3, !dbg !17
  %22 = sext i32 %17 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !18
  %24 = sext i32 %18 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !18
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %16) #3, !dbg !19
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %16) #3, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !20
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %16) #3, !dbg !21
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %16) #3, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !22
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %16) #3, !dbg !23
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !23
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !23
  %37 = bitcast i32 %35 to float, !dbg !23
  %38 = bitcast i32 %36 to float, !dbg !23
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %16) #3, !dbg !23
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !23
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !23
  %42 = bitcast i32 %40 to float, !dbg !23
  %43 = bitcast i32 %41 to float, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !24
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %16) #3, !dbg !25
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %16) #3, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !26
  %49 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !26
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %16) #3, !dbg !27
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %16) #3, !dbg !27
  %52 = fadd float %37, 0x3EE4F8B580000000, !dbg !28
  %53 = fadd float %38, 0x3EE4F8B580000000, !dbg !28
  %54 = fadd float %42, 0x3EE4F8B580000000, !dbg !28
  %55 = fadd float %43, 0x3EE4F8B580000000, !dbg !28
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %56, 0, !dbg !29
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %57, 0, !dbg !29
  br i1 %.not.i, label %63, label %58, !dbg !29

58:                                               ; preds = %8
  br i1 %.not1.i, label %61, label %59, !dbg !29

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

63:                                               ; preds = %8
  br i1 %.not1.i, label %66, label %64, !dbg !29

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %59, %61, %64, %66
  %.0.i = phi float [ %60, %59 ], [ %62, %61 ], [ %65, %64 ], [ %67, %66 ], !dbg !29
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i4 = icmp eq i32 %68, 0, !dbg !29
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i7 = icmp eq i32 %69, 0, !dbg !29
  br i1 %.not.i4, label %75, label %70, !dbg !29

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %73, label %71, !dbg !29

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !29
  br label %__nv_sqrtf.exit8, !dbg !29

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !29
  br label %__nv_sqrtf.exit8, !dbg !29

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %78, label %76, !dbg !29

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !29
  br label %__nv_sqrtf.exit8, !dbg !29

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !29
  br label %__nv_sqrtf.exit8, !dbg !29

__nv_sqrtf.exit8:                                 ; preds = %71, %73, %76, %78
  %.0.i6 = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !29
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i9 = icmp eq i32 %80, 0, !dbg !29
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i12 = icmp eq i32 %81, 0, !dbg !29
  br i1 %.not.i9, label %87, label %82, !dbg !29

82:                                               ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %85, label %83, !dbg !29

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !29
  br label %__nv_sqrtf.exit13, !dbg !29

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !29
  br label %__nv_sqrtf.exit13, !dbg !29

87:                                               ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %90, label %88, !dbg !29

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !29
  br label %__nv_sqrtf.exit13, !dbg !29

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !29
  br label %__nv_sqrtf.exit13, !dbg !29

__nv_sqrtf.exit13:                                ; preds = %83, %85, %88, %90
  %.0.i11 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !29
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i14 = icmp eq i32 %92, 0, !dbg !29
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i17 = icmp eq i32 %93, 0, !dbg !29
  br i1 %.not.i14, label %99, label %94, !dbg !29

94:                                               ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %97, label %95, !dbg !29

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !29
  br label %__nv_sqrtf.exit18, !dbg !29

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !29
  br label %__nv_sqrtf.exit18, !dbg !29

99:                                               ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %102, label %100, !dbg !29

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !29
  br label %__nv_sqrtf.exit18, !dbg !29

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !29
  br label %__nv_sqrtf.exit18, !dbg !29

__nv_sqrtf.exit18:                                ; preds = %95, %97, %100, %102
  %.0.i16 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !29
  %104 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !17
  %105 = extractvalue { i32, i32 } %27, 1, !dbg !19
  %106 = extractvalue { i32, i32 } %31, 1, !dbg !21
  %107 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !17
  %108 = extractvalue { i32, i32 } %27, 0, !dbg !19
  %109 = extractvalue { i32, i32 } %31, 0, !dbg !21
  %110 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !17
  %111 = extractvalue { i32, i32 } %26, 1, !dbg !19
  %112 = extractvalue { i32, i32 } %30, 1, !dbg !21
  %113 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !17
  %114 = extractvalue { i32, i32 } %26, 0, !dbg !19
  %115 = extractvalue { i32, i32 } %30, 0, !dbg !21
  %116 = extractvalue { i32, i32 } %51, 1, !dbg !27
  %117 = extractvalue { i32, i32 } %51, 0, !dbg !27
  %118 = extractvalue { i32, i32 } %50, 1, !dbg !27
  %119 = extractvalue { i32, i32 } %50, 0, !dbg !27
  %120 = extractvalue { i32, i32 } %47, 1, !dbg !25
  %121 = extractvalue { i32, i32 } %47, 0, !dbg !25
  %122 = extractvalue { i32, i32 } %46, 1, !dbg !25
  %123 = extractvalue { i32, i32 } %46, 0, !dbg !25
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #3, !dbg !30
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #3, !dbg !30
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #3, !dbg !30
  %128 = insertelement <4 x i32> poison, i32 %104, i64 0, !dbg !17
  %129 = insertelement <4 x i32> %128, i32 %107, i64 1, !dbg !17
  %130 = insertelement <4 x i32> %129, i32 %110, i64 2, !dbg !17
  %131 = insertelement <4 x i32> %130, i32 %113, i64 3, !dbg !17
  %132 = bitcast <4 x i32> %131 to <4 x float>, !dbg !17
  %133 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !19
  %134 = insertelement <4 x i32> %133, i32 %108, i64 1, !dbg !19
  %135 = insertelement <4 x i32> %134, i32 %111, i64 2, !dbg !19
  %136 = insertelement <4 x i32> %135, i32 %114, i64 3, !dbg !19
  %137 = bitcast <4 x i32> %136 to <4 x float>, !dbg !19
  %138 = fadd <4 x float> %132, %137, !dbg !31
  %139 = insertelement <4 x i32> poison, i32 %106, i64 0, !dbg !21
  %140 = insertelement <4 x i32> %139, i32 %109, i64 1, !dbg !21
  %141 = insertelement <4 x i32> %140, i32 %112, i64 2, !dbg !21
  %142 = insertelement <4 x i32> %141, i32 %115, i64 3, !dbg !21
  %143 = bitcast <4 x i32> %142 to <4 x float>, !dbg !21
  %144 = fsub <4 x float> %138, %143, !dbg !32
  %145 = insertelement <4 x i32> poison, i32 %116, i64 0, !dbg !27
  %146 = insertelement <4 x i32> %145, i32 %117, i64 1, !dbg !27
  %147 = insertelement <4 x i32> %146, i32 %118, i64 2, !dbg !27
  %148 = insertelement <4 x i32> %147, i32 %119, i64 3, !dbg !27
  %149 = bitcast <4 x i32> %148 to <4 x float>, !dbg !27
  %150 = insertelement <4 x i32> poison, i32 %120, i64 0, !dbg !25
  %151 = insertelement <4 x i32> %150, i32 %121, i64 1, !dbg !25
  %152 = insertelement <4 x i32> %151, i32 %122, i64 2, !dbg !25
  %153 = insertelement <4 x i32> %152, i32 %123, i64 3, !dbg !25
  %154 = bitcast <4 x i32> %153 to <4 x float>, !dbg !25
  %155 = insertelement <4 x float> poison, float %127, i64 0, !dbg !33
  %156 = insertelement <4 x float> %155, float %126, i64 1, !dbg !33
  %157 = insertelement <4 x float> %156, float %125, i64 2, !dbg !33
  %158 = insertelement <4 x float> %157, float %124, i64 3, !dbg !33
  %159 = fmul <4 x float> %144, %158, !dbg !33
  %160 = fmul <4 x float> %159, %154, !dbg !34
  %161 = fadd <4 x float> %160, %149, !dbg !35
  %162 = fcmp ole <4 x float> %161, zeroinitializer, !dbg !36
  %163 = select <4 x i1> %162, <4 x float> zeroinitializer, <4 x float> %161, !dbg !36
  %164 = fcmp olt <4 x float> %163, splat (float 6.000000e+00), !dbg !40
  %165 = extractelement <4 x float> %163, i64 3, !dbg !42
  %166 = fcmp uno float %165, 0.000000e+00, !dbg !43
  %167 = extractelement <4 x float> %163, i64 2, !dbg !42
  %168 = fcmp uno float %167, 0.000000e+00, !dbg !43
  %169 = extractelement <4 x float> %163, i64 1, !dbg !42
  %170 = fcmp uno float %169, 0.000000e+00, !dbg !43
  %171 = extractelement <4 x float> %163, i64 0, !dbg !42
  %172 = fcmp uno float %171, 0.000000e+00, !dbg !43
  %173 = extractelement <4 x i1> %164, i64 3, !dbg !44
  %174 = or i1 %173, %166, !dbg !44
  %175 = extractelement <4 x i1> %164, i64 2, !dbg !44
  %176 = or i1 %175, %168, !dbg !44
  %177 = extractelement <4 x i1> %164, i64 1, !dbg !44
  %178 = or i1 %177, %170, !dbg !44
  %179 = extractelement <4 x i1> %164, i64 0, !dbg !44
  %180 = or i1 %179, %172, !dbg !44
  %bc = bitcast <4 x float> %138 to <4 x i32>, !dbg !45
  %181 = extractelement <4 x i32> %bc, i64 3, !dbg !45
  %bc19 = bitcast <4 x float> %138 to <4 x i32>, !dbg !45
  %182 = extractelement <4 x i32> %bc19, i64 2, !dbg !45
  %bc20 = bitcast <4 x float> %138 to <4 x i32>, !dbg !45
  %183 = extractelement <4 x i32> %bc20, i64 1, !dbg !45
  %bc21 = bitcast <4 x float> %138 to <4 x i32>, !dbg !45
  %184 = extractelement <4 x i32> %bc21, i64 0, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %181, i32 %182, i32 %183, i32 %184, ptr addrspace(1) %20, i1 %16) #3, !dbg !45
  %185 = getelementptr float, ptr addrspace(1) %6, i64 %19, !dbg !46
  %186 = bitcast float %165 to i32, !dbg !42
  %187 = select i1 %174, i32 %186, i32 1086324736, !dbg !47
  %188 = bitcast float %167 to i32, !dbg !42
  %189 = select i1 %176, i32 %188, i32 1086324736, !dbg !47
  %190 = bitcast float %169 to i32, !dbg !42
  %191 = select i1 %178, i32 %190, i32 1086324736, !dbg !47
  %192 = bitcast float %171 to i32, !dbg !42
  %193 = select i1 %180, i32 %192, i32 1086324736, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %187, i32 %189, i32 %191, i32 %193, ptr addrspace(1) %185, i1 %16) #3, !dbg !42
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cds5frgqcwtilc3jjtnnemfndn7ptzdsgmq3qwqq5xizfxctapzj.py", directory: "inductor_cache/ds")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_76, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_76, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_76", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_76", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 26, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 32, column: 18, scope: !7)
!32 = !DILocation(line: 33, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 19, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 45, column: 42, scope: !7)
!40 = !DILocation(line: 110, column: 15, scope: !37, inlinedAt: !41)
!41 = !DILocation(line: 47, column: 42, scope: !7)
!42 = !DILocation(line: 49, column: 37, scope: !7)
!43 = !DILocation(line: 112, column: 21, scope: !37, inlinedAt: !41)
!44 = !DILocation(line: 112, column: 16, scope: !37, inlinedAt: !41)
!45 = !DILocation(line: 48, column: 39, scope: !7)
!46 = !DILocation(line: 49, column: 25, scope: !7)
!47 = !DILocation(line: 113, column: 29, scope: !37, inlinedAt: !41)
!48 = !DILocation(line: 49, column: 4, scope: !7)
