; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %12, 2, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %18 = sdiv i32 %.frozen, 16, !dbg !14
  %19 = srem i32 %18, 1024, !dbg !15
  %.frozen1 = freeze i32 %16, !dbg !16
  %20 = sdiv i32 %.frozen1, 16384, !dbg !16
  %21 = mul i32 %18, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %21, !dbg !17
  %22 = ashr exact i32 %16, 2, !dbg !18
  %23 = srem i32 %22, 4, !dbg !19
  %24 = srem i32 %17, 4, !dbg !20
  %25 = icmp slt i32 %19, 512, !dbg !21
  %26 = mul i32 %20, 16384, !dbg !22
  %srem.decomposed = sub i32 %.frozen1, %26, !dbg !22
  %27 = shl nsw i32 %20, 13, !dbg !23
  %28 = add nsw i32 %27, %srem.decomposed, !dbg !24
  %29 = sext i32 %28 to i64, !dbg !25
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !25
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #1, !dbg !26
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !26
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !26
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !26
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !26
  %36 = bitcast i32 %32 to float, !dbg !26
  %37 = bitcast i32 %33 to float, !dbg !26
  %38 = bitcast i32 %34 to float, !dbg !26
  %39 = bitcast i32 %35 to float, !dbg !26
  %40 = sext i32 %23 to i64, !dbg !27
  %41 = getelementptr i64, ptr addrspace(1) %1, i64 %40, !dbg !27
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %41, i1 %25, i1 %25) #1, !dbg !28
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %41, i1 %25, i1 %25) #1, !dbg !28
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %41, i1 %25, i1 %25) #1, !dbg !28
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %41, i1 %25, i1 %25) #1, !dbg !28
  %46 = lshr i64 %42, 62, !dbg !29
  %47 = and i64 %46, 2, !dbg !29
  %48 = add i64 %47, %42, !dbg !29
  %49 = sext i32 %24 to i64, !dbg !30
  %50 = getelementptr i64, ptr addrspace(1) %2, i64 %49, !dbg !30
  %51 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %2, i1 %25, i1 %25, i1 %25) #1, !dbg !31
  %52 = extractvalue { i64, i64 } %51, 0, !dbg !31
  %53 = extractvalue { i64, i64 } %51, 1, !dbg !31
  %54 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %50, i1 %25, i1 %25, i1 %25) #1, !dbg !31
  %55 = extractvalue { i64, i64 } %54, 0, !dbg !31
  %56 = extractvalue { i64, i64 } %54, 1, !dbg !31
  %57 = lshr i64 %52, 62, !dbg !32
  %58 = and i64 %57, 2, !dbg !32
  %59 = lshr i64 %53, 62, !dbg !32
  %60 = and i64 %59, 2, !dbg !32
  %61 = lshr i64 %55, 62, !dbg !32
  %62 = and i64 %61, 2, !dbg !32
  %63 = lshr i64 %56, 62, !dbg !32
  %64 = and i64 %63, 2, !dbg !32
  %65 = shl i64 %48, 1, !dbg !33
  %66 = shl nsw i32 %19, 2, !dbg !34
  %67 = sext i32 %66 to i64, !dbg !35
  %68 = shl nsw i32 %20, 11, !dbg !36
  %69 = sext i32 %68 to i64, !dbg !37
  %70 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !38
  %71 = getelementptr float, ptr addrspace(1) %70, i64 %58, !dbg !38
  %72 = getelementptr float, ptr addrspace(1) %71, i64 %65, !dbg !38
  %73 = getelementptr float, ptr addrspace(1) %72, i64 %67, !dbg !38
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %69, !dbg !38
  %75 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !38
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %60, !dbg !38
  %77 = getelementptr float, ptr addrspace(1) %76, i64 %65, !dbg !38
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %67, !dbg !38
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %69, !dbg !38
  %80 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !38
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %62, !dbg !38
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %65, !dbg !38
  %83 = getelementptr float, ptr addrspace(1) %82, i64 %67, !dbg !38
  %84 = getelementptr float, ptr addrspace(1) %83, i64 %69, !dbg !38
  %85 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !38
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %64, !dbg !38
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %65, !dbg !38
  %88 = getelementptr float, ptr addrspace(1) %87, i64 %67, !dbg !38
  %89 = getelementptr float, ptr addrspace(1) %88, i64 %69, !dbg !38
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %25, i32 0, i1 %25) #1, !dbg !39
  %91 = bitcast i32 %90 to float, !dbg !39
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %25, i32 0, i1 %25) #1, !dbg !39
  %93 = bitcast i32 %92 to float, !dbg !39
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %25, i32 0, i1 %25) #1, !dbg !39
  %95 = bitcast i32 %94 to float, !dbg !39
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %25, i32 0, i1 %25) #1, !dbg !39
  %97 = bitcast i32 %96 to float, !dbg !39
  %98 = getelementptr i64, ptr addrspace(1) %4, i64 %49, !dbg !40
  %99 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %4, i1 %25, i1 %25, i1 %25) #1, !dbg !41
  %100 = extractvalue { i64, i64 } %99, 0, !dbg !41
  %101 = extractvalue { i64, i64 } %99, 1, !dbg !41
  %102 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %98, i1 %25, i1 %25, i1 %25) #1, !dbg !41
  %103 = extractvalue { i64, i64 } %102, 0, !dbg !41
  %104 = extractvalue { i64, i64 } %102, 1, !dbg !41
  %105 = lshr i64 %100, 62, !dbg !42
  %106 = and i64 %105, 2, !dbg !42
  %107 = lshr i64 %101, 62, !dbg !42
  %108 = and i64 %107, 2, !dbg !42
  %109 = lshr i64 %103, 62, !dbg !42
  %110 = and i64 %109, 2, !dbg !42
  %111 = lshr i64 %104, 62, !dbg !42
  %112 = and i64 %111, 2, !dbg !42
  %113 = getelementptr float, ptr addrspace(1) %3, i64 %100, !dbg !43
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %106, !dbg !43
  %115 = getelementptr float, ptr addrspace(1) %114, i64 %65, !dbg !43
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %67, !dbg !43
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %69, !dbg !43
  %118 = getelementptr float, ptr addrspace(1) %3, i64 %101, !dbg !43
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %108, !dbg !43
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %65, !dbg !43
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %67, !dbg !43
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %69, !dbg !43
  %123 = getelementptr float, ptr addrspace(1) %3, i64 %103, !dbg !43
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %110, !dbg !43
  %125 = getelementptr float, ptr addrspace(1) %124, i64 %65, !dbg !43
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %67, !dbg !43
  %127 = getelementptr float, ptr addrspace(1) %126, i64 %69, !dbg !43
  %128 = getelementptr float, ptr addrspace(1) %3, i64 %104, !dbg !43
  %129 = getelementptr float, ptr addrspace(1) %128, i64 %112, !dbg !43
  %130 = getelementptr float, ptr addrspace(1) %129, i64 %65, !dbg !43
  %131 = getelementptr float, ptr addrspace(1) %130, i64 %67, !dbg !43
  %132 = getelementptr float, ptr addrspace(1) %131, i64 %69, !dbg !43
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %117, i1 %25, i32 0, i1 %25) #1, !dbg !44
  %134 = bitcast i32 %133 to float, !dbg !44
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %25, i32 0, i1 %25) #1, !dbg !44
  %136 = bitcast i32 %135 to float, !dbg !44
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %25, i32 0, i1 %25) #1, !dbg !44
  %138 = bitcast i32 %137 to float, !dbg !44
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %25, i32 0, i1 %25) #1, !dbg !44
  %140 = bitcast i32 %139 to float, !dbg !44
  %141 = fsub float %134, %91, !dbg !45
  %142 = fsub float %136, %93, !dbg !45
  %143 = fsub float %138, %95, !dbg !45
  %144 = fsub float %140, %97, !dbg !45
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %5, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #1, !dbg !46
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !46
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !46
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !46
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !46
  %150 = bitcast i32 %146 to float, !dbg !46
  %151 = bitcast i32 %147 to float, !dbg !46
  %152 = bitcast i32 %148 to float, !dbg !46
  %153 = bitcast i32 %149 to float, !dbg !46
  %154 = fmul float %141, %150, !dbg !47
  %155 = fmul float %142, %151, !dbg !47
  %156 = fmul float %143, %152, !dbg !47
  %157 = fmul float %144, %153, !dbg !47
  %158 = fadd float %154, %91, !dbg !48
  %159 = fadd float %155, %93, !dbg !48
  %160 = fadd float %156, %95, !dbg !48
  %161 = fadd float %157, %97, !dbg !48
  %162 = fsub float %158, %36, !dbg !49
  %163 = fsub float %159, %37, !dbg !49
  %164 = fsub float %160, %38, !dbg !49
  %165 = fsub float %161, %39, !dbg !49
  %166 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !50
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %166, i1 %25, i32 0, i1 %25) #1, !dbg !51
  %168 = bitcast i32 %167 to float, !dbg !51
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %166, i1 %25, i32 0, i1 %25) #1, !dbg !51
  %170 = bitcast i32 %169 to float, !dbg !51
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %166, i1 %25, i32 0, i1 %25) #1, !dbg !51
  %172 = bitcast i32 %171 to float, !dbg !51
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %166, i1 %25, i32 0, i1 %25) #1, !dbg !51
  %174 = bitcast i32 %173 to float, !dbg !51
  %175 = fmul float %162, %168, !dbg !52
  %176 = fmul float %163, %170, !dbg !52
  %177 = fmul float %164, %172, !dbg !52
  %178 = fmul float %165, %174, !dbg !52
  %179 = fadd float %175, %36, !dbg !53
  %180 = fadd float %176, %37, !dbg !53
  %181 = fadd float %177, %38, !dbg !53
  %182 = fadd float %178, %39, !dbg !53
  %183 = icmp sgt i32 %19, 511, !dbg !54
  %184 = shl nsw i32 %19, 4, !dbg !55
  %185 = add nsw i32 %.decomposed, -8192, !dbg !55
  %186 = add nsw i32 %185, %27, !dbg !56
  %187 = add nsw i32 %186, %184, !dbg !57
  %188 = sext i32 %187 to i64, !dbg !58
  %189 = getelementptr float, ptr addrspace(1) %7, i64 %188, !dbg !58
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %189, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183) #1, !dbg !59
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !59
  %192 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !59
  %193 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !59
  %194 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !59
  %195 = sext i32 %16 to i64, !dbg !60
  %196 = getelementptr float, ptr addrspace(1) %8, i64 %195, !dbg !60
  %197 = bitcast float %179 to i32, !dbg !61
  %198 = select i1 %25, i32 %197, i32 %191, !dbg !62
  %199 = bitcast float %180 to i32, !dbg !61
  %200 = select i1 %25, i32 %199, i32 %192, !dbg !62
  %201 = bitcast float %181 to i32, !dbg !61
  %202 = select i1 %25, i32 %201, i32 %193, !dbg !62
  %203 = bitcast float %182 to i32, !dbg !61
  %204 = select i1 %25, i32 %203, i32 %194, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %198, i32 %200, i32 %202, i32 %204, ptr addrspace(1) %196, i1 true) #1, !dbg !61
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czzpe3vxfevb32lcypqtjxj7rseeggfih4dykurvivgqxb4uej2h.py", directory: "inductor_cache/zz")
!4 = !{ptr @triton_poi_fused_cat_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_24", linkageName: "triton_poi_fused_cat_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 27, column: 26, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 18, scope: !7)
!22 = !DILocation(line: 35, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 50, scope: !7)
!24 = !DILocation(line: 35, column: 45, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 55, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 40, column: 33, scope: !7)
!30 = !DILocation(line: 41, column: 31, scope: !7)
!31 = !DILocation(line: 41, column: 36, scope: !7)
!32 = !DILocation(line: 44, column: 35, scope: !7)
!33 = !DILocation(line: 45, column: 41, scope: !7)
!34 = !DILocation(line: 45, column: 52, scope: !7)
!35 = !DILocation(line: 45, column: 49, scope: !7)
!36 = !DILocation(line: 45, column: 63, scope: !7)
!37 = !DILocation(line: 45, column: 58, scope: !7)
!38 = !DILocation(line: 45, column: 31, scope: !7)
!39 = !DILocation(line: 45, column: 68, scope: !7)
!40 = !DILocation(line: 46, column: 31, scope: !7)
!41 = !DILocation(line: 46, column: 36, scope: !7)
!42 = !DILocation(line: 49, column: 35, scope: !7)
!43 = !DILocation(line: 50, column: 31, scope: !7)
!44 = !DILocation(line: 50, column: 68, scope: !7)
!45 = !DILocation(line: 51, column: 20, scope: !7)
!46 = !DILocation(line: 52, column: 36, scope: !7)
!47 = !DILocation(line: 53, column: 20, scope: !7)
!48 = !DILocation(line: 54, column: 20, scope: !7)
!49 = !DILocation(line: 55, column: 20, scope: !7)
!50 = !DILocation(line: 56, column: 31, scope: !7)
!51 = !DILocation(line: 56, column: 36, scope: !7)
!52 = !DILocation(line: 57, column: 20, scope: !7)
!53 = !DILocation(line: 58, column: 19, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 40, scope: !7)
!56 = !DILocation(line: 64, column: 36, scope: !7)
!57 = !DILocation(line: 64, column: 55, scope: !7)
!58 = !DILocation(line: 64, column: 31, scope: !7)
!59 = !DILocation(line: 64, column: 65, scope: !7)
!60 = !DILocation(line: 66, column: 25, scope: !7)
!61 = !DILocation(line: 66, column: 37, scope: !7)
!62 = !DILocation(line: 0, scope: !7)
!63 = !DILocation(line: 66, column: 4, scope: !7)
