; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %17 = sdiv i32 %.frozen, 64, !dbg !14
  %18 = mul i32 %17, 64, !dbg !15
  %.decomposed = sub i32 %.frozen, %18, !dbg !15
  %19 = srem i32 %17, 16, !dbg !16
  %20 = sdiv i32 %16, 1024, !dbg !17
  %21 = sext i32 %.decomposed to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !18
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !20
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !21
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !21
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !21
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !21
  %30 = bitcast i32 %26 to float, !dbg !21
  %31 = bitcast i32 %27 to float, !dbg !21
  %32 = bitcast i32 %28 to float, !dbg !21
  %33 = bitcast i32 %29 to float, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !22
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !24
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !25
  %38 = icmp slt i32 %.decomposed, 48, !dbg !26
  %39 = mul nsw i32 %17, 48, !dbg !27
  %40 = add nsw i32 %39, %.decomposed, !dbg !28
  %41 = sext i32 %40 to i64, !dbg !29
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !29
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #3, !dbg !30
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !31
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #3, !dbg !32
  %46 = icmp sgt i32 %.decomposed, 47, !dbg !33
  %47 = shl nsw i32 %19, 5, !dbg !34
  %48 = shl nsw i32 %20, 10, !dbg !35
  %49 = add nsw i32 %.decomposed, -48, !dbg !36
  %50 = add i32 %49, %48, !dbg !37
  %51 = add i32 %50, %47, !dbg !38
  %52 = sext i32 %51 to i64, !dbg !39
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !39
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #3, !dbg !40
  %55 = add i32 %50, 16, !dbg !41
  %56 = add i32 %55, %47, !dbg !42
  %57 = sext i32 %56 to i64, !dbg !43
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !43
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #3, !dbg !44
  %60 = add i32 %50, 512, !dbg !45
  %61 = add i32 %60, %47, !dbg !46
  %62 = sext i32 %61 to i64, !dbg !47
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !47
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #3, !dbg !48
  %65 = add i32 %50, 528, !dbg !49
  %66 = add i32 %65, %47, !dbg !50
  %67 = sext i32 %66 to i64, !dbg !51
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !51
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #3, !dbg !52
  %70 = fadd float %30, 0x3F50624DE0000000, !dbg !53
  %71 = fadd float %31, 0x3F50624DE0000000, !dbg !53
  %72 = fadd float %32, 0x3F50624DE0000000, !dbg !53
  %73 = fadd float %33, 0x3F50624DE0000000, !dbg !53
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i = icmp eq i32 %74, 0, !dbg !54
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i = icmp eq i32 %75, 0, !dbg !54
  br i1 %.not.i, label %81, label %76, !dbg !54

76:                                               ; preds = %10
  br i1 %.not1.i, label %79, label %77, !dbg !54

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

81:                                               ; preds = %10
  br i1 %.not1.i, label %84, label %82, !dbg !54

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

__nv_sqrtf.exit:                                  ; preds = %77, %79, %82, %84
  %.0.i = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !54
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i1 = icmp eq i32 %86, 0, !dbg !54
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i4 = icmp eq i32 %87, 0, !dbg !54
  br i1 %.not.i1, label %93, label %88, !dbg !54

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !54

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %96, label %94, !dbg !54

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

__nv_sqrtf.exit5:                                 ; preds = %89, %91, %94, %96
  %.0.i3 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !54
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i6 = icmp eq i32 %98, 0, !dbg !54
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i9 = icmp eq i32 %99, 0, !dbg !54
  br i1 %.not.i6, label %105, label %100, !dbg !54

100:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %103, label %101, !dbg !54

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !54
  br label %__nv_sqrtf.exit10, !dbg !54

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !54
  br label %__nv_sqrtf.exit10, !dbg !54

105:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %108, label %106, !dbg !54

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !54
  br label %__nv_sqrtf.exit10, !dbg !54

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !54
  br label %__nv_sqrtf.exit10, !dbg !54

__nv_sqrtf.exit10:                                ; preds = %101, %103, %106, %108
  %.0.i8 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !54
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i11 = icmp eq i32 %110, 0, !dbg !54
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i14 = icmp eq i32 %111, 0, !dbg !54
  br i1 %.not.i11, label %117, label %112, !dbg !54

112:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %115, label %113, !dbg !54

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !54
  br label %__nv_sqrtf.exit15, !dbg !54

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !54
  br label %__nv_sqrtf.exit15, !dbg !54

117:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %120, label %118, !dbg !54

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !54
  br label %__nv_sqrtf.exit15, !dbg !54

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !54
  br label %__nv_sqrtf.exit15, !dbg !54

__nv_sqrtf.exit15:                                ; preds = %113, %115, %118, %120
  %.0.i13 = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !54
  %122 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !30
  %123 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !32
  %124 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !44
  %125 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !40
  %126 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !48
  %127 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !52
  %128 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !19
  %129 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !30
  %130 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !32
  %131 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !44
  %132 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !40
  %133 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !48
  %134 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !52
  %135 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !19
  %136 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !30
  %137 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !32
  %138 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !44
  %139 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !40
  %140 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !48
  %141 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !52
  %142 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !19
  %143 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !30
  %144 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !32
  %145 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !44
  %146 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !40
  %147 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !48
  %148 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !52
  %149 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !19
  %150 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %151 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %152 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %153 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %154 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !23
  %155 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !23
  %156 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !23
  %157 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !23
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !55
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !55
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !55
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !55
  %162 = insertelement <4 x i32> poison, i32 %124, i64 0, !dbg !44
  %163 = insertelement <4 x i32> %162, i32 %131, i64 1, !dbg !44
  %164 = insertelement <4 x i32> %163, i32 %138, i64 2, !dbg !44
  %165 = insertelement <4 x i32> %164, i32 %145, i64 3, !dbg !44
  %166 = bitcast <4 x i32> %165 to <4 x float>, !dbg !44
  %167 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !40
  %168 = insertelement <4 x i32> %167, i32 %132, i64 1, !dbg !40
  %169 = insertelement <4 x i32> %168, i32 %139, i64 2, !dbg !40
  %170 = insertelement <4 x i32> %169, i32 %146, i64 3, !dbg !40
  %171 = bitcast <4 x i32> %170 to <4 x float>, !dbg !40
  %172 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !30
  %173 = insertelement <4 x i32> %172, i32 %129, i64 1, !dbg !30
  %174 = insertelement <4 x i32> %173, i32 %136, i64 2, !dbg !30
  %175 = insertelement <4 x i32> %174, i32 %143, i64 3, !dbg !30
  %176 = bitcast <4 x i32> %175 to <4 x float>, !dbg !30
  %177 = insertelement <4 x i32> poison, i32 %123, i64 0, !dbg !32
  %178 = insertelement <4 x i32> %177, i32 %130, i64 1, !dbg !32
  %179 = insertelement <4 x i32> %178, i32 %137, i64 2, !dbg !32
  %180 = insertelement <4 x i32> %179, i32 %144, i64 3, !dbg !32
  %181 = bitcast <4 x i32> %180 to <4 x float>, !dbg !32
  %182 = fadd <4 x float> %176, %181, !dbg !56
  %183 = fcmp ogt <4 x float> %166, %171, !dbg !57
  %184 = fcmp uno <4 x float> %166, zeroinitializer, !dbg !61
  %185 = or <4 x i1> %183, %184, !dbg !62
  %.v = select <4 x i1> %185, <4 x i32> %165, <4 x i32> %170, !dbg !63
  %186 = bitcast <4 x i32> %.v to <4 x float>, !dbg !63
  %187 = insertelement <4 x i32> poison, i32 %126, i64 0, !dbg !48
  %188 = insertelement <4 x i32> %187, i32 %133, i64 1, !dbg !48
  %189 = insertelement <4 x i32> %188, i32 %140, i64 2, !dbg !48
  %190 = insertelement <4 x i32> %189, i32 %147, i64 3, !dbg !48
  %191 = bitcast <4 x i32> %190 to <4 x float>, !dbg !48
  %192 = fcmp olt <4 x float> %186, %191, !dbg !64
  %193 = fcmp uno <4 x float> %191, zeroinitializer, !dbg !66
  %194 = or <4 x i1> %193, %192, !dbg !67
  %.v16 = select <4 x i1> %194, <4 x i32> %190, <4 x i32> %.v, !dbg !68
  %195 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !68
  %196 = insertelement <4 x i32> poison, i32 %127, i64 0, !dbg !52
  %197 = insertelement <4 x i32> %196, i32 %134, i64 1, !dbg !52
  %198 = insertelement <4 x i32> %197, i32 %141, i64 2, !dbg !52
  %199 = insertelement <4 x i32> %198, i32 %148, i64 3, !dbg !52
  %200 = bitcast <4 x i32> %199 to <4 x float>, !dbg !52
  %201 = fcmp olt <4 x float> %195, %200, !dbg !69
  %202 = fcmp uno <4 x float> %200, zeroinitializer, !dbg !71
  %203 = or <4 x i1> %202, %201, !dbg !72
  %.v17 = select <4 x i1> %203, <4 x i32> %199, <4 x i32> %.v16, !dbg !73
  %204 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !73
  %205 = insertelement <4 x i1> poison, i1 %38, i64 0, !dbg !74
  %206 = shufflevector <4 x i1> %205, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !74
  %207 = select <4 x i1> %206, <4 x float> %182, <4 x float> %204, !dbg !74
  %208 = insertelement <4 x i32> poison, i32 %128, i64 0, !dbg !19
  %209 = insertelement <4 x i32> %208, i32 %135, i64 1, !dbg !19
  %210 = insertelement <4 x i32> %209, i32 %142, i64 2, !dbg !19
  %211 = insertelement <4 x i32> %210, i32 %149, i64 3, !dbg !19
  %212 = bitcast <4 x i32> %211 to <4 x float>, !dbg !19
  %213 = fsub <4 x float> %207, %212, !dbg !75
  %214 = insertelement <4 x i32> poison, i32 %150, i64 0, !dbg !25
  %215 = insertelement <4 x i32> %214, i32 %151, i64 1, !dbg !25
  %216 = insertelement <4 x i32> %215, i32 %152, i64 2, !dbg !25
  %217 = insertelement <4 x i32> %216, i32 %153, i64 3, !dbg !25
  %218 = bitcast <4 x i32> %217 to <4 x float>, !dbg !25
  %219 = insertelement <4 x i32> poison, i32 %154, i64 0, !dbg !23
  %220 = insertelement <4 x i32> %219, i32 %155, i64 1, !dbg !23
  %221 = insertelement <4 x i32> %220, i32 %156, i64 2, !dbg !23
  %222 = insertelement <4 x i32> %221, i32 %157, i64 3, !dbg !23
  %223 = bitcast <4 x i32> %222 to <4 x float>, !dbg !23
  %224 = insertelement <4 x float> poison, float %161, i64 0, !dbg !76
  %225 = insertelement <4 x float> %224, float %160, i64 1, !dbg !76
  %226 = insertelement <4 x float> %225, float %159, i64 2, !dbg !76
  %227 = insertelement <4 x float> %226, float %158, i64 3, !dbg !76
  %228 = fmul <4 x float> %213, %227, !dbg !76
  %229 = fmul <4 x float> %228, %223, !dbg !77
  %230 = fadd <4 x float> %229, %218, !dbg !78
  %231 = fcmp olt <4 x float> %230, zeroinitializer, !dbg !79
  %232 = extractelement <4 x i1> %231, i64 3, !dbg !81
  %233 = extractelement <4 x i1> %231, i64 2, !dbg !81
  %234 = extractelement <4 x i1> %231, i64 1, !dbg !81
  %235 = extractelement <4 x i1> %231, i64 0, !dbg !81
  %236 = sext i32 %16 to i64, !dbg !82
  %237 = getelementptr float, ptr addrspace(1) %7, i64 %236, !dbg !82
  %bc = bitcast <4 x float> %207 to <4 x i32>, !dbg !83
  %238 = extractelement <4 x i32> %bc, i64 3, !dbg !83
  %bc18 = bitcast <4 x float> %207 to <4 x i32>, !dbg !83
  %239 = extractelement <4 x i32> %bc18, i64 2, !dbg !83
  %bc19 = bitcast <4 x float> %207 to <4 x i32>, !dbg !83
  %240 = extractelement <4 x i32> %bc19, i64 1, !dbg !83
  %bc20 = bitcast <4 x float> %207 to <4 x i32>, !dbg !83
  %241 = extractelement <4 x i32> %bc20, i64 0, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %238, i32 %239, i32 %240, i32 %241, ptr addrspace(1) %237, i1 true) #3, !dbg !83
  %242 = getelementptr float, ptr addrspace(1) %8, i64 %236, !dbg !84
  %bc21 = bitcast <4 x float> %230 to <4 x i32>, !dbg !85
  %243 = extractelement <4 x i32> %bc21, i64 3, !dbg !85
  %244 = select i1 %232, i32 0, i32 %243, !dbg !81
  %bc22 = bitcast <4 x float> %230 to <4 x i32>, !dbg !85
  %245 = extractelement <4 x i32> %bc22, i64 2, !dbg !85
  %246 = select i1 %233, i32 0, i32 %245, !dbg !81
  %bc23 = bitcast <4 x float> %230 to <4 x i32>, !dbg !85
  %247 = extractelement <4 x i32> %bc23, i64 1, !dbg !85
  %248 = select i1 %234, i32 0, i32 %247, !dbg !81
  %bc24 = bitcast <4 x float> %230 to <4 x i32>, !dbg !85
  %249 = extractelement <4 x i32> %bc24, i64 0, !dbg !85
  %250 = select i1 %235, i32 0, i32 %249, !dbg !81
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %244, i32 %246, i32 %248, i32 %250, ptr addrspace(1) %242, i1 true) #3, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clbcvymapir4rzwincaud27jzcttokjndqssyzclmnxucv3gfds4.py", directory: "inductor_cache/lb")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 27, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 31, scope: !7)
!19 = !DILocation(line: 29, column: 36, scope: !7)
!20 = !DILocation(line: 30, column: 31, scope: !7)
!21 = !DILocation(line: 30, column: 36, scope: !7)
!22 = !DILocation(line: 31, column: 31, scope: !7)
!23 = !DILocation(line: 31, column: 36, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 38, column: 33, scope: !7)
!28 = !DILocation(line: 38, column: 39, scope: !7)
!29 = !DILocation(line: 38, column: 30, scope: !7)
!30 = !DILocation(line: 38, column: 45, scope: !7)
!31 = !DILocation(line: 39, column: 30, scope: !7)
!32 = !DILocation(line: 39, column: 35, scope: !7)
!33 = !DILocation(line: 43, column: 20, scope: !7)
!34 = !DILocation(line: 46, column: 34, scope: !7)
!35 = !DILocation(line: 46, column: 44, scope: !7)
!36 = !DILocation(line: 46, column: 58, scope: !7)
!37 = !DILocation(line: 46, column: 39, scope: !7)
!38 = !DILocation(line: 46, column: 50, scope: !7)
!39 = !DILocation(line: 46, column: 31, scope: !7)
!40 = !DILocation(line: 46, column: 64, scope: !7)
!41 = !DILocation(line: 47, column: 44, scope: !7)
!42 = !DILocation(line: 47, column: 55, scope: !7)
!43 = !DILocation(line: 47, column: 31, scope: !7)
!44 = !DILocation(line: 47, column: 69, scope: !7)
!45 = !DILocation(line: 49, column: 45, scope: !7)
!46 = !DILocation(line: 49, column: 56, scope: !7)
!47 = !DILocation(line: 49, column: 31, scope: !7)
!48 = !DILocation(line: 49, column: 70, scope: !7)
!49 = !DILocation(line: 51, column: 45, scope: !7)
!50 = !DILocation(line: 51, column: 56, scope: !7)
!51 = !DILocation(line: 51, column: 31, scope: !7)
!52 = !DILocation(line: 51, column: 70, scope: !7)
!53 = !DILocation(line: 58, column: 20, scope: !7)
!54 = !DILocation(line: 59, column: 27, scope: !7)
!55 = !DILocation(line: 61, column: 20, scope: !7)
!56 = !DILocation(line: 40, column: 18, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !60)
!58 = distinct !DILexicalBlockFile(scope: !7, file: !59, discriminator: 0)
!59 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!60 = !DILocation(line: 48, column: 42, scope: !7)
!61 = !DILocation(line: 120, column: 21, scope: !58, inlinedAt: !60)
!62 = !DILocation(line: 120, column: 16, scope: !58, inlinedAt: !60)
!63 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !60)
!64 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !65)
!65 = !DILocation(line: 50, column: 42, scope: !7)
!66 = !DILocation(line: 120, column: 21, scope: !58, inlinedAt: !65)
!67 = !DILocation(line: 120, column: 16, scope: !58, inlinedAt: !65)
!68 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !65)
!69 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !70)
!70 = !DILocation(line: 52, column: 42, scope: !7)
!71 = !DILocation(line: 120, column: 21, scope: !58, inlinedAt: !70)
!72 = !DILocation(line: 120, column: 16, scope: !58, inlinedAt: !70)
!73 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !70)
!74 = !DILocation(line: 0, scope: !7)
!75 = !DILocation(line: 56, column: 20, scope: !7)
!76 = !DILocation(line: 64, column: 20, scope: !7)
!77 = !DILocation(line: 65, column: 20, scope: !7)
!78 = !DILocation(line: 66, column: 20, scope: !7)
!79 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !80)
!80 = !DILocation(line: 68, column: 42, scope: !7)
!81 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !80)
!82 = !DILocation(line: 69, column: 25, scope: !7)
!83 = !DILocation(line: 69, column: 37, scope: !7)
!84 = !DILocation(line: 70, column: 25, scope: !7)
!85 = !DILocation(line: 70, column: 37, scope: !7)
!86 = !DILocation(line: 70, column: 4, scope: !7)
