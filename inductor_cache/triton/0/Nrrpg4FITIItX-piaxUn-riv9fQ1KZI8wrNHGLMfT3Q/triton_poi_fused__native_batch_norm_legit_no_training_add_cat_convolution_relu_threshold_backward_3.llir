; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_convolution_relu_threshold_backward_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, i32 %20) local_unnamed_addr !dbg !7 {
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %23 = shl i32 %22, 7, !dbg !11
  %24 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %25 = and i32 %24, 127, !dbg !12
  %26 = or disjoint i32 %23, %25, !dbg !13
  %27 = icmp slt i32 %26, 384, !dbg !14
  %.frozen = freeze i32 %26, !dbg !15
  %28 = sdiv i32 %.frozen, 16, !dbg !15
  %29 = srem i32 %28, 6, !dbg !16
  %30 = mul i32 %28, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %30, !dbg !17
  %31 = sdiv i32 %26, 96, !dbg !18
  %32 = sext i32 %26 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %27) #3, !dbg !20
  %35 = sext i32 %29 to i64, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %27) #3, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %10, i64 %35, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %27) #3, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %11, i64 %35, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %27) #3, !dbg !26
  %42 = bitcast i32 %41 to float, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %12, i64 %35, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %27) #3, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %13, i64 %35, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %27) #3, !dbg !30
  %47 = getelementptr float, ptr addrspace(1) %14, i64 %35, !dbg !31
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %27) #3, !dbg !32
  %49 = getelementptr float, ptr addrspace(1) %15, i64 %35, !dbg !33
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %27) #3, !dbg !34
  %51 = bitcast i32 %50 to float, !dbg !34
  %52 = getelementptr float, ptr addrspace(1) %16, i64 %35, !dbg !35
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %27) #3, !dbg !36
  %54 = getelementptr float, ptr addrspace(1) %17, i64 %35, !dbg !37
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %27) #3, !dbg !38
  %56 = icmp slt i32 %29, 1, !dbg !39
  %57 = shl nsw i32 %31, 4, !dbg !40
  %58 = add nsw i32 %57, %.decomposed, !dbg !41
  %59 = sext i32 %58 to i64, !dbg !42
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !42
  %61 = and i1 %27, %56, !dbg !43
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %61, i32 0, i1 %61) #3, !dbg !44
  %63 = add nsw i32 %29, -1, !dbg !45
  %64 = icmp ult i32 %63, 2, !dbg !45
  %65 = shl nsw i32 %29, 4, !dbg !46
  %66 = shl nsw i32 %31, 5, !dbg !47
  %67 = add nsw i32 %.decomposed, -16, !dbg !46
  %68 = add nsw i32 %67, %66, !dbg !48
  %69 = add nsw i32 %68, %65, !dbg !49
  %70 = sext i32 %69 to i64, !dbg !50
  %71 = getelementptr float, ptr addrspace(1) %4, i64 %70, !dbg !50
  %72 = and i1 %27, %64, !dbg !51
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %72, i32 0, i1 %72) #3, !dbg !52
  %74 = icmp sgt i32 %29, 2, !dbg !53
  %75 = add nsw i32 %29, -3, !dbg !54
  %76 = shl nsw i32 %75, 4, !dbg !55
  %77 = mul nsw i32 %31, 48, !dbg !56
  %78 = add nsw i32 %77, %.decomposed, !dbg !57
  %79 = add nsw i32 %78, %76, !dbg !58
  %80 = sext i32 %79 to i64, !dbg !59
  %81 = getelementptr float, ptr addrspace(1) %5, i64 %80, !dbg !59
  %82 = and i1 %27, %74, !dbg !60
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %82, i32 0, i1 %82) #3, !dbg !61
  %84 = sext i32 %75 to i64, !dbg !62
  %85 = getelementptr float, ptr addrspace(1) %6, i64 %84, !dbg !62
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %82, i32 0, i1 %82) #3, !dbg !63
  %87 = getelementptr float, ptr addrspace(1) %7, i64 %84, !dbg !64
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %82, i32 0, i1 %82) #3, !dbg !65
  %89 = bitcast i32 %88 to float, !dbg !65
  %90 = fadd float %89, 0x3EE4F8B580000000, !dbg !66
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i = icmp eq i32 %91, 0, !dbg !67
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i = icmp eq i32 %92, 0, !dbg !67
  br i1 %.not.i, label %98, label %93, !dbg !67

93:                                               ; preds = %21
  br i1 %.not1.i, label %96, label %94, !dbg !67

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

98:                                               ; preds = %21
  br i1 %.not1.i, label %101, label %99, !dbg !67

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

__nv_sqrtf.exit:                                  ; preds = %94, %96, %99, %101
  %.0.i = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !67
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !68
  %104 = getelementptr float, ptr addrspace(1) %8, i64 %84, !dbg !69
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %82, i32 0, i1 %82) #3, !dbg !70
  %106 = getelementptr float, ptr addrspace(1) %9, i64 %84, !dbg !71
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %82, i32 0, i1 %82) #3, !dbg !72
  %108 = fadd float %42, 0x3EE4F8B580000000, !dbg !73
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i1 = icmp eq i32 %109, 0, !dbg !74
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i4 = icmp eq i32 %110, 0, !dbg !74
  br i1 %.not.i1, label %116, label %111, !dbg !74

111:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %114, label %112, !dbg !74

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %108) #3, !dbg !74
  br label %__nv_sqrtf.exit5, !dbg !74

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %108) #3, !dbg !74
  br label %__nv_sqrtf.exit5, !dbg !74

116:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %119, label %117, !dbg !74

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %108) #3, !dbg !74
  br label %__nv_sqrtf.exit5, !dbg !74

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %108) #3, !dbg !74
  br label %__nv_sqrtf.exit5, !dbg !74

__nv_sqrtf.exit5:                                 ; preds = %112, %114, %117, %119
  %.0.i3 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !74
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !75
  %122 = fadd float %51, 0x3EE4F8B580000000, !dbg !76
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !77
  %.not.i6 = icmp eq i32 %123, 0, !dbg !77
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !77
  %.not1.i9 = icmp eq i32 %124, 0, !dbg !77
  br i1 %.not.i6, label %130, label %125, !dbg !77

125:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %128, label %126, !dbg !77

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #3, !dbg !77
  br label %__nv_sqrtf.exit10, !dbg !77

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #3, !dbg !77
  br label %__nv_sqrtf.exit10, !dbg !77

130:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %133, label %131, !dbg !77

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #3, !dbg !77
  br label %__nv_sqrtf.exit10, !dbg !77

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #3, !dbg !77
  br label %__nv_sqrtf.exit10, !dbg !77

__nv_sqrtf.exit10:                                ; preds = %126, %128, %131, %133
  %.0.i8 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !77
  %135 = bitcast i32 %34 to float, !dbg !20
  %136 = bitcast i32 %37 to float, !dbg !22
  %137 = fadd float %135, %136, !dbg !78
  %138 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !24
  %139 = insertelement <2 x i32> %138, i32 %48, i64 1, !dbg !24
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !24
  %141 = bitcast i32 %62 to float, !dbg !44
  %142 = bitcast i32 %73 to float, !dbg !52
  %143 = bitcast i32 %83 to float, !dbg !61
  %144 = bitcast i32 %86 to float, !dbg !63
  %145 = fsub float %143, %144, !dbg !79
  %146 = fmul float %145, %103, !dbg !80
  %147 = bitcast i32 %105 to float, !dbg !70
  %148 = fmul float %146, %147, !dbg !81
  %149 = bitcast i32 %107 to float, !dbg !72
  %150 = fadd float %148, %149, !dbg !82
  %151 = fcmp olt float %150, 0.000000e+00, !dbg !83
  %152 = select i1 %151, float 0.000000e+00, float %150, !dbg !87
  %153 = select i1 %74, float %152, float 0.000000e+00, !dbg !88
  %154 = select i1 %64, float %142, float %153, !dbg !89
  %155 = select i1 %56, float %141, float %154, !dbg !90
  %156 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !28
  %157 = insertelement <2 x i32> %156, i32 %53, i64 1, !dbg !28
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !28
  %159 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !30
  %160 = insertelement <2 x i32> %159, i32 %55, i64 1, !dbg !30
  %161 = bitcast <2 x i32> %160 to <2 x float>, !dbg !30
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !91
  %163 = insertelement <2 x float> poison, float %155, i64 0, !dbg !92
  %164 = insertelement <2 x float> %163, float %137, i64 1, !dbg !92
  %165 = fsub <2 x float> %164, %140, !dbg !92
  %166 = insertelement <2 x float> poison, float %121, i64 0, !dbg !93
  %167 = insertelement <2 x float> %166, float %162, i64 1, !dbg !93
  %168 = fmul <2 x float> %165, %167, !dbg !93
  %169 = fmul <2 x float> %168, %158, !dbg !94
  %170 = fadd <2 x float> %169, %161, !dbg !95
  %shift = shufflevector <2 x float> %170, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !96
  %171 = fadd <2 x float> %170, %shift, !dbg !96
  %172 = extractelement <2 x float> %171, i64 0, !dbg !96
  %173 = fcmp olt float %172, 0.000000e+00, !dbg !97
  %174 = select i1 %173, float 0.000000e+00, float %172, !dbg !99
  %175 = fcmp ole float %174, 0.000000e+00, !dbg !100
  %176 = bitcast float %137 to i32, !dbg !101
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %176, ptr addrspace(1) %33, i1 %27) #3, !dbg !101
  %177 = getelementptr float, ptr addrspace(1) %18, i64 %32, !dbg !102
  %178 = bitcast float %155 to i32, !dbg !103
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %178, ptr addrspace(1) %177, i1 %27) #3, !dbg !103
  %179 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !104
  %180 = bitcast float %174 to i32, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %180, ptr addrspace(1) %179, i1 %27) #3, !dbg !105
  %181 = getelementptr i1, ptr addrspace(1) %19, i64 %32, !dbg !106
  %182 = zext i1 %175 to i8, !dbg !107
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %182, ptr addrspace(1) %181, i1 %27) #3, !dbg !107
  ret void, !dbg !108
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm6o26sem6u74v43x46zbgf2vdhdj2sltbmictqe7p6w5vycp5hr.py", directory: "inductor_cache/m6")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_convolution_relu_threshold_backward_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_convolution_relu_threshold_backward_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_cat_convolution_relu_threshold_backward_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_cat_convolution_relu_threshold_backward_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 34, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 32, scope: !7)
!28 = !DILocation(line: 32, column: 37, scope: !7)
!29 = !DILocation(line: 33, column: 32, scope: !7)
!30 = !DILocation(line: 33, column: 37, scope: !7)
!31 = !DILocation(line: 34, column: 32, scope: !7)
!32 = !DILocation(line: 34, column: 37, scope: !7)
!33 = !DILocation(line: 35, column: 32, scope: !7)
!34 = !DILocation(line: 35, column: 37, scope: !7)
!35 = !DILocation(line: 36, column: 32, scope: !7)
!36 = !DILocation(line: 36, column: 37, scope: !7)
!37 = !DILocation(line: 37, column: 32, scope: !7)
!38 = !DILocation(line: 37, column: 37, scope: !7)
!39 = !DILocation(line: 43, column: 18, scope: !7)
!40 = !DILocation(line: 44, column: 38, scope: !7)
!41 = !DILocation(line: 44, column: 35, scope: !7)
!42 = !DILocation(line: 44, column: 30, scope: !7)
!43 = !DILocation(line: 44, column: 50, scope: !7)
!44 = !DILocation(line: 44, column: 43, scope: !7)
!45 = !DILocation(line: 48, column: 19, scope: !7)
!46 = !DILocation(line: 49, column: 40, scope: !7)
!47 = !DILocation(line: 49, column: 56, scope: !7)
!48 = !DILocation(line: 49, column: 36, scope: !7)
!49 = !DILocation(line: 49, column: 53, scope: !7)
!50 = !DILocation(line: 49, column: 31, scope: !7)
!51 = !DILocation(line: 49, column: 69, scope: !7)
!52 = !DILocation(line: 49, column: 61, scope: !7)
!53 = !DILocation(line: 50, column: 20, scope: !7)
!54 = !DILocation(line: 53, column: 47, scope: !7)
!55 = !DILocation(line: 53, column: 40, scope: !7)
!56 = !DILocation(line: 53, column: 56, scope: !7)
!57 = !DILocation(line: 53, column: 36, scope: !7)
!58 = !DILocation(line: 53, column: 53, scope: !7)
!59 = !DILocation(line: 53, column: 31, scope: !7)
!60 = !DILocation(line: 53, column: 69, scope: !7)
!61 = !DILocation(line: 53, column: 61, scope: !7)
!62 = !DILocation(line: 54, column: 31, scope: !7)
!63 = !DILocation(line: 54, column: 43, scope: !7)
!64 = !DILocation(line: 56, column: 31, scope: !7)
!65 = !DILocation(line: 56, column: 43, scope: !7)
!66 = !DILocation(line: 58, column: 20, scope: !7)
!67 = !DILocation(line: 59, column: 27, scope: !7)
!68 = !DILocation(line: 61, column: 20, scope: !7)
!69 = !DILocation(line: 65, column: 31, scope: !7)
!70 = !DILocation(line: 65, column: 43, scope: !7)
!71 = !DILocation(line: 67, column: 31, scope: !7)
!72 = !DILocation(line: 67, column: 43, scope: !7)
!73 = !DILocation(line: 77, column: 20, scope: !7)
!74 = !DILocation(line: 78, column: 27, scope: !7)
!75 = !DILocation(line: 80, column: 20, scope: !7)
!76 = !DILocation(line: 87, column: 20, scope: !7)
!77 = !DILocation(line: 88, column: 27, scope: !7)
!78 = !DILocation(line: 38, column: 18, scope: !7)
!79 = !DILocation(line: 55, column: 20, scope: !7)
!80 = !DILocation(line: 64, column: 20, scope: !7)
!81 = !DILocation(line: 66, column: 20, scope: !7)
!82 = !DILocation(line: 68, column: 20, scope: !7)
!83 = !DILocation(line: 118, column: 15, scope: !84, inlinedAt: !86)
!84 = distinct !DILexicalBlockFile(scope: !7, file: !85, discriminator: 0)
!85 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!86 = !DILocation(line: 70, column: 42, scope: !7)
!87 = !DILocation(line: 121, column: 29, scope: !84, inlinedAt: !86)
!88 = !DILocation(line: 72, column: 35, scope: !7)
!89 = !DILocation(line: 73, column: 35, scope: !7)
!90 = !DILocation(line: 74, column: 33, scope: !7)
!91 = !DILocation(line: 89, column: 20, scope: !7)
!92 = !DILocation(line: 75, column: 20, scope: !7)
!93 = !DILocation(line: 83, column: 20, scope: !7)
!94 = !DILocation(line: 84, column: 20, scope: !7)
!95 = !DILocation(line: 85, column: 20, scope: !7)
!96 = !DILocation(line: 94, column: 20, scope: !7)
!97 = !DILocation(line: 118, column: 15, scope: !84, inlinedAt: !98)
!98 = !DILocation(line: 96, column: 42, scope: !7)
!99 = !DILocation(line: 121, column: 29, scope: !84, inlinedAt: !98)
!100 = !DILocation(line: 98, column: 21, scope: !7)
!101 = !DILocation(line: 99, column: 39, scope: !7)
!102 = !DILocation(line: 100, column: 25, scope: !7)
!103 = !DILocation(line: 100, column: 37, scope: !7)
!104 = !DILocation(line: 101, column: 28, scope: !7)
!105 = !DILocation(line: 101, column: 40, scope: !7)
!106 = !DILocation(line: 102, column: 25, scope: !7)
!107 = !DILocation(line: 102, column: 37, scope: !7)
!108 = !DILocation(line: 102, column: 4, scope: !7)
