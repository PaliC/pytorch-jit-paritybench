; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_mul_native_group_norm_sigmoid_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 510, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = sdiv i32 %13, 256, !dbg !14
  %15 = srem i32 %14, 256, !dbg !15
  %16 = sext i32 %13 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !16
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #1, !dbg !17
  %19 = extractvalue { i32, i32 } %18, 0, !dbg !17
  %20 = extractvalue { i32, i32 } %18, 1, !dbg !17
  %21 = bitcast i32 %19 to float, !dbg !17
  %22 = bitcast i32 %20 to float, !dbg !17
  %23 = sdiv i32 %13, 2048, !dbg !18
  %24 = sext i32 %23 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !20
  %27 = bitcast i32 %26 to float, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !20
  %29 = bitcast i32 %28 to float, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !22
  %32 = bitcast i32 %31 to float, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !22
  %34 = bitcast i32 %33 to float, !dbg !22
  %35 = sext i32 %15 to i64, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !24
  %38 = bitcast i32 %37 to float, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !24
  %40 = bitcast i32 %39 to float, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !26
  %43 = bitcast i32 %42 to float, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !26
  %45 = bitcast i32 %44 to float, !dbg !26
  %46 = fsub float %21, %27, !dbg !27
  %47 = fsub float %22, %29, !dbg !27
  %48 = fmul float %46, %32, !dbg !28
  %49 = fmul float %47, %34, !dbg !28
  %50 = fmul float %48, %38, !dbg !29
  %51 = fmul float %49, %40, !dbg !29
  %52 = fadd float %50, %43, !dbg !30
  %53 = fadd float %51, %45, !dbg !30
  %54 = fsub float 0.000000e+00, %52, !dbg !31
  %55 = fsub float 0.000000e+00, %53, !dbg !31
  %56 = fmul float %54, 0x3FF7154760000000, !dbg !35
  %57 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %56) #1, !dbg !35
  %58 = fmul float %55, 0x3FF7154760000000, !dbg !35
  %59 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %58) #1, !dbg !35
  %60 = fadd float %57, 1.000000e+00, !dbg !36
  %61 = fadd float %59, 1.000000e+00, !dbg !36
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %60) #1, !dbg !37
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %61) #1, !dbg !37
  %64 = fmul float %52, %62, !dbg !38
  %65 = fmul float %53, %63, !dbg !38
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !39
  %67 = bitcast float %64 to i32, !dbg !40
  %68 = bitcast float %65 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %67, i32 %68, ptr addrspace(1) %66, i1 true) #1, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbq3tuif2zrydw42z6cfh52qv6lvtn7w4avdt4mv46yhgggvnszt.py", directory: "inductor_cache/bq")
!4 = !{ptr @triton_poi_fused_mul_native_group_norm_sigmoid_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_native_group_norm_sigmoid_14, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_native_group_norm_sigmoid_14", linkageName: "triton_poi_fused_mul_native_group_norm_sigmoid_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 36, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 40, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 40, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 18, scope: !7)
!28 = !DILocation(line: 33, column: 18, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 47, column: 30, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 36, column: 22, scope: !7)
!35 = !DILocation(line: 47, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 47, column: 20, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 47, column: 16, scope: !32, inlinedAt: !34)
!38 = !DILocation(line: 37, column: 19, scope: !7)
!39 = !DILocation(line: 38, column: 28, scope: !7)
!40 = !DILocation(line: 38, column: 40, scope: !7)
!41 = !DILocation(line: 38, column: 4, scope: !7)
