; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mv_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 128, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 2044, !dbg !12
  %11 = mul i32 %6, 2304, !dbg !13
  %12 = zext nneg i32 %10 to i64, !dbg !14
  %13 = add i32 %10, %11, !dbg !15
  %14 = sext i32 %13 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !16
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !17
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !17
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !17
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !17
  %21 = bitcast i32 %19 to float, !dbg !17
  %22 = bitcast i32 %20 to float, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !18
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !19
  %29 = bitcast i32 %27 to float, !dbg !19
  %30 = bitcast i32 %28 to float, !dbg !19
  %31 = fmul float %21, %29, !dbg !20
  %32 = fmul float %22, %30, !dbg !20
  %33 = fadd float %31, 0.000000e+00, !dbg !21
  %34 = fadd float %32, 0.000000e+00, !dbg !21
  %35 = select i1 %7, float %33, float 0.000000e+00, !dbg !22
  %36 = select i1 %7, float %34, float 0.000000e+00, !dbg !22
  %37 = or disjoint i64 %12, 2048, !dbg !23
  %38 = icmp samesign ult i64 %37, 2304, !dbg !24
  %39 = trunc nuw nsw i64 %37 to i32, !dbg !15
  %40 = add i32 %11, %39, !dbg !15
  %41 = sext i32 %40 to i64, !dbg !16
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !16
  %43 = and i1 %7, %38, !dbg !25
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %43, i32 0, i1 %43, i32 0, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #3, !dbg !17
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !17
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !17
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !17
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !17
  %49 = bitcast i32 %47 to float, !dbg !17
  %50 = bitcast i32 %48 to float, !dbg !17
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !18
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #3, !dbg !19
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !19
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !19
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !19
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !19
  %57 = bitcast i32 %55 to float, !dbg !19
  %58 = bitcast i32 %56 to float, !dbg !19
  %59 = fmul float %49, %57, !dbg !20
  %60 = fmul float %50, %58, !dbg !20
  %61 = fadd float %35, %59, !dbg !21
  %62 = fadd float %36, %60, !dbg !21
  %63 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !17
  %64 = insertelement <2 x i32> %63, i32 %18, i64 1, !dbg !17
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !17
  %66 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !19
  %67 = insertelement <2 x i32> %66, i32 %26, i64 1, !dbg !19
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !19
  %69 = fmul <2 x float> %65, %68, !dbg !20
  %70 = fadd <2 x float> %69, zeroinitializer, !dbg !21
  %71 = insertelement <2 x i1> poison, i1 %7, i64 0, !dbg !22
  %72 = shufflevector <2 x i1> %71, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !22
  %73 = select <2 x i1> %72, <2 x float> %70, <2 x float> zeroinitializer, !dbg !22
  %74 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !17
  %75 = insertelement <2 x i32> %74, i32 %46, i64 1, !dbg !17
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !17
  %77 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !19
  %78 = insertelement <2 x i32> %77, i32 %54, i64 1, !dbg !19
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !19
  %80 = fmul <2 x float> %76, %79, !dbg !20
  %81 = fadd <2 x float> %73, %80, !dbg !21
  %82 = insertelement <2 x i1> poison, i1 %43, i64 0, !dbg !22
  %83 = shufflevector <2 x i1> %82, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !22
  %84 = select <2 x i1> %83, <2 x float> %81, <2 x float> %73, !dbg !22
  %85 = select i1 %43, float %61, float %35, !dbg !22
  %86 = select i1 %43, float %62, float %36, !dbg !22
  %87 = lshr i32 %8, 5, !dbg !12
  %88 = and i32 %8, 31, !dbg !12
  %shift = shufflevector <2 x float> %84, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %89 = fadd <2 x float> %84, %shift, !dbg !26
  %90 = extractelement <2 x float> %89, i64 0, !dbg !26
  %91 = fadd float %85, %90, !dbg !26
  %92 = fadd float %86, %91, !dbg !26
  %93 = bitcast float %92 to i32, !dbg !31
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 16, i32 31), !dbg !31
  %95 = bitcast i32 %94 to float, !dbg !31
  %96 = fadd float %92, %95, !dbg !26
  %97 = bitcast float %96 to i32, !dbg !31
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 8, i32 31), !dbg !31
  %99 = bitcast i32 %98 to float, !dbg !31
  %100 = fadd float %96, %99, !dbg !26
  %101 = bitcast float %100 to i32, !dbg !31
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 4, i32 31), !dbg !31
  %103 = bitcast i32 %102 to float, !dbg !31
  %104 = fadd float %100, %103, !dbg !26
  %105 = bitcast float %104 to i32, !dbg !31
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 2, i32 31), !dbg !31
  %107 = bitcast i32 %106 to float, !dbg !31
  %108 = fadd float %104, %107, !dbg !26
  %109 = bitcast float %108 to i32, !dbg !31
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 1, i32 31), !dbg !31
  %111 = bitcast i32 %110 to float, !dbg !31
  %112 = fadd float %108, %111, !dbg !26
  %113 = icmp eq i32 %88, 0, !dbg !31
  %114 = and i32 %87, 15, !dbg !31
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i32 %114, !dbg !31
  %116 = bitcast float %112 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 %113) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %117 = icmp slt i32 %8, 16, !dbg !31
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !31
  %119 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %118, i1 %117) #3, !dbg !31
  %120 = bitcast i32 %119 to float, !dbg !31
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 8, i32 31), !dbg !31
  %122 = bitcast i32 %121 to float, !dbg !31
  %123 = fadd float %120, %122, !dbg !26
  %124 = bitcast float %123 to i32, !dbg !31
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 4, i32 31), !dbg !31
  %126 = bitcast i32 %125 to float, !dbg !31
  %127 = fadd float %123, %126, !dbg !26
  %128 = bitcast float %127 to i32, !dbg !31
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 2, i32 31), !dbg !31
  %130 = bitcast i32 %129 to float, !dbg !31
  %131 = fadd float %127, %130, !dbg !26
  %132 = bitcast float %131 to i32, !dbg !31
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 1, i32 31), !dbg !31
  %134 = bitcast i32 %133 to float, !dbg !31
  %135 = fadd float %131, %134, !dbg !26
  %136 = and i32 %8, 15, !dbg !31
  %137 = icmp eq i32 %136, 0, !dbg !31
  %138 = and i1 %117, %137, !dbg !31
  %139 = bitcast float %135 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %139, i1 %138) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %140 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !31
  %141 = sext i32 %6 to i64, !dbg !32
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %141, !dbg !32
  %urem = and i32 %8, 511, !dbg !33
  %143 = icmp eq i32 %urem, 0, !dbg !33
  %144 = and i1 %143, %7, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %142, i1 %144) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crrd64qx3v5ckmbyw47cgunrx3r3x7xhzt3jo2u3xsr5g6fxylip.py", directory: "inductor_cache/rr")
!4 = !{ptr @triton_red_fused_mv_12, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mv_12, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mv_12", linkageName: "triton_red_fused_mv_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 44, scope: !7)
!14 = !DILocation(line: 28, column: 36, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 49, scope: !7)
!18 = !DILocation(line: 33, column: 34, scope: !7)
!19 = !DILocation(line: 33, column: 39, scope: !7)
!20 = !DILocation(line: 34, column: 22, scope: !7)
!21 = !DILocation(line: 36, column: 23, scope: !7)
!22 = !DILocation(line: 37, column: 46, scope: !7)
!23 = !DILocation(line: 29, column: 27, scope: !7)
!24 = !DILocation(line: 30, column: 25, scope: !7)
!25 = !DILocation(line: 32, column: 57, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!30 = !DILocation(line: 38, column: 25, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !30)
!32 = !DILocation(line: 39, column: 25, scope: !7)
!33 = !DILocation(line: 39, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 4, scope: !7)
