#loc = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":19:0)
module {
  tt.func public @triton_poi_fused_add_div_index_relu_rsub_sum_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":19:0), %arg2: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":19:0)) attributes {noinline = false} {
    %c12_i64 = arith.constant 12 : i64 loc(#loc1)
    %c8_i64 = arith.constant 8 : i64 loc(#loc1)
    %c0_i64 = arith.constant 0 : i64 loc(#loc1)
    %c4_i64 = arith.constant 4 : i64 loc(#loc1)
    %cst = arith.constant 3.000000e-01 : f32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1xf32> loc(#loc1)
    %cst_1 = arith.constant dense<2.500000e-01> : tensor<1xf32> loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c10_i32 = arith.constant 10 : i32 loc(#loc1)
    %c5_i32 = arith.constant 5 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %0 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc2)
    %1 = tt.load %0 : !tt.ptr<f32> loc(#loc3)
    %2 = tt.addptr %arg2, %c0_i32 : !tt.ptr<i64>, i32 loc(#loc4)
    %3 = tt.load %2 : !tt.ptr<i64> loc(#loc5)
    %4 = tt.addptr %arg1, %c5_i32 : !tt.ptr<f32>, i32 loc(#loc6)
    %5 = tt.load %4 : !tt.ptr<f32> loc(#loc7)
    %6 = tt.addptr %arg2, %c1_i32 : !tt.ptr<i64>, i32 loc(#loc8)
    %7 = tt.load %6 : !tt.ptr<i64> loc(#loc9)
    %8 = tt.addptr %arg1, %c10_i32 : !tt.ptr<f32>, i32 loc(#loc10)
    %9 = tt.load %8 : !tt.ptr<f32> loc(#loc11)
    %10 = tt.addptr %arg2, %c2_i32 : !tt.ptr<i64>, i32 loc(#loc12)
    %11 = tt.load %10 : !tt.ptr<i64> loc(#loc13)
    %12 = tt.addptr %arg1, %c15_i32 : !tt.ptr<f32>, i32 loc(#loc14)
    %13 = tt.load %12 : !tt.ptr<f32> loc(#loc15)
    %14 = tt.addptr %arg2, %c3_i32 : !tt.ptr<i64>, i32 loc(#loc16)
    %15 = tt.load %14 : !tt.ptr<i64> loc(#loc17)
    %16 = arith.subf %cst, %1 : f32 loc(#loc18)
    %17 = tt.splat %16 : f32 -> tensor<1xf32> loc(#loc18)
    %18 = arith.addi %3, %c4_i64 : i64 loc(#loc19)
    %19 = arith.cmpi slt, %3, %c0_i64 : i64 loc(#loc20)
    %20 = arith.select %19, %18, %3 : i64 loc(#loc21)
    %21 = arith.cmpi sge, %20, %c0_i64 : i64 loc(#loc22)
    %22 = arith.cmpi slt, %20, %c4_i64 : i64 loc(#loc23)
    %23 = arith.andi %21, %22 : i1 loc(#loc24)
    %24 = tt.splat %23 : i1 -> tensor<1xi1> loc(#loc24)
    tt.assert %24, "index out of bounds: 0 <= tmp9 < 4" : tensor<1xi1> loc(#loc25)
    %25 = tt.addptr %arg1, %20 : !tt.ptr<f32>, i64 loc(#loc26)
    %26 = tt.splat %25 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>> loc(#loc26)
    %27 = tt.load %26 evictionPolicy = evict_last : tensor<1x!tt.ptr<f32>> loc(#loc27)
    %28 = arith.addf %17, %27 : tensor<1xf32> loc(#loc28)
    %29 = arith.cmpf ogt, %cst_0, %28 : tensor<1xf32> loc(#loc78)
    %30 = arith.select %29, %cst_0, %28 : tensor<1xi1>, tensor<1xf32> loc(#loc79)
    %31 = arith.subf %cst, %5 : f32 loc(#loc32)
    %32 = tt.splat %31 : f32 -> tensor<1xf32> loc(#loc32)
    %33 = arith.addi %7, %c4_i64 : i64 loc(#loc33)
    %34 = arith.cmpi slt, %7, %c0_i64 : i64 loc(#loc34)
    %35 = arith.select %34, %33, %7 : i64 loc(#loc35)
    %36 = arith.cmpi sge, %35, %c0_i64 : i64 loc(#loc36)
    %37 = arith.cmpi slt, %35, %c4_i64 : i64 loc(#loc37)
    %38 = arith.andi %36, %37 : i1 loc(#loc38)
    %39 = tt.splat %38 : i1 -> tensor<1xi1> loc(#loc38)
    tt.assert %39, "index out of bounds: 0 <= tmp22 < 4" : tensor<1xi1> loc(#loc39)
    %40 = arith.addi %35, %c4_i64 : i64 loc(#loc40)
    %41 = tt.addptr %arg1, %40 : !tt.ptr<f32>, i64 loc(#loc41)
    %42 = tt.splat %41 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>> loc(#loc41)
    %43 = tt.load %42 evictionPolicy = evict_last : tensor<1x!tt.ptr<f32>> loc(#loc42)
    %44 = arith.addf %32, %43 : tensor<1xf32> loc(#loc43)
    %45 = arith.cmpf ogt, %cst_0, %44 : tensor<1xf32> loc(#loc80)
    %46 = arith.select %45, %cst_0, %44 : tensor<1xi1>, tensor<1xf32> loc(#loc81)
    %47 = arith.addf %30, %46 : tensor<1xf32> loc(#loc45)
    %48 = arith.subf %cst, %9 : f32 loc(#loc46)
    %49 = tt.splat %48 : f32 -> tensor<1xf32> loc(#loc46)
    %50 = arith.addi %11, %c4_i64 : i64 loc(#loc47)
    %51 = arith.cmpi slt, %11, %c0_i64 : i64 loc(#loc48)
    %52 = arith.select %51, %50, %11 : i64 loc(#loc49)
    %53 = arith.cmpi sge, %52, %c0_i64 : i64 loc(#loc50)
    %54 = arith.cmpi slt, %52, %c4_i64 : i64 loc(#loc51)
    %55 = arith.andi %53, %54 : i1 loc(#loc52)
    %56 = tt.splat %55 : i1 -> tensor<1xi1> loc(#loc52)
    tt.assert %56, "index out of bounds: 0 <= tmp35 < 4" : tensor<1xi1> loc(#loc53)
    %57 = arith.addi %52, %c8_i64 : i64 loc(#loc54)
    %58 = tt.addptr %arg1, %57 : !tt.ptr<f32>, i64 loc(#loc55)
    %59 = tt.splat %58 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>> loc(#loc55)
    %60 = tt.load %59 evictionPolicy = evict_last : tensor<1x!tt.ptr<f32>> loc(#loc56)
    %61 = arith.addf %49, %60 : tensor<1xf32> loc(#loc57)
    %62 = arith.cmpf ogt, %cst_0, %61 : tensor<1xf32> loc(#loc82)
    %63 = arith.select %62, %cst_0, %61 : tensor<1xi1>, tensor<1xf32> loc(#loc83)
    %64 = arith.addf %47, %63 : tensor<1xf32> loc(#loc59)
    %65 = arith.subf %cst, %13 : f32 loc(#loc60)
    %66 = tt.splat %65 : f32 -> tensor<1xf32> loc(#loc60)
    %67 = arith.addi %15, %c4_i64 : i64 loc(#loc61)
    %68 = arith.cmpi slt, %15, %c0_i64 : i64 loc(#loc62)
    %69 = arith.select %68, %67, %15 : i64 loc(#loc63)
    %70 = arith.cmpi sge, %69, %c0_i64 : i64 loc(#loc64)
    %71 = arith.cmpi slt, %69, %c4_i64 : i64 loc(#loc65)
    %72 = arith.andi %70, %71 : i1 loc(#loc66)
    %73 = tt.splat %72 : i1 -> tensor<1xi1> loc(#loc66)
    tt.assert %73, "index out of bounds: 0 <= tmp48 < 4" : tensor<1xi1> loc(#loc67)
    %74 = arith.addi %69, %c12_i64 : i64 loc(#loc68)
    %75 = tt.addptr %arg1, %74 : !tt.ptr<f32>, i64 loc(#loc69)
    %76 = tt.splat %75 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>> loc(#loc69)
    %77 = tt.load %76 evictionPolicy = evict_last : tensor<1x!tt.ptr<f32>> loc(#loc70)
    %78 = arith.addf %66, %77 : tensor<1xf32> loc(#loc71)
    %79 = arith.cmpf ogt, %cst_0, %78 : tensor<1xf32> loc(#loc84)
    %80 = arith.select %79, %cst_0, %78 : tensor<1xi1>, tensor<1xf32> loc(#loc85)
    %81 = arith.addf %64, %80 : tensor<1xf32> loc(#loc73)
    %82 = arith.mulf %81, %cst_1 : tensor<1xf32> loc(#loc74)
    %83 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc75)
    %84 = tt.splat %83 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>> loc(#loc75)
    tt.store %84, %82 : tensor<1x!tt.ptr<f32>> loc(#loc76)
    tt.return loc(#loc77)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":24:30)
#loc3 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":24:19)
#loc4 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":26:30)
#loc5 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":26:19)
#loc6 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":28:31)
#loc7 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":28:20)
#loc8 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":30:31)
#loc9 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":30:20)
#loc10 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":32:31)
#loc11 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":32:20)
#loc12 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":34:31)
#loc13 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":34:20)
#loc14 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":36:31)
#loc15 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":36:20)
#loc16 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":38:31)
#loc17 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":38:20)
#loc18 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":41:18)
#loc19 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":43:18)
#loc20 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":44:18)
#loc21 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":45:32)
#loc22 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":46:27)
#loc23 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":46:43)
#loc24 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":46:36)
#loc25 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":46:47)
#loc26 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":47:31)
#loc27 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":47:38)
#loc28 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":48:19)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc30 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":50:42)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc32 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":51:19)
#loc33 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":52:20)
#loc34 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":53:20)
#loc35 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":54:35)
#loc36 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":55:27)
#loc37 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":55:45)
#loc38 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":55:37)
#loc39 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":55:49)
#loc40 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":56:35)
#loc41 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":56:31)
#loc42 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":56:43)
#loc43 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":57:20)
#loc44 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":58:42)
#loc45 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":59:20)
#loc46 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":60:19)
#loc47 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":61:20)
#loc48 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":62:20)
#loc49 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":63:35)
#loc50 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":64:27)
#loc51 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":64:45)
#loc52 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":64:37)
#loc53 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":64:49)
#loc54 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":65:35)
#loc55 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":65:31)
#loc56 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":65:43)
#loc57 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":66:20)
#loc58 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":67:42)
#loc59 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":68:20)
#loc60 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":69:19)
#loc61 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":70:20)
#loc62 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":71:20)
#loc63 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":72:35)
#loc64 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":73:27)
#loc65 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":73:45)
#loc66 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":73:37)
#loc67 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":73:49)
#loc68 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":74:36)
#loc69 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":74:31)
#loc70 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":74:44)
#loc71 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":75:20)
#loc72 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":76:42)
#loc73 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":77:20)
#loc74 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":79:20)
#loc75 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":80:28)
#loc76 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":80:68)
#loc77 = loc("inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py":80:4)
#loc78 = loc(callsite(#loc29 at #loc30))
#loc79 = loc(callsite(#loc31 at #loc30))
#loc80 = loc(callsite(#loc29 at #loc44))
#loc81 = loc(callsite(#loc31 at #loc44))
#loc82 = loc(callsite(#loc29 at #loc58))
#loc83 = loc(callsite(#loc31 at #loc58))
#loc84 = loc(callsite(#loc29 at #loc72))
#loc85 = loc(callsite(#loc31 at #loc72))
