; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_3 = internal constant [8 x i8] c"unknown\00"
@assertFile_3 = internal constant [74 x i8] c"inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py\00"
@assertMessage_3 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp48 < 4\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py\00"
@assertMessage_2 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp35 < 4\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py\00"
@assertMessage_1 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp22 < 4\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/54/c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp9 < 4\00"

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_add_div_index_relu_rsub_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2) local_unnamed_addr !dbg !11 {
  %4 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #3, !dbg !12
  %5 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %2, i1 true) #3, !dbg !13
  %6 = getelementptr i8, ptr addrspace(1) %1, i64 20, !dbg !14
  %7 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %6, i1 true) #3, !dbg !15
  %8 = getelementptr i8, ptr addrspace(1) %2, i64 8, !dbg !16
  %9 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %8, i1 true) #3, !dbg !17
  %10 = getelementptr i8, ptr addrspace(1) %1, i64 40, !dbg !18
  %11 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %10, i1 true) #3, !dbg !19
  %12 = getelementptr i8, ptr addrspace(1) %2, i64 16, !dbg !20
  %13 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %12, i1 true) #3, !dbg !21
  %14 = getelementptr i8, ptr addrspace(1) %1, i64 60, !dbg !22
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #3, !dbg !23
  %16 = getelementptr i8, ptr addrspace(1) %2, i64 24, !dbg !24
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 true) #3, !dbg !25
  %18 = lshr i64 %5, 61, !dbg !26
  %19 = and i64 %18, 4, !dbg !26
  %20 = add i64 %19, %5, !dbg !26
  %21 = icmp ugt i64 %20, 3, !dbg !27
  br i1 %21, label %22, label %23, !dbg !28

22:                                               ; preds = %3
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 46, ptr nonnull @assertFunc_0, i64 1), !dbg !28
  unreachable, !dbg !28

23:                                               ; preds = %3
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !29
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !30
  %26 = lshr i64 %9, 61, !dbg !31
  %27 = and i64 %26, 4, !dbg !31
  %28 = add i64 %27, %9, !dbg !31
  %29 = icmp ugt i64 %28, 3, !dbg !32
  br i1 %29, label %30, label %31, !dbg !33

30:                                               ; preds = %23
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 55, ptr nonnull @assertFunc_1, i64 1), !dbg !33
  unreachable, !dbg !33

31:                                               ; preds = %23
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %32 = or disjoint i64 %28, 4, !dbg !34
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !35
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !36
  %35 = lshr i64 %13, 61, !dbg !37
  %36 = and i64 %35, 4, !dbg !37
  %37 = add i64 %36, %13, !dbg !37
  %38 = icmp ugt i64 %37, 3, !dbg !38
  br i1 %38, label %39, label %40, !dbg !39

39:                                               ; preds = %31
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 64, ptr nonnull @assertFunc_2, i64 1), !dbg !39
  unreachable, !dbg !39

40:                                               ; preds = %31
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %41 = or disjoint i64 %37, 8, !dbg !40
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !41
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !42
  %44 = lshr i64 %17, 61, !dbg !43
  %45 = and i64 %44, 4, !dbg !43
  %46 = add i64 %45, %17, !dbg !43
  %47 = icmp ugt i64 %46, 3, !dbg !44
  br i1 %47, label %48, label %49, !dbg !45

48:                                               ; preds = %40
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 73, ptr nonnull @assertFunc_3, i64 1), !dbg !45
  unreachable, !dbg !45

49:                                               ; preds = %40
  %50 = bitcast i32 %15 to float, !dbg !23
  %51 = fsub float 0x3FD3333340000000, %50, !dbg !46
  %52 = insertelement <2 x i32> poison, i32 %4, i64 0, !dbg !12
  %53 = insertelement <2 x i32> %52, i32 %7, i64 1, !dbg !12
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !12
  %55 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !30
  %56 = insertelement <2 x i32> %55, i32 %34, i64 1, !dbg !30
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !30
  %58 = fsub <2 x float> splat (float 0x3FD3333340000000), %54, !dbg !47
  %59 = fadd <2 x float> %58, %57, !dbg !48
  %60 = fcmp olt <2 x float> %59, zeroinitializer, !dbg !49
  %61 = select <2 x i1> %60, <2 x float> zeroinitializer, <2 x float> %59, !dbg !53
  %shift = shufflevector <2 x float> %61, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %62 = fadd <2 x float> %61, %shift, !dbg !54
  %63 = extractelement <2 x float> %62, i64 0, !dbg !54
  %64 = bitcast i32 %11 to float, !dbg !19
  %65 = fsub float 0x3FD3333340000000, %64, !dbg !55
  %66 = bitcast i32 %43 to float, !dbg !42
  %67 = fadd float %65, %66, !dbg !56
  %68 = fcmp olt float %67, 0.000000e+00, !dbg !57
  %69 = select i1 %68, float 0.000000e+00, float %67, !dbg !59
  %70 = fadd float %63, %69, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %71 = or disjoint i64 %46, 12, !dbg !61
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !62
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !63
  %74 = bitcast i32 %73 to float, !dbg !63
  %75 = fadd float %51, %74, !dbg !64
  %76 = fcmp olt float %75, 0.000000e+00, !dbg !65
  %77 = select i1 %76, float 0.000000e+00, float %75, !dbg !67
  %78 = fadd float %70, %77, !dbg !68
  %79 = fmul float %78, 2.500000e-01, !dbg !69
  %80 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !70
  %81 = and i32 %80, 31, !dbg !70
  %82 = icmp eq i32 %81, 0, !dbg !70
  %83 = bitcast float %79 to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %83, ptr addrspace(1) %0, i1 %82) #3, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #2

attributes #0 = { noreturn }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5452zcps7efe7b7sip7zkfazlzvoctfab4rg3p3vjkjg3rdpqtl.py", directory: "inductor_cache/54")
!4 = !{ptr @triton_poi_fused_add_div_index_relu_rsub_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_index_relu_rsub_sum_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_add_div_index_relu_rsub_sum_1", linkageName: "triton_poi_fused_add_div_index_relu_rsub_sum_1", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 24, column: 19, scope: !11)
!13 = !DILocation(line: 26, column: 19, scope: !11)
!14 = !DILocation(line: 28, column: 31, scope: !11)
!15 = !DILocation(line: 28, column: 20, scope: !11)
!16 = !DILocation(line: 30, column: 31, scope: !11)
!17 = !DILocation(line: 30, column: 20, scope: !11)
!18 = !DILocation(line: 32, column: 31, scope: !11)
!19 = !DILocation(line: 32, column: 20, scope: !11)
!20 = !DILocation(line: 34, column: 31, scope: !11)
!21 = !DILocation(line: 34, column: 20, scope: !11)
!22 = !DILocation(line: 36, column: 31, scope: !11)
!23 = !DILocation(line: 36, column: 20, scope: !11)
!24 = !DILocation(line: 38, column: 31, scope: !11)
!25 = !DILocation(line: 38, column: 20, scope: !11)
!26 = !DILocation(line: 45, column: 32, scope: !11)
!27 = !DILocation(line: 46, column: 36, scope: !11)
!28 = !DILocation(line: 46, column: 47, scope: !11)
!29 = !DILocation(line: 47, column: 31, scope: !11)
!30 = !DILocation(line: 47, column: 38, scope: !11)
!31 = !DILocation(line: 54, column: 35, scope: !11)
!32 = !DILocation(line: 55, column: 37, scope: !11)
!33 = !DILocation(line: 55, column: 49, scope: !11)
!34 = !DILocation(line: 56, column: 35, scope: !11)
!35 = !DILocation(line: 56, column: 31, scope: !11)
!36 = !DILocation(line: 56, column: 43, scope: !11)
!37 = !DILocation(line: 63, column: 35, scope: !11)
!38 = !DILocation(line: 64, column: 37, scope: !11)
!39 = !DILocation(line: 64, column: 49, scope: !11)
!40 = !DILocation(line: 65, column: 35, scope: !11)
!41 = !DILocation(line: 65, column: 31, scope: !11)
!42 = !DILocation(line: 65, column: 43, scope: !11)
!43 = !DILocation(line: 72, column: 35, scope: !11)
!44 = !DILocation(line: 73, column: 37, scope: !11)
!45 = !DILocation(line: 73, column: 49, scope: !11)
!46 = !DILocation(line: 69, column: 19, scope: !11)
!47 = !DILocation(line: 41, column: 18, scope: !11)
!48 = !DILocation(line: 48, column: 19, scope: !11)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !11, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 50, column: 42, scope: !11)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 59, column: 20, scope: !11)
!55 = !DILocation(line: 60, column: 19, scope: !11)
!56 = !DILocation(line: 66, column: 20, scope: !11)
!57 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !58)
!58 = !DILocation(line: 67, column: 42, scope: !11)
!59 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !58)
!60 = !DILocation(line: 68, column: 20, scope: !11)
!61 = !DILocation(line: 74, column: 36, scope: !11)
!62 = !DILocation(line: 74, column: 31, scope: !11)
!63 = !DILocation(line: 74, column: 44, scope: !11)
!64 = !DILocation(line: 75, column: 20, scope: !11)
!65 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !66)
!66 = !DILocation(line: 76, column: 42, scope: !11)
!67 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !66)
!68 = !DILocation(line: 77, column: 20, scope: !11)
!69 = !DILocation(line: 79, column: 20, scope: !11)
!70 = !DILocation(line: 80, column: 68, scope: !11)
!71 = !DILocation(line: 80, column: 4, scope: !11)
