#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_convolution_replication_pad2d_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<64> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<8> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<7> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<-1> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<100> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<10> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1600> : tensor<128xi32, #blocked> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<128xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<128xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_6 : tensor<128xi32, #blocked> loc(#loc6)
    %6 = arith.remsi %4, %cst_5 : tensor<128xi32, #blocked> loc(#loc7)
    %7 = arith.divsi %4, %cst_5 : tensor<128xi32, #blocked> loc(#loc8)
    %8 = arith.remsi %7, %cst_5 : tensor<128xi32, #blocked> loc(#loc9)
    %9 = arith.divsi %4, %cst_4 : tensor<128xi32, #blocked> loc(#loc10)
    %10 = arith.addi %8, %cst_3 : tensor<128xi32, #blocked> loc(#loc11)
    %11 = arith.cmpi sgt, %10, %cst_2 : tensor<128xi32, #blocked> loc(#loc12)
    %12 = arith.extui %11 : tensor<128xi1, #blocked> to tensor<128xi32, #blocked> loc(#loc13)
    %13 = arith.muli %10, %12 : tensor<128xi32, #blocked> loc(#loc13)
    %14 = arith.cmpi sge, %13, %cst_1 : tensor<128xi32, #blocked> loc(#loc14)
    %15 = arith.extui %14 : tensor<128xi1, #blocked> to tensor<128xi32, #blocked> loc(#loc15)
    %16 = arith.muli %15, %cst_1 : tensor<128xi32, #blocked> loc(#loc15)
    %17 = arith.cmpi slt, %13, %cst_1 : tensor<128xi32, #blocked> loc(#loc16)
    %18 = arith.extui %17 : tensor<128xi1, #blocked> to tensor<128xi32, #blocked> loc(#loc17)
    %19 = arith.muli %13, %18 : tensor<128xi32, #blocked> loc(#loc17)
    %20 = arith.addi %16, %19 : tensor<128xi32, #blocked> loc(#loc18)
    %21 = arith.muli %20, %cst_0 : tensor<128xi32, #blocked> loc(#loc19)
    %22 = arith.muli %9, %cst : tensor<128xi32, #blocked> loc(#loc20)
    %23 = arith.addi %21, %22 : tensor<128xi32, #blocked> loc(#loc21)
    %24 = arith.addi %6, %cst_3 : tensor<128xi32, #blocked> loc(#loc22)
    %25 = arith.cmpi sgt, %24, %cst_2 : tensor<128xi32, #blocked> loc(#loc23)
    %26 = arith.extui %25 : tensor<128xi1, #blocked> to tensor<128xi32, #blocked> loc(#loc24)
    %27 = arith.muli %24, %26 : tensor<128xi32, #blocked> loc(#loc24)
    %28 = arith.cmpi sge, %27, %cst_1 : tensor<128xi32, #blocked> loc(#loc25)
    %29 = arith.extui %28 : tensor<128xi1, #blocked> to tensor<128xi32, #blocked> loc(#loc26)
    %30 = arith.muli %29, %cst_1 : tensor<128xi32, #blocked> loc(#loc26)
    %31 = arith.cmpi slt, %27, %cst_1 : tensor<128xi32, #blocked> loc(#loc27)
    %32 = arith.extui %31 : tensor<128xi1, #blocked> to tensor<128xi32, #blocked> loc(#loc28)
    %33 = arith.muli %27, %32 : tensor<128xi32, #blocked> loc(#loc28)
    %34 = arith.addi %30, %33 : tensor<128xi32, #blocked> loc(#loc29)
    %35 = arith.addi %23, %34 : tensor<128xi32, #blocked> loc(#loc30)
    %36 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc31)
    %37 = tt.addptr %36, %35 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc31)
    %38 = tt.load %37, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc32)
    %39 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc33)
    %40 = tt.addptr %39, %4 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc33)
    tt.store %40, %38, %5 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc34)
    tt.return loc(#loc35)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":21:28)
#loc3 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":21:33)
#loc4 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":22:36)
#loc5 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":22:23)
#loc6 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":23:21)
#loc7 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":24:19)
#loc8 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":25:21)
#loc9 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":25:27)
#loc10 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":26:19)
#loc11 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:86)
#loc12 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:108)
#loc13 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:93)
#loc14 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:49)
#loc15 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:40)
#loc16 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:257)
#loc17 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:187)
#loc18 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:117)
#loc19 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:33)
#loc20 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:267)
#loc21 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:264)
#loc22 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:326)
#loc23 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:348)
#loc24 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:333)
#loc25 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:289)
#loc26 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:280)
#loc27 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:497)
#loc28 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:427)
#loc29 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:357)
#loc30 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:273)
#loc31 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:30)
#loc32 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":28:504)
#loc33 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":29:25)
#loc34 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":29:36)
#loc35 = loc("inductor_cache/wr/cwrwtb4qejsvw6az7yqykvjek73ztwf3oiyyfsc3gzlcdtgdslnu.py":29:4)
