; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_mul_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 510, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = srem i32 %11, 512, !dbg !14
  %13 = sdiv i32 %11, 131072, !dbg !15
  %14 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !16
  %15 = shufflevector <2 x i32> %14, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !16
  %16 = sdiv <2 x i32> %15, <i32 512, i32 8192>, !dbg !16
  %17 = srem <2 x i32> %16, splat (i32 16), !dbg !17
  %18 = mul nsw <2 x i32> %17, <i32 1024, i32 33792>, !dbg !18
  %19 = mul i32 %13, 557568, !dbg !19
  %20 = add i32 %19, %12, !dbg !20
  %21 = extractelement <2 x i32> %18, i64 0, !dbg !21
  %22 = add i32 %20, %21, !dbg !22
  %23 = extractelement <2 x i32> %18, i64 1, !dbg !23
  %24 = add i32 %22, %23, !dbg !24
  %25 = sext i32 %24 to i64, !dbg !25
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !25
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !26
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !26
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !26
  %30 = add i32 %20, 512, !dbg !27
  %31 = add i32 %30, %21, !dbg !28
  %32 = add i32 %31, %23, !dbg !29
  %33 = sext i32 %32 to i64, !dbg !30
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !30
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !31
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !31
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !31
  %38 = add i32 %20, 16896, !dbg !32
  %39 = add i32 %38, %21, !dbg !33
  %40 = add i32 %39, %23, !dbg !34
  %41 = sext i32 %40 to i64, !dbg !35
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !35
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !36
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !36
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !36
  %46 = add i32 %20, 17408, !dbg !37
  %47 = add i32 %46, %21, !dbg !21
  %48 = add i32 %47, %23, !dbg !23
  %49 = sext i32 %48 to i64, !dbg !38
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !38
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !39
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !39
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !39
  %54 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !26
  %55 = insertelement <2 x i32> %54, i32 %29, i64 1, !dbg !26
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !26
  %57 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !31
  %58 = insertelement <2 x i32> %57, i32 %37, i64 1, !dbg !31
  %59 = bitcast <2 x i32> %58 to <2 x float>, !dbg !31
  %60 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !36
  %61 = insertelement <2 x i32> %60, i32 %45, i64 1, !dbg !36
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !36
  %63 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !39
  %64 = insertelement <2 x i32> %63, i32 %53, i64 1, !dbg !39
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !39
  %66 = fcmp ogt <2 x float> %59, %56, !dbg !40
  %67 = fcmp uno <2 x float> %59, zeroinitializer, !dbg !44
  %68 = or <2 x i1> %66, %67, !dbg !45
  %.v = select <2 x i1> %68, <2 x i32> %58, <2 x i32> %55, !dbg !46
  %69 = bitcast <2 x i32> %.v to <2 x float>, !dbg !46
  %70 = fcmp olt <2 x float> %69, %62, !dbg !47
  %71 = fcmp uno <2 x float> %62, zeroinitializer, !dbg !49
  %72 = or <2 x i1> %71, %70, !dbg !50
  %.v1 = select <2 x i1> %72, <2 x i32> %61, <2 x i32> %.v, !dbg !51
  %73 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !51
  %74 = fcmp olt <2 x float> %73, %65, !dbg !52
  %75 = bitcast i32 %52 to float, !dbg !54
  %76 = fcmp uno float %75, 0.000000e+00, !dbg !54
  %77 = bitcast i32 %53 to float, !dbg !54
  %78 = fcmp uno float %77, 0.000000e+00, !dbg !54
  %79 = extractelement <2 x i1> %74, i64 0, !dbg !55
  %80 = or i1 %76, %79, !dbg !55
  %81 = extractelement <2 x i1> %74, i64 1, !dbg !55
  %82 = or i1 %78, %81, !dbg !55
  %83 = extractelement <2 x float> %73, i64 0, !dbg !56
  %84 = select i1 %80, float %75, float %83, !dbg !56
  %85 = extractelement <2 x float> %73, i64 1, !dbg !56
  %86 = select i1 %82, float %77, float %85, !dbg !56
  %87 = zext <2 x i1> %66 to <2 x i8>, !dbg !57
  %88 = select <2 x i1> %70, <2 x i8> splat (i8 2), <2 x i8> %87, !dbg !58
  %89 = select <2 x i1> %74, <2 x i8> splat (i8 3), <2 x i8> %88, !dbg !59
  %90 = fmul float %84, 0x3F847AE140000000, !dbg !60
  %91 = fmul float %86, 0x3F847AE140000000, !dbg !60
  %92 = sext i32 %11 to i64, !dbg !61
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !61
  %94 = bitcast float %84 to i32, !dbg !62
  %95 = bitcast float %86 to i32, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %94, i32 %95, ptr addrspace(1) %93, i1 true) #1, !dbg !62
  %96 = getelementptr i8, ptr addrspace(1) %2, i64 %92, !dbg !63
  %97 = bitcast <2 x i8> %89 to i16, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %97, ptr addrspace(1) %96, i1 true) #1, !dbg !64
  %98 = getelementptr float, ptr addrspace(1) %3, i64 %92, !dbg !65
  %99 = bitcast float %90 to i32, !dbg !66
  %100 = bitcast float %91 to i32, !dbg !66
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %99, i32 %100, ptr addrspace(1) %98, i1 true) #1, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp32ay6cq5fwnsrvudvvegohr5p5dnogdzv6ebhepp7vzb2ltbga.py", directory: "inductor_cache/p3")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_mul_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_mul_19, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_mul_19", linkageName: "triton_poi_fused_max_pool2d_with_indices_mul_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 28, scope: !7)
!18 = !DILocation(line: 29, column: 40, scope: !7)
!19 = !DILocation(line: 29, column: 63, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 53, scope: !7)
!22 = !DILocation(line: 29, column: 45, scope: !7)
!23 = !DILocation(line: 32, column: 64, scope: !7)
!24 = !DILocation(line: 29, column: 56, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 68, scope: !7)
!27 = !DILocation(line: 30, column: 41, scope: !7)
!28 = !DILocation(line: 30, column: 51, scope: !7)
!29 = !DILocation(line: 30, column: 62, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 74, scope: !7)
!32 = !DILocation(line: 31, column: 43, scope: !7)
!33 = !DILocation(line: 31, column: 53, scope: !7)
!34 = !DILocation(line: 31, column: 64, scope: !7)
!35 = !DILocation(line: 31, column: 30, scope: !7)
!36 = !DILocation(line: 31, column: 76, scope: !7)
!37 = !DILocation(line: 32, column: 43, scope: !7)
!38 = !DILocation(line: 32, column: 30, scope: !7)
!39 = !DILocation(line: 32, column: 76, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 33, column: 40, scope: !7)
!44 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !48)
!48 = !DILocation(line: 34, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !48)
!50 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !48)
!51 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !48)
!52 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !53)
!53 = !DILocation(line: 35, column: 40, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !53)
!56 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !53)
!57 = !DILocation(line: 39, column: 33, scope: !7)
!58 = !DILocation(line: 42, column: 35, scope: !7)
!59 = !DILocation(line: 45, column: 35, scope: !7)
!60 = !DILocation(line: 47, column: 19, scope: !7)
!61 = !DILocation(line: 48, column: 25, scope: !7)
!62 = !DILocation(line: 48, column: 36, scope: !7)
!63 = !DILocation(line: 49, column: 25, scope: !7)
!64 = !DILocation(line: 49, column: 37, scope: !7)
!65 = !DILocation(line: 50, column: 25, scope: !7)
!66 = !DILocation(line: 50, column: 37, scope: !7)
!67 = !DILocation(line: 50, column: 4, scope: !7)
