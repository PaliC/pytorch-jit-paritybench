; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_clone_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = icmp slt i32 %13, 51200, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %18 = sdiv i32 %.frozen, 5, !dbg !15
  %19 = mul i32 %18, 5, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %.frozen16 = freeze i32 %14, !dbg !15
  %20 = sdiv i32 %.frozen16, 5, !dbg !15
  %21 = mul i32 %20, 5, !dbg !16
  %.decomposed17 = sub i32 %.frozen16, %21, !dbg !16
  %.frozen18 = freeze i32 %15, !dbg !15
  %22 = sdiv i32 %.frozen18, 5, !dbg !15
  %23 = mul i32 %22, 5, !dbg !16
  %.decomposed19 = sub i32 %.frozen18, %23, !dbg !16
  %.frozen20 = freeze i32 %16, !dbg !15
  %24 = sdiv i32 %.frozen20, 5, !dbg !15
  %25 = mul i32 %24, 5, !dbg !16
  %.decomposed21 = sub i32 %.frozen20, %25, !dbg !16
  %26 = srem i32 %18, 5, !dbg !17
  %27 = srem i32 %20, 5, !dbg !17
  %28 = srem i32 %22, 5, !dbg !17
  %29 = srem i32 %24, 5, !dbg !17
  %30 = sdiv i32 %13, 25, !dbg !18
  %31 = sdiv i32 %14, 25, !dbg !18
  %32 = sdiv i32 %15, 25, !dbg !18
  %33 = sdiv i32 %16, 25, !dbg !18
  %34 = srem i32 %30, 512, !dbg !19
  %35 = srem i32 %31, 512, !dbg !19
  %36 = srem i32 %32, 512, !dbg !19
  %37 = srem i32 %33, 512, !dbg !19
  %38 = add nsw i32 %.decomposed, 8, !dbg !20
  %39 = add nsw i32 %.decomposed17, 8, !dbg !20
  %40 = add nsw i32 %.decomposed19, 8, !dbg !20
  %41 = add nsw i32 %.decomposed21, 8, !dbg !20
  %42 = mul nsw i32 %26, 7, !dbg !21
  %43 = mul nsw i32 %27, 7, !dbg !21
  %44 = mul nsw i32 %28, 7, !dbg !21
  %45 = mul nsw i32 %29, 7, !dbg !21
  %46 = mul i32 %30, 49, !dbg !22
  %47 = mul i32 %31, 49, !dbg !22
  %48 = mul i32 %32, 49, !dbg !22
  %49 = mul i32 %33, 49, !dbg !22
  %50 = add i32 %38, %46, !dbg !23
  %51 = add i32 %50, %42, !dbg !24
  %52 = add i32 %39, %47, !dbg !23
  %53 = add i32 %52, %43, !dbg !24
  %54 = add i32 %40, %48, !dbg !23
  %55 = add i32 %54, %44, !dbg !24
  %56 = add i32 %41, %49, !dbg !23
  %57 = add i32 %56, %45, !dbg !24
  %58 = sext i32 %51 to i64, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !25
  %60 = sext i32 %53 to i64, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !25
  %62 = sext i32 %55 to i64, !dbg !25
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !25
  %64 = sext i32 %57 to i64, !dbg !25
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %17) #3, !dbg !26
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %17) #3, !dbg !26
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %17) #3, !dbg !26
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %17) #3, !dbg !26
  %70 = sext i32 %34 to i64, !dbg !27
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !27
  %72 = sext i32 %35 to i64, !dbg !27
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !27
  %74 = sext i32 %36 to i64, !dbg !27
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !27
  %76 = sext i32 %37 to i64, !dbg !27
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !27
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %17) #3, !dbg !28
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %17) #3, !dbg !28
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %17) #3, !dbg !28
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %17) #3, !dbg !28
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !29
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %72, !dbg !29
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !29
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %76, !dbg !29
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %17) #3, !dbg !30
  %87 = bitcast i32 %86 to float, !dbg !30
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %17) #3, !dbg !30
  %89 = bitcast i32 %88 to float, !dbg !30
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %17) #3, !dbg !30
  %91 = bitcast i32 %90 to float, !dbg !30
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %17) #3, !dbg !30
  %93 = bitcast i32 %92 to float, !dbg !30
  %94 = getelementptr float, ptr addrspace(1) %3, i64 %70, !dbg !31
  %95 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !31
  %96 = getelementptr float, ptr addrspace(1) %3, i64 %74, !dbg !31
  %97 = getelementptr float, ptr addrspace(1) %3, i64 %76, !dbg !31
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %17) #3, !dbg !32
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %17) #3, !dbg !32
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %17) #3, !dbg !32
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %17) #3, !dbg !32
  %102 = getelementptr float, ptr addrspace(1) %4, i64 %70, !dbg !33
  %103 = getelementptr float, ptr addrspace(1) %4, i64 %72, !dbg !33
  %104 = getelementptr float, ptr addrspace(1) %4, i64 %74, !dbg !33
  %105 = getelementptr float, ptr addrspace(1) %4, i64 %76, !dbg !33
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %17) #3, !dbg !34
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %17) #3, !dbg !34
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %17) #3, !dbg !34
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %17) #3, !dbg !34
  %110 = fadd float %87, 0x3EE4F8B580000000, !dbg !35
  %111 = fadd float %89, 0x3EE4F8B580000000, !dbg !35
  %112 = fadd float %91, 0x3EE4F8B580000000, !dbg !35
  %113 = fadd float %93, 0x3EE4F8B580000000, !dbg !35
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %114, 0, !dbg !36
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %115, 0, !dbg !36
  br i1 %.not.i, label %121, label %116, !dbg !36

116:                                              ; preds = %7
  br i1 %.not1.i, label %119, label %117, !dbg !36

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

121:                                              ; preds = %7
  br i1 %.not1.i, label %124, label %122, !dbg !36

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %117, %119, %122, %124
  %.0.i = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !36
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %126, 0, !dbg !36
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %127, 0, !dbg !36
  br i1 %.not.i1, label %133, label %128, !dbg !36

128:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %131, label %129, !dbg !36

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %111) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %111) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

133:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %136, label %134, !dbg !36

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %111) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %111) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %129, %131, %134, %136
  %.0.i3 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !36
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i6 = icmp eq i32 %138, 0, !dbg !36
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i9 = icmp eq i32 %139, 0, !dbg !36
  br i1 %.not.i6, label %145, label %140, !dbg !36

140:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %143, label %141, !dbg !36

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

145:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %148, label %146, !dbg !36

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

__nv_sqrtf.exit10:                                ; preds = %141, %143, %146, %148
  %.0.i8 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !36
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i11 = icmp eq i32 %150, 0, !dbg !36
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i14 = icmp eq i32 %151, 0, !dbg !36
  br i1 %.not.i11, label %157, label %152, !dbg !36

152:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %155, label %153, !dbg !36

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

157:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %160, label %158, !dbg !36

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

__nv_sqrtf.exit15:                                ; preds = %153, %155, %158, %160
  %.0.i13 = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !36
  %162 = bitcast i32 %69 to float, !dbg !26
  %163 = bitcast i32 %81 to float, !dbg !28
  %164 = fsub float %162, %163, !dbg !37
  %165 = bitcast i32 %68 to float, !dbg !26
  %166 = bitcast i32 %80 to float, !dbg !28
  %167 = fsub float %165, %166, !dbg !37
  %168 = bitcast i32 %67 to float, !dbg !26
  %169 = bitcast i32 %79 to float, !dbg !28
  %170 = fsub float %168, %169, !dbg !37
  %171 = bitcast i32 %66 to float, !dbg !26
  %172 = bitcast i32 %78 to float, !dbg !28
  %173 = fsub float %171, %172, !dbg !37
  %174 = bitcast i32 %109 to float, !dbg !34
  %175 = bitcast i32 %108 to float, !dbg !34
  %176 = bitcast i32 %107 to float, !dbg !34
  %177 = bitcast i32 %106 to float, !dbg !34
  %178 = bitcast i32 %101 to float, !dbg !32
  %179 = bitcast i32 %100 to float, !dbg !32
  %180 = bitcast i32 %99 to float, !dbg !32
  %181 = bitcast i32 %98 to float, !dbg !32
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !38
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !38
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !38
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !38
  %186 = fmul float %173, %182, !dbg !39
  %187 = fmul float %170, %183, !dbg !39
  %188 = fmul float %167, %184, !dbg !39
  %189 = fmul float %164, %185, !dbg !39
  %190 = fmul float %186, %181, !dbg !40
  %191 = fmul float %187, %180, !dbg !40
  %192 = fmul float %188, %179, !dbg !40
  %193 = fmul float %189, %178, !dbg !40
  %194 = fadd float %190, %177, !dbg !41
  %195 = fadd float %191, %176, !dbg !41
  %196 = fadd float %192, %175, !dbg !41
  %197 = fadd float %193, %174, !dbg !41
  %198 = sext i32 %13 to i64, !dbg !42
  %199 = getelementptr float, ptr addrspace(1) %5, i64 %198, !dbg !42
  %200 = bitcast float %194 to i32, !dbg !43
  %201 = bitcast float %195 to i32, !dbg !43
  %202 = bitcast float %196 to i32, !dbg !43
  %203 = bitcast float %197 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %200, i32 %201, i32 %202, i32 %203, ptr addrspace(1) %199, i1 %17) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciq6h4g2hloivaxi62ndxcphvafct4dl47i72gyg2yx4q7kr565b.py", directory: "inductor_cache/iq")
!4 = !{ptr @triton_poi_fused_clone_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_23", linkageName: "triton_poi_fused_clone_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 26, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 27, scope: !7)
!20 = !DILocation(line: 29, column: 34, scope: !7)
!21 = !DILocation(line: 29, column: 41, scope: !7)
!22 = !DILocation(line: 29, column: 49, scope: !7)
!23 = !DILocation(line: 29, column: 39, scope: !7)
!24 = !DILocation(line: 29, column: 46, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 54, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 35, scope: !7)
!29 = !DILocation(line: 31, column: 30, scope: !7)
!30 = !DILocation(line: 31, column: 35, scope: !7)
!31 = !DILocation(line: 32, column: 31, scope: !7)
!32 = !DILocation(line: 32, column: 36, scope: !7)
!33 = !DILocation(line: 33, column: 31, scope: !7)
!34 = !DILocation(line: 33, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 26, scope: !7)
!37 = !DILocation(line: 34, column: 18, scope: !7)
!38 = !DILocation(line: 39, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 19, scope: !7)
!40 = !DILocation(line: 43, column: 20, scope: !7)
!41 = !DILocation(line: 44, column: 20, scope: !7)
!42 = !DILocation(line: 45, column: 25, scope: !7)
!43 = !DILocation(line: 45, column: 37, scope: !7)
!44 = !DILocation(line: 45, column: 4, scope: !7)
