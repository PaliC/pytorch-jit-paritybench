; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_sigmoid_threshold_backward_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, i32 %26) local_unnamed_addr !dbg !7 {
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %29 = shl i32 %28, 7, !dbg !11
  %30 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %31 = and i32 %30, 127, !dbg !12
  %32 = or disjoint i32 %29, %31, !dbg !13
  %33 = icmp slt i32 %32, 256, !dbg !14
  %34 = sdiv i32 %32, 16, !dbg !15
  %35 = srem i32 %34, 4, !dbg !16
  %36 = sext i32 %32 to i64, !dbg !17
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !17
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %33) #3, !dbg !18
  %39 = bitcast i32 %38 to float, !dbg !18
  %40 = sext i32 %35 to i64, !dbg !19
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !19
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %33) #3, !dbg !20
  %43 = bitcast i32 %42 to float, !dbg !20
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %33) #3, !dbg !22
  %46 = bitcast i32 %45 to float, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !23
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %33) #3, !dbg !24
  %49 = bitcast i32 %48 to float, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !25
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %33) #3, !dbg !26
  %52 = bitcast i32 %51 to float, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !27
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %33) #3, !dbg !28
  %55 = bitcast i32 %54 to float, !dbg !28
  %56 = getelementptr float, ptr addrspace(1) %7, i64 %40, !dbg !29
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %33) #3, !dbg !30
  %58 = bitcast i32 %57 to float, !dbg !30
  %59 = getelementptr float, ptr addrspace(1) %8, i64 %40, !dbg !31
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %33) #3, !dbg !32
  %61 = bitcast i32 %60 to float, !dbg !32
  %62 = getelementptr float, ptr addrspace(1) %9, i64 %40, !dbg !33
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %33) #3, !dbg !34
  %64 = bitcast i32 %63 to float, !dbg !34
  %65 = getelementptr float, ptr addrspace(1) %10, i64 %40, !dbg !35
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %33) #3, !dbg !36
  %67 = bitcast i32 %66 to float, !dbg !36
  %68 = getelementptr float, ptr addrspace(1) %11, i64 %36, !dbg !37
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %33) #3, !dbg !38
  %70 = getelementptr float, ptr addrspace(1) %12, i64 %40, !dbg !39
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %33) #3, !dbg !40
  %72 = getelementptr float, ptr addrspace(1) %13, i64 %40, !dbg !41
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %33) #3, !dbg !42
  %74 = bitcast i32 %73 to float, !dbg !42
  %75 = getelementptr float, ptr addrspace(1) %14, i64 %40, !dbg !43
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %33) #3, !dbg !44
  %77 = getelementptr float, ptr addrspace(1) %15, i64 %40, !dbg !45
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %33) #3, !dbg !46
  %79 = getelementptr float, ptr addrspace(1) %16, i64 %40, !dbg !47
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %33) #3, !dbg !48
  %81 = getelementptr float, ptr addrspace(1) %17, i64 %40, !dbg !49
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %33) #3, !dbg !50
  %83 = bitcast i32 %82 to float, !dbg !50
  %84 = getelementptr float, ptr addrspace(1) %18, i64 %40, !dbg !51
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %33) #3, !dbg !52
  %86 = getelementptr float, ptr addrspace(1) %19, i64 %36, !dbg !53
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %33) #3, !dbg !54
  %88 = getelementptr float, ptr addrspace(1) %20, i64 %40, !dbg !55
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %33) #3, !dbg !56
  %90 = getelementptr float, ptr addrspace(1) %21, i64 %40, !dbg !57
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %33) #3, !dbg !58
  %92 = bitcast i32 %91 to float, !dbg !58
  %93 = getelementptr float, ptr addrspace(1) %22, i64 %40, !dbg !59
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %33) #3, !dbg !60
  %95 = getelementptr float, ptr addrspace(1) %23, i64 %40, !dbg !61
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %33) #3, !dbg !62
  %97 = getelementptr float, ptr addrspace(1) %24, i64 %40, !dbg !63
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %33) #3, !dbg !64
  %99 = fsub float %39, %43, !dbg !65
  %100 = fadd float %46, 0x3EE4F8B580000000, !dbg !66
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i = icmp eq i32 %101, 0, !dbg !67
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i = icmp eq i32 %102, 0, !dbg !67
  br i1 %.not.i, label %108, label %103, !dbg !67

103:                                              ; preds = %27
  br i1 %.not1.i, label %106, label %104, !dbg !67

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

108:                                              ; preds = %27
  br i1 %.not1.i, label %111, label %109, !dbg !67

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

__nv_sqrtf.exit:                                  ; preds = %104, %106, %109, %111
  %.0.i = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !67
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !68
  %114 = fmul float %99, %113, !dbg !69
  %115 = fmul float %114, %49, !dbg !70
  %116 = fadd float %115, %52, !dbg !71
  %117 = fsub float %55, %58, !dbg !72
  %118 = fadd float %61, 0x3EE4F8B580000000, !dbg !73
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i1 = icmp eq i32 %119, 0, !dbg !74
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i4 = icmp eq i32 %120, 0, !dbg !74
  br i1 %.not.i1, label %126, label %121, !dbg !74

121:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %124, label %122, !dbg !74

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #3, !dbg !74
  br label %__nv_sqrtf.exit5, !dbg !74

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #3, !dbg !74
  br label %__nv_sqrtf.exit5, !dbg !74

126:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %129, label %127, !dbg !74

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #3, !dbg !74
  br label %__nv_sqrtf.exit5, !dbg !74

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #3, !dbg !74
  br label %__nv_sqrtf.exit5, !dbg !74

__nv_sqrtf.exit5:                                 ; preds = %122, %124, %127, %129
  %.0.i3 = phi float [ %123, %122 ], [ %125, %124 ], [ %128, %127 ], [ %130, %129 ], !dbg !74
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !75
  %132 = fmul float %117, %131, !dbg !76
  %133 = fmul float %132, %64, !dbg !77
  %134 = fadd float %133, %67, !dbg !78
  %135 = fadd float %116, %134, !dbg !79
  %136 = fadd float %74, 0x3EE4F8B580000000, !dbg !80
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !81
  %.not.i6 = icmp eq i32 %137, 0, !dbg !81
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !81
  %.not1.i9 = icmp eq i32 %138, 0, !dbg !81
  br i1 %.not.i6, label %144, label %139, !dbg !81

139:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %142, label %140, !dbg !81

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %136) #3, !dbg !81
  br label %__nv_sqrtf.exit10, !dbg !81

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %136) #3, !dbg !81
  br label %__nv_sqrtf.exit10, !dbg !81

144:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %147, label %145, !dbg !81

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.f(float %136) #3, !dbg !81
  br label %__nv_sqrtf.exit10, !dbg !81

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.f(float %136) #3, !dbg !81
  br label %__nv_sqrtf.exit10, !dbg !81

__nv_sqrtf.exit10:                                ; preds = %140, %142, %145, %147
  %.0.i8 = phi float [ %141, %140 ], [ %143, %142 ], [ %146, %145 ], [ %148, %147 ], !dbg !81
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !82
  %150 = fsub float 0.000000e+00, %135, !dbg !83
  %151 = fmul float %150, 0x3FF7154760000000, !dbg !87
  %152 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %151) #3, !dbg !87
  %153 = fadd float %152, 1.000000e+00, !dbg !88
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %153) #3, !dbg !89
  %155 = fadd float %83, 0x3EE4F8B580000000, !dbg !90
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !91
  %.not.i11 = icmp eq i32 %156, 0, !dbg !91
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !91
  %.not1.i14 = icmp eq i32 %157, 0, !dbg !91
  br i1 %.not.i11, label %163, label %158, !dbg !91

158:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %161, label %159, !dbg !91

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %155) #3, !dbg !91
  br label %__nv_sqrtf.exit15, !dbg !91

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %155) #3, !dbg !91
  br label %__nv_sqrtf.exit15, !dbg !91

163:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %166, label %164, !dbg !91

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %155) #3, !dbg !91
  br label %__nv_sqrtf.exit15, !dbg !91

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %155) #3, !dbg !91
  br label %__nv_sqrtf.exit15, !dbg !91

__nv_sqrtf.exit15:                                ; preds = %159, %161, %164, %166
  %.0.i13 = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !91
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !92
  %169 = fadd float %92, 0x3EE4F8B580000000, !dbg !93
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !94
  %.not.i16 = icmp eq i32 %170, 0, !dbg !94
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !94
  %.not1.i19 = icmp eq i32 %171, 0, !dbg !94
  br i1 %.not.i16, label %177, label %172, !dbg !94

172:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %175, label %173, !dbg !94

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %169) #3, !dbg !94
  br label %__nv_sqrtf.exit20, !dbg !94

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %169) #3, !dbg !94
  br label %__nv_sqrtf.exit20, !dbg !94

177:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %180, label %178, !dbg !94

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.f(float %169) #3, !dbg !94
  br label %__nv_sqrtf.exit20, !dbg !94

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.f(float %169) #3, !dbg !94
  br label %__nv_sqrtf.exit20, !dbg !94

__nv_sqrtf.exit20:                                ; preds = %173, %175, %178, %180
  %.0.i18 = phi float [ %174, %173 ], [ %176, %175 ], [ %179, %178 ], [ %181, %180 ], !dbg !94
  %182 = bitcast i32 %87 to float, !dbg !54
  %183 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !48
  %184 = insertelement <2 x i32> %183, i32 %89, i64 1, !dbg !48
  %185 = bitcast <2 x i32> %184 to <2 x float>, !dbg !48
  %186 = bitcast i32 %69 to float, !dbg !38
  %187 = bitcast i32 %71 to float, !dbg !40
  %188 = fsub float %186, %187, !dbg !95
  %189 = fmul float %188, %149, !dbg !96
  %190 = bitcast i32 %76 to float, !dbg !44
  %191 = fmul float %189, %190, !dbg !97
  %192 = bitcast i32 %78 to float, !dbg !46
  %193 = fadd float %191, %192, !dbg !98
  %194 = fmul float %154, %193, !dbg !99
  %195 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !52
  %196 = insertelement <2 x i32> %195, i32 %94, i64 1, !dbg !52
  %197 = bitcast <2 x i32> %196 to <2 x float>, !dbg !52
  %198 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !64
  %199 = insertelement <2 x i32> %198, i32 %96, i64 1, !dbg !64
  %200 = bitcast <2 x i32> %199 to <2 x float>, !dbg !64
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !100
  %202 = insertelement <2 x float> poison, float %194, i64 0, !dbg !101
  %203 = insertelement <2 x float> %202, float %182, i64 1, !dbg !101
  %204 = fsub <2 x float> %203, %185, !dbg !101
  %205 = insertelement <2 x float> poison, float %168, i64 0, !dbg !102
  %206 = insertelement <2 x float> %205, float %201, i64 1, !dbg !102
  %207 = fmul <2 x float> %204, %206, !dbg !102
  %208 = fmul <2 x float> %207, %197, !dbg !103
  %209 = fadd <2 x float> %208, %200, !dbg !104
  %shift = shufflevector <2 x float> %209, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !105
  %210 = fadd <2 x float> %209, %shift, !dbg !105
  %211 = extractelement <2 x float> %210, i64 0, !dbg !105
  %212 = fcmp olt float %211, 0.000000e+00, !dbg !106
  %213 = select i1 %212, float 0.000000e+00, float %211, !dbg !110
  %214 = fcmp ole float %213, 0.000000e+00, !dbg !111
  %215 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !112
  %216 = bitcast float %213 to i32, !dbg !113
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %216, ptr addrspace(1) %215, i1 %33) #3, !dbg !113
  %217 = getelementptr i1, ptr addrspace(1) %25, i64 %36, !dbg !114
  %218 = zext i1 %214 to i8, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %218, ptr addrspace(1) %217, i1 %33) #3, !dbg !115
  ret void, !dbg !116
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr76ygrb4ga2pqrhatgrg5v26uu6ggm4inxm3jwuoew7bnu5ebtj.py", directory: "inductor_cache/r7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_sigmoid_threshold_backward_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_sigmoid_threshold_backward_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_sigmoid_threshold_backward_0", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_sigmoid_threshold_backward_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 36, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 32, scope: !7)
!38 = !DILocation(line: 36, column: 37, scope: !7)
!39 = !DILocation(line: 37, column: 32, scope: !7)
!40 = !DILocation(line: 37, column: 37, scope: !7)
!41 = !DILocation(line: 38, column: 32, scope: !7)
!42 = !DILocation(line: 38, column: 37, scope: !7)
!43 = !DILocation(line: 39, column: 32, scope: !7)
!44 = !DILocation(line: 39, column: 37, scope: !7)
!45 = !DILocation(line: 40, column: 32, scope: !7)
!46 = !DILocation(line: 40, column: 37, scope: !7)
!47 = !DILocation(line: 41, column: 32, scope: !7)
!48 = !DILocation(line: 41, column: 37, scope: !7)
!49 = !DILocation(line: 42, column: 32, scope: !7)
!50 = !DILocation(line: 42, column: 37, scope: !7)
!51 = !DILocation(line: 43, column: 32, scope: !7)
!52 = !DILocation(line: 43, column: 37, scope: !7)
!53 = !DILocation(line: 44, column: 32, scope: !7)
!54 = !DILocation(line: 44, column: 37, scope: !7)
!55 = !DILocation(line: 45, column: 32, scope: !7)
!56 = !DILocation(line: 45, column: 37, scope: !7)
!57 = !DILocation(line: 46, column: 32, scope: !7)
!58 = !DILocation(line: 46, column: 37, scope: !7)
!59 = !DILocation(line: 47, column: 32, scope: !7)
!60 = !DILocation(line: 47, column: 37, scope: !7)
!61 = !DILocation(line: 48, column: 32, scope: !7)
!62 = !DILocation(line: 48, column: 37, scope: !7)
!63 = !DILocation(line: 49, column: 32, scope: !7)
!64 = !DILocation(line: 49, column: 37, scope: !7)
!65 = !DILocation(line: 50, column: 18, scope: !7)
!66 = !DILocation(line: 52, column: 18, scope: !7)
!67 = !DILocation(line: 53, column: 26, scope: !7)
!68 = !DILocation(line: 55, column: 18, scope: !7)
!69 = !DILocation(line: 58, column: 19, scope: !7)
!70 = !DILocation(line: 59, column: 20, scope: !7)
!71 = !DILocation(line: 60, column: 20, scope: !7)
!72 = !DILocation(line: 61, column: 20, scope: !7)
!73 = !DILocation(line: 62, column: 20, scope: !7)
!74 = !DILocation(line: 63, column: 27, scope: !7)
!75 = !DILocation(line: 64, column: 19, scope: !7)
!76 = !DILocation(line: 66, column: 20, scope: !7)
!77 = !DILocation(line: 67, column: 20, scope: !7)
!78 = !DILocation(line: 68, column: 20, scope: !7)
!79 = !DILocation(line: 69, column: 20, scope: !7)
!80 = !DILocation(line: 71, column: 20, scope: !7)
!81 = !DILocation(line: 72, column: 27, scope: !7)
!82 = !DILocation(line: 73, column: 19, scope: !7)
!83 = !DILocation(line: 47, column: 30, scope: !84, inlinedAt: !86)
!84 = distinct !DILexicalBlockFile(scope: !7, file: !85, discriminator: 0)
!85 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!86 = !DILocation(line: 78, column: 23, scope: !7)
!87 = !DILocation(line: 47, column: 29, scope: !84, inlinedAt: !86)
!88 = !DILocation(line: 47, column: 20, scope: !84, inlinedAt: !86)
!89 = !DILocation(line: 47, column: 16, scope: !84, inlinedAt: !86)
!90 = !DILocation(line: 81, column: 20, scope: !7)
!91 = !DILocation(line: 82, column: 27, scope: !7)
!92 = !DILocation(line: 83, column: 19, scope: !7)
!93 = !DILocation(line: 88, column: 20, scope: !7)
!94 = !DILocation(line: 89, column: 27, scope: !7)
!95 = !DILocation(line: 70, column: 20, scope: !7)
!96 = !DILocation(line: 75, column: 20, scope: !7)
!97 = !DILocation(line: 76, column: 20, scope: !7)
!98 = !DILocation(line: 77, column: 20, scope: !7)
!99 = !DILocation(line: 79, column: 20, scope: !7)
!100 = !DILocation(line: 90, column: 19, scope: !7)
!101 = !DILocation(line: 80, column: 20, scope: !7)
!102 = !DILocation(line: 85, column: 20, scope: !7)
!103 = !DILocation(line: 86, column: 20, scope: !7)
!104 = !DILocation(line: 95, column: 20, scope: !7)
!105 = !DILocation(line: 96, column: 20, scope: !7)
!106 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !109)
!107 = distinct !DILexicalBlockFile(scope: !7, file: !108, discriminator: 0)
!108 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!109 = !DILocation(line: 98, column: 42, scope: !7)
!110 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !109)
!111 = !DILocation(line: 100, column: 21, scope: !7)
!112 = !DILocation(line: 101, column: 28, scope: !7)
!113 = !DILocation(line: 101, column: 40, scope: !7)
!114 = !DILocation(line: 102, column: 25, scope: !7)
!115 = !DILocation(line: 102, column: 37, scope: !7)
!116 = !DILocation(line: 102, column: 4, scope: !7)
