; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 2, !dbg !13
  %20 = or disjoint i32 %18, 512, !dbg !13
  %21 = sdiv i32 %18, 1024, !dbg !14
  %22 = sdiv i32 %20, 1024, !dbg !14
  %23 = srem i32 %21, 576, !dbg !15
  %24 = srem i32 %22, 576, !dbg !15
  %.frozen50 = freeze i32 %18, !dbg !16
  %25 = sdiv i32 %.frozen50, 589824, !dbg !16
  %.frozen51 = freeze i32 %20, !dbg !16
  %26 = sdiv i32 %.frozen51, 589824, !dbg !16
  %.frozen = freeze i32 %18, !dbg !17
  %27 = sdiv i32 %.frozen, 32, !dbg !17
  %28 = sdiv i32 %20, 32, !dbg !17
  %29 = srem i32 %27, 32, !dbg !18
  %30 = srem i32 %28, 32, !dbg !18
  %31 = mul i32 %27, 32, !dbg !19
  %.decomposed = sub i32 %.frozen, %31, !dbg !19
  %32 = srem i32 %19, 32, !dbg !19
  %33 = icmp slt i32 %23, 64, !dbg !20
  %34 = icmp slt i32 %24, 64, !dbg !20
  %35 = mul i32 %25, 589824, !dbg !21
  %srem.decomposed = sub i32 %.frozen50, %35, !dbg !21
  %36 = mul i32 %26, 589824, !dbg !21
  %srem1.decomposed = sub i32 %.frozen51, %36, !dbg !21
  %37 = shl nsw i32 %25, 16, !dbg !22
  %38 = shl nsw i32 %26, 16, !dbg !22
  %39 = add nsw i32 %37, %srem.decomposed, !dbg !23
  %40 = add nsw i32 %38, %srem1.decomposed, !dbg !23
  %41 = sext i32 %39 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !24
  %43 = sext i32 %40 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !24
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #3, !dbg !25
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #3, !dbg !25
  %47 = and i32 %23, -64, !dbg !26
  %48 = icmp eq i32 %47, 64, !dbg !26
  %49 = and i32 %24, -64, !dbg !26
  %50 = icmp eq i32 %49, 64, !dbg !26
  %51 = add nsw i32 %srem.decomposed, -65536, !dbg !27
  %52 = add nsw i32 %51, %37, !dbg !28
  %53 = add nsw i32 %srem1.decomposed, -65536, !dbg !27
  %54 = add nsw i32 %53, %38, !dbg !28
  %55 = sext i32 %52 to i64, !dbg !29
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !29
  %57 = sext i32 %54 to i64, !dbg !29
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !29
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #3, !dbg !30
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #3, !dbg !30
  %61 = icmp eq i32 %47, 128, !dbg !31
  %62 = icmp eq i32 %49, 128, !dbg !31
  %63 = add nsw i32 %srem.decomposed, -131072, !dbg !32
  %64 = add nsw i32 %63, %37, !dbg !33
  %65 = add nsw i32 %srem1.decomposed, -131072, !dbg !32
  %66 = add nsw i32 %65, %38, !dbg !33
  %67 = sext i32 %64 to i64, !dbg !34
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !34
  %69 = sext i32 %66 to i64, !dbg !34
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !34
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #3, !dbg !35
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 %62, i32 0, i1 %62, i32 0, i1 %62, i32 0, i1 %62, i32 0, i1 %62) #3, !dbg !35
  %73 = add nsw i32 %23, -192, !dbg !36
  %74 = icmp ult i32 %73, 128, !dbg !36
  %75 = add nsw i32 %24, -192, !dbg !36
  %76 = icmp ult i32 %75, 128, !dbg !36
  %77 = shl nsw i32 %25, 17, !dbg !37
  %78 = shl nsw i32 %26, 17, !dbg !37
  %79 = add nsw i32 %srem.decomposed, -196608, !dbg !38
  %80 = add nsw i32 %79, %77, !dbg !39
  %81 = add nsw i32 %srem1.decomposed, -196608, !dbg !38
  %82 = add nsw i32 %81, %78, !dbg !39
  %83 = sext i32 %80 to i64, !dbg !40
  %84 = getelementptr float, ptr addrspace(1) %3, i64 %83, !dbg !40
  %85 = sext i32 %82 to i64, !dbg !40
  %86 = getelementptr float, ptr addrspace(1) %3, i64 %85, !dbg !40
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %84, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #3, !dbg !41
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %86, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #3, !dbg !41
  %89 = icmp sgt i32 %23, 319, !dbg !42
  %90 = icmp sgt i32 %24, 319, !dbg !42
  %91 = sext i32 %29 to i64, !dbg !43
  %92 = getelementptr i64, ptr addrspace(1) %4, i64 %91, !dbg !43
  %93 = sext i32 %30 to i64, !dbg !43
  %94 = getelementptr i64, ptr addrspace(1) %4, i64 %93, !dbg !43
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %92, i1 %89, i1 %89) #3, !dbg !44
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %92, i1 %89, i1 %89) #3, !dbg !44
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %92, i1 %89, i1 %89) #3, !dbg !44
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %92, i1 %89, i1 %89) #3, !dbg !44
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %94, i1 %90, i1 %90) #3, !dbg !44
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %94, i1 %90, i1 %90) #3, !dbg !44
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %94, i1 %90, i1 %90) #3, !dbg !44
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %94, i1 %90, i1 %90) #3, !dbg !44
  %103 = lshr i64 %95, 59, !dbg !45
  %104 = and i64 %103, 16, !dbg !45
  %105 = add i64 %104, %95, !dbg !45
  %106 = lshr i64 %99, 59, !dbg !45
  %107 = and i64 %106, 16, !dbg !45
  %108 = add i64 %107, %99, !dbg !45
  %109 = sext i32 %.decomposed to i64, !dbg !46
  %110 = getelementptr i64, ptr addrspace(1) %4, i64 %109, !dbg !46
  %111 = sext i32 %32 to i64, !dbg !46
  %112 = getelementptr i64, ptr addrspace(1) %4, i64 %111, !dbg !46
  %113 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %110, i1 %89, i1 %89, i1 %89) #3, !dbg !47
  %114 = extractvalue { i64, i64 } %113, 0, !dbg !47
  %115 = extractvalue { i64, i64 } %113, 1, !dbg !47
  %116 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %112, i1 %89, i1 %89, i1 %89) #3, !dbg !47
  %117 = extractvalue { i64, i64 } %116, 0, !dbg !47
  %118 = extractvalue { i64, i64 } %116, 1, !dbg !47
  %119 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %110, i1 %90, i1 %90, i1 %90) #3, !dbg !47
  %120 = extractvalue { i64, i64 } %119, 0, !dbg !47
  %121 = extractvalue { i64, i64 } %119, 1, !dbg !47
  %122 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %112, i1 %90, i1 %90, i1 %90) #3, !dbg !47
  %123 = extractvalue { i64, i64 } %122, 0, !dbg !47
  %124 = extractvalue { i64, i64 } %122, 1, !dbg !47
  %125 = lshr i64 %114, 59, !dbg !48
  %126 = and i64 %125, 16, !dbg !48
  %127 = lshr i64 %115, 59, !dbg !48
  %128 = and i64 %127, 16, !dbg !48
  %129 = lshr i64 %117, 59, !dbg !48
  %130 = and i64 %129, 16, !dbg !48
  %131 = lshr i64 %118, 59, !dbg !48
  %132 = and i64 %131, 16, !dbg !48
  %133 = lshr i64 %120, 59, !dbg !48
  %134 = and i64 %133, 16, !dbg !48
  %135 = lshr i64 %121, 59, !dbg !48
  %136 = and i64 %135, 16, !dbg !48
  %137 = lshr i64 %123, 59, !dbg !48
  %138 = and i64 %137, 16, !dbg !48
  %139 = lshr i64 %124, 59, !dbg !48
  %140 = and i64 %139, 16, !dbg !48
  %141 = shl i64 %105, 4, !dbg !49
  %142 = shl i64 %108, 4, !dbg !49
  %143 = add nsw i32 %23, -320, !dbg !50
  %144 = add nsw i32 %24, -320, !dbg !50
  %145 = shl nsw i32 %143, 8, !dbg !51
  %146 = shl nsw i32 %144, 8, !dbg !51
  %147 = sext i32 %145 to i64, !dbg !52
  %148 = sext i32 %146 to i64, !dbg !52
  %149 = sext i32 %37 to i64, !dbg !53
  %150 = sext i32 %38 to i64, !dbg !53
  %151 = getelementptr float, ptr addrspace(1) %5, i64 %114, !dbg !54
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %126, !dbg !54
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %141, !dbg !54
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %147, !dbg !54
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %149, !dbg !54
  %156 = getelementptr float, ptr addrspace(1) %5, i64 %115, !dbg !54
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %128, !dbg !54
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %141, !dbg !54
  %159 = getelementptr float, ptr addrspace(1) %158, i64 %147, !dbg !54
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %149, !dbg !54
  %161 = getelementptr float, ptr addrspace(1) %5, i64 %117, !dbg !54
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %130, !dbg !54
  %163 = getelementptr float, ptr addrspace(1) %162, i64 %141, !dbg !54
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %147, !dbg !54
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %149, !dbg !54
  %166 = getelementptr float, ptr addrspace(1) %5, i64 %118, !dbg !54
  %167 = getelementptr float, ptr addrspace(1) %166, i64 %132, !dbg !54
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %141, !dbg !54
  %169 = getelementptr float, ptr addrspace(1) %168, i64 %147, !dbg !54
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %149, !dbg !54
  %171 = getelementptr float, ptr addrspace(1) %5, i64 %120, !dbg !54
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %134, !dbg !54
  %173 = getelementptr float, ptr addrspace(1) %172, i64 %142, !dbg !54
  %174 = getelementptr float, ptr addrspace(1) %173, i64 %148, !dbg !54
  %175 = getelementptr float, ptr addrspace(1) %174, i64 %150, !dbg !54
  %176 = getelementptr float, ptr addrspace(1) %5, i64 %121, !dbg !54
  %177 = getelementptr float, ptr addrspace(1) %176, i64 %136, !dbg !54
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %142, !dbg !54
  %179 = getelementptr float, ptr addrspace(1) %178, i64 %148, !dbg !54
  %180 = getelementptr float, ptr addrspace(1) %179, i64 %150, !dbg !54
  %181 = getelementptr float, ptr addrspace(1) %5, i64 %123, !dbg !54
  %182 = getelementptr float, ptr addrspace(1) %181, i64 %138, !dbg !54
  %183 = getelementptr float, ptr addrspace(1) %182, i64 %142, !dbg !54
  %184 = getelementptr float, ptr addrspace(1) %183, i64 %148, !dbg !54
  %185 = getelementptr float, ptr addrspace(1) %184, i64 %150, !dbg !54
  %186 = getelementptr float, ptr addrspace(1) %5, i64 %124, !dbg !54
  %187 = getelementptr float, ptr addrspace(1) %186, i64 %140, !dbg !54
  %188 = getelementptr float, ptr addrspace(1) %187, i64 %142, !dbg !54
  %189 = getelementptr float, ptr addrspace(1) %188, i64 %148, !dbg !54
  %190 = getelementptr float, ptr addrspace(1) %189, i64 %150, !dbg !54
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %89, i32 0, i1 %89) #3, !dbg !55
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %89, i32 0, i1 %89) #3, !dbg !55
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %89, i32 0, i1 %89) #3, !dbg !55
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %89, i32 0, i1 %89) #3, !dbg !55
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %90, i32 0, i1 %90) #3, !dbg !55
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %90, i32 0, i1 %90) #3, !dbg !55
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %90, i32 0, i1 %90) #3, !dbg !55
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %90, i32 0, i1 %90) #3, !dbg !55
  %199 = sext i32 %143 to i64, !dbg !56
  %200 = getelementptr float, ptr addrspace(1) %6, i64 %199, !dbg !56
  %201 = sext i32 %144 to i64, !dbg !56
  %202 = getelementptr float, ptr addrspace(1) %6, i64 %201, !dbg !56
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %89, i32 0, i1 %89) #3, !dbg !57
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %89, i32 0, i1 %89) #3, !dbg !57
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %89, i32 0, i1 %89) #3, !dbg !57
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %89, i32 0, i1 %89) #3, !dbg !57
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %202, i1 %90, i32 0, i1 %90) #3, !dbg !57
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %202, i1 %90, i32 0, i1 %90) #3, !dbg !57
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %202, i1 %90, i32 0, i1 %90) #3, !dbg !57
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %202, i1 %90, i32 0, i1 %90) #3, !dbg !57
  %211 = getelementptr float, ptr addrspace(1) %7, i64 %199, !dbg !58
  %212 = getelementptr float, ptr addrspace(1) %7, i64 %201, !dbg !58
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %89, i32 0, i1 %89) #3, !dbg !59
  %214 = bitcast i32 %213 to float, !dbg !59
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %89, i32 0, i1 %89) #3, !dbg !59
  %216 = bitcast i32 %215 to float, !dbg !59
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %89, i32 0, i1 %89) #3, !dbg !59
  %218 = bitcast i32 %217 to float, !dbg !59
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %89, i32 0, i1 %89) #3, !dbg !59
  %220 = bitcast i32 %219 to float, !dbg !59
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %90, i32 0, i1 %90) #3, !dbg !59
  %222 = bitcast i32 %221 to float, !dbg !59
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %90, i32 0, i1 %90) #3, !dbg !59
  %224 = bitcast i32 %223 to float, !dbg !59
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %90, i32 0, i1 %90) #3, !dbg !59
  %226 = bitcast i32 %225 to float, !dbg !59
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %90, i32 0, i1 %90) #3, !dbg !59
  %228 = bitcast i32 %227 to float, !dbg !59
  %229 = fadd float %214, 0x3EE4F8B580000000, !dbg !60
  %230 = fadd float %216, 0x3EE4F8B580000000, !dbg !60
  %231 = fadd float %218, 0x3EE4F8B580000000, !dbg !60
  %232 = fadd float %220, 0x3EE4F8B580000000, !dbg !60
  %233 = fadd float %222, 0x3EE4F8B580000000, !dbg !60
  %234 = fadd float %224, 0x3EE4F8B580000000, !dbg !60
  %235 = fadd float %226, 0x3EE4F8B580000000, !dbg !60
  %236 = fadd float %228, 0x3EE4F8B580000000, !dbg !60
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i = icmp eq i32 %237, 0, !dbg !61
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i = icmp eq i32 %238, 0, !dbg !61
  br i1 %.not.i, label %244, label %239, !dbg !61

239:                                              ; preds = %12
  br i1 %.not1.i, label %242, label %240, !dbg !61

240:                                              ; preds = %239
  %241 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %229) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

242:                                              ; preds = %239
  %243 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %229) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

244:                                              ; preds = %12
  br i1 %.not1.i, label %247, label %245, !dbg !61

245:                                              ; preds = %244
  %246 = tail call float @llvm.nvvm.sqrt.rn.f(float %229) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

247:                                              ; preds = %244
  %248 = tail call float @llvm.nvvm.sqrt.approx.f(float %229) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

__nv_sqrtf.exit:                                  ; preds = %240, %242, %245, %247
  %.0.i = phi float [ %241, %240 ], [ %243, %242 ], [ %246, %245 ], [ %248, %247 ], !dbg !61
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i2 = icmp eq i32 %249, 0, !dbg !61
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i5 = icmp eq i32 %250, 0, !dbg !61
  br i1 %.not.i2, label %256, label %251, !dbg !61

251:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %254, label %252, !dbg !61

252:                                              ; preds = %251
  %253 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %230) #3, !dbg !61
  br label %__nv_sqrtf.exit6, !dbg !61

254:                                              ; preds = %251
  %255 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %230) #3, !dbg !61
  br label %__nv_sqrtf.exit6, !dbg !61

256:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %259, label %257, !dbg !61

257:                                              ; preds = %256
  %258 = tail call float @llvm.nvvm.sqrt.rn.f(float %230) #3, !dbg !61
  br label %__nv_sqrtf.exit6, !dbg !61

259:                                              ; preds = %256
  %260 = tail call float @llvm.nvvm.sqrt.approx.f(float %230) #3, !dbg !61
  br label %__nv_sqrtf.exit6, !dbg !61

__nv_sqrtf.exit6:                                 ; preds = %252, %254, %257, %259
  %.0.i4 = phi float [ %253, %252 ], [ %255, %254 ], [ %258, %257 ], [ %260, %259 ], !dbg !61
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i7 = icmp eq i32 %261, 0, !dbg !61
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i10 = icmp eq i32 %262, 0, !dbg !61
  br i1 %.not.i7, label %268, label %263, !dbg !61

263:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %266, label %264, !dbg !61

264:                                              ; preds = %263
  %265 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %231) #3, !dbg !61
  br label %__nv_sqrtf.exit11, !dbg !61

266:                                              ; preds = %263
  %267 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %231) #3, !dbg !61
  br label %__nv_sqrtf.exit11, !dbg !61

268:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %271, label %269, !dbg !61

269:                                              ; preds = %268
  %270 = tail call float @llvm.nvvm.sqrt.rn.f(float %231) #3, !dbg !61
  br label %__nv_sqrtf.exit11, !dbg !61

271:                                              ; preds = %268
  %272 = tail call float @llvm.nvvm.sqrt.approx.f(float %231) #3, !dbg !61
  br label %__nv_sqrtf.exit11, !dbg !61

__nv_sqrtf.exit11:                                ; preds = %264, %266, %269, %271
  %.0.i9 = phi float [ %265, %264 ], [ %267, %266 ], [ %270, %269 ], [ %272, %271 ], !dbg !61
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i12 = icmp eq i32 %273, 0, !dbg !61
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i15 = icmp eq i32 %274, 0, !dbg !61
  br i1 %.not.i12, label %280, label %275, !dbg !61

275:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %278, label %276, !dbg !61

276:                                              ; preds = %275
  %277 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %232) #3, !dbg !61
  br label %__nv_sqrtf.exit16, !dbg !61

278:                                              ; preds = %275
  %279 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %232) #3, !dbg !61
  br label %__nv_sqrtf.exit16, !dbg !61

280:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %283, label %281, !dbg !61

281:                                              ; preds = %280
  %282 = tail call float @llvm.nvvm.sqrt.rn.f(float %232) #3, !dbg !61
  br label %__nv_sqrtf.exit16, !dbg !61

283:                                              ; preds = %280
  %284 = tail call float @llvm.nvvm.sqrt.approx.f(float %232) #3, !dbg !61
  br label %__nv_sqrtf.exit16, !dbg !61

__nv_sqrtf.exit16:                                ; preds = %276, %278, %281, %283
  %.0.i14 = phi float [ %277, %276 ], [ %279, %278 ], [ %282, %281 ], [ %284, %283 ], !dbg !61
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i17 = icmp eq i32 %285, 0, !dbg !61
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i20 = icmp eq i32 %286, 0, !dbg !61
  br i1 %.not.i17, label %292, label %287, !dbg !61

287:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %290, label %288, !dbg !61

288:                                              ; preds = %287
  %289 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %233) #3, !dbg !61
  br label %__nv_sqrtf.exit21, !dbg !61

290:                                              ; preds = %287
  %291 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %233) #3, !dbg !61
  br label %__nv_sqrtf.exit21, !dbg !61

292:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %295, label %293, !dbg !61

293:                                              ; preds = %292
  %294 = tail call float @llvm.nvvm.sqrt.rn.f(float %233) #3, !dbg !61
  br label %__nv_sqrtf.exit21, !dbg !61

295:                                              ; preds = %292
  %296 = tail call float @llvm.nvvm.sqrt.approx.f(float %233) #3, !dbg !61
  br label %__nv_sqrtf.exit21, !dbg !61

__nv_sqrtf.exit21:                                ; preds = %288, %290, %293, %295
  %.0.i19 = phi float [ %289, %288 ], [ %291, %290 ], [ %294, %293 ], [ %296, %295 ], !dbg !61
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i22 = icmp eq i32 %297, 0, !dbg !61
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i25 = icmp eq i32 %298, 0, !dbg !61
  br i1 %.not.i22, label %304, label %299, !dbg !61

299:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %302, label %300, !dbg !61

300:                                              ; preds = %299
  %301 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %234) #3, !dbg !61
  br label %__nv_sqrtf.exit26, !dbg !61

302:                                              ; preds = %299
  %303 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %234) #3, !dbg !61
  br label %__nv_sqrtf.exit26, !dbg !61

304:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %307, label %305, !dbg !61

305:                                              ; preds = %304
  %306 = tail call float @llvm.nvvm.sqrt.rn.f(float %234) #3, !dbg !61
  br label %__nv_sqrtf.exit26, !dbg !61

307:                                              ; preds = %304
  %308 = tail call float @llvm.nvvm.sqrt.approx.f(float %234) #3, !dbg !61
  br label %__nv_sqrtf.exit26, !dbg !61

__nv_sqrtf.exit26:                                ; preds = %300, %302, %305, %307
  %.0.i24 = phi float [ %301, %300 ], [ %303, %302 ], [ %306, %305 ], [ %308, %307 ], !dbg !61
  %309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i27 = icmp eq i32 %309, 0, !dbg !61
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i30 = icmp eq i32 %310, 0, !dbg !61
  br i1 %.not.i27, label %316, label %311, !dbg !61

311:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %314, label %312, !dbg !61

312:                                              ; preds = %311
  %313 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %235) #3, !dbg !61
  br label %__nv_sqrtf.exit31, !dbg !61

314:                                              ; preds = %311
  %315 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %235) #3, !dbg !61
  br label %__nv_sqrtf.exit31, !dbg !61

316:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %319, label %317, !dbg !61

317:                                              ; preds = %316
  %318 = tail call float @llvm.nvvm.sqrt.rn.f(float %235) #3, !dbg !61
  br label %__nv_sqrtf.exit31, !dbg !61

319:                                              ; preds = %316
  %320 = tail call float @llvm.nvvm.sqrt.approx.f(float %235) #3, !dbg !61
  br label %__nv_sqrtf.exit31, !dbg !61

__nv_sqrtf.exit31:                                ; preds = %312, %314, %317, %319
  %.0.i29 = phi float [ %313, %312 ], [ %315, %314 ], [ %318, %317 ], [ %320, %319 ], !dbg !61
  %321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i32 = icmp eq i32 %321, 0, !dbg !61
  %322 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i35 = icmp eq i32 %322, 0, !dbg !61
  br i1 %.not.i32, label %328, label %323, !dbg !61

323:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %326, label %324, !dbg !61

324:                                              ; preds = %323
  %325 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %236) #3, !dbg !61
  br label %__nv_sqrtf.exit36, !dbg !61

326:                                              ; preds = %323
  %327 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %236) #3, !dbg !61
  br label %__nv_sqrtf.exit36, !dbg !61

328:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %331, label %329, !dbg !61

329:                                              ; preds = %328
  %330 = tail call float @llvm.nvvm.sqrt.rn.f(float %236) #3, !dbg !61
  br label %__nv_sqrtf.exit36, !dbg !61

331:                                              ; preds = %328
  %332 = tail call float @llvm.nvvm.sqrt.approx.f(float %236) #3, !dbg !61
  br label %__nv_sqrtf.exit36, !dbg !61

__nv_sqrtf.exit36:                                ; preds = %324, %326, %329, %331
  %.0.i34 = phi float [ %325, %324 ], [ %327, %326 ], [ %330, %329 ], [ %332, %331 ], !dbg !61
  %333 = insertelement <8 x i32> poison, i32 %198, i64 0, !dbg !55
  %334 = insertelement <8 x i32> %333, i32 %197, i64 1, !dbg !55
  %335 = insertelement <8 x i32> %334, i32 %196, i64 2, !dbg !55
  %336 = insertelement <8 x i32> %335, i32 %195, i64 3, !dbg !55
  %337 = insertelement <8 x i32> %336, i32 %194, i64 4, !dbg !55
  %338 = insertelement <8 x i32> %337, i32 %193, i64 5, !dbg !55
  %339 = insertelement <8 x i32> %338, i32 %192, i64 6, !dbg !55
  %340 = insertelement <8 x i32> %339, i32 %191, i64 7, !dbg !55
  %341 = bitcast <8 x i32> %340 to <8 x float>, !dbg !55
  %342 = insertelement <8 x i32> poison, i32 %210, i64 0, !dbg !57
  %343 = insertelement <8 x i32> %342, i32 %209, i64 1, !dbg !57
  %344 = insertelement <8 x i32> %343, i32 %208, i64 2, !dbg !57
  %345 = insertelement <8 x i32> %344, i32 %207, i64 3, !dbg !57
  %346 = insertelement <8 x i32> %345, i32 %206, i64 4, !dbg !57
  %347 = insertelement <8 x i32> %346, i32 %205, i64 5, !dbg !57
  %348 = insertelement <8 x i32> %347, i32 %204, i64 6, !dbg !57
  %349 = insertelement <8 x i32> %348, i32 %203, i64 7, !dbg !57
  %350 = bitcast <8 x i32> %349 to <8 x float>, !dbg !57
  %351 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !41
  %352 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !41
  %353 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !41
  %354 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !41
  %355 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !41
  %356 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !41
  %357 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !41
  %358 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !41
  %359 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !35
  %360 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !35
  %361 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !35
  %362 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !35
  %363 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !35
  %364 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !35
  %365 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !35
  %366 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !35
  %367 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !30
  %368 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !30
  %369 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !30
  %370 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !30
  %371 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !30
  %372 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !30
  %373 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !30
  %374 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !30
  %375 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !25
  %376 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !25
  %377 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !25
  %378 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !25
  %379 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !25
  %380 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !25
  %381 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !25
  %382 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !25
  %383 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !62
  %384 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !62
  %385 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #3, !dbg !62
  %386 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #3, !dbg !62
  %387 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #3, !dbg !62
  %388 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #3, !dbg !62
  %389 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #3, !dbg !62
  %390 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #3, !dbg !62
  %391 = getelementptr float, ptr addrspace(1) %8, i64 %199, !dbg !63
  %392 = getelementptr float, ptr addrspace(1) %8, i64 %201, !dbg !63
  %393 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %391, i1 %89, i32 0, i1 %89) #3, !dbg !64
  %394 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %391, i1 %89, i32 0, i1 %89) #3, !dbg !64
  %395 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %391, i1 %89, i32 0, i1 %89) #3, !dbg !64
  %396 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %391, i1 %89, i32 0, i1 %89) #3, !dbg !64
  %397 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %392, i1 %90, i32 0, i1 %90) #3, !dbg !64
  %398 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %392, i1 %90, i32 0, i1 %90) #3, !dbg !64
  %399 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %392, i1 %90, i32 0, i1 %90) #3, !dbg !64
  %400 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %392, i1 %90, i32 0, i1 %90) #3, !dbg !64
  %401 = getelementptr float, ptr addrspace(1) %9, i64 %199, !dbg !65
  %402 = getelementptr float, ptr addrspace(1) %9, i64 %201, !dbg !65
  %403 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %401, i1 %89, i32 0, i1 %89) #3, !dbg !66
  %404 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %401, i1 %89, i32 0, i1 %89) #3, !dbg !66
  %405 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %401, i1 %89, i32 0, i1 %89) #3, !dbg !66
  %406 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %401, i1 %89, i32 0, i1 %89) #3, !dbg !66
  %407 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %402, i1 %90, i32 0, i1 %90) #3, !dbg !66
  %408 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %402, i1 %90, i32 0, i1 %90) #3, !dbg !66
  %409 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %402, i1 %90, i32 0, i1 %90) #3, !dbg !66
  %410 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %402, i1 %90, i32 0, i1 %90) #3, !dbg !66
  %411 = fsub <8 x float> %341, %350, !dbg !67
  %412 = insertelement <8 x float> poison, float %390, i64 0, !dbg !68
  %413 = insertelement <8 x float> %412, float %389, i64 1, !dbg !68
  %414 = insertelement <8 x float> %413, float %388, i64 2, !dbg !68
  %415 = insertelement <8 x float> %414, float %387, i64 3, !dbg !68
  %416 = insertelement <8 x float> %415, float %386, i64 4, !dbg !68
  %417 = insertelement <8 x float> %416, float %385, i64 5, !dbg !68
  %418 = insertelement <8 x float> %417, float %384, i64 6, !dbg !68
  %419 = insertelement <8 x float> %418, float %383, i64 7, !dbg !68
  %420 = fmul <8 x float> %411, %419, !dbg !68
  %421 = insertelement <8 x i32> poison, i32 %400, i64 0, !dbg !64
  %422 = insertelement <8 x i32> %421, i32 %399, i64 1, !dbg !64
  %423 = insertelement <8 x i32> %422, i32 %398, i64 2, !dbg !64
  %424 = insertelement <8 x i32> %423, i32 %397, i64 3, !dbg !64
  %425 = insertelement <8 x i32> %424, i32 %396, i64 4, !dbg !64
  %426 = insertelement <8 x i32> %425, i32 %395, i64 5, !dbg !64
  %427 = insertelement <8 x i32> %426, i32 %394, i64 6, !dbg !64
  %428 = insertelement <8 x i32> %427, i32 %393, i64 7, !dbg !64
  %429 = bitcast <8 x i32> %428 to <8 x float>, !dbg !64
  %430 = fmul <8 x float> %420, %429, !dbg !69
  %431 = insertelement <8 x i32> poison, i32 %410, i64 0, !dbg !66
  %432 = insertelement <8 x i32> %431, i32 %409, i64 1, !dbg !66
  %433 = insertelement <8 x i32> %432, i32 %408, i64 2, !dbg !66
  %434 = insertelement <8 x i32> %433, i32 %407, i64 3, !dbg !66
  %435 = insertelement <8 x i32> %434, i32 %406, i64 4, !dbg !66
  %436 = insertelement <8 x i32> %435, i32 %405, i64 5, !dbg !66
  %437 = insertelement <8 x i32> %436, i32 %404, i64 6, !dbg !66
  %438 = insertelement <8 x i32> %437, i32 %403, i64 7, !dbg !66
  %439 = bitcast <8 x i32> %438 to <8 x float>, !dbg !66
  %440 = fadd <8 x float> %430, %439, !dbg !70
  %441 = fcmp olt <8 x float> %440, zeroinitializer, !dbg !71
  %442 = extractelement <8 x i1> %441, i64 7, !dbg !75
  %443 = extractelement <8 x i1> %441, i64 6, !dbg !75
  %444 = extractelement <8 x i1> %441, i64 5, !dbg !75
  %445 = extractelement <8 x i1> %441, i64 4, !dbg !75
  %446 = extractelement <8 x i1> %441, i64 3, !dbg !75
  %447 = extractelement <8 x i1> %441, i64 2, !dbg !75
  %448 = extractelement <8 x i1> %441, i64 1, !dbg !75
  %449 = extractelement <8 x i1> %441, i64 0, !dbg !75
  %450 = sext i32 %18 to i64, !dbg !76
  %451 = getelementptr float, ptr addrspace(1) %10, i64 %450, !dbg !76
  %452 = sext i32 %20 to i64, !dbg !76
  %453 = getelementptr float, ptr addrspace(1) %10, i64 %452, !dbg !76
  %bc = bitcast <8 x float> %440 to <8 x i32>, !dbg !77
  %454 = extractelement <8 x i32> %bc, i64 7, !dbg !77
  %455 = select i1 %442, i32 0, i32 %454, !dbg !75
  %456 = select i1 %89, i32 %455, i32 0, !dbg !78
  %457 = select i1 %74, i32 %358, i32 %456, !dbg !79
  %458 = select i1 %61, i32 %366, i32 %457, !dbg !80
  %459 = select i1 %48, i32 %374, i32 %458, !dbg !81
  %460 = select i1 %33, i32 %382, i32 %459, !dbg !82
  %bc43 = bitcast <8 x float> %440 to <8 x i32>, !dbg !77
  %461 = extractelement <8 x i32> %bc43, i64 6, !dbg !77
  %462 = select i1 %443, i32 0, i32 %461, !dbg !75
  %463 = select i1 %89, i32 %462, i32 0, !dbg !78
  %464 = select i1 %74, i32 %357, i32 %463, !dbg !79
  %465 = select i1 %61, i32 %365, i32 %464, !dbg !80
  %466 = select i1 %48, i32 %373, i32 %465, !dbg !81
  %467 = select i1 %33, i32 %381, i32 %466, !dbg !82
  %bc44 = bitcast <8 x float> %440 to <8 x i32>, !dbg !77
  %468 = extractelement <8 x i32> %bc44, i64 5, !dbg !77
  %469 = select i1 %444, i32 0, i32 %468, !dbg !75
  %470 = select i1 %89, i32 %469, i32 0, !dbg !78
  %471 = select i1 %74, i32 %356, i32 %470, !dbg !79
  %472 = select i1 %61, i32 %364, i32 %471, !dbg !80
  %473 = select i1 %48, i32 %372, i32 %472, !dbg !81
  %474 = select i1 %33, i32 %380, i32 %473, !dbg !82
  %bc45 = bitcast <8 x float> %440 to <8 x i32>, !dbg !77
  %475 = extractelement <8 x i32> %bc45, i64 4, !dbg !77
  %476 = select i1 %445, i32 0, i32 %475, !dbg !75
  %477 = select i1 %89, i32 %476, i32 0, !dbg !78
  %478 = select i1 %74, i32 %355, i32 %477, !dbg !79
  %479 = select i1 %61, i32 %363, i32 %478, !dbg !80
  %480 = select i1 %48, i32 %371, i32 %479, !dbg !81
  %481 = select i1 %33, i32 %379, i32 %480, !dbg !82
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %460, i32 %467, i32 %474, i32 %481, ptr addrspace(1) %451, i1 true) #3, !dbg !77
  %bc46 = bitcast <8 x float> %440 to <8 x i32>, !dbg !77
  %482 = extractelement <8 x i32> %bc46, i64 3, !dbg !77
  %483 = select i1 %446, i32 0, i32 %482, !dbg !75
  %484 = select i1 %90, i32 %483, i32 0, !dbg !78
  %485 = select i1 %76, i32 %354, i32 %484, !dbg !79
  %486 = select i1 %62, i32 %362, i32 %485, !dbg !80
  %487 = select i1 %50, i32 %370, i32 %486, !dbg !81
  %488 = select i1 %34, i32 %378, i32 %487, !dbg !82
  %bc47 = bitcast <8 x float> %440 to <8 x i32>, !dbg !77
  %489 = extractelement <8 x i32> %bc47, i64 2, !dbg !77
  %490 = select i1 %447, i32 0, i32 %489, !dbg !75
  %491 = select i1 %90, i32 %490, i32 0, !dbg !78
  %492 = select i1 %76, i32 %353, i32 %491, !dbg !79
  %493 = select i1 %62, i32 %361, i32 %492, !dbg !80
  %494 = select i1 %50, i32 %369, i32 %493, !dbg !81
  %495 = select i1 %34, i32 %377, i32 %494, !dbg !82
  %bc48 = bitcast <8 x float> %440 to <8 x i32>, !dbg !77
  %496 = extractelement <8 x i32> %bc48, i64 1, !dbg !77
  %497 = select i1 %448, i32 0, i32 %496, !dbg !75
  %498 = select i1 %90, i32 %497, i32 0, !dbg !78
  %499 = select i1 %76, i32 %352, i32 %498, !dbg !79
  %500 = select i1 %62, i32 %360, i32 %499, !dbg !80
  %501 = select i1 %50, i32 %368, i32 %500, !dbg !81
  %502 = select i1 %34, i32 %376, i32 %501, !dbg !82
  %bc49 = bitcast <8 x float> %440 to <8 x i32>, !dbg !77
  %503 = extractelement <8 x i32> %bc49, i64 0, !dbg !77
  %504 = select i1 %449, i32 0, i32 %503, !dbg !75
  %505 = select i1 %90, i32 %504, i32 0, !dbg !78
  %506 = select i1 %76, i32 %351, i32 %505, !dbg !79
  %507 = select i1 %62, i32 %359, i32 %506, !dbg !80
  %508 = select i1 %50, i32 %367, i32 %507, !dbg !81
  %509 = select i1 %34, i32 %375, i32 %508, !dbg !82
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %488, i32 %495, i32 %502, i32 %509, ptr addrspace(1) %453, i1 true) #3, !dbg !77
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgqmizeac2xltiwhjelb52jyy7pujdt5adaaxmuigp44knihnmbh.py", directory: "inductor_cache/gq")
!4 = !{ptr @triton_poi_fused_cat_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_38, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_38", linkageName: "triton_poi_fused_cat_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 53, scope: !7)
!23 = !DILocation(line: 35, column: 47, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 58, scope: !7)
!26 = !DILocation(line: 39, column: 18, scope: !7)
!27 = !DILocation(line: 40, column: 36, scope: !7)
!28 = !DILocation(line: 40, column: 56, scope: !7)
!29 = !DILocation(line: 40, column: 31, scope: !7)
!30 = !DILocation(line: 40, column: 67, scope: !7)
!31 = !DILocation(line: 44, column: 20, scope: !7)
!32 = !DILocation(line: 45, column: 36, scope: !7)
!33 = !DILocation(line: 45, column: 57, scope: !7)
!34 = !DILocation(line: 45, column: 31, scope: !7)
!35 = !DILocation(line: 45, column: 68, scope: !7)
!36 = !DILocation(line: 49, column: 20, scope: !7)
!37 = !DILocation(line: 50, column: 64, scope: !7)
!38 = !DILocation(line: 50, column: 36, scope: !7)
!39 = !DILocation(line: 50, column: 57, scope: !7)
!40 = !DILocation(line: 50, column: 31, scope: !7)
!41 = !DILocation(line: 50, column: 69, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 54, column: 31, scope: !7)
!44 = !DILocation(line: 54, column: 36, scope: !7)
!45 = !DILocation(line: 58, column: 35, scope: !7)
!46 = !DILocation(line: 59, column: 31, scope: !7)
!47 = !DILocation(line: 59, column: 36, scope: !7)
!48 = !DILocation(line: 62, column: 35, scope: !7)
!49 = !DILocation(line: 63, column: 42, scope: !7)
!50 = !DILocation(line: 63, column: 64, scope: !7)
!51 = !DILocation(line: 63, column: 55, scope: !7)
!52 = !DILocation(line: 63, column: 50, scope: !7)
!53 = !DILocation(line: 63, column: 70, scope: !7)
!54 = !DILocation(line: 63, column: 31, scope: !7)
!55 = !DILocation(line: 63, column: 81, scope: !7)
!56 = !DILocation(line: 64, column: 31, scope: !7)
!57 = !DILocation(line: 64, column: 45, scope: !7)
!58 = !DILocation(line: 66, column: 31, scope: !7)
!59 = !DILocation(line: 66, column: 45, scope: !7)
!60 = !DILocation(line: 68, column: 20, scope: !7)
!61 = !DILocation(line: 69, column: 27, scope: !7)
!62 = !DILocation(line: 71, column: 20, scope: !7)
!63 = !DILocation(line: 75, column: 31, scope: !7)
!64 = !DILocation(line: 75, column: 45, scope: !7)
!65 = !DILocation(line: 77, column: 31, scope: !7)
!66 = !DILocation(line: 77, column: 45, scope: !7)
!67 = !DILocation(line: 65, column: 20, scope: !7)
!68 = !DILocation(line: 74, column: 20, scope: !7)
!69 = !DILocation(line: 76, column: 20, scope: !7)
!70 = !DILocation(line: 78, column: 20, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !74)
!72 = distinct !DILexicalBlockFile(scope: !7, file: !73, discriminator: 0)
!73 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!74 = !DILocation(line: 80, column: 42, scope: !7)
!75 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !74)
!76 = !DILocation(line: 87, column: 25, scope: !7)
!77 = !DILocation(line: 87, column: 37, scope: !7)
!78 = !DILocation(line: 82, column: 35, scope: !7)
!79 = !DILocation(line: 83, column: 35, scope: !7)
!80 = !DILocation(line: 84, column: 35, scope: !7)
!81 = !DILocation(line: 85, column: 34, scope: !7)
!82 = !DILocation(line: 86, column: 33, scope: !7)
!83 = !DILocation(line: 87, column: 4, scope: !7)
