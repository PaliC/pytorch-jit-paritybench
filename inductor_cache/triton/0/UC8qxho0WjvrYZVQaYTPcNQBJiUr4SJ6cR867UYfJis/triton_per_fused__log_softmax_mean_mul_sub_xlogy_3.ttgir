#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":19:0)
#loc1 = loc(unknown)
#loc79 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":94:26)
#loc88 = loc(callsite(#loc1 at #loc79))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__log_softmax_mean_mul_sub_xlogy_3(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<16> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<64> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<32> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<48> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<0> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<0x7FC00000> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<4.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<1.000000e+02> : tensor<1x64xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_8 = arith.constant dense<6.400000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc2)
    %2 = arith.remsi %1, %cst : tensor<1x64xi32, #blocked> loc(#loc3)
    %3 = arith.divsi %1, %cst : tensor<1x64xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_0 : tensor<1x64xi32, #blocked> loc(#loc5)
    %5 = arith.addi %2, %4 : tensor<1x64xi32, #blocked> loc(#loc6)
    %6 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.addptr %6, %5 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc7)
    %8 = tt.load %7 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc9)
    %10 = tt.addptr %9, %5 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc9)
    %11 = tt.load %10 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc10)
    %12 = arith.addi %2, %cst : tensor<1x64xi32, #blocked> loc(#loc11)
    %13 = arith.addi %12, %4 : tensor<1x64xi32, #blocked> loc(#loc12)
    %14 = tt.addptr %9, %13 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc13)
    %15 = tt.load %14 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc14)
    %16 = arith.addi %2, %cst_1 : tensor<1x64xi32, #blocked> loc(#loc15)
    %17 = arith.addi %16, %4 : tensor<1x64xi32, #blocked> loc(#loc16)
    %18 = tt.addptr %9, %17 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc17)
    %19 = tt.load %18 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc18)
    %20 = arith.addi %2, %cst_2 : tensor<1x64xi32, #blocked> loc(#loc19)
    %21 = arith.addi %20, %4 : tensor<1x64xi32, #blocked> loc(#loc20)
    %22 = tt.addptr %9, %21 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc21)
    %23 = tt.load %22 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc22)
    %24 = tt.addptr %6, %13 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc23)
    %25 = tt.load %24 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc24)
    %26 = tt.addptr %6, %17 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc25)
    %27 = tt.load %26 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc26)
    %28 = tt.addptr %6, %21 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc27)
    %29 = tt.load %28 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc28)
    %30 = tt.extern_elementwise %8 {libname = "", libpath = "", pure = true, symbol = "__nv_isnanf"} : (tensor<1x64xf32, #blocked>) -> tensor<1x64xi32, #blocked> loc(#loc29)
    %31 = arith.cmpi ne, %30, %cst_3 : tensor<1x64xi32, #blocked> loc(#loc29)
    %32 = arith.cmpf oeq, %8, %cst_4 : tensor<1x64xf32, #blocked> loc(#loc30)
    %33 = math.log %8 : tensor<1x64xf32, #blocked> loc(#loc31)
    %34 = arith.mulf %8, %33 : tensor<1x64xf32, #blocked> loc(#loc32)
    %35 = arith.select %32, %cst_4, %34 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc33)
    %36 = arith.select %31, %cst_5, %35 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc34)
    %37 = math.exp %11 : tensor<1x64xf32, #blocked> loc(#loc35)
    %38 = math.exp %15 : tensor<1x64xf32, #blocked> loc(#loc36)
    %39 = arith.addf %37, %38 : tensor<1x64xf32, #blocked> loc(#loc37)
    %40 = math.exp %19 : tensor<1x64xf32, #blocked> loc(#loc38)
    %41 = arith.addf %39, %40 : tensor<1x64xf32, #blocked> loc(#loc39)
    %42 = math.exp %23 : tensor<1x64xf32, #blocked> loc(#loc40)
    %43 = arith.addf %41, %42 : tensor<1x64xf32, #blocked> loc(#loc41)
    %44 = math.log %43 : tensor<1x64xf32, #blocked> loc(#loc42)
    %45 = arith.subf %11, %44 : tensor<1x64xf32, #blocked> loc(#loc43)
    %46 = arith.mulf %8, %45 : tensor<1x64xf32, #blocked> loc(#loc44)
    %47 = arith.subf %36, %46 : tensor<1x64xf32, #blocked> loc(#loc45)
    %48 = tt.extern_elementwise %25 {libname = "", libpath = "", pure = true, symbol = "__nv_isnanf"} : (tensor<1x64xf32, #blocked>) -> tensor<1x64xi32, #blocked> loc(#loc46)
    %49 = arith.cmpi ne, %48, %cst_3 : tensor<1x64xi32, #blocked> loc(#loc46)
    %50 = arith.cmpf oeq, %25, %cst_4 : tensor<1x64xf32, #blocked> loc(#loc47)
    %51 = math.log %25 : tensor<1x64xf32, #blocked> loc(#loc48)
    %52 = arith.mulf %25, %51 : tensor<1x64xf32, #blocked> loc(#loc49)
    %53 = arith.select %50, %cst_4, %52 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc50)
    %54 = arith.select %49, %cst_5, %53 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc51)
    %55 = arith.subf %15, %44 : tensor<1x64xf32, #blocked> loc(#loc52)
    %56 = arith.mulf %25, %55 : tensor<1x64xf32, #blocked> loc(#loc53)
    %57 = arith.subf %54, %56 : tensor<1x64xf32, #blocked> loc(#loc54)
    %58 = arith.addf %47, %57 : tensor<1x64xf32, #blocked> loc(#loc55)
    %59 = tt.extern_elementwise %27 {libname = "", libpath = "", pure = true, symbol = "__nv_isnanf"} : (tensor<1x64xf32, #blocked>) -> tensor<1x64xi32, #blocked> loc(#loc56)
    %60 = arith.cmpi ne, %59, %cst_3 : tensor<1x64xi32, #blocked> loc(#loc56)
    %61 = arith.cmpf oeq, %27, %cst_4 : tensor<1x64xf32, #blocked> loc(#loc57)
    %62 = math.log %27 : tensor<1x64xf32, #blocked> loc(#loc58)
    %63 = arith.mulf %27, %62 : tensor<1x64xf32, #blocked> loc(#loc59)
    %64 = arith.select %61, %cst_4, %63 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc60)
    %65 = arith.select %60, %cst_5, %64 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc61)
    %66 = arith.subf %19, %44 : tensor<1x64xf32, #blocked> loc(#loc62)
    %67 = arith.mulf %27, %66 : tensor<1x64xf32, #blocked> loc(#loc63)
    %68 = arith.subf %65, %67 : tensor<1x64xf32, #blocked> loc(#loc64)
    %69 = arith.addf %58, %68 : tensor<1x64xf32, #blocked> loc(#loc65)
    %70 = tt.extern_elementwise %29 {libname = "", libpath = "", pure = true, symbol = "__nv_isnanf"} : (tensor<1x64xf32, #blocked>) -> tensor<1x64xi32, #blocked> loc(#loc66)
    %71 = arith.cmpi ne, %70, %cst_3 : tensor<1x64xi32, #blocked> loc(#loc66)
    %72 = arith.cmpf oeq, %29, %cst_4 : tensor<1x64xf32, #blocked> loc(#loc67)
    %73 = math.log %29 : tensor<1x64xf32, #blocked> loc(#loc68)
    %74 = arith.mulf %29, %73 : tensor<1x64xf32, #blocked> loc(#loc69)
    %75 = arith.select %72, %cst_4, %74 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc70)
    %76 = arith.select %71, %cst_5, %75 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc71)
    %77 = arith.subf %23, %44 : tensor<1x64xf32, #blocked> loc(#loc72)
    %78 = arith.mulf %29, %77 : tensor<1x64xf32, #blocked> loc(#loc73)
    %79 = arith.subf %76, %78 : tensor<1x64xf32, #blocked> loc(#loc74)
    %80 = arith.addf %69, %79 : tensor<1x64xf32, #blocked> loc(#loc75)
    %81 = arith.divf %80, %cst_6 : tensor<1x64xf32, #blocked> loc(#loc76)
    %82 = arith.mulf %81, %cst_7 : tensor<1x64xf32, #blocked> loc(#loc77)
    %83 = "tt.reduce"(%82) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc79)), %arg5: f32 loc(callsite(#loc1 at #loc79))):
      %89 = arith.addf %arg4, %arg5 : f32 loc(#loc90)
      tt.reduce.return %89 : f32 loc(#loc87)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc87)
    %84 = triton_gpu.convert_layout %83 {fastmath = #arith.fastmath<none>} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc81)
    %85 = tt.expand_dims %84 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc82)
    %86 = arith.divf %85, %cst_8 : tensor<1x1xf32, #blocked1> loc(#loc81)
    gpu.barrier loc(#loc83)
    %87 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc84)
    %88 = tt.splat %87 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc85)
    tt.store %88, %86 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc85)
    tt.return loc(#loc86)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":26:34)
#loc3 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":29:19)
#loc4 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":30:19)
#loc5 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":32:38)
#loc6 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":32:35)
#loc7 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":32:30)
#loc8 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":32:43)
#loc9 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":33:30)
#loc10 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":33:43)
#loc11 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":34:36)
#loc12 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":34:41)
#loc13 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":34:31)
#loc14 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":34:49)
#loc15 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":35:36)
#loc16 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":35:41)
#loc17 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":35:31)
#loc18 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":35:49)
#loc19 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":36:36)
#loc20 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":36:41)
#loc21 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":36:31)
#loc22 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":36:49)
#loc23 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":37:31)
#loc24 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":37:49)
#loc25 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":38:31)
#loc26 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":38:49)
#loc27 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":39:31)
#loc28 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":39:49)
#loc29 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":40:27)
#loc30 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":42:19)
#loc31 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":43:23)
#loc32 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":44:18)
#loc33 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":45:32)
#loc34 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":47:32)
#loc35 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":48:24)
#loc36 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":49:24)
#loc37 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":50:20)
#loc38 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":51:24)
#loc39 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":52:20)
#loc40 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":53:24)
#loc41 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":54:20)
#loc42 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":55:24)
#loc43 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":56:19)
#loc44 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":57:19)
#loc45 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":58:19)
#loc46 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":59:28)
#loc47 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":60:21)
#loc48 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":61:24)
#loc49 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":62:20)
#loc50 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":63:34)
#loc51 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":64:34)
#loc52 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":65:20)
#loc53 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":66:20)
#loc54 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":67:20)
#loc55 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":68:20)
#loc56 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":69:28)
#loc57 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":70:21)
#loc58 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":71:24)
#loc59 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":72:20)
#loc60 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":73:34)
#loc61 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":74:34)
#loc62 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":75:20)
#loc63 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":76:20)
#loc64 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":77:20)
#loc65 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":78:20)
#loc66 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":79:28)
#loc67 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":80:21)
#loc68 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":81:24)
#loc69 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":82:20)
#loc70 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":83:34)
#loc71 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":84:34)
#loc72 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":85:20)
#loc73 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":86:20)
#loc74 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":87:20)
#loc75 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":88:20)
#loc76 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":90:20)
#loc77 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":92:20)
#loc78 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc80 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc81 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":96:20)
#loc82 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":94:29)
#loc83 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":99:4)
#loc84 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":100:28)
#loc85 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":100:71)
#loc86 = loc("inductor_cache/td/ctdfapw2izr2mkumenixxamg3pcgsafaguaojlt4dhnp36yb77cd.py":100:4)
#loc87 = loc(callsite(#loc78 at #loc79))
#loc89 = loc(callsite(#loc80 at #loc78))
#loc90 = loc(callsite(#loc89 at #loc79))
