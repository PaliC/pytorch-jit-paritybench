; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = or disjoint i32 %10, 128, !dbg !13
  %12 = icmp slt i32 %10, 17424, !dbg !14
  %13 = icmp slt i32 %11, 17424, !dbg !14
  %14 = sdiv i32 %10, 33, !dbg !15
  %15 = sdiv i32 %11, 33, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %16 = sdiv i32 %.frozen, 1089, !dbg !16
  %.frozen12 = freeze i32 %11, !dbg !16
  %17 = sdiv i32 %.frozen12, 1089, !dbg !16
  %18 = mul i32 %16, 1089, !dbg !17
  %.decomposed = sub i32 %.frozen, %18, !dbg !17
  %19 = mul i32 %17, 1089, !dbg !17
  %.decomposed13 = sub i32 %.frozen12, %19, !dbg !17
  %20 = mul i32 %16, 4256, !dbg !18
  %21 = mul i32 %17, 4256, !dbg !18
  %22 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !19
  %23 = insertelement <2 x i32> %22, i32 %14, i64 1, !dbg !19
  %24 = srem <2 x i32> %23, splat (i32 33), !dbg !19
  %25 = extractelement <2 x i32> %24, i64 1, !dbg !20
  %26 = icmp sgt i32 %25, 0, !dbg !21
  %27 = icmp sgt <2 x i32> %24, <i32 0, i32 -1>, !dbg !22
  %28 = extractelement <2 x i1> %27, i64 0, !dbg !23
  %29 = and i1 %28, %26, !dbg !24
  %30 = mul nsw i32 %25, 130, !dbg !20
  %31 = add i32 %30, %20, !dbg !25
  %32 = add i32 %31, -66, !dbg !26
  %33 = and i1 %12, %29, !dbg !27
  %34 = extractelement <2 x i32> %24, i64 0, !dbg !28
  %35 = icmp sgt i32 %34, -1, !dbg !28
  %36 = and i1 %35, %26, !dbg !29
  %37 = add i32 %31, -65, !dbg !30
  %38 = and i1 %12, %36, !dbg !31
  %39 = add i32 %31, -64, !dbg !32
  %40 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !19
  %41 = insertelement <2 x i32> %40, i32 %15, i64 1, !dbg !19
  %42 = srem <2 x i32> %41, splat (i32 33), !dbg !19
  %43 = extractelement <2 x i32> %42, i64 1, !dbg !20
  %44 = icmp sgt i32 %43, 0, !dbg !21
  %45 = icmp sgt <2 x i32> %42, <i32 0, i32 -1>, !dbg !22
  %46 = extractelement <2 x i1> %45, i64 0, !dbg !23
  %47 = and i1 %46, %44, !dbg !24
  %48 = mul nsw i32 %43, 130, !dbg !20
  %49 = add i32 %48, %21, !dbg !25
  %50 = add i32 %49, -66, !dbg !26
  %51 = and i1 %13, %47, !dbg !27
  %52 = extractelement <2 x i32> %42, i64 0, !dbg !28
  %53 = icmp sgt i32 %52, -1, !dbg !28
  %54 = and i1 %53, %44, !dbg !29
  %55 = add i32 %49, -65, !dbg !30
  %56 = and i1 %13, %54, !dbg !31
  %57 = add i32 %49, -64, !dbg !32
  %58 = extractelement <2 x i1> %27, i64 1, !dbg !33
  %59 = and i1 %28, %58, !dbg !34
  %60 = extractelement <2 x i1> %45, i64 1, !dbg !33
  %61 = and i1 %46, %60, !dbg !34
  %62 = and i1 %12, %59, !dbg !35
  %63 = and i1 %13, %61, !dbg !35
  %64 = or i32 %25, %34, !dbg !36
  %65 = icmp sgt i32 %64, -1, !dbg !36
  %66 = or i32 %43, %52, !dbg !36
  %67 = icmp sgt i32 %66, -1, !dbg !36
  %68 = and i1 %12, %65, !dbg !37
  %69 = and i1 %13, %67, !dbg !37
  %70 = add i32 %31, 64, !dbg !38
  %71 = add i32 %49, 64, !dbg !38
  %72 = add i32 %31, 65, !dbg !39
  %73 = add i32 %49, 65, !dbg !39
  %74 = add i32 %31, 66, !dbg !40
  %75 = add i32 %49, 66, !dbg !40
  %76 = shl nsw <2 x i32> %24, splat (i32 1), !dbg !41
  %77 = extractelement <2 x i32> %76, i64 1, !dbg !42
  %78 = add nsw i32 %77, -1, !dbg !43
  %79 = extractelement <2 x i32> %76, i64 0, !dbg !44
  %80 = add nsw i32 %79, -1, !dbg !45
  %81 = add i32 %32, %79, !dbg !46
  %82 = sext i32 %81 to i64, !dbg !47
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !47
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %33, i32 -8388608, i1 %33) #1, !dbg !48
  %85 = bitcast i32 %84 to float, !dbg !48
  %86 = add i32 %37, %79, !dbg !49
  %87 = sext i32 %86 to i64, !dbg !50
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !50
  %89 = or disjoint i32 %79, 1, !dbg !51
  %90 = icmp slt i32 %89, 65, !dbg !52
  %91 = and i1 %35, %90, !dbg !53
  %92 = and i1 %26, %91, !dbg !54
  %93 = add i32 %39, %79, !dbg !55
  %94 = sext i32 %93 to i64, !dbg !56
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !56
  %96 = and i1 %12, %92, !dbg !57
  %97 = add i32 %31, %80, !dbg !58
  %98 = sext i32 %97 to i64, !dbg !59
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !59
  %100 = add i32 %31, %79, !dbg !60
  %101 = sext i32 %100 to i64, !dbg !61
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !61
  %103 = and i1 %58, %91, !dbg !62
  %104 = add i32 %31, %89, !dbg !63
  %105 = sext i32 %104 to i64, !dbg !64
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !64
  %107 = and i1 %12, %103, !dbg !65
  %108 = or disjoint i32 %77, 1, !dbg !42
  %109 = icmp slt i32 %108, 65, !dbg !66
  %110 = and i1 %58, %109, !dbg !33
  %111 = and i1 %28, %110, !dbg !67
  %112 = add i32 %70, %79, !dbg !68
  %113 = sext i32 %112 to i64, !dbg !69
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !69
  %115 = and i1 %12, %111, !dbg !70
  %116 = and i1 %35, %110, !dbg !71
  %117 = add i32 %72, %79, !dbg !72
  %118 = sext i32 %117 to i64, !dbg !73
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !73
  %120 = and i1 %12, %116, !dbg !74
  %121 = and i1 %91, %110, !dbg !75
  %122 = add i32 %74, %79, !dbg !44
  %123 = sext i32 %122 to i64, !dbg !76
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !76
  %125 = and i1 %12, %121, !dbg !77
  %126 = select i1 %28, i32 %80, i32 0, !dbg !23
  %127 = select i1 %26, i32 %78, i32 0, !dbg !78
  %128 = add nsw <2 x i32> %76, splat (i32 2), !dbg !79
  %129 = icmp sgt <2 x i32> %24, splat (i32 31), !dbg !80
  %130 = select <2 x i1> %129, <2 x i32> splat (i32 65), <2 x i32> zeroinitializer, !dbg !81
  %131 = icmp slt <2 x i32> %24, splat (i32 32), !dbg !82
  %132 = select <2 x i1> %131, <2 x i32> %128, <2 x i32> zeroinitializer, !dbg !83
  %133 = add nsw <2 x i32> %132, %130, !dbg !84
  %134 = shl nsw <2 x i32> %42, splat (i32 1), !dbg !41
  %135 = extractelement <2 x i32> %134, i64 1, !dbg !42
  %136 = add nsw i32 %135, -1, !dbg !43
  %137 = extractelement <2 x i32> %134, i64 0, !dbg !44
  %138 = add nsw i32 %137, -1, !dbg !45
  %139 = add i32 %50, %137, !dbg !46
  %140 = sext i32 %139 to i64, !dbg !47
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !47
  %142 = add i32 %55, %137, !dbg !49
  %143 = sext i32 %142 to i64, !dbg !50
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !50
  %145 = or disjoint i32 %137, 1, !dbg !51
  %146 = icmp slt i32 %145, 65, !dbg !52
  %147 = and i1 %53, %146, !dbg !53
  %148 = and i1 %44, %147, !dbg !54
  %149 = add i32 %57, %137, !dbg !55
  %150 = sext i32 %149 to i64, !dbg !56
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !56
  %152 = and i1 %13, %148, !dbg !57
  %153 = add i32 %49, %138, !dbg !58
  %154 = sext i32 %153 to i64, !dbg !59
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !59
  %156 = add i32 %49, %137, !dbg !60
  %157 = sext i32 %156 to i64, !dbg !61
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !61
  %159 = and i1 %60, %147, !dbg !62
  %160 = add i32 %49, %145, !dbg !63
  %161 = sext i32 %160 to i64, !dbg !64
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !64
  %163 = and i1 %13, %159, !dbg !65
  %164 = or disjoint i32 %135, 1, !dbg !42
  %165 = icmp slt i32 %164, 65, !dbg !66
  %166 = and i1 %60, %165, !dbg !33
  %167 = and i1 %46, %166, !dbg !67
  %168 = add i32 %71, %137, !dbg !68
  %169 = sext i32 %168 to i64, !dbg !69
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !69
  %171 = and i1 %13, %167, !dbg !70
  %172 = and i1 %53, %166, !dbg !71
  %173 = add i32 %73, %137, !dbg !72
  %174 = sext i32 %173 to i64, !dbg !73
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !73
  %176 = and i1 %13, %172, !dbg !74
  %177 = and i1 %147, %166, !dbg !75
  %178 = add i32 %75, %137, !dbg !44
  %179 = sext i32 %178 to i64, !dbg !76
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !76
  %181 = and i1 %13, %177, !dbg !77
  %182 = select i1 %46, i32 %138, i32 0, !dbg !23
  %183 = select i1 %44, i32 %136, i32 0, !dbg !78
  %184 = add nsw <2 x i32> %134, splat (i32 2), !dbg !79
  %185 = icmp sgt <2 x i32> %42, splat (i32 31), !dbg !80
  %186 = select <2 x i1> %185, <2 x i32> splat (i32 65), <2 x i32> zeroinitializer, !dbg !81
  %187 = icmp slt <2 x i32> %42, splat (i32 32), !dbg !82
  %188 = select <2 x i1> %187, <2 x i32> %184, <2 x i32> zeroinitializer, !dbg !83
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %51, i32 -8388608, i1 %51) #1, !dbg !48
  %190 = bitcast i32 %189 to float, !dbg !48
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %38, i32 -8388608, i1 %38) #1, !dbg !85
  %192 = bitcast i32 %191 to float, !dbg !85
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %56, i32 -8388608, i1 %56) #1, !dbg !85
  %194 = bitcast i32 %193 to float, !dbg !85
  %195 = fcmp ogt float %192, %85, !dbg !86
  %196 = fcmp ogt float %194, %190, !dbg !86
  %197 = fcmp uno float %192, 0.000000e+00, !dbg !90
  %198 = fcmp uno float %194, 0.000000e+00, !dbg !90
  %199 = or i1 %195, %197, !dbg !91
  %200 = or i1 %196, %198, !dbg !91
  %201 = select i1 %199, float %192, float %85, !dbg !92
  %202 = select i1 %200, float %194, float %190, !dbg !92
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %96, i32 -8388608, i1 %96) #1, !dbg !93
  %204 = bitcast i32 %203 to float, !dbg !93
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %151, i1 %152, i32 -8388608, i1 %152) #1, !dbg !93
  %206 = bitcast i32 %205 to float, !dbg !93
  %207 = fcmp olt float %201, %204, !dbg !94
  %208 = fcmp olt float %202, %206, !dbg !94
  %209 = fcmp uno float %204, 0.000000e+00, !dbg !96
  %210 = fcmp uno float %206, 0.000000e+00, !dbg !96
  %211 = or i1 %209, %207, !dbg !97
  %212 = or i1 %210, %208, !dbg !97
  %213 = select i1 %211, float %204, float %201, !dbg !98
  %214 = select i1 %212, float %206, float %202, !dbg !98
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %62, i32 -8388608, i1 %62) #1, !dbg !99
  %216 = bitcast i32 %215 to float, !dbg !99
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %63, i32 -8388608, i1 %63) #1, !dbg !99
  %218 = bitcast i32 %217 to float, !dbg !99
  %219 = fcmp olt float %213, %216, !dbg !100
  %220 = fcmp olt float %214, %218, !dbg !100
  %221 = fcmp uno float %216, 0.000000e+00, !dbg !102
  %222 = fcmp uno float %218, 0.000000e+00, !dbg !102
  %223 = or i1 %221, %219, !dbg !103
  %224 = or i1 %222, %220, !dbg !103
  %225 = select i1 %223, float %216, float %213, !dbg !104
  %226 = select i1 %224, float %218, float %214, !dbg !104
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %68, i32 -8388608, i1 %68) #1, !dbg !105
  %228 = bitcast i32 %227 to float, !dbg !105
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 %69, i32 -8388608, i1 %69) #1, !dbg !105
  %230 = bitcast i32 %229 to float, !dbg !105
  %231 = fcmp olt float %225, %228, !dbg !106
  %232 = fcmp olt float %226, %230, !dbg !106
  %233 = fcmp uno float %228, 0.000000e+00, !dbg !108
  %234 = fcmp uno float %230, 0.000000e+00, !dbg !108
  %235 = or i1 %233, %231, !dbg !109
  %236 = or i1 %234, %232, !dbg !109
  %237 = select i1 %235, float %228, float %225, !dbg !110
  %238 = select i1 %236, float %230, float %226, !dbg !110
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %107, i32 -8388608, i1 %107) #1, !dbg !111
  %240 = bitcast i32 %239 to float, !dbg !111
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %163, i32 -8388608, i1 %163) #1, !dbg !111
  %242 = bitcast i32 %241 to float, !dbg !111
  %243 = fcmp olt float %237, %240, !dbg !112
  %244 = fcmp olt float %238, %242, !dbg !112
  %245 = fcmp uno float %240, 0.000000e+00, !dbg !114
  %246 = fcmp uno float %242, 0.000000e+00, !dbg !114
  %247 = or i1 %245, %243, !dbg !115
  %248 = or i1 %246, %244, !dbg !115
  %249 = select i1 %247, float %240, float %237, !dbg !116
  %250 = select i1 %248, float %242, float %238, !dbg !116
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %115, i32 -8388608, i1 %115) #1, !dbg !117
  %252 = bitcast i32 %251 to float, !dbg !117
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %171, i32 -8388608, i1 %171) #1, !dbg !117
  %254 = bitcast i32 %253 to float, !dbg !117
  %255 = fcmp olt float %249, %252, !dbg !118
  %256 = fcmp olt float %250, %254, !dbg !118
  %257 = fcmp uno float %252, 0.000000e+00, !dbg !120
  %258 = fcmp uno float %254, 0.000000e+00, !dbg !120
  %259 = or i1 %257, %255, !dbg !121
  %260 = or i1 %258, %256, !dbg !121
  %261 = select i1 %259, float %252, float %249, !dbg !122
  %262 = select i1 %260, float %254, float %250, !dbg !122
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %120, i32 -8388608, i1 %120) #1, !dbg !123
  %264 = bitcast i32 %263 to float, !dbg !123
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %176, i32 -8388608, i1 %176) #1, !dbg !123
  %266 = bitcast i32 %265 to float, !dbg !123
  %267 = fcmp olt float %261, %264, !dbg !124
  %268 = fcmp olt float %262, %266, !dbg !124
  %269 = fcmp uno float %264, 0.000000e+00, !dbg !126
  %270 = fcmp uno float %266, 0.000000e+00, !dbg !126
  %271 = or i1 %269, %267, !dbg !127
  %272 = or i1 %270, %268, !dbg !127
  %273 = select i1 %271, float %264, float %261, !dbg !128
  %274 = select i1 %272, float %266, float %262, !dbg !128
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %125, i32 -8388608, i1 %125) #1, !dbg !129
  %276 = bitcast i32 %275 to float, !dbg !129
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %181, i32 -8388608, i1 %181) #1, !dbg !129
  %278 = bitcast i32 %277 to float, !dbg !129
  %279 = fcmp olt float %273, %276, !dbg !130
  %280 = fcmp olt float %274, %278, !dbg !130
  %281 = fcmp uno float %276, 0.000000e+00, !dbg !132
  %282 = fcmp uno float %278, 0.000000e+00, !dbg !132
  %283 = or i1 %281, %279, !dbg !133
  %284 = or i1 %282, %280, !dbg !133
  %285 = zext i1 %195 to i8, !dbg !134
  %286 = zext i1 %196 to i8, !dbg !134
  %287 = select i1 %207, i8 2, i8 %285, !dbg !135
  %288 = select i1 %208, i8 2, i8 %286, !dbg !135
  %289 = select i1 %219, i8 3, i8 %287, !dbg !136
  %290 = select i1 %220, i8 3, i8 %288, !dbg !136
  %291 = select i1 %231, i8 4, i8 %289, !dbg !137
  %292 = select i1 %232, i8 4, i8 %290, !dbg !137
  %293 = select i1 %243, i8 5, i8 %291, !dbg !138
  %294 = select i1 %244, i8 5, i8 %292, !dbg !138
  %295 = select i1 %255, i8 6, i8 %293, !dbg !139
  %296 = select i1 %256, i8 6, i8 %294, !dbg !139
  %297 = select i1 %267, i8 7, i8 %295, !dbg !140
  %298 = select i1 %268, i8 7, i8 %296, !dbg !140
  %299 = select i1 %279, i8 8, i8 %297, !dbg !141
  %300 = select i1 %280, i8 8, i8 %298, !dbg !141
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %33, i32 0, i1 %33) #1, !dbg !142
  %302 = bitcast i32 %301 to float, !dbg !142
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %51, i32 0, i1 %51) #1, !dbg !142
  %304 = bitcast i32 %303 to float, !dbg !142
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %38, i32 0, i1 %38) #1, !dbg !143
  %306 = bitcast i32 %305 to float, !dbg !143
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %56, i32 0, i1 %56) #1, !dbg !143
  %308 = bitcast i32 %307 to float, !dbg !143
  %309 = fadd float %302, %306, !dbg !144
  %310 = fadd float %304, %308, !dbg !144
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %96, i32 0, i1 %96) #1, !dbg !145
  %312 = bitcast i32 %311 to float, !dbg !145
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %151, i1 %152, i32 0, i1 %152) #1, !dbg !145
  %314 = bitcast i32 %313 to float, !dbg !145
  %315 = fadd float %309, %312, !dbg !146
  %316 = fadd float %310, %314, !dbg !146
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %62, i32 0, i1 %62) #1, !dbg !147
  %318 = bitcast i32 %317 to float, !dbg !147
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %63, i32 0, i1 %63) #1, !dbg !147
  %320 = bitcast i32 %319 to float, !dbg !147
  %321 = fadd float %315, %318, !dbg !148
  %322 = fadd float %316, %320, !dbg !148
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %68, i32 0, i1 %68) #1, !dbg !149
  %324 = bitcast i32 %323 to float, !dbg !149
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 %69, i32 0, i1 %69) #1, !dbg !149
  %326 = bitcast i32 %325 to float, !dbg !149
  %327 = fadd float %321, %324, !dbg !150
  %328 = fadd float %322, %326, !dbg !150
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %107, i32 0, i1 %107) #1, !dbg !151
  %330 = bitcast i32 %329 to float, !dbg !151
  %331 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %163, i32 0, i1 %163) #1, !dbg !151
  %332 = bitcast i32 %331 to float, !dbg !151
  %333 = fadd float %327, %330, !dbg !152
  %334 = fadd float %328, %332, !dbg !152
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %115, i32 0, i1 %115) #1, !dbg !153
  %336 = bitcast i32 %335 to float, !dbg !153
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %171, i32 0, i1 %171) #1, !dbg !153
  %338 = bitcast i32 %337 to float, !dbg !153
  %339 = fadd float %333, %336, !dbg !154
  %340 = fadd float %334, %338, !dbg !154
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %120, i32 0, i1 %120) #1, !dbg !155
  %342 = bitcast i32 %341 to float, !dbg !155
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %176, i32 0, i1 %176) #1, !dbg !155
  %344 = bitcast i32 %343 to float, !dbg !155
  %345 = fadd float %339, %342, !dbg !156
  %346 = fadd float %340, %344, !dbg !156
  %347 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %125, i32 0, i1 %125) #1, !dbg !157
  %348 = bitcast i32 %347 to float, !dbg !157
  %349 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %181, i32 0, i1 %181) #1, !dbg !157
  %350 = bitcast i32 %349 to float, !dbg !157
  %351 = fadd float %345, %348, !dbg !158
  %352 = fadd float %346, %350, !dbg !158
  %353 = add nsw <2 x i32> %188, %186, !dbg !84
  %354 = extractelement <2 x i32> %133, i64 0
  %reass.add = sub nsw i32 %354, %126
  %355 = extractelement <2 x i32> %133, i64 1
  %reass.mul = mul nsw i32 %reass.add, %355
  %reass.add6 = sub nsw i32 %126, %354
  %reass.mul7 = mul nsw i32 %reass.add6, %127
  %356 = add nsw i32 %reass.mul7, %reass.mul, !dbg !159
  %357 = extractelement <2 x i32> %353, i64 0
  %reass.add8 = sub nsw i32 %357, %182
  %358 = extractelement <2 x i32> %353, i64 1
  %reass.mul9 = mul nsw i32 %reass.add8, %358
  %reass.add10 = sub nsw i32 %182, %357
  %reass.mul11 = mul nsw i32 %reass.add10, %183
  %359 = add nsw i32 %reass.mul11, %reass.mul9, !dbg !159
  %360 = sitofp i32 %356 to float, !dbg !160
  %361 = sitofp i32 %359 to float, !dbg !160
  %362 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %351, float %360) #1, !dbg !160
  %363 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float %361) #1, !dbg !160
  %364 = mul i32 %16, 1120, !dbg !161
  %365 = mul i32 %17, 1120, !dbg !161
  %366 = add i32 %364, %.decomposed, !dbg !162
  %367 = add i32 %365, %.decomposed13, !dbg !162
  %368 = sext i32 %366 to i64, !dbg !163
  %369 = getelementptr float, ptr addrspace(1) %1, i64 %368, !dbg !163
  %370 = sext i32 %367 to i64, !dbg !163
  %371 = getelementptr float, ptr addrspace(1) %1, i64 %370, !dbg !163
  %372 = bitcast float %273 to i32, !dbg !164
  %373 = select i1 %283, i32 %275, i32 %372, !dbg !165
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %373, ptr addrspace(1) %369, i1 %12) #1, !dbg !164
  %374 = bitcast float %274 to i32, !dbg !164
  %375 = select i1 %284, i32 %277, i32 %374, !dbg !165
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %375, ptr addrspace(1) %371, i1 %13) #1, !dbg !164
  %376 = mul i32 %16, 1152, !dbg !166
  %377 = mul i32 %17, 1152, !dbg !166
  %378 = add i32 %376, %.decomposed, !dbg !167
  %379 = add i32 %377, %.decomposed13, !dbg !167
  %380 = sext i32 %378 to i64, !dbg !168
  %381 = getelementptr i8, ptr addrspace(1) %2, i64 %380, !dbg !168
  %382 = sext i32 %379 to i64, !dbg !168
  %383 = getelementptr i8, ptr addrspace(1) %2, i64 %382, !dbg !168
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %299, ptr addrspace(1) %381, i1 %12) #1, !dbg !169
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %300, ptr addrspace(1) %383, i1 %13) #1, !dbg !169
  %384 = getelementptr float, ptr addrspace(1) %3, i64 %368, !dbg !170
  %385 = getelementptr float, ptr addrspace(1) %3, i64 %370, !dbg !170
  %386 = bitcast float %362 to i32, !dbg !171
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %386, ptr addrspace(1) %384, i1 %12) #1, !dbg !171
  %387 = bitcast float %363 to i32, !dbg !171
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %387, ptr addrspace(1) %385, i1 %13) #1, !dbg !171
  ret void, !dbg !172
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4aqms3wywnrd2ljmzlmncin5sngjhiautlfh5cp6pscqty3ru74.py", directory: "inductor_cache/4a")
!4 = !{ptr @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_max_pool2d_with_indices_11", linkageName: "triton_poi_fused_avg_pool2d_max_pool2d_with_indices_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 39, column: 60, scope: !7)
!19 = !DILocation(line: 25, column: 19, scope: !7)
!20 = !DILocation(line: 39, column: 50, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 35, column: 19, scope: !7)
!23 = !DILocation(line: 122, column: 61, scope: !7)
!24 = !DILocation(line: 38, column: 19, scope: !7)
!25 = !DILocation(line: 39, column: 39, scope: !7)
!26 = !DILocation(line: 39, column: 46, scope: !7)
!27 = !DILocation(line: 39, column: 73, scope: !7)
!28 = !DILocation(line: 41, column: 21, scope: !7)
!29 = !DILocation(line: 44, column: 19, scope: !7)
!30 = !DILocation(line: 45, column: 46, scope: !7)
!31 = !DILocation(line: 45, column: 73, scope: !7)
!32 = !DILocation(line: 52, column: 46, scope: !7)
!33 = !DILocation(line: 70, column: 20, scope: !7)
!34 = !DILocation(line: 58, column: 20, scope: !7)
!35 = !DILocation(line: 59, column: 72, scope: !7)
!36 = !DILocation(line: 61, column: 20, scope: !7)
!37 = !DILocation(line: 62, column: 65, scope: !7)
!38 = !DILocation(line: 72, column: 43, scope: !7)
!39 = !DILocation(line: 75, column: 43, scope: !7)
!40 = !DILocation(line: 78, column: 43, scope: !7)
!41 = !DILocation(line: 34, column: 20, scope: !7)
!42 = !DILocation(line: 67, column: 16, scope: !7)
!43 = !DILocation(line: 28, column: 18, scope: !7)
!44 = !DILocation(line: 78, column: 52, scope: !7)
!45 = !DILocation(line: 34, column: 18, scope: !7)
!46 = !DILocation(line: 39, column: 55, scope: !7)
!47 = !DILocation(line: 39, column: 31, scope: !7)
!48 = !DILocation(line: 39, column: 65, scope: !7)
!49 = !DILocation(line: 45, column: 55, scope: !7)
!50 = !DILocation(line: 45, column: 31, scope: !7)
!51 = !DILocation(line: 47, column: 16, scope: !7)
!52 = !DILocation(line: 49, column: 20, scope: !7)
!53 = !DILocation(line: 50, column: 20, scope: !7)
!54 = !DILocation(line: 51, column: 19, scope: !7)
!55 = !DILocation(line: 52, column: 55, scope: !7)
!56 = !DILocation(line: 52, column: 31, scope: !7)
!57 = !DILocation(line: 52, column: 73, scope: !7)
!58 = !DILocation(line: 59, column: 54, scope: !7)
!59 = !DILocation(line: 59, column: 31, scope: !7)
!60 = !DILocation(line: 62, column: 47, scope: !7)
!61 = !DILocation(line: 62, column: 31, scope: !7)
!62 = !DILocation(line: 64, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 51, scope: !7)
!64 = !DILocation(line: 65, column: 31, scope: !7)
!65 = !DILocation(line: 65, column: 69, scope: !7)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 71, column: 20, scope: !7)
!68 = !DILocation(line: 72, column: 52, scope: !7)
!69 = !DILocation(line: 72, column: 31, scope: !7)
!70 = !DILocation(line: 72, column: 70, scope: !7)
!71 = !DILocation(line: 74, column: 20, scope: !7)
!72 = !DILocation(line: 75, column: 52, scope: !7)
!73 = !DILocation(line: 75, column: 31, scope: !7)
!74 = !DILocation(line: 75, column: 70, scope: !7)
!75 = !DILocation(line: 77, column: 20, scope: !7)
!76 = !DILocation(line: 78, column: 31, scope: !7)
!77 = !DILocation(line: 78, column: 70, scope: !7)
!78 = !DILocation(line: 122, column: 132, scope: !7)
!79 = !DILocation(line: 122, column: 178, scope: !7)
!80 = !DILocation(line: 122, column: 174, scope: !7)
!81 = !DILocation(line: 122, column: 165, scope: !7)
!82 = !DILocation(line: 122, column: 215, scope: !7)
!83 = !DILocation(line: 122, column: 201, scope: !7)
!84 = !DILocation(line: 122, column: 187, scope: !7)
!85 = !DILocation(line: 45, column: 65, scope: !7)
!86 = !DILocation(line: 118, column: 15, scope: !87, inlinedAt: !89)
!87 = distinct !DILexicalBlockFile(scope: !7, file: !88, discriminator: 0)
!88 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!89 = !DILocation(line: 46, column: 42, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !87, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !87, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !89)
!93 = !DILocation(line: 52, column: 65, scope: !7)
!94 = !DILocation(line: 118, column: 15, scope: !87, inlinedAt: !95)
!95 = !DILocation(line: 53, column: 42, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !87, inlinedAt: !95)
!97 = !DILocation(line: 120, column: 16, scope: !87, inlinedAt: !95)
!98 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !95)
!99 = !DILocation(line: 59, column: 64, scope: !7)
!100 = !DILocation(line: 118, column: 15, scope: !87, inlinedAt: !101)
!101 = !DILocation(line: 60, column: 42, scope: !7)
!102 = !DILocation(line: 120, column: 21, scope: !87, inlinedAt: !101)
!103 = !DILocation(line: 120, column: 16, scope: !87, inlinedAt: !101)
!104 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !101)
!105 = !DILocation(line: 62, column: 57, scope: !7)
!106 = !DILocation(line: 118, column: 15, scope: !87, inlinedAt: !107)
!107 = !DILocation(line: 63, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !87, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !87, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !107)
!111 = !DILocation(line: 65, column: 61, scope: !7)
!112 = !DILocation(line: 118, column: 15, scope: !87, inlinedAt: !113)
!113 = !DILocation(line: 66, column: 42, scope: !7)
!114 = !DILocation(line: 120, column: 21, scope: !87, inlinedAt: !113)
!115 = !DILocation(line: 120, column: 16, scope: !87, inlinedAt: !113)
!116 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !113)
!117 = !DILocation(line: 72, column: 62, scope: !7)
!118 = !DILocation(line: 118, column: 15, scope: !87, inlinedAt: !119)
!119 = !DILocation(line: 73, column: 42, scope: !7)
!120 = !DILocation(line: 120, column: 21, scope: !87, inlinedAt: !119)
!121 = !DILocation(line: 120, column: 16, scope: !87, inlinedAt: !119)
!122 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !119)
!123 = !DILocation(line: 75, column: 62, scope: !7)
!124 = !DILocation(line: 118, column: 15, scope: !87, inlinedAt: !125)
!125 = !DILocation(line: 76, column: 42, scope: !7)
!126 = !DILocation(line: 120, column: 21, scope: !87, inlinedAt: !125)
!127 = !DILocation(line: 120, column: 16, scope: !87, inlinedAt: !125)
!128 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !125)
!129 = !DILocation(line: 78, column: 62, scope: !7)
!130 = !DILocation(line: 118, column: 15, scope: !87, inlinedAt: !131)
!131 = !DILocation(line: 79, column: 42, scope: !7)
!132 = !DILocation(line: 120, column: 21, scope: !87, inlinedAt: !131)
!133 = !DILocation(line: 120, column: 16, scope: !87, inlinedAt: !131)
!134 = !DILocation(line: 83, column: 35, scope: !7)
!135 = !DILocation(line: 86, column: 35, scope: !7)
!136 = !DILocation(line: 89, column: 35, scope: !7)
!137 = !DILocation(line: 92, column: 35, scope: !7)
!138 = !DILocation(line: 95, column: 35, scope: !7)
!139 = !DILocation(line: 98, column: 35, scope: !7)
!140 = !DILocation(line: 101, column: 35, scope: !7)
!141 = !DILocation(line: 104, column: 35, scope: !7)
!142 = !DILocation(line: 105, column: 65, scope: !7)
!143 = !DILocation(line: 106, column: 65, scope: !7)
!144 = !DILocation(line: 107, column: 20, scope: !7)
!145 = !DILocation(line: 108, column: 65, scope: !7)
!146 = !DILocation(line: 109, column: 20, scope: !7)
!147 = !DILocation(line: 110, column: 64, scope: !7)
!148 = !DILocation(line: 111, column: 20, scope: !7)
!149 = !DILocation(line: 112, column: 57, scope: !7)
!150 = !DILocation(line: 113, column: 20, scope: !7)
!151 = !DILocation(line: 114, column: 61, scope: !7)
!152 = !DILocation(line: 115, column: 20, scope: !7)
!153 = !DILocation(line: 116, column: 62, scope: !7)
!154 = !DILocation(line: 117, column: 20, scope: !7)
!155 = !DILocation(line: 118, column: 62, scope: !7)
!156 = !DILocation(line: 119, column: 20, scope: !7)
!157 = !DILocation(line: 120, column: 62, scope: !7)
!158 = !DILocation(line: 121, column: 20, scope: !7)
!159 = !DILocation(line: 122, column: 434, scope: !7)
!160 = !DILocation(line: 123, column: 20, scope: !7)
!161 = !DILocation(line: 124, column: 35, scope: !7)
!162 = !DILocation(line: 124, column: 30, scope: !7)
!163 = !DILocation(line: 124, column: 25, scope: !7)
!164 = !DILocation(line: 124, column: 47, scope: !7)
!165 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !131)
!166 = !DILocation(line: 125, column: 35, scope: !7)
!167 = !DILocation(line: 125, column: 30, scope: !7)
!168 = !DILocation(line: 125, column: 25, scope: !7)
!169 = !DILocation(line: 125, column: 47, scope: !7)
!170 = !DILocation(line: 126, column: 25, scope: !7)
!171 = !DILocation(line: 126, column: 47, scope: !7)
!172 = !DILocation(line: 126, column: 4, scope: !7)
