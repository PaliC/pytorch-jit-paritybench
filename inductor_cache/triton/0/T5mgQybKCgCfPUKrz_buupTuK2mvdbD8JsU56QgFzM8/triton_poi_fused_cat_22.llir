; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 510, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 1, !dbg !13
  %17 = icmp slt i32 %15, 77312, !dbg !14
  %.frozen = freeze i32 %15, !dbg !15
  %18 = sdiv i32 %.frozen, 19328, !dbg !15
  %19 = mul i32 %18, 19328, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = srem i32 %16, 19328, !dbg !16
  %21 = icmp slt i32 %.decomposed, 12544, !dbg !17
  %22 = shl nsw i32 %18, 6, !dbg !18
  %.lhs.trunc = trunc nsw i32 %.decomposed to i16, !dbg !19
  %23 = sdiv i16 %.lhs.trunc, 196, !dbg !19
  %.lhs.trunc11 = trunc nsw i32 %20 to i16, !dbg !19
  %24 = sdiv i16 %.lhs.trunc11, 196, !dbg !19
  %.lhs.trunc13 = trunc nsw i16 %23 to i8, !dbg !20
  %25 = srem i8 %.lhs.trunc13, 64, !dbg !20
  %.sext14 = sext i8 %25 to i32, !dbg !20
  %.lhs.trunc15 = trunc nsw i16 %24 to i8, !dbg !20
  %26 = srem i8 %.lhs.trunc15, 64, !dbg !20
  %.sext16 = sext i8 %26 to i32, !dbg !20
  %27 = add nsw i32 %22, %.sext14, !dbg !21
  %28 = add nsw i32 %22, %.sext16, !dbg !21
  %29 = sext i32 %27 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = sext i32 %28 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = and i1 %17, %21, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %33, i32 0, i1 %33) #3, !dbg !24
  %35 = bitcast i32 %34 to float, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %33, i32 0, i1 %33) #3, !dbg !24
  %37 = bitcast i32 %36 to float, !dbg !24
  %38 = select i1 %21, float 1.000000e+00, float 0.000000e+00, !dbg !25
  %39 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %35, float %38) #3, !dbg !26
  %40 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %37, float %38) #3, !dbg !26
  %41 = add nsw i32 %.decomposed, -12544, !dbg !27
  %42 = icmp ult i32 %41, 6272, !dbg !27
  %43 = mul nsw i32 %18, 6272, !dbg !28
  %44 = add nsw i32 %43, %41, !dbg !29
  %45 = sext i32 %44 to i64, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !30
  %47 = and i1 %17, %42, !dbg !31
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #3, !dbg !32
  %49 = icmp sgt i32 %.decomposed, 18815, !dbg !33
  %50 = shl nsw i32 %18, 9, !dbg !34
  %51 = add nsw i32 %.decomposed, -18816, !dbg !35
  %52 = add nsw i32 %50, %51, !dbg !36
  %53 = sext i32 %52 to i64, !dbg !37
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !37
  %55 = and i1 %17, %49, !dbg !38
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %54, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #3, !dbg !39
  %57 = sext i32 %51 to i64, !dbg !40
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !40
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %58, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #3, !dbg !41
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !42
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #3, !dbg !43
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !43
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !43
  %64 = bitcast i32 %62 to float, !dbg !43
  %65 = bitcast i32 %63 to float, !dbg !43
  %66 = fadd float %64, 0x3EE4F8B580000000, !dbg !44
  %67 = fadd float %65, 0x3EE4F8B580000000, !dbg !44
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i = icmp eq i32 %68, 0, !dbg !45
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i = icmp eq i32 %69, 0, !dbg !45
  br i1 %.not.i, label %75, label %70, !dbg !45

70:                                               ; preds = %9
  br i1 %.not1.i, label %73, label %71, !dbg !45

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

75:                                               ; preds = %9
  br i1 %.not1.i, label %78, label %76, !dbg !45

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %71, %73, %76, %78
  %.0.i = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !45
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i6 = icmp eq i32 %80, 0, !dbg !45
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i9 = icmp eq i32 %81, 0, !dbg !45
  br i1 %.not.i6, label %87, label %82, !dbg !45

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %85, label %83, !dbg !45

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %90, label %88, !dbg !45

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

__nv_sqrtf.exit10:                                ; preds = %83, %85, %88, %90
  %.0.i8 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !45
  %92 = extractvalue { i32, i32 } %56, 1, !dbg !39
  %93 = bitcast i32 %92 to float, !dbg !39
  %94 = extractvalue { i32, i32 } %59, 1, !dbg !41
  %95 = bitcast i32 %94 to float, !dbg !41
  %96 = fsub float %93, %95, !dbg !46
  %97 = extractvalue { i32, i32 } %56, 0, !dbg !39
  %98 = bitcast i32 %97 to float, !dbg !39
  %99 = extractvalue { i32, i32 } %59, 0, !dbg !41
  %100 = bitcast i32 %99 to float, !dbg !41
  %101 = fsub float %98, %100, !dbg !46
  %102 = extractvalue { i32, i32 } %48, 1, !dbg !32
  %103 = bitcast i32 %102 to float, !dbg !32
  %104 = extractvalue { i32, i32 } %48, 0, !dbg !32
  %105 = bitcast i32 %104 to float, !dbg !32
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !47
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !47
  %108 = fmul float %101, %106, !dbg !48
  %109 = fmul float %96, %107, !dbg !48
  %110 = getelementptr float, ptr addrspace(1) %5, i64 %57, !dbg !49
  %111 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %110, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #3, !dbg !50
  %112 = extractvalue { i32, i32 } %111, 0, !dbg !50
  %113 = extractvalue { i32, i32 } %111, 1, !dbg !50
  %114 = bitcast i32 %112 to float, !dbg !50
  %115 = bitcast i32 %113 to float, !dbg !50
  %116 = fmul float %108, %114, !dbg !51
  %117 = fmul float %109, %115, !dbg !51
  %118 = getelementptr float, ptr addrspace(1) %6, i64 %57, !dbg !52
  %119 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %118, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #3, !dbg !53
  %120 = extractvalue { i32, i32 } %119, 0, !dbg !53
  %121 = extractvalue { i32, i32 } %119, 1, !dbg !53
  %122 = bitcast i32 %120 to float, !dbg !53
  %123 = bitcast i32 %121 to float, !dbg !53
  %124 = fadd float %116, %122, !dbg !54
  %125 = fadd float %117, %123, !dbg !54
  %.inv = fcmp ole float %124, 0.000000e+00, !dbg !55
  %126 = select i1 %.inv, float 0.000000e+00, float %124, !dbg !55
  %.inv5 = fcmp ole float %125, 0.000000e+00, !dbg !55
  %127 = select i1 %.inv5, float 0.000000e+00, float %125, !dbg !55
  %128 = fcmp olt float %126, 6.000000e+00, !dbg !59
  %129 = fcmp olt float %127, 6.000000e+00, !dbg !59
  %130 = fcmp uno float %126, 0.000000e+00, !dbg !61
  %131 = fcmp uno float %127, 0.000000e+00, !dbg !61
  %132 = or i1 %128, %130, !dbg !62
  %133 = or i1 %129, %131, !dbg !62
  %134 = select i1 %132, float %126, float 6.000000e+00, !dbg !63
  %135 = select i1 %133, float %127, float 6.000000e+00, !dbg !63
  %136 = select i1 %49, float %134, float 0.000000e+00, !dbg !64
  %137 = select i1 %49, float %135, float 0.000000e+00, !dbg !64
  %138 = select i1 %42, float %105, float %136, !dbg !65
  %139 = select i1 %42, float %103, float %137, !dbg !65
  %140 = select i1 %21, float %39, float %138, !dbg !66
  %141 = select i1 %21, float %40, float %139, !dbg !66
  %142 = sext i32 %15 to i64, !dbg !67
  %143 = getelementptr float, ptr addrspace(1) %7, i64 %142, !dbg !67
  %144 = bitcast float %140 to i32, !dbg !68
  %145 = bitcast float %141 to i32, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %144, i32 %145, ptr addrspace(1) %143, i1 %17) #3, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuubzoplxitwce3canav7w5ljnakvyjxwqw3hlu25i5cg3d5bcwk.py", directory: "inductor_cache/uu")
!4 = !{ptr @triton_poi_fused_cat_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_22, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_22", linkageName: "triton_poi_fused_cat_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 18, scope: !7)
!18 = !DILocation(line: 40, column: 34, scope: !7)
!19 = !DILocation(line: 40, column: 50, scope: !7)
!20 = !DILocation(line: 40, column: 57, scope: !7)
!21 = !DILocation(line: 40, column: 41, scope: !7)
!22 = !DILocation(line: 40, column: 31, scope: !7)
!23 = !DILocation(line: 40, column: 72, scope: !7)
!24 = !DILocation(line: 40, column: 64, scope: !7)
!25 = !DILocation(line: 43, column: 35, scope: !7)
!26 = !DILocation(line: 44, column: 20, scope: !7)
!27 = !DILocation(line: 50, column: 20, scope: !7)
!28 = !DILocation(line: 51, column: 36, scope: !7)
!29 = !DILocation(line: 51, column: 42, scope: !7)
!30 = !DILocation(line: 51, column: 31, scope: !7)
!31 = !DILocation(line: 51, column: 67, scope: !7)
!32 = !DILocation(line: 51, column: 59, scope: !7)
!33 = !DILocation(line: 52, column: 20, scope: !7)
!34 = !DILocation(line: 55, column: 35, scope: !7)
!35 = !DILocation(line: 55, column: 52, scope: !7)
!36 = !DILocation(line: 55, column: 41, scope: !7)
!37 = !DILocation(line: 55, column: 31, scope: !7)
!38 = !DILocation(line: 55, column: 66, scope: !7)
!39 = !DILocation(line: 55, column: 58, scope: !7)
!40 = !DILocation(line: 56, column: 31, scope: !7)
!41 = !DILocation(line: 56, column: 47, scope: !7)
!42 = !DILocation(line: 58, column: 31, scope: !7)
!43 = !DILocation(line: 58, column: 47, scope: !7)
!44 = !DILocation(line: 60, column: 20, scope: !7)
!45 = !DILocation(line: 61, column: 27, scope: !7)
!46 = !DILocation(line: 57, column: 20, scope: !7)
!47 = !DILocation(line: 63, column: 20, scope: !7)
!48 = !DILocation(line: 66, column: 20, scope: !7)
!49 = !DILocation(line: 67, column: 31, scope: !7)
!50 = !DILocation(line: 67, column: 47, scope: !7)
!51 = !DILocation(line: 68, column: 20, scope: !7)
!52 = !DILocation(line: 69, column: 31, scope: !7)
!53 = !DILocation(line: 69, column: 47, scope: !7)
!54 = !DILocation(line: 70, column: 20, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 72, column: 42, scope: !7)
!59 = !DILocation(line: 110, column: 15, scope: !56, inlinedAt: !60)
!60 = !DILocation(line: 74, column: 42, scope: !7)
!61 = !DILocation(line: 112, column: 21, scope: !56, inlinedAt: !60)
!62 = !DILocation(line: 112, column: 16, scope: !56, inlinedAt: !60)
!63 = !DILocation(line: 113, column: 29, scope: !56, inlinedAt: !60)
!64 = !DILocation(line: 76, column: 35, scope: !7)
!65 = !DILocation(line: 77, column: 35, scope: !7)
!66 = !DILocation(line: 0, scope: !7)
!67 = !DILocation(line: 79, column: 25, scope: !7)
!68 = !DILocation(line: 79, column: 37, scope: !7)
!69 = !DILocation(line: 79, column: 4, scope: !7)
