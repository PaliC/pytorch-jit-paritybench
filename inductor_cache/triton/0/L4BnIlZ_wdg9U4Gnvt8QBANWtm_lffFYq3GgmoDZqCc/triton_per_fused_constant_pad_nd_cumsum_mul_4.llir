; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_constant_pad_nd_cumsum_mul_4(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 28, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %12 = lshr i32 %7, 5, !dbg !15
  %13 = lshr i32 %7, 3, !dbg !15
  %14 = and i32 %13, 31, !dbg !15
  %15 = icmp samesign ult i32 %14, 17, !dbg !16
  %.frozen = freeze i32 %10, !dbg !17
  %16 = sdiv i32 %.frozen, 16, !dbg !17
  %17 = mul i32 %16, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %17, !dbg !18
  %.not = icmp eq i32 %14, 0, !dbg !19
  %18 = shl nuw nsw i32 %14, 4, !dbg !20
  %19 = shl i32 %16, 8, !dbg !21
  %20 = add nsw i32 %.decomposed, %18, !dbg !22
  %21 = add nsw i32 %20, -16, !dbg !23
  %22 = add i32 %21, %19, !dbg !24
  %23 = sext i32 %22 to i64, !dbg !25
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !25
  %25 = add nsw i32 %14, -1, !dbg !26
  %26 = icmp ult i32 %25, 16, !dbg !26
  %27 = and i1 %26, %11, !dbg !27
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #3, !dbg !28
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !28
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !28
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !28
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !28
  %33 = bitcast i32 %29 to float, !dbg !28
  %34 = bitcast i32 %30 to float, !dbg !28
  %35 = bitcast i32 %31 to float, !dbg !28
  %36 = bitcast i32 %32 to float, !dbg !28
  %37 = fmul float %33, 0x4023FF7CE0000000, !dbg !29
  %38 = fmul float %34, 0x4023FF7CE0000000, !dbg !29
  %39 = fmul float %35, 0x4023FF7CE0000000, !dbg !29
  %40 = fmul float %36, 0x4023FF7CE0000000, !dbg !29
  %41 = select i1 %.not, float 0x3F50624DE0000000, float %37, !dbg !30
  %42 = select i1 %.not, float 0x3F50624DE0000000, float %38, !dbg !30
  %43 = select i1 %.not, float 0x3F50624DE0000000, float %39, !dbg !30
  %44 = select i1 %.not, float 0x3F50624DE0000000, float %40, !dbg !30
  %45 = and i32 %7, 7, !dbg !31
  %46 = and i32 %13, 3, !dbg !31
  %47 = and i32 %12, 7, !dbg !31
  %48 = bitcast float %41 to i32, !dbg !31
  %49 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %48, i32 8, i32 0), !dbg !31
  %50 = bitcast i32 %49 to float, !dbg !31
  %.not1 = icmp eq i32 %46, 0, !dbg !31
  %51 = fadd float %41, %50, !dbg !32
  %52 = select i1 %.not1, float %41, float %51, !dbg !31
  %53 = bitcast float %52 to i32, !dbg !31
  %54 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %53, i32 16, i32 0), !dbg !31
  %55 = bitcast i32 %54 to float, !dbg !31
  %56 = icmp samesign ugt i32 %46, 1, !dbg !31
  %57 = fadd float %52, %55, !dbg !32
  %58 = select i1 %56, float %57, float %52, !dbg !31
  %59 = bitcast float %42 to i32, !dbg !31
  %60 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %59, i32 8, i32 0), !dbg !31
  %61 = bitcast i32 %60 to float, !dbg !31
  %62 = fadd float %42, %61, !dbg !32
  %63 = select i1 %.not1, float %42, float %62, !dbg !31
  %64 = bitcast float %63 to i32, !dbg !31
  %65 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %64, i32 16, i32 0), !dbg !31
  %66 = bitcast i32 %65 to float, !dbg !31
  %67 = fadd float %63, %66, !dbg !32
  %68 = select i1 %56, float %67, float %63, !dbg !31
  %69 = bitcast float %43 to i32, !dbg !31
  %70 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %69, i32 8, i32 0), !dbg !31
  %71 = bitcast i32 %70 to float, !dbg !31
  %72 = fadd float %43, %71, !dbg !32
  %73 = select i1 %.not1, float %43, float %72, !dbg !31
  %74 = bitcast float %73 to i32, !dbg !31
  %75 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %74, i32 16, i32 0), !dbg !31
  %76 = bitcast i32 %75 to float, !dbg !31
  %77 = fadd float %73, %76, !dbg !32
  %78 = select i1 %56, float %77, float %73, !dbg !31
  %79 = bitcast float %44 to i32, !dbg !31
  %80 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %79, i32 8, i32 0), !dbg !31
  %81 = bitcast i32 %80 to float, !dbg !31
  %82 = fadd float %44, %81, !dbg !32
  %83 = select i1 %.not1, float %44, float %82, !dbg !31
  %84 = bitcast float %83 to i32, !dbg !31
  %85 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %84, i32 16, i32 0), !dbg !31
  %86 = bitcast i32 %85 to float, !dbg !31
  %87 = fadd float %83, %86, !dbg !32
  %88 = select i1 %56, float %87, float %83, !dbg !31
  %89 = icmp eq i32 %46, 3, !dbg !31
  %90 = shl nuw nsw i32 %47, 3, !dbg !31
  %91 = or disjoint i32 %90, %45, !dbg !31
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i32 %91, !dbg !31
  %93 = bitcast float %58 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 %89) #3, !dbg !31
  %94 = or disjoint i32 %91, 64, !dbg !31
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !31
  %96 = bitcast float %68 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 %89) #3, !dbg !31
  %97 = or disjoint i32 %91, 128, !dbg !31
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97, !dbg !31
  %99 = bitcast float %78 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 %89) #3, !dbg !31
  %100 = or disjoint i32 %91, 192, !dbg !31
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !31
  %102 = bitcast float %88 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 %89) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.not2 = icmp eq i32 %47, 0, !dbg !31
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %45, !dbg !31
  %104 = load float, ptr addrspace(3) %103, align 4, !dbg !31
  %105 = or disjoint i32 %45, 8, !dbg !31
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !31
  %107 = load float, ptr addrspace(3) %106, align 4, !dbg !31
  %108 = icmp samesign ugt i32 %47, 1, !dbg !31
  %109 = fadd float %104, %107, !dbg !32
  %110 = select i1 %108, float %109, float %104, !dbg !31
  %111 = or disjoint i32 %45, 16, !dbg !31
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !31
  %113 = load float, ptr addrspace(3) %112, align 4, !dbg !31
  %114 = icmp samesign ugt i32 %47, 2, !dbg !31
  %115 = fadd float %109, %113, !dbg !32
  %116 = select i1 %114, float %115, float %110, !dbg !31
  %117 = or disjoint i32 %45, 24, !dbg !31
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !31
  %119 = load float, ptr addrspace(3) %118, align 4, !dbg !31
  %120 = icmp samesign ugt i32 %47, 3, !dbg !31
  %121 = fadd float %115, %119, !dbg !32
  %122 = select i1 %120, float %121, float %116, !dbg !31
  %123 = or disjoint i32 %45, 32, !dbg !31
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !31
  %125 = load float, ptr addrspace(3) %124, align 4, !dbg !31
  %126 = icmp samesign ugt i32 %47, 4, !dbg !31
  %127 = fadd float %121, %125, !dbg !32
  %128 = select i1 %126, float %127, float %122, !dbg !31
  %129 = or disjoint i32 %45, 40, !dbg !31
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i32 %129, !dbg !31
  %131 = load float, ptr addrspace(3) %130, align 4, !dbg !31
  %132 = icmp samesign ugt i32 %47, 5, !dbg !31
  %133 = fadd float %127, %131, !dbg !32
  %134 = select i1 %132, float %133, float %128, !dbg !31
  %135 = or disjoint i32 %45, 48, !dbg !31
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !31
  %137 = load float, ptr addrspace(3) %136, align 4, !dbg !31
  %138 = icmp eq i32 %47, 7, !dbg !31
  %139 = fadd float %133, %137, !dbg !32
  %140 = select i1 %138, float %139, float %134, !dbg !31
  %141 = fadd float %58, %140, !dbg !32
  %142 = select i1 %.not2, float %58, float %141, !dbg !31
  %143 = bitcast float %142 to i32, !dbg !31
  %144 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %143, i32 8, i32 0), !dbg !31
  %145 = or disjoint i32 %45, 64, !dbg !31
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !31
  %147 = load float, ptr addrspace(3) %146, align 4, !dbg !31
  %148 = or disjoint i32 %45, 72, !dbg !31
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !31
  %150 = load float, ptr addrspace(3) %149, align 4, !dbg !31
  %151 = fadd float %147, %150, !dbg !32
  %152 = select i1 %108, float %151, float %147, !dbg !31
  %153 = or disjoint i32 %45, 80, !dbg !31
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !31
  %155 = load float, ptr addrspace(3) %154, align 4, !dbg !31
  %156 = fadd float %151, %155, !dbg !32
  %157 = select i1 %114, float %156, float %152, !dbg !31
  %158 = or disjoint i32 %45, 88, !dbg !31
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i32 %158, !dbg !31
  %160 = load float, ptr addrspace(3) %159, align 4, !dbg !31
  %161 = fadd float %156, %160, !dbg !32
  %162 = select i1 %120, float %161, float %157, !dbg !31
  %163 = or disjoint i32 %45, 96, !dbg !31
  %164 = getelementptr float, ptr addrspace(3) @global_smem, i32 %163, !dbg !31
  %165 = load float, ptr addrspace(3) %164, align 4, !dbg !31
  %166 = fadd float %161, %165, !dbg !32
  %167 = select i1 %126, float %166, float %162, !dbg !31
  %168 = or disjoint i32 %45, 104, !dbg !31
  %169 = getelementptr float, ptr addrspace(3) @global_smem, i32 %168, !dbg !31
  %170 = load float, ptr addrspace(3) %169, align 4, !dbg !31
  %171 = fadd float %166, %170, !dbg !32
  %172 = select i1 %132, float %171, float %167, !dbg !31
  %173 = or disjoint i32 %45, 112, !dbg !31
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i32 %173, !dbg !31
  %175 = load float, ptr addrspace(3) %174, align 4, !dbg !31
  %176 = fadd float %171, %175, !dbg !32
  %177 = select i1 %138, float %176, float %172, !dbg !31
  %178 = fadd float %68, %177, !dbg !32
  %179 = select i1 %.not2, float %68, float %178, !dbg !31
  %180 = bitcast float %179 to i32, !dbg !31
  %181 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %180, i32 8, i32 0), !dbg !31
  %182 = or disjoint i32 %45, 128, !dbg !31
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %182, !dbg !31
  %184 = load float, ptr addrspace(3) %183, align 4, !dbg !31
  %185 = or disjoint i32 %45, 136, !dbg !31
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i32 %185, !dbg !31
  %187 = load float, ptr addrspace(3) %186, align 4, !dbg !31
  %188 = fadd float %184, %187, !dbg !32
  %189 = select i1 %108, float %188, float %184, !dbg !31
  %190 = or disjoint i32 %45, 144, !dbg !31
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %190, !dbg !31
  %192 = load float, ptr addrspace(3) %191, align 4, !dbg !31
  %193 = fadd float %188, %192, !dbg !32
  %194 = select i1 %114, float %193, float %189, !dbg !31
  %195 = or disjoint i32 %45, 152, !dbg !31
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !31
  %197 = load float, ptr addrspace(3) %196, align 4, !dbg !31
  %198 = fadd float %193, %197, !dbg !32
  %199 = select i1 %120, float %198, float %194, !dbg !31
  %200 = or disjoint i32 %45, 160, !dbg !31
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %200, !dbg !31
  %202 = load float, ptr addrspace(3) %201, align 4, !dbg !31
  %203 = fadd float %198, %202, !dbg !32
  %204 = select i1 %126, float %203, float %199, !dbg !31
  %205 = or disjoint i32 %45, 168, !dbg !31
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i32 %205, !dbg !31
  %207 = load float, ptr addrspace(3) %206, align 4, !dbg !31
  %208 = fadd float %203, %207, !dbg !32
  %209 = select i1 %132, float %208, float %204, !dbg !31
  %210 = or disjoint i32 %45, 176, !dbg !31
  %211 = getelementptr float, ptr addrspace(3) @global_smem, i32 %210, !dbg !31
  %212 = load float, ptr addrspace(3) %211, align 4, !dbg !31
  %213 = fadd float %208, %212, !dbg !32
  %214 = select i1 %138, float %213, float %209, !dbg !31
  %215 = fadd float %78, %214, !dbg !32
  %216 = select i1 %.not2, float %78, float %215, !dbg !31
  %217 = bitcast float %216 to i32, !dbg !31
  %218 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %217, i32 8, i32 0), !dbg !31
  %219 = or disjoint i32 %45, 192, !dbg !31
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i32 %219, !dbg !31
  %221 = load float, ptr addrspace(3) %220, align 4, !dbg !31
  %222 = or disjoint i32 %45, 200, !dbg !31
  %223 = getelementptr float, ptr addrspace(3) @global_smem, i32 %222, !dbg !31
  %224 = load float, ptr addrspace(3) %223, align 4, !dbg !31
  %225 = fadd float %221, %224, !dbg !32
  %226 = select i1 %108, float %225, float %221, !dbg !31
  %227 = or disjoint i32 %45, 208, !dbg !31
  %228 = getelementptr float, ptr addrspace(3) @global_smem, i32 %227, !dbg !31
  %229 = load float, ptr addrspace(3) %228, align 4, !dbg !31
  %230 = fadd float %225, %229, !dbg !32
  %231 = select i1 %114, float %230, float %226, !dbg !31
  %232 = or disjoint i32 %45, 216, !dbg !31
  %233 = getelementptr float, ptr addrspace(3) @global_smem, i32 %232, !dbg !31
  %234 = load float, ptr addrspace(3) %233, align 4, !dbg !31
  %235 = fadd float %230, %234, !dbg !32
  %236 = select i1 %120, float %235, float %231, !dbg !31
  %237 = or disjoint i32 %45, 224, !dbg !31
  %238 = getelementptr float, ptr addrspace(3) @global_smem, i32 %237, !dbg !31
  %239 = load float, ptr addrspace(3) %238, align 4, !dbg !31
  %240 = fadd float %235, %239, !dbg !32
  %241 = select i1 %126, float %240, float %236, !dbg !31
  %242 = or disjoint i32 %45, 232, !dbg !31
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %242, !dbg !31
  %244 = load float, ptr addrspace(3) %243, align 4, !dbg !31
  %245 = fadd float %240, %244, !dbg !32
  %246 = select i1 %132, float %245, float %241, !dbg !31
  %247 = or disjoint i32 %45, 240, !dbg !31
  %248 = getelementptr float, ptr addrspace(3) @global_smem, i32 %247, !dbg !31
  %249 = load float, ptr addrspace(3) %248, align 4, !dbg !31
  %250 = fadd float %245, %249, !dbg !32
  %251 = select i1 %138, float %250, float %246, !dbg !31
  %252 = fadd float %88, %251, !dbg !32
  %253 = select i1 %.not2, float %88, float %252, !dbg !31
  %254 = bitcast float %253 to i32, !dbg !31
  %255 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %254, i32 8, i32 0), !dbg !31
  %256 = mul i32 %16, 272, !dbg !34
  %257 = add i32 %20, %256, !dbg !35
  %258 = sext i32 %257 to i64, !dbg !36
  %259 = getelementptr float, ptr addrspace(1) %1, i64 %258, !dbg !36
  %260 = and i1 %15, %11, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %143, i32 %180, i32 %217, i32 %254, ptr addrspace(1) %259, i1 %260) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.up.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4p2gkn6frilawwsep24x6loh3h35kaaxfijdexjxkzr23fxionn.py", directory: "inductor_cache/4p")
!4 = !{ptr @triton_per_fused_constant_pad_nd_cumsum_mul_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_constant_pad_nd_cumsum_mul_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_constant_pad_nd_cumsum_mul_4", linkageName: "triton_per_fused_constant_pad_nd_cumsum_mul_4", scope: !3, file: !3, line: 24, type: !8, scopeLine: 24, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 28, column: 28, scope: !7)
!11 = !DILocation(line: 28, column: 33, scope: !7)
!12 = !DILocation(line: 29, column: 44, scope: !7)
!13 = !DILocation(line: 29, column: 23, scope: !7)
!14 = !DILocation(line: 30, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 33, column: 21, scope: !7)
!17 = !DILocation(line: 36, column: 19, scope: !7)
!18 = !DILocation(line: 35, column: 19, scope: !7)
!19 = !DILocation(line: 39, column: 19, scope: !7)
!20 = !DILocation(line: 40, column: 46, scope: !7)
!21 = !DILocation(line: 40, column: 55, scope: !7)
!22 = !DILocation(line: 40, column: 38, scope: !7)
!23 = !DILocation(line: 40, column: 43, scope: !7)
!24 = !DILocation(line: 40, column: 51, scope: !7)
!25 = !DILocation(line: 40, column: 30, scope: !7)
!26 = !DILocation(line: 40, column: 68, scope: !7)
!27 = !DILocation(line: 40, column: 75, scope: !7)
!28 = !DILocation(line: 40, column: 60, scope: !7)
!29 = !DILocation(line: 42, column: 18, scope: !7)
!30 = !DILocation(line: 44, column: 32, scope: !7)
!31 = !DILocation(line: 47, column: 45, scope: !7)
!32 = !DILocation(line: 13, column: 20, scope: !33, inlinedAt: !31)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !3, discriminator: 0)
!34 = !DILocation(line: 48, column: 42, scope: !7)
!35 = !DILocation(line: 48, column: 38, scope: !7)
!36 = !DILocation(line: 48, column: 25, scope: !7)
!37 = !DILocation(line: 48, column: 62, scope: !7)
!38 = !DILocation(line: 48, column: 54, scope: !7)
!39 = !DILocation(line: 48, column: 4, scope: !7)
