; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_17(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = insertelement <4 x i32> poison, i32 %9, i64 0, !dbg !14
  %14 = insertelement <4 x i32> %13, i32 %10, i64 1, !dbg !14
  %15 = insertelement <4 x i32> %14, i32 %11, i64 2, !dbg !14
  %16 = insertelement <4 x i32> %15, i32 %12, i64 3, !dbg !14
  %17 = srem <4 x i32> %16, splat (i32 2048), !dbg !14
  %18 = sdiv i32 %9, 73728, !dbg !15
  %19 = shl nsw <4 x i32> %17, splat (i32 4), !dbg !16
  %20 = shl nsw i32 %18, 15, !dbg !17
  %21 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !18
  %22 = shufflevector <2 x i32> %21, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !18
  %23 = sdiv <2 x i32> %22, <i32 12288, i32 2048>, !dbg !18
  %24 = srem <2 x i32> %23, splat (i32 6), !dbg !19
  %25 = trunc nsw <2 x i32> %24 to <2 x i8>, !dbg !20
  %26 = shl nsw <2 x i8> %25, splat (i8 1), !dbg !20
  %27 = sdiv <2 x i8> %26, splat (i8 3), !dbg !20
  %28 = shl nsw <2 x i8> %25, splat (i8 2), !dbg !21
  %29 = add nsw <2 x i8> %28, splat (i8 9), !dbg !21
  %30 = sdiv <2 x i8> %29, splat (i8 6), !dbg !21
  %31 = icmp slt <2 x i8> %27, %30, !dbg !22
  %32 = extractelement <2 x i1> %31, i64 0, !dbg !23
  %33 = extractelement <2 x i1> %31, i64 1, !dbg !23
  %34 = and i1 %32, %33, !dbg !23
  %35 = extractelement <2 x i8> %27, i64 0, !dbg !24
  %36 = sext i8 %35 to i32, !dbg !24
  %37 = shl nsw i32 %36, 2, !dbg !24
  %38 = extractelement <2 x i8> %27, i64 1, !dbg !25
  %39 = sext i8 %38 to i32, !dbg !25
  %40 = add nsw i32 %20, %39, !dbg !25
  %41 = insertelement <4 x i32> poison, i32 %40, i64 0, !dbg !26
  %42 = shufflevector <4 x i32> %41, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !26
  %43 = add nsw <4 x i32> %42, %19, !dbg !26
  %44 = insertelement <4 x i32> poison, i32 %37, i64 0, !dbg !27
  %45 = shufflevector <4 x i32> %44, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !27
  %46 = add nsw <4 x i32> %43, %45, !dbg !27
  %47 = extractelement <4 x i32> %46, i64 0, !dbg !28
  %48 = sext i32 %47 to i64, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !28
  %50 = extractelement <4 x i32> %46, i64 1, !dbg !28
  %51 = sext i32 %50 to i64, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !28
  %53 = extractelement <4 x i32> %46, i64 2, !dbg !28
  %54 = sext i32 %53 to i64, !dbg !28
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !28
  %56 = extractelement <4 x i32> %46, i64 3, !dbg !28
  %57 = sext i32 %56 to i64, !dbg !28
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !28
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %34, i32 0, i1 %34) #1, !dbg !29
  %60 = bitcast i32 %59 to float, !dbg !29
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %34, i32 0, i1 %34) #1, !dbg !29
  %62 = bitcast i32 %61 to float, !dbg !29
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %34, i32 0, i1 %34) #1, !dbg !29
  %64 = bitcast i32 %63 to float, !dbg !29
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %34, i32 0, i1 %34) #1, !dbg !29
  %66 = bitcast i32 %65 to float, !dbg !29
  %67 = add nsw <2 x i8> %27, splat (i8 1), !dbg !30
  %68 = icmp slt <2 x i8> %67, %30, !dbg !31
  %69 = extractelement <2 x i1> %68, i64 1, !dbg !32
  %70 = and i1 %32, %69, !dbg !33
  %71 = or disjoint i32 %37, 1, !dbg !34
  %72 = insertelement <4 x i32> poison, i32 %71, i64 0, !dbg !35
  %73 = shufflevector <4 x i32> %72, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !35
  %74 = add <4 x i32> %43, %73, !dbg !35
  %75 = extractelement <4 x i32> %74, i64 0, !dbg !36
  %76 = sext i32 %75 to i64, !dbg !36
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !36
  %78 = extractelement <4 x i32> %74, i64 1, !dbg !36
  %79 = sext i32 %78 to i64, !dbg !36
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !36
  %81 = extractelement <4 x i32> %74, i64 2, !dbg !36
  %82 = sext i32 %81 to i64, !dbg !36
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !36
  %84 = extractelement <4 x i32> %74, i64 3, !dbg !36
  %85 = sext i32 %84 to i64, !dbg !36
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !36
  %87 = shufflevector <4 x i32> %13, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !13
  %88 = or disjoint <4 x i32> %87, <i32 512, i32 513, i32 514, i32 515>, !dbg !13
  %89 = or disjoint i32 %9, 512, !dbg !13
  %90 = srem <4 x i32> %88, splat (i32 2048), !dbg !14
  %91 = sdiv i32 %89, 73728, !dbg !15
  %92 = shl nsw <4 x i32> %90, splat (i32 4), !dbg !16
  %93 = shl nsw i32 %91, 15, !dbg !17
  %94 = shufflevector <4 x i32> %88, <4 x i32> poison, <2 x i32> zeroinitializer, !dbg !18
  %95 = sdiv <2 x i32> %94, <i32 12288, i32 2048>, !dbg !18
  %96 = srem <2 x i32> %95, splat (i32 6), !dbg !19
  %97 = trunc nsw <2 x i32> %96 to <2 x i8>, !dbg !20
  %98 = shl nsw <2 x i8> %97, splat (i8 1), !dbg !20
  %99 = sdiv <2 x i8> %98, splat (i8 3), !dbg !20
  %100 = shl nsw <2 x i8> %97, splat (i8 2), !dbg !21
  %101 = add nsw <2 x i8> %100, splat (i8 9), !dbg !21
  %102 = sdiv <2 x i8> %101, splat (i8 6), !dbg !21
  %103 = icmp slt <2 x i8> %99, %102, !dbg !22
  %104 = extractelement <2 x i1> %103, i64 0, !dbg !23
  %105 = extractelement <2 x i1> %103, i64 1, !dbg !23
  %106 = and i1 %104, %105, !dbg !23
  %107 = extractelement <2 x i8> %99, i64 0, !dbg !24
  %108 = sext i8 %107 to i32, !dbg !24
  %109 = shl nsw i32 %108, 2, !dbg !24
  %110 = extractelement <2 x i8> %99, i64 1, !dbg !25
  %111 = sext i8 %110 to i32, !dbg !25
  %112 = add nsw i32 %93, %111, !dbg !25
  %113 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !26
  %114 = shufflevector <4 x i32> %113, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !26
  %115 = add nsw <4 x i32> %114, %92, !dbg !26
  %116 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !27
  %117 = shufflevector <4 x i32> %116, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !27
  %118 = add nsw <4 x i32> %115, %117, !dbg !27
  %119 = extractelement <4 x i32> %118, i64 0, !dbg !28
  %120 = sext i32 %119 to i64, !dbg !28
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !28
  %122 = extractelement <4 x i32> %118, i64 1, !dbg !28
  %123 = sext i32 %122 to i64, !dbg !28
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !28
  %125 = extractelement <4 x i32> %118, i64 2, !dbg !28
  %126 = sext i32 %125 to i64, !dbg !28
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !28
  %128 = extractelement <4 x i32> %118, i64 3, !dbg !28
  %129 = sext i32 %128 to i64, !dbg !28
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !28
  %131 = add nsw <2 x i8> %99, splat (i8 1), !dbg !30
  %132 = icmp slt <2 x i8> %131, %102, !dbg !31
  %133 = extractelement <2 x i1> %132, i64 1, !dbg !32
  %134 = and i1 %104, %133, !dbg !33
  %135 = or disjoint i32 %109, 1, !dbg !34
  %136 = insertelement <4 x i32> poison, i32 %135, i64 0, !dbg !35
  %137 = shufflevector <4 x i32> %136, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !35
  %138 = add <4 x i32> %115, %137, !dbg !35
  %139 = extractelement <4 x i32> %138, i64 0, !dbg !36
  %140 = sext i32 %139 to i64, !dbg !36
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !36
  %142 = extractelement <4 x i32> %138, i64 1, !dbg !36
  %143 = sext i32 %142 to i64, !dbg !36
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !36
  %145 = extractelement <4 x i32> %138, i64 2, !dbg !36
  %146 = sext i32 %145 to i64, !dbg !36
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !36
  %148 = extractelement <4 x i32> %138, i64 3, !dbg !36
  %149 = sext i32 %148 to i64, !dbg !36
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !36
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %106, i32 0, i1 %106) #1, !dbg !29
  %152 = bitcast i32 %151 to float, !dbg !29
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %106, i32 0, i1 %106) #1, !dbg !29
  %154 = bitcast i32 %153 to float, !dbg !29
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %106, i32 0, i1 %106) #1, !dbg !29
  %156 = bitcast i32 %155 to float, !dbg !29
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %106, i32 0, i1 %106) #1, !dbg !29
  %158 = bitcast i32 %157 to float, !dbg !29
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %70, i32 0, i1 %70) #1, !dbg !37
  %160 = bitcast i32 %159 to float, !dbg !37
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %70, i32 0, i1 %70) #1, !dbg !37
  %162 = bitcast i32 %161 to float, !dbg !37
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %70, i32 0, i1 %70) #1, !dbg !37
  %164 = bitcast i32 %163 to float, !dbg !37
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %70, i32 0, i1 %70) #1, !dbg !37
  %166 = bitcast i32 %165 to float, !dbg !37
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %134, i32 0, i1 %134) #1, !dbg !37
  %168 = bitcast i32 %167 to float, !dbg !37
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %134, i32 0, i1 %134) #1, !dbg !37
  %170 = bitcast i32 %169 to float, !dbg !37
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %134, i32 0, i1 %134) #1, !dbg !37
  %172 = bitcast i32 %171 to float, !dbg !37
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %150, i1 %134, i32 0, i1 %134) #1, !dbg !37
  %174 = bitcast i32 %173 to float, !dbg !37
  %175 = fadd float %60, %160, !dbg !38
  %176 = fadd float %62, %162, !dbg !38
  %177 = fadd float %64, %164, !dbg !38
  %178 = fadd float %66, %166, !dbg !38
  %179 = fadd float %152, %168, !dbg !38
  %180 = fadd float %154, %170, !dbg !38
  %181 = fadd float %156, %172, !dbg !38
  %182 = fadd float %158, %174, !dbg !38
  %183 = extractelement <2 x i1> %68, i64 0, !dbg !32
  %184 = and i1 %33, %183, !dbg !39
  %185 = extractelement <2 x i1> %132, i64 0, !dbg !32
  %186 = and i1 %105, %185, !dbg !39
  %187 = add nsw i32 %37, 4, !dbg !40
  %188 = add nsw i32 %109, 4, !dbg !40
  %189 = insertelement <4 x i32> poison, i32 %187, i64 0, !dbg !41
  %190 = shufflevector <4 x i32> %189, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !41
  %191 = add nsw <4 x i32> %43, %190, !dbg !41
  %192 = extractelement <4 x i32> %191, i64 0, !dbg !42
  %193 = sext i32 %192 to i64, !dbg !42
  %194 = getelementptr float, ptr addrspace(1) %0, i64 %193, !dbg !42
  %195 = extractelement <4 x i32> %191, i64 1, !dbg !42
  %196 = sext i32 %195 to i64, !dbg !42
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !42
  %198 = extractelement <4 x i32> %191, i64 2, !dbg !42
  %199 = sext i32 %198 to i64, !dbg !42
  %200 = getelementptr float, ptr addrspace(1) %0, i64 %199, !dbg !42
  %201 = extractelement <4 x i32> %191, i64 3, !dbg !42
  %202 = sext i32 %201 to i64, !dbg !42
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !42
  %204 = insertelement <4 x i32> poison, i32 %188, i64 0, !dbg !41
  %205 = shufflevector <4 x i32> %204, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !41
  %206 = add nsw <4 x i32> %115, %205, !dbg !41
  %207 = extractelement <4 x i32> %206, i64 0, !dbg !42
  %208 = sext i32 %207 to i64, !dbg !42
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !42
  %210 = extractelement <4 x i32> %206, i64 1, !dbg !42
  %211 = sext i32 %210 to i64, !dbg !42
  %212 = getelementptr float, ptr addrspace(1) %0, i64 %211, !dbg !42
  %213 = extractelement <4 x i32> %206, i64 2, !dbg !42
  %214 = sext i32 %213 to i64, !dbg !42
  %215 = getelementptr float, ptr addrspace(1) %0, i64 %214, !dbg !42
  %216 = extractelement <4 x i32> %206, i64 3, !dbg !42
  %217 = sext i32 %216 to i64, !dbg !42
  %218 = getelementptr float, ptr addrspace(1) %0, i64 %217, !dbg !42
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %194, i1 %184, i32 0, i1 %184) #1, !dbg !43
  %220 = bitcast i32 %219 to float, !dbg !43
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %197, i1 %184, i32 0, i1 %184) #1, !dbg !43
  %222 = bitcast i32 %221 to float, !dbg !43
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %184, i32 0, i1 %184) #1, !dbg !43
  %224 = bitcast i32 %223 to float, !dbg !43
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %203, i1 %184, i32 0, i1 %184) #1, !dbg !43
  %226 = bitcast i32 %225 to float, !dbg !43
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 %186, i32 0, i1 %186) #1, !dbg !43
  %228 = bitcast i32 %227 to float, !dbg !43
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %186, i32 0, i1 %186) #1, !dbg !43
  %230 = bitcast i32 %229 to float, !dbg !43
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %215, i1 %186, i32 0, i1 %186) #1, !dbg !43
  %232 = bitcast i32 %231 to float, !dbg !43
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %218, i1 %186, i32 0, i1 %186) #1, !dbg !43
  %234 = bitcast i32 %233 to float, !dbg !43
  %235 = fadd float %175, %220, !dbg !44
  %236 = fadd float %176, %222, !dbg !44
  %237 = fadd float %177, %224, !dbg !44
  %238 = fadd float %178, %226, !dbg !44
  %239 = fadd float %179, %228, !dbg !44
  %240 = fadd float %180, %230, !dbg !44
  %241 = fadd float %181, %232, !dbg !44
  %242 = fadd float %182, %234, !dbg !44
  %243 = and i1 %183, %69, !dbg !32
  %244 = and i1 %185, %133, !dbg !32
  %245 = add nsw i32 %37, 5, !dbg !45
  %246 = add nsw i32 %109, 5, !dbg !45
  %247 = insertelement <4 x i32> poison, i32 %245, i64 0, !dbg !46
  %248 = shufflevector <4 x i32> %247, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !46
  %249 = add nsw <4 x i32> %43, %248, !dbg !46
  %250 = extractelement <4 x i32> %249, i64 0, !dbg !47
  %251 = sext i32 %250 to i64, !dbg !47
  %252 = getelementptr float, ptr addrspace(1) %0, i64 %251, !dbg !47
  %253 = extractelement <4 x i32> %249, i64 1, !dbg !47
  %254 = sext i32 %253 to i64, !dbg !47
  %255 = getelementptr float, ptr addrspace(1) %0, i64 %254, !dbg !47
  %256 = extractelement <4 x i32> %249, i64 2, !dbg !47
  %257 = sext i32 %256 to i64, !dbg !47
  %258 = getelementptr float, ptr addrspace(1) %0, i64 %257, !dbg !47
  %259 = extractelement <4 x i32> %249, i64 3, !dbg !47
  %260 = sext i32 %259 to i64, !dbg !47
  %261 = getelementptr float, ptr addrspace(1) %0, i64 %260, !dbg !47
  %262 = insertelement <4 x i32> poison, i32 %246, i64 0, !dbg !46
  %263 = shufflevector <4 x i32> %262, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !46
  %264 = add nsw <4 x i32> %115, %263, !dbg !46
  %265 = extractelement <4 x i32> %264, i64 0, !dbg !47
  %266 = sext i32 %265 to i64, !dbg !47
  %267 = getelementptr float, ptr addrspace(1) %0, i64 %266, !dbg !47
  %268 = extractelement <4 x i32> %264, i64 1, !dbg !47
  %269 = sext i32 %268 to i64, !dbg !47
  %270 = getelementptr float, ptr addrspace(1) %0, i64 %269, !dbg !47
  %271 = extractelement <4 x i32> %264, i64 2, !dbg !47
  %272 = sext i32 %271 to i64, !dbg !47
  %273 = getelementptr float, ptr addrspace(1) %0, i64 %272, !dbg !47
  %274 = extractelement <4 x i32> %264, i64 3, !dbg !47
  %275 = sext i32 %274 to i64, !dbg !47
  %276 = getelementptr float, ptr addrspace(1) %0, i64 %275, !dbg !47
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %252, i1 %243, i32 0, i1 %243) #1, !dbg !48
  %278 = bitcast i32 %277 to float, !dbg !48
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %255, i1 %243, i32 0, i1 %243) #1, !dbg !48
  %280 = bitcast i32 %279 to float, !dbg !48
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %258, i1 %243, i32 0, i1 %243) #1, !dbg !48
  %282 = bitcast i32 %281 to float, !dbg !48
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %261, i1 %243, i32 0, i1 %243) #1, !dbg !48
  %284 = bitcast i32 %283 to float, !dbg !48
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %267, i1 %244, i32 0, i1 %244) #1, !dbg !48
  %286 = bitcast i32 %285 to float, !dbg !48
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %270, i1 %244, i32 0, i1 %244) #1, !dbg !48
  %288 = bitcast i32 %287 to float, !dbg !48
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %273, i1 %244, i32 0, i1 %244) #1, !dbg !48
  %290 = bitcast i32 %289 to float, !dbg !48
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %276, i1 %244, i32 0, i1 %244) #1, !dbg !48
  %292 = bitcast i32 %291 to float, !dbg !48
  %293 = fadd float %235, %278, !dbg !49
  %294 = fadd float %236, %280, !dbg !49
  %295 = fadd float %237, %282, !dbg !49
  %296 = fadd float %238, %284, !dbg !49
  %297 = fadd float %239, %286, !dbg !49
  %298 = fadd float %240, %288, !dbg !49
  %299 = fadd float %241, %290, !dbg !49
  %300 = fadd float %242, %292, !dbg !49
  %301 = select i1 %34, float 1.000000e+00, float 0.000000e+00, !dbg !50
  %302 = select i1 %106, float 1.000000e+00, float 0.000000e+00, !dbg !50
  %303 = select i1 %70, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %304 = select i1 %134, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %305 = fadd float %301, %303, !dbg !52
  %306 = fadd float %302, %304, !dbg !52
  %307 = select i1 %184, float 1.000000e+00, float 0.000000e+00, !dbg !53
  %308 = select i1 %186, float 1.000000e+00, float 0.000000e+00, !dbg !53
  %309 = fadd float %307, %305, !dbg !54
  %310 = fadd float %308, %306, !dbg !54
  %311 = select i1 %243, float 1.000000e+00, float 0.000000e+00, !dbg !55
  %312 = select i1 %244, float 1.000000e+00, float 0.000000e+00, !dbg !55
  %313 = fadd float %311, %309, !dbg !56
  %314 = fadd float %312, %310, !dbg !56
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %293, float %313) #1, !dbg !57
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %294, float %313) #1, !dbg !57
  %317 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %295, float %313) #1, !dbg !57
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %296, float %313) #1, !dbg !57
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %297, float %314) #1, !dbg !57
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %298, float %314) #1, !dbg !57
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %299, float %314) #1, !dbg !57
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %300, float %314) #1, !dbg !57
  %323 = sext i32 %9 to i64, !dbg !58
  %324 = getelementptr float, ptr addrspace(1) %1, i64 %323, !dbg !58
  %325 = sext i32 %89 to i64, !dbg !58
  %326 = getelementptr float, ptr addrspace(1) %1, i64 %325, !dbg !58
  %327 = bitcast float %315 to i32, !dbg !59
  %328 = bitcast float %316 to i32, !dbg !59
  %329 = bitcast float %317 to i32, !dbg !59
  %330 = bitcast float %318 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %327, i32 %328, i32 %329, i32 %330, ptr addrspace(1) %324, i1 true) #1, !dbg !59
  %331 = bitcast float %319 to i32, !dbg !59
  %332 = bitcast float %320 to i32, !dbg !59
  %333 = bitcast float %321 to i32, !dbg !59
  %334 = bitcast float %322 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %331, i32 %332, i32 %333, i32 %334, ptr addrspace(1) %326, i1 true) #1, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6gp767t6rfcjsqbpsth43b6phuhuqwglzqn7lyy7hoq6c75ogue.py", directory: "inductor_cache/6g")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_17", linkageName: "triton_poi_fused__adaptive_avg_pool2d_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 36, column: 51, scope: !7)
!17 = !DILocation(line: 36, column: 62, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 24, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 21, scope: !7)
!21 = !DILocation(line: 30, column: 25, scope: !7)
!22 = !DILocation(line: 31, column: 18, scope: !7)
!23 = !DILocation(line: 35, column: 18, scope: !7)
!24 = !DILocation(line: 36, column: 33, scope: !7)
!25 = !DILocation(line: 36, column: 48, scope: !7)
!26 = !DILocation(line: 36, column: 56, scope: !7)
!27 = !DILocation(line: 36, column: 68, scope: !7)
!28 = !DILocation(line: 36, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 83, scope: !7)
!30 = !DILocation(line: 42, column: 17, scope: !7)
!31 = !DILocation(line: 43, column: 20, scope: !7)
!32 = !DILocation(line: 47, column: 20, scope: !7)
!33 = !DILocation(line: 39, column: 19, scope: !7)
!34 = !DILocation(line: 40, column: 35, scope: !7)
!35 = !DILocation(line: 40, column: 73, scope: !7)
!36 = !DILocation(line: 40, column: 31, scope: !7)
!37 = !DILocation(line: 40, column: 88, scope: !7)
!38 = !DILocation(line: 41, column: 20, scope: !7)
!39 = !DILocation(line: 44, column: 20, scope: !7)
!40 = !DILocation(line: 45, column: 35, scope: !7)
!41 = !DILocation(line: 45, column: 73, scope: !7)
!42 = !DILocation(line: 45, column: 31, scope: !7)
!43 = !DILocation(line: 45, column: 88, scope: !7)
!44 = !DILocation(line: 46, column: 20, scope: !7)
!45 = !DILocation(line: 48, column: 35, scope: !7)
!46 = !DILocation(line: 48, column: 73, scope: !7)
!47 = !DILocation(line: 48, column: 31, scope: !7)
!48 = !DILocation(line: 48, column: 88, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 52, column: 34, scope: !7)
!51 = !DILocation(line: 55, column: 35, scope: !7)
!52 = !DILocation(line: 56, column: 20, scope: !7)
!53 = !DILocation(line: 59, column: 35, scope: !7)
!54 = !DILocation(line: 60, column: 20, scope: !7)
!55 = !DILocation(line: 63, column: 35, scope: !7)
!56 = !DILocation(line: 64, column: 20, scope: !7)
!57 = !DILocation(line: 65, column: 20, scope: !7)
!58 = !DILocation(line: 66, column: 25, scope: !7)
!59 = !DILocation(line: 66, column: 37, scope: !7)
!60 = !DILocation(line: 66, column: 4, scope: !7)
