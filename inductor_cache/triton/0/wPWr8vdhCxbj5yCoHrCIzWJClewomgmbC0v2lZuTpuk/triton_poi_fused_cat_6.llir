; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %18 = sdiv i32 %16, 4096, !dbg !14
  %19 = sdiv i32 %17, 4096, !dbg !14
  %.frozen = freeze i32 %16, !dbg !15
  %20 = sdiv i32 %.frozen, 2097152, !dbg !15
  %.frozen2 = freeze i32 %17, !dbg !15
  %21 = sdiv i32 %.frozen2, 2097152, !dbg !15
  %22 = mul i32 %20, 2097152, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %22, !dbg !16
  %23 = mul i32 %21, 2097152, !dbg !16
  %srem1.decomposed = sub i32 %.frozen2, %23, !dbg !16
  %24 = shl nsw i32 %20, 19, !dbg !17
  %25 = shl nsw i32 %21, 19, !dbg !17
  %26 = add nsw i32 %24, %srem.decomposed, !dbg !18
  %27 = add nsw i32 %25, %srem1.decomposed, !dbg !18
  %28 = sext i32 %26 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !19
  %30 = sext i32 %27 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !20
  %34 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !21
  %35 = insertelement <2 x i32> %34, i32 %18, i64 1, !dbg !21
  %36 = srem <2 x i32> %35, <i32 4096, i32 512>, !dbg !21
  %37 = extractelement <2 x i32> %36, i64 1, !dbg !22
  %38 = icmp slt i32 %37, 128, !dbg !23
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #1, !dbg !24
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !24
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !24
  %44 = bitcast i32 %40 to float, !dbg !24
  %45 = bitcast i32 %41 to float, !dbg !24
  %46 = bitcast i32 %42 to float, !dbg !24
  %47 = bitcast i32 %43 to float, !dbg !24
  %48 = and i32 %37, -128, !dbg !25
  %49 = icmp eq i32 %48, 128, !dbg !25
  %50 = shl nsw i32 %37, 12, !dbg !26
  %51 = insertelement <2 x i32> <i32 poison, i32 -384>, i32 %24, i64 0, !dbg !26
  %52 = add nsw <2 x i32> %51, %36, !dbg !26
  %53 = extractelement <2 x i32> %52, i64 0, !dbg !27
  %54 = add nsw i32 %53, -524288, !dbg !28
  %55 = add nsw i32 %54, %50, !dbg !29
  %56 = sext i32 %55 to i64, !dbg !30
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !30
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !31
  %59 = icmp eq i32 %48, 256, !dbg !32
  %60 = add nsw i32 %53, -1048576, !dbg !33
  %61 = add nsw i32 %60, %50, !dbg !34
  %62 = sext i32 %61 to i64, !dbg !35
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %62, !dbg !35
  %64 = getelementptr float, ptr addrspace(1) %5, i64 %62, !dbg !36
  %65 = icmp sgt i32 %37, 383, !dbg !22
  %66 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !21
  %67 = insertelement <2 x i32> %66, i32 %19, i64 1, !dbg !21
  %68 = srem <2 x i32> %67, <i32 4096, i32 512>, !dbg !21
  %69 = extractelement <2 x i32> %68, i64 1, !dbg !22
  %70 = icmp slt i32 %69, 128, !dbg !23
  %71 = and i32 %69, -128, !dbg !25
  %72 = icmp eq i32 %71, 128, !dbg !25
  %73 = shl nsw i32 %69, 12, !dbg !26
  %74 = insertelement <2 x i32> <i32 poison, i32 -384>, i32 %25, i64 0, !dbg !26
  %75 = add nsw <2 x i32> %74, %68, !dbg !26
  %76 = extractelement <2 x i32> %75, i64 0, !dbg !27
  %77 = add nsw i32 %76, -524288, !dbg !28
  %78 = add nsw i32 %77, %73, !dbg !29
  %79 = sext i32 %78 to i64, !dbg !30
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !30
  %81 = getelementptr float, ptr addrspace(1) %3, i64 %79, !dbg !31
  %82 = icmp eq i32 %71, 256, !dbg !32
  %83 = add nsw i32 %76, -1048576, !dbg !33
  %84 = add nsw i32 %83, %73, !dbg !34
  %85 = sext i32 %84 to i64, !dbg !35
  %86 = getelementptr float, ptr addrspace(1) %4, i64 %85, !dbg !35
  %87 = getelementptr float, ptr addrspace(1) %5, i64 %85, !dbg !36
  %88 = icmp sgt i32 %69, 383, !dbg !22
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %70, i32 0, i1 %70, i32 0, i1 %70, i32 0, i1 %70, i32 0, i1 %70) #1, !dbg !24
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !24
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !24
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !24
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !24
  %94 = bitcast i32 %90 to float, !dbg !24
  %95 = bitcast i32 %91 to float, !dbg !24
  %96 = bitcast i32 %92 to float, !dbg !24
  %97 = bitcast i32 %93 to float, !dbg !24
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #1, !dbg !37
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !37
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !37
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !37
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !37
  %103 = bitcast i32 %99 to float, !dbg !37
  %104 = bitcast i32 %100 to float, !dbg !37
  %105 = bitcast i32 %101 to float, !dbg !37
  %106 = bitcast i32 %102 to float, !dbg !37
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %70, i32 0, i1 %70, i32 0, i1 %70, i32 0, i1 %70, i32 0, i1 %70) #1, !dbg !37
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !37
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !37
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !37
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !37
  %112 = bitcast i32 %108 to float, !dbg !37
  %113 = bitcast i32 %109 to float, !dbg !37
  %114 = bitcast i32 %110 to float, !dbg !37
  %115 = bitcast i32 %111 to float, !dbg !37
  %116 = fadd float %44, %103, !dbg !38
  %117 = fadd float %45, %104, !dbg !38
  %118 = fadd float %46, %105, !dbg !38
  %119 = fadd float %47, %106, !dbg !38
  %120 = fadd float %94, %112, !dbg !38
  %121 = fadd float %95, %113, !dbg !38
  %122 = fadd float %96, %114, !dbg !38
  %123 = fadd float %97, %115, !dbg !38
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #1, !dbg !39
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !39
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !39
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !39
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !39
  %129 = bitcast i32 %125 to float, !dbg !39
  %130 = bitcast i32 %126 to float, !dbg !39
  %131 = bitcast i32 %127 to float, !dbg !39
  %132 = bitcast i32 %128 to float, !dbg !39
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 %72, i32 0, i1 %72, i32 0, i1 %72, i32 0, i1 %72, i32 0, i1 %72) #1, !dbg !39
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !39
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !39
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !39
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !39
  %138 = bitcast i32 %134 to float, !dbg !39
  %139 = bitcast i32 %135 to float, !dbg !39
  %140 = bitcast i32 %136 to float, !dbg !39
  %141 = bitcast i32 %137 to float, !dbg !39
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #1, !dbg !40
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !40
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !40
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !40
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !40
  %147 = bitcast i32 %143 to float, !dbg !40
  %148 = bitcast i32 %144 to float, !dbg !40
  %149 = bitcast i32 %145 to float, !dbg !40
  %150 = bitcast i32 %146 to float, !dbg !40
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 %72, i32 0, i1 %72, i32 0, i1 %72, i32 0, i1 %72, i32 0, i1 %72) #1, !dbg !40
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !40
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !40
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !40
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !40
  %156 = bitcast i32 %152 to float, !dbg !40
  %157 = bitcast i32 %153 to float, !dbg !40
  %158 = bitcast i32 %154 to float, !dbg !40
  %159 = bitcast i32 %155 to float, !dbg !40
  %160 = fadd float %129, %147, !dbg !41
  %161 = fadd float %130, %148, !dbg !41
  %162 = fadd float %131, %149, !dbg !41
  %163 = fadd float %132, %150, !dbg !41
  %164 = fadd float %138, %156, !dbg !41
  %165 = fadd float %139, %157, !dbg !41
  %166 = fadd float %140, %158, !dbg !41
  %167 = fadd float %141, %159, !dbg !41
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #1, !dbg !42
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !42
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !42
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !42
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !42
  %173 = bitcast i32 %169 to float, !dbg !42
  %174 = bitcast i32 %170 to float, !dbg !42
  %175 = bitcast i32 %171 to float, !dbg !42
  %176 = bitcast i32 %172 to float, !dbg !42
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %86, i1 %82, i32 0, i1 %82, i32 0, i1 %82, i32 0, i1 %82, i32 0, i1 %82) #1, !dbg !42
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !42
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !42
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !42
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !42
  %182 = bitcast i32 %178 to float, !dbg !42
  %183 = bitcast i32 %179 to float, !dbg !42
  %184 = bitcast i32 %180 to float, !dbg !42
  %185 = bitcast i32 %181 to float, !dbg !42
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %64, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #1, !dbg !43
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !43
  %188 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !43
  %189 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !43
  %190 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !43
  %191 = bitcast i32 %187 to float, !dbg !43
  %192 = bitcast i32 %188 to float, !dbg !43
  %193 = bitcast i32 %189 to float, !dbg !43
  %194 = bitcast i32 %190 to float, !dbg !43
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %82, i32 0, i1 %82, i32 0, i1 %82, i32 0, i1 %82, i32 0, i1 %82) #1, !dbg !43
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !43
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !43
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !43
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !43
  %200 = bitcast i32 %196 to float, !dbg !43
  %201 = bitcast i32 %197 to float, !dbg !43
  %202 = bitcast i32 %198 to float, !dbg !43
  %203 = bitcast i32 %199 to float, !dbg !43
  %204 = fadd float %173, %191, !dbg !44
  %205 = fadd float %174, %192, !dbg !44
  %206 = fadd float %175, %193, !dbg !44
  %207 = fadd float %176, %194, !dbg !44
  %208 = fadd float %182, %200, !dbg !44
  %209 = fadd float %183, %201, !dbg !44
  %210 = fadd float %184, %202, !dbg !44
  %211 = fadd float %185, %203, !dbg !44
  %212 = extractelement <2 x i32> %52, i64 1, !dbg !45
  %213 = shl nsw i32 %212, 12, !dbg !45
  %214 = extractelement <2 x i32> %75, i64 1, !dbg !45
  %215 = shl nsw i32 %214, 12, !dbg !45
  %216 = add nsw i32 %53, %213, !dbg !27
  %217 = add nsw i32 %76, %215, !dbg !27
  %218 = sext i32 %216 to i64, !dbg !46
  %219 = getelementptr float, ptr addrspace(1) %6, i64 %218, !dbg !46
  %220 = sext i32 %217 to i64, !dbg !46
  %221 = getelementptr float, ptr addrspace(1) %6, i64 %220, !dbg !46
  %222 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %219, i1 %65, i32 0, i1 %65, i32 0, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #1, !dbg !47
  %223 = extractvalue { i32, i32, i32, i32 } %222, 0, !dbg !47
  %224 = extractvalue { i32, i32, i32, i32 } %222, 1, !dbg !47
  %225 = extractvalue { i32, i32, i32, i32 } %222, 2, !dbg !47
  %226 = extractvalue { i32, i32, i32, i32 } %222, 3, !dbg !47
  %227 = bitcast i32 %223 to float, !dbg !47
  %228 = bitcast i32 %224 to float, !dbg !47
  %229 = bitcast i32 %225 to float, !dbg !47
  %230 = bitcast i32 %226 to float, !dbg !47
  %231 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %221, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #1, !dbg !47
  %232 = extractvalue { i32, i32, i32, i32 } %231, 0, !dbg !47
  %233 = extractvalue { i32, i32, i32, i32 } %231, 1, !dbg !47
  %234 = extractvalue { i32, i32, i32, i32 } %231, 2, !dbg !47
  %235 = extractvalue { i32, i32, i32, i32 } %231, 3, !dbg !47
  %236 = bitcast i32 %232 to float, !dbg !47
  %237 = bitcast i32 %233 to float, !dbg !47
  %238 = bitcast i32 %234 to float, !dbg !47
  %239 = bitcast i32 %235 to float, !dbg !47
  %240 = sext i32 %212 to i64, !dbg !48
  %241 = getelementptr float, ptr addrspace(1) %7, i64 %240, !dbg !48
  %242 = sext i32 %214 to i64, !dbg !48
  %243 = getelementptr float, ptr addrspace(1) %7, i64 %242, !dbg !48
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %241, i1 %65, i32 0, i1 %65) #1, !dbg !49
  %245 = bitcast i32 %244 to float, !dbg !49
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %241, i1 %65, i32 0, i1 %65) #1, !dbg !49
  %247 = bitcast i32 %246 to float, !dbg !49
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %241, i1 %65, i32 0, i1 %65) #1, !dbg !49
  %249 = bitcast i32 %248 to float, !dbg !49
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %241, i1 %65, i32 0, i1 %65) #1, !dbg !49
  %251 = bitcast i32 %250 to float, !dbg !49
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %243, i1 %88, i32 0, i1 %88) #1, !dbg !49
  %253 = bitcast i32 %252 to float, !dbg !49
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %243, i1 %88, i32 0, i1 %88) #1, !dbg !49
  %255 = bitcast i32 %254 to float, !dbg !49
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %243, i1 %88, i32 0, i1 %88) #1, !dbg !49
  %257 = bitcast i32 %256 to float, !dbg !49
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %243, i1 %88, i32 0, i1 %88) #1, !dbg !49
  %259 = bitcast i32 %258 to float, !dbg !49
  %260 = fadd float %227, %245, !dbg !50
  %261 = fadd float %228, %247, !dbg !50
  %262 = fadd float %229, %249, !dbg !50
  %263 = fadd float %230, %251, !dbg !50
  %264 = fadd float %236, %253, !dbg !50
  %265 = fadd float %237, %255, !dbg !50
  %266 = fadd float %238, %257, !dbg !50
  %267 = fadd float %239, %259, !dbg !50
  %268 = select i1 %65, float %260, float 0.000000e+00, !dbg !51
  %269 = select i1 %65, float %261, float 0.000000e+00, !dbg !51
  %270 = select i1 %65, float %262, float 0.000000e+00, !dbg !51
  %271 = select i1 %65, float %263, float 0.000000e+00, !dbg !51
  %272 = select i1 %88, float %264, float 0.000000e+00, !dbg !51
  %273 = select i1 %88, float %265, float 0.000000e+00, !dbg !51
  %274 = select i1 %88, float %266, float 0.000000e+00, !dbg !51
  %275 = select i1 %88, float %267, float 0.000000e+00, !dbg !51
  %276 = select i1 %59, float %204, float %268, !dbg !52
  %277 = select i1 %59, float %205, float %269, !dbg !52
  %278 = select i1 %59, float %206, float %270, !dbg !52
  %279 = select i1 %59, float %207, float %271, !dbg !52
  %280 = select i1 %82, float %208, float %272, !dbg !52
  %281 = select i1 %82, float %209, float %273, !dbg !52
  %282 = select i1 %82, float %210, float %274, !dbg !52
  %283 = select i1 %82, float %211, float %275, !dbg !52
  %284 = select i1 %49, float %160, float %276, !dbg !52
  %285 = select i1 %49, float %161, float %277, !dbg !52
  %286 = select i1 %49, float %162, float %278, !dbg !52
  %287 = select i1 %49, float %163, float %279, !dbg !52
  %288 = select i1 %72, float %164, float %280, !dbg !52
  %289 = select i1 %72, float %165, float %281, !dbg !52
  %290 = select i1 %72, float %166, float %282, !dbg !52
  %291 = select i1 %72, float %167, float %283, !dbg !52
  %292 = select i1 %38, float %116, float %284, !dbg !52
  %293 = select i1 %38, float %117, float %285, !dbg !52
  %294 = select i1 %38, float %118, float %286, !dbg !52
  %295 = select i1 %38, float %119, float %287, !dbg !52
  %296 = select i1 %70, float %120, float %288, !dbg !52
  %297 = select i1 %70, float %121, float %289, !dbg !52
  %298 = select i1 %70, float %122, float %290, !dbg !52
  %299 = select i1 %70, float %123, float %291, !dbg !52
  %300 = sext i32 %16 to i64, !dbg !53
  %301 = getelementptr float, ptr addrspace(1) %8, i64 %300, !dbg !53
  %302 = sext i32 %17 to i64, !dbg !53
  %303 = getelementptr float, ptr addrspace(1) %8, i64 %302, !dbg !53
  %304 = bitcast float %292 to i32, !dbg !54
  %305 = bitcast float %293 to i32, !dbg !54
  %306 = bitcast float %294 to i32, !dbg !54
  %307 = bitcast float %295 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %304, i32 %305, i32 %306, i32 %307, ptr addrspace(1) %301, i1 true) #1, !dbg !54
  %308 = bitcast float %296 to i32, !dbg !54
  %309 = bitcast float %297 to i32, !dbg !54
  %310 = bitcast float %298 to i32, !dbg !54
  %311 = bitcast float %299 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %308, i32 %309, i32 %310, i32 %311, ptr addrspace(1) %303, i1 true) #1, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cznd2ixowcbelumcqnks2wvdxwmkqsnwaoscsrmwlpsysgo7mvym.py", directory: "inductor_cache/zn")
!4 = !{ptr @triton_poi_fused_cat_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_6", linkageName: "triton_poi_fused_cat_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 54, scope: !7)
!18 = !DILocation(line: 33, column: 47, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 25, column: 19, scope: !7)
!22 = !DILocation(line: 56, column: 20, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 33, column: 59, scope: !7)
!25 = !DILocation(line: 41, column: 20, scope: !7)
!26 = !DILocation(line: 42, column: 42, scope: !7)
!27 = !DILocation(line: 59, column: 57, scope: !7)
!28 = !DILocation(line: 42, column: 36, scope: !7)
!29 = !DILocation(line: 42, column: 57, scope: !7)
!30 = !DILocation(line: 42, column: 31, scope: !7)
!31 = !DILocation(line: 43, column: 31, scope: !7)
!32 = !DILocation(line: 50, column: 20, scope: !7)
!33 = !DILocation(line: 51, column: 36, scope: !7)
!34 = !DILocation(line: 51, column: 57, scope: !7)
!35 = !DILocation(line: 51, column: 31, scope: !7)
!36 = !DILocation(line: 52, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 59, scope: !7)
!38 = !DILocation(line: 35, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 69, scope: !7)
!40 = !DILocation(line: 43, column: 69, scope: !7)
!41 = !DILocation(line: 44, column: 20, scope: !7)
!42 = !DILocation(line: 51, column: 69, scope: !7)
!43 = !DILocation(line: 52, column: 69, scope: !7)
!44 = !DILocation(line: 53, column: 20, scope: !7)
!45 = !DILocation(line: 59, column: 42, scope: !7)
!46 = !DILocation(line: 59, column: 31, scope: !7)
!47 = !DILocation(line: 59, column: 69, scope: !7)
!48 = !DILocation(line: 60, column: 31, scope: !7)
!49 = !DILocation(line: 60, column: 45, scope: !7)
!50 = !DILocation(line: 61, column: 20, scope: !7)
!51 = !DILocation(line: 63, column: 35, scope: !7)
!52 = !DILocation(line: 0, scope: !7)
!53 = !DILocation(line: 67, column: 25, scope: !7)
!54 = !DILocation(line: 67, column: 37, scope: !7)
!55 = !DILocation(line: 67, column: 4, scope: !7)
