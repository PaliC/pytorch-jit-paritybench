; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_cat_convolution_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 60, !dbg !12
  %14 = lshr i32 %11, 4, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = or disjoint i32 %15, 8, !dbg !12
  %17 = or disjoint i32 %15, 16, !dbg !12
  %18 = or disjoint i32 %15, 24, !dbg !12
  %19 = or disjoint i32 %15, 32, !dbg !12
  %20 = or disjoint i32 %15, 40, !dbg !12
  %21 = or disjoint i32 %15, 48, !dbg !12
  %22 = or disjoint i32 %15, 56, !dbg !12
  %23 = or disjoint i32 %10, %13, !dbg !13
  %24 = or disjoint i32 %10, %15, !dbg !13
  %25 = or disjoint i32 %10, %16, !dbg !13
  %26 = or disjoint i32 %10, %17, !dbg !13
  %27 = or disjoint i32 %10, %18, !dbg !13
  %28 = or disjoint i32 %10, %19, !dbg !13
  %29 = or disjoint i32 %10, %20, !dbg !13
  %30 = or disjoint i32 %10, %21, !dbg !13
  %31 = or disjoint i32 %10, %22, !dbg !13
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %33 = shl i32 %32, 4, !dbg !15
  %34 = and i32 %11, 15, !dbg !16
  %35 = or disjoint i32 %33, %15, !dbg !17
  %36 = or disjoint i32 %33, %16, !dbg !17
  %37 = or disjoint i32 %33, %34, !dbg !17
  %38 = icmp slt i32 %35, 9, !dbg !18
  %39 = icmp slt i32 %36, 9, !dbg !18
  %40 = icmp slt i32 %37, 9, !dbg !18
  %.frozen = freeze i32 %23, !dbg !19
  %41 = sdiv i32 %.frozen, 512, !dbg !19
  %42 = mul i32 %41, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %42, !dbg !20
  %43 = icmp slt i32 %.decomposed, 256, !dbg !21
  %44 = shl i32 %35, 8, !dbg !22
  %45 = shl i32 %36, 8, !dbg !22
  %46 = mul i32 %41, 2304, !dbg !23
  %47 = add i32 %44, %46, !dbg !24
  %48 = add i32 %45, %46, !dbg !24
  %49 = add i32 %47, %.decomposed, !dbg !25
  %50 = add i32 %48, %.decomposed, !dbg !25
  %51 = sext i32 %49 to i64, !dbg !26
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !26
  %53 = sext i32 %50 to i64, !dbg !26
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !26
  %55 = and i1 %43, %38, !dbg !27
  %56 = and i1 %43, %39, !dbg !27
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #2, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !28
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %56, i32 0, i1 %56, i32 0, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #2, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %67 = sext i32 %.decomposed to i64, !dbg !29
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !29
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #2, !dbg !30
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !30
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !30
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !30
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !30
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 %56, i32 0, i1 %56, i32 0, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #2, !dbg !30
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !30
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !30
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !30
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !30
  %79 = icmp sgt i32 %.decomposed, 255, !dbg !31
  %80 = add nsw i32 %.decomposed, -256, !dbg !32
  %81 = add i32 %47, %80, !dbg !33
  %82 = add i32 %48, %80, !dbg !33
  %83 = sext i32 %81 to i64, !dbg !34
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !34
  %85 = sext i32 %82 to i64, !dbg !34
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !34
  %87 = and i1 %79, %38, !dbg !35
  %88 = and i1 %79, %39, !dbg !35
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %84, i1 %87, i32 0, i1 %87, i32 0, i1 %87, i32 0, i1 %87, i32 0, i1 %87) #2, !dbg !36
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !36
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !36
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !36
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !36
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %86, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #2, !dbg !36
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !36
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !36
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !36
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !36
  %99 = sext i32 %80 to i64, !dbg !37
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %99, !dbg !37
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %100, i1 %87, i32 0, i1 %87, i32 0, i1 %87, i32 0, i1 %87, i32 0, i1 %87) #2, !dbg !38
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !38
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !38
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !38
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !38
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %100, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #2, !dbg !38
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !38
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !38
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !38
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !38
  %111 = insertelement <16 x i32> poison, i32 %98, i64 0, !dbg !36
  %112 = insertelement <16 x i32> %111, i32 %97, i64 1, !dbg !36
  %113 = insertelement <16 x i32> %112, i32 %96, i64 2, !dbg !36
  %114 = insertelement <16 x i32> %113, i32 %95, i64 3, !dbg !36
  %115 = insertelement <16 x i32> %114, i32 %93, i64 4, !dbg !36
  %116 = insertelement <16 x i32> %115, i32 %92, i64 5, !dbg !36
  %117 = insertelement <16 x i32> %116, i32 %91, i64 6, !dbg !36
  %118 = insertelement <16 x i32> %117, i32 %90, i64 7, !dbg !36
  %119 = insertelement <16 x i32> %118, i32 %66, i64 8, !dbg !36
  %120 = insertelement <16 x i32> %119, i32 %65, i64 9, !dbg !36
  %121 = insertelement <16 x i32> %120, i32 %64, i64 10, !dbg !36
  %122 = insertelement <16 x i32> %121, i32 %63, i64 11, !dbg !36
  %123 = insertelement <16 x i32> %122, i32 %61, i64 12, !dbg !36
  %124 = insertelement <16 x i32> %123, i32 %60, i64 13, !dbg !36
  %125 = insertelement <16 x i32> %124, i32 %59, i64 14, !dbg !36
  %126 = insertelement <16 x i32> %125, i32 %58, i64 15, !dbg !36
  %127 = bitcast <16 x i32> %126 to <16 x float>, !dbg !36
  %128 = insertelement <16 x i32> poison, i32 %110, i64 0, !dbg !38
  %129 = insertelement <16 x i32> %128, i32 %109, i64 1, !dbg !38
  %130 = insertelement <16 x i32> %129, i32 %108, i64 2, !dbg !38
  %131 = insertelement <16 x i32> %130, i32 %107, i64 3, !dbg !38
  %132 = insertelement <16 x i32> %131, i32 %105, i64 4, !dbg !38
  %133 = insertelement <16 x i32> %132, i32 %104, i64 5, !dbg !38
  %134 = insertelement <16 x i32> %133, i32 %103, i64 6, !dbg !38
  %135 = insertelement <16 x i32> %134, i32 %102, i64 7, !dbg !38
  %136 = insertelement <16 x i32> %135, i32 %78, i64 8, !dbg !38
  %137 = insertelement <16 x i32> %136, i32 %77, i64 9, !dbg !38
  %138 = insertelement <16 x i32> %137, i32 %76, i64 10, !dbg !38
  %139 = insertelement <16 x i32> %138, i32 %75, i64 11, !dbg !38
  %140 = insertelement <16 x i32> %139, i32 %73, i64 12, !dbg !38
  %141 = insertelement <16 x i32> %140, i32 %72, i64 13, !dbg !38
  %142 = insertelement <16 x i32> %141, i32 %71, i64 14, !dbg !38
  %143 = insertelement <16 x i32> %142, i32 %70, i64 15, !dbg !38
  %144 = bitcast <16 x i32> %143 to <16 x float>, !dbg !38
  %145 = fadd <16 x float> %127, %144, !dbg !39
  %146 = fcmp olt <16 x float> %145, zeroinitializer, !dbg !40
  %147 = extractelement <16 x i1> %146, i64 15, !dbg !44
  %148 = extractelement <16 x float> %145, i64 15, !dbg !44
  %149 = select i1 %147, float 0.000000e+00, float %148, !dbg !44
  %150 = extractelement <16 x i1> %146, i64 14, !dbg !44
  %151 = extractelement <16 x float> %145, i64 14, !dbg !44
  %152 = select i1 %150, float 0.000000e+00, float %151, !dbg !44
  %153 = extractelement <16 x i1> %146, i64 13, !dbg !44
  %154 = extractelement <16 x float> %145, i64 13, !dbg !44
  %155 = select i1 %153, float 0.000000e+00, float %154, !dbg !44
  %156 = extractelement <16 x i1> %146, i64 12, !dbg !44
  %157 = extractelement <16 x float> %145, i64 12, !dbg !44
  %158 = select i1 %156, float 0.000000e+00, float %157, !dbg !44
  %159 = extractelement <16 x i1> %146, i64 11, !dbg !44
  %160 = extractelement <16 x float> %145, i64 11, !dbg !44
  %161 = select i1 %159, float 0.000000e+00, float %160, !dbg !44
  %162 = extractelement <16 x i1> %146, i64 10, !dbg !44
  %163 = extractelement <16 x float> %145, i64 10, !dbg !44
  %164 = select i1 %162, float 0.000000e+00, float %163, !dbg !44
  %165 = extractelement <16 x i1> %146, i64 9, !dbg !44
  %166 = extractelement <16 x float> %145, i64 9, !dbg !44
  %167 = select i1 %165, float 0.000000e+00, float %166, !dbg !44
  %168 = extractelement <16 x i1> %146, i64 8, !dbg !44
  %169 = extractelement <16 x float> %145, i64 8, !dbg !44
  %170 = select i1 %168, float 0.000000e+00, float %169, !dbg !44
  %171 = extractelement <16 x i1> %146, i64 7, !dbg !46
  %172 = extractelement <16 x float> %145, i64 7, !dbg !46
  %173 = select i1 %171, float 0.000000e+00, float %172, !dbg !46
  %174 = extractelement <16 x i1> %146, i64 6, !dbg !46
  %175 = extractelement <16 x float> %145, i64 6, !dbg !46
  %176 = select i1 %174, float 0.000000e+00, float %175, !dbg !46
  %177 = extractelement <16 x i1> %146, i64 5, !dbg !46
  %178 = extractelement <16 x float> %145, i64 5, !dbg !46
  %179 = select i1 %177, float 0.000000e+00, float %178, !dbg !46
  %180 = extractelement <16 x i1> %146, i64 4, !dbg !46
  %181 = extractelement <16 x float> %145, i64 4, !dbg !46
  %182 = select i1 %180, float 0.000000e+00, float %181, !dbg !46
  %183 = extractelement <16 x i1> %146, i64 3, !dbg !46
  %184 = extractelement <16 x float> %145, i64 3, !dbg !46
  %185 = select i1 %183, float 0.000000e+00, float %184, !dbg !46
  %186 = extractelement <16 x i1> %146, i64 2, !dbg !46
  %187 = extractelement <16 x float> %145, i64 2, !dbg !46
  %188 = select i1 %186, float 0.000000e+00, float %187, !dbg !46
  %189 = extractelement <16 x i1> %146, i64 1, !dbg !46
  %190 = extractelement <16 x float> %145, i64 1, !dbg !46
  %191 = select i1 %189, float 0.000000e+00, float %190, !dbg !46
  %192 = extractelement <16 x i1> %146, i64 0, !dbg !46
  %193 = extractelement <16 x float> %145, i64 0, !dbg !46
  %194 = select i1 %192, float 0.000000e+00, float %193, !dbg !46
  %195 = select i1 %43, float %149, float %173, !dbg !47
  %196 = select i1 %43, float %152, float %176, !dbg !47
  %197 = select i1 %43, float %155, float %179, !dbg !47
  %198 = select i1 %43, float %158, float %182, !dbg !47
  %199 = select i1 %43, float %161, float %185, !dbg !47
  %200 = select i1 %43, float %164, float %188, !dbg !47
  %201 = select i1 %43, float %167, float %191, !dbg !47
  %202 = select i1 %43, float %170, float %194, !dbg !47
  %203 = mul i32 %24, 9, !dbg !48
  %204 = mul i32 %25, 9, !dbg !48
  %205 = mul i32 %26, 9, !dbg !48
  %206 = mul i32 %27, 9, !dbg !48
  %207 = mul i32 %28, 9, !dbg !48
  %208 = mul i32 %29, 9, !dbg !48
  %209 = mul i32 %30, 9, !dbg !48
  %210 = mul i32 %31, 9, !dbg !48
  %211 = add i32 %37, %203, !dbg !49
  %212 = add i32 %37, %204, !dbg !49
  %213 = add i32 %37, %205, !dbg !49
  %214 = add i32 %37, %206, !dbg !49
  %215 = add i32 %37, %207, !dbg !49
  %216 = add i32 %37, %208, !dbg !49
  %217 = add i32 %37, %209, !dbg !49
  %218 = add i32 %37, %210, !dbg !49
  %219 = sext i32 %211 to i64, !dbg !50
  %220 = getelementptr float, ptr addrspace(1) %4, i64 %219, !dbg !50
  %221 = sext i32 %212 to i64, !dbg !50
  %222 = getelementptr float, ptr addrspace(1) %4, i64 %221, !dbg !50
  %223 = sext i32 %213 to i64, !dbg !50
  %224 = getelementptr float, ptr addrspace(1) %4, i64 %223, !dbg !50
  %225 = sext i32 %214 to i64, !dbg !50
  %226 = getelementptr float, ptr addrspace(1) %4, i64 %225, !dbg !50
  %227 = sext i32 %215 to i64, !dbg !50
  %228 = getelementptr float, ptr addrspace(1) %4, i64 %227, !dbg !50
  %229 = sext i32 %216 to i64, !dbg !50
  %230 = getelementptr float, ptr addrspace(1) %4, i64 %229, !dbg !50
  %231 = sext i32 %217 to i64, !dbg !50
  %232 = getelementptr float, ptr addrspace(1) %4, i64 %231, !dbg !50
  %233 = sext i32 %218 to i64, !dbg !50
  %234 = getelementptr float, ptr addrspace(1) %4, i64 %233, !dbg !50
  %235 = shl i32 %11, 6, !dbg !51
  %236 = and i32 %235, 960, !dbg !51
  %237 = or disjoint i32 %236, %15, !dbg !51
  %238 = and i32 %11, 127, !dbg !51
  %239 = lshr exact i32 %236, 2, !dbg !51
  %240 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %239, !dbg !51
  %241 = getelementptr float, ptr addrspace(3) %240, i32 %237, !dbg !51
  %242 = bitcast float %195 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #2, !dbg !51
  %243 = or disjoint i32 %237, 16, !dbg !51
  %244 = lshr i32 %243, 4, !dbg !51
  %245 = getelementptr float, ptr addrspace(3) @global_smem, i32 %244, !dbg !51
  %246 = getelementptr float, ptr addrspace(3) %245, i32 %243, !dbg !51
  %247 = bitcast float %196 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #2, !dbg !51
  %248 = or disjoint i32 %237, 32, !dbg !51
  %249 = lshr i32 %248, 4, !dbg !51
  %250 = getelementptr float, ptr addrspace(3) @global_smem, i32 %249, !dbg !51
  %251 = getelementptr float, ptr addrspace(3) %250, i32 %248, !dbg !51
  %252 = bitcast float %197 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %252, i1 true) #2, !dbg !51
  %253 = or disjoint i32 %237, 48, !dbg !51
  %254 = lshr i32 %253, 4, !dbg !51
  %255 = getelementptr float, ptr addrspace(3) @global_smem, i32 %254, !dbg !51
  %256 = getelementptr float, ptr addrspace(3) %255, i32 %253, !dbg !51
  %257 = bitcast float %198 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %257, i1 true) #2, !dbg !51
  %258 = or disjoint i32 %237, 8, !dbg !51
  %259 = getelementptr float, ptr addrspace(3) %240, i32 %258, !dbg !51
  %260 = bitcast float %199 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #2, !dbg !51
  %261 = or disjoint i32 %237, 24, !dbg !51
  %262 = lshr i32 %261, 4, !dbg !51
  %263 = getelementptr float, ptr addrspace(3) @global_smem, i32 %262, !dbg !51
  %264 = getelementptr float, ptr addrspace(3) %263, i32 %261, !dbg !51
  %265 = bitcast float %200 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #2, !dbg !51
  %266 = or disjoint i32 %237, 40, !dbg !51
  %267 = lshr i32 %266, 4, !dbg !51
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i32 %267, !dbg !51
  %269 = getelementptr float, ptr addrspace(3) %268, i32 %266, !dbg !51
  %270 = bitcast float %201 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #2, !dbg !51
  %271 = or disjoint i32 %237, 56, !dbg !51
  %272 = lshr i32 %271, 4, !dbg !51
  %273 = getelementptr float, ptr addrspace(3) @global_smem, i32 %272, !dbg !51
  %274 = getelementptr float, ptr addrspace(3) %273, i32 %271, !dbg !51
  %275 = bitcast float %202 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #2, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %276 = lshr i32 %238, 4, !dbg !51
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %276, !dbg !51
  %278 = getelementptr inbounds float, ptr addrspace(3) %277, i32 %238, !dbg !51
  %279 = load i32, ptr addrspace(3) %278, align 4, !dbg !51
  %280 = or disjoint i32 %238, 128, !dbg !51
  %281 = lshr i32 %280, 4, !dbg !51
  %282 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %281, !dbg !51
  %283 = getelementptr inbounds float, ptr addrspace(3) %282, i32 %280, !dbg !51
  %284 = load i32, ptr addrspace(3) %283, align 4, !dbg !51
  %285 = or disjoint i32 %238, 256, !dbg !51
  %286 = lshr i32 %285, 4, !dbg !51
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %286, !dbg !51
  %288 = getelementptr inbounds float, ptr addrspace(3) %287, i32 %285, !dbg !51
  %289 = load i32, ptr addrspace(3) %288, align 4, !dbg !51
  %290 = or disjoint i32 %238, 384, !dbg !51
  %291 = lshr i32 %290, 4, !dbg !51
  %292 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %291, !dbg !51
  %293 = getelementptr inbounds float, ptr addrspace(3) %292, i32 %290, !dbg !51
  %294 = load i32, ptr addrspace(3) %293, align 4, !dbg !51
  %295 = or disjoint i32 %238, 512, !dbg !51
  %296 = lshr i32 %295, 4, !dbg !51
  %297 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %296, !dbg !51
  %298 = getelementptr inbounds float, ptr addrspace(3) %297, i32 %295, !dbg !51
  %299 = load i32, ptr addrspace(3) %298, align 4, !dbg !51
  %300 = or disjoint i32 %238, 640, !dbg !51
  %301 = lshr i32 %300, 4, !dbg !51
  %302 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %301, !dbg !51
  %303 = getelementptr inbounds float, ptr addrspace(3) %302, i32 %300, !dbg !51
  %304 = load i32, ptr addrspace(3) %303, align 4, !dbg !51
  %305 = or disjoint i32 %238, 768, !dbg !51
  %306 = lshr i32 %305, 4, !dbg !51
  %307 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %306, !dbg !51
  %308 = getelementptr inbounds float, ptr addrspace(3) %307, i32 %305, !dbg !51
  %309 = load i32, ptr addrspace(3) %308, align 4, !dbg !51
  %310 = or disjoint i32 %238, 896, !dbg !51
  %311 = lshr i32 %310, 4, !dbg !51
  %312 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %311, !dbg !51
  %313 = getelementptr inbounds float, ptr addrspace(3) %312, i32 %310, !dbg !51
  %314 = load i32, ptr addrspace(3) %313, align 4, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %279, ptr addrspace(1) %220, i1 %40) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %284, ptr addrspace(1) %222, i1 %40) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %289, ptr addrspace(1) %224, i1 %40) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %294, ptr addrspace(1) %226, i1 %40) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %299, ptr addrspace(1) %228, i1 %40) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %304, ptr addrspace(1) %230, i1 %40) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %309, ptr addrspace(1) %232, i1 %40) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %314, ptr addrspace(1) %234, i1 %40) #2, !dbg !51
  %315 = shl i32 %35, 9, !dbg !52
  %316 = shl i32 %36, 9, !dbg !52
  %317 = mul i32 %41, 4608, !dbg !53
  %318 = add i32 %317, %.decomposed, !dbg !54
  %319 = add i32 %318, %315, !dbg !55
  %320 = add i32 %318, %316, !dbg !55
  %321 = sext i32 %319 to i64, !dbg !56
  %322 = getelementptr float, ptr addrspace(1) %5, i64 %321, !dbg !56
  %323 = sext i32 %320 to i64, !dbg !56
  %324 = getelementptr float, ptr addrspace(1) %5, i64 %323, !dbg !56
  %325 = bitcast float %195 to i32, !dbg !57
  %326 = bitcast float %196 to i32, !dbg !57
  %327 = bitcast float %197 to i32, !dbg !57
  %328 = bitcast float %198 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %325, i32 %326, i32 %327, i32 %328, ptr addrspace(1) %322, i1 %38) #2, !dbg !57
  %329 = bitcast float %199 to i32, !dbg !57
  %330 = bitcast float %200 to i32, !dbg !57
  %331 = bitcast float %201 to i32, !dbg !57
  %332 = bitcast float %202 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %329, i32 %330, i32 %331, i32 %332, ptr addrspace(1) %324, i1 %39) #2, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdmfdvlg2iv3a4r2haan3d4we6vxu6nyqnyrmyabcctwwytb6yhh.py", directory: "inductor_cache/dm")
!4 = !{ptr @triton_poi_fused_cat_convolution_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_convolution_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_convolution_19", linkageName: "triton_poi_fused_cat_convolution_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 36, column: 18, scope: !7)
!22 = !DILocation(line: 37, column: 34, scope: !7)
!23 = !DILocation(line: 37, column: 44, scope: !7)
!24 = !DILocation(line: 37, column: 39, scope: !7)
!25 = !DILocation(line: 37, column: 50, scope: !7)
!26 = !DILocation(line: 37, column: 30, scope: !7)
!27 = !DILocation(line: 37, column: 63, scope: !7)
!28 = !DILocation(line: 37, column: 56, scope: !7)
!29 = !DILocation(line: 38, column: 30, scope: !7)
!30 = !DILocation(line: 38, column: 70, scope: !7)
!31 = !DILocation(line: 44, column: 20, scope: !7)
!32 = !DILocation(line: 47, column: 60, scope: !7)
!33 = !DILocation(line: 47, column: 51, scope: !7)
!34 = !DILocation(line: 47, column: 31, scope: !7)
!35 = !DILocation(line: 47, column: 74, scope: !7)
!36 = !DILocation(line: 47, column: 66, scope: !7)
!37 = !DILocation(line: 48, column: 31, scope: !7)
!38 = !DILocation(line: 48, column: 80, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 51, column: 42, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !45)
!45 = !DILocation(line: 41, column: 40, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 0, scope: !7)
!48 = !DILocation(line: 55, column: 32, scope: !7)
!49 = !DILocation(line: 55, column: 30, scope: !7)
!50 = !DILocation(line: 55, column: 25, scope: !7)
!51 = !DILocation(line: 55, column: 44, scope: !7)
!52 = !DILocation(line: 56, column: 34, scope: !7)
!53 = !DILocation(line: 56, column: 44, scope: !7)
!54 = !DILocation(line: 56, column: 30, scope: !7)
!55 = !DILocation(line: 56, column: 39, scope: !7)
!56 = !DILocation(line: 56, column: 25, scope: !7)
!57 = !DILocation(line: 56, column: 56, scope: !7)
!58 = !DILocation(line: 56, column: 4, scope: !7)
