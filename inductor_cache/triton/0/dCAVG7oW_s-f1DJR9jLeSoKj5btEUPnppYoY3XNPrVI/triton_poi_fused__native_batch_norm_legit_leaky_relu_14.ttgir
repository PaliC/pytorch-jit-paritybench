#blocked = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#loc = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__native_batch_norm_legit_leaky_relu_14(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<2.560000e+02> : tensor<1024x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<9.99999974E-6> : tensor<1024x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1024x1xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<2.000000e-01> : tensor<1024x1xf32, #blocked> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<1024> : tensor<1024x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<1024> : tensor<1024x1xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<256> : tensor<1024x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<256> : tensor<1024x1xi32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<65536> : tensor<1024x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.get_program_id x : i32 loc(#loc4)
    %3 = arith.muli %2, %c1024_i32 : i32 loc(#loc5)
    %4 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %5 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %6 = tt.expand_dims %4 {axis = 1 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1024x1xi32, #blocked> loc(#loc6)
    %7 = tt.expand_dims %5 {axis = 1 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1024x1xi32, #blocked1> loc(#loc6)
    %8 = tt.splat %3 : i32 -> tensor<1024x1xi32, #blocked> loc(#loc7)
    %9 = tt.splat %3 : i32 -> tensor<1024x1xi32, #blocked1> loc(#loc7)
    %10 = arith.addi %8, %6 : tensor<1024x1xi32, #blocked> loc(#loc7)
    %11 = arith.addi %9, %7 : tensor<1024x1xi32, #blocked1> loc(#loc7)
    %12 = arith.cmpi slt, %10, %cst_3 : tensor<1024x1xi32, #blocked> loc(#loc8)
    %13 = arith.cmpi slt, %11, %cst_4 : tensor<1024x1xi32, #blocked1> loc(#loc8)
    %14 = arith.muli %0, %c256_i32 : i32 loc(#loc9)
    %15 = arith.divsi %10, %cst_5 : tensor<1024x1xi32, #blocked> loc(#loc10)
    %16 = arith.muli %15, %cst_7 : tensor<1024x1xi32, #blocked> loc(#loc11)
    %17 = tt.splat %14 : i32 -> tensor<1024x1xi32, #blocked> loc(#loc12)
    %18 = arith.addi %17, %16 : tensor<1024x1xi32, #blocked> loc(#loc12)
    %19 = arith.remsi %10, %cst_5 : tensor<1024x1xi32, #blocked> loc(#loc13)
    %20 = arith.addi %18, %19 : tensor<1024x1xi32, #blocked> loc(#loc14)
    %21 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>, #blocked> loc(#loc15)
    %22 = tt.addptr %21, %20 : tensor<1024x1x!tt.ptr<f32>, #blocked>, tensor<1024x1xi32, #blocked> loc(#loc15)
    %23 = tt.splat %1 : i1 -> tensor<1024x1xi1, #blocked> loc(#loc16)
    %24 = tt.splat %1 : i1 -> tensor<1024x1xi1, #blocked1> loc(#loc16)
    %25 = arith.andi %12, %23 : tensor<1024x1xi1, #blocked> loc(#loc16)
    %26 = arith.andi %13, %24 : tensor<1024x1xi1, #blocked1> loc(#loc16)
    %27 = tt.load %22, %25 evictionPolicy = evict_last : tensor<1024x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %28 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>, #blocked> loc(#loc18)
    %29 = tt.addptr %28, %10 : tensor<1024x1x!tt.ptr<f32>, #blocked>, tensor<1024x1xi32, #blocked> loc(#loc18)
    %30 = tt.load %29, %12 evictionPolicy = evict_last : tensor<1024x1x!tt.ptr<f32>, #blocked> loc(#loc19)
    %31 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>, #blocked> loc(#loc20)
    %32 = tt.addptr %31, %10 : tensor<1024x1x!tt.ptr<f32>, #blocked>, tensor<1024x1xi32, #blocked> loc(#loc20)
    %33 = tt.load %32, %12 evictionPolicy = evict_last : tensor<1024x1x!tt.ptr<f32>, #blocked> loc(#loc21)
    %34 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>, #blocked> loc(#loc22)
    %35 = tt.addptr %34, %10 : tensor<1024x1x!tt.ptr<f32>, #blocked>, tensor<1024x1xi32, #blocked> loc(#loc22)
    %36 = tt.load %35, %12 evictionPolicy = evict_last : tensor<1024x1x!tt.ptr<f32>, #blocked> loc(#loc23)
    %37 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>, #blocked> loc(#loc24)
    %38 = tt.addptr %37, %19 : tensor<1024x1x!tt.ptr<f32>, #blocked>, tensor<1024x1xi32, #blocked> loc(#loc24)
    %39 = tt.load %38, %12 evictionPolicy = evict_last : tensor<1024x1x!tt.ptr<f32>, #blocked> loc(#loc25)
    %40 = arith.subf %27, %30 : tensor<1024x1xf32, #blocked> loc(#loc26)
    %41 = arith.divf %33, %cst : tensor<1024x1xf32, #blocked> loc(#loc27)
    %42 = arith.addf %41, %cst_0 : tensor<1024x1xf32, #blocked> loc(#loc28)
    %43 = tt.extern_elementwise %42 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1024x1xf32, #blocked>) -> tensor<1024x1xf32, #blocked> loc(#loc29)
    %44 = arith.mulf %40, %43 : tensor<1024x1xf32, #blocked> loc(#loc30)
    %45 = arith.mulf %44, %36 : tensor<1024x1xf32, #blocked> loc(#loc31)
    %46 = arith.addf %45, %39 : tensor<1024x1xf32, #blocked> loc(#loc32)
    %47 = arith.cmpf ogt, %46, %cst_1 : tensor<1024x1xf32, #blocked> loc(#loc33)
    %48 = arith.mulf %46, %cst_2 : tensor<1024x1xf32, #blocked> loc(#loc34)
    %49 = arith.select %47, %46, %48 : tensor<1024x1xi1, #blocked>, tensor<1024x1xf32, #blocked> loc(#loc35)
    %50 = arith.muli %11, %cst_6 : tensor<1024x1xi32, #blocked1> loc(#loc36)
    %51 = tt.splat %0 : i32 -> tensor<1024x1xi32, #blocked1> loc(#loc37)
    %52 = arith.addi %51, %50 : tensor<1024x1xi32, #blocked1> loc(#loc37)
    %53 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>, #blocked1> loc(#loc38)
    %54 = tt.addptr %53, %52 : tensor<1024x1x!tt.ptr<f32>, #blocked1>, tensor<1024x1xi32, #blocked1> loc(#loc38)
    %55 = triton_gpu.convert_layout %49 : tensor<1024x1xf32, #blocked> -> tensor<1024x1xf32, #blocked1> loc(#loc39)
    tt.store %54, %55, %26 : tensor<1024x1x!tt.ptr<f32>, #blocked1> loc(#loc39)
    tt.return loc(#loc40)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":22:28)
#loc3 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":24:21)
#loc4 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":25:28)
#loc5 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":25:33)
#loc6 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":26:44)
#loc7 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":26:23)
#loc8 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":27:21)
#loc9 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":30:34)
#loc10 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":30:52)
#loc11 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":30:46)
#loc12 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":30:39)
#loc13 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":30:66)
#loc14 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":30:61)
#loc15 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":30:30)
#loc16 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":30:82)
#loc17 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":30:74)
#loc18 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":31:30)
#loc19 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":31:35)
#loc20 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":32:30)
#loc21 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":32:35)
#loc22 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":33:31)
#loc23 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":33:36)
#loc24 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":34:32)
#loc25 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":34:44)
#loc26 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":35:18)
#loc27 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":37:18)
#loc28 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":39:18)
#loc29 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":40:27)
#loc30 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":41:18)
#loc31 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":42:19)
#loc32 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":43:20)
#loc33 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":45:20)
#loc34 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":47:20)
#loc35 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":48:35)
#loc36 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":49:34)
#loc37 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":49:30)
#loc38 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":49:25)
#loc39 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":49:46)
#loc40 = loc("inductor_cache/32/c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py":49:4)
