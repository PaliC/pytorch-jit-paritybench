; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_leaky_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = icmp slt i32 %9, 256, !dbg !11
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %12 = shl i32 %11, 10, !dbg !13
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %14 = shl i32 %13, 2, !dbg !14
  %15 = and i32 %14, 508, !dbg !14
  %16 = or disjoint i32 %12, %15, !dbg !15
  %17 = or disjoint i32 %16, 512, !dbg !15
  %18 = icmp slt i32 %16, 1024, !dbg !16
  %19 = icmp slt i32 %17, 1024, !dbg !16
  %20 = shl i32 %9, 8, !dbg !17
  %.frozen = freeze i32 %16, !dbg !18
  %21 = sdiv i32 %.frozen, 256, !dbg !18
  %22 = sdiv i32 %17, 256, !dbg !18
  %23 = shl i32 %21, 16, !dbg !19
  %24 = shl i32 %22, 16, !dbg !19
  %25 = mul i32 %21, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %25, !dbg !20
  %26 = add i32 %.decomposed, %20, !dbg !21
  %27 = add i32 %26, %23, !dbg !22
  %28 = add i32 %24, %.decomposed, !dbg !21
  %29 = add i32 %28, %20, !dbg !22
  %30 = sext i32 %27 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !23
  %32 = sext i32 %29 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !23
  %34 = and i1 %10, %18, !dbg !24
  %35 = and i1 %19, %10, !dbg !24
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %34) #4, !dbg !25
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %35) #4, !dbg !25
  %38 = sext i32 %16 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !26
  %40 = sext i32 %17 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !26
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %18) #4, !dbg !27
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %19) #4, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !28
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %18) #4, !dbg !29
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !29
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !29
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !29
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !29
  %51 = bitcast i32 %47 to float, !dbg !29
  %52 = bitcast i32 %48 to float, !dbg !29
  %53 = bitcast i32 %49 to float, !dbg !29
  %54 = bitcast i32 %50 to float, !dbg !29
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %19) #4, !dbg !29
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !29
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !29
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !29
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !29
  %60 = bitcast i32 %56 to float, !dbg !29
  %61 = bitcast i32 %57 to float, !dbg !29
  %62 = bitcast i32 %58 to float, !dbg !29
  %63 = bitcast i32 %59 to float, !dbg !29
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !30
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %18) #4, !dbg !31
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %19) #4, !dbg !31
  %68 = sext i32 %.decomposed to i64, !dbg !32
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %68, !dbg !32
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %18) #4, !dbg !33
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %19) #4, !dbg !33
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float 2.560000e+02) #4, !dbg !34
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float 2.560000e+02) #4, !dbg !34
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float 2.560000e+02) #4, !dbg !34
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float 2.560000e+02) #4, !dbg !34
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float 2.560000e+02) #4, !dbg !34
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float 2.560000e+02) #4, !dbg !34
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float 2.560000e+02) #4, !dbg !34
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float 2.560000e+02) #4, !dbg !34
  %80 = fadd float %72, 0x3EE4F8B580000000, !dbg !35
  %81 = fadd float %73, 0x3EE4F8B580000000, !dbg !35
  %82 = fadd float %74, 0x3EE4F8B580000000, !dbg !35
  %83 = fadd float %75, 0x3EE4F8B580000000, !dbg !35
  %84 = fadd float %76, 0x3EE4F8B580000000, !dbg !35
  %85 = fadd float %77, 0x3EE4F8B580000000, !dbg !35
  %86 = fadd float %78, 0x3EE4F8B580000000, !dbg !35
  %87 = fadd float %79, 0x3EE4F8B580000000, !dbg !35
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %88, 0, !dbg !36
  br i1 %.not.i, label %91, label %89, !dbg !36

89:                                               ; preds = %8
  %90 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %80), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

91:                                               ; preds = %8
  %92 = tail call float @llvm.nvvm.rsqrt.approx.f(float %80), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %89, %91
  %.0.i = phi float [ %90, %89 ], [ %92, %91 ], !dbg !36
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i1 = icmp eq i32 %93, 0, !dbg !36
  br i1 %.not.i1, label %96, label %94, !dbg !36

94:                                               ; preds = %__nv_rsqrtf.exit
  %95 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %81), !dbg !36
  br label %__nv_rsqrtf.exit3, !dbg !36

96:                                               ; preds = %__nv_rsqrtf.exit
  %97 = tail call float @llvm.nvvm.rsqrt.approx.f(float %81), !dbg !36
  br label %__nv_rsqrtf.exit3, !dbg !36

__nv_rsqrtf.exit3:                                ; preds = %94, %96
  %.0.i2 = phi float [ %95, %94 ], [ %97, %96 ], !dbg !36
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i4 = icmp eq i32 %98, 0, !dbg !36
  br i1 %.not.i4, label %101, label %99, !dbg !36

99:                                               ; preds = %__nv_rsqrtf.exit3
  %100 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %82), !dbg !36
  br label %__nv_rsqrtf.exit6, !dbg !36

101:                                              ; preds = %__nv_rsqrtf.exit3
  %102 = tail call float @llvm.nvvm.rsqrt.approx.f(float %82), !dbg !36
  br label %__nv_rsqrtf.exit6, !dbg !36

__nv_rsqrtf.exit6:                                ; preds = %99, %101
  %.0.i5 = phi float [ %100, %99 ], [ %102, %101 ], !dbg !36
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i7 = icmp eq i32 %103, 0, !dbg !36
  br i1 %.not.i7, label %106, label %104, !dbg !36

104:                                              ; preds = %__nv_rsqrtf.exit6
  %105 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %83), !dbg !36
  br label %__nv_rsqrtf.exit9, !dbg !36

106:                                              ; preds = %__nv_rsqrtf.exit6
  %107 = tail call float @llvm.nvvm.rsqrt.approx.f(float %83), !dbg !36
  br label %__nv_rsqrtf.exit9, !dbg !36

__nv_rsqrtf.exit9:                                ; preds = %104, %106
  %.0.i8 = phi float [ %105, %104 ], [ %107, %106 ], !dbg !36
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i10 = icmp eq i32 %108, 0, !dbg !36
  br i1 %.not.i10, label %111, label %109, !dbg !36

109:                                              ; preds = %__nv_rsqrtf.exit9
  %110 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %84), !dbg !36
  br label %__nv_rsqrtf.exit12, !dbg !36

111:                                              ; preds = %__nv_rsqrtf.exit9
  %112 = tail call float @llvm.nvvm.rsqrt.approx.f(float %84), !dbg !36
  br label %__nv_rsqrtf.exit12, !dbg !36

__nv_rsqrtf.exit12:                               ; preds = %109, %111
  %.0.i11 = phi float [ %110, %109 ], [ %112, %111 ], !dbg !36
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i13 = icmp eq i32 %113, 0, !dbg !36
  br i1 %.not.i13, label %116, label %114, !dbg !36

114:                                              ; preds = %__nv_rsqrtf.exit12
  %115 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %85), !dbg !36
  br label %__nv_rsqrtf.exit15, !dbg !36

116:                                              ; preds = %__nv_rsqrtf.exit12
  %117 = tail call float @llvm.nvvm.rsqrt.approx.f(float %85), !dbg !36
  br label %__nv_rsqrtf.exit15, !dbg !36

__nv_rsqrtf.exit15:                               ; preds = %114, %116
  %.0.i14 = phi float [ %115, %114 ], [ %117, %116 ], !dbg !36
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i16 = icmp eq i32 %118, 0, !dbg !36
  br i1 %.not.i16, label %121, label %119, !dbg !36

119:                                              ; preds = %__nv_rsqrtf.exit15
  %120 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %86), !dbg !36
  br label %__nv_rsqrtf.exit18, !dbg !36

121:                                              ; preds = %__nv_rsqrtf.exit15
  %122 = tail call float @llvm.nvvm.rsqrt.approx.f(float %86), !dbg !36
  br label %__nv_rsqrtf.exit18, !dbg !36

__nv_rsqrtf.exit18:                               ; preds = %119, %121
  %.0.i17 = phi float [ %120, %119 ], [ %122, %121 ], !dbg !36
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i19 = icmp eq i32 %123, 0, !dbg !36
  br i1 %.not.i19, label %126, label %124, !dbg !36

124:                                              ; preds = %__nv_rsqrtf.exit18
  %125 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %87), !dbg !36
  br label %__nv_rsqrtf.exit21, !dbg !36

126:                                              ; preds = %__nv_rsqrtf.exit18
  %127 = tail call float @llvm.nvvm.rsqrt.approx.f(float %87), !dbg !36
  br label %__nv_rsqrtf.exit21, !dbg !36

__nv_rsqrtf.exit21:                               ; preds = %124, %126
  %.0.i20 = phi float [ %125, %124 ], [ %127, %126 ], !dbg !36
  %128 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %129 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !27
  %130 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %131 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !27
  %132 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %133 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !27
  %134 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %135 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !27
  %136 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !25
  %137 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !27
  %138 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !25
  %139 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !27
  %140 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !25
  %141 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !27
  %142 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !25
  %143 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !27
  %144 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !33
  %145 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !33
  %146 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !33
  %147 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !33
  %148 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !33
  %149 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !33
  %150 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !33
  %151 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !33
  %152 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !31
  %153 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !31
  %154 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !31
  %155 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !31
  %156 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !31
  %157 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !31
  %158 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !31
  %159 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !31
  %160 = and i32 %13, 127, !dbg !14
  %161 = or disjoint i32 %160, %12, !dbg !15
  %162 = or disjoint i32 %161, 896, !dbg !15
  %163 = icmp slt i32 %162, 1024, !dbg !16
  %164 = and i1 %10, %163, !dbg !24
  %165 = or disjoint i32 %161, 768, !dbg !15
  %166 = icmp slt i32 %165, 1024, !dbg !16
  %167 = and i1 %10, %166, !dbg !24
  %168 = or disjoint i32 %161, 640, !dbg !15
  %169 = icmp slt i32 %168, 1024, !dbg !16
  %170 = and i1 %10, %169, !dbg !24
  %171 = or disjoint i32 %161, 512, !dbg !15
  %172 = icmp slt i32 %171, 1024, !dbg !16
  %173 = and i1 %10, %172, !dbg !24
  %174 = or disjoint i32 %160, 384, !dbg !14
  %175 = or disjoint i32 %12, %174, !dbg !15
  %176 = icmp slt i32 %175, 1024, !dbg !16
  %177 = and i1 %10, %176, !dbg !24
  %178 = or disjoint i32 %160, 256, !dbg !14
  %179 = or disjoint i32 %12, %178, !dbg !15
  %180 = icmp slt i32 %179, 1024, !dbg !16
  %181 = and i1 %10, %180, !dbg !24
  %182 = or disjoint i32 %160, 128, !dbg !14
  %183 = or disjoint i32 %12, %182, !dbg !15
  %184 = icmp slt i32 %183, 1024, !dbg !16
  %185 = and i1 %10, %184, !dbg !24
  %186 = icmp slt i32 %161, 1024, !dbg !16
  %187 = and i1 %10, %186, !dbg !24
  %188 = insertelement <8 x i32> poison, i32 %128, i64 0, !dbg !25
  %189 = insertelement <8 x i32> %188, i32 %130, i64 1, !dbg !25
  %190 = insertelement <8 x i32> %189, i32 %132, i64 2, !dbg !25
  %191 = insertelement <8 x i32> %190, i32 %134, i64 3, !dbg !25
  %192 = insertelement <8 x i32> %191, i32 %136, i64 4, !dbg !25
  %193 = insertelement <8 x i32> %192, i32 %138, i64 5, !dbg !25
  %194 = insertelement <8 x i32> %193, i32 %140, i64 6, !dbg !25
  %195 = insertelement <8 x i32> %194, i32 %142, i64 7, !dbg !25
  %196 = bitcast <8 x i32> %195 to <8 x float>, !dbg !25
  %197 = insertelement <8 x i32> poison, i32 %129, i64 0, !dbg !27
  %198 = insertelement <8 x i32> %197, i32 %131, i64 1, !dbg !27
  %199 = insertelement <8 x i32> %198, i32 %133, i64 2, !dbg !27
  %200 = insertelement <8 x i32> %199, i32 %135, i64 3, !dbg !27
  %201 = insertelement <8 x i32> %200, i32 %137, i64 4, !dbg !27
  %202 = insertelement <8 x i32> %201, i32 %139, i64 5, !dbg !27
  %203 = insertelement <8 x i32> %202, i32 %141, i64 6, !dbg !27
  %204 = insertelement <8 x i32> %203, i32 %143, i64 7, !dbg !27
  %205 = bitcast <8 x i32> %204 to <8 x float>, !dbg !27
  %206 = fsub <8 x float> %196, %205, !dbg !37
  %207 = insertelement <8 x i32> poison, i32 %144, i64 0, !dbg !33
  %208 = insertelement <8 x i32> %207, i32 %145, i64 1, !dbg !33
  %209 = insertelement <8 x i32> %208, i32 %146, i64 2, !dbg !33
  %210 = insertelement <8 x i32> %209, i32 %147, i64 3, !dbg !33
  %211 = insertelement <8 x i32> %210, i32 %148, i64 4, !dbg !33
  %212 = insertelement <8 x i32> %211, i32 %149, i64 5, !dbg !33
  %213 = insertelement <8 x i32> %212, i32 %150, i64 6, !dbg !33
  %214 = insertelement <8 x i32> %213, i32 %151, i64 7, !dbg !33
  %215 = bitcast <8 x i32> %214 to <8 x float>, !dbg !33
  %216 = insertelement <8 x i32> poison, i32 %152, i64 0, !dbg !31
  %217 = insertelement <8 x i32> %216, i32 %153, i64 1, !dbg !31
  %218 = insertelement <8 x i32> %217, i32 %154, i64 2, !dbg !31
  %219 = insertelement <8 x i32> %218, i32 %155, i64 3, !dbg !31
  %220 = insertelement <8 x i32> %219, i32 %156, i64 4, !dbg !31
  %221 = insertelement <8 x i32> %220, i32 %157, i64 5, !dbg !31
  %222 = insertelement <8 x i32> %221, i32 %158, i64 6, !dbg !31
  %223 = insertelement <8 x i32> %222, i32 %159, i64 7, !dbg !31
  %224 = bitcast <8 x i32> %223 to <8 x float>, !dbg !31
  %225 = insertelement <8 x float> poison, float %.0.i20, i64 0, !dbg !38
  %226 = insertelement <8 x float> %225, float %.0.i17, i64 1, !dbg !38
  %227 = insertelement <8 x float> %226, float %.0.i14, i64 2, !dbg !38
  %228 = insertelement <8 x float> %227, float %.0.i11, i64 3, !dbg !38
  %229 = insertelement <8 x float> %228, float %.0.i8, i64 4, !dbg !38
  %230 = insertelement <8 x float> %229, float %.0.i5, i64 5, !dbg !38
  %231 = insertelement <8 x float> %230, float %.0.i2, i64 6, !dbg !38
  %232 = insertelement <8 x float> %231, float %.0.i, i64 7, !dbg !38
  %233 = fmul <8 x float> %206, %232, !dbg !38
  %234 = fmul <8 x float> %233, %224, !dbg !39
  %235 = fadd <8 x float> %234, %215, !dbg !40
  %236 = fcmp ogt <8 x float> %235, zeroinitializer, !dbg !41
  %237 = extractelement <8 x float> %235, i64 7, !dbg !42
  %238 = fmul float %237, 0x3FC99999A0000000, !dbg !43
  %239 = extractelement <8 x float> %235, i64 6, !dbg !42
  %240 = fmul float %239, 0x3FC99999A0000000, !dbg !43
  %241 = extractelement <8 x float> %235, i64 5, !dbg !42
  %242 = fmul float %241, 0x3FC99999A0000000, !dbg !43
  %243 = extractelement <8 x float> %235, i64 4, !dbg !42
  %244 = fmul float %243, 0x3FC99999A0000000, !dbg !43
  %245 = extractelement <8 x float> %235, i64 3, !dbg !42
  %246 = fmul float %245, 0x3FC99999A0000000, !dbg !43
  %247 = extractelement <8 x float> %235, i64 2, !dbg !42
  %248 = fmul float %247, 0x3FC99999A0000000, !dbg !43
  %249 = extractelement <8 x float> %235, i64 1, !dbg !42
  %250 = fmul float %249, 0x3FC99999A0000000, !dbg !43
  %251 = extractelement <8 x float> %235, i64 0, !dbg !42
  %252 = fmul float %251, 0x3FC99999A0000000, !dbg !43
  %253 = extractelement <8 x i1> %236, i64 7, !dbg !42
  %254 = select i1 %253, float %237, float %238, !dbg !42
  %255 = extractelement <8 x i1> %236, i64 6, !dbg !42
  %256 = select i1 %255, float %239, float %240, !dbg !42
  %257 = extractelement <8 x i1> %236, i64 5, !dbg !42
  %258 = select i1 %257, float %241, float %242, !dbg !42
  %259 = extractelement <8 x i1> %236, i64 4, !dbg !42
  %260 = select i1 %259, float %243, float %244, !dbg !42
  %261 = extractelement <8 x i1> %236, i64 3, !dbg !42
  %262 = select i1 %261, float %245, float %246, !dbg !42
  %263 = extractelement <8 x i1> %236, i64 2, !dbg !42
  %264 = select i1 %263, float %247, float %248, !dbg !42
  %265 = extractelement <8 x i1> %236, i64 1, !dbg !42
  %266 = select i1 %265, float %249, float %250, !dbg !42
  %267 = extractelement <8 x i1> %236, i64 0, !dbg !42
  %268 = select i1 %267, float %251, float %252, !dbg !42
  %269 = shl i32 %161, 8, !dbg !44
  %270 = shl i32 %183, 8, !dbg !44
  %271 = shl i32 %179, 8, !dbg !44
  %272 = shl i32 %175, 8, !dbg !44
  %273 = shl i32 %171, 8, !dbg !44
  %274 = shl i32 %168, 8, !dbg !44
  %275 = shl i32 %165, 8, !dbg !44
  %276 = shl i32 %162, 8, !dbg !44
  %277 = add i32 %269, %9, !dbg !45
  %278 = add i32 %270, %9, !dbg !45
  %279 = add i32 %271, %9, !dbg !45
  %280 = add i32 %272, %9, !dbg !45
  %281 = add i32 %273, %9, !dbg !45
  %282 = add i32 %274, %9, !dbg !45
  %283 = add i32 %275, %9, !dbg !45
  %284 = add i32 %276, %9, !dbg !45
  %285 = sext i32 %277 to i64, !dbg !46
  %286 = getelementptr float, ptr addrspace(1) %5, i64 %285, !dbg !46
  %287 = sext i32 %278 to i64, !dbg !46
  %288 = getelementptr float, ptr addrspace(1) %5, i64 %287, !dbg !46
  %289 = sext i32 %279 to i64, !dbg !46
  %290 = getelementptr float, ptr addrspace(1) %5, i64 %289, !dbg !46
  %291 = sext i32 %280 to i64, !dbg !46
  %292 = getelementptr float, ptr addrspace(1) %5, i64 %291, !dbg !46
  %293 = sext i32 %281 to i64, !dbg !46
  %294 = getelementptr float, ptr addrspace(1) %5, i64 %293, !dbg !46
  %295 = sext i32 %282 to i64, !dbg !46
  %296 = getelementptr float, ptr addrspace(1) %5, i64 %295, !dbg !46
  %297 = sext i32 %283 to i64, !dbg !46
  %298 = getelementptr float, ptr addrspace(1) %5, i64 %297, !dbg !46
  %299 = sext i32 %284 to i64, !dbg !46
  %300 = getelementptr float, ptr addrspace(1) %5, i64 %299, !dbg !46
  %301 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !47
  %302 = bitcast float %254 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %302, i1 true) #4, !dbg !47
  %303 = or disjoint i32 %15, 1, !dbg !47
  %304 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %303, !dbg !47
  %305 = bitcast float %256 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %305, i1 true) #4, !dbg !47
  %306 = or disjoint i32 %15, 2, !dbg !47
  %307 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %306, !dbg !47
  %308 = bitcast float %258 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %308, i1 true) #4, !dbg !47
  %309 = or disjoint i32 %15, 3, !dbg !47
  %310 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %309, !dbg !47
  %311 = bitcast float %260 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %311, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %312 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %160, !dbg !47
  %313 = load i32, ptr addrspace(3) %312, align 4, !dbg !47
  %314 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %182, !dbg !47
  %315 = load i32, ptr addrspace(3) %314, align 4, !dbg !47
  %316 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %178, !dbg !47
  %317 = load i32, ptr addrspace(3) %316, align 4, !dbg !47
  %318 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %174, !dbg !47
  %319 = load i32, ptr addrspace(3) %318, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %320 = bitcast float %262 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %320, i1 true) #4, !dbg !47
  %321 = bitcast float %264 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %321, i1 true) #4, !dbg !47
  %322 = bitcast float %266 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %322, i1 true) #4, !dbg !47
  %323 = bitcast float %268 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %323, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %324 = load i32, ptr addrspace(3) %312, align 4, !dbg !47
  %325 = load i32, ptr addrspace(3) %314, align 4, !dbg !47
  %326 = load i32, ptr addrspace(3) %316, align 4, !dbg !47
  %327 = load i32, ptr addrspace(3) %318, align 4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %313, ptr addrspace(1) %286, i1 %187) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %315, ptr addrspace(1) %288, i1 %185) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %317, ptr addrspace(1) %290, i1 %181) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %319, ptr addrspace(1) %292, i1 %177) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %324, ptr addrspace(1) %294, i1 %173) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %325, ptr addrspace(1) %296, i1 %170) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %326, ptr addrspace(1) %298, i1 %167) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %327, ptr addrspace(1) %300, i1 %164) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py", directory: "inductor_cache/32")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_leaky_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_leaky_relu_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_leaky_relu_14", linkageName: "triton_poi_fused__native_batch_norm_legit_leaky_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 34, scope: !7)
!18 = !DILocation(line: 30, column: 52, scope: !7)
!19 = !DILocation(line: 30, column: 46, scope: !7)
!20 = !DILocation(line: 30, column: 66, scope: !7)
!21 = !DILocation(line: 30, column: 39, scope: !7)
!22 = !DILocation(line: 30, column: 61, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 82, scope: !7)
!25 = !DILocation(line: 30, column: 74, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 30, scope: !7)
!29 = !DILocation(line: 32, column: 35, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 32, scope: !7)
!33 = !DILocation(line: 34, column: 44, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 27, scope: !7)
!37 = !DILocation(line: 35, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 19, scope: !7)
!40 = !DILocation(line: 43, column: 20, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 48, column: 35, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 34, scope: !7)
!45 = !DILocation(line: 49, column: 30, scope: !7)
!46 = !DILocation(line: 49, column: 25, scope: !7)
!47 = !DILocation(line: 49, column: 46, scope: !7)
!48 = !DILocation(line: 49, column: 4, scope: !7)
