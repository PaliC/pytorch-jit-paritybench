; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_pixel_shuffle_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.fr = freeze i32 %8, !dbg !11
  %9 = shl i32 %.fr, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 510, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = sdiv i32 %13, 8, !dbg !14
  %15 = mul i32 %14, 8, !dbg !15
  %.decomposed = sub i32 %13, %15, !dbg !15
  %16 = srem i32 %14, 8, !dbg !16
  %17 = sdiv i32 %13, 64, !dbg !17
  %18 = srem i32 %17, 8, !dbg !18
  %19 = sdiv i32 %13, 512, !dbg !19
  %20 = srem i32 %19, 8, !dbg !20
  %21 = sdiv i32 %13, 4096, !dbg !21
  %22 = srem i32 %21, 21, !dbg !22
  %23 = shl nsw i32 %18, 3, !dbg !23
  %24 = add nsw i32 %23, %.decomposed, !dbg !24
  %25 = shl nsw i32 %22, 6, !dbg !25
  %26 = add nsw i32 %24, %25, !dbg !26
  %27 = mul nsw i32 %16, 1344, !dbg !27
  %28 = mul nsw i32 %20, 10752, !dbg !28
  %29 = srem i32 %13, 86016, !dbg !29
  %30 = sub nsw i32 %13, %29, !dbg !30
  %31 = add i32 %30, %27, !dbg !31
  %32 = add i32 %31, %28, !dbg !29
  %33 = add i32 %32, %26, !dbg !32
  %34 = sext i32 %33 to i64, !dbg !33
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !33
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !34
  %37 = sext i32 %26 to i64, !dbg !35
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !35
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !36
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !37
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !38
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !38
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !38
  %44 = bitcast i32 %42 to float, !dbg !38
  %45 = bitcast i32 %43 to float, !dbg !38
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !39
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !40
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !41
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !42
  %50 = fadd float %44, 0x3EE4F8B580000000, !dbg !43
  %51 = fadd float %45, 0x3EE4F8B580000000, !dbg !43
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i = icmp eq i32 %52, 0, !dbg !44
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i = icmp eq i32 %53, 0, !dbg !44
  br i1 %.not.i, label %59, label %54, !dbg !44

54:                                               ; preds = %7
  br i1 %.not1.i, label %57, label %55, !dbg !44

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

59:                                               ; preds = %7
  br i1 %.not1.i, label %62, label %60, !dbg !44

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %55, %57, %60, %62
  %.0.i = phi float [ %56, %55 ], [ %58, %57 ], [ %61, %60 ], [ %63, %62 ], !dbg !44
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i1 = icmp eq i32 %64, 0, !dbg !44
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i4 = icmp eq i32 %65, 0, !dbg !44
  br i1 %.not.i1, label %71, label %66, !dbg !44

66:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %69, label %67, !dbg !44

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %74, label %72, !dbg !44

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

__nv_sqrtf.exit5:                                 ; preds = %67, %69, %72, %74
  %.0.i3 = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !44
  %76 = extractvalue { i32, i32 } %36, 1, !dbg !34
  %77 = bitcast i32 %76 to float, !dbg !34
  %78 = extractvalue { i32, i32 } %39, 1, !dbg !36
  %79 = bitcast i32 %78 to float, !dbg !36
  %80 = fsub float %77, %79, !dbg !45
  %81 = extractvalue { i32, i32 } %36, 0, !dbg !34
  %82 = bitcast i32 %81 to float, !dbg !34
  %83 = extractvalue { i32, i32 } %39, 0, !dbg !36
  %84 = bitcast i32 %83 to float, !dbg !36
  %85 = fsub float %82, %84, !dbg !45
  %86 = extractvalue { i32, i32 } %49, 1, !dbg !42
  %87 = bitcast i32 %86 to float, !dbg !42
  %88 = extractvalue { i32, i32 } %49, 0, !dbg !42
  %89 = bitcast i32 %88 to float, !dbg !42
  %90 = extractvalue { i32, i32 } %47, 1, !dbg !40
  %91 = bitcast i32 %90 to float, !dbg !40
  %92 = extractvalue { i32, i32 } %47, 0, !dbg !40
  %93 = bitcast i32 %92 to float, !dbg !40
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !46
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !46
  %96 = fmul float %85, %94, !dbg !47
  %97 = fmul float %80, %95, !dbg !47
  %98 = fmul float %96, %93, !dbg !48
  %99 = fmul float %97, %91, !dbg !48
  %100 = fadd float %98, %89, !dbg !49
  %101 = fadd float %99, %87, !dbg !49
  %102 = fcmp olt float %100, 0.000000e+00, !dbg !50
  %103 = fcmp olt float %101, 0.000000e+00, !dbg !50
  %104 = select i1 %102, float 0.000000e+00, float %100, !dbg !54
  %105 = select i1 %103, float 0.000000e+00, float %101, !dbg !54
  %106 = sext i32 %13 to i64, !dbg !55
  %107 = getelementptr float, ptr addrspace(1) %5, i64 %106, !dbg !55
  %108 = bitcast float %104 to i32, !dbg !56
  %109 = bitcast float %105 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %108, i32 %109, ptr addrspace(1) %107, i1 true) #3, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm4sehv7qjxmty5euvvmpnrjyynzrdznldd4upsw7v4wrcgjpejv.py", directory: "inductor_cache/m4")
!4 = !{ptr @triton_poi_fused_pixel_shuffle_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_pixel_shuffle_23, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_pixel_shuffle_23", linkageName: "triton_poi_fused_pixel_shuffle_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 26, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 27, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 27, column: 28, scope: !7)
!21 = !DILocation(line: 28, column: 21, scope: !7)
!22 = !DILocation(line: 28, column: 29, scope: !7)
!23 = !DILocation(line: 31, column: 37, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 45, scope: !7)
!26 = !DILocation(line: 31, column: 42, scope: !7)
!27 = !DILocation(line: 31, column: 55, scope: !7)
!28 = !DILocation(line: 31, column: 66, scope: !7)
!29 = !DILocation(line: 31, column: 77, scope: !7)
!30 = !DILocation(line: 31, column: 50, scope: !7)
!31 = !DILocation(line: 31, column: 60, scope: !7)
!32 = !DILocation(line: 31, column: 71, scope: !7)
!33 = !DILocation(line: 31, column: 30, scope: !7)
!34 = !DILocation(line: 31, column: 82, scope: !7)
!35 = !DILocation(line: 32, column: 30, scope: !7)
!36 = !DILocation(line: 32, column: 50, scope: !7)
!37 = !DILocation(line: 33, column: 30, scope: !7)
!38 = !DILocation(line: 33, column: 50, scope: !7)
!39 = !DILocation(line: 34, column: 31, scope: !7)
!40 = !DILocation(line: 34, column: 51, scope: !7)
!41 = !DILocation(line: 35, column: 31, scope: !7)
!42 = !DILocation(line: 35, column: 51, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 39, column: 26, scope: !7)
!45 = !DILocation(line: 36, column: 18, scope: !7)
!46 = !DILocation(line: 41, column: 18, scope: !7)
!47 = !DILocation(line: 44, column: 19, scope: !7)
!48 = !DILocation(line: 45, column: 20, scope: !7)
!49 = !DILocation(line: 46, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 48, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 49, column: 25, scope: !7)
!56 = !DILocation(line: 49, column: 37, scope: !7)
!57 = !DILocation(line: 49, column: 4, scope: !7)
