; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_add_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = and i32 %11, 124, !dbg !12
  %14 = lshr i32 %10, 5, !dbg !12
  %15 = lshr i32 %10, 2, !dbg !12
  %16 = and i32 %15, 7, !dbg !12
  %17 = and i32 %10, 32, !dbg !12
  %18 = lshr exact i32 %17, 2, !dbg !12
  %19 = or disjoint i32 %16, %18, !dbg !12
  %20 = and i32 %10, 64, !dbg !12
  %21 = lshr exact i32 %20, 2, !dbg !12
  %22 = or disjoint i32 %19, %21, !dbg !12
  %23 = and i32 %10, 128, !dbg !12
  %24 = lshr exact i32 %23, 2, !dbg !12
  %25 = or disjoint i32 %22, %24, !dbg !12
  %26 = or disjoint i32 %25, 64, !dbg !12
  %27 = and i32 %10, 127, !dbg !12
  %28 = or disjoint i32 %9, %13, !dbg !13
  %29 = or disjoint i32 %9, %25, !dbg !13
  %30 = or disjoint i32 %9, %26, !dbg !13
  %31 = icmp slt i32 %28, 1024, !dbg !14
  %32 = icmp slt i32 %29, 1024, !dbg !14
  %33 = icmp slt i32 %30, 1024, !dbg !14
  %.lobit2 = lshr exact i32 %17, 5, !dbg !15
  %34 = lshr exact i32 %20, 5, !dbg !15
  %35 = or disjoint i32 %.lobit2, %34, !dbg !15
  %36 = lshr exact i32 %23, 5, !dbg !15
  %37 = or disjoint i32 %35, %36, !dbg !15
  %.frozen = freeze i32 %28, !dbg !16
  %38 = sdiv i32 %.frozen, 256, !dbg !16
  %39 = mul i32 %38, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %39, !dbg !17
  %40 = shl nuw nsw i32 %37, 8, !dbg !18
  %41 = or disjoint i32 %40, 2048, !dbg !18
  %42 = shl i32 %38, 12, !dbg !19
  %43 = add i32 %42, %.decomposed, !dbg !20
  %44 = add i32 %43, %40, !dbg !21
  %45 = add i32 %43, %41, !dbg !21
  %46 = sext i32 %44 to i64, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !22
  %48 = sext i32 %45 to i64, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !22
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #5, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !23
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !23
  %55 = bitcast i32 %51 to float, !dbg !23
  %56 = bitcast i32 %52 to float, !dbg !23
  %57 = bitcast i32 %53 to float, !dbg !23
  %58 = bitcast i32 %54 to float, !dbg !23
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #5, !dbg !23
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !23
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !23
  %64 = bitcast i32 %60 to float, !dbg !23
  %65 = bitcast i32 %61 to float, !dbg !23
  %66 = bitcast i32 %62 to float, !dbg !23
  %67 = bitcast i32 %63 to float, !dbg !23
  %68 = shl i32 %29, 4, !dbg !24
  %69 = shl i32 %30, 4, !dbg !24
  %70 = or disjoint i32 %68, %12, !dbg !25
  %71 = or disjoint i32 %69, %12, !dbg !25
  %72 = sext i32 %70 to i64, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !26
  %74 = sext i32 %71 to i64, !dbg !26
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !26
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #5, !dbg !27
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !27
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !27
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !27
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !27
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %75, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #5, !dbg !27
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !27
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !27
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !27
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !27
  %86 = shl i32 %10, 9, !dbg !27
  %87 = and i32 %86, 1536, !dbg !27
  %88 = and i32 %15, 7, !dbg !27
  %89 = or disjoint i32 %88, %87, !dbg !27
  %90 = or disjoint i32 %89, %18, !dbg !27
  %91 = or disjoint i32 %21, %90, !dbg !27
  %92 = or disjoint i32 %91, %24, !dbg !27
  %93 = and i32 %11, 1020, !dbg !27
  %94 = lshr exact i32 %87, 5, !dbg !27
  %95 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %94, !dbg !27
  %96 = getelementptr float, ptr addrspace(3) %95, i32 %92, !dbg !27
  %97 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #5, !dbg !27
  %98 = or disjoint i32 %92, 128, !dbg !27
  %99 = lshr i32 %98, 7, !dbg !27
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !27
  %101 = getelementptr float, ptr addrspace(3) %100, i32 %98, !dbg !27
  %102 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #5, !dbg !27
  %103 = or disjoint i32 %92, 256, !dbg !27
  %104 = lshr i32 %103, 7, !dbg !27
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !27
  %106 = getelementptr float, ptr addrspace(3) %105, i32 %103, !dbg !27
  %107 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #5, !dbg !27
  %108 = or disjoint i32 %92, 384, !dbg !27
  %109 = lshr i32 %108, 7, !dbg !27
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !27
  %111 = getelementptr float, ptr addrspace(3) %110, i32 %108, !dbg !27
  %112 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #5, !dbg !27
  %113 = or disjoint i32 %92, 64, !dbg !27
  %114 = getelementptr float, ptr addrspace(3) %95, i32 %113, !dbg !27
  %115 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #5, !dbg !27
  %116 = or disjoint i32 %92, 192, !dbg !27
  %117 = lshr i32 %116, 7, !dbg !27
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !27
  %119 = getelementptr float, ptr addrspace(3) %118, i32 %116, !dbg !27
  %120 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #5, !dbg !27
  %121 = or disjoint i32 %92, 320, !dbg !27
  %122 = lshr i32 %121, 7, !dbg !27
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i32 %122, !dbg !27
  %124 = getelementptr float, ptr addrspace(3) %123, i32 %121, !dbg !27
  %125 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #5, !dbg !27
  %126 = or disjoint i32 %92, 448, !dbg !27
  %127 = lshr i32 %126, 7, !dbg !27
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %127, !dbg !27
  %129 = getelementptr float, ptr addrspace(3) %128, i32 %126, !dbg !27
  %130 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %131 = lshr i32 %93, 7, !dbg !27
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %131, !dbg !27
  %133 = getelementptr inbounds float, ptr addrspace(3) %132, i32 %93, !dbg !27
  %134 = load float, ptr addrspace(3) %133, align 4, !dbg !27
  %135 = or disjoint i32 %93, 1, !dbg !27
  %136 = getelementptr inbounds float, ptr addrspace(3) %132, i32 %135, !dbg !27
  %137 = load float, ptr addrspace(3) %136, align 4, !dbg !27
  %138 = or disjoint i32 %93, 2, !dbg !27
  %139 = getelementptr inbounds float, ptr addrspace(3) %132, i32 %138, !dbg !27
  %140 = load float, ptr addrspace(3) %139, align 4, !dbg !27
  %141 = or disjoint i32 %93, 3, !dbg !27
  %142 = getelementptr inbounds float, ptr addrspace(3) %132, i32 %141, !dbg !27
  %143 = load float, ptr addrspace(3) %142, align 4, !dbg !27
  %144 = or disjoint i32 %93, 1024, !dbg !27
  %145 = lshr i32 %144, 7, !dbg !27
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %145, !dbg !27
  %147 = getelementptr inbounds float, ptr addrspace(3) %146, i32 %144, !dbg !27
  %148 = load float, ptr addrspace(3) %147, align 4, !dbg !27
  %149 = or disjoint i32 %93, 1025, !dbg !27
  %150 = lshr i32 %149, 7, !dbg !27
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %150, !dbg !27
  %152 = getelementptr inbounds float, ptr addrspace(3) %151, i32 %149, !dbg !27
  %153 = load float, ptr addrspace(3) %152, align 4, !dbg !27
  %154 = or disjoint i32 %93, 1026, !dbg !27
  %155 = lshr i32 %154, 7, !dbg !27
  %156 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %155, !dbg !27
  %157 = getelementptr inbounds float, ptr addrspace(3) %156, i32 %154, !dbg !27
  %158 = load float, ptr addrspace(3) %157, align 4, !dbg !27
  %159 = or disjoint i32 %93, 1027, !dbg !27
  %160 = lshr i32 %159, 7, !dbg !27
  %161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %160, !dbg !27
  %162 = getelementptr inbounds float, ptr addrspace(3) %161, i32 %159, !dbg !27
  %163 = load float, ptr addrspace(3) %162, align 4, !dbg !27
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #5, !dbg !28
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %166 = fadd float %55, %64, !dbg !33
  %167 = fadd float %56, %65, !dbg !33
  %168 = fadd float %57, %66, !dbg !33
  %169 = fadd float %58, %67, !dbg !33
  %170 = and i32 %14, 7, !dbg !29
  %171 = shl nuw nsw i32 %13, 3, !dbg !29
  %172 = or disjoint i32 %171, %170, !dbg !29
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %172, !dbg !29
  %174 = bitcast float %166 to i32, !dbg !29
  %175 = select i1 %31, i32 %174, i32 0, !dbg !33
  %176 = insertelement <1 x i32> poison, i32 %175, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %176, i1 true) #5, !dbg !29
  %177 = or disjoint i32 %171, 8, !dbg !29
  %178 = or disjoint i32 %177, %170, !dbg !29
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i32 %178, !dbg !29
  %180 = bitcast float %167 to i32, !dbg !29
  %181 = select i1 %31, i32 %180, i32 0, !dbg !33
  %182 = insertelement <1 x i32> poison, i32 %181, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %182, i1 true) #5, !dbg !29
  %183 = or disjoint i32 %171, 16, !dbg !29
  %184 = or disjoint i32 %183, %170, !dbg !29
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %184, !dbg !29
  %186 = bitcast float %168 to i32, !dbg !29
  %187 = select i1 %31, i32 %186, i32 0, !dbg !33
  %188 = insertelement <1 x i32> poison, i32 %187, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %188, i1 true) #5, !dbg !29
  %189 = or disjoint i32 %171, 24, !dbg !29
  %190 = or disjoint i32 %189, %170, !dbg !29
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %190, !dbg !29
  %192 = bitcast float %169 to i32, !dbg !29
  %193 = select i1 %31, i32 %192, i32 0, !dbg !33
  %194 = insertelement <1 x i32> poison, i32 %193, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %194, i1 true) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %195 = icmp slt i32 %10, 1024, !dbg !29
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !29
  %197 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %196, i1 %195) #5, !dbg !29
  %198 = bitcast i32 %197 to float, !dbg !29
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 4, i32 31), !dbg !29
  %200 = bitcast i32 %199 to float, !dbg !29
  %201 = fadd float %198, %200, !dbg !33
  %202 = bitcast float %201 to i32, !dbg !29
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 2, i32 31), !dbg !29
  %204 = bitcast i32 %203 to float, !dbg !29
  %205 = fadd float %201, %204, !dbg !33
  %206 = bitcast float %205 to i32, !dbg !29
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 1, i32 31), !dbg !29
  %208 = bitcast i32 %207 to float, !dbg !29
  %209 = fadd float %205, %208, !dbg !33
  %210 = and i32 %10, 7, !dbg !29
  %211 = icmp eq i32 %210, 0, !dbg !29
  %212 = and i1 %195, %211, !dbg !29
  %213 = bitcast float %209 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %213, i1 %212) #5, !dbg !29
  %214 = getelementptr i8, ptr addrspace(3) %196, i32 1024, !dbg !29
  %215 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %214, i1 %195) #5, !dbg !29
  %216 = bitcast i32 %215 to float, !dbg !29
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 4, i32 31), !dbg !29
  %218 = bitcast i32 %217 to float, !dbg !29
  %219 = fadd float %216, %218, !dbg !33
  %220 = bitcast float %219 to i32, !dbg !29
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 2, i32 31), !dbg !29
  %222 = bitcast i32 %221 to float, !dbg !29
  %223 = fadd float %219, %222, !dbg !33
  %224 = bitcast float %223 to i32, !dbg !29
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 1, i32 31), !dbg !29
  %226 = bitcast i32 %225 to float, !dbg !29
  %227 = fadd float %223, %226, !dbg !33
  %228 = bitcast float %227 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %228, i1 %212) #5, !dbg !29
  %229 = getelementptr i8, ptr addrspace(3) %196, i32 2048, !dbg !29
  %230 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %229, i1 %195) #5, !dbg !29
  %231 = bitcast i32 %230 to float, !dbg !29
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 4, i32 31), !dbg !29
  %233 = bitcast i32 %232 to float, !dbg !29
  %234 = fadd float %231, %233, !dbg !33
  %235 = bitcast float %234 to i32, !dbg !29
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 2, i32 31), !dbg !29
  %237 = bitcast i32 %236 to float, !dbg !29
  %238 = fadd float %234, %237, !dbg !33
  %239 = bitcast float %238 to i32, !dbg !29
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 1, i32 31), !dbg !29
  %241 = bitcast i32 %240 to float, !dbg !29
  %242 = fadd float %238, %241, !dbg !33
  %243 = bitcast float %242 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %243, i1 %212) #5, !dbg !29
  %244 = getelementptr i8, ptr addrspace(3) %196, i32 3072, !dbg !29
  %245 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %244, i1 %195) #5, !dbg !29
  %246 = bitcast i32 %245 to float, !dbg !29
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 4, i32 31), !dbg !29
  %248 = bitcast i32 %247 to float, !dbg !29
  %249 = fadd float %246, %248, !dbg !33
  %250 = bitcast float %249 to i32, !dbg !29
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 2, i32 31), !dbg !29
  %252 = bitcast i32 %251 to float, !dbg !29
  %253 = fadd float %249, %252, !dbg !33
  %254 = bitcast float %253 to i32, !dbg !29
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 1, i32 31), !dbg !29
  %256 = bitcast i32 %255 to float, !dbg !29
  %257 = fadd float %253, %256, !dbg !33
  %258 = bitcast float %257 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %258, i1 %212) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %259 = getelementptr float, ptr addrspace(3) @global_smem, i32 %171, !dbg !29
  %260 = load float, ptr addrspace(3) %259, align 16, !dbg !29
  %261 = getelementptr float, ptr addrspace(3) @global_smem, i32 %177, !dbg !29
  %262 = load float, ptr addrspace(3) %261, align 16, !dbg !29
  %263 = getelementptr float, ptr addrspace(3) @global_smem, i32 %183, !dbg !29
  %264 = load float, ptr addrspace(3) %263, align 16, !dbg !29
  %265 = getelementptr float, ptr addrspace(3) @global_smem, i32 %189, !dbg !29
  %266 = load float, ptr addrspace(3) %265, align 16, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !35
  %268 = bitcast float %260 to i32, !dbg !35
  %269 = bitcast float %262 to i32, !dbg !35
  %270 = bitcast float %264 to i32, !dbg !35
  %271 = bitcast float %266 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %267, i32 %268, i32 %269, i32 %270, i32 %271, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %27, !dbg !35
  %273 = load float, ptr addrspace(3) %272, align 4, !dbg !35
  %274 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %273, float 1.600000e+01) #5, !dbg !35
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %260, float 1.600000e+01) #5, !dbg !35
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %262, float 1.600000e+01) #5, !dbg !35
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %264, float 1.600000e+01) #5, !dbg !35
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %266, float 1.600000e+01) #5, !dbg !35
  %279 = fsub float %55, %275, !dbg !36
  %280 = fsub float %56, %276, !dbg !36
  %281 = fsub float %57, %277, !dbg !36
  %282 = fsub float %58, %278, !dbg !36
  %283 = fsub float %64, %275, !dbg !36
  %284 = fsub float %65, %276, !dbg !36
  %285 = fsub float %66, %277, !dbg !36
  %286 = fsub float %67, %278, !dbg !36
  %287 = fmul float %279, %279, !dbg !37
  %288 = fmul float %280, %280, !dbg !37
  %289 = fmul float %281, %281, !dbg !37
  %290 = fmul float %282, %282, !dbg !37
  %291 = fmul float %283, %283, !dbg !37
  %292 = fmul float %284, %284, !dbg !37
  %293 = fmul float %285, %285, !dbg !37
  %294 = fmul float %286, %286, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %295 = fadd float %287, %291, !dbg !40
  %296 = fadd float %288, %292, !dbg !40
  %297 = fadd float %289, %293, !dbg !40
  %298 = fadd float %290, %294, !dbg !40
  %299 = bitcast float %295 to i32, !dbg !38
  %300 = select i1 %31, i32 %299, i32 0, !dbg !40
  %301 = insertelement <1 x i32> poison, i32 %300, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %301, i1 true) #5, !dbg !38
  %302 = bitcast float %296 to i32, !dbg !38
  %303 = select i1 %31, i32 %302, i32 0, !dbg !40
  %304 = insertelement <1 x i32> poison, i32 %303, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %304, i1 true) #5, !dbg !38
  %305 = bitcast float %297 to i32, !dbg !38
  %306 = select i1 %31, i32 %305, i32 0, !dbg !40
  %307 = insertelement <1 x i32> poison, i32 %306, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %307, i1 true) #5, !dbg !38
  %308 = bitcast float %298 to i32, !dbg !38
  %309 = select i1 %31, i32 %308, i32 0, !dbg !40
  %310 = insertelement <1 x i32> poison, i32 %309, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %310, i1 true) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %311 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %196, i1 %195) #5, !dbg !38
  %312 = bitcast i32 %311 to float, !dbg !38
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 4, i32 31), !dbg !38
  %314 = bitcast i32 %313 to float, !dbg !38
  %315 = fadd float %312, %314, !dbg !40
  %316 = bitcast float %315 to i32, !dbg !38
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 2, i32 31), !dbg !38
  %318 = bitcast i32 %317 to float, !dbg !38
  %319 = fadd float %315, %318, !dbg !40
  %320 = bitcast float %319 to i32, !dbg !38
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %320, i32 1, i32 31), !dbg !38
  %322 = bitcast i32 %321 to float, !dbg !38
  %323 = fadd float %319, %322, !dbg !40
  %324 = bitcast float %323 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %324, i1 %212) #5, !dbg !38
  %325 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %214, i1 %195) #5, !dbg !38
  %326 = bitcast i32 %325 to float, !dbg !38
  %327 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 4, i32 31), !dbg !38
  %328 = bitcast i32 %327 to float, !dbg !38
  %329 = fadd float %326, %328, !dbg !40
  %330 = bitcast float %329 to i32, !dbg !38
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 2, i32 31), !dbg !38
  %332 = bitcast i32 %331 to float, !dbg !38
  %333 = fadd float %329, %332, !dbg !40
  %334 = bitcast float %333 to i32, !dbg !38
  %335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 1, i32 31), !dbg !38
  %336 = bitcast i32 %335 to float, !dbg !38
  %337 = fadd float %333, %336, !dbg !40
  %338 = bitcast float %337 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %338, i1 %212) #5, !dbg !38
  %339 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %229, i1 %195) #5, !dbg !38
  %340 = bitcast i32 %339 to float, !dbg !38
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 4, i32 31), !dbg !38
  %342 = bitcast i32 %341 to float, !dbg !38
  %343 = fadd float %340, %342, !dbg !40
  %344 = bitcast float %343 to i32, !dbg !38
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 2, i32 31), !dbg !38
  %346 = bitcast i32 %345 to float, !dbg !38
  %347 = fadd float %343, %346, !dbg !40
  %348 = bitcast float %347 to i32, !dbg !38
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 1, i32 31), !dbg !38
  %350 = bitcast i32 %349 to float, !dbg !38
  %351 = fadd float %347, %350, !dbg !40
  %352 = bitcast float %351 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %352, i1 %212) #5, !dbg !38
  %353 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %244, i1 %195) #5, !dbg !38
  %354 = bitcast i32 %353 to float, !dbg !38
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 4, i32 31), !dbg !38
  %356 = bitcast i32 %355 to float, !dbg !38
  %357 = fadd float %354, %356, !dbg !40
  %358 = bitcast float %357 to i32, !dbg !38
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 2, i32 31), !dbg !38
  %360 = bitcast i32 %359 to float, !dbg !38
  %361 = fadd float %357, %360, !dbg !40
  %362 = bitcast float %361 to i32, !dbg !38
  %363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %362, i32 1, i32 31), !dbg !38
  %364 = bitcast i32 %363 to float, !dbg !38
  %365 = fadd float %361, %364, !dbg !40
  %366 = bitcast float %365 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %366, i1 %212) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %367 = load float, ptr addrspace(3) %259, align 16, !dbg !38
  %368 = load float, ptr addrspace(3) %261, align 16, !dbg !38
  %369 = load float, ptr addrspace(3) %263, align 16, !dbg !38
  %370 = load float, ptr addrspace(3) %265, align 16, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %371 = bitcast float %367 to i32, !dbg !41
  %372 = bitcast float %368 to i32, !dbg !41
  %373 = bitcast float %369 to i32, !dbg !41
  %374 = bitcast float %370 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %267, i32 %371, i32 %372, i32 %373, i32 %374, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %375 = load float, ptr addrspace(3) %272, align 4, !dbg !41
  %376 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %375, float 1.600000e+01) #5, !dbg !42
  %377 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %367, float 1.600000e+01) #5, !dbg !42
  %378 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %368, float 1.600000e+01) #5, !dbg !42
  %379 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %369, float 1.600000e+01) #5, !dbg !42
  %380 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %370, float 1.600000e+01) #5, !dbg !42
  %381 = fadd float %376, 0x3EE4F8B580000000, !dbg !43
  %382 = fadd float %377, 0x3EE4F8B580000000, !dbg !43
  %383 = fadd float %378, 0x3EE4F8B580000000, !dbg !43
  %384 = fadd float %379, 0x3EE4F8B580000000, !dbg !43
  %385 = fadd float %380, 0x3EE4F8B580000000, !dbg !43
  %386 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %386, 0, !dbg !41
  br i1 %.not.i, label %389, label %387, !dbg !41

387:                                              ; preds = %7
  %388 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %381), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

389:                                              ; preds = %7
  %390 = tail call float @llvm.nvvm.rsqrt.approx.f(float %381), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %387, %389
  %.0.i = phi float [ %388, %387 ], [ %390, %389 ], !dbg !41
  %391 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i18 = icmp eq i32 %391, 0, !dbg !41
  br i1 %.not.i18, label %394, label %392, !dbg !41

392:                                              ; preds = %__nv_rsqrtf.exit
  %393 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %382), !dbg !41
  br label %__nv_rsqrtf.exit20, !dbg !41

394:                                              ; preds = %__nv_rsqrtf.exit
  %395 = tail call float @llvm.nvvm.rsqrt.approx.f(float %382), !dbg !41
  br label %__nv_rsqrtf.exit20, !dbg !41

__nv_rsqrtf.exit20:                               ; preds = %392, %394
  %.0.i19 = phi float [ %393, %392 ], [ %395, %394 ], !dbg !41
  %396 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i21 = icmp eq i32 %396, 0, !dbg !41
  br i1 %.not.i21, label %399, label %397, !dbg !41

397:                                              ; preds = %__nv_rsqrtf.exit20
  %398 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %383), !dbg !41
  br label %__nv_rsqrtf.exit23, !dbg !41

399:                                              ; preds = %__nv_rsqrtf.exit20
  %400 = tail call float @llvm.nvvm.rsqrt.approx.f(float %383), !dbg !41
  br label %__nv_rsqrtf.exit23, !dbg !41

__nv_rsqrtf.exit23:                               ; preds = %397, %399
  %.0.i22 = phi float [ %398, %397 ], [ %400, %399 ], !dbg !41
  %401 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i24 = icmp eq i32 %401, 0, !dbg !41
  br i1 %.not.i24, label %404, label %402, !dbg !41

402:                                              ; preds = %__nv_rsqrtf.exit23
  %403 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %384), !dbg !41
  br label %__nv_rsqrtf.exit26, !dbg !41

404:                                              ; preds = %__nv_rsqrtf.exit23
  %405 = tail call float @llvm.nvvm.rsqrt.approx.f(float %384), !dbg !41
  br label %__nv_rsqrtf.exit26, !dbg !41

__nv_rsqrtf.exit26:                               ; preds = %402, %404
  %.0.i25 = phi float [ %403, %402 ], [ %405, %404 ], !dbg !41
  %406 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i27 = icmp eq i32 %406, 0, !dbg !41
  br i1 %.not.i27, label %409, label %407, !dbg !41

407:                                              ; preds = %__nv_rsqrtf.exit26
  %408 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %385), !dbg !41
  br label %__nv_rsqrtf.exit29, !dbg !41

409:                                              ; preds = %__nv_rsqrtf.exit26
  %410 = tail call float @llvm.nvvm.rsqrt.approx.f(float %385), !dbg !41
  br label %__nv_rsqrtf.exit29, !dbg !41

__nv_rsqrtf.exit29:                               ; preds = %407, %409
  %.0.i28 = phi float [ %408, %407 ], [ %410, %409 ], !dbg !41
  %411 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !28
  %412 = bitcast i32 %411 to float, !dbg !28
  %413 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !28
  %414 = bitcast i32 %413 to float, !dbg !28
  %415 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !28
  %416 = bitcast i32 %415 to float, !dbg !28
  %417 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !28
  %418 = bitcast i32 %417 to float, !dbg !28
  %419 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !28
  %420 = bitcast i32 %419 to float, !dbg !28
  %421 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !28
  %422 = bitcast i32 %421 to float, !dbg !28
  %423 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !28
  %424 = bitcast i32 %423 to float, !dbg !28
  %425 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !28
  %426 = bitcast i32 %425 to float, !dbg !28
  %427 = or disjoint i32 %9, %27, !dbg !13
  %428 = icmp slt i32 %427, 1024, !dbg !14
  %429 = fsub float %426, %275, !dbg !44
  %430 = fsub float %424, %276, !dbg !44
  %431 = fsub float %422, %277, !dbg !44
  %432 = fsub float %420, %278, !dbg !44
  %433 = fsub float %418, %275, !dbg !44
  %434 = fsub float %416, %276, !dbg !44
  %435 = fsub float %414, %277, !dbg !44
  %436 = fsub float %412, %278, !dbg !44
  %437 = fmul float %429, %.0.i19, !dbg !45
  %438 = fmul float %430, %.0.i22, !dbg !45
  %439 = fmul float %431, %.0.i25, !dbg !45
  %440 = fmul float %432, %.0.i28, !dbg !45
  %441 = fmul float %433, %.0.i19, !dbg !45
  %442 = fmul float %434, %.0.i22, !dbg !45
  %443 = fmul float %435, %.0.i25, !dbg !45
  %444 = fmul float %436, %.0.i28, !dbg !45
  %445 = fadd float %134, %437, !dbg !46
  %446 = fadd float %137, %438, !dbg !46
  %447 = fadd float %140, %439, !dbg !46
  %448 = fadd float %143, %440, !dbg !46
  %449 = fadd float %148, %441, !dbg !46
  %450 = fadd float %153, %442, !dbg !46
  %451 = fadd float %158, %443, !dbg !46
  %452 = fadd float %163, %444, !dbg !46
  %453 = sext i32 %427 to i64, !dbg !47
  %454 = getelementptr float, ptr addrspace(1) %3, i64 %453, !dbg !47
  %455 = icmp eq i32 %23, 0, !dbg !48
  %456 = bitcast float %.0.i to i32, !dbg !48
  %457 = and i1 %455, %428, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %456, ptr addrspace(1) %454, i1 %457) #5, !dbg !48
  %458 = getelementptr float, ptr addrspace(1) %4, i64 %72, !dbg !49
  %459 = getelementptr float, ptr addrspace(1) %4, i64 %74, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %460 = shl i32 %10, 6, !dbg !50
  %461 = and i32 %460, 1984, !dbg !50
  %462 = or disjoint i32 %461, %.lobit2, !dbg !50
  %463 = or disjoint i32 %462, %34, !dbg !50
  %464 = or disjoint i32 %463, %36, !dbg !50
  %465 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %461, !dbg !50
  %466 = getelementptr float, ptr addrspace(3) %465, i32 %464, !dbg !50
  %467 = bitcast float %445 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %466, <1 x i32> %467, i1 true) #5, !dbg !50
  %468 = or disjoint i32 %464, 16, !dbg !50
  %469 = lshr i32 %468, 2, !dbg !50
  %470 = and i32 %469, 1073741820, !dbg !50
  %471 = getelementptr float, ptr addrspace(3) @global_smem, i32 %470, !dbg !50
  %472 = getelementptr float, ptr addrspace(3) %471, i32 %468, !dbg !50
  %473 = bitcast float %446 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %472, <1 x i32> %473, i1 true) #5, !dbg !50
  %474 = or disjoint i32 %464, 32, !dbg !50
  %475 = lshr i32 %474, 2, !dbg !50
  %476 = and i32 %475, 1073741820, !dbg !50
  %477 = getelementptr float, ptr addrspace(3) @global_smem, i32 %476, !dbg !50
  %478 = getelementptr float, ptr addrspace(3) %477, i32 %474, !dbg !50
  %479 = bitcast float %447 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %479, i1 true) #5, !dbg !50
  %480 = or disjoint i32 %464, 48, !dbg !50
  %481 = lshr i32 %480, 2, !dbg !50
  %482 = and i32 %481, 1073741820, !dbg !50
  %483 = getelementptr float, ptr addrspace(3) @global_smem, i32 %482, !dbg !50
  %484 = getelementptr float, ptr addrspace(3) %483, i32 %480, !dbg !50
  %485 = bitcast float %448 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %484, <1 x i32> %485, i1 true) #5, !dbg !50
  %486 = or disjoint i32 %464, 8, !dbg !50
  %487 = getelementptr float, ptr addrspace(3) %465, i32 %486, !dbg !50
  %488 = bitcast float %449 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %487, <1 x i32> %488, i1 true) #5, !dbg !50
  %489 = or disjoint i32 %464, 24, !dbg !50
  %490 = lshr i32 %489, 2, !dbg !50
  %491 = and i32 %490, 1073741820, !dbg !50
  %492 = getelementptr float, ptr addrspace(3) @global_smem, i32 %491, !dbg !50
  %493 = getelementptr float, ptr addrspace(3) %492, i32 %489, !dbg !50
  %494 = bitcast float %450 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %493, <1 x i32> %494, i1 true) #5, !dbg !50
  %495 = or disjoint i32 %464, 40, !dbg !50
  %496 = lshr i32 %495, 2, !dbg !50
  %497 = and i32 %496, 1073741820, !dbg !50
  %498 = getelementptr float, ptr addrspace(3) @global_smem, i32 %497, !dbg !50
  %499 = getelementptr float, ptr addrspace(3) %498, i32 %495, !dbg !50
  %500 = bitcast float %451 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %499, <1 x i32> %500, i1 true) #5, !dbg !50
  %501 = or disjoint i32 %464, 56, !dbg !50
  %502 = lshr i32 %501, 2, !dbg !50
  %503 = and i32 %502, 1073741820, !dbg !50
  %504 = getelementptr float, ptr addrspace(3) @global_smem, i32 %503, !dbg !50
  %505 = getelementptr float, ptr addrspace(3) %504, i32 %501, !dbg !50
  %506 = bitcast float %452 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %505, <1 x i32> %506, i1 true) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %507 = and i32 %10, 252, !dbg !50
  %508 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %507, !dbg !50
  %509 = getelementptr inbounds float, ptr addrspace(3) %508, i32 %93, !dbg !50
  %510 = lshr exact i32 %144, 2, !dbg !50
  %511 = and i32 %510, 508, !dbg !50
  %512 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %511, !dbg !50
  %513 = getelementptr inbounds float, ptr addrspace(3) %512, i32 %144, !dbg !50
  %514 = load <4 x i32>, ptr addrspace(3) %513, align 16, !dbg !50
  %.extract = load i32, ptr addrspace(3) %509, align 16, !dbg !50
  %515 = getelementptr inbounds i8, ptr addrspace(3) %509, i32 4, !dbg !50
  %.extract11 = load i32, ptr addrspace(3) %515, align 4, !dbg !50
  %516 = getelementptr inbounds i8, ptr addrspace(3) %509, i32 8, !dbg !50
  %.extract12 = load i32, ptr addrspace(3) %516, align 8, !dbg !50
  %517 = getelementptr inbounds i8, ptr addrspace(3) %509, i32 12, !dbg !50
  %.extract13 = load i32, ptr addrspace(3) %517, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %458, i1 %32) #5, !dbg !50
  %.extract14 = extractelement <4 x i32> %514, i64 0, !dbg !50
  %.extract15 = extractelement <4 x i32> %514, i64 1, !dbg !50
  %.extract16 = extractelement <4 x i32> %514, i64 2, !dbg !50
  %.extract17 = extractelement <4 x i32> %514, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %459, i1 %33) #5, !dbg !50
  %518 = getelementptr float, ptr addrspace(1) %2, i64 %453, !dbg !51
  %519 = bitcast float %274 to i32, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %519, ptr addrspace(1) %518, i1 %457) #5, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py", directory: "inductor_cache/mj")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_add_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_add_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_add_6", linkageName: "triton_per_fused__native_batch_norm_legit_add_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 34, scope: !7)
!19 = !DILocation(line: 33, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 39, scope: !7)
!21 = !DILocation(line: 33, column: 60, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 73, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 34, column: 31, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 35, column: 55, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = !DILocation(line: 40, column: 24, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !32)
!34 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!35 = !DILocation(line: 43, column: 19, scope: !7)
!36 = !DILocation(line: 44, column: 19, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !39)
!39 = !DILocation(line: 48, column: 26, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !39)
!41 = !DILocation(line: 53, column: 28, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 54, column: 20, scope: !7)
!45 = !DILocation(line: 55, column: 20, scope: !7)
!46 = !DILocation(line: 56, column: 20, scope: !7)
!47 = !DILocation(line: 57, column: 25, scope: !7)
!48 = !DILocation(line: 57, column: 37, scope: !7)
!49 = !DILocation(line: 58, column: 25, scope: !7)
!50 = !DILocation(line: 58, column: 45, scope: !7)
!51 = !DILocation(line: 59, column: 25, scope: !7)
!52 = !DILocation(line: 59, column: 37, scope: !7)
!53 = !DILocation(line: 59, column: 4, scope: !7)
