; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 6144, !dbg !14
  %.frozen = freeze i32 %16, !dbg !15
  %18 = sdiv i32 %.frozen, 64, !dbg !15
  %19 = srem i32 %18, 24, !dbg !16
  %.frozen3 = freeze i32 %16, !dbg !17
  %20 = sdiv i32 %.frozen3, 1536, !dbg !17
  %21 = mul i32 %18, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %21, !dbg !18
  %.frozen1 = freeze i32 %16, !dbg !19
  %22 = sdiv i32 %.frozen1, 8, !dbg !19
  %23 = srem i32 %22, 8, !dbg !20
  %24 = mul i32 %22, 8, !dbg !21
  %.decomposed2 = sub i32 %.frozen1, %24, !dbg !21
  %25 = icmp slt i32 %19, 12, !dbg !22
  %26 = mul i32 %20, 1536, !dbg !23
  %srem.decomposed = sub i32 %.frozen3, %26, !dbg !23
  %27 = mul nsw i32 %20, 768, !dbg !24
  %28 = add nsw i32 %27, %srem.decomposed, !dbg !25
  %29 = sext i32 %28 to i64, !dbg !26
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !26
  %31 = and i1 %17, %25, !dbg !27
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #1, !dbg !28
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !28
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !28
  %35 = bitcast i32 %33 to float, !dbg !28
  %36 = bitcast i32 %34 to float, !dbg !28
  %37 = sext i32 %23 to i64, !dbg !29
  %38 = getelementptr i64, ptr addrspace(1) %1, i64 %37, !dbg !29
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %38, i1 %31, i1 %31) #1, !dbg !30
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %38, i1 %31, i1 %31) #1, !dbg !30
  %41 = lshr i64 %39, 61, !dbg !31
  %42 = and i64 %41, 4, !dbg !31
  %43 = add i64 %42, %39, !dbg !31
  %44 = sext i32 %.decomposed2 to i64, !dbg !32
  %45 = getelementptr i64, ptr addrspace(1) %2, i64 %44, !dbg !32
  %46 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %45, i1 %31, i1 %31, i1 %31) #1, !dbg !33
  %47 = extractvalue { i64, i64 } %46, 0, !dbg !33
  %48 = extractvalue { i64, i64 } %46, 1, !dbg !33
  %49 = lshr i64 %47, 61, !dbg !34
  %50 = and i64 %49, 4, !dbg !34
  %51 = lshr i64 %48, 61, !dbg !34
  %52 = and i64 %51, 4, !dbg !34
  %53 = shl i64 %43, 2, !dbg !35
  %54 = shl nsw i32 %19, 4, !dbg !36
  %55 = sext i32 %54 to i64, !dbg !37
  %56 = mul nsw i32 %20, 192, !dbg !38
  %57 = sext i32 %56 to i64, !dbg !39
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !40
  %59 = getelementptr float, ptr addrspace(1) %58, i64 %50, !dbg !40
  %60 = getelementptr float, ptr addrspace(1) %59, i64 %53, !dbg !40
  %61 = getelementptr float, ptr addrspace(1) %60, i64 %55, !dbg !40
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %57, !dbg !40
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !40
  %64 = getelementptr float, ptr addrspace(1) %63, i64 %52, !dbg !40
  %65 = getelementptr float, ptr addrspace(1) %64, i64 %53, !dbg !40
  %66 = getelementptr float, ptr addrspace(1) %65, i64 %55, !dbg !40
  %67 = getelementptr float, ptr addrspace(1) %66, i64 %57, !dbg !40
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %31, i32 0, i1 %31) #1, !dbg !41
  %69 = bitcast i32 %68 to float, !dbg !41
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %31, i32 0, i1 %31) #1, !dbg !41
  %71 = bitcast i32 %70 to float, !dbg !41
  %72 = getelementptr i64, ptr addrspace(1) %4, i64 %44, !dbg !42
  %73 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %72, i1 %31, i1 %31, i1 %31) #1, !dbg !43
  %74 = extractvalue { i64, i64 } %73, 0, !dbg !43
  %75 = extractvalue { i64, i64 } %73, 1, !dbg !43
  %76 = lshr i64 %74, 61, !dbg !44
  %77 = and i64 %76, 4, !dbg !44
  %78 = lshr i64 %75, 61, !dbg !44
  %79 = and i64 %78, 4, !dbg !44
  %80 = getelementptr float, ptr addrspace(1) %3, i64 %74, !dbg !45
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %77, !dbg !45
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %53, !dbg !45
  %83 = getelementptr float, ptr addrspace(1) %82, i64 %55, !dbg !45
  %84 = getelementptr float, ptr addrspace(1) %83, i64 %57, !dbg !45
  %85 = getelementptr float, ptr addrspace(1) %3, i64 %75, !dbg !45
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %79, !dbg !45
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %53, !dbg !45
  %88 = getelementptr float, ptr addrspace(1) %87, i64 %55, !dbg !45
  %89 = getelementptr float, ptr addrspace(1) %88, i64 %57, !dbg !45
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %31, i32 0, i1 %31) #1, !dbg !46
  %91 = bitcast i32 %90 to float, !dbg !46
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %31, i32 0, i1 %31) #1, !dbg !46
  %93 = bitcast i32 %92 to float, !dbg !46
  %94 = fsub float %91, %69, !dbg !47
  %95 = fsub float %93, %71, !dbg !47
  %96 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !48
  %97 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %96, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #1, !dbg !49
  %98 = extractvalue { i32, i32 } %97, 0, !dbg !49
  %99 = extractvalue { i32, i32 } %97, 1, !dbg !49
  %100 = bitcast i32 %98 to float, !dbg !49
  %101 = bitcast i32 %99 to float, !dbg !49
  %102 = fmul float %94, %100, !dbg !50
  %103 = fmul float %95, %101, !dbg !50
  %104 = fadd float %102, %69, !dbg !51
  %105 = fadd float %103, %71, !dbg !51
  %106 = fsub float %104, %35, !dbg !52
  %107 = fsub float %105, %36, !dbg !52
  %108 = getelementptr float, ptr addrspace(1) %6, i64 %37, !dbg !53
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %31, i32 0, i1 %31) #1, !dbg !54
  %110 = bitcast i32 %109 to float, !dbg !54
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %31, i32 0, i1 %31) #1, !dbg !54
  %112 = bitcast i32 %111 to float, !dbg !54
  %113 = fmul float %106, %110, !dbg !55
  %114 = fmul float %107, %112, !dbg !55
  %115 = fadd float %113, %35, !dbg !56
  %116 = fadd float %114, %36, !dbg !56
  %117 = icmp sgt i32 %19, 11, !dbg !57
  %118 = shl nsw i32 %19, 6, !dbg !58
  %119 = add nsw i32 %.decomposed, -768, !dbg !58
  %120 = add nsw i32 %119, %27, !dbg !59
  %121 = add nsw i32 %120, %118, !dbg !60
  %122 = sext i32 %121 to i64, !dbg !61
  %123 = getelementptr float, ptr addrspace(1) %7, i64 %122, !dbg !61
  %124 = and i1 %17, %117, !dbg !62
  %125 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %123, i1 %124, i32 0, i1 %124, i32 0, i1 %124) #1, !dbg !63
  %126 = extractvalue { i32, i32 } %125, 0, !dbg !63
  %127 = extractvalue { i32, i32 } %125, 1, !dbg !63
  %128 = sext i32 %16 to i64, !dbg !64
  %129 = getelementptr float, ptr addrspace(1) %8, i64 %128, !dbg !64
  %130 = bitcast float %115 to i32, !dbg !65
  %131 = select i1 %25, i32 %130, i32 %126, !dbg !66
  %132 = bitcast float %116 to i32, !dbg !65
  %133 = select i1 %25, i32 %132, i32 %127, !dbg !66
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %131, i32 %133, ptr addrspace(1) %129, i1 %17) #1, !dbg !65
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4onsmqxexb42rjmqt4gjbj3u5cmcbzdcucbhfgzoqqgmqdhfvuc.py", directory: "inductor_cache/4o")
!4 = !{ptr @triton_poi_fused_cat_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_16", linkageName: "triton_poi_fused_cat_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 27, column: 26, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 18, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 49, scope: !7)
!25 = !DILocation(line: 35, column: 45, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 61, scope: !7)
!28 = !DILocation(line: 35, column: 54, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 40, column: 33, scope: !7)
!32 = !DILocation(line: 41, column: 31, scope: !7)
!33 = !DILocation(line: 41, column: 36, scope: !7)
!34 = !DILocation(line: 44, column: 35, scope: !7)
!35 = !DILocation(line: 45, column: 41, scope: !7)
!36 = !DILocation(line: 45, column: 53, scope: !7)
!37 = !DILocation(line: 45, column: 49, scope: !7)
!38 = !DILocation(line: 45, column: 63, scope: !7)
!39 = !DILocation(line: 45, column: 59, scope: !7)
!40 = !DILocation(line: 45, column: 31, scope: !7)
!41 = !DILocation(line: 45, column: 68, scope: !7)
!42 = !DILocation(line: 46, column: 31, scope: !7)
!43 = !DILocation(line: 46, column: 36, scope: !7)
!44 = !DILocation(line: 49, column: 35, scope: !7)
!45 = !DILocation(line: 50, column: 31, scope: !7)
!46 = !DILocation(line: 50, column: 68, scope: !7)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 52, column: 31, scope: !7)
!49 = !DILocation(line: 52, column: 36, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 55, column: 20, scope: !7)
!53 = !DILocation(line: 56, column: 31, scope: !7)
!54 = !DILocation(line: 56, column: 36, scope: !7)
!55 = !DILocation(line: 57, column: 20, scope: !7)
!56 = !DILocation(line: 58, column: 19, scope: !7)
!57 = !DILocation(line: 61, column: 20, scope: !7)
!58 = !DILocation(line: 64, column: 40, scope: !7)
!59 = !DILocation(line: 64, column: 36, scope: !7)
!60 = !DILocation(line: 64, column: 54, scope: !7)
!61 = !DILocation(line: 64, column: 31, scope: !7)
!62 = !DILocation(line: 64, column: 71, scope: !7)
!63 = !DILocation(line: 64, column: 63, scope: !7)
!64 = !DILocation(line: 66, column: 25, scope: !7)
!65 = !DILocation(line: 66, column: 37, scope: !7)
!66 = !DILocation(line: 0, scope: !7)
!67 = !DILocation(line: 66, column: 4, scope: !7)
