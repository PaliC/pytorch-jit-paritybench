; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %12 = shl i32 %11, 3, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %13, 5, !dbg !12
  %14 = and i32 %.lobit1, 3, !dbg !12
  %15 = or disjoint i32 %14, 4, !dbg !12
  %16 = shl i32 %13, 2, !dbg !12
  %17 = and i32 %16, 4, !dbg !12
  %18 = or disjoint i32 %12, %14, !dbg !13
  %19 = or disjoint i32 %12, %15, !dbg !13
  %20 = or disjoint i32 %12, %17, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %22 = shl i32 %21, 7, !dbg !15
  %23 = and i32 %16, 124, !dbg !16
  %24 = lshr i32 %13, 1, !dbg !16
  %25 = and i32 %24, 63, !dbg !16
  %26 = and i32 %13, 127, !dbg !16
  %27 = or disjoint i32 %22, %23, !dbg !17
  %28 = or disjoint i32 %22, %25, !dbg !17
  %29 = or disjoint i32 %28, 64, !dbg !17
  %30 = or disjoint i32 %22, %26, !dbg !17
  %31 = icmp slt i32 %27, 128, !dbg !18
  %32 = icmp slt i32 %30, 128, !dbg !18
  %33 = icmp slt i32 %28, 128, !dbg !18
  %34 = icmp slt i32 %29, 128, !dbg !18
  %.frozen = freeze i32 %20, !dbg !19
  %35 = sdiv i32 %.frozen, 1024, !dbg !19
  %36 = mul i32 %35, 1024, !dbg !20
  %.decomposed = sub i32 %.frozen, %36, !dbg !20
  %37 = shl i32 %18, 7, !dbg !21
  %38 = shl i32 %19, 7, !dbg !21
  %39 = add i32 %27, %37, !dbg !22
  %40 = add i32 %27, %38, !dbg !22
  %41 = sext i32 %39 to i64, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !23
  %43 = sext i32 %40 to i64, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !23
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %31) #2, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = bitcast i32 %47 to float, !dbg !24
  %52 = bitcast i32 %48 to float, !dbg !24
  %53 = bitcast i32 %49 to float, !dbg !24
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %31) #2, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !24
  %59 = bitcast i32 %55 to float, !dbg !24
  %60 = bitcast i32 %56 to float, !dbg !24
  %61 = bitcast i32 %57 to float, !dbg !24
  %62 = bitcast i32 %58 to float, !dbg !24
  %63 = and i32 %16, 508, !dbg !24
  %64 = lshr i32 %63, 7, !dbg !24
  %65 = or disjoint i32 %64, %63, !dbg !24
  %66 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %65, !dbg !24
  %67 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #2, !dbg !24
  %68 = or disjoint i32 %63, 1, !dbg !24
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %64, !dbg !24
  %70 = getelementptr inbounds float, ptr addrspace(3) %69, i32 %68, !dbg !24
  %71 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #2, !dbg !24
  %72 = or disjoint i32 %63, 2, !dbg !24
  %73 = getelementptr inbounds float, ptr addrspace(3) %69, i32 %72, !dbg !24
  %74 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #2, !dbg !24
  %75 = or disjoint i32 %63, 3, !dbg !24
  %76 = getelementptr inbounds float, ptr addrspace(3) %69, i32 %75, !dbg !24
  %77 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %26, !dbg !24
  %79 = load float, ptr addrspace(3) %78, align 4, !dbg !24
  %80 = getelementptr inbounds i8, ptr addrspace(3) %78, i32 516, !dbg !24
  %81 = load float, ptr addrspace(3) %80, align 4, !dbg !24
  %82 = getelementptr inbounds i8, ptr addrspace(3) %78, i32 1032, !dbg !24
  %83 = load float, ptr addrspace(3) %82, align 4, !dbg !24
  %84 = getelementptr inbounds i8, ptr addrspace(3) %78, i32 1548, !dbg !24
  %85 = load float, ptr addrspace(3) %84, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %86 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %86, i1 true) #2, !dbg !24
  %87 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %87, i1 true) #2, !dbg !24
  %88 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %88, i1 true) #2, !dbg !24
  %89 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %89, i1 true) #2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %90 = load float, ptr addrspace(3) %78, align 4, !dbg !24
  %91 = load float, ptr addrspace(3) %80, align 4, !dbg !24
  %92 = load float, ptr addrspace(3) %82, align 4, !dbg !24
  %93 = load float, ptr addrspace(3) %84, align 4, !dbg !24
  %94 = sext i32 %30 to i64, !dbg !25
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !25
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %32) #2, !dbg !26
  %97 = bitcast i32 %96 to float, !dbg !26
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !27
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %32) #2, !dbg !28
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !29
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !29
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %31) #2, !dbg !30
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !30
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !30
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !30
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !30
  %107 = bitcast i32 %103 to float, !dbg !30
  %108 = bitcast i32 %104 to float, !dbg !30
  %109 = bitcast i32 %105 to float, !dbg !30
  %110 = bitcast i32 %106 to float, !dbg !30
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 %31) #2, !dbg !30
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !30
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !30
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !30
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !30
  %116 = bitcast i32 %112 to float, !dbg !30
  %117 = bitcast i32 %113 to float, !dbg !30
  %118 = bitcast i32 %114 to float, !dbg !30
  %119 = bitcast i32 %115 to float, !dbg !30
  %120 = getelementptr float, ptr addrspace(1) %4, i64 %94, !dbg !31
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %32) #2, !dbg !32
  %122 = bitcast i32 %121 to float, !dbg !32
  %123 = getelementptr float, ptr addrspace(1) %5, i64 %94, !dbg !33
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %32) #2, !dbg !34
  %125 = bitcast i32 %124 to float, !dbg !34
  %126 = getelementptr float, ptr addrspace(1) %6, i64 %94, !dbg !35
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %32) #2, !dbg !36
  %128 = bitcast i32 %127 to float, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %129 = insertelement <1 x i32> poison, i32 %96, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %129, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %23, !dbg !37
  %131 = load float, ptr addrspace(3) %130, align 16, !dbg !37
  %132 = or disjoint i32 %23, 1, !dbg !37
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %132, !dbg !37
  %134 = load float, ptr addrspace(3) %133, align 4, !dbg !37
  %135 = or disjoint i32 %23, 2, !dbg !37
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %135, !dbg !37
  %137 = load float, ptr addrspace(3) %136, align 8, !dbg !37
  %138 = or disjoint i32 %23, 3, !dbg !37
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %138, !dbg !37
  %140 = load float, ptr addrspace(3) %139, align 4, !dbg !37
  %141 = fadd float %131, %50, !dbg !37
  %142 = fadd float %134, %51, !dbg !37
  %143 = fadd float %137, %52, !dbg !37
  %144 = fadd float %140, %53, !dbg !37
  %145 = fadd float %131, %59, !dbg !37
  %146 = fadd float %134, %60, !dbg !37
  %147 = fadd float %137, %61, !dbg !37
  %148 = fadd float %140, %62, !dbg !37
  %149 = fadd float %79, %97, !dbg !37
  %150 = fadd float %81, %97, !dbg !37
  %151 = fadd float %83, %97, !dbg !37
  %152 = fadd float %85, %97, !dbg !37
  %153 = fadd float %90, %97, !dbg !37
  %154 = fadd float %91, %97, !dbg !37
  %155 = fadd float %92, %97, !dbg !37
  %156 = fadd float %93, %97, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %157 = insertelement <1 x i32> poison, i32 %99, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %157, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %158 = load float, ptr addrspace(3) %130, align 16, !dbg !38
  %159 = load float, ptr addrspace(3) %133, align 4, !dbg !38
  %160 = load float, ptr addrspace(3) %136, align 8, !dbg !38
  %161 = load float, ptr addrspace(3) %139, align 4, !dbg !38
  %162 = fmul float %158, %107, !dbg !38
  %163 = fmul float %159, %108, !dbg !38
  %164 = fmul float %160, %109, !dbg !38
  %165 = fmul float %161, %110, !dbg !38
  %166 = fmul float %158, %116, !dbg !38
  %167 = fmul float %159, %117, !dbg !38
  %168 = fmul float %160, %118, !dbg !38
  %169 = fmul float %161, %119, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %170 = bitcast float %162 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %170, i1 true) #2, !dbg !38
  %171 = bitcast float %163 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %171, i1 true) #2, !dbg !38
  %172 = bitcast float %164 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %172, i1 true) #2, !dbg !38
  %173 = bitcast float %165 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %173, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %174 = load float, ptr addrspace(3) %78, align 4, !dbg !38
  %175 = load float, ptr addrspace(3) %80, align 4, !dbg !38
  %176 = load float, ptr addrspace(3) %82, align 4, !dbg !38
  %177 = load float, ptr addrspace(3) %84, align 4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %178 = bitcast float %166 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %178, i1 true) #2, !dbg !38
  %179 = bitcast float %167 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %179, i1 true) #2, !dbg !38
  %180 = bitcast float %168 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %180, i1 true) #2, !dbg !38
  %181 = bitcast float %169 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %181, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %182 = load float, ptr addrspace(3) %78, align 4, !dbg !38
  %183 = load float, ptr addrspace(3) %80, align 4, !dbg !38
  %184 = load float, ptr addrspace(3) %82, align 4, !dbg !38
  %185 = load float, ptr addrspace(3) %84, align 4, !dbg !38
  %186 = fadd float %174, %122, !dbg !39
  %187 = fadd float %175, %122, !dbg !39
  %188 = fadd float %176, %122, !dbg !39
  %189 = fadd float %177, %122, !dbg !39
  %190 = fadd float %182, %122, !dbg !39
  %191 = fadd float %183, %122, !dbg !39
  %192 = fadd float %184, %122, !dbg !39
  %193 = fadd float %185, %122, !dbg !39
  %194 = fmul float %149, %125, !dbg !40
  %195 = fmul float %150, %125, !dbg !40
  %196 = fmul float %151, %125, !dbg !40
  %197 = fmul float %152, %125, !dbg !40
  %198 = fmul float %153, %125, !dbg !40
  %199 = fmul float %154, %125, !dbg !40
  %200 = fmul float %155, %125, !dbg !40
  %201 = fmul float %156, %125, !dbg !40
  %202 = fadd float %194, %128, !dbg !41
  %203 = fadd float %195, %128, !dbg !41
  %204 = fadd float %196, %128, !dbg !41
  %205 = fadd float %197, %128, !dbg !41
  %206 = fadd float %198, %128, !dbg !41
  %207 = fadd float %199, %128, !dbg !41
  %208 = fadd float %200, %128, !dbg !41
  %209 = fadd float %201, %128, !dbg !41
  %210 = fadd float %202, %186, !dbg !42
  %211 = fadd float %203, %187, !dbg !42
  %212 = fadd float %204, %188, !dbg !42
  %213 = fadd float %205, %189, !dbg !42
  %214 = fadd float %206, %190, !dbg !42
  %215 = fadd float %207, %191, !dbg !42
  %216 = fadd float %208, %192, !dbg !42
  %217 = fadd float %209, %193, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %218 = bitcast float %141 to i32, !dbg !44
  %219 = bitcast float %142 to i32, !dbg !44
  %220 = bitcast float %143 to i32, !dbg !44
  %221 = bitcast float %144 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %218, i32 %219, i32 %220, i32 %221, ptr addrspace(1) %42, i1 %31) #2, !dbg !44
  %222 = bitcast float %145 to i32, !dbg !44
  %223 = bitcast float %146 to i32, !dbg !44
  %224 = bitcast float %147 to i32, !dbg !44
  %225 = bitcast float %148 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %222, i32 %223, i32 %224, i32 %225, ptr addrspace(1) %44, i1 %31) #2, !dbg !44
  %226 = shl i32 %28, 10, !dbg !45
  %227 = shl i32 %29, 10, !dbg !45
  %228 = shl i32 %35, 17, !dbg !46
  %229 = add i32 %228, %.decomposed, !dbg !47
  %230 = add i32 %229, %226, !dbg !48
  %231 = add i32 %229, %227, !dbg !48
  %232 = sext i32 %230 to i64, !dbg !49
  %233 = getelementptr float, ptr addrspace(1) %7, i64 %232, !dbg !49
  %234 = sext i32 %231 to i64, !dbg !49
  %235 = getelementptr float, ptr addrspace(1) %7, i64 %234, !dbg !49
  %236 = shl i32 %13, 3, !dbg !50
  %237 = and i32 %236, 1016, !dbg !50
  %238 = lshr exact i32 %237, 1, !dbg !50
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i32 %238, !dbg !50
  %240 = getelementptr inbounds float, ptr addrspace(3) %239, i32 %237, !dbg !50
  %241 = bitcast float %210 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #2, !dbg !50
  %242 = or disjoint i32 %237, 1, !dbg !50
  %243 = getelementptr float, ptr addrspace(3) %239, i32 %242, !dbg !50
  %244 = bitcast float %211 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 true) #2, !dbg !50
  %245 = or disjoint i32 %237, 2, !dbg !50
  %246 = getelementptr float, ptr addrspace(3) %239, i32 %245, !dbg !50
  %247 = bitcast float %212 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #2, !dbg !50
  %248 = or disjoint i32 %237, 3, !dbg !50
  %249 = getelementptr float, ptr addrspace(3) %239, i32 %248, !dbg !50
  %250 = bitcast float %213 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %250, i1 true) #2, !dbg !50
  %251 = or disjoint i32 %237, 4, !dbg !50
  %252 = getelementptr float, ptr addrspace(3) %239, i32 %251, !dbg !50
  %253 = bitcast float %214 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #2, !dbg !50
  %254 = or disjoint i32 %237, 5, !dbg !50
  %255 = getelementptr float, ptr addrspace(3) %239, i32 %254, !dbg !50
  %256 = bitcast float %215 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 true) #2, !dbg !50
  %257 = or disjoint i32 %237, 6, !dbg !50
  %258 = getelementptr float, ptr addrspace(3) %239, i32 %257, !dbg !50
  %259 = bitcast float %216 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #2, !dbg !50
  %260 = or disjoint i32 %237, 7, !dbg !50
  %261 = getelementptr float, ptr addrspace(3) %239, i32 %260, !dbg !50
  %262 = bitcast float %217 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #2, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %263 = lshr exact i32 %16, 1, !dbg !50
  %264 = and i32 %263, 252, !dbg !50
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %264, !dbg !50
  %266 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %63, !dbg !50
  %267 = or disjoint i32 %63, 512, !dbg !50
  %268 = lshr exact i32 %267, 1, !dbg !50
  %269 = and i32 %268, 508, !dbg !50
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %269, !dbg !50
  %271 = getelementptr inbounds float, ptr addrspace(3) %270, i32 %267, !dbg !50
  %272 = load <4 x i32>, ptr addrspace(3) %271, align 16, !dbg !50
  %.extract = load i32, ptr addrspace(3) %266, align 16, !dbg !50
  %273 = getelementptr inbounds i8, ptr addrspace(3) %266, i32 4, !dbg !50
  %.extract12 = load i32, ptr addrspace(3) %273, align 4, !dbg !50
  %274 = getelementptr inbounds i8, ptr addrspace(3) %266, i32 8, !dbg !50
  %.extract13 = load i32, ptr addrspace(3) %274, align 8, !dbg !50
  %275 = getelementptr inbounds i8, ptr addrspace(3) %266, i32 12, !dbg !50
  %.extract14 = load i32, ptr addrspace(3) %275, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %233, i1 %33) #2, !dbg !50
  %.extract15 = extractelement <4 x i32> %272, i64 0, !dbg !50
  %.extract16 = extractelement <4 x i32> %272, i64 1, !dbg !50
  %.extract17 = extractelement <4 x i32> %272, i64 2, !dbg !50
  %.extract18 = extractelement <4 x i32> %272, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %235, i1 %34) #2, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct7uvtjgkgkfacsvs7wgbp6upmzkfflzf2c72n7bif547y773bu3.py", directory: "inductor_cache/t7")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_18", linkageName: "triton_poi_fused_add_convolution_mul_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 43, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 34, scope: !7)
!24 = !DILocation(line: 32, column: 48, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 44, scope: !7)
!31 = !DILocation(line: 36, column: 30, scope: !7)
!32 = !DILocation(line: 36, column: 35, scope: !7)
!33 = !DILocation(line: 37, column: 30, scope: !7)
!34 = !DILocation(line: 37, column: 35, scope: !7)
!35 = !DILocation(line: 38, column: 31, scope: !7)
!36 = !DILocation(line: 38, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 43, column: 19, scope: !7)
!42 = !DILocation(line: 44, column: 19, scope: !7)
!43 = !DILocation(line: 45, column: 4, scope: !7)
!44 = !DILocation(line: 46, column: 48, scope: !7)
!45 = !DILocation(line: 47, column: 35, scope: !7)
!46 = !DILocation(line: 47, column: 47, scope: !7)
!47 = !DILocation(line: 47, column: 30, scope: !7)
!48 = !DILocation(line: 47, column: 40, scope: !7)
!49 = !DILocation(line: 47, column: 25, scope: !7)
!50 = !DILocation(line: 47, column: 59, scope: !7)
!51 = !DILocation(line: 47, column: 4, scope: !7)
