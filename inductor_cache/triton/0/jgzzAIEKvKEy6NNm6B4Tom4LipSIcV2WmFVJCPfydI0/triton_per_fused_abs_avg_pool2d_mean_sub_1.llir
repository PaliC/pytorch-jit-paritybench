; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_avg_pool2d_mean_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = and i32 %7, 31, !dbg !10
  %9 = lshr i32 %7, 5, !dbg !10
  %10 = and i32 %7, 63, !dbg !10
  %11 = shl i32 %7, 1, !dbg !11
  %12 = and i32 %11, 2, !dbg !11
  %13 = shl nuw nsw i32 %10, 2, !dbg !12
  %14 = and i32 %13, 248, !dbg !12
  %15 = or disjoint i32 %14, %12, !dbg !13
  %16 = zext nneg i32 %15 to i64, !dbg !14
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !14
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !15
  %19 = or disjoint i32 %15, 1, !dbg !16
  %20 = zext nneg i32 %19 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !17
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !18
  %23 = or disjoint i32 %12, %13, !dbg !19
  %24 = or i32 %23, 4, !dbg !19
  %25 = zext nneg i32 %24 to i64, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !21
  %28 = or i32 %23, 5, !dbg !22
  %29 = zext nneg i32 %28 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !25
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !27
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !28
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !29
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !30
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !31
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !32
  %40 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !15
  %41 = insertelement <2 x i32> %40, i32 %33, i64 1, !dbg !15
  %42 = bitcast <2 x i32> %41 to <2 x float>, !dbg !15
  %43 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !18
  %44 = insertelement <2 x i32> %43, i32 %35, i64 1, !dbg !18
  %45 = bitcast <2 x i32> %44 to <2 x float>, !dbg !18
  %46 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !21
  %47 = insertelement <2 x i32> %46, i32 %37, i64 1, !dbg !21
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !21
  %49 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !24
  %50 = insertelement <2 x i32> %49, i32 %39, i64 1, !dbg !24
  %51 = bitcast <2 x i32> %50 to <2 x float>, !dbg !24
  %52 = fadd <2 x float> %42, %45, !dbg !33
  %53 = fadd <2 x float> %52, %48, !dbg !34
  %54 = fadd <2 x float> %53, %51, !dbg !35
  %55 = fmul <2 x float> %54, splat (float 2.500000e-01), !dbg !36
  %56 = extractelement <2 x float> %55, i64 0, !dbg !37
  %57 = extractelement <2 x float> %55, i64 1, !dbg !38
  %58 = fsub float %56, %57, !dbg !39
  %59 = tail call float @llvm.fabs.f32(float %58), !dbg !40
  %60 = bitcast float %59 to i32, !dbg !41
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 16, i32 31), !dbg !41
  %62 = bitcast i32 %61 to float, !dbg !41
  %63 = fadd float %59, %62, !dbg !45
  %64 = bitcast float %63 to i32, !dbg !41
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 8, i32 31), !dbg !41
  %66 = bitcast i32 %65 to float, !dbg !41
  %67 = fadd float %63, %66, !dbg !45
  %68 = bitcast float %67 to i32, !dbg !41
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 4, i32 31), !dbg !41
  %70 = bitcast i32 %69 to float, !dbg !41
  %71 = fadd float %67, %70, !dbg !45
  %72 = bitcast float %71 to i32, !dbg !41
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 2, i32 31), !dbg !41
  %74 = bitcast i32 %73 to float, !dbg !41
  %75 = fadd float %71, %74, !dbg !45
  %76 = bitcast float %75 to i32, !dbg !41
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 1, i32 31), !dbg !41
  %78 = bitcast i32 %77 to float, !dbg !41
  %79 = fadd float %75, %78, !dbg !45
  %80 = icmp eq i32 %8, 0, !dbg !41
  %81 = and i32 %9, 1, !dbg !41
  %82 = zext nneg i32 %81 to i64, !dbg !41
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i64 %82, !dbg !41
  %84 = bitcast float %79 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 %80) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %85 = icmp slt i32 %7, 2, !dbg !41
  %86 = sext i32 %7 to i64, !dbg !41
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i64 %86, !dbg !41
  %88 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %87, i1 %85) #3, !dbg !41
  %89 = bitcast i32 %88 to float, !dbg !41
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !41
  %91 = bitcast i32 %90 to float, !dbg !41
  %92 = fadd float %89, %91, !dbg !45
  %93 = and i32 %7, 1, !dbg !41
  %94 = icmp eq i32 %93, 0, !dbg !41
  %95 = and i1 %85, %94, !dbg !41
  %96 = bitcast float %92 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %96, i1 %95) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %97 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !41
  %98 = zext nneg i32 %10 to i64, !dbg !47
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !47
  %100 = bitcast float %56 to i32, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %100, ptr addrspace(1) %99, i1 true) #3, !dbg !37
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %98, !dbg !48
  %102 = bitcast float %57 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %102, ptr addrspace(1) %101, i1 true) #3, !dbg !38
  %103 = icmp eq i32 %10, 0, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %97, ptr addrspace(1) %4, i1 %103) #3, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py", directory: "inductor_cache/dc")
!4 = !{ptr @triton_per_fused_abs_avg_pool2d_mean_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_avg_pool2d_mean_sub_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_avg_pool2d_mean_sub_1", linkageName: "triton_per_fused_abs_avg_pool2d_mean_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 32, column: 32, scope: !7)
!12 = !DILocation(line: 32, column: 39, scope: !7)
!13 = !DILocation(line: 32, column: 37, scope: !7)
!14 = !DILocation(line: 32, column: 30, scope: !7)
!15 = !DILocation(line: 32, column: 44, scope: !7)
!16 = !DILocation(line: 33, column: 41, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 48, scope: !7)
!19 = !DILocation(line: 34, column: 41, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 48, scope: !7)
!22 = !DILocation(line: 35, column: 41, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 48, scope: !7)
!25 = !DILocation(line: 36, column: 30, scope: !7)
!26 = !DILocation(line: 36, column: 44, scope: !7)
!27 = !DILocation(line: 37, column: 31, scope: !7)
!28 = !DILocation(line: 37, column: 49, scope: !7)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 38, column: 49, scope: !7)
!31 = !DILocation(line: 39, column: 31, scope: !7)
!32 = !DILocation(line: 39, column: 49, scope: !7)
!33 = !DILocation(line: 40, column: 18, scope: !7)
!34 = !DILocation(line: 41, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 44, column: 18, scope: !7)
!37 = !DILocation(line: 53, column: 71, scope: !7)
!38 = !DILocation(line: 54, column: 72, scope: !7)
!39 = !DILocation(line: 49, column: 19, scope: !7)
!40 = !DILocation(line: 50, column: 24, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!44 = !DILocation(line: 52, column: 26, scope: !7)
!45 = !DILocation(line: 256, column: 15, scope: !46, inlinedAt: !44)
!46 = distinct !DILexicalBlockFile(scope: !42, file: !43, discriminator: 0)
!47 = !DILocation(line: 53, column: 25, scope: !7)
!48 = !DILocation(line: 54, column: 25, scope: !7)
!49 = !DILocation(line: 55, column: 68, scope: !7)
!50 = !DILocation(line: 55, column: 4, scope: !7)
