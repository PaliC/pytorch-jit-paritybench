#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#loc = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":19:0)
#loc1 = loc(unknown)
#loc41 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":52:26)
#loc52 = loc(callsite(#loc1 at #loc41))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_abs_avg_pool2d_mean_sub_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<2.500000e-01> : tensor<1x64xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<8> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<5> : tensor<1x64xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc2)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc2)
    %4 = arith.remsi %2, %cst_0 : tensor<1x64xi32, #blocked> loc(#loc3)
    %5 = arith.divsi %2, %cst_0 : tensor<1x64xi32, #blocked> loc(#loc4)
    %6 = arith.muli %4, %cst_0 : tensor<1x64xi32, #blocked> loc(#loc5)
    %7 = arith.muli %5, %cst_1 : tensor<1x64xi32, #blocked> loc(#loc6)
    %8 = arith.addi %6, %7 : tensor<1x64xi32, #blocked> loc(#loc7)
    %9 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.addptr %9, %8 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc8)
    %11 = tt.load %10 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc9)
    %12 = arith.addi %6, %cst_2 : tensor<1x64xi32, #blocked> loc(#loc10)
    %13 = arith.addi %12, %7 : tensor<1x64xi32, #blocked> loc(#loc11)
    %14 = tt.addptr %9, %13 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc12)
    %15 = tt.load %14 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc13)
    %16 = arith.addi %6, %cst_3 : tensor<1x64xi32, #blocked> loc(#loc14)
    %17 = arith.addi %16, %7 : tensor<1x64xi32, #blocked> loc(#loc15)
    %18 = tt.addptr %9, %17 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc16)
    %19 = tt.load %18 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = arith.addi %6, %cst_4 : tensor<1x64xi32, #blocked> loc(#loc18)
    %21 = arith.addi %20, %7 : tensor<1x64xi32, #blocked> loc(#loc19)
    %22 = tt.addptr %9, %21 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc20)
    %23 = tt.load %22 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc21)
    %24 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc22)
    %25 = tt.addptr %24, %8 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc22)
    %26 = tt.load %25 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc23)
    %27 = tt.addptr %24, %13 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc24)
    %28 = tt.load %27 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc25)
    %29 = tt.addptr %24, %17 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc26)
    %30 = tt.load %29 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc27)
    %31 = tt.addptr %24, %21 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc28)
    %32 = tt.load %31 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc29)
    %33 = arith.addf %15, %11 : tensor<1x64xf32, #blocked> loc(#loc30)
    %34 = arith.addf %19, %33 : tensor<1x64xf32, #blocked> loc(#loc31)
    %35 = arith.addf %23, %34 : tensor<1x64xf32, #blocked> loc(#loc32)
    %36 = arith.mulf %35, %cst : tensor<1x64xf32, #blocked> loc(#loc33)
    %37 = arith.addf %28, %26 : tensor<1x64xf32, #blocked> loc(#loc34)
    %38 = arith.addf %30, %37 : tensor<1x64xf32, #blocked> loc(#loc35)
    %39 = arith.addf %32, %38 : tensor<1x64xf32, #blocked> loc(#loc36)
    %40 = arith.mulf %39, %cst : tensor<1x64xf32, #blocked> loc(#loc37)
    %41 = arith.subf %36, %40 : tensor<1x64xf32, #blocked> loc(#loc38)
    %42 = math.absf %41 : tensor<1x64xf32, #blocked> loc(#loc39)
    %43 = "tt.reduce"(%42) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc41)), %arg7: f32 loc(callsite(#loc1 at #loc41))):
      %53 = arith.addf %arg6, %arg7 : f32 loc(#loc54)
      tt.reduce.return %53 : f32 loc(#loc51)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc51)
    %44 = tt.expand_dims %43 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc43)
    %45 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc44)
    %46 = tt.addptr %45, %3 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc44)
    %47 = triton_gpu.convert_layout %36 : tensor<1x64xf32, #blocked> -> tensor<1x64xf32, #blocked1> loc(#loc45)
    tt.store %46, %47 : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc45)
    %48 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc46)
    %49 = tt.addptr %48, %3 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc46)
    %50 = triton_gpu.convert_layout %40 : tensor<1x64xf32, #blocked> -> tensor<1x64xf32, #blocked1> loc(#loc47)
    tt.store %49, %50 : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc47)
    %51 = tt.addptr %arg4, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc48)
    %52 = tt.splat %51 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc49)
    tt.store %52, %44 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc49)
    tt.return loc(#loc50)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":26:34)
#loc3 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":29:19)
#loc4 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":30:19)
#loc5 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":32:32)
#loc6 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":32:39)
#loc7 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":32:37)
#loc8 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":32:30)
#loc9 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":32:44)
#loc10 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":33:34)
#loc11 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":33:41)
#loc12 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":33:30)
#loc13 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":33:48)
#loc14 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":34:34)
#loc15 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":34:41)
#loc16 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":34:30)
#loc17 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":34:48)
#loc18 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":35:34)
#loc19 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":35:41)
#loc20 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":35:30)
#loc21 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":35:48)
#loc22 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":36:30)
#loc23 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":36:44)
#loc24 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":37:31)
#loc25 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":37:49)
#loc26 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":38:31)
#loc27 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":38:49)
#loc28 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":39:31)
#loc29 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":39:49)
#loc30 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":40:18)
#loc31 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":41:18)
#loc32 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":42:18)
#loc33 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":44:18)
#loc34 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":45:20)
#loc35 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":46:20)
#loc36 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":47:20)
#loc37 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":48:20)
#loc38 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":49:19)
#loc39 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":50:24)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc43 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":52:29)
#loc44 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":53:25)
#loc45 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":53:71)
#loc46 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":54:25)
#loc47 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":54:72)
#loc48 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":55:25)
#loc49 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":55:68)
#loc50 = loc("inductor_cache/dc/cdcsybfcqx5dap4lyhjieep6vvioxrl4dkchd2cr4r5tt35552h6.py":55:4)
#loc51 = loc(callsite(#loc40 at #loc41))
#loc53 = loc(callsite(#loc42 at #loc40))
#loc54 = loc(callsite(#loc53 at #loc41))
