; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused__weight_norm_interface_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %.fr24 = freeze i32 %8, !dbg !11
  %9 = icmp slt i32 %.fr24, 1024, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = lshr i32 %10, 5, !dbg !12
  %13 = shl i32 %10, 2, !dbg !12
  %14 = and i32 %13, 2044, !dbg !12
  %15 = mul i32 %.fr24, 2624, !dbg !13
  %16 = add i32 %14, %15, !dbg !14
  %17 = sext i32 %16 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !15
  br i1 %9, label %.split.preheader, label %.split.us.preheader

.split.us.preheader:                              ; preds = %7
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #5, !dbg !16
  %20 = or disjoint i32 %14, 2048, !dbg !17
  %21 = add i32 %20, %15, !dbg !14
  %22 = sext i32 %21 to i64, !dbg !15
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !15
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #5, !dbg !16
  br label %.split23.us, !dbg !18

.split.preheader:                                 ; preds = %7
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !16
  %30 = bitcast i32 %28 to float, !dbg !16
  %31 = bitcast i32 %29 to float, !dbg !16
  %32 = fmul float %30, %30, !dbg !22
  %33 = fmul float %31, %31, !dbg !22
  %34 = or disjoint i32 %14, 2048, !dbg !17
  %35 = icmp samesign ult i32 %34, 2624, !dbg !23
  %36 = add i32 %34, %15, !dbg !14
  %37 = sext i32 %36 to i64, !dbg !15
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !15
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #5, !dbg !16
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !16
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !16
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !16
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !16
  %44 = bitcast i32 %42 to float, !dbg !16
  %45 = bitcast i32 %43 to float, !dbg !16
  %46 = fmul float %44, %44, !dbg !22
  %47 = fmul float %45, %45, !dbg !22
  %48 = fadd float %32, %46, !dbg !24
  %49 = fadd float %33, %47, !dbg !24
  %50 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !16
  %51 = insertelement <2 x i32> %50, i32 %27, i64 1, !dbg !16
  %52 = bitcast <2 x i32> %51 to <2 x float>, !dbg !16
  %53 = fmul <2 x float> %52, %52, !dbg !22
  %54 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !16
  %55 = insertelement <2 x i32> %54, i32 %41, i64 1, !dbg !16
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !16
  %57 = fmul <2 x float> %56, %56, !dbg !22
  %58 = fadd <2 x float> %53, %57, !dbg !24
  %59 = insertelement <2 x i1> poison, i1 %35, i64 0, !dbg !25
  %60 = shufflevector <2 x i1> %59, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !25
  %61 = select <2 x i1> %60, <2 x float> %58, <2 x float> %53, !dbg !25
  %62 = select i1 %35, float %48, float %32, !dbg !25
  %63 = select i1 %35, float %49, float %33, !dbg !25
  %shift = shufflevector <2 x float> %61, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !18
  %64 = fadd <2 x float> %61, %shift, !dbg !18
  %65 = extractelement <2 x float> %64, i64 0, !dbg !18
  %66 = fadd float %62, %65, !dbg !18
  %67 = fadd float %63, %66, !dbg !18
  br label %.split23.us, !dbg !18

.split23.us:                                      ; preds = %.split.us.preheader, %.split.preheader
  %68 = phi float [ %67, %.split.preheader ], [ 0.000000e+00, %.split.us.preheader ], !dbg !26
  %69 = bitcast float %68 to i32, !dbg !18
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 16, i32 31), !dbg !18
  %71 = bitcast i32 %70 to float, !dbg !18
  %72 = fadd float %68, %71, !dbg !26
  %73 = bitcast float %72 to i32, !dbg !18
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 8, i32 31), !dbg !18
  %75 = bitcast i32 %74 to float, !dbg !18
  %76 = fadd float %72, %75, !dbg !26
  %77 = bitcast float %76 to i32, !dbg !18
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 4, i32 31), !dbg !18
  %79 = bitcast i32 %78 to float, !dbg !18
  %80 = fadd float %76, %79, !dbg !26
  %81 = bitcast float %80 to i32, !dbg !18
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 2, i32 31), !dbg !18
  %83 = bitcast i32 %82 to float, !dbg !18
  %84 = fadd float %80, %83, !dbg !26
  %85 = bitcast float %84 to i32, !dbg !18
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 1, i32 31), !dbg !18
  %87 = bitcast i32 %86 to float, !dbg !18
  %88 = fadd float %84, %87, !dbg !26
  %89 = icmp eq i32 %11, 0, !dbg !18
  %90 = and i32 %12, 15, !dbg !18
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !18
  %92 = bitcast float %88 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 %89) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %93 = icmp slt i32 %10, 16, !dbg !18
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !18
  %95 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %94, i1 %93) #5, !dbg !18
  %96 = bitcast i32 %95 to float, !dbg !18
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 8, i32 31), !dbg !18
  %98 = bitcast i32 %97 to float, !dbg !18
  %99 = fadd float %96, %98, !dbg !26
  %100 = bitcast float %99 to i32, !dbg !18
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 4, i32 31), !dbg !18
  %102 = bitcast i32 %101 to float, !dbg !18
  %103 = fadd float %99, %102, !dbg !26
  %104 = bitcast float %103 to i32, !dbg !18
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 2, i32 31), !dbg !18
  %106 = bitcast i32 %105 to float, !dbg !18
  %107 = fadd float %103, %106, !dbg !26
  %108 = bitcast float %107 to i32, !dbg !18
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 1, i32 31), !dbg !18
  %110 = bitcast i32 %109 to float, !dbg !18
  %111 = fadd float %107, %110, !dbg !26
  %112 = and i32 %10, 15, !dbg !18
  %113 = icmp eq i32 %112, 0, !dbg !18
  %114 = and i1 %93, %113, !dbg !18
  %115 = bitcast float %111 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %115, i1 %114) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %116 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !18
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i = icmp eq i32 %117, 0, !dbg !28
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %.not1.i = icmp eq i32 %118, 0, !dbg !28
  br i1 %.not.i, label %124, label %119, !dbg !28

119:                                              ; preds = %.split23.us
  br i1 %.not1.i, label %122, label %120, !dbg !28

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

124:                                              ; preds = %.split23.us
  br i1 %.not1.i, label %127, label %125, !dbg !28

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %120, %122, %125, %127
  %.0.i = phi float [ %121, %120 ], [ %123, %122 ], [ %126, %125 ], [ %128, %127 ], !dbg !28
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i17 = icmp eq i32 %135, 0, !dbg !28
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %.not1.i20 = icmp eq i32 %136, 0, !dbg !28
  br i1 %.not.i17, label %142, label %137, !dbg !28

137:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %140, label %138, !dbg !28

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #5, !dbg !28
  br label %__nv_sqrtf.exit21, !dbg !28

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #5, !dbg !28
  br label %__nv_sqrtf.exit21, !dbg !28

142:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %145, label %143, !dbg !28

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #5, !dbg !28
  br label %__nv_sqrtf.exit21, !dbg !28

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #5, !dbg !28
  br label %__nv_sqrtf.exit21, !dbg !28

__nv_sqrtf.exit21:                                ; preds = %138, %140, %143, %145
  %.0.i19 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %147 = sext i32 %.fr24 to i64, !dbg !30
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !30
  %urem = and i32 %10, 511, !dbg !31
  %149 = icmp eq i32 %urem, 0, !dbg !31
  %150 = bitcast float %.0.i to i32, !dbg !31
  %151 = and i1 %149, %9, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %150, ptr addrspace(1) %148, i1 %151) #5, !dbg !31
  %152 = getelementptr float, ptr addrspace(1) %2, i64 %147, !dbg !32
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %9) #5, !dbg !33
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %9) #5, !dbg !33
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %9) #5, !dbg !33
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %9) #5, !dbg !33
  %157 = bitcast i32 %156 to float, !dbg !33
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float %.0.i19) #5, !dbg !34
  %159 = add i32 %14, %15, !dbg !35
  %160 = sext i32 %159 to i64, !dbg !36
  %161 = getelementptr float, ptr addrspace(1) %1, i64 %160, !dbg !36
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %161, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !37
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !37
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !37
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !37
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !37
  %167 = bitcast i32 %163 to float, !dbg !37
  %168 = bitcast i32 %164 to float, !dbg !37
  %169 = bitcast i32 %165 to float, !dbg !37
  %170 = bitcast i32 %166 to float, !dbg !37
  %171 = fmul float %158, %167, !dbg !38
  %172 = fmul float %158, %168, !dbg !38
  %173 = fmul float %158, %169, !dbg !38
  %174 = fmul float %158, %170, !dbg !38
  %175 = getelementptr float, ptr addrspace(1) %3, i64 %160, !dbg !39
  %176 = bitcast float %171 to i32, !dbg !40
  %177 = bitcast float %172 to i32, !dbg !40
  %178 = bitcast float %173 to i32, !dbg !40
  %179 = bitcast float %174 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %176, i32 %177, i32 %178, i32 %179, ptr addrspace(1) %175, i1 %9) #5, !dbg !40
  %180 = getelementptr float, ptr addrspace(1) %4, i64 %160, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %176, i32 %177, i32 %178, i32 %179, ptr addrspace(1) %180, i1 %9) #5, !dbg !42
  %181 = or disjoint i32 %14, 2048, !dbg !43
  %182 = icmp samesign ult i32 %181, 2624, !dbg !44
  %183 = add i32 %181, %15, !dbg !35
  %184 = sext i32 %183 to i64, !dbg !36
  %185 = getelementptr float, ptr addrspace(1) %1, i64 %184, !dbg !36
  %186 = and i1 %9, %182, !dbg !45
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %185, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186) #5, !dbg !37
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !37
  %189 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !37
  %190 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !37
  %191 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !37
  %192 = bitcast i32 %188 to float, !dbg !37
  %193 = bitcast i32 %189 to float, !dbg !37
  %194 = bitcast i32 %190 to float, !dbg !37
  %195 = bitcast i32 %191 to float, !dbg !37
  %196 = fmul float %158, %192, !dbg !38
  %197 = fmul float %158, %193, !dbg !38
  %198 = fmul float %158, %194, !dbg !38
  %199 = fmul float %158, %195, !dbg !38
  %200 = getelementptr float, ptr addrspace(1) %3, i64 %184, !dbg !39
  %201 = bitcast float %196 to i32, !dbg !40
  %202 = bitcast float %197 to i32, !dbg !40
  %203 = bitcast float %198 to i32, !dbg !40
  %204 = bitcast float %199 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %201, i32 %202, i32 %203, i32 %204, ptr addrspace(1) %200, i1 %186) #5, !dbg !40
  %205 = getelementptr float, ptr addrspace(1) %4, i64 %184, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %201, i32 %202, i32 %203, i32 %204, ptr addrspace(1) %205, i1 %186) #5, !dbg !42
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chvqsydt4rcwkdjyj4jvbsk26q7vbwoyfwwdtyithqahdnzsrmx3.py", directory: "inductor_cache/hv")
!4 = !{ptr @triton_red_fused__weight_norm_interface_35, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__weight_norm_interface_35, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__weight_norm_interface_35", linkageName: "triton_red_fused__weight_norm_interface_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 44, scope: !7)
!14 = !DILocation(line: 32, column: 39, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 49, scope: !7)
!17 = !DILocation(line: 29, column: 27, scope: !7)
!18 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!21 = !DILocation(line: 37, column: 25, scope: !7)
!22 = !DILocation(line: 33, column: 22, scope: !7)
!23 = !DILocation(line: 30, column: 25, scope: !7)
!24 = !DILocation(line: 35, column: 23, scope: !7)
!25 = !DILocation(line: 36, column: 46, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !21)
!27 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!28 = !DILocation(line: 38, column: 26, scope: !7)
!29 = !DILocation(line: 39, column: 4, scope: !7)
!30 = !DILocation(line: 40, column: 28, scope: !7)
!31 = !DILocation(line: 40, column: 39, scope: !7)
!32 = !DILocation(line: 41, column: 30, scope: !7)
!33 = !DILocation(line: 41, column: 35, scope: !7)
!34 = !DILocation(line: 47, column: 22, scope: !7)
!35 = !DILocation(line: 46, column: 39, scope: !7)
!36 = !DILocation(line: 46, column: 34, scope: !7)
!37 = !DILocation(line: 46, column: 49, scope: !7)
!38 = !DILocation(line: 48, column: 22, scope: !7)
!39 = !DILocation(line: 49, column: 29, scope: !7)
!40 = !DILocation(line: 49, column: 50, scope: !7)
!41 = !DILocation(line: 50, column: 29, scope: !7)
!42 = !DILocation(line: 50, column: 50, scope: !7)
!43 = !DILocation(line: 43, column: 27, scope: !7)
!44 = !DILocation(line: 44, column: 25, scope: !7)
!45 = !DILocation(line: 46, column: 57, scope: !7)
!46 = !DILocation(line: 42, column: 4, scope: !7)
