#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [1, 8], order = [0, 1]}>
#loc = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":19:0)
#loc1 = loc(unknown)
#loc16 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":38:24)
#loc23 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":46:26)
#loc45 = loc(callsite(#loc1 at #loc16))
#loc48 = loc(callsite(#loc1 at #loc23))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__native_batch_norm_legit_cat_13(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<6.400000e+01> : tensor<32x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32x64xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<32768> : tensor<32x1xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<64> : tensor<32x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<256> : tensor<32x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<1024> : tensor<32x1xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<1024> : tensor<32x1xi32, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst_6 = arith.constant dense<2.000000e-01> : tensor<32x64xf32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<9.99999974E-6> : tensor<32x1xf32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<9.99999974E-6> : tensor<32x1xf32, #blocked1> loc(#loc1)
    %cst_9 = arith.constant dense<6.400000e+01> : tensor<32x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<32x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<32x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<32x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_5 : tensor<32x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_4 : tensor<32x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc7)
    %14 = arith.remsi %8, %cst_3 : tensor<32x1xi32, #blocked> loc(#loc8)
    %15 = arith.divsi %8, %cst_3 : tensor<32x1xi32, #blocked> loc(#loc9)
    %16 = arith.muli %8, %cst_2 : tensor<32x1xi32, #blocked> loc(#loc10)
    %17 = tt.broadcast %13 : tensor<1x64xi32, #blocked> -> tensor<32x64xi32, #blocked> loc(#loc11)
    %18 = tt.broadcast %16 : tensor<32x1xi32, #blocked> -> tensor<32x64xi32, #blocked> loc(#loc11)
    %19 = arith.addi %17, %18 : tensor<32x64xi32, #blocked> loc(#loc11)
    %20 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x64x!tt.ptr<f32>, #blocked> loc(#loc12)
    %21 = tt.addptr %20, %19 : tensor<32x64x!tt.ptr<f32>, #blocked>, tensor<32x64xi32, #blocked> loc(#loc12)
    %22 = tt.broadcast %10 : tensor<32x1xi1, #blocked> -> tensor<32x64xi1, #blocked> loc(#loc13)
    %23 = tt.load %21, %22, %cst_0 : tensor<32x64x!tt.ptr<f32>, #blocked> loc(#loc13)
    %24 = arith.select %22, %23, %cst_0 : tensor<32x64xi1, #blocked>, tensor<32x64xf32, #blocked> loc(#loc14)
    %25 = "tt.reduce"(%24) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc16)), %arg7: f32 loc(callsite(#loc1 at #loc16))):
      %62 = arith.addf %arg6, %arg7 : f32 loc(#loc49)
      tt.reduce.return %62 : f32 loc(#loc44)
    }) : (tensor<32x64xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc44)
    %26 = triton_gpu.convert_layout %25 {fastmath = #arith.fastmath<none>} : tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc18)
    %27 = tt.expand_dims %26 {axis = 1 : i32} : tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xf32, #blocked1> loc(#loc19)
    %28 = tt.expand_dims %25 {axis = 1 : i32} : tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xf32, #blocked> loc(#loc19)
    %29 = arith.divf %27, %cst_9 : tensor<32x1xf32, #blocked1> loc(#loc18)
    %30 = arith.divf %28, %cst : tensor<32x1xf32, #blocked> loc(#loc18)
    %31 = tt.broadcast %30 : tensor<32x1xf32, #blocked> -> tensor<32x64xf32, #blocked> loc(#loc20)
    %32 = arith.subf %23, %31 : tensor<32x64xf32, #blocked> loc(#loc20)
    %33 = arith.mulf %32, %32 : tensor<32x64xf32, #blocked> loc(#loc21)
    %34 = arith.select %22, %33, %cst_0 : tensor<32x64xi1, #blocked>, tensor<32x64xf32, #blocked> loc(#loc22)
    %35 = "tt.reduce"(%34) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc23)), %arg7: f32 loc(callsite(#loc1 at #loc23))):
      %62 = arith.addf %arg6, %arg7 : f32 loc(#loc50)
      tt.reduce.return %62 : f32 loc(#loc47)
    }) : (tensor<32x64xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc47)
    %36 = triton_gpu.convert_layout %35 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc24)
    %37 = tt.expand_dims %36 {axis = 1 : i32} : tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xf32, #blocked1> loc(#loc25)
    %38 = tt.expand_dims %35 {axis = 1 : i32} : tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xf32, #blocked> loc(#loc25)
    %39 = arith.divf %37, %cst_9 : tensor<32x1xf32, #blocked1> loc(#loc26)
    %40 = arith.divf %38, %cst : tensor<32x1xf32, #blocked> loc(#loc26)
    %41 = arith.addf %39, %cst_8 : tensor<32x1xf32, #blocked1> loc(#loc27)
    %42 = arith.addf %40, %cst_7 : tensor<32x1xf32, #blocked> loc(#loc27)
    %43 = tt.extern_elementwise %41 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<32x1xf32, #blocked1>) -> tensor<32x1xf32, #blocked1> loc(#loc24)
    %44 = tt.extern_elementwise %42 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<32x1xf32, #blocked>) -> tensor<32x1xf32, #blocked> loc(#loc24)
    %45 = tt.broadcast %44 : tensor<32x1xf32, #blocked> -> tensor<32x64xf32, #blocked> loc(#loc28)
    %46 = arith.mulf %32, %45 : tensor<32x64xf32, #blocked> loc(#loc28)
    %47 = arith.cmpf ogt, %46, %cst_0 : tensor<32x64xf32, #blocked> loc(#loc29)
    %48 = arith.mulf %46, %cst_6 : tensor<32x64xf32, #blocked> loc(#loc30)
    %49 = arith.select %47, %46, %48 : tensor<32x64xi1, #blocked>, tensor<32x64xf32, #blocked> loc(#loc31)
    gpu.barrier loc(#loc32)
    %50 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>, #blocked1> loc(#loc33)
    %51 = tt.addptr %50, %9 : tensor<32x1x!tt.ptr<f32>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc33)
    tt.store %51, %43, %11 : tensor<32x1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    %52 = arith.muli %14, %cst_2 : tensor<32x1xi32, #blocked> loc(#loc35)
    %53 = tt.broadcast %52 : tensor<32x1xi32, #blocked> -> tensor<32x64xi32, #blocked> loc(#loc36)
    %54 = arith.addi %17, %53 : tensor<32x64xi32, #blocked> loc(#loc36)
    %55 = arith.muli %15, %cst_1 : tensor<32x1xi32, #blocked> loc(#loc37)
    %56 = tt.broadcast %55 : tensor<32x1xi32, #blocked> -> tensor<32x64xi32, #blocked> loc(#loc38)
    %57 = arith.addi %54, %56 : tensor<32x64xi32, #blocked> loc(#loc38)
    %58 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<32x64x!tt.ptr<f32>, #blocked> loc(#loc39)
    %59 = tt.addptr %58, %57 : tensor<32x64x!tt.ptr<f32>, #blocked>, tensor<32x64xi32, #blocked> loc(#loc39)
    tt.store %59, %49, %22 : tensor<32x64x!tt.ptr<f32>, #blocked> loc(#loc40)
    %60 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>, #blocked1> loc(#loc41)
    %61 = tt.addptr %60, %9 : tensor<32x1x!tt.ptr<f32>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc41)
    tt.store %61, %29, %11 : tensor<32x1x!tt.ptr<f32>, #blocked1> loc(#loc42)
    tt.return loc(#loc43)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":23:28)
#loc3 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":23:33)
#loc4 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":24:44)
#loc5 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":24:23)
#loc6 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":25:21)
#loc7 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":26:34)
#loc8 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":31:19)
#loc9 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":32:19)
#loc10 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":33:38)
#loc11 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":33:35)
#loc12 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":33:30)
#loc13 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":33:43)
#loc14 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":37:33)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc18 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":41:19)
#loc19 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":38:27)
#loc20 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":42:19)
#loc21 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":43:20)
#loc22 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":45:35)
#loc24 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":51:28)
#loc25 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":46:29)
#loc26 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":48:20)
#loc27 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":50:20)
#loc28 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":53:20)
#loc29 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":55:20)
#loc30 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":57:20)
#loc31 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":58:35)
#loc32 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":59:4)
#loc33 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":60:28)
#loc34 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":60:40)
#loc35 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":61:33)
#loc36 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":61:30)
#loc37 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":61:44)
#loc38 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":61:38)
#loc39 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":61:25)
#loc40 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":61:56)
#loc41 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":62:25)
#loc42 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":62:37)
#loc43 = loc("inductor_cache/g3/cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py":62:4)
#loc44 = loc(callsite(#loc15 at #loc16))
#loc46 = loc(callsite(#loc17 at #loc15))
#loc47 = loc(callsite(#loc15 at #loc23))
#loc49 = loc(callsite(#loc46 at #loc16))
#loc50 = loc(callsite(#loc46 at #loc23))
