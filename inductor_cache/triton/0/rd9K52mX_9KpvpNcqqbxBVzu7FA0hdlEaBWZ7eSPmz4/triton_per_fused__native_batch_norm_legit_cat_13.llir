; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_cat_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = and i32 %9, 31, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %12, !dbg !13
  %16 = icmp slt i32 %14, 1024, !dbg !14
  %17 = icmp slt i32 %15, 1024, !dbg !14
  %18 = shl i32 %9, 2, !dbg !15
  %19 = and i32 %18, 60, !dbg !15
  %20 = shl i32 %14, 6, !dbg !16
  %21 = shl i32 %15, 6, !dbg !16
  %22 = or disjoint i32 %20, %19, !dbg !17
  %23 = or disjoint i32 %21, %19, !dbg !17
  %24 = sext i32 %22 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !18
  %26 = sext i32 %23 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !18
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !19
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !19
  %33 = bitcast i32 %29 to float, !dbg !19
  %34 = bitcast i32 %30 to float, !dbg !19
  %35 = bitcast i32 %31 to float, !dbg !19
  %36 = bitcast i32 %32 to float, !dbg !19
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !19
  %42 = bitcast i32 %38 to float, !dbg !19
  %43 = bitcast i32 %39 to float, !dbg !19
  %44 = bitcast i32 %40 to float, !dbg !19
  %45 = bitcast i32 %41 to float, !dbg !19
  %46 = fadd float %33, %34, !dbg !20
  %47 = fadd float %46, %35, !dbg !20
  %48 = fadd float %47, %36, !dbg !20
  %49 = select i1 %16, float %48, float 0.000000e+00, !dbg !20
  %50 = fadd float %42, %43, !dbg !20
  %51 = fadd float %50, %44, !dbg !20
  %52 = fadd float %51, %45, !dbg !20
  %53 = select i1 %17, float %52, float 0.000000e+00, !dbg !20
  %54 = bitcast float %49 to i32, !dbg !25
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 8, i32 31), !dbg !25
  %56 = bitcast i32 %55 to float, !dbg !25
  %57 = fadd float %49, %56, !dbg !20
  %58 = bitcast float %57 to i32, !dbg !25
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 4, i32 31), !dbg !25
  %60 = bitcast i32 %59 to float, !dbg !25
  %61 = fadd float %57, %60, !dbg !20
  %62 = bitcast float %61 to i32, !dbg !25
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 2, i32 31), !dbg !25
  %64 = bitcast i32 %63 to float, !dbg !25
  %65 = fadd float %61, %64, !dbg !20
  %66 = bitcast float %65 to i32, !dbg !25
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 1, i32 31), !dbg !25
  %68 = bitcast i32 %67 to float, !dbg !25
  %69 = fadd float %65, %68, !dbg !20
  %70 = bitcast float %53 to i32, !dbg !25
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 8, i32 31), !dbg !25
  %72 = bitcast i32 %71 to float, !dbg !25
  %73 = fadd float %53, %72, !dbg !20
  %74 = bitcast float %73 to i32, !dbg !25
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 4, i32 31), !dbg !25
  %76 = bitcast i32 %75 to float, !dbg !25
  %77 = fadd float %73, %76, !dbg !20
  %78 = bitcast float %77 to i32, !dbg !25
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 2, i32 31), !dbg !25
  %80 = bitcast i32 %79 to float, !dbg !25
  %81 = fadd float %77, %80, !dbg !20
  %82 = bitcast float %81 to i32, !dbg !25
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 1, i32 31), !dbg !25
  %84 = bitcast i32 %83 to float, !dbg !25
  %85 = fadd float %81, %84, !dbg !20
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !26
  %87 = bitcast float %69 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #5, !dbg !26
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !26
  %89 = bitcast float %85 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !26
  %91 = load float, ptr addrspace(3) %90, align 4, !dbg !26
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float 6.400000e+01) #5, !dbg !26
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float 6.400000e+01) #5, !dbg !26
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float 6.400000e+01) #5, !dbg !26
  %95 = fsub float %33, %93, !dbg !27
  %96 = fsub float %34, %93, !dbg !27
  %97 = fsub float %35, %93, !dbg !27
  %98 = fsub float %36, %93, !dbg !27
  %99 = fsub float %42, %94, !dbg !27
  %100 = fsub float %43, %94, !dbg !27
  %101 = fsub float %44, %94, !dbg !27
  %102 = fsub float %45, %94, !dbg !27
  %103 = fmul float %95, %95, !dbg !28
  %104 = fmul float %96, %96, !dbg !28
  %105 = fmul float %97, %97, !dbg !28
  %106 = fmul float %98, %98, !dbg !28
  %107 = fmul float %99, %99, !dbg !28
  %108 = fmul float %100, %100, !dbg !28
  %109 = fmul float %101, %101, !dbg !28
  %110 = fmul float %102, %102, !dbg !28
  %111 = fadd float %103, %104, !dbg !29
  %112 = fadd float %105, %111, !dbg !29
  %113 = fadd float %106, %112, !dbg !29
  %114 = select i1 %16, float %113, float 0.000000e+00, !dbg !29
  %115 = fadd float %107, %108, !dbg !29
  %116 = fadd float %109, %115, !dbg !29
  %117 = fadd float %110, %116, !dbg !29
  %118 = select i1 %17, float %117, float 0.000000e+00, !dbg !29
  %119 = bitcast float %114 to i32, !dbg !31
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 8, i32 31), !dbg !31
  %121 = bitcast i32 %120 to float, !dbg !31
  %122 = fadd float %114, %121, !dbg !29
  %123 = bitcast float %122 to i32, !dbg !31
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 4, i32 31), !dbg !31
  %125 = bitcast i32 %124 to float, !dbg !31
  %126 = fadd float %122, %125, !dbg !29
  %127 = bitcast float %126 to i32, !dbg !31
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 2, i32 31), !dbg !31
  %129 = bitcast i32 %128 to float, !dbg !31
  %130 = fadd float %126, %129, !dbg !29
  %131 = bitcast float %130 to i32, !dbg !31
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 1, i32 31), !dbg !31
  %133 = bitcast i32 %132 to float, !dbg !31
  %134 = fadd float %130, %133, !dbg !29
  %135 = bitcast float %118 to i32, !dbg !31
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 8, i32 31), !dbg !31
  %137 = bitcast i32 %136 to float, !dbg !31
  %138 = fadd float %118, %137, !dbg !29
  %139 = bitcast float %138 to i32, !dbg !31
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 4, i32 31), !dbg !31
  %141 = bitcast i32 %140 to float, !dbg !31
  %142 = fadd float %138, %141, !dbg !29
  %143 = bitcast float %142 to i32, !dbg !31
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 2, i32 31), !dbg !31
  %145 = bitcast i32 %144 to float, !dbg !31
  %146 = fadd float %142, %145, !dbg !29
  %147 = bitcast float %146 to i32, !dbg !31
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 1, i32 31), !dbg !31
  %149 = bitcast i32 %148 to float, !dbg !31
  %150 = fadd float %146, %149, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %151 = bitcast float %134 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %151, i1 true) #5, !dbg !32
  %152 = bitcast float %150 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %152, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %153 = load float, ptr addrspace(3) %90, align 4, !dbg !32
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float 6.400000e+01) #5, !dbg !33
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float 6.400000e+01) #5, !dbg !33
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float 6.400000e+01) #5, !dbg !33
  %157 = fadd float %154, 0x3EE4F8B580000000, !dbg !34
  %158 = fadd float %155, 0x3EE4F8B580000000, !dbg !34
  %159 = fadd float %156, 0x3EE4F8B580000000, !dbg !34
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i = icmp eq i32 %160, 0, !dbg !32
  br i1 %.not.i, label %163, label %161, !dbg !32

161:                                              ; preds = %6
  %162 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %157), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

163:                                              ; preds = %6
  %164 = tail call float @llvm.nvvm.rsqrt.approx.f(float %157), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

__nv_rsqrtf.exit:                                 ; preds = %161, %163
  %.0.i = phi float [ %162, %161 ], [ %164, %163 ], !dbg !32
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i11 = icmp eq i32 %168, 0, !dbg !32
  br i1 %.not.i11, label %171, label %169, !dbg !32

169:                                              ; preds = %__nv_rsqrtf.exit
  %170 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %158), !dbg !32
  br label %__nv_rsqrtf.exit13, !dbg !32

171:                                              ; preds = %__nv_rsqrtf.exit
  %172 = tail call float @llvm.nvvm.rsqrt.approx.f(float %158), !dbg !32
  br label %__nv_rsqrtf.exit13, !dbg !32

__nv_rsqrtf.exit13:                               ; preds = %169, %171
  %.0.i12 = phi float [ %170, %169 ], [ %172, %171 ], !dbg !32
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i23 = icmp eq i32 %176, 0, !dbg !32
  br i1 %.not.i23, label %179, label %177, !dbg !32

177:                                              ; preds = %__nv_rsqrtf.exit13
  %178 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %159), !dbg !32
  br label %__nv_rsqrtf.exit25, !dbg !32

179:                                              ; preds = %__nv_rsqrtf.exit13
  %180 = tail call float @llvm.nvvm.rsqrt.approx.f(float %159), !dbg !32
  br label %__nv_rsqrtf.exit25, !dbg !32

__nv_rsqrtf.exit25:                               ; preds = %177, %179
  %.0.i24 = phi float [ %178, %177 ], [ %180, %179 ], !dbg !32
  %.frozen = freeze i32 %15, !dbg !35
  %181 = sdiv i32 %.frozen, 256, !dbg !35
  %.frozen26 = freeze i32 %14, !dbg !35
  %182 = sdiv i32 %.frozen26, 256, !dbg !35
  %183 = mul i32 %181, 256, !dbg !36
  %.decomposed = sub i32 %.frozen, %183, !dbg !36
  %184 = mul i32 %182, 256, !dbg !36
  %.decomposed27 = sub i32 %.frozen26, %184, !dbg !36
  %185 = or disjoint i32 %8, %13, !dbg !13
  %186 = icmp slt i32 %185, 1024, !dbg !14
  %187 = fmul float %95, %.0.i12, !dbg !37
  %188 = fmul float %96, %.0.i12, !dbg !37
  %189 = fmul float %97, %.0.i12, !dbg !37
  %190 = fmul float %98, %.0.i12, !dbg !37
  %191 = fmul float %99, %.0.i24, !dbg !37
  %192 = fmul float %100, %.0.i24, !dbg !37
  %193 = fmul float %101, %.0.i24, !dbg !37
  %194 = fmul float %102, %.0.i24, !dbg !37
  %195 = fcmp ogt float %187, 0.000000e+00, !dbg !38
  %196 = fcmp ogt float %188, 0.000000e+00, !dbg !38
  %197 = fcmp ogt float %189, 0.000000e+00, !dbg !38
  %198 = fcmp ogt float %190, 0.000000e+00, !dbg !38
  %199 = fcmp ogt float %191, 0.000000e+00, !dbg !38
  %200 = fcmp ogt float %192, 0.000000e+00, !dbg !38
  %201 = fcmp ogt float %193, 0.000000e+00, !dbg !38
  %202 = fcmp ogt float %194, 0.000000e+00, !dbg !38
  %203 = fmul float %187, 0x3FC99999A0000000, !dbg !39
  %204 = fmul float %188, 0x3FC99999A0000000, !dbg !39
  %205 = fmul float %189, 0x3FC99999A0000000, !dbg !39
  %206 = fmul float %190, 0x3FC99999A0000000, !dbg !39
  %207 = fmul float %191, 0x3FC99999A0000000, !dbg !39
  %208 = fmul float %192, 0x3FC99999A0000000, !dbg !39
  %209 = fmul float %193, 0x3FC99999A0000000, !dbg !39
  %210 = fmul float %194, 0x3FC99999A0000000, !dbg !39
  %211 = select i1 %195, float %187, float %203, !dbg !40
  %212 = select i1 %196, float %188, float %204, !dbg !40
  %213 = select i1 %197, float %189, float %205, !dbg !40
  %214 = select i1 %198, float %190, float %206, !dbg !40
  %215 = select i1 %199, float %191, float %207, !dbg !40
  %216 = select i1 %200, float %192, float %208, !dbg !40
  %217 = select i1 %201, float %193, float %209, !dbg !40
  %218 = select i1 %202, float %194, float %210, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %219 = sext i32 %185 to i64, !dbg !42
  %220 = getelementptr float, ptr addrspace(1) %0, i64 %219, !dbg !42
  %221 = and i32 %9, 224, !dbg !43
  %222 = icmp eq i32 %221, 0, !dbg !43
  %223 = bitcast float %.0.i to i32, !dbg !43
  %224 = and i1 %222, %186, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %223, ptr addrspace(1) %220, i1 %224) #5, !dbg !43
  %225 = shl nsw i32 %.decomposed27, 6, !dbg !44
  %226 = shl nsw i32 %.decomposed, 6, !dbg !44
  %227 = or disjoint i32 %225, %19, !dbg !45
  %228 = or disjoint i32 %226, %19, !dbg !45
  %229 = shl i32 %182, 15, !dbg !46
  %230 = shl i32 %181, 15, !dbg !46
  %231 = add i32 %227, %229, !dbg !47
  %232 = add i32 %228, %230, !dbg !47
  %233 = sext i32 %231 to i64, !dbg !48
  %234 = getelementptr float, ptr addrspace(1) %3, i64 %233, !dbg !48
  %235 = sext i32 %232 to i64, !dbg !48
  %236 = getelementptr float, ptr addrspace(1) %3, i64 %235, !dbg !48
  %237 = bitcast float %211 to i32, !dbg !49
  %238 = bitcast float %212 to i32, !dbg !49
  %239 = bitcast float %213 to i32, !dbg !49
  %240 = bitcast float %214 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %237, i32 %238, i32 %239, i32 %240, ptr addrspace(1) %234, i1 %16) #5, !dbg !49
  %241 = bitcast float %215 to i32, !dbg !49
  %242 = bitcast float %216 to i32, !dbg !49
  %243 = bitcast float %217 to i32, !dbg !49
  %244 = bitcast float %218 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %241, i32 %242, i32 %243, i32 %244, ptr addrspace(1) %236, i1 %17) #5, !dbg !49
  %245 = getelementptr float, ptr addrspace(1) %2, i64 %219, !dbg !50
  %246 = bitcast float %92 to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %246, ptr addrspace(1) %245, i1 %224) #5, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cg33blvokx3tpogzmt4f3vjlwiv6ztfibrchy5drh3zx3k2zj4vg.py", directory: "inductor_cache/g3")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_cat_13, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_cat_13, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_cat_13", linkageName: "triton_per_fused__native_batch_norm_legit_cat_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 33, column: 38, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 43, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 38, column: 24, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 41, column: 19, scope: !7)
!27 = !DILocation(line: 42, column: 19, scope: !7)
!28 = !DILocation(line: 43, column: 20, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !30)
!30 = !DILocation(line: 46, column: 26, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !30)
!32 = !DILocation(line: 51, column: 28, scope: !7)
!33 = !DILocation(line: 48, column: 20, scope: !7)
!34 = !DILocation(line: 50, column: 20, scope: !7)
!35 = !DILocation(line: 32, column: 19, scope: !7)
!36 = !DILocation(line: 31, column: 19, scope: !7)
!37 = !DILocation(line: 53, column: 20, scope: !7)
!38 = !DILocation(line: 55, column: 20, scope: !7)
!39 = !DILocation(line: 57, column: 20, scope: !7)
!40 = !DILocation(line: 58, column: 35, scope: !7)
!41 = !DILocation(line: 59, column: 4, scope: !7)
!42 = !DILocation(line: 60, column: 28, scope: !7)
!43 = !DILocation(line: 60, column: 40, scope: !7)
!44 = !DILocation(line: 61, column: 33, scope: !7)
!45 = !DILocation(line: 61, column: 30, scope: !7)
!46 = !DILocation(line: 61, column: 44, scope: !7)
!47 = !DILocation(line: 61, column: 38, scope: !7)
!48 = !DILocation(line: 61, column: 25, scope: !7)
!49 = !DILocation(line: 61, column: 56, scope: !7)
!50 = !DILocation(line: 62, column: 25, scope: !7)
!51 = !DILocation(line: 62, column: 37, scope: !7)
!52 = !DILocation(line: 62, column: 4, scope: !7)
