; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = lshr i32 %8, 3, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = icmp slt i32 %14, 256, !dbg !14
  %18 = icmp slt i32 %15, 256, !dbg !14
  %19 = icmp slt i32 %16, 256, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 5, !dbg !16
  %22 = or disjoint i32 %21, %12, !dbg !17
  %23 = or disjoint i32 %21, %13, !dbg !17
  %24 = or disjoint i32 %21, %10, !dbg !17
  %25 = icmp slt i32 %22, 1024, !dbg !18
  %26 = icmp slt i32 %23, 1024, !dbg !18
  %27 = icmp slt i32 %24, 1024, !dbg !18
  %.frozen = freeze i32 %14, !dbg !19
  %28 = sdiv i32 %.frozen, 64, !dbg !19
  %29 = mul i32 %28, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %30 = shl i32 %22, 6, !dbg !21
  %31 = shl i32 %23, 6, !dbg !21
  %32 = shl i32 %28, 16, !dbg !22
  %33 = add i32 %32, %.decomposed, !dbg !23
  %34 = add i32 %33, %30, !dbg !24
  %35 = add i32 %33, %31, !dbg !24
  %36 = sext i32 %34 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = sext i32 %35 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !25
  %40 = and i1 %17, %25, !dbg !26
  %41 = and i1 %17, %26, !dbg !26
  %42 = and i1 %18, %27, !dbg !26
  %43 = and i1 %19, %27, !dbg !26
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %40) #2, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !27
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !27
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %41) #2, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !27
  %54 = shl i32 %15, 10, !dbg !28
  %55 = shl i32 %16, 10, !dbg !28
  %56 = add i32 %24, %54, !dbg !29
  %57 = add i32 %24, %55, !dbg !29
  %58 = sext i32 %56 to i64, !dbg !30
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !30
  %60 = sext i32 %57 to i64, !dbg !30
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !30
  %62 = shl i32 %8, 7, !dbg !31
  %63 = and i32 %62, 896, !dbg !31
  %64 = or disjoint i32 %63, %12, !dbg !31
  %65 = and i32 %9, 508, !dbg !31
  %66 = lshr exact i32 %63, 3, !dbg !31
  %67 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %66, !dbg !31
  %68 = getelementptr float, ptr addrspace(3) %67, i32 %64, !dbg !31
  %69 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #2, !dbg !31
  %70 = or disjoint i32 %64, 32, !dbg !31
  %71 = lshr i32 %70, 5, !dbg !31
  %72 = getelementptr float, ptr addrspace(3) @global_smem, i32 %71, !dbg !31
  %73 = getelementptr float, ptr addrspace(3) %72, i32 %70, !dbg !31
  %74 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #2, !dbg !31
  %75 = or disjoint i32 %64, 64, !dbg !31
  %76 = lshr i32 %75, 5, !dbg !31
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %76, !dbg !31
  %78 = getelementptr float, ptr addrspace(3) %77, i32 %75, !dbg !31
  %79 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #2, !dbg !31
  %80 = or disjoint i32 %64, 96, !dbg !31
  %81 = lshr i32 %80, 5, !dbg !31
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81, !dbg !31
  %83 = getelementptr float, ptr addrspace(3) %82, i32 %80, !dbg !31
  %84 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #2, !dbg !31
  %85 = or disjoint i32 %64, 16, !dbg !31
  %86 = getelementptr float, ptr addrspace(3) %67, i32 %85, !dbg !31
  %87 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #2, !dbg !31
  %88 = or disjoint i32 %64, 48, !dbg !31
  %89 = lshr i32 %88, 5, !dbg !31
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i32 %89, !dbg !31
  %91 = getelementptr float, ptr addrspace(3) %90, i32 %88, !dbg !31
  %92 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #2, !dbg !31
  %93 = or disjoint i32 %64, 80, !dbg !31
  %94 = lshr i32 %93, 5, !dbg !31
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !31
  %96 = getelementptr float, ptr addrspace(3) %95, i32 %93, !dbg !31
  %97 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #2, !dbg !31
  %98 = or disjoint i32 %64, 112, !dbg !31
  %99 = lshr i32 %98, 5, !dbg !31
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !31
  %101 = getelementptr float, ptr addrspace(3) %100, i32 %98, !dbg !31
  %102 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %103 = lshr i32 %65, 5, !dbg !31
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %103, !dbg !31
  %105 = getelementptr inbounds float, ptr addrspace(3) %104, i32 %65, !dbg !31
  %106 = load i32, ptr addrspace(3) %105, align 4, !dbg !31
  %107 = or disjoint i32 %65, 1, !dbg !31
  %108 = getelementptr inbounds float, ptr addrspace(3) %104, i32 %107, !dbg !31
  %109 = load i32, ptr addrspace(3) %108, align 4, !dbg !31
  %110 = or disjoint i32 %65, 2, !dbg !31
  %111 = getelementptr inbounds float, ptr addrspace(3) %104, i32 %110, !dbg !31
  %112 = load i32, ptr addrspace(3) %111, align 4, !dbg !31
  %113 = or disjoint i32 %65, 3, !dbg !31
  %114 = getelementptr inbounds float, ptr addrspace(3) %104, i32 %113, !dbg !31
  %115 = load i32, ptr addrspace(3) %114, align 4, !dbg !31
  %116 = or disjoint i32 %65, 512, !dbg !31
  %117 = lshr i32 %116, 5, !dbg !31
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %117, !dbg !31
  %119 = getelementptr inbounds float, ptr addrspace(3) %118, i32 %116, !dbg !31
  %120 = load i32, ptr addrspace(3) %119, align 4, !dbg !31
  %121 = or disjoint i32 %65, 513, !dbg !31
  %122 = lshr i32 %121, 5, !dbg !31
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %122, !dbg !31
  %124 = getelementptr inbounds float, ptr addrspace(3) %123, i32 %121, !dbg !31
  %125 = load i32, ptr addrspace(3) %124, align 4, !dbg !31
  %126 = or disjoint i32 %65, 514, !dbg !31
  %127 = lshr i32 %126, 5, !dbg !31
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %127, !dbg !31
  %129 = getelementptr inbounds float, ptr addrspace(3) %128, i32 %126, !dbg !31
  %130 = load i32, ptr addrspace(3) %129, align 4, !dbg !31
  %131 = or disjoint i32 %65, 515, !dbg !31
  %132 = lshr i32 %131, 5, !dbg !31
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %132, !dbg !31
  %134 = getelementptr inbounds float, ptr addrspace(3) %133, i32 %131, !dbg !31
  %135 = load i32, ptr addrspace(3) %134, align 4, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %106, i32 %109, i32 %112, i32 %115, ptr addrspace(1) %59, i1 %42) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %120, i32 %125, i32 %130, i32 %135, ptr addrspace(1) %61, i1 %43) #2, !dbg !31
  %136 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !32
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %45, i32 %46, i32 %47, i32 %48, ptr addrspace(1) %136, i1 %40) #2, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %50, i32 %51, i32 %52, i32 %53, ptr addrspace(1) %137, i1 %41) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4oxjzt2n42b3yg3cp62fn4iy7hak35qabmjqmelsal32eb35am6.py", directory: "inductor_cache/4o")
!4 = !{ptr @triton_poi_fused_convolution_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_7", linkageName: "triton_poi_fused_convolution_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 62, scope: !7)
!27 = !DILocation(line: 32, column: 54, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 25, scope: !7)
!31 = !DILocation(line: 33, column: 46, scope: !7)
!32 = !DILocation(line: 34, column: 25, scope: !7)
!33 = !DILocation(line: 34, column: 55, scope: !7)
!34 = !DILocation(line: 34, column: 4, scope: !7)
