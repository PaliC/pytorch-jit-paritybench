; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_stack_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.fr = freeze i32 %7, !dbg !11
  %8 = shl i32 %.fr, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 254, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 1, !dbg !13
  %14 = icmp slt i32 %12, 864, !dbg !14
  %15 = sdiv i32 %12, 3, !dbg !15
  %16 = mul i32 %15, 3, !dbg !16
  %.decomposed = sub i32 %12, %16, !dbg !16
  %17 = sdiv i32 %13, 3, !dbg !15
  %18 = mul i32 %17, 3, !dbg !16
  %.decomposed28 = sub i32 %13, %18, !dbg !16
  %19 = sdiv i32 %12, 9, !dbg !17
  %20 = sdiv i32 %13, 9, !dbg !17
  %21 = srem i32 %15, 3, !dbg !18
  %22 = srem i32 %17, 3, !dbg !18
  %23 = icmp slt i32 %.decomposed, 1, !dbg !19
  %24 = icmp slt i32 %.decomposed28, 1, !dbg !19
  %25 = sext i32 %15 to i64, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !20
  %27 = sext i32 %17 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !20
  %29 = and i1 %14, %23, !dbg !21
  %30 = and i1 %24, %14, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %29, i32 0, i1 %29) #3, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %30, i32 0, i1 %30) #3, !dbg !22
  %33 = icmp eq i32 %.decomposed, 1, !dbg !23
  %34 = icmp eq i32 %.decomposed28, 1, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !24
  %37 = and i1 %14, %33, !dbg !25
  %38 = and i1 %34, %14, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %37, i32 0, i1 %37) #3, !dbg !26
  %40 = bitcast i32 %39 to float, !dbg !26
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %38, i32 0, i1 %38) #3, !dbg !26
  %42 = bitcast i32 %41 to float, !dbg !26
  %43 = mul nsw i32 %19, 3, !dbg !27
  %44 = mul nsw i32 %20, 3, !dbg !27
  %45 = sext i32 %43 to i64, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !28
  %47 = sext i32 %44 to i64, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %37, i32 0, i1 %37) #3, !dbg !29
  %50 = bitcast i32 %49 to float, !dbg !29
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %38, i32 0, i1 %38) #3, !dbg !29
  %52 = bitcast i32 %51 to float, !dbg !29
  %53 = fmul float %50, %50, !dbg !30
  %54 = fmul float %52, %52, !dbg !30
  %55 = getelementptr i8, ptr addrspace(1) %46, i64 4, !dbg !31
  %56 = getelementptr i8, ptr addrspace(1) %48, i64 4, !dbg !31
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %37, i32 0, i1 %37) #3, !dbg !32
  %58 = bitcast i32 %57 to float, !dbg !32
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %38, i32 0, i1 %38) #3, !dbg !32
  %60 = bitcast i32 %59 to float, !dbg !32
  %61 = fmul float %58, %58, !dbg !33
  %62 = fmul float %60, %60, !dbg !33
  %63 = fadd float %53, %61, !dbg !34
  %64 = fadd float %54, %62, !dbg !34
  %65 = getelementptr i8, ptr addrspace(1) %46, i64 8, !dbg !35
  %66 = getelementptr i8, ptr addrspace(1) %48, i64 8, !dbg !35
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %37, i32 0, i1 %37) #3, !dbg !36
  %68 = bitcast i32 %67 to float, !dbg !36
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %38, i32 0, i1 %38) #3, !dbg !36
  %70 = bitcast i32 %69 to float, !dbg !36
  %71 = fmul float %68, %68, !dbg !37
  %72 = fmul float %70, %70, !dbg !37
  %73 = fadd float %63, %71, !dbg !38
  %74 = fadd float %64, %72, !dbg !38
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %75, 0, !dbg !39
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %76, 0, !dbg !39
  br i1 %.not.i, label %82, label %77, !dbg !39

77:                                               ; preds = %6
  br i1 %.not1.i, label %80, label %78, !dbg !39

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

82:                                               ; preds = %6
  br i1 %.not1.i, label %85, label %83, !dbg !39

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %78, %80, %83, %85
  %.0.i = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !39
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i1 = icmp eq i32 %87, 0, !dbg !39
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i4 = icmp eq i32 %88, 0, !dbg !39
  br i1 %.not.i1, label %94, label %89, !dbg !39

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %92, label %90, !dbg !39

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %97, label %95, !dbg !39

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

__nv_sqrtf.exit5:                                 ; preds = %90, %92, %95, %97
  %.0.i3 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !39
  %99 = fcmp ogt float %.0.i, 0x3D71979980000000, !dbg !40
  %100 = fcmp ogt float %.0.i3, 0x3D71979980000000, !dbg !40
  %101 = fcmp uno float %.0.i, 0.000000e+00, !dbg !44
  %102 = fcmp uno float %.0.i3, 0.000000e+00, !dbg !44
  %103 = or i1 %99, %101, !dbg !45
  %104 = or i1 %100, %102, !dbg !45
  %105 = select i1 %103, float %.0.i, float 0x3D71979980000000, !dbg !46
  %106 = select i1 %104, float %.0.i3, float 0x3D71979980000000, !dbg !46
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %40, float %105) #3, !dbg !47
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float %106) #3, !dbg !47
  %109 = icmp sgt i32 %.decomposed, 1, !dbg !48
  %110 = icmp sgt i32 %.decomposed28, 1, !dbg !48
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !49
  %112 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !49
  %113 = and i1 %14, %109, !dbg !50
  %114 = and i1 %110, %14, !dbg !50
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %113, i32 0, i1 %113) #3, !dbg !51
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %114, i32 0, i1 %114) #3, !dbg !51
  %.cmp = icmp slt i32 %21, 1, !dbg !52
  %.v = select i1 %.cmp, i32 2, i32 -1, !dbg !52
  %.cmp18 = icmp slt i32 %22, 1, !dbg !52
  %.v27 = select i1 %.cmp18, i32 2, i32 -1, !dbg !52
  %117 = add nsw i32 %43, %21, !dbg !52
  %118 = add nsw i32 %117, %.v, !dbg !53
  %119 = add nsw i32 %44, %22, !dbg !52
  %120 = add nsw i32 %119, %.v27, !dbg !53
  %121 = sext i32 %118 to i64, !dbg !54
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %121, !dbg !54
  %123 = sext i32 %120 to i64, !dbg !54
  %124 = getelementptr float, ptr addrspace(1) %1, i64 %123, !dbg !54
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %113, i32 0, i1 %113) #3, !dbg !55
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %114, i32 0, i1 %114) #3, !dbg !55
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %113, i32 0, i1 %113) #3, !dbg !56
  %128 = bitcast i32 %127 to float, !dbg !56
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %114, i32 0, i1 %114) #3, !dbg !56
  %130 = bitcast i32 %129 to float, !dbg !56
  %131 = fmul float %128, %128, !dbg !57
  %132 = fmul float %130, %130, !dbg !57
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %113, i32 0, i1 %113) #3, !dbg !58
  %134 = bitcast i32 %133 to float, !dbg !58
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %114, i32 0, i1 %114) #3, !dbg !58
  %136 = bitcast i32 %135 to float, !dbg !58
  %137 = fmul float %134, %134, !dbg !59
  %138 = fmul float %136, %136, !dbg !59
  %139 = fadd float %131, %137, !dbg !60
  %140 = fadd float %132, %138, !dbg !60
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %113, i32 0, i1 %113) #3, !dbg !61
  %142 = bitcast i32 %141 to float, !dbg !61
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %114, i32 0, i1 %114) #3, !dbg !61
  %144 = bitcast i32 %143 to float, !dbg !61
  %145 = fmul float %142, %142, !dbg !62
  %146 = fmul float %144, %144, !dbg !62
  %147 = fadd float %139, %145, !dbg !63
  %148 = fadd float %140, %146, !dbg !63
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !64
  %.not.i6 = icmp eq i32 %149, 0, !dbg !64
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !64
  %.not1.i9 = icmp eq i32 %150, 0, !dbg !64
  br i1 %.not.i6, label %156, label %151, !dbg !64

151:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %154, label %152, !dbg !64

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %147) #3, !dbg !64
  br label %__nv_sqrtf.exit10, !dbg !64

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %147) #3, !dbg !64
  br label %__nv_sqrtf.exit10, !dbg !64

156:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %159, label %157, !dbg !64

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.f(float %147) #3, !dbg !64
  br label %__nv_sqrtf.exit10, !dbg !64

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.f(float %147) #3, !dbg !64
  br label %__nv_sqrtf.exit10, !dbg !64

__nv_sqrtf.exit10:                                ; preds = %152, %154, %157, %159
  %.0.i8 = phi float [ %153, %152 ], [ %155, %154 ], [ %158, %157 ], [ %160, %159 ], !dbg !64
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !64
  %.not.i11 = icmp eq i32 %161, 0, !dbg !64
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !64
  %.not1.i14 = icmp eq i32 %162, 0, !dbg !64
  br i1 %.not.i11, label %168, label %163, !dbg !64

163:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %166, label %164, !dbg !64

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %148) #3, !dbg !64
  br label %__nv_sqrtf.exit15, !dbg !64

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %148) #3, !dbg !64
  br label %__nv_sqrtf.exit15, !dbg !64

168:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %171, label %169, !dbg !64

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.f(float %148) #3, !dbg !64
  br label %__nv_sqrtf.exit15, !dbg !64

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.f(float %148) #3, !dbg !64
  br label %__nv_sqrtf.exit15, !dbg !64

__nv_sqrtf.exit15:                                ; preds = %164, %166, %169, %171
  %.0.i13 = phi float [ %165, %164 ], [ %167, %166 ], [ %170, %169 ], [ %172, %171 ], !dbg !64
  %173 = bitcast i32 %126 to float, !dbg !55
  %174 = bitcast i32 %125 to float, !dbg !55
  %175 = bitcast i32 %116 to float, !dbg !51
  %176 = bitcast i32 %115 to float, !dbg !51
  %177 = fcmp ogt float %.0.i8, 0x3D71979980000000, !dbg !65
  %178 = fcmp ogt float %.0.i13, 0x3D71979980000000, !dbg !65
  %179 = fcmp uno float %.0.i8, 0.000000e+00, !dbg !67
  %180 = fcmp uno float %.0.i13, 0.000000e+00, !dbg !67
  %181 = or i1 %177, %179, !dbg !68
  %182 = or i1 %178, %180, !dbg !68
  %183 = select i1 %181, float %.0.i8, float 0x3D71979980000000, !dbg !69
  %184 = select i1 %182, float %.0.i13, float 0x3D71979980000000, !dbg !69
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float %183) #3, !dbg !70
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float %184) #3, !dbg !70
  %187 = fmul float %185, %176, !dbg !71
  %188 = fmul float %186, %175, !dbg !71
  %189 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !72
  %190 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !72
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %189, i1 %113, i32 0, i1 %113) #3, !dbg !73
  %192 = bitcast i32 %191 to float, !dbg !73
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %114, i32 0, i1 %114) #3, !dbg !73
  %194 = bitcast i32 %193 to float, !dbg !73
  %195 = trunc nsw i32 %21 to i8, !dbg !74
  %.lhs.trunc = add nsw i8 %195, 1, !dbg !74
  %196 = srem i8 %.lhs.trunc, 3, !dbg !74
  %.sext = sext i8 %196 to i32, !dbg !74
  %197 = trunc nsw i32 %22 to i8, !dbg !74
  %.lhs.trunc19 = add nsw i8 %197, 1, !dbg !74
  %198 = srem i8 %.lhs.trunc19, 3, !dbg !74
  %.sext20 = sext i8 %198 to i32, !dbg !74
  %199 = add nsw i32 %43, %.sext, !dbg !75
  %200 = add nsw i32 %44, %.sext20, !dbg !75
  %201 = sext i32 %199 to i64, !dbg !76
  %202 = getelementptr float, ptr addrspace(1) %1, i64 %201, !dbg !76
  %203 = sext i32 %200 to i64, !dbg !76
  %204 = getelementptr float, ptr addrspace(1) %1, i64 %203, !dbg !76
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %202, i1 %113, i32 0, i1 %113) #3, !dbg !77
  %206 = bitcast i32 %205 to float, !dbg !77
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 %114, i32 0, i1 %114) #3, !dbg !77
  %208 = bitcast i32 %207 to float, !dbg !77
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float %183) #3, !dbg !78
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float %184) #3, !dbg !78
  %211 = fmul float %209, %192, !dbg !79
  %212 = fmul float %210, %194, !dbg !79
  %213 = fsub float %187, %211, !dbg !80
  %214 = fsub float %188, %212, !dbg !80
  %215 = select i1 %109, float %213, float 0.000000e+00, !dbg !81
  %216 = select i1 %110, float %214, float 0.000000e+00, !dbg !81
  %217 = select i1 %33, float %107, float %215, !dbg !82
  %218 = select i1 %34, float %108, float %216, !dbg !82
  %219 = sext i32 %12 to i64, !dbg !83
  %220 = getelementptr float, ptr addrspace(1) %4, i64 %219, !dbg !83
  %221 = bitcast float %217 to i32, !dbg !84
  %222 = select i1 %23, i32 %31, i32 %221, !dbg !85
  %223 = bitcast float %218 to i32, !dbg !84
  %224 = select i1 %24, i32 %32, i32 %223, !dbg !85
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %222, i32 %224, ptr addrspace(1) %220, i1 %14) #3, !dbg !84
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cl27brnphirf43rwxzdlvqub4qfeov3fmqqjzhdk45o7g7zowtgg.py", directory: "inductor_cache/l2")
!4 = !{ptr @triton_poi_fused_stack_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_stack_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_stack_12", linkageName: "triton_poi_fused_stack_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 26, scope: !7)
!19 = !DILocation(line: 33, column: 18, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 42, scope: !7)
!22 = !DILocation(line: 34, column: 35, scope: !7)
!23 = !DILocation(line: 38, column: 18, scope: !7)
!24 = !DILocation(line: 39, column: 31, scope: !7)
!25 = !DILocation(line: 39, column: 43, scope: !7)
!26 = !DILocation(line: 39, column: 36, scope: !7)
!27 = !DILocation(line: 40, column: 33, scope: !7)
!28 = !DILocation(line: 40, column: 31, scope: !7)
!29 = !DILocation(line: 40, column: 38, scope: !7)
!30 = !DILocation(line: 41, column: 20, scope: !7)
!31 = !DILocation(line: 42, column: 31, scope: !7)
!32 = !DILocation(line: 42, column: 42, scope: !7)
!33 = !DILocation(line: 43, column: 20, scope: !7)
!34 = !DILocation(line: 44, column: 20, scope: !7)
!35 = !DILocation(line: 45, column: 31, scope: !7)
!36 = !DILocation(line: 45, column: 42, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 48, column: 27, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 50, column: 42, scope: !7)
!44 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 54, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 31, scope: !7)
!50 = !DILocation(line: 57, column: 44, scope: !7)
!51 = !DILocation(line: 57, column: 36, scope: !7)
!52 = !DILocation(line: 58, column: 51, scope: !7)
!53 = !DILocation(line: 58, column: 40, scope: !7)
!54 = !DILocation(line: 58, column: 31, scope: !7)
!55 = !DILocation(line: 58, column: 57, scope: !7)
!56 = !DILocation(line: 59, column: 38, scope: !7)
!57 = !DILocation(line: 60, column: 20, scope: !7)
!58 = !DILocation(line: 61, column: 42, scope: !7)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 63, column: 20, scope: !7)
!61 = !DILocation(line: 64, column: 42, scope: !7)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 66, column: 20, scope: !7)
!64 = !DILocation(line: 67, column: 27, scope: !7)
!65 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !66)
!66 = !DILocation(line: 69, column: 42, scope: !7)
!67 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !66)
!68 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !66)
!69 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !66)
!70 = !DILocation(line: 70, column: 20, scope: !7)
!71 = !DILocation(line: 71, column: 20, scope: !7)
!72 = !DILocation(line: 72, column: 31, scope: !7)
!73 = !DILocation(line: 72, column: 36, scope: !7)
!74 = !DILocation(line: 73, column: 51, scope: !7)
!75 = !DILocation(line: 73, column: 40, scope: !7)
!76 = !DILocation(line: 73, column: 31, scope: !7)
!77 = !DILocation(line: 73, column: 57, scope: !7)
!78 = !DILocation(line: 74, column: 20, scope: !7)
!79 = !DILocation(line: 75, column: 20, scope: !7)
!80 = !DILocation(line: 76, column: 20, scope: !7)
!81 = !DILocation(line: 78, column: 35, scope: !7)
!82 = !DILocation(line: 0, scope: !7)
!83 = !DILocation(line: 81, column: 25, scope: !7)
!84 = !DILocation(line: 81, column: 37, scope: !7)
!85 = !DILocation(line: 80, column: 33, scope: !7)
!86 = !DILocation(line: 81, column: 4, scope: !7)
