#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_98(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<9.99999974E-6> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<4.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<1024> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<1> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<2> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<3> : tensor<256xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked> loc(#loc5)
    %5 = arith.remsi %4, %cst_3 : tensor<256xi32, #blocked> loc(#loc6)
    %6 = arith.muli %4, %cst_4 : tensor<256xi32, #blocked> loc(#loc7)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc8)
    %8 = tt.addptr %7, %6 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc8)
    %9 = tt.load %8 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc9)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc10)
    %11 = tt.addptr %10, %5 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc10)
    %12 = tt.load %11 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc11)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc12)
    %14 = tt.addptr %13, %5 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc12)
    %15 = tt.load %14 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc13)
    %16 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc14)
    %17 = tt.addptr %16, %5 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc14)
    %18 = tt.load %17 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc15)
    %19 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc16)
    %20 = tt.addptr %19, %5 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc16)
    %21 = tt.load %20 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc17)
    %22 = arith.addi %6, %cst_5 : tensor<256xi32, #blocked> loc(#loc18)
    %23 = tt.addptr %7, %22 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc19)
    %24 = tt.load %23 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc20)
    %25 = arith.addi %6, %cst_6 : tensor<256xi32, #blocked> loc(#loc21)
    %26 = tt.addptr %7, %25 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc22)
    %27 = tt.load %26 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc23)
    %28 = arith.addi %6, %cst_7 : tensor<256xi32, #blocked> loc(#loc24)
    %29 = tt.addptr %7, %28 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc25)
    %30 = tt.load %29 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc26)
    %31 = arith.subf %9, %12 : tensor<256xf32, #blocked> loc(#loc27)
    %32 = arith.addf %15, %cst : tensor<256xf32, #blocked> loc(#loc28)
    %33 = tt.extern_elementwise %32 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<256xf32, #blocked>) -> tensor<256xf32, #blocked> loc(#loc29)
    %34 = arith.divf %cst_1, %33 : tensor<256xf32, #blocked> loc(#loc30)
    %35 = arith.mulf %31, %34 : tensor<256xf32, #blocked> loc(#loc31)
    %36 = arith.mulf %35, %18 : tensor<256xf32, #blocked> loc(#loc32)
    %37 = arith.addf %36, %21 : tensor<256xf32, #blocked> loc(#loc33)
    %38 = arith.cmpf ogt, %cst_2, %37 : tensor<256xf32, #blocked> loc(#loc59)
    %39 = arith.select %38, %cst_2, %37 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc60)
    %40 = arith.subf %24, %12 : tensor<256xf32, #blocked> loc(#loc37)
    %41 = arith.mulf %40, %34 : tensor<256xf32, #blocked> loc(#loc38)
    %42 = arith.mulf %41, %18 : tensor<256xf32, #blocked> loc(#loc39)
    %43 = arith.addf %42, %21 : tensor<256xf32, #blocked> loc(#loc40)
    %44 = arith.cmpf ogt, %cst_2, %43 : tensor<256xf32, #blocked> loc(#loc61)
    %45 = arith.select %44, %cst_2, %43 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc62)
    %46 = arith.addf %39, %45 : tensor<256xf32, #blocked> loc(#loc42)
    %47 = arith.subf %27, %12 : tensor<256xf32, #blocked> loc(#loc43)
    %48 = arith.mulf %47, %34 : tensor<256xf32, #blocked> loc(#loc44)
    %49 = arith.mulf %48, %18 : tensor<256xf32, #blocked> loc(#loc45)
    %50 = arith.addf %49, %21 : tensor<256xf32, #blocked> loc(#loc46)
    %51 = arith.cmpf ogt, %cst_2, %50 : tensor<256xf32, #blocked> loc(#loc63)
    %52 = arith.select %51, %cst_2, %50 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc64)
    %53 = arith.addf %46, %52 : tensor<256xf32, #blocked> loc(#loc48)
    %54 = arith.subf %30, %12 : tensor<256xf32, #blocked> loc(#loc49)
    %55 = arith.mulf %54, %34 : tensor<256xf32, #blocked> loc(#loc50)
    %56 = arith.mulf %55, %18 : tensor<256xf32, #blocked> loc(#loc51)
    %57 = arith.addf %56, %21 : tensor<256xf32, #blocked> loc(#loc52)
    %58 = arith.cmpf ogt, %cst_2, %57 : tensor<256xf32, #blocked> loc(#loc65)
    %59 = arith.select %58, %cst_2, %57 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc66)
    %60 = arith.addf %53, %59 : tensor<256xf32, #blocked> loc(#loc54)
    %61 = arith.divf %60, %cst_0 : tensor<256xf32, #blocked> loc(#loc55)
    %62 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc56)
    %63 = tt.addptr %62, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc56)
    tt.store %63, %61 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc57)
    tt.return loc(#loc58)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":21:28)
#loc3 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":21:33)
#loc4 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":22:36)
#loc5 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":22:23)
#loc6 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":25:19)
#loc7 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":26:32)
#loc8 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":26:30)
#loc9 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":26:37)
#loc10 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":27:30)
#loc11 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":27:35)
#loc12 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":28:30)
#loc13 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":28:35)
#loc14 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":29:31)
#loc15 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":29:36)
#loc16 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":30:31)
#loc17 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":30:36)
#loc18 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":31:35)
#loc19 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":31:31)
#loc20 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":31:42)
#loc21 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":32:35)
#loc22 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":32:31)
#loc23 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":32:42)
#loc24 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":33:35)
#loc25 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":33:31)
#loc26 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":33:42)
#loc27 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":34:18)
#loc28 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":36:18)
#loc29 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":37:26)
#loc30 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":39:18)
#loc31 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":42:19)
#loc32 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":43:20)
#loc33 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":44:20)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc35 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":46:42)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc37 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":47:20)
#loc38 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":48:20)
#loc39 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":49:20)
#loc40 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":50:20)
#loc41 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":51:42)
#loc42 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":52:20)
#loc43 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":53:20)
#loc44 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":54:20)
#loc45 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":55:20)
#loc46 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":56:20)
#loc47 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":57:42)
#loc48 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":58:20)
#loc49 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":59:20)
#loc50 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":60:20)
#loc51 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":61:20)
#loc52 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":62:20)
#loc53 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":63:42)
#loc54 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":64:20)
#loc55 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":66:20)
#loc56 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":67:25)
#loc57 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":67:37)
#loc58 = loc("inductor_cache/x6/cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py":67:4)
#loc59 = loc(callsite(#loc34 at #loc35))
#loc60 = loc(callsite(#loc36 at #loc35))
#loc61 = loc(callsite(#loc34 at #loc41))
#loc62 = loc(callsite(#loc36 at #loc41))
#loc63 = loc(callsite(#loc34 at #loc47))
#loc64 = loc(callsite(#loc36 at #loc47))
#loc65 = loc(callsite(#loc34 at #loc53))
#loc66 = loc(callsite(#loc36 at #loc53))
