; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_98(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = srem i32 %13, 1024, !dbg !14
  %15 = shl i32 %13, 2, !dbg !15
  %16 = or disjoint i32 %15, 4, !dbg !15
  %17 = sext i32 %15 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = sext i32 %16 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !17
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !17
  %23 = sext i32 %14 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !18
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !20
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !21
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !21
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !21
  %30 = bitcast i32 %28 to float, !dbg !21
  %31 = bitcast i32 %29 to float, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !22
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !24
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !25
  %36 = or disjoint i32 %15, 1, !dbg !26
  %37 = or disjoint i32 %15, 5, !dbg !26
  %38 = sext i32 %36 to i64, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !27
  %40 = sext i32 %37 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !27
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !28
  %44 = or disjoint i32 %15, 2, !dbg !29
  %45 = or disjoint i32 %15, 6, !dbg !29
  %46 = sext i32 %44 to i64, !dbg !30
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !30
  %48 = sext i32 %45 to i64, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !30
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !31
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !31
  %52 = or disjoint i32 %15, 3, !dbg !32
  %53 = or disjoint i32 %15, 7, !dbg !32
  %54 = sext i32 %52 to i64, !dbg !33
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !33
  %56 = sext i32 %53 to i64, !dbg !33
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !33
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !34
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !34
  %60 = fadd float %30, 0x3EE4F8B580000000, !dbg !35
  %61 = fadd float %31, 0x3EE4F8B580000000, !dbg !35
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %62, 0, !dbg !36
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %63, 0, !dbg !36
  br i1 %.not.i, label %69, label %64, !dbg !36

64:                                               ; preds = %7
  br i1 %.not1.i, label %67, label %65, !dbg !36

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

69:                                               ; preds = %7
  br i1 %.not1.i, label %72, label %70, !dbg !36

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !36
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %74, 0, !dbg !36
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %75, 0, !dbg !36
  br i1 %.not.i1, label %81, label %76, !dbg !36

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !36

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %84, label %82, !dbg !36

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %77, %79, %82, %84
  %.0.i3 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !36
  %86 = insertelement <8 x i32> poison, i32 %59, i64 0, !dbg !34
  %87 = insertelement <8 x i32> %86, i32 %58, i64 1, !dbg !34
  %88 = insertelement <8 x i32> %87, i32 %51, i64 2, !dbg !34
  %89 = insertelement <8 x i32> %88, i32 %50, i64 3, !dbg !34
  %90 = insertelement <8 x i32> %89, i32 %43, i64 4, !dbg !34
  %91 = insertelement <8 x i32> %90, i32 %42, i64 5, !dbg !34
  %92 = insertelement <8 x i32> %91, i32 %22, i64 6, !dbg !34
  %93 = insertelement <8 x i32> %92, i32 %21, i64 7, !dbg !34
  %94 = bitcast <8 x i32> %93 to <8 x float>, !dbg !34
  %95 = extractvalue { i32, i32 } %25, 1, !dbg !19
  %96 = extractvalue { i32, i32 } %25, 0, !dbg !19
  %97 = extractvalue { i32, i32 } %35, 1, !dbg !25
  %98 = extractvalue { i32, i32 } %35, 0, !dbg !25
  %99 = extractvalue { i32, i32 } %33, 1, !dbg !23
  %100 = extractvalue { i32, i32 } %33, 0, !dbg !23
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %103 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !19
  %104 = insertelement <2 x i32> %103, i32 %96, i64 1, !dbg !19
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !19
  %106 = shufflevector <2 x float> %105, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !19
  %107 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !25
  %108 = insertelement <2 x i32> %107, i32 %98, i64 1, !dbg !25
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !25
  %110 = shufflevector <2 x float> %109, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !25
  %111 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !23
  %112 = insertelement <2 x i32> %111, i32 %100, i64 1, !dbg !23
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !23
  %114 = shufflevector <2 x float> %113, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !23
  %115 = fsub <8 x float> %94, %106, !dbg !38
  %116 = insertelement <8 x float> poison, float %102, i64 0, !dbg !39
  %117 = insertelement <8 x float> %116, float %101, i64 1, !dbg !39
  %118 = shufflevector <8 x float> %117, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !39
  %119 = fmul <8 x float> %115, %118, !dbg !39
  %120 = fmul <8 x float> %119, %114, !dbg !40
  %121 = fadd <8 x float> %120, %110, !dbg !41
  %122 = fcmp olt <8 x float> %121, zeroinitializer, !dbg !42
  %123 = extractelement <8 x i1> %122, i64 7, !dbg !46
  %124 = extractelement <8 x float> %121, i64 7, !dbg !46
  %125 = select i1 %123, float 0.000000e+00, float %124, !dbg !46
  %126 = extractelement <8 x i1> %122, i64 6, !dbg !46
  %127 = extractelement <8 x float> %121, i64 6, !dbg !46
  %128 = select i1 %126, float 0.000000e+00, float %127, !dbg !46
  %129 = extractelement <8 x i1> %122, i64 5, !dbg !48
  %130 = extractelement <8 x float> %121, i64 5, !dbg !48
  %131 = select i1 %129, float 0.000000e+00, float %130, !dbg !48
  %132 = extractelement <8 x i1> %122, i64 4, !dbg !48
  %133 = extractelement <8 x float> %121, i64 4, !dbg !48
  %134 = select i1 %132, float 0.000000e+00, float %133, !dbg !48
  %135 = fadd float %125, %131, !dbg !50
  %136 = fadd float %128, %134, !dbg !50
  %137 = extractelement <8 x i1> %122, i64 3, !dbg !51
  %138 = extractelement <8 x float> %121, i64 3, !dbg !51
  %139 = select i1 %137, float 0.000000e+00, float %138, !dbg !51
  %140 = extractelement <8 x i1> %122, i64 2, !dbg !51
  %141 = extractelement <8 x float> %121, i64 2, !dbg !51
  %142 = select i1 %140, float 0.000000e+00, float %141, !dbg !51
  %143 = fadd float %139, %135, !dbg !53
  %144 = fadd float %142, %136, !dbg !53
  %145 = extractelement <8 x i1> %122, i64 1, !dbg !54
  %146 = extractelement <8 x float> %121, i64 1, !dbg !54
  %147 = select i1 %145, float 0.000000e+00, float %146, !dbg !54
  %148 = extractelement <8 x i1> %122, i64 0, !dbg !54
  %149 = extractelement <8 x float> %121, i64 0, !dbg !54
  %150 = select i1 %148, float 0.000000e+00, float %149, !dbg !54
  %151 = fadd float %147, %143, !dbg !55
  %152 = fadd float %150, %144, !dbg !55
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 4.000000e+00) #3, !dbg !56
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float 4.000000e+00) #3, !dbg !56
  %155 = sext i32 %13 to i64, !dbg !57
  %156 = getelementptr float, ptr addrspace(1) %5, i64 %155, !dbg !57
  %157 = bitcast float %153 to i32, !dbg !58
  %158 = bitcast float %154 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %157, i32 %158, ptr addrspace(1) %156, i1 true) #3, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cx6tnvh3sb5ubdnmes4dcukk3ivb6isswdn2y2ftt47ymko2ci3t.py", directory: "inductor_cache/x6")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_98, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_98, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_98", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_98", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 32, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 37, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 42, scope: !7)
!29 = !DILocation(line: 32, column: 35, scope: !7)
!30 = !DILocation(line: 32, column: 31, scope: !7)
!31 = !DILocation(line: 32, column: 42, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 33, column: 31, scope: !7)
!34 = !DILocation(line: 33, column: 42, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 26, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 59, column: 20, scope: !7)
!39 = !DILocation(line: 60, column: 20, scope: !7)
!40 = !DILocation(line: 61, column: 20, scope: !7)
!41 = !DILocation(line: 62, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 63, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !47)
!47 = !DILocation(line: 46, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !49)
!49 = !DILocation(line: 51, column: 42, scope: !7)
!50 = !DILocation(line: 52, column: 20, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !52)
!52 = !DILocation(line: 57, column: 42, scope: !7)
!53 = !DILocation(line: 58, column: 20, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!55 = !DILocation(line: 64, column: 20, scope: !7)
!56 = !DILocation(line: 66, column: 20, scope: !7)
!57 = !DILocation(line: 67, column: 25, scope: !7)
!58 = !DILocation(line: 67, column: 37, scope: !7)
!59 = !DILocation(line: 67, column: 4, scope: !7)
