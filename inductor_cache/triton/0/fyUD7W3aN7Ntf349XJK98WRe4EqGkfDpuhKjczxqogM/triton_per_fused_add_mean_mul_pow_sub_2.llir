; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_mean_mul_pow_sub_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = and i32 %6, 31, !dbg !10
  %8 = lshr i32 %6, 5, !dbg !10
  %9 = and i32 %6, 63, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !11
  %12 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %11, i1 true) #3, !dbg !12
  %13 = bitcast i32 %12 to float, !dbg !12
  %14 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !13
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #3, !dbg !14
  %16 = bitcast i32 %15 to float, !dbg !14
  %17 = getelementptr float, ptr addrspace(1) %3, i64 %10, !dbg !15
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !16
  %19 = bitcast i32 %18 to float, !dbg !16
  %20 = fmul float %13, %13, !dbg !17
  %21 = bitcast float %20 to i32, !dbg !18
  %22 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %21, i32 16, i32 31), !dbg !18
  %23 = bitcast i32 %22 to float, !dbg !18
  %24 = fadd float %20, %23, !dbg !22
  %25 = bitcast float %24 to i32, !dbg !18
  %26 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %25, i32 8, i32 31), !dbg !18
  %27 = bitcast i32 %26 to float, !dbg !18
  %28 = fadd float %24, %27, !dbg !22
  %29 = bitcast float %28 to i32, !dbg !18
  %30 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %29, i32 4, i32 31), !dbg !18
  %31 = bitcast i32 %30 to float, !dbg !18
  %32 = fadd float %28, %31, !dbg !22
  %33 = bitcast float %32 to i32, !dbg !18
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 2, i32 31), !dbg !18
  %35 = bitcast i32 %34 to float, !dbg !18
  %36 = fadd float %32, %35, !dbg !22
  %37 = bitcast float %36 to i32, !dbg !18
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 1, i32 31), !dbg !18
  %39 = bitcast i32 %38 to float, !dbg !18
  %40 = fadd float %36, %39, !dbg !22
  %41 = icmp eq i32 %7, 0, !dbg !18
  %42 = and i32 %8, 1, !dbg !18
  %43 = zext nneg i32 %42 to i64, !dbg !18
  %44 = getelementptr float, ptr addrspace(3) @global_smem, i64 %43, !dbg !18
  %45 = bitcast float %40 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %44, <1 x i32> %45, i1 %41) #3, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %46 = icmp slt i32 %6, 2, !dbg !18
  %47 = sext i32 %6 to i64, !dbg !18
  %48 = getelementptr float, ptr addrspace(3) @global_smem, i64 %47, !dbg !18
  %49 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %48, i1 %46) #3, !dbg !18
  %50 = bitcast i32 %49 to float, !dbg !18
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 1, i32 31), !dbg !18
  %52 = bitcast i32 %51 to float, !dbg !18
  %53 = fadd float %50, %52, !dbg !22
  %54 = and i32 %6, 1, !dbg !18
  %55 = icmp eq i32 %54, 0, !dbg !18
  %56 = and i1 %46, %55, !dbg !18
  %57 = bitcast float %53 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %57, i1 %56) #3, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %58 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !18
  %59 = fmul float %16, %16, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %60 = bitcast float %59 to i32, !dbg !25
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 16, i32 31), !dbg !25
  %62 = bitcast i32 %61 to float, !dbg !25
  %63 = fadd float %59, %62, !dbg !27
  %64 = bitcast float %63 to i32, !dbg !25
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 8, i32 31), !dbg !25
  %66 = bitcast i32 %65 to float, !dbg !25
  %67 = fadd float %63, %66, !dbg !27
  %68 = bitcast float %67 to i32, !dbg !25
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 4, i32 31), !dbg !25
  %70 = bitcast i32 %69 to float, !dbg !25
  %71 = fadd float %67, %70, !dbg !27
  %72 = bitcast float %71 to i32, !dbg !25
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 2, i32 31), !dbg !25
  %74 = bitcast i32 %73 to float, !dbg !25
  %75 = fadd float %71, %74, !dbg !27
  %76 = bitcast float %75 to i32, !dbg !25
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 1, i32 31), !dbg !25
  %78 = bitcast i32 %77 to float, !dbg !25
  %79 = fadd float %75, %78, !dbg !27
  %80 = bitcast float %79 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %44, <1 x i32> %80, i1 %41) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %81 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %48, i1 %46) #3, !dbg !25
  %82 = bitcast i32 %81 to float, !dbg !25
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 1, i32 31), !dbg !25
  %84 = bitcast i32 %83 to float, !dbg !25
  %85 = fadd float %82, %84, !dbg !27
  %86 = bitcast float %85 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %86, i1 %56) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %87 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !25
  %88 = fmul float %19, %19, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %89 = bitcast float %88 to i32, !dbg !29
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 16, i32 31), !dbg !29
  %91 = bitcast i32 %90 to float, !dbg !29
  %92 = fadd float %88, %91, !dbg !31
  %93 = bitcast float %92 to i32, !dbg !29
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 8, i32 31), !dbg !29
  %95 = bitcast i32 %94 to float, !dbg !29
  %96 = fadd float %92, %95, !dbg !31
  %97 = bitcast float %96 to i32, !dbg !29
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 4, i32 31), !dbg !29
  %99 = bitcast i32 %98 to float, !dbg !29
  %100 = fadd float %96, %99, !dbg !31
  %101 = bitcast float %100 to i32, !dbg !29
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 2, i32 31), !dbg !29
  %103 = bitcast i32 %102 to float, !dbg !29
  %104 = fadd float %100, %103, !dbg !31
  %105 = bitcast float %104 to i32, !dbg !29
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 1, i32 31), !dbg !29
  %107 = bitcast i32 %106 to float, !dbg !29
  %108 = fadd float %104, %107, !dbg !31
  %109 = bitcast float %108 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %44, <1 x i32> %109, i1 %41) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %110 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %48, i1 %46) #3, !dbg !29
  %111 = bitcast i32 %110 to float, !dbg !29
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !29
  %113 = bitcast i32 %112 to float, !dbg !29
  %114 = fadd float %111, %113, !dbg !31
  %115 = bitcast float %114 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %115, i1 %56) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %116 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float 6.400000e+01) #3, !dbg !32
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float 6.400000e+01) #3, !dbg !33
  %119 = fadd float %117, %118, !dbg !34
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float 6.400000e+01) #3, !dbg !35
  %121 = fmul float %120, 2.000000e+00, !dbg !36
  %122 = fsub float %119, %121, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %123 = icmp eq i32 %9, 0, !dbg !39
  %124 = bitcast float %122 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %0, i1 %123) #3, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceoah26evhyq5lqfrtogn2vwpiqt45g2nscwtxskm6xmphzvxahl.py", directory: "inductor_cache/eo")
!4 = !{ptr @triton_per_fused_add_mean_mul_pow_sub_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_mul_pow_sub_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_mul_pow_sub_2", linkageName: "triton_per_fused_add_mean_mul_pow_sub_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 30, scope: !7)
!12 = !DILocation(line: 30, column: 35, scope: !7)
!13 = !DILocation(line: 31, column: 30, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 32, column: 31, scope: !7)
!16 = !DILocation(line: 32, column: 36, scope: !7)
!17 = !DILocation(line: 33, column: 18, scope: !7)
!18 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!21 = !DILocation(line: 35, column: 24, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !21)
!23 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!24 = !DILocation(line: 36, column: 18, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !26)
!26 = !DILocation(line: 38, column: 24, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!28 = !DILocation(line: 39, column: 20, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !30)
!30 = !DILocation(line: 41, column: 26, scope: !7)
!31 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !30)
!32 = !DILocation(line: 43, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 19, scope: !7)
!34 = !DILocation(line: 45, column: 20, scope: !7)
!35 = !DILocation(line: 46, column: 20, scope: !7)
!36 = !DILocation(line: 48, column: 20, scope: !7)
!37 = !DILocation(line: 49, column: 20, scope: !7)
!38 = !DILocation(line: 50, column: 4, scope: !7)
!39 = !DILocation(line: 51, column: 71, scope: !7)
!40 = !DILocation(line: 51, column: 4, scope: !7)
