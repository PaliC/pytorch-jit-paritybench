; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_reflection_pad2d_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 12, !dbg !12
  %10 = lshr i32 %7, 4, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = or disjoint i32 %13, 8, !dbg !13
  %15 = icmp slt i32 %12, 16, !dbg !14
  %16 = icmp slt i32 %13, 16, !dbg !14
  %17 = icmp slt i32 %14, 16, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 6, !dbg !16
  %20 = lshr i32 %7, 2, !dbg !17
  %21 = and i32 %20, 31, !dbg !17
  %22 = and i32 %8, 60, !dbg !17
  %23 = or disjoint i32 %19, %21, !dbg !18
  %24 = or disjoint i32 %23, 32, !dbg !18
  %25 = or disjoint i32 %19, %22, !dbg !18
  %26 = icmp slt i32 %23, 64, !dbg !19
  %27 = icmp slt i32 %24, 64, !dbg !19
  %28 = icmp slt i32 %25, 64, !dbg !19
  %29 = shl i32 %23, 2, !dbg !20
  %30 = shl i32 %24, 2, !dbg !20
  %31 = shl i32 %12, 6, !dbg !21
  %32 = add i32 %29, %31, !dbg !22
  %33 = add i32 %31, %30, !dbg !22
  %34 = sext i32 %32 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = sext i32 %33 to i64, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = and i1 %15, %26, !dbg !24
  %39 = and i1 %27, %15, !dbg !24
  %40 = and i1 %16, %28, !dbg !24
  %41 = and i1 %17, %28, !dbg !24
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %38) #2, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !25
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %39) #2, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !25
  %52 = shl i32 %13, 6, !dbg !26
  %53 = shl i32 %14, 6, !dbg !26
  %54 = add i32 %25, %52, !dbg !27
  %55 = add i32 %25, %53, !dbg !27
  %56 = sext i32 %54 to i64, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !28
  %58 = sext i32 %55 to i64, !dbg !28
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !28
  %60 = shl i32 %7, 8, !dbg !29
  %61 = and i32 %60, 768, !dbg !29
  %62 = or disjoint i32 %61, %21, !dbg !29
  %63 = and i32 %8, 508, !dbg !29
  %64 = lshr exact i32 %61, 6, !dbg !29
  %65 = add nuw nsw i32 %64, %62, !dbg !29
  %66 = zext nneg i32 %65 to i64, !dbg !29
  %67 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %66, !dbg !29
  %68 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #2, !dbg !29
  %69 = or disjoint i32 %62, 64, !dbg !29
  %70 = lshr i32 %69, 6, !dbg !29
  %71 = add nuw nsw i32 %70, %69, !dbg !29
  %72 = zext nneg i32 %71 to i64, !dbg !29
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %72, !dbg !29
  %74 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #2, !dbg !29
  %75 = or disjoint i32 %62, 128, !dbg !29
  %76 = lshr i32 %75, 6, !dbg !29
  %77 = add nuw nsw i32 %76, %75, !dbg !29
  %78 = zext nneg i32 %77 to i64, !dbg !29
  %79 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %78, !dbg !29
  %80 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #2, !dbg !29
  %81 = or disjoint i32 %62, 192, !dbg !29
  %82 = lshr i32 %81, 6, !dbg !29
  %83 = add nuw nsw i32 %82, %81, !dbg !29
  %84 = zext nneg i32 %83 to i64, !dbg !29
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %84, !dbg !29
  %86 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #2, !dbg !29
  %87 = or disjoint i32 %62, 32, !dbg !29
  %88 = add nuw nsw i32 %87, %64, !dbg !29
  %89 = zext nneg i32 %88 to i64, !dbg !29
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %89, !dbg !29
  %91 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #2, !dbg !29
  %92 = or disjoint i32 %62, 96, !dbg !29
  %93 = lshr i32 %92, 6, !dbg !29
  %94 = add nuw nsw i32 %93, %92, !dbg !29
  %95 = zext nneg i32 %94 to i64, !dbg !29
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %95, !dbg !29
  %97 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #2, !dbg !29
  %98 = or disjoint i32 %62, 160, !dbg !29
  %99 = lshr i32 %98, 6, !dbg !29
  %100 = add nuw nsw i32 %99, %98, !dbg !29
  %101 = zext nneg i32 %100 to i64, !dbg !29
  %102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %101, !dbg !29
  %103 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !29
  %104 = or disjoint i32 %62, 224, !dbg !29
  %105 = lshr i32 %104, 6, !dbg !29
  %106 = add nuw nsw i32 %105, %104, !dbg !29
  %107 = zext nneg i32 %106 to i64, !dbg !29
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %107, !dbg !29
  %109 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %110 = lshr i32 %63, 6, !dbg !29
  %111 = add nuw nsw i32 %110, %63, !dbg !29
  %112 = zext nneg i32 %111 to i64, !dbg !29
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %112, !dbg !29
  %114 = load i32, ptr addrspace(3) %113, align 4, !dbg !29
  %115 = or disjoint i32 %63, 1, !dbg !29
  %116 = add nuw nsw i32 %115, %110, !dbg !29
  %117 = zext nneg i32 %116 to i64, !dbg !29
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %117, !dbg !29
  %119 = load i32, ptr addrspace(3) %118, align 4, !dbg !29
  %120 = or disjoint i32 %63, 2, !dbg !29
  %121 = add nuw nsw i32 %120, %110, !dbg !29
  %122 = zext nneg i32 %121 to i64, !dbg !29
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %122, !dbg !29
  %124 = load i32, ptr addrspace(3) %123, align 4, !dbg !29
  %125 = or disjoint i32 %63, 3, !dbg !29
  %126 = add nuw nsw i32 %125, %110, !dbg !29
  %127 = zext nneg i32 %126 to i64, !dbg !29
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %127, !dbg !29
  %129 = load i32, ptr addrspace(3) %128, align 4, !dbg !29
  %130 = or disjoint i32 %63, 512, !dbg !29
  %131 = lshr i32 %130, 6, !dbg !29
  %132 = add nuw nsw i32 %131, %130, !dbg !29
  %133 = zext nneg i32 %132 to i64, !dbg !29
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %133, !dbg !29
  %135 = load i32, ptr addrspace(3) %134, align 4, !dbg !29
  %136 = or disjoint i32 %63, 513, !dbg !29
  %137 = lshr i32 %136, 6, !dbg !29
  %138 = add nuw nsw i32 %137, %136, !dbg !29
  %139 = zext nneg i32 %138 to i64, !dbg !29
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %139, !dbg !29
  %141 = load i32, ptr addrspace(3) %140, align 4, !dbg !29
  %142 = or disjoint i32 %63, 514, !dbg !29
  %143 = lshr i32 %142, 6, !dbg !29
  %144 = add nuw nsw i32 %143, %142, !dbg !29
  %145 = zext nneg i32 %144 to i64, !dbg !29
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %145, !dbg !29
  %147 = load i32, ptr addrspace(3) %146, align 4, !dbg !29
  %148 = or disjoint i32 %63, 515, !dbg !29
  %149 = lshr i32 %148, 6, !dbg !29
  %150 = add nuw nsw i32 %149, %148, !dbg !29
  %151 = zext nneg i32 %150 to i64, !dbg !29
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %151, !dbg !29
  %153 = load i32, ptr addrspace(3) %152, align 4, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %114, i32 %119, i32 %124, i32 %129, ptr addrspace(1) %57, i1 %40) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %135, i32 %141, i32 %147, i32 %153, ptr addrspace(1) %59, i1 %41) #2, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c52kl3issvuff3nhvohz3rkkcdfecnrrmzzbsgrj5hlxosype4p3.py", directory: "inductor_cache/52")
!4 = !{ptr @triton_poi_fused_convolution_reflection_pad2d_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_reflection_pad2d_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_reflection_pad2d_3", linkageName: "triton_poi_fused_convolution_reflection_pad2d_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 37, scope: !7)
!21 = !DILocation(line: 32, column: 46, scope: !7)
!22 = !DILocation(line: 32, column: 42, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 59, scope: !7)
!25 = !DILocation(line: 32, column: 51, scope: !7)
!26 = !DILocation(line: 33, column: 33, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 25, scope: !7)
!29 = !DILocation(line: 33, column: 44, scope: !7)
!30 = !DILocation(line: 33, column: 4, scope: !7)
