; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 1, !dbg !13
  %18 = or disjoint i32 %16, 2, !dbg !13
  %19 = or disjoint i32 %16, 3, !dbg !13
  %20 = or disjoint i32 %16, 512, !dbg !13
  %21 = or disjoint i32 %16, 513, !dbg !13
  %22 = or disjoint i32 %16, 514, !dbg !13
  %23 = or disjoint i32 %16, 515, !dbg !13
  %24 = icmp slt i32 %16, 100352, !dbg !14
  %25 = icmp slt i32 %20, 100352, !dbg !14
  %26 = sdiv i32 %16, 49, !dbg !15
  %27 = sdiv i32 %17, 49, !dbg !15
  %28 = sdiv i32 %18, 49, !dbg !15
  %29 = sdiv i32 %19, 49, !dbg !15
  %30 = sdiv i32 %20, 49, !dbg !15
  %31 = sdiv i32 %21, 49, !dbg !15
  %32 = sdiv i32 %22, 49, !dbg !15
  %33 = sdiv i32 %23, 49, !dbg !15
  %34 = srem i32 %26, 512, !dbg !16
  %35 = srem i32 %27, 512, !dbg !16
  %36 = srem i32 %28, 512, !dbg !16
  %37 = srem i32 %29, 512, !dbg !16
  %38 = srem i32 %30, 512, !dbg !16
  %39 = srem i32 %31, 512, !dbg !16
  %40 = srem i32 %32, 512, !dbg !16
  %41 = srem i32 %33, 512, !dbg !16
  %42 = sext i32 %16 to i64, !dbg !17
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !17
  %44 = sext i32 %20 to i64, !dbg !17
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !17
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %24) #3, !dbg !18
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %25) #3, !dbg !18
  %48 = sext i32 %34 to i64, !dbg !19
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !19
  %50 = sext i32 %35 to i64, !dbg !19
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !19
  %52 = sext i32 %36 to i64, !dbg !19
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !19
  %54 = sext i32 %37 to i64, !dbg !19
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !19
  %56 = sext i32 %38 to i64, !dbg !19
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !19
  %58 = sext i32 %39 to i64, !dbg !19
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !19
  %60 = sext i32 %40 to i64, !dbg !19
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !19
  %62 = sext i32 %41 to i64, !dbg !19
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !19
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %24) #3, !dbg !20
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %24) #3, !dbg !20
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %24) #3, !dbg !20
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %24) #3, !dbg !20
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %25) #3, !dbg !20
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %25) #3, !dbg !20
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %25) #3, !dbg !20
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %25) #3, !dbg !20
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !21
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !21
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !21
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !21
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !21
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !21
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !21
  %79 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !21
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %24) #3, !dbg !22
  %81 = bitcast i32 %80 to float, !dbg !22
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %24) #3, !dbg !22
  %83 = bitcast i32 %82 to float, !dbg !22
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %24) #3, !dbg !22
  %85 = bitcast i32 %84 to float, !dbg !22
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %24) #3, !dbg !22
  %87 = bitcast i32 %86 to float, !dbg !22
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %25) #3, !dbg !22
  %89 = bitcast i32 %88 to float, !dbg !22
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %25) #3, !dbg !22
  %91 = bitcast i32 %90 to float, !dbg !22
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %25) #3, !dbg !22
  %93 = bitcast i32 %92 to float, !dbg !22
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %25) #3, !dbg !22
  %95 = bitcast i32 %94 to float, !dbg !22
  %96 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !23
  %97 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !23
  %98 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !23
  %99 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !23
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !23
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !23
  %102 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !23
  %103 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !23
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %24) #3, !dbg !24
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %24) #3, !dbg !24
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %24) #3, !dbg !24
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %24) #3, !dbg !24
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %25) #3, !dbg !24
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %25) #3, !dbg !24
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %25) #3, !dbg !24
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %25) #3, !dbg !24
  %112 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !25
  %113 = getelementptr float, ptr addrspace(1) %4, i64 %50, !dbg !25
  %114 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !25
  %115 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !25
  %116 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !25
  %117 = getelementptr float, ptr addrspace(1) %4, i64 %58, !dbg !25
  %118 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !25
  %119 = getelementptr float, ptr addrspace(1) %4, i64 %62, !dbg !25
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %24) #3, !dbg !26
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %24) #3, !dbg !26
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %24) #3, !dbg !26
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %24) #3, !dbg !26
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %25) #3, !dbg !26
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %25) #3, !dbg !26
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %25) #3, !dbg !26
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %25) #3, !dbg !26
  %128 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !27
  %129 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !27
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %128, i1 %24) #3, !dbg !28
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %129, i1 %25) #3, !dbg !28
  %132 = getelementptr float, ptr addrspace(1) %6, i64 %48, !dbg !29
  %133 = getelementptr float, ptr addrspace(1) %6, i64 %50, !dbg !29
  %134 = getelementptr float, ptr addrspace(1) %6, i64 %52, !dbg !29
  %135 = getelementptr float, ptr addrspace(1) %6, i64 %54, !dbg !29
  %136 = getelementptr float, ptr addrspace(1) %6, i64 %56, !dbg !29
  %137 = getelementptr float, ptr addrspace(1) %6, i64 %58, !dbg !29
  %138 = getelementptr float, ptr addrspace(1) %6, i64 %60, !dbg !29
  %139 = getelementptr float, ptr addrspace(1) %6, i64 %62, !dbg !29
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %24) #3, !dbg !30
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %24) #3, !dbg !30
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %24) #3, !dbg !30
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %24) #3, !dbg !30
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %25) #3, !dbg !30
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %25) #3, !dbg !30
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %25) #3, !dbg !30
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %25) #3, !dbg !30
  %148 = fadd float %81, 0x3EE4F8B580000000, !dbg !31
  %149 = fadd float %83, 0x3EE4F8B580000000, !dbg !31
  %150 = fadd float %85, 0x3EE4F8B580000000, !dbg !31
  %151 = fadd float %87, 0x3EE4F8B580000000, !dbg !31
  %152 = fadd float %89, 0x3EE4F8B580000000, !dbg !31
  %153 = fadd float %91, 0x3EE4F8B580000000, !dbg !31
  %154 = fadd float %93, 0x3EE4F8B580000000, !dbg !31
  %155 = fadd float %95, 0x3EE4F8B580000000, !dbg !31
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i = icmp eq i32 %156, 0, !dbg !32
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i = icmp eq i32 %157, 0, !dbg !32
  br i1 %.not.i, label %163, label %158, !dbg !32

158:                                              ; preds = %10
  br i1 %.not1.i, label %161, label %159, !dbg !32

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %148) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %148) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

163:                                              ; preds = %10
  br i1 %.not1.i, label %166, label %164, !dbg !32

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %148) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %148) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %159, %161, %164, %166
  %.0.i = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !32
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i1 = icmp eq i32 %168, 0, !dbg !32
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i4 = icmp eq i32 %169, 0, !dbg !32
  br i1 %.not.i1, label %175, label %170, !dbg !32

170:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %173, label %171, !dbg !32

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %149) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %149) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

175:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %178, label %176, !dbg !32

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.f(float %149) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.f(float %149) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

__nv_sqrtf.exit5:                                 ; preds = %171, %173, %176, %178
  %.0.i3 = phi float [ %172, %171 ], [ %174, %173 ], [ %177, %176 ], [ %179, %178 ], !dbg !32
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i6 = icmp eq i32 %180, 0, !dbg !32
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i9 = icmp eq i32 %181, 0, !dbg !32
  br i1 %.not.i6, label %187, label %182, !dbg !32

182:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %185, label %183, !dbg !32

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %150) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %150) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

187:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %190, label %188, !dbg !32

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.f(float %150) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.f(float %150) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

__nv_sqrtf.exit10:                                ; preds = %183, %185, %188, %190
  %.0.i8 = phi float [ %184, %183 ], [ %186, %185 ], [ %189, %188 ], [ %191, %190 ], !dbg !32
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i11 = icmp eq i32 %192, 0, !dbg !32
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i14 = icmp eq i32 %193, 0, !dbg !32
  br i1 %.not.i11, label %199, label %194, !dbg !32

194:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %197, label %195, !dbg !32

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %151) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %151) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

199:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %202, label %200, !dbg !32

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.f(float %151) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.f(float %151) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

__nv_sqrtf.exit15:                                ; preds = %195, %197, %200, %202
  %.0.i13 = phi float [ %196, %195 ], [ %198, %197 ], [ %201, %200 ], [ %203, %202 ], !dbg !32
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i16 = icmp eq i32 %204, 0, !dbg !32
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i19 = icmp eq i32 %205, 0, !dbg !32
  br i1 %.not.i16, label %211, label %206, !dbg !32

206:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %209, label %207, !dbg !32

207:                                              ; preds = %206
  %208 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %152) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

209:                                              ; preds = %206
  %210 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %152) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

211:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %214, label %212, !dbg !32

212:                                              ; preds = %211
  %213 = tail call float @llvm.nvvm.sqrt.rn.f(float %152) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

214:                                              ; preds = %211
  %215 = tail call float @llvm.nvvm.sqrt.approx.f(float %152) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

__nv_sqrtf.exit20:                                ; preds = %207, %209, %212, %214
  %.0.i18 = phi float [ %208, %207 ], [ %210, %209 ], [ %213, %212 ], [ %215, %214 ], !dbg !32
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i21 = icmp eq i32 %216, 0, !dbg !32
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i24 = icmp eq i32 %217, 0, !dbg !32
  br i1 %.not.i21, label %223, label %218, !dbg !32

218:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %221, label %219, !dbg !32

219:                                              ; preds = %218
  %220 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %153) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

221:                                              ; preds = %218
  %222 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %153) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

223:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %226, label %224, !dbg !32

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.f(float %153) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.f(float %153) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

__nv_sqrtf.exit25:                                ; preds = %219, %221, %224, %226
  %.0.i23 = phi float [ %220, %219 ], [ %222, %221 ], [ %225, %224 ], [ %227, %226 ], !dbg !32
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i26 = icmp eq i32 %228, 0, !dbg !32
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i29 = icmp eq i32 %229, 0, !dbg !32
  br i1 %.not.i26, label %235, label %230, !dbg !32

230:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %233, label %231, !dbg !32

231:                                              ; preds = %230
  %232 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %154) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

233:                                              ; preds = %230
  %234 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %154) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

235:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %238, label %236, !dbg !32

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.f(float %154) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.f(float %154) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

__nv_sqrtf.exit30:                                ; preds = %231, %233, %236, %238
  %.0.i28 = phi float [ %232, %231 ], [ %234, %233 ], [ %237, %236 ], [ %239, %238 ], !dbg !32
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i31 = icmp eq i32 %240, 0, !dbg !32
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i34 = icmp eq i32 %241, 0, !dbg !32
  br i1 %.not.i31, label %247, label %242, !dbg !32

242:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %245, label %243, !dbg !32

243:                                              ; preds = %242
  %244 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %155) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

245:                                              ; preds = %242
  %246 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %155) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

247:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %250, label %248, !dbg !32

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.f(float %155) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.f(float %155) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

__nv_sqrtf.exit35:                                ; preds = %243, %245, %248, %250
  %.0.i33 = phi float [ %244, %243 ], [ %246, %245 ], [ %249, %248 ], [ %251, %250 ], !dbg !32
  %252 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !18
  %253 = bitcast i32 %252 to float, !dbg !18
  %254 = bitcast i32 %71 to float, !dbg !20
  %255 = fsub float %253, %254, !dbg !33
  %256 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !18
  %257 = bitcast i32 %256 to float, !dbg !18
  %258 = bitcast i32 %70 to float, !dbg !20
  %259 = fsub float %257, %258, !dbg !33
  %260 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !18
  %261 = bitcast i32 %260 to float, !dbg !18
  %262 = bitcast i32 %69 to float, !dbg !20
  %263 = fsub float %261, %262, !dbg !33
  %264 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !18
  %265 = bitcast i32 %264 to float, !dbg !18
  %266 = bitcast i32 %68 to float, !dbg !20
  %267 = fsub float %265, %266, !dbg !33
  %268 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !18
  %269 = bitcast i32 %268 to float, !dbg !18
  %270 = bitcast i32 %67 to float, !dbg !20
  %271 = fsub float %269, %270, !dbg !33
  %272 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !18
  %273 = bitcast i32 %272 to float, !dbg !18
  %274 = bitcast i32 %66 to float, !dbg !20
  %275 = fsub float %273, %274, !dbg !33
  %276 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !18
  %277 = bitcast i32 %276 to float, !dbg !18
  %278 = bitcast i32 %65 to float, !dbg !20
  %279 = fsub float %277, %278, !dbg !33
  %280 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !18
  %281 = bitcast i32 %280 to float, !dbg !18
  %282 = bitcast i32 %64 to float, !dbg !20
  %283 = fsub float %281, %282, !dbg !33
  %284 = bitcast i32 %147 to float, !dbg !30
  %285 = bitcast i32 %146 to float, !dbg !30
  %286 = bitcast i32 %145 to float, !dbg !30
  %287 = bitcast i32 %144 to float, !dbg !30
  %288 = bitcast i32 %143 to float, !dbg !30
  %289 = bitcast i32 %142 to float, !dbg !30
  %290 = bitcast i32 %141 to float, !dbg !30
  %291 = bitcast i32 %140 to float, !dbg !30
  %292 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !28
  %293 = bitcast i32 %292 to float, !dbg !28
  %294 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !28
  %295 = bitcast i32 %294 to float, !dbg !28
  %296 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !28
  %297 = bitcast i32 %296 to float, !dbg !28
  %298 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !28
  %299 = bitcast i32 %298 to float, !dbg !28
  %300 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !28
  %301 = bitcast i32 %300 to float, !dbg !28
  %302 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !28
  %303 = bitcast i32 %302 to float, !dbg !28
  %304 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !28
  %305 = bitcast i32 %304 to float, !dbg !28
  %306 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !28
  %307 = bitcast i32 %306 to float, !dbg !28
  %308 = bitcast i32 %127 to float, !dbg !26
  %309 = bitcast i32 %126 to float, !dbg !26
  %310 = bitcast i32 %125 to float, !dbg !26
  %311 = bitcast i32 %124 to float, !dbg !26
  %312 = bitcast i32 %123 to float, !dbg !26
  %313 = bitcast i32 %122 to float, !dbg !26
  %314 = bitcast i32 %121 to float, !dbg !26
  %315 = bitcast i32 %120 to float, !dbg !26
  %316 = bitcast i32 %111 to float, !dbg !24
  %317 = bitcast i32 %110 to float, !dbg !24
  %318 = bitcast i32 %109 to float, !dbg !24
  %319 = bitcast i32 %108 to float, !dbg !24
  %320 = bitcast i32 %107 to float, !dbg !24
  %321 = bitcast i32 %106 to float, !dbg !24
  %322 = bitcast i32 %105 to float, !dbg !24
  %323 = bitcast i32 %104 to float, !dbg !24
  %324 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !34
  %325 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !34
  %326 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !34
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !34
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !34
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !34
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !34
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !34
  %332 = fmul float %283, %324, !dbg !35
  %333 = fmul float %279, %325, !dbg !35
  %334 = fmul float %275, %326, !dbg !35
  %335 = fmul float %271, %327, !dbg !35
  %336 = fmul float %267, %328, !dbg !35
  %337 = fmul float %263, %329, !dbg !35
  %338 = fmul float %259, %330, !dbg !35
  %339 = fmul float %255, %331, !dbg !35
  %340 = fmul float %332, %323, !dbg !36
  %341 = fmul float %333, %322, !dbg !36
  %342 = fmul float %334, %321, !dbg !36
  %343 = fmul float %335, %320, !dbg !36
  %344 = fmul float %336, %319, !dbg !36
  %345 = fmul float %337, %318, !dbg !36
  %346 = fmul float %338, %317, !dbg !36
  %347 = fmul float %339, %316, !dbg !36
  %348 = fadd float %340, %315, !dbg !37
  %349 = fadd float %341, %314, !dbg !37
  %350 = fadd float %342, %313, !dbg !37
  %351 = fadd float %343, %312, !dbg !37
  %352 = fadd float %344, %311, !dbg !37
  %353 = fadd float %345, %310, !dbg !37
  %354 = fadd float %346, %309, !dbg !37
  %355 = fadd float %347, %308, !dbg !37
  %356 = fadd float %348, %307, !dbg !38
  %357 = fadd float %349, %305, !dbg !38
  %358 = fadd float %350, %303, !dbg !38
  %359 = fadd float %351, %301, !dbg !38
  %360 = fadd float %352, %299, !dbg !38
  %361 = fadd float %353, %297, !dbg !38
  %362 = fadd float %354, %295, !dbg !38
  %363 = fadd float %355, %293, !dbg !38
  %364 = fsub float %356, %291, !dbg !39
  %365 = fsub float %357, %290, !dbg !39
  %366 = fsub float %358, %289, !dbg !39
  %367 = fsub float %359, %288, !dbg !39
  %368 = fsub float %360, %287, !dbg !39
  %369 = fsub float %361, %286, !dbg !39
  %370 = fsub float %362, %285, !dbg !39
  %371 = fsub float %363, %284, !dbg !39
  %372 = getelementptr float, ptr addrspace(1) %7, i64 %42, !dbg !40
  %373 = getelementptr float, ptr addrspace(1) %7, i64 %44, !dbg !40
  %374 = bitcast float %356 to i32, !dbg !41
  %375 = bitcast float %357 to i32, !dbg !41
  %376 = bitcast float %358 to i32, !dbg !41
  %377 = bitcast float %359 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %374, i32 %375, i32 %376, i32 %377, ptr addrspace(1) %372, i1 %24) #3, !dbg !41
  %378 = bitcast float %360 to i32, !dbg !41
  %379 = bitcast float %361 to i32, !dbg !41
  %380 = bitcast float %362 to i32, !dbg !41
  %381 = bitcast float %363 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %378, i32 %379, i32 %380, i32 %381, ptr addrspace(1) %373, i1 %25) #3, !dbg !41
  %382 = getelementptr float, ptr addrspace(1) %8, i64 %42, !dbg !42
  %383 = getelementptr float, ptr addrspace(1) %8, i64 %44, !dbg !42
  %384 = bitcast float %364 to i32, !dbg !43
  %385 = bitcast float %365 to i32, !dbg !43
  %386 = bitcast float %366 to i32, !dbg !43
  %387 = bitcast float %367 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %384, i32 %385, i32 %386, i32 %387, ptr addrspace(1) %382, i1 %24) #3, !dbg !43
  %388 = bitcast float %368 to i32, !dbg !43
  %389 = bitcast float %369 to i32, !dbg !43
  %390 = bitcast float %370 to i32, !dbg !43
  %391 = bitcast float %371 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %388, i32 %389, i32 %390, i32 %391, ptr addrspace(1) %383, i1 %25) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjmhhmye6eif4rkhtkf5k2z6lplub4cqgnphmigr6m6wl4k7eyl6.py", directory: "inductor_cache/jm")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_22", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 26, scope: !7)
!33 = !DILocation(line: 33, column: 18, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 19, scope: !7)
!36 = !DILocation(line: 42, column: 20, scope: !7)
!37 = !DILocation(line: 43, column: 20, scope: !7)
!38 = !DILocation(line: 44, column: 20, scope: !7)
!39 = !DILocation(line: 45, column: 20, scope: !7)
!40 = !DILocation(line: 46, column: 25, scope: !7)
!41 = !DILocation(line: 46, column: 37, scope: !7)
!42 = !DILocation(line: 47, column: 25, scope: !7)
!43 = !DILocation(line: 47, column: 37, scope: !7)
!44 = !DILocation(line: 47, column: 4, scope: !7)
