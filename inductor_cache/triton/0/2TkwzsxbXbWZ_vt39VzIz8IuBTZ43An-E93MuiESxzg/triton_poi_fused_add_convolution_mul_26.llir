; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 4, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = or disjoint i32 %13, 32, !dbg !12
  %16 = or disjoint i32 %13, 48, !dbg !12
  %17 = shl i32 %11, 2, !dbg !12
  %18 = and i32 %17, 60, !dbg !12
  %19 = or disjoint i32 %10, %13, !dbg !13
  %20 = or disjoint i32 %10, %14, !dbg !13
  %21 = or disjoint i32 %10, %15, !dbg !13
  %22 = or disjoint i32 %10, %16, !dbg !13
  %23 = or disjoint i32 %10, %18, !dbg !13
  %24 = icmp slt i32 %19, 512, !dbg !14
  %25 = icmp slt i32 %20, 512, !dbg !14
  %26 = icmp slt i32 %21, 512, !dbg !14
  %27 = icmp slt i32 %22, 512, !dbg !14
  %28 = icmp slt i32 %23, 512, !dbg !14
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %30 = shl i32 %29, 6, !dbg !16
  %31 = or disjoint i32 %30, %18, !dbg !17
  %32 = or disjoint i32 %30, %13, !dbg !17
  %33 = or disjoint i32 %30, %14, !dbg !17
  %34 = or disjoint i32 %30, %15, !dbg !17
  %35 = or disjoint i32 %30, %16, !dbg !17
  %36 = icmp slt i32 %31, 256, !dbg !18
  %37 = icmp slt i32 %32, 256, !dbg !18
  %38 = icmp slt i32 %33, 256, !dbg !18
  %39 = icmp slt i32 %34, 256, !dbg !18
  %40 = icmp slt i32 %35, 256, !dbg !18
  %.frozen = freeze i32 %23, !dbg !19
  %41 = sdiv i32 %.frozen, 128, !dbg !19
  %42 = mul i32 %41, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %42, !dbg !20
  %43 = shl i32 %19, 8, !dbg !21
  %44 = shl i32 %20, 8, !dbg !21
  %45 = shl i32 %21, 8, !dbg !21
  %46 = shl i32 %22, 8, !dbg !21
  %47 = add i32 %31, %43, !dbg !22
  %48 = add i32 %31, %44, !dbg !22
  %49 = add i32 %31, %45, !dbg !22
  %50 = add i32 %31, %46, !dbg !22
  %51 = sext i32 %47 to i64, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !23
  %53 = sext i32 %48 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = sext i32 %49 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !23
  %57 = sext i32 %50 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = and i1 %24, %36, !dbg !24
  %60 = and i1 %25, %36, !dbg !24
  %61 = and i1 %26, %36, !dbg !24
  %62 = and i1 %27, %36, !dbg !24
  %63 = and i1 %28, %37, !dbg !24
  %64 = and i1 %28, %38, !dbg !24
  %65 = and i1 %28, %39, !dbg !24
  %66 = and i1 %28, %40, !dbg !24
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %59) #2, !dbg !25
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !25
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %60) #2, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !25
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !25
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !25
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %61) #2, !dbg !25
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !25
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !25
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !25
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !25
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %62) #2, !dbg !25
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !25
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !25
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !25
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !25
  %87 = shl i32 %11, 8, !dbg !25
  %88 = and i32 %87, 3840, !dbg !25
  %89 = or disjoint i32 %88, %13, !dbg !25
  %90 = and i32 %17, 1020, !dbg !25
  %91 = lshr exact i32 %88, 2, !dbg !25
  %92 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %91, !dbg !25
  %93 = getelementptr float, ptr addrspace(3) %92, i32 %89, !dbg !25
  %94 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #2, !dbg !25
  %95 = or disjoint i32 %89, 64, !dbg !25
  %96 = lshr i32 %95, 6, !dbg !25
  %.idx = shl nuw nsw i32 %96, 4, !dbg !25
  %97 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !25
  %98 = getelementptr float, ptr addrspace(3) %97, i32 %95, !dbg !25
  %99 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !25
  %100 = or disjoint i32 %89, 128, !dbg !25
  %101 = lshr i32 %100, 6, !dbg !25
  %.idx1 = shl nuw nsw i32 %101, 4, !dbg !25
  %102 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !25
  %103 = getelementptr float, ptr addrspace(3) %102, i32 %100, !dbg !25
  %104 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #2, !dbg !25
  %105 = or disjoint i32 %89, 192, !dbg !25
  %106 = lshr i32 %105, 6, !dbg !25
  %.idx2 = shl nuw nsw i32 %106, 4, !dbg !25
  %107 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !25
  %108 = getelementptr float, ptr addrspace(3) %107, i32 %105, !dbg !25
  %109 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !25
  %110 = or disjoint i32 %89, 16, !dbg !25
  %111 = getelementptr float, ptr addrspace(3) %92, i32 %110, !dbg !25
  %112 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #2, !dbg !25
  %113 = or disjoint i32 %89, 80, !dbg !25
  %114 = lshr i32 %113, 6, !dbg !25
  %.idx3 = shl nuw nsw i32 %114, 4, !dbg !25
  %115 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !25
  %116 = getelementptr float, ptr addrspace(3) %115, i32 %113, !dbg !25
  %117 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #2, !dbg !25
  %118 = or disjoint i32 %89, 144, !dbg !25
  %119 = lshr i32 %118, 6, !dbg !25
  %.idx4 = shl nuw nsw i32 %119, 4, !dbg !25
  %120 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !25
  %121 = getelementptr float, ptr addrspace(3) %120, i32 %118, !dbg !25
  %122 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !25
  %123 = or disjoint i32 %89, 208, !dbg !25
  %124 = lshr i32 %123, 6, !dbg !25
  %.idx5 = shl nuw nsw i32 %124, 4, !dbg !25
  %125 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !25
  %126 = getelementptr float, ptr addrspace(3) %125, i32 %123, !dbg !25
  %127 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !25
  %128 = or disjoint i32 %89, 32, !dbg !25
  %129 = getelementptr float, ptr addrspace(3) %92, i32 %128, !dbg !25
  %130 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #2, !dbg !25
  %131 = or disjoint i32 %89, 96, !dbg !25
  %132 = lshr i32 %131, 6, !dbg !25
  %.idx6 = shl nuw nsw i32 %132, 4, !dbg !25
  %133 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !25
  %134 = getelementptr float, ptr addrspace(3) %133, i32 %131, !dbg !25
  %135 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #2, !dbg !25
  %136 = or disjoint i32 %89, 160, !dbg !25
  %137 = lshr i32 %136, 6, !dbg !25
  %.idx7 = shl nuw nsw i32 %137, 4, !dbg !25
  %138 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !25
  %139 = getelementptr float, ptr addrspace(3) %138, i32 %136, !dbg !25
  %140 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !25
  %141 = or disjoint i32 %89, 224, !dbg !25
  %142 = lshr i32 %141, 6, !dbg !25
  %.idx8 = shl nuw nsw i32 %142, 4, !dbg !25
  %143 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !25
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %141, !dbg !25
  %145 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !25
  %146 = or disjoint i32 %89, 48, !dbg !25
  %147 = getelementptr float, ptr addrspace(3) %92, i32 %146, !dbg !25
  %148 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !25
  %149 = or disjoint i32 %89, 112, !dbg !25
  %150 = lshr i32 %149, 6, !dbg !25
  %.idx9 = shl nuw nsw i32 %150, 4, !dbg !25
  %151 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !25
  %152 = getelementptr float, ptr addrspace(3) %151, i32 %149, !dbg !25
  %153 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !25
  %154 = or disjoint i32 %89, 176, !dbg !25
  %155 = lshr i32 %154, 6, !dbg !25
  %.idx10 = shl nuw nsw i32 %155, 4, !dbg !25
  %156 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !25
  %157 = getelementptr float, ptr addrspace(3) %156, i32 %154, !dbg !25
  %158 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 true) #2, !dbg !25
  %159 = or disjoint i32 %89, 240, !dbg !25
  %160 = lshr i32 %159, 6, !dbg !25
  %.idx11 = shl nuw nsw i32 %160, 4, !dbg !25
  %161 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx11, !dbg !25
  %162 = getelementptr float, ptr addrspace(3) %161, i32 %159, !dbg !25
  %163 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 true) #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %164 = lshr i32 %90, 6, !dbg !25
  %165 = and i32 %11, 255, !dbg !25
  %166 = add nuw nsw i32 %164, %165, !dbg !25
  %.idx12 = shl nuw nsw i32 %166, 4, !dbg !25
  %167 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx12, !dbg !25
  %168 = load float, ptr addrspace(3) %167, align 16, !dbg !25
  %169 = getelementptr inbounds i8, ptr addrspace(3) %167, i32 4, !dbg !25
  %170 = load float, ptr addrspace(3) %169, align 4, !dbg !25
  %171 = getelementptr inbounds i8, ptr addrspace(3) %167, i32 8, !dbg !25
  %172 = load float, ptr addrspace(3) %171, align 8, !dbg !25
  %173 = getelementptr inbounds i8, ptr addrspace(3) %167, i32 12, !dbg !25
  %174 = load float, ptr addrspace(3) %173, align 4, !dbg !25
  %175 = or disjoint i32 %90, 1024, !dbg !25
  %176 = lshr i32 %175, 6, !dbg !25
  %.idx16 = shl nuw nsw i32 %176, 4, !dbg !25
  %177 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx16, !dbg !25
  %178 = getelementptr inbounds float, ptr addrspace(3) %177, i32 %175, !dbg !25
  %179 = load float, ptr addrspace(3) %178, align 16, !dbg !25
  %180 = getelementptr inbounds i8, ptr addrspace(3) %178, i32 4, !dbg !25
  %181 = load float, ptr addrspace(3) %180, align 4, !dbg !25
  %182 = getelementptr inbounds i8, ptr addrspace(3) %178, i32 8, !dbg !25
  %183 = load float, ptr addrspace(3) %182, align 8, !dbg !25
  %184 = getelementptr inbounds i8, ptr addrspace(3) %178, i32 12, !dbg !25
  %185 = load float, ptr addrspace(3) %184, align 4, !dbg !25
  %186 = or disjoint i32 %90, 2048, !dbg !25
  %187 = lshr i32 %186, 6, !dbg !25
  %.idx21 = shl nuw nsw i32 %187, 4, !dbg !25
  %188 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx21, !dbg !25
  %189 = getelementptr inbounds float, ptr addrspace(3) %188, i32 %186, !dbg !25
  %190 = load float, ptr addrspace(3) %189, align 16, !dbg !25
  %191 = getelementptr inbounds i8, ptr addrspace(3) %189, i32 4, !dbg !25
  %192 = load float, ptr addrspace(3) %191, align 4, !dbg !25
  %193 = getelementptr inbounds i8, ptr addrspace(3) %189, i32 8, !dbg !25
  %194 = load float, ptr addrspace(3) %193, align 8, !dbg !25
  %195 = getelementptr inbounds i8, ptr addrspace(3) %189, i32 12, !dbg !25
  %196 = load float, ptr addrspace(3) %195, align 4, !dbg !25
  %197 = or disjoint i32 %90, 3072, !dbg !25
  %198 = lshr i32 %197, 6, !dbg !25
  %.idx26 = shl nuw nsw i32 %198, 4, !dbg !25
  %199 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx26, !dbg !25
  %200 = getelementptr inbounds float, ptr addrspace(3) %199, i32 %197, !dbg !25
  %201 = load float, ptr addrspace(3) %200, align 16, !dbg !25
  %202 = getelementptr inbounds i8, ptr addrspace(3) %200, i32 4, !dbg !25
  %203 = load float, ptr addrspace(3) %202, align 4, !dbg !25
  %204 = getelementptr inbounds i8, ptr addrspace(3) %200, i32 8, !dbg !25
  %205 = load float, ptr addrspace(3) %204, align 8, !dbg !25
  %206 = getelementptr inbounds i8, ptr addrspace(3) %200, i32 12, !dbg !25
  %207 = load float, ptr addrspace(3) %206, align 4, !dbg !25
  %208 = sext i32 %.decomposed to i64, !dbg !26
  %209 = getelementptr float, ptr addrspace(1) %1, i64 %208, !dbg !26
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %209, i1 %28) #2, !dbg !27
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !27
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !27
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !27
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !27
  %215 = bitcast i32 %211 to float, !dbg !27
  %216 = bitcast i32 %212 to float, !dbg !27
  %217 = bitcast i32 %213 to float, !dbg !27
  %218 = bitcast i32 %214 to float, !dbg !27
  %219 = shl i32 %32, 7, !dbg !28
  %220 = shl i32 %33, 7, !dbg !28
  %221 = shl i32 %34, 7, !dbg !28
  %222 = shl i32 %35, 7, !dbg !28
  %223 = shl i32 %41, 15, !dbg !29
  %224 = add i32 %223, %.decomposed, !dbg !30
  %225 = add i32 %224, %219, !dbg !31
  %226 = add i32 %224, %220, !dbg !31
  %227 = add i32 %224, %221, !dbg !31
  %228 = add i32 %224, %222, !dbg !31
  %229 = sext i32 %225 to i64, !dbg !32
  %230 = getelementptr float, ptr addrspace(1) %2, i64 %229, !dbg !32
  %231 = sext i32 %226 to i64, !dbg !32
  %232 = getelementptr float, ptr addrspace(1) %2, i64 %231, !dbg !32
  %233 = sext i32 %227 to i64, !dbg !32
  %234 = getelementptr float, ptr addrspace(1) %2, i64 %233, !dbg !32
  %235 = sext i32 %228 to i64, !dbg !32
  %236 = getelementptr float, ptr addrspace(1) %2, i64 %235, !dbg !32
  %237 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %230, i1 %63) #2, !dbg !33
  %238 = extractvalue { i32, i32, i32, i32 } %237, 0, !dbg !33
  %239 = extractvalue { i32, i32, i32, i32 } %237, 1, !dbg !33
  %240 = extractvalue { i32, i32, i32, i32 } %237, 2, !dbg !33
  %241 = extractvalue { i32, i32, i32, i32 } %237, 3, !dbg !33
  %242 = bitcast i32 %238 to float, !dbg !33
  %243 = bitcast i32 %239 to float, !dbg !33
  %244 = bitcast i32 %240 to float, !dbg !33
  %245 = bitcast i32 %241 to float, !dbg !33
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %232, i1 %64) #2, !dbg !33
  %247 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !33
  %248 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !33
  %249 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !33
  %250 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !33
  %251 = bitcast i32 %247 to float, !dbg !33
  %252 = bitcast i32 %248 to float, !dbg !33
  %253 = bitcast i32 %249 to float, !dbg !33
  %254 = bitcast i32 %250 to float, !dbg !33
  %255 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %234, i1 %65) #2, !dbg !33
  %256 = extractvalue { i32, i32, i32, i32 } %255, 0, !dbg !33
  %257 = extractvalue { i32, i32, i32, i32 } %255, 1, !dbg !33
  %258 = extractvalue { i32, i32, i32, i32 } %255, 2, !dbg !33
  %259 = extractvalue { i32, i32, i32, i32 } %255, 3, !dbg !33
  %260 = bitcast i32 %256 to float, !dbg !33
  %261 = bitcast i32 %257 to float, !dbg !33
  %262 = bitcast i32 %258 to float, !dbg !33
  %263 = bitcast i32 %259 to float, !dbg !33
  %264 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %236, i1 %66) #2, !dbg !33
  %265 = extractvalue { i32, i32, i32, i32 } %264, 0, !dbg !33
  %266 = extractvalue { i32, i32, i32, i32 } %264, 1, !dbg !33
  %267 = extractvalue { i32, i32, i32, i32 } %264, 2, !dbg !33
  %268 = extractvalue { i32, i32, i32, i32 } %264, 3, !dbg !33
  %269 = bitcast i32 %265 to float, !dbg !33
  %270 = bitcast i32 %266 to float, !dbg !33
  %271 = bitcast i32 %267 to float, !dbg !33
  %272 = bitcast i32 %268 to float, !dbg !33
  %273 = getelementptr float, ptr addrspace(1) %3, i64 %208, !dbg !34
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %273, i1 %28) #2, !dbg !35
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !35
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !35
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !35
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !35
  %279 = bitcast i32 %275 to float, !dbg !35
  %280 = bitcast i32 %276 to float, !dbg !35
  %281 = bitcast i32 %277 to float, !dbg !35
  %282 = bitcast i32 %278 to float, !dbg !35
  %283 = fmul float %215, %242, !dbg !36
  %284 = fmul float %216, %243, !dbg !36
  %285 = fmul float %217, %244, !dbg !36
  %286 = fmul float %218, %245, !dbg !36
  %287 = fmul float %215, %251, !dbg !36
  %288 = fmul float %216, %252, !dbg !36
  %289 = fmul float %217, %253, !dbg !36
  %290 = fmul float %218, %254, !dbg !36
  %291 = fmul float %215, %260, !dbg !36
  %292 = fmul float %216, %261, !dbg !36
  %293 = fmul float %217, %262, !dbg !36
  %294 = fmul float %218, %263, !dbg !36
  %295 = fmul float %215, %269, !dbg !36
  %296 = fmul float %216, %270, !dbg !36
  %297 = fmul float %217, %271, !dbg !36
  %298 = fmul float %218, %272, !dbg !36
  %299 = fadd float %283, %279, !dbg !37
  %300 = fadd float %284, %280, !dbg !37
  %301 = fadd float %285, %281, !dbg !37
  %302 = fadd float %286, %282, !dbg !37
  %303 = fadd float %287, %279, !dbg !37
  %304 = fadd float %288, %280, !dbg !37
  %305 = fadd float %289, %281, !dbg !37
  %306 = fadd float %290, %282, !dbg !37
  %307 = fadd float %291, %279, !dbg !37
  %308 = fadd float %292, %280, !dbg !37
  %309 = fadd float %293, %281, !dbg !37
  %310 = fadd float %294, %282, !dbg !37
  %311 = fadd float %295, %279, !dbg !37
  %312 = fadd float %296, %280, !dbg !37
  %313 = fadd float %297, %281, !dbg !37
  %314 = fadd float %298, %282, !dbg !37
  %315 = fadd float %168, %299, !dbg !38
  %316 = fadd float %170, %300, !dbg !38
  %317 = fadd float %172, %301, !dbg !38
  %318 = fadd float %174, %302, !dbg !38
  %319 = fadd float %179, %303, !dbg !38
  %320 = fadd float %181, %304, !dbg !38
  %321 = fadd float %183, %305, !dbg !38
  %322 = fadd float %185, %306, !dbg !38
  %323 = fadd float %190, %307, !dbg !38
  %324 = fadd float %192, %308, !dbg !38
  %325 = fadd float %194, %309, !dbg !38
  %326 = fadd float %196, %310, !dbg !38
  %327 = fadd float %201, %311, !dbg !38
  %328 = fadd float %203, %312, !dbg !38
  %329 = fadd float %205, %313, !dbg !38
  %330 = fadd float %207, %314, !dbg !38
  %331 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !39
  %332 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !39
  %333 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !39
  %334 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %335 = lshr exact i32 %88, 4, !dbg !40
  %336 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %335, !dbg !40
  %337 = getelementptr float, ptr addrspace(3) %336, i32 %89, !dbg !40
  %338 = bitcast float %315 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %338, i1 true) #2, !dbg !40
  %339 = getelementptr float, ptr addrspace(3) @global_smem, i32 %96, !dbg !40
  %340 = getelementptr float, ptr addrspace(3) %339, i32 %95, !dbg !40
  %341 = bitcast float %316 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %340, <1 x i32> %341, i1 true) #2, !dbg !40
  %342 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !40
  %343 = getelementptr float, ptr addrspace(3) %342, i32 %100, !dbg !40
  %344 = bitcast float %317 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %343, <1 x i32> %344, i1 true) #2, !dbg !40
  %345 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !40
  %346 = getelementptr float, ptr addrspace(3) %345, i32 %105, !dbg !40
  %347 = bitcast float %318 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %346, <1 x i32> %347, i1 true) #2, !dbg !40
  %348 = getelementptr float, ptr addrspace(3) %336, i32 %110, !dbg !40
  %349 = bitcast float %319 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %348, <1 x i32> %349, i1 true) #2, !dbg !40
  %350 = getelementptr float, ptr addrspace(3) @global_smem, i32 %114, !dbg !40
  %351 = getelementptr float, ptr addrspace(3) %350, i32 %113, !dbg !40
  %352 = bitcast float %320 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %351, <1 x i32> %352, i1 true) #2, !dbg !40
  %353 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !40
  %354 = getelementptr float, ptr addrspace(3) %353, i32 %118, !dbg !40
  %355 = bitcast float %321 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %354, <1 x i32> %355, i1 true) #2, !dbg !40
  %356 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !40
  %357 = getelementptr float, ptr addrspace(3) %356, i32 %123, !dbg !40
  %358 = bitcast float %322 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %357, <1 x i32> %358, i1 true) #2, !dbg !40
  %359 = getelementptr float, ptr addrspace(3) %336, i32 %128, !dbg !40
  %360 = bitcast float %323 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %359, <1 x i32> %360, i1 true) #2, !dbg !40
  %361 = getelementptr float, ptr addrspace(3) @global_smem, i32 %132, !dbg !40
  %362 = getelementptr float, ptr addrspace(3) %361, i32 %131, !dbg !40
  %363 = bitcast float %324 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %362, <1 x i32> %363, i1 true) #2, !dbg !40
  %364 = getelementptr float, ptr addrspace(3) @global_smem, i32 %137, !dbg !40
  %365 = getelementptr float, ptr addrspace(3) %364, i32 %136, !dbg !40
  %366 = bitcast float %325 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %365, <1 x i32> %366, i1 true) #2, !dbg !40
  %367 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !40
  %368 = getelementptr float, ptr addrspace(3) %367, i32 %141, !dbg !40
  %369 = bitcast float %326 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %368, <1 x i32> %369, i1 true) #2, !dbg !40
  %370 = getelementptr float, ptr addrspace(3) %336, i32 %146, !dbg !40
  %371 = bitcast float %327 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %370, <1 x i32> %371, i1 true) #2, !dbg !40
  %372 = getelementptr float, ptr addrspace(3) @global_smem, i32 %150, !dbg !40
  %373 = getelementptr float, ptr addrspace(3) %372, i32 %149, !dbg !40
  %374 = bitcast float %328 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %373, <1 x i32> %374, i1 true) #2, !dbg !40
  %375 = getelementptr float, ptr addrspace(3) @global_smem, i32 %155, !dbg !40
  %376 = getelementptr float, ptr addrspace(3) %375, i32 %154, !dbg !40
  %377 = bitcast float %329 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %376, <1 x i32> %377, i1 true) #2, !dbg !40
  %378 = getelementptr float, ptr addrspace(3) @global_smem, i32 %160, !dbg !40
  %379 = getelementptr float, ptr addrspace(3) %378, i32 %159, !dbg !40
  %380 = bitcast float %330 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %380, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %381 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %164, !dbg !40
  %382 = getelementptr inbounds float, ptr addrspace(3) %381, i32 %90, !dbg !40
  %383 = load i32, ptr addrspace(3) %382, align 4, !dbg !40
  %384 = or disjoint i32 %90, 1, !dbg !40
  %385 = getelementptr inbounds float, ptr addrspace(3) %381, i32 %384, !dbg !40
  %386 = load i32, ptr addrspace(3) %385, align 4, !dbg !40
  %387 = or disjoint i32 %90, 2, !dbg !40
  %388 = getelementptr inbounds float, ptr addrspace(3) %381, i32 %387, !dbg !40
  %389 = load i32, ptr addrspace(3) %388, align 4, !dbg !40
  %390 = or disjoint i32 %90, 3, !dbg !40
  %391 = getelementptr inbounds float, ptr addrspace(3) %381, i32 %390, !dbg !40
  %392 = load i32, ptr addrspace(3) %391, align 4, !dbg !40
  %393 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %176, !dbg !40
  %394 = getelementptr inbounds float, ptr addrspace(3) %393, i32 %175, !dbg !40
  %395 = load i32, ptr addrspace(3) %394, align 4, !dbg !40
  %396 = or disjoint i32 %90, 1025, !dbg !40
  %397 = lshr i32 %396, 6, !dbg !40
  %398 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %397, !dbg !40
  %399 = getelementptr inbounds float, ptr addrspace(3) %398, i32 %396, !dbg !40
  %400 = load i32, ptr addrspace(3) %399, align 4, !dbg !40
  %401 = or disjoint i32 %90, 1026, !dbg !40
  %402 = lshr i32 %401, 6, !dbg !40
  %403 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %402, !dbg !40
  %404 = getelementptr inbounds float, ptr addrspace(3) %403, i32 %401, !dbg !40
  %405 = load i32, ptr addrspace(3) %404, align 4, !dbg !40
  %406 = or disjoint i32 %90, 1027, !dbg !40
  %407 = lshr i32 %406, 6, !dbg !40
  %408 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %407, !dbg !40
  %409 = getelementptr inbounds float, ptr addrspace(3) %408, i32 %406, !dbg !40
  %410 = load i32, ptr addrspace(3) %409, align 4, !dbg !40
  %411 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %187, !dbg !40
  %412 = getelementptr inbounds float, ptr addrspace(3) %411, i32 %186, !dbg !40
  %413 = load i32, ptr addrspace(3) %412, align 4, !dbg !40
  %414 = or disjoint i32 %90, 2049, !dbg !40
  %415 = lshr i32 %414, 6, !dbg !40
  %416 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %415, !dbg !40
  %417 = getelementptr inbounds float, ptr addrspace(3) %416, i32 %414, !dbg !40
  %418 = load i32, ptr addrspace(3) %417, align 4, !dbg !40
  %419 = or disjoint i32 %90, 2050, !dbg !40
  %420 = lshr i32 %419, 6, !dbg !40
  %421 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %420, !dbg !40
  %422 = getelementptr inbounds float, ptr addrspace(3) %421, i32 %419, !dbg !40
  %423 = load i32, ptr addrspace(3) %422, align 4, !dbg !40
  %424 = or disjoint i32 %90, 2051, !dbg !40
  %425 = lshr i32 %424, 6, !dbg !40
  %426 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %425, !dbg !40
  %427 = getelementptr inbounds float, ptr addrspace(3) %426, i32 %424, !dbg !40
  %428 = load i32, ptr addrspace(3) %427, align 4, !dbg !40
  %429 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %198, !dbg !40
  %430 = getelementptr inbounds float, ptr addrspace(3) %429, i32 %197, !dbg !40
  %431 = load i32, ptr addrspace(3) %430, align 4, !dbg !40
  %432 = or disjoint i32 %90, 3073, !dbg !40
  %433 = lshr i32 %432, 6, !dbg !40
  %434 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %433, !dbg !40
  %435 = getelementptr inbounds float, ptr addrspace(3) %434, i32 %432, !dbg !40
  %436 = load i32, ptr addrspace(3) %435, align 4, !dbg !40
  %437 = or disjoint i32 %90, 3074, !dbg !40
  %438 = lshr i32 %437, 6, !dbg !40
  %439 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %438, !dbg !40
  %440 = getelementptr inbounds float, ptr addrspace(3) %439, i32 %437, !dbg !40
  %441 = load i32, ptr addrspace(3) %440, align 4, !dbg !40
  %442 = or disjoint i32 %90, 3075, !dbg !40
  %443 = lshr i32 %442, 6, !dbg !40
  %444 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %443, !dbg !40
  %445 = getelementptr inbounds float, ptr addrspace(3) %444, i32 %442, !dbg !40
  %446 = load i32, ptr addrspace(3) %445, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %383, i32 %386, i32 %389, i32 %392, ptr addrspace(1) %331, i1 %59) #2, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %395, i32 %400, i32 %405, i32 %410, ptr addrspace(1) %332, i1 %60) #2, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %413, i32 %418, i32 %423, i32 %428, ptr addrspace(1) %333, i1 %61) #2, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %431, i32 %436, i32 %441, i32 %446, ptr addrspace(1) %334, i1 %62) #2, !dbg !40
  %447 = getelementptr float, ptr addrspace(1) %5, i64 %229, !dbg !41
  %448 = getelementptr float, ptr addrspace(1) %5, i64 %231, !dbg !41
  %449 = getelementptr float, ptr addrspace(1) %5, i64 %233, !dbg !41
  %450 = getelementptr float, ptr addrspace(1) %5, i64 %235, !dbg !41
  %451 = bitcast float %315 to i32, !dbg !42
  %452 = bitcast float %316 to i32, !dbg !42
  %453 = bitcast float %317 to i32, !dbg !42
  %454 = bitcast float %318 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %451, i32 %452, i32 %453, i32 %454, ptr addrspace(1) %447, i1 %63) #2, !dbg !42
  %455 = bitcast float %319 to i32, !dbg !42
  %456 = bitcast float %320 to i32, !dbg !42
  %457 = bitcast float %321 to i32, !dbg !42
  %458 = bitcast float %322 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %455, i32 %456, i32 %457, i32 %458, ptr addrspace(1) %448, i1 %64) #2, !dbg !42
  %459 = bitcast float %323 to i32, !dbg !42
  %460 = bitcast float %324 to i32, !dbg !42
  %461 = bitcast float %325 to i32, !dbg !42
  %462 = bitcast float %326 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %459, i32 %460, i32 %461, i32 %462, ptr addrspace(1) %449, i1 %65) #2, !dbg !42
  %463 = bitcast float %327 to i32, !dbg !42
  %464 = bitcast float %328 to i32, !dbg !42
  %465 = bitcast float %329 to i32, !dbg !42
  %466 = bitcast float %330 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %463, i32 %464, i32 %465, i32 %466, ptr addrspace(1) %450, i1 %66) #2, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6zpebawlxua2ufsormzgbbzvmkihwmfqieo7inr5qepg4wshcni.py", directory: "inductor_cache/6z")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_26, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_26", linkageName: "triton_poi_fused_add_convolution_mul_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 52, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 39, scope: !7)
!29 = !DILocation(line: 34, column: 50, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 44, scope: !7)
!32 = !DILocation(line: 34, column: 30, scope: !7)
!33 = !DILocation(line: 34, column: 55, scope: !7)
!34 = !DILocation(line: 35, column: 30, scope: !7)
!35 = !DILocation(line: 35, column: 35, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 39, column: 25, scope: !7)
!40 = !DILocation(line: 39, column: 45, scope: !7)
!41 = !DILocation(line: 40, column: 25, scope: !7)
!42 = !DILocation(line: 40, column: 56, scope: !7)
!43 = !DILocation(line: 40, column: 4, scope: !7)
