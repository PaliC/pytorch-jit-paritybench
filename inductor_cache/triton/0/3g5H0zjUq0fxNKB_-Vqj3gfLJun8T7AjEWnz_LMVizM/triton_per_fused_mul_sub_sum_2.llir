; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mul_sub_sum_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = lshr i32 %11, 2, !dbg !12
  %14 = and i32 %13, 31, !dbg !12
  %15 = or disjoint i32 %10, %12, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = icmp slt i32 %16, 512, !dbg !14
  %18 = icmp slt i32 %15, 512, !dbg !14
  %19 = lshr i32 %11, 5, !dbg !15
  %20 = shl i32 %11, 2, !dbg !15
  %21 = and i32 %20, 12, !dbg !15
  %22 = sdiv i32 %15, 4, !dbg !16
  %23 = srem i32 %22, 32, !dbg !17
  %24 = sdiv i32 %15, 128, !dbg !18
  %.frozen = freeze i32 %16, !dbg !18
  %25 = sdiv i32 %.frozen, 128, !dbg !18
  %26 = srem i32 %16, 4, !dbg !19
  %27 = mul i32 %25, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %27, !dbg !20
  %28 = and i32 %11, 96, !dbg !21
  %29 = shl i32 %24, 9, !dbg !22
  %30 = add i32 %29, %23, !dbg !23
  %31 = add i32 %30, %28, !dbg !24
  %32 = add i32 %30, 128, !dbg !23
  %33 = add nuw i32 %32, %28, !dbg !24
  %34 = add i32 %30, 256, !dbg !23
  %35 = add nuw i32 %34, %28, !dbg !24
  %36 = add i32 %30, 384, !dbg !23
  %37 = add nuw i32 %36, %28, !dbg !24
  %38 = sext i32 %31 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !25
  %40 = sext i32 %33 to i64, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !25
  %42 = sext i32 %35 to i64, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !25
  %44 = sext i32 %37 to i64, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !25
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %18, i32 0, i1 %18) #3, !dbg !26
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %18, i32 0, i1 %18) #3, !dbg !26
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %18, i32 0, i1 %18) #3, !dbg !26
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %18, i32 0, i1 %18) #3, !dbg !26
  %50 = shl i32 %11, 4, !dbg !26
  %51 = and i32 %50, 496, !dbg !26
  %52 = and i32 %19, 3, !dbg !26
  %53 = or disjoint i32 %51, %52, !dbg !26
  %54 = and i32 %20, 508, !dbg !26
  %55 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %51, !dbg !26
  %56 = getelementptr float, ptr addrspace(3) %55, i32 %53, !dbg !26
  %57 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 true) #3, !dbg !26
  %58 = or disjoint i32 %53, 4, !dbg !26
  %59 = getelementptr float, ptr addrspace(3) %55, i32 %58, !dbg !26
  %60 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #3, !dbg !26
  %61 = or disjoint i32 %53, 8, !dbg !26
  %62 = getelementptr float, ptr addrspace(3) %55, i32 %61, !dbg !26
  %63 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 true) #3, !dbg !26
  %64 = or disjoint i32 %53, 12, !dbg !26
  %65 = getelementptr float, ptr addrspace(3) %55, i32 %64, !dbg !26
  %66 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %67 = and i32 %11, 124, !dbg !26
  %68 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %67, !dbg !26
  %69 = getelementptr inbounds float, ptr addrspace(3) %68, i32 %54, !dbg !26
  %70 = load float, ptr addrspace(3) %69, align 16, !dbg !26
  %71 = getelementptr inbounds i8, ptr addrspace(3) %69, i32 4, !dbg !26
  %72 = load float, ptr addrspace(3) %71, align 4, !dbg !26
  %73 = getelementptr inbounds i8, ptr addrspace(3) %69, i32 8, !dbg !26
  %74 = load float, ptr addrspace(3) %73, align 8, !dbg !26
  %75 = getelementptr inbounds i8, ptr addrspace(3) %69, i32 12, !dbg !26
  %76 = load float, ptr addrspace(3) %75, align 4, !dbg !26
  %77 = shl nsw i32 %25, 4, !dbg !27
  %78 = or disjoint i32 %77, %21, !dbg !28
  %79 = sext i32 %78 to i64, !dbg !29
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !29
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !30
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !30
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !30
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !30
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !30
  %86 = bitcast i32 %82 to float, !dbg !30
  %87 = bitcast i32 %83 to float, !dbg !30
  %88 = bitcast i32 %84 to float, !dbg !30
  %89 = bitcast i32 %85 to float, !dbg !30
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !31
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %90, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !32
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !32
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !32
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !32
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !32
  %96 = bitcast i32 %92 to float, !dbg !32
  %97 = bitcast i32 %93 to float, !dbg !32
  %98 = bitcast i32 %94 to float, !dbg !32
  %99 = bitcast i32 %95 to float, !dbg !32
  %100 = shl nsw i32 %26, 4, !dbg !33
  %101 = or disjoint i32 %100, %21, !dbg !34
  %102 = shl nsw i32 %25, 6, !dbg !35
  %103 = add nsw i32 %101, %102, !dbg !36
  %104 = sext i32 %103 to i64, !dbg !37
  %105 = getelementptr float, ptr addrspace(1) %3, i64 %104, !dbg !37
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %105, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !38
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !38
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !38
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !38
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !38
  %111 = bitcast i32 %107 to float, !dbg !38
  %112 = bitcast i32 %108 to float, !dbg !38
  %113 = bitcast i32 %109 to float, !dbg !38
  %114 = bitcast i32 %110 to float, !dbg !38
  %115 = sext i32 %.decomposed to i64, !dbg !39
  %116 = getelementptr float, ptr addrspace(1) %4, i64 %115, !dbg !39
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %17) #3, !dbg !40
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %17) #3, !dbg !40
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %17) #3, !dbg !40
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %17) #3, !dbg !40
  %121 = bitcast i32 %120 to float, !dbg !40
  %122 = fsub float %70, %86, !dbg !41
  %123 = fsub float %72, %87, !dbg !41
  %124 = fsub float %74, %88, !dbg !41
  %125 = fsub float %76, %89, !dbg !41
  %126 = fmul float %122, 0x3FF7154760000000, !dbg !42
  %127 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %126) #3, !dbg !42
  %128 = fmul float %123, 0x3FF7154760000000, !dbg !42
  %129 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %128) #3, !dbg !42
  %130 = fmul float %124, 0x3FF7154760000000, !dbg !42
  %131 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %130) #3, !dbg !42
  %132 = fmul float %125, 0x3FF7154760000000, !dbg !42
  %133 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %132) #3, !dbg !42
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float %96) #3, !dbg !43
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float %97) #3, !dbg !43
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %98) #3, !dbg !43
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float %99) #3, !dbg !43
  %138 = fsub float %111, %121, !dbg !44
  %139 = fsub float %112, %121, !dbg !44
  %140 = fsub float %113, %121, !dbg !44
  %141 = fsub float %114, %121, !dbg !44
  %142 = fmul float %138, %134, !dbg !45
  %143 = fmul float %139, %135, !dbg !45
  %144 = fmul float %140, %136, !dbg !45
  %145 = fmul float %141, %137, !dbg !45
  %146 = fadd float %142, %143, !dbg !46
  %147 = fadd float %146, %144, !dbg !46
  %148 = fadd float %147, %145, !dbg !46
  %149 = select i1 %17, float %148, float 0.000000e+00, !dbg !46
  %150 = bitcast float %149 to i32, !dbg !51
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 2, i32 31), !dbg !51
  %152 = bitcast i32 %151 to float, !dbg !51
  %153 = fadd float %149, %152, !dbg !46
  %154 = bitcast float %153 to i32, !dbg !51
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 1, i32 31), !dbg !51
  %156 = bitcast i32 %155 to float, !dbg !51
  %157 = fadd float %153, %156, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !52
  %159 = bitcast float %157 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #3, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !52
  %161 = load i32, ptr addrspace(3) %160, align 4, !dbg !52
  %162 = sext i32 %15 to i64, !dbg !53
  %163 = getelementptr float, ptr addrspace(1) %5, i64 %162, !dbg !53
  %164 = icmp eq i32 %28, 0, !dbg !54
  %165 = and i1 %164, %18, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %161, ptr addrspace(1) %163, i1 %165) #3, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqtbpnidgqtdskj6yi2nhdyft7wch2rh2u6f3zsfsxv7vtzjivbz.py", directory: "inductor_cache/qt")
!4 = !{ptr @triton_per_fused_mul_sub_sum_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mul_sub_sum_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mul_sub_sum_2", linkageName: "triton_per_fused_mul_sub_sum_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 30, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 26, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 35, column: 38, scope: !7)
!22 = !DILocation(line: 35, column: 47, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 43, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 52, scope: !7)
!27 = !DILocation(line: 36, column: 38, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 43, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 43, scope: !7)
!33 = !DILocation(line: 38, column: 38, scope: !7)
!34 = !DILocation(line: 38, column: 35, scope: !7)
!35 = !DILocation(line: 38, column: 46, scope: !7)
!36 = !DILocation(line: 38, column: 43, scope: !7)
!37 = !DILocation(line: 38, column: 30, scope: !7)
!38 = !DILocation(line: 38, column: 51, scope: !7)
!39 = !DILocation(line: 39, column: 30, scope: !7)
!40 = !DILocation(line: 39, column: 35, scope: !7)
!41 = !DILocation(line: 40, column: 18, scope: !7)
!42 = !DILocation(line: 41, column: 23, scope: !7)
!43 = !DILocation(line: 42, column: 18, scope: !7)
!44 = !DILocation(line: 43, column: 18, scope: !7)
!45 = !DILocation(line: 44, column: 18, scope: !7)
!46 = !DILocation(line: 256, column: 15, scope: !47, inlinedAt: !50)
!47 = distinct !DILexicalBlockFile(scope: !49, file: !48, discriminator: 0)
!48 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!49 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!50 = !DILocation(line: 47, column: 26, scope: !7)
!51 = !DILocation(line: 267, column: 36, scope: !49, inlinedAt: !50)
!52 = !DILocation(line: 47, column: 29, scope: !7)
!53 = !DILocation(line: 48, column: 25, scope: !7)
!54 = !DILocation(line: 48, column: 37, scope: !7)
!55 = !DILocation(line: 48, column: 4, scope: !7)
