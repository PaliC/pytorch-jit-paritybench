; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_pow_sum_29(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 63, !dbg !12
  %9 = or disjoint i32 %6, %8, !dbg !13
  %10 = icmp slt i32 %9, 144, !dbg !14
  %11 = lshr i32 %7, 6, !dbg !15
  %.lobit = and i32 %11, 1, !dbg !15
  %.frozen = freeze i32 %9, !dbg !16
  %12 = sdiv i32 %.frozen, 9, !dbg !16
  %13 = mul i32 %12, 9, !dbg !17
  %.decomposed = sub i32 %.frozen, %13, !dbg !17
  %14 = mul i32 %12, 1152, !dbg !18
  %15 = add i32 %14, %.decomposed
  %invariant.op = add i32 %15, 18, !dbg !19
  %invariant.op7 = add i32 %15, 36, !dbg !19
  %invariant.op9 = add i32 %15, 54, !dbg !19
  %16 = insertelement <4 x i1> poison, i1 %10, i64 0, !dbg !20
  %17 = shufflevector <4 x i1> %16, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !20
  br label %18, !dbg !19

18:                                               ; preds = %4, %18
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %18 ]
  %19 = phi <4 x float> [ zeroinitializer, %4 ], [ %52, %18 ]
  %20 = trunc i64 %indvars.iv to i32, !dbg !21
  %21 = or disjoint i32 %.lobit, %20, !dbg !21
  %22 = mul i32 %21, 9, !dbg !21
  %23 = add i32 %15, %22, !dbg !21
  %24 = trunc i64 %indvars.iv to i32, !dbg !21
  %25 = or disjoint i32 %.lobit, %24, !dbg !21
  %26 = mul i32 %25, 9, !dbg !21
  %.reass = add i32 %26, %invariant.op
  %27 = trunc i64 %indvars.iv to i32, !dbg !21
  %28 = or disjoint i32 %.lobit, %27, !dbg !21
  %29 = mul i32 %28, 9, !dbg !21
  %.reass8 = add i32 %29, %invariant.op7
  %30 = trunc i64 %indvars.iv to i32, !dbg !21
  %31 = or disjoint i32 %.lobit, %30, !dbg !21
  %32 = mul i32 %31, 9, !dbg !21
  %.reass10 = add i32 %32, %invariant.op9
  %33 = sext i32 %23 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !22
  %35 = sext i32 %.reass to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !22
  %37 = sext i32 %.reass8 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !22
  %39 = sext i32 %.reass10 to i64, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !22
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %10, i32 0, i1 %10) #3, !dbg !23
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %10, i32 0, i1 %10) #3, !dbg !23
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %10, i32 0, i1 %10) #3, !dbg !23
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %10, i32 0, i1 %10) #3, !dbg !23
  %45 = insertelement <4 x i32> poison, i32 %41, i64 0, !dbg !23
  %46 = insertelement <4 x i32> %45, i32 %42, i64 1, !dbg !23
  %47 = insertelement <4 x i32> %46, i32 %43, i64 2, !dbg !23
  %48 = insertelement <4 x i32> %47, i32 %44, i64 3, !dbg !23
  %49 = bitcast <4 x i32> %48 to <4 x float>, !dbg !23
  %50 = fmul <4 x float> %49, %49, !dbg !24
  %51 = fadd <4 x float> %19, %50, !dbg !25
  %52 = select <4 x i1> %17, <4 x float> %51, <4 x float> %19, !dbg !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !19
  %53 = icmp samesign ult i64 %indvars.iv, 120, !dbg !19
  br i1 %53, label %18, label %54, !dbg !19

54:                                               ; preds = %18
  %shift = shufflevector <4 x float> %52, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !26
  %55 = fadd <4 x float> %52, %shift, !dbg !26
  %shift14 = shufflevector <4 x float> %52, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !26
  %56 = fadd <4 x float> %shift14, %55, !dbg !26
  %shift15 = shufflevector <4 x float> %52, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !26
  %57 = fadd <4 x float> %shift15, %56, !dbg !26
  %58 = extractelement <4 x float> %57, i64 0, !dbg !26
  %59 = shl nuw nsw i32 %8, 1, !dbg !31
  %60 = or disjoint i32 %59, %.lobit, !dbg !31
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i32 %60, !dbg !31
  %62 = bitcast float %58 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 true) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %63 = icmp slt i32 %7, 128, !dbg !31
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !31
  %65 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %64, i1 %63) #3, !dbg !31
  %66 = bitcast i32 %65 to float, !dbg !31
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 1, i32 31), !dbg !31
  %68 = bitcast i32 %67 to float, !dbg !31
  %69 = fadd float %66, %68, !dbg !26
  %70 = and i32 %7, 1, !dbg !31
  %71 = icmp eq i32 %70, 0, !dbg !31
  %72 = and i1 %63, %71, !dbg !31
  %73 = bitcast float %69 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %73, i1 %72) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %74 = getelementptr float, ptr addrspace(3) @global_smem, i32 %59, !dbg !31
  %75 = load i32, ptr addrspace(3) %74, align 8, !dbg !31
  %76 = sext i32 %9 to i64, !dbg !32
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !32
  %78 = icmp eq i32 %.lobit, 0, !dbg !33
  %79 = and i1 %78, %10, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %75, ptr addrspace(1) %77, i1 %79) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckcsfe37ot5orvioeqllotv73bfbuup4sf5szockxgxxha4fz7ux.py", directory: "inductor_cache/kc")
!4 = !{ptr @triton_red_fused_pow_sum_29, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_pow_sum_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_pow_sum_29", linkageName: "triton_red_fused_pow_sum_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 34, column: 51, scope: !7)
!19 = !DILocation(line: 30, column: 36, scope: !7)
!20 = !DILocation(line: 38, column: 46, scope: !7)
!21 = !DILocation(line: 34, column: 46, scope: !7)
!22 = !DILocation(line: 34, column: 34, scope: !7)
!23 = !DILocation(line: 34, column: 56, scope: !7)
!24 = !DILocation(line: 35, column: 22, scope: !7)
!25 = !DILocation(line: 37, column: 23, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!30 = !DILocation(line: 39, column: 25, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !30)
!32 = !DILocation(line: 40, column: 25, scope: !7)
!33 = !DILocation(line: 40, column: 36, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
