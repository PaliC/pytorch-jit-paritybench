; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__unsafe_index_add_convolution_native_group_norm_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 6, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 1, !dbg !12
  %15 = and i32 %13, 63, !dbg !12
  %16 = lshr i32 %13, 1, !dbg !12
  %17 = and i32 %16, 31, !dbg !12
  %18 = and i32 %13, 64, !dbg !12
  %19 = lshr exact i32 %18, 1, !dbg !12
  %20 = or disjoint i32 %17, %19, !dbg !12
  %21 = or disjoint i32 %12, %15, !dbg !13
  %22 = or disjoint i32 %20, %12, !dbg !13
  %23 = icmp slt i32 %21, 256, !dbg !14
  %24 = icmp slt i32 %22, 256, !dbg !14
  %.lobit2 = lshr exact i32 %18, 6, !dbg !15
  %25 = shl nuw nsw i32 %14, 2, !dbg !15
  %26 = srem i32 %21, 64, !dbg !16
  %27 = shl nsw i32 %26, 1, !dbg !17
  %28 = shl i32 %22, 13, !dbg !18
  %29 = shl i32 %21, 10, !dbg !19
  %30 = sext i32 %29 to i64, !dbg !20
  %31 = or disjoint i32 %28, %25
  %32 = shl nuw nsw i32 %14, 8
  %33 = or disjoint i32 %32, %17
  %34 = or disjoint i32 %33, %19
  %35 = and i32 %13, 127
  %.idx = shl nuw nsw i32 %14, 4
  %36 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx
  %37 = getelementptr float, ptr addrspace(3) %36, i32 %34
  %38 = or disjoint i32 %34, 64
  %39 = lshr i32 %38, 6
  %40 = getelementptr float, ptr addrspace(3) @global_smem, i32 %39
  %41 = getelementptr float, ptr addrspace(3) %40, i32 %38
  %42 = or disjoint i32 %34, 128
  %43 = lshr i32 %42, 6
  %44 = getelementptr float, ptr addrspace(3) @global_smem, i32 %43
  %45 = getelementptr float, ptr addrspace(3) %44, i32 %42
  %46 = or disjoint i32 %34, 192
  %47 = lshr i32 %46, 6
  %48 = getelementptr float, ptr addrspace(3) @global_smem, i32 %47
  %49 = getelementptr float, ptr addrspace(3) %48, i32 %46
  %50 = lshr i32 %35, 6
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %50
  %52 = getelementptr inbounds float, ptr addrspace(3) %51, i32 %35
  %53 = or disjoint i32 %35, 128
  %54 = lshr i32 %53, 6
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %54
  %56 = getelementptr inbounds float, ptr addrspace(3) %55, i32 %53
  %57 = or disjoint i32 %35, 256
  %58 = lshr i32 %57, 6
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %58
  %60 = getelementptr inbounds float, ptr addrspace(3) %59, i32 %57
  %61 = or disjoint i32 %35, 384
  %62 = lshr i32 %61, 6
  %63 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %62
  %64 = getelementptr inbounds float, ptr addrspace(3) %63, i32 %61
  %65 = shl i32 %13, 3
  %66 = and i32 %65, 504
  %67 = or disjoint i32 %66, %.lobit2
  %68 = shl i32 %13, 2
  %69 = and i32 %68, 508
  %70 = lshr exact i32 %66, 1
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %70
  %72 = getelementptr inbounds float, ptr addrspace(3) %71, i32 %67
  %73 = or disjoint i32 %67, 2
  %74 = getelementptr inbounds float, ptr addrspace(3) %71, i32 %73
  %75 = or disjoint i32 %67, 4
  %76 = getelementptr inbounds float, ptr addrspace(3) %71, i32 %75
  %77 = or disjoint i32 %67, 6
  %78 = getelementptr inbounds float, ptr addrspace(3) %71, i32 %77
  %79 = lshr exact i32 %68, 1
  %80 = and i32 %79, 252
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %80
  %82 = getelementptr inbounds float, ptr addrspace(3) %81, i32 %69
  %83 = sext i32 %31 to i64, !dbg !21
  %84 = getelementptr inbounds i8, ptr addrspace(3) %82, i32 4
  %85 = getelementptr inbounds i8, ptr addrspace(3) %82, i32 8
  %86 = getelementptr inbounds i8, ptr addrspace(3) %82, i32 12
  br label %87, !dbg !21

87:                                               ; preds = %10, %._crit_edge
  %indvars.iv = phi i64 [ 0, %10 ], [ %indvars.iv.next, %._crit_edge ]
  %88 = phi float [ 0.000000e+00, %10 ], [ %278, %._crit_edge ]
  %89 = phi float [ 0.000000e+00, %10 ], [ %279, %._crit_edge ]
  %90 = phi float [ 0.000000e+00, %10 ], [ %280, %._crit_edge ]
  %91 = phi float [ 0.000000e+00, %10 ], [ %281, %._crit_edge ]
  %92 = phi float [ 0.000000e+00, %10 ], [ %274, %._crit_edge ]
  %93 = phi float [ 0.000000e+00, %10 ], [ %275, %._crit_edge ]
  %94 = phi float [ 0.000000e+00, %10 ], [ %276, %._crit_edge ]
  %95 = phi float [ 0.000000e+00, %10 ], [ %277, %._crit_edge ]
  %96 = phi float [ 0.000000e+00, %10 ], [ %270, %._crit_edge ]
  %97 = phi float [ 0.000000e+00, %10 ], [ %271, %._crit_edge ]
  %98 = phi float [ 0.000000e+00, %10 ], [ %272, %._crit_edge ]
  %99 = phi float [ 0.000000e+00, %10 ], [ %273, %._crit_edge ]
  %100 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !22
  %101 = lshr i64 %indvars.iv, 8, !dbg !22
  %102 = and i64 %101, 15, !dbg !23
  %103 = lshr i64 %indvars.iv, 4, !dbg !24
  %104 = and i64 %103, 15, !dbg !25
  %.masked = and i32 %100, 8, !dbg !26
  %105 = or disjoint i32 %.masked, %.lobit2, !dbg !26
  %106 = or disjoint i32 %105, 2, !dbg !26
  %107 = or disjoint i32 %105, 4, !dbg !26
  %108 = or disjoint i32 %105, 6, !dbg !26
  %109 = lshr i32 %100, 12, !dbg !27
  %110 = getelementptr i64, ptr addrspace(1) %0, i64 %102, !dbg !28
  %111 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %110, i1 true, i1 true) #3, !dbg !29
  %112 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %110, i1 true, i1 true) #3, !dbg !29
  %113 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %110, i1 true, i1 true) #3, !dbg !29
  %114 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %110, i1 true, i1 true) #3, !dbg !29
  %115 = getelementptr i64, ptr addrspace(1) %0, i64 %104, !dbg !30
  %116 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %115, i1 true, i1 true) #3, !dbg !31
  %117 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %115, i1 true, i1 true) #3, !dbg !31
  %118 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %115, i1 true, i1 true) #3, !dbg !31
  %119 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %115, i1 true, i1 true) #3, !dbg !31
  %120 = zext nneg i32 %105 to i64, !dbg !32
  %121 = getelementptr i64, ptr addrspace(1) %0, i64 %120, !dbg !32
  %122 = zext nneg i32 %106 to i64, !dbg !32
  %123 = getelementptr i64, ptr addrspace(1) %0, i64 %122, !dbg !32
  %124 = zext nneg i32 %107 to i64, !dbg !32
  %125 = getelementptr i64, ptr addrspace(1) %0, i64 %124, !dbg !32
  %126 = zext nneg i32 %108 to i64, !dbg !32
  %127 = getelementptr i64, ptr addrspace(1) %0, i64 %126, !dbg !32
  %128 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %121, i1 true, i1 true) #3, !dbg !33
  %129 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %123, i1 true, i1 true) #3, !dbg !33
  %130 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %125, i1 true, i1 true) #3, !dbg !33
  %131 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %127, i1 true, i1 true) #3, !dbg !33
  %132 = add nuw nsw i32 %109, %27, !dbg !34
  %133 = sext i32 %132 to i64, !dbg !35
  %134 = getelementptr float, ptr addrspace(1) %2, i64 %133, !dbg !35
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %23, i32 0, i1 %23) #3, !dbg !36
  %136 = bitcast i32 %135 to float, !dbg !36
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %23, i32 0, i1 %23) #3, !dbg !36
  %138 = bitcast i32 %137 to float, !dbg !36
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %23, i32 0, i1 %23) #3, !dbg !36
  %140 = bitcast i32 %139 to float, !dbg !36
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %23, i32 0, i1 %23) #3, !dbg !36
  %142 = bitcast i32 %141 to float, !dbg !36
  %143 = add nuw nsw i64 %indvars.iv, %83, !dbg !37
  %144 = getelementptr float, ptr addrspace(1) %3, i64 %143, !dbg !38
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %144, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !39
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !39
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !39
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !39
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %150 = insertelement <1 x i32> poison, i32 %146, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %37, <1 x i32> %150, i1 true) #3, !dbg !39
  %151 = insertelement <1 x i32> poison, i32 %147, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %151, i1 true) #3, !dbg !39
  %152 = insertelement <1 x i32> poison, i32 %148, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %152, i1 true) #3, !dbg !39
  %153 = insertelement <1 x i32> poison, i32 %149, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %153, i1 true) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %154 = load float, ptr addrspace(3) %52, align 4, !dbg !39
  %155 = load float, ptr addrspace(3) %56, align 4, !dbg !39
  %156 = load float, ptr addrspace(3) %60, align 4, !dbg !39
  %157 = load float, ptr addrspace(3) %64, align 4, !dbg !39
  %158 = lshr i64 %111, 60, !dbg !40
  %159 = and i64 %158, 8, !dbg !40
  %160 = add i64 %159, %111, !dbg !40
  %161 = lshr i64 %112, 60, !dbg !40
  %162 = and i64 %161, 8, !dbg !40
  %163 = add i64 %162, %112, !dbg !40
  %164 = lshr i64 %113, 60, !dbg !40
  %165 = and i64 %164, 8, !dbg !40
  %166 = add i64 %165, %113, !dbg !40
  %167 = lshr i64 %114, 60, !dbg !40
  %168 = and i64 %167, 8, !dbg !40
  %169 = add i64 %168, %114, !dbg !40
  %170 = lshr i64 %116, 60, !dbg !41
  %171 = and i64 %170, 8, !dbg !41
  %172 = add i64 %171, %116, !dbg !41
  %173 = lshr i64 %117, 60, !dbg !41
  %174 = and i64 %173, 8, !dbg !41
  %175 = add i64 %174, %117, !dbg !41
  %176 = lshr i64 %118, 60, !dbg !41
  %177 = and i64 %176, 8, !dbg !41
  %178 = add i64 %177, %118, !dbg !41
  %179 = lshr i64 %119, 60, !dbg !41
  %180 = and i64 %179, 8, !dbg !41
  %181 = add i64 %180, %119, !dbg !41
  %182 = lshr i64 %128, 60, !dbg !42
  %183 = and i64 %182, 8, !dbg !42
  %184 = lshr i64 %129, 60, !dbg !42
  %185 = and i64 %184, 8, !dbg !42
  %186 = lshr i64 %130, 60, !dbg !42
  %187 = and i64 %186, 8, !dbg !42
  %188 = lshr i64 %131, 60, !dbg !42
  %189 = and i64 %188, 8, !dbg !42
  %190 = shl nuw nsw i32 %109, 9, !dbg !43
  %191 = zext nneg i32 %190 to i64, !dbg !44
  %192 = getelementptr float, ptr addrspace(1) %1, i64 %128, !dbg !45
  %193 = getelementptr float, ptr addrspace(1) %192, i64 %183, !dbg !45
  %.idx7 = shl i64 %172, 5, !dbg !45
  %194 = getelementptr i8, ptr addrspace(1) %193, i64 %.idx7, !dbg !45
  %.idx8 = shl i64 %160, 8, !dbg !45
  %195 = getelementptr i8, ptr addrspace(1) %194, i64 %.idx8, !dbg !45
  %196 = getelementptr float, ptr addrspace(1) %195, i64 %191, !dbg !45
  %197 = getelementptr float, ptr addrspace(1) %196, i64 %30, !dbg !45
  %198 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !45
  %199 = getelementptr float, ptr addrspace(1) %198, i64 %185, !dbg !45
  %.idx9 = shl i64 %175, 5, !dbg !45
  %200 = getelementptr i8, ptr addrspace(1) %199, i64 %.idx9, !dbg !45
  %.idx10 = shl i64 %163, 8, !dbg !45
  %201 = getelementptr i8, ptr addrspace(1) %200, i64 %.idx10, !dbg !45
  %202 = getelementptr float, ptr addrspace(1) %201, i64 %191, !dbg !45
  %203 = getelementptr float, ptr addrspace(1) %202, i64 %30, !dbg !45
  %204 = getelementptr float, ptr addrspace(1) %1, i64 %130, !dbg !45
  %205 = getelementptr float, ptr addrspace(1) %204, i64 %187, !dbg !45
  %.idx11 = shl i64 %178, 5, !dbg !45
  %206 = getelementptr i8, ptr addrspace(1) %205, i64 %.idx11, !dbg !45
  %.idx12 = shl i64 %166, 8, !dbg !45
  %207 = getelementptr i8, ptr addrspace(1) %206, i64 %.idx12, !dbg !45
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %191, !dbg !45
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %30, !dbg !45
  %210 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !45
  %211 = getelementptr float, ptr addrspace(1) %210, i64 %189, !dbg !45
  %.idx13 = shl i64 %181, 5, !dbg !45
  %212 = getelementptr i8, ptr addrspace(1) %211, i64 %.idx13, !dbg !45
  %.idx14 = shl i64 %169, 8, !dbg !45
  %213 = getelementptr i8, ptr addrspace(1) %212, i64 %.idx14, !dbg !45
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %191, !dbg !45
  %215 = getelementptr float, ptr addrspace(1) %214, i64 %30, !dbg !45
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %197, i1 %23, i32 0, i1 %23) #3, !dbg !46
  %217 = bitcast i32 %216 to float, !dbg !46
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %203, i1 %23, i32 0, i1 %23) #3, !dbg !46
  %219 = bitcast i32 %218 to float, !dbg !46
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 %23, i32 0, i1 %23) #3, !dbg !46
  %221 = bitcast i32 %220 to float, !dbg !46
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %215, i1 %23, i32 0, i1 %23) #3, !dbg !46
  %223 = bitcast i32 %222 to float, !dbg !46
  %224 = fadd float %136, %217, !dbg !47
  %225 = fadd float %138, %219, !dbg !47
  %226 = fadd float %140, %221, !dbg !47
  %227 = fadd float %142, %223, !dbg !47
  %228 = fadd float %154, %224, !dbg !48
  %229 = fadd float %155, %225, !dbg !48
  %230 = fadd float %156, %226, !dbg !48
  %231 = fadd float %157, %227, !dbg !48
  %232 = icmp eq i64 %indvars.iv, 0, !dbg !49
  br i1 %232, label %._crit_edge, label %233, !dbg !50

233:                                              ; preds = %87
  %234 = fsub float %228, %96, !dbg !54
  %235 = fsub float %229, %97, !dbg !54
  %236 = fsub float %230, %98, !dbg !54
  %237 = fsub float %231, %99, !dbg !54
  %238 = fadd float %88, 1.000000e+00, !dbg !55
  %239 = fadd float %89, 1.000000e+00, !dbg !55
  %240 = fadd float %90, 1.000000e+00, !dbg !55
  %241 = fadd float %91, 1.000000e+00, !dbg !55
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %234, float %238) #3, !dbg !56
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %235, float %239) #3, !dbg !56
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %236, float %240) #3, !dbg !56
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %237, float %241) #3, !dbg !56
  %246 = fadd float %96, %242, !dbg !57
  %247 = fadd float %97, %243, !dbg !57
  %248 = fadd float %98, %244, !dbg !57
  %249 = fadd float %99, %245, !dbg !57
  %250 = fsub float %228, %246, !dbg !58
  %251 = fsub float %229, %247, !dbg !58
  %252 = fsub float %230, %248, !dbg !58
  %253 = fsub float %231, %249, !dbg !58
  %254 = fmul float %234, %250, !dbg !59
  %255 = fmul float %235, %251, !dbg !59
  %256 = fmul float %236, %252, !dbg !59
  %257 = fmul float %237, %253, !dbg !59
  %258 = fadd float %92, %254, !dbg !60
  %259 = fadd float %93, %255, !dbg !60
  %260 = fadd float %94, %256, !dbg !60
  %261 = fadd float %95, %257, !dbg !60
  br label %._crit_edge, !dbg !50

._crit_edge:                                      ; preds = %87, %233
  %262 = phi float [ %258, %233 ], [ 0.000000e+00, %87 ], !dbg !53
  %263 = phi float [ %259, %233 ], [ 0.000000e+00, %87 ], !dbg !53
  %264 = phi float [ %260, %233 ], [ 0.000000e+00, %87 ], !dbg !53
  %265 = phi float [ %261, %233 ], [ 0.000000e+00, %87 ], !dbg !53
  %.pn21 = phi float [ %246, %233 ], [ %228, %87 ]
  %.pn19 = phi float [ %247, %233 ], [ %229, %87 ]
  %.pn17 = phi float [ %248, %233 ], [ %230, %87 ]
  %.pn15 = phi float [ %249, %233 ], [ %231, %87 ]
  %266 = phi float [ %238, %233 ], [ 1.000000e+00, %87 ], !dbg !53
  %267 = phi float [ %239, %233 ], [ 1.000000e+00, %87 ], !dbg !53
  %268 = phi float [ %240, %233 ], [ 1.000000e+00, %87 ], !dbg !53
  %269 = phi float [ %241, %233 ], [ 1.000000e+00, %87 ], !dbg !53
  %270 = select i1 %23, float %.pn21, float %96, !dbg !61
  %271 = select i1 %23, float %.pn19, float %97, !dbg !61
  %272 = select i1 %23, float %.pn17, float %98, !dbg !61
  %273 = select i1 %23, float %.pn15, float %99, !dbg !61
  %274 = select i1 %23, float %262, float %92, !dbg !62
  %275 = select i1 %23, float %263, float %93, !dbg !62
  %276 = select i1 %23, float %264, float %94, !dbg !62
  %277 = select i1 %23, float %265, float %95, !dbg !62
  %278 = select i1 %23, float %266, float %88, !dbg !63
  %279 = select i1 %23, float %267, float %89, !dbg !63
  %280 = select i1 %23, float %268, float %90, !dbg !63
  %281 = select i1 %23, float %269, float %91, !dbg !63
  %282 = getelementptr float, ptr addrspace(1) %4, i64 %143, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %283 = bitcast float %228 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %283, i1 true) #3, !dbg !65
  %284 = bitcast float %229 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %284, i1 true) #3, !dbg !65
  %285 = bitcast float %230 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %285, i1 true) #3, !dbg !65
  %286 = bitcast float %231 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %286, i1 true) #3, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %.extract = load i32, ptr addrspace(3) %82, align 16, !dbg !65
  %.extract25 = load i32, ptr addrspace(3) %84, align 4, !dbg !65
  %.extract26 = load i32, ptr addrspace(3) %85, align 8, !dbg !65
  %.extract27 = load i32, ptr addrspace(3) %86, align 4, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract25, i32 %.extract26, i32 %.extract27, ptr addrspace(1) %282, i1 %24) #3, !dbg !65
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !21
  %287 = icmp samesign ult i64 %indvars.iv, 8184, !dbg !21
  br i1 %287, label %87, label %288, !dbg !21

288:                                              ; preds = %._crit_edge
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %289 = fsub float %271, %270, !dbg !68
  %290 = fadd float %278, %279, !dbg !70
  %291 = fcmp oeq float %290, 0.000000e+00, !dbg !71
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %279, float %290) #3, !dbg !72
  %293 = select i1 %291, float 0.000000e+00, float %292, !dbg !73
  %294 = fmul float %289, %293, !dbg !74
  %295 = fadd float %270, %294, !dbg !75
  %296 = fadd float %274, %275, !dbg !76
  %297 = fmul float %289, %289, !dbg !77
  %298 = fmul float %297, %278, !dbg !78
  %299 = fmul float %298, %293, !dbg !79
  %300 = fadd float %296, %299, !dbg !80
  %301 = fsub float %272, %295, !dbg !68
  %302 = fadd float %280, %290, !dbg !70
  %303 = fcmp oeq float %302, 0.000000e+00, !dbg !71
  %304 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %280, float %302) #3, !dbg !72
  %305 = select i1 %303, float 0.000000e+00, float %304, !dbg !73
  %306 = fmul float %305, %301, !dbg !74
  %307 = fadd float %295, %306, !dbg !75
  %308 = fadd float %276, %300, !dbg !76
  %309 = fmul float %301, %301, !dbg !77
  %310 = fmul float %290, %309, !dbg !78
  %311 = fmul float %305, %310, !dbg !79
  %312 = fadd float %308, %311, !dbg !80
  %313 = fsub float %273, %307, !dbg !68
  %314 = fadd float %281, %302, !dbg !70
  %315 = fcmp oeq float %314, 0.000000e+00, !dbg !71
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %281, float %314) #3, !dbg !72
  %317 = select i1 %315, float 0.000000e+00, float %316, !dbg !73
  %318 = fmul float %317, %313, !dbg !74
  %319 = fadd float %307, %318, !dbg !75
  %320 = fadd float %277, %312, !dbg !76
  %321 = fmul float %313, %313, !dbg !77
  %322 = fmul float %302, %321, !dbg !78
  %323 = fmul float %317, %322, !dbg !79
  %324 = fadd float %320, %323, !dbg !80
  %325 = lshr i32 %13, 6, !dbg !66
  %326 = and i32 %325, 1, !dbg !66
  %327 = shl nuw nsw i32 %15, 1, !dbg !66
  %328 = or disjoint i32 %327, %326, !dbg !66
  %329 = getelementptr float, ptr addrspace(3) @global_smem, i32 %328, !dbg !66
  %330 = bitcast float %319 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, <1 x i32> %330, i1 true) #3, !dbg !66
  %331 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %328, !dbg !66
  %332 = bitcast float %324 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %332, i1 true) #3, !dbg !66
  %333 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %328, !dbg !66
  %334 = bitcast float %314 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %334, i1 true) #3, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %335 = icmp slt i32 %13, 128, !dbg !66
  %336 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !66
  %337 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %336, i1 %335) #3, !dbg !66
  %338 = bitcast i32 %337 to float, !dbg !66
  %339 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %13, !dbg !66
  %340 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %339, i1 %335) #3, !dbg !66
  %341 = bitcast i32 %340 to float, !dbg !66
  %342 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %13, !dbg !66
  %343 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %342, i1 %335) #3, !dbg !66
  %344 = bitcast i32 %343 to float, !dbg !66
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 1, i32 31), !dbg !66
  %346 = bitcast i32 %345 to float, !dbg !66
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 1, i32 31), !dbg !66
  %348 = bitcast i32 %347 to float, !dbg !66
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 1, i32 31), !dbg !66
  %350 = bitcast i32 %349 to float, !dbg !66
  %351 = fsub float %346, %338, !dbg !68
  %352 = fadd float %344, %350, !dbg !70
  %353 = fcmp oeq float %352, 0.000000e+00, !dbg !71
  %354 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %350, float %352) #3, !dbg !72
  %355 = select i1 %353, float 0.000000e+00, float %354, !dbg !73
  %356 = fmul float %351, %355, !dbg !74
  %357 = fadd float %356, %338, !dbg !75
  %358 = fadd float %341, %348, !dbg !76
  %359 = fmul float %351, %351, !dbg !77
  %360 = fmul float %359, %344, !dbg !78
  %361 = fmul float %360, %355, !dbg !79
  %362 = fadd float %358, %361, !dbg !80
  %363 = icmp eq i32 %14, 0, !dbg !66
  %364 = and i1 %335, %363, !dbg !66
  %365 = bitcast float %357 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %365, i1 %364) #3, !dbg !66
  %366 = bitcast float %362 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %366, i1 %364) #3, !dbg !66
  %367 = bitcast float %352 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %342, <1 x i32> %367, i1 %364) #3, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %368 = getelementptr float, ptr addrspace(3) @global_smem, i32 %327, !dbg !66
  %369 = load i32, ptr addrspace(3) %368, align 8, !dbg !66
  %370 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %327, !dbg !66
  %371 = load i32, ptr addrspace(3) %370, align 8, !dbg !66
  %372 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %327, !dbg !66
  %373 = load i32, ptr addrspace(3) %372, align 8, !dbg !66
  %374 = sext i32 %21 to i64, !dbg !81
  %375 = getelementptr float, ptr addrspace(1) %5, i64 %374, !dbg !81
  %376 = icmp eq i32 %326, 0, !dbg !82
  %377 = and i1 %376, %23, !dbg !82
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %369, ptr addrspace(1) %375, i1 %377) #3, !dbg !82
  %378 = getelementptr float, ptr addrspace(1) %6, i64 %374, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %371, ptr addrspace(1) %378, i1 %377) #3, !dbg !84
  %379 = getelementptr float, ptr addrspace(1) %7, i64 %374, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %373, ptr addrspace(1) %379, i1 %377) #3, !dbg !86
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctnhk2r467eoeoptdlq6oaxcbntq3dkpsvrynoq6gnxejh5fsqdg.py", directory: "inductor_cache/tn")
!4 = !{ptr @triton_red_fused__unsafe_index_add_convolution_native_group_norm_26, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__unsafe_index_add_convolution_native_group_norm_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__unsafe_index_add_convolution_native_group_norm_26", linkageName: "triton_red_fused__unsafe_index_add_convolution_native_group_norm_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 42, column: 42, scope: !7)
!18 = !DILocation(line: 43, column: 45, scope: !7)
!19 = !DILocation(line: 54, column: 76, scope: !7)
!20 = !DILocation(line: 54, column: 71, scope: !7)
!21 = !DILocation(line: 31, column: 36, scope: !7)
!22 = !DILocation(line: 34, column: 25, scope: !7)
!23 = !DILocation(line: 34, column: 32, scope: !7)
!24 = !DILocation(line: 35, column: 25, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 36, column: 23, scope: !7)
!27 = !DILocation(line: 37, column: 23, scope: !7)
!28 = !DILocation(line: 39, column: 34, scope: !7)
!29 = !DILocation(line: 39, column: 39, scope: !7)
!30 = !DILocation(line: 40, column: 34, scope: !7)
!31 = !DILocation(line: 40, column: 39, scope: !7)
!32 = !DILocation(line: 41, column: 34, scope: !7)
!33 = !DILocation(line: 41, column: 39, scope: !7)
!34 = !DILocation(line: 42, column: 40, scope: !7)
!35 = !DILocation(line: 42, column: 35, scope: !7)
!36 = !DILocation(line: 42, column: 47, scope: !7)
!37 = !DILocation(line: 43, column: 40, scope: !7)
!38 = !DILocation(line: 43, column: 35, scope: !7)
!39 = !DILocation(line: 43, column: 50, scope: !7)
!40 = !DILocation(line: 47, column: 36, scope: !7)
!41 = !DILocation(line: 50, column: 36, scope: !7)
!42 = !DILocation(line: 53, column: 39, scope: !7)
!43 = !DILocation(line: 54, column: 66, scope: !7)
!44 = !DILocation(line: 54, column: 62, scope: !7)
!45 = !DILocation(line: 54, column: 35, scope: !7)
!46 = !DILocation(line: 54, column: 81, scope: !7)
!47 = !DILocation(line: 55, column: 24, scope: !7)
!48 = !DILocation(line: 56, column: 24, scope: !7)
!49 = !DILocation(line: 59, column: 66, scope: !7)
!50 = !DILocation(line: 178, column: 7, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 59, column: 55, scope: !7)
!54 = !DILocation(line: 183, column: 24, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 184, column: 30, scope: !51, inlinedAt: !53)
!56 = !DILocation(line: 185, column: 34, scope: !51, inlinedAt: !53)
!57 = !DILocation(line: 185, column: 26, scope: !51, inlinedAt: !53)
!58 = !DILocation(line: 186, column: 39, scope: !51, inlinedAt: !53)
!59 = !DILocation(line: 186, column: 31, scope: !51, inlinedAt: !53)
!60 = !DILocation(line: 186, column: 22, scope: !51, inlinedAt: !53)
!61 = !DILocation(line: 61, column: 62, scope: !7)
!62 = !DILocation(line: 62, column: 58, scope: !7)
!63 = !DILocation(line: 63, column: 66, scope: !7)
!64 = !DILocation(line: 64, column: 29, scope: !7)
!65 = !DILocation(line: 64, column: 51, scope: !7)
!66 = !DILocation(line: 204, column: 46, scope: !51, inlinedAt: !67)
!67 = !DILocation(line: 66, column: 44, scope: !7)
!68 = !DILocation(line: 192, column: 21, scope: !69, inlinedAt: !67)
!69 = distinct !DILexicalBlockFile(scope: !51, file: !52, discriminator: 0)
!70 = !DILocation(line: 193, column: 28, scope: !69, inlinedAt: !67)
!71 = !DILocation(line: 194, column: 39, scope: !69, inlinedAt: !67)
!72 = !DILocation(line: 194, column: 60, scope: !69, inlinedAt: !67)
!73 = !DILocation(line: 194, column: 49, scope: !69, inlinedAt: !67)
!74 = !DILocation(line: 196, column: 25, scope: !69, inlinedAt: !67)
!75 = !DILocation(line: 196, column: 17, scope: !69, inlinedAt: !67)
!76 = !DILocation(line: 197, column: 15, scope: !69, inlinedAt: !67)
!77 = !DILocation(line: 197, column: 30, scope: !69, inlinedAt: !67)
!78 = !DILocation(line: 197, column: 38, scope: !69, inlinedAt: !67)
!79 = !DILocation(line: 197, column: 49, scope: !69, inlinedAt: !67)
!80 = !DILocation(line: 197, column: 22, scope: !69, inlinedAt: !67)
!81 = !DILocation(line: 71, column: 25, scope: !7)
!82 = !DILocation(line: 71, column: 37, scope: !7)
!83 = !DILocation(line: 72, column: 25, scope: !7)
!84 = !DILocation(line: 72, column: 37, scope: !7)
!85 = !DILocation(line: 73, column: 25, scope: !7)
!86 = !DILocation(line: 73, column: 37, scope: !7)
!87 = !DILocation(line: 73, column: 4, scope: !7)
