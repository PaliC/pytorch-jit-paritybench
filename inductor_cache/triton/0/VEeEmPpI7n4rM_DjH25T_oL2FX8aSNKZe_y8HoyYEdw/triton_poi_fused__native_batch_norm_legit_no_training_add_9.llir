; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = sdiv i32 %18, 256, !dbg !14
  %20 = srem i32 %19, 64, !dbg !15
  %21 = sext i32 %18 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !17
  %24 = sext i32 %20 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !21
  %34 = bitcast i32 %33 to float, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !21
  %36 = bitcast i32 %35 to float, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !21
  %38 = bitcast i32 %37 to float, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !22
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !23
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !23
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !24
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !25
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !25
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !25
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !26
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !27
  %51 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !28
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !29
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !29
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !29
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !29
  %56 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !30
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !31
  %58 = bitcast i32 %57 to float, !dbg !31
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !31
  %60 = bitcast i32 %59 to float, !dbg !31
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !31
  %62 = bitcast i32 %61 to float, !dbg !31
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !31
  %64 = bitcast i32 %63 to float, !dbg !31
  %65 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !32
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !33
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !33
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !33
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !33
  %70 = getelementptr float, ptr addrspace(1) %9, i64 %24, !dbg !34
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !35
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !35
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !35
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !35
  %75 = fadd float %32, 0x3EE4F8B580000000, !dbg !36
  %76 = fadd float %34, 0x3EE4F8B580000000, !dbg !36
  %77 = fadd float %36, 0x3EE4F8B580000000, !dbg !36
  %78 = fadd float %38, 0x3EE4F8B580000000, !dbg !36
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i = icmp eq i32 %79, 0, !dbg !37
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i = icmp eq i32 %80, 0, !dbg !37
  br i1 %.not.i, label %86, label %81, !dbg !37

81:                                               ; preds = %12
  br i1 %.not1.i, label %84, label %82, !dbg !37

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

86:                                               ; preds = %12
  br i1 %.not1.i, label %89, label %87, !dbg !37

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %82, %84, %87, %89
  %.0.i = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !37
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i1 = icmp eq i32 %91, 0, !dbg !37
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i4 = icmp eq i32 %92, 0, !dbg !37
  br i1 %.not.i1, label %98, label %93, !dbg !37

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %96, label %94, !dbg !37

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

98:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %101, label %99, !dbg !37

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %94, %96, %99, %101
  %.0.i3 = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !37
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i6 = icmp eq i32 %103, 0, !dbg !37
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i9 = icmp eq i32 %104, 0, !dbg !37
  br i1 %.not.i6, label %110, label %105, !dbg !37

105:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %108, label %106, !dbg !37

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

110:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %113, label %111, !dbg !37

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

__nv_sqrtf.exit10:                                ; preds = %106, %108, %111, %113
  %.0.i8 = phi float [ %107, %106 ], [ %109, %108 ], [ %112, %111 ], [ %114, %113 ], !dbg !37
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i11 = icmp eq i32 %115, 0, !dbg !37
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i14 = icmp eq i32 %116, 0, !dbg !37
  br i1 %.not.i11, label %122, label %117, !dbg !37

117:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %120, label %118, !dbg !37

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

122:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %125, label %123, !dbg !37

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

__nv_sqrtf.exit15:                                ; preds = %118, %120, %123, %125
  %.0.i13 = phi float [ %119, %118 ], [ %121, %120 ], [ %124, %123 ], [ %126, %125 ], !dbg !37
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !38
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !38
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !38
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !38
  %131 = fadd float %58, 0x3EE4F8B580000000, !dbg !39
  %132 = fadd float %60, 0x3EE4F8B580000000, !dbg !39
  %133 = fadd float %62, 0x3EE4F8B580000000, !dbg !39
  %134 = fadd float %64, 0x3EE4F8B580000000, !dbg !39
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i16 = icmp eq i32 %135, 0, !dbg !40
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i19 = icmp eq i32 %136, 0, !dbg !40
  br i1 %.not.i16, label %142, label %137, !dbg !40

137:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %140, label %138, !dbg !40

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #3, !dbg !40
  br label %__nv_sqrtf.exit20, !dbg !40

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #3, !dbg !40
  br label %__nv_sqrtf.exit20, !dbg !40

142:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %145, label %143, !dbg !40

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #3, !dbg !40
  br label %__nv_sqrtf.exit20, !dbg !40

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #3, !dbg !40
  br label %__nv_sqrtf.exit20, !dbg !40

__nv_sqrtf.exit20:                                ; preds = %138, %140, %143, %145
  %.0.i18 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !40
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i21 = icmp eq i32 %147, 0, !dbg !40
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i24 = icmp eq i32 %148, 0, !dbg !40
  br i1 %.not.i21, label %154, label %149, !dbg !40

149:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %152, label %150, !dbg !40

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #3, !dbg !40
  br label %__nv_sqrtf.exit25, !dbg !40

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #3, !dbg !40
  br label %__nv_sqrtf.exit25, !dbg !40

154:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %157, label %155, !dbg !40

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #3, !dbg !40
  br label %__nv_sqrtf.exit25, !dbg !40

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #3, !dbg !40
  br label %__nv_sqrtf.exit25, !dbg !40

__nv_sqrtf.exit25:                                ; preds = %150, %152, %155, %157
  %.0.i23 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !40
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i26 = icmp eq i32 %159, 0, !dbg !40
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i29 = icmp eq i32 %160, 0, !dbg !40
  br i1 %.not.i26, label %166, label %161, !dbg !40

161:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %164, label %162, !dbg !40

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %133) #3, !dbg !40
  br label %__nv_sqrtf.exit30, !dbg !40

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %133) #3, !dbg !40
  br label %__nv_sqrtf.exit30, !dbg !40

166:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %169, label %167, !dbg !40

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %133) #3, !dbg !40
  br label %__nv_sqrtf.exit30, !dbg !40

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %133) #3, !dbg !40
  br label %__nv_sqrtf.exit30, !dbg !40

__nv_sqrtf.exit30:                                ; preds = %162, %164, %167, %169
  %.0.i28 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !40
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i31 = icmp eq i32 %171, 0, !dbg !40
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i34 = icmp eq i32 %172, 0, !dbg !40
  br i1 %.not.i31, label %178, label %173, !dbg !40

173:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %176, label %174, !dbg !40

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %134) #3, !dbg !40
  br label %__nv_sqrtf.exit35, !dbg !40

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %134) #3, !dbg !40
  br label %__nv_sqrtf.exit35, !dbg !40

178:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %181, label %179, !dbg !40

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.f(float %134) #3, !dbg !40
  br label %__nv_sqrtf.exit35, !dbg !40

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.f(float %134) #3, !dbg !40
  br label %__nv_sqrtf.exit35, !dbg !40

__nv_sqrtf.exit35:                                ; preds = %174, %176, %179, %181
  %.0.i33 = phi float [ %175, %174 ], [ %177, %176 ], [ %180, %179 ], [ %182, %181 ], !dbg !40
  %183 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !27
  %184 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !19
  %185 = insertelement <2 x i32> %184, i32 %55, i64 1, !dbg !19
  %186 = bitcast <2 x i32> %185 to <2 x float>, !dbg !19
  %187 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !27
  %188 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !19
  %189 = insertelement <2 x i32> %188, i32 %54, i64 1, !dbg !19
  %190 = bitcast <2 x i32> %189 to <2 x float>, !dbg !19
  %191 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !27
  %192 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !19
  %193 = insertelement <2 x i32> %192, i32 %53, i64 1, !dbg !19
  %194 = bitcast <2 x i32> %193 to <2 x float>, !dbg !19
  %195 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !27
  %196 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !19
  %197 = insertelement <2 x i32> %196, i32 %52, i64 1, !dbg !19
  %198 = bitcast <2 x i32> %197 to <2 x float>, !dbg !19
  %199 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !17
  %200 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !23
  %201 = insertelement <2 x i32> %200, i32 %69, i64 1, !dbg !23
  %202 = bitcast <2 x i32> %201 to <2 x float>, !dbg !23
  %203 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !25
  %204 = insertelement <2 x i32> %203, i32 %74, i64 1, !dbg !25
  %205 = bitcast <2 x i32> %204 to <2 x float>, !dbg !25
  %206 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !17
  %207 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !23
  %208 = insertelement <2 x i32> %207, i32 %68, i64 1, !dbg !23
  %209 = bitcast <2 x i32> %208 to <2 x float>, !dbg !23
  %210 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !25
  %211 = insertelement <2 x i32> %210, i32 %73, i64 1, !dbg !25
  %212 = bitcast <2 x i32> %211 to <2 x float>, !dbg !25
  %213 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !17
  %214 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !23
  %215 = insertelement <2 x i32> %214, i32 %67, i64 1, !dbg !23
  %216 = bitcast <2 x i32> %215 to <2 x float>, !dbg !23
  %217 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !25
  %218 = insertelement <2 x i32> %217, i32 %72, i64 1, !dbg !25
  %219 = bitcast <2 x i32> %218 to <2 x float>, !dbg !25
  %220 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !17
  %221 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !23
  %222 = insertelement <2 x i32> %221, i32 %66, i64 1, !dbg !23
  %223 = bitcast <2 x i32> %222 to <2 x float>, !dbg !23
  %224 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !25
  %225 = insertelement <2 x i32> %224, i32 %71, i64 1, !dbg !25
  %226 = bitcast <2 x i32> %225 to <2 x float>, !dbg !25
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !41
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !41
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !41
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !41
  %231 = insertelement <2 x i32> poison, i32 %220, i64 0, !dbg !17
  %232 = insertelement <2 x i32> %231, i32 %195, i64 1, !dbg !17
  %233 = bitcast <2 x i32> %232 to <2 x float>, !dbg !17
  %234 = fsub <2 x float> %233, %198, !dbg !42
  %235 = insertelement <2 x float> poison, float %127, i64 0, !dbg !43
  %236 = insertelement <2 x float> %235, float %227, i64 1, !dbg !43
  %237 = fmul <2 x float> %234, %236, !dbg !43
  %238 = fmul <2 x float> %237, %223, !dbg !44
  %239 = fadd <2 x float> %238, %226, !dbg !45
  %240 = insertelement <2 x i32> poison, i32 %213, i64 0, !dbg !17
  %241 = insertelement <2 x i32> %240, i32 %191, i64 1, !dbg !17
  %242 = bitcast <2 x i32> %241 to <2 x float>, !dbg !17
  %243 = fsub <2 x float> %242, %194, !dbg !42
  %244 = insertelement <2 x float> poison, float %128, i64 0, !dbg !43
  %245 = insertelement <2 x float> %244, float %228, i64 1, !dbg !43
  %246 = fmul <2 x float> %243, %245, !dbg !43
  %247 = fmul <2 x float> %246, %216, !dbg !44
  %248 = fadd <2 x float> %247, %219, !dbg !45
  %249 = insertelement <2 x i32> poison, i32 %206, i64 0, !dbg !17
  %250 = insertelement <2 x i32> %249, i32 %187, i64 1, !dbg !17
  %251 = bitcast <2 x i32> %250 to <2 x float>, !dbg !17
  %252 = fsub <2 x float> %251, %190, !dbg !42
  %253 = insertelement <2 x float> poison, float %129, i64 0, !dbg !43
  %254 = insertelement <2 x float> %253, float %229, i64 1, !dbg !43
  %255 = fmul <2 x float> %252, %254, !dbg !43
  %256 = fmul <2 x float> %255, %209, !dbg !44
  %257 = fadd <2 x float> %256, %212, !dbg !45
  %258 = insertelement <2 x i32> poison, i32 %199, i64 0, !dbg !17
  %259 = insertelement <2 x i32> %258, i32 %183, i64 1, !dbg !17
  %260 = bitcast <2 x i32> %259 to <2 x float>, !dbg !17
  %261 = fsub <2 x float> %260, %186, !dbg !42
  %262 = insertelement <2 x float> poison, float %130, i64 0, !dbg !43
  %263 = insertelement <2 x float> %262, float %230, i64 1, !dbg !43
  %264 = fmul <2 x float> %261, %263, !dbg !43
  %265 = fmul <2 x float> %264, %202, !dbg !44
  %266 = fadd <2 x float> %265, %205, !dbg !45
  %shift = shufflevector <2 x float> %239, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %267 = fadd <2 x float> %239, %shift, !dbg !46
  %shift36 = shufflevector <2 x float> %248, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %268 = fadd <2 x float> %248, %shift36, !dbg !46
  %shift37 = shufflevector <2 x float> %257, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %269 = fadd <2 x float> %257, %shift37, !dbg !46
  %shift38 = shufflevector <2 x float> %266, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %270 = fadd <2 x float> %266, %shift38, !dbg !46
  %271 = getelementptr float, ptr addrspace(1) %10, i64 %21, !dbg !47
  %bc = bitcast <2 x float> %267 to <2 x i32>, !dbg !48
  %272 = extractelement <2 x i32> %bc, i64 0, !dbg !48
  %bc39 = bitcast <2 x float> %268 to <2 x i32>, !dbg !48
  %273 = extractelement <2 x i32> %bc39, i64 0, !dbg !48
  %bc40 = bitcast <2 x float> %269 to <2 x i32>, !dbg !48
  %274 = extractelement <2 x i32> %bc40, i64 0, !dbg !48
  %bc41 = bitcast <2 x float> %270 to <2 x i32>, !dbg !48
  %275 = extractelement <2 x i32> %bc41, i64 0, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %272, i32 %273, i32 %274, i32 %275, ptr addrspace(1) %271, i1 true) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyndduc7kmvngibm74rgfzjsznma2pzxhotyysd7t6qsgpn4qhbe.py", directory: "inductor_cache/yn")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 39, column: 26, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 27, scope: !7)
!41 = !DILocation(line: 50, column: 19, scope: !7)
!42 = !DILocation(line: 36, column: 18, scope: !7)
!43 = !DILocation(line: 44, column: 19, scope: !7)
!44 = !DILocation(line: 45, column: 20, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 55, column: 20, scope: !7)
!47 = !DILocation(line: 56, column: 25, scope: !7)
!48 = !DILocation(line: 56, column: 37, scope: !7)
!49 = !DILocation(line: 56, column: 4, scope: !7)
