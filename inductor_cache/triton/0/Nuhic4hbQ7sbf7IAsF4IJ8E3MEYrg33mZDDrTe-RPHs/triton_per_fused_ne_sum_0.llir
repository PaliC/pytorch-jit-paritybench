; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_ne_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %0, i64 %10, !dbg !11
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #4, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !12
  %17 = insertelement <4 x i32> poison, i32 %13, i64 0, !dbg !12
  %18 = insertelement <4 x i32> %17, i32 %14, i64 1, !dbg !12
  %19 = insertelement <4 x i32> %18, i32 %15, i64 2, !dbg !12
  %20 = insertelement <4 x i32> %19, i32 %16, i64 3, !dbg !12
  %21 = bitcast <4 x i32> %20 to <4 x float>, !dbg !12
  %22 = fcmp une <4 x float> %21, splat (float 2.550000e+02), !dbg !13
  %23 = bitcast <4 x i1> %22 to i4, !dbg !14
  %24 = tail call range(i4 0, 5) i4 @llvm.ctpop.i4(i4 %23), !dbg !14
  %25 = zext nneg i4 %24 to i64, !dbg !14
  %26 = zext nneg i4 %24 to i32, !dbg !19
  %27 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %26, i32 16, i32 31), !dbg !19
  %28 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !19
  %29 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !19
  %30 = insertelement <2 x i32> %29, i32 %28, i64 1, !dbg !19
  %31 = bitcast <2 x i32> %30 to i64, !dbg !19
  %32 = add i64 %25, %31, !dbg !14
  %extelt.offset = lshr i64 %32, 32, !dbg !19
  %33 = trunc nuw i64 %extelt.offset to i32, !dbg !19
  %34 = trunc i64 %32 to i32, !dbg !19
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 8, i32 31), !dbg !19
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 8, i32 31), !dbg !19
  %37 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !19
  %38 = insertelement <2 x i32> %37, i32 %36, i64 1, !dbg !19
  %39 = bitcast <2 x i32> %38 to i64, !dbg !19
  %40 = add i64 %32, %39, !dbg !14
  %extelt.offset1 = lshr i64 %40, 32, !dbg !19
  %41 = trunc nuw i64 %extelt.offset1 to i32, !dbg !19
  %42 = trunc i64 %40 to i32, !dbg !19
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 4, i32 31), !dbg !19
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 4, i32 31), !dbg !19
  %45 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !19
  %46 = insertelement <2 x i32> %45, i32 %44, i64 1, !dbg !19
  %47 = bitcast <2 x i32> %46 to i64, !dbg !19
  %48 = add i64 %40, %47, !dbg !14
  %extelt.offset2 = lshr i64 %48, 32, !dbg !19
  %49 = trunc nuw i64 %extelt.offset2 to i32, !dbg !19
  %50 = trunc i64 %48 to i32, !dbg !19
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 2, i32 31), !dbg !19
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 2, i32 31), !dbg !19
  %53 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !19
  %54 = insertelement <2 x i32> %53, i32 %52, i64 1, !dbg !19
  %55 = bitcast <2 x i32> %54 to i64, !dbg !19
  %56 = add i64 %48, %55, !dbg !14
  %extelt.offset3 = lshr i64 %56, 32, !dbg !19
  %57 = trunc nuw i64 %extelt.offset3 to i32, !dbg !19
  %58 = trunc i64 %56 to i32, !dbg !19
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !19
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 1, i32 31), !dbg !19
  %61 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !19
  %62 = insertelement <2 x i32> %61, i32 %60, i64 1, !dbg !19
  %63 = bitcast <2 x i32> %62 to i64, !dbg !19
  %64 = add i64 %56, %63, !dbg !14
  %65 = icmp eq i32 %6, 0, !dbg !19
  %66 = and i32 %7, 1, !dbg !19
  %67 = zext nneg i32 %66 to i64, !dbg !19
  %68 = getelementptr i64, ptr addrspace(3) @global_smem, i64 %67, !dbg !19
  %69 = insertelement <1 x i64> poison, i64 %64, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %68, <1 x i64> %69, i1 %65) #4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %70 = icmp slt i32 %5, 2, !dbg !19
  %71 = sext i32 %5 to i64, !dbg !19
  %72 = getelementptr i64, ptr addrspace(3) @global_smem, i64 %71, !dbg !19
  %73 = tail call i64 asm sideeffect "@$2 ld.shared.b64 $0, [ $1 + 0 ];", "=l,r,b"(ptr addrspace(3) %72, i1 %70) #4, !dbg !19
  %extelt.offset4 = lshr i64 %73, 32, !dbg !19
  %74 = trunc nuw i64 %extelt.offset4 to i32, !dbg !19
  %75 = trunc i64 %73 to i32, !dbg !19
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !19
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !19
  %78 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !19
  %79 = insertelement <2 x i32> %78, i32 %77, i64 1, !dbg !19
  %80 = bitcast <2 x i32> %79 to i64, !dbg !19
  %81 = add i64 %73, %80, !dbg !14
  %82 = and i32 %5, 1, !dbg !19
  %83 = icmp eq i32 %82, 0, !dbg !19
  %84 = and i1 %70, %83, !dbg !19
  %85 = insertelement <1 x i64> poison, i64 %81, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %72, <1 x i64> %85, i1 %84) #4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %86 = load i64, ptr addrspace(3) @global_smem, align 16, !dbg !19
  %87 = getelementptr i1, ptr addrspace(1) %1, i64 %10, !dbg !20
  %88 = zext <4 x i1> %22 to <4 x i8>, !dbg !21
  %89 = bitcast <4 x i8> %88 to i32, !dbg !21
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %89, ptr addrspace(1) %87, i1 true) #4, !dbg !21
  %urem = and i32 %5, 63, !dbg !22
  %90 = icmp eq i32 %urem, 0, !dbg !22
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %86, ptr addrspace(1) %2, i1 %90) #4, !dbg !22
  ret void, !dbg !23
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i4 @llvm.ctpop.i4(i4) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjhguoojulfm6q2jpyei5iabio5uxu5xyzscbq62ar7fcyy3a374.py", directory: "inductor_cache/jh")
!4 = !{ptr @triton_per_fused_ne_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_ne_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_ne_sum_0", linkageName: "triton_per_fused_ne_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 33, column: 19, scope: !7)
!14 = !DILocation(line: 256, column: 15, scope: !15, inlinedAt: !18)
!15 = distinct !DILexicalBlockFile(scope: !17, file: !16, discriminator: 0)
!16 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!17 = distinct !DILexicalBlockFile(scope: !7, file: !16, discriminator: 0)
!18 = !DILocation(line: 36, column: 57, scope: !7)
!19 = !DILocation(line: 267, column: 36, scope: !17, inlinedAt: !18)
!20 = !DILocation(line: 37, column: 25, scope: !7)
!21 = !DILocation(line: 37, column: 63, scope: !7)
!22 = !DILocation(line: 38, column: 59, scope: !7)
!23 = !DILocation(line: 38, column: 4, scope: !7)
