; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__weight_norm_interface_convolution_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 28, !dbg !12
  %13 = lshr i32 %10, 4, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %14, 8, !dbg !12
  %16 = or disjoint i32 %14, 16, !dbg !12
  %17 = or disjoint i32 %14, 24, !dbg !12
  %18 = or disjoint i32 %9, %12, !dbg !13
  %19 = or disjoint i32 %9, %14, !dbg !13
  %20 = or disjoint i32 %9, %15, !dbg !13
  %21 = or disjoint i32 %9, %16, !dbg !13
  %22 = or disjoint i32 %9, %17, !dbg !13
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %24 = shl i32 %23, 4, !dbg !15
  %25 = lshr i32 %10, 3, !dbg !16
  %26 = and i32 %25, 15, !dbg !16
  %27 = and i32 %10, 15, !dbg !16
  %28 = or disjoint i32 %24, %26, !dbg !17
  %29 = or disjoint i32 %24, %27, !dbg !17
  %30 = icmp slt i32 %28, 9, !dbg !18
  %31 = icmp slt i32 %29, 9, !dbg !18
  %.frozen = freeze i32 %18, !dbg !19
  %32 = sdiv i32 %.frozen, 64, !dbg !19
  %33 = mul i32 %32, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %33, !dbg !20
  %34 = shl i32 %28, 6, !dbg !21
  %35 = add i32 %34, %.decomposed, !dbg !22
  %36 = mul i32 %32, 576, !dbg !23
  %37 = add i32 %35, %36, !dbg !24
  %38 = sext i32 %37 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !25
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %30) #2, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !26
  %45 = bitcast i32 %41 to float, !dbg !26
  %46 = bitcast i32 %42 to float, !dbg !26
  %47 = bitcast i32 %43 to float, !dbg !26
  %48 = bitcast i32 %44 to float, !dbg !26
  %49 = sext i32 %32 to i64, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !27
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #2, !dbg !28
  %52 = bitcast i32 %51 to float, !dbg !28
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #2, !dbg !28
  %54 = bitcast i32 %53 to float, !dbg !28
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #2, !dbg !28
  %56 = bitcast i32 %55 to float, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #2, !dbg !28
  %58 = bitcast i32 %57 to float, !dbg !28
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !29
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #2, !dbg !30
  %61 = bitcast i32 %60 to float, !dbg !30
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #2, !dbg !30
  %63 = bitcast i32 %62 to float, !dbg !30
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #2, !dbg !30
  %65 = bitcast i32 %64 to float, !dbg !30
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #2, !dbg !30
  %67 = bitcast i32 %66 to float, !dbg !30
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float %61) #2, !dbg !31
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float %63) #2, !dbg !31
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float %65) #2, !dbg !31
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float %67) #2, !dbg !31
  %72 = fmul float %68, %45, !dbg !32
  %73 = fmul float %69, %46, !dbg !32
  %74 = fmul float %70, %47, !dbg !32
  %75 = fmul float %71, %48, !dbg !32
  %76 = mul i32 %19, 9, !dbg !33
  %77 = mul i32 %20, 9, !dbg !33
  %78 = mul i32 %21, 9, !dbg !33
  %79 = mul i32 %22, 9, !dbg !33
  %80 = add i32 %29, %76, !dbg !34
  %81 = add i32 %29, %77, !dbg !34
  %82 = add i32 %29, %78, !dbg !34
  %83 = add i32 %29, %79, !dbg !34
  %84 = sext i32 %80 to i64, !dbg !35
  %85 = getelementptr float, ptr addrspace(1) %3, i64 %84, !dbg !35
  %86 = sext i32 %81 to i64, !dbg !35
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %86, !dbg !35
  %88 = sext i32 %82 to i64, !dbg !35
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %88, !dbg !35
  %90 = sext i32 %83 to i64, !dbg !35
  %91 = getelementptr float, ptr addrspace(1) %3, i64 %90, !dbg !35
  %92 = shl i32 %10, 6, !dbg !36
  %93 = and i32 %92, 448, !dbg !36
  %94 = or disjoint i32 %93, %26, !dbg !36
  %95 = and i32 %10, 127, !dbg !36
  %96 = lshr exact i32 %93, 2, !dbg !36
  %97 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %96, !dbg !36
  %98 = getelementptr float, ptr addrspace(3) %97, i32 %94, !dbg !36
  %99 = bitcast float %72 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !36
  %100 = or disjoint i32 %94, 16, !dbg !36
  %101 = lshr i32 %100, 4, !dbg !36
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !36
  %103 = getelementptr float, ptr addrspace(3) %102, i32 %100, !dbg !36
  %104 = bitcast float %73 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #2, !dbg !36
  %105 = or disjoint i32 %94, 32, !dbg !36
  %106 = lshr i32 %105, 4, !dbg !36
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !36
  %108 = getelementptr float, ptr addrspace(3) %107, i32 %105, !dbg !36
  %109 = bitcast float %74 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !36
  %110 = or disjoint i32 %94, 48, !dbg !36
  %111 = lshr i32 %110, 4, !dbg !36
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !36
  %113 = getelementptr float, ptr addrspace(3) %112, i32 %110, !dbg !36
  %114 = bitcast float %75 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %115 = lshr i32 %95, 4, !dbg !36
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %115, !dbg !36
  %117 = getelementptr inbounds float, ptr addrspace(3) %116, i32 %95, !dbg !36
  %118 = load i32, ptr addrspace(3) %117, align 4, !dbg !36
  %119 = or disjoint i32 %95, 128, !dbg !36
  %120 = lshr i32 %119, 4, !dbg !36
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %120, !dbg !36
  %122 = getelementptr inbounds float, ptr addrspace(3) %121, i32 %119, !dbg !36
  %123 = load i32, ptr addrspace(3) %122, align 4, !dbg !36
  %124 = or disjoint i32 %95, 256, !dbg !36
  %125 = lshr i32 %124, 4, !dbg !36
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %125, !dbg !36
  %127 = getelementptr inbounds float, ptr addrspace(3) %126, i32 %124, !dbg !36
  %128 = load i32, ptr addrspace(3) %127, align 4, !dbg !36
  %129 = or disjoint i32 %95, 384, !dbg !36
  %130 = lshr i32 %129, 4, !dbg !36
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %130, !dbg !36
  %132 = getelementptr inbounds float, ptr addrspace(3) %131, i32 %129, !dbg !36
  %133 = load i32, ptr addrspace(3) %132, align 4, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %118, ptr addrspace(1) %85, i1 %31) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %87, i1 %31) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %128, ptr addrspace(1) %89, i1 %31) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %133, ptr addrspace(1) %91, i1 %31) #2, !dbg !36
  %134 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !37
  %135 = bitcast float %72 to i32, !dbg !38
  %136 = bitcast float %73 to i32, !dbg !38
  %137 = bitcast float %74 to i32, !dbg !38
  %138 = bitcast float %75 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %135, i32 %136, i32 %137, i32 %138, ptr addrspace(1) %134, i1 %30) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfdvculsvi47cxt2secrnlupbugmkxsnhnhraw6mbyjhggbomdjr.py", directory: "inductor_cache/fd")
!4 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__weight_norm_interface_convolution_8", linkageName: "triton_poi_fused__weight_norm_interface_convolution_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 47, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 52, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 32, scope: !7)
!34 = !DILocation(line: 37, column: 30, scope: !7)
!35 = !DILocation(line: 37, column: 25, scope: !7)
!36 = !DILocation(line: 37, column: 43, scope: !7)
!37 = !DILocation(line: 38, column: 25, scope: !7)
!38 = !DILocation(line: 38, column: 53, scope: !7)
!39 = !DILocation(line: 38, column: 4, scope: !7)
